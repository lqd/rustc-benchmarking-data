<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (400,275 samples, 0.15%)</title><rect x="12.8425%" y="149" width="0.1499%" height="15" fill="rgb(227,0,7)"/><text x="13.0925%" y="159.50"></text></g><g><title>item_attrs (363,327 samples, 0.14%)</title><rect x="13.4126%" y="117" width="0.1361%" height="15" fill="rgb(217,0,24)"/><text x="13.6626%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (350,777 samples, 0.13%)</title><rect x="13.4173%" y="101" width="0.1314%" height="15" fill="rgb(221,193,54)"/><text x="13.6673%" y="111.50"></text></g><g><title>codegen_fn_attrs (538,428 samples, 0.20%)</title><rect x="13.3580%" y="133" width="0.2017%" height="15" fill="rgb(248,212,6)"/><text x="13.6080%" y="143.50"></text></g><g><title>is_copy_raw (1,568,626 samples, 0.59%)</title><rect x="16.3448%" y="101" width="0.5876%" height="15" fill="rgb(208,68,35)"/><text x="16.5948%" y="111.50"></text></g><g><title>evaluate_obligation (1,292,932 samples, 0.48%)</title><rect x="16.4480%" y="85" width="0.4843%" height="15" fill="rgb(232,128,0)"/><text x="16.6980%" y="95.50"></text></g><g><title>needs_drop_raw (2,023,708 samples, 0.76%)</title><rect x="16.1765%" y="117" width="0.7580%" height="15" fill="rgb(207,160,47)"/><text x="16.4265%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (512,132 samples, 0.19%)</title><rect x="17.0724%" y="101" width="0.1918%" height="15" fill="rgb(228,23,34)"/><text x="17.3224%" y="111.50"></text></g><g><title>specialization_graph_of (1,047,831 samples, 0.39%)</title><rect x="17.2911%" y="101" width="0.3925%" height="15" fill="rgb(218,30,26)"/><text x="17.5411%" y="111.50"></text></g><g><title>impl_trait_ref (521,678 samples, 0.20%)</title><rect x="17.4882%" y="85" width="0.1954%" height="15" fill="rgb(220,122,19)"/><text x="17.7382%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (450,017 samples, 0.17%)</title><rect x="17.5150%" y="69" width="0.1686%" height="15" fill="rgb(250,228,42)"/><text x="17.7650%" y="79.50"></text></g><g><title>resolve_instance (2,161,311 samples, 0.81%)</title><rect x="16.9345%" y="117" width="0.8096%" height="15" fill="rgb(240,193,28)"/><text x="17.1845%" y="127.50"></text></g><g><title>thir_body (2,896,763 samples, 1.09%)</title><rect x="17.7626%" y="117" width="1.0851%" height="15" fill="rgb(216,20,37)"/><text x="18.0126%" y="127.50"></text></g><g><title>mir_const (17,751,730 samples, 6.65%)</title><rect x="12.2245%" y="165" width="6.6495%" height="15" fill="rgb(206,188,39)"/><text x="12.4745%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (15,701,387 samples, 5.88%)</title><rect x="12.9925%" y="149" width="5.8814%" height="15" fill="rgb(217,207,13)"/><text x="13.2425%" y="159.50">unsafet..</text></g><g><title>mir_built (14,187,059 samples, 5.31%)</title><rect x="13.5597%" y="133" width="5.3142%" height="15" fill="rgb(231,73,38)"/><text x="13.8097%" y="143.50">mir_bui..</text></g><g><title>thir_body (268,332 samples, 0.10%)</title><rect x="19.5084%" y="101" width="0.1005%" height="15" fill="rgb(225,20,46)"/><text x="19.7584%" y="111.50"></text></g><g><title>mir_const (1,445,253 samples, 0.54%)</title><rect x="19.0710%" y="149" width="0.5414%" height="15" fill="rgb(210,31,41)"/><text x="19.3210%" y="159.50"></text></g><g><title>unsafety_check_result (1,161,401 samples, 0.44%)</title><rect x="19.1773%" y="133" width="0.4350%" height="15" fill="rgb(221,200,47)"/><text x="19.4273%" y="143.50"></text></g><g><title>mir_built (1,018,451 samples, 0.38%)</title><rect x="19.2308%" y="117" width="0.3815%" height="15" fill="rgb(226,26,5)"/><text x="19.4808%" y="127.50"></text></g><g><title>mir_const_qualif (2,064,823 samples, 0.77%)</title><rect x="18.8739%" y="165" width="0.7734%" height="15" fill="rgb(249,33,26)"/><text x="19.1239%" y="175.50"></text></g><g><title>mir_promoted (21,711,178 samples, 8.13%)</title><rect x="11.5148%" y="181" width="8.1326%" height="15" fill="rgb(235,183,28)"/><text x="11.7648%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (655,425 samples, 0.25%)</title><rect x="19.6484%" y="181" width="0.2455%" height="15" fill="rgb(221,5,38)"/><text x="19.8984%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (1,541,862 samples, 0.58%)</title><rect x="19.8939%" y="181" width="0.5776%" height="15" fill="rgb(247,18,42)"/><text x="20.1439%" y="191.50"></text></g><g><title>normalize_projection_ty (1,100,890 samples, 0.41%)</title><rect x="20.0591%" y="165" width="0.4124%" height="15" fill="rgb(241,131,45)"/><text x="20.3091%" y="175.50"></text></g><g><title>type_op_prove_predicate (3,491,619 samples, 1.31%)</title><rect x="20.6197%" y="181" width="1.3079%" height="15" fill="rgb(249,31,29)"/><text x="20.8697%" y="191.50"></text></g><g><title>MIR_borrow_checking (57,151,061 samples, 21.41%)</title><rect x="0.5251%" y="213" width="21.4077%" height="15" fill="rgb(225,111,53)"/><text x="0.7751%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (56,686,597 samples, 21.23%)</title><rect x="0.6990%" y="197" width="21.2337%" height="15" fill="rgb(238,160,17)"/><text x="0.9490%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (925,650 samples, 0.35%)</title><rect x="21.9327%" y="213" width="0.3467%" height="15" fill="rgb(214,148,48)"/><text x="22.1827%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (788,917 samples, 0.30%)</title><rect x="21.9840%" y="197" width="0.2955%" height="15" fill="rgb(232,36,49)"/><text x="22.2340%" y="207.50"></text></g><g><title>hir_module_items (357,724 samples, 0.13%)</title><rect x="22.2795%" y="213" width="0.1340%" height="15" fill="rgb(209,103,24)"/><text x="22.5295%" y="223.50"></text></g><g><title>item_attrs (270,023 samples, 0.10%)</title><rect x="22.7502%" y="133" width="0.1011%" height="15" fill="rgb(229,88,8)"/><text x="23.0002%" y="143.50"></text></g><g><title>codegen_fn_attrs (339,584 samples, 0.13%)</title><rect x="22.7407%" y="149" width="0.1272%" height="15" fill="rgb(213,181,19)"/><text x="22.9907%" y="159.50"></text></g><g><title>should_inherit_track_caller (470,154 samples, 0.18%)</title><rect x="22.6957%" y="165" width="0.1761%" height="15" fill="rgb(254,191,54)"/><text x="22.9457%" y="175.50"></text></g><g><title>codegen_fn_attrs (666,745 samples, 0.25%)</title><rect x="22.6290%" y="181" width="0.2497%" height="15" fill="rgb(241,83,37)"/><text x="22.8790%" y="191.50"></text></g><g><title>check_mod_attrs (1,196,721 samples, 0.45%)</title><rect x="22.4305%" y="197" width="0.4483%" height="15" fill="rgb(233,36,39)"/><text x="22.6805%" y="207.50"></text></g><g><title>lookup_deprecation_entry (292,886 samples, 0.11%)</title><rect x="23.1598%" y="181" width="0.1097%" height="15" fill="rgb(226,3,54)"/><text x="23.4098%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (753,904 samples, 0.28%)</title><rect x="23.0389%" y="197" width="0.2824%" height="15" fill="rgb(245,192,40)"/><text x="23.2889%" y="207.50"></text></g><g><title>misc_checking_1 (2,522,618 samples, 0.94%)</title><rect x="22.4136%" y="213" width="0.9449%" height="15" fill="rgb(238,167,29)"/><text x="22.6636%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (1,138,083 samples, 0.43%)</title><rect x="23.3591%" y="197" width="0.4263%" height="15" fill="rgb(232,182,51)"/><text x="23.6091%" y="207.50"></text></g><g><title>check_mod_liveness (887,270 samples, 0.33%)</title><rect x="23.4531%" y="181" width="0.3324%" height="15" fill="rgb(231,60,39)"/><text x="23.7031%" y="191.50"></text></g><g><title>misc_checking_2 (2,353,266 samples, 0.88%)</title><rect x="23.3585%" y="213" width="0.8815%" height="15" fill="rgb(208,69,12)"/><text x="23.6085%" y="223.50"></text></g><g><title>match_checking (1,213,663 samples, 0.45%)</title><rect x="23.7854%" y="197" width="0.4546%" height="15" fill="rgb(235,93,37)"/><text x="24.0354%" y="207.50"></text></g><g><title>check_match (1,147,642 samples, 0.43%)</title><rect x="23.8101%" y="181" width="0.4299%" height="15" fill="rgb(213,116,39)"/><text x="24.0601%" y="191.50"></text></g><g><title>check_private_in_public (442,574 samples, 0.17%)</title><rect x="24.2439%" y="197" width="0.1658%" height="15" fill="rgb(222,207,29)"/><text x="24.4939%" y="207.50"></text></g><g><title>death_checking (929,460 samples, 0.35%)</title><rect x="24.4097%" y="197" width="0.3482%" height="15" fill="rgb(206,96,30)"/><text x="24.6597%" y="207.50"></text></g><g><title>eval_to_const_value_raw (604,607 samples, 0.23%)</title><rect x="26.1758%" y="101" width="0.2265%" height="15" fill="rgb(218,138,4)"/><text x="26.4258%" y="111.50"></text></g><g><title>eval_to_const_value_raw (603,357 samples, 0.23%)</title><rect x="26.1762%" y="85" width="0.2260%" height="15" fill="rgb(250,191,14)"/><text x="26.4262%" y="95.50"></text></g><g><title>eval_to_allocation_raw (600,407 samples, 0.22%)</title><rect x="26.1773%" y="69" width="0.2249%" height="15" fill="rgb(239,60,40)"/><text x="26.4273%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,020,345 samples, 1.13%)</title><rect x="25.2730%" y="165" width="1.1314%" height="15" fill="rgb(206,27,48)"/><text x="25.5230%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,005,144 samples, 1.13%)</title><rect x="25.2787%" y="149" width="1.1257%" height="15" fill="rgb(225,35,8)"/><text x="25.5287%" y="159.50"></text></g><g><title>eval_to_allocation_raw (2,979,723 samples, 1.12%)</title><rect x="25.2882%" y="133" width="1.1161%" height="15" fill="rgb(250,213,24)"/><text x="25.5382%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (635,958 samples, 0.24%)</title><rect x="26.1661%" y="117" width="0.2382%" height="15" fill="rgb(247,123,22)"/><text x="26.4161%" y="127.50"></text></g><g><title>param_env (543,944 samples, 0.20%)</title><rect x="26.4043%" y="165" width="0.2038%" height="15" fill="rgb(231,138,38)"/><text x="26.6543%" y="175.50"></text></g><g><title>crate_lints (6,078,827 samples, 2.28%)</title><rect x="24.7588%" y="181" width="2.2770%" height="15" fill="rgb(231,145,46)"/><text x="25.0088%" y="191.50">c..</text></g><g><title>type_of (1,130,581 samples, 0.42%)</title><rect x="26.6124%" y="165" width="0.4235%" height="15" fill="rgb(251,118,11)"/><text x="26.8624%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (896,008 samples, 0.34%)</title><rect x="26.7002%" y="149" width="0.3356%" height="15" fill="rgb(217,147,25)"/><text x="26.9502%" y="159.50"></text></g><g><title>lint_checking (7,310,281 samples, 2.74%)</title><rect x="24.7579%" y="197" width="2.7383%" height="15" fill="rgb(247,81,37)"/><text x="25.0079%" y="207.50">li..</text></g><g><title>module_lints (1,228,854 samples, 0.46%)</title><rect x="27.0359%" y="181" width="0.4603%" height="15" fill="rgb(209,12,38)"/><text x="27.2859%" y="191.50"></text></g><g><title>lint_mod (1,215,284 samples, 0.46%)</title><rect x="27.0409%" y="165" width="0.4552%" height="15" fill="rgb(227,1,9)"/><text x="27.2909%" y="175.50"></text></g><g><title>privacy_access_levels (532,485 samples, 0.20%)</title><rect x="27.4962%" y="197" width="0.1995%" height="15" fill="rgb(248,47,43)"/><text x="27.7462%" y="207.50"></text></g><g><title>privacy_checking_modules (1,754,379 samples, 0.66%)</title><rect x="27.6956%" y="197" width="0.6572%" height="15" fill="rgb(221,10,30)"/><text x="27.9456%" y="207.50"></text></g><g><title>check_mod_privacy (1,744,459 samples, 0.65%)</title><rect x="27.6993%" y="181" width="0.6534%" height="15" fill="rgb(210,229,1)"/><text x="27.9493%" y="191.50"></text></g><g><title>misc_checking_3 (11,001,691 samples, 4.12%)</title><rect x="24.2400%" y="213" width="4.1210%" height="15" fill="rgb(222,148,37)"/><text x="24.4900%" y="223.50">misc..</text></g><g><title>impl_trait_ref (348,415 samples, 0.13%)</title><rect x="28.4934%" y="117" width="0.1305%" height="15" fill="rgb(234,67,33)"/><text x="28.7434%" y="127.50"></text></g><g><title>adt_destructor (515,796 samples, 0.19%)</title><rect x="28.4416%" y="165" width="0.1932%" height="15" fill="rgb(247,98,35)"/><text x="28.6916%" y="175.50"></text></g><g><title>coherent_trait (507,546 samples, 0.19%)</title><rect x="28.4447%" y="149" width="0.1901%" height="15" fill="rgb(247,138,52)"/><text x="28.6947%" y="159.50"></text></g><g><title>specialization_graph_of (505,246 samples, 0.19%)</title><rect x="28.4455%" y="133" width="0.1893%" height="15" fill="rgb(213,79,30)"/><text x="28.6955%" y="143.50"></text></g><g><title>impl_parent (2,540,935 samples, 0.95%)</title><rect x="30.2788%" y="149" width="0.9518%" height="15" fill="rgb(246,177,23)"/><text x="30.5288%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,469,633 samples, 0.55%)</title><rect x="30.6800%" y="133" width="0.5505%" height="15" fill="rgb(230,62,27)"/><text x="30.9300%" y="143.50"></text></g><g><title>impl_trait_ref (5,132,252 samples, 1.92%)</title><rect x="31.2310%" y="149" width="1.9224%" height="15" fill="rgb(216,154,8)"/><text x="31.4810%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,079,760 samples, 1.53%)</title><rect x="31.6253%" y="133" width="1.5282%" height="15" fill="rgb(244,35,45)"/><text x="31.8753%" y="143.50"></text></g><g><title>trait_impls_of (891,289 samples, 0.33%)</title><rect x="33.1859%" y="149" width="0.3339%" height="15" fill="rgb(251,115,12)"/><text x="33.4359%" y="159.50"></text></g><g><title>implementations_of_trait (268,532 samples, 0.10%)</title><rect x="33.4191%" y="133" width="0.1006%" height="15" fill="rgb(240,54,50)"/><text x="33.6691%" y="143.50"></text></g><g><title>coherent_trait (13,597,670 samples, 5.09%)</title><rect x="28.4267%" y="181" width="5.0934%" height="15" fill="rgb(233,84,52)"/><text x="28.6767%" y="191.50">cohere..</text></g><g><title>specialization_graph_of (12,935,511 samples, 4.85%)</title><rect x="28.6747%" y="165" width="4.8454%" height="15" fill="rgb(207,117,47)"/><text x="28.9247%" y="175.50">specia..</text></g><g><title>coherence_checking (13,712,031 samples, 5.14%)</title><rect x="28.4179%" y="197" width="5.1363%" height="15" fill="rgb(249,43,39)"/><text x="28.6679%" y="207.50">cohere..</text></g><g><title>associated_item (695,535 samples, 0.26%)</title><rect x="58.7730%" y="133" width="0.2605%" height="15" fill="rgb(209,38,44)"/><text x="59.0230%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (568,975 samples, 0.21%)</title><rect x="58.8204%" y="117" width="0.2131%" height="15" fill="rgb(236,212,23)"/><text x="59.0704%" y="127.50"></text></g><g><title>associated_items (957,401 samples, 0.36%)</title><rect x="58.6873%" y="149" width="0.3586%" height="15" fill="rgb(242,79,21)"/><text x="58.9373%" y="159.50"></text></g><g><title>adt_dtorck_constraint (455,945 samples, 0.17%)</title><rect x="59.2623%" y="133" width="0.1708%" height="15" fill="rgb(211,96,35)"/><text x="59.5123%" y="143.50"></text></g><g><title>dropck_outlives (916,396 samples, 0.34%)</title><rect x="59.0955%" y="149" width="0.3433%" height="15" fill="rgb(253,215,40)"/><text x="59.3455%" y="159.50"></text></g><g><title>mir_borrowck (329,685 samples, 0.12%)</title><rect x="59.5758%" y="85" width="0.1235%" height="15" fill="rgb(211,81,21)"/><text x="59.8258%" y="95.50"></text></g><g><title>mir_for_ctfe (476,505 samples, 0.18%)</title><rect x="59.5212%" y="117" width="0.1785%" height="15" fill="rgb(208,190,38)"/><text x="59.7712%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (436,935 samples, 0.16%)</title><rect x="59.5360%" y="101" width="0.1637%" height="15" fill="rgb(235,213,38)"/><text x="59.7860%" y="111.50"></text></g><g><title>eval_to_allocation_raw (816,478 samples, 0.31%)</title><rect x="59.4465%" y="133" width="0.3058%" height="15" fill="rgb(237,122,38)"/><text x="59.6965%" y="143.50"></text></g><g><title>mir_borrowck (642,526 samples, 0.24%)</title><rect x="60.1186%" y="69" width="0.2407%" height="15" fill="rgb(244,218,35)"/><text x="60.3686%" y="79.50"></text></g><g><title>mir_for_ctfe (940,390 samples, 0.35%)</title><rect x="60.0081%" y="101" width="0.3523%" height="15" fill="rgb(240,68,47)"/><text x="60.2581%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (842,409 samples, 0.32%)</title><rect x="60.0448%" y="85" width="0.3156%" height="15" fill="rgb(210,16,53)"/><text x="60.2948%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,722,858 samples, 1.02%)</title><rect x="59.4388%" y="149" width="1.0199%" height="15" fill="rgb(235,124,12)"/><text x="59.6888%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,886,020 samples, 0.71%)</title><rect x="59.7523%" y="133" width="0.7065%" height="15" fill="rgb(224,169,11)"/><text x="60.0023%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,861,430 samples, 0.70%)</title><rect x="59.7615%" y="117" width="0.6973%" height="15" fill="rgb(250,166,2)"/><text x="60.0115%" y="127.50"></text></g><g><title>generics_of (1,766,638 samples, 0.66%)</title><rect x="64.4488%" y="133" width="0.6617%" height="15" fill="rgb(242,216,29)"/><text x="64.6988%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (1,162,493 samples, 0.44%)</title><rect x="64.6751%" y="117" width="0.4354%" height="15" fill="rgb(230,116,27)"/><text x="64.9251%" y="127.50"></text></g><g><title>impl_trait_ref (1,733,907 samples, 0.65%)</title><rect x="65.2164%" y="133" width="0.6495%" height="15" fill="rgb(228,99,48)"/><text x="65.4664%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,361,419 samples, 0.51%)</title><rect x="65.3559%" y="117" width="0.5100%" height="15" fill="rgb(253,11,6)"/><text x="65.6059%" y="127.50"></text></g><g><title>predicates_of (1,341,549 samples, 0.50%)</title><rect x="65.8952%" y="133" width="0.5025%" height="15" fill="rgb(247,143,39)"/><text x="66.1452%" y="143.50"></text></g><g><title>predicates_defined_on (756,320 samples, 0.28%)</title><rect x="66.1144%" y="117" width="0.2833%" height="15" fill="rgb(236,97,10)"/><text x="66.3644%" y="127.50"></text></g><g><title>specializes (2,982,570 samples, 1.12%)</title><rect x="66.3977%" y="133" width="1.1172%" height="15" fill="rgb(233,208,19)"/><text x="66.6477%" y="143.50"></text></g><g><title>param_env (1,774,877 samples, 0.66%)</title><rect x="66.8501%" y="117" width="0.6648%" height="15" fill="rgb(216,164,2)"/><text x="67.1001%" y="127.50"></text></g><g><title>def_span (774,388 samples, 0.29%)</title><rect x="67.2249%" y="101" width="0.2901%" height="15" fill="rgb(220,129,5)"/><text x="67.4749%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (680,546 samples, 0.25%)</title><rect x="67.2600%" y="85" width="0.2549%" height="15" fill="rgb(242,17,10)"/><text x="67.5100%" y="95.50"></text></g><g><title>trait_impls_of (774,738 samples, 0.29%)</title><rect x="67.5258%" y="133" width="0.2902%" height="15" fill="rgb(242,107,0)"/><text x="67.7758%" y="143.50"></text></g><g><title>implementations_of_trait (307,785 samples, 0.12%)</title><rect x="67.7007%" y="117" width="0.1153%" height="15" fill="rgb(251,28,31)"/><text x="67.9507%" y="127.50"></text></g><g><title>evaluate_obligation (19,689,040 samples, 7.38%)</title><rect x="60.4588%" y="149" width="7.3751%" height="15" fill="rgb(233,223,10)"/><text x="60.7088%" y="159.50">evaluate_o..</text></g><g><title>generics_of (1,616,998 samples, 0.61%)</title><rect x="67.9416%" y="149" width="0.6057%" height="15" fill="rgb(215,21,27)"/><text x="68.1916%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (1,232,784 samples, 0.46%)</title><rect x="68.0856%" y="133" width="0.4618%" height="15" fill="rgb(232,23,21)"/><text x="68.3356%" y="143.50"></text></g><g><title>item_attrs (313,622 samples, 0.12%)</title><rect x="68.6631%" y="149" width="0.1175%" height="15" fill="rgb(244,5,23)"/><text x="68.9131%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (301,352 samples, 0.11%)</title><rect x="68.6677%" y="133" width="0.1129%" height="15" fill="rgb(226,81,46)"/><text x="68.9177%" y="143.50"></text></g><g><title>evaluate_obligation (329,563 samples, 0.12%)</title><rect x="68.9614%" y="133" width="0.1234%" height="15" fill="rgb(247,70,30)"/><text x="69.2114%" y="143.50"></text></g><g><title>method_autoderef_steps (701,645 samples, 0.26%)</title><rect x="68.8289%" y="149" width="0.2628%" height="15" fill="rgb(212,68,19)"/><text x="69.0789%" y="159.50"></text></g><g><title>param_env (496,917 samples, 0.19%)</title><rect x="69.1295%" y="149" width="0.1861%" height="15" fill="rgb(240,187,13)"/><text x="69.3795%" y="159.50"></text></g><g><title>predicates_of (337,865 samples, 0.13%)</title><rect x="69.1891%" y="133" width="0.1266%" height="15" fill="rgb(223,113,26)"/><text x="69.4391%" y="143.50"></text></g><g><title>predicates_defined_on (323,203 samples, 0.12%)</title><rect x="69.1946%" y="117" width="0.1211%" height="15" fill="rgb(206,192,2)"/><text x="69.4446%" y="127.50"></text></g><g><title>predicates_of (585,436 samples, 0.22%)</title><rect x="69.3259%" y="149" width="0.2193%" height="15" fill="rgb(241,108,4)"/><text x="69.5759%" y="159.50"></text></g><g><title>predicates_defined_on (399,034 samples, 0.15%)</title><rect x="69.3958%" y="133" width="0.1495%" height="15" fill="rgb(247,173,49)"/><text x="69.6458%" y="143.50"></text></g><g><title>evaluate_obligation (1,597,130 samples, 0.60%)</title><rect x="73.7558%" y="133" width="0.5983%" height="15" fill="rgb(224,114,35)"/><text x="74.0058%" y="143.50"></text></g><g><title>typeck (13,129,805 samples, 4.92%)</title><rect x="69.7074%" y="149" width="4.9182%" height="15" fill="rgb(245,159,27)"/><text x="69.9574%" y="159.50">typeck</text></g><g><title>item_bodies_checking (109,690,452 samples, 41.09%)</title><rect x="33.5734%" y="197" width="41.0879%" height="15" fill="rgb(245,172,44)"/><text x="33.8234%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (109,686,012 samples, 41.09%)</title><rect x="33.5750%" y="181" width="41.0863%" height="15" fill="rgb(236,23,11)"/><text x="33.8250%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (109,517,531 samples, 41.02%)</title><rect x="33.6381%" y="165" width="41.0231%" height="15" fill="rgb(205,117,38)"/><text x="33.8881%" y="175.50">typeck</text></g><g><title>evaluate_obligation (412,514 samples, 0.15%)</title><rect x="75.6716%" y="149" width="0.1545%" height="15" fill="rgb(237,72,25)"/><text x="75.9216%" y="159.50"></text></g><g><title>item_types_checking (3,254,566 samples, 1.22%)</title><rect x="74.6613%" y="197" width="1.2191%" height="15" fill="rgb(244,70,9)"/><text x="74.9113%" y="207.50"></text></g><g><title>check_mod_item_types (3,240,996 samples, 1.21%)</title><rect x="74.6664%" y="181" width="1.2140%" height="15" fill="rgb(217,125,39)"/><text x="74.9164%" y="191.50"></text></g><g><title>typeck (1,780,318 samples, 0.67%)</title><rect x="75.2135%" y="165" width="0.6669%" height="15" fill="rgb(235,36,10)"/><text x="75.4635%" y="175.50"></text></g><g><title>fn_sig (609,314 samples, 0.23%)</title><rect x="76.0839%" y="165" width="0.2282%" height="15" fill="rgb(251,123,47)"/><text x="76.3339%" y="175.50"></text></g><g><title>lint_levels (357,824 samples, 0.13%)</title><rect x="76.5540%" y="117" width="0.1340%" height="15" fill="rgb(221,13,13)"/><text x="76.8040%" y="127.50"></text></g><g><title>is_late_bound_map (794,018 samples, 0.30%)</title><rect x="76.3908%" y="149" width="0.2974%" height="15" fill="rgb(238,131,9)"/><text x="76.6408%" y="159.50"></text></g><g><title>resolve_lifetimes (760,878 samples, 0.29%)</title><rect x="76.4032%" y="133" width="0.2850%" height="15" fill="rgb(211,50,8)"/><text x="76.6532%" y="143.50"></text></g><g><title>named_region_map (362,835 samples, 0.14%)</title><rect x="76.6882%" y="149" width="0.1359%" height="15" fill="rgb(245,182,24)"/><text x="76.9382%" y="159.50"></text></g><g><title>resolve_lifetimes (329,475 samples, 0.12%)</title><rect x="76.7007%" y="133" width="0.1234%" height="15" fill="rgb(242,14,37)"/><text x="76.9507%" y="143.50"></text></g><g><title>generics_of (1,392,247 samples, 0.52%)</title><rect x="76.3121%" y="165" width="0.5215%" height="15" fill="rgb(246,228,12)"/><text x="76.5621%" y="175.50"></text></g><g><title>explicit_predicates_of (332,917 samples, 0.12%)</title><rect x="76.9940%" y="133" width="0.1247%" height="15" fill="rgb(213,55,15)"/><text x="77.2440%" y="143.50"></text></g><g><title>predicates_of (1,041,973 samples, 0.39%)</title><rect x="76.8985%" y="165" width="0.3903%" height="15" fill="rgb(209,9,3)"/><text x="77.1485%" y="175.50"></text></g><g><title>predicates_defined_on (941,482 samples, 0.35%)</title><rect x="76.9361%" y="149" width="0.3527%" height="15" fill="rgb(230,59,30)"/><text x="77.1861%" y="159.50"></text></g><g><title>inferred_outlives_of (453,985 samples, 0.17%)</title><rect x="77.1187%" y="133" width="0.1701%" height="15" fill="rgb(209,121,21)"/><text x="77.3687%" y="143.50"></text></g><g><title>inferred_outlives_crate (414,085 samples, 0.16%)</title><rect x="77.1337%" y="117" width="0.1551%" height="15" fill="rgb(220,109,13)"/><text x="77.3837%" y="127.50"></text></g><g><title>type_collecting (3,969,994 samples, 1.49%)</title><rect x="75.8823%" y="197" width="1.4871%" height="15" fill="rgb(232,18,1)"/><text x="76.1323%" y="207.50"></text></g><g><title>collect_mod_item_types (3,937,904 samples, 1.48%)</title><rect x="75.8943%" y="181" width="1.4751%" height="15" fill="rgb(215,41,42)"/><text x="76.1443%" y="191.50"></text></g><g><title>evaluate_obligation (546,737 samples, 0.20%)</title><rect x="78.4802%" y="165" width="0.2048%" height="15" fill="rgb(224,123,36)"/><text x="78.7302%" y="175.50"></text></g><g><title>implied_outlives_bounds (318,114 samples, 0.12%)</title><rect x="78.6912%" y="165" width="0.1192%" height="15" fill="rgb(240,125,3)"/><text x="78.9412%" y="175.50"></text></g><g><title>object_safety_violations (403,334 samples, 0.15%)</title><rect x="78.8104%" y="165" width="0.1511%" height="15" fill="rgb(205,98,50)"/><text x="79.0604%" y="175.50"></text></g><g><title>param_env (387,826 samples, 0.15%)</title><rect x="78.9615%" y="165" width="0.1453%" height="15" fill="rgb(205,185,37)"/><text x="79.2115%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,024,832 samples, 1.88%)</title><rect x="77.5215%" y="181" width="1.8822%" height="15" fill="rgb(238,207,15)"/><text x="77.7715%" y="191.50">c..</text></g><g><title>region_scope_tree (781,786 samples, 0.29%)</title><rect x="79.1108%" y="165" width="0.2928%" height="15" fill="rgb(213,199,42)"/><text x="79.3608%" y="175.50"></text></g><g><title>mir_borrowck (598,546 samples, 0.22%)</title><rect x="80.7266%" y="85" width="0.2242%" height="15" fill="rgb(235,201,11)"/><text x="80.9766%" y="95.50"></text></g><g><title>mir_for_ctfe (830,040 samples, 0.31%)</title><rect x="80.6407%" y="117" width="0.3109%" height="15" fill="rgb(207,46,11)"/><text x="80.8907%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (761,798 samples, 0.29%)</title><rect x="80.6663%" y="101" width="0.2854%" height="15" fill="rgb(241,35,35)"/><text x="80.9163%" y="111.50"></text></g><g><title>mir_for_ctfe (298,763 samples, 0.11%)</title><rect x="81.0371%" y="53" width="0.1119%" height="15" fill="rgb(243,32,47)"/><text x="81.2871%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (273,533 samples, 0.10%)</title><rect x="81.0466%" y="37" width="0.1025%" height="15" fill="rgb(247,202,23)"/><text x="81.2966%" y="47.50"></text></g><g><title>eval_to_const_value_raw (597,716 samples, 0.22%)</title><rect x="80.9610%" y="101" width="0.2239%" height="15" fill="rgb(219,102,11)"/><text x="81.2110%" y="111.50"></text></g><g><title>eval_to_const_value_raw (593,286 samples, 0.22%)</title><rect x="80.9627%" y="85" width="0.2222%" height="15" fill="rgb(243,110,44)"/><text x="81.2127%" y="95.50"></text></g><g><title>eval_to_allocation_raw (583,116 samples, 0.22%)</title><rect x="80.9665%" y="69" width="0.2184%" height="15" fill="rgb(222,74,54)"/><text x="81.2165%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (634,976 samples, 0.24%)</title><rect x="80.9519%" y="117" width="0.2378%" height="15" fill="rgb(216,99,12)"/><text x="81.2019%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,203,473 samples, 0.83%)</title><rect x="80.4440%" y="165" width="0.8254%" height="15" fill="rgb(226,22,26)"/><text x="80.6940%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,188,193 samples, 0.82%)</title><rect x="80.4497%" y="149" width="0.8197%" height="15" fill="rgb(217,163,10)"/><text x="80.6997%" y="159.50"></text></g><g><title>eval_to_allocation_raw (2,181,543 samples, 0.82%)</title><rect x="80.4522%" y="133" width="0.8172%" height="15" fill="rgb(213,25,53)"/><text x="80.7022%" y="143.50"></text></g><g><title>adt_def (421,785 samples, 0.16%)</title><rect x="81.4318%" y="133" width="0.1580%" height="15" fill="rgb(252,105,26)"/><text x="81.6818%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (420,825 samples, 0.16%)</title><rect x="81.4322%" y="117" width="0.1576%" height="15" fill="rgb(220,39,43)"/><text x="81.6822%" y="127.50"></text></g><g><title>item_attrs (410,745 samples, 0.15%)</title><rect x="81.4360%" y="101" width="0.1539%" height="15" fill="rgb(229,68,48)"/><text x="81.6860%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (409,805 samples, 0.15%)</title><rect x="81.4363%" y="85" width="0.1535%" height="15" fill="rgb(252,8,32)"/><text x="81.6863%" y="95.50"></text></g><g><title>adt_sized_constraint (469,526 samples, 0.18%)</title><rect x="81.4296%" y="149" width="0.1759%" height="15" fill="rgb(223,20,43)"/><text x="81.6796%" y="159.50"></text></g><g><title>evaluate_obligation (927,091 samples, 0.35%)</title><rect x="81.2694%" y="165" width="0.3473%" height="15" fill="rgb(229,81,49)"/><text x="81.5194%" y="175.50"></text></g><g><title>param_env (585,805 samples, 0.22%)</title><rect x="81.6927%" y="165" width="0.2194%" height="15" fill="rgb(236,28,36)"/><text x="81.9427%" y="175.50"></text></g><g><title>region_scope_tree (366,974 samples, 0.14%)</title><rect x="81.9483%" y="165" width="0.1375%" height="15" fill="rgb(249,185,26)"/><text x="82.1983%" y="175.50"></text></g><g><title>check_item_well_formed (7,366,759 samples, 2.76%)</title><rect x="79.4037%" y="181" width="2.7594%" height="15" fill="rgb(249,174,33)"/><text x="79.6537%" y="191.50">ch..</text></g><g><title>analysis (219,414,195 samples, 82.19%)</title><rect x="0.2874%" y="229" width="82.1883%" height="15" fill="rgb(233,201,37)"/><text x="0.5374%" y="239.50">analysis</text></g><g><title>type_check_crate (144,467,257 samples, 54.11%)</title><rect x="28.3610%" y="213" width="54.1146%" height="15" fill="rgb(221,78,26)"/><text x="28.6110%" y="223.50">type_check_crate</text></g><g><title>wf_checking (13,617,471 samples, 5.10%)</title><rect x="77.3748%" y="197" width="5.1008%" height="15" fill="rgb(250,127,30)"/><text x="77.6248%" y="207.50">wf_che..</text></g><g><title>check_trait_item_well_formed (834,469 samples, 0.31%)</title><rect x="82.1631%" y="181" width="0.3126%" height="15" fill="rgb(230,49,44)"/><text x="82.4131%" y="191.50"></text></g><g><title>codegen_crate (420,484 samples, 0.16%)</title><rect x="82.4785%" y="229" width="0.1575%" height="15" fill="rgb(229,67,23)"/><text x="82.7285%" y="239.50"></text></g><g><title>AST_validation (346,844 samples, 0.13%)</title><rect x="82.6952%" y="213" width="0.1299%" height="15" fill="rgb(249,83,47)"/><text x="82.9452%" y="223.50"></text></g><g><title>metadata_load_macro (297,084 samples, 0.11%)</title><rect x="91.0304%" y="181" width="0.1113%" height="15" fill="rgb(215,43,3)"/><text x="91.2804%" y="191.50"></text></g><g><title>metadata_register_crate (1,286,584 samples, 0.48%)</title><rect x="91.1417%" y="181" width="0.4819%" height="15" fill="rgb(238,154,13)"/><text x="91.3917%" y="191.50"></text></g><g><title>metadata_register_crate (453,875 samples, 0.17%)</title><rect x="91.4536%" y="165" width="0.1700%" height="15" fill="rgb(219,56,2)"/><text x="91.7036%" y="175.50"></text></g><g><title>macro_expand_crate (23,802,153 samples, 8.92%)</title><rect x="82.9069%" y="213" width="8.9158%" height="15" fill="rgb(233,0,4)"/><text x="83.1569%" y="223.50">macro_expand_..</text></g><g><title>expand_crate (23,791,043 samples, 8.91%)</title><rect x="82.9110%" y="197" width="8.9117%" height="15" fill="rgb(235,30,7)"/><text x="83.1610%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (531,456 samples, 0.20%)</title><rect x="91.6236%" y="181" width="0.1991%" height="15" fill="rgb(250,79,13)"/><text x="91.8736%" y="191.50"></text></g><g><title>late_resolve_crate (3,600,440 samples, 1.35%)</title><rect x="91.9600%" y="197" width="1.3487%" height="15" fill="rgb(211,146,34)"/><text x="92.2100%" y="207.50"></text></g><g><title>configure_and_expand (28,757,388 samples, 10.77%)</title><rect x="82.6360%" y="229" width="10.7720%" height="15" fill="rgb(228,22,38)"/><text x="82.8860%" y="239.50">configure_and_ex..</text></g><g><title>resolve_crate (4,171,216 samples, 1.56%)</title><rect x="91.8455%" y="213" width="1.5625%" height="15" fill="rgb(235,168,5)"/><text x="92.0955%" y="223.50"></text></g><g><title>drop_ast (420,485 samples, 0.16%)</title><rect x="93.4080%" y="229" width="0.1575%" height="15" fill="rgb(221,155,16)"/><text x="93.6580%" y="239.50"></text></g><g><title>early_lint_checks (882,820 samples, 0.33%)</title><rect x="93.5720%" y="229" width="0.3307%" height="15" fill="rgb(215,215,53)"/><text x="93.8220%" y="239.50"></text></g><g><title>free_global_ctxt (5,016,736 samples, 1.88%)</title><rect x="93.9027%" y="229" width="1.8792%" height="15" fill="rgb(223,4,10)"/><text x="94.1527%" y="239.50">f..</text></g><g><title>generate_crate_metadata (2,341,446 samples, 0.88%)</title><rect x="95.7819%" y="229" width="0.8771%" height="15" fill="rgb(234,103,6)"/><text x="96.0319%" y="239.50"></text></g><g><title>hir_lowering (6,297,469 samples, 2.36%)</title><rect x="96.6589%" y="229" width="2.3589%" height="15" fill="rgb(227,97,0)"/><text x="96.9089%" y="239.50">h..</text></g><g><title>parse_crate (313,564 samples, 0.12%)</title><rect x="99.0428%" y="229" width="0.1175%" height="15" fill="rgb(234,150,53)"/><text x="99.2928%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,488,716 samples, 0.56%)</title><rect x="99.2351%" y="229" width="0.5576%" height="15" fill="rgb(228,201,54)"/><text x="99.4851%" y="239.50"></text></g><g><title>all (266,965,251 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (266,965,251 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (430,945 samples, 0.16%)</title><rect x="99.8386%" y="229" width="0.1614%" height="15" fill="rgb(233,25,53)"/><text x="100.0886%" y="239.50"></text></g></svg></svg>