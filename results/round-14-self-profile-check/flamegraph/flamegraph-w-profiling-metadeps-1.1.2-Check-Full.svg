<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (116,971 samples, 0.12%)</title><rect x="11.2584%" y="133" width="0.1152%" height="15" fill="rgb(227,0,7)"/><text x="11.5084%" y="143.50"></text></g><g><title>item_attrs (168,112 samples, 0.17%)</title><rect x="11.7455%" y="101" width="0.1655%" height="15" fill="rgb(217,0,24)"/><text x="11.9955%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (160,642 samples, 0.16%)</title><rect x="11.7528%" y="85" width="0.1582%" height="15" fill="rgb(221,193,54)"/><text x="12.0028%" y="95.50"></text></g><g><title>codegen_fn_attrs (253,413 samples, 0.25%)</title><rect x="11.6775%" y="117" width="0.2495%" height="15" fill="rgb(248,212,6)"/><text x="11.9275%" y="127.50"></text></g><g><title>adt_drop_tys (102,740 samples, 0.10%)</title><rect x="13.9800%" y="53" width="0.1012%" height="15" fill="rgb(208,68,35)"/><text x="14.2300%" y="63.50"></text></g><g><title>adt_drop_tys (265,572 samples, 0.26%)</title><rect x="13.9633%" y="69" width="0.2615%" height="15" fill="rgb(232,128,0)"/><text x="14.2133%" y="79.50"></text></g><g><title>adt_drop_tys (498,395 samples, 0.49%)</title><rect x="13.9296%" y="85" width="0.4907%" height="15" fill="rgb(207,160,47)"/><text x="14.1796%" y="95.50"></text></g><g><title>param_env (101,882 samples, 0.10%)</title><rect x="14.3200%" y="69" width="0.1003%" height="15" fill="rgb(228,23,34)"/><text x="14.5700%" y="79.50"></text></g><g><title>needs_drop_raw (1,141,423 samples, 1.12%)</title><rect x="13.8439%" y="101" width="1.1238%" height="15" fill="rgb(218,30,26)"/><text x="14.0939%" y="111.50"></text></g><g><title>is_copy_raw (552,517 samples, 0.54%)</title><rect x="14.4237%" y="85" width="0.5440%" height="15" fill="rgb(220,122,19)"/><text x="14.6737%" y="95.50"></text></g><g><title>evaluate_obligation (459,535 samples, 0.45%)</title><rect x="14.5153%" y="69" width="0.4525%" height="15" fill="rgb(250,228,42)"/><text x="14.7653%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (110,600 samples, 0.11%)</title><rect x="15.0527%" y="85" width="0.1089%" height="15" fill="rgb(240,193,28)"/><text x="15.3027%" y="95.50"></text></g><g><title>impl_parent (143,153 samples, 0.14%)</title><rect x="15.3758%" y="69" width="0.1409%" height="15" fill="rgb(216,20,37)"/><text x="15.6258%" y="79.50"></text></g><g><title>specialization_graph_of (566,626 samples, 0.56%)</title><rect x="15.1877%" y="85" width="0.5579%" height="15" fill="rgb(206,188,39)"/><text x="15.4377%" y="95.50"></text></g><g><title>impl_trait_ref (232,432 samples, 0.23%)</title><rect x="15.5167%" y="69" width="0.2289%" height="15" fill="rgb(217,207,13)"/><text x="15.7667%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (188,671 samples, 0.19%)</title><rect x="15.5598%" y="53" width="0.1858%" height="15" fill="rgb(231,73,38)"/><text x="15.8098%" y="63.50"></text></g><g><title>resolve_instance (821,526 samples, 0.81%)</title><rect x="14.9678%" y="101" width="0.8089%" height="15" fill="rgb(225,20,46)"/><text x="15.2178%" y="111.50"></text></g><g><title>thir_body (635,386 samples, 0.63%)</title><rect x="15.8011%" y="101" width="0.6256%" height="15" fill="rgb(210,31,41)"/><text x="16.0511%" y="111.50"></text></g><g><title>mir_const (5,808,722 samples, 5.72%)</title><rect x="10.7229%" y="149" width="5.7192%" height="15" fill="rgb(221,200,47)"/><text x="10.9729%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (5,147,925 samples, 5.07%)</title><rect x="11.3735%" y="133" width="5.0686%" height="15" fill="rgb(226,26,5)"/><text x="11.6235%" y="143.50">unsafe..</text></g><g><title>mir_built (4,581,967 samples, 4.51%)</title><rect x="11.9308%" y="117" width="4.5114%" height="15" fill="rgb(249,33,26)"/><text x="12.1808%" y="127.50">mir_b..</text></g><g><title>mir_promoted (6,396,221 samples, 6.30%)</title><rect x="10.1671%" y="165" width="6.2977%" height="15" fill="rgb(235,183,28)"/><text x="10.4171%" y="175.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (387,945 samples, 0.38%)</title><rect x="16.4648%" y="165" width="0.3820%" height="15" fill="rgb(221,5,38)"/><text x="16.7148%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (275,292 samples, 0.27%)</title><rect x="16.8468%" y="165" width="0.2710%" height="15" fill="rgb(247,18,42)"/><text x="17.0968%" y="175.50"></text></g><g><title>normalize_projection_ty (153,321 samples, 0.15%)</title><rect x="16.9669%" y="149" width="0.1510%" height="15" fill="rgb(241,131,45)"/><text x="17.2169%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,906,892 samples, 1.88%)</title><rect x="17.1634%" y="165" width="1.8775%" height="15" fill="rgb(249,31,29)"/><text x="17.4134%" y="175.50">t..</text></g><g><title>evaluate_obligation (183,881 samples, 0.18%)</title><rect x="18.8598%" y="149" width="0.1810%" height="15" fill="rgb(225,111,53)"/><text x="19.1098%" y="159.50"></text></g><g><title>trait_impls_of (102,351 samples, 0.10%)</title><rect x="18.9401%" y="133" width="0.1008%" height="15" fill="rgb(238,160,17)"/><text x="19.1901%" y="143.50"></text></g><g><title>MIR_borrow_checking (18,415,185 samples, 18.13%)</title><rect x="0.9150%" y="197" width="18.1314%" height="15" fill="rgb(214,148,48)"/><text x="1.1650%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,352,823 samples, 18.07%)</title><rect x="0.9764%" y="181" width="18.0700%" height="15" fill="rgb(232,36,49)"/><text x="1.2264%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (108,601 samples, 0.11%)</title><rect x="19.0601%" y="197" width="0.1069%" height="15" fill="rgb(209,103,24)"/><text x="19.3101%" y="207.50"></text></g><g><title>should_inherit_track_caller (162,962 samples, 0.16%)</title><rect x="19.4271%" y="149" width="0.1605%" height="15" fill="rgb(229,88,8)"/><text x="19.6771%" y="159.50"></text></g><g><title>codegen_fn_attrs (293,863 samples, 0.29%)</title><rect x="19.3188%" y="165" width="0.2893%" height="15" fill="rgb(213,181,19)"/><text x="19.5688%" y="175.50"></text></g><g><title>check_mod_attrs (430,645 samples, 0.42%)</title><rect x="19.1842%" y="181" width="0.4240%" height="15" fill="rgb(254,191,54)"/><text x="19.4342%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (366,164 samples, 0.36%)</title><rect x="19.7180%" y="181" width="0.3605%" height="15" fill="rgb(241,83,37)"/><text x="19.9680%" y="191.50"></text></g><g><title>misc_checking_1 (961,241 samples, 0.95%)</title><rect x="19.1674%" y="197" width="0.9464%" height="15" fill="rgb(233,36,39)"/><text x="19.4174%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (341,004 samples, 0.34%)</title><rect x="20.1156%" y="181" width="0.3357%" height="15" fill="rgb(226,3,54)"/><text x="20.3656%" y="191.50"></text></g><g><title>check_mod_liveness (282,534 samples, 0.28%)</title><rect x="20.1732%" y="165" width="0.2782%" height="15" fill="rgb(245,192,40)"/><text x="20.4232%" y="175.50"></text></g><g><title>misc_checking_2 (768,338 samples, 0.76%)</title><rect x="20.1138%" y="197" width="0.7565%" height="15" fill="rgb(238,167,29)"/><text x="20.3638%" y="207.50"></text></g><g><title>match_checking (425,534 samples, 0.42%)</title><rect x="20.4514%" y="181" width="0.4190%" height="15" fill="rgb(232,182,51)"/><text x="20.7014%" y="191.50"></text></g><g><title>check_match (408,093 samples, 0.40%)</title><rect x="20.4685%" y="165" width="0.4018%" height="15" fill="rgb(231,60,39)"/><text x="20.7185%" y="175.50"></text></g><g><title>check_private_in_public (111,671 samples, 0.11%)</title><rect x="20.8815%" y="181" width="0.1100%" height="15" fill="rgb(208,69,12)"/><text x="21.1315%" y="191.50"></text></g><g><title>death_checking (209,322 samples, 0.21%)</title><rect x="20.9914%" y="181" width="0.2061%" height="15" fill="rgb(235,93,37)"/><text x="21.2414%" y="191.50"></text></g><g><title>impl_parent (512,286 samples, 0.50%)</title><rect x="22.8966%" y="117" width="0.5044%" height="15" fill="rgb(213,116,39)"/><text x="23.1466%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (307,924 samples, 0.30%)</title><rect x="23.0978%" y="101" width="0.3032%" height="15" fill="rgb(222,207,29)"/><text x="23.3478%" y="111.50"></text></g><g><title>specialization_graph_of (2,594,639 samples, 2.55%)</title><rect x="22.1084%" y="133" width="2.5547%" height="15" fill="rgb(206,96,30)"/><text x="22.3584%" y="143.50">sp..</text></g><g><title>impl_trait_ref (1,281,827 samples, 1.26%)</title><rect x="23.4010%" y="117" width="1.2621%" height="15" fill="rgb(218,138,4)"/><text x="23.6510%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,075,303 samples, 1.06%)</title><rect x="23.6043%" y="101" width="1.0587%" height="15" fill="rgb(250,191,14)"/><text x="23.8543%" y="111.50"></text></g><g><title>resolve_instance (2,652,059 samples, 2.61%)</title><rect x="22.0544%" y="149" width="2.6112%" height="15" fill="rgb(239,60,40)"/><text x="22.3044%" y="159.50">re..</text></g><g><title>crate_lints (4,588,881 samples, 4.52%)</title><rect x="21.1996%" y="165" width="4.5182%" height="15" fill="rgb(206,27,48)"/><text x="21.4496%" y="175.50">crate..</text></g><g><title>type_of (1,054,209 samples, 1.04%)</title><rect x="24.6798%" y="149" width="1.0380%" height="15" fill="rgb(225,35,8)"/><text x="24.9298%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (818,678 samples, 0.81%)</title><rect x="24.9117%" y="133" width="0.8061%" height="15" fill="rgb(250,213,24)"/><text x="25.1617%" y="143.50"></text></g><g><title>layout_of (105,680 samples, 0.10%)</title><rect x="26.0525%" y="69" width="0.1041%" height="15" fill="rgb(247,123,22)"/><text x="26.3025%" y="79.50"></text></g><g><title>layout_of (163,991 samples, 0.16%)</title><rect x="26.0127%" y="85" width="0.1615%" height="15" fill="rgb(231,138,38)"/><text x="26.2627%" y="95.50"></text></g><g><title>layout_of (201,063 samples, 0.20%)</title><rect x="25.9805%" y="133" width="0.1980%" height="15" fill="rgb(231,145,46)"/><text x="26.2305%" y="143.50"></text></g><g><title>layout_of (194,692 samples, 0.19%)</title><rect x="25.9868%" y="117" width="0.1917%" height="15" fill="rgb(251,118,11)"/><text x="26.2368%" y="127.50"></text></g><g><title>layout_of (182,952 samples, 0.18%)</title><rect x="25.9984%" y="101" width="0.1801%" height="15" fill="rgb(217,147,25)"/><text x="26.2484%" y="111.50"></text></g><g><title>lint_checking (5,059,436 samples, 4.98%)</title><rect x="21.1975%" y="181" width="4.9815%" height="15" fill="rgb(247,81,37)"/><text x="21.4475%" y="191.50">lint_c..</text></g><g><title>module_lints (468,455 samples, 0.46%)</title><rect x="25.7178%" y="165" width="0.4612%" height="15" fill="rgb(209,12,38)"/><text x="25.9678%" y="175.50"></text></g><g><title>lint_mod (465,615 samples, 0.46%)</title><rect x="25.7206%" y="149" width="0.4584%" height="15" fill="rgb(227,1,9)"/><text x="25.9706%" y="159.50"></text></g><g><title>privacy_access_levels (156,082 samples, 0.15%)</title><rect x="26.1790%" y="181" width="0.1537%" height="15" fill="rgb(248,47,43)"/><text x="26.4290%" y="191.50"></text></g><g><title>privacy_checking_modules (594,346 samples, 0.59%)</title><rect x="26.3327%" y="181" width="0.5852%" height="15" fill="rgb(221,10,30)"/><text x="26.5827%" y="191.50"></text></g><g><title>check_mod_privacy (592,466 samples, 0.58%)</title><rect x="26.3345%" y="165" width="0.5833%" height="15" fill="rgb(210,229,1)"/><text x="26.5845%" y="175.50"></text></g><g><title>misc_checking_3 (6,153,118 samples, 6.06%)</title><rect x="20.8703%" y="197" width="6.0583%" height="15" fill="rgb(222,148,37)"/><text x="21.1203%" y="207.50">misc_che..</text></g><g><title>impl_parent (1,122,469 samples, 1.11%)</title><rect x="28.6194%" y="133" width="1.1052%" height="15" fill="rgb(234,67,33)"/><text x="28.8694%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (709,042 samples, 0.70%)</title><rect x="29.0264%" y="117" width="0.6981%" height="15" fill="rgb(247,98,35)"/><text x="29.2764%" y="127.50"></text></g><g><title>impl_trait_ref (3,406,625 samples, 3.35%)</title><rect x="29.7245%" y="133" width="3.3541%" height="15" fill="rgb(247,138,52)"/><text x="29.9745%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,992,921 samples, 2.95%)</title><rect x="30.1319%" y="117" width="2.9468%" height="15" fill="rgb(213,79,30)"/><text x="30.3819%" y="127.50">me..</text></g><g><title>trait_impls_of (349,024 samples, 0.34%)</title><rect x="33.1014%" y="133" width="0.3436%" height="15" fill="rgb(246,177,23)"/><text x="33.3514%" y="143.50"></text></g><g><title>implementations_of_trait (108,921 samples, 0.11%)</title><rect x="33.3378%" y="117" width="0.1072%" height="15" fill="rgb(230,62,27)"/><text x="33.5878%" y="127.50"></text></g><g><title>coherent_trait (6,563,043 samples, 6.46%)</title><rect x="26.9841%" y="165" width="6.4619%" height="15" fill="rgb(216,154,8)"/><text x="27.2341%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (6,550,213 samples, 6.45%)</title><rect x="26.9968%" y="149" width="6.4493%" height="15" fill="rgb(244,35,45)"/><text x="27.2468%" y="159.50">speciali..</text></g><g><title>coherence_checking (6,687,804 samples, 6.58%)</title><rect x="26.9693%" y="181" width="6.5847%" height="15" fill="rgb(251,115,12)"/><text x="27.2193%" y="191.50">coherence..</text></g><g><title>associated_items (115,452 samples, 0.11%)</title><rect x="37.9464%" y="133" width="0.1137%" height="15" fill="rgb(240,54,50)"/><text x="38.1964%" y="143.50"></text></g><g><title>evaluate_obligation (321,603 samples, 0.32%)</title><rect x="38.1676%" y="133" width="0.3166%" height="15" fill="rgb(233,84,52)"/><text x="38.4176%" y="143.50"></text></g><g><title>associated_item (351,515 samples, 0.35%)</title><rect x="50.7522%" y="101" width="0.3461%" height="15" fill="rgb(207,117,47)"/><text x="51.0022%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (281,855 samples, 0.28%)</title><rect x="50.8208%" y="85" width="0.2775%" height="15" fill="rgb(249,43,39)"/><text x="51.0708%" y="95.50"></text></g><g><title>associated_items (497,156 samples, 0.49%)</title><rect x="50.6353%" y="117" width="0.4895%" height="15" fill="rgb(209,38,44)"/><text x="50.8853%" y="127.50"></text></g><g><title>adt_dtorck_constraint (103,121 samples, 0.10%)</title><rect x="51.5808%" y="37" width="0.1015%" height="15" fill="rgb(236,212,23)"/><text x="51.8308%" y="47.50"></text></g><g><title>adt_dtorck_constraint (139,421 samples, 0.14%)</title><rect x="51.5570%" y="53" width="0.1373%" height="15" fill="rgb(242,79,21)"/><text x="51.8070%" y="63.50"></text></g><g><title>adt_dtorck_constraint (171,152 samples, 0.17%)</title><rect x="51.5362%" y="69" width="0.1685%" height="15" fill="rgb(211,96,35)"/><text x="51.7862%" y="79.50"></text></g><g><title>adt_dtorck_constraint (264,354 samples, 0.26%)</title><rect x="51.4636%" y="85" width="0.2603%" height="15" fill="rgb(253,215,40)"/><text x="51.7136%" y="95.50"></text></g><g><title>dropck_outlives (628,846 samples, 0.62%)</title><rect x="51.1656%" y="117" width="0.6192%" height="15" fill="rgb(211,81,21)"/><text x="51.4156%" y="127.50"></text></g><g><title>adt_dtorck_constraint (444,804 samples, 0.44%)</title><rect x="51.3468%" y="101" width="0.4379%" height="15" fill="rgb(208,190,38)"/><text x="51.5968%" y="111.50"></text></g><g><title>adt_def (112,321 samples, 0.11%)</title><rect x="52.8937%" y="85" width="0.1106%" height="15" fill="rgb(235,213,38)"/><text x="53.1437%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (109,791 samples, 0.11%)</title><rect x="52.8962%" y="69" width="0.1081%" height="15" fill="rgb(237,122,38)"/><text x="53.1462%" y="79.50"></text></g><g><title>adt_sized_constraint (201,683 samples, 0.20%)</title><rect x="52.8800%" y="101" width="0.1986%" height="15" fill="rgb(244,218,35)"/><text x="53.1300%" y="111.50"></text></g><g><title>predicates_of (106,541 samples, 0.10%)</title><rect x="53.1773%" y="101" width="0.1049%" height="15" fill="rgb(240,68,47)"/><text x="53.4273%" y="111.50"></text></g><g><title>evaluate_obligation (2,111,273 samples, 2.08%)</title><rect x="51.7848%" y="117" width="2.0787%" height="15" fill="rgb(210,16,53)"/><text x="52.0348%" y="127.50">e..</text></g><g><title>trait_impls_of (541,664 samples, 0.53%)</title><rect x="53.3302%" y="101" width="0.5333%" height="15" fill="rgb(235,124,12)"/><text x="53.5802%" y="111.50"></text></g><g><title>implementations_of_trait (158,003 samples, 0.16%)</title><rect x="53.7079%" y="85" width="0.1556%" height="15" fill="rgb(224,169,11)"/><text x="53.9579%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (106,542 samples, 0.10%)</title><rect x="53.7586%" y="69" width="0.1049%" height="15" fill="rgb(250,166,2)"/><text x="54.0086%" y="79.50"></text></g><g><title>fn_sig (148,952 samples, 0.15%)</title><rect x="53.8814%" y="117" width="0.1467%" height="15" fill="rgb(242,216,29)"/><text x="54.1314%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (137,052 samples, 0.13%)</title><rect x="53.8931%" y="101" width="0.1349%" height="15" fill="rgb(230,116,27)"/><text x="54.1431%" y="111.50"></text></g><g><title>generics_of (129,982 samples, 0.13%)</title><rect x="54.0281%" y="117" width="0.1280%" height="15" fill="rgb(228,99,48)"/><text x="54.2781%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (101,922 samples, 0.10%)</title><rect x="54.0557%" y="101" width="0.1004%" height="15" fill="rgb(253,11,6)"/><text x="54.3057%" y="111.50"></text></g><g><title>is_copy_raw (266,353 samples, 0.26%)</title><rect x="54.2974%" y="117" width="0.2622%" height="15" fill="rgb(247,143,39)"/><text x="54.5474%" y="127.50"></text></g><g><title>evaluate_obligation (226,393 samples, 0.22%)</title><rect x="54.3368%" y="101" width="0.2229%" height="15" fill="rgb(236,97,10)"/><text x="54.5868%" y="111.50"></text></g><g><title>trait_impls_of (111,211 samples, 0.11%)</title><rect x="54.4502%" y="85" width="0.1095%" height="15" fill="rgb(233,208,19)"/><text x="54.7002%" y="95.50"></text></g><g><title>evaluate_obligation (126,931 samples, 0.12%)</title><rect x="54.8256%" y="101" width="0.1250%" height="15" fill="rgb(216,164,2)"/><text x="55.0756%" y="111.50"></text></g><g><title>method_autoderef_steps (270,613 samples, 0.27%)</title><rect x="54.6996%" y="117" width="0.2664%" height="15" fill="rgb(220,129,5)"/><text x="54.9496%" y="127.50"></text></g><g><title>explicit_predicates_of (137,431 samples, 0.14%)</title><rect x="55.1508%" y="85" width="0.1353%" height="15" fill="rgb(242,17,10)"/><text x="55.4008%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (114,741 samples, 0.11%)</title><rect x="55.1731%" y="69" width="0.1130%" height="15" fill="rgb(242,107,0)"/><text x="55.4231%" y="79.50"></text></g><g><title>predicates_of (341,902 samples, 0.34%)</title><rect x="54.9845%" y="117" width="0.3366%" height="15" fill="rgb(251,28,31)"/><text x="55.2345%" y="127.50"></text></g><g><title>predicates_defined_on (242,121 samples, 0.24%)</title><rect x="55.0828%" y="101" width="0.2384%" height="15" fill="rgb(233,223,10)"/><text x="55.3328%" y="111.50"></text></g><g><title>typeck (16,890,378 samples, 16.63%)</title><rect x="38.8713%" y="133" width="16.6301%" height="15" fill="rgb(215,21,27)"/><text x="39.1213%" y="143.50">typeck</text></g><g><title>item_bodies_checking (22,290,257 samples, 21.95%)</title><rect x="33.5741%" y="181" width="21.9467%" height="15" fill="rgb(232,23,21)"/><text x="33.8241%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,287,377 samples, 21.94%)</title><rect x="33.5769%" y="165" width="21.9439%" height="15" fill="rgb(244,5,23)"/><text x="33.8269%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (22,247,867 samples, 21.91%)</title><rect x="33.6158%" y="149" width="21.9050%" height="15" fill="rgb(226,81,46)"/><text x="33.8658%" y="159.50">typeck</text></g><g><title>impl_trait_ref (150,651 samples, 0.15%)</title><rect x="56.2338%" y="101" width="0.1483%" height="15" fill="rgb(247,70,30)"/><text x="56.4838%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (131,441 samples, 0.13%)</title><rect x="56.2527%" y="85" width="0.1294%" height="15" fill="rgb(212,68,19)"/><text x="56.5027%" y="95.50"></text></g><g><title>adt_destructor (325,963 samples, 0.32%)</title><rect x="56.0906%" y="149" width="0.3209%" height="15" fill="rgb(240,187,13)"/><text x="56.3406%" y="159.50"></text></g><g><title>coherent_trait (322,073 samples, 0.32%)</title><rect x="56.0944%" y="133" width="0.3171%" height="15" fill="rgb(223,113,26)"/><text x="56.3444%" y="143.50"></text></g><g><title>specialization_graph_of (319,813 samples, 0.31%)</title><rect x="56.0966%" y="117" width="0.3149%" height="15" fill="rgb(206,192,2)"/><text x="56.3466%" y="127.50"></text></g><g><title>item_types_checking (1,007,561 samples, 0.99%)</title><rect x="55.5208%" y="181" width="0.9920%" height="15" fill="rgb(241,108,4)"/><text x="55.7708%" y="191.50"></text></g><g><title>check_mod_item_types (1,005,031 samples, 0.99%)</title><rect x="55.5233%" y="165" width="0.9895%" height="15" fill="rgb(247,173,49)"/><text x="55.7733%" y="175.50"></text></g><g><title>late_bound_vars_map (117,592 samples, 0.12%)</title><rect x="56.9647%" y="133" width="0.1158%" height="15" fill="rgb(224,114,35)"/><text x="57.2147%" y="143.50"></text></g><g><title>resolve_lifetimes (107,382 samples, 0.11%)</title><rect x="56.9747%" y="117" width="0.1057%" height="15" fill="rgb(245,159,27)"/><text x="57.2247%" y="127.50"></text></g><g><title>fn_sig (475,607 samples, 0.47%)</title><rect x="56.6767%" y="149" width="0.4683%" height="15" fill="rgb(245,172,44)"/><text x="56.9267%" y="159.50"></text></g><g><title>generics_of (219,132 samples, 0.22%)</title><rect x="57.1450%" y="149" width="0.2158%" height="15" fill="rgb(236,23,11)"/><text x="57.3950%" y="159.50"></text></g><g><title>explicit_predicates_of (181,651 samples, 0.18%)</title><rect x="57.4694%" y="117" width="0.1789%" height="15" fill="rgb(205,117,38)"/><text x="57.7194%" y="127.50"></text></g><g><title>predicates_of (336,023 samples, 0.33%)</title><rect x="57.4055%" y="149" width="0.3308%" height="15" fill="rgb(237,72,25)"/><text x="57.6555%" y="159.50"></text></g><g><title>predicates_defined_on (309,652 samples, 0.30%)</title><rect x="57.4315%" y="133" width="0.3049%" height="15" fill="rgb(244,70,9)"/><text x="57.6815%" y="143.50"></text></g><g><title>type_collecting (1,364,416 samples, 1.34%)</title><rect x="56.5142%" y="181" width="1.3434%" height="15" fill="rgb(217,125,39)"/><text x="56.7642%" y="191.50"></text></g><g><title>collect_mod_item_types (1,357,996 samples, 1.34%)</title><rect x="56.5206%" y="165" width="1.3371%" height="15" fill="rgb(235,36,10)"/><text x="56.7706%" y="175.50"></text></g><g><title>evaluate_obligation (190,814 samples, 0.19%)</title><rect x="59.1213%" y="149" width="0.1879%" height="15" fill="rgb(251,123,47)"/><text x="59.3713%" y="159.50"></text></g><g><title>implied_outlives_bounds (107,892 samples, 0.11%)</title><rect x="59.3211%" y="149" width="0.1062%" height="15" fill="rgb(221,13,13)"/><text x="59.5711%" y="159.50"></text></g><g><title>evaluate_obligation (145,002 samples, 0.14%)</title><rect x="59.5464%" y="133" width="0.1428%" height="15" fill="rgb(238,131,9)"/><text x="59.7964%" y="143.50"></text></g><g><title>object_safety_violations (482,375 samples, 0.47%)</title><rect x="59.4274%" y="149" width="0.4749%" height="15" fill="rgb(211,50,8)"/><text x="59.6774%" y="159.50"></text></g><g><title>param_env (149,003 samples, 0.15%)</title><rect x="59.9023%" y="149" width="0.1467%" height="15" fill="rgb(245,182,24)"/><text x="60.1523%" y="159.50"></text></g><g><title>region_scope_tree (117,611 samples, 0.12%)</title><rect x="60.0912%" y="149" width="0.1158%" height="15" fill="rgb(242,14,37)"/><text x="60.3412%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,300,717 samples, 2.27%)</title><rect x="57.9549%" y="165" width="2.2653%" height="15" fill="rgb(246,228,12)"/><text x="58.2049%" y="175.50">c..</text></g><g><title>adt_def (155,653 samples, 0.15%)</title><rect x="61.2975%" y="101" width="0.1533%" height="15" fill="rgb(213,55,15)"/><text x="61.5475%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (154,923 samples, 0.15%)</title><rect x="61.2982%" y="85" width="0.1525%" height="15" fill="rgb(209,9,3)"/><text x="61.5482%" y="95.50"></text></g><g><title>adt_sized_constraint (214,584 samples, 0.21%)</title><rect x="61.2945%" y="117" width="0.2113%" height="15" fill="rgb(230,59,30)"/><text x="61.5445%" y="127.50"></text></g><g><title>adt_sized_constraint (326,254 samples, 0.32%)</title><rect x="61.1937%" y="133" width="0.3212%" height="15" fill="rgb(209,121,21)"/><text x="61.4437%" y="143.50"></text></g><g><title>evaluate_obligation (794,709 samples, 0.78%)</title><rect x="60.8303%" y="149" width="0.7825%" height="15" fill="rgb(220,109,13)"/><text x="61.0803%" y="159.50"></text></g><g><title>param_env (117,362 samples, 0.12%)</title><rect x="61.6708%" y="149" width="0.1156%" height="15" fill="rgb(232,18,1)"/><text x="61.9208%" y="159.50"></text></g><g><title>check_item_well_formed (1,760,948 samples, 1.73%)</title><rect x="60.2202%" y="165" width="1.7338%" height="15" fill="rgb(215,41,42)"/><text x="60.4702%" y="175.50"></text></g><g><title>analysis (62,350,082 samples, 61.39%)</title><rect x="0.7070%" y="213" width="61.3892%" height="15" fill="rgb(224,123,36)"/><text x="0.9570%" y="223.50">analysis</text></g><g><title>type_check_crate (35,717,997 samples, 35.17%)</title><rect x="26.9286%" y="197" width="35.1676%" height="15" fill="rgb(240,125,3)"/><text x="27.1786%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,302,537 samples, 4.24%)</title><rect x="57.8600%" y="181" width="4.2362%" height="15" fill="rgb(205,98,50)"/><text x="58.1100%" y="191.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (144,422 samples, 0.14%)</title><rect x="61.9540%" y="165" width="0.1422%" height="15" fill="rgb(205,185,37)"/><text x="62.2040%" y="175.50"></text></g><g><title>codegen_crate (411,145 samples, 0.40%)</title><rect x="62.1073%" y="213" width="0.4048%" height="15" fill="rgb(238,207,15)"/><text x="62.3573%" y="223.50"></text></g><g><title>metadata_load_macro (1,754,747 samples, 1.73%)</title><rect x="85.2846%" y="165" width="1.7277%" height="15" fill="rgb(213,199,42)"/><text x="85.5346%" y="175.50"></text></g><g><title>macro_expand_crate (27,238,802 samples, 26.82%)</title><rect x="62.9432%" y="197" width="26.8190%" height="15" fill="rgb(235,201,11)"/><text x="63.1932%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (27,220,612 samples, 26.80%)</title><rect x="62.9611%" y="181" width="26.8011%" height="15" fill="rgb(207,46,11)"/><text x="63.2111%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,792,900 samples, 2.75%)</title><rect x="87.0123%" y="165" width="2.7499%" height="15" fill="rgb(241,35,35)"/><text x="87.2623%" y="175.50">me..</text></g><g><title>metadata_register_crate (1,020,609 samples, 1.00%)</title><rect x="88.7573%" y="149" width="1.0049%" height="15" fill="rgb(243,32,47)"/><text x="89.0073%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (148,721 samples, 0.15%)</title><rect x="89.7698%" y="197" width="0.1464%" height="15" fill="rgb(247,202,23)"/><text x="90.0198%" y="207.50"></text></g><g><title>late_resolve_crate (1,482,257 samples, 1.46%)</title><rect x="90.0045%" y="181" width="1.4594%" height="15" fill="rgb(219,102,11)"/><text x="90.2545%" y="191.50"></text></g><g><title>configure_and_expand (29,470,517 samples, 29.02%)</title><rect x="62.5121%" y="213" width="29.0164%" height="15" fill="rgb(243,110,44)"/><text x="62.7621%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,637,468 samples, 1.61%)</title><rect x="89.9162%" y="197" width="1.6122%" height="15" fill="rgb(222,74,54)"/><text x="90.1662%" y="207.50"></text></g><g><title>drop_ast (123,991 samples, 0.12%)</title><rect x="91.5284%" y="213" width="0.1221%" height="15" fill="rgb(216,99,12)"/><text x="91.7784%" y="223.50"></text></g><g><title>early_lint_checks (230,473 samples, 0.23%)</title><rect x="91.6673%" y="213" width="0.2269%" height="15" fill="rgb(226,22,26)"/><text x="91.9173%" y="223.50"></text></g><g><title>free_global_ctxt (3,223,346 samples, 3.17%)</title><rect x="91.8942%" y="213" width="3.1737%" height="15" fill="rgb(217,163,10)"/><text x="92.1442%" y="223.50">fre..</text></g><g><title>generate_crate_metadata (752,169 samples, 0.74%)</title><rect x="95.0679%" y="213" width="0.7406%" height="15" fill="rgb(213,25,53)"/><text x="95.3179%" y="223.50"></text></g><g><title>hir_lowering (1,684,539 samples, 1.66%)</title><rect x="95.8085%" y="213" width="1.6586%" height="15" fill="rgb(252,105,26)"/><text x="96.0585%" y="223.50"></text></g><g><title>parse_crate (1,219,754 samples, 1.20%)</title><rect x="97.5173%" y="213" width="1.2010%" height="15" fill="rgb(220,39,43)"/><text x="97.7673%" y="223.50"></text></g><g><title>prepare_outputs (184,382 samples, 0.18%)</title><rect x="98.7282%" y="213" width="0.1815%" height="15" fill="rgb(229,68,48)"/><text x="98.9782%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (700,597 samples, 0.69%)</title><rect x="98.9097%" y="213" width="0.6898%" height="15" fill="rgb(252,8,32)"/><text x="99.1597%" y="223.50"></text></g><g><title>all (101,565,188 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (101,565,188 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (310,453 samples, 0.31%)</title><rect x="99.6943%" y="213" width="0.3057%" height="15" fill="rgb(236,28,36)"/><text x="99.9443%" y="223.50"></text></g></svg></svg>