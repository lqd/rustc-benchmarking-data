<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (258,554 samples, 0.20%)</title><rect x="12.2985%" y="181" width="0.1972%" height="15" fill="rgb(227,0,7)"/><text x="12.5485%" y="191.50"></text></g><g><title>item_attrs (361,809 samples, 0.28%)</title><rect x="13.0058%" y="149" width="0.2760%" height="15" fill="rgb(217,0,24)"/><text x="13.2558%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (351,847 samples, 0.27%)</title><rect x="13.0134%" y="133" width="0.2684%" height="15" fill="rgb(221,193,54)"/><text x="13.2634%" y="143.50"></text></g><g><title>codegen_fn_attrs (494,629 samples, 0.38%)</title><rect x="12.9194%" y="165" width="0.3773%" height="15" fill="rgb(248,212,6)"/><text x="13.1694%" y="175.50"></text></g><g><title>is_copy_raw (473,744 samples, 0.36%)</title><rect x="16.1155%" y="133" width="0.3614%" height="15" fill="rgb(208,68,35)"/><text x="16.3655%" y="143.50"></text></g><g><title>evaluate_obligation (389,344 samples, 0.30%)</title><rect x="16.1799%" y="117" width="0.2970%" height="15" fill="rgb(232,128,0)"/><text x="16.4299%" y="127.50"></text></g><g><title>needs_drop_raw (655,026 samples, 0.50%)</title><rect x="15.9795%" y="149" width="0.4997%" height="15" fill="rgb(207,160,47)"/><text x="16.2295%" y="159.50"></text></g><g><title>impl_parent (207,602 samples, 0.16%)</title><rect x="16.8334%" y="117" width="0.1584%" height="15" fill="rgb(228,23,34)"/><text x="17.0834%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (142,270 samples, 0.11%)</title><rect x="16.8832%" y="101" width="0.1085%" height="15" fill="rgb(218,30,26)"/><text x="17.1332%" y="111.50"></text></g><g><title>specialization_graph_of (1,270,393 samples, 0.97%)</title><rect x="16.6073%" y="133" width="0.9691%" height="15" fill="rgb(220,122,19)"/><text x="16.8573%" y="143.50"></text></g><g><title>impl_trait_ref (766,457 samples, 0.58%)</title><rect x="16.9918%" y="117" width="0.5847%" height="15" fill="rgb(250,228,42)"/><text x="17.2418%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (701,326 samples, 0.54%)</title><rect x="17.0415%" y="101" width="0.5350%" height="15" fill="rgb(240,193,28)"/><text x="17.2915%" y="111.50"></text></g><g><title>resolve_instance (1,509,897 samples, 1.15%)</title><rect x="16.4792%" y="149" width="1.1518%" height="15" fill="rgb(216,20,37)"/><text x="16.7292%" y="159.50"></text></g><g><title>thir_body (1,429,403 samples, 1.09%)</title><rect x="17.6487%" y="149" width="1.0904%" height="15" fill="rgb(206,188,39)"/><text x="17.8987%" y="159.50"></text></g><g><title>mir_const (9,426,370 samples, 7.19%)</title><rect x="11.5642%" y="197" width="7.1910%" height="15" fill="rgb(217,207,13)"/><text x="11.8142%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (8,205,318 samples, 6.26%)</title><rect x="12.4957%" y="181" width="6.2595%" height="15" fill="rgb(231,73,38)"/><text x="12.7457%" y="191.50">unsafety..</text></g><g><title>mir_built (7,155,264 samples, 5.46%)</title><rect x="13.2968%" y="165" width="5.4585%" height="15" fill="rgb(225,20,46)"/><text x="13.5468%" y="175.50">mir_bui..</text></g><g><title>mir_const (208,312 samples, 0.16%)</title><rect x="18.9851%" y="181" width="0.1589%" height="15" fill="rgb(210,31,41)"/><text x="19.2351%" y="191.50"></text></g><g><title>unsafety_check_result (159,802 samples, 0.12%)</title><rect x="19.0221%" y="165" width="0.1219%" height="15" fill="rgb(221,200,47)"/><text x="19.2721%" y="175.50"></text></g><g><title>mir_built (136,621 samples, 0.10%)</title><rect x="19.0398%" y="149" width="0.1042%" height="15" fill="rgb(226,26,5)"/><text x="19.2898%" y="159.50"></text></g><g><title>mir_promoted (10,895,426 samples, 8.31%)</title><rect x="10.8381%" y="213" width="8.3117%" height="15" fill="rgb(249,33,26)"/><text x="11.0881%" y="223.50">mir_promoted</text></g><g><title>mir_const_qualif (517,165 samples, 0.39%)</title><rect x="18.7552%" y="197" width="0.3945%" height="15" fill="rgb(235,183,28)"/><text x="19.0052%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (407,062 samples, 0.31%)</title><rect x="19.1501%" y="213" width="0.3105%" height="15" fill="rgb(221,5,38)"/><text x="19.4001%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (173,452 samples, 0.13%)</title><rect x="19.4606%" y="213" width="0.1323%" height="15" fill="rgb(247,18,42)"/><text x="19.7106%" y="223.50"></text></g><g><title>type_op_prove_predicate (989,751 samples, 0.76%)</title><rect x="19.5993%" y="213" width="0.7550%" height="15" fill="rgb(241,131,45)"/><text x="19.8493%" y="223.50"></text></g><g><title>MIR_borrow_checking (25,767,355 samples, 19.66%)</title><rect x="0.7004%" y="245" width="19.6568%" height="15" fill="rgb(249,31,29)"/><text x="0.9504%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,646,413 samples, 19.56%)</title><rect x="0.7926%" y="229" width="19.5646%" height="15" fill="rgb(225,111,53)"/><text x="1.0426%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (213,602 samples, 0.16%)</title><rect x="20.3572%" y="245" width="0.1629%" height="15" fill="rgb(238,160,17)"/><text x="20.6072%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (147,302 samples, 0.11%)</title><rect x="20.4078%" y="229" width="0.1124%" height="15" fill="rgb(214,148,48)"/><text x="20.6578%" y="239.50"></text></g><g><title>hir_module_items (197,562 samples, 0.15%)</title><rect x="20.5202%" y="245" width="0.1507%" height="15" fill="rgb(232,36,49)"/><text x="20.7702%" y="255.50"></text></g><g><title>should_inherit_track_caller (175,702 samples, 0.13%)</title><rect x="20.9920%" y="197" width="0.1340%" height="15" fill="rgb(209,103,24)"/><text x="21.2420%" y="207.50"></text></g><g><title>codegen_fn_attrs (340,385 samples, 0.26%)</title><rect x="20.8751%" y="213" width="0.2597%" height="15" fill="rgb(229,88,8)"/><text x="21.1251%" y="223.50"></text></g><g><title>check_mod_attrs (585,316 samples, 0.45%)</title><rect x="20.6883%" y="229" width="0.4465%" height="15" fill="rgb(213,181,19)"/><text x="20.9383%" y="239.50"></text></g><g><title>lookup_deprecation_entry (147,611 samples, 0.11%)</title><rect x="21.4314%" y="213" width="0.1126%" height="15" fill="rgb(254,191,54)"/><text x="21.6814%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (414,963 samples, 0.32%)</title><rect x="21.2952%" y="229" width="0.3166%" height="15" fill="rgb(241,83,37)"/><text x="21.5452%" y="239.50"></text></g><g><title>misc_checking_1 (1,284,874 samples, 0.98%)</title><rect x="20.6713%" y="245" width="0.9802%" height="15" fill="rgb(233,36,39)"/><text x="20.9213%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (783,688 samples, 0.60%)</title><rect x="21.6527%" y="229" width="0.5978%" height="15" fill="rgb(226,3,54)"/><text x="21.9027%" y="239.50"></text></g><g><title>check_mod_liveness (664,817 samples, 0.51%)</title><rect x="21.7433%" y="213" width="0.5072%" height="15" fill="rgb(245,192,40)"/><text x="21.9933%" y="223.50"></text></g><g><title>type_uninhabited_from (267,793 samples, 0.20%)</title><rect x="22.0462%" y="197" width="0.2043%" height="15" fill="rgb(238,167,29)"/><text x="22.2962%" y="207.50"></text></g><g><title>type_uninhabited_from (245,523 samples, 0.19%)</title><rect x="22.0632%" y="181" width="0.1873%" height="15" fill="rgb(232,182,51)"/><text x="22.3132%" y="191.50"></text></g><g><title>misc_checking_2 (1,298,504 samples, 0.99%)</title><rect x="21.6515%" y="245" width="0.9906%" height="15" fill="rgb(231,60,39)"/><text x="21.9015%" y="255.50"></text></g><g><title>match_checking (513,296 samples, 0.39%)</title><rect x="22.2505%" y="229" width="0.3916%" height="15" fill="rgb(208,69,12)"/><text x="22.5005%" y="239.50"></text></g><g><title>check_match (484,025 samples, 0.37%)</title><rect x="22.2728%" y="213" width="0.3692%" height="15" fill="rgb(235,93,37)"/><text x="22.5228%" y="223.50"></text></g><g><title>check_private_in_public (233,693 samples, 0.18%)</title><rect x="22.6498%" y="229" width="0.1783%" height="15" fill="rgb(213,116,39)"/><text x="22.8998%" y="239.50"></text></g><g><title>death_checking (491,155 samples, 0.37%)</title><rect x="22.8280%" y="229" width="0.3747%" height="15" fill="rgb(222,207,29)"/><text x="23.0780%" y="239.50"></text></g><g><title>eval_to_const_value_raw (158,882 samples, 0.12%)</title><rect x="23.8054%" y="197" width="0.1212%" height="15" fill="rgb(206,96,30)"/><text x="24.0554%" y="207.50"></text></g><g><title>eval_to_const_value_raw (152,222 samples, 0.12%)</title><rect x="23.8105%" y="181" width="0.1161%" height="15" fill="rgb(218,138,4)"/><text x="24.0605%" y="191.50"></text></g><g><title>eval_to_allocation_raw (140,102 samples, 0.11%)</title><rect x="23.8197%" y="165" width="0.1069%" height="15" fill="rgb(250,191,14)"/><text x="24.0697%" y="175.50"></text></g><g><title>param_env (238,783 samples, 0.18%)</title><rect x="23.9266%" y="197" width="0.1822%" height="15" fill="rgb(239,60,40)"/><text x="24.1766%" y="207.50"></text></g><g><title>crate_lints (2,318,326 samples, 1.77%)</title><rect x="23.2038%" y="213" width="1.7686%" height="15" fill="rgb(206,27,48)"/><text x="23.4538%" y="223.50"></text></g><g><title>type_of (1,119,492 samples, 0.85%)</title><rect x="24.1183%" y="197" width="0.8540%" height="15" fill="rgb(225,35,8)"/><text x="24.3683%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (873,902 samples, 0.67%)</title><rect x="24.3057%" y="181" width="0.6667%" height="15" fill="rgb(250,213,24)"/><text x="24.5557%" y="191.50"></text></g><g><title>lint_checking (2,914,272 samples, 2.22%)</title><rect x="23.2027%" y="229" width="2.2232%" height="15" fill="rgb(247,123,22)"/><text x="23.4527%" y="239.50">l..</text></g><g><title>module_lints (594,556 samples, 0.45%)</title><rect x="24.9723%" y="213" width="0.4536%" height="15" fill="rgb(231,138,38)"/><text x="25.2223%" y="223.50"></text></g><g><title>lint_mod (589,156 samples, 0.45%)</title><rect x="24.9764%" y="197" width="0.4494%" height="15" fill="rgb(231,145,46)"/><text x="25.2264%" y="207.50"></text></g><g><title>privacy_access_levels (233,322 samples, 0.18%)</title><rect x="25.4259%" y="229" width="0.1780%" height="15" fill="rgb(251,118,11)"/><text x="25.6759%" y="239.50"></text></g><g><title>privacy_checking_modules (851,060 samples, 0.65%)</title><rect x="25.6039%" y="229" width="0.6492%" height="15" fill="rgb(217,147,25)"/><text x="25.8539%" y="239.50"></text></g><g><title>check_mod_privacy (847,150 samples, 0.65%)</title><rect x="25.6069%" y="213" width="0.6463%" height="15" fill="rgb(247,81,37)"/><text x="25.8569%" y="223.50"></text></g><g><title>misc_checking_3 (4,753,342 samples, 3.63%)</title><rect x="22.6421%" y="245" width="3.6261%" height="15" fill="rgb(209,12,38)"/><text x="22.8921%" y="255.50">misc..</text></g><g><title>impl_trait_ref (141,562 samples, 0.11%)</title><rect x="26.4779%" y="149" width="0.1080%" height="15" fill="rgb(227,1,9)"/><text x="26.7279%" y="159.50"></text></g><g><title>adt_destructor (293,003 samples, 0.22%)</title><rect x="26.3803%" y="197" width="0.2235%" height="15" fill="rgb(248,47,43)"/><text x="26.6303%" y="207.50"></text></g><g><title>coherent_trait (285,723 samples, 0.22%)</title><rect x="26.3859%" y="181" width="0.2180%" height="15" fill="rgb(221,10,30)"/><text x="26.6359%" y="191.50"></text></g><g><title>specialization_graph_of (284,013 samples, 0.22%)</title><rect x="26.3872%" y="165" width="0.2167%" height="15" fill="rgb(210,229,1)"/><text x="26.6372%" y="175.50"></text></g><g><title>param_env (155,802 samples, 0.12%)</title><rect x="26.6537%" y="197" width="0.1189%" height="15" fill="rgb(222,148,37)"/><text x="26.9037%" y="207.50"></text></g><g><title>impl_parent (2,332,044 samples, 1.78%)</title><rect x="29.8253%" y="181" width="1.7790%" height="15" fill="rgb(234,67,33)"/><text x="30.0753%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,371,693 samples, 1.05%)</title><rect x="30.5579%" y="165" width="1.0464%" height="15" fill="rgb(247,98,35)"/><text x="30.8079%" y="175.50"></text></g><g><title>impl_trait_ref (5,235,916 samples, 3.99%)</title><rect x="31.6043%" y="181" width="3.9943%" height="15" fill="rgb(247,138,52)"/><text x="31.8543%" y="191.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,090,521 samples, 3.12%)</title><rect x="32.4781%" y="165" width="3.1205%" height="15" fill="rgb(213,79,30)"/><text x="32.7281%" y="175.50">met..</text></g><g><title>coherent_trait (12,984,903 samples, 9.91%)</title><rect x="26.3403%" y="213" width="9.9056%" height="15" fill="rgb(246,177,23)"/><text x="26.5903%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (12,418,247 samples, 9.47%)</title><rect x="26.7725%" y="197" width="9.4734%" height="15" fill="rgb(230,62,27)"/><text x="27.0225%" y="207.50">specialization..</text></g><g><title>trait_impls_of (846,240 samples, 0.65%)</title><rect x="35.6003%" y="181" width="0.6456%" height="15" fill="rgb(216,154,8)"/><text x="35.8503%" y="191.50"></text></g><g><title>implementations_of_trait (227,514 samples, 0.17%)</title><rect x="36.0723%" y="165" width="0.1736%" height="15" fill="rgb(244,35,45)"/><text x="36.3223%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (176,392 samples, 0.13%)</title><rect x="36.1113%" y="149" width="0.1346%" height="15" fill="rgb(251,115,12)"/><text x="36.3613%" y="159.50"></text></g><g><title>coherence_checking (13,073,104 samples, 9.97%)</title><rect x="26.3244%" y="229" width="9.9729%" height="15" fill="rgb(240,54,50)"/><text x="26.5744%" y="239.50">coherence_chec..</text></g><g><title>adt_sized_constraint (137,001 samples, 0.10%)</title><rect x="56.8473%" y="181" width="0.1045%" height="15" fill="rgb(233,84,52)"/><text x="57.0973%" y="191.50"></text></g><g><title>associated_item (905,897 samples, 0.69%)</title><rect x="57.0928%" y="165" width="0.6911%" height="15" fill="rgb(207,117,47)"/><text x="57.3428%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (804,056 samples, 0.61%)</title><rect x="57.1705%" y="149" width="0.6134%" height="15" fill="rgb(249,43,39)"/><text x="57.4205%" y="159.50"></text></g><g><title>associated_items (1,126,150 samples, 0.86%)</title><rect x="56.9569%" y="181" width="0.8591%" height="15" fill="rgb(209,38,44)"/><text x="57.2069%" y="191.50"></text></g><g><title>dropck_outlives (477,574 samples, 0.36%)</title><rect x="57.8850%" y="181" width="0.3643%" height="15" fill="rgb(236,212,23)"/><text x="58.1350%" y="191.50"></text></g><g><title>adt_dtorck_constraint (292,654 samples, 0.22%)</title><rect x="58.0261%" y="165" width="0.2233%" height="15" fill="rgb(242,79,21)"/><text x="58.2761%" y="175.50"></text></g><g><title>mir_borrowck (157,901 samples, 0.12%)</title><rect x="58.3934%" y="117" width="0.1205%" height="15" fill="rgb(211,96,35)"/><text x="58.6434%" y="127.50"></text></g><g><title>mir_for_ctfe (221,532 samples, 0.17%)</title><rect x="58.3451%" y="149" width="0.1690%" height="15" fill="rgb(253,215,40)"/><text x="58.5951%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (201,572 samples, 0.15%)</title><rect x="58.3604%" y="133" width="0.1538%" height="15" fill="rgb(211,81,21)"/><text x="58.6104%" y="143.50"></text></g><g><title>eval_to_const_value_raw (352,674 samples, 0.27%)</title><rect x="58.2493%" y="181" width="0.2690%" height="15" fill="rgb(208,190,38)"/><text x="58.4993%" y="191.50"></text></g><g><title>eval_to_allocation_raw (347,204 samples, 0.26%)</title><rect x="58.2535%" y="165" width="0.2649%" height="15" fill="rgb(235,213,38)"/><text x="58.5035%" y="175.50"></text></g><g><title>generics_of (391,593 samples, 0.30%)</title><rect x="60.7675%" y="165" width="0.2987%" height="15" fill="rgb(237,122,38)"/><text x="61.0175%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (311,073 samples, 0.24%)</title><rect x="60.8289%" y="149" width="0.2373%" height="15" fill="rgb(244,218,35)"/><text x="61.0789%" y="159.50"></text></g><g><title>impl_trait_ref (384,531 samples, 0.29%)</title><rect x="61.1397%" y="165" width="0.2933%" height="15" fill="rgb(240,68,47)"/><text x="61.3897%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (306,350 samples, 0.23%)</title><rect x="61.1994%" y="149" width="0.2337%" height="15" fill="rgb(210,16,53)"/><text x="61.4494%" y="159.50"></text></g><g><title>predicates_of (331,256 samples, 0.25%)</title><rect x="61.4656%" y="165" width="0.2527%" height="15" fill="rgb(235,124,12)"/><text x="61.7156%" y="175.50"></text></g><g><title>predicates_defined_on (192,104 samples, 0.15%)</title><rect x="61.5717%" y="149" width="0.1465%" height="15" fill="rgb(224,169,11)"/><text x="61.8217%" y="159.50"></text></g><g><title>specializes (761,517 samples, 0.58%)</title><rect x="61.7183%" y="165" width="0.5809%" height="15" fill="rgb(250,166,2)"/><text x="61.9683%" y="175.50"></text></g><g><title>param_env (446,005 samples, 0.34%)</title><rect x="61.9590%" y="149" width="0.3402%" height="15" fill="rgb(242,216,29)"/><text x="62.2090%" y="159.50"></text></g><g><title>def_span (184,153 samples, 0.14%)</title><rect x="62.1587%" y="133" width="0.1405%" height="15" fill="rgb(230,116,27)"/><text x="62.4087%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (161,723 samples, 0.12%)</title><rect x="62.1758%" y="117" width="0.1234%" height="15" fill="rgb(228,99,48)"/><text x="62.4258%" y="127.50"></text></g><g><title>trait_impls_of (603,625 samples, 0.46%)</title><rect x="62.3196%" y="165" width="0.4605%" height="15" fill="rgb(253,11,6)"/><text x="62.5696%" y="175.50"></text></g><g><title>implementations_of_trait (257,123 samples, 0.20%)</title><rect x="62.5839%" y="149" width="0.1961%" height="15" fill="rgb(247,143,39)"/><text x="62.8339%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (180,463 samples, 0.14%)</title><rect x="62.6424%" y="133" width="0.1377%" height="15" fill="rgb(236,97,10)"/><text x="62.8924%" y="143.50"></text></g><g><title>evaluate_obligation (5,611,071 samples, 4.28%)</title><rect x="58.5184%" y="181" width="4.2805%" height="15" fill="rgb(233,208,19)"/><text x="58.7684%" y="191.50">evalu..</text></g><g><title>fn_sig (162,143 samples, 0.12%)</title><rect x="62.8279%" y="181" width="0.1237%" height="15" fill="rgb(216,164,2)"/><text x="63.0779%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (139,673 samples, 0.11%)</title><rect x="62.8450%" y="165" width="0.1066%" height="15" fill="rgb(220,129,5)"/><text x="63.0950%" y="175.50"></text></g><g><title>generics_of (152,001 samples, 0.12%)</title><rect x="62.9516%" y="181" width="0.1160%" height="15" fill="rgb(242,17,10)"/><text x="63.2016%" y="191.50"></text></g><g><title>item_attrs (240,734 samples, 0.18%)</title><rect x="63.2124%" y="181" width="0.1836%" height="15" fill="rgb(242,107,0)"/><text x="63.4624%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (232,154 samples, 0.18%)</title><rect x="63.2189%" y="165" width="0.1771%" height="15" fill="rgb(251,28,31)"/><text x="63.4689%" y="175.50"></text></g><g><title>lint_levels (220,522 samples, 0.17%)</title><rect x="63.3960%" y="181" width="0.1682%" height="15" fill="rgb(233,223,10)"/><text x="63.6460%" y="191.50"></text></g><g><title>evaluate_obligation (236,712 samples, 0.18%)</title><rect x="63.8127%" y="165" width="0.1806%" height="15" fill="rgb(215,21,27)"/><text x="64.0627%" y="175.50"></text></g><g><title>method_autoderef_steps (482,964 samples, 0.37%)</title><rect x="63.6375%" y="181" width="0.3684%" height="15" fill="rgb(232,23,21)"/><text x="63.8875%" y="191.50"></text></g><g><title>object_safety_violations (148,502 samples, 0.11%)</title><rect x="64.0059%" y="181" width="0.1133%" height="15" fill="rgb(244,5,23)"/><text x="64.2559%" y="191.50"></text></g><g><title>explicit_predicates_of (136,563 samples, 0.10%)</title><rect x="64.3763%" y="149" width="0.1042%" height="15" fill="rgb(226,81,46)"/><text x="64.6263%" y="159.50"></text></g><g><title>predicates_of (456,889 samples, 0.35%)</title><rect x="64.1827%" y="181" width="0.3485%" height="15" fill="rgb(247,70,30)"/><text x="64.4327%" y="191.50"></text></g><g><title>predicates_defined_on (313,926 samples, 0.24%)</title><rect x="64.2918%" y="165" width="0.2395%" height="15" fill="rgb(212,68,19)"/><text x="64.5418%" y="175.50"></text></g><g><title>item_bodies_checking (37,234,872 samples, 28.40%)</title><rect x="36.3248%" y="229" width="28.4049%" height="15" fill="rgb(240,187,13)"/><text x="36.5748%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,231,252 samples, 28.40%)</title><rect x="36.3275%" y="213" width="28.4022%" height="15" fill="rgb(223,113,26)"/><text x="36.5775%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (37,138,841 samples, 28.33%)</title><rect x="36.3980%" y="197" width="28.3317%" height="15" fill="rgb(206,192,2)"/><text x="36.6480%" y="207.50">typeck</text></g><g><title>generics_of (499,023 samples, 0.38%)</title><rect x="67.5246%" y="165" width="0.3807%" height="15" fill="rgb(241,108,4)"/><text x="67.7746%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (364,690 samples, 0.28%)</title><rect x="67.6271%" y="149" width="0.2782%" height="15" fill="rgb(247,173,49)"/><text x="67.8771%" y="159.50"></text></g><g><title>impl_trait_ref (668,287 samples, 0.51%)</title><rect x="67.9916%" y="165" width="0.5098%" height="15" fill="rgb(224,114,35)"/><text x="68.2416%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (535,696 samples, 0.41%)</title><rect x="68.0927%" y="149" width="0.4087%" height="15" fill="rgb(245,159,27)"/><text x="68.3427%" y="159.50"></text></g><g><title>predicates_of (654,640 samples, 0.50%)</title><rect x="68.5266%" y="165" width="0.4994%" height="15" fill="rgb(245,172,44)"/><text x="68.7766%" y="175.50"></text></g><g><title>predicates_defined_on (363,738 samples, 0.28%)</title><rect x="68.7485%" y="149" width="0.2775%" height="15" fill="rgb(236,23,11)"/><text x="68.9985%" y="159.50"></text></g><g><title>specializes (2,086,776 samples, 1.59%)</title><rect x="69.0260%" y="165" width="1.5919%" height="15" fill="rgb(205,117,38)"/><text x="69.2760%" y="175.50"></text></g><g><title>param_env (1,313,876 samples, 1.00%)</title><rect x="69.6156%" y="149" width="1.0023%" height="15" fill="rgb(237,72,25)"/><text x="69.8656%" y="159.50"></text></g><g><title>def_span (732,878 samples, 0.56%)</title><rect x="70.0588%" y="133" width="0.5591%" height="15" fill="rgb(244,70,9)"/><text x="70.3088%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (466,634 samples, 0.36%)</title><rect x="70.2619%" y="117" width="0.3560%" height="15" fill="rgb(217,125,39)"/><text x="70.5119%" y="127.50"></text></g><g><title>evaluate_obligation (6,157,548 samples, 4.70%)</title><rect x="65.9824%" y="181" width="4.6973%" height="15" fill="rgb(235,36,10)"/><text x="66.2324%" y="191.50">evalu..</text></g><g><title>specializes (169,053 samples, 0.13%)</title><rect x="70.7215%" y="181" width="0.1290%" height="15" fill="rgb(251,123,47)"/><text x="70.9715%" y="191.50"></text></g><g><title>item_types_checking (8,025,308 samples, 6.12%)</title><rect x="64.7297%" y="229" width="6.1222%" height="15" fill="rgb(221,13,13)"/><text x="64.9797%" y="239.50">item_typ..</text></g><g><title>check_mod_item_types (8,019,118 samples, 6.12%)</title><rect x="64.7345%" y="213" width="6.1175%" height="15" fill="rgb(238,131,9)"/><text x="64.9845%" y="223.50">check_mo..</text></g><g><title>typeck (7,419,631 samples, 5.66%)</title><rect x="65.1918%" y="197" width="5.6601%" height="15" fill="rgb(211,50,8)"/><text x="65.4418%" y="207.50">typeck</text></g><g><title>late_bound_vars_map (169,794 samples, 0.13%)</title><rect x="71.1682%" y="181" width="0.1295%" height="15" fill="rgb(245,182,24)"/><text x="71.4182%" y="191.50"></text></g><g><title>resolve_lifetimes (156,503 samples, 0.12%)</title><rect x="71.1783%" y="165" width="0.1194%" height="15" fill="rgb(242,14,37)"/><text x="71.4283%" y="175.50"></text></g><g><title>fn_sig (313,747 samples, 0.24%)</title><rect x="71.0707%" y="197" width="0.2393%" height="15" fill="rgb(246,228,12)"/><text x="71.3207%" y="207.50"></text></g><g><title>generics_of (215,292 samples, 0.16%)</title><rect x="71.3101%" y="197" width="0.1642%" height="15" fill="rgb(213,55,15)"/><text x="71.5601%" y="207.50"></text></g><g><title>explicit_predicates_of (241,120 samples, 0.18%)</title><rect x="71.6168%" y="165" width="0.1839%" height="15" fill="rgb(209,9,3)"/><text x="71.8668%" y="175.50"></text></g><g><title>predicates_of (670,654 samples, 0.51%)</title><rect x="71.5150%" y="197" width="0.5116%" height="15" fill="rgb(230,59,30)"/><text x="71.7650%" y="207.50"></text></g><g><title>predicates_defined_on (617,644 samples, 0.47%)</title><rect x="71.5554%" y="181" width="0.4712%" height="15" fill="rgb(209,121,21)"/><text x="71.8054%" y="191.50"></text></g><g><title>inferred_outlives_of (296,053 samples, 0.23%)</title><rect x="71.8007%" y="165" width="0.2258%" height="15" fill="rgb(220,109,13)"/><text x="72.0507%" y="175.50"></text></g><g><title>inferred_outlives_crate (271,803 samples, 0.21%)</title><rect x="71.8192%" y="149" width="0.2073%" height="15" fill="rgb(232,18,1)"/><text x="72.0692%" y="159.50"></text></g><g><title>type_collecting (1,633,128 samples, 1.25%)</title><rect x="70.8543%" y="229" width="1.2458%" height="15" fill="rgb(215,41,42)"/><text x="71.1043%" y="239.50"></text></g><g><title>collect_mod_item_types (1,623,368 samples, 1.24%)</title><rect x="70.8617%" y="213" width="1.2384%" height="15" fill="rgb(224,123,36)"/><text x="71.1117%" y="223.50"></text></g><g><title>evaluate_obligation (382,234 samples, 0.29%)</title><rect x="73.6071%" y="197" width="0.2916%" height="15" fill="rgb(240,125,3)"/><text x="73.8571%" y="207.50"></text></g><g><title>implied_outlives_bounds (161,091 samples, 0.12%)</title><rect x="73.8987%" y="197" width="0.1229%" height="15" fill="rgb(205,98,50)"/><text x="74.1487%" y="207.50"></text></g><g><title>param_env (294,765 samples, 0.22%)</title><rect x="74.0216%" y="197" width="0.2249%" height="15" fill="rgb(205,185,37)"/><text x="74.2716%" y="207.50"></text></g><g><title>check_impl_item_well_formed (3,192,297 samples, 2.44%)</title><rect x="72.2633%" y="213" width="2.4353%" height="15" fill="rgb(238,207,15)"/><text x="72.5133%" y="223.50">ch..</text></g><g><title>region_scope_tree (574,085 samples, 0.44%)</title><rect x="74.2606%" y="197" width="0.4379%" height="15" fill="rgb(213,199,42)"/><text x="74.5106%" y="207.50"></text></g><g><title>mir_const_qualif (144,571 samples, 0.11%)</title><rect x="75.8941%" y="149" width="0.1103%" height="15" fill="rgb(235,201,11)"/><text x="76.1441%" y="159.50"></text></g><g><title>mir_borrowck (394,524 samples, 0.30%)</title><rect x="76.1122%" y="117" width="0.3010%" height="15" fill="rgb(207,46,11)"/><text x="76.3622%" y="127.50"></text></g><g><title>mir_for_ctfe (537,106 samples, 0.41%)</title><rect x="76.0044%" y="149" width="0.4097%" height="15" fill="rgb(241,35,35)"/><text x="76.2544%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (495,625 samples, 0.38%)</title><rect x="76.0360%" y="133" width="0.3781%" height="15" fill="rgb(243,32,47)"/><text x="76.2860%" y="143.50"></text></g><g><title>eval_to_const_value_raw (178,152 samples, 0.14%)</title><rect x="76.5869%" y="69" width="0.1359%" height="15" fill="rgb(247,202,23)"/><text x="76.8369%" y="79.50"></text></g><g><title>eval_to_const_value_raw (176,772 samples, 0.13%)</title><rect x="76.5880%" y="53" width="0.1349%" height="15" fill="rgb(219,102,11)"/><text x="76.8380%" y="63.50"></text></g><g><title>eval_to_allocation_raw (172,182 samples, 0.13%)</title><rect x="76.5915%" y="37" width="0.1314%" height="15" fill="rgb(243,110,44)"/><text x="76.8415%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (185,302 samples, 0.14%)</title><rect x="76.5831%" y="85" width="0.1414%" height="15" fill="rgb(222,74,54)"/><text x="76.8331%" y="95.50"></text></g><g><title>evaluate_obligation (153,272 samples, 0.12%)</title><rect x="76.8340%" y="69" width="0.1169%" height="15" fill="rgb(216,99,12)"/><text x="77.0840%" y="79.50"></text></g><g><title>eval_to_const_value_raw (736,978 samples, 0.56%)</title><rect x="76.4192%" y="133" width="0.5622%" height="15" fill="rgb(226,22,26)"/><text x="76.6692%" y="143.50"></text></g><g><title>eval_to_const_value_raw (736,098 samples, 0.56%)</title><rect x="76.4198%" y="117" width="0.5615%" height="15" fill="rgb(217,163,10)"/><text x="76.6698%" y="127.50"></text></g><g><title>eval_to_allocation_raw (735,198 samples, 0.56%)</title><rect x="76.4205%" y="101" width="0.5609%" height="15" fill="rgb(213,25,53)"/><text x="76.6705%" y="111.50"></text></g><g><title>typeck (336,774 samples, 0.26%)</title><rect x="76.7245%" y="85" width="0.2569%" height="15" fill="rgb(252,105,26)"/><text x="76.9745%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (746,998 samples, 0.57%)</title><rect x="76.4143%" y="149" width="0.5699%" height="15" fill="rgb(220,39,43)"/><text x="76.6643%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,669,638 samples, 1.27%)</title><rect x="75.7905%" y="197" width="1.2737%" height="15" fill="rgb(229,68,48)"/><text x="76.0405%" y="207.50"></text></g><g><title>eval_to_const_value_raw (1,655,778 samples, 1.26%)</title><rect x="75.8011%" y="181" width="1.2631%" height="15" fill="rgb(252,8,32)"/><text x="76.0511%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,654,138 samples, 1.26%)</title><rect x="75.8023%" y="165" width="1.2619%" height="15" fill="rgb(223,20,43)"/><text x="76.0523%" y="175.50"></text></g><g><title>evaluate_obligation (228,732 samples, 0.17%)</title><rect x="77.0642%" y="197" width="0.1745%" height="15" fill="rgb(229,81,49)"/><text x="77.3142%" y="207.50"></text></g><g><title>param_env (263,574 samples, 0.20%)</title><rect x="77.3246%" y="197" width="0.2011%" height="15" fill="rgb(236,28,36)"/><text x="77.5746%" y="207.50"></text></g><g><title>analysis (101,324,179 samples, 77.30%)</title><rect x="0.4384%" y="261" width="77.2960%" height="15" fill="rgb(249,185,26)"/><text x="0.6884%" y="271.50">analysis</text></g><g><title>type_check_crate (67,464,895 samples, 51.47%)</title><rect x="26.2682%" y="245" width="51.4662%" height="15" fill="rgb(249,174,33)"/><text x="26.5182%" y="255.50">type_check_crate</text></g><g><title>wf_checking (7,379,542 samples, 5.63%)</title><rect x="72.1048%" y="229" width="5.6295%" height="15" fill="rgb(233,201,37)"/><text x="72.3548%" y="239.50">wf_chec..</text></g><g><title>check_item_well_formed (3,979,563 samples, 3.04%)</title><rect x="74.6985%" y="213" width="3.0358%" height="15" fill="rgb(221,78,26)"/><text x="74.9485%" y="223.50">che..</text></g><g><title>codegen_crate (384,505 samples, 0.29%)</title><rect x="77.7419%" y="261" width="0.2933%" height="15" fill="rgb(250,127,30)"/><text x="77.9919%" y="271.50"></text></g><g><title>metadata_load_macro (140,781 samples, 0.11%)</title><rect x="86.9842%" y="213" width="0.1074%" height="15" fill="rgb(230,49,44)"/><text x="87.2342%" y="223.50"></text></g><g><title>metadata_register_crate (1,286,584 samples, 0.98%)</title><rect x="87.0916%" y="213" width="0.9815%" height="15" fill="rgb(229,67,23)"/><text x="87.3416%" y="223.50"></text></g><g><title>metadata_register_crate (476,414 samples, 0.36%)</title><rect x="87.7097%" y="197" width="0.3634%" height="15" fill="rgb(249,83,47)"/><text x="87.9597%" y="207.50"></text></g><g><title>macro_expand_crate (12,939,493 samples, 9.87%)</title><rect x="78.3739%" y="245" width="9.8710%" height="15" fill="rgb(215,43,3)"/><text x="78.6239%" y="255.50">macro_expand_c..</text></g><g><title>expand_crate (12,921,663 samples, 9.86%)</title><rect x="78.3875%" y="229" width="9.8574%" height="15" fill="rgb(238,154,13)"/><text x="78.6375%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (225,253 samples, 0.17%)</title><rect x="88.0731%" y="213" width="0.1718%" height="15" fill="rgb(219,56,2)"/><text x="88.3231%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (160,732 samples, 0.12%)</title><rect x="88.2473%" y="245" width="0.1226%" height="15" fill="rgb(233,0,4)"/><text x="88.4973%" y="255.50"></text></g><g><title>late_resolve_crate (2,157,154 samples, 1.65%)</title><rect x="88.5191%" y="229" width="1.6456%" height="15" fill="rgb(235,30,7)"/><text x="88.7691%" y="239.50"></text></g><g><title>configure_and_expand (16,027,088 samples, 12.23%)</title><rect x="78.0352%" y="261" width="12.2264%" height="15" fill="rgb(250,79,13)"/><text x="78.2852%" y="271.50">configure_and_expa..</text></g><g><title>resolve_crate (2,479,758 samples, 1.89%)</title><rect x="88.3699%" y="245" width="1.8917%" height="15" fill="rgb(211,146,34)"/><text x="88.6199%" y="255.50">r..</text></g><g><title>drop_ast (173,982 samples, 0.13%)</title><rect x="90.2616%" y="261" width="0.1327%" height="15" fill="rgb(228,22,38)"/><text x="90.5116%" y="271.50"></text></g><g><title>early_lint_checks (422,625 samples, 0.32%)</title><rect x="90.4065%" y="261" width="0.3224%" height="15" fill="rgb(235,168,5)"/><text x="90.6565%" y="271.50"></text></g><g><title>free_global_ctxt (3,988,975 samples, 3.04%)</title><rect x="90.7289%" y="261" width="3.0430%" height="15" fill="rgb(221,155,16)"/><text x="90.9789%" y="271.50">fre..</text></g><g><title>mir_for_ctfe (157,600 samples, 0.12%)</title><rect x="94.6565%" y="245" width="0.1202%" height="15" fill="rgb(215,215,53)"/><text x="94.9065%" y="255.50"></text></g><g><title>generate_crate_metadata (1,405,785 samples, 1.07%)</title><rect x="93.7719%" y="261" width="1.0724%" height="15" fill="rgb(223,4,10)"/><text x="94.0219%" y="271.50"></text></g><g><title>hir_lowering (3,007,933 samples, 2.29%)</title><rect x="94.8443%" y="261" width="2.2946%" height="15" fill="rgb(234,103,6)"/><text x="95.0943%" y="271.50">h..</text></g><g><title>parse_crate (2,199,785 samples, 1.68%)</title><rect x="97.1805%" y="261" width="1.6781%" height="15" fill="rgb(227,97,0)"/><text x="97.4305%" y="271.50"></text></g><g><title>prepare_outputs (184,202 samples, 0.14%)</title><rect x="98.8645%" y="261" width="0.1405%" height="15" fill="rgb(234,150,53)"/><text x="99.1145%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (935,440 samples, 0.71%)</title><rect x="99.0051%" y="261" width="0.7136%" height="15" fill="rgb(228,201,54)"/><text x="99.2551%" y="271.50"></text></g><g><title>all (131,085,899 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (131,085,899 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (281,853 samples, 0.22%)</title><rect x="99.7850%" y="261" width="0.2150%" height="15" fill="rgb(233,25,53)"/><text x="100.0350%" y="271.50"></text></g></svg></svg>