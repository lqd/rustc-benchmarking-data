<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (643,638 samples, 0.37%)</title><rect x="9.3211%" y="293" width="0.3683%" height="15" fill="rgb(227,0,7)"/><text x="9.5711%" y="303.50"></text></g><g><title>is_sized_raw (258,733 samples, 0.15%)</title><rect x="9.7425%" y="293" width="0.1480%" height="15" fill="rgb(217,0,24)"/><text x="9.9925%" y="303.50"></text></g><g><title>evaluate_obligation (199,243 samples, 0.11%)</title><rect x="9.7765%" y="277" width="0.1140%" height="15" fill="rgb(221,193,54)"/><text x="10.0265%" y="287.50"></text></g><g><title>param_env (629,217 samples, 0.36%)</title><rect x="10.9250%" y="261" width="0.3600%" height="15" fill="rgb(248,212,6)"/><text x="11.1750%" y="271.50"></text></g><g><title>item_attrs (767,526 samples, 0.44%)</title><rect x="11.6785%" y="229" width="0.4392%" height="15" fill="rgb(208,68,35)"/><text x="11.9285%" y="239.50"></text></g><g><title>metadata_decode_entry_item_attrs (753,226 samples, 0.43%)</title><rect x="11.6867%" y="213" width="0.4310%" height="15" fill="rgb(232,128,0)"/><text x="11.9367%" y="223.50"></text></g><g><title>codegen_fn_attrs (930,599 samples, 0.53%)</title><rect x="11.6005%" y="245" width="0.5325%" height="15" fill="rgb(207,160,47)"/><text x="11.8505%" y="255.50"></text></g><g><title>is_copy_raw (2,192,379 samples, 1.25%)</title><rect x="14.3966%" y="213" width="1.2544%" height="15" fill="rgb(228,23,34)"/><text x="14.6466%" y="223.50"></text></g><g><title>evaluate_obligation (1,898,345 samples, 1.09%)</title><rect x="14.5648%" y="197" width="1.0862%" height="15" fill="rgb(218,30,26)"/><text x="14.8148%" y="207.50"></text></g><g><title>needs_drop_raw (2,659,696 samples, 1.52%)</title><rect x="14.1946%" y="229" width="1.5218%" height="15" fill="rgb(220,122,19)"/><text x="14.4446%" y="239.50"></text></g><g><title>codegen_fulfill_obligation (1,349,127 samples, 0.77%)</title><rect x="15.8940%" y="213" width="0.7719%" height="15" fill="rgb(250,228,42)"/><text x="16.1440%" y="223.50"></text></g><g><title>evaluate_obligation (392,363 samples, 0.22%)</title><rect x="16.4415%" y="197" width="0.2245%" height="15" fill="rgb(240,193,28)"/><text x="16.6915%" y="207.50"></text></g><g><title>specialization_graph_of (534,715 samples, 0.31%)</title><rect x="16.7221%" y="213" width="0.3059%" height="15" fill="rgb(216,20,37)"/><text x="16.9721%" y="223.50"></text></g><g><title>impl_trait_ref (240,933 samples, 0.14%)</title><rect x="16.8901%" y="197" width="0.1379%" height="15" fill="rgb(206,188,39)"/><text x="17.1401%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (205,682 samples, 0.12%)</title><rect x="16.9103%" y="181" width="0.1177%" height="15" fill="rgb(217,207,13)"/><text x="17.1603%" y="191.50"></text></g><g><title>resolve_instance (2,381,851 samples, 1.36%)</title><rect x="15.7164%" y="229" width="1.3628%" height="15" fill="rgb(231,73,38)"/><text x="15.9664%" y="239.50"></text></g><g><title>thir_body (1,218,080 samples, 0.70%)</title><rect x="17.1009%" y="229" width="0.6970%" height="15" fill="rgb(225,20,46)"/><text x="17.3509%" y="239.50"></text></g><g><title>mir_const (13,043,578 samples, 7.46%)</title><rect x="10.3917%" y="277" width="7.4632%" height="15" fill="rgb(210,31,41)"/><text x="10.6417%" y="287.50">mir_const</text></g><g><title>unsafety_check_result (11,482,383 samples, 6.57%)</title><rect x="11.2850%" y="261" width="6.5699%" height="15" fill="rgb(221,200,47)"/><text x="11.5350%" y="271.50">unsafety_..</text></g><g><title>mir_built (10,000,376 samples, 5.72%)</title><rect x="12.1329%" y="245" width="5.7219%" height="15" fill="rgb(226,26,5)"/><text x="12.3829%" y="255.50">mir_bui..</text></g><g><title>mir_promoted (14,138,100 samples, 8.09%)</title><rect x="9.8905%" y="293" width="8.0894%" height="15" fill="rgb(249,33,26)"/><text x="10.1405%" y="303.50">mir_promoted</text></g><g><title>mir_const_qualif (218,573 samples, 0.13%)</title><rect x="17.8549%" y="277" width="0.1251%" height="15" fill="rgb(235,183,28)"/><text x="18.1049%" y="287.50"></text></g><g><title>type_op_ascribe_user_type (1,054,952 samples, 0.60%)</title><rect x="17.9799%" y="293" width="0.6036%" height="15" fill="rgb(221,5,38)"/><text x="18.2299%" y="303.50"></text></g><g><title>type_op_normalize_fn_sig (2,556,944 samples, 1.46%)</title><rect x="18.5836%" y="293" width="1.4630%" height="15" fill="rgb(247,18,42)"/><text x="18.8336%" y="303.50"></text></g><g><title>normalize_projection_ty (1,556,283 samples, 0.89%)</title><rect x="19.1561%" y="277" width="0.8905%" height="15" fill="rgb(241,131,45)"/><text x="19.4061%" y="287.50"></text></g><g><title>type_op_normalize_predicate (241,401 samples, 0.14%)</title><rect x="20.0466%" y="293" width="0.1381%" height="15" fill="rgb(249,31,29)"/><text x="20.2966%" y="303.50"></text></g><g><title>type_op_normalize_ty (738,210 samples, 0.42%)</title><rect x="20.1847%" y="293" width="0.4224%" height="15" fill="rgb(225,111,53)"/><text x="20.4347%" y="303.50"></text></g><g><title>normalize_projection_ty (380,179 samples, 0.22%)</title><rect x="20.3895%" y="277" width="0.2175%" height="15" fill="rgb(238,160,17)"/><text x="20.6395%" y="287.50"></text></g><g><title>type_op_prove_predicate (5,265,074 samples, 3.01%)</title><rect x="20.6071%" y="293" width="3.0125%" height="15" fill="rgb(214,148,48)"/><text x="20.8571%" y="303.50">typ..</text></g><g><title>evaluate_obligation (201,090 samples, 0.12%)</title><rect x="23.5045%" y="277" width="0.1151%" height="15" fill="rgb(232,36,49)"/><text x="23.7545%" y="287.50"></text></g><g><title>MIR_borrow_checking (39,595,112 samples, 22.66%)</title><rect x="0.9656%" y="325" width="22.6552%" height="15" fill="rgb(209,103,24)"/><text x="1.2156%" y="335.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (39,466,709 samples, 22.58%)</title><rect x="1.0391%" y="309" width="22.5818%" height="15" fill="rgb(229,88,8)"/><text x="1.2891%" y="319.50">mir_borrowck</text></g><g><title>hir_module_items (411,536 samples, 0.24%)</title><rect x="23.7076%" y="325" width="0.2355%" height="15" fill="rgb(213,181,19)"/><text x="23.9576%" y="335.50"></text></g><g><title>get_lang_items (183,752 samples, 0.11%)</title><rect x="24.4091%" y="277" width="0.1051%" height="15" fill="rgb(254,191,54)"/><text x="24.6591%" y="287.50"></text></g><g><title>should_inherit_track_caller (379,905 samples, 0.22%)</title><rect x="24.5142%" y="277" width="0.2174%" height="15" fill="rgb(241,83,37)"/><text x="24.7642%" y="287.50"></text></g><g><title>codegen_fn_attrs (787,001 samples, 0.45%)</title><rect x="24.3013%" y="293" width="0.4503%" height="15" fill="rgb(233,36,39)"/><text x="24.5513%" y="303.50"></text></g><g><title>check_mod_attrs (1,354,305 samples, 0.77%)</title><rect x="23.9768%" y="309" width="0.7749%" height="15" fill="rgb(226,3,54)"/><text x="24.2268%" y="319.50"></text></g><g><title>check_mod_const_bodies (278,845 samples, 0.16%)</title><rect x="24.7517%" y="309" width="0.1595%" height="15" fill="rgb(245,192,40)"/><text x="25.0017%" y="319.50"></text></g><g><title>lookup_deprecation_entry (267,694 samples, 0.15%)</title><rect x="25.2233%" y="293" width="0.1532%" height="15" fill="rgb(238,167,29)"/><text x="25.4733%" y="303.50"></text></g><g><title>stability_index (193,532 samples, 0.11%)</title><rect x="25.2657%" y="277" width="0.1107%" height="15" fill="rgb(232,182,51)"/><text x="25.5157%" y="287.50"></text></g><g><title>check_mod_unstable_api_usage (705,627 samples, 0.40%)</title><rect x="25.0264%" y="309" width="0.4037%" height="15" fill="rgb(231,60,39)"/><text x="25.2764%" y="319.50"></text></g><g><title>misc_checking_1 (2,714,601 samples, 1.55%)</title><rect x="23.9433%" y="325" width="1.5532%" height="15" fill="rgb(208,69,12)"/><text x="24.1933%" y="335.50"></text></g><g><title>liveness_and_intrinsic_checking (531,096 samples, 0.30%)</title><rect x="25.4974%" y="309" width="0.3039%" height="15" fill="rgb(235,93,37)"/><text x="25.7474%" y="319.50"></text></g><g><title>check_mod_liveness (430,735 samples, 0.25%)</title><rect x="25.5549%" y="293" width="0.2465%" height="15" fill="rgb(213,116,39)"/><text x="25.8049%" y="303.50"></text></g><g><title>misc_checking_2 (1,176,023 samples, 0.67%)</title><rect x="25.4966%" y="325" width="0.6729%" height="15" fill="rgb(222,207,29)"/><text x="25.7466%" y="335.50"></text></g><g><title>match_checking (643,407 samples, 0.37%)</title><rect x="25.8013%" y="309" width="0.3681%" height="15" fill="rgb(206,96,30)"/><text x="26.0513%" y="319.50"></text></g><g><title>check_match (608,596 samples, 0.35%)</title><rect x="25.8212%" y="293" width="0.3482%" height="15" fill="rgb(218,138,4)"/><text x="26.0712%" y="303.50"></text></g><g><title>check_private_in_public (249,633 samples, 0.14%)</title><rect x="26.1751%" y="309" width="0.1428%" height="15" fill="rgb(250,191,14)"/><text x="26.4251%" y="319.50"></text></g><g><title>death_checking (427,015 samples, 0.24%)</title><rect x="26.3179%" y="309" width="0.2443%" height="15" fill="rgb(239,60,40)"/><text x="26.5679%" y="319.50"></text></g><g><title>eval_to_const_value_raw (190,942 samples, 0.11%)</title><rect x="27.0252%" y="85" width="0.1093%" height="15" fill="rgb(206,27,48)"/><text x="27.2752%" y="95.50"></text></g><g><title>eval_to_const_value_raw (189,872 samples, 0.11%)</title><rect x="27.0258%" y="69" width="0.1086%" height="15" fill="rgb(225,35,8)"/><text x="27.2758%" y="79.50"></text></g><g><title>eval_to_allocation_raw (188,912 samples, 0.11%)</title><rect x="27.0263%" y="53" width="0.1081%" height="15" fill="rgb(250,213,24)"/><text x="27.2763%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (182,002 samples, 0.10%)</title><rect x="27.0303%" y="37" width="0.1041%" height="15" fill="rgb(247,123,22)"/><text x="27.2803%" y="47.50"></text></g><g><title>eval_to_const_value_raw (258,573 samples, 0.15%)</title><rect x="26.9955%" y="149" width="0.1479%" height="15" fill="rgb(231,138,38)"/><text x="27.2455%" y="159.50"></text></g><g><title>eval_to_const_value_raw (257,353 samples, 0.15%)</title><rect x="26.9962%" y="133" width="0.1473%" height="15" fill="rgb(231,145,46)"/><text x="27.2462%" y="143.50"></text></g><g><title>eval_to_allocation_raw (252,483 samples, 0.14%)</title><rect x="26.9990%" y="117" width="0.1445%" height="15" fill="rgb(251,118,11)"/><text x="27.2490%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (211,833 samples, 0.12%)</title><rect x="27.0222%" y="101" width="0.1212%" height="15" fill="rgb(217,147,25)"/><text x="27.2722%" y="111.50"></text></g><g><title>eval_to_const_value_raw (351,094 samples, 0.20%)</title><rect x="26.9714%" y="213" width="0.2009%" height="15" fill="rgb(247,81,37)"/><text x="27.2214%" y="223.50"></text></g><g><title>eval_to_const_value_raw (349,784 samples, 0.20%)</title><rect x="26.9722%" y="197" width="0.2001%" height="15" fill="rgb(209,12,38)"/><text x="27.2222%" y="207.50"></text></g><g><title>eval_to_allocation_raw (348,974 samples, 0.20%)</title><rect x="26.9726%" y="181" width="0.1997%" height="15" fill="rgb(227,1,9)"/><text x="27.2226%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (315,744 samples, 0.18%)</title><rect x="26.9916%" y="165" width="0.1807%" height="15" fill="rgb(248,47,43)"/><text x="27.2416%" y="175.50"></text></g><g><title>eval_to_const_value_raw (643,468 samples, 0.37%)</title><rect x="26.8852%" y="277" width="0.3682%" height="15" fill="rgb(221,10,30)"/><text x="27.1352%" y="287.50"></text></g><g><title>eval_to_const_value_raw (632,477 samples, 0.36%)</title><rect x="26.8915%" y="261" width="0.3619%" height="15" fill="rgb(210,229,1)"/><text x="27.1415%" y="271.50"></text></g><g><title>eval_to_allocation_raw (626,217 samples, 0.36%)</title><rect x="26.8951%" y="245" width="0.3583%" height="15" fill="rgb(222,148,37)"/><text x="27.1451%" y="255.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (498,786 samples, 0.29%)</title><rect x="26.9680%" y="229" width="0.2854%" height="15" fill="rgb(234,67,33)"/><text x="27.2180%" y="239.50"></text></g><g><title>param_env (358,294 samples, 0.21%)</title><rect x="27.2534%" y="277" width="0.2050%" height="15" fill="rgb(247,98,35)"/><text x="27.5034%" y="287.50"></text></g><g><title>crate_lints (2,011,852 samples, 1.15%)</title><rect x="26.5631%" y="293" width="1.1511%" height="15" fill="rgb(247,138,52)"/><text x="26.8131%" y="303.50"></text></g><g><title>type_of (430,657 samples, 0.25%)</title><rect x="27.4678%" y="277" width="0.2464%" height="15" fill="rgb(213,79,30)"/><text x="27.7178%" y="287.50"></text></g><g><title>metadata_decode_entry_type_of (338,617 samples, 0.19%)</title><rect x="27.5204%" y="261" width="0.1937%" height="15" fill="rgb(246,177,23)"/><text x="27.7704%" y="271.50"></text></g><g><title>lint_checking (2,484,287 samples, 1.42%)</title><rect x="26.5622%" y="309" width="1.4214%" height="15" fill="rgb(230,62,27)"/><text x="26.8122%" y="319.50"></text></g><g><title>module_lints (470,965 samples, 0.27%)</title><rect x="27.7142%" y="293" width="0.2695%" height="15" fill="rgb(216,154,8)"/><text x="27.9642%" y="303.50"></text></g><g><title>lint_mod (464,895 samples, 0.27%)</title><rect x="27.7177%" y="277" width="0.2660%" height="15" fill="rgb(244,35,45)"/><text x="27.9677%" y="287.50"></text></g><g><title>privacy_access_levels (306,504 samples, 0.18%)</title><rect x="27.9837%" y="309" width="0.1754%" height="15" fill="rgb(251,115,12)"/><text x="28.2337%" y="319.50"></text></g><g><title>privacy_checking_modules (1,098,252 samples, 0.63%)</title><rect x="28.1590%" y="309" width="0.6284%" height="15" fill="rgb(240,54,50)"/><text x="28.4090%" y="319.50"></text></g><g><title>check_mod_privacy (1,094,072 samples, 0.63%)</title><rect x="28.1614%" y="293" width="0.6260%" height="15" fill="rgb(233,84,52)"/><text x="28.4114%" y="303.50"></text></g><g><title>misc_checking_3 (4,587,902 samples, 2.63%)</title><rect x="26.1695%" y="325" width="2.6251%" height="15" fill="rgb(207,117,47)"/><text x="26.4195%" y="335.50">mi..</text></g><g><title>adt_destructor (177,592 samples, 0.10%)</title><rect x="28.8689%" y="277" width="0.1016%" height="15" fill="rgb(249,43,39)"/><text x="29.1189%" y="287.50"></text></g><g><title>impl_parent (613,716 samples, 0.35%)</title><rect x="29.6385%" y="261" width="0.3512%" height="15" fill="rgb(209,38,44)"/><text x="29.8885%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_parent (380,496 samples, 0.22%)</title><rect x="29.7720%" y="245" width="0.2177%" height="15" fill="rgb(236,212,23)"/><text x="30.0220%" y="255.50"></text></g><g><title>impl_trait_ref (1,549,987 samples, 0.89%)</title><rect x="29.9897%" y="261" width="0.8869%" height="15" fill="rgb(242,79,21)"/><text x="30.2397%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,303,602 samples, 0.75%)</title><rect x="30.1306%" y="245" width="0.7459%" height="15" fill="rgb(211,96,35)"/><text x="30.3806%" y="255.50"></text></g><g><title>coherent_trait (3,809,902 samples, 2.18%)</title><rect x="28.8505%" y="293" width="2.1799%" height="15" fill="rgb(253,215,40)"/><text x="29.1005%" y="303.50">c..</text></g><g><title>specialization_graph_of (3,377,847 samples, 1.93%)</title><rect x="29.0977%" y="277" width="1.9327%" height="15" fill="rgb(211,81,21)"/><text x="29.3477%" y="287.50">s..</text></g><g><title>trait_impls_of (267,493 samples, 0.15%)</title><rect x="30.8773%" y="261" width="0.1531%" height="15" fill="rgb(208,190,38)"/><text x="31.1273%" y="271.50"></text></g><g><title>coherence_checking (3,897,704 samples, 2.23%)</title><rect x="28.8405%" y="309" width="2.2302%" height="15" fill="rgb(235,213,38)"/><text x="29.0905%" y="319.50">c..</text></g><g><title>associated_item (753,788 samples, 0.43%)</title><rect x="48.0044%" y="245" width="0.4313%" height="15" fill="rgb(237,122,38)"/><text x="48.2544%" y="255.50"></text></g><g><title>metadata_decode_entry_associated_item (655,756 samples, 0.38%)</title><rect x="48.0605%" y="229" width="0.3752%" height="15" fill="rgb(244,218,35)"/><text x="48.3105%" y="239.50"></text></g><g><title>associated_items (941,410 samples, 0.54%)</title><rect x="47.9161%" y="261" width="0.5386%" height="15" fill="rgb(240,68,47)"/><text x="48.1661%" y="271.50"></text></g><g><title>adt_dtorck_constraint (186,651 samples, 0.11%)</title><rect x="48.7908%" y="245" width="0.1068%" height="15" fill="rgb(210,16,53)"/><text x="49.0408%" y="255.50"></text></g><g><title>dropck_outlives (1,086,833 samples, 0.62%)</title><rect x="48.5078%" y="261" width="0.6219%" height="15" fill="rgb(235,124,12)"/><text x="48.7578%" y="271.50"></text></g><g><title>normalize_projection_ty (405,575 samples, 0.23%)</title><rect x="48.8976%" y="245" width="0.2321%" height="15" fill="rgb(224,169,11)"/><text x="49.1476%" y="255.50"></text></g><g><title>eval_to_const_value_raw (730,867 samples, 0.42%)</title><rect x="49.1334%" y="261" width="0.4182%" height="15" fill="rgb(250,166,2)"/><text x="49.3834%" y="271.50"></text></g><g><title>eval_to_const_value_raw (695,787 samples, 0.40%)</title><rect x="49.1535%" y="245" width="0.3981%" height="15" fill="rgb(242,216,29)"/><text x="49.4035%" y="255.50"></text></g><g><title>eval_to_allocation_raw (657,307 samples, 0.38%)</title><rect x="49.1755%" y="229" width="0.3761%" height="15" fill="rgb(230,116,27)"/><text x="49.4255%" y="239.50"></text></g><g><title>trait_impls_of (256,833 samples, 0.15%)</title><rect x="52.2634%" y="245" width="0.1470%" height="15" fill="rgb(228,99,48)"/><text x="52.5134%" y="255.50"></text></g><g><title>evaluate_obligation (4,997,125 samples, 2.86%)</title><rect x="49.5516%" y="261" width="2.8592%" height="15" fill="rgb(253,11,6)"/><text x="49.8016%" y="271.50">ev..</text></g><g><title>fn_sig (286,823 samples, 0.16%)</title><rect x="52.4318%" y="261" width="0.1641%" height="15" fill="rgb(247,143,39)"/><text x="52.6818%" y="271.50"></text></g><g><title>metadata_decode_entry_fn_sig (265,922 samples, 0.15%)</title><rect x="52.4438%" y="245" width="0.1522%" height="15" fill="rgb(236,97,10)"/><text x="52.6938%" y="255.50"></text></g><g><title>generics_of (178,017 samples, 0.10%)</title><rect x="52.5959%" y="261" width="0.1019%" height="15" fill="rgb(233,208,19)"/><text x="52.8459%" y="271.50"></text></g><g><title>impl_item_implementor_ids (237,923 samples, 0.14%)</title><rect x="52.6978%" y="261" width="0.1361%" height="15" fill="rgb(216,164,2)"/><text x="52.9478%" y="271.50"></text></g><g><title>associated_items (213,812 samples, 0.12%)</title><rect x="52.7116%" y="245" width="0.1223%" height="15" fill="rgb(220,129,5)"/><text x="52.9616%" y="255.50"></text></g><g><title>impl_trait_ref (206,072 samples, 0.12%)</title><rect x="52.8392%" y="261" width="0.1179%" height="15" fill="rgb(242,17,10)"/><text x="53.0892%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (185,802 samples, 0.11%)</title><rect x="52.8508%" y="245" width="0.1063%" height="15" fill="rgb(242,107,0)"/><text x="53.1008%" y="255.50"></text></g><g><title>item_attrs (323,642 samples, 0.19%)</title><rect x="52.9727%" y="261" width="0.1852%" height="15" fill="rgb(251,28,31)"/><text x="53.2227%" y="271.50"></text></g><g><title>metadata_decode_entry_item_attrs (315,952 samples, 0.18%)</title><rect x="52.9771%" y="245" width="0.1808%" height="15" fill="rgb(233,223,10)"/><text x="53.2271%" y="255.50"></text></g><g><title>method_autoderef_steps (579,429 samples, 0.33%)</title><rect x="53.2145%" y="261" width="0.3315%" height="15" fill="rgb(215,21,27)"/><text x="53.4645%" y="271.50"></text></g><g><title>evaluate_obligation (283,916 samples, 0.16%)</title><rect x="53.3836%" y="245" width="0.1624%" height="15" fill="rgb(232,23,21)"/><text x="53.6336%" y="255.50"></text></g><g><title>predicates_of (481,958 samples, 0.28%)</title><rect x="53.5761%" y="261" width="0.2758%" height="15" fill="rgb(244,5,23)"/><text x="53.8261%" y="271.50"></text></g><g><title>predicates_defined_on (338,605 samples, 0.19%)</title><rect x="53.6581%" y="245" width="0.1937%" height="15" fill="rgb(226,81,46)"/><text x="53.9081%" y="255.50"></text></g><g><title>associated_items (239,912 samples, 0.14%)</title><rect x="56.6178%" y="245" width="0.1373%" height="15" fill="rgb(247,70,30)"/><text x="56.8678%" y="255.50"></text></g><g><title>generics_of (256,642 samples, 0.15%)</title><rect x="57.4877%" y="229" width="0.1468%" height="15" fill="rgb(212,68,19)"/><text x="57.7377%" y="239.50"></text></g><g><title>metadata_decode_entry_generics_of (207,801 samples, 0.12%)</title><rect x="57.5157%" y="213" width="0.1189%" height="15" fill="rgb(240,187,13)"/><text x="57.7657%" y="223.50"></text></g><g><title>impl_trait_ref (327,062 samples, 0.19%)</title><rect x="57.6482%" y="229" width="0.1871%" height="15" fill="rgb(223,113,26)"/><text x="57.8982%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (278,411 samples, 0.16%)</title><rect x="57.6760%" y="213" width="0.1593%" height="15" fill="rgb(206,192,2)"/><text x="57.9260%" y="223.50"></text></g><g><title>specializes (203,863 samples, 0.12%)</title><rect x="57.8886%" y="229" width="0.1166%" height="15" fill="rgb(241,108,4)"/><text x="58.1386%" y="239.50"></text></g><g><title>evaluate_obligation (2,173,066 samples, 1.24%)</title><rect x="56.8327%" y="245" width="1.2434%" height="15" fill="rgb(247,173,49)"/><text x="57.0827%" y="255.50"></text></g><g><title>is_copy_raw (219,433 samples, 0.13%)</title><rect x="58.1775%" y="245" width="0.1256%" height="15" fill="rgb(224,114,35)"/><text x="58.4275%" y="255.50"></text></g><g><title>lint_levels (218,402 samples, 0.12%)</title><rect x="58.3076%" y="245" width="0.1250%" height="15" fill="rgb(245,159,27)"/><text x="58.5576%" y="255.50"></text></g><g><title>method_autoderef_steps (337,942 samples, 0.19%)</title><rect x="58.4418%" y="245" width="0.1934%" height="15" fill="rgb(245,172,44)"/><text x="58.6918%" y="255.50"></text></g><g><title>typeck (8,335,285 samples, 4.77%)</title><rect x="53.9470%" y="261" width="4.7692%" height="15" fill="rgb(236,23,11)"/><text x="54.1970%" y="271.50">typeck</text></g><g><title>item_bodies_checking (48,305,400 samples, 27.64%)</title><rect x="31.1082%" y="309" width="27.6390%" height="15" fill="rgb(205,117,38)"/><text x="31.3582%" y="319.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (48,301,760 samples, 27.64%)</title><rect x="31.1103%" y="293" width="27.6369%" height="15" fill="rgb(237,72,25)"/><text x="31.3603%" y="303.50">typeck_item_bodies</text></g><g><title>typeck (48,219,109 samples, 27.59%)</title><rect x="31.1576%" y="277" width="27.5896%" height="15" fill="rgb(244,70,9)"/><text x="31.4076%" y="287.50">typeck</text></g><g><title>evaluate_obligation (4,157,148 samples, 2.38%)</title><rect x="60.9515%" y="277" width="2.3786%" height="15" fill="rgb(217,125,39)"/><text x="61.2015%" y="287.50">ev..</text></g><g><title>predicates_of (430,984 samples, 0.25%)</title><rect x="63.0835%" y="261" width="0.2466%" height="15" fill="rgb(235,36,10)"/><text x="63.3335%" y="271.50"></text></g><g><title>evaluate_obligation (328,614 samples, 0.19%)</title><rect x="63.5827%" y="261" width="0.1880%" height="15" fill="rgb(251,123,47)"/><text x="63.8327%" y="271.50"></text></g><g><title>item_types_checking (8,822,319 samples, 5.05%)</title><rect x="58.7472%" y="309" width="5.0479%" height="15" fill="rgb(221,13,13)"/><text x="58.9972%" y="319.50">item_t..</text></g><g><title>check_mod_item_types (8,815,719 samples, 5.04%)</title><rect x="58.7510%" y="293" width="5.0441%" height="15" fill="rgb(238,131,9)"/><text x="59.0010%" y="303.50">check_..</text></g><g><title>typeck (633,518 samples, 0.36%)</title><rect x="63.4326%" y="277" width="0.3625%" height="15" fill="rgb(211,50,8)"/><text x="63.6826%" y="287.50"></text></g><g><title>fn_sig (787,453 samples, 0.45%)</title><rect x="64.1131%" y="277" width="0.4506%" height="15" fill="rgb(245,182,24)"/><text x="64.3631%" y="287.50"></text></g><g><title>generics_of (389,742 samples, 0.22%)</title><rect x="64.5637%" y="277" width="0.2230%" height="15" fill="rgb(242,14,37)"/><text x="64.8137%" y="287.50"></text></g><g><title>item_bounds (187,112 samples, 0.11%)</title><rect x="64.8228%" y="277" width="0.1071%" height="15" fill="rgb(246,228,12)"/><text x="65.0728%" y="287.50"></text></g><g><title>late_bound_vars_map (631,168 samples, 0.36%)</title><rect x="65.3793%" y="229" width="0.3611%" height="15" fill="rgb(213,55,15)"/><text x="65.6293%" y="239.50"></text></g><g><title>resolve_lifetimes (596,978 samples, 0.34%)</title><rect x="65.3989%" y="213" width="0.3416%" height="15" fill="rgb(209,9,3)"/><text x="65.6489%" y="223.50"></text></g><g><title>explicit_predicates_of (1,429,676 samples, 0.82%)</title><rect x="65.0832%" y="245" width="0.8180%" height="15" fill="rgb(230,59,30)"/><text x="65.3332%" y="255.50"></text></g><g><title>type_param_predicates (243,792 samples, 0.14%)</title><rect x="65.7617%" y="229" width="0.1395%" height="15" fill="rgb(209,121,21)"/><text x="66.0117%" y="239.50"></text></g><g><title>predicates_of (1,860,822 samples, 1.06%)</title><rect x="64.9298%" y="277" width="1.0647%" height="15" fill="rgb(220,109,13)"/><text x="65.1798%" y="287.50"></text></g><g><title>predicates_defined_on (1,759,099 samples, 1.01%)</title><rect x="64.9880%" y="261" width="1.0065%" height="15" fill="rgb(232,18,1)"/><text x="65.2380%" y="271.50"></text></g><g><title>type_collecting (4,240,167 samples, 2.43%)</title><rect x="63.7974%" y="309" width="2.4261%" height="15" fill="rgb(215,41,42)"/><text x="64.0474%" y="319.50">ty..</text></g><g><title>collect_mod_item_types (4,220,357 samples, 2.41%)</title><rect x="63.8087%" y="293" width="2.4148%" height="15" fill="rgb(224,123,36)"/><text x="64.0587%" y="303.50">co..</text></g><g><title>type_of (400,175 samples, 0.23%)</title><rect x="65.9945%" y="277" width="0.2290%" height="15" fill="rgb(240,125,3)"/><text x="66.2445%" y="287.50"></text></g><g><title>evaluate_obligation (538,667 samples, 0.31%)</title><rect x="69.6953%" y="277" width="0.3082%" height="15" fill="rgb(205,98,50)"/><text x="69.9453%" y="287.50"></text></g><g><title>implied_outlives_bounds (946,690 samples, 0.54%)</title><rect x="70.0167%" y="277" width="0.5417%" height="15" fill="rgb(205,185,37)"/><text x="70.2667%" y="287.50"></text></g><g><title>param_env (1,245,387 samples, 0.71%)</title><rect x="70.5584%" y="277" width="0.7126%" height="15" fill="rgb(238,207,15)"/><text x="70.8084%" y="287.50"></text></g><g><title>check_impl_item_well_formed (9,000,858 samples, 5.15%)</title><rect x="66.3606%" y="293" width="5.1500%" height="15" fill="rgb(213,199,42)"/><text x="66.6106%" y="303.50">check_..</text></g><g><title>region_scope_tree (383,704 samples, 0.22%)</title><rect x="71.2911%" y="277" width="0.2195%" height="15" fill="rgb(235,201,11)"/><text x="71.5411%" y="287.50"></text></g><g><title>evaluate_obligation (430,192 samples, 0.25%)</title><rect x="72.5820%" y="277" width="0.2461%" height="15" fill="rgb(207,46,11)"/><text x="72.8320%" y="287.50"></text></g><g><title>param_env (699,318 samples, 0.40%)</title><rect x="72.9477%" y="277" width="0.4001%" height="15" fill="rgb(241,35,35)"/><text x="73.1977%" y="287.50"></text></g><g><title>check_item_well_formed (3,437,910 samples, 1.97%)</title><rect x="71.5106%" y="293" width="1.9671%" height="15" fill="rgb(243,32,47)"/><text x="71.7606%" y="303.50">c..</text></g><g><title>analysis (129,187,133 samples, 73.92%)</title><rect x="0.5670%" y="341" width="73.9173%" height="15" fill="rgb(247,202,23)"/><text x="0.8170%" y="351.50">analysis</text></g><g><title>type_check_crate (79,853,202 samples, 45.69%)</title><rect x="28.7945%" y="325" width="45.6898%" height="15" fill="rgb(219,102,11)"/><text x="29.0445%" y="335.50">type_check_crate</text></g><g><title>wf_checking (14,431,590 samples, 8.26%)</title><rect x="66.2270%" y="309" width="8.2574%" height="15" fill="rgb(243,110,44)"/><text x="66.4770%" y="319.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,759,290 samples, 1.01%)</title><rect x="73.4777%" y="293" width="1.0066%" height="15" fill="rgb(222,74,54)"/><text x="73.7277%" y="303.50"></text></g><g><title>codegen_crate (474,375 samples, 0.27%)</title><rect x="74.4912%" y="341" width="0.2714%" height="15" fill="rgb(216,99,12)"/><text x="74.7412%" y="351.50"></text></g><g><title>AST_validation (276,153 samples, 0.16%)</title><rect x="74.8990%" y="325" width="0.1580%" height="15" fill="rgb(226,22,26)"/><text x="75.1490%" y="335.50"></text></g><g><title>metadata_load_macro (343,614 samples, 0.20%)</title><rect x="87.1658%" y="293" width="0.1966%" height="15" fill="rgb(217,163,10)"/><text x="87.4158%" y="303.50"></text></g><g><title>metadata_register_crate (753,218 samples, 0.43%)</title><rect x="87.3624%" y="293" width="0.4310%" height="15" fill="rgb(213,25,53)"/><text x="87.6124%" y="303.50"></text></g><g><title>metadata_register_crate (361,054 samples, 0.21%)</title><rect x="87.5868%" y="277" width="0.2066%" height="15" fill="rgb(252,105,26)"/><text x="87.8368%" y="287.50"></text></g><g><title>macro_expand_crate (22,279,239 samples, 12.75%)</title><rect x="75.1914%" y="325" width="12.7476%" height="15" fill="rgb(220,39,43)"/><text x="75.4414%" y="335.50">macro_expand_crate</text></g><g><title>expand_crate (22,249,908 samples, 12.73%)</title><rect x="75.2082%" y="309" width="12.7308%" height="15" fill="rgb(229,68,48)"/><text x="75.4582%" y="319.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (254,422 samples, 0.15%)</title><rect x="87.7934%" y="293" width="0.1456%" height="15" fill="rgb(252,8,32)"/><text x="88.0434%" y="303.50"></text></g><g><title>pre_AST_expansion_lint_checks (206,763 samples, 0.12%)</title><rect x="87.9422%" y="325" width="0.1183%" height="15" fill="rgb(223,20,43)"/><text x="88.1922%" y="335.50"></text></g><g><title>finalize_imports (187,452 samples, 0.11%)</title><rect x="88.0671%" y="309" width="0.1073%" height="15" fill="rgb(229,81,49)"/><text x="88.3171%" y="319.50"></text></g><g><title>finalize_macro_resolutions (256,653 samples, 0.15%)</title><rect x="88.1744%" y="309" width="0.1468%" height="15" fill="rgb(236,28,36)"/><text x="88.4244%" y="319.50"></text></g><g><title>late_resolve_crate (3,865,084 samples, 2.21%)</title><rect x="88.3212%" y="309" width="2.2115%" height="15" fill="rgb(249,185,26)"/><text x="88.5712%" y="319.50">l..</text></g><g><title>configure_and_expand (27,813,651 samples, 15.91%)</title><rect x="74.7626%" y="341" width="15.9142%" height="15" fill="rgb(249,174,33)"/><text x="75.0126%" y="351.50">configure_and_expand</text></g><g><title>resolve_crate (4,572,471 samples, 2.62%)</title><rect x="88.0606%" y="325" width="2.6162%" height="15" fill="rgb(233,201,37)"/><text x="88.3106%" y="335.50">re..</text></g><g><title>drop_ast (415,644 samples, 0.24%)</title><rect x="90.6768%" y="341" width="0.2378%" height="15" fill="rgb(221,78,26)"/><text x="90.9268%" y="351.50"></text></g><g><title>early_lint_checks (747,719 samples, 0.43%)</title><rect x="90.9239%" y="341" width="0.4278%" height="15" fill="rgb(250,127,30)"/><text x="91.1739%" y="351.50"></text></g><g><title>free_global_ctxt (2,577,199 samples, 1.47%)</title><rect x="91.3517%" y="341" width="1.4746%" height="15" fill="rgb(230,49,44)"/><text x="91.6017%" y="351.50"></text></g><g><title>generate_crate_metadata (1,109,732 samples, 0.63%)</title><rect x="92.8263%" y="341" width="0.6350%" height="15" fill="rgb(229,67,23)"/><text x="93.0763%" y="351.50"></text></g><g><title>hir_lowering (6,960,327 samples, 3.98%)</title><rect x="93.4613%" y="341" width="3.9825%" height="15" fill="rgb(249,83,47)"/><text x="93.7113%" y="351.50">hir_..</text></g><g><title>parse_crate (2,692,750 samples, 1.54%)</title><rect x="97.4709%" y="341" width="1.5407%" height="15" fill="rgb(215,43,3)"/><text x="97.7209%" y="351.50"></text></g><g><title>prepare_outputs (371,204 samples, 0.21%)</title><rect x="99.0177%" y="341" width="0.2124%" height="15" fill="rgb(238,154,13)"/><text x="99.2677%" y="351.50"></text></g><g><title>self_profile_alloc_query_strings (825,679 samples, 0.47%)</title><rect x="99.2301%" y="341" width="0.4724%" height="15" fill="rgb(219,56,2)"/><text x="99.4801%" y="351.50"></text></g><g><title>all (174,772,482 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="383.50"></text></g><g><title>rustc (174,772,482 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="367.50">rustc</text></g><g><title>write_crate_metadata (374,185 samples, 0.21%)</title><rect x="99.7859%" y="341" width="0.2141%" height="15" fill="rgb(250,79,13)"/><text x="100.0359%" y="351.50"></text></g></svg></svg>