<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (492,280 samples, 0.11%)</title><rect x="15.4075%" y="165" width="0.1059%" height="15" fill="rgb(227,0,7)"/><text x="15.6575%" y="175.50"></text></g><g><title>param_env (947,578 samples, 0.20%)</title><rect x="17.5302%" y="133" width="0.2038%" height="15" fill="rgb(217,0,24)"/><text x="17.7802%" y="143.50"></text></g><g><title>item_attrs (815,930 samples, 0.18%)</title><rect x="18.3612%" y="101" width="0.1755%" height="15" fill="rgb(221,193,54)"/><text x="18.6112%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (786,160 samples, 0.17%)</title><rect x="18.3676%" y="85" width="0.1691%" height="15" fill="rgb(248,212,6)"/><text x="18.6176%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,204,390 samples, 0.26%)</title><rect x="18.2909%" y="117" width="0.2590%" height="15" fill="rgb(208,68,35)"/><text x="18.5409%" y="127.50"></text></g><g><title>adt_drop_tys (666,681 samples, 0.14%)</title><rect x="22.0341%" y="85" width="0.1434%" height="15" fill="rgb(232,128,0)"/><text x="22.2841%" y="95.50"></text></g><g><title>needs_drop_raw (3,253,500 samples, 0.70%)</title><rect x="21.9536%" y="101" width="0.6997%" height="15" fill="rgb(207,160,47)"/><text x="22.2036%" y="111.50"></text></g><g><title>is_copy_raw (2,206,567 samples, 0.47%)</title><rect x="22.1788%" y="85" width="0.4745%" height="15" fill="rgb(228,23,34)"/><text x="22.4288%" y="95.50"></text></g><g><title>evaluate_obligation (1,754,093 samples, 0.38%)</title><rect x="22.2761%" y="69" width="0.3772%" height="15" fill="rgb(218,30,26)"/><text x="22.5261%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (972,777 samples, 0.21%)</title><rect x="22.8253%" y="85" width="0.2092%" height="15" fill="rgb(220,122,19)"/><text x="23.0753%" y="95.50"></text></g><g><title>specialization_graph_of (987,001 samples, 0.21%)</title><rect x="23.0707%" y="85" width="0.2123%" height="15" fill="rgb(250,228,42)"/><text x="23.3207%" y="95.50"></text></g><g><title>impl_trait_ref (482,746 samples, 0.10%)</title><rect x="23.1791%" y="69" width="0.1038%" height="15" fill="rgb(240,193,28)"/><text x="23.4291%" y="79.50"></text></g><g><title>resolve_instance (3,235,673 samples, 0.70%)</title><rect x="22.6533%" y="101" width="0.6959%" height="15" fill="rgb(216,20,37)"/><text x="22.9033%" y="111.50"></text></g><g><title>thir_body (6,516,543 samples, 1.40%)</title><rect x="23.3811%" y="101" width="1.4014%" height="15" fill="rgb(206,188,39)"/><text x="23.6311%" y="111.50"></text></g><g><title>mir_const (38,335,386 samples, 8.24%)</title><rect x="16.5606%" y="149" width="8.2444%" height="15" fill="rgb(217,207,13)"/><text x="16.8106%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (32,879,120 samples, 7.07%)</title><rect x="17.7340%" y="133" width="7.0710%" height="15" fill="rgb(231,73,38)"/><text x="17.9840%" y="143.50">unsafety_..</text></g><g><title>mir_built (29,085,285 samples, 6.26%)</title><rect x="18.5499%" y="117" width="6.2551%" height="15" fill="rgb(225,20,46)"/><text x="18.7999%" y="127.50">mir_built</text></g><g><title>mir_const (677,252 samples, 0.15%)</title><rect x="24.9972%" y="133" width="0.1456%" height="15" fill="rgb(210,31,41)"/><text x="25.2472%" y="143.50"></text></g><g><title>unsafety_check_result (499,709 samples, 0.11%)</title><rect x="25.0354%" y="117" width="0.1075%" height="15" fill="rgb(221,200,47)"/><text x="25.2854%" y="127.50"></text></g><g><title>mir_const_qualif (1,669,203 samples, 0.36%)</title><rect x="24.8049%" y="149" width="0.3590%" height="15" fill="rgb(226,26,5)"/><text x="25.0549%" y="159.50"></text></g><g><title>mir_promoted (44,776,227 samples, 9.63%)</title><rect x="15.5350%" y="165" width="9.6295%" height="15" fill="rgb(249,33,26)"/><text x="15.7850%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,202,627 samples, 0.47%)</title><rect x="25.1645%" y="165" width="0.4737%" height="15" fill="rgb(235,183,28)"/><text x="25.4145%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,260,102 samples, 0.27%)</title><rect x="25.6382%" y="165" width="0.2710%" height="15" fill="rgb(221,5,38)"/><text x="25.8882%" y="175.50"></text></g><g><title>normalize_projection_ty (735,347 samples, 0.16%)</title><rect x="25.7511%" y="149" width="0.1581%" height="15" fill="rgb(247,18,42)"/><text x="26.0011%" y="159.50"></text></g><g><title>type_op_prove_predicate (8,456,692 samples, 1.82%)</title><rect x="25.9692%" y="165" width="1.8187%" height="15" fill="rgb(241,131,45)"/><text x="26.2192%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (126,786,759 samples, 27.27%)</title><rect x="0.5244%" y="197" width="27.2667%" height="15" fill="rgb(249,31,29)"/><text x="0.7744%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (126,097,970 samples, 27.12%)</title><rect x="0.6725%" y="181" width="27.1185%" height="15" fill="rgb(225,111,53)"/><text x="0.9225%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (875,440 samples, 0.19%)</title><rect x="27.7910%" y="197" width="0.1883%" height="15" fill="rgb(238,160,17)"/><text x="28.0410%" y="207.50"></text></g><g><title>hir_module_items (1,014,146 samples, 0.22%)</title><rect x="27.9793%" y="197" width="0.2181%" height="15" fill="rgb(214,148,48)"/><text x="28.2293%" y="207.50"></text></g><g><title>should_inherit_track_caller (649,188 samples, 0.14%)</title><rect x="28.5252%" y="149" width="0.1396%" height="15" fill="rgb(232,36,49)"/><text x="28.7752%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,063,483 samples, 0.23%)</title><rect x="28.4406%" y="165" width="0.2287%" height="15" fill="rgb(209,103,24)"/><text x="28.6906%" y="175.50"></text></g><g><title>check_mod_attrs (2,130,425 samples, 0.46%)</title><rect x="28.2112%" y="181" width="0.4582%" height="15" fill="rgb(229,88,8)"/><text x="28.4612%" y="191.50"></text></g><g><title>check_mod_const_bodies (581,996 samples, 0.13%)</title><rect x="28.6694%" y="181" width="0.1252%" height="15" fill="rgb(213,181,19)"/><text x="28.9194%" y="191.50"></text></g><g><title>lint_levels (671,027 samples, 0.14%)</title><rect x="29.0254%" y="165" width="0.1443%" height="15" fill="rgb(254,191,54)"/><text x="29.2754%" y="175.50"></text></g><g><title>lookup_deprecation_entry (590,437 samples, 0.13%)</title><rect x="29.1697%" y="165" width="0.1270%" height="15" fill="rgb(241,83,37)"/><text x="29.4197%" y="175.50"></text></g><g><title>stability_index (468,855 samples, 0.10%)</title><rect x="29.1958%" y="149" width="0.1008%" height="15" fill="rgb(233,36,39)"/><text x="29.4458%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,143,785 samples, 0.46%)</title><rect x="28.8800%" y="181" width="0.4610%" height="15" fill="rgb(226,3,54)"/><text x="29.1300%" y="191.50"></text></g><g><title>misc_checking_1 (5,543,341 samples, 1.19%)</title><rect x="28.1975%" y="197" width="1.1921%" height="15" fill="rgb(245,192,40)"/><text x="28.4475%" y="207.50"></text></g><g><title>check_mod_intrinsics (524,499 samples, 0.11%)</title><rect x="29.3955%" y="165" width="0.1128%" height="15" fill="rgb(238,167,29)"/><text x="29.6455%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,411,257 samples, 0.52%)</title><rect x="29.3901%" y="181" width="0.5186%" height="15" fill="rgb(232,182,51)"/><text x="29.6401%" y="191.50"></text></g><g><title>check_mod_liveness (1,861,658 samples, 0.40%)</title><rect x="29.5083%" y="165" width="0.4004%" height="15" fill="rgb(231,60,39)"/><text x="29.7583%" y="175.50"></text></g><g><title>misc_checking_2 (5,281,459 samples, 1.14%)</title><rect x="29.3897%" y="197" width="1.1358%" height="15" fill="rgb(208,69,12)"/><text x="29.6397%" y="207.50"></text></g><g><title>match_checking (2,868,042 samples, 0.62%)</title><rect x="29.9087%" y="181" width="0.6168%" height="15" fill="rgb(235,93,37)"/><text x="30.1587%" y="191.50"></text></g><g><title>check_match (2,681,072 samples, 0.58%)</title><rect x="29.9489%" y="165" width="0.5766%" height="15" fill="rgb(213,116,39)"/><text x="30.1989%" y="175.50"></text></g><g><title>check_private_in_public (1,185,113 samples, 0.25%)</title><rect x="30.5280%" y="181" width="0.2549%" height="15" fill="rgb(222,207,29)"/><text x="30.7780%" y="191.50"></text></g><g><title>death_checking (2,635,670 samples, 0.57%)</title><rect x="30.7829%" y="181" width="0.5668%" height="15" fill="rgb(206,96,30)"/><text x="31.0329%" y="191.50"></text></g><g><title>eval_to_allocation_raw (559,005 samples, 0.12%)</title><rect x="31.9911%" y="149" width="0.1202%" height="15" fill="rgb(218,138,4)"/><text x="32.2411%" y="159.50"></text></g><g><title>eval_to_allocation_raw (556,225 samples, 0.12%)</title><rect x="31.9917%" y="133" width="0.1196%" height="15" fill="rgb(250,191,14)"/><text x="32.2417%" y="143.50"></text></g><g><title>eval_to_const_value_raw (845,500 samples, 0.18%)</title><rect x="32.1113%" y="149" width="0.1818%" height="15" fill="rgb(239,60,40)"/><text x="32.3613%" y="159.50"></text></g><g><title>eval_to_const_value_raw (826,989 samples, 0.18%)</title><rect x="32.1153%" y="133" width="0.1779%" height="15" fill="rgb(206,27,48)"/><text x="32.3653%" y="143.50"></text></g><g><title>eval_to_allocation_raw (792,269 samples, 0.17%)</title><rect x="32.1227%" y="117" width="0.1704%" height="15" fill="rgb(225,35,8)"/><text x="32.3727%" y="127.50"></text></g><g><title>explicit_predicates_of (650,806 samples, 0.14%)</title><rect x="32.6070%" y="101" width="0.1400%" height="15" fill="rgb(250,213,24)"/><text x="32.8570%" y="111.50"></text></g><g><title>param_env (2,146,292 samples, 0.46%)</title><rect x="32.2931%" y="149" width="0.4616%" height="15" fill="rgb(247,123,22)"/><text x="32.5431%" y="159.50"></text></g><g><title>predicates_of (1,056,842 samples, 0.23%)</title><rect x="32.5274%" y="133" width="0.2273%" height="15" fill="rgb(231,138,38)"/><text x="32.7774%" y="143.50"></text></g><g><title>predicates_defined_on (897,442 samples, 0.19%)</title><rect x="32.5617%" y="117" width="0.1930%" height="15" fill="rgb(231,145,46)"/><text x="32.8117%" y="127.50"></text></g><g><title>crate_lints (8,158,681 samples, 1.75%)</title><rect x="31.3503%" y="165" width="1.7546%" height="15" fill="rgb(251,118,11)"/><text x="31.6003%" y="175.50"></text></g><g><title>type_of (1,407,335 samples, 0.30%)</title><rect x="32.8023%" y="149" width="0.3027%" height="15" fill="rgb(217,147,25)"/><text x="33.0523%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,103,800 samples, 0.24%)</title><rect x="32.8676%" y="133" width="0.2374%" height="15" fill="rgb(247,81,37)"/><text x="33.1176%" y="143.50"></text></g><g><title>lint_checking (10,965,332 samples, 2.36%)</title><rect x="31.3497%" y="181" width="2.3582%" height="15" fill="rgb(209,12,38)"/><text x="31.5997%" y="191.50">l..</text></g><g><title>module_lints (2,803,871 samples, 0.60%)</title><rect x="33.1049%" y="165" width="0.6030%" height="15" fill="rgb(227,1,9)"/><text x="33.3549%" y="175.50"></text></g><g><title>lint_mod (2,781,631 samples, 0.60%)</title><rect x="33.1097%" y="149" width="0.5982%" height="15" fill="rgb(248,47,43)"/><text x="33.3597%" y="159.50"></text></g><g><title>privacy_access_levels (1,343,095 samples, 0.29%)</title><rect x="33.7079%" y="181" width="0.2888%" height="15" fill="rgb(221,10,30)"/><text x="33.9579%" y="191.50"></text></g><g><title>privacy_checking_modules (4,885,054 samples, 1.05%)</title><rect x="33.9968%" y="181" width="1.0506%" height="15" fill="rgb(210,229,1)"/><text x="34.2468%" y="191.50"></text></g><g><title>check_mod_privacy (4,868,724 samples, 1.05%)</title><rect x="34.0003%" y="165" width="1.0471%" height="15" fill="rgb(222,148,37)"/><text x="34.2503%" y="175.50"></text></g><g><title>misc_checking_3 (21,071,054 samples, 4.53%)</title><rect x="30.5255%" y="197" width="4.5315%" height="15" fill="rgb(234,67,33)"/><text x="30.7755%" y="207.50">misc_..</text></g><g><title>impl_parent (3,946,902 samples, 0.85%)</title><rect x="36.4953%" y="133" width="0.8488%" height="15" fill="rgb(247,98,35)"/><text x="36.7453%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,969,561 samples, 0.42%)</title><rect x="36.9205%" y="117" width="0.4236%" height="15" fill="rgb(247,138,52)"/><text x="37.1705%" y="127.50"></text></g><g><title>impl_trait_ref (7,255,353 samples, 1.56%)</title><rect x="37.3441%" y="133" width="1.5603%" height="15" fill="rgb(213,79,30)"/><text x="37.5941%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,781,602 samples, 1.24%)</title><rect x="37.6610%" y="117" width="1.2434%" height="15" fill="rgb(246,177,23)"/><text x="37.9110%" y="127.50"></text></g><g><title>trait_impls_of (1,584,657 samples, 0.34%)</title><rect x="38.9093%" y="133" width="0.3408%" height="15" fill="rgb(230,62,27)"/><text x="39.1593%" y="143.50"></text></g><g><title>implementations_of_trait (532,254 samples, 0.11%)</title><rect x="39.1356%" y="117" width="0.1145%" height="15" fill="rgb(216,154,8)"/><text x="39.3856%" y="127.50"></text></g><g><title>coherent_trait (19,093,283 samples, 4.11%)</title><rect x="35.1441%" y="165" width="4.1062%" height="15" fill="rgb(244,35,45)"/><text x="35.3941%" y="175.50">cohe..</text></g><g><title>specialization_graph_of (18,514,177 samples, 3.98%)</title><rect x="35.2686%" y="149" width="3.9816%" height="15" fill="rgb(251,115,12)"/><text x="35.5186%" y="159.50">spec..</text></g><g><title>coherence_checking (19,409,297 samples, 4.17%)</title><rect x="35.1371%" y="181" width="4.1741%" height="15" fill="rgb(240,54,50)"/><text x="35.3871%" y="191.50">coher..</text></g><g><title>associated_item (661,588 samples, 0.14%)</title><rect x="60.5043%" y="117" width="0.1423%" height="15" fill="rgb(233,84,52)"/><text x="60.7543%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (538,817 samples, 0.12%)</title><rect x="60.5307%" y="101" width="0.1159%" height="15" fill="rgb(207,117,47)"/><text x="60.7807%" y="111.50"></text></g><g><title>associated_items (1,002,641 samples, 0.22%)</title><rect x="60.4455%" y="133" width="0.2156%" height="15" fill="rgb(249,43,39)"/><text x="60.6955%" y="143.50"></text></g><g><title>adt_dtorck_constraint (817,738 samples, 0.18%)</title><rect x="60.8746%" y="117" width="0.1759%" height="15" fill="rgb(209,38,44)"/><text x="61.1246%" y="127.50"></text></g><g><title>dropck_outlives (1,709,588 samples, 0.37%)</title><rect x="60.6981%" y="133" width="0.3677%" height="15" fill="rgb(236,212,23)"/><text x="60.9481%" y="143.50"></text></g><g><title>generics_of (721,080 samples, 0.16%)</title><rect x="62.0919%" y="117" width="0.1551%" height="15" fill="rgb(242,79,21)"/><text x="62.3419%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (538,994 samples, 0.12%)</title><rect x="62.1310%" y="101" width="0.1159%" height="15" fill="rgb(211,96,35)"/><text x="62.3810%" y="111.50"></text></g><g><title>impl_trait_ref (996,100 samples, 0.21%)</title><rect x="62.2804%" y="117" width="0.2142%" height="15" fill="rgb(253,215,40)"/><text x="62.5304%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (900,210 samples, 0.19%)</title><rect x="62.3010%" y="101" width="0.1936%" height="15" fill="rgb(211,81,21)"/><text x="62.5510%" y="111.50"></text></g><g><title>predicates_of (850,089 samples, 0.18%)</title><rect x="62.5109%" y="117" width="0.1828%" height="15" fill="rgb(208,190,38)"/><text x="62.7609%" y="127.50"></text></g><g><title>predicates_defined_on (584,406 samples, 0.13%)</title><rect x="62.5681%" y="101" width="0.1257%" height="15" fill="rgb(235,213,38)"/><text x="62.8181%" y="111.50"></text></g><g><title>specializes (909,809 samples, 0.20%)</title><rect x="62.6938%" y="117" width="0.1957%" height="15" fill="rgb(237,122,38)"/><text x="62.9438%" y="127.50"></text></g><g><title>param_env (528,245 samples, 0.11%)</title><rect x="62.7758%" y="101" width="0.1136%" height="15" fill="rgb(244,218,35)"/><text x="63.0258%" y="111.50"></text></g><g><title>trait_impls_of (825,549 samples, 0.18%)</title><rect x="62.8933%" y="117" width="0.1775%" height="15" fill="rgb(240,68,47)"/><text x="63.1433%" y="127.50"></text></g><g><title>evaluate_obligation (9,341,160 samples, 2.01%)</title><rect x="61.0657%" y="133" width="2.0089%" height="15" fill="rgb(210,16,53)"/><text x="61.3157%" y="143.50">e..</text></g><g><title>generics_of (840,339 samples, 0.18%)</title><rect x="63.1512%" y="133" width="0.1807%" height="15" fill="rgb(235,124,12)"/><text x="63.4012%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (642,967 samples, 0.14%)</title><rect x="63.1936%" y="117" width="0.1383%" height="15" fill="rgb(224,169,11)"/><text x="63.4436%" y="127.50"></text></g><g><title>item_attrs (483,976 samples, 0.10%)</title><rect x="63.3876%" y="133" width="0.1041%" height="15" fill="rgb(250,166,2)"/><text x="63.6376%" y="143.50"></text></g><g><title>evaluate_obligation (562,250 samples, 0.12%)</title><rect x="63.6530%" y="117" width="0.1209%" height="15" fill="rgb(242,216,29)"/><text x="63.9030%" y="127.50"></text></g><g><title>method_autoderef_steps (1,159,803 samples, 0.25%)</title><rect x="63.5276%" y="133" width="0.2494%" height="15" fill="rgb(230,116,27)"/><text x="63.7776%" y="143.50"></text></g><g><title>predicates_of (774,484 samples, 0.17%)</title><rect x="63.8403%" y="133" width="0.1666%" height="15" fill="rgb(228,99,48)"/><text x="64.0903%" y="143.50"></text></g><g><title>predicates_defined_on (515,989 samples, 0.11%)</title><rect x="63.8959%" y="117" width="0.1110%" height="15" fill="rgb(253,11,6)"/><text x="64.1459%" y="127.50"></text></g><g><title>dropck_outlives (774,088 samples, 0.17%)</title><rect x="68.6917%" y="117" width="0.1665%" height="15" fill="rgb(247,143,39)"/><text x="68.9417%" y="127.50"></text></g><g><title>evaluate_obligation (2,917,362 samples, 0.63%)</title><rect x="68.8581%" y="117" width="0.6274%" height="15" fill="rgb(236,97,10)"/><text x="69.1081%" y="127.50"></text></g><g><title>is_copy_raw (653,317 samples, 0.14%)</title><rect x="69.6717%" y="117" width="0.1405%" height="15" fill="rgb(233,208,19)"/><text x="69.9217%" y="127.50"></text></g><g><title>evaluate_obligation (519,647 samples, 0.11%)</title><rect x="69.7005%" y="101" width="0.1118%" height="15" fill="rgb(216,164,2)"/><text x="69.9505%" y="111.50"></text></g><g><title>method_autoderef_steps (622,199 samples, 0.13%)</title><rect x="69.8569%" y="117" width="0.1338%" height="15" fill="rgb(220,129,5)"/><text x="70.1069%" y="127.50"></text></g><g><title>typeck (28,292,875 samples, 6.08%)</title><rect x="64.0676%" y="133" width="6.0846%" height="15" fill="rgb(242,17,10)"/><text x="64.3176%" y="143.50">typeck</text></g><g><title>item_bodies_checking (143,386,874 samples, 30.84%)</title><rect x="39.3595%" y="181" width="30.8367%" height="15" fill="rgb(242,107,0)"/><text x="39.6095%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (143,383,074 samples, 30.84%)</title><rect x="39.3603%" y="165" width="30.8359%" height="15" fill="rgb(251,28,31)"/><text x="39.6103%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (142,920,869 samples, 30.74%)</title><rect x="39.4597%" y="149" width="30.7365%" height="15" fill="rgb(233,223,10)"/><text x="39.7097%" y="159.50">typeck</text></g><g><title>impl_trait_ref (518,837 samples, 0.11%)</title><rect x="71.9758%" y="117" width="0.1116%" height="15" fill="rgb(215,21,27)"/><text x="72.2258%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (468,857 samples, 0.10%)</title><rect x="71.9866%" y="101" width="0.1008%" height="15" fill="rgb(232,23,21)"/><text x="72.2366%" y="111.50"></text></g><g><title>evaluate_obligation (2,205,074 samples, 0.47%)</title><rect x="71.7627%" y="133" width="0.4742%" height="15" fill="rgb(244,5,23)"/><text x="72.0127%" y="143.50"></text></g><g><title>item_types_checking (9,859,310 samples, 2.12%)</title><rect x="70.1962%" y="181" width="2.1203%" height="15" fill="rgb(226,81,46)"/><text x="70.4462%" y="191.50">i..</text></g><g><title>check_mod_item_types (9,835,179 samples, 2.12%)</title><rect x="70.2014%" y="165" width="2.1151%" height="15" fill="rgb(247,70,30)"/><text x="70.4514%" y="175.50">c..</text></g><g><title>typeck (5,550,091 samples, 1.19%)</title><rect x="71.1229%" y="149" width="1.1936%" height="15" fill="rgb(212,68,19)"/><text x="71.3729%" y="159.50"></text></g><g><title>mir_const_qualif (537,836 samples, 0.12%)</title><rect x="72.7913%" y="101" width="0.1157%" height="15" fill="rgb(240,187,13)"/><text x="73.0413%" y="111.50"></text></g><g><title>mir_borrowck (1,169,393 samples, 0.25%)</title><rect x="73.0222%" y="69" width="0.2515%" height="15" fill="rgb(223,113,26)"/><text x="73.2722%" y="79.50"></text></g><g><title>mir_for_ctfe (1,710,620 samples, 0.37%)</title><rect x="72.9069%" y="101" width="0.3679%" height="15" fill="rgb(206,192,2)"/><text x="73.1569%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,558,518 samples, 0.34%)</title><rect x="72.9397%" y="85" width="0.3352%" height="15" fill="rgb(241,108,4)"/><text x="73.1897%" y="95.50"></text></g><g><title>generics_of (465,909 samples, 0.10%)</title><rect x="73.9398%" y="69" width="0.1002%" height="15" fill="rgb(247,173,49)"/><text x="74.1898%" y="79.50"></text></g><g><title>impl_trait_ref (724,756 samples, 0.16%)</title><rect x="74.0651%" y="69" width="0.1559%" height="15" fill="rgb(224,114,35)"/><text x="74.3151%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (593,645 samples, 0.13%)</title><rect x="74.0933%" y="53" width="0.1277%" height="15" fill="rgb(245,159,27)"/><text x="74.3433%" y="63.50"></text></g><g><title>predicates_of (616,147 samples, 0.13%)</title><rect x="74.2284%" y="69" width="0.1325%" height="15" fill="rgb(245,172,44)"/><text x="74.4784%" y="79.50"></text></g><g><title>specializes (1,867,752 samples, 0.40%)</title><rect x="74.3609%" y="69" width="0.4017%" height="15" fill="rgb(236,23,11)"/><text x="74.6109%" y="79.50"></text></g><g><title>param_env (1,099,774 samples, 0.24%)</title><rect x="74.5261%" y="53" width="0.2365%" height="15" fill="rgb(205,117,38)"/><text x="74.7761%" y="63.50"></text></g><g><title>def_span (517,929 samples, 0.11%)</title><rect x="74.6512%" y="37" width="0.1114%" height="15" fill="rgb(237,72,25)"/><text x="74.9012%" y="47.50"></text></g><g><title>evaluate_obligation (5,898,086 samples, 1.27%)</title><rect x="73.5131%" y="85" width="1.2684%" height="15" fill="rgb(244,70,9)"/><text x="73.7631%" y="95.50"></text></g><g><title>eval_to_const_value_raw (10,090,179 samples, 2.17%)</title><rect x="72.6617%" y="149" width="2.1700%" height="15" fill="rgb(217,125,39)"/><text x="72.9117%" y="159.50">e..</text></g><g><title>eval_to_const_value_raw (10,060,079 samples, 2.16%)</title><rect x="72.6682%" y="133" width="2.1635%" height="15" fill="rgb(235,36,10)"/><text x="72.9182%" y="143.50">e..</text></g><g><title>eval_to_allocation_raw (10,029,189 samples, 2.16%)</title><rect x="72.6748%" y="117" width="2.1569%" height="15" fill="rgb(251,123,47)"/><text x="72.9248%" y="127.50">e..</text></g><g><title>typeck (7,068,088 samples, 1.52%)</title><rect x="73.3117%" y="101" width="1.5201%" height="15" fill="rgb(221,13,13)"/><text x="73.5617%" y="111.50"></text></g><g><title>late_bound_vars_map (851,039 samples, 0.18%)</title><rect x="74.9927%" y="133" width="0.1830%" height="15" fill="rgb(238,131,9)"/><text x="75.2427%" y="143.50"></text></g><g><title>resolve_lifetimes (774,668 samples, 0.17%)</title><rect x="75.0091%" y="117" width="0.1666%" height="15" fill="rgb(211,50,8)"/><text x="75.2591%" y="127.50"></text></g><g><title>fn_sig (1,647,971 samples, 0.35%)</title><rect x="74.8317%" y="149" width="0.3544%" height="15" fill="rgb(245,182,24)"/><text x="75.0817%" y="159.50"></text></g><g><title>named_region_map (859,559 samples, 0.18%)</title><rect x="75.3505%" y="133" width="0.1849%" height="15" fill="rgb(242,14,37)"/><text x="75.6005%" y="143.50"></text></g><g><title>resolve_lifetimes (764,107 samples, 0.16%)</title><rect x="75.3711%" y="117" width="0.1643%" height="15" fill="rgb(246,228,12)"/><text x="75.6211%" y="127.50"></text></g><g><title>generics_of (1,683,361 samples, 0.36%)</title><rect x="75.1861%" y="149" width="0.3620%" height="15" fill="rgb(213,55,15)"/><text x="75.4361%" y="159.50"></text></g><g><title>explicit_predicates_of (650,873 samples, 0.14%)</title><rect x="75.7729%" y="117" width="0.1400%" height="15" fill="rgb(209,9,3)"/><text x="76.0229%" y="127.50"></text></g><g><title>type_of (539,486 samples, 0.12%)</title><rect x="76.1049%" y="69" width="0.1160%" height="15" fill="rgb(230,59,30)"/><text x="76.3549%" y="79.50"></text></g><g><title>predicates_of (2,726,127 samples, 0.59%)</title><rect x="75.6347%" y="149" width="0.5863%" height="15" fill="rgb(209,121,21)"/><text x="75.8847%" y="159.50"></text></g><g><title>predicates_defined_on (2,478,114 samples, 0.53%)</title><rect x="75.6881%" y="133" width="0.5329%" height="15" fill="rgb(220,109,13)"/><text x="75.9381%" y="143.50"></text></g><g><title>inferred_outlives_of (1,432,907 samples, 0.31%)</title><rect x="75.9128%" y="117" width="0.3082%" height="15" fill="rgb(232,18,1)"/><text x="76.1628%" y="127.50"></text></g><g><title>inferred_outlives_crate (1,347,145 samples, 0.29%)</title><rect x="75.9313%" y="101" width="0.2897%" height="15" fill="rgb(215,41,42)"/><text x="76.1813%" y="111.50"></text></g><g><title>type_of (956,941 samples, 0.21%)</title><rect x="76.0152%" y="85" width="0.2058%" height="15" fill="rgb(224,123,36)"/><text x="76.2652%" y="95.50"></text></g><g><title>type_collecting (18,440,175 samples, 3.97%)</title><rect x="72.3210%" y="181" width="3.9657%" height="15" fill="rgb(240,125,3)"/><text x="72.5710%" y="191.50">type..</text></g><g><title>collect_mod_item_types (18,401,715 samples, 3.96%)</title><rect x="72.3293%" y="165" width="3.9575%" height="15" fill="rgb(205,98,50)"/><text x="72.5793%" y="175.50">coll..</text></g><g><title>evaluate_obligation (1,745,524 samples, 0.38%)</title><rect x="78.0909%" y="149" width="0.3754%" height="15" fill="rgb(205,185,37)"/><text x="78.3409%" y="159.50"></text></g><g><title>implied_outlives_bounds (625,165 samples, 0.13%)</title><rect x="78.4722%" y="149" width="0.1344%" height="15" fill="rgb(238,207,15)"/><text x="78.7222%" y="159.50"></text></g><g><title>param_env (1,198,875 samples, 0.26%)</title><rect x="78.7063%" y="149" width="0.2578%" height="15" fill="rgb(213,199,42)"/><text x="78.9563%" y="159.50"></text></g><g><title>region_scope_tree (2,194,178 samples, 0.47%)</title><rect x="78.9775%" y="149" width="0.4719%" height="15" fill="rgb(235,201,11)"/><text x="79.2275%" y="159.50"></text></g><g><title>check_impl_item_well_formed (13,862,187 samples, 2.98%)</title><rect x="76.4916%" y="165" width="2.9812%" height="15" fill="rgb(207,46,11)"/><text x="76.7416%" y="175.50">che..</text></g><g><title>evaluate_obligation (2,044,862 samples, 0.44%)</title><rect x="80.3185%" y="149" width="0.4398%" height="15" fill="rgb(241,35,35)"/><text x="80.5685%" y="159.50"></text></g><g><title>param_env (923,520 samples, 0.20%)</title><rect x="80.8963%" y="149" width="0.1986%" height="15" fill="rgb(243,32,47)"/><text x="81.1463%" y="159.50"></text></g><g><title>analysis (376,467,574 samples, 80.96%)</title><rect x="0.2554%" y="213" width="80.9628%" height="15" fill="rgb(247,202,23)"/><text x="0.5054%" y="223.50">analysis</text></g><g><title>type_check_crate (214,644,416 samples, 46.16%)</title><rect x="35.0570%" y="197" width="46.1613%" height="15" fill="rgb(219,102,11)"/><text x="35.3070%" y="207.50">type_check_crate</text></g><g><title>wf_checking (22,901,524 samples, 4.93%)</title><rect x="76.2931%" y="181" width="4.9252%" height="15" fill="rgb(243,110,44)"/><text x="76.5431%" y="191.50">wf_che..</text></g><g><title>check_item_well_formed (8,116,162 samples, 1.75%)</title><rect x="79.4728%" y="165" width="1.7455%" height="15" fill="rgb(222,74,54)"/><text x="79.7228%" y="175.50"></text></g><g><title>AST_validation (505,466 samples, 0.11%)</title><rect x="81.3502%" y="197" width="0.1087%" height="15" fill="rgb(216,99,12)"/><text x="81.6002%" y="207.50"></text></g><g><title>metadata_load_macro (613,170 samples, 0.13%)</title><rect x="90.1799%" y="165" width="0.1319%" height="15" fill="rgb(226,22,26)"/><text x="90.4299%" y="175.50"></text></g><g><title>metadata_register_crate (1,881,760 samples, 0.40%)</title><rect x="90.3118%" y="165" width="0.4047%" height="15" fill="rgb(217,163,10)"/><text x="90.5618%" y="175.50"></text></g><g><title>metadata_register_crate (762,887 samples, 0.16%)</title><rect x="90.5524%" y="149" width="0.1641%" height="15" fill="rgb(213,25,53)"/><text x="90.8024%" y="159.50"></text></g><g><title>macro_expand_crate (43,375,251 samples, 9.33%)</title><rect x="81.5375%" y="197" width="9.3282%" height="15" fill="rgb(252,105,26)"/><text x="81.7875%" y="207.50">macro_expand_..</text></g><g><title>expand_crate (43,353,841 samples, 9.32%)</title><rect x="81.5421%" y="181" width="9.3236%" height="15" fill="rgb(220,39,43)"/><text x="81.7921%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (693,987 samples, 0.15%)</title><rect x="90.7165%" y="165" width="0.1492%" height="15" fill="rgb(229,68,48)"/><text x="90.9665%" y="175.50"></text></g><g><title>finalize_macro_resolutions (544,456 samples, 0.12%)</title><rect x="90.9763%" y="181" width="0.1171%" height="15" fill="rgb(252,8,32)"/><text x="91.2263%" y="191.50"></text></g><g><title>late_resolve_crate (7,417,083 samples, 1.60%)</title><rect x="91.0934%" y="181" width="1.5951%" height="15" fill="rgb(223,20,43)"/><text x="91.3434%" y="191.50"></text></g><g><title>configure_and_expand (53,436,094 samples, 11.49%)</title><rect x="81.3189%" y="213" width="11.4919%" height="15" fill="rgb(229,81,49)"/><text x="81.5689%" y="223.50">configure_and_exp..</text></g><g><title>resolve_crate (8,975,480 samples, 1.93%)</title><rect x="90.8806%" y="197" width="1.9303%" height="15" fill="rgb(236,28,36)"/><text x="91.1306%" y="207.50">r..</text></g><g><title>drop_ast (906,300 samples, 0.19%)</title><rect x="92.8108%" y="213" width="0.1949%" height="15" fill="rgb(249,185,26)"/><text x="93.0608%" y="223.50"></text></g><g><title>early_lint_checks (2,268,035 samples, 0.49%)</title><rect x="93.0102%" y="213" width="0.4878%" height="15" fill="rgb(249,174,33)"/><text x="93.2602%" y="223.50"></text></g><g><title>free_global_ctxt (7,266,241 samples, 1.56%)</title><rect x="93.4979%" y="213" width="1.5627%" height="15" fill="rgb(233,201,37)"/><text x="93.7479%" y="223.50"></text></g><g><title>generate_crate_metadata (4,584,041 samples, 0.99%)</title><rect x="95.0606%" y="213" width="0.9858%" height="15" fill="rgb(221,78,26)"/><text x="95.3106%" y="223.50"></text></g><g><title>hir_lowering (14,915,495 samples, 3.21%)</title><rect x="96.0465%" y="213" width="3.2077%" height="15" fill="rgb(250,127,30)"/><text x="96.2965%" y="223.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,121,213 samples, 0.46%)</title><rect x="99.3910%" y="213" width="0.4562%" height="15" fill="rgb(230,49,44)"/><text x="99.6410%" y="223.50"></text></g><g><title>all (464,988,178 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (464,988,178 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (561,506 samples, 0.12%)</title><rect x="99.8792%" y="213" width="0.1208%" height="15" fill="rgb(215,43,3)"/><text x="100.1292%" y="223.50"></text></g></svg></svg>