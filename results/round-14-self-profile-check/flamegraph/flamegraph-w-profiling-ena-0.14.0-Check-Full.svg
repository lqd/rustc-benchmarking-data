<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (359,855 samples, 0.17%)</title><rect x="11.7115%" y="149" width="0.1693%" height="15" fill="rgb(227,0,7)"/><text x="11.9615%" y="159.50"></text></g><g><title>evaluate_obligation (241,065 samples, 0.11%)</title><rect x="11.7673%" y="133" width="0.1134%" height="15" fill="rgb(217,0,24)"/><text x="12.0173%" y="143.50"></text></g><g><title>param_env (308,345 samples, 0.15%)</title><rect x="13.3168%" y="117" width="0.1451%" height="15" fill="rgb(221,193,54)"/><text x="13.5668%" y="127.50"></text></g><g><title>item_attrs (490,425 samples, 0.23%)</title><rect x="13.9057%" y="85" width="0.2307%" height="15" fill="rgb(248,212,6)"/><text x="14.1557%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (484,655 samples, 0.23%)</title><rect x="13.9084%" y="69" width="0.2280%" height="15" fill="rgb(208,68,35)"/><text x="14.1584%" y="79.50"></text></g><g><title>codegen_fn_attrs (598,027 samples, 0.28%)</title><rect x="13.8637%" y="101" width="0.2814%" height="15" fill="rgb(232,128,0)"/><text x="14.1137%" y="111.50"></text></g><g><title>is_copy_raw (241,915 samples, 0.11%)</title><rect x="16.4363%" y="85" width="0.1138%" height="15" fill="rgb(207,160,47)"/><text x="16.6863%" y="95.50"></text></g><g><title>is_copy_raw (1,749,061 samples, 0.82%)</title><rect x="16.7674%" y="69" width="0.8229%" height="15" fill="rgb(228,23,34)"/><text x="17.0174%" y="79.50"></text></g><g><title>evaluate_obligation (1,393,196 samples, 0.66%)</title><rect x="16.9348%" y="53" width="0.6555%" height="15" fill="rgb(218,30,26)"/><text x="17.1848%" y="63.50"></text></g><g><title>needs_drop_raw (2,257,888 samples, 1.06%)</title><rect x="16.5507%" y="85" width="1.0623%" height="15" fill="rgb(220,122,19)"/><text x="16.8007%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (677,180 samples, 0.32%)</title><rect x="17.8570%" y="69" width="0.3186%" height="15" fill="rgb(250,228,42)"/><text x="18.1070%" y="79.50"></text></g><g><title>impl_parent (336,275 samples, 0.16%)</title><rect x="18.4663%" y="53" width="0.1582%" height="15" fill="rgb(240,193,28)"/><text x="18.7163%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (221,851 samples, 0.10%)</title><rect x="18.5201%" y="37" width="0.1044%" height="15" fill="rgb(216,20,37)"/><text x="18.7701%" y="47.50"></text></g><g><title>specialization_graph_of (1,693,328 samples, 0.80%)</title><rect x="18.2304%" y="69" width="0.7967%" height="15" fill="rgb(206,188,39)"/><text x="18.4804%" y="79.50"></text></g><g><title>impl_trait_ref (855,708 samples, 0.40%)</title><rect x="18.6245%" y="53" width="0.4026%" height="15" fill="rgb(217,207,13)"/><text x="18.8745%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (736,937 samples, 0.35%)</title><rect x="18.6804%" y="37" width="0.3467%" height="15" fill="rgb(231,73,38)"/><text x="18.9304%" y="47.50"></text></g><g><title>resolve_instance (3,136,387 samples, 1.48%)</title><rect x="17.6130%" y="85" width="1.4756%" height="15" fill="rgb(225,20,46)"/><text x="17.8630%" y="95.50"></text></g><g><title>thir_body (1,775,372 samples, 0.84%)</title><rect x="19.1215%" y="85" width="0.8353%" height="15" fill="rgb(210,31,41)"/><text x="19.3715%" y="95.50"></text></g><g><title>mir_const (15,848,724 samples, 7.46%)</title><rect x="12.5976%" y="133" width="7.4564%" height="15" fill="rgb(221,200,47)"/><text x="12.8476%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (14,011,681 samples, 6.59%)</title><rect x="13.4619%" y="117" width="6.5921%" height="15" fill="rgb(226,26,5)"/><text x="13.7119%" y="127.50">unsafety_..</text></g><g><title>mir_built (12,559,457 samples, 5.91%)</title><rect x="14.1451%" y="101" width="5.9089%" height="15" fill="rgb(249,33,26)"/><text x="14.3951%" y="111.50">mir_built</text></g><g><title>mir_promoted (17,465,024 samples, 8.22%)</title><rect x="11.8808%" y="149" width="8.2169%" height="15" fill="rgb(235,183,28)"/><text x="12.1308%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,552,650 samples, 0.73%)</title><rect x="20.0976%" y="149" width="0.7305%" height="15" fill="rgb(221,5,38)"/><text x="20.3476%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,023,130 samples, 0.48%)</title><rect x="20.8281%" y="149" width="0.4814%" height="15" fill="rgb(247,18,42)"/><text x="21.0781%" y="159.50"></text></g><g><title>normalize_projection_ty (393,645 samples, 0.19%)</title><rect x="21.1243%" y="133" width="0.1852%" height="15" fill="rgb(241,131,45)"/><text x="21.3743%" y="143.50"></text></g><g><title>type_op_normalize_predicate (501,657 samples, 0.24%)</title><rect x="21.3149%" y="149" width="0.2360%" height="15" fill="rgb(249,31,29)"/><text x="21.5649%" y="159.50"></text></g><g><title>type_op_normalize_ty (789,199 samples, 0.37%)</title><rect x="21.5509%" y="149" width="0.3713%" height="15" fill="rgb(225,111,53)"/><text x="21.8009%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,007,671 samples, 3.30%)</title><rect x="21.9222%" y="149" width="3.2969%" height="15" fill="rgb(238,160,17)"/><text x="22.1722%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (52,399,346 samples, 24.65%)</title><rect x="0.5719%" y="181" width="24.6526%" height="15" fill="rgb(214,148,48)"/><text x="0.8219%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (52,158,303 samples, 24.54%)</title><rect x="0.6853%" y="165" width="24.5392%" height="15" fill="rgb(232,36,49)"/><text x="0.9353%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (297,104 samples, 0.14%)</title><rect x="25.2573%" y="181" width="0.1398%" height="15" fill="rgb(209,103,24)"/><text x="25.5073%" y="191.50"></text></g><g><title>should_inherit_track_caller (330,292 samples, 0.16%)</title><rect x="25.6861%" y="133" width="0.1554%" height="15" fill="rgb(229,88,8)"/><text x="25.9361%" y="143.50"></text></g><g><title>codegen_fn_attrs (593,327 samples, 0.28%)</title><rect x="25.5700%" y="149" width="0.2791%" height="15" fill="rgb(213,181,19)"/><text x="25.8200%" y="159.50"></text></g><g><title>check_mod_attrs (931,412 samples, 0.44%)</title><rect x="25.4110%" y="165" width="0.4382%" height="15" fill="rgb(254,191,54)"/><text x="25.6610%" y="175.50"></text></g><g><title>lookup_deprecation_entry (218,833 samples, 0.10%)</title><rect x="26.1519%" y="149" width="0.1030%" height="15" fill="rgb(241,83,37)"/><text x="26.4019%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (594,605 samples, 0.28%)</title><rect x="26.0163%" y="165" width="0.2797%" height="15" fill="rgb(233,36,39)"/><text x="26.2663%" y="175.50"></text></g><g><title>misc_checking_1 (1,977,942 samples, 0.93%)</title><rect x="25.3972%" y="181" width="0.9306%" height="15" fill="rgb(226,3,54)"/><text x="25.6472%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (749,208 samples, 0.35%)</title><rect x="26.3286%" y="165" width="0.3525%" height="15" fill="rgb(245,192,40)"/><text x="26.5786%" y="175.50"></text></g><g><title>check_mod_liveness (592,506 samples, 0.28%)</title><rect x="26.4023%" y="149" width="0.2788%" height="15" fill="rgb(238,167,29)"/><text x="26.6523%" y="159.50"></text></g><g><title>misc_checking_2 (1,776,439 samples, 0.84%)</title><rect x="26.3278%" y="181" width="0.8358%" height="15" fill="rgb(232,182,51)"/><text x="26.5778%" y="191.50"></text></g><g><title>match_checking (1,025,591 samples, 0.48%)</title><rect x="26.6811%" y="165" width="0.4825%" height="15" fill="rgb(231,60,39)"/><text x="26.9311%" y="175.50"></text></g><g><title>check_match (963,141 samples, 0.45%)</title><rect x="26.7105%" y="149" width="0.4531%" height="15" fill="rgb(208,69,12)"/><text x="26.9605%" y="159.50"></text></g><g><title>check_private_in_public (433,505 samples, 0.20%)</title><rect x="27.1683%" y="165" width="0.2040%" height="15" fill="rgb(235,93,37)"/><text x="27.4183%" y="175.50"></text></g><g><title>death_checking (727,588 samples, 0.34%)</title><rect x="27.3723%" y="165" width="0.3423%" height="15" fill="rgb(213,116,39)"/><text x="27.6223%" y="175.50"></text></g><g><title>param_env (344,954 samples, 0.16%)</title><rect x="28.1560%" y="133" width="0.1623%" height="15" fill="rgb(222,207,29)"/><text x="28.4060%" y="143.50"></text></g><g><title>crate_lints (2,657,659 samples, 1.25%)</title><rect x="27.7154%" y="149" width="1.2504%" height="15" fill="rgb(206,96,30)"/><text x="27.9654%" y="159.50"></text></g><g><title>type_of (1,375,295 samples, 0.65%)</title><rect x="28.3187%" y="133" width="0.6470%" height="15" fill="rgb(218,138,4)"/><text x="28.5687%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (893,227 samples, 0.42%)</title><rect x="28.5455%" y="117" width="0.4202%" height="15" fill="rgb(250,191,14)"/><text x="28.7955%" y="127.50"></text></g><g><title>lint_checking (3,344,377 samples, 1.57%)</title><rect x="27.7146%" y="165" width="1.5734%" height="15" fill="rgb(239,60,40)"/><text x="27.9646%" y="175.50"></text></g><g><title>module_lints (685,138 samples, 0.32%)</title><rect x="28.9657%" y="149" width="0.3223%" height="15" fill="rgb(206,27,48)"/><text x="29.2157%" y="159.50"></text></g><g><title>lint_mod (678,668 samples, 0.32%)</title><rect x="28.9688%" y="133" width="0.3193%" height="15" fill="rgb(225,35,8)"/><text x="29.2188%" y="143.50"></text></g><g><title>privacy_access_levels (619,287 samples, 0.29%)</title><rect x="29.2881%" y="165" width="0.2914%" height="15" fill="rgb(250,213,24)"/><text x="29.5381%" y="175.50"></text></g><g><title>privacy_checking_modules (1,783,560 samples, 0.84%)</title><rect x="29.5794%" y="165" width="0.8391%" height="15" fill="rgb(247,123,22)"/><text x="29.8294%" y="175.50"></text></g><g><title>check_mod_privacy (1,778,890 samples, 0.84%)</title><rect x="29.5816%" y="149" width="0.8369%" height="15" fill="rgb(231,138,38)"/><text x="29.8316%" y="159.50"></text></g><g><title>misc_checking_3 (6,936,127 samples, 3.26%)</title><rect x="27.1636%" y="181" width="3.2633%" height="15" fill="rgb(231,145,46)"/><text x="27.4136%" y="191.50">mis..</text></g><g><title>adt_destructor (343,834 samples, 0.16%)</title><rect x="30.5133%" y="133" width="0.1618%" height="15" fill="rgb(251,118,11)"/><text x="30.7633%" y="143.50"></text></g><g><title>coherent_trait (336,624 samples, 0.16%)</title><rect x="30.5167%" y="117" width="0.1584%" height="15" fill="rgb(217,147,25)"/><text x="30.7667%" y="127.50"></text></g><g><title>specialization_graph_of (334,964 samples, 0.16%)</title><rect x="30.5174%" y="101" width="0.1576%" height="15" fill="rgb(247,81,37)"/><text x="30.7674%" y="111.50"></text></g><g><title>impl_parent (2,368,682 samples, 1.11%)</title><rect x="32.4476%" y="117" width="1.1144%" height="15" fill="rgb(209,12,38)"/><text x="32.6976%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,261,621 samples, 0.59%)</title><rect x="32.9684%" y="101" width="0.5936%" height="15" fill="rgb(227,1,9)"/><text x="33.2184%" y="111.50"></text></g><g><title>impl_trait_ref (4,806,943 samples, 2.26%)</title><rect x="33.5620%" y="117" width="2.2615%" height="15" fill="rgb(248,47,43)"/><text x="33.8120%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,943,809 samples, 1.86%)</title><rect x="33.9681%" y="101" width="1.8555%" height="15" fill="rgb(221,10,30)"/><text x="34.2181%" y="111.50">m..</text></g><g><title>coherent_trait (12,092,465 samples, 5.69%)</title><rect x="30.4922%" y="149" width="5.6892%" height="15" fill="rgb(210,229,1)"/><text x="30.7422%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (11,571,518 samples, 5.44%)</title><rect x="30.7373%" y="133" width="5.4441%" height="15" fill="rgb(222,148,37)"/><text x="30.9873%" y="143.50">special..</text></g><g><title>trait_impls_of (743,436 samples, 0.35%)</title><rect x="35.8316%" y="117" width="0.3498%" height="15" fill="rgb(234,67,33)"/><text x="36.0816%" y="127.50"></text></g><g><title>coherence_checking (12,226,627 samples, 5.75%)</title><rect x="30.4813%" y="165" width="5.7523%" height="15" fill="rgb(247,98,35)"/><text x="30.7313%" y="175.50">coheren..</text></g><g><title>associated_item (403,625 samples, 0.19%)</title><rect x="53.5811%" y="101" width="0.1899%" height="15" fill="rgb(247,138,52)"/><text x="53.8311%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (328,913 samples, 0.15%)</title><rect x="53.6163%" y="85" width="0.1547%" height="15" fill="rgb(213,79,30)"/><text x="53.8663%" y="95.50"></text></g><g><title>associated_items (559,496 samples, 0.26%)</title><rect x="53.5197%" y="117" width="0.2632%" height="15" fill="rgb(246,177,23)"/><text x="53.7697%" y="127.50"></text></g><g><title>adt_dtorck_constraint (259,272 samples, 0.12%)</title><rect x="54.0437%" y="101" width="0.1220%" height="15" fill="rgb(230,62,27)"/><text x="54.2937%" y="111.50"></text></g><g><title>dropck_outlives (825,779 samples, 0.39%)</title><rect x="53.8288%" y="117" width="0.3885%" height="15" fill="rgb(216,154,8)"/><text x="54.0788%" y="127.50"></text></g><g><title>trait_impls_of (324,482 samples, 0.15%)</title><rect x="55.6978%" y="101" width="0.1527%" height="15" fill="rgb(244,35,45)"/><text x="55.9478%" y="111.50"></text></g><g><title>evaluate_obligation (3,472,412 samples, 1.63%)</title><rect x="54.2173%" y="117" width="1.6337%" height="15" fill="rgb(251,115,12)"/><text x="54.4673%" y="127.50"></text></g><g><title>generics_of (356,972 samples, 0.17%)</title><rect x="55.9423%" y="117" width="0.1679%" height="15" fill="rgb(240,54,50)"/><text x="56.1923%" y="127.50"></text></g><g><title>item_attrs (224,662 samples, 0.11%)</title><rect x="56.2079%" y="117" width="0.1057%" height="15" fill="rgb(233,84,52)"/><text x="56.4579%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (214,442 samples, 0.10%)</title><rect x="56.2128%" y="101" width="0.1009%" height="15" fill="rgb(207,117,47)"/><text x="56.4628%" y="111.50"></text></g><g><title>evaluate_obligation (617,376 samples, 0.29%)</title><rect x="56.6442%" y="101" width="0.2905%" height="15" fill="rgb(249,43,39)"/><text x="56.8942%" y="111.50"></text></g><g><title>method_autoderef_steps (1,250,241 samples, 0.59%)</title><rect x="56.3508%" y="117" width="0.5882%" height="15" fill="rgb(209,38,44)"/><text x="56.6008%" y="127.50"></text></g><g><title>predicates_of (412,228 samples, 0.19%)</title><rect x="57.0414%" y="117" width="0.1939%" height="15" fill="rgb(236,212,23)"/><text x="57.2914%" y="127.50"></text></g><g><title>predicates_defined_on (278,357 samples, 0.13%)</title><rect x="57.1044%" y="101" width="0.1310%" height="15" fill="rgb(242,79,21)"/><text x="57.3544%" y="111.50"></text></g><g><title>evaluate_obligation (348,485 samples, 0.16%)</title><rect x="59.5453%" y="101" width="0.1640%" height="15" fill="rgb(211,96,35)"/><text x="59.7953%" y="111.50"></text></g><g><title>typeck (5,677,443 samples, 2.67%)</title><rect x="57.3074%" y="117" width="2.6711%" height="15" fill="rgb(253,215,40)"/><text x="57.5574%" y="127.50">ty..</text></g><g><title>item_bodies_checking (50,481,414 samples, 23.75%)</title><rect x="36.2655%" y="165" width="23.7503%" height="15" fill="rgb(211,81,21)"/><text x="36.5155%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,477,484 samples, 23.75%)</title><rect x="36.2673%" y="149" width="23.7484%" height="15" fill="rgb(208,190,38)"/><text x="36.5173%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (50,303,702 samples, 23.67%)</title><rect x="36.3491%" y="133" width="23.6666%" height="15" fill="rgb(235,213,38)"/><text x="36.5991%" y="143.50">typeck</text></g><g><title>item_types_checking (3,259,906 samples, 1.53%)</title><rect x="60.0157%" y="165" width="1.5337%" height="15" fill="rgb(237,122,38)"/><text x="60.2657%" y="175.50"></text></g><g><title>check_mod_item_types (3,253,976 samples, 1.53%)</title><rect x="60.0185%" y="149" width="1.5309%" height="15" fill="rgb(244,218,35)"/><text x="60.2685%" y="159.50"></text></g><g><title>fn_sig (691,966 samples, 0.33%)</title><rect x="61.8215%" y="133" width="0.3256%" height="15" fill="rgb(240,68,47)"/><text x="62.0715%" y="143.50"></text></g><g><title>named_region_map (228,733 samples, 0.11%)</title><rect x="62.3006%" y="117" width="0.1076%" height="15" fill="rgb(210,16,53)"/><text x="62.5506%" y="127.50"></text></g><g><title>generics_of (584,716 samples, 0.28%)</title><rect x="62.1471%" y="133" width="0.2751%" height="15" fill="rgb(235,124,12)"/><text x="62.3971%" y="143.50"></text></g><g><title>late_bound_vars_map (819,958 samples, 0.39%)</title><rect x="62.9764%" y="85" width="0.3858%" height="15" fill="rgb(224,169,11)"/><text x="63.2264%" y="95.50"></text></g><g><title>resolve_lifetimes (782,228 samples, 0.37%)</title><rect x="62.9942%" y="69" width="0.3680%" height="15" fill="rgb(250,166,2)"/><text x="63.2442%" y="79.50"></text></g><g><title>explicit_predicates_of (1,584,647 samples, 0.75%)</title><rect x="62.6569%" y="101" width="0.7455%" height="15" fill="rgb(242,216,29)"/><text x="62.9069%" y="111.50"></text></g><g><title>predicates_of (2,345,908 samples, 1.10%)</title><rect x="62.5189%" y="133" width="1.1037%" height="15" fill="rgb(230,116,27)"/><text x="62.7689%" y="143.50"></text></g><g><title>predicates_defined_on (2,230,636 samples, 1.05%)</title><rect x="62.5731%" y="117" width="1.0495%" height="15" fill="rgb(228,99,48)"/><text x="62.8231%" y="127.50"></text></g><g><title>inferred_outlives_of (467,867 samples, 0.22%)</title><rect x="63.4024%" y="101" width="0.2201%" height="15" fill="rgb(253,11,6)"/><text x="63.6524%" y="111.50"></text></g><g><title>inferred_outlives_crate (426,954 samples, 0.20%)</title><rect x="63.4217%" y="85" width="0.2009%" height="15" fill="rgb(247,143,39)"/><text x="63.6717%" y="95.50"></text></g><g><title>type_of (313,543 samples, 0.15%)</title><rect x="63.4750%" y="69" width="0.1475%" height="15" fill="rgb(236,97,10)"/><text x="63.7250%" y="79.50"></text></g><g><title>type_collecting (4,782,953 samples, 2.25%)</title><rect x="61.5508%" y="165" width="2.2503%" height="15" fill="rgb(233,208,19)"/><text x="61.8008%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,767,543 samples, 2.24%)</title><rect x="61.5580%" y="149" width="2.2430%" height="15" fill="rgb(216,164,2)"/><text x="61.8080%" y="159.50">c..</text></g><g><title>type_of (329,234 samples, 0.15%)</title><rect x="63.6461%" y="133" width="0.1549%" height="15" fill="rgb(220,129,5)"/><text x="63.8961%" y="143.50"></text></g><g><title>evaluate_obligation (1,397,791 samples, 0.66%)</title><rect x="67.8865%" y="133" width="0.6576%" height="15" fill="rgb(242,17,10)"/><text x="68.1365%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,158,229 samples, 0.54%)</title><rect x="68.5542%" y="133" width="0.5449%" height="15" fill="rgb(242,107,0)"/><text x="68.8042%" y="143.50"></text></g><g><title>param_env (1,860,108 samples, 0.88%)</title><rect x="69.0997%" y="133" width="0.8751%" height="15" fill="rgb(251,28,31)"/><text x="69.3497%" y="143.50"></text></g><g><title>region_scope_tree (751,313 samples, 0.35%)</title><rect x="70.0020%" y="133" width="0.3535%" height="15" fill="rgb(233,223,10)"/><text x="70.2520%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,635,984 samples, 6.42%)</title><rect x="64.0334%" y="149" width="6.4154%" height="15" fill="rgb(215,21,27)"/><text x="64.2834%" y="159.50">check_im..</text></g><g><title>implied_outlives_bounds (282,695 samples, 0.13%)</title><rect x="72.9264%" y="133" width="0.1330%" height="15" fill="rgb(232,23,21)"/><text x="73.1764%" y="143.50"></text></g><g><title>param_env (1,158,474 samples, 0.55%)</title><rect x="73.0594%" y="133" width="0.5450%" height="15" fill="rgb(244,5,23)"/><text x="73.3094%" y="143.50"></text></g><g><title>check_item_well_formed (7,180,789 samples, 3.38%)</title><rect x="70.4488%" y="149" width="3.3784%" height="15" fill="rgb(226,81,46)"/><text x="70.6988%" y="159.50">che..</text></g><g><title>evaluate_obligation (400,764 samples, 0.19%)</title><rect x="74.6561%" y="133" width="0.1885%" height="15" fill="rgb(247,70,30)"/><text x="74.9061%" y="143.50"></text></g><g><title>implied_outlives_bounds (222,725 samples, 0.10%)</title><rect x="74.8448%" y="133" width="0.1048%" height="15" fill="rgb(212,68,19)"/><text x="75.0948%" y="143.50"></text></g><g><title>param_env (333,853 samples, 0.16%)</title><rect x="74.9496%" y="133" width="0.1571%" height="15" fill="rgb(240,187,13)"/><text x="75.1996%" y="143.50"></text></g><g><title>analysis (158,937,432 samples, 74.78%)</title><rect x="0.3508%" y="197" width="74.7761%" height="15" fill="rgb(223,113,26)"/><text x="0.6008%" y="207.50">analysis</text></g><g><title>type_check_crate (95,010,510 samples, 44.70%)</title><rect x="30.4269%" y="181" width="44.7001%" height="15" fill="rgb(206,192,2)"/><text x="30.6769%" y="191.50">type_check_crate</text></g><g><title>wf_checking (24,062,168 samples, 11.32%)</title><rect x="63.8063%" y="165" width="11.3207%" height="15" fill="rgb(241,108,4)"/><text x="64.0563%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,762,670 samples, 1.30%)</title><rect x="73.8272%" y="149" width="1.2998%" height="15" fill="rgb(247,173,49)"/><text x="74.0772%" y="159.50"></text></g><g><title>codegen_crate (578,886 samples, 0.27%)</title><rect x="75.1320%" y="197" width="0.2724%" height="15" fill="rgb(224,114,35)"/><text x="75.3820%" y="207.50"></text></g><g><title>metadata_load_macro (334,055 samples, 0.16%)</title><rect x="90.2810%" y="149" width="0.1572%" height="15" fill="rgb(245,159,27)"/><text x="90.5310%" y="159.50"></text></g><g><title>metadata_register_crate (2,751,451 samples, 1.29%)</title><rect x="90.4381%" y="149" width="1.2945%" height="15" fill="rgb(245,172,44)"/><text x="90.6881%" y="159.50"></text></g><g><title>metadata_register_crate (944,782 samples, 0.44%)</title><rect x="91.2881%" y="133" width="0.4445%" height="15" fill="rgb(236,23,11)"/><text x="91.5381%" y="143.50"></text></g><g><title>macro_expand_crate (34,787,478 samples, 16.37%)</title><rect x="75.6884%" y="181" width="16.3666%" height="15" fill="rgb(205,117,38)"/><text x="75.9384%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (34,774,098 samples, 16.36%)</title><rect x="75.6947%" y="165" width="16.3604%" height="15" fill="rgb(237,72,25)"/><text x="75.9447%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (685,268 samples, 0.32%)</title><rect x="91.7326%" y="149" width="0.3224%" height="15" fill="rgb(244,70,9)"/><text x="91.9826%" y="159.50"></text></g><g><title>late_resolve_crate (2,416,927 samples, 1.14%)</title><rect x="92.1815%" y="165" width="1.1371%" height="15" fill="rgb(217,125,39)"/><text x="92.4315%" y="175.50"></text></g><g><title>configure_and_expand (38,257,576 samples, 18.00%)</title><rect x="75.4044%" y="197" width="17.9992%" height="15" fill="rgb(235,36,10)"/><text x="75.6544%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,816,531 samples, 1.33%)</title><rect x="92.0785%" y="181" width="1.3251%" height="15" fill="rgb(251,123,47)"/><text x="92.3285%" y="191.50"></text></g><g><title>drop_ast (305,724 samples, 0.14%)</title><rect x="93.4036%" y="197" width="0.1438%" height="15" fill="rgb(221,13,13)"/><text x="93.6536%" y="207.50"></text></g><g><title>early_lint_checks (548,356 samples, 0.26%)</title><rect x="93.5572%" y="197" width="0.2580%" height="15" fill="rgb(238,131,9)"/><text x="93.8072%" y="207.50"></text></g><g><title>free_global_ctxt (4,007,895 samples, 1.89%)</title><rect x="93.8152%" y="197" width="1.8856%" height="15" fill="rgb(211,50,8)"/><text x="94.0652%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,059,093 samples, 0.97%)</title><rect x="95.7009%" y="197" width="0.9688%" height="15" fill="rgb(245,182,24)"/><text x="95.9509%" y="207.50"></text></g><g><title>hir_lowering (5,034,396 samples, 2.37%)</title><rect x="96.6696%" y="197" width="2.3686%" height="15" fill="rgb(242,14,37)"/><text x="96.9196%" y="207.50">hi..</text></g><g><title>parse_crate (341,504 samples, 0.16%)</title><rect x="99.0654%" y="197" width="0.1607%" height="15" fill="rgb(246,228,12)"/><text x="99.3154%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (931,721 samples, 0.44%)</title><rect x="99.3280%" y="197" width="0.4384%" height="15" fill="rgb(213,55,15)"/><text x="99.5780%" y="207.50"></text></g><g><title>all (212,551,062 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (212,551,062 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (392,365 samples, 0.18%)</title><rect x="99.8154%" y="197" width="0.1846%" height="15" fill="rgb(209,121,21)"/><text x="100.0654%" y="207.50"></text></g></svg></svg>