<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (99,552 samples, 0.11%)</title><rect x="5.3032%" y="245" width="0.1094%" height="15" fill="rgb(227,0,7)"/><text x="5.5532%" y="255.50"></text></g><g><title>param_env (185,294 samples, 0.20%)</title><rect x="6.1333%" y="213" width="0.2035%" height="15" fill="rgb(217,0,24)"/><text x="6.3833%" y="223.50"></text></g><g><title>item_attrs (139,870 samples, 0.15%)</title><rect x="6.5723%" y="181" width="0.1536%" height="15" fill="rgb(221,193,54)"/><text x="6.8223%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (132,570 samples, 0.15%)</title><rect x="6.5804%" y="165" width="0.1456%" height="15" fill="rgb(248,212,6)"/><text x="6.8304%" y="175.50"></text></g><g><title>codegen_fn_attrs (219,770 samples, 0.24%)</title><rect x="6.4964%" y="197" width="0.2414%" height="15" fill="rgb(208,68,35)"/><text x="6.7464%" y="207.50"></text></g><g><title>adt_drop_tys (189,065 samples, 0.21%)</title><rect x="7.6107%" y="165" width="0.2077%" height="15" fill="rgb(232,128,0)"/><text x="7.8607%" y="175.50"></text></g><g><title>needs_drop_raw (704,209 samples, 0.77%)</title><rect x="7.5358%" y="181" width="0.7735%" height="15" fill="rgb(207,160,47)"/><text x="7.7858%" y="191.50"></text></g><g><title>is_copy_raw (445,224 samples, 0.49%)</title><rect x="7.8203%" y="165" width="0.4890%" height="15" fill="rgb(228,23,34)"/><text x="8.0703%" y="175.50"></text></g><g><title>evaluate_obligation (369,414 samples, 0.41%)</title><rect x="7.9036%" y="149" width="0.4058%" height="15" fill="rgb(218,30,26)"/><text x="8.1536%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (97,321 samples, 0.11%)</title><rect x="8.4023%" y="165" width="0.1069%" height="15" fill="rgb(220,122,19)"/><text x="8.6523%" y="175.50"></text></g><g><title>impl_parent (967,241 samples, 1.06%)</title><rect x="9.6709%" y="149" width="1.0624%" height="15" fill="rgb(250,228,42)"/><text x="9.9209%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (455,566 samples, 0.50%)</title><rect x="10.2329%" y="133" width="0.5004%" height="15" fill="rgb(240,193,28)"/><text x="10.4829%" y="143.50"></text></g><g><title>specialization_graph_of (3,937,423 samples, 4.32%)</title><rect x="8.5388%" y="165" width="4.3250%" height="15" fill="rgb(216,20,37)"/><text x="8.7888%" y="175.50">speci..</text></g><g><title>impl_trait_ref (1,939,581 samples, 2.13%)</title><rect x="10.7333%" y="149" width="2.1305%" height="15" fill="rgb(206,188,39)"/><text x="10.9833%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,688,541 samples, 1.85%)</title><rect x="11.0091%" y="133" width="1.8547%" height="15" fill="rgb(217,207,13)"/><text x="11.2591%" y="143.50">m..</text></g><g><title>resolve_instance (4,187,167 samples, 4.60%)</title><rect x="8.3094%" y="181" width="4.5993%" height="15" fill="rgb(231,73,38)"/><text x="8.5594%" y="191.50">resol..</text></g><g><title>thir_body (297,324 samples, 0.33%)</title><rect x="12.9215%" y="181" width="0.3266%" height="15" fill="rgb(225,20,46)"/><text x="13.1715%" y="191.50"></text></g><g><title>mir_const (6,754,004 samples, 7.42%)</title><rect x="5.8387%" y="229" width="7.4187%" height="15" fill="rgb(210,31,41)"/><text x="6.0887%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (6,300,576 samples, 6.92%)</title><rect x="6.3368%" y="213" width="6.9207%" height="15" fill="rgb(221,200,47)"/><text x="6.5868%" y="223.50">unsafety_..</text></g><g><title>mir_built (5,935,495 samples, 6.52%)</title><rect x="6.7378%" y="197" width="6.5197%" height="15" fill="rgb(226,26,5)"/><text x="6.9878%" y="207.50">mir_built</text></g><g><title>has_structural_eq_impls (246,182 samples, 0.27%)</title><rect x="13.6214%" y="213" width="0.2704%" height="15" fill="rgb(249,33,26)"/><text x="13.8714%" y="223.50"></text></g><g><title>evaluate_obligation (208,642 samples, 0.23%)</title><rect x="13.6626%" y="197" width="0.2292%" height="15" fill="rgb(235,183,28)"/><text x="13.9126%" y="207.50"></text></g><g><title>trait_impls_of (160,952 samples, 0.18%)</title><rect x="13.7150%" y="181" width="0.1768%" height="15" fill="rgb(221,5,38)"/><text x="13.9650%" y="191.50"></text></g><g><title>is_freeze_raw (97,721 samples, 0.11%)</title><rect x="13.8939%" y="213" width="0.1073%" height="15" fill="rgb(247,18,42)"/><text x="14.1439%" y="223.50"></text></g><g><title>evaluate_obligation (91,391 samples, 0.10%)</title><rect x="13.9008%" y="197" width="0.1004%" height="15" fill="rgb(241,131,45)"/><text x="14.1508%" y="207.50"></text></g><g><title>mir_const (233,463 samples, 0.26%)</title><rect x="14.0057%" y="213" width="0.2564%" height="15" fill="rgb(249,31,29)"/><text x="14.2557%" y="223.50"></text></g><g><title>unsafety_check_result (168,141 samples, 0.18%)</title><rect x="14.0774%" y="197" width="0.1847%" height="15" fill="rgb(225,111,53)"/><text x="14.3274%" y="207.50"></text></g><g><title>mir_built (110,340 samples, 0.12%)</title><rect x="14.1409%" y="181" width="0.1212%" height="15" fill="rgb(238,160,17)"/><text x="14.3909%" y="191.50"></text></g><g><title>needs_drop_raw (151,002 samples, 0.17%)</title><rect x="14.2627%" y="213" width="0.1659%" height="15" fill="rgb(214,148,48)"/><text x="14.5127%" y="223.50"></text></g><g><title>mir_const_qualif (1,070,313 samples, 1.18%)</title><rect x="13.2575%" y="229" width="1.1757%" height="15" fill="rgb(232,36,49)"/><text x="13.5075%" y="239.50"></text></g><g><title>mir_promoted (8,156,077 samples, 8.96%)</title><rect x="5.4758%" y="245" width="8.9588%" height="15" fill="rgb(209,103,24)"/><text x="5.7258%" y="255.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (312,174 samples, 0.34%)</title><rect x="14.4347%" y="245" width="0.3429%" height="15" fill="rgb(229,88,8)"/><text x="14.6847%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (187,040 samples, 0.21%)</title><rect x="14.7776%" y="245" width="0.2054%" height="15" fill="rgb(213,181,19)"/><text x="15.0276%" y="255.50"></text></g><g><title>normalize_projection_ty (109,520 samples, 0.12%)</title><rect x="14.8627%" y="229" width="0.1203%" height="15" fill="rgb(254,191,54)"/><text x="15.1127%" y="239.50"></text></g><g><title>type_op_prove_predicate (1,145,994 samples, 1.26%)</title><rect x="15.0166%" y="245" width="1.2588%" height="15" fill="rgb(241,83,37)"/><text x="15.2666%" y="255.50"></text></g><g><title>MIR_borrow_checking (13,916,504 samples, 15.29%)</title><rect x="0.9955%" y="277" width="15.2862%" height="15" fill="rgb(233,36,39)"/><text x="1.2455%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,873,173 samples, 15.24%)</title><rect x="1.0431%" y="261" width="15.2386%" height="15" fill="rgb(226,3,54)"/><text x="1.2931%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (322,874 samples, 0.35%)</title><rect x="16.2817%" y="277" width="0.3547%" height="15" fill="rgb(245,192,40)"/><text x="16.5317%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (155,882 samples, 0.17%)</title><rect x="16.4651%" y="261" width="0.1712%" height="15" fill="rgb(238,167,29)"/><text x="16.7151%" y="271.50"></text></g><g><title>hir_module_items (155,532 samples, 0.17%)</title><rect x="16.6363%" y="277" width="0.1708%" height="15" fill="rgb(232,182,51)"/><text x="16.8863%" y="287.50"></text></g><g><title>get_lang_items (103,641 samples, 0.11%)</title><rect x="17.0987%" y="229" width="0.1138%" height="15" fill="rgb(231,60,39)"/><text x="17.3487%" y="239.50"></text></g><g><title>codegen_fn_attrs (134,592 samples, 0.15%)</title><rect x="17.2998%" y="213" width="0.1478%" height="15" fill="rgb(208,69,12)"/><text x="17.5498%" y="223.50"></text></g><g><title>should_inherit_track_caller (219,362 samples, 0.24%)</title><rect x="17.2125%" y="229" width="0.2410%" height="15" fill="rgb(235,93,37)"/><text x="17.4625%" y="239.50"></text></g><g><title>codegen_fn_attrs (434,174 samples, 0.48%)</title><rect x="16.9970%" y="245" width="0.4769%" height="15" fill="rgb(213,116,39)"/><text x="17.2470%" y="255.50"></text></g><g><title>check_mod_attrs (582,066 samples, 0.64%)</title><rect x="16.8348%" y="261" width="0.6394%" height="15" fill="rgb(222,207,29)"/><text x="17.0848%" y="271.50"></text></g><g><title>lookup_deprecation_entry (133,541 samples, 0.15%)</title><rect x="17.7865%" y="245" width="0.1467%" height="15" fill="rgb(206,96,30)"/><text x="18.0365%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (394,534 samples, 0.43%)</title><rect x="17.6080%" y="261" width="0.4334%" height="15" fill="rgb(218,138,4)"/><text x="17.8580%" y="271.50"></text></g><g><title>misc_checking_1 (1,177,823 samples, 1.29%)</title><rect x="16.8078%" y="277" width="1.2937%" height="15" fill="rgb(250,191,14)"/><text x="17.0578%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (182,602 samples, 0.20%)</title><rect x="18.1032%" y="261" width="0.2006%" height="15" fill="rgb(239,60,40)"/><text x="18.3532%" y="271.50"></text></g><g><title>check_mod_liveness (148,072 samples, 0.16%)</title><rect x="18.1412%" y="245" width="0.1626%" height="15" fill="rgb(206,27,48)"/><text x="18.3912%" y="255.50"></text></g><g><title>param_env (108,631 samples, 0.12%)</title><rect x="18.4999%" y="229" width="0.1193%" height="15" fill="rgb(225,35,8)"/><text x="18.7499%" y="239.50"></text></g><g><title>misc_checking_2 (471,875 samples, 0.52%)</title><rect x="18.1016%" y="277" width="0.5183%" height="15" fill="rgb(250,213,24)"/><text x="18.3516%" y="287.50"></text></g><g><title>match_checking (287,773 samples, 0.32%)</title><rect x="18.3038%" y="261" width="0.3161%" height="15" fill="rgb(247,123,22)"/><text x="18.5538%" y="271.50"></text></g><g><title>check_match (274,632 samples, 0.30%)</title><rect x="18.3183%" y="245" width="0.3017%" height="15" fill="rgb(231,138,38)"/><text x="18.5683%" y="255.50"></text></g><g><title>death_checking (150,652 samples, 0.17%)</title><rect x="18.7028%" y="261" width="0.1655%" height="15" fill="rgb(231,145,46)"/><text x="18.9528%" y="271.50"></text></g><g><title>fn_abi_of_instance (130,583 samples, 0.14%)</title><rect x="19.9546%" y="69" width="0.1434%" height="15" fill="rgb(251,118,11)"/><text x="20.2046%" y="79.50"></text></g><g><title>eval_to_const_value_raw (288,123 samples, 0.32%)</title><rect x="19.8860%" y="117" width="0.3165%" height="15" fill="rgb(217,147,25)"/><text x="20.1360%" y="127.50"></text></g><g><title>eval_to_const_value_raw (287,243 samples, 0.32%)</title><rect x="19.8870%" y="101" width="0.3155%" height="15" fill="rgb(247,81,37)"/><text x="20.1370%" y="111.50"></text></g><g><title>eval_to_allocation_raw (285,773 samples, 0.31%)</title><rect x="19.8886%" y="85" width="0.3139%" height="15" fill="rgb(209,12,38)"/><text x="20.1386%" y="95.50"></text></g><g><title>eval_to_const_value_raw (448,124 samples, 0.49%)</title><rect x="19.7162%" y="181" width="0.4922%" height="15" fill="rgb(227,1,9)"/><text x="19.9662%" y="191.50"></text></g><g><title>eval_to_const_value_raw (447,464 samples, 0.49%)</title><rect x="19.7169%" y="165" width="0.4915%" height="15" fill="rgb(248,47,43)"/><text x="19.9669%" y="175.50"></text></g><g><title>eval_to_allocation_raw (446,224 samples, 0.49%)</title><rect x="19.7183%" y="149" width="0.4901%" height="15" fill="rgb(221,10,30)"/><text x="19.9683%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (296,493 samples, 0.33%)</title><rect x="19.8828%" y="133" width="0.3257%" height="15" fill="rgb(210,229,1)"/><text x="20.1328%" y="143.50"></text></g><g><title>eval_to_allocation_raw (674,028 samples, 0.74%)</title><rect x="19.4691%" y="229" width="0.7404%" height="15" fill="rgb(222,148,37)"/><text x="19.7191%" y="239.50"></text></g><g><title>eval_to_allocation_raw (671,988 samples, 0.74%)</title><rect x="19.4713%" y="213" width="0.7381%" height="15" fill="rgb(234,67,33)"/><text x="19.7213%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (457,845 samples, 0.50%)</title><rect x="19.7065%" y="197" width="0.5029%" height="15" fill="rgb(247,98,35)"/><text x="19.9565%" y="207.50"></text></g><g><title>eval_to_const_value_raw (220,313 samples, 0.24%)</title><rect x="20.2095%" y="229" width="0.2420%" height="15" fill="rgb(247,138,52)"/><text x="20.4595%" y="239.50"></text></g><g><title>eval_to_const_value_raw (216,973 samples, 0.24%)</title><rect x="20.2131%" y="213" width="0.2383%" height="15" fill="rgb(213,79,30)"/><text x="20.4631%" y="223.50"></text></g><g><title>eval_to_allocation_raw (210,563 samples, 0.23%)</title><rect x="20.2202%" y="197" width="0.2313%" height="15" fill="rgb(246,177,23)"/><text x="20.4702%" y="207.50"></text></g><g><title>crate_lints (2,627,609 samples, 2.89%)</title><rect x="18.8703%" y="245" width="2.8862%" height="15" fill="rgb(230,62,27)"/><text x="19.1203%" y="255.50">cr..</text></g><g><title>type_of (1,081,882 samples, 1.19%)</title><rect x="20.5682%" y="229" width="1.1884%" height="15" fill="rgb(216,154,8)"/><text x="20.8182%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (835,328 samples, 0.92%)</title><rect x="20.8390%" y="213" width="0.9175%" height="15" fill="rgb(244,35,45)"/><text x="21.0890%" y="223.50"></text></g><g><title>lint_checking (2,740,580 samples, 3.01%)</title><rect x="18.8683%" y="261" width="3.0103%" height="15" fill="rgb(251,115,12)"/><text x="19.1183%" y="271.50">lin..</text></g><g><title>module_lints (111,171 samples, 0.12%)</title><rect x="21.7565%" y="245" width="0.1221%" height="15" fill="rgb(240,54,50)"/><text x="22.0065%" y="255.50"></text></g><g><title>lint_mod (108,661 samples, 0.12%)</title><rect x="21.7593%" y="229" width="0.1194%" height="15" fill="rgb(233,84,52)"/><text x="22.0093%" y="239.50"></text></g><g><title>privacy_checking_modules (281,403 samples, 0.31%)</title><rect x="21.9654%" y="261" width="0.3091%" height="15" fill="rgb(207,117,47)"/><text x="22.2154%" y="271.50"></text></g><g><title>check_mod_privacy (279,643 samples, 0.31%)</title><rect x="21.9673%" y="245" width="0.3072%" height="15" fill="rgb(249,43,39)"/><text x="22.2173%" y="255.50"></text></g><g><title>misc_checking_3 (3,342,526 samples, 3.67%)</title><rect x="18.6199%" y="277" width="3.6715%" height="15" fill="rgb(209,38,44)"/><text x="18.8699%" y="287.50">misc..</text></g><g><title>impl_parent (1,232,241 samples, 1.35%)</title><rect x="24.4799%" y="213" width="1.3535%" height="15" fill="rgb(236,212,23)"/><text x="24.7299%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (764,231 samples, 0.84%)</title><rect x="24.9939%" y="197" width="0.8394%" height="15" fill="rgb(242,79,21)"/><text x="25.2439%" y="207.50"></text></g><g><title>impl_trait_ref (4,438,882 samples, 4.88%)</title><rect x="25.8334%" y="213" width="4.8758%" height="15" fill="rgb(211,96,35)"/><text x="26.0834%" y="223.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,964,050 samples, 4.35%)</title><rect x="26.3549%" y="197" width="4.3542%" height="15" fill="rgb(253,215,40)"/><text x="26.6049%" y="207.50">metad..</text></g><g><title>coherent_trait (8,251,911 samples, 9.06%)</title><rect x="22.3480%" y="245" width="9.0641%" height="15" fill="rgb(211,81,21)"/><text x="22.5980%" y="255.50">coherent_trait</text></g><g><title>specialization_graph_of (8,236,270 samples, 9.05%)</title><rect x="22.3652%" y="229" width="9.0469%" height="15" fill="rgb(208,190,38)"/><text x="22.6152%" y="239.50">specializatio..</text></g><g><title>trait_impls_of (638,696 samples, 0.70%)</title><rect x="30.7105%" y="213" width="0.7016%" height="15" fill="rgb(235,213,38)"/><text x="30.9605%" y="223.50"></text></g><g><title>implementations_of_trait (216,722 samples, 0.24%)</title><rect x="31.1740%" y="197" width="0.2381%" height="15" fill="rgb(237,122,38)"/><text x="31.4240%" y="207.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (136,432 samples, 0.15%)</title><rect x="31.2622%" y="181" width="0.1499%" height="15" fill="rgb(244,218,35)"/><text x="31.5122%" y="191.50"></text></g><g><title>orphan_check_crate (106,102 samples, 0.12%)</title><rect x="31.4193%" y="245" width="0.1165%" height="15" fill="rgb(240,68,47)"/><text x="31.6693%" y="255.50"></text></g><g><title>coherence_checking (8,386,853 samples, 9.21%)</title><rect x="22.3281%" y="261" width="9.2123%" height="15" fill="rgb(210,16,53)"/><text x="22.5781%" y="271.50">coherence_che..</text></g><g><title>dropck_outlives (124,902 samples, 0.14%)</title><rect x="34.0624%" y="213" width="0.1372%" height="15" fill="rgb(235,124,12)"/><text x="34.3124%" y="223.50"></text></g><g><title>evaluate_obligation (338,453 samples, 0.37%)</title><rect x="34.1996%" y="213" width="0.3718%" height="15" fill="rgb(224,169,11)"/><text x="34.4496%" y="223.50"></text></g><g><title>trait_impls_of (251,213 samples, 0.28%)</title><rect x="34.2954%" y="197" width="0.2759%" height="15" fill="rgb(250,166,2)"/><text x="34.5454%" y="207.50"></text></g><g><title>method_autoderef_steps (129,072 samples, 0.14%)</title><rect x="34.7039%" y="213" width="0.1418%" height="15" fill="rgb(242,216,29)"/><text x="34.9539%" y="223.50"></text></g><g><title>object_safety_violations (122,402 samples, 0.13%)</title><rect x="34.8457%" y="213" width="0.1344%" height="15" fill="rgb(230,116,27)"/><text x="35.0957%" y="223.50"></text></g><g><title>associated_item (208,775 samples, 0.23%)</title><rect x="39.7903%" y="181" width="0.2293%" height="15" fill="rgb(228,99,48)"/><text x="40.0403%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (164,875 samples, 0.18%)</title><rect x="39.8385%" y="165" width="0.1811%" height="15" fill="rgb(253,11,6)"/><text x="40.0885%" y="175.50"></text></g><g><title>associated_items (315,627 samples, 0.35%)</title><rect x="39.6932%" y="197" width="0.3467%" height="15" fill="rgb(247,143,39)"/><text x="39.9432%" y="207.50"></text></g><g><title>dropck_outlives (261,381 samples, 0.29%)</title><rect x="40.0731%" y="197" width="0.2871%" height="15" fill="rgb(236,97,10)"/><text x="40.3231%" y="207.50"></text></g><g><title>adt_dtorck_constraint (126,591 samples, 0.14%)</title><rect x="40.2212%" y="181" width="0.1391%" height="15" fill="rgb(233,208,19)"/><text x="40.4712%" y="191.50"></text></g><g><title>adt_sized_constraint (117,652 samples, 0.13%)</title><rect x="41.0953%" y="181" width="0.1292%" height="15" fill="rgb(216,164,2)"/><text x="41.3453%" y="191.50"></text></g><g><title>evaluate_obligation (1,290,676 samples, 1.42%)</title><rect x="40.3602%" y="197" width="1.4177%" height="15" fill="rgb(220,129,5)"/><text x="40.6102%" y="207.50"></text></g><g><title>trait_impls_of (287,294 samples, 0.32%)</title><rect x="41.4623%" y="181" width="0.3156%" height="15" fill="rgb(242,17,10)"/><text x="41.7123%" y="191.50"></text></g><g><title>implementations_of_trait (134,073 samples, 0.15%)</title><rect x="41.6307%" y="165" width="0.1473%" height="15" fill="rgb(242,107,0)"/><text x="41.8807%" y="175.50"></text></g><g><title>is_copy_raw (459,746 samples, 0.50%)</title><rect x="42.1008%" y="197" width="0.5050%" height="15" fill="rgb(251,28,31)"/><text x="42.3508%" y="207.50"></text></g><g><title>evaluate_obligation (415,716 samples, 0.46%)</title><rect x="42.1491%" y="181" width="0.4566%" height="15" fill="rgb(233,223,10)"/><text x="42.3991%" y="191.50"></text></g><g><title>trait_impls_of (191,823 samples, 0.21%)</title><rect x="42.3951%" y="165" width="0.2107%" height="15" fill="rgb(215,21,27)"/><text x="42.6451%" y="175.50"></text></g><g><title>evaluate_obligation (109,060 samples, 0.12%)</title><rect x="42.8422%" y="181" width="0.1198%" height="15" fill="rgb(232,23,21)"/><text x="43.0922%" y="191.50"></text></g><g><title>method_autoderef_steps (236,491 samples, 0.26%)</title><rect x="42.7116%" y="197" width="0.2598%" height="15" fill="rgb(244,5,23)"/><text x="42.9616%" y="207.50"></text></g><g><title>explicit_predicates_of (123,472 samples, 0.14%)</title><rect x="43.1375%" y="165" width="0.1356%" height="15" fill="rgb(226,81,46)"/><text x="43.3875%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (106,222 samples, 0.12%)</title><rect x="43.1564%" y="149" width="0.1167%" height="15" fill="rgb(247,70,30)"/><text x="43.4064%" y="159.50"></text></g><g><title>predicates_of (310,315 samples, 0.34%)</title><rect x="42.9811%" y="197" width="0.3409%" height="15" fill="rgb(212,68,19)"/><text x="43.2311%" y="207.50"></text></g><g><title>predicates_defined_on (225,463 samples, 0.25%)</title><rect x="43.0743%" y="181" width="0.2477%" height="15" fill="rgb(240,187,13)"/><text x="43.3243%" y="191.50"></text></g><g><title>trait_impls_of (119,601 samples, 0.13%)</title><rect x="43.3422%" y="197" width="0.1314%" height="15" fill="rgb(223,113,26)"/><text x="43.5922%" y="207.50"></text></g><g><title>typeck (7,722,344 samples, 8.48%)</title><rect x="35.1053%" y="213" width="8.4824%" height="15" fill="rgb(206,192,2)"/><text x="35.3553%" y="223.50">typeck</text></g><g><title>item_bodies_checking (10,952,440 samples, 12.03%)</title><rect x="31.5683%" y="261" width="12.0304%" height="15" fill="rgb(241,108,4)"/><text x="31.8183%" y="271.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (10,949,260 samples, 12.03%)</title><rect x="31.5718%" y="245" width="12.0269%" height="15" fill="rgb(247,173,49)"/><text x="31.8218%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (10,930,720 samples, 12.01%)</title><rect x="31.5922%" y="229" width="12.0065%" height="15" fill="rgb(224,114,35)"/><text x="31.8422%" y="239.50">typeck</text></g><g><title>impl_trait_ref (230,603 samples, 0.25%)</title><rect x="44.1734%" y="181" width="0.2533%" height="15" fill="rgb(245,159,27)"/><text x="44.4234%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (206,763 samples, 0.23%)</title><rect x="44.1996%" y="165" width="0.2271%" height="15" fill="rgb(245,172,44)"/><text x="44.4496%" y="175.50"></text></g><g><title>adt_destructor (495,355 samples, 0.54%)</title><rect x="43.9581%" y="229" width="0.5441%" height="15" fill="rgb(236,23,11)"/><text x="44.2081%" y="239.50"></text></g><g><title>coherent_trait (491,495 samples, 0.54%)</title><rect x="43.9624%" y="213" width="0.5399%" height="15" fill="rgb(205,117,38)"/><text x="44.2124%" y="223.50"></text></g><g><title>specialization_graph_of (489,975 samples, 0.54%)</title><rect x="43.9640%" y="197" width="0.5382%" height="15" fill="rgb(237,72,25)"/><text x="44.2140%" y="207.50"></text></g><g><title>layout_of (105,660 samples, 0.12%)</title><rect x="44.8684%" y="37" width="0.1161%" height="15" fill="rgb(244,70,9)"/><text x="45.1184%" y="47.50"></text></g><g><title>layout_of (152,071 samples, 0.17%)</title><rect x="44.8228%" y="85" width="0.1670%" height="15" fill="rgb(217,125,39)"/><text x="45.0728%" y="95.50"></text></g><g><title>layout_of (142,591 samples, 0.16%)</title><rect x="44.8332%" y="69" width="0.1566%" height="15" fill="rgb(235,36,10)"/><text x="45.0832%" y="79.50"></text></g><g><title>layout_of (127,561 samples, 0.14%)</title><rect x="44.8497%" y="53" width="0.1401%" height="15" fill="rgb(251,123,47)"/><text x="45.0997%" y="63.50"></text></g><g><title>layout_of (185,972 samples, 0.20%)</title><rect x="44.7985%" y="101" width="0.2043%" height="15" fill="rgb(221,13,13)"/><text x="45.0485%" y="111.50"></text></g><g><title>layout_of (236,982 samples, 0.26%)</title><rect x="44.7480%" y="117" width="0.2603%" height="15" fill="rgb(238,131,9)"/><text x="44.9980%" y="127.50"></text></g><g><title>layout_of (267,203 samples, 0.29%)</title><rect x="44.7268%" y="133" width="0.2935%" height="15" fill="rgb(211,50,8)"/><text x="44.9768%" y="143.50"></text></g><g><title>layout_of (275,813 samples, 0.30%)</title><rect x="44.7198%" y="149" width="0.3030%" height="15" fill="rgb(245,182,24)"/><text x="44.9698%" y="159.50"></text></g><g><title>layout_of (314,724 samples, 0.35%)</title><rect x="44.6820%" y="181" width="0.3457%" height="15" fill="rgb(242,14,37)"/><text x="44.9320%" y="191.50"></text></g><g><title>layout_of (294,193 samples, 0.32%)</title><rect x="44.7045%" y="165" width="0.3231%" height="15" fill="rgb(246,228,12)"/><text x="44.9545%" y="175.50"></text></g><g><title>layout_of (342,314 samples, 0.38%)</title><rect x="44.6588%" y="197" width="0.3760%" height="15" fill="rgb(213,55,15)"/><text x="44.9088%" y="207.50"></text></g><g><title>layout_of (404,896 samples, 0.44%)</title><rect x="44.6135%" y="213" width="0.4447%" height="15" fill="rgb(209,9,3)"/><text x="44.8635%" y="223.50"></text></g><g><title>layout_of (441,826 samples, 0.49%)</title><rect x="44.5833%" y="229" width="0.4853%" height="15" fill="rgb(230,59,30)"/><text x="44.8333%" y="239.50"></text></g><g><title>adt_def (205,430 samples, 0.23%)</title><rect x="46.1900%" y="181" width="0.2256%" height="15" fill="rgb(209,121,21)"/><text x="46.4400%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (200,210 samples, 0.22%)</title><rect x="46.1957%" y="165" width="0.2199%" height="15" fill="rgb(220,109,13)"/><text x="46.4457%" y="175.50"></text></g><g><title>item_attrs (103,910 samples, 0.11%)</title><rect x="46.3015%" y="149" width="0.1141%" height="15" fill="rgb(232,18,1)"/><text x="46.5515%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,510 samples, 0.11%)</title><rect x="46.3074%" y="133" width="0.1082%" height="15" fill="rgb(215,41,42)"/><text x="46.5574%" y="143.50"></text></g><g><title>adt_def (222,045 samples, 0.24%)</title><rect x="46.5287%" y="165" width="0.2439%" height="15" fill="rgb(224,123,36)"/><text x="46.7787%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (218,995 samples, 0.24%)</title><rect x="46.5320%" y="149" width="0.2405%" height="15" fill="rgb(240,125,3)"/><text x="46.7820%" y="159.50"></text></g><g><title>item_attrs (182,934 samples, 0.20%)</title><rect x="46.5716%" y="133" width="0.2009%" height="15" fill="rgb(205,98,50)"/><text x="46.8216%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,734 samples, 0.20%)</title><rect x="46.5751%" y="117" width="0.1974%" height="15" fill="rgb(205,185,37)"/><text x="46.8251%" y="127.50"></text></g><g><title>adt_def (115,751 samples, 0.13%)</title><rect x="46.8434%" y="149" width="0.1271%" height="15" fill="rgb(238,207,15)"/><text x="47.0934%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (113,311 samples, 0.12%)</title><rect x="46.8460%" y="133" width="0.1245%" height="15" fill="rgb(213,199,42)"/><text x="47.0960%" y="143.50"></text></g><g><title>adt_dtorck_constraint (250,432 samples, 0.28%)</title><rect x="46.8007%" y="165" width="0.2751%" height="15" fill="rgb(235,201,11)"/><text x="47.0507%" y="175.50"></text></g><g><title>adt_dtorck_constraint (640,441 samples, 0.70%)</title><rect x="46.4733%" y="181" width="0.7035%" height="15" fill="rgb(207,46,11)"/><text x="46.7233%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,324,706 samples, 1.46%)</title><rect x="45.8378%" y="197" width="1.4551%" height="15" fill="rgb(241,35,35)"/><text x="46.0878%" y="207.50"></text></g><g><title>dropck_outlives (1,430,357 samples, 1.57%)</title><rect x="45.7358%" y="213" width="1.5711%" height="15" fill="rgb(243,32,47)"/><text x="45.9858%" y="223.50"></text></g><g><title>item_types_checking (3,526,380 samples, 3.87%)</title><rect x="43.5987%" y="261" width="3.8735%" height="15" fill="rgb(247,202,23)"/><text x="43.8487%" y="271.50">item..</text></g><g><title>check_mod_item_types (3,523,250 samples, 3.87%)</title><rect x="43.6022%" y="245" width="3.8700%" height="15" fill="rgb(219,102,11)"/><text x="43.8522%" y="255.50">chec..</text></g><g><title>typeck (2,173,485 samples, 2.39%)</title><rect x="45.0848%" y="229" width="2.3874%" height="15" fill="rgb(243,110,44)"/><text x="45.3348%" y="239.50">ty..</text></g><g><title>fn_sig (341,624 samples, 0.38%)</title><rect x="47.7142%" y="229" width="0.3752%" height="15" fill="rgb(222,74,54)"/><text x="47.9642%" y="239.50"></text></g><g><title>generics_of (158,013 samples, 0.17%)</title><rect x="48.0894%" y="229" width="0.1736%" height="15" fill="rgb(216,99,12)"/><text x="48.3394%" y="239.50"></text></g><g><title>late_bound_vars_map (253,153 samples, 0.28%)</title><rect x="48.6524%" y="181" width="0.2781%" height="15" fill="rgb(226,22,26)"/><text x="48.9024%" y="191.50"></text></g><g><title>resolve_lifetimes (243,922 samples, 0.27%)</title><rect x="48.6626%" y="165" width="0.2679%" height="15" fill="rgb(217,163,10)"/><text x="48.9126%" y="175.50"></text></g><g><title>explicit_predicates_of (491,865 samples, 0.54%)</title><rect x="48.4113%" y="197" width="0.5403%" height="15" fill="rgb(213,25,53)"/><text x="48.6613%" y="207.50"></text></g><g><title>predicates_of (796,137 samples, 0.87%)</title><rect x="48.3120%" y="229" width="0.8745%" height="15" fill="rgb(252,105,26)"/><text x="48.5620%" y="239.50"></text></g><g><title>predicates_defined_on (766,057 samples, 0.84%)</title><rect x="48.3450%" y="213" width="0.8415%" height="15" fill="rgb(220,39,43)"/><text x="48.5950%" y="223.50"></text></g><g><title>inferred_outlives_of (213,892 samples, 0.23%)</title><rect x="48.9516%" y="197" width="0.2349%" height="15" fill="rgb(229,68,48)"/><text x="49.2016%" y="207.50"></text></g><g><title>inferred_outlives_crate (192,612 samples, 0.21%)</title><rect x="48.9749%" y="181" width="0.2116%" height="15" fill="rgb(252,8,32)"/><text x="49.2249%" y="191.50"></text></g><g><title>type_of (105,291 samples, 0.12%)</title><rect x="49.0708%" y="165" width="0.1157%" height="15" fill="rgb(223,20,43)"/><text x="49.3208%" y="175.50"></text></g><g><title>type_collecting (1,746,259 samples, 1.92%)</title><rect x="47.4736%" y="261" width="1.9181%" height="15" fill="rgb(229,81,49)"/><text x="47.7236%" y="271.50">t..</text></g><g><title>collect_mod_item_types (1,736,269 samples, 1.91%)</title><rect x="47.4846%" y="245" width="1.9072%" height="15" fill="rgb(236,28,36)"/><text x="47.7346%" y="255.50">c..</text></g><g><title>type_of (186,823 samples, 0.21%)</title><rect x="49.1865%" y="229" width="0.2052%" height="15" fill="rgb(249,185,26)"/><text x="49.4365%" y="239.50"></text></g><g><title>adt_sized_constraint (93,011 samples, 0.10%)</title><rect x="49.9877%" y="213" width="0.1022%" height="15" fill="rgb(249,174,33)"/><text x="50.2377%" y="223.50"></text></g><g><title>evaluate_obligation (284,273 samples, 0.31%)</title><rect x="49.8412%" y="229" width="0.3123%" height="15" fill="rgb(233,201,37)"/><text x="50.0912%" y="239.50"></text></g><g><title>check_impl_item_well_formed (811,048 samples, 0.89%)</title><rect x="49.4523%" y="245" width="0.8909%" height="15" fill="rgb(221,78,26)"/><text x="49.7023%" y="255.50"></text></g><g><title>adt_sized_constraint (124,122 samples, 0.14%)</title><rect x="51.6618%" y="197" width="0.1363%" height="15" fill="rgb(250,127,30)"/><text x="51.9118%" y="207.50"></text></g><g><title>adt_sized_constraint (221,502 samples, 0.24%)</title><rect x="51.5757%" y="213" width="0.2433%" height="15" fill="rgb(230,49,44)"/><text x="51.8257%" y="223.50"></text></g><g><title>evaluate_obligation (881,963 samples, 0.97%)</title><rect x="51.1132%" y="229" width="0.9688%" height="15" fill="rgb(229,67,23)"/><text x="51.3632%" y="239.50"></text></g><g><title>implied_outlives_bounds (94,571 samples, 0.10%)</title><rect x="52.0847%" y="229" width="0.1039%" height="15" fill="rgb(249,83,47)"/><text x="52.3347%" y="239.50"></text></g><g><title>param_env (200,181 samples, 0.22%)</title><rect x="52.1891%" y="229" width="0.2199%" height="15" fill="rgb(215,43,3)"/><text x="52.4391%" y="239.50"></text></g><g><title>predicates_of (92,860 samples, 0.10%)</title><rect x="52.4090%" y="229" width="0.1020%" height="15" fill="rgb(238,154,13)"/><text x="52.6590%" y="239.50"></text></g><g><title>analysis (47,294,932 samples, 51.95%)</title><rect x="0.7578%" y="293" width="51.9498%" height="15" fill="rgb(219,56,2)"/><text x="1.0078%" y="303.50">analysis</text></g><g><title>type_check_crate (27,690,796 samples, 30.42%)</title><rect x="22.2914%" y="277" width="30.4162%" height="15" fill="rgb(233,0,4)"/><text x="22.5414%" y="287.50">type_check_crate</text></g><g><title>wf_checking (3,016,353 samples, 3.31%)</title><rect x="49.3944%" y="261" width="3.3132%" height="15" fill="rgb(235,30,7)"/><text x="49.6444%" y="271.50">wf_..</text></g><g><title>check_item_well_formed (2,152,563 samples, 2.36%)</title><rect x="50.3432%" y="245" width="2.3644%" height="15" fill="rgb(250,79,13)"/><text x="50.5932%" y="255.50">ch..</text></g><g><title>codegen_crate (420,535 samples, 0.46%)</title><rect x="52.7265%" y="293" width="0.4619%" height="15" fill="rgb(211,146,34)"/><text x="52.9765%" y="303.50"></text></g><g><title>AST_validation (146,442 samples, 0.16%)</title><rect x="53.3976%" y="277" width="0.1609%" height="15" fill="rgb(228,22,38)"/><text x="53.6476%" y="287.50"></text></g><g><title>metadata_load_macro (670,648 samples, 0.74%)</title><rect x="77.0867%" y="245" width="0.7367%" height="15" fill="rgb(235,168,5)"/><text x="77.3367%" y="255.50"></text></g><g><title>macro_expand_crate (31,265,536 samples, 34.34%)</title><rect x="53.7030%" y="277" width="34.3427%" height="15" fill="rgb(221,155,16)"/><text x="53.9530%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (31,242,186 samples, 34.32%)</title><rect x="53.7286%" y="261" width="34.3171%" height="15" fill="rgb(215,215,53)"/><text x="53.9786%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (9,306,375 samples, 10.22%)</title><rect x="77.8234%" y="245" width="10.2223%" height="15" fill="rgb(223,4,10)"/><text x="78.0734%" y="255.50">metadata_regist..</text></g><g><title>metadata_register_crate (1,206,173 samples, 1.32%)</title><rect x="86.7208%" y="229" width="1.3249%" height="15" fill="rgb(234,103,6)"/><text x="86.9708%" y="239.50"></text></g><g><title>metadata_register_crate (102,960 samples, 0.11%)</title><rect x="87.9326%" y="213" width="0.1131%" height="15" fill="rgb(227,97,0)"/><text x="88.1826%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (93,241 samples, 0.10%)</title><rect x="88.0512%" y="277" width="0.1024%" height="15" fill="rgb(234,150,53)"/><text x="88.3012%" y="287.50"></text></g><g><title>late_resolve_crate (2,248,685 samples, 2.47%)</title><rect x="88.3254%" y="261" width="2.4700%" height="15" fill="rgb(228,201,54)"/><text x="88.5754%" y="271.50">la..</text></g><g><title>configure_and_expand (34,313,660 samples, 37.69%)</title><rect x="53.1885%" y="293" width="37.6909%" height="15" fill="rgb(222,22,37)"/><text x="53.4385%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (2,481,437 samples, 2.73%)</title><rect x="88.1537%" y="277" width="2.7257%" height="15" fill="rgb(237,53,32)"/><text x="88.4037%" y="287.50">re..</text></g><g><title>drop_ast (129,142 samples, 0.14%)</title><rect x="90.8793%" y="293" width="0.1419%" height="15" fill="rgb(233,25,53)"/><text x="91.1293%" y="303.50"></text></g><g><title>early_lint_checks (245,293 samples, 0.27%)</title><rect x="91.0424%" y="293" width="0.2694%" height="15" fill="rgb(210,40,34)"/><text x="91.2924%" y="303.50"></text></g><g><title>free_global_ctxt (3,200,456 samples, 3.52%)</title><rect x="91.3118%" y="293" width="3.5155%" height="15" fill="rgb(241,220,44)"/><text x="91.5618%" y="303.50">fre..</text></g><g><title>generate_crate_metadata (707,857 samples, 0.78%)</title><rect x="94.8273%" y="293" width="0.7775%" height="15" fill="rgb(235,28,35)"/><text x="95.0773%" y="303.50"></text></g><g><title>hir_lowering (1,590,548 samples, 1.75%)</title><rect x="95.6048%" y="293" width="1.7471%" height="15" fill="rgb(210,56,17)"/><text x="95.8548%" y="303.50"></text></g><g><title>parse_crate (1,056,151 samples, 1.16%)</title><rect x="97.4063%" y="293" width="1.1601%" height="15" fill="rgb(224,130,29)"/><text x="97.6563%" y="303.50"></text></g><g><title>prepare_outputs (299,803 samples, 0.33%)</title><rect x="98.5751%" y="293" width="0.3293%" height="15" fill="rgb(235,212,8)"/><text x="98.8251%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (585,046 samples, 0.64%)</title><rect x="98.9044%" y="293" width="0.6426%" height="15" fill="rgb(223,33,50)"/><text x="99.1544%" y="303.50"></text></g><g><title>setup_global_ctxt (97,811 samples, 0.11%)</title><rect x="99.5592%" y="293" width="0.1074%" height="15" fill="rgb(219,149,13)"/><text x="99.8092%" y="303.50"></text></g><g><title>all (91,039,717 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(250,156,29)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (91,039,717 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (303,524 samples, 0.33%)</title><rect x="99.6666%" y="293" width="0.3334%" height="15" fill="rgb(216,135,14)"/><text x="99.9166%" y="303.50"></text></g></svg></svg>