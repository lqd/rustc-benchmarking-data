<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (347,906 samples, 0.12%)</title><rect x="13.1380%" y="149" width="0.1161%" height="15" fill="rgb(227,0,7)"/><text x="13.3880%" y="159.50"></text></g><g><title>param_env (683,024 samples, 0.23%)</title><rect x="14.6976%" y="117" width="0.2280%" height="15" fill="rgb(217,0,24)"/><text x="14.9476%" y="127.50"></text></g><g><title>item_attrs (697,463 samples, 0.23%)</title><rect x="15.4501%" y="85" width="0.2328%" height="15" fill="rgb(221,193,54)"/><text x="15.7001%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (676,543 samples, 0.23%)</title><rect x="15.4571%" y="69" width="0.2258%" height="15" fill="rgb(248,212,6)"/><text x="15.7071%" y="79.50"></text></g><g><title>codegen_fn_attrs (996,348 samples, 0.33%)</title><rect x="15.3674%" y="101" width="0.3326%" height="15" fill="rgb(208,68,35)"/><text x="15.6174%" y="111.50"></text></g><g><title>adt_drop_tys (383,052 samples, 0.13%)</title><rect x="18.4689%" y="69" width="0.1279%" height="15" fill="rgb(232,128,0)"/><text x="18.7189%" y="79.50"></text></g><g><title>needs_drop_raw (2,392,203 samples, 0.80%)</title><rect x="18.3820%" y="85" width="0.7986%" height="15" fill="rgb(207,160,47)"/><text x="18.6320%" y="95.50"></text></g><g><title>is_copy_raw (1,748,848 samples, 0.58%)</title><rect x="18.5968%" y="69" width="0.5838%" height="15" fill="rgb(228,23,34)"/><text x="18.8468%" y="79.50"></text></g><g><title>evaluate_obligation (1,438,625 samples, 0.48%)</title><rect x="18.7004%" y="53" width="0.4802%" height="15" fill="rgb(218,30,26)"/><text x="18.9504%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (617,659 samples, 0.21%)</title><rect x="19.3879%" y="69" width="0.2062%" height="15" fill="rgb(220,122,19)"/><text x="19.6379%" y="79.50"></text></g><g><title>impl_parent (795,716 samples, 0.27%)</title><rect x="20.2242%" y="53" width="0.2656%" height="15" fill="rgb(250,228,42)"/><text x="20.4742%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (478,872 samples, 0.16%)</title><rect x="20.3300%" y="37" width="0.1599%" height="15" fill="rgb(240,193,28)"/><text x="20.5800%" y="47.50"></text></g><g><title>specialization_graph_of (4,647,172 samples, 1.55%)</title><rect x="19.6512%" y="69" width="1.5513%" height="15" fill="rgb(216,20,37)"/><text x="19.9012%" y="79.50"></text></g><g><title>impl_trait_ref (2,135,002 samples, 0.71%)</title><rect x="20.4898%" y="53" width="0.7127%" height="15" fill="rgb(206,188,39)"/><text x="20.7398%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,836,959 samples, 0.61%)</title><rect x="20.5893%" y="37" width="0.6132%" height="15" fill="rgb(217,207,13)"/><text x="20.8393%" y="47.50"></text></g><g><title>resolve_instance (6,290,083 samples, 2.10%)</title><rect x="19.1806%" y="85" width="2.0997%" height="15" fill="rgb(231,73,38)"/><text x="19.4306%" y="95.50">r..</text></g><g><title>thir_body (3,384,916 samples, 1.13%)</title><rect x="21.3068%" y="85" width="1.1299%" height="15" fill="rgb(225,20,46)"/><text x="21.5568%" y="95.50"></text></g><g><title>mir_const (25,178,430 samples, 8.40%)</title><rect x="14.0465%" y="133" width="8.4050%" height="15" fill="rgb(210,31,41)"/><text x="14.2965%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (22,545,133 samples, 7.53%)</title><rect x="14.9256%" y="117" width="7.5259%" height="15" fill="rgb(221,200,47)"/><text x="15.1756%" y="127.50">unsafety_c..</text></g><g><title>mir_built (20,225,328 samples, 6.75%)</title><rect x="15.6999%" y="101" width="6.7515%" height="15" fill="rgb(226,26,5)"/><text x="15.9499%" y="111.50">mir_built</text></g><g><title>mir_const (1,314,774 samples, 0.44%)</title><rect x="22.6912%" y="117" width="0.4389%" height="15" fill="rgb(249,33,26)"/><text x="22.9412%" y="127.50"></text></g><g><title>unsafety_check_result (941,242 samples, 0.31%)</title><rect x="22.8159%" y="101" width="0.3142%" height="15" fill="rgb(235,183,28)"/><text x="23.0659%" y="111.50"></text></g><g><title>mir_built (821,771 samples, 0.27%)</title><rect x="22.8558%" y="85" width="0.2743%" height="15" fill="rgb(221,5,38)"/><text x="23.1058%" y="95.50"></text></g><g><title>mir_const_qualif (2,044,923 samples, 0.68%)</title><rect x="22.4515%" y="133" width="0.6826%" height="15" fill="rgb(247,18,42)"/><text x="22.7015%" y="143.50"></text></g><g><title>mir_promoted (29,573,728 samples, 9.87%)</title><rect x="13.2620%" y="149" width="9.8722%" height="15" fill="rgb(241,131,45)"/><text x="13.5120%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,434,664 samples, 0.48%)</title><rect x="23.1373%" y="149" width="0.4789%" height="15" fill="rgb(249,31,29)"/><text x="23.3873%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,306,020 samples, 0.44%)</title><rect x="23.6162%" y="149" width="0.4360%" height="15" fill="rgb(225,111,53)"/><text x="23.8662%" y="159.50"></text></g><g><title>normalize_projection_ty (861,723 samples, 0.29%)</title><rect x="23.7646%" y="133" width="0.2877%" height="15" fill="rgb(238,160,17)"/><text x="24.0146%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,771,796 samples, 1.93%)</title><rect x="24.1026%" y="149" width="1.9267%" height="15" fill="rgb(214,148,48)"/><text x="24.3526%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (76,229,852 samples, 25.45%)</title><rect x="0.5875%" y="181" width="25.4468%" height="15" fill="rgb(232,36,49)"/><text x="0.8375%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (75,881,316 samples, 25.33%)</title><rect x="0.7038%" y="165" width="25.3304%" height="15" fill="rgb(209,103,24)"/><text x="0.9538%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (969,161 samples, 0.32%)</title><rect x="26.0342%" y="181" width="0.3235%" height="15" fill="rgb(229,88,8)"/><text x="26.2842%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (793,661 samples, 0.26%)</title><rect x="26.0928%" y="165" width="0.2649%" height="15" fill="rgb(213,181,19)"/><text x="26.3428%" y="175.50"></text></g><g><title>hir_module_items (459,886 samples, 0.15%)</title><rect x="26.3578%" y="181" width="0.1535%" height="15" fill="rgb(254,191,54)"/><text x="26.6078%" y="191.50"></text></g><g><title>codegen_fn_attrs (545,825 samples, 0.18%)</title><rect x="26.7364%" y="149" width="0.1822%" height="15" fill="rgb(241,83,37)"/><text x="26.9864%" y="159.50"></text></g><g><title>check_mod_attrs (1,171,665 samples, 0.39%)</title><rect x="26.5275%" y="165" width="0.3911%" height="15" fill="rgb(233,36,39)"/><text x="26.7775%" y="175.50"></text></g><g><title>is_copy_raw (413,263 samples, 0.14%)</title><rect x="27.2275%" y="149" width="0.1380%" height="15" fill="rgb(226,3,54)"/><text x="27.4775%" y="159.50"></text></g><g><title>evaluate_obligation (381,323 samples, 0.13%)</title><rect x="27.2381%" y="133" width="0.1273%" height="15" fill="rgb(245,192,40)"/><text x="27.4881%" y="143.50"></text></g><g><title>lint_levels (626,947 samples, 0.21%)</title><rect x="27.3654%" y="149" width="0.2093%" height="15" fill="rgb(238,167,29)"/><text x="27.6154%" y="159.50"></text></g><g><title>param_env (920,112 samples, 0.31%)</title><rect x="27.7287%" y="149" width="0.3071%" height="15" fill="rgb(232,182,51)"/><text x="27.9787%" y="159.50"></text></g><g><title>predicates_of (786,359 samples, 0.26%)</title><rect x="27.7734%" y="133" width="0.2625%" height="15" fill="rgb(231,60,39)"/><text x="28.0234%" y="143.50"></text></g><g><title>predicates_defined_on (784,449 samples, 0.26%)</title><rect x="27.7740%" y="117" width="0.2619%" height="15" fill="rgb(208,69,12)"/><text x="28.0240%" y="127.50"></text></g><g><title>inferred_outlives_of (761,478 samples, 0.25%)</title><rect x="27.7817%" y="101" width="0.2542%" height="15" fill="rgb(235,93,37)"/><text x="28.0317%" y="111.50"></text></g><g><title>inferred_outlives_crate (753,548 samples, 0.25%)</title><rect x="27.7843%" y="85" width="0.2515%" height="15" fill="rgb(213,116,39)"/><text x="28.0343%" y="95.50"></text></g><g><title>type_of (415,027 samples, 0.14%)</title><rect x="27.8973%" y="69" width="0.1385%" height="15" fill="rgb(222,207,29)"/><text x="28.1473%" y="79.50"></text></g><g><title>check_mod_unstable_api_usage (2,957,625 samples, 0.99%)</title><rect x="27.0844%" y="165" width="0.9873%" height="15" fill="rgb(206,96,30)"/><text x="27.3344%" y="175.50"></text></g><g><title>misc_checking_1 (4,786,293 samples, 1.60%)</title><rect x="26.5114%" y="181" width="1.5977%" height="15" fill="rgb(218,138,4)"/><text x="26.7614%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,321,245 samples, 0.44%)</title><rect x="28.1097%" y="165" width="0.4411%" height="15" fill="rgb(250,191,14)"/><text x="28.3597%" y="175.50"></text></g><g><title>check_mod_liveness (1,042,542 samples, 0.35%)</title><rect x="28.2027%" y="149" width="0.3480%" height="15" fill="rgb(239,60,40)"/><text x="28.4527%" y="159.50"></text></g><g><title>misc_checking_2 (2,842,102 samples, 0.95%)</title><rect x="28.1092%" y="181" width="0.9487%" height="15" fill="rgb(206,27,48)"/><text x="28.3592%" y="191.50"></text></g><g><title>match_checking (1,519,287 samples, 0.51%)</title><rect x="28.5508%" y="165" width="0.5072%" height="15" fill="rgb(225,35,8)"/><text x="28.8008%" y="175.50"></text></g><g><title>check_match (1,434,487 samples, 0.48%)</title><rect x="28.5791%" y="149" width="0.4789%" height="15" fill="rgb(250,213,24)"/><text x="28.8291%" y="159.50"></text></g><g><title>check_private_in_public (570,276 samples, 0.19%)</title><rect x="29.0619%" y="165" width="0.1904%" height="15" fill="rgb(247,123,22)"/><text x="29.3119%" y="175.50"></text></g><g><title>death_checking (1,150,033 samples, 0.38%)</title><rect x="29.2522%" y="165" width="0.3839%" height="15" fill="rgb(231,138,38)"/><text x="29.5022%" y="175.50"></text></g><g><title>eval_to_allocation_raw (310,514 samples, 0.10%)</title><rect x="30.1505%" y="133" width="0.1037%" height="15" fill="rgb(231,145,46)"/><text x="30.4005%" y="143.50"></text></g><g><title>eval_to_allocation_raw (309,664 samples, 0.10%)</title><rect x="30.1508%" y="117" width="0.1034%" height="15" fill="rgb(251,118,11)"/><text x="30.4008%" y="127.50"></text></g><g><title>eval_to_const_value_raw (765,780 samples, 0.26%)</title><rect x="30.2542%" y="133" width="0.2556%" height="15" fill="rgb(217,147,25)"/><text x="30.5042%" y="143.50"></text></g><g><title>eval_to_const_value_raw (719,300 samples, 0.24%)</title><rect x="30.2697%" y="117" width="0.2401%" height="15" fill="rgb(247,81,37)"/><text x="30.5197%" y="127.50"></text></g><g><title>eval_to_allocation_raw (662,949 samples, 0.22%)</title><rect x="30.2885%" y="101" width="0.2213%" height="15" fill="rgb(209,12,38)"/><text x="30.5385%" y="111.50"></text></g><g><title>param_env (975,892 samples, 0.33%)</title><rect x="30.5098%" y="133" width="0.3258%" height="15" fill="rgb(227,1,9)"/><text x="30.7598%" y="143.50"></text></g><g><title>predicates_of (558,344 samples, 0.19%)</title><rect x="30.6492%" y="117" width="0.1864%" height="15" fill="rgb(248,47,43)"/><text x="30.8992%" y="127.50"></text></g><g><title>crate_lints (4,896,184 samples, 1.63%)</title><rect x="29.6368%" y="149" width="1.6344%" height="15" fill="rgb(221,10,30)"/><text x="29.8868%" y="159.50"></text></g><g><title>type_of (1,170,071 samples, 0.39%)</title><rect x="30.8807%" y="133" width="0.3906%" height="15" fill="rgb(210,229,1)"/><text x="31.1307%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (941,529 samples, 0.31%)</title><rect x="30.9569%" y="117" width="0.3143%" height="15" fill="rgb(222,148,37)"/><text x="31.2069%" y="127.50"></text></g><g><title>lint_checking (6,304,240 samples, 2.10%)</title><rect x="29.6361%" y="165" width="2.1045%" height="15" fill="rgb(234,67,33)"/><text x="29.8861%" y="175.50">l..</text></g><g><title>module_lints (1,406,046 samples, 0.47%)</title><rect x="31.2712%" y="149" width="0.4694%" height="15" fill="rgb(247,98,35)"/><text x="31.5212%" y="159.50"></text></g><g><title>lint_mod (1,390,766 samples, 0.46%)</title><rect x="31.2763%" y="133" width="0.4643%" height="15" fill="rgb(247,138,52)"/><text x="31.5263%" y="143.50"></text></g><g><title>privacy_access_levels (742,018 samples, 0.25%)</title><rect x="31.7406%" y="165" width="0.2477%" height="15" fill="rgb(213,79,30)"/><text x="31.9906%" y="175.50"></text></g><g><title>privacy_checking_modules (2,249,745 samples, 0.75%)</title><rect x="31.9883%" y="165" width="0.7510%" height="15" fill="rgb(246,177,23)"/><text x="32.2383%" y="175.50"></text></g><g><title>check_mod_privacy (2,238,335 samples, 0.75%)</title><rect x="31.9921%" y="149" width="0.7472%" height="15" fill="rgb(230,62,27)"/><text x="32.2421%" y="159.50"></text></g><g><title>misc_checking_3 (11,051,333 samples, 3.69%)</title><rect x="29.0579%" y="181" width="3.6891%" height="15" fill="rgb(216,154,8)"/><text x="29.3079%" y="191.50">misc..</text></g><g><title>impl_parent (2,039,956 samples, 0.68%)</title><rect x="33.9350%" y="117" width="0.6810%" height="15" fill="rgb(244,35,45)"/><text x="34.1850%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,101,483 samples, 0.37%)</title><rect x="34.2483%" y="101" width="0.3677%" height="15" fill="rgb(251,115,12)"/><text x="34.4983%" y="111.50"></text></g><g><title>impl_trait_ref (4,623,000 samples, 1.54%)</title><rect x="34.6160%" y="117" width="1.5432%" height="15" fill="rgb(240,54,50)"/><text x="34.8660%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,671,083 samples, 1.23%)</title><rect x="34.9337%" y="101" width="1.2255%" height="15" fill="rgb(233,84,52)"/><text x="35.1837%" y="111.50"></text></g><g><title>coherent_trait (10,466,358 samples, 3.49%)</title><rect x="32.8161%" y="149" width="3.4938%" height="15" fill="rgb(207,117,47)"/><text x="33.0661%" y="159.50">coh..</text></g><g><title>specialization_graph_of (9,854,591 samples, 3.29%)</title><rect x="33.0203%" y="133" width="3.2896%" height="15" fill="rgb(249,43,39)"/><text x="33.2703%" y="143.50">spe..</text></g><g><title>trait_impls_of (448,393 samples, 0.15%)</title><rect x="36.1602%" y="117" width="0.1497%" height="15" fill="rgb(209,38,44)"/><text x="36.4102%" y="127.50"></text></g><g><title>coherence_checking (10,582,218 samples, 3.53%)</title><rect x="32.8081%" y="165" width="3.5325%" height="15" fill="rgb(236,212,23)"/><text x="33.0581%" y="175.50">coh..</text></g><g><title>associated_item (1,337,615 samples, 0.45%)</title><rect x="54.2917%" y="101" width="0.4465%" height="15" fill="rgb(242,79,21)"/><text x="54.5417%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (906,840 samples, 0.30%)</title><rect x="54.4355%" y="85" width="0.3027%" height="15" fill="rgb(211,96,35)"/><text x="54.6855%" y="95.50"></text></g><g><title>associated_items (1,785,226 samples, 0.60%)</title><rect x="54.1661%" y="117" width="0.5959%" height="15" fill="rgb(253,215,40)"/><text x="54.4161%" y="127.50"></text></g><g><title>adt_dtorck_constraint (495,332 samples, 0.17%)</title><rect x="54.9779%" y="101" width="0.1653%" height="15" fill="rgb(211,81,21)"/><text x="55.2279%" y="111.50"></text></g><g><title>dropck_outlives (1,030,519 samples, 0.34%)</title><rect x="54.8175%" y="117" width="0.3440%" height="15" fill="rgb(208,190,38)"/><text x="55.0675%" y="127.50"></text></g><g><title>adt_sized_constraint (345,453 samples, 0.12%)</title><rect x="56.7835%" y="101" width="0.1153%" height="15" fill="rgb(235,213,38)"/><text x="57.0335%" y="111.50"></text></g><g><title>mir_for_ctfe (811,379 samples, 0.27%)</title><rect x="57.1743%" y="53" width="0.2709%" height="15" fill="rgb(237,122,38)"/><text x="57.4243%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (801,739 samples, 0.27%)</title><rect x="57.1775%" y="37" width="0.2676%" height="15" fill="rgb(244,218,35)"/><text x="57.4275%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,662,109 samples, 0.55%)</title><rect x="56.8994%" y="101" width="0.5548%" height="15" fill="rgb(240,68,47)"/><text x="57.1494%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,616,588 samples, 0.54%)</title><rect x="56.9146%" y="85" width="0.5396%" height="15" fill="rgb(210,16,53)"/><text x="57.1646%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,576,788 samples, 0.53%)</title><rect x="56.9279%" y="69" width="0.5264%" height="15" fill="rgb(235,124,12)"/><text x="57.1779%" y="79.50"></text></g><g><title>generics_of (825,689 samples, 0.28%)</title><rect x="57.4543%" y="101" width="0.2756%" height="15" fill="rgb(224,169,11)"/><text x="57.7043%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (650,276 samples, 0.22%)</title><rect x="57.5128%" y="85" width="0.2171%" height="15" fill="rgb(250,166,2)"/><text x="57.7628%" y="95.50"></text></g><g><title>impl_trait_ref (756,200 samples, 0.25%)</title><rect x="57.7844%" y="101" width="0.2524%" height="15" fill="rgb(242,216,29)"/><text x="58.0344%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (609,547 samples, 0.20%)</title><rect x="57.8333%" y="85" width="0.2035%" height="15" fill="rgb(230,116,27)"/><text x="58.0833%" y="95.50"></text></g><g><title>predicates_of (550,532 samples, 0.18%)</title><rect x="58.0495%" y="101" width="0.1838%" height="15" fill="rgb(228,99,48)"/><text x="58.2995%" y="111.50"></text></g><g><title>predicates_defined_on (328,822 samples, 0.11%)</title><rect x="58.1236%" y="85" width="0.1098%" height="15" fill="rgb(253,11,6)"/><text x="58.3736%" y="95.50"></text></g><g><title>specializes (1,248,216 samples, 0.42%)</title><rect x="58.2648%" y="101" width="0.4167%" height="15" fill="rgb(247,143,39)"/><text x="58.5148%" y="111.50"></text></g><g><title>param_env (560,606 samples, 0.19%)</title><rect x="58.4944%" y="85" width="0.1871%" height="15" fill="rgb(236,97,10)"/><text x="58.7444%" y="95.50"></text></g><g><title>trait_impls_of (533,975 samples, 0.18%)</title><rect x="58.6902%" y="101" width="0.1782%" height="15" fill="rgb(233,208,19)"/><text x="58.9402%" y="111.50"></text></g><g><title>evaluate_obligation (11,126,704 samples, 3.71%)</title><rect x="55.1615%" y="117" width="3.7143%" height="15" fill="rgb(216,164,2)"/><text x="55.4115%" y="127.50">eval..</text></g><g><title>generics_of (300,324 samples, 0.10%)</title><rect x="58.9836%" y="117" width="0.1003%" height="15" fill="rgb(220,129,5)"/><text x="59.2336%" y="127.50"></text></g><g><title>item_attrs (493,455 samples, 0.16%)</title><rect x="59.1920%" y="117" width="0.1647%" height="15" fill="rgb(242,17,10)"/><text x="59.4420%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (475,385 samples, 0.16%)</title><rect x="59.1980%" y="101" width="0.1587%" height="15" fill="rgb(242,107,0)"/><text x="59.4480%" y="111.50"></text></g><g><title>evaluate_obligation (723,787 samples, 0.24%)</title><rect x="59.6580%" y="101" width="0.2416%" height="15" fill="rgb(251,28,31)"/><text x="59.9080%" y="111.50"></text></g><g><title>method_autoderef_steps (1,254,231 samples, 0.42%)</title><rect x="59.4857%" y="117" width="0.4187%" height="15" fill="rgb(233,223,10)"/><text x="59.7357%" y="127.50"></text></g><g><title>predicates_of (816,368 samples, 0.27%)</title><rect x="60.0210%" y="117" width="0.2725%" height="15" fill="rgb(215,21,27)"/><text x="60.2710%" y="127.50"></text></g><g><title>predicates_defined_on (563,837 samples, 0.19%)</title><rect x="60.1053%" y="101" width="0.1882%" height="15" fill="rgb(232,23,21)"/><text x="60.3553%" y="111.50"></text></g><g><title>associated_item (427,505 samples, 0.14%)</title><rect x="67.3623%" y="85" width="0.1427%" height="15" fill="rgb(244,5,23)"/><text x="67.6123%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (342,973 samples, 0.11%)</title><rect x="67.3905%" y="69" width="0.1145%" height="15" fill="rgb(226,81,46)"/><text x="67.6405%" y="79.50"></text></g><g><title>associated_items (605,527 samples, 0.20%)</title><rect x="67.3125%" y="101" width="0.2021%" height="15" fill="rgb(247,70,30)"/><text x="67.5625%" y="111.50"></text></g><g><title>adt_dtorck_constraint (323,903 samples, 0.11%)</title><rect x="67.6318%" y="85" width="0.1081%" height="15" fill="rgb(212,68,19)"/><text x="67.8818%" y="95.50"></text></g><g><title>dropck_outlives (648,626 samples, 0.22%)</title><rect x="67.5307%" y="101" width="0.2165%" height="15" fill="rgb(240,187,13)"/><text x="67.7807%" y="111.50"></text></g><g><title>specializes (810,099 samples, 0.27%)</title><rect x="68.5444%" y="85" width="0.2704%" height="15" fill="rgb(223,113,26)"/><text x="68.7944%" y="95.50"></text></g><g><title>trait_impls_of (428,564 samples, 0.14%)</title><rect x="68.8178%" y="85" width="0.1431%" height="15" fill="rgb(206,192,2)"/><text x="69.0678%" y="95.50"></text></g><g><title>evaluate_obligation (3,639,988 samples, 1.22%)</title><rect x="67.7472%" y="101" width="1.2151%" height="15" fill="rgb(241,108,4)"/><text x="67.9972%" y="111.50"></text></g><g><title>is_copy_raw (591,075 samples, 0.20%)</title><rect x="69.0969%" y="101" width="0.1973%" height="15" fill="rgb(247,173,49)"/><text x="69.3469%" y="111.50"></text></g><g><title>evaluate_obligation (422,544 samples, 0.14%)</title><rect x="69.1532%" y="85" width="0.1411%" height="15" fill="rgb(224,114,35)"/><text x="69.4032%" y="95.50"></text></g><g><title>method_autoderef_steps (500,188 samples, 0.17%)</title><rect x="69.3488%" y="101" width="0.1670%" height="15" fill="rgb(245,159,27)"/><text x="69.5988%" y="111.50"></text></g><g><title>typeck (27,893,504 samples, 9.31%)</title><rect x="60.3699%" y="117" width="9.3113%" height="15" fill="rgb(245,172,44)"/><text x="60.6199%" y="127.50">typeck</text></g><g><title>item_bodies_checking (99,934,317 samples, 33.36%)</title><rect x="36.3621%" y="165" width="33.3597%" height="15" fill="rgb(236,23,11)"/><text x="36.6121%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (99,930,417 samples, 33.36%)</title><rect x="36.3634%" y="149" width="33.3584%" height="15" fill="rgb(205,117,38)"/><text x="36.6134%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (99,739,177 samples, 33.29%)</title><rect x="36.4272%" y="133" width="33.2946%" height="15" fill="rgb(237,72,25)"/><text x="36.6772%" y="143.50">typeck</text></g><g><title>generics_of (460,805 samples, 0.15%)</title><rect x="71.5012%" y="101" width="0.1538%" height="15" fill="rgb(244,70,9)"/><text x="71.7512%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (327,152 samples, 0.11%)</title><rect x="71.5458%" y="85" width="0.1092%" height="15" fill="rgb(217,125,39)"/><text x="71.7958%" y="95.50"></text></g><g><title>impl_trait_ref (921,681 samples, 0.31%)</title><rect x="71.6967%" y="101" width="0.3077%" height="15" fill="rgb(235,36,10)"/><text x="71.9467%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (792,600 samples, 0.26%)</title><rect x="71.7398%" y="85" width="0.2646%" height="15" fill="rgb(251,123,47)"/><text x="71.9898%" y="95.50"></text></g><g><title>predicates_of (813,299 samples, 0.27%)</title><rect x="72.0145%" y="101" width="0.2715%" height="15" fill="rgb(221,13,13)"/><text x="72.2645%" y="111.50"></text></g><g><title>predicates_defined_on (548,057 samples, 0.18%)</title><rect x="72.1030%" y="85" width="0.1830%" height="15" fill="rgb(238,131,9)"/><text x="72.3530%" y="95.50"></text></g><g><title>specializes (1,856,081 samples, 0.62%)</title><rect x="72.2860%" y="101" width="0.6196%" height="15" fill="rgb(211,50,8)"/><text x="72.5360%" y="111.50"></text></g><g><title>param_env (1,072,294 samples, 0.36%)</title><rect x="72.5476%" y="85" width="0.3579%" height="15" fill="rgb(245,182,24)"/><text x="72.7976%" y="95.50"></text></g><g><title>def_span (490,276 samples, 0.16%)</title><rect x="72.7419%" y="69" width="0.1637%" height="15" fill="rgb(242,14,37)"/><text x="72.9919%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (431,665 samples, 0.14%)</title><rect x="72.7615%" y="53" width="0.1441%" height="15" fill="rgb(246,228,12)"/><text x="73.0115%" y="63.50"></text></g><g><title>evaluate_obligation (6,180,049 samples, 2.06%)</title><rect x="70.8692%" y="117" width="2.0630%" height="15" fill="rgb(213,55,15)"/><text x="71.1192%" y="127.50">e..</text></g><g><title>item_types_checking (9,893,931 samples, 3.30%)</title><rect x="69.7218%" y="165" width="3.3028%" height="15" fill="rgb(209,9,3)"/><text x="69.9718%" y="175.50">ite..</text></g><g><title>check_mod_item_types (9,879,631 samples, 3.30%)</title><rect x="69.7266%" y="149" width="3.2980%" height="15" fill="rgb(230,59,30)"/><text x="69.9766%" y="159.50">che..</text></g><g><title>typeck (8,172,182 samples, 2.73%)</title><rect x="70.2966%" y="133" width="2.7280%" height="15" fill="rgb(209,121,21)"/><text x="70.5466%" y="143.50">ty..</text></g><g><title>late_bound_vars_map (303,533 samples, 0.10%)</title><rect x="73.3664%" y="117" width="0.1013%" height="15" fill="rgb(220,109,13)"/><text x="73.6164%" y="127.50"></text></g><g><title>fn_sig (760,606 samples, 0.25%)</title><rect x="73.2372%" y="133" width="0.2539%" height="15" fill="rgb(232,18,1)"/><text x="73.4872%" y="143.50"></text></g><g><title>named_region_map (425,907 samples, 0.14%)</title><rect x="73.6160%" y="117" width="0.1422%" height="15" fill="rgb(215,41,42)"/><text x="73.8660%" y="127.50"></text></g><g><title>resolve_lifetimes (397,147 samples, 0.13%)</title><rect x="73.6256%" y="101" width="0.1326%" height="15" fill="rgb(224,123,36)"/><text x="73.8756%" y="111.50"></text></g><g><title>generics_of (823,212 samples, 0.27%)</title><rect x="73.4911%" y="133" width="0.2748%" height="15" fill="rgb(240,125,3)"/><text x="73.7411%" y="143.50"></text></g><g><title>explicit_predicates_of (433,025 samples, 0.14%)</title><rect x="73.9052%" y="101" width="0.1446%" height="15" fill="rgb(205,98,50)"/><text x="74.1552%" y="111.50"></text></g><g><title>predicates_of (832,421 samples, 0.28%)</title><rect x="73.7878%" y="133" width="0.2779%" height="15" fill="rgb(205,185,37)"/><text x="74.0378%" y="143.50"></text></g><g><title>predicates_defined_on (699,398 samples, 0.23%)</title><rect x="73.8322%" y="117" width="0.2335%" height="15" fill="rgb(238,207,15)"/><text x="74.0822%" y="127.50"></text></g><g><title>type_collecting (3,274,797 samples, 1.09%)</title><rect x="73.0273%" y="165" width="1.0932%" height="15" fill="rgb(213,199,42)"/><text x="73.2773%" y="175.50"></text></g><g><title>collect_mod_item_types (3,261,396 samples, 1.09%)</title><rect x="73.0318%" y="149" width="1.0887%" height="15" fill="rgb(235,201,11)"/><text x="73.2818%" y="159.50"></text></g><g><title>evaluate_obligation (1,035,655 samples, 0.35%)</title><rect x="75.3765%" y="133" width="0.3457%" height="15" fill="rgb(207,46,11)"/><text x="75.6265%" y="143.50"></text></g><g><title>implied_outlives_bounds (377,553 samples, 0.13%)</title><rect x="75.7321%" y="133" width="0.1260%" height="15" fill="rgb(241,35,35)"/><text x="75.9821%" y="143.50"></text></g><g><title>param_env (467,794 samples, 0.16%)</title><rect x="75.8585%" y="133" width="0.1562%" height="15" fill="rgb(243,32,47)"/><text x="76.1085%" y="143.50"></text></g><g><title>region_scope_tree (977,312 samples, 0.33%)</title><rect x="76.0376%" y="133" width="0.3262%" height="15" fill="rgb(247,202,23)"/><text x="76.2876%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,367,112 samples, 2.13%)</title><rect x="74.2776%" y="149" width="2.1254%" height="15" fill="rgb(219,102,11)"/><text x="74.5276%" y="159.50">c..</text></g><g><title>evaluate_obligation (937,951 samples, 0.31%)</title><rect x="77.2432%" y="133" width="0.3131%" height="15" fill="rgb(243,110,44)"/><text x="77.4932%" y="143.50"></text></g><g><title>param_env (610,445 samples, 0.20%)</title><rect x="77.6218%" y="133" width="0.2038%" height="15" fill="rgb(222,74,54)"/><text x="77.8718%" y="143.50"></text></g><g><title>check_item_well_formed (4,698,726 samples, 1.57%)</title><rect x="76.4030%" y="149" width="1.5685%" height="15" fill="rgb(216,99,12)"/><text x="76.6530%" y="159.50"></text></g><g><title>analysis (232,632,420 samples, 77.66%)</title><rect x="0.3440%" y="197" width="77.6565%" height="15" fill="rgb(226,22,26)"/><text x="0.5940%" y="207.50">analysis</text></g><g><title>type_check_crate (135,564,045 samples, 45.25%)</title><rect x="32.7470%" y="181" width="45.2535%" height="15" fill="rgb(217,163,10)"/><text x="32.9970%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,606,799 samples, 3.87%)</title><rect x="74.1260%" y="165" width="3.8745%" height="15" fill="rgb(213,25,53)"/><text x="74.3760%" y="175.50">wf_c..</text></g><g><title>codegen_crate (363,804 samples, 0.12%)</title><rect x="78.0042%" y="197" width="0.1214%" height="15" fill="rgb(252,105,26)"/><text x="78.2542%" y="207.50"></text></g><g><title>AST_validation (396,834 samples, 0.13%)</title><rect x="78.1970%" y="181" width="0.1325%" height="15" fill="rgb(220,39,43)"/><text x="78.4470%" y="191.50"></text></g><g><title>metadata_register_crate (1,306,884 samples, 0.44%)</title><rect x="89.1253%" y="149" width="0.4363%" height="15" fill="rgb(229,68,48)"/><text x="89.3753%" y="159.50"></text></g><g><title>metadata_register_crate (463,696 samples, 0.15%)</title><rect x="89.4067%" y="133" width="0.1548%" height="15" fill="rgb(252,8,32)"/><text x="89.6567%" y="143.50"></text></g><g><title>macro_expand_crate (34,427,485 samples, 11.49%)</title><rect x="78.4120%" y="181" width="11.4925%" height="15" fill="rgb(223,20,43)"/><text x="78.6620%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (34,406,264 samples, 11.49%)</title><rect x="78.4191%" y="165" width="11.4854%" height="15" fill="rgb(229,81,49)"/><text x="78.6691%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,027,320 samples, 0.34%)</title><rect x="89.5615%" y="149" width="0.3429%" height="15" fill="rgb(236,28,36)"/><text x="89.8115%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (614,787 samples, 0.21%)</title><rect x="89.9059%" y="181" width="0.2052%" height="15" fill="rgb(249,185,26)"/><text x="90.1559%" y="191.50"></text></g><g><title>late_resolve_crate (7,703,657 samples, 2.57%)</title><rect x="90.2334%" y="165" width="2.5716%" height="15" fill="rgb(249,174,33)"/><text x="90.4834%" y="175.50">la..</text></g><g><title>configure_and_expand (44,289,885 samples, 14.78%)</title><rect x="78.1257%" y="197" width="14.7847%" height="15" fill="rgb(233,201,37)"/><text x="78.3757%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (8,385,534 samples, 2.80%)</title><rect x="90.1111%" y="181" width="2.7992%" height="15" fill="rgb(221,78,26)"/><text x="90.3611%" y="191.50">re..</text></g><g><title>drop_ast (456,275 samples, 0.15%)</title><rect x="92.9103%" y="197" width="0.1523%" height="15" fill="rgb(250,127,30)"/><text x="93.1603%" y="207.50"></text></g><g><title>early_lint_checks (1,259,124 samples, 0.42%)</title><rect x="93.0684%" y="197" width="0.4203%" height="15" fill="rgb(230,49,44)"/><text x="93.3184%" y="207.50"></text></g><g><title>free_global_ctxt (5,377,930 samples, 1.80%)</title><rect x="93.4887%" y="197" width="1.7952%" height="15" fill="rgb(229,67,23)"/><text x="93.7387%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,548,409 samples, 0.85%)</title><rect x="95.2839%" y="197" width="0.8507%" height="15" fill="rgb(249,83,47)"/><text x="95.5339%" y="207.50"></text></g><g><title>hir_lowering (7,867,767 samples, 2.63%)</title><rect x="96.1346%" y="197" width="2.6264%" height="15" fill="rgb(215,43,3)"/><text x="96.3846%" y="207.50">hi..</text></g><g><title>parse_crate (1,334,505 samples, 0.45%)</title><rect x="98.7839%" y="197" width="0.4455%" height="15" fill="rgb(238,154,13)"/><text x="99.0339%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,535,397 samples, 0.51%)</title><rect x="99.3119%" y="197" width="0.5125%" height="15" fill="rgb(219,56,2)"/><text x="99.5619%" y="207.50"></text></g><g><title>all (299,565,847 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (299,565,847 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (437,165 samples, 0.15%)</title><rect x="99.8541%" y="197" width="0.1459%" height="15" fill="rgb(250,79,13)"/><text x="100.1041%" y="207.50"></text></g></svg></svg>