<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (381,743 samples, 0.17%)</title><rect x="11.9903%" y="197" width="0.1677%" height="15" fill="rgb(227,0,7)"/><text x="12.2403%" y="207.50"></text></g><g><title>param_env (409,604 samples, 0.18%)</title><rect x="13.7633%" y="165" width="0.1799%" height="15" fill="rgb(217,0,24)"/><text x="14.0133%" y="175.50"></text></g><g><title>item_attrs (433,237 samples, 0.19%)</title><rect x="14.4307%" y="133" width="0.1903%" height="15" fill="rgb(221,193,54)"/><text x="14.6807%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (418,777 samples, 0.18%)</title><rect x="14.4370%" y="117" width="0.1840%" height="15" fill="rgb(248,212,6)"/><text x="14.6870%" y="127.50"></text></g><g><title>codegen_fn_attrs (605,519 samples, 0.27%)</title><rect x="14.3674%" y="149" width="0.2660%" height="15" fill="rgb(208,68,35)"/><text x="14.6174%" y="159.50"></text></g><g><title>is_copy_raw (467,215 samples, 0.21%)</title><rect x="17.0372%" y="133" width="0.2052%" height="15" fill="rgb(232,128,0)"/><text x="17.2872%" y="143.50"></text></g><g><title>evaluate_obligation (399,105 samples, 0.18%)</title><rect x="17.0671%" y="117" width="0.1753%" height="15" fill="rgb(207,160,47)"/><text x="17.3171%" y="127.50"></text></g><g><title>is_copy_raw (296,677 samples, 0.13%)</title><rect x="17.4662%" y="101" width="0.1303%" height="15" fill="rgb(228,23,34)"/><text x="17.7162%" y="111.50"></text></g><g><title>adt_drop_tys (822,401 samples, 0.36%)</title><rect x="17.3716%" y="117" width="0.3613%" height="15" fill="rgb(218,30,26)"/><text x="17.6216%" y="127.50"></text></g><g><title>is_copy_raw (1,739,861 samples, 0.76%)</title><rect x="17.7329%" y="117" width="0.7643%" height="15" fill="rgb(220,122,19)"/><text x="17.9829%" y="127.50"></text></g><g><title>evaluate_obligation (1,404,564 samples, 0.62%)</title><rect x="17.8801%" y="101" width="0.6170%" height="15" fill="rgb(250,228,42)"/><text x="18.1301%" y="111.50"></text></g><g><title>needs_drop_raw (2,931,668 samples, 1.29%)</title><rect x="17.2443%" y="133" width="1.2878%" height="15" fill="rgb(240,193,28)"/><text x="17.4943%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (942,734 samples, 0.41%)</title><rect x="18.7872%" y="117" width="0.4141%" height="15" fill="rgb(216,20,37)"/><text x="19.0372%" y="127.50"></text></g><g><title>impl_item_implementor_ids (232,663 samples, 0.10%)</title><rect x="19.2156%" y="117" width="0.1022%" height="15" fill="rgb(206,188,39)"/><text x="19.4656%" y="127.50"></text></g><g><title>specialization_graph_of (444,335 samples, 0.20%)</title><rect x="19.3207%" y="117" width="0.1952%" height="15" fill="rgb(217,207,13)"/><text x="19.5707%" y="127.50"></text></g><g><title>resolve_instance (2,668,802 samples, 1.17%)</title><rect x="18.5321%" y="133" width="1.1723%" height="15" fill="rgb(231,73,38)"/><text x="18.7821%" y="143.50"></text></g><g><title>type_of (342,786 samples, 0.15%)</title><rect x="19.5538%" y="117" width="0.1506%" height="15" fill="rgb(225,20,46)"/><text x="19.8038%" y="127.50"></text></g><g><title>thir_body (2,104,639 samples, 0.92%)</title><rect x="19.7367%" y="133" width="0.9245%" height="15" fill="rgb(210,31,41)"/><text x="19.9867%" y="143.50"></text></g><g><title>mir_const (17,437,041 samples, 7.66%)</title><rect x="13.0265%" y="181" width="7.6596%" height="15" fill="rgb(221,200,47)"/><text x="13.2765%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (15,349,988 samples, 6.74%)</title><rect x="13.9433%" y="165" width="6.7428%" height="15" fill="rgb(226,26,5)"/><text x="14.1933%" y="175.50">unsafety_..</text></g><g><title>mir_built (13,778,832 samples, 6.05%)</title><rect x="14.6334%" y="149" width="6.0526%" height="15" fill="rgb(249,33,26)"/><text x="14.8834%" y="159.50">mir_built</text></g><g><title>has_structural_eq_impls (385,184 samples, 0.17%)</title><rect x="20.8423%" y="165" width="0.1692%" height="15" fill="rgb(235,183,28)"/><text x="21.0923%" y="175.50"></text></g><g><title>evaluate_obligation (345,714 samples, 0.15%)</title><rect x="20.8596%" y="149" width="0.1519%" height="15" fill="rgb(221,5,38)"/><text x="21.1096%" y="159.50"></text></g><g><title>mir_const_qualif (1,113,831 samples, 0.49%)</title><rect x="20.6861%" y="181" width="0.4893%" height="15" fill="rgb(247,18,42)"/><text x="20.9361%" y="191.50"></text></g><g><title>mir_promoted (20,238,022 samples, 8.89%)</title><rect x="12.2854%" y="197" width="8.8900%" height="15" fill="rgb(241,131,45)"/><text x="12.5354%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,322,402 samples, 0.58%)</title><rect x="21.1772%" y="197" width="0.5809%" height="15" fill="rgb(249,31,29)"/><text x="21.4272%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,013,856 samples, 0.45%)</title><rect x="21.7581%" y="197" width="0.4454%" height="15" fill="rgb(225,111,53)"/><text x="22.0081%" y="207.50"></text></g><g><title>normalize_projection_ty (602,248 samples, 0.26%)</title><rect x="21.9389%" y="181" width="0.2645%" height="15" fill="rgb(238,160,17)"/><text x="22.1889%" y="191.50"></text></g><g><title>type_op_normalize_predicate (258,332 samples, 0.11%)</title><rect x="22.2034%" y="197" width="0.1135%" height="15" fill="rgb(214,148,48)"/><text x="22.4534%" y="207.50"></text></g><g><title>type_op_prove_predicate (5,625,090 samples, 2.47%)</title><rect x="22.3865%" y="197" width="2.4709%" height="15" fill="rgb(232,36,49)"/><text x="22.6365%" y="207.50">ty..</text></g><g><title>MIR_borrow_checking (55,370,238 samples, 24.32%)</title><rect x="0.5449%" y="229" width="24.3225%" height="15" fill="rgb(209,103,24)"/><text x="0.7949%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (55,061,545 samples, 24.19%)</title><rect x="0.6805%" y="213" width="24.1869%" height="15" fill="rgb(229,88,8)"/><text x="0.9305%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (251,422 samples, 0.11%)</title><rect x="24.8674%" y="229" width="0.1104%" height="15" fill="rgb(213,181,19)"/><text x="25.1174%" y="239.50"></text></g><g><title>hir_module_items (332,373 samples, 0.15%)</title><rect x="24.9779%" y="229" width="0.1460%" height="15" fill="rgb(254,191,54)"/><text x="25.2279%" y="239.50"></text></g><g><title>item_attrs (245,234 samples, 0.11%)</title><rect x="25.5026%" y="149" width="0.1077%" height="15" fill="rgb(241,83,37)"/><text x="25.7526%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (241,914 samples, 0.11%)</title><rect x="25.5041%" y="133" width="0.1063%" height="15" fill="rgb(233,36,39)"/><text x="25.7541%" y="143.50"></text></g><g><title>codegen_fn_attrs (297,396 samples, 0.13%)</title><rect x="25.4949%" y="165" width="0.1306%" height="15" fill="rgb(226,3,54)"/><text x="25.7449%" y="175.50"></text></g><g><title>should_inherit_track_caller (479,448 samples, 0.21%)</title><rect x="25.4220%" y="181" width="0.2106%" height="15" fill="rgb(245,192,40)"/><text x="25.6720%" y="191.50"></text></g><g><title>codegen_fn_attrs (724,390 samples, 0.32%)</title><rect x="25.3230%" y="197" width="0.3182%" height="15" fill="rgb(238,167,29)"/><text x="25.5730%" y="207.50"></text></g><g><title>check_mod_attrs (1,132,185 samples, 0.50%)</title><rect x="25.1439%" y="213" width="0.4973%" height="15" fill="rgb(232,182,51)"/><text x="25.3939%" y="223.50"></text></g><g><title>check_mod_const_bodies (236,303 samples, 0.10%)</title><rect x="25.6412%" y="213" width="0.1038%" height="15" fill="rgb(231,60,39)"/><text x="25.8912%" y="223.50"></text></g><g><title>lookup_deprecation_entry (266,302 samples, 0.12%)</title><rect x="25.9414%" y="197" width="0.1170%" height="15" fill="rgb(208,69,12)"/><text x="26.1914%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (705,555 samples, 0.31%)</title><rect x="25.8096%" y="213" width="0.3099%" height="15" fill="rgb(235,93,37)"/><text x="26.0596%" y="223.50"></text></g><g><title>misc_checking_1 (2,375,877 samples, 1.04%)</title><rect x="25.1241%" y="229" width="1.0437%" height="15" fill="rgb(213,116,39)"/><text x="25.3741%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,060,622 samples, 0.47%)</title><rect x="26.1685%" y="213" width="0.4659%" height="15" fill="rgb(222,207,29)"/><text x="26.4185%" y="223.50"></text></g><g><title>check_mod_liveness (891,420 samples, 0.39%)</title><rect x="26.2429%" y="197" width="0.3916%" height="15" fill="rgb(206,96,30)"/><text x="26.4929%" y="207.50"></text></g><g><title>type_uninhabited_from (359,674 samples, 0.16%)</title><rect x="26.4764%" y="181" width="0.1580%" height="15" fill="rgb(218,138,4)"/><text x="26.7264%" y="191.50"></text></g><g><title>type_uninhabited_from (283,853 samples, 0.12%)</title><rect x="26.5098%" y="165" width="0.1247%" height="15" fill="rgb(250,191,14)"/><text x="26.7598%" y="175.50"></text></g><g><title>misc_checking_2 (2,246,765 samples, 0.99%)</title><rect x="26.1678%" y="229" width="0.9869%" height="15" fill="rgb(239,60,40)"/><text x="26.4178%" y="239.50"></text></g><g><title>match_checking (1,184,403 samples, 0.52%)</title><rect x="26.6344%" y="213" width="0.5203%" height="15" fill="rgb(206,27,48)"/><text x="26.8844%" y="223.50"></text></g><g><title>check_match (1,113,940 samples, 0.49%)</title><rect x="26.6654%" y="197" width="0.4893%" height="15" fill="rgb(225,35,8)"/><text x="26.9154%" y="207.50"></text></g><g><title>check_private_in_public (454,385 samples, 0.20%)</title><rect x="27.1594%" y="213" width="0.1996%" height="15" fill="rgb(250,213,24)"/><text x="27.4094%" y="223.50"></text></g><g><title>death_checking (927,520 samples, 0.41%)</title><rect x="27.3590%" y="213" width="0.4074%" height="15" fill="rgb(247,123,22)"/><text x="27.6090%" y="223.50"></text></g><g><title>eval_to_const_value_raw (295,464 samples, 0.13%)</title><rect x="28.4581%" y="69" width="0.1298%" height="15" fill="rgb(231,138,38)"/><text x="28.7081%" y="79.50"></text></g><g><title>eval_to_const_value_raw (294,474 samples, 0.13%)</title><rect x="28.4585%" y="53" width="0.1294%" height="15" fill="rgb(231,145,46)"/><text x="28.7085%" y="63.50"></text></g><g><title>eval_to_allocation_raw (292,794 samples, 0.13%)</title><rect x="28.4593%" y="37" width="0.1286%" height="15" fill="rgb(251,118,11)"/><text x="28.7093%" y="47.50"></text></g><g><title>eval_to_const_value_raw (522,496 samples, 0.23%)</title><rect x="28.3603%" y="133" width="0.2295%" height="15" fill="rgb(217,147,25)"/><text x="28.6103%" y="143.50"></text></g><g><title>eval_to_const_value_raw (521,106 samples, 0.23%)</title><rect x="28.3609%" y="117" width="0.2289%" height="15" fill="rgb(247,81,37)"/><text x="28.6109%" y="127.50"></text></g><g><title>eval_to_allocation_raw (518,506 samples, 0.23%)</title><rect x="28.3621%" y="101" width="0.2278%" height="15" fill="rgb(209,12,38)"/><text x="28.6121%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (303,514 samples, 0.13%)</title><rect x="28.4565%" y="85" width="0.1333%" height="15" fill="rgb(227,1,9)"/><text x="28.7065%" y="95.50"></text></g><g><title>eval_to_allocation_raw (624,287 samples, 0.27%)</title><rect x="28.3165%" y="181" width="0.2742%" height="15" fill="rgb(248,47,43)"/><text x="28.5665%" y="191.50"></text></g><g><title>eval_to_allocation_raw (621,707 samples, 0.27%)</title><rect x="28.3176%" y="165" width="0.2731%" height="15" fill="rgb(221,10,30)"/><text x="28.5676%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (538,396 samples, 0.24%)</title><rect x="28.3542%" y="149" width="0.2365%" height="15" fill="rgb(210,229,1)"/><text x="28.6042%" y="159.50"></text></g><g><title>param_env (765,605 samples, 0.34%)</title><rect x="28.6795%" y="181" width="0.3363%" height="15" fill="rgb(222,148,37)"/><text x="28.9295%" y="191.50"></text></g><g><title>predicates_of (332,283 samples, 0.15%)</title><rect x="28.8698%" y="165" width="0.1460%" height="15" fill="rgb(234,67,33)"/><text x="29.1198%" y="175.50"></text></g><g><title>predicates_defined_on (272,162 samples, 0.12%)</title><rect x="28.8962%" y="149" width="0.1196%" height="15" fill="rgb(247,98,35)"/><text x="29.1462%" y="159.50"></text></g><g><title>crate_lints (4,189,346 samples, 1.84%)</title><rect x="27.7671%" y="197" width="1.8403%" height="15" fill="rgb(247,138,52)"/><text x="28.0171%" y="207.50">c..</text></g><g><title>type_of (1,258,056 samples, 0.55%)</title><rect x="29.0547%" y="181" width="0.5526%" height="15" fill="rgb(213,79,30)"/><text x="29.3047%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (985,494 samples, 0.43%)</title><rect x="29.1744%" y="165" width="0.4329%" height="15" fill="rgb(246,177,23)"/><text x="29.4244%" y="175.50"></text></g><g><title>lint_checking (5,194,748 samples, 2.28%)</title><rect x="27.7664%" y="213" width="2.2819%" height="15" fill="rgb(230,62,27)"/><text x="28.0164%" y="223.50">l..</text></g><g><title>module_lints (1,003,852 samples, 0.44%)</title><rect x="29.6073%" y="197" width="0.4410%" height="15" fill="rgb(216,154,8)"/><text x="29.8573%" y="207.50"></text></g><g><title>lint_mod (990,302 samples, 0.44%)</title><rect x="29.6133%" y="181" width="0.4350%" height="15" fill="rgb(244,35,45)"/><text x="29.8633%" y="191.50"></text></g><g><title>privacy_access_levels (539,937 samples, 0.24%)</title><rect x="30.0483%" y="213" width="0.2372%" height="15" fill="rgb(251,115,12)"/><text x="30.2983%" y="223.50"></text></g><g><title>privacy_checking_modules (1,761,699 samples, 0.77%)</title><rect x="30.2855%" y="213" width="0.7739%" height="15" fill="rgb(240,54,50)"/><text x="30.5355%" y="223.50"></text></g><g><title>check_mod_privacy (1,750,559 samples, 0.77%)</title><rect x="30.2904%" y="197" width="0.7690%" height="15" fill="rgb(233,84,52)"/><text x="30.5404%" y="207.50"></text></g><g><title>misc_checking_3 (8,912,449 samples, 3.91%)</title><rect x="27.1547%" y="229" width="3.9150%" height="15" fill="rgb(207,117,47)"/><text x="27.4047%" y="239.50">misc..</text></g><g><title>impl_trait_ref (482,854 samples, 0.21%)</title><rect x="31.2282%" y="133" width="0.2121%" height="15" fill="rgb(249,43,39)"/><text x="31.4782%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (462,254 samples, 0.20%)</title><rect x="31.2372%" y="117" width="0.2031%" height="15" fill="rgb(209,38,44)"/><text x="31.4872%" y="127.50"></text></g><g><title>adt_destructor (663,137 samples, 0.29%)</title><rect x="31.1644%" y="181" width="0.2913%" height="15" fill="rgb(236,212,23)"/><text x="31.4144%" y="191.50"></text></g><g><title>coherent_trait (659,667 samples, 0.29%)</title><rect x="31.1660%" y="165" width="0.2898%" height="15" fill="rgb(242,79,21)"/><text x="31.4160%" y="175.50"></text></g><g><title>specialization_graph_of (658,457 samples, 0.29%)</title><rect x="31.1665%" y="149" width="0.2892%" height="15" fill="rgb(211,96,35)"/><text x="31.4165%" y="159.50"></text></g><g><title>impl_parent (3,521,864 samples, 1.55%)</title><rect x="33.8203%" y="165" width="1.5471%" height="15" fill="rgb(253,215,40)"/><text x="34.0703%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,885,537 samples, 0.83%)</title><rect x="34.5391%" y="149" width="0.8283%" height="15" fill="rgb(211,81,21)"/><text x="34.7891%" y="159.50"></text></g><g><title>impl_trait_ref (6,761,808 samples, 2.97%)</title><rect x="35.3673%" y="165" width="2.9703%" height="15" fill="rgb(208,190,38)"/><text x="35.6173%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,274,643 samples, 2.32%)</title><rect x="36.0206%" y="149" width="2.3170%" height="15" fill="rgb(235,213,38)"/><text x="36.2706%" y="159.50">m..</text></g><g><title>trait_impls_of (1,172,454 samples, 0.52%)</title><rect x="38.3687%" y="165" width="0.5150%" height="15" fill="rgb(237,122,38)"/><text x="38.6187%" y="175.50"></text></g><g><title>implementations_of_trait (384,593 samples, 0.17%)</title><rect x="38.7147%" y="149" width="0.1689%" height="15" fill="rgb(244,218,35)"/><text x="38.9647%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (274,032 samples, 0.12%)</title><rect x="38.7633%" y="133" width="0.1204%" height="15" fill="rgb(240,68,47)"/><text x="39.0133%" y="143.50"></text></g><g><title>coherent_trait (17,611,457 samples, 7.74%)</title><rect x="31.1481%" y="197" width="7.7362%" height="15" fill="rgb(210,16,53)"/><text x="31.3981%" y="207.50">coherent_tr..</text></g><g><title>specialization_graph_of (16,887,629 samples, 7.42%)</title><rect x="31.4661%" y="181" width="7.4182%" height="15" fill="rgb(235,124,12)"/><text x="31.7161%" y="191.50">specializa..</text></g><g><title>coherence_checking (17,806,848 samples, 7.82%)</title><rect x="31.1345%" y="213" width="7.8220%" height="15" fill="rgb(224,169,11)"/><text x="31.3845%" y="223.50">coherence_c..</text></g><g><title>associated_item (558,426 samples, 0.25%)</title><rect x="53.4509%" y="149" width="0.2453%" height="15" fill="rgb(250,166,2)"/><text x="53.7009%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (452,405 samples, 0.20%)</title><rect x="53.4974%" y="133" width="0.1987%" height="15" fill="rgb(242,216,29)"/><text x="53.7474%" y="143.50"></text></g><g><title>associated_items (793,997 samples, 0.35%)</title><rect x="53.3651%" y="165" width="0.3488%" height="15" fill="rgb(230,116,27)"/><text x="53.6151%" y="175.50"></text></g><g><title>adt_dtorck_constraint (537,125 samples, 0.24%)</title><rect x="54.1164%" y="149" width="0.2359%" height="15" fill="rgb(228,99,48)"/><text x="54.3664%" y="159.50"></text></g><g><title>dropck_outlives (1,886,051 samples, 0.83%)</title><rect x="53.7698%" y="165" width="0.8285%" height="15" fill="rgb(253,11,6)"/><text x="54.0198%" y="175.50"></text></g><g><title>normalize_projection_ty (559,967 samples, 0.25%)</title><rect x="54.3523%" y="149" width="0.2460%" height="15" fill="rgb(247,143,39)"/><text x="54.6023%" y="159.50"></text></g><g><title>predicates_of (270,833 samples, 0.12%)</title><rect x="55.6375%" y="149" width="0.1190%" height="15" fill="rgb(236,97,10)"/><text x="55.8875%" y="159.50"></text></g><g><title>trait_impls_of (263,943 samples, 0.12%)</title><rect x="55.8214%" y="149" width="0.1159%" height="15" fill="rgb(233,208,19)"/><text x="56.0714%" y="159.50"></text></g><g><title>evaluate_obligation (3,049,704 samples, 1.34%)</title><rect x="54.5983%" y="165" width="1.3396%" height="15" fill="rgb(216,164,2)"/><text x="54.8483%" y="175.50"></text></g><g><title>evaluate_obligation (335,105 samples, 0.15%)</title><rect x="56.4571%" y="149" width="0.1472%" height="15" fill="rgb(220,129,5)"/><text x="56.7071%" y="159.50"></text></g><g><title>method_autoderef_steps (710,721 samples, 0.31%)</title><rect x="56.2990%" y="165" width="0.3122%" height="15" fill="rgb(242,17,10)"/><text x="56.5490%" y="175.50"></text></g><g><title>object_safety_violations (255,953 samples, 0.11%)</title><rect x="56.6128%" y="165" width="0.1124%" height="15" fill="rgb(242,107,0)"/><text x="56.8628%" y="175.50"></text></g><g><title>predicates_of (393,425 samples, 0.17%)</title><rect x="56.7694%" y="165" width="0.1728%" height="15" fill="rgb(251,28,31)"/><text x="57.0194%" y="175.50"></text></g><g><title>predicates_defined_on (279,565 samples, 0.12%)</title><rect x="56.8194%" y="149" width="0.1228%" height="15" fill="rgb(233,223,10)"/><text x="57.0694%" y="159.50"></text></g><g><title>associated_item (330,323 samples, 0.15%)</title><rect x="61.6617%" y="133" width="0.1451%" height="15" fill="rgb(215,21,27)"/><text x="61.9117%" y="143.50"></text></g><g><title>associated_items (391,853 samples, 0.17%)</title><rect x="61.6424%" y="149" width="0.1721%" height="15" fill="rgb(232,23,21)"/><text x="61.8924%" y="159.50"></text></g><g><title>adt_dtorck_constraint (369,194 samples, 0.16%)</title><rect x="62.0686%" y="117" width="0.1622%" height="15" fill="rgb(244,5,23)"/><text x="62.3186%" y="127.50"></text></g><g><title>adt_dtorck_constraint (845,321 samples, 0.37%)</title><rect x="61.9137%" y="133" width="0.3713%" height="15" fill="rgb(226,81,46)"/><text x="62.1637%" y="143.50"></text></g><g><title>dropck_outlives (1,252,065 samples, 0.55%)</title><rect x="61.8312%" y="149" width="0.5500%" height="15" fill="rgb(247,70,30)"/><text x="62.0812%" y="159.50"></text></g><g><title>evaluate_obligation (1,141,879 samples, 0.50%)</title><rect x="62.3812%" y="149" width="0.5016%" height="15" fill="rgb(212,68,19)"/><text x="62.6312%" y="159.50"></text></g><g><title>is_copy_raw (326,256 samples, 0.14%)</title><rect x="63.0290%" y="149" width="0.1433%" height="15" fill="rgb(240,187,13)"/><text x="63.2790%" y="159.50"></text></g><g><title>evaluate_obligation (246,464 samples, 0.11%)</title><rect x="63.0640%" y="133" width="0.1083%" height="15" fill="rgb(223,113,26)"/><text x="63.3140%" y="143.50"></text></g><g><title>evaluate_obligation (275,622 samples, 0.12%)</title><rect x="63.3321%" y="133" width="0.1211%" height="15" fill="rgb(206,192,2)"/><text x="63.5821%" y="143.50"></text></g><g><title>method_autoderef_steps (586,606 samples, 0.26%)</title><rect x="63.1990%" y="149" width="0.2577%" height="15" fill="rgb(241,108,4)"/><text x="63.4490%" y="159.50"></text></g><g><title>typeck (15,095,289 samples, 6.63%)</title><rect x="57.0015%" y="165" width="6.6309%" height="15" fill="rgb(247,173,49)"/><text x="57.2515%" y="175.50">typeck</text></g><g><title>item_bodies_checking (56,211,937 samples, 24.69%)</title><rect x="38.9848%" y="213" width="24.6923%" height="15" fill="rgb(224,114,35)"/><text x="39.2348%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (56,208,507 samples, 24.69%)</title><rect x="38.9863%" y="197" width="24.6907%" height="15" fill="rgb(245,159,27)"/><text x="39.2363%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (56,011,736 samples, 24.60%)</title><rect x="39.0728%" y="181" width="24.6043%" height="15" fill="rgb(245,172,44)"/><text x="39.3228%" y="191.50">typeck</text></g><g><title>layout_of (234,023 samples, 0.10%)</title><rect x="64.5498%" y="181" width="0.1028%" height="15" fill="rgb(236,23,11)"/><text x="64.7998%" y="191.50"></text></g><g><title>dropck_outlives (228,202 samples, 0.10%)</title><rect x="64.8722%" y="165" width="0.1002%" height="15" fill="rgb(205,117,38)"/><text x="65.1222%" y="175.50"></text></g><g><title>item_types_checking (3,027,024 samples, 1.33%)</title><rect x="63.6771%" y="213" width="1.3297%" height="15" fill="rgb(237,72,25)"/><text x="63.9271%" y="223.50"></text></g><g><title>check_mod_item_types (3,012,854 samples, 1.32%)</title><rect x="63.6833%" y="197" width="1.3235%" height="15" fill="rgb(244,70,9)"/><text x="63.9333%" y="207.50"></text></g><g><title>typeck (714,518 samples, 0.31%)</title><rect x="64.6929%" y="181" width="0.3139%" height="15" fill="rgb(217,125,39)"/><text x="64.9429%" y="191.50"></text></g><g><title>fn_sig (753,777 samples, 0.33%)</title><rect x="65.2702%" y="181" width="0.3311%" height="15" fill="rgb(235,36,10)"/><text x="65.5202%" y="191.50"></text></g><g><title>named_region_map (751,437 samples, 0.33%)</title><rect x="65.7303%" y="165" width="0.3301%" height="15" fill="rgb(251,123,47)"/><text x="65.9803%" y="175.50"></text></g><g><title>resolve_lifetimes (705,287 samples, 0.31%)</title><rect x="65.7506%" y="149" width="0.3098%" height="15" fill="rgb(221,13,13)"/><text x="66.0006%" y="159.50"></text></g><g><title>lint_levels (254,413 samples, 0.11%)</title><rect x="65.9487%" y="133" width="0.1118%" height="15" fill="rgb(238,131,9)"/><text x="66.1987%" y="143.50"></text></g><g><title>generics_of (1,073,611 samples, 0.47%)</title><rect x="65.6013%" y="181" width="0.4716%" height="15" fill="rgb(211,50,8)"/><text x="65.8513%" y="191.50"></text></g><g><title>explicit_predicates_of (668,530 samples, 0.29%)</title><rect x="66.3034%" y="149" width="0.2937%" height="15" fill="rgb(245,182,24)"/><text x="66.5534%" y="159.50"></text></g><g><title>predicates_of (1,448,746 samples, 0.64%)</title><rect x="66.1735%" y="181" width="0.6364%" height="15" fill="rgb(242,14,37)"/><text x="66.4235%" y="191.50"></text></g><g><title>predicates_defined_on (1,335,686 samples, 0.59%)</title><rect x="66.2231%" y="165" width="0.5867%" height="15" fill="rgb(246,228,12)"/><text x="66.4731%" y="175.50"></text></g><g><title>inferred_outlives_of (484,535 samples, 0.21%)</title><rect x="66.5970%" y="149" width="0.2128%" height="15" fill="rgb(213,55,15)"/><text x="66.8470%" y="159.50"></text></g><g><title>inferred_outlives_crate (447,095 samples, 0.20%)</title><rect x="66.6135%" y="133" width="0.1964%" height="15" fill="rgb(209,9,3)"/><text x="66.8635%" y="143.50"></text></g><g><title>type_of (229,584 samples, 0.10%)</title><rect x="66.7090%" y="117" width="0.1008%" height="15" fill="rgb(230,59,30)"/><text x="66.9590%" y="127.50"></text></g><g><title>type_collecting (4,534,431 samples, 1.99%)</title><rect x="65.0098%" y="213" width="1.9918%" height="15" fill="rgb(209,121,21)"/><text x="65.2598%" y="223.50">t..</text></g><g><title>collect_mod_item_types (4,499,150 samples, 1.98%)</title><rect x="65.0253%" y="197" width="1.9763%" height="15" fill="rgb(220,109,13)"/><text x="65.2753%" y="207.50">c..</text></g><g><title>type_of (393,425 samples, 0.17%)</title><rect x="66.8288%" y="181" width="0.1728%" height="15" fill="rgb(232,18,1)"/><text x="67.0788%" y="191.50"></text></g><g><title>evaluate_obligation (921,062 samples, 0.40%)</title><rect x="68.8264%" y="181" width="0.4046%" height="15" fill="rgb(215,41,42)"/><text x="69.0764%" y="191.50"></text></g><g><title>implied_outlives_bounds (416,356 samples, 0.18%)</title><rect x="69.2470%" y="181" width="0.1829%" height="15" fill="rgb(224,123,36)"/><text x="69.4970%" y="191.50"></text></g><g><title>param_env (571,792 samples, 0.25%)</title><rect x="69.4356%" y="181" width="0.2512%" height="15" fill="rgb(240,125,3)"/><text x="69.6856%" y="191.50"></text></g><g><title>region_scope_tree (599,824 samples, 0.26%)</title><rect x="69.7223%" y="181" width="0.2635%" height="15" fill="rgb(205,98,50)"/><text x="69.9723%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,521,354 samples, 2.86%)</title><rect x="67.1965%" y="197" width="2.8646%" height="15" fill="rgb(205,185,37)"/><text x="67.4465%" y="207.50">ch..</text></g><g><title>adt_sized_constraint (239,353 samples, 0.11%)</title><rect x="71.6262%" y="165" width="0.1051%" height="15" fill="rgb(238,207,15)"/><text x="71.8762%" y="175.50"></text></g><g><title>evaluate_obligation (1,080,174 samples, 0.47%)</title><rect x="71.3096%" y="181" width="0.4745%" height="15" fill="rgb(213,199,42)"/><text x="71.5596%" y="191.50"></text></g><g><title>implied_outlives_bounds (247,965 samples, 0.11%)</title><rect x="71.8033%" y="181" width="0.1089%" height="15" fill="rgb(235,201,11)"/><text x="72.0533%" y="191.50"></text></g><g><title>object_safety_violations (448,055 samples, 0.20%)</title><rect x="71.9125%" y="181" width="0.1968%" height="15" fill="rgb(207,46,11)"/><text x="72.1625%" y="191.50"></text></g><g><title>param_env (545,712 samples, 0.24%)</title><rect x="72.1093%" y="181" width="0.2397%" height="15" fill="rgb(241,35,35)"/><text x="72.3593%" y="191.50"></text></g><g><title>check_item_well_formed (5,718,158 samples, 2.51%)</title><rect x="70.0611%" y="197" width="2.5118%" height="15" fill="rgb(243,32,47)"/><text x="70.3111%" y="207.50">ch..</text></g><g><title>object_safety_violations (249,602 samples, 0.11%)</title><rect x="72.9650%" y="181" width="0.1096%" height="15" fill="rgb(247,202,23)"/><text x="73.2150%" y="191.50"></text></g><g><title>analysis (165,750,208 samples, 72.81%)</title><rect x="0.3385%" y="245" width="72.8092%" height="15" fill="rgb(219,102,11)"/><text x="0.5885%" y="255.50">analysis</text></g><g><title>type_check_crate (95,790,619 samples, 42.08%)</title><rect x="31.0697%" y="229" width="42.0780%" height="15" fill="rgb(243,110,44)"/><text x="31.3197%" y="239.50">type_check_crate</text></g><g><title>wf_checking (13,980,406 samples, 6.14%)</title><rect x="67.0065%" y="213" width="6.1412%" height="15" fill="rgb(222,74,54)"/><text x="67.2565%" y="223.50">wf_check..</text></g><g><title>check_trait_item_well_formed (1,308,446 samples, 0.57%)</title><rect x="72.5729%" y="197" width="0.5748%" height="15" fill="rgb(216,99,12)"/><text x="72.8229%" y="207.50"></text></g><g><title>codegen_crate (501,376 samples, 0.22%)</title><rect x="73.1518%" y="245" width="0.2202%" height="15" fill="rgb(226,22,26)"/><text x="73.4018%" y="255.50"></text></g><g><title>AST_validation (273,383 samples, 0.12%)</title><rect x="73.4546%" y="229" width="0.1201%" height="15" fill="rgb(217,163,10)"/><text x="73.7046%" y="239.50"></text></g><g><title>metadata_load_macro (269,845 samples, 0.12%)</title><rect x="87.2090%" y="197" width="0.1185%" height="15" fill="rgb(213,25,53)"/><text x="87.4590%" y="207.50"></text></g><g><title>metadata_register_crate (8,611,697 samples, 3.78%)</title><rect x="87.3275%" y="197" width="3.7829%" height="15" fill="rgb(252,105,26)"/><text x="87.5775%" y="207.50">meta..</text></g><g><title>metadata_register_crate (6,832,624 samples, 3.00%)</title><rect x="88.1090%" y="181" width="3.0014%" height="15" fill="rgb(220,39,43)"/><text x="88.3590%" y="191.50">met..</text></g><g><title>metadata_register_crate (5,168,406 samples, 2.27%)</title><rect x="88.8400%" y="165" width="2.2703%" height="15" fill="rgb(229,68,48)"/><text x="89.0900%" y="175.50">m..</text></g><g><title>macro_expand_crate (40,548,893 samples, 17.81%)</title><rect x="73.6653%" y="229" width="17.8119%" height="15" fill="rgb(252,8,32)"/><text x="73.9153%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (40,535,873 samples, 17.81%)</title><rect x="73.6710%" y="213" width="17.8062%" height="15" fill="rgb(223,20,43)"/><text x="73.9210%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (835,140 samples, 0.37%)</title><rect x="91.1104%" y="197" width="0.3669%" height="15" fill="rgb(229,81,49)"/><text x="91.3604%" y="207.50"></text></g><g><title>late_resolve_crate (2,700,269 samples, 1.19%)</title><rect x="91.6766%" y="213" width="1.1861%" height="15" fill="rgb(236,28,36)"/><text x="91.9266%" y="223.50"></text></g><g><title>configure_and_expand (44,614,017 samples, 19.60%)</title><rect x="73.3721%" y="245" width="19.5976%" height="15" fill="rgb(249,185,26)"/><text x="73.6221%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (3,312,237 samples, 1.45%)</title><rect x="91.5147%" y="229" width="1.4550%" height="15" fill="rgb(249,174,33)"/><text x="91.7647%" y="239.50"></text></g><g><title>drop_ast (408,505 samples, 0.18%)</title><rect x="92.9697%" y="245" width="0.1794%" height="15" fill="rgb(233,201,37)"/><text x="93.2197%" y="255.50"></text></g><g><title>early_lint_checks (658,137 samples, 0.29%)</title><rect x="93.1592%" y="245" width="0.2891%" height="15" fill="rgb(221,78,26)"/><text x="93.4092%" y="255.50"></text></g><g><title>free_global_ctxt (4,865,264 samples, 2.14%)</title><rect x="93.4483%" y="245" width="2.1372%" height="15" fill="rgb(250,127,30)"/><text x="93.6983%" y="255.50">f..</text></g><g><title>opt_def_kind (305,022 samples, 0.13%)</title><rect x="96.4721%" y="229" width="0.1340%" height="15" fill="rgb(230,49,44)"/><text x="96.7221%" y="239.50"></text></g><g><title>generate_crate_metadata (2,371,067 samples, 1.04%)</title><rect x="95.5855%" y="245" width="1.0415%" height="15" fill="rgb(229,67,23)"/><text x="95.8355%" y="255.50"></text></g><g><title>hir_lowering (5,223,168 samples, 2.29%)</title><rect x="96.6270%" y="245" width="2.2944%" height="15" fill="rgb(249,83,47)"/><text x="96.8770%" y="255.50">h..</text></g><g><title>parse_crate (489,425 samples, 0.21%)</title><rect x="98.9491%" y="245" width="0.2150%" height="15" fill="rgb(215,43,3)"/><text x="99.1991%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,181,593 samples, 0.52%)</title><rect x="99.2623%" y="245" width="0.5190%" height="15" fill="rgb(238,154,13)"/><text x="99.5123%" y="255.50"></text></g><g><title>all (227,650,069 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (227,650,069 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (394,234 samples, 0.17%)</title><rect x="99.8268%" y="245" width="0.1732%" height="15" fill="rgb(235,30,7)"/><text x="100.0768%" y="255.50"></text></g></svg></svg>