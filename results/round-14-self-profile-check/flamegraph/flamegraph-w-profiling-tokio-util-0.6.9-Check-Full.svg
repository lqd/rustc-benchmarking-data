<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (230,432 samples, 0.10%)</title><rect x="11.2021%" y="197" width="0.1006%" height="15" fill="rgb(227,0,7)"/><text x="11.4521%" y="207.50"></text></g><g><title>param_env (455,131 samples, 0.20%)</title><rect x="12.7270%" y="165" width="0.1987%" height="15" fill="rgb(217,0,24)"/><text x="12.9770%" y="175.50"></text></g><g><title>item_attrs (335,632 samples, 0.15%)</title><rect x="13.4116%" y="133" width="0.1465%" height="15" fill="rgb(221,193,54)"/><text x="13.6616%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (323,582 samples, 0.14%)</title><rect x="13.4169%" y="117" width="0.1413%" height="15" fill="rgb(248,212,6)"/><text x="13.6669%" y="127.50"></text></g><g><title>codegen_fn_attrs (507,346 samples, 0.22%)</title><rect x="13.3475%" y="149" width="0.2215%" height="15" fill="rgb(208,68,35)"/><text x="13.5975%" y="159.50"></text></g><g><title>is_copy_raw (266,882 samples, 0.12%)</title><rect x="16.1624%" y="133" width="0.1165%" height="15" fill="rgb(232,128,0)"/><text x="16.4124%" y="143.50"></text></g><g><title>needs_drop_raw (1,996,299 samples, 0.87%)</title><rect x="16.2789%" y="133" width="0.8715%" height="15" fill="rgb(207,160,47)"/><text x="16.5289%" y="143.50"></text></g><g><title>is_copy_raw (1,591,676 samples, 0.69%)</title><rect x="16.4555%" y="117" width="0.6949%" height="15" fill="rgb(228,23,34)"/><text x="16.7055%" y="127.50"></text></g><g><title>evaluate_obligation (1,315,632 samples, 0.57%)</title><rect x="16.5760%" y="101" width="0.5744%" height="15" fill="rgb(218,30,26)"/><text x="16.8260%" y="111.50"></text></g><g><title>resolve_instance (760,579 samples, 0.33%)</title><rect x="17.1504%" y="133" width="0.3320%" height="15" fill="rgb(220,122,19)"/><text x="17.4004%" y="143.50"></text></g><g><title>thir_body (2,269,492 samples, 0.99%)</title><rect x="17.5063%" y="133" width="0.9908%" height="15" fill="rgb(250,228,42)"/><text x="17.7563%" y="143.50"></text></g><g><title>mir_const (14,834,734 samples, 6.48%)</title><rect x="12.0385%" y="181" width="6.4763%" height="15" fill="rgb(240,193,28)"/><text x="12.2885%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (12,802,528 samples, 5.59%)</title><rect x="12.9257%" y="165" width="5.5891%" height="15" fill="rgb(216,20,37)"/><text x="13.1757%" y="175.50">unsafet..</text></g><g><title>mir_built (11,329,122 samples, 4.95%)</title><rect x="13.5689%" y="149" width="4.9459%" height="15" fill="rgb(206,188,39)"/><text x="13.8189%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (16,488,024 samples, 7.20%)</title><rect x="11.3685%" y="197" width="7.1980%" height="15" fill="rgb(217,207,13)"/><text x="11.6185%" y="207.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (1,606,590 samples, 0.70%)</title><rect x="18.5666%" y="197" width="0.7014%" height="15" fill="rgb(231,73,38)"/><text x="18.8166%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (380,013 samples, 0.17%)</title><rect x="19.2679%" y="197" width="0.1659%" height="15" fill="rgb(225,20,46)"/><text x="19.5179%" y="207.50"></text></g><g><title>type_op_prove_predicate (4,276,598 samples, 1.87%)</title><rect x="19.5193%" y="197" width="1.8670%" height="15" fill="rgb(210,31,41)"/><text x="19.7693%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (47,756,661 samples, 20.85%)</title><rect x="0.5439%" y="229" width="20.8487%" height="15" fill="rgb(221,200,47)"/><text x="0.7939%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,504,246 samples, 20.74%)</title><rect x="0.6541%" y="213" width="20.7385%" height="15" fill="rgb(226,26,5)"/><text x="0.9041%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (303,682 samples, 0.13%)</title><rect x="21.4566%" y="229" width="0.1326%" height="15" fill="rgb(249,33,26)"/><text x="21.7066%" y="239.50"></text></g><g><title>codegen_fn_attrs (345,902 samples, 0.15%)</title><rect x="21.8734%" y="165" width="0.1510%" height="15" fill="rgb(235,183,28)"/><text x="22.1234%" y="175.50"></text></g><g><title>codegen_fn_attrs (582,396 samples, 0.25%)</title><rect x="21.7754%" y="197" width="0.2543%" height="15" fill="rgb(221,5,38)"/><text x="22.0254%" y="207.50"></text></g><g><title>should_inherit_track_caller (513,485 samples, 0.22%)</title><rect x="21.8055%" y="181" width="0.2242%" height="15" fill="rgb(247,18,42)"/><text x="22.0555%" y="191.50"></text></g><g><title>check_mod_attrs (977,170 samples, 0.43%)</title><rect x="21.6031%" y="213" width="0.4266%" height="15" fill="rgb(241,131,45)"/><text x="21.8531%" y="223.50"></text></g><g><title>lint_levels (257,543 samples, 0.11%)</title><rect x="22.3352%" y="197" width="0.1124%" height="15" fill="rgb(249,31,29)"/><text x="22.5852%" y="207.50"></text></g><g><title>lookup_deprecation_entry (257,133 samples, 0.11%)</title><rect x="22.4476%" y="197" width="0.1123%" height="15" fill="rgb(225,111,53)"/><text x="22.6976%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (975,322 samples, 0.43%)</title><rect x="22.1900%" y="213" width="0.4258%" height="15" fill="rgb(238,160,17)"/><text x="22.4400%" y="223.50"></text></g><g><title>misc_checking_1 (2,427,517 samples, 1.06%)</title><rect x="21.5894%" y="229" width="1.0598%" height="15" fill="rgb(214,148,48)"/><text x="21.8394%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (918,540 samples, 0.40%)</title><rect x="22.6498%" y="213" width="0.4010%" height="15" fill="rgb(232,36,49)"/><text x="22.8998%" y="223.50"></text></g><g><title>check_mod_liveness (731,948 samples, 0.32%)</title><rect x="22.7312%" y="197" width="0.3195%" height="15" fill="rgb(209,103,24)"/><text x="22.9812%" y="207.50"></text></g><g><title>misc_checking_2 (2,011,042 samples, 0.88%)</title><rect x="22.6491%" y="229" width="0.8779%" height="15" fill="rgb(229,88,8)"/><text x="22.8991%" y="239.50"></text></g><g><title>match_checking (1,091,042 samples, 0.48%)</title><rect x="23.0508%" y="213" width="0.4763%" height="15" fill="rgb(213,181,19)"/><text x="23.3008%" y="223.50"></text></g><g><title>check_match (1,027,722 samples, 0.45%)</title><rect x="23.0784%" y="197" width="0.4487%" height="15" fill="rgb(254,191,54)"/><text x="23.3284%" y="207.50"></text></g><g><title>check_private_in_public (425,695 samples, 0.19%)</title><rect x="23.5305%" y="213" width="0.1858%" height="15" fill="rgb(241,83,37)"/><text x="23.7805%" y="223.50"></text></g><g><title>death_checking (802,039 samples, 0.35%)</title><rect x="23.7163%" y="213" width="0.3501%" height="15" fill="rgb(233,36,39)"/><text x="23.9663%" y="223.50"></text></g><g><title>param_env (502,987 samples, 0.22%)</title><rect x="24.6882%" y="181" width="0.2196%" height="15" fill="rgb(226,3,54)"/><text x="24.9382%" y="191.50"></text></g><g><title>crate_lints (3,373,198 samples, 1.47%)</title><rect x="24.0671%" y="197" width="1.4726%" height="15" fill="rgb(245,192,40)"/><text x="24.3171%" y="207.50"></text></g><g><title>type_of (1,362,533 samples, 0.59%)</title><rect x="24.9449%" y="181" width="0.5948%" height="15" fill="rgb(238,167,29)"/><text x="25.1949%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,054,949 samples, 0.46%)</title><rect x="25.0792%" y="165" width="0.4606%" height="15" fill="rgb(232,182,51)"/><text x="25.3292%" y="175.50"></text></g><g><title>lint_checking (4,200,027 samples, 1.83%)</title><rect x="24.0665%" y="213" width="1.8336%" height="15" fill="rgb(231,60,39)"/><text x="24.3165%" y="223.50">l..</text></g><g><title>module_lints (825,299 samples, 0.36%)</title><rect x="25.5398%" y="197" width="0.3603%" height="15" fill="rgb(208,69,12)"/><text x="25.7898%" y="207.50"></text></g><g><title>lint_mod (816,659 samples, 0.36%)</title><rect x="25.5435%" y="181" width="0.3565%" height="15" fill="rgb(235,93,37)"/><text x="25.7935%" y="191.50"></text></g><g><title>privacy_access_levels (464,545 samples, 0.20%)</title><rect x="25.9000%" y="213" width="0.2028%" height="15" fill="rgb(213,116,39)"/><text x="26.1500%" y="223.50"></text></g><g><title>privacy_checking_modules (1,884,641 samples, 0.82%)</title><rect x="26.1028%" y="213" width="0.8228%" height="15" fill="rgb(222,207,29)"/><text x="26.3528%" y="223.50"></text></g><g><title>check_mod_privacy (1,878,361 samples, 0.82%)</title><rect x="26.1056%" y="197" width="0.8200%" height="15" fill="rgb(206,96,30)"/><text x="26.3556%" y="207.50"></text></g><g><title>misc_checking_3 (7,805,317 samples, 3.41%)</title><rect x="23.5271%" y="229" width="3.4075%" height="15" fill="rgb(218,138,4)"/><text x="23.7771%" y="239.50">mis..</text></g><g><title>impl_trait_ref (251,322 samples, 0.11%)</title><rect x="27.1283%" y="133" width="0.1097%" height="15" fill="rgb(250,191,14)"/><text x="27.3783%" y="143.50"></text></g><g><title>adt_destructor (540,376 samples, 0.24%)</title><rect x="27.0221%" y="181" width="0.2359%" height="15" fill="rgb(239,60,40)"/><text x="27.2721%" y="191.50"></text></g><g><title>coherent_trait (537,286 samples, 0.23%)</title><rect x="27.0235%" y="165" width="0.2346%" height="15" fill="rgb(206,27,48)"/><text x="27.2735%" y="175.50"></text></g><g><title>specialization_graph_of (535,486 samples, 0.23%)</title><rect x="27.0242%" y="149" width="0.2338%" height="15" fill="rgb(225,35,8)"/><text x="27.2742%" y="159.50"></text></g><g><title>impl_parent (3,446,389 samples, 1.50%)</title><rect x="29.5675%" y="165" width="1.5046%" height="15" fill="rgb(250,213,24)"/><text x="29.8175%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,941,814 samples, 0.85%)</title><rect x="30.2243%" y="149" width="0.8477%" height="15" fill="rgb(247,123,22)"/><text x="30.4743%" y="159.50"></text></g><g><title>impl_trait_ref (7,291,409 samples, 3.18%)</title><rect x="31.0720%" y="165" width="3.1831%" height="15" fill="rgb(231,138,38)"/><text x="31.3220%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,745,589 samples, 2.51%)</title><rect x="31.7469%" y="149" width="2.5083%" height="15" fill="rgb(231,145,46)"/><text x="31.9969%" y="159.50">me..</text></g><g><title>coherent_trait (18,021,700 samples, 7.87%)</title><rect x="26.9995%" y="197" width="7.8676%" height="15" fill="rgb(251,118,11)"/><text x="27.2495%" y="207.50">coherent_tr..</text></g><g><title>specialization_graph_of (17,335,603 samples, 7.57%)</title><rect x="27.2990%" y="181" width="7.5681%" height="15" fill="rgb(217,147,25)"/><text x="27.5490%" y="191.50">specializa..</text></g><g><title>trait_impls_of (1,399,734 samples, 0.61%)</title><rect x="34.2560%" y="165" width="0.6111%" height="15" fill="rgb(247,81,37)"/><text x="34.5060%" y="175.50"></text></g><g><title>implementations_of_trait (461,801 samples, 0.20%)</title><rect x="34.6655%" y="149" width="0.2016%" height="15" fill="rgb(209,12,38)"/><text x="34.9155%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (306,601 samples, 0.13%)</title><rect x="34.7332%" y="133" width="0.1339%" height="15" fill="rgb(227,1,9)"/><text x="34.9832%" y="143.50"></text></g><g><title>coherence_checking (18,118,292 samples, 7.91%)</title><rect x="26.9894%" y="213" width="7.9097%" height="15" fill="rgb(248,47,43)"/><text x="27.2394%" y="223.50">coherence_c..</text></g><g><title>associated_item (535,628 samples, 0.23%)</title><rect x="52.4058%" y="149" width="0.2338%" height="15" fill="rgb(221,10,30)"/><text x="52.6558%" y="159.50"></text></g><g><title>associated_items (723,430 samples, 0.32%)</title><rect x="52.3386%" y="165" width="0.3158%" height="15" fill="rgb(210,229,1)"/><text x="52.5886%" y="175.50"></text></g><g><title>adt_dtorck_constraint (272,413 samples, 0.12%)</title><rect x="52.9395%" y="149" width="0.1189%" height="15" fill="rgb(222,148,37)"/><text x="53.1895%" y="159.50"></text></g><g><title>dropck_outlives (845,102 samples, 0.37%)</title><rect x="52.7091%" y="165" width="0.3689%" height="15" fill="rgb(234,67,33)"/><text x="52.9591%" y="175.50"></text></g><g><title>predicates_of (261,961 samples, 0.11%)</title><rect x="54.1182%" y="149" width="0.1144%" height="15" fill="rgb(247,98,35)"/><text x="54.3682%" y="159.50"></text></g><g><title>specializes (369,564 samples, 0.16%)</title><rect x="54.2326%" y="149" width="0.1613%" height="15" fill="rgb(247,138,52)"/><text x="54.4826%" y="159.50"></text></g><g><title>param_env (230,513 samples, 0.10%)</title><rect x="54.2933%" y="133" width="0.1006%" height="15" fill="rgb(213,79,30)"/><text x="54.5433%" y="143.50"></text></g><g><title>trait_impls_of (397,774 samples, 0.17%)</title><rect x="54.3975%" y="149" width="0.1737%" height="15" fill="rgb(246,177,23)"/><text x="54.6475%" y="159.50"></text></g><g><title>evaluate_obligation (3,432,426 samples, 1.50%)</title><rect x="53.0781%" y="165" width="1.4985%" height="15" fill="rgb(230,62,27)"/><text x="53.3281%" y="175.50"></text></g><g><title>item_attrs (251,553 samples, 0.11%)</title><rect x="54.8140%" y="165" width="0.1098%" height="15" fill="rgb(216,154,8)"/><text x="55.0640%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (239,283 samples, 0.10%)</title><rect x="54.8194%" y="149" width="0.1045%" height="15" fill="rgb(244,35,45)"/><text x="55.0694%" y="159.50"></text></g><g><title>method_autoderef_steps (1,528,183 samples, 0.67%)</title><rect x="54.9785%" y="165" width="0.6671%" height="15" fill="rgb(251,115,12)"/><text x="55.2285%" y="175.50"></text></g><g><title>evaluate_obligation (625,185 samples, 0.27%)</title><rect x="55.3727%" y="149" width="0.2729%" height="15" fill="rgb(240,54,50)"/><text x="55.6227%" y="159.50"></text></g><g><title>predicates_of (549,664 samples, 0.24%)</title><rect x="55.7248%" y="165" width="0.2400%" height="15" fill="rgb(233,84,52)"/><text x="55.9748%" y="175.50"></text></g><g><title>predicates_defined_on (379,253 samples, 0.17%)</title><rect x="55.7992%" y="149" width="0.1656%" height="15" fill="rgb(207,117,47)"/><text x="56.0492%" y="159.50"></text></g><g><title>evaluate_obligation (737,806 samples, 0.32%)</title><rect x="59.0451%" y="149" width="0.3221%" height="15" fill="rgb(249,43,39)"/><text x="59.2951%" y="159.50"></text></g><g><title>typeck (8,369,053 samples, 3.65%)</title><rect x="56.0532%" y="165" width="3.6536%" height="15" fill="rgb(209,38,44)"/><text x="56.3032%" y="175.50">type..</text></g><g><title>item_bodies_checking (56,869,751 samples, 24.83%)</title><rect x="34.9240%" y="213" width="24.8271%" height="15" fill="rgb(236,212,23)"/><text x="35.1740%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (56,867,271 samples, 24.83%)</title><rect x="34.9251%" y="197" width="24.8261%" height="15" fill="rgb(242,79,21)"/><text x="35.1751%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (56,689,360 samples, 24.75%)</title><rect x="35.0027%" y="181" width="24.7484%" height="15" fill="rgb(211,96,35)"/><text x="35.2527%" y="191.50">typeck</text></g><g><title>mir_borrowck (1,348,725 samples, 0.59%)</title><rect x="60.8435%" y="149" width="0.5888%" height="15" fill="rgb(253,215,40)"/><text x="61.0935%" y="159.50"></text></g><g><title>adt_dtorck_constraint (294,834 samples, 0.13%)</title><rect x="62.4569%" y="37" width="0.1287%" height="15" fill="rgb(211,81,21)"/><text x="62.7069%" y="47.50"></text></g><g><title>adt_dtorck_constraint (629,269 samples, 0.27%)</title><rect x="62.3344%" y="53" width="0.2747%" height="15" fill="rgb(208,190,38)"/><text x="62.5844%" y="63.50"></text></g><g><title>dropck_outlives (801,660 samples, 0.35%)</title><rect x="62.3000%" y="69" width="0.3500%" height="15" fill="rgb(235,213,38)"/><text x="62.5500%" y="79.50"></text></g><g><title>evaluate_obligation (389,644 samples, 0.17%)</title><rect x="62.6502%" y="69" width="0.1701%" height="15" fill="rgb(237,122,38)"/><text x="62.9002%" y="79.50"></text></g><g><title>mir_built (3,810,763 samples, 1.66%)</title><rect x="61.4635%" y="101" width="1.6636%" height="15" fill="rgb(244,218,35)"/><text x="61.7135%" y="111.50"></text></g><g><title>typeck (3,694,442 samples, 1.61%)</title><rect x="61.5143%" y="85" width="1.6129%" height="15" fill="rgb(240,68,47)"/><text x="61.7643%" y="95.50"></text></g><g><title>mir_built (292,653 samples, 0.13%)</title><rect x="63.1531%" y="85" width="0.1278%" height="15" fill="rgb(210,16,53)"/><text x="63.4031%" y="95.50"></text></g><g><title>mir_const (4,221,108 samples, 1.84%)</title><rect x="61.4382%" y="133" width="1.8428%" height="15" fill="rgb(235,124,12)"/><text x="61.6882%" y="143.50">m..</text></g><g><title>unsafety_check_result (4,171,647 samples, 1.82%)</title><rect x="61.4598%" y="117" width="1.8212%" height="15" fill="rgb(224,169,11)"/><text x="61.7098%" y="127.50">u..</text></g><g><title>unsafety_check_result (352,444 samples, 0.15%)</title><rect x="63.1271%" y="101" width="0.1539%" height="15" fill="rgb(250,166,2)"/><text x="63.3771%" y="111.50"></text></g><g><title>mir_promoted (4,235,788 samples, 1.85%)</title><rect x="61.4323%" y="149" width="1.8492%" height="15" fill="rgb(242,216,29)"/><text x="61.6823%" y="159.50">m..</text></g><g><title>type_of (5,912,366 samples, 2.58%)</title><rect x="60.7287%" y="181" width="2.5811%" height="15" fill="rgb(230,116,27)"/><text x="60.9787%" y="191.50">ty..</text></g><g><title>mir_borrowck (5,859,616 samples, 2.56%)</title><rect x="60.7517%" y="165" width="2.5581%" height="15" fill="rgb(228,99,48)"/><text x="61.0017%" y="175.50">mi..</text></g><g><title>evaluate_obligation (679,639 samples, 0.30%)</title><rect x="63.4152%" y="165" width="0.2967%" height="15" fill="rgb(253,11,6)"/><text x="63.6652%" y="175.50"></text></g><g><title>item_types_checking (9,145,242 samples, 3.99%)</title><rect x="59.7511%" y="213" width="3.9925%" height="15" fill="rgb(247,143,39)"/><text x="60.0011%" y="223.50">item..</text></g><g><title>check_mod_item_types (9,135,152 samples, 3.99%)</title><rect x="59.7555%" y="197" width="3.9881%" height="15" fill="rgb(236,97,10)"/><text x="60.0055%" y="207.50">chec..</text></g><g><title>typeck (993,661 samples, 0.43%)</title><rect x="63.3098%" y="181" width="0.4338%" height="15" fill="rgb(233,208,19)"/><text x="63.5598%" y="191.50"></text></g><g><title>mir_borrowck (352,635 samples, 0.15%)</title><rect x="64.2004%" y="101" width="0.1539%" height="15" fill="rgb(216,164,2)"/><text x="64.4504%" y="111.50"></text></g><g><title>mir_for_ctfe (496,866 samples, 0.22%)</title><rect x="64.1380%" y="133" width="0.2169%" height="15" fill="rgb(220,129,5)"/><text x="64.3880%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (455,646 samples, 0.20%)</title><rect x="64.1560%" y="117" width="0.1989%" height="15" fill="rgb(242,17,10)"/><text x="64.4060%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,102,511 samples, 0.48%)</title><rect x="63.9808%" y="181" width="0.4813%" height="15" fill="rgb(242,107,0)"/><text x="64.2308%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,090,871 samples, 0.48%)</title><rect x="63.9859%" y="165" width="0.4762%" height="15" fill="rgb(251,28,31)"/><text x="64.2359%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,083,391 samples, 0.47%)</title><rect x="63.9892%" y="149" width="0.4730%" height="15" fill="rgb(233,223,10)"/><text x="64.2392%" y="159.50"></text></g><g><title>typeck (244,552 samples, 0.11%)</title><rect x="64.3554%" y="133" width="0.1068%" height="15" fill="rgb(215,21,27)"/><text x="64.6054%" y="143.50"></text></g><g><title>late_bound_vars_map (261,772 samples, 0.11%)</title><rect x="64.6219%" y="165" width="0.1143%" height="15" fill="rgb(232,23,21)"/><text x="64.8719%" y="175.50"></text></g><g><title>resolve_lifetimes (234,672 samples, 0.10%)</title><rect x="64.6338%" y="149" width="0.1024%" height="15" fill="rgb(244,5,23)"/><text x="64.8838%" y="159.50"></text></g><g><title>fn_sig (669,374 samples, 0.29%)</title><rect x="64.4621%" y="181" width="0.2922%" height="15" fill="rgb(226,81,46)"/><text x="64.7121%" y="191.50"></text></g><g><title>generics_of (479,274 samples, 0.21%)</title><rect x="64.7544%" y="181" width="0.2092%" height="15" fill="rgb(247,70,30)"/><text x="65.0044%" y="191.50"></text></g><g><title>late_bound_vars_map (279,601 samples, 0.12%)</title><rect x="65.2932%" y="133" width="0.1221%" height="15" fill="rgb(212,68,19)"/><text x="65.5432%" y="143.50"></text></g><g><title>resolve_lifetimes (264,981 samples, 0.12%)</title><rect x="65.2996%" y="117" width="0.1157%" height="15" fill="rgb(240,187,13)"/><text x="65.5496%" y="127.50"></text></g><g><title>explicit_predicates_of (658,330 samples, 0.29%)</title><rect x="65.1515%" y="149" width="0.2874%" height="15" fill="rgb(223,113,26)"/><text x="65.4015%" y="159.50"></text></g><g><title>predicates_of (1,515,629 samples, 0.66%)</title><rect x="65.0401%" y="181" width="0.6617%" height="15" fill="rgb(206,192,2)"/><text x="65.2901%" y="191.50"></text></g><g><title>predicates_defined_on (1,425,339 samples, 0.62%)</title><rect x="65.0796%" y="165" width="0.6222%" height="15" fill="rgb(241,108,4)"/><text x="65.3296%" y="175.50"></text></g><g><title>inferred_outlives_of (602,148 samples, 0.26%)</title><rect x="65.4389%" y="149" width="0.2629%" height="15" fill="rgb(247,173,49)"/><text x="65.6889%" y="159.50"></text></g><g><title>inferred_outlives_crate (563,497 samples, 0.25%)</title><rect x="65.4558%" y="133" width="0.2460%" height="15" fill="rgb(224,114,35)"/><text x="65.7058%" y="143.50"></text></g><g><title>type_of (367,764 samples, 0.16%)</title><rect x="65.5413%" y="117" width="0.1606%" height="15" fill="rgb(245,159,27)"/><text x="65.7913%" y="127.50"></text></g><g><title>type_collecting (4,625,691 samples, 2.02%)</title><rect x="63.7459%" y="213" width="2.0194%" height="15" fill="rgb(245,172,44)"/><text x="63.9959%" y="223.50">t..</text></g><g><title>collect_mod_item_types (4,610,881 samples, 2.01%)</title><rect x="63.7524%" y="197" width="2.0129%" height="15" fill="rgb(236,23,11)"/><text x="64.0024%" y="207.50">c..</text></g><g><title>evaluate_obligation (1,536,045 samples, 0.67%)</title><rect x="68.0229%" y="181" width="0.6706%" height="15" fill="rgb(205,117,38)"/><text x="68.2729%" y="191.50"></text></g><g><title>implied_outlives_bounds (556,617 samples, 0.24%)</title><rect x="68.7031%" y="181" width="0.2430%" height="15" fill="rgb(237,72,25)"/><text x="68.9531%" y="191.50"></text></g><g><title>param_env (638,615 samples, 0.28%)</title><rect x="68.9490%" y="181" width="0.2788%" height="15" fill="rgb(244,70,9)"/><text x="69.1990%" y="191.50"></text></g><g><title>region_scope_tree (896,900 samples, 0.39%)</title><rect x="69.2610%" y="181" width="0.3916%" height="15" fill="rgb(217,125,39)"/><text x="69.5110%" y="191.50"></text></g><g><title>check_impl_item_well_formed (8,635,287 samples, 3.77%)</title><rect x="65.9420%" y="197" width="3.7698%" height="15" fill="rgb(235,36,10)"/><text x="66.1920%" y="207.50">chec..</text></g><g><title>evaluate_obligation (491,888 samples, 0.21%)</title><rect x="70.6406%" y="181" width="0.2147%" height="15" fill="rgb(251,123,47)"/><text x="70.8906%" y="191.50"></text></g><g><title>object_safety_violations (264,473 samples, 0.12%)</title><rect x="70.9132%" y="181" width="0.1155%" height="15" fill="rgb(221,13,13)"/><text x="71.1632%" y="191.50"></text></g><g><title>param_env (427,995 samples, 0.19%)</title><rect x="71.0287%" y="181" width="0.1868%" height="15" fill="rgb(238,131,9)"/><text x="71.2787%" y="191.50"></text></g><g><title>analysis (162,692,318 samples, 71.03%)</title><rect x="0.3346%" y="245" width="71.0252%" height="15" fill="rgb(211,50,8)"/><text x="0.5846%" y="255.50">analysis</text></g><g><title>type_check_crate (101,761,681 samples, 44.43%)</title><rect x="26.9346%" y="229" width="44.4252%" height="15" fill="rgb(245,182,24)"/><text x="27.1846%" y="239.50">type_check_crate</text></g><g><title>wf_checking (12,803,382 samples, 5.59%)</title><rect x="65.7704%" y="213" width="5.5895%" height="15" fill="rgb(242,14,37)"/><text x="66.0204%" y="223.50">wf_chec..</text></g><g><title>check_item_well_formed (3,774,883 samples, 1.65%)</title><rect x="69.7118%" y="197" width="1.6480%" height="15" fill="rgb(246,228,12)"/><text x="69.9618%" y="207.50"></text></g><g><title>codegen_crate (433,855 samples, 0.19%)</title><rect x="71.3643%" y="245" width="0.1894%" height="15" fill="rgb(213,55,15)"/><text x="71.6143%" y="255.50"></text></g><g><title>metadata_load_macro (265,014 samples, 0.12%)</title><rect x="86.6475%" y="197" width="0.1157%" height="15" fill="rgb(209,9,3)"/><text x="86.8975%" y="207.50"></text></g><g><title>metadata_register_crate (8,122,739 samples, 3.55%)</title><rect x="86.7632%" y="197" width="3.5461%" height="15" fill="rgb(230,59,30)"/><text x="87.0132%" y="207.50">meta..</text></g><g><title>metadata_register_crate (5,779,583 samples, 2.52%)</title><rect x="87.7862%" y="181" width="2.5231%" height="15" fill="rgb(209,121,21)"/><text x="88.0362%" y="191.50">me..</text></g><g><title>metadata_register_crate (254,622 samples, 0.11%)</title><rect x="90.1982%" y="165" width="0.1112%" height="15" fill="rgb(220,109,13)"/><text x="90.4482%" y="175.50"></text></g><g><title>macro_expand_crate (43,459,253 samples, 18.97%)</title><rect x="71.8150%" y="229" width="18.9726%" height="15" fill="rgb(232,18,1)"/><text x="72.0650%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (43,447,382 samples, 18.97%)</title><rect x="71.8202%" y="213" width="18.9675%" height="15" fill="rgb(215,41,42)"/><text x="72.0702%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,095,621 samples, 0.48%)</title><rect x="90.3093%" y="197" width="0.4783%" height="15" fill="rgb(224,123,36)"/><text x="90.5593%" y="207.50"></text></g><g><title>late_resolve_crate (2,886,583 samples, 1.26%)</title><rect x="90.9854%" y="213" width="1.2602%" height="15" fill="rgb(240,125,3)"/><text x="91.2354%" y="223.50"></text></g><g><title>configure_and_expand (47,603,399 samples, 20.78%)</title><rect x="71.5537%" y="245" width="20.7818%" height="15" fill="rgb(205,98,50)"/><text x="71.8037%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (3,382,608 samples, 1.48%)</title><rect x="90.8588%" y="229" width="1.4767%" height="15" fill="rgb(205,185,37)"/><text x="91.1088%" y="239.50"></text></g><g><title>drop_ast (367,394 samples, 0.16%)</title><rect x="92.3355%" y="245" width="0.1604%" height="15" fill="rgb(238,207,15)"/><text x="92.5855%" y="255.50"></text></g><g><title>early_lint_checks (689,448 samples, 0.30%)</title><rect x="92.5044%" y="245" width="0.3010%" height="15" fill="rgb(213,199,42)"/><text x="92.7544%" y="255.50"></text></g><g><title>free_global_ctxt (4,783,073 samples, 2.09%)</title><rect x="92.8054%" y="245" width="2.0881%" height="15" fill="rgb(235,201,11)"/><text x="93.0554%" y="255.50">f..</text></g><g><title>mir_drops_elaborated_and_const_checked (612,027 samples, 0.27%)</title><rect x="95.9572%" y="213" width="0.2672%" height="15" fill="rgb(207,46,11)"/><text x="96.2072%" y="223.50"></text></g><g><title>optimized_mir (1,130,953 samples, 0.49%)</title><rect x="95.7318%" y="229" width="0.4937%" height="15" fill="rgb(241,35,35)"/><text x="95.9818%" y="239.50"></text></g><g><title>generate_crate_metadata (3,123,124 samples, 1.36%)</title><rect x="94.8935%" y="245" width="1.3634%" height="15" fill="rgb(243,32,47)"/><text x="95.1435%" y="255.50"></text></g><g><title>hir_lowering (5,412,680 samples, 2.36%)</title><rect x="96.2570%" y="245" width="2.3630%" height="15" fill="rgb(247,202,23)"/><text x="96.5070%" y="255.50">hi..</text></g><g><title>parse_crate (1,248,324 samples, 0.54%)</title><rect x="98.6425%" y="245" width="0.5450%" height="15" fill="rgb(219,102,11)"/><text x="98.8925%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,137,683 samples, 0.50%)</title><rect x="99.2846%" y="245" width="0.4967%" height="15" fill="rgb(243,110,44)"/><text x="99.5346%" y="255.50"></text></g><g><title>all (229,062,845 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (229,062,845 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (428,405 samples, 0.19%)</title><rect x="99.8130%" y="245" width="0.1870%" height="15" fill="rgb(226,22,26)"/><text x="100.0630%" y="255.50"></text></g></svg></svg>