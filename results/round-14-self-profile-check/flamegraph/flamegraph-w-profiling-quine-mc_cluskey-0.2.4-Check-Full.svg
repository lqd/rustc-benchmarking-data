<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (177,121 samples, 0.13%)</title><rect x="11.4113%" y="149" width="0.1251%" height="15" fill="rgb(227,0,7)"/><text x="11.6613%" y="159.50"></text></g><g><title>param_env (417,847 samples, 0.30%)</title><rect x="12.9433%" y="117" width="0.2951%" height="15" fill="rgb(217,0,24)"/><text x="13.1933%" y="127.50"></text></g><g><title>item_attrs (725,558 samples, 0.51%)</title><rect x="13.7280%" y="85" width="0.5125%" height="15" fill="rgb(221,193,54)"/><text x="13.9780%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (714,548 samples, 0.50%)</title><rect x="13.7357%" y="69" width="0.5047%" height="15" fill="rgb(248,212,6)"/><text x="13.9857%" y="79.50"></text></g><g><title>codegen_fn_attrs (862,878 samples, 0.61%)</title><rect x="13.6444%" y="101" width="0.6095%" height="15" fill="rgb(208,68,35)"/><text x="13.8944%" y="111.50"></text></g><g><title>is_copy_raw (147,590 samples, 0.10%)</title><rect x="17.1293%" y="53" width="0.1042%" height="15" fill="rgb(232,128,0)"/><text x="17.3793%" y="63.50"></text></g><g><title>adt_drop_tys (302,846 samples, 0.21%)</title><rect x="17.1013%" y="69" width="0.2139%" height="15" fill="rgb(207,160,47)"/><text x="17.3513%" y="79.50"></text></g><g><title>needs_drop_raw (1,229,257 samples, 0.87%)</title><rect x="16.9998%" y="85" width="0.8682%" height="15" fill="rgb(228,23,34)"/><text x="17.2498%" y="95.50"></text></g><g><title>is_copy_raw (782,638 samples, 0.55%)</title><rect x="17.3152%" y="69" width="0.5528%" height="15" fill="rgb(218,30,26)"/><text x="17.5652%" y="79.50"></text></g><g><title>evaluate_obligation (640,176 samples, 0.45%)</title><rect x="17.4158%" y="53" width="0.4522%" height="15" fill="rgb(220,122,19)"/><text x="17.6658%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (249,204 samples, 0.18%)</title><rect x="18.0022%" y="69" width="0.1760%" height="15" fill="rgb(250,228,42)"/><text x="18.2522%" y="79.50"></text></g><g><title>impl_parent (214,531 samples, 0.15%)</title><rect x="18.6145%" y="53" width="0.1515%" height="15" fill="rgb(240,193,28)"/><text x="18.8645%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (146,130 samples, 0.10%)</title><rect x="18.6628%" y="37" width="0.1032%" height="15" fill="rgb(216,20,37)"/><text x="18.9128%" y="47.50"></text></g><g><title>specialization_graph_of (1,186,321 samples, 0.84%)</title><rect x="18.2317%" y="69" width="0.8379%" height="15" fill="rgb(206,188,39)"/><text x="18.4817%" y="79.50"></text></g><g><title>impl_trait_ref (429,924 samples, 0.30%)</title><rect x="18.7660%" y="53" width="0.3037%" height="15" fill="rgb(217,207,13)"/><text x="19.0160%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (366,864 samples, 0.26%)</title><rect x="18.8105%" y="37" width="0.2591%" height="15" fill="rgb(231,73,38)"/><text x="19.0605%" y="47.50"></text></g><g><title>resolve_instance (1,754,961 samples, 1.24%)</title><rect x="17.8864%" y="85" width="1.2395%" height="15" fill="rgb(225,20,46)"/><text x="18.1364%" y="95.50"></text></g><g><title>thir_body (1,326,575 samples, 0.94%)</title><rect x="19.1557%" y="85" width="0.9370%" height="15" fill="rgb(210,31,41)"/><text x="19.4057%" y="95.50"></text></g><g><title>mir_const (11,132,995 samples, 7.86%)</title><rect x="12.2453%" y="133" width="7.8633%" height="15" fill="rgb(221,200,47)"/><text x="12.4953%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (9,726,920 samples, 6.87%)</title><rect x="13.2384%" y="117" width="6.8701%" height="15" fill="rgb(226,26,5)"/><text x="13.4884%" y="127.50">unsafety_..</text></g><g><title>mir_built (8,289,205 samples, 5.85%)</title><rect x="14.2539%" y="101" width="5.8547%" height="15" fill="rgb(249,33,26)"/><text x="14.5039%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (12,129,627 samples, 8.57%)</title><rect x="11.5635%" y="149" width="8.5672%" height="15" fill="rgb(235,183,28)"/><text x="11.8135%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (463,995 samples, 0.33%)</title><rect x="20.1335%" y="149" width="0.3277%" height="15" fill="rgb(221,5,38)"/><text x="20.3835%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,158,472 samples, 0.82%)</title><rect x="20.4612%" y="149" width="0.8182%" height="15" fill="rgb(247,18,42)"/><text x="20.7112%" y="159.50"></text></g><g><title>normalize_projection_ty (780,819 samples, 0.55%)</title><rect x="20.7280%" y="133" width="0.5515%" height="15" fill="rgb(241,131,45)"/><text x="20.9780%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,052,943 samples, 0.74%)</title><rect x="21.2795%" y="149" width="0.7437%" height="15" fill="rgb(249,31,29)"/><text x="21.5295%" y="159.50"></text></g><g><title>normalize_projection_ty (585,937 samples, 0.41%)</title><rect x="21.6093%" y="133" width="0.4138%" height="15" fill="rgb(225,111,53)"/><text x="21.8593%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,522,643 samples, 2.49%)</title><rect x="22.0360%" y="149" width="2.4880%" height="15" fill="rgb(238,160,17)"/><text x="22.2860%" y="159.50">ty..</text></g><g><title>evaluate_obligation (215,421 samples, 0.15%)</title><rect x="24.3719%" y="133" width="0.1522%" height="15" fill="rgb(214,148,48)"/><text x="24.6219%" y="143.50"></text></g><g><title>MIR_borrow_checking (33,869,849 samples, 23.92%)</title><rect x="0.6074%" y="181" width="23.9223%" height="15" fill="rgb(232,36,49)"/><text x="0.8574%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (33,780,868 samples, 23.86%)</title><rect x="0.6703%" y="165" width="23.8595%" height="15" fill="rgb(209,103,24)"/><text x="0.9203%" y="175.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (183,041 samples, 0.13%)</title><rect x="24.8677%" y="133" width="0.1293%" height="15" fill="rgb(229,88,8)"/><text x="25.1177%" y="143.50"></text></g><g><title>codegen_fn_attrs (321,472 samples, 0.23%)</title><rect x="24.7839%" y="149" width="0.2271%" height="15" fill="rgb(213,181,19)"/><text x="25.0339%" y="159.50"></text></g><g><title>check_mod_attrs (515,216 samples, 0.36%)</title><rect x="24.6472%" y="165" width="0.3639%" height="15" fill="rgb(254,191,54)"/><text x="24.8972%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (332,694 samples, 0.23%)</title><rect x="25.1231%" y="165" width="0.2350%" height="15" fill="rgb(241,83,37)"/><text x="25.3731%" y="175.50"></text></g><g><title>misc_checking_1 (1,061,772 samples, 0.75%)</title><rect x="24.6355%" y="181" width="0.7499%" height="15" fill="rgb(233,36,39)"/><text x="24.8855%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (557,036 samples, 0.39%)</title><rect x="25.3867%" y="165" width="0.3934%" height="15" fill="rgb(226,3,54)"/><text x="25.6367%" y="175.50"></text></g><g><title>check_mod_liveness (454,535 samples, 0.32%)</title><rect x="25.4591%" y="149" width="0.3210%" height="15" fill="rgb(245,192,40)"/><text x="25.7091%" y="159.50"></text></g><g><title>misc_checking_2 (1,436,206 samples, 1.01%)</title><rect x="25.3854%" y="181" width="1.0144%" height="15" fill="rgb(238,167,29)"/><text x="25.6354%" y="191.50"></text></g><g><title>match_checking (877,410 samples, 0.62%)</title><rect x="25.7801%" y="165" width="0.6197%" height="15" fill="rgb(232,182,51)"/><text x="26.0301%" y="175.50"></text></g><g><title>check_match (854,028 samples, 0.60%)</title><rect x="25.7966%" y="149" width="0.6032%" height="15" fill="rgb(231,60,39)"/><text x="26.0466%" y="159.50"></text></g><g><title>check_private_in_public (147,801 samples, 0.10%)</title><rect x="26.4075%" y="165" width="0.1044%" height="15" fill="rgb(208,69,12)"/><text x="26.6575%" y="175.50"></text></g><g><title>death_checking (411,685 samples, 0.29%)</title><rect x="26.5119%" y="165" width="0.2908%" height="15" fill="rgb(235,93,37)"/><text x="26.7619%" y="175.50"></text></g><g><title>item_attrs (150,772 samples, 0.11%)</title><rect x="26.6962%" y="149" width="0.1065%" height="15" fill="rgb(213,116,39)"/><text x="26.9462%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (149,192 samples, 0.11%)</title><rect x="26.6973%" y="133" width="0.1054%" height="15" fill="rgb(222,207,29)"/><text x="26.9473%" y="143.50"></text></g><g><title>crate_lints (1,973,972 samples, 1.39%)</title><rect x="26.8037%" y="149" width="1.3942%" height="15" fill="rgb(206,96,30)"/><text x="27.0537%" y="159.50"></text></g><g><title>type_of (1,083,542 samples, 0.77%)</title><rect x="27.4326%" y="133" width="0.7653%" height="15" fill="rgb(218,138,4)"/><text x="27.6826%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (850,129 samples, 0.60%)</title><rect x="27.5975%" y="117" width="0.6004%" height="15" fill="rgb(250,191,14)"/><text x="27.8475%" y="127.50"></text></g><g><title>lint_checking (2,557,809 samples, 1.81%)</title><rect x="26.8026%" y="165" width="1.8066%" height="15" fill="rgb(239,60,40)"/><text x="27.0526%" y="175.50">l..</text></g><g><title>module_lints (582,357 samples, 0.41%)</title><rect x="28.1979%" y="149" width="0.4113%" height="15" fill="rgb(206,27,48)"/><text x="28.4479%" y="159.50"></text></g><g><title>lint_mod (579,757 samples, 0.41%)</title><rect x="28.1997%" y="133" width="0.4095%" height="15" fill="rgb(225,35,8)"/><text x="28.4497%" y="143.50"></text></g><g><title>privacy_access_levels (222,713 samples, 0.16%)</title><rect x="28.6092%" y="165" width="0.1573%" height="15" fill="rgb(250,213,24)"/><text x="28.8592%" y="175.50"></text></g><g><title>privacy_checking_modules (871,760 samples, 0.62%)</title><rect x="28.7665%" y="165" width="0.6157%" height="15" fill="rgb(247,123,22)"/><text x="29.0165%" y="175.50"></text></g><g><title>check_mod_privacy (869,700 samples, 0.61%)</title><rect x="28.7680%" y="149" width="0.6143%" height="15" fill="rgb(231,138,38)"/><text x="29.0180%" y="159.50"></text></g><g><title>misc_checking_3 (4,239,108 samples, 2.99%)</title><rect x="26.3998%" y="181" width="2.9941%" height="15" fill="rgb(231,145,46)"/><text x="26.6498%" y="191.50">mis..</text></g><g><title>impl_parent (2,384,032 samples, 1.68%)</title><rect x="32.1657%" y="117" width="1.6838%" height="15" fill="rgb(251,118,11)"/><text x="32.4157%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,405,048 samples, 0.99%)</title><rect x="32.8572%" y="101" width="0.9924%" height="15" fill="rgb(217,147,25)"/><text x="33.1072%" y="111.50"></text></g><g><title>impl_trait_ref (5,378,837 samples, 3.80%)</title><rect x="33.8496%" y="117" width="3.7991%" height="15" fill="rgb(247,81,37)"/><text x="34.0996%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,164,485 samples, 2.94%)</title><rect x="34.7073%" y="101" width="2.9414%" height="15" fill="rgb(209,12,38)"/><text x="34.9573%" y="111.50">me..</text></g><g><title>coherent_trait (12,387,269 samples, 8.75%)</title><rect x="29.4445%" y="149" width="8.7491%" height="15" fill="rgb(227,1,9)"/><text x="29.6945%" y="159.50">coherent_tra..</text></g><g><title>specialization_graph_of (12,368,169 samples, 8.74%)</title><rect x="29.4579%" y="133" width="8.7357%" height="15" fill="rgb(248,47,43)"/><text x="29.7079%" y="143.50">specializati..</text></g><g><title>trait_impls_of (769,669 samples, 0.54%)</title><rect x="37.6500%" y="117" width="0.5436%" height="15" fill="rgb(221,10,30)"/><text x="37.9000%" y="127.50"></text></g><g><title>implementations_of_trait (213,710 samples, 0.15%)</title><rect x="38.0427%" y="101" width="0.1509%" height="15" fill="rgb(210,229,1)"/><text x="38.2927%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (168,970 samples, 0.12%)</title><rect x="38.0743%" y="85" width="0.1193%" height="15" fill="rgb(222,148,37)"/><text x="38.3243%" y="95.50"></text></g><g><title>coherence_checking (12,464,610 samples, 8.80%)</title><rect x="29.4264%" y="165" width="8.8038%" height="15" fill="rgb(234,67,33)"/><text x="29.6764%" y="175.50">coherence_ch..</text></g><g><title>adt_sized_constraint (208,492 samples, 0.15%)</title><rect x="52.7672%" y="117" width="0.1473%" height="15" fill="rgb(247,98,35)"/><text x="53.0172%" y="127.50"></text></g><g><title>associated_item (191,586 samples, 0.14%)</title><rect x="52.9719%" y="101" width="0.1353%" height="15" fill="rgb(247,138,52)"/><text x="53.2219%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (154,974 samples, 0.11%)</title><rect x="52.9978%" y="85" width="0.1095%" height="15" fill="rgb(213,79,30)"/><text x="53.2478%" y="95.50"></text></g><g><title>associated_items (286,717 samples, 0.20%)</title><rect x="52.9197%" y="117" width="0.2025%" height="15" fill="rgb(246,177,23)"/><text x="53.1697%" y="127.50"></text></g><g><title>dropck_outlives (398,963 samples, 0.28%)</title><rect x="53.1617%" y="117" width="0.2818%" height="15" fill="rgb(230,62,27)"/><text x="53.4117%" y="127.50"></text></g><g><title>adt_dtorck_constraint (238,683 samples, 0.17%)</title><rect x="53.2749%" y="101" width="0.1686%" height="15" fill="rgb(216,154,8)"/><text x="53.5249%" y="111.50"></text></g><g><title>predicates_of (152,112 samples, 0.11%)</title><rect x="54.1977%" y="101" width="0.1074%" height="15" fill="rgb(244,35,45)"/><text x="54.4477%" y="111.50"></text></g><g><title>trait_impls_of (190,061 samples, 0.13%)</title><rect x="54.3431%" y="101" width="0.1342%" height="15" fill="rgb(251,115,12)"/><text x="54.5931%" y="111.50"></text></g><g><title>evaluate_obligation (1,466,587 samples, 1.04%)</title><rect x="53.4435%" y="117" width="1.0359%" height="15" fill="rgb(240,54,50)"/><text x="53.6935%" y="127.50"></text></g><g><title>item_attrs (170,280 samples, 0.12%)</title><rect x="54.7555%" y="117" width="0.1203%" height="15" fill="rgb(233,84,52)"/><text x="55.0055%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (162,110 samples, 0.11%)</title><rect x="54.7613%" y="101" width="0.1145%" height="15" fill="rgb(207,117,47)"/><text x="55.0113%" y="111.50"></text></g><g><title>method_autoderef_steps (223,591 samples, 0.16%)</title><rect x="54.9171%" y="117" width="0.1579%" height="15" fill="rgb(249,43,39)"/><text x="55.1671%" y="127.50"></text></g><g><title>predicates_of (287,241 samples, 0.20%)</title><rect x="55.1981%" y="117" width="0.2029%" height="15" fill="rgb(209,38,44)"/><text x="55.4481%" y="127.50"></text></g><g><title>predicates_defined_on (207,180 samples, 0.15%)</title><rect x="55.2547%" y="101" width="0.1463%" height="15" fill="rgb(236,212,23)"/><text x="55.5047%" y="111.50"></text></g><g><title>specializes (174,602 samples, 0.12%)</title><rect x="55.4010%" y="117" width="0.1233%" height="15" fill="rgb(242,79,21)"/><text x="55.6510%" y="127.50"></text></g><g><title>associated_item (381,784 samples, 0.27%)</title><rect x="63.1242%" y="85" width="0.2697%" height="15" fill="rgb(211,96,35)"/><text x="63.3742%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (303,894 samples, 0.21%)</title><rect x="63.1792%" y="69" width="0.2146%" height="15" fill="rgb(253,215,40)"/><text x="63.4292%" y="79.50"></text></g><g><title>associated_items (540,447 samples, 0.38%)</title><rect x="63.0277%" y="101" width="0.3817%" height="15" fill="rgb(211,81,21)"/><text x="63.2777%" y="111.50"></text></g><g><title>dropck_outlives (239,091 samples, 0.17%)</title><rect x="63.4565%" y="101" width="0.1689%" height="15" fill="rgb(208,190,38)"/><text x="63.7065%" y="111.50"></text></g><g><title>generics_of (570,835 samples, 0.40%)</title><rect x="66.3241%" y="85" width="0.4032%" height="15" fill="rgb(235,213,38)"/><text x="66.5741%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (416,324 samples, 0.29%)</title><rect x="66.4332%" y="69" width="0.2941%" height="15" fill="rgb(237,122,38)"/><text x="66.6832%" y="79.50"></text></g><g><title>impl_trait_ref (833,950 samples, 0.59%)</title><rect x="66.8441%" y="85" width="0.5890%" height="15" fill="rgb(244,218,35)"/><text x="67.0941%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (693,469 samples, 0.49%)</title><rect x="66.9433%" y="69" width="0.4898%" height="15" fill="rgb(240,68,47)"/><text x="67.1933%" y="79.50"></text></g><g><title>opt_def_kind (147,321 samples, 0.10%)</title><rect x="67.6158%" y="69" width="0.1041%" height="15" fill="rgb(210,16,53)"/><text x="67.8658%" y="79.50"></text></g><g><title>explicit_predicates_of (164,031 samples, 0.12%)</title><rect x="67.8699%" y="53" width="0.1159%" height="15" fill="rgb(235,124,12)"/><text x="68.1199%" y="63.50"></text></g><g><title>predicates_of (853,619 samples, 0.60%)</title><rect x="67.4662%" y="85" width="0.6029%" height="15" fill="rgb(224,169,11)"/><text x="67.7162%" y="95.50"></text></g><g><title>predicates_defined_on (494,405 samples, 0.35%)</title><rect x="67.7199%" y="69" width="0.3492%" height="15" fill="rgb(250,166,2)"/><text x="67.9699%" y="79.50"></text></g><g><title>specializes (2,259,330 samples, 1.60%)</title><rect x="68.0691%" y="85" width="1.5958%" height="15" fill="rgb(242,216,29)"/><text x="68.3191%" y="95.50"></text></g><g><title>param_env (1,435,424 samples, 1.01%)</title><rect x="68.6510%" y="69" width="1.0138%" height="15" fill="rgb(230,116,27)"/><text x="68.9010%" y="79.50"></text></g><g><title>def_span (566,848 samples, 0.40%)</title><rect x="69.2645%" y="53" width="0.4004%" height="15" fill="rgb(228,99,48)"/><text x="69.5145%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (502,257 samples, 0.35%)</title><rect x="69.3101%" y="37" width="0.3547%" height="15" fill="rgb(253,11,6)"/><text x="69.5601%" y="47.50"></text></g><g><title>trait_impls_of (554,454 samples, 0.39%)</title><rect x="69.6744%" y="85" width="0.3916%" height="15" fill="rgb(247,143,39)"/><text x="69.9244%" y="95.50"></text></g><g><title>implementations_of_trait (189,933 samples, 0.13%)</title><rect x="69.9319%" y="69" width="0.1341%" height="15" fill="rgb(236,97,10)"/><text x="70.1819%" y="79.50"></text></g><g><title>evaluate_obligation (9,130,758 samples, 6.45%)</title><rect x="63.6253%" y="101" width="6.4491%" height="15" fill="rgb(233,208,19)"/><text x="63.8753%" y="111.50">evaluate..</text></g><g><title>generics_of (142,853 samples, 0.10%)</title><rect x="70.1457%" y="101" width="0.1009%" height="15" fill="rgb(216,164,2)"/><text x="70.3957%" y="111.50"></text></g><g><title>impl_item_implementor_ids (158,781 samples, 0.11%)</title><rect x="70.2471%" y="101" width="0.1121%" height="15" fill="rgb(220,129,5)"/><text x="70.4971%" y="111.50"></text></g><g><title>evaluate_obligation (269,445 samples, 0.19%)</title><rect x="70.8119%" y="85" width="0.1903%" height="15" fill="rgb(242,17,10)"/><text x="71.0619%" y="95.50"></text></g><g><title>method_autoderef_steps (579,340 samples, 0.41%)</title><rect x="70.6009%" y="101" width="0.4092%" height="15" fill="rgb(242,107,0)"/><text x="70.8509%" y="111.50"></text></g><g><title>predicates_of (244,824 samples, 0.17%)</title><rect x="71.0272%" y="101" width="0.1729%" height="15" fill="rgb(251,28,31)"/><text x="71.2772%" y="111.50"></text></g><g><title>predicates_defined_on (180,403 samples, 0.13%)</title><rect x="71.0727%" y="85" width="0.1274%" height="15" fill="rgb(233,223,10)"/><text x="71.3227%" y="95.50"></text></g><g><title>typeck (22,292,959 samples, 15.75%)</title><rect x="55.6088%" y="117" width="15.7456%" height="15" fill="rgb(215,21,27)"/><text x="55.8588%" y="127.50">typeck</text></g><g><title>item_bodies_checking (46,919,095 samples, 33.14%)</title><rect x="38.2470%" y="165" width="33.1390%" height="15" fill="rgb(232,23,21)"/><text x="38.4970%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (46,915,855 samples, 33.14%)</title><rect x="38.2493%" y="149" width="33.1367%" height="15" fill="rgb(244,5,23)"/><text x="38.4993%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (46,863,455 samples, 33.10%)</title><rect x="38.2863%" y="133" width="33.0997%" height="15" fill="rgb(226,81,46)"/><text x="38.5363%" y="143.50">typeck</text></g><g><title>impl_trait_ref (146,561 samples, 0.10%)</title><rect x="71.8677%" y="85" width="0.1035%" height="15" fill="rgb(247,70,30)"/><text x="72.1177%" y="95.50"></text></g><g><title>adt_destructor (329,304 samples, 0.23%)</title><rect x="71.7665%" y="133" width="0.2326%" height="15" fill="rgb(212,68,19)"/><text x="72.0165%" y="143.50"></text></g><g><title>coherent_trait (324,294 samples, 0.23%)</title><rect x="71.7700%" y="117" width="0.2290%" height="15" fill="rgb(240,187,13)"/><text x="72.0200%" y="127.50"></text></g><g><title>specialization_graph_of (322,774 samples, 0.23%)</title><rect x="71.7711%" y="101" width="0.2280%" height="15" fill="rgb(223,113,26)"/><text x="72.0211%" y="111.50"></text></g><g><title>item_types_checking (1,033,092 samples, 0.73%)</title><rect x="71.3861%" y="165" width="0.7297%" height="15" fill="rgb(206,192,2)"/><text x="71.6361%" y="175.50"></text></g><g><title>check_mod_item_types (1,030,932 samples, 0.73%)</title><rect x="71.3876%" y="149" width="0.7281%" height="15" fill="rgb(241,108,4)"/><text x="71.6376%" y="159.50"></text></g><g><title>fn_sig (365,562 samples, 0.26%)</title><rect x="72.2592%" y="133" width="0.2582%" height="15" fill="rgb(247,173,49)"/><text x="72.5092%" y="143.50"></text></g><g><title>named_region_map (316,657 samples, 0.22%)</title><rect x="72.5707%" y="117" width="0.2237%" height="15" fill="rgb(224,114,35)"/><text x="72.8207%" y="127.50"></text></g><g><title>resolve_lifetimes (303,767 samples, 0.21%)</title><rect x="72.5798%" y="101" width="0.2146%" height="15" fill="rgb(245,159,27)"/><text x="72.8298%" y="111.50"></text></g><g><title>generics_of (402,598 samples, 0.28%)</title><rect x="72.5174%" y="133" width="0.2844%" height="15" fill="rgb(245,172,44)"/><text x="72.7674%" y="143.50"></text></g><g><title>predicates_of (296,055 samples, 0.21%)</title><rect x="72.8372%" y="133" width="0.2091%" height="15" fill="rgb(236,23,11)"/><text x="73.0872%" y="143.50"></text></g><g><title>predicates_defined_on (264,193 samples, 0.19%)</title><rect x="72.8597%" y="117" width="0.1866%" height="15" fill="rgb(205,117,38)"/><text x="73.1097%" y="127.50"></text></g><g><title>inferred_outlives_of (141,672 samples, 0.10%)</title><rect x="72.9462%" y="101" width="0.1001%" height="15" fill="rgb(237,72,25)"/><text x="73.1962%" y="111.50"></text></g><g><title>type_collecting (1,389,916 samples, 0.98%)</title><rect x="72.1166%" y="165" width="0.9817%" height="15" fill="rgb(244,70,9)"/><text x="72.3666%" y="175.50"></text></g><g><title>collect_mod_item_types (1,383,076 samples, 0.98%)</title><rect x="72.1214%" y="149" width="0.9769%" height="15" fill="rgb(217,125,39)"/><text x="72.3714%" y="159.50"></text></g><g><title>evaluate_obligation (308,993 samples, 0.22%)</title><rect x="73.7691%" y="133" width="0.2182%" height="15" fill="rgb(235,36,10)"/><text x="74.0191%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,741,822 samples, 1.23%)</title><rect x="73.1873%" y="149" width="1.2303%" height="15" fill="rgb(251,123,47)"/><text x="73.4373%" y="159.50"></text></g><g><title>region_scope_tree (354,406 samples, 0.25%)</title><rect x="74.1672%" y="133" width="0.2503%" height="15" fill="rgb(221,13,13)"/><text x="74.4172%" y="143.50"></text></g><g><title>evaluate_obligation (354,353 samples, 0.25%)</title><rect x="74.8684%" y="133" width="0.2503%" height="15" fill="rgb(238,131,9)"/><text x="75.1184%" y="143.50"></text></g><g><title>param_env (208,331 samples, 0.15%)</title><rect x="75.1652%" y="133" width="0.1471%" height="15" fill="rgb(211,50,8)"/><text x="75.4152%" y="143.50"></text></g><g><title>analysis (106,281,829 samples, 75.07%)</title><rect x="0.4070%" y="197" width="75.0670%" height="15" fill="rgb(245,182,24)"/><text x="0.6570%" y="207.50">analysis</text></g><g><title>type_check_crate (65,241,430 samples, 46.08%)</title><rect x="29.3939%" y="181" width="46.0801%" height="15" fill="rgb(242,14,37)"/><text x="29.6439%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,359,887 samples, 2.37%)</title><rect x="73.1009%" y="165" width="2.3731%" height="15" fill="rgb(246,228,12)"/><text x="73.3509%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,495,843 samples, 1.06%)</title><rect x="74.4175%" y="149" width="1.0565%" height="15" fill="rgb(213,55,15)"/><text x="74.6675%" y="159.50"></text></g><g><title>codegen_crate (467,196 samples, 0.33%)</title><rect x="75.4821%" y="197" width="0.3300%" height="15" fill="rgb(209,9,3)"/><text x="75.7321%" y="207.50"></text></g><g><title>metadata_load_macro (456,884 samples, 0.32%)</title><rect x="85.2882%" y="149" width="0.3227%" height="15" fill="rgb(230,59,30)"/><text x="85.5382%" y="159.50"></text></g><g><title>macro_expand_crate (15,945,578 samples, 11.26%)</title><rect x="76.1298%" y="181" width="11.2624%" height="15" fill="rgb(209,121,21)"/><text x="76.3798%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (15,927,628 samples, 11.25%)</title><rect x="76.1425%" y="165" width="11.2497%" height="15" fill="rgb(220,109,13)"/><text x="76.3925%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,522,059 samples, 1.78%)</title><rect x="85.6109%" y="149" width="1.7813%" height="15" fill="rgb(232,18,1)"/><text x="85.8609%" y="159.50">m..</text></g><g><title>metadata_register_crate (924,880 samples, 0.65%)</title><rect x="86.7390%" y="133" width="0.6532%" height="15" fill="rgb(215,41,42)"/><text x="86.9890%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (363,174 samples, 0.26%)</title><rect x="87.3942%" y="181" width="0.2565%" height="15" fill="rgb(224,123,36)"/><text x="87.6442%" y="191.50"></text></g><g><title>late_resolve_crate (2,183,494 samples, 1.54%)</title><rect x="87.7134%" y="165" width="1.5422%" height="15" fill="rgb(240,125,3)"/><text x="87.9634%" y="175.50"></text></g><g><title>configure_and_expand (19,129,843 samples, 13.51%)</title><rect x="75.8121%" y="197" width="13.5114%" height="15" fill="rgb(205,98,50)"/><text x="76.0621%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,368,457 samples, 1.67%)</title><rect x="87.6507%" y="181" width="1.6728%" height="15" fill="rgb(205,185,37)"/><text x="87.9007%" y="191.50"></text></g><g><title>drop_ast (171,632 samples, 0.12%)</title><rect x="89.3235%" y="197" width="0.1212%" height="15" fill="rgb(238,207,15)"/><text x="89.5735%" y="207.50"></text></g><g><title>early_lint_checks (325,514 samples, 0.23%)</title><rect x="89.4554%" y="197" width="0.2299%" height="15" fill="rgb(213,199,42)"/><text x="89.7054%" y="207.50"></text></g><g><title>free_global_ctxt (3,807,953 samples, 2.69%)</title><rect x="89.6854%" y="197" width="2.6896%" height="15" fill="rgb(235,201,11)"/><text x="89.9354%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (812,589 samples, 0.57%)</title><rect x="92.3749%" y="197" width="0.5739%" height="15" fill="rgb(207,46,11)"/><text x="92.6249%" y="207.50"></text></g><g><title>hir_lowering (2,276,215 samples, 1.61%)</title><rect x="92.9489%" y="197" width="1.6077%" height="15" fill="rgb(241,35,35)"/><text x="93.1989%" y="207.50"></text></g><g><title>parse_crate (6,129,188 samples, 4.33%)</title><rect x="94.5991%" y="197" width="4.3291%" height="15" fill="rgb(243,32,47)"/><text x="94.8491%" y="207.50">parse..</text></g><g><title>prepare_outputs (203,573 samples, 0.14%)</title><rect x="98.9343%" y="197" width="0.1438%" height="15" fill="rgb(247,202,23)"/><text x="99.1843%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (896,450 samples, 0.63%)</title><rect x="99.0781%" y="197" width="0.6332%" height="15" fill="rgb(219,102,11)"/><text x="99.3281%" y="207.50"></text></g><g><title>all (141,582,593 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (141,582,593 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (313,843 samples, 0.22%)</title><rect x="99.7783%" y="197" width="0.2217%" height="15" fill="rgb(216,99,12)"/><text x="100.0283%" y="207.50"></text></g></svg></svg>