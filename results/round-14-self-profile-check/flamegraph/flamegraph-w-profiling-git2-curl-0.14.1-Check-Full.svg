<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (334,362 samples, 0.37%)</title><rect x="12.3066%" y="133" width="0.3653%" height="15" fill="rgb(227,0,7)"/><text x="12.5566%" y="143.50"></text></g><g><title>item_attrs (233,574 samples, 0.26%)</title><rect x="13.1034%" y="101" width="0.2552%" height="15" fill="rgb(217,0,24)"/><text x="13.3534%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (221,884 samples, 0.24%)</title><rect x="13.1161%" y="85" width="0.2424%" height="15" fill="rgb(221,193,54)"/><text x="13.3661%" y="95.50"></text></g><g><title>codegen_fn_attrs (346,515 samples, 0.38%)</title><rect x="13.0068%" y="117" width="0.3786%" height="15" fill="rgb(248,212,6)"/><text x="13.2568%" y="127.50"></text></g><g><title>adt_drop_tys (176,722 samples, 0.19%)</title><rect x="15.7147%" y="69" width="0.1931%" height="15" fill="rgb(208,68,35)"/><text x="15.9647%" y="79.50"></text></g><g><title>param_env (114,310 samples, 0.12%)</title><rect x="16.0024%" y="69" width="0.1249%" height="15" fill="rgb(232,128,0)"/><text x="16.2524%" y="79.50"></text></g><g><title>adt_drop_tys (457,193 samples, 0.50%)</title><rect x="15.6311%" y="85" width="0.4995%" height="15" fill="rgb(207,160,47)"/><text x="15.8811%" y="95.50"></text></g><g><title>is_copy_raw (661,290 samples, 0.72%)</title><rect x="16.1306%" y="85" width="0.7225%" height="15" fill="rgb(228,23,34)"/><text x="16.3806%" y="95.50"></text></g><g><title>evaluate_obligation (574,610 samples, 0.63%)</title><rect x="16.2253%" y="69" width="0.6278%" height="15" fill="rgb(218,30,26)"/><text x="16.4753%" y="79.50"></text></g><g><title>needs_drop_raw (1,222,655 samples, 1.34%)</title><rect x="15.5384%" y="101" width="1.3358%" height="15" fill="rgb(220,122,19)"/><text x="15.7884%" y="111.50"></text></g><g><title>impl_parent (904,776 samples, 0.99%)</title><rect x="18.3079%" y="69" width="0.9885%" height="15" fill="rgb(250,228,42)"/><text x="18.5579%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (610,154 samples, 0.67%)</title><rect x="18.6298%" y="53" width="0.6666%" height="15" fill="rgb(240,193,28)"/><text x="18.8798%" y="63.50"></text></g><g><title>specialization_graph_of (5,118,756 samples, 5.59%)</title><rect x="17.0670%" y="85" width="5.5926%" height="15" fill="rgb(216,20,37)"/><text x="17.3170%" y="95.50">special..</text></g><g><title>impl_trait_ref (3,078,237 samples, 3.36%)</title><rect x="19.2964%" y="69" width="3.3632%" height="15" fill="rgb(206,188,39)"/><text x="19.5464%" y="79.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,777,753 samples, 3.03%)</title><rect x="19.6247%" y="53" width="3.0349%" height="15" fill="rgb(217,207,13)"/><text x="19.8747%" y="63.50">met..</text></g><g><title>resolve_instance (5,330,099 samples, 5.82%)</title><rect x="16.8742%" y="101" width="5.8235%" height="15" fill="rgb(231,73,38)"/><text x="17.1242%" y="111.50">resolve..</text></g><g><title>thir_body (689,866 samples, 0.75%)</title><rect x="22.7187%" y="101" width="0.7537%" height="15" fill="rgb(225,20,46)"/><text x="22.9687%" y="111.50"></text></g><g><title>mir_const (10,756,838 samples, 11.75%)</title><rect x="11.7346%" y="149" width="11.7526%" height="15" fill="rgb(210,31,41)"/><text x="11.9846%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (9,898,909 samples, 10.82%)</title><rect x="12.6719%" y="133" width="10.8152%" height="15" fill="rgb(221,200,47)"/><text x="12.9219%" y="143.50">unsafety_check_r..</text></g><g><title>mir_built (9,245,882 samples, 10.10%)</title><rect x="13.3854%" y="117" width="10.1017%" height="15" fill="rgb(226,26,5)"/><text x="13.6354%" y="127.50">mir_built</text></g><g><title>has_structural_eq_impls (198,283 samples, 0.22%)</title><rect x="23.5983%" y="133" width="0.2166%" height="15" fill="rgb(249,33,26)"/><text x="23.8483%" y="143.50"></text></g><g><title>evaluate_obligation (186,662 samples, 0.20%)</title><rect x="23.6110%" y="117" width="0.2039%" height="15" fill="rgb(235,183,28)"/><text x="23.8610%" y="127.50"></text></g><g><title>trait_impls_of (167,891 samples, 0.18%)</title><rect x="23.6315%" y="101" width="0.1834%" height="15" fill="rgb(221,5,38)"/><text x="23.8815%" y="111.50"></text></g><g><title>is_freeze_raw (102,261 samples, 0.11%)</title><rect x="23.8164%" y="133" width="0.1117%" height="15" fill="rgb(247,18,42)"/><text x="24.0664%" y="143.50"></text></g><g><title>evaluate_obligation (100,581 samples, 0.11%)</title><rect x="23.8182%" y="117" width="0.1099%" height="15" fill="rgb(241,131,45)"/><text x="24.0682%" y="127.50"></text></g><g><title>mir_const_qualif (522,725 samples, 0.57%)</title><rect x="23.4871%" y="149" width="0.5711%" height="15" fill="rgb(249,31,29)"/><text x="23.7371%" y="159.50"></text></g><g><title>mir_promoted (11,810,460 samples, 12.90%)</title><rect x="11.1559%" y="165" width="12.9037%" height="15" fill="rgb(225,111,53)"/><text x="11.4059%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (291,783 samples, 0.32%)</title><rect x="24.0639%" y="165" width="0.3188%" height="15" fill="rgb(238,160,17)"/><text x="24.3139%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (308,677 samples, 0.34%)</title><rect x="24.3827%" y="165" width="0.3373%" height="15" fill="rgb(214,148,48)"/><text x="24.6327%" y="175.50"></text></g><g><title>normalize_projection_ty (183,272 samples, 0.20%)</title><rect x="24.5197%" y="149" width="0.2002%" height="15" fill="rgb(232,36,49)"/><text x="24.7697%" y="159.50"></text></g><g><title>type_op_normalize_predicate (105,912 samples, 0.12%)</title><rect x="24.7200%" y="165" width="0.1157%" height="15" fill="rgb(209,103,24)"/><text x="24.9700%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,469,383 samples, 1.61%)</title><rect x="24.8357%" y="165" width="1.6054%" height="15" fill="rgb(229,88,8)"/><text x="25.0857%" y="175.50"></text></g><g><title>evaluate_obligation (193,010 samples, 0.21%)</title><rect x="26.2302%" y="149" width="0.2109%" height="15" fill="rgb(213,181,19)"/><text x="26.4802%" y="159.50"></text></g><g><title>MIR_borrow_checking (23,247,659 samples, 25.40%)</title><rect x="1.0512%" y="197" width="25.3996%" height="15" fill="rgb(254,191,54)"/><text x="1.3012%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,212,768 samples, 25.36%)</title><rect x="1.0894%" y="181" width="25.3615%" height="15" fill="rgb(241,83,37)"/><text x="1.3394%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (128,032 samples, 0.14%)</title><rect x="26.4509%" y="197" width="0.1399%" height="15" fill="rgb(233,36,39)"/><text x="26.7009%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (92,071 samples, 0.10%)</title><rect x="26.4901%" y="181" width="0.1006%" height="15" fill="rgb(226,3,54)"/><text x="26.7401%" y="191.50"></text></g><g><title>hir_module_items (166,692 samples, 0.18%)</title><rect x="26.5907%" y="197" width="0.1821%" height="15" fill="rgb(245,192,40)"/><text x="26.8407%" y="207.50"></text></g><g><title>should_inherit_track_caller (130,861 samples, 0.14%)</title><rect x="27.0648%" y="149" width="0.1430%" height="15" fill="rgb(238,167,29)"/><text x="27.3148%" y="159.50"></text></g><g><title>codegen_fn_attrs (255,252 samples, 0.28%)</title><rect x="26.9419%" y="165" width="0.2789%" height="15" fill="rgb(232,182,51)"/><text x="27.1919%" y="175.50"></text></g><g><title>check_mod_attrs (393,324 samples, 0.43%)</title><rect x="26.7912%" y="181" width="0.4297%" height="15" fill="rgb(231,60,39)"/><text x="27.0412%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (242,362 samples, 0.26%)</title><rect x="27.3080%" y="181" width="0.2648%" height="15" fill="rgb(208,69,12)"/><text x="27.5580%" y="191.50"></text></g><g><title>misc_checking_1 (768,689 samples, 0.84%)</title><rect x="26.7734%" y="197" width="0.8398%" height="15" fill="rgb(235,93,37)"/><text x="27.0234%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (322,254 samples, 0.35%)</title><rect x="27.6152%" y="181" width="0.3521%" height="15" fill="rgb(213,116,39)"/><text x="27.8652%" y="191.50"></text></g><g><title>check_mod_liveness (267,953 samples, 0.29%)</title><rect x="27.6745%" y="165" width="0.2928%" height="15" fill="rgb(222,207,29)"/><text x="27.9245%" y="175.50"></text></g><g><title>misc_checking_2 (731,238 samples, 0.80%)</title><rect x="27.6132%" y="197" width="0.7989%" height="15" fill="rgb(206,96,30)"/><text x="27.8632%" y="207.50"></text></g><g><title>match_checking (407,194 samples, 0.44%)</title><rect x="27.9672%" y="181" width="0.4449%" height="15" fill="rgb(218,138,4)"/><text x="28.2172%" y="191.50"></text></g><g><title>check_match (397,204 samples, 0.43%)</title><rect x="27.9782%" y="165" width="0.4340%" height="15" fill="rgb(250,191,14)"/><text x="28.2282%" y="175.50"></text></g><g><title>check_private_in_public (93,091 samples, 0.10%)</title><rect x="28.4226%" y="181" width="0.1017%" height="15" fill="rgb(239,60,40)"/><text x="28.6726%" y="191.50"></text></g><g><title>death_checking (150,202 samples, 0.16%)</title><rect x="28.5243%" y="181" width="0.1641%" height="15" fill="rgb(206,27,48)"/><text x="28.7743%" y="191.50"></text></g><g><title>fn_abi_of_instance (98,102 samples, 0.11%)</title><rect x="29.0401%" y="117" width="0.1072%" height="15" fill="rgb(225,35,8)"/><text x="29.2901%" y="127.50"></text></g><g><title>eval_to_allocation_raw (357,904 samples, 0.39%)</title><rect x="28.9268%" y="149" width="0.3910%" height="15" fill="rgb(250,213,24)"/><text x="29.1768%" y="159.50"></text></g><g><title>eval_to_allocation_raw (355,974 samples, 0.39%)</title><rect x="28.9289%" y="133" width="0.3889%" height="15" fill="rgb(247,123,22)"/><text x="29.1789%" y="143.50"></text></g><g><title>param_env (137,772 samples, 0.15%)</title><rect x="29.3178%" y="149" width="0.1505%" height="15" fill="rgb(231,138,38)"/><text x="29.5678%" y="159.50"></text></g><g><title>crate_lints (771,329 samples, 0.84%)</title><rect x="28.6901%" y="165" width="0.8427%" height="15" fill="rgb(231,145,46)"/><text x="28.9401%" y="175.50"></text></g><g><title>lint_checking (1,032,732 samples, 1.13%)</title><rect x="28.6884%" y="181" width="1.1283%" height="15" fill="rgb(251,118,11)"/><text x="28.9384%" y="191.50"></text></g><g><title>module_lints (259,923 samples, 0.28%)</title><rect x="29.5328%" y="165" width="0.2840%" height="15" fill="rgb(217,147,25)"/><text x="29.7828%" y="175.50"></text></g><g><title>lint_mod (257,873 samples, 0.28%)</title><rect x="29.5350%" y="149" width="0.2817%" height="15" fill="rgb(247,81,37)"/><text x="29.7850%" y="159.50"></text></g><g><title>type_of (258,093 samples, 0.28%)</title><rect x="30.4892%" y="149" width="0.2820%" height="15" fill="rgb(209,12,38)"/><text x="30.7392%" y="159.50"></text></g><g><title>privacy_checking_modules (829,859 samples, 0.91%)</title><rect x="29.8966%" y="181" width="0.9067%" height="15" fill="rgb(227,1,9)"/><text x="30.1466%" y="191.50"></text></g><g><title>check_mod_privacy (828,109 samples, 0.90%)</title><rect x="29.8985%" y="165" width="0.9048%" height="15" fill="rgb(248,47,43)"/><text x="30.1485%" y="175.50"></text></g><g><title>misc_checking_3 (2,206,574 samples, 2.41%)</title><rect x="28.4121%" y="197" width="2.4108%" height="15" fill="rgb(221,10,30)"/><text x="28.6621%" y="207.50">mi..</text></g><g><title>impl_trait_ref (111,892 samples, 0.12%)</title><rect x="31.0227%" y="133" width="0.1222%" height="15" fill="rgb(210,229,1)"/><text x="31.2727%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (99,662 samples, 0.11%)</title><rect x="31.0361%" y="117" width="0.1089%" height="15" fill="rgb(222,148,37)"/><text x="31.2861%" y="127.50"></text></g><g><title>coherent_trait (338,063 samples, 0.37%)</title><rect x="30.8719%" y="165" width="0.3694%" height="15" fill="rgb(234,67,33)"/><text x="31.1219%" y="175.50"></text></g><g><title>specialization_graph_of (331,603 samples, 0.36%)</title><rect x="30.8790%" y="149" width="0.3623%" height="15" fill="rgb(247,98,35)"/><text x="31.1290%" y="159.50"></text></g><g><title>coherence_checking (376,725 samples, 0.41%)</title><rect x="30.8584%" y="181" width="0.4116%" height="15" fill="rgb(247,138,52)"/><text x="31.1084%" y="191.50"></text></g><g><title>associated_item (172,060 samples, 0.19%)</title><rect x="35.3398%" y="117" width="0.1880%" height="15" fill="rgb(213,79,30)"/><text x="35.5898%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (134,850 samples, 0.15%)</title><rect x="35.3804%" y="101" width="0.1473%" height="15" fill="rgb(246,177,23)"/><text x="35.6304%" y="111.50"></text></g><g><title>associated_items (262,234 samples, 0.29%)</title><rect x="35.2596%" y="133" width="0.2865%" height="15" fill="rgb(230,62,27)"/><text x="35.5096%" y="143.50"></text></g><g><title>dropck_outlives (182,932 samples, 0.20%)</title><rect x="35.5832%" y="133" width="0.1999%" height="15" fill="rgb(216,154,8)"/><text x="35.8332%" y="143.50"></text></g><g><title>evaluate_obligation (1,020,300 samples, 1.11%)</title><rect x="35.7831%" y="133" width="1.1147%" height="15" fill="rgb(244,35,45)"/><text x="36.0331%" y="143.50"></text></g><g><title>trait_impls_of (412,175 samples, 0.45%)</title><rect x="36.4475%" y="117" width="0.4503%" height="15" fill="rgb(251,115,12)"/><text x="36.6975%" y="127.50"></text></g><g><title>implementations_of_trait (152,182 samples, 0.17%)</title><rect x="36.7316%" y="101" width="0.1663%" height="15" fill="rgb(240,54,50)"/><text x="36.9816%" y="111.50"></text></g><g><title>method_autoderef_steps (170,142 samples, 0.19%)</title><rect x="37.1791%" y="133" width="0.1859%" height="15" fill="rgb(233,84,52)"/><text x="37.4291%" y="143.50"></text></g><g><title>predicates_of (172,431 samples, 0.19%)</title><rect x="37.3765%" y="133" width="0.1884%" height="15" fill="rgb(207,117,47)"/><text x="37.6265%" y="143.50"></text></g><g><title>predicates_defined_on (116,370 samples, 0.13%)</title><rect x="37.4377%" y="117" width="0.1271%" height="15" fill="rgb(249,43,39)"/><text x="37.6877%" y="127.50"></text></g><g><title>associated_item (710,077 samples, 0.78%)</title><rect x="52.7307%" y="101" width="0.7758%" height="15" fill="rgb(209,38,44)"/><text x="52.9807%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (358,184 samples, 0.39%)</title><rect x="53.1152%" y="85" width="0.3913%" height="15" fill="rgb(236,212,23)"/><text x="53.3652%" y="95.50"></text></g><g><title>associated_items (952,031 samples, 1.04%)</title><rect x="52.4989%" y="117" width="1.0402%" height="15" fill="rgb(242,79,21)"/><text x="52.7489%" y="127.50"></text></g><g><title>adt_def (118,740 samples, 0.13%)</title><rect x="53.8913%" y="85" width="0.1297%" height="15" fill="rgb(211,96,35)"/><text x="54.1413%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (116,740 samples, 0.13%)</title><rect x="53.8935%" y="69" width="0.1275%" height="15" fill="rgb(253,215,40)"/><text x="54.1435%" y="79.50"></text></g><g><title>adt_dtorck_constraint (188,044 samples, 0.21%)</title><rect x="54.2014%" y="69" width="0.2055%" height="15" fill="rgb(211,81,21)"/><text x="54.4514%" y="79.50"></text></g><g><title>adt_dtorck_constraint (400,616 samples, 0.44%)</title><rect x="54.0731%" y="85" width="0.4377%" height="15" fill="rgb(208,190,38)"/><text x="54.3231%" y="95.50"></text></g><g><title>adt_dtorck_constraint (757,859 samples, 0.83%)</title><rect x="53.8026%" y="101" width="0.8280%" height="15" fill="rgb(235,213,38)"/><text x="54.0526%" y="111.50"></text></g><g><title>dropck_outlives (965,410 samples, 1.05%)</title><rect x="53.5999%" y="117" width="1.0548%" height="15" fill="rgb(237,122,38)"/><text x="53.8499%" y="127.50"></text></g><g><title>adt_def (189,550 samples, 0.21%)</title><rect x="55.5608%" y="85" width="0.2071%" height="15" fill="rgb(244,218,35)"/><text x="55.8108%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (185,800 samples, 0.20%)</title><rect x="55.5649%" y="69" width="0.2030%" height="15" fill="rgb(240,68,47)"/><text x="55.8149%" y="79.50"></text></g><g><title>item_attrs (133,690 samples, 0.15%)</title><rect x="55.6218%" y="53" width="0.1461%" height="15" fill="rgb(210,16,53)"/><text x="55.8718%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (129,080 samples, 0.14%)</title><rect x="55.6268%" y="37" width="0.1410%" height="15" fill="rgb(235,124,12)"/><text x="55.8768%" y="47.50"></text></g><g><title>adt_sized_constraint (247,811 samples, 0.27%)</title><rect x="55.5297%" y="101" width="0.2707%" height="15" fill="rgb(224,169,11)"/><text x="55.7797%" y="111.50"></text></g><g><title>predicates_of (143,192 samples, 0.16%)</title><rect x="55.9551%" y="101" width="0.1564%" height="15" fill="rgb(250,166,2)"/><text x="56.2051%" y="111.50"></text></g><g><title>predicates_defined_on (96,770 samples, 0.11%)</title><rect x="56.0059%" y="85" width="0.1057%" height="15" fill="rgb(242,216,29)"/><text x="56.2559%" y="95.50"></text></g><g><title>specializes (109,551 samples, 0.12%)</title><rect x="56.1116%" y="101" width="0.1197%" height="15" fill="rgb(230,116,27)"/><text x="56.3616%" y="111.50"></text></g><g><title>trait_impls_of (776,569 samples, 0.85%)</title><rect x="56.2431%" y="101" width="0.8485%" height="15" fill="rgb(228,99,48)"/><text x="56.4931%" y="111.50"></text></g><g><title>implementations_of_trait (259,594 samples, 0.28%)</title><rect x="56.8079%" y="85" width="0.2836%" height="15" fill="rgb(253,11,6)"/><text x="57.0579%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (161,002 samples, 0.18%)</title><rect x="56.9156%" y="69" width="0.1759%" height="15" fill="rgb(247,143,39)"/><text x="57.1656%" y="79.50"></text></g><g><title>evaluate_obligation (2,235,235 samples, 2.44%)</title><rect x="54.6547%" y="117" width="2.4421%" height="15" fill="rgb(236,97,10)"/><text x="54.9047%" y="127.50">ev..</text></g><g><title>fn_sig (131,912 samples, 0.14%)</title><rect x="57.1184%" y="117" width="0.1441%" height="15" fill="rgb(233,208,19)"/><text x="57.3684%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (116,712 samples, 0.13%)</title><rect x="57.1350%" y="101" width="0.1275%" height="15" fill="rgb(216,164,2)"/><text x="57.3850%" y="111.50"></text></g><g><title>generics_of (106,673 samples, 0.12%)</title><rect x="57.2625%" y="117" width="0.1165%" height="15" fill="rgb(220,129,5)"/><text x="57.5125%" y="127.50"></text></g><g><title>is_copy_raw (426,055 samples, 0.47%)</title><rect x="57.5642%" y="117" width="0.4655%" height="15" fill="rgb(242,17,10)"/><text x="57.8142%" y="127.50"></text></g><g><title>evaluate_obligation (384,875 samples, 0.42%)</title><rect x="57.6092%" y="101" width="0.4205%" height="15" fill="rgb(242,107,0)"/><text x="57.8592%" y="111.50"></text></g><g><title>trait_impls_of (185,112 samples, 0.20%)</title><rect x="57.8274%" y="85" width="0.2022%" height="15" fill="rgb(251,28,31)"/><text x="58.0774%" y="95.50"></text></g><g><title>item_attrs (101,291 samples, 0.11%)</title><rect x="58.0297%" y="117" width="0.1107%" height="15" fill="rgb(233,223,10)"/><text x="58.2797%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,271 samples, 0.11%)</title><rect x="58.0352%" y="101" width="0.1052%" height="15" fill="rgb(215,21,27)"/><text x="58.2852%" y="111.50"></text></g><g><title>lint_levels (141,032 samples, 0.15%)</title><rect x="58.1403%" y="117" width="0.1541%" height="15" fill="rgb(232,23,21)"/><text x="58.3903%" y="127.50"></text></g><g><title>evaluate_obligation (176,743 samples, 0.19%)</title><rect x="58.4960%" y="101" width="0.1931%" height="15" fill="rgb(244,5,23)"/><text x="58.7460%" y="111.50"></text></g><g><title>method_autoderef_steps (328,035 samples, 0.36%)</title><rect x="58.3533%" y="117" width="0.3584%" height="15" fill="rgb(226,81,46)"/><text x="58.6033%" y="127.50"></text></g><g><title>explicit_predicates_of (119,191 samples, 0.13%)</title><rect x="58.9646%" y="85" width="0.1302%" height="15" fill="rgb(247,70,30)"/><text x="59.2146%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (92,571 samples, 0.10%)</title><rect x="58.9937%" y="69" width="0.1011%" height="15" fill="rgb(212,68,19)"/><text x="59.2437%" y="79.50"></text></g><g><title>predicates_of (376,016 samples, 0.41%)</title><rect x="58.7306%" y="117" width="0.4108%" height="15" fill="rgb(240,187,13)"/><text x="58.9806%" y="127.50"></text></g><g><title>predicates_defined_on (254,153 samples, 0.28%)</title><rect x="58.8638%" y="101" width="0.2777%" height="15" fill="rgb(223,113,26)"/><text x="59.1138%" y="111.50"></text></g><g><title>typeck (19,839,490 samples, 21.68%)</title><rect x="37.6325%" y="133" width="21.6760%" height="15" fill="rgb(206,192,2)"/><text x="37.8825%" y="143.50">typeck</text></g><g><title>item_bodies_checking (25,674,065 samples, 28.05%)</title><rect x="31.2836%" y="181" width="28.0506%" height="15" fill="rgb(241,108,4)"/><text x="31.5336%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,670,685 samples, 28.05%)</title><rect x="31.2872%" y="165" width="28.0469%" height="15" fill="rgb(247,173,49)"/><text x="31.5372%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (25,653,264 samples, 28.03%)</title><rect x="31.3063%" y="149" width="28.0279%" height="15" fill="rgb(224,114,35)"/><text x="31.5563%" y="159.50">typeck</text></g><g><title>impl_parent (125,502 samples, 0.14%)</title><rect x="59.6340%" y="101" width="0.1371%" height="15" fill="rgb(245,159,27)"/><text x="59.8840%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (93,191 samples, 0.10%)</title><rect x="59.6693%" y="85" width="0.1018%" height="15" fill="rgb(245,172,44)"/><text x="59.9193%" y="95.50"></text></g><g><title>impl_trait_ref (367,404 samples, 0.40%)</title><rect x="59.7711%" y="101" width="0.4014%" height="15" fill="rgb(236,23,11)"/><text x="60.0211%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (333,924 samples, 0.36%)</title><rect x="59.8077%" y="85" width="0.3648%" height="15" fill="rgb(205,117,38)"/><text x="60.0577%" y="95.50"></text></g><g><title>adt_destructor (677,098 samples, 0.74%)</title><rect x="59.4861%" y="149" width="0.7398%" height="15" fill="rgb(237,72,25)"/><text x="59.7361%" y="159.50"></text></g><g><title>coherent_trait (673,588 samples, 0.74%)</title><rect x="59.4899%" y="133" width="0.7359%" height="15" fill="rgb(244,70,9)"/><text x="59.7399%" y="143.50"></text></g><g><title>specialization_graph_of (671,908 samples, 0.73%)</title><rect x="59.4918%" y="117" width="0.7341%" height="15" fill="rgb(217,125,39)"/><text x="59.7418%" y="127.50"></text></g><g><title>item_types_checking (1,179,224 samples, 1.29%)</title><rect x="59.3342%" y="181" width="1.2884%" height="15" fill="rgb(235,36,10)"/><text x="59.5842%" y="191.50"></text></g><g><title>check_mod_item_types (1,177,574 samples, 1.29%)</title><rect x="59.3360%" y="165" width="1.2866%" height="15" fill="rgb(251,123,47)"/><text x="59.5860%" y="175.50"></text></g><g><title>typeck (279,343 samples, 0.31%)</title><rect x="60.3174%" y="149" width="0.3052%" height="15" fill="rgb(221,13,13)"/><text x="60.5674%" y="159.50"></text></g><g><title>fn_sig (296,834 samples, 0.32%)</title><rect x="60.7350%" y="149" width="0.3243%" height="15" fill="rgb(238,131,9)"/><text x="60.9850%" y="159.50"></text></g><g><title>named_region_map (112,260 samples, 0.12%)</title><rect x="61.1060%" y="133" width="0.1227%" height="15" fill="rgb(211,50,8)"/><text x="61.3560%" y="143.50"></text></g><g><title>resolve_lifetimes (107,350 samples, 0.12%)</title><rect x="61.1113%" y="117" width="0.1173%" height="15" fill="rgb(245,182,24)"/><text x="61.3613%" y="127.50"></text></g><g><title>generics_of (165,970 samples, 0.18%)</title><rect x="61.0593%" y="149" width="0.1813%" height="15" fill="rgb(242,14,37)"/><text x="61.3093%" y="159.50"></text></g><g><title>explicit_predicates_of (111,901 samples, 0.12%)</title><rect x="61.2934%" y="117" width="0.1223%" height="15" fill="rgb(246,228,12)"/><text x="61.5434%" y="127.50"></text></g><g><title>predicates_of (410,524 samples, 0.45%)</title><rect x="61.2540%" y="149" width="0.4485%" height="15" fill="rgb(213,55,15)"/><text x="61.5040%" y="159.50"></text></g><g><title>predicates_defined_on (396,524 samples, 0.43%)</title><rect x="61.2693%" y="133" width="0.4332%" height="15" fill="rgb(209,9,3)"/><text x="61.5193%" y="143.50"></text></g><g><title>inferred_outlives_of (262,533 samples, 0.29%)</title><rect x="61.4157%" y="117" width="0.2868%" height="15" fill="rgb(230,59,30)"/><text x="61.6657%" y="127.50"></text></g><g><title>inferred_outlives_crate (251,253 samples, 0.27%)</title><rect x="61.4280%" y="101" width="0.2745%" height="15" fill="rgb(209,121,21)"/><text x="61.6780%" y="111.50"></text></g><g><title>type_of (159,501 samples, 0.17%)</title><rect x="61.5282%" y="85" width="0.1743%" height="15" fill="rgb(220,109,13)"/><text x="61.7782%" y="95.50"></text></g><g><title>type_collecting (1,043,681 samples, 1.14%)</title><rect x="60.6255%" y="181" width="1.1403%" height="15" fill="rgb(232,18,1)"/><text x="60.8755%" y="191.50"></text></g><g><title>collect_mod_item_types (1,036,071 samples, 1.13%)</title><rect x="60.6338%" y="165" width="1.1320%" height="15" fill="rgb(215,41,42)"/><text x="60.8838%" y="175.50"></text></g><g><title>evaluate_obligation (197,693 samples, 0.22%)</title><rect x="62.2251%" y="149" width="0.2160%" height="15" fill="rgb(224,123,36)"/><text x="62.4751%" y="159.50"></text></g><g><title>evaluate_obligation (247,834 samples, 0.27%)</title><rect x="62.8856%" y="133" width="0.2708%" height="15" fill="rgb(240,125,3)"/><text x="63.1356%" y="143.50"></text></g><g><title>layout_of (130,270 samples, 0.14%)</title><rect x="63.2428%" y="133" width="0.1423%" height="15" fill="rgb(205,98,50)"/><text x="63.4928%" y="143.50"></text></g><g><title>param_env (123,211 samples, 0.13%)</title><rect x="63.3852%" y="133" width="0.1346%" height="15" fill="rgb(205,185,37)"/><text x="63.6352%" y="143.50"></text></g><g><title>predicates_of (97,461 samples, 0.11%)</title><rect x="63.5198%" y="133" width="0.1065%" height="15" fill="rgb(238,207,15)"/><text x="63.7698%" y="143.50"></text></g><g><title>object_safety_violations (960,200 samples, 1.05%)</title><rect x="62.5778%" y="149" width="1.0491%" height="15" fill="rgb(213,199,42)"/><text x="62.8278%" y="159.50"></text></g><g><title>region_scope_tree (134,492 samples, 0.15%)</title><rect x="63.7142%" y="149" width="0.1469%" height="15" fill="rgb(235,201,11)"/><text x="63.9642%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,981,841 samples, 2.17%)</title><rect x="61.8238%" y="165" width="2.1653%" height="15" fill="rgb(207,46,11)"/><text x="62.0738%" y="175.50">c..</text></g><g><title>trait_impls_of (117,112 samples, 0.13%)</title><rect x="63.8611%" y="149" width="0.1280%" height="15" fill="rgb(241,35,35)"/><text x="64.1111%" y="159.50"></text></g><g><title>adt_def (151,823 samples, 0.17%)</title><rect x="64.6560%" y="117" width="0.1659%" height="15" fill="rgb(243,32,47)"/><text x="64.9060%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (146,583 samples, 0.16%)</title><rect x="64.6618%" y="101" width="0.1602%" height="15" fill="rgb(247,202,23)"/><text x="64.9118%" y="111.50"></text></g><g><title>item_attrs (113,992 samples, 0.12%)</title><rect x="64.6974%" y="85" width="0.1245%" height="15" fill="rgb(219,102,11)"/><text x="64.9474%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,252 samples, 0.12%)</title><rect x="64.7004%" y="69" width="0.1216%" height="15" fill="rgb(243,110,44)"/><text x="64.9504%" y="79.50"></text></g><g><title>adt_def (197,792 samples, 0.22%)</title><rect x="64.9226%" y="85" width="0.2161%" height="15" fill="rgb(222,74,54)"/><text x="65.1726%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (197,562 samples, 0.22%)</title><rect x="64.9228%" y="69" width="0.2158%" height="15" fill="rgb(216,99,12)"/><text x="65.1728%" y="79.50"></text></g><g><title>item_attrs (193,652 samples, 0.21%)</title><rect x="64.9271%" y="53" width="0.2116%" height="15" fill="rgb(226,22,26)"/><text x="65.1771%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (193,362 samples, 0.21%)</title><rect x="64.9274%" y="37" width="0.2113%" height="15" fill="rgb(217,163,10)"/><text x="65.1774%" y="47.50"></text></g><g><title>adt_sized_constraint (203,972 samples, 0.22%)</title><rect x="64.9197%" y="101" width="0.2229%" height="15" fill="rgb(213,25,53)"/><text x="65.1697%" y="111.50"></text></g><g><title>adt_sized_constraint (309,684 samples, 0.34%)</title><rect x="64.8219%" y="117" width="0.3384%" height="15" fill="rgb(252,105,26)"/><text x="65.0719%" y="127.50"></text></g><g><title>adt_sized_constraint (493,487 samples, 0.54%)</title><rect x="64.6388%" y="133" width="0.5392%" height="15" fill="rgb(220,39,43)"/><text x="64.8888%" y="143.50"></text></g><g><title>trait_impls_of (95,961 samples, 0.10%)</title><rect x="65.2701%" y="133" width="0.1048%" height="15" fill="rgb(229,68,48)"/><text x="65.5201%" y="143.50"></text></g><g><title>evaluate_obligation (966,662 samples, 1.06%)</title><rect x="64.3327%" y="149" width="1.0561%" height="15" fill="rgb(252,8,32)"/><text x="64.5827%" y="159.50"></text></g><g><title>param_env (96,340 samples, 0.11%)</title><rect x="65.4859%" y="149" width="0.1053%" height="15" fill="rgb(223,20,43)"/><text x="65.7359%" y="159.50"></text></g><g><title>analysis (59,435,622 samples, 64.94%)</title><rect x="0.7326%" y="213" width="64.9374%" height="15" fill="rgb(229,81,49)"/><text x="0.9826%" y="223.50">analysis</text></g><g><title>type_check_crate (31,894,625 samples, 34.85%)</title><rect x="30.8230%" y="197" width="34.8470%" height="15" fill="rgb(236,28,36)"/><text x="31.0730%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,571,509 samples, 3.90%)</title><rect x="61.7678%" y="181" width="3.9021%" height="15" fill="rgb(249,185,26)"/><text x="62.0178%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (1,538,478 samples, 1.68%)</title><rect x="63.9891%" y="165" width="1.6809%" height="15" fill="rgb(249,174,33)"/><text x="64.2391%" y="175.50"></text></g><g><title>codegen_crate (489,686 samples, 0.54%)</title><rect x="65.6808%" y="213" width="0.5350%" height="15" fill="rgb(233,201,37)"/><text x="65.9308%" y="223.50"></text></g><g><title>AST_validation (122,412 samples, 0.13%)</title><rect x="66.4169%" y="197" width="0.1337%" height="15" fill="rgb(221,78,26)"/><text x="66.6669%" y="207.50"></text></g><g><title>metadata_load_macro (258,575 samples, 0.28%)</title><rect x="81.1529%" y="165" width="0.2825%" height="15" fill="rgb(250,127,30)"/><text x="81.4029%" y="175.50"></text></g><g><title>macro_expand_crate (17,045,480 samples, 18.62%)</title><rect x="66.6953%" y="197" width="18.6233%" height="15" fill="rgb(230,49,44)"/><text x="66.9453%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (17,023,180 samples, 18.60%)</title><rect x="66.7197%" y="181" width="18.5990%" height="15" fill="rgb(229,67,23)"/><text x="66.9697%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (3,554,239 samples, 3.88%)</title><rect x="81.4354%" y="165" width="3.8832%" height="15" fill="rgb(249,83,47)"/><text x="81.6854%" y="175.50">meta..</text></g><g><title>metadata_register_crate (1,647,687 samples, 1.80%)</title><rect x="83.5184%" y="149" width="1.8002%" height="15" fill="rgb(215,43,3)"/><text x="83.7684%" y="159.50">m..</text></g><g><title>metadata_register_crate (494,015 samples, 0.54%)</title><rect x="84.7789%" y="133" width="0.5397%" height="15" fill="rgb(238,154,13)"/><text x="85.0289%" y="143.50"></text></g><g><title>metadata_register_crate (193,853 samples, 0.21%)</title><rect x="85.1068%" y="117" width="0.2118%" height="15" fill="rgb(219,56,2)"/><text x="85.3568%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (186,962 samples, 0.20%)</title><rect x="85.3230%" y="197" width="0.2043%" height="15" fill="rgb(233,0,4)"/><text x="85.5730%" y="207.50"></text></g><g><title>finalize_imports (258,513 samples, 0.28%)</title><rect x="85.5357%" y="181" width="0.2824%" height="15" fill="rgb(235,30,7)"/><text x="85.7857%" y="191.50"></text></g><g><title>late_resolve_crate (2,381,327 samples, 2.60%)</title><rect x="85.8756%" y="181" width="2.6018%" height="15" fill="rgb(250,79,13)"/><text x="86.1256%" y="191.50">la..</text></g><g><title>configure_and_expand (20,466,828 samples, 22.36%)</title><rect x="66.2159%" y="213" width="22.3614%" height="15" fill="rgb(211,146,34)"/><text x="66.4659%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,791,521 samples, 3.05%)</title><rect x="85.5273%" y="197" width="3.0499%" height="15" fill="rgb(228,22,38)"/><text x="85.7773%" y="207.50">res..</text></g><g><title>drop_ast (166,302 samples, 0.18%)</title><rect x="88.5772%" y="213" width="0.1817%" height="15" fill="rgb(235,168,5)"/><text x="88.8272%" y="223.50"></text></g><g><title>early_lint_checks (320,904 samples, 0.35%)</title><rect x="88.7841%" y="213" width="0.3506%" height="15" fill="rgb(221,155,16)"/><text x="89.0341%" y="223.50"></text></g><g><title>free_global_ctxt (3,516,970 samples, 3.84%)</title><rect x="89.1347%" y="213" width="3.8425%" height="15" fill="rgb(215,215,53)"/><text x="89.3847%" y="223.50">free..</text></g><g><title>generate_crate_metadata (540,916 samples, 0.59%)</title><rect x="92.9772%" y="213" width="0.5910%" height="15" fill="rgb(223,4,10)"/><text x="93.2272%" y="223.50"></text></g><g><title>hir_lowering (2,323,186 samples, 2.54%)</title><rect x="93.5682%" y="213" width="2.5382%" height="15" fill="rgb(234,103,6)"/><text x="93.8182%" y="223.50">hi..</text></g><g><title>parse_crate (2,279,465 samples, 2.49%)</title><rect x="96.1667%" y="213" width="2.4905%" height="15" fill="rgb(227,97,0)"/><text x="96.4167%" y="223.50">pa..</text></g><g><title>prepare_outputs (255,113 samples, 0.28%)</title><rect x="98.6658%" y="213" width="0.2787%" height="15" fill="rgb(234,150,53)"/><text x="98.9158%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (582,486 samples, 0.64%)</title><rect x="98.9445%" y="213" width="0.6364%" height="15" fill="rgb(228,201,54)"/><text x="99.1945%" y="223.50"></text></g><g><title>setup_global_ctxt (101,711 samples, 0.11%)</title><rect x="99.5934%" y="213" width="0.1111%" height="15" fill="rgb(222,22,37)"/><text x="99.8434%" y="223.50"></text></g><g><title>all (91,527,620 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (91,527,620 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (270,443 samples, 0.30%)</title><rect x="99.7045%" y="213" width="0.2955%" height="15" fill="rgb(210,40,34)"/><text x="99.9545%" y="223.50"></text></g></svg></svg>