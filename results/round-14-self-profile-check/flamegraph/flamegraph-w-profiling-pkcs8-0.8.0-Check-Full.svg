<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (200,983 samples, 0.23%)</title><rect x="10.0404%" y="117" width="0.2308%" height="15" fill="rgb(227,0,7)"/><text x="10.2904%" y="127.50"></text></g><g><title>item_attrs (310,444 samples, 0.36%)</title><rect x="10.6160%" y="85" width="0.3564%" height="15" fill="rgb(217,0,24)"/><text x="10.8660%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (303,594 samples, 0.35%)</title><rect x="10.6239%" y="69" width="0.3486%" height="15" fill="rgb(221,193,54)"/><text x="10.8739%" y="79.50"></text></g><g><title>codegen_fn_attrs (383,416 samples, 0.44%)</title><rect x="10.5498%" y="101" width="0.4402%" height="15" fill="rgb(248,212,6)"/><text x="10.7998%" y="111.50"></text></g><g><title>needs_drop_raw (750,570 samples, 0.86%)</title><rect x="12.6798%" y="85" width="0.8618%" height="15" fill="rgb(208,68,35)"/><text x="12.9298%" y="95.50"></text></g><g><title>is_copy_raw (592,198 samples, 0.68%)</title><rect x="12.8617%" y="69" width="0.6799%" height="15" fill="rgb(232,128,0)"/><text x="13.1117%" y="79.50"></text></g><g><title>evaluate_obligation (482,705 samples, 0.55%)</title><rect x="12.9874%" y="53" width="0.5542%" height="15" fill="rgb(207,160,47)"/><text x="13.2374%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (260,783 samples, 0.30%)</title><rect x="13.6884%" y="69" width="0.2994%" height="15" fill="rgb(228,23,34)"/><text x="13.9384%" y="79.50"></text></g><g><title>resolve_instance (527,113 samples, 0.61%)</title><rect x="13.5416%" y="85" width="0.6052%" height="15" fill="rgb(218,30,26)"/><text x="13.7916%" y="95.50"></text></g><g><title>thir_body (496,423 samples, 0.57%)</title><rect x="14.1622%" y="85" width="0.5700%" height="15" fill="rgb(220,122,19)"/><text x="14.4122%" y="95.50"></text></g><g><title>mir_const (4,531,720 samples, 5.20%)</title><rect x="9.5422%" y="133" width="5.2032%" height="15" fill="rgb(250,228,42)"/><text x="9.7922%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (3,896,882 samples, 4.47%)</title><rect x="10.2712%" y="117" width="4.4743%" height="15" fill="rgb(240,193,28)"/><text x="10.5212%" y="127.50">unsaf..</text></g><g><title>mir_built (3,270,752 samples, 3.76%)</title><rect x="10.9901%" y="101" width="3.7554%" height="15" fill="rgb(216,20,37)"/><text x="11.2401%" y="111.50">mir_..</text></g><g><title>mir_promoted (5,187,004 samples, 5.96%)</title><rect x="9.0820%" y="149" width="5.9556%" height="15" fill="rgb(206,188,39)"/><text x="9.3320%" y="159.50">mir_prom..</text></g><g><title>mir_const_qualif (254,432 samples, 0.29%)</title><rect x="14.7455%" y="133" width="0.2921%" height="15" fill="rgb(217,207,13)"/><text x="14.9955%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (470,015 samples, 0.54%)</title><rect x="15.0380%" y="149" width="0.5397%" height="15" fill="rgb(231,73,38)"/><text x="15.2880%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (430,806 samples, 0.49%)</title><rect x="15.5777%" y="149" width="0.4946%" height="15" fill="rgb(225,20,46)"/><text x="15.8277%" y="159.50"></text></g><g><title>normalize_projection_ty (257,745 samples, 0.30%)</title><rect x="15.7764%" y="133" width="0.2959%" height="15" fill="rgb(210,31,41)"/><text x="16.0264%" y="143.50"></text></g><g><title>type_op_normalize_predicate (310,603 samples, 0.36%)</title><rect x="16.0723%" y="149" width="0.3566%" height="15" fill="rgb(221,200,47)"/><text x="16.3223%" y="159.50"></text></g><g><title>normalize_projection_ty (204,221 samples, 0.23%)</title><rect x="16.1944%" y="133" width="0.2345%" height="15" fill="rgb(226,26,5)"/><text x="16.4444%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,012,589 samples, 2.31%)</title><rect x="16.4289%" y="149" width="2.3108%" height="15" fill="rgb(249,33,26)"/><text x="16.6789%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (15,167,480 samples, 17.41%)</title><rect x="1.3537%" y="181" width="17.4149%" height="15" fill="rgb(235,183,28)"/><text x="1.6037%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,104,330 samples, 17.34%)</title><rect x="1.4262%" y="165" width="17.3424%" height="15" fill="rgb(221,5,38)"/><text x="1.6762%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (99,461 samples, 0.11%)</title><rect x="18.7686%" y="181" width="0.1142%" height="15" fill="rgb(247,18,42)"/><text x="19.0186%" y="191.50"></text></g><g><title>hir_module_items (297,893 samples, 0.34%)</title><rect x="18.8828%" y="181" width="0.3420%" height="15" fill="rgb(241,131,45)"/><text x="19.1328%" y="191.50"></text></g><g><title>codegen_fn_attrs (249,603 samples, 0.29%)</title><rect x="19.8724%" y="117" width="0.2866%" height="15" fill="rgb(249,31,29)"/><text x="20.1224%" y="127.50"></text></g><g><title>codegen_fn_attrs (420,074 samples, 0.48%)</title><rect x="19.6851%" y="149" width="0.4823%" height="15" fill="rgb(225,111,53)"/><text x="19.9351%" y="159.50"></text></g><g><title>should_inherit_track_caller (366,984 samples, 0.42%)</title><rect x="19.7461%" y="133" width="0.4214%" height="15" fill="rgb(238,160,17)"/><text x="19.9961%" y="143.50"></text></g><g><title>check_mod_attrs (782,309 samples, 0.90%)</title><rect x="19.2694%" y="165" width="0.8982%" height="15" fill="rgb(214,148,48)"/><text x="19.5194%" y="175.50"></text></g><g><title>check_mod_const_bodies (122,142 samples, 0.14%)</title><rect x="20.1677%" y="165" width="0.1402%" height="15" fill="rgb(232,36,49)"/><text x="20.4177%" y="175.50"></text></g><g><title>lookup_deprecation_entry (186,822 samples, 0.21%)</title><rect x="20.6242%" y="149" width="0.2145%" height="15" fill="rgb(209,103,24)"/><text x="20.8742%" y="159.50"></text></g><g><title>stability_index (112,692 samples, 0.13%)</title><rect x="20.7093%" y="133" width="0.1294%" height="15" fill="rgb(229,88,8)"/><text x="20.9593%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (471,725 samples, 0.54%)</title><rect x="20.4031%" y="165" width="0.5416%" height="15" fill="rgb(213,181,19)"/><text x="20.6531%" y="175.50"></text></g><g><title>misc_checking_1 (1,592,458 samples, 1.83%)</title><rect x="19.2255%" y="181" width="1.8284%" height="15" fill="rgb(254,191,54)"/><text x="19.4755%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (374,365 samples, 0.43%)</title><rect x="21.0557%" y="165" width="0.4298%" height="15" fill="rgb(241,83,37)"/><text x="21.3057%" y="175.50"></text></g><g><title>check_mod_liveness (311,965 samples, 0.36%)</title><rect x="21.1274%" y="149" width="0.3582%" height="15" fill="rgb(233,36,39)"/><text x="21.3774%" y="159.50"></text></g><g><title>type_uninhabited_from (166,591 samples, 0.19%)</title><rect x="21.2943%" y="133" width="0.1913%" height="15" fill="rgb(226,3,54)"/><text x="21.5443%" y="143.50"></text></g><g><title>type_uninhabited_from (145,181 samples, 0.17%)</title><rect x="21.3189%" y="117" width="0.1667%" height="15" fill="rgb(245,192,40)"/><text x="21.5689%" y="127.50"></text></g><g><title>type_uninhabited_from (131,591 samples, 0.15%)</title><rect x="21.3345%" y="101" width="0.1511%" height="15" fill="rgb(238,167,29)"/><text x="21.5845%" y="111.50"></text></g><g><title>type_uninhabited_from (122,641 samples, 0.14%)</title><rect x="21.3447%" y="85" width="0.1408%" height="15" fill="rgb(232,182,51)"/><text x="21.5947%" y="95.50"></text></g><g><title>type_uninhabited_from (117,791 samples, 0.14%)</title><rect x="21.3503%" y="69" width="0.1352%" height="15" fill="rgb(231,60,39)"/><text x="21.6003%" y="79.50"></text></g><g><title>misc_checking_2 (786,909 samples, 0.90%)</title><rect x="21.0539%" y="181" width="0.9035%" height="15" fill="rgb(208,69,12)"/><text x="21.3039%" y="191.50"></text></g><g><title>match_checking (410,944 samples, 0.47%)</title><rect x="21.4856%" y="165" width="0.4718%" height="15" fill="rgb(235,93,37)"/><text x="21.7356%" y="175.50"></text></g><g><title>check_match (392,193 samples, 0.45%)</title><rect x="21.5071%" y="149" width="0.4503%" height="15" fill="rgb(213,116,39)"/><text x="21.7571%" y="159.50"></text></g><g><title>check_private_in_public (136,641 samples, 0.16%)</title><rect x="21.9681%" y="165" width="0.1569%" height="15" fill="rgb(222,207,29)"/><text x="22.2181%" y="175.50"></text></g><g><title>death_checking (355,854 samples, 0.41%)</title><rect x="22.1250%" y="165" width="0.4086%" height="15" fill="rgb(206,96,30)"/><text x="22.3750%" y="175.50"></text></g><g><title>item_attrs (103,611 samples, 0.12%)</title><rect x="22.4146%" y="149" width="0.1190%" height="15" fill="rgb(218,138,4)"/><text x="22.6646%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (102,351 samples, 0.12%)</title><rect x="22.4161%" y="133" width="0.1175%" height="15" fill="rgb(250,191,14)"/><text x="22.6661%" y="143.50"></text></g><g><title>eval_to_const_value_raw (204,893 samples, 0.24%)</title><rect x="26.1352%" y="133" width="0.2353%" height="15" fill="rgb(239,60,40)"/><text x="26.3852%" y="143.50"></text></g><g><title>eval_to_const_value_raw (203,313 samples, 0.23%)</title><rect x="26.1370%" y="117" width="0.2334%" height="15" fill="rgb(206,27,48)"/><text x="26.3870%" y="127.50"></text></g><g><title>eval_to_allocation_raw (201,343 samples, 0.23%)</title><rect x="26.1393%" y="101" width="0.2312%" height="15" fill="rgb(225,35,8)"/><text x="26.3893%" y="111.50"></text></g><g><title>param_env (261,613 samples, 0.30%)</title><rect x="26.3705%" y="133" width="0.3004%" height="15" fill="rgb(250,213,24)"/><text x="26.6205%" y="143.50"></text></g><g><title>predicates_of (113,682 samples, 0.13%)</title><rect x="26.5403%" y="117" width="0.1305%" height="15" fill="rgb(247,123,22)"/><text x="26.7903%" y="127.50"></text></g><g><title>predicates_defined_on (92,221 samples, 0.11%)</title><rect x="26.5650%" y="101" width="0.1059%" height="15" fill="rgb(231,138,38)"/><text x="26.8150%" y="111.50"></text></g><g><title>crate_lints (3,963,625 samples, 4.55%)</title><rect x="22.5354%" y="149" width="4.5509%" height="15" fill="rgb(231,145,46)"/><text x="22.7854%" y="159.50">crate..</text></g><g><title>type_of (353,834 samples, 0.41%)</title><rect x="26.6801%" y="133" width="0.4063%" height="15" fill="rgb(251,118,11)"/><text x="26.9301%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (270,494 samples, 0.31%)</title><rect x="26.7758%" y="117" width="0.3106%" height="15" fill="rgb(217,147,25)"/><text x="27.0258%" y="127.50"></text></g><g><title>lint_checking (4,314,839 samples, 4.95%)</title><rect x="22.5336%" y="165" width="4.9542%" height="15" fill="rgb(247,81,37)"/><text x="22.7836%" y="175.50">lint_c..</text></g><g><title>module_lints (349,664 samples, 0.40%)</title><rect x="27.0863%" y="149" width="0.4015%" height="15" fill="rgb(209,12,38)"/><text x="27.3363%" y="159.50"></text></g><g><title>lint_mod (344,614 samples, 0.40%)</title><rect x="27.0921%" y="133" width="0.3957%" height="15" fill="rgb(227,1,9)"/><text x="27.3421%" y="143.50"></text></g><g><title>layout_of (124,991 samples, 0.14%)</title><rect x="27.3443%" y="117" width="0.1435%" height="15" fill="rgb(248,47,43)"/><text x="27.5943%" y="127.50"></text></g><g><title>layout_of (115,651 samples, 0.13%)</title><rect x="27.3550%" y="101" width="0.1328%" height="15" fill="rgb(221,10,30)"/><text x="27.6050%" y="111.50"></text></g><g><title>layout_of (108,141 samples, 0.12%)</title><rect x="27.3636%" y="85" width="0.1242%" height="15" fill="rgb(210,229,1)"/><text x="27.6136%" y="95.50"></text></g><g><title>privacy_access_levels (154,602 samples, 0.18%)</title><rect x="27.4878%" y="165" width="0.1775%" height="15" fill="rgb(222,148,37)"/><text x="27.7378%" y="175.50"></text></g><g><title>privacy_checking_modules (531,876 samples, 0.61%)</title><rect x="27.6653%" y="165" width="0.6107%" height="15" fill="rgb(234,67,33)"/><text x="27.9153%" y="175.50"></text></g><g><title>check_mod_privacy (528,406 samples, 0.61%)</title><rect x="27.6693%" y="149" width="0.6067%" height="15" fill="rgb(247,98,35)"/><text x="27.9193%" y="159.50"></text></g><g><title>misc_checking_3 (5,522,812 samples, 6.34%)</title><rect x="21.9574%" y="181" width="6.3412%" height="15" fill="rgb(247,138,52)"/><text x="22.2074%" y="191.50">misc_che..</text></g><g><title>impl_parent (1,073,513 samples, 1.23%)</title><rect x="31.0741%" y="117" width="1.2326%" height="15" fill="rgb(213,79,30)"/><text x="31.3241%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (599,008 samples, 0.69%)</title><rect x="31.6189%" y="101" width="0.6878%" height="15" fill="rgb(246,177,23)"/><text x="31.8689%" y="111.50"></text></g><g><title>impl_trait_ref (2,050,097 samples, 2.35%)</title><rect x="32.3085%" y="117" width="2.3539%" height="15" fill="rgb(230,62,27)"/><text x="32.5585%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,576,881 samples, 1.81%)</title><rect x="32.8518%" y="101" width="1.8105%" height="15" fill="rgb(216,154,8)"/><text x="33.1018%" y="111.50">m..</text></g><g><title>trait_impls_of (395,592 samples, 0.45%)</title><rect x="34.8053%" y="117" width="0.4542%" height="15" fill="rgb(244,35,45)"/><text x="35.0553%" y="127.50"></text></g><g><title>implementations_of_trait (116,054 samples, 0.13%)</title><rect x="35.1262%" y="101" width="0.1333%" height="15" fill="rgb(251,115,12)"/><text x="35.3762%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (95,793 samples, 0.11%)</title><rect x="35.1495%" y="85" width="0.1100%" height="15" fill="rgb(240,54,50)"/><text x="35.3995%" y="95.50"></text></g><g><title>coherent_trait (5,999,857 samples, 6.89%)</title><rect x="28.3739%" y="149" width="6.8889%" height="15" fill="rgb(233,84,52)"/><text x="28.6239%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (5,859,406 samples, 6.73%)</title><rect x="28.5351%" y="133" width="6.7276%" height="15" fill="rgb(207,117,47)"/><text x="28.7851%" y="143.50">specializ..</text></g><g><title>coherence_checking (6,059,918 samples, 6.96%)</title><rect x="28.3508%" y="165" width="6.9579%" height="15" fill="rgb(249,43,39)"/><text x="28.6008%" y="175.50">coherence..</text></g><g><title>associated_item (123,410 samples, 0.14%)</title><rect x="43.1494%" y="101" width="0.1417%" height="15" fill="rgb(209,38,44)"/><text x="43.3994%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (104,070 samples, 0.12%)</title><rect x="43.1716%" y="85" width="0.1195%" height="15" fill="rgb(236,212,23)"/><text x="43.4216%" y="95.50"></text></g><g><title>associated_items (178,290 samples, 0.20%)</title><rect x="43.0994%" y="117" width="0.2047%" height="15" fill="rgb(242,79,21)"/><text x="43.3494%" y="127.50"></text></g><g><title>dropck_outlives (200,371 samples, 0.23%)</title><rect x="43.3317%" y="117" width="0.2301%" height="15" fill="rgb(211,96,35)"/><text x="43.5817%" y="127.50"></text></g><g><title>adt_dtorck_constraint (106,300 samples, 0.12%)</title><rect x="43.4397%" y="101" width="0.1221%" height="15" fill="rgb(253,215,40)"/><text x="43.6897%" y="111.50"></text></g><g><title>evaluate_obligation (491,507 samples, 0.56%)</title><rect x="43.5617%" y="117" width="0.5643%" height="15" fill="rgb(211,81,21)"/><text x="43.8117%" y="127.50"></text></g><g><title>method_autoderef_steps (110,852 samples, 0.13%)</title><rect x="44.3844%" y="117" width="0.1273%" height="15" fill="rgb(208,190,38)"/><text x="44.6344%" y="127.50"></text></g><g><title>predicates_of (162,640 samples, 0.19%)</title><rect x="44.6090%" y="117" width="0.1867%" height="15" fill="rgb(235,213,38)"/><text x="44.8590%" y="127.50"></text></g><g><title>predicates_defined_on (119,750 samples, 0.14%)</title><rect x="44.6582%" y="101" width="0.1375%" height="15" fill="rgb(237,122,38)"/><text x="44.9082%" y="111.50"></text></g><g><title>associated_item (245,092 samples, 0.28%)</title><rect x="52.0965%" y="85" width="0.2814%" height="15" fill="rgb(244,218,35)"/><text x="52.3465%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (183,840 samples, 0.21%)</title><rect x="52.1669%" y="69" width="0.2111%" height="15" fill="rgb(240,68,47)"/><text x="52.4169%" y="79.50"></text></g><g><title>associated_items (365,593 samples, 0.42%)</title><rect x="51.9771%" y="101" width="0.4198%" height="15" fill="rgb(210,16,53)"/><text x="52.2271%" y="111.50"></text></g><g><title>dropck_outlives (185,561 samples, 0.21%)</title><rect x="52.4369%" y="101" width="0.2131%" height="15" fill="rgb(235,124,12)"/><text x="52.6869%" y="111.50"></text></g><g><title>predicates_of (110,070 samples, 0.13%)</title><rect x="53.7704%" y="85" width="0.1264%" height="15" fill="rgb(224,169,11)"/><text x="54.0204%" y="95.50"></text></g><g><title>evaluate_obligation (1,206,282 samples, 1.39%)</title><rect x="52.6499%" y="101" width="1.3850%" height="15" fill="rgb(250,166,2)"/><text x="52.8999%" y="111.50"></text></g><g><title>is_copy_raw (134,800 samples, 0.15%)</title><rect x="54.2983%" y="101" width="0.1548%" height="15" fill="rgb(242,216,29)"/><text x="54.5483%" y="111.50"></text></g><g><title>evaluate_obligation (112,750 samples, 0.13%)</title><rect x="54.3236%" y="85" width="0.1295%" height="15" fill="rgb(230,116,27)"/><text x="54.5736%" y="95.50"></text></g><g><title>method_autoderef_steps (167,334 samples, 0.19%)</title><rect x="54.5111%" y="101" width="0.1921%" height="15" fill="rgb(228,99,48)"/><text x="54.7611%" y="111.50"></text></g><g><title>object_safety_violations (148,532 samples, 0.17%)</title><rect x="54.7033%" y="101" width="0.1705%" height="15" fill="rgb(253,11,6)"/><text x="54.9533%" y="111.50"></text></g><g><title>predicates_of (228,291 samples, 0.26%)</title><rect x="54.8834%" y="101" width="0.2621%" height="15" fill="rgb(247,143,39)"/><text x="55.1334%" y="111.50"></text></g><g><title>predicates_defined_on (156,570 samples, 0.18%)</title><rect x="54.9658%" y="85" width="0.1798%" height="15" fill="rgb(236,97,10)"/><text x="55.2158%" y="95.50"></text></g><g><title>typeck (9,035,422 samples, 10.37%)</title><rect x="44.8660%" y="117" width="10.3743%" height="15" fill="rgb(233,208,19)"/><text x="45.1160%" y="127.50">typeck</text></g><g><title>item_bodies_checking (17,359,174 samples, 19.93%)</title><rect x="35.3328%" y="165" width="19.9314%" height="15" fill="rgb(216,164,2)"/><text x="35.5828%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,356,264 samples, 19.93%)</title><rect x="35.3362%" y="149" width="19.9280%" height="15" fill="rgb(220,129,5)"/><text x="35.5862%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (17,316,724 samples, 19.88%)</title><rect x="35.3816%" y="133" width="19.8826%" height="15" fill="rgb(242,17,10)"/><text x="35.6316%" y="143.50">typeck</text></g><g><title>item_types_checking (1,127,203 samples, 1.29%)</title><rect x="55.2642%" y="165" width="1.2942%" height="15" fill="rgb(242,107,0)"/><text x="55.5142%" y="175.50"></text></g><g><title>check_mod_item_types (1,122,493 samples, 1.29%)</title><rect x="55.2696%" y="149" width="1.2888%" height="15" fill="rgb(251,28,31)"/><text x="55.5196%" y="159.50"></text></g><g><title>typeck (227,123 samples, 0.26%)</title><rect x="56.2977%" y="133" width="0.2608%" height="15" fill="rgb(233,223,10)"/><text x="56.5477%" y="143.50"></text></g><g><title>mir_const_qualif (190,821 samples, 0.22%)</title><rect x="57.1767%" y="85" width="0.2191%" height="15" fill="rgb(215,21,27)"/><text x="57.4267%" y="95.50"></text></g><g><title>mir_const (160,351 samples, 0.18%)</title><rect x="57.2116%" y="69" width="0.1841%" height="15" fill="rgb(232,23,21)"/><text x="57.4616%" y="79.50"></text></g><g><title>unsafety_check_result (115,121 samples, 0.13%)</title><rect x="57.2636%" y="53" width="0.1322%" height="15" fill="rgb(244,5,23)"/><text x="57.5136%" y="63.50"></text></g><g><title>mir_built (95,241 samples, 0.11%)</title><rect x="57.2864%" y="37" width="0.1094%" height="15" fill="rgb(226,81,46)"/><text x="57.5364%" y="47.50"></text></g><g><title>mir_borrowck (406,355 samples, 0.47%)</title><rect x="57.5524%" y="53" width="0.4666%" height="15" fill="rgb(247,70,30)"/><text x="57.8024%" y="63.50"></text></g><g><title>mir_for_ctfe (543,706 samples, 0.62%)</title><rect x="57.3958%" y="85" width="0.6243%" height="15" fill="rgb(212,68,19)"/><text x="57.6458%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (503,026 samples, 0.58%)</title><rect x="57.4425%" y="69" width="0.5776%" height="15" fill="rgb(240,187,13)"/><text x="57.6925%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,275,704 samples, 1.46%)</title><rect x="56.9513%" y="133" width="1.4647%" height="15" fill="rgb(223,113,26)"/><text x="57.2013%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,250,154 samples, 1.44%)</title><rect x="56.9807%" y="117" width="1.4354%" height="15" fill="rgb(206,192,2)"/><text x="57.2307%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,243,223 samples, 1.43%)</title><rect x="56.9886%" y="101" width="1.4274%" height="15" fill="rgb(241,108,4)"/><text x="57.2386%" y="111.50"></text></g><g><title>typeck (344,384 samples, 0.40%)</title><rect x="58.0207%" y="85" width="0.3954%" height="15" fill="rgb(247,173,49)"/><text x="58.2707%" y="95.50"></text></g><g><title>fn_sig (222,833 samples, 0.26%)</title><rect x="58.4161%" y="133" width="0.2559%" height="15" fill="rgb(224,114,35)"/><text x="58.6661%" y="143.50"></text></g><g><title>is_late_bound_map (197,031 samples, 0.23%)</title><rect x="58.8270%" y="117" width="0.2262%" height="15" fill="rgb(245,159,27)"/><text x="59.0770%" y="127.50"></text></g><g><title>resolve_lifetimes (182,771 samples, 0.21%)</title><rect x="58.8434%" y="101" width="0.2099%" height="15" fill="rgb(245,172,44)"/><text x="59.0934%" y="111.50"></text></g><g><title>named_region_map (416,453 samples, 0.48%)</title><rect x="59.0533%" y="117" width="0.4782%" height="15" fill="rgb(236,23,11)"/><text x="59.3033%" y="127.50"></text></g><g><title>resolve_lifetimes (401,143 samples, 0.46%)</title><rect x="59.0708%" y="101" width="0.4606%" height="15" fill="rgb(205,117,38)"/><text x="59.3208%" y="111.50"></text></g><g><title>lint_levels (215,743 samples, 0.25%)</title><rect x="59.2837%" y="85" width="0.2477%" height="15" fill="rgb(237,72,25)"/><text x="59.5337%" y="95.50"></text></g><g><title>generics_of (771,607 samples, 0.89%)</title><rect x="58.6719%" y="133" width="0.8859%" height="15" fill="rgb(244,70,9)"/><text x="58.9219%" y="143.50"></text></g><g><title>impl_trait_ref (103,350 samples, 0.12%)</title><rect x="59.5579%" y="133" width="0.1187%" height="15" fill="rgb(217,125,39)"/><text x="59.8079%" y="143.50"></text></g><g><title>param_env (117,471 samples, 0.13%)</title><rect x="59.6775%" y="133" width="0.1349%" height="15" fill="rgb(235,36,10)"/><text x="59.9275%" y="143.50"></text></g><g><title>explicit_predicates_of (356,744 samples, 0.41%)</title><rect x="59.9525%" y="101" width="0.4096%" height="15" fill="rgb(251,123,47)"/><text x="60.2025%" y="111.50"></text></g><g><title>predicates_of (698,851 samples, 0.80%)</title><rect x="59.8124%" y="133" width="0.8024%" height="15" fill="rgb(221,13,13)"/><text x="60.0624%" y="143.50"></text></g><g><title>predicates_defined_on (654,779 samples, 0.75%)</title><rect x="59.8630%" y="117" width="0.7518%" height="15" fill="rgb(238,131,9)"/><text x="60.1130%" y="127.50"></text></g><g><title>inferred_outlives_of (220,133 samples, 0.25%)</title><rect x="60.3621%" y="101" width="0.2528%" height="15" fill="rgb(211,50,8)"/><text x="60.6121%" y="111.50"></text></g><g><title>inferred_outlives_crate (194,642 samples, 0.22%)</title><rect x="60.3913%" y="85" width="0.2235%" height="15" fill="rgb(245,182,24)"/><text x="60.6413%" y="95.50"></text></g><g><title>type_of (90,412 samples, 0.10%)</title><rect x="60.5110%" y="69" width="0.1038%" height="15" fill="rgb(242,14,37)"/><text x="60.7610%" y="79.50"></text></g><g><title>super_predicates_of (116,801 samples, 0.13%)</title><rect x="60.6148%" y="133" width="0.1341%" height="15" fill="rgb(246,228,12)"/><text x="60.8648%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (103,561 samples, 0.12%)</title><rect x="60.6300%" y="117" width="0.1189%" height="15" fill="rgb(213,55,15)"/><text x="60.8800%" y="127.50"></text></g><g><title>type_collecting (3,861,553 samples, 4.43%)</title><rect x="56.5616%" y="165" width="4.4337%" height="15" fill="rgb(209,9,3)"/><text x="56.8116%" y="175.50">type_..</text></g><g><title>collect_mod_item_types (3,839,473 samples, 4.41%)</title><rect x="56.5870%" y="149" width="4.4084%" height="15" fill="rgb(230,59,30)"/><text x="56.8370%" y="159.50">colle..</text></g><g><title>type_of (213,332 samples, 0.24%)</title><rect x="60.7504%" y="133" width="0.2449%" height="15" fill="rgb(209,121,21)"/><text x="61.0004%" y="143.50"></text></g><g><title>evaluate_obligation (131,892 samples, 0.15%)</title><rect x="61.9664%" y="133" width="0.1514%" height="15" fill="rgb(220,109,13)"/><text x="62.2164%" y="143.50"></text></g><g><title>implied_outlives_bounds (103,790 samples, 0.12%)</title><rect x="62.1178%" y="133" width="0.1192%" height="15" fill="rgb(232,18,1)"/><text x="62.3678%" y="143.50"></text></g><g><title>param_env (130,690 samples, 0.15%)</title><rect x="62.2370%" y="133" width="0.1501%" height="15" fill="rgb(215,41,42)"/><text x="62.4870%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,315,740 samples, 1.51%)</title><rect x="61.1263%" y="149" width="1.5107%" height="15" fill="rgb(224,123,36)"/><text x="61.3763%" y="159.50"></text></g><g><title>region_scope_tree (184,462 samples, 0.21%)</title><rect x="62.4252%" y="133" width="0.2118%" height="15" fill="rgb(240,125,3)"/><text x="62.6752%" y="143.50"></text></g><g><title>adt_sized_constraint (121,622 samples, 0.14%)</title><rect x="63.9265%" y="117" width="0.1396%" height="15" fill="rgb(205,98,50)"/><text x="64.1765%" y="127.50"></text></g><g><title>evaluate_obligation (372,524 samples, 0.43%)</title><rect x="63.6414%" y="133" width="0.4277%" height="15" fill="rgb(205,185,37)"/><text x="63.8914%" y="143.50"></text></g><g><title>param_env (122,112 samples, 0.14%)</title><rect x="64.1157%" y="133" width="0.1402%" height="15" fill="rgb(238,207,15)"/><text x="64.3657%" y="143.50"></text></g><g><title>predicates_of (97,752 samples, 0.11%)</title><rect x="64.2559%" y="133" width="0.1122%" height="15" fill="rgb(213,199,42)"/><text x="64.5059%" y="143.50"></text></g><g><title>check_item_well_formed (1,591,723 samples, 1.83%)</title><rect x="62.6370%" y="149" width="1.8276%" height="15" fill="rgb(235,201,11)"/><text x="62.8870%" y="159.50">c..</text></g><g><title>analysis (55,472,462 samples, 63.69%)</title><rect x="0.8822%" y="197" width="63.6921%" height="15" fill="rgb(207,46,11)"/><text x="1.1322%" y="207.50">analysis</text></g><g><title>type_check_crate (31,594,314 samples, 36.28%)</title><rect x="28.2985%" y="181" width="36.2758%" height="15" fill="rgb(241,35,35)"/><text x="28.5485%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,114,445 samples, 3.58%)</title><rect x="60.9984%" y="165" width="3.5759%" height="15" fill="rgb(243,32,47)"/><text x="61.2484%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (95,661 samples, 0.11%)</title><rect x="64.4645%" y="149" width="0.1098%" height="15" fill="rgb(247,202,23)"/><text x="64.7145%" y="159.50"></text></g><g><title>codegen_crate (305,884 samples, 0.35%)</title><rect x="64.5861%" y="197" width="0.3512%" height="15" fill="rgb(219,102,11)"/><text x="64.8361%" y="207.50"></text></g><g><title>AST_validation (199,792 samples, 0.23%)</title><rect x="65.2020%" y="181" width="0.2294%" height="15" fill="rgb(243,110,44)"/><text x="65.4520%" y="191.50"></text></g><g><title>complete_gated_feature_checking (87,931 samples, 0.10%)</title><rect x="65.4314%" y="181" width="0.1010%" height="15" fill="rgb(222,74,54)"/><text x="65.6814%" y="191.50"></text></g><g><title>crate_injection (103,791 samples, 0.12%)</title><rect x="65.5324%" y="181" width="0.1192%" height="15" fill="rgb(216,99,12)"/><text x="65.7824%" y="191.50"></text></g><g><title>metadata_load_macro (426,127 samples, 0.49%)</title><rect x="83.6739%" y="149" width="0.4893%" height="15" fill="rgb(226,22,26)"/><text x="83.9239%" y="159.50"></text></g><g><title>metadata_register_crate (343,663 samples, 0.39%)</title><rect x="84.1632%" y="149" width="0.3946%" height="15" fill="rgb(217,163,10)"/><text x="84.4132%" y="159.50"></text></g><g><title>macro_expand_crate (16,687,517 samples, 19.16%)</title><rect x="65.6516%" y="181" width="19.1602%" height="15" fill="rgb(213,25,53)"/><text x="65.9016%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (16,661,017 samples, 19.13%)</title><rect x="65.6820%" y="165" width="19.1298%" height="15" fill="rgb(252,105,26)"/><text x="65.9320%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (221,213 samples, 0.25%)</title><rect x="84.5578%" y="149" width="0.2540%" height="15" fill="rgb(220,39,43)"/><text x="84.8078%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (110,281 samples, 0.13%)</title><rect x="84.8176%" y="181" width="0.1266%" height="15" fill="rgb(229,68,48)"/><text x="85.0676%" y="191.50"></text></g><g><title>finalize_imports (159,372 samples, 0.18%)</title><rect x="84.9570%" y="165" width="0.1830%" height="15" fill="rgb(252,8,32)"/><text x="85.2070%" y="175.50"></text></g><g><title>finalize_macro_resolutions (350,954 samples, 0.40%)</title><rect x="85.1400%" y="165" width="0.4030%" height="15" fill="rgb(223,20,43)"/><text x="85.3900%" y="175.50"></text></g><g><title>late_resolve_crate (2,625,019 samples, 3.01%)</title><rect x="85.5429%" y="165" width="3.0140%" height="15" fill="rgb(229,81,49)"/><text x="85.7929%" y="175.50">lat..</text></g><g><title>configure_and_expand (20,723,082 samples, 23.79%)</title><rect x="64.9373%" y="197" width="23.7937%" height="15" fill="rgb(236,28,36)"/><text x="65.1873%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,298,107 samples, 3.79%)</title><rect x="84.9442%" y="181" width="3.7868%" height="15" fill="rgb(249,185,26)"/><text x="85.1942%" y="191.50">reso..</text></g><g><title>drop_ast (220,943 samples, 0.25%)</title><rect x="88.7310%" y="197" width="0.2537%" height="15" fill="rgb(249,174,33)"/><text x="88.9810%" y="207.50"></text></g><g><title>early_lint_checks (474,775 samples, 0.55%)</title><rect x="89.0024%" y="197" width="0.5451%" height="15" fill="rgb(233,201,37)"/><text x="89.2524%" y="207.50"></text></g><g><title>free_global_ctxt (1,850,020 samples, 2.12%)</title><rect x="89.5475%" y="197" width="2.1241%" height="15" fill="rgb(221,78,26)"/><text x="89.7975%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,149,483 samples, 1.32%)</title><rect x="91.6716%" y="197" width="1.3198%" height="15" fill="rgb(250,127,30)"/><text x="91.9216%" y="207.50"></text></g><g><title>hir_lowering (3,885,414 samples, 4.46%)</title><rect x="92.9914%" y="197" width="4.4611%" height="15" fill="rgb(230,49,44)"/><text x="93.2414%" y="207.50">hir_l..</text></g><g><title>parse_crate (774,729 samples, 0.89%)</title><rect x="97.5120%" y="197" width="0.8895%" height="15" fill="rgb(229,67,23)"/><text x="97.7620%" y="207.50"></text></g><g><title>prepare_outputs (318,013 samples, 0.37%)</title><rect x="98.4126%" y="197" width="0.3651%" height="15" fill="rgb(249,83,47)"/><text x="98.6626%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (597,797 samples, 0.69%)</title><rect x="98.7777%" y="197" width="0.6864%" height="15" fill="rgb(215,43,3)"/><text x="99.0277%" y="207.50"></text></g><g><title>setup_global_ctxt (129,781 samples, 0.15%)</title><rect x="99.4770%" y="197" width="0.1490%" height="15" fill="rgb(238,154,13)"/><text x="99.7270%" y="207.50"></text></g><g><title>all (87,094,665 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (87,094,665 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (325,683 samples, 0.37%)</title><rect x="99.6261%" y="197" width="0.3739%" height="15" fill="rgb(235,30,7)"/><text x="99.8761%" y="207.50"></text></g></svg></svg>