<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (503,715 samples, 0.11%)</title><rect x="7.9541%" y="165" width="0.1132%" height="15" fill="rgb(227,0,7)"/><text x="8.2041%" y="175.50"></text></g><g><title>thir_body (1,324,773 samples, 0.30%)</title><rect x="10.9651%" y="101" width="0.2978%" height="15" fill="rgb(217,0,24)"/><text x="11.2151%" y="111.50"></text></g><g><title>mir_const (6,230,808 samples, 1.40%)</title><rect x="9.8659%" y="149" width="1.4005%" height="15" fill="rgb(221,193,54)"/><text x="10.1159%" y="159.50"></text></g><g><title>unsafety_check_result (5,397,630 samples, 1.21%)</title><rect x="10.0531%" y="133" width="1.2132%" height="15" fill="rgb(248,212,6)"/><text x="10.3031%" y="143.50"></text></g><g><title>mir_built (4,994,535 samples, 1.12%)</title><rect x="10.1437%" y="117" width="1.1226%" height="15" fill="rgb(208,68,35)"/><text x="10.3937%" y="127.50"></text></g><g><title>is_freeze_raw (763,169 samples, 0.17%)</title><rect x="11.9537%" y="133" width="0.1715%" height="15" fill="rgb(232,128,0)"/><text x="12.2037%" y="143.50"></text></g><g><title>evaluate_obligation (724,729 samples, 0.16%)</title><rect x="11.9624%" y="117" width="0.1629%" height="15" fill="rgb(207,160,47)"/><text x="12.2124%" y="127.50"></text></g><g><title>thir_body (11,903,621 samples, 2.68%)</title><rect x="15.8345%" y="85" width="2.6756%" height="15" fill="rgb(228,23,34)"/><text x="16.0845%" y="95.50">th..</text></g><g><title>lit_to_const (834,420 samples, 0.19%)</title><rect x="18.3225%" y="69" width="0.1876%" height="15" fill="rgb(218,30,26)"/><text x="18.5725%" y="79.50"></text></g><g><title>mir_const (28,408,346 samples, 6.39%)</title><rect x="12.1253%" y="133" width="6.3853%" height="15" fill="rgb(220,122,19)"/><text x="12.3753%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (27,206,372 samples, 6.12%)</title><rect x="12.3954%" y="117" width="6.1151%" height="15" fill="rgb(250,228,42)"/><text x="12.6454%" y="127.50">unsafety..</text></g><g><title>mir_built (25,900,658 samples, 5.82%)</title><rect x="12.6889%" y="101" width="5.8216%" height="15" fill="rgb(240,193,28)"/><text x="12.9389%" y="111.50">mir_bui..</text></g><g><title>mir_const_qualif (32,352,201 samples, 7.27%)</title><rect x="11.2663%" y="149" width="7.2717%" height="15" fill="rgb(216,20,37)"/><text x="11.5163%" y="159.50">mir_const_..</text></g><g><title>mir_promoted (46,586,042 samples, 10.47%)</title><rect x="8.0673%" y="165" width="10.4711%" height="15" fill="rgb(206,188,39)"/><text x="8.3173%" y="175.50">mir_promoted</text></g><g><title>type_op_prove_predicate (503,078 samples, 0.11%)</title><rect x="18.6044%" y="165" width="0.1131%" height="15" fill="rgb(217,207,13)"/><text x="18.8544%" y="175.50"></text></g><g><title>MIR_borrow_checking (79,335,611 samples, 17.83%)</title><rect x="0.8859%" y="197" width="17.8321%" height="15" fill="rgb(231,73,38)"/><text x="1.1359%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (79,171,320 samples, 17.80%)</title><rect x="0.9228%" y="181" width="17.7952%" height="15" fill="rgb(225,20,46)"/><text x="1.1728%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (828,979 samples, 0.19%)</title><rect x="18.7180%" y="197" width="0.1863%" height="15" fill="rgb(210,31,41)"/><text x="18.9680%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (759,079 samples, 0.17%)</title><rect x="18.7337%" y="181" width="0.1706%" height="15" fill="rgb(221,200,47)"/><text x="18.9837%" y="191.50"></text></g><g><title>hir_module_items (556,678 samples, 0.13%)</title><rect x="18.9043%" y="197" width="0.1251%" height="15" fill="rgb(226,26,5)"/><text x="19.1543%" y="207.50"></text></g><g><title>check_mod_attrs (1,886,081 samples, 0.42%)</title><rect x="19.0386%" y="181" width="0.4239%" height="15" fill="rgb(249,33,26)"/><text x="19.2886%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (902,681 samples, 0.20%)</title><rect x="19.5890%" y="181" width="0.2029%" height="15" fill="rgb(235,183,28)"/><text x="19.8390%" y="191.50"></text></g><g><title>misc_checking_1 (3,505,409 samples, 0.79%)</title><rect x="19.0296%" y="197" width="0.7879%" height="15" fill="rgb(221,5,38)"/><text x="19.2796%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,205,923 samples, 0.27%)</title><rect x="19.8179%" y="181" width="0.2711%" height="15" fill="rgb(247,18,42)"/><text x="20.0679%" y="191.50"></text></g><g><title>check_mod_liveness (780,249 samples, 0.18%)</title><rect x="19.9136%" y="165" width="0.1754%" height="15" fill="rgb(241,131,45)"/><text x="20.1636%" y="175.50"></text></g><g><title>misc_checking_2 (2,874,322 samples, 0.65%)</title><rect x="19.8175%" y="197" width="0.6461%" height="15" fill="rgb(249,31,29)"/><text x="20.0675%" y="207.50"></text></g><g><title>match_checking (1,666,339 samples, 0.37%)</title><rect x="20.0890%" y="181" width="0.3745%" height="15" fill="rgb(225,111,53)"/><text x="20.3390%" y="191.50"></text></g><g><title>check_match (1,633,119 samples, 0.37%)</title><rect x="20.0964%" y="165" width="0.3671%" height="15" fill="rgb(238,160,17)"/><text x="20.3464%" y="175.50"></text></g><g><title>death_checking (2,034,783 samples, 0.46%)</title><rect x="20.5566%" y="181" width="0.4574%" height="15" fill="rgb(214,148,48)"/><text x="20.8066%" y="191.50"></text></g><g><title>eval_to_const_value_raw (45,557,816 samples, 10.24%)</title><rect x="24.3588%" y="85" width="10.2399%" height="15" fill="rgb(232,36,49)"/><text x="24.6088%" y="95.50">eval_to_const_v..</text></g><g><title>eval_to_const_value_raw (45,551,126 samples, 10.24%)</title><rect x="24.3603%" y="69" width="10.2384%" height="15" fill="rgb(209,103,24)"/><text x="24.6103%" y="79.50">eval_to_const_v..</text></g><g><title>eval_to_allocation_raw (45,534,786 samples, 10.23%)</title><rect x="24.3639%" y="53" width="10.2348%" height="15" fill="rgb(229,88,8)"/><text x="24.6139%" y="63.50">eval_to_allocat..</text></g><g><title>promoted_mir (11,470,618 samples, 2.58%)</title><rect x="32.0205%" y="37" width="2.5782%" height="15" fill="rgb(213,181,19)"/><text x="32.2705%" y="47.50">pr..</text></g><g><title>eval_to_const_value_raw (57,083,845 samples, 12.83%)</title><rect x="21.7718%" y="149" width="12.8306%" height="15" fill="rgb(254,191,54)"/><text x="22.0218%" y="159.50">eval_to_const_value..</text></g><g><title>eval_to_const_value_raw (57,065,395 samples, 12.83%)</title><rect x="21.7759%" y="133" width="12.8265%" height="15" fill="rgb(241,83,37)"/><text x="22.0259%" y="143.50">eval_to_const_value..</text></g><g><title>eval_to_allocation_raw (57,010,375 samples, 12.81%)</title><rect x="21.7883%" y="117" width="12.8141%" height="15" fill="rgb(233,36,39)"/><text x="22.0383%" y="127.50">eval_to_allocation_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (45,617,297 samples, 10.25%)</title><rect x="24.3491%" y="101" width="10.2533%" height="15" fill="rgb(226,3,54)"/><text x="24.5991%" y="111.50">try_normalize_m..</text></g><g><title>param_env (1,361,574 samples, 0.31%)</title><rect x="34.6024%" y="149" width="0.3060%" height="15" fill="rgb(245,192,40)"/><text x="34.8524%" y="159.50"></text></g><g><title>predicates_of (669,967 samples, 0.15%)</title><rect x="34.7579%" y="133" width="0.1506%" height="15" fill="rgb(238,167,29)"/><text x="35.0079%" y="143.50"></text></g><g><title>predicates_defined_on (564,804 samples, 0.13%)</title><rect x="34.7815%" y="117" width="0.1269%" height="15" fill="rgb(232,182,51)"/><text x="35.0315%" y="127.50"></text></g><g><title>crate_lints (62,156,479 samples, 13.97%)</title><rect x="21.0146%" y="165" width="13.9708%" height="15" fill="rgb(231,60,39)"/><text x="21.2646%" y="175.50">crate_lints</text></g><g><title>lint_checking (66,090,893 samples, 14.86%)</title><rect x="21.0140%" y="181" width="14.8551%" height="15" fill="rgb(208,69,12)"/><text x="21.2640%" y="191.50">lint_checking</text></g><g><title>module_lints (3,931,694 samples, 0.88%)</title><rect x="34.9854%" y="165" width="0.8837%" height="15" fill="rgb(235,93,37)"/><text x="35.2354%" y="175.50"></text></g><g><title>lint_mod (3,920,144 samples, 0.88%)</title><rect x="34.9880%" y="149" width="0.8811%" height="15" fill="rgb(213,116,39)"/><text x="35.2380%" y="159.50"></text></g><g><title>privacy_access_levels (690,898 samples, 0.16%)</title><rect x="35.8691%" y="181" width="0.1553%" height="15" fill="rgb(222,207,29)"/><text x="36.1191%" y="191.50"></text></g><g><title>privacy_checking_modules (4,391,689 samples, 0.99%)</title><rect x="36.0244%" y="181" width="0.9871%" height="15" fill="rgb(206,96,30)"/><text x="36.2744%" y="191.50"></text></g><g><title>check_mod_privacy (4,383,729 samples, 0.99%)</title><rect x="36.0262%" y="165" width="0.9853%" height="15" fill="rgb(218,138,4)"/><text x="36.2762%" y="175.50"></text></g><g><title>misc_checking_3 (73,650,627 samples, 16.55%)</title><rect x="20.4635%" y="197" width="16.5543%" height="15" fill="rgb(250,191,14)"/><text x="20.7135%" y="207.50">misc_checking_3</text></g><g><title>impl_parent (1,028,952 samples, 0.23%)</title><rect x="37.3872%" y="133" width="0.2313%" height="15" fill="rgb(239,60,40)"/><text x="37.6372%" y="143.50"></text></g><g><title>impl_trait_ref (1,492,537 samples, 0.34%)</title><rect x="37.6185%" y="133" width="0.3355%" height="15" fill="rgb(206,27,48)"/><text x="37.8685%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,121,413 samples, 0.25%)</title><rect x="37.7019%" y="117" width="0.2521%" height="15" fill="rgb(225,35,8)"/><text x="37.9519%" y="127.50"></text></g><g><title>coherent_trait (4,442,410 samples, 1.00%)</title><rect x="37.0367%" y="165" width="0.9985%" height="15" fill="rgb(250,213,24)"/><text x="37.2867%" y="175.50"></text></g><g><title>specialization_graph_of (4,305,809 samples, 0.97%)</title><rect x="37.0674%" y="149" width="0.9678%" height="15" fill="rgb(247,123,22)"/><text x="37.3174%" y="159.50"></text></g><g><title>coherence_checking (4,607,131 samples, 1.04%)</title><rect x="37.0328%" y="181" width="1.0355%" height="15" fill="rgb(231,138,38)"/><text x="37.2828%" y="191.50"></text></g><g><title>item_bodies_checking (21,800,781 samples, 4.90%)</title><rect x="38.0780%" y="181" width="4.9001%" height="15" fill="rgb(231,145,46)"/><text x="38.3280%" y="191.50">item_b..</text></g><g><title>typeck_item_bodies (21,798,571 samples, 4.90%)</title><rect x="38.0785%" y="165" width="4.8996%" height="15" fill="rgb(251,118,11)"/><text x="38.3285%" y="175.50">typeck..</text></g><g><title>typeck (21,731,511 samples, 4.88%)</title><rect x="38.0935%" y="149" width="4.8846%" height="15" fill="rgb(217,147,25)"/><text x="38.3435%" y="159.50">typeck</text></g><g><title>item_types_checking (54,331,773 samples, 12.21%)</title><rect x="42.9781%" y="181" width="12.2121%" height="15" fill="rgb(247,81,37)"/><text x="43.2281%" y="191.50">item_types_checking</text></g><g><title>check_mod_item_types (54,319,643 samples, 12.21%)</title><rect x="42.9808%" y="165" width="12.2093%" height="15" fill="rgb(209,12,38)"/><text x="43.2308%" y="175.50">check_mod_item_typ..</text></g><g><title>typeck (53,288,722 samples, 11.98%)</title><rect x="43.2125%" y="149" width="11.9776%" height="15" fill="rgb(227,1,9)"/><text x="43.4625%" y="159.50">typeck</text></g><g><title>named_region_map (1,223,695 samples, 0.28%)</title><rect x="55.3926%" y="133" width="0.2750%" height="15" fill="rgb(248,47,43)"/><text x="55.6426%" y="143.50"></text></g><g><title>resolve_lifetimes (1,206,074 samples, 0.27%)</title><rect x="55.3965%" y="117" width="0.2711%" height="15" fill="rgb(221,10,30)"/><text x="55.6465%" y="127.50"></text></g><g><title>lint_levels (954,991 samples, 0.21%)</title><rect x="55.4530%" y="101" width="0.2147%" height="15" fill="rgb(210,229,1)"/><text x="55.7030%" y="111.50"></text></g><g><title>generics_of (1,342,325 samples, 0.30%)</title><rect x="55.3690%" y="149" width="0.3017%" height="15" fill="rgb(222,148,37)"/><text x="55.6190%" y="159.50"></text></g><g><title>type_collecting (2,680,099 samples, 0.60%)</title><rect x="55.1904%" y="181" width="0.6024%" height="15" fill="rgb(234,67,33)"/><text x="55.4404%" y="191.50"></text></g><g><title>collect_mod_item_types (2,666,129 samples, 0.60%)</title><rect x="55.1935%" y="165" width="0.5993%" height="15" fill="rgb(247,98,35)"/><text x="55.4435%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,078,115 samples, 0.47%)</title><rect x="55.8713%" y="165" width="0.4671%" height="15" fill="rgb(247,138,52)"/><text x="56.1213%" y="175.50"></text></g><g><title>region_scope_tree (1,308,685 samples, 0.29%)</title><rect x="56.7171%" y="149" width="0.2942%" height="15" fill="rgb(213,79,30)"/><text x="56.9671%" y="159.50"></text></g><g><title>analysis (251,950,876 samples, 56.63%)</title><rect x="0.3919%" y="213" width="56.6305%" height="15" fill="rgb(246,177,23)"/><text x="0.6419%" y="223.50">analysis</text></g><g><title>type_check_crate (89,001,147 samples, 20.00%)</title><rect x="37.0178%" y="197" width="20.0046%" height="15" fill="rgb(230,62,27)"/><text x="37.2678%" y="207.50">type_check_crate</text></g><g><title>wf_checking (5,464,641 samples, 1.23%)</title><rect x="55.7942%" y="181" width="1.2283%" height="15" fill="rgb(216,154,8)"/><text x="56.0442%" y="191.50"></text></g><g><title>check_item_well_formed (3,043,354 samples, 0.68%)</title><rect x="56.3384%" y="165" width="0.6840%" height="15" fill="rgb(244,35,45)"/><text x="56.5884%" y="175.50"></text></g><g><title>AST_validation (937,730 samples, 0.21%)</title><rect x="57.1269%" y="197" width="0.2108%" height="15" fill="rgb(251,115,12)"/><text x="57.3769%" y="207.50"></text></g><g><title>complete_gated_feature_checking (462,645 samples, 0.10%)</title><rect x="57.3376%" y="197" width="0.1040%" height="15" fill="rgb(240,54,50)"/><text x="57.5876%" y="207.50"></text></g><g><title>macro_expand_crate (110,217,423 samples, 24.77%)</title><rect x="57.4534%" y="197" width="24.7734%" height="15" fill="rgb(233,84,52)"/><text x="57.7034%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (110,196,613 samples, 24.77%)</title><rect x="57.4581%" y="181" width="24.7687%" height="15" fill="rgb(207,117,47)"/><text x="57.7081%" y="191.50">expand_crate</text></g><g><title>finalize_macro_resolutions (2,019,973 samples, 0.45%)</title><rect x="82.2807%" y="181" width="0.4540%" height="15" fill="rgb(249,43,39)"/><text x="82.5307%" y="191.50"></text></g><g><title>late_resolve_crate (11,082,193 samples, 2.49%)</title><rect x="82.7347%" y="181" width="2.4909%" height="15" fill="rgb(209,38,44)"/><text x="82.9847%" y="191.50">la..</text></g><g><title>resolve_check_unused (1,021,942 samples, 0.23%)</title><rect x="85.2547%" y="181" width="0.2297%" height="15" fill="rgb(236,212,23)"/><text x="85.5047%" y="191.50"></text></g><g><title>resolve_postprocess (547,636 samples, 0.12%)</title><rect x="85.4845%" y="181" width="0.1231%" height="15" fill="rgb(242,79,21)"/><text x="85.7345%" y="191.50"></text></g><g><title>configure_and_expand (126,859,998 samples, 28.51%)</title><rect x="57.0938%" y="213" width="28.5141%" height="15" fill="rgb(211,96,35)"/><text x="57.3438%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (14,968,787 samples, 3.36%)</title><rect x="82.2433%" y="197" width="3.3645%" height="15" fill="rgb(253,215,40)"/><text x="82.4933%" y="207.50">res..</text></g><g><title>drop_ast (1,650,018 samples, 0.37%)</title><rect x="85.6078%" y="213" width="0.3709%" height="15" fill="rgb(211,81,21)"/><text x="85.8578%" y="223.50"></text></g><g><title>early_lint_checks (4,038,085 samples, 0.91%)</title><rect x="85.9823%" y="213" width="0.9076%" height="15" fill="rgb(208,190,38)"/><text x="86.2323%" y="223.50"></text></g><g><title>free_global_ctxt (3,797,411 samples, 0.85%)</title><rect x="86.8900%" y="213" width="0.8535%" height="15" fill="rgb(235,213,38)"/><text x="87.1400%" y="223.50"></text></g><g><title>generate_crate_metadata (29,459,487 samples, 6.62%)</title><rect x="87.7435%" y="213" width="6.6216%" height="15" fill="rgb(237,122,38)"/><text x="87.9935%" y="223.50">generate_..</text></g><g><title>hir_lowering (21,650,950 samples, 4.87%)</title><rect x="94.3650%" y="213" width="4.8664%" height="15" fill="rgb(244,218,35)"/><text x="94.6150%" y="223.50">hir_lo..</text></g><g><title>self_profile_alloc_query_strings (839,490 samples, 0.19%)</title><rect x="99.3994%" y="213" width="0.1887%" height="15" fill="rgb(240,68,47)"/><text x="99.6494%" y="223.50"></text></g><g><title>all (444,902,907 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (444,902,907 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (1,757,270 samples, 0.39%)</title><rect x="99.6050%" y="213" width="0.3950%" height="15" fill="rgb(224,169,11)"/><text x="99.8550%" y="223.50"></text></g></svg></svg>