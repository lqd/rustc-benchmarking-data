<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (928,185 samples, 0.12%)</title><rect x="15.5447%" y="133" width="0.1156%" height="15" fill="rgb(227,0,7)"/><text x="15.7947%" y="143.50"></text></g><g><title>is_late_bound_map (1,020,683 samples, 0.13%)</title><rect x="15.6611%" y="133" width="0.1272%" height="15" fill="rgb(217,0,24)"/><text x="15.9111%" y="143.50"></text></g><g><title>mir_promoted (1,310,944 samples, 0.16%)</title><rect x="16.0436%" y="117" width="0.1633%" height="15" fill="rgb(221,193,54)"/><text x="16.2936%" y="127.50"></text></g><g><title>mir_const_qualif_const_arg (1,108,083 samples, 0.14%)</title><rect x="16.0689%" y="101" width="0.1381%" height="15" fill="rgb(248,212,6)"/><text x="16.3189%" y="111.50"></text></g><g><title>mir_const (935,420 samples, 0.12%)</title><rect x="16.0904%" y="85" width="0.1165%" height="15" fill="rgb(208,68,35)"/><text x="16.3404%" y="95.50"></text></g><g><title>mir_borrowck_const_arg (3,228,944 samples, 0.40%)</title><rect x="15.8059%" y="133" width="0.4023%" height="15" fill="rgb(232,128,0)"/><text x="16.0559%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,108,900 samples, 0.14%)</title><rect x="18.8830%" y="85" width="0.1382%" height="15" fill="rgb(207,160,47)"/><text x="19.1330%" y="95.50"></text></g><g><title>needs_drop_raw (10,059,942 samples, 1.25%)</title><rect x="22.6211%" y="69" width="1.2534%" height="15" fill="rgb(228,23,34)"/><text x="22.8711%" y="79.50"></text></g><g><title>is_copy_raw (9,032,662 samples, 1.13%)</title><rect x="22.7491%" y="53" width="1.1254%" height="15" fill="rgb(218,30,26)"/><text x="22.9991%" y="63.50"></text></g><g><title>evaluate_obligation (7,583,797 samples, 0.94%)</title><rect x="22.9296%" y="37" width="0.9449%" height="15" fill="rgb(220,122,19)"/><text x="23.1796%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (3,032,192 samples, 0.38%)</title><rect x="24.0945%" y="53" width="0.3778%" height="15" fill="rgb(250,228,42)"/><text x="24.3445%" y="63.50"></text></g><g><title>resolve_instance (5,588,372 samples, 0.70%)</title><rect x="23.8779%" y="69" width="0.6963%" height="15" fill="rgb(240,193,28)"/><text x="24.1279%" y="79.50"></text></g><g><title>thir_body (10,369,883 samples, 1.29%)</title><rect x="24.6141%" y="69" width="1.2920%" height="15" fill="rgb(216,20,37)"/><text x="24.8641%" y="79.50"></text></g><g><title>mir_const (70,454,207 samples, 8.78%)</title><rect x="17.2042%" y="117" width="8.7782%" height="15" fill="rgb(206,188,39)"/><text x="17.4542%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (61,582,711 samples, 7.67%)</title><rect x="18.3095%" y="101" width="7.6729%" height="15" fill="rgb(217,207,13)"/><text x="18.5595%" y="111.50">unsafety_ch..</text></g><g><title>mir_built (55,870,921 samples, 6.96%)</title><rect x="19.0212%" y="85" width="6.9612%" height="15" fill="rgb(231,73,38)"/><text x="19.2712%" y="95.50">mir_built</text></g><g><title>mir_const (1,846,691 samples, 0.23%)</title><rect x="26.2040%" y="101" width="0.2301%" height="15" fill="rgb(225,20,46)"/><text x="26.4540%" y="111.50"></text></g><g><title>unsafety_check_result (1,352,872 samples, 0.17%)</title><rect x="26.2655%" y="85" width="0.1686%" height="15" fill="rgb(210,31,41)"/><text x="26.5155%" y="95.50"></text></g><g><title>mir_built (1,148,681 samples, 0.14%)</title><rect x="26.2910%" y="69" width="0.1431%" height="15" fill="rgb(221,200,47)"/><text x="26.5410%" y="79.50"></text></g><g><title>mir_const_qualif (3,690,397 samples, 0.46%)</title><rect x="25.9824%" y="117" width="0.4598%" height="15" fill="rgb(226,26,5)"/><text x="26.2324%" y="127.50"></text></g><g><title>mir_promoted (82,140,924 samples, 10.23%)</title><rect x="16.2082%" y="133" width="10.2343%" height="15" fill="rgb(249,33,26)"/><text x="16.4582%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,767,960 samples, 0.47%)</title><rect x="26.4450%" y="133" width="0.4695%" height="15" fill="rgb(235,183,28)"/><text x="26.6950%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,020,809 samples, 0.63%)</title><rect x="26.9145%" y="133" width="0.6256%" height="15" fill="rgb(221,5,38)"/><text x="27.1645%" y="143.50"></text></g><g><title>normalize_projection_ty (3,221,684 samples, 0.40%)</title><rect x="27.1387%" y="117" width="0.4014%" height="15" fill="rgb(247,18,42)"/><text x="27.3887%" y="127.50"></text></g><g><title>type_op_normalize_predicate (3,086,844 samples, 0.38%)</title><rect x="27.5401%" y="133" width="0.3846%" height="15" fill="rgb(241,131,45)"/><text x="27.7901%" y="143.50"></text></g><g><title>normalize_projection_ty (1,881,867 samples, 0.23%)</title><rect x="27.6902%" y="117" width="0.2345%" height="15" fill="rgb(249,31,29)"/><text x="27.9402%" y="127.50"></text></g><g><title>type_op_prove_predicate (22,121,021 samples, 2.76%)</title><rect x="27.9848%" y="133" width="2.7562%" height="15" fill="rgb(225,111,53)"/><text x="28.2348%" y="143.50">ty..</text></g><g><title>evaluate_obligation (1,024,784 samples, 0.13%)</title><rect x="30.6133%" y="117" width="0.1277%" height="15" fill="rgb(238,160,17)"/><text x="30.8633%" y="127.50"></text></g><g><title>MIR_borrow_checking (242,918,592 samples, 30.27%)</title><rect x="0.4790%" y="165" width="30.2664%" height="15" fill="rgb(214,148,48)"/><text x="0.7290%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (241,350,242 samples, 30.07%)</title><rect x="0.6744%" y="149" width="30.0710%" height="15" fill="rgb(232,36,49)"/><text x="0.9244%" y="159.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (1,539,797 samples, 0.19%)</title><rect x="30.8329%" y="149" width="0.1919%" height="15" fill="rgb(209,103,24)"/><text x="31.0829%" y="159.50"></text></g><g><title>MIR_effect_checking (2,260,905 samples, 0.28%)</title><rect x="30.7454%" y="165" width="0.2817%" height="15" fill="rgb(229,88,8)"/><text x="30.9954%" y="175.50"></text></g><g><title>hir_module_items (1,931,572 samples, 0.24%)</title><rect x="31.0271%" y="165" width="0.2407%" height="15" fill="rgb(213,181,19)"/><text x="31.2771%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,720,799 samples, 0.21%)</title><rect x="31.5850%" y="133" width="0.2144%" height="15" fill="rgb(254,191,54)"/><text x="31.8350%" y="143.50"></text></g><g><title>should_inherit_track_caller (1,364,839 samples, 0.17%)</title><rect x="31.6293%" y="117" width="0.1701%" height="15" fill="rgb(241,83,37)"/><text x="31.8793%" y="127.50"></text></g><g><title>check_mod_attrs (4,174,759 samples, 0.52%)</title><rect x="31.2793%" y="149" width="0.5202%" height="15" fill="rgb(233,36,39)"/><text x="31.5293%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,070,014 samples, 0.13%)</title><rect x="31.7994%" y="149" width="0.1333%" height="15" fill="rgb(226,3,54)"/><text x="32.0494%" y="159.50"></text></g><g><title>lookup_deprecation_entry (1,135,712 samples, 0.14%)</title><rect x="32.1607%" y="133" width="0.1415%" height="15" fill="rgb(245,192,40)"/><text x="32.4107%" y="143.50"></text></g><g><title>stability_index (1,062,122 samples, 0.13%)</title><rect x="32.1699%" y="117" width="0.1323%" height="15" fill="rgb(238,167,29)"/><text x="32.4199%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (2,257,401 samples, 0.28%)</title><rect x="32.0376%" y="149" width="0.2813%" height="15" fill="rgb(232,182,51)"/><text x="32.2876%" y="159.50"></text></g><g><title>misc_checking_1 (8,823,369 samples, 1.10%)</title><rect x="31.2678%" y="165" width="1.0993%" height="15" fill="rgb(231,60,39)"/><text x="31.5178%" y="175.50"></text></g><g><title>check_mod_intrinsics (828,267 samples, 0.10%)</title><rect x="32.3729%" y="133" width="0.1032%" height="15" fill="rgb(208,69,12)"/><text x="32.6229%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (4,482,359 samples, 0.56%)</title><rect x="32.3676%" y="149" width="0.5585%" height="15" fill="rgb(235,93,37)"/><text x="32.6176%" y="159.50"></text></g><g><title>check_mod_liveness (3,611,302 samples, 0.45%)</title><rect x="32.4761%" y="133" width="0.4499%" height="15" fill="rgb(213,116,39)"/><text x="32.7261%" y="143.50"></text></g><g><title>misc_checking_2 (12,673,281 samples, 1.58%)</title><rect x="32.3672%" y="165" width="1.5790%" height="15" fill="rgb(222,207,29)"/><text x="32.6172%" y="175.50"></text></g><g><title>match_checking (8,187,642 samples, 1.02%)</title><rect x="32.9260%" y="149" width="1.0201%" height="15" fill="rgb(206,96,30)"/><text x="33.1760%" y="159.50"></text></g><g><title>check_match (7,693,049 samples, 0.96%)</title><rect x="32.9877%" y="133" width="0.9585%" height="15" fill="rgb(218,138,4)"/><text x="33.2377%" y="143.50"></text></g><g><title>check_private_in_public (2,194,855 samples, 0.27%)</title><rect x="33.9480%" y="149" width="0.2735%" height="15" fill="rgb(250,191,14)"/><text x="34.1980%" y="159.50"></text></g><g><title>codegen_fn_attrs (940,592 samples, 0.12%)</title><rect x="34.6281%" y="133" width="0.1172%" height="15" fill="rgb(239,60,40)"/><text x="34.8781%" y="143.50"></text></g><g><title>death_checking (4,507,480 samples, 0.56%)</title><rect x="34.2215%" y="149" width="0.5616%" height="15" fill="rgb(206,27,48)"/><text x="34.4715%" y="159.50"></text></g><g><title>param_env (2,589,972 samples, 0.32%)</title><rect x="37.1170%" y="117" width="0.3227%" height="15" fill="rgb(225,35,8)"/><text x="37.3670%" y="127.50"></text></g><g><title>predicates_of (1,204,358 samples, 0.15%)</title><rect x="37.2896%" y="101" width="0.1501%" height="15" fill="rgb(250,213,24)"/><text x="37.5396%" y="111.50"></text></g><g><title>predicates_defined_on (978,057 samples, 0.12%)</title><rect x="37.3178%" y="85" width="0.1219%" height="15" fill="rgb(247,123,22)"/><text x="37.5678%" y="95.50"></text></g><g><title>crate_lints (21,809,854 samples, 2.72%)</title><rect x="34.7835%" y="133" width="2.7174%" height="15" fill="rgb(231,138,38)"/><text x="35.0335%" y="143.50">cr..</text></g><g><title>lint_checking (26,542,986 samples, 3.31%)</title><rect x="34.7831%" y="149" width="3.3071%" height="15" fill="rgb(231,145,46)"/><text x="35.0331%" y="159.50">lin..</text></g><g><title>module_lints (4,729,652 samples, 0.59%)</title><rect x="37.5009%" y="133" width="0.5893%" height="15" fill="rgb(251,118,11)"/><text x="37.7509%" y="143.50"></text></g><g><title>lint_mod (4,698,362 samples, 0.59%)</title><rect x="37.5048%" y="117" width="0.5854%" height="15" fill="rgb(217,147,25)"/><text x="37.7548%" y="127.50"></text></g><g><title>privacy_access_levels (3,029,154 samples, 0.38%)</title><rect x="38.0902%" y="149" width="0.3774%" height="15" fill="rgb(247,81,37)"/><text x="38.3402%" y="159.50"></text></g><g><title>privacy_checking_modules (8,942,130 samples, 1.11%)</title><rect x="38.4676%" y="149" width="1.1141%" height="15" fill="rgb(209,12,38)"/><text x="38.7176%" y="159.50"></text></g><g><title>check_mod_privacy (8,914,370 samples, 1.11%)</title><rect x="38.4711%" y="133" width="1.1107%" height="15" fill="rgb(227,1,9)"/><text x="38.7211%" y="143.50"></text></g><g><title>misc_checking_3 (45,325,456 samples, 5.65%)</title><rect x="33.9462%" y="165" width="5.6473%" height="15" fill="rgb(248,47,43)"/><text x="34.1962%" y="175.50">misc_ch..</text></g><g><title>impl_parent (1,357,802 samples, 0.17%)</title><rect x="40.3392%" y="101" width="0.1692%" height="15" fill="rgb(221,10,30)"/><text x="40.5892%" y="111.50"></text></g><g><title>impl_trait_ref (2,534,717 samples, 0.32%)</title><rect x="40.5089%" y="101" width="0.3158%" height="15" fill="rgb(210,229,1)"/><text x="40.7589%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,938,710 samples, 0.24%)</title><rect x="40.5831%" y="85" width="0.2416%" height="15" fill="rgb(222,148,37)"/><text x="40.8331%" y="95.50"></text></g><g><title>coherent_trait (9,718,177 samples, 1.21%)</title><rect x="39.6947%" y="133" width="1.2108%" height="15" fill="rgb(234,67,33)"/><text x="39.9447%" y="143.50"></text></g><g><title>specialization_graph_of (9,087,511 samples, 1.13%)</title><rect x="39.7733%" y="117" width="1.1323%" height="15" fill="rgb(247,98,35)"/><text x="40.0233%" y="127.50"></text></g><g><title>coherence_checking (10,172,593 samples, 1.27%)</title><rect x="39.6906%" y="149" width="1.2675%" height="15" fill="rgb(247,138,52)"/><text x="39.9406%" y="159.50"></text></g><g><title>associated_item (868,600 samples, 0.11%)</title><rect x="62.8048%" y="85" width="0.1082%" height="15" fill="rgb(213,79,30)"/><text x="63.0548%" y="95.50"></text></g><g><title>associated_items (1,240,154 samples, 0.15%)</title><rect x="62.7643%" y="101" width="0.1545%" height="15" fill="rgb(246,177,23)"/><text x="63.0143%" y="111.50"></text></g><g><title>dropck_outlives (1,539,677 samples, 0.19%)</title><rect x="62.9409%" y="101" width="0.1918%" height="15" fill="rgb(230,62,27)"/><text x="63.1909%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,428,695 samples, 0.18%)</title><rect x="63.1327%" y="101" width="0.1780%" height="15" fill="rgb(216,154,8)"/><text x="63.3827%" y="111.50"></text></g><g><title>generics_of (1,258,146 samples, 0.16%)</title><rect x="64.8712%" y="85" width="0.1568%" height="15" fill="rgb(244,35,45)"/><text x="65.1212%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (913,743 samples, 0.11%)</title><rect x="64.9142%" y="69" width="0.1138%" height="15" fill="rgb(251,115,12)"/><text x="65.1642%" y="79.50"></text></g><g><title>impl_trait_ref (1,294,606 samples, 0.16%)</title><rect x="65.0680%" y="85" width="0.1613%" height="15" fill="rgb(240,54,50)"/><text x="65.3180%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,055,553 samples, 0.13%)</title><rect x="65.0978%" y="69" width="0.1315%" height="15" fill="rgb(233,84,52)"/><text x="65.3478%" y="79.50"></text></g><g><title>predicates_of (1,343,036 samples, 0.17%)</title><rect x="65.2394%" y="85" width="0.1673%" height="15" fill="rgb(207,117,47)"/><text x="65.4894%" y="95.50"></text></g><g><title>specializes (3,103,668 samples, 0.39%)</title><rect x="65.4067%" y="85" width="0.3867%" height="15" fill="rgb(249,43,39)"/><text x="65.6567%" y="95.50"></text></g><g><title>param_env (1,731,927 samples, 0.22%)</title><rect x="65.5776%" y="69" width="0.2158%" height="15" fill="rgb(209,38,44)"/><text x="65.8276%" y="79.50"></text></g><g><title>evaluate_obligation (20,244,820 samples, 2.52%)</title><rect x="63.3107%" y="101" width="2.5224%" height="15" fill="rgb(236,212,23)"/><text x="63.5607%" y="111.50">ev..</text></g><g><title>method_autoderef_steps (1,458,348 samples, 0.18%)</title><rect x="66.0369%" y="101" width="0.1817%" height="15" fill="rgb(242,79,21)"/><text x="66.2869%" y="111.50"></text></g><g><title>dropck_outlives (1,026,223 samples, 0.13%)</title><rect x="72.1473%" y="85" width="0.1279%" height="15" fill="rgb(211,96,35)"/><text x="72.3973%" y="95.50"></text></g><g><title>specializes (954,980 samples, 0.12%)</title><rect x="72.8445%" y="69" width="0.1190%" height="15" fill="rgb(253,215,40)"/><text x="73.0945%" y="79.50"></text></g><g><title>evaluate_obligation (5,571,326 samples, 0.69%)</title><rect x="72.2752%" y="85" width="0.6942%" height="15" fill="rgb(211,81,21)"/><text x="72.5252%" y="95.50"></text></g><g><title>is_copy_raw (1,369,106 samples, 0.17%)</title><rect x="73.0520%" y="85" width="0.1706%" height="15" fill="rgb(208,190,38)"/><text x="73.3020%" y="95.50"></text></g><g><title>evaluate_obligation (1,078,425 samples, 0.13%)</title><rect x="73.0882%" y="69" width="0.1344%" height="15" fill="rgb(235,213,38)"/><text x="73.3382%" y="79.50"></text></g><g><title>method_autoderef_steps (1,315,299 samples, 0.16%)</title><rect x="73.2391%" y="85" width="0.1639%" height="15" fill="rgb(237,122,38)"/><text x="73.4891%" y="95.50"></text></g><g><title>typeck (56,446,470 samples, 7.03%)</title><rect x="66.4613%" y="101" width="7.0329%" height="15" fill="rgb(244,218,35)"/><text x="66.7113%" y="111.50">typeck</text></g><g><title>typeck_const_arg (2,039,780 samples, 0.25%)</title><rect x="73.4942%" y="101" width="0.2541%" height="15" fill="rgb(240,68,47)"/><text x="73.7442%" y="111.50"></text></g><g><title>item_bodies_checking (262,951,506 samples, 32.76%)</title><rect x="41.0208%" y="149" width="32.7624%" height="15" fill="rgb(210,16,53)"/><text x="41.2708%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (262,947,536 samples, 32.76%)</title><rect x="41.0213%" y="133" width="32.7619%" height="15" fill="rgb(235,124,12)"/><text x="41.2713%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (261,921,473 samples, 32.63%)</title><rect x="41.1491%" y="117" width="32.6340%" height="15" fill="rgb(224,169,11)"/><text x="41.3991%" y="127.50">typeck</text></g><g><title>evaluate_obligation (1,933,521 samples, 0.24%)</title><rect x="75.3625%" y="101" width="0.2409%" height="15" fill="rgb(250,166,2)"/><text x="75.6125%" y="111.50"></text></g><g><title>item_types_checking (14,746,724 samples, 1.84%)</title><rect x="73.7832%" y="149" width="1.8374%" height="15" fill="rgb(242,216,29)"/><text x="74.0332%" y="159.50">i..</text></g><g><title>check_mod_item_types (14,710,474 samples, 1.83%)</title><rect x="73.7877%" y="133" width="1.8328%" height="15" fill="rgb(230,116,27)"/><text x="74.0377%" y="143.50">c..</text></g><g><title>typeck (3,206,935 samples, 0.40%)</title><rect x="75.2210%" y="117" width="0.3996%" height="15" fill="rgb(228,99,48)"/><text x="75.4710%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,153,915 samples, 0.27%)</title><rect x="75.9480%" y="117" width="0.2684%" height="15" fill="rgb(253,11,6)"/><text x="76.1980%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,133,644 samples, 0.27%)</title><rect x="75.9505%" y="101" width="0.2658%" height="15" fill="rgb(247,143,39)"/><text x="76.2005%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,122,504 samples, 0.26%)</title><rect x="75.9519%" y="85" width="0.2645%" height="15" fill="rgb(236,97,10)"/><text x="76.2019%" y="95.50"></text></g><g><title>fn_sig (2,020,945 samples, 0.25%)</title><rect x="76.2163%" y="117" width="0.2518%" height="15" fill="rgb(233,208,19)"/><text x="76.4663%" y="127.50"></text></g><g><title>resolve_lifetimes (2,736,532 samples, 0.34%)</title><rect x="76.6420%" y="85" width="0.3410%" height="15" fill="rgb(216,164,2)"/><text x="76.8920%" y="95.50"></text></g><g><title>is_late_bound_map (2,975,342 samples, 0.37%)</title><rect x="76.6134%" y="101" width="0.3707%" height="15" fill="rgb(220,129,5)"/><text x="76.8634%" y="111.50"></text></g><g><title>named_region_map (1,118,502 samples, 0.14%)</title><rect x="76.9841%" y="101" width="0.1394%" height="15" fill="rgb(242,17,10)"/><text x="77.2341%" y="111.50"></text></g><g><title>resolve_lifetimes (946,610 samples, 0.12%)</title><rect x="77.0055%" y="85" width="0.1179%" height="15" fill="rgb(242,107,0)"/><text x="77.2555%" y="95.50"></text></g><g><title>generics_of (5,381,005 samples, 0.67%)</title><rect x="76.4681%" y="117" width="0.6704%" height="15" fill="rgb(251,28,31)"/><text x="76.7181%" y="127.50"></text></g><g><title>late_bound_vars_map (2,599,037 samples, 0.32%)</title><rect x="77.5709%" y="69" width="0.3238%" height="15" fill="rgb(233,223,10)"/><text x="77.8209%" y="79.50"></text></g><g><title>resolve_lifetimes (2,563,247 samples, 0.32%)</title><rect x="77.5754%" y="53" width="0.3194%" height="15" fill="rgb(215,21,27)"/><text x="77.8254%" y="63.50"></text></g><g><title>lint_levels (2,133,993 samples, 0.27%)</title><rect x="77.6289%" y="37" width="0.2659%" height="15" fill="rgb(232,23,21)"/><text x="77.8789%" y="47.50"></text></g><g><title>explicit_predicates_of (3,952,787 samples, 0.49%)</title><rect x="77.4126%" y="85" width="0.4925%" height="15" fill="rgb(244,5,23)"/><text x="77.6626%" y="95.50"></text></g><g><title>predicates_of (6,335,327 samples, 0.79%)</title><rect x="77.2258%" y="117" width="0.7893%" height="15" fill="rgb(226,81,46)"/><text x="77.4758%" y="127.50"></text></g><g><title>predicates_defined_on (5,841,102 samples, 0.73%)</title><rect x="77.2874%" y="101" width="0.7278%" height="15" fill="rgb(247,70,30)"/><text x="77.5374%" y="111.50"></text></g><g><title>inferred_outlives_of (883,650 samples, 0.11%)</title><rect x="77.9051%" y="85" width="0.1101%" height="15" fill="rgb(212,68,19)"/><text x="78.1551%" y="95.50"></text></g><g><title>type_collecting (20,196,545 samples, 2.52%)</title><rect x="75.6240%" y="149" width="2.5164%" height="15" fill="rgb(240,187,13)"/><text x="75.8740%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (20,142,333 samples, 2.51%)</title><rect x="75.6308%" y="133" width="2.5096%" height="15" fill="rgb(223,113,26)"/><text x="75.8808%" y="143.50">co..</text></g><g><title>type_of (940,085 samples, 0.12%)</title><rect x="78.0233%" y="117" width="0.1171%" height="15" fill="rgb(206,192,2)"/><text x="78.2733%" y="127.50"></text></g><g><title>evaluate_obligation (2,476,854 samples, 0.31%)</title><rect x="80.8213%" y="117" width="0.3086%" height="15" fill="rgb(241,108,4)"/><text x="81.0713%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,534,642 samples, 0.19%)</title><rect x="81.1309%" y="117" width="0.1912%" height="15" fill="rgb(247,173,49)"/><text x="81.3809%" y="127.50"></text></g><g><title>param_env (3,076,472 samples, 0.38%)</title><rect x="81.3221%" y="117" width="0.3833%" height="15" fill="rgb(224,114,35)"/><text x="81.5721%" y="127.50"></text></g><g><title>region_scope_tree (3,936,612 samples, 0.49%)</title><rect x="81.7122%" y="117" width="0.4905%" height="15" fill="rgb(245,159,27)"/><text x="81.9622%" y="127.50"></text></g><g><title>check_impl_item_well_formed (30,110,585 samples, 3.75%)</title><rect x="78.4519%" y="133" width="3.7516%" height="15" fill="rgb(245,172,44)"/><text x="78.7019%" y="143.50">chec..</text></g><g><title>evaluate_obligation (2,278,040 samples, 0.28%)</title><rect x="84.2489%" y="117" width="0.2838%" height="15" fill="rgb(236,23,11)"/><text x="84.4989%" y="127.50"></text></g><g><title>param_env (2,248,124 samples, 0.28%)</title><rect x="84.6203%" y="117" width="0.2801%" height="15" fill="rgb(205,117,38)"/><text x="84.8703%" y="127.50"></text></g><g><title>check_item_well_formed (22,697,605 samples, 2.83%)</title><rect x="82.2035%" y="133" width="2.8280%" height="15" fill="rgb(237,72,25)"/><text x="82.4535%" y="143.50">ch..</text></g><g><title>analysis (681,967,074 samples, 84.97%)</title><rect x="0.2104%" y="181" width="84.9695%" height="15" fill="rgb(244,70,9)"/><text x="0.4604%" y="191.50">analysis</text></g><g><title>type_check_crate (365,877,184 samples, 45.59%)</title><rect x="39.5935%" y="165" width="45.5864%" height="15" fill="rgb(217,125,39)"/><text x="39.8435%" y="175.50">type_check_crate</text></g><g><title>wf_checking (56,432,620 samples, 7.03%)</title><rect x="78.1487%" y="149" width="7.0312%" height="15" fill="rgb(235,36,10)"/><text x="78.3987%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (1,190,385 samples, 0.15%)</title><rect x="85.0315%" y="133" width="0.1483%" height="15" fill="rgb(251,123,47)"/><text x="85.2815%" y="143.50"></text></g><g><title>AST_validation (914,710 samples, 0.11%)</title><rect x="85.2430%" y="165" width="0.1140%" height="15" fill="rgb(221,13,13)"/><text x="85.4930%" y="175.50"></text></g><g><title>macro_expand_crate (46,783,662 samples, 5.83%)</title><rect x="85.4260%" y="165" width="5.8290%" height="15" fill="rgb(238,131,9)"/><text x="85.6760%" y="175.50">macro_e..</text></g><g><title>expand_crate (46,761,711 samples, 5.83%)</title><rect x="85.4288%" y="149" width="5.8263%" height="15" fill="rgb(211,50,8)"/><text x="85.6788%" y="159.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (1,195,177 samples, 0.15%)</title><rect x="91.1061%" y="133" width="0.1489%" height="15" fill="rgb(245,182,24)"/><text x="91.3561%" y="143.50"></text></g><g><title>late_resolve_crate (10,943,093 samples, 1.36%)</title><rect x="91.3915%" y="149" width="1.3635%" height="15" fill="rgb(242,14,37)"/><text x="91.6415%" y="159.50"></text></g><g><title>resolve_check_unused (816,829 samples, 0.10%)</title><rect x="92.7650%" y="149" width="0.1018%" height="15" fill="rgb(246,228,12)"/><text x="93.0150%" y="159.50"></text></g><g><title>configure_and_expand (61,784,280 samples, 7.70%)</title><rect x="85.2218%" y="181" width="7.6980%" height="15" fill="rgb(213,55,15)"/><text x="85.4718%" y="191.50">configure_a..</text></g><g><title>resolve_crate (13,267,169 samples, 1.65%)</title><rect x="91.2668%" y="165" width="1.6530%" height="15" fill="rgb(209,9,3)"/><text x="91.5168%" y="175.50"></text></g><g><title>drop_ast (1,769,939 samples, 0.22%)</title><rect x="92.9198%" y="181" width="0.2205%" height="15" fill="rgb(230,59,30)"/><text x="93.1698%" y="191.50"></text></g><g><title>early_lint_checks (3,200,095 samples, 0.40%)</title><rect x="93.1423%" y="181" width="0.3987%" height="15" fill="rgb(209,121,21)"/><text x="93.3923%" y="191.50"></text></g><g><title>free_global_ctxt (7,094,470 samples, 0.88%)</title><rect x="93.5410%" y="181" width="0.8839%" height="15" fill="rgb(220,109,13)"/><text x="93.7910%" y="191.50"></text></g><g><title>mir_for_ctfe (1,266,597 samples, 0.16%)</title><rect x="95.6121%" y="165" width="0.1578%" height="15" fill="rgb(232,18,1)"/><text x="95.8621%" y="175.50"></text></g><g><title>generate_crate_metadata (11,555,398 samples, 1.44%)</title><rect x="94.4250%" y="181" width="1.4397%" height="15" fill="rgb(215,41,42)"/><text x="94.6750%" y="191.50"></text></g><g><title>hir_lowering (28,734,071 samples, 3.58%)</title><rect x="95.8647%" y="181" width="3.5801%" height="15" fill="rgb(224,123,36)"/><text x="96.1147%" y="191.50">hir_..</text></g><g><title>self_profile_alloc_query_strings (2,633,879 samples, 0.33%)</title><rect x="99.5577%" y="181" width="0.3282%" height="15" fill="rgb(240,125,3)"/><text x="99.8077%" y="191.50"></text></g><g><title>all (802,602,120 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (802,602,120 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>