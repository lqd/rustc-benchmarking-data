<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (374,233 samples, 0.17%)</title><rect x="9.4306%" y="165" width="0.1691%" height="15" fill="rgb(227,0,7)"/><text x="9.6806%" y="175.50"></text></g><g><title>param_env (668,670 samples, 0.30%)</title><rect x="10.9577%" y="133" width="0.3021%" height="15" fill="rgb(217,0,24)"/><text x="11.2077%" y="143.50"></text></g><g><title>item_attrs (664,536 samples, 0.30%)</title><rect x="11.6783%" y="101" width="0.3002%" height="15" fill="rgb(221,193,54)"/><text x="11.9283%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (641,026 samples, 0.29%)</title><rect x="11.6890%" y="85" width="0.2896%" height="15" fill="rgb(248,212,6)"/><text x="11.9390%" y="95.50"></text></g><g><title>codegen_fn_attrs (884,507 samples, 0.40%)</title><rect x="11.5940%" y="117" width="0.3996%" height="15" fill="rgb(208,68,35)"/><text x="11.8440%" y="127.50"></text></g><g><title>adt_drop_tys (240,300 samples, 0.11%)</title><rect x="14.0799%" y="69" width="0.1086%" height="15" fill="rgb(232,128,0)"/><text x="14.3299%" y="79.50"></text></g><g><title>is_copy_raw (224,922 samples, 0.10%)</title><rect x="14.1905%" y="69" width="0.1016%" height="15" fill="rgb(207,160,47)"/><text x="14.4405%" y="79.50"></text></g><g><title>param_env (228,312 samples, 0.10%)</title><rect x="14.2921%" y="69" width="0.1031%" height="15" fill="rgb(228,23,34)"/><text x="14.5421%" y="79.50"></text></g><g><title>adt_drop_tys (844,296 samples, 0.38%)</title><rect x="14.0467%" y="85" width="0.3814%" height="15" fill="rgb(218,30,26)"/><text x="14.2967%" y="95.50"></text></g><g><title>is_copy_raw (2,440,474 samples, 1.10%)</title><rect x="14.4290%" y="85" width="1.1025%" height="15" fill="rgb(220,122,19)"/><text x="14.6790%" y="95.50"></text></g><g><title>evaluate_obligation (2,079,922 samples, 0.94%)</title><rect x="14.5919%" y="69" width="0.9397%" height="15" fill="rgb(250,228,42)"/><text x="14.8419%" y="79.50"></text></g><g><title>needs_drop_raw (3,613,272 samples, 1.63%)</title><rect x="13.9083%" y="101" width="1.6324%" height="15" fill="rgb(240,193,28)"/><text x="14.1583%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (765,628 samples, 0.35%)</title><rect x="15.6804%" y="85" width="0.3459%" height="15" fill="rgb(216,20,37)"/><text x="15.9304%" y="95.50"></text></g><g><title>specialization_graph_of (1,043,042 samples, 0.47%)</title><rect x="16.0519%" y="85" width="0.4712%" height="15" fill="rgb(206,188,39)"/><text x="16.3019%" y="95.50"></text></g><g><title>impl_trait_ref (532,016 samples, 0.24%)</title><rect x="16.2828%" y="69" width="0.2404%" height="15" fill="rgb(217,207,13)"/><text x="16.5328%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (469,245 samples, 0.21%)</title><rect x="16.3112%" y="53" width="0.2120%" height="15" fill="rgb(231,73,38)"/><text x="16.5612%" y="63.50"></text></g><g><title>resolve_instance (2,287,643 samples, 1.03%)</title><rect x="15.5407%" y="101" width="1.0335%" height="15" fill="rgb(225,20,46)"/><text x="15.7907%" y="111.50"></text></g><g><title>thir_body (1,358,856 samples, 0.61%)</title><rect x="16.6007%" y="101" width="0.6139%" height="15" fill="rgb(210,31,41)"/><text x="16.8507%" y="111.50"></text></g><g><title>mir_const (15,350,407 samples, 6.93%)</title><rect x="10.3551%" y="149" width="6.9349%" height="15" fill="rgb(221,200,47)"/><text x="10.6051%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (13,347,765 samples, 6.03%)</title><rect x="11.2598%" y="133" width="6.0302%" height="15" fill="rgb(226,26,5)"/><text x="11.5098%" y="143.50">unsafety..</text></g><g><title>mir_built (11,723,461 samples, 5.30%)</title><rect x="11.9936%" y="117" width="5.2964%" height="15" fill="rgb(249,33,26)"/><text x="12.2436%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (17,194,332 samples, 7.77%)</title><rect x="9.7495%" y="165" width="7.7680%" height="15" fill="rgb(235,183,28)"/><text x="9.9995%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (503,495 samples, 0.23%)</title><rect x="17.2900%" y="149" width="0.2275%" height="15" fill="rgb(221,5,38)"/><text x="17.5400%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (622,418 samples, 0.28%)</title><rect x="17.5180%" y="165" width="0.2812%" height="15" fill="rgb(247,18,42)"/><text x="17.7680%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,667,767 samples, 0.75%)</title><rect x="17.7992%" y="165" width="0.7535%" height="15" fill="rgb(241,131,45)"/><text x="18.0492%" y="175.50"></text></g><g><title>normalize_projection_ty (1,107,452 samples, 0.50%)</title><rect x="18.0523%" y="149" width="0.5003%" height="15" fill="rgb(249,31,29)"/><text x="18.3023%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,439,468 samples, 0.65%)</title><rect x="18.5526%" y="165" width="0.6503%" height="15" fill="rgb(225,111,53)"/><text x="18.8026%" y="175.50"></text></g><g><title>normalize_projection_ty (963,231 samples, 0.44%)</title><rect x="18.7678%" y="149" width="0.4352%" height="15" fill="rgb(238,160,17)"/><text x="19.0178%" y="159.50"></text></g><g><title>type_op_normalize_ty (801,741 samples, 0.36%)</title><rect x="19.2030%" y="165" width="0.3622%" height="15" fill="rgb(214,148,48)"/><text x="19.4530%" y="175.50"></text></g><g><title>normalize_projection_ty (569,108 samples, 0.26%)</title><rect x="19.3081%" y="149" width="0.2571%" height="15" fill="rgb(232,36,49)"/><text x="19.5581%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,771,540 samples, 3.51%)</title><rect x="19.5652%" y="165" width="3.5110%" height="15" fill="rgb(209,103,24)"/><text x="19.8152%" y="175.50">typ..</text></g><g><title>evaluate_obligation (712,739 samples, 0.32%)</title><rect x="22.7542%" y="149" width="0.3220%" height="15" fill="rgb(229,88,8)"/><text x="23.0042%" y="159.50"></text></g><g><title>MIR_borrow_checking (49,920,315 samples, 22.55%)</title><rect x="0.5347%" y="197" width="22.5528%" height="15" fill="rgb(213,181,19)"/><text x="0.7847%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (49,717,805 samples, 22.46%)</title><rect x="0.6262%" y="181" width="22.4613%" height="15" fill="rgb(254,191,54)"/><text x="0.8762%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (267,653 samples, 0.12%)</title><rect x="23.1867%" y="197" width="0.1209%" height="15" fill="rgb(241,83,37)"/><text x="23.4367%" y="207.50"></text></g><g><title>should_inherit_track_caller (250,785 samples, 0.11%)</title><rect x="23.5545%" y="149" width="0.1133%" height="15" fill="rgb(233,36,39)"/><text x="23.8045%" y="159.50"></text></g><g><title>codegen_fn_attrs (470,767 samples, 0.21%)</title><rect x="23.4662%" y="165" width="0.2127%" height="15" fill="rgb(226,3,54)"/><text x="23.7162%" y="175.50"></text></g><g><title>check_mod_attrs (798,500 samples, 0.36%)</title><rect x="23.3182%" y="181" width="0.3607%" height="15" fill="rgb(245,192,40)"/><text x="23.5682%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (542,415 samples, 0.25%)</title><rect x="23.7975%" y="181" width="0.2451%" height="15" fill="rgb(238,167,29)"/><text x="24.0475%" y="191.50"></text></g><g><title>misc_checking_1 (1,726,500 samples, 0.78%)</title><rect x="23.3078%" y="197" width="0.7800%" height="15" fill="rgb(232,182,51)"/><text x="23.5578%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (861,489 samples, 0.39%)</title><rect x="24.0884%" y="181" width="0.3892%" height="15" fill="rgb(231,60,39)"/><text x="24.3384%" y="191.50"></text></g><g><title>check_mod_liveness (741,538 samples, 0.34%)</title><rect x="24.1426%" y="165" width="0.3350%" height="15" fill="rgb(208,69,12)"/><text x="24.3926%" y="175.50"></text></g><g><title>type_uninhabited_from (293,382 samples, 0.13%)</title><rect x="24.3451%" y="149" width="0.1325%" height="15" fill="rgb(235,93,37)"/><text x="24.5951%" y="159.50"></text></g><g><title>misc_checking_2 (1,749,429 samples, 0.79%)</title><rect x="24.0878%" y="197" width="0.7904%" height="15" fill="rgb(213,116,39)"/><text x="24.3378%" y="207.50"></text></g><g><title>match_checking (886,450 samples, 0.40%)</title><rect x="24.4776%" y="181" width="0.4005%" height="15" fill="rgb(222,207,29)"/><text x="24.7276%" y="191.50"></text></g><g><title>check_match (836,208 samples, 0.38%)</title><rect x="24.5003%" y="165" width="0.3778%" height="15" fill="rgb(206,96,30)"/><text x="24.7503%" y="175.50"></text></g><g><title>check_private_in_public (329,793 samples, 0.15%)</title><rect x="24.8829%" y="181" width="0.1490%" height="15" fill="rgb(218,138,4)"/><text x="25.1329%" y="191.50"></text></g><g><title>death_checking (661,238 samples, 0.30%)</title><rect x="25.0319%" y="181" width="0.2987%" height="15" fill="rgb(250,191,14)"/><text x="25.2819%" y="191.50"></text></g><g><title>param_env (691,257 samples, 0.31%)</title><rect x="25.8671%" y="149" width="0.3123%" height="15" fill="rgb(239,60,40)"/><text x="26.1171%" y="159.50"></text></g><g><title>predicates_of (354,204 samples, 0.16%)</title><rect x="26.0194%" y="133" width="0.1600%" height="15" fill="rgb(206,27,48)"/><text x="26.2694%" y="143.50"></text></g><g><title>predicates_defined_on (280,164 samples, 0.13%)</title><rect x="26.0528%" y="117" width="0.1266%" height="15" fill="rgb(225,35,8)"/><text x="26.3028%" y="127.50"></text></g><g><title>crate_lints (3,394,247 samples, 1.53%)</title><rect x="25.3314%" y="165" width="1.5334%" height="15" fill="rgb(250,213,24)"/><text x="25.5814%" y="175.50"></text></g><g><title>type_of (1,491,424 samples, 0.67%)</title><rect x="26.1911%" y="149" width="0.6738%" height="15" fill="rgb(247,123,22)"/><text x="26.4411%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (915,669 samples, 0.41%)</title><rect x="26.4512%" y="133" width="0.4137%" height="15" fill="rgb(231,138,38)"/><text x="26.7012%" y="143.50"></text></g><g><title>lint_checking (3,985,754 samples, 1.80%)</title><rect x="25.3306%" y="181" width="1.8007%" height="15" fill="rgb(231,145,46)"/><text x="25.5806%" y="191.50">l..</text></g><g><title>module_lints (589,777 samples, 0.27%)</title><rect x="26.8648%" y="165" width="0.2664%" height="15" fill="rgb(251,118,11)"/><text x="27.1148%" y="175.50"></text></g><g><title>lint_mod (582,867 samples, 0.26%)</title><rect x="26.8680%" y="149" width="0.2633%" height="15" fill="rgb(217,147,25)"/><text x="27.1180%" y="159.50"></text></g><g><title>privacy_access_levels (434,354 samples, 0.20%)</title><rect x="27.1313%" y="181" width="0.1962%" height="15" fill="rgb(247,81,37)"/><text x="27.3813%" y="191.50"></text></g><g><title>privacy_checking_modules (1,788,380 samples, 0.81%)</title><rect x="27.3275%" y="181" width="0.8079%" height="15" fill="rgb(209,12,38)"/><text x="27.5775%" y="191.50"></text></g><g><title>check_mod_privacy (1,783,000 samples, 0.81%)</title><rect x="27.3300%" y="165" width="0.8055%" height="15" fill="rgb(227,1,9)"/><text x="27.5800%" y="175.50"></text></g><g><title>misc_checking_3 (7,227,100 samples, 3.27%)</title><rect x="24.8781%" y="197" width="3.2650%" height="15" fill="rgb(248,47,43)"/><text x="25.1281%" y="207.50">mis..</text></g><g><title>adt_destructor (369,954 samples, 0.17%)</title><rect x="28.2448%" y="149" width="0.1671%" height="15" fill="rgb(221,10,30)"/><text x="28.4948%" y="159.50"></text></g><g><title>coherent_trait (358,884 samples, 0.16%)</title><rect x="28.2498%" y="133" width="0.1621%" height="15" fill="rgb(210,229,1)"/><text x="28.4998%" y="143.50"></text></g><g><title>specialization_graph_of (357,604 samples, 0.16%)</title><rect x="28.2503%" y="117" width="0.1616%" height="15" fill="rgb(222,148,37)"/><text x="28.5003%" y="127.50"></text></g><g><title>impl_parent (2,578,781 samples, 1.17%)</title><rect x="30.5699%" y="133" width="1.1650%" height="15" fill="rgb(234,67,33)"/><text x="30.8199%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,392,340 samples, 0.63%)</title><rect x="31.1059%" y="117" width="0.6290%" height="15" fill="rgb(247,98,35)"/><text x="31.3559%" y="127.50"></text></g><g><title>impl_trait_ref (5,259,500 samples, 2.38%)</title><rect x="31.7352%" y="133" width="2.3761%" height="15" fill="rgb(247,138,52)"/><text x="31.9852%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,302,072 samples, 1.94%)</title><rect x="32.1678%" y="117" width="1.9436%" height="15" fill="rgb(213,79,30)"/><text x="32.4178%" y="127.50">m..</text></g><g><title>trait_impls_of (966,219 samples, 0.44%)</title><rect x="34.2168%" y="133" width="0.4365%" height="15" fill="rgb(246,177,23)"/><text x="34.4668%" y="143.50"></text></g><g><title>implementations_of_trait (308,863 samples, 0.14%)</title><rect x="34.5138%" y="117" width="0.1395%" height="15" fill="rgb(230,62,27)"/><text x="34.7638%" y="127.50"></text></g><g><title>coherent_trait (14,278,520 samples, 6.45%)</title><rect x="28.2142%" y="165" width="6.4507%" height="15" fill="rgb(216,154,8)"/><text x="28.4642%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (13,594,011 samples, 6.14%)</title><rect x="28.5235%" y="149" width="6.1415%" height="15" fill="rgb(244,35,45)"/><text x="28.7735%" y="159.50">speciali..</text></g><g><title>coherence_checking (14,458,961 samples, 6.53%)</title><rect x="28.1984%" y="181" width="6.5322%" height="15" fill="rgb(251,115,12)"/><text x="28.4484%" y="191.50">coherence..</text></g><g><title>associated_item (235,852 samples, 0.11%)</title><rect x="42.7814%" y="117" width="0.1066%" height="15" fill="rgb(240,54,50)"/><text x="43.0314%" y="127.50"></text></g><g><title>associated_items (370,762 samples, 0.17%)</title><rect x="42.7313%" y="133" width="0.1675%" height="15" fill="rgb(233,84,52)"/><text x="42.9813%" y="143.50"></text></g><g><title>adt_dtorck_constraint (223,222 samples, 0.10%)</title><rect x="43.2028%" y="101" width="0.1008%" height="15" fill="rgb(207,117,47)"/><text x="43.4528%" y="111.50"></text></g><g><title>adt_dtorck_constraint (478,606 samples, 0.22%)</title><rect x="43.1179%" y="117" width="0.2162%" height="15" fill="rgb(249,43,39)"/><text x="43.3679%" y="127.50"></text></g><g><title>dropck_outlives (1,012,275 samples, 0.46%)</title><rect x="42.9362%" y="133" width="0.4573%" height="15" fill="rgb(209,38,44)"/><text x="43.1862%" y="143.50"></text></g><g><title>predicates_of (446,963 samples, 0.20%)</title><rect x="44.5518%" y="117" width="0.2019%" height="15" fill="rgb(236,212,23)"/><text x="44.8018%" y="127.50"></text></g><g><title>evaluate_obligation (3,440,988 samples, 1.55%)</title><rect x="43.3947%" y="133" width="1.5546%" height="15" fill="rgb(242,79,21)"/><text x="43.6447%" y="143.50"></text></g><g><title>trait_impls_of (426,147 samples, 0.19%)</title><rect x="44.7567%" y="117" width="0.1925%" height="15" fill="rgb(211,96,35)"/><text x="45.0067%" y="127.50"></text></g><g><title>method_autoderef_steps (330,053 samples, 0.15%)</title><rect x="45.3272%" y="133" width="0.1491%" height="15" fill="rgb(253,215,40)"/><text x="45.5772%" y="143.50"></text></g><g><title>explicit_predicates_of (287,743 samples, 0.13%)</title><rect x="45.6216%" y="101" width="0.1300%" height="15" fill="rgb(211,81,21)"/><text x="45.8716%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (249,662 samples, 0.11%)</title><rect x="45.6388%" y="85" width="0.1128%" height="15" fill="rgb(208,190,38)"/><text x="45.8888%" y="95.50"></text></g><g><title>predicates_of (631,428 samples, 0.29%)</title><rect x="45.4956%" y="133" width="0.2853%" height="15" fill="rgb(235,213,38)"/><text x="45.7456%" y="143.50"></text></g><g><title>predicates_defined_on (460,574 samples, 0.21%)</title><rect x="45.5728%" y="117" width="0.2081%" height="15" fill="rgb(237,122,38)"/><text x="45.8228%" y="127.50"></text></g><g><title>associated_item (492,795 samples, 0.22%)</title><rect x="56.4037%" y="101" width="0.2226%" height="15" fill="rgb(244,218,35)"/><text x="56.6537%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (393,914 samples, 0.18%)</title><rect x="56.4483%" y="85" width="0.1780%" height="15" fill="rgb(240,68,47)"/><text x="56.6983%" y="95.50"></text></g><g><title>associated_items (715,627 samples, 0.32%)</title><rect x="56.3200%" y="117" width="0.3233%" height="15" fill="rgb(210,16,53)"/><text x="56.5700%" y="127.50"></text></g><g><title>adt_dtorck_constraint (382,674 samples, 0.17%)</title><rect x="56.8615%" y="101" width="0.1729%" height="15" fill="rgb(235,124,12)"/><text x="57.1115%" y="111.50"></text></g><g><title>dropck_outlives (860,949 samples, 0.39%)</title><rect x="56.6737%" y="117" width="0.3890%" height="15" fill="rgb(224,169,11)"/><text x="56.9237%" y="127.50"></text></g><g><title>predicates_of (505,978 samples, 0.23%)</title><rect x="58.7637%" y="101" width="0.2286%" height="15" fill="rgb(250,166,2)"/><text x="59.0137%" y="111.50"></text></g><g><title>specializes (426,714 samples, 0.19%)</title><rect x="58.9923%" y="101" width="0.1928%" height="15" fill="rgb(242,216,29)"/><text x="59.2423%" y="111.50"></text></g><g><title>trait_impls_of (386,375 samples, 0.17%)</title><rect x="59.1880%" y="101" width="0.1746%" height="15" fill="rgb(230,116,27)"/><text x="59.4380%" y="111.50"></text></g><g><title>evaluate_obligation (5,084,884 samples, 2.30%)</title><rect x="57.0657%" y="117" width="2.2972%" height="15" fill="rgb(228,99,48)"/><text x="57.3157%" y="127.50">e..</text></g><g><title>is_copy_raw (637,727 samples, 0.29%)</title><rect x="59.6426%" y="117" width="0.2881%" height="15" fill="rgb(253,11,6)"/><text x="59.8926%" y="127.50"></text></g><g><title>evaluate_obligation (499,435 samples, 0.23%)</title><rect x="59.7051%" y="101" width="0.2256%" height="15" fill="rgb(247,143,39)"/><text x="59.9551%" y="111.50"></text></g><g><title>evaluate_obligation (606,099 samples, 0.27%)</title><rect x="60.2165%" y="101" width="0.2738%" height="15" fill="rgb(236,97,10)"/><text x="60.4665%" y="111.50"></text></g><g><title>method_autoderef_steps (1,145,013 samples, 0.52%)</title><rect x="59.9858%" y="117" width="0.5173%" height="15" fill="rgb(233,208,19)"/><text x="60.2358%" y="127.50"></text></g><g><title>explicit_predicates_of (255,672 samples, 0.12%)</title><rect x="60.6155%" y="85" width="0.1155%" height="15" fill="rgb(216,164,2)"/><text x="60.8655%" y="95.50"></text></g><g><title>predicates_of (518,345 samples, 0.23%)</title><rect x="60.5193%" y="117" width="0.2342%" height="15" fill="rgb(220,129,5)"/><text x="60.7693%" y="127.50"></text></g><g><title>predicates_defined_on (395,824 samples, 0.18%)</title><rect x="60.5747%" y="101" width="0.1788%" height="15" fill="rgb(242,17,10)"/><text x="60.8247%" y="111.50"></text></g><g><title>typeck (33,132,678 samples, 14.97%)</title><rect x="45.8936%" y="133" width="14.9686%" height="15" fill="rgb(242,107,0)"/><text x="46.1436%" y="143.50">typeck</text></g><g><title>item_bodies_checking (57,831,662 samples, 26.13%)</title><rect x="34.7610%" y="181" width="26.1270%" height="15" fill="rgb(251,28,31)"/><text x="35.0110%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,828,392 samples, 26.13%)</title><rect x="34.7625%" y="165" width="26.1255%" height="15" fill="rgb(233,223,10)"/><text x="35.0125%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (57,713,762 samples, 26.07%)</title><rect x="34.8143%" y="149" width="26.0737%" height="15" fill="rgb(215,21,27)"/><text x="35.0643%" y="159.50">typeck</text></g><g><title>evaluate_obligation (357,655 samples, 0.16%)</title><rect x="62.2338%" y="149" width="0.1616%" height="15" fill="rgb(232,23,21)"/><text x="62.4838%" y="159.50"></text></g><g><title>item_types_checking (3,831,723 samples, 1.73%)</title><rect x="60.8880%" y="181" width="1.7311%" height="15" fill="rgb(244,5,23)"/><text x="61.1380%" y="191.50"></text></g><g><title>check_mod_item_types (3,825,153 samples, 1.73%)</title><rect x="60.8910%" y="165" width="1.7281%" height="15" fill="rgb(226,81,46)"/><text x="61.1410%" y="175.50"></text></g><g><title>typeck (244,993 samples, 0.11%)</title><rect x="62.5084%" y="149" width="0.1107%" height="15" fill="rgb(247,70,30)"/><text x="62.7584%" y="159.50"></text></g><g><title>fn_sig (916,380 samples, 0.41%)</title><rect x="62.8247%" y="149" width="0.4140%" height="15" fill="rgb(212,68,19)"/><text x="63.0747%" y="159.50"></text></g><g><title>named_region_map (724,690 samples, 0.33%)</title><rect x="63.3960%" y="133" width="0.3274%" height="15" fill="rgb(240,187,13)"/><text x="63.6460%" y="143.50"></text></g><g><title>resolve_lifetimes (697,560 samples, 0.32%)</title><rect x="63.4083%" y="117" width="0.3151%" height="15" fill="rgb(223,113,26)"/><text x="63.6583%" y="127.50"></text></g><g><title>lint_levels (341,503 samples, 0.15%)</title><rect x="63.5691%" y="101" width="0.1543%" height="15" fill="rgb(206,192,2)"/><text x="63.8191%" y="111.50"></text></g><g><title>generics_of (1,097,251 samples, 0.50%)</title><rect x="63.2387%" y="149" width="0.4957%" height="15" fill="rgb(241,108,4)"/><text x="63.4887%" y="159.50"></text></g><g><title>late_bound_vars_map (246,611 samples, 0.11%)</title><rect x="64.1062%" y="101" width="0.1114%" height="15" fill="rgb(247,173,49)"/><text x="64.3562%" y="111.50"></text></g><g><title>resolve_lifetimes (229,771 samples, 0.10%)</title><rect x="64.1138%" y="85" width="0.1038%" height="15" fill="rgb(224,114,35)"/><text x="64.3638%" y="95.50"></text></g><g><title>explicit_predicates_of (883,188 samples, 0.40%)</title><rect x="63.8995%" y="117" width="0.3990%" height="15" fill="rgb(245,159,27)"/><text x="64.1495%" y="127.50"></text></g><g><title>predicates_of (1,232,193 samples, 0.56%)</title><rect x="63.8061%" y="149" width="0.5567%" height="15" fill="rgb(245,172,44)"/><text x="64.0561%" y="159.50"></text></g><g><title>predicates_defined_on (1,151,010 samples, 0.52%)</title><rect x="63.8427%" y="133" width="0.5200%" height="15" fill="rgb(236,23,11)"/><text x="64.0927%" y="143.50"></text></g><g><title>type_collecting (4,155,455 samples, 1.88%)</title><rect x="62.6219%" y="181" width="1.8773%" height="15" fill="rgb(205,117,38)"/><text x="62.8719%" y="191.50">t..</text></g><g><title>collect_mod_item_types (4,143,555 samples, 1.87%)</title><rect x="62.6272%" y="165" width="1.8720%" height="15" fill="rgb(237,72,25)"/><text x="62.8772%" y="175.50">c..</text></g><g><title>type_of (302,084 samples, 0.14%)</title><rect x="64.3627%" y="149" width="0.1365%" height="15" fill="rgb(244,70,9)"/><text x="64.6127%" y="159.50"></text></g><g><title>evaluate_obligation (320,814 samples, 0.14%)</title><rect x="65.8034%" y="149" width="0.1449%" height="15" fill="rgb(217,125,39)"/><text x="66.0534%" y="159.50"></text></g><g><title>implied_outlives_bounds (269,465 samples, 0.12%)</title><rect x="65.9730%" y="149" width="0.1217%" height="15" fill="rgb(235,36,10)"/><text x="66.2230%" y="159.50"></text></g><g><title>param_env (542,395 samples, 0.25%)</title><rect x="66.1334%" y="149" width="0.2450%" height="15" fill="rgb(251,123,47)"/><text x="66.3834%" y="159.50"></text></g><g><title>region_scope_tree (232,063 samples, 0.10%)</title><rect x="66.4384%" y="149" width="0.1048%" height="15" fill="rgb(221,13,13)"/><text x="66.6884%" y="159.50"></text></g><g><title>check_impl_item_well_formed (4,194,198 samples, 1.89%)</title><rect x="64.6546%" y="165" width="1.8948%" height="15" fill="rgb(238,131,9)"/><text x="64.9046%" y="175.50">c..</text></g><g><title>evaluate_obligation (897,477 samples, 0.41%)</title><rect x="68.9598%" y="149" width="0.4055%" height="15" fill="rgb(211,50,8)"/><text x="69.2098%" y="159.50"></text></g><g><title>implied_outlives_bounds (348,874 samples, 0.16%)</title><rect x="69.4256%" y="149" width="0.1576%" height="15" fill="rgb(245,182,24)"/><text x="69.6756%" y="159.50"></text></g><g><title>object_safety_violations (472,986 samples, 0.21%)</title><rect x="69.6030%" y="149" width="0.2137%" height="15" fill="rgb(242,14,37)"/><text x="69.8530%" y="159.50"></text></g><g><title>param_env (1,031,024 samples, 0.47%)</title><rect x="69.8195%" y="149" width="0.4658%" height="15" fill="rgb(246,228,12)"/><text x="70.0695%" y="159.50"></text></g><g><title>predicates_of (356,662 samples, 0.16%)</title><rect x="70.2853%" y="149" width="0.1611%" height="15" fill="rgb(213,55,15)"/><text x="70.5353%" y="159.50"></text></g><g><title>predicates_defined_on (253,312 samples, 0.11%)</title><rect x="70.3320%" y="133" width="0.1144%" height="15" fill="rgb(209,9,3)"/><text x="70.5820%" y="143.50"></text></g><g><title>region_scope_tree (323,234 samples, 0.15%)</title><rect x="70.4464%" y="149" width="0.1460%" height="15" fill="rgb(230,59,30)"/><text x="70.6964%" y="159.50"></text></g><g><title>check_item_well_formed (9,214,741 samples, 4.16%)</title><rect x="66.5495%" y="165" width="4.1630%" height="15" fill="rgb(209,121,21)"/><text x="66.7995%" y="175.50">check..</text></g><g><title>adt_def (392,815 samples, 0.18%)</title><rect x="70.9461%" y="85" width="0.1775%" height="15" fill="rgb(220,109,13)"/><text x="71.1961%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (392,395 samples, 0.18%)</title><rect x="70.9463%" y="69" width="0.1773%" height="15" fill="rgb(232,18,1)"/><text x="71.1963%" y="79.50"></text></g><g><title>item_attrs (381,005 samples, 0.17%)</title><rect x="70.9514%" y="53" width="0.1721%" height="15" fill="rgb(215,41,42)"/><text x="71.2014%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (380,285 samples, 0.17%)</title><rect x="70.9518%" y="37" width="0.1718%" height="15" fill="rgb(224,123,36)"/><text x="71.2018%" y="47.50"></text></g><g><title>adt_sized_constraint (448,265 samples, 0.20%)</title><rect x="70.9449%" y="101" width="0.2025%" height="15" fill="rgb(240,125,3)"/><text x="71.1949%" y="111.50"></text></g><g><title>adt_sized_constraint (603,686 samples, 0.27%)</title><rect x="70.8784%" y="117" width="0.2727%" height="15" fill="rgb(205,98,50)"/><text x="71.1284%" y="127.50"></text></g><g><title>adt_sized_constraint (733,839 samples, 0.33%)</title><rect x="70.8287%" y="133" width="0.3315%" height="15" fill="rgb(205,185,37)"/><text x="71.0787%" y="143.50"></text></g><g><title>evaluate_obligation (812,391 samples, 0.37%)</title><rect x="70.8036%" y="149" width="0.3670%" height="15" fill="rgb(238,207,15)"/><text x="71.0536%" y="159.50"></text></g><g><title>analysis (156,866,992 samples, 70.87%)</title><rect x="0.3611%" y="213" width="70.8688%" height="15" fill="rgb(213,199,42)"/><text x="0.6111%" y="223.50">analysis</text></g><g><title>type_check_crate (95,371,798 samples, 43.09%)</title><rect x="28.1432%" y="197" width="43.0867%" height="15" fill="rgb(235,201,11)"/><text x="28.3932%" y="207.50">type_check_crate</text></g><g><title>wf_checking (14,891,805 samples, 6.73%)</title><rect x="64.5021%" y="181" width="6.7278%" height="15" fill="rgb(207,46,11)"/><text x="64.7521%" y="191.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (1,145,233 samples, 0.52%)</title><rect x="70.7125%" y="165" width="0.5174%" height="15" fill="rgb(241,35,35)"/><text x="70.9625%" y="175.50"></text></g><g><title>codegen_crate (439,385 samples, 0.20%)</title><rect x="71.2348%" y="213" width="0.1985%" height="15" fill="rgb(243,32,47)"/><text x="71.4848%" y="223.50"></text></g><g><title>AST_validation (385,504 samples, 0.17%)</title><rect x="71.5311%" y="197" width="0.1742%" height="15" fill="rgb(247,202,23)"/><text x="71.7811%" y="207.50"></text></g><g><title>metadata_load_macro (1,362,193 samples, 0.62%)</title><rect x="85.7626%" y="165" width="0.6154%" height="15" fill="rgb(219,102,11)"/><text x="86.0126%" y="175.50"></text></g><g><title>metadata_register_crate (9,523,496 samples, 4.30%)</title><rect x="86.3780%" y="165" width="4.3025%" height="15" fill="rgb(243,110,44)"/><text x="86.6280%" y="175.50">metad..</text></g><g><title>metadata_register_crate (7,293,712 samples, 3.30%)</title><rect x="87.3854%" y="149" width="3.2951%" height="15" fill="rgb(222,74,54)"/><text x="87.6354%" y="159.50">met..</text></g><g><title>macro_expand_crate (41,994,126 samples, 18.97%)</title><rect x="71.7842%" y="197" width="18.9719%" height="15" fill="rgb(216,99,12)"/><text x="72.0342%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (41,978,586 samples, 18.96%)</title><rect x="71.7913%" y="181" width="18.9649%" height="15" fill="rgb(226,22,26)"/><text x="72.0413%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (362,844 samples, 0.16%)</title><rect x="90.7583%" y="197" width="0.1639%" height="15" fill="rgb(217,163,10)"/><text x="91.0083%" y="207.50"></text></g><g><title>finalize_macro_resolutions (291,973 samples, 0.13%)</title><rect x="91.0226%" y="181" width="0.1319%" height="15" fill="rgb(213,25,53)"/><text x="91.2726%" y="191.50"></text></g><g><title>late_resolve_crate (3,170,296 samples, 1.43%)</title><rect x="91.1545%" y="181" width="1.4323%" height="15" fill="rgb(252,105,26)"/><text x="91.4045%" y="191.50"></text></g><g><title>resolve_check_unused (233,773 samples, 0.11%)</title><rect x="92.6072%" y="181" width="0.1056%" height="15" fill="rgb(220,39,43)"/><text x="92.8572%" y="191.50"></text></g><g><title>configure_and_expand (47,159,053 samples, 21.31%)</title><rect x="71.4333%" y="213" width="21.3053%" height="15" fill="rgb(229,68,48)"/><text x="71.6833%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (4,020,705 samples, 1.82%)</title><rect x="90.9222%" y="197" width="1.8165%" height="15" fill="rgb(252,8,32)"/><text x="91.1722%" y="207.50">r..</text></g><g><title>drop_ast (236,272 samples, 0.11%)</title><rect x="92.7386%" y="213" width="0.1067%" height="15" fill="rgb(223,20,43)"/><text x="92.9886%" y="223.50"></text></g><g><title>early_lint_checks (513,226 samples, 0.23%)</title><rect x="92.8535%" y="213" width="0.2319%" height="15" fill="rgb(229,81,49)"/><text x="93.1035%" y="223.50"></text></g><g><title>free_global_ctxt (4,160,416 samples, 1.88%)</title><rect x="93.0854%" y="213" width="1.8796%" height="15" fill="rgb(236,28,36)"/><text x="93.3354%" y="223.50">f..</text></g><g><title>generate_crate_metadata (1,771,320 samples, 0.80%)</title><rect x="94.9649%" y="213" width="0.8002%" height="15" fill="rgb(249,185,26)"/><text x="95.2149%" y="223.50"></text></g><g><title>hir_lowering (4,396,818 samples, 1.99%)</title><rect x="95.7652%" y="213" width="1.9864%" height="15" fill="rgb(249,174,33)"/><text x="96.0152%" y="223.50">h..</text></g><g><title>parse_crate (3,081,214 samples, 1.39%)</title><rect x="97.7804%" y="213" width="1.3920%" height="15" fill="rgb(233,201,37)"/><text x="98.0304%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,135,353 samples, 0.51%)</title><rect x="99.2654%" y="213" width="0.5129%" height="15" fill="rgb(221,78,26)"/><text x="99.5154%" y="223.50"></text></g><g><title>all (221,348,538 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (221,348,538 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (375,914 samples, 0.17%)</title><rect x="99.8302%" y="213" width="0.1698%" height="15" fill="rgb(229,67,23)"/><text x="100.0802%" y="223.50"></text></g></svg></svg>