<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (719,716 samples, 0.22%)</title><rect x="15.7481%" y="165" width="0.2235%" height="15" fill="rgb(227,0,7)"/><text x="15.9981%" y="175.50"></text></g><g><title>item_attrs (628,278 samples, 0.20%)</title><rect x="16.5625%" y="133" width="0.1951%" height="15" fill="rgb(217,0,24)"/><text x="16.8125%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (603,718 samples, 0.19%)</title><rect x="16.5702%" y="117" width="0.1874%" height="15" fill="rgb(221,193,54)"/><text x="16.8202%" y="127.50"></text></g><g><title>codegen_fn_attrs (882,130 samples, 0.27%)</title><rect x="16.4977%" y="149" width="0.2739%" height="15" fill="rgb(248,212,6)"/><text x="16.7477%" y="159.50"></text></g><g><title>adt_drop_tys (357,744 samples, 0.11%)</title><rect x="20.1963%" y="101" width="0.1111%" height="15" fill="rgb(208,68,35)"/><text x="20.4463%" y="111.50"></text></g><g><title>adt_drop_tys (1,028,207 samples, 0.32%)</title><rect x="20.1682%" y="117" width="0.3193%" height="15" fill="rgb(232,128,0)"/><text x="20.4182%" y="127.50"></text></g><g><title>is_copy_raw (1,649,088 samples, 0.51%)</title><rect x="20.4875%" y="117" width="0.5120%" height="15" fill="rgb(207,160,47)"/><text x="20.7375%" y="127.50"></text></g><g><title>evaluate_obligation (1,367,307 samples, 0.42%)</title><rect x="20.5750%" y="101" width="0.4245%" height="15" fill="rgb(228,23,34)"/><text x="20.8250%" y="111.50"></text></g><g><title>needs_drop_raw (2,987,300 samples, 0.93%)</title><rect x="20.0801%" y="133" width="0.9275%" height="15" fill="rgb(218,30,26)"/><text x="20.3301%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (855,810 samples, 0.27%)</title><rect x="21.1947%" y="117" width="0.2657%" height="15" fill="rgb(220,122,19)"/><text x="21.4447%" y="127.50"></text></g><g><title>specialization_graph_of (2,290,766 samples, 0.71%)</title><rect x="21.5477%" y="117" width="0.7113%" height="15" fill="rgb(250,228,42)"/><text x="21.7977%" y="127.50"></text></g><g><title>impl_trait_ref (1,268,495 samples, 0.39%)</title><rect x="21.8651%" y="101" width="0.3939%" height="15" fill="rgb(240,193,28)"/><text x="22.1151%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,192,744 samples, 0.37%)</title><rect x="21.8887%" y="85" width="0.3703%" height="15" fill="rgb(216,20,37)"/><text x="22.1387%" y="95.50"></text></g><g><title>resolve_instance (4,257,591 samples, 1.32%)</title><rect x="21.0076%" y="133" width="1.3219%" height="15" fill="rgb(206,188,39)"/><text x="21.2576%" y="143.50"></text></g><g><title>thir_body (4,117,527 samples, 1.28%)</title><rect x="22.3517%" y="133" width="1.2785%" height="15" fill="rgb(217,207,13)"/><text x="22.6017%" y="143.50"></text></g><g><title>mir_const (28,290,831 samples, 8.78%)</title><rect x="14.8616%" y="181" width="8.7841%" height="15" fill="rgb(231,73,38)"/><text x="15.1116%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (24,715,855 samples, 7.67%)</title><rect x="15.9716%" y="165" width="7.6741%" height="15" fill="rgb(225,20,46)"/><text x="16.2216%" y="175.50">unsafety_ch..</text></g><g><title>mir_built (22,139,307 samples, 6.87%)</title><rect x="16.7716%" y="149" width="6.8741%" height="15" fill="rgb(210,31,41)"/><text x="17.0216%" y="159.50">mir_built</text></g><g><title>mir_promoted (31,246,425 samples, 9.70%)</title><rect x="13.9840%" y="197" width="9.7018%" height="15" fill="rgb(221,200,47)"/><text x="14.2340%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (881,748 samples, 0.27%)</title><rect x="23.6878%" y="197" width="0.2738%" height="15" fill="rgb(226,26,5)"/><text x="23.9378%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,664,741 samples, 0.52%)</title><rect x="23.9616%" y="197" width="0.5169%" height="15" fill="rgb(249,33,26)"/><text x="24.2116%" y="207.50"></text></g><g><title>normalize_projection_ty (1,116,870 samples, 0.35%)</title><rect x="24.1317%" y="181" width="0.3468%" height="15" fill="rgb(235,183,28)"/><text x="24.3817%" y="191.50"></text></g><g><title>type_op_prove_predicate (5,198,790 samples, 1.61%)</title><rect x="24.5438%" y="197" width="1.6142%" height="15" fill="rgb(221,5,38)"/><text x="24.7938%" y="207.50"></text></g><g><title>MIR_borrow_checking (82,738,552 samples, 25.69%)</title><rect x="0.4724%" y="229" width="25.6897%" height="15" fill="rgb(247,18,42)"/><text x="0.7224%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (82,389,951 samples, 25.58%)</title><rect x="0.5806%" y="213" width="25.5814%" height="15" fill="rgb(241,131,45)"/><text x="0.8306%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (444,524 samples, 0.14%)</title><rect x="26.1904%" y="229" width="0.1380%" height="15" fill="rgb(249,31,29)"/><text x="26.4404%" y="239.50"></text></g><g><title>should_inherit_track_caller (356,706 samples, 0.11%)</title><rect x="26.6210%" y="181" width="0.1108%" height="15" fill="rgb(225,111,53)"/><text x="26.8710%" y="191.50"></text></g><g><title>codegen_fn_attrs (651,321 samples, 0.20%)</title><rect x="26.5355%" y="197" width="0.2022%" height="15" fill="rgb(238,160,17)"/><text x="26.7855%" y="207.50"></text></g><g><title>check_mod_attrs (1,295,074 samples, 0.40%)</title><rect x="26.3357%" y="213" width="0.4021%" height="15" fill="rgb(214,148,48)"/><text x="26.5857%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (732,008 samples, 0.23%)</title><rect x="26.8961%" y="213" width="0.2273%" height="15" fill="rgb(232,36,49)"/><text x="27.1461%" y="223.50"></text></g><g><title>misc_checking_1 (2,638,110 samples, 0.82%)</title><rect x="26.3286%" y="229" width="0.8191%" height="15" fill="rgb(209,103,24)"/><text x="26.5786%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (2,124,833 samples, 0.66%)</title><rect x="27.1482%" y="213" width="0.6597%" height="15" fill="rgb(229,88,8)"/><text x="27.3982%" y="223.50"></text></g><g><title>check_mod_liveness (1,825,940 samples, 0.57%)</title><rect x="27.2410%" y="197" width="0.5669%" height="15" fill="rgb(213,181,19)"/><text x="27.4910%" y="207.50"></text></g><g><title>type_uninhabited_from (1,005,341 samples, 0.31%)</title><rect x="27.4958%" y="181" width="0.3122%" height="15" fill="rgb(254,191,54)"/><text x="27.7458%" y="191.50"></text></g><g><title>type_uninhabited_from (915,360 samples, 0.28%)</title><rect x="27.5237%" y="165" width="0.2842%" height="15" fill="rgb(241,83,37)"/><text x="27.7737%" y="175.50"></text></g><g><title>type_uninhabited_from (864,440 samples, 0.27%)</title><rect x="27.5395%" y="149" width="0.2684%" height="15" fill="rgb(233,36,39)"/><text x="27.7895%" y="159.50"></text></g><g><title>type_uninhabited_from (825,768 samples, 0.26%)</title><rect x="27.5516%" y="133" width="0.2564%" height="15" fill="rgb(226,3,54)"/><text x="27.8016%" y="143.50"></text></g><g><title>misc_checking_2 (4,331,038 samples, 1.34%)</title><rect x="27.1477%" y="229" width="1.3448%" height="15" fill="rgb(245,192,40)"/><text x="27.3977%" y="239.50"></text></g><g><title>match_checking (2,204,485 samples, 0.68%)</title><rect x="27.8079%" y="213" width="0.6845%" height="15" fill="rgb(238,167,29)"/><text x="28.0579%" y="223.50"></text></g><g><title>check_match (2,123,563 samples, 0.66%)</title><rect x="27.8331%" y="197" width="0.6593%" height="15" fill="rgb(232,182,51)"/><text x="28.0831%" y="207.50"></text></g><g><title>check_private_in_public (554,856 samples, 0.17%)</title><rect x="28.4962%" y="213" width="0.1723%" height="15" fill="rgb(231,60,39)"/><text x="28.7462%" y="223.50"></text></g><g><title>death_checking (1,036,992 samples, 0.32%)</title><rect x="28.6684%" y="213" width="0.3220%" height="15" fill="rgb(208,69,12)"/><text x="28.9184%" y="223.50"></text></g><g><title>crate_lints (3,341,227 samples, 1.04%)</title><rect x="28.9910%" y="197" width="1.0374%" height="15" fill="rgb(235,93,37)"/><text x="29.2410%" y="207.50"></text></g><g><title>type_of (1,408,625 samples, 0.44%)</title><rect x="29.5911%" y="181" width="0.4374%" height="15" fill="rgb(213,116,39)"/><text x="29.8411%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,116,553 samples, 0.35%)</title><rect x="29.6817%" y="165" width="0.3467%" height="15" fill="rgb(222,207,29)"/><text x="29.9317%" y="175.50"></text></g><g><title>layout_of (406,543 samples, 0.13%)</title><rect x="30.5345%" y="101" width="0.1262%" height="15" fill="rgb(206,96,30)"/><text x="30.7845%" y="111.50"></text></g><g><title>lint_checking (5,393,010 samples, 1.67%)</title><rect x="28.9904%" y="213" width="1.6745%" height="15" fill="rgb(218,138,4)"/><text x="29.2404%" y="223.50"></text></g><g><title>module_lints (2,049,913 samples, 0.64%)</title><rect x="30.0284%" y="197" width="0.6365%" height="15" fill="rgb(250,191,14)"/><text x="30.2784%" y="207.50"></text></g><g><title>lint_mod (2,043,693 samples, 0.63%)</title><rect x="30.0304%" y="181" width="0.6346%" height="15" fill="rgb(239,60,40)"/><text x="30.2804%" y="191.50"></text></g><g><title>layout_of (585,167 samples, 0.18%)</title><rect x="30.4832%" y="165" width="0.1817%" height="15" fill="rgb(206,27,48)"/><text x="30.7332%" y="175.50"></text></g><g><title>layout_of (538,687 samples, 0.17%)</title><rect x="30.4977%" y="149" width="0.1673%" height="15" fill="rgb(225,35,8)"/><text x="30.7477%" y="159.50"></text></g><g><title>layout_of (515,605 samples, 0.16%)</title><rect x="30.5048%" y="133" width="0.1601%" height="15" fill="rgb(250,213,24)"/><text x="30.7548%" y="143.50"></text></g><g><title>layout_of (475,715 samples, 0.15%)</title><rect x="30.5172%" y="117" width="0.1477%" height="15" fill="rgb(247,123,22)"/><text x="30.7672%" y="127.50"></text></g><g><title>privacy_access_levels (610,077 samples, 0.19%)</title><rect x="30.6649%" y="213" width="0.1894%" height="15" fill="rgb(231,138,38)"/><text x="30.9149%" y="223.50"></text></g><g><title>privacy_checking_modules (2,740,230 samples, 0.85%)</title><rect x="30.8543%" y="213" width="0.8508%" height="15" fill="rgb(231,145,46)"/><text x="31.1043%" y="223.50"></text></g><g><title>check_mod_privacy (2,736,950 samples, 0.85%)</title><rect x="30.8554%" y="197" width="0.8498%" height="15" fill="rgb(251,118,11)"/><text x="31.1054%" y="207.50"></text></g><g><title>misc_checking_3 (10,368,815 samples, 3.22%)</title><rect x="28.4924%" y="229" width="3.2194%" height="15" fill="rgb(217,147,25)"/><text x="28.7424%" y="239.50">mis..</text></g><g><title>impl_trait_ref (488,927 samples, 0.15%)</title><rect x="31.8219%" y="133" width="0.1518%" height="15" fill="rgb(247,81,37)"/><text x="32.0719%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (468,957 samples, 0.15%)</title><rect x="31.8281%" y="117" width="0.1456%" height="15" fill="rgb(209,12,38)"/><text x="32.0781%" y="127.50"></text></g><g><title>adt_destructor (665,337 samples, 0.21%)</title><rect x="31.7775%" y="181" width="0.2066%" height="15" fill="rgb(227,1,9)"/><text x="32.0275%" y="191.50"></text></g><g><title>coherent_trait (656,747 samples, 0.20%)</title><rect x="31.7802%" y="165" width="0.2039%" height="15" fill="rgb(248,47,43)"/><text x="32.0302%" y="175.50"></text></g><g><title>specialization_graph_of (654,967 samples, 0.20%)</title><rect x="31.7807%" y="149" width="0.2034%" height="15" fill="rgb(221,10,30)"/><text x="32.0307%" y="159.50"></text></g><g><title>impl_parent (3,247,531 samples, 1.01%)</title><rect x="33.5781%" y="165" width="1.0083%" height="15" fill="rgb(210,229,1)"/><text x="33.8281%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,745,193 samples, 0.54%)</title><rect x="34.0446%" y="149" width="0.5419%" height="15" fill="rgb(222,148,37)"/><text x="34.2946%" y="159.50"></text></g><g><title>impl_trait_ref (5,985,148 samples, 1.86%)</title><rect x="34.5864%" y="165" width="1.8583%" height="15" fill="rgb(234,67,33)"/><text x="34.8364%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,704,283 samples, 1.46%)</title><rect x="34.9841%" y="149" width="1.4606%" height="15" fill="rgb(247,98,35)"/><text x="35.2341%" y="159.50"></text></g><g><title>coherent_trait (16,145,130 samples, 5.01%)</title><rect x="31.7630%" y="197" width="5.0129%" height="15" fill="rgb(247,138,52)"/><text x="32.0130%" y="207.50">cohere..</text></g><g><title>specialization_graph_of (15,214,030 samples, 4.72%)</title><rect x="32.0521%" y="181" width="4.7238%" height="15" fill="rgb(213,79,30)"/><text x="32.3021%" y="191.50">specia..</text></g><g><title>trait_impls_of (1,064,825 samples, 0.33%)</title><rect x="36.4453%" y="165" width="0.3306%" height="15" fill="rgb(246,177,23)"/><text x="36.6953%" y="175.50"></text></g><g><title>implementations_of_trait (329,067 samples, 0.10%)</title><rect x="36.6738%" y="149" width="0.1022%" height="15" fill="rgb(230,62,27)"/><text x="36.9238%" y="159.50"></text></g><g><title>coherence_checking (16,270,271 samples, 5.05%)</title><rect x="31.7557%" y="213" width="5.0518%" height="15" fill="rgb(216,154,8)"/><text x="32.0057%" y="223.50">cohere..</text></g><g><title>associated_item (644,867 samples, 0.20%)</title><rect x="61.6188%" y="149" width="0.2002%" height="15" fill="rgb(244,35,45)"/><text x="61.8688%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (508,706 samples, 0.16%)</title><rect x="61.6610%" y="133" width="0.1579%" height="15" fill="rgb(251,115,12)"/><text x="61.9110%" y="143.50"></text></g><g><title>associated_items (969,792 samples, 0.30%)</title><rect x="61.5370%" y="165" width="0.3011%" height="15" fill="rgb(240,54,50)"/><text x="61.7870%" y="175.50"></text></g><g><title>adt_def (395,513 samples, 0.12%)</title><rect x="62.2506%" y="133" width="0.1228%" height="15" fill="rgb(233,84,52)"/><text x="62.5006%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (388,423 samples, 0.12%)</title><rect x="62.2528%" y="117" width="0.1206%" height="15" fill="rgb(207,117,47)"/><text x="62.5028%" y="127.50"></text></g><g><title>adt_dtorck_constraint (325,944 samples, 0.10%)</title><rect x="62.7106%" y="37" width="0.1012%" height="15" fill="rgb(249,43,39)"/><text x="62.9606%" y="47.50"></text></g><g><title>adt_dtorck_constraint (415,236 samples, 0.13%)</title><rect x="62.6870%" y="53" width="0.1289%" height="15" fill="rgb(209,38,44)"/><text x="62.9370%" y="63.50"></text></g><g><title>adt_dtorck_constraint (508,867 samples, 0.16%)</title><rect x="62.6646%" y="69" width="0.1580%" height="15" fill="rgb(236,212,23)"/><text x="62.9146%" y="79.50"></text></g><g><title>adt_dtorck_constraint (733,739 samples, 0.23%)</title><rect x="62.5991%" y="85" width="0.2278%" height="15" fill="rgb(242,79,21)"/><text x="62.8491%" y="95.50"></text></g><g><title>adt_dtorck_constraint (946,882 samples, 0.29%)</title><rect x="62.5443%" y="101" width="0.2940%" height="15" fill="rgb(211,96,35)"/><text x="62.7943%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,192,045 samples, 0.37%)</title><rect x="62.4882%" y="117" width="0.3701%" height="15" fill="rgb(253,215,40)"/><text x="62.7382%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,571,869 samples, 0.49%)</title><rect x="62.3919%" y="133" width="0.4881%" height="15" fill="rgb(211,81,21)"/><text x="62.6419%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,316,065 samples, 0.72%)</title><rect x="62.1978%" y="149" width="0.7191%" height="15" fill="rgb(208,190,38)"/><text x="62.4478%" y="159.50"></text></g><g><title>dropck_outlives (3,342,405 samples, 1.04%)</title><rect x="61.9009%" y="165" width="1.0378%" height="15" fill="rgb(235,213,38)"/><text x="62.1509%" y="175.50"></text></g><g><title>predicates_of (600,025 samples, 0.19%)</title><rect x="64.1813%" y="149" width="0.1863%" height="15" fill="rgb(237,122,38)"/><text x="64.4313%" y="159.50"></text></g><g><title>predicates_defined_on (399,043 samples, 0.12%)</title><rect x="64.2437%" y="133" width="0.1239%" height="15" fill="rgb(244,218,35)"/><text x="64.4937%" y="143.50"></text></g><g><title>trait_impls_of (572,669 samples, 0.18%)</title><rect x="64.4637%" y="149" width="0.1778%" height="15" fill="rgb(240,68,47)"/><text x="64.7137%" y="159.50"></text></g><g><title>evaluate_obligation (5,485,895 samples, 1.70%)</title><rect x="62.9387%" y="165" width="1.7033%" height="15" fill="rgb(210,16,53)"/><text x="63.1887%" y="175.50"></text></g><g><title>fn_sig (430,056 samples, 0.13%)</title><rect x="64.6621%" y="165" width="0.1335%" height="15" fill="rgb(235,124,12)"/><text x="64.9121%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (363,456 samples, 0.11%)</title><rect x="64.6828%" y="149" width="0.1129%" height="15" fill="rgb(224,169,11)"/><text x="64.9328%" y="159.50"></text></g><g><title>item_attrs (333,682 samples, 0.10%)</title><rect x="65.0466%" y="165" width="0.1036%" height="15" fill="rgb(250,166,2)"/><text x="65.2966%" y="175.50"></text></g><g><title>evaluate_obligation (532,861 samples, 0.17%)</title><rect x="65.4276%" y="149" width="0.1654%" height="15" fill="rgb(242,216,29)"/><text x="65.6776%" y="159.50"></text></g><g><title>method_autoderef_steps (1,248,700 samples, 0.39%)</title><rect x="65.2102%" y="165" width="0.3877%" height="15" fill="rgb(230,116,27)"/><text x="65.4602%" y="175.50"></text></g><g><title>predicates_of (768,195 samples, 0.24%)</title><rect x="65.7636%" y="165" width="0.2385%" height="15" fill="rgb(228,99,48)"/><text x="66.0136%" y="175.50"></text></g><g><title>predicates_defined_on (537,962 samples, 0.17%)</title><rect x="65.8350%" y="149" width="0.1670%" height="15" fill="rgb(253,11,6)"/><text x="66.0850%" y="159.50"></text></g><g><title>generics_of (679,336 samples, 0.21%)</title><rect x="68.4241%" y="133" width="0.2109%" height="15" fill="rgb(247,143,39)"/><text x="68.6741%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (493,215 samples, 0.15%)</title><rect x="68.4819%" y="117" width="0.1531%" height="15" fill="rgb(236,97,10)"/><text x="68.7319%" y="127.50"></text></g><g><title>impl_trait_ref (956,291 samples, 0.30%)</title><rect x="68.6771%" y="133" width="0.2969%" height="15" fill="rgb(233,208,19)"/><text x="68.9271%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (765,538 samples, 0.24%)</title><rect x="68.7363%" y="117" width="0.2377%" height="15" fill="rgb(216,164,2)"/><text x="68.9863%" y="127.50"></text></g><g><title>opt_def_kind (365,905 samples, 0.11%)</title><rect x="69.0544%" y="117" width="0.1136%" height="15" fill="rgb(220,129,5)"/><text x="69.3044%" y="127.50"></text></g><g><title>predicates_of (1,040,069 samples, 0.32%)</title><rect x="68.9856%" y="133" width="0.3229%" height="15" fill="rgb(242,17,10)"/><text x="69.2356%" y="143.50"></text></g><g><title>predicates_defined_on (452,622 samples, 0.14%)</title><rect x="69.1680%" y="117" width="0.1405%" height="15" fill="rgb(242,107,0)"/><text x="69.4180%" y="127.50"></text></g><g><title>specializes (2,066,142 samples, 0.64%)</title><rect x="69.3086%" y="133" width="0.6415%" height="15" fill="rgb(251,28,31)"/><text x="69.5586%" y="143.50"></text></g><g><title>param_env (1,210,344 samples, 0.38%)</title><rect x="69.5743%" y="117" width="0.3758%" height="15" fill="rgb(233,223,10)"/><text x="69.8243%" y="127.50"></text></g><g><title>def_span (565,554 samples, 0.18%)</title><rect x="69.7745%" y="101" width="0.1756%" height="15" fill="rgb(215,21,27)"/><text x="70.0245%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (501,874 samples, 0.16%)</title><rect x="69.7943%" y="85" width="0.1558%" height="15" fill="rgb(232,23,21)"/><text x="70.0443%" y="95.50"></text></g><g><title>evaluate_obligation (8,118,817 samples, 2.52%)</title><rect x="67.4927%" y="149" width="2.5208%" height="15" fill="rgb(244,5,23)"/><text x="67.7427%" y="159.50">ev..</text></g><g><title>typeck (13,314,459 samples, 4.13%)</title><rect x="66.1178%" y="165" width="4.1340%" height="15" fill="rgb(226,81,46)"/><text x="66.3678%" y="175.50">typeck</text></g><g><title>item_bodies_checking (107,808,881 samples, 33.47%)</title><rect x="36.8270%" y="213" width="33.4738%" height="15" fill="rgb(247,70,30)"/><text x="37.0770%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (107,805,591 samples, 33.47%)</title><rect x="36.8280%" y="197" width="33.4728%" height="15" fill="rgb(212,68,19)"/><text x="37.0780%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (107,571,408 samples, 33.40%)</title><rect x="36.9007%" y="181" width="33.4001%" height="15" fill="rgb(240,187,13)"/><text x="37.1507%" y="191.50">typeck</text></g><g><title>item_types_checking (2,355,666 samples, 0.73%)</title><rect x="70.3008%" y="213" width="0.7314%" height="15" fill="rgb(223,113,26)"/><text x="70.5508%" y="223.50"></text></g><g><title>check_mod_item_types (2,351,226 samples, 0.73%)</title><rect x="70.3022%" y="197" width="0.7300%" height="15" fill="rgb(206,192,2)"/><text x="70.5522%" y="207.50"></text></g><g><title>fn_sig (673,035 samples, 0.21%)</title><rect x="71.2318%" y="181" width="0.2090%" height="15" fill="rgb(241,108,4)"/><text x="71.4818%" y="191.50"></text></g><g><title>lint_levels (474,105 samples, 0.15%)</title><rect x="71.5821%" y="133" width="0.1472%" height="15" fill="rgb(247,173,49)"/><text x="71.8321%" y="143.50"></text></g><g><title>is_late_bound_map (680,888 samples, 0.21%)</title><rect x="71.5180%" y="165" width="0.2114%" height="15" fill="rgb(224,114,35)"/><text x="71.7680%" y="175.50"></text></g><g><title>resolve_lifetimes (667,218 samples, 0.21%)</title><rect x="71.5222%" y="149" width="0.2072%" height="15" fill="rgb(245,159,27)"/><text x="71.7722%" y="159.50"></text></g><g><title>named_region_map (654,269 samples, 0.20%)</title><rect x="71.7294%" y="165" width="0.2031%" height="15" fill="rgb(245,172,44)"/><text x="71.9794%" y="175.50"></text></g><g><title>resolve_lifetimes (594,778 samples, 0.18%)</title><rect x="71.7479%" y="149" width="0.1847%" height="15" fill="rgb(236,23,11)"/><text x="71.9979%" y="159.50"></text></g><g><title>generics_of (1,614,321 samples, 0.50%)</title><rect x="71.4408%" y="181" width="0.5012%" height="15" fill="rgb(205,117,38)"/><text x="71.6908%" y="191.50"></text></g><g><title>predicates_of (1,244,557 samples, 0.39%)</title><rect x="71.9720%" y="181" width="0.3864%" height="15" fill="rgb(237,72,25)"/><text x="72.2220%" y="191.50"></text></g><g><title>predicates_defined_on (1,112,215 samples, 0.35%)</title><rect x="72.0131%" y="165" width="0.3453%" height="15" fill="rgb(244,70,9)"/><text x="72.2631%" y="175.50"></text></g><g><title>inferred_outlives_of (610,246 samples, 0.19%)</title><rect x="72.1690%" y="149" width="0.1895%" height="15" fill="rgb(217,125,39)"/><text x="72.4190%" y="159.50"></text></g><g><title>inferred_outlives_crate (567,496 samples, 0.18%)</title><rect x="72.1822%" y="133" width="0.1762%" height="15" fill="rgb(235,36,10)"/><text x="72.4322%" y="143.50"></text></g><g><title>type_of (323,154 samples, 0.10%)</title><rect x="72.2581%" y="117" width="0.1003%" height="15" fill="rgb(251,123,47)"/><text x="72.5081%" y="127.50"></text></g><g><title>type_collecting (4,433,849 samples, 1.38%)</title><rect x="71.0334%" y="213" width="1.3767%" height="15" fill="rgb(221,13,13)"/><text x="71.2834%" y="223.50"></text></g><g><title>collect_mod_item_types (4,425,489 samples, 1.37%)</title><rect x="71.0360%" y="197" width="1.3741%" height="15" fill="rgb(238,131,9)"/><text x="71.2860%" y="207.50"></text></g><g><title>evaluate_obligation (1,083,544 samples, 0.34%)</title><rect x="73.9492%" y="181" width="0.3364%" height="15" fill="rgb(211,50,8)"/><text x="74.1992%" y="191.50"></text></g><g><title>implied_outlives_bounds (374,096 samples, 0.12%)</title><rect x="74.2880%" y="181" width="0.1162%" height="15" fill="rgb(245,182,24)"/><text x="74.5380%" y="191.50"></text></g><g><title>param_env (608,765 samples, 0.19%)</title><rect x="74.4041%" y="181" width="0.1890%" height="15" fill="rgb(242,14,37)"/><text x="74.6541%" y="191.50"></text></g><g><title>region_scope_tree (1,488,867 samples, 0.46%)</title><rect x="74.6033%" y="181" width="0.4623%" height="15" fill="rgb(246,228,12)"/><text x="74.8533%" y="191.50"></text></g><g><title>check_impl_item_well_formed (8,076,748 samples, 2.51%)</title><rect x="72.5716%" y="197" width="2.5078%" height="15" fill="rgb(213,55,15)"/><text x="72.8216%" y="207.50">ch..</text></g><g><title>evaluate_obligation (1,122,886 samples, 0.35%)</title><rect x="75.8421%" y="181" width="0.3486%" height="15" fill="rgb(209,9,3)"/><text x="76.0921%" y="191.50"></text></g><g><title>param_env (490,587 samples, 0.15%)</title><rect x="76.2527%" y="181" width="0.1523%" height="15" fill="rgb(230,59,30)"/><text x="76.5027%" y="191.50"></text></g><g><title>analysis (245,762,068 samples, 76.31%)</title><rect x="0.2316%" y="245" width="76.3072%" height="15" fill="rgb(209,121,21)"/><text x="0.4816%" y="255.50">analysis</text></g><g><title>type_check_crate (144,373,728 samples, 44.83%)</title><rect x="31.7119%" y="229" width="44.8269%" height="15" fill="rgb(220,109,13)"/><text x="31.9619%" y="239.50">type_check_crate</text></g><g><title>wf_checking (13,284,238 samples, 4.12%)</title><rect x="72.4141%" y="213" width="4.1247%" height="15" fill="rgb(232,18,1)"/><text x="72.6641%" y="223.50">wf_c..</text></g><g><title>check_item_well_formed (4,700,176 samples, 1.46%)</title><rect x="75.0794%" y="197" width="1.4594%" height="15" fill="rgb(215,41,42)"/><text x="75.3294%" y="207.50"></text></g><g><title>codegen_crate (387,014 samples, 0.12%)</title><rect x="76.5419%" y="245" width="0.1202%" height="15" fill="rgb(224,123,36)"/><text x="76.7919%" y="255.50"></text></g><g><title>AST_validation (421,905 samples, 0.13%)</title><rect x="76.7196%" y="229" width="0.1310%" height="15" fill="rgb(240,125,3)"/><text x="76.9696%" y="239.50"></text></g><g><title>metadata_load_macro (578,755 samples, 0.18%)</title><rect x="88.8086%" y="197" width="0.1797%" height="15" fill="rgb(205,98,50)"/><text x="89.0586%" y="207.50"></text></g><g><title>metadata_register_crate (2,694,601 samples, 0.84%)</title><rect x="88.9883%" y="197" width="0.8367%" height="15" fill="rgb(205,185,37)"/><text x="89.2383%" y="207.50"></text></g><g><title>metadata_register_crate (906,760 samples, 0.28%)</title><rect x="89.5434%" y="181" width="0.2815%" height="15" fill="rgb(238,207,15)"/><text x="89.7934%" y="191.50"></text></g><g><title>macro_expand_crate (42,203,150 samples, 13.10%)</title><rect x="76.9236%" y="229" width="13.1037%" height="15" fill="rgb(213,199,42)"/><text x="77.1736%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (42,180,580 samples, 13.10%)</title><rect x="76.9306%" y="213" width="13.0967%" height="15" fill="rgb(235,201,11)"/><text x="77.1806%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (651,758 samples, 0.20%)</title><rect x="89.8250%" y="197" width="0.2024%" height="15" fill="rgb(207,46,11)"/><text x="90.0750%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (352,124 samples, 0.11%)</title><rect x="90.0284%" y="229" width="0.1093%" height="15" fill="rgb(241,35,35)"/><text x="90.2784%" y="239.50"></text></g><g><title>late_resolve_crate (4,682,132 samples, 1.45%)</title><rect x="90.2491%" y="213" width="1.4538%" height="15" fill="rgb(243,32,47)"/><text x="90.4991%" y="223.50"></text></g><g><title>configure_and_expand (48,717,743 samples, 15.13%)</title><rect x="76.6621%" y="245" width="15.1265%" height="15" fill="rgb(247,202,23)"/><text x="76.9121%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (5,316,849 samples, 1.65%)</title><rect x="90.1377%" y="229" width="1.6508%" height="15" fill="rgb(219,102,11)"/><text x="90.3877%" y="239.50"></text></g><g><title>drop_ast (619,116 samples, 0.19%)</title><rect x="91.7886%" y="245" width="0.1922%" height="15" fill="rgb(243,110,44)"/><text x="92.0386%" y="255.50"></text></g><g><title>early_lint_checks (1,046,612 samples, 0.32%)</title><rect x="91.9874%" y="245" width="0.3250%" height="15" fill="rgb(222,74,54)"/><text x="92.2374%" y="255.50"></text></g><g><title>free_global_ctxt (5,555,282 samples, 1.72%)</title><rect x="92.3123%" y="245" width="1.7249%" height="15" fill="rgb(216,99,12)"/><text x="92.5623%" y="255.50"></text></g><g><title>generate_crate_metadata (2,515,268 samples, 0.78%)</title><rect x="94.0372%" y="245" width="0.7810%" height="15" fill="rgb(226,22,26)"/><text x="94.2872%" y="255.50"></text></g><g><title>hir_lowering (8,043,159 samples, 2.50%)</title><rect x="94.8182%" y="245" width="2.4973%" height="15" fill="rgb(217,163,10)"/><text x="95.0682%" y="255.50">hi..</text></g><g><title>parse_crate (6,461,371 samples, 2.01%)</title><rect x="97.3383%" y="245" width="2.0062%" height="15" fill="rgb(213,25,53)"/><text x="97.5883%" y="255.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,447,326 samples, 0.45%)</title><rect x="99.4067%" y="245" width="0.4494%" height="15" fill="rgb(252,105,26)"/><text x="99.6567%" y="255.50"></text></g><g><title>all (322,069,267 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (322,069,267 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (368,004 samples, 0.11%)</title><rect x="99.8857%" y="245" width="0.1143%" height="15" fill="rgb(252,8,32)"/><text x="100.1357%" y="255.50"></text></g></svg></svg>