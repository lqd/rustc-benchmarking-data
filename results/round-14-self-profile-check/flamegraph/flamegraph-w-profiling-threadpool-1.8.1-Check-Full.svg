<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (200,512 samples, 0.24%)</title><rect x="8.9421%" y="117" width="0.2436%" height="15" fill="rgb(227,0,7)"/><text x="9.1921%" y="127.50"></text></g><g><title>item_attrs (279,851 samples, 0.34%)</title><rect x="9.5890%" y="85" width="0.3400%" height="15" fill="rgb(217,0,24)"/><text x="9.8390%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (271,901 samples, 0.33%)</title><rect x="9.5986%" y="69" width="0.3304%" height="15" fill="rgb(221,193,54)"/><text x="9.8486%" y="79.50"></text></g><g><title>codegen_fn_attrs (367,032 samples, 0.45%)</title><rect x="9.4993%" y="101" width="0.4459%" height="15" fill="rgb(248,212,6)"/><text x="9.7493%" y="111.50"></text></g><g><title>is_copy_raw (94,120 samples, 0.11%)</title><rect x="11.6834%" y="53" width="0.1144%" height="15" fill="rgb(208,68,35)"/><text x="11.9334%" y="63.50"></text></g><g><title>adt_drop_tys (247,392 samples, 0.30%)</title><rect x="11.5885%" y="69" width="0.3006%" height="15" fill="rgb(232,128,0)"/><text x="11.8385%" y="79.50"></text></g><g><title>needs_drop_raw (612,599 samples, 0.74%)</title><rect x="11.5200%" y="85" width="0.7443%" height="15" fill="rgb(207,160,47)"/><text x="11.7700%" y="95.50"></text></g><g><title>is_copy_raw (308,883 samples, 0.38%)</title><rect x="11.8890%" y="69" width="0.3753%" height="15" fill="rgb(228,23,34)"/><text x="12.1390%" y="79.50"></text></g><g><title>evaluate_obligation (252,312 samples, 0.31%)</title><rect x="11.9578%" y="53" width="0.3066%" height="15" fill="rgb(218,30,26)"/><text x="12.2078%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (139,341 samples, 0.17%)</title><rect x="12.4163%" y="69" width="0.1693%" height="15" fill="rgb(220,122,19)"/><text x="12.6663%" y="79.50"></text></g><g><title>impl_parent (205,002 samples, 0.25%)</title><rect x="12.9897%" y="53" width="0.2491%" height="15" fill="rgb(250,228,42)"/><text x="13.2397%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (139,682 samples, 0.17%)</title><rect x="13.0690%" y="37" width="0.1697%" height="15" fill="rgb(240,193,28)"/><text x="13.3190%" y="47.50"></text></g><g><title>specialization_graph_of (959,301 samples, 1.17%)</title><rect x="12.6309%" y="69" width="1.1655%" height="15" fill="rgb(216,20,37)"/><text x="12.8809%" y="79.50"></text></g><g><title>impl_trait_ref (458,975 samples, 0.56%)</title><rect x="13.2388%" y="53" width="0.5576%" height="15" fill="rgb(206,188,39)"/><text x="13.4888%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (394,054 samples, 0.48%)</title><rect x="13.3176%" y="37" width="0.4788%" height="15" fill="rgb(217,207,13)"/><text x="13.5676%" y="47.50"></text></g><g><title>resolve_instance (1,316,863 samples, 1.60%)</title><rect x="12.2643%" y="85" width="1.6000%" height="15" fill="rgb(231,73,38)"/><text x="12.5143%" y="95.50"></text></g><g><title>thir_body (537,945 samples, 0.65%)</title><rect x="13.8831%" y="85" width="0.6536%" height="15" fill="rgb(225,20,46)"/><text x="14.1331%" y="95.50"></text></g><g><title>mir_const (5,118,288 samples, 6.22%)</title><rect x="8.3395%" y="133" width="6.2186%" height="15" fill="rgb(210,31,41)"/><text x="8.5895%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,421,761 samples, 5.37%)</title><rect x="9.1857%" y="117" width="5.3723%" height="15" fill="rgb(221,200,47)"/><text x="9.4357%" y="127.50">unsafet..</text></g><g><title>mir_built (3,796,675 samples, 4.61%)</title><rect x="9.9452%" y="101" width="4.6129%" height="15" fill="rgb(226,26,5)"/><text x="10.1952%" y="111.50">mir_b..</text></g><g><title>mir_promoted (5,572,691 samples, 6.77%)</title><rect x="7.8153%" y="149" width="6.7707%" height="15" fill="rgb(249,33,26)"/><text x="8.0653%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (128,961 samples, 0.16%)</title><rect x="14.5860%" y="149" width="0.1567%" height="15" fill="rgb(235,183,28)"/><text x="14.8360%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (200,963 samples, 0.24%)</title><rect x="14.7427%" y="149" width="0.2442%" height="15" fill="rgb(221,5,38)"/><text x="14.9927%" y="159.50"></text></g><g><title>normalize_projection_ty (122,511 samples, 0.15%)</title><rect x="14.8380%" y="133" width="0.1488%" height="15" fill="rgb(247,18,42)"/><text x="15.0880%" y="143.50"></text></g><g><title>type_op_prove_predicate (854,451 samples, 1.04%)</title><rect x="14.9868%" y="149" width="1.0381%" height="15" fill="rgb(241,131,45)"/><text x="15.2368%" y="159.50"></text></g><g><title>MIR_borrow_checking (12,243,316 samples, 14.88%)</title><rect x="1.1621%" y="181" width="14.8754%" height="15" fill="rgb(249,31,29)"/><text x="1.4121%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,191,135 samples, 14.81%)</title><rect x="1.2255%" y="165" width="14.8120%" height="15" fill="rgb(225,111,53)"/><text x="1.4755%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (187,302 samples, 0.23%)</title><rect x="16.0552%" y="181" width="0.2276%" height="15" fill="rgb(238,160,17)"/><text x="16.3052%" y="191.50"></text></g><g><title>get_lang_items (112,541 samples, 0.14%)</title><rect x="16.7209%" y="133" width="0.1367%" height="15" fill="rgb(214,148,48)"/><text x="16.9709%" y="143.50"></text></g><g><title>codegen_fn_attrs (114,391 samples, 0.14%)</title><rect x="17.0028%" y="117" width="0.1390%" height="15" fill="rgb(232,36,49)"/><text x="17.2528%" y="127.50"></text></g><g><title>should_inherit_track_caller (240,614 samples, 0.29%)</title><rect x="16.8576%" y="133" width="0.2923%" height="15" fill="rgb(209,103,24)"/><text x="17.1076%" y="143.50"></text></g><g><title>codegen_fn_attrs (488,996 samples, 0.59%)</title><rect x="16.5924%" y="149" width="0.5941%" height="15" fill="rgb(229,88,8)"/><text x="16.8424%" y="159.50"></text></g><g><title>check_mod_attrs (725,078 samples, 0.88%)</title><rect x="16.3060%" y="165" width="0.8810%" height="15" fill="rgb(213,181,19)"/><text x="16.5560%" y="175.50"></text></g><g><title>check_mod_const_bodies (119,272 samples, 0.14%)</title><rect x="17.1869%" y="165" width="0.1449%" height="15" fill="rgb(254,191,54)"/><text x="17.4369%" y="175.50"></text></g><g><title>lookup_stability (162,491 samples, 0.20%)</title><rect x="17.7169%" y="149" width="0.1974%" height="15" fill="rgb(241,83,37)"/><text x="17.9669%" y="159.50"></text></g><g><title>stability_index (89,631 samples, 0.11%)</title><rect x="17.8055%" y="133" width="0.1089%" height="15" fill="rgb(233,36,39)"/><text x="18.0555%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (457,175 samples, 0.56%)</title><rect x="17.4253%" y="165" width="0.5555%" height="15" fill="rgb(226,3,54)"/><text x="17.6753%" y="175.50"></text></g><g><title>misc_checking_1 (1,459,566 samples, 1.77%)</title><rect x="16.2833%" y="181" width="1.7733%" height="15" fill="rgb(245,192,40)"/><text x="16.5333%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (266,243 samples, 0.32%)</title><rect x="18.0584%" y="165" width="0.3235%" height="15" fill="rgb(238,167,29)"/><text x="18.3084%" y="175.50"></text></g><g><title>check_mod_liveness (221,742 samples, 0.27%)</title><rect x="18.1124%" y="149" width="0.2694%" height="15" fill="rgb(232,182,51)"/><text x="18.3624%" y="159.50"></text></g><g><title>misc_checking_2 (505,246 samples, 0.61%)</title><rect x="18.0567%" y="181" width="0.6139%" height="15" fill="rgb(231,60,39)"/><text x="18.3067%" y="191.50"></text></g><g><title>match_checking (237,593 samples, 0.29%)</title><rect x="18.3819%" y="165" width="0.2887%" height="15" fill="rgb(208,69,12)"/><text x="18.6319%" y="175.50"></text></g><g><title>check_match (222,903 samples, 0.27%)</title><rect x="18.3997%" y="149" width="0.2708%" height="15" fill="rgb(235,93,37)"/><text x="18.6497%" y="159.50"></text></g><g><title>check_private_in_public (94,691 samples, 0.12%)</title><rect x="18.6817%" y="165" width="0.1150%" height="15" fill="rgb(213,116,39)"/><text x="18.9317%" y="175.50"></text></g><g><title>death_checking (197,302 samples, 0.24%)</title><rect x="18.7967%" y="165" width="0.2397%" height="15" fill="rgb(222,207,29)"/><text x="19.0467%" y="175.50"></text></g><g><title>param_env (91,252 samples, 0.11%)</title><rect x="19.7370%" y="133" width="0.1109%" height="15" fill="rgb(206,96,30)"/><text x="19.9870%" y="143.50"></text></g><g><title>crate_lints (1,792,640 samples, 2.18%)</title><rect x="19.0382%" y="149" width="2.1780%" height="15" fill="rgb(218,138,4)"/><text x="19.2882%" y="159.50">c..</text></g><g><title>type_of (1,038,125 samples, 1.26%)</title><rect x="19.9549%" y="133" width="1.2613%" height="15" fill="rgb(250,191,14)"/><text x="20.2049%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (805,871 samples, 0.98%)</title><rect x="20.2371%" y="117" width="0.9791%" height="15" fill="rgb(239,60,40)"/><text x="20.4871%" y="127.50"></text></g><g><title>lint_checking (1,998,742 samples, 2.43%)</title><rect x="19.0364%" y="165" width="2.4284%" height="15" fill="rgb(206,27,48)"/><text x="19.2864%" y="175.50">li..</text></g><g><title>module_lints (204,632 samples, 0.25%)</title><rect x="21.2162%" y="149" width="0.2486%" height="15" fill="rgb(225,35,8)"/><text x="21.4662%" y="159.50"></text></g><g><title>lint_mod (202,652 samples, 0.25%)</title><rect x="21.2186%" y="133" width="0.2462%" height="15" fill="rgb(250,213,24)"/><text x="21.4686%" y="143.50"></text></g><g><title>privacy_access_levels (111,491 samples, 0.14%)</title><rect x="21.4649%" y="165" width="0.1355%" height="15" fill="rgb(247,123,22)"/><text x="21.7149%" y="175.50"></text></g><g><title>privacy_checking_modules (402,275 samples, 0.49%)</title><rect x="21.6003%" y="165" width="0.4888%" height="15" fill="rgb(231,138,38)"/><text x="21.8503%" y="175.50"></text></g><g><title>check_mod_privacy (400,415 samples, 0.49%)</title><rect x="21.6026%" y="149" width="0.4865%" height="15" fill="rgb(231,145,46)"/><text x="21.8526%" y="159.50"></text></g><g><title>misc_checking_3 (2,830,922 samples, 3.44%)</title><rect x="18.6705%" y="181" width="3.4395%" height="15" fill="rgb(251,118,11)"/><text x="18.9205%" y="191.50">mis..</text></g><g><title>impl_parent (2,073,410 samples, 2.52%)</title><rect x="26.2295%" y="117" width="2.5191%" height="15" fill="rgb(217,147,25)"/><text x="26.4795%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,273,821 samples, 1.55%)</title><rect x="27.2010%" y="101" width="1.5477%" height="15" fill="rgb(247,81,37)"/><text x="27.4510%" y="111.50"></text></g><g><title>impl_trait_ref (5,031,359 samples, 6.11%)</title><rect x="28.7487%" y="117" width="6.1130%" height="15" fill="rgb(209,12,38)"/><text x="28.9987%" y="127.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,251,378 samples, 5.17%)</title><rect x="29.6963%" y="101" width="5.1653%" height="15" fill="rgb(227,1,9)"/><text x="29.9463%" y="111.50">metada..</text></g><g><title>coherent_trait (11,211,194 samples, 13.62%)</title><rect x="22.1924%" y="149" width="13.6214%" height="15" fill="rgb(248,47,43)"/><text x="22.4424%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (11,195,164 samples, 13.60%)</title><rect x="22.2119%" y="133" width="13.6019%" height="15" fill="rgb(221,10,30)"/><text x="22.4619%" y="143.50">specialization_graph_..</text></g><g><title>trait_impls_of (781,698 samples, 0.95%)</title><rect x="34.8640%" y="117" width="0.9497%" height="15" fill="rgb(210,229,1)"/><text x="35.1140%" y="127.50"></text></g><g><title>implementations_of_trait (170,343 samples, 0.21%)</title><rect x="35.6068%" y="101" width="0.2070%" height="15" fill="rgb(222,148,37)"/><text x="35.8568%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (140,523 samples, 0.17%)</title><rect x="35.6430%" y="85" width="0.1707%" height="15" fill="rgb(234,67,33)"/><text x="35.8930%" y="95.50"></text></g><g><title>coherence_checking (11,272,946 samples, 13.70%)</title><rect x="22.1695%" y="165" width="13.6964%" height="15" fill="rgb(247,98,35)"/><text x="22.4195%" y="175.50">coherence_checking</text></g><g><title>associated_item (659,728 samples, 0.80%)</title><rect x="44.8202%" y="101" width="0.8016%" height="15" fill="rgb(247,138,52)"/><text x="45.0702%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (595,656 samples, 0.72%)</title><rect x="44.8980%" y="85" width="0.7237%" height="15" fill="rgb(213,79,30)"/><text x="45.1480%" y="95.50"></text></g><g><title>associated_items (803,970 samples, 0.98%)</title><rect x="44.6757%" y="117" width="0.9768%" height="15" fill="rgb(246,177,23)"/><text x="44.9257%" y="127.50"></text></g><g><title>adt_def (184,003 samples, 0.22%)</title><rect x="46.1382%" y="85" width="0.2236%" height="15" fill="rgb(230,62,27)"/><text x="46.3882%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (179,263 samples, 0.22%)</title><rect x="46.1439%" y="69" width="0.2178%" height="15" fill="rgb(216,154,8)"/><text x="46.3939%" y="79.50"></text></g><g><title>adt_dtorck_constraint (151,951 samples, 0.18%)</title><rect x="46.5857%" y="69" width="0.1846%" height="15" fill="rgb(244,35,45)"/><text x="46.8357%" y="79.50"></text></g><g><title>adt_dtorck_constraint (323,772 samples, 0.39%)</title><rect x="46.4259%" y="85" width="0.3934%" height="15" fill="rgb(251,115,12)"/><text x="46.6759%" y="95.50"></text></g><g><title>adt_dtorck_constraint (789,618 samples, 0.96%)</title><rect x="45.9884%" y="101" width="0.9594%" height="15" fill="rgb(240,54,50)"/><text x="46.2384%" y="111.50"></text></g><g><title>dropck_outlives (1,032,682 samples, 1.25%)</title><rect x="45.7071%" y="117" width="1.2547%" height="15" fill="rgb(233,84,52)"/><text x="45.9571%" y="127.50"></text></g><g><title>predicates_of (103,591 samples, 0.13%)</title><rect x="47.6960%" y="101" width="0.1259%" height="15" fill="rgb(207,117,47)"/><text x="47.9460%" y="111.50"></text></g><g><title>evaluate_obligation (927,005 samples, 1.13%)</title><rect x="46.9618%" y="117" width="1.1263%" height="15" fill="rgb(249,43,39)"/><text x="47.2118%" y="127.50"></text></g><g><title>trait_impls_of (216,034 samples, 0.26%)</title><rect x="47.8256%" y="101" width="0.2625%" height="15" fill="rgb(209,38,44)"/><text x="48.0756%" y="111.50"></text></g><g><title>implementations_of_trait (82,551 samples, 0.10%)</title><rect x="47.9878%" y="85" width="0.1003%" height="15" fill="rgb(236,212,23)"/><text x="48.2378%" y="95.50"></text></g><g><title>fn_sig (92,462 samples, 0.11%)</title><rect x="48.1137%" y="117" width="0.1123%" height="15" fill="rgb(242,79,21)"/><text x="48.3637%" y="127.50"></text></g><g><title>generics_of (92,460 samples, 0.11%)</title><rect x="48.2260%" y="117" width="0.1123%" height="15" fill="rgb(211,96,35)"/><text x="48.4760%" y="127.50"></text></g><g><title>item_attrs (103,310 samples, 0.13%)</title><rect x="48.4942%" y="117" width="0.1255%" height="15" fill="rgb(253,215,40)"/><text x="48.7442%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (99,550 samples, 0.12%)</title><rect x="48.4987%" y="101" width="0.1210%" height="15" fill="rgb(211,81,21)"/><text x="48.7487%" y="111.50"></text></g><g><title>method_autoderef_steps (232,632 samples, 0.28%)</title><rect x="48.6900%" y="117" width="0.2826%" height="15" fill="rgb(208,190,38)"/><text x="48.9400%" y="127.50"></text></g><g><title>evaluate_obligation (99,251 samples, 0.12%)</title><rect x="48.8520%" y="101" width="0.1206%" height="15" fill="rgb(235,213,38)"/><text x="49.1020%" y="111.50"></text></g><g><title>object_safety_violations (105,691 samples, 0.13%)</title><rect x="48.9746%" y="117" width="0.1284%" height="15" fill="rgb(237,122,38)"/><text x="49.2246%" y="127.50"></text></g><g><title>predicates_of (257,655 samples, 0.31%)</title><rect x="49.1482%" y="117" width="0.3130%" height="15" fill="rgb(244,218,35)"/><text x="49.3982%" y="127.50"></text></g><g><title>predicates_defined_on (178,694 samples, 0.22%)</title><rect x="49.2441%" y="101" width="0.2171%" height="15" fill="rgb(240,68,47)"/><text x="49.4941%" y="111.50"></text></g><g><title>associated_item (111,662 samples, 0.14%)</title><rect x="51.9073%" y="85" width="0.1357%" height="15" fill="rgb(210,16,53)"/><text x="52.1573%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (87,711 samples, 0.11%)</title><rect x="51.9364%" y="69" width="0.1066%" height="15" fill="rgb(235,124,12)"/><text x="52.1864%" y="79.50"></text></g><g><title>associated_items (162,373 samples, 0.20%)</title><rect x="51.8539%" y="101" width="0.1973%" height="15" fill="rgb(224,169,11)"/><text x="52.1039%" y="111.50"></text></g><g><title>dropck_outlives (150,282 samples, 0.18%)</title><rect x="52.0597%" y="101" width="0.1826%" height="15" fill="rgb(250,166,2)"/><text x="52.3097%" y="111.50"></text></g><g><title>adt_dtorck_constraint (88,720 samples, 0.11%)</title><rect x="52.1345%" y="85" width="0.1078%" height="15" fill="rgb(242,216,29)"/><text x="52.3845%" y="95.50"></text></g><g><title>adt_sized_constraint (83,381 samples, 0.10%)</title><rect x="52.7815%" y="85" width="0.1013%" height="15" fill="rgb(230,116,27)"/><text x="53.0315%" y="95.50"></text></g><g><title>predicates_of (85,762 samples, 0.10%)</title><rect x="52.9286%" y="85" width="0.1042%" height="15" fill="rgb(228,99,48)"/><text x="53.1786%" y="95.50"></text></g><g><title>evaluate_obligation (711,356 samples, 0.86%)</title><rect x="52.2423%" y="101" width="0.8643%" height="15" fill="rgb(253,11,6)"/><text x="52.4923%" y="111.50"></text></g><g><title>is_copy_raw (272,563 samples, 0.33%)</title><rect x="53.1662%" y="101" width="0.3312%" height="15" fill="rgb(247,143,39)"/><text x="53.4162%" y="111.50"></text></g><g><title>evaluate_obligation (258,693 samples, 0.31%)</title><rect x="53.1831%" y="85" width="0.3143%" height="15" fill="rgb(236,97,10)"/><text x="53.4331%" y="95.50"></text></g><g><title>trait_impls_of (165,442 samples, 0.20%)</title><rect x="53.2964%" y="69" width="0.2010%" height="15" fill="rgb(233,208,19)"/><text x="53.5464%" y="79.50"></text></g><g><title>evaluate_obligation (87,080 samples, 0.11%)</title><rect x="53.6169%" y="85" width="0.1058%" height="15" fill="rgb(216,164,2)"/><text x="53.8669%" y="95.50"></text></g><g><title>method_autoderef_steps (176,741 samples, 0.21%)</title><rect x="53.5183%" y="101" width="0.2147%" height="15" fill="rgb(220,129,5)"/><text x="53.7683%" y="111.50"></text></g><g><title>typeck (3,554,500 samples, 4.32%)</title><rect x="49.5411%" y="117" width="4.3186%" height="15" fill="rgb(242,17,10)"/><text x="49.7911%" y="127.50">typeck</text></g><g><title>variances_of (246,602 samples, 0.30%)</title><rect x="53.8719%" y="117" width="0.2996%" height="15" fill="rgb(242,107,0)"/><text x="54.1219%" y="127.50"></text></g><g><title>item_bodies_checking (15,051,638 samples, 18.29%)</title><rect x="35.8973%" y="165" width="18.2874%" height="15" fill="rgb(251,28,31)"/><text x="36.1473%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,048,908 samples, 18.28%)</title><rect x="35.9006%" y="149" width="18.2841%" height="15" fill="rgb(233,223,10)"/><text x="36.1506%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (15,010,788 samples, 18.24%)</title><rect x="35.9469%" y="133" width="18.2378%" height="15" fill="rgb(215,21,27)"/><text x="36.1969%" y="143.50">typeck</text></g><g><title>item_types_checking (354,974 samples, 0.43%)</title><rect x="54.1847%" y="165" width="0.4313%" height="15" fill="rgb(232,23,21)"/><text x="54.4347%" y="175.50"></text></g><g><title>check_mod_item_types (352,874 samples, 0.43%)</title><rect x="54.1873%" y="149" width="0.4287%" height="15" fill="rgb(244,5,23)"/><text x="54.4373%" y="159.50"></text></g><g><title>late_bound_vars_map (135,551 samples, 0.16%)</title><rect x="55.0861%" y="117" width="0.1647%" height="15" fill="rgb(226,81,46)"/><text x="55.3361%" y="127.50"></text></g><g><title>resolve_lifetimes (119,561 samples, 0.15%)</title><rect x="55.1056%" y="101" width="0.1453%" height="15" fill="rgb(247,70,30)"/><text x="55.3556%" y="111.50"></text></g><g><title>fn_sig (280,533 samples, 0.34%)</title><rect x="54.9396%" y="133" width="0.3408%" height="15" fill="rgb(212,68,19)"/><text x="55.1896%" y="143.50"></text></g><g><title>is_late_bound_map (93,881 samples, 0.11%)</title><rect x="55.4107%" y="117" width="0.1141%" height="15" fill="rgb(240,187,13)"/><text x="55.6607%" y="127.50"></text></g><g><title>resolve_lifetimes (84,301 samples, 0.10%)</title><rect x="55.4224%" y="101" width="0.1024%" height="15" fill="rgb(223,113,26)"/><text x="55.6724%" y="111.50"></text></g><g><title>generics_of (304,042 samples, 0.37%)</title><rect x="55.2804%" y="133" width="0.3694%" height="15" fill="rgb(206,192,2)"/><text x="55.5304%" y="143.50"></text></g><g><title>explicit_predicates_of (271,555 samples, 0.33%)</title><rect x="55.8763%" y="101" width="0.3299%" height="15" fill="rgb(241,108,4)"/><text x="56.1263%" y="111.50"></text></g><g><title>predicates_of (775,392 samples, 0.94%)</title><rect x="55.7217%" y="133" width="0.9421%" height="15" fill="rgb(247,173,49)"/><text x="55.9717%" y="143.50"></text></g><g><title>predicates_defined_on (727,242 samples, 0.88%)</title><rect x="55.7802%" y="117" width="0.8836%" height="15" fill="rgb(224,114,35)"/><text x="56.0302%" y="127.50"></text></g><g><title>inferred_outlives_of (376,515 samples, 0.46%)</title><rect x="56.2063%" y="101" width="0.4575%" height="15" fill="rgb(245,159,27)"/><text x="56.4563%" y="111.50"></text></g><g><title>inferred_outlives_crate (351,714 samples, 0.43%)</title><rect x="56.2364%" y="85" width="0.4273%" height="15" fill="rgb(245,172,44)"/><text x="56.4864%" y="95.50"></text></g><g><title>type_of (182,613 samples, 0.22%)</title><rect x="56.4419%" y="69" width="0.2219%" height="15" fill="rgb(236,23,11)"/><text x="56.6919%" y="79.50"></text></g><g><title>type_of (99,322 samples, 0.12%)</title><rect x="56.5431%" y="53" width="0.1207%" height="15" fill="rgb(205,117,38)"/><text x="56.7931%" y="63.50"></text></g><g><title>metadata_decode_entry_type_of (85,261 samples, 0.10%)</title><rect x="56.5601%" y="37" width="0.1036%" height="15" fill="rgb(237,72,25)"/><text x="56.8101%" y="47.50"></text></g><g><title>lint_levels (103,992 samples, 0.13%)</title><rect x="57.3425%" y="117" width="0.1263%" height="15" fill="rgb(244,70,9)"/><text x="57.5925%" y="127.50"></text></g><g><title>type_collecting (2,366,446 samples, 2.88%)</title><rect x="54.6181%" y="165" width="2.8752%" height="15" fill="rgb(217,125,39)"/><text x="54.8681%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,356,886 samples, 2.86%)</title><rect x="54.6297%" y="149" width="2.8636%" height="15" fill="rgb(235,36,10)"/><text x="54.8797%" y="159.50">co..</text></g><g><title>type_of (632,626 samples, 0.77%)</title><rect x="56.7247%" y="133" width="0.7686%" height="15" fill="rgb(251,123,47)"/><text x="56.9747%" y="143.50"></text></g><g><title>evaluate_obligation (195,742 samples, 0.24%)</title><rect x="58.2946%" y="133" width="0.2378%" height="15" fill="rgb(221,13,13)"/><text x="58.5446%" y="143.50"></text></g><g><title>param_env (109,561 samples, 0.13%)</title><rect x="58.6283%" y="133" width="0.1331%" height="15" fill="rgb(238,131,9)"/><text x="58.8783%" y="143.50"></text></g><g><title>region_scope_tree (139,320 samples, 0.17%)</title><rect x="58.7760%" y="133" width="0.1693%" height="15" fill="rgb(211,50,8)"/><text x="59.0260%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,139,031 samples, 1.38%)</title><rect x="57.5952%" y="149" width="1.3839%" height="15" fill="rgb(245,182,24)"/><text x="57.8452%" y="159.50"></text></g><g><title>adt_def (176,552 samples, 0.21%)</title><rect x="59.9143%" y="101" width="0.2145%" height="15" fill="rgb(242,14,37)"/><text x="60.1643%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (174,232 samples, 0.21%)</title><rect x="59.9171%" y="85" width="0.2117%" height="15" fill="rgb(246,228,12)"/><text x="60.1671%" y="95.50"></text></g><g><title>item_attrs (145,441 samples, 0.18%)</title><rect x="59.9521%" y="69" width="0.1767%" height="15" fill="rgb(213,55,15)"/><text x="60.2021%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,571 samples, 0.17%)</title><rect x="59.9556%" y="53" width="0.1732%" height="15" fill="rgb(209,9,3)"/><text x="60.2056%" y="63.50"></text></g><g><title>adt_def (105,681 samples, 0.13%)</title><rect x="60.1372%" y="85" width="0.1284%" height="15" fill="rgb(230,59,30)"/><text x="60.3872%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (104,601 samples, 0.13%)</title><rect x="60.1385%" y="69" width="0.1271%" height="15" fill="rgb(209,121,21)"/><text x="60.3885%" y="79.50"></text></g><g><title>item_attrs (86,941 samples, 0.11%)</title><rect x="60.1600%" y="53" width="0.1056%" height="15" fill="rgb(220,109,13)"/><text x="60.4100%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (85,651 samples, 0.10%)</title><rect x="60.1615%" y="37" width="0.1041%" height="15" fill="rgb(232,18,1)"/><text x="60.4115%" y="47.50"></text></g><g><title>adt_sized_constraint (205,452 samples, 0.25%)</title><rect x="60.1288%" y="101" width="0.2496%" height="15" fill="rgb(215,41,42)"/><text x="60.3788%" y="111.50"></text></g><g><title>adt_sized_constraint (409,315 samples, 0.50%)</title><rect x="59.8957%" y="117" width="0.4973%" height="15" fill="rgb(224,123,36)"/><text x="60.1457%" y="127.50"></text></g><g><title>evaluate_obligation (592,899 samples, 0.72%)</title><rect x="59.7148%" y="133" width="0.7204%" height="15" fill="rgb(240,125,3)"/><text x="59.9648%" y="143.50"></text></g><g><title>layout_of (133,851 samples, 0.16%)</title><rect x="60.5982%" y="117" width="0.1626%" height="15" fill="rgb(205,98,50)"/><text x="60.8482%" y="127.50"></text></g><g><title>object_safety_violations (234,383 samples, 0.28%)</title><rect x="60.4802%" y="133" width="0.2848%" height="15" fill="rgb(205,185,37)"/><text x="60.7302%" y="143.50"></text></g><g><title>param_env (161,841 samples, 0.20%)</title><rect x="60.7649%" y="133" width="0.1966%" height="15" fill="rgb(238,207,15)"/><text x="61.0149%" y="143.50"></text></g><g><title>check_item_well_formed (1,782,101 samples, 2.17%)</title><rect x="58.9791%" y="149" width="2.1652%" height="15" fill="rgb(213,199,42)"/><text x="59.2291%" y="159.50">c..</text></g><g><title>evaluate_obligation (135,211 samples, 0.16%)</title><rect x="61.2359%" y="133" width="0.1643%" height="15" fill="rgb(235,201,11)"/><text x="61.4859%" y="143.50"></text></g><g><title>analysis (49,902,816 samples, 60.63%)</title><rect x="0.8255%" y="197" width="60.6308%" height="15" fill="rgb(207,46,11)"/><text x="1.0755%" y="207.50">analysis</text></g><g><title>type_check_crate (32,384,370 samples, 39.35%)</title><rect x="22.1100%" y="181" width="39.3463%" height="15" fill="rgb(241,35,35)"/><text x="22.3600%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,259,166 samples, 3.96%)</title><rect x="57.4965%" y="165" width="3.9598%" height="15" fill="rgb(243,32,47)"/><text x="57.7465%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (256,813 samples, 0.31%)</title><rect x="61.1443%" y="149" width="0.3120%" height="15" fill="rgb(247,202,23)"/><text x="61.3943%" y="159.50"></text></g><g><title>codegen_crate (525,216 samples, 0.64%)</title><rect x="61.4693%" y="197" width="0.6381%" height="15" fill="rgb(219,102,11)"/><text x="61.7193%" y="207.50"></text></g><g><title>AST_validation (136,432 samples, 0.17%)</title><rect x="62.3343%" y="181" width="0.1658%" height="15" fill="rgb(243,110,44)"/><text x="62.5843%" y="191.50"></text></g><g><title>metadata_load_macro (109,032 samples, 0.13%)</title><rect x="74.7049%" y="149" width="0.1325%" height="15" fill="rgb(222,74,54)"/><text x="74.9549%" y="159.50"></text></g><g><title>macro_expand_crate (12,380,648 samples, 15.04%)</title><rect x="62.6557%" y="181" width="15.0422%" height="15" fill="rgb(216,99,12)"/><text x="62.9057%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,358,468 samples, 15.02%)</title><rect x="62.6826%" y="165" width="15.0153%" height="15" fill="rgb(226,22,26)"/><text x="62.9326%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,354,376 samples, 2.86%)</title><rect x="74.8374%" y="149" width="2.8605%" height="15" fill="rgb(217,163,10)"/><text x="75.0874%" y="159.50">me..</text></g><g><title>metadata_register_crate (867,189 samples, 1.05%)</title><rect x="76.6443%" y="133" width="1.0536%" height="15" fill="rgb(213,25,53)"/><text x="76.8943%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (411,594 samples, 0.50%)</title><rect x="77.7037%" y="181" width="0.5001%" height="15" fill="rgb(252,105,26)"/><text x="77.9537%" y="191.50"></text></g><g><title>late_resolve_crate (2,094,434 samples, 2.54%)</title><rect x="78.3567%" y="165" width="2.5447%" height="15" fill="rgb(220,39,43)"/><text x="78.6067%" y="175.50">la..</text></g><g><title>configure_and_expand (15,564,503 samples, 18.91%)</title><rect x="62.1075%" y="197" width="18.9105%" height="15" fill="rgb(229,68,48)"/><text x="62.3575%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,316,286 samples, 2.81%)</title><rect x="78.2038%" y="181" width="2.8142%" height="15" fill="rgb(252,8,32)"/><text x="78.4538%" y="191.50">re..</text></g><g><title>drop_ast (218,583 samples, 0.27%)</title><rect x="81.0180%" y="197" width="0.2656%" height="15" fill="rgb(223,20,43)"/><text x="81.2680%" y="207.50"></text></g><g><title>early_lint_checks (398,684 samples, 0.48%)</title><rect x="81.3005%" y="197" width="0.4844%" height="15" fill="rgb(229,81,49)"/><text x="81.5505%" y="207.50"></text></g><g><title>free_global_ctxt (3,206,986 samples, 3.90%)</title><rect x="81.7849%" y="197" width="3.8964%" height="15" fill="rgb(236,28,36)"/><text x="82.0349%" y="207.50">free..</text></g><g><title>generate_crate_metadata (588,276 samples, 0.71%)</title><rect x="85.6814%" y="197" width="0.7147%" height="15" fill="rgb(249,185,26)"/><text x="85.9314%" y="207.50"></text></g><g><title>hir_lowering (2,418,607 samples, 2.94%)</title><rect x="86.3961%" y="197" width="2.9386%" height="15" fill="rgb(249,174,33)"/><text x="86.6461%" y="207.50">hi..</text></g><g><title>parse_crate (7,350,492 samples, 8.93%)</title><rect x="89.3954%" y="197" width="8.9307%" height="15" fill="rgb(233,201,37)"/><text x="89.6454%" y="207.50">parse_crate</text></g><g><title>prepare_outputs (252,532 samples, 0.31%)</title><rect x="98.3354%" y="197" width="0.3068%" height="15" fill="rgb(221,78,26)"/><text x="98.5854%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (705,248 samples, 0.86%)</title><rect x="98.6422%" y="197" width="0.8569%" height="15" fill="rgb(250,127,30)"/><text x="98.8922%" y="207.50"></text></g><g><title>setup_global_ctxt (119,701 samples, 0.15%)</title><rect x="99.5119%" y="197" width="0.1454%" height="15" fill="rgb(230,49,44)"/><text x="99.7619%" y="207.50"></text></g><g><title>all (82,305,996 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (82,305,996 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (282,033 samples, 0.34%)</title><rect x="99.6573%" y="197" width="0.3427%" height="15" fill="rgb(215,43,3)"/><text x="99.9073%" y="207.50"></text></g></svg></svg>