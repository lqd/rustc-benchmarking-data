<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (459,886 samples, 0.41%)</title><rect x="7.2570%" y="133" width="0.4105%" height="15" fill="rgb(227,0,7)"/><text x="7.5070%" y="143.50"></text></g><g><title>mir_const_qualif_const_arg (389,295 samples, 0.35%)</title><rect x="7.3200%" y="117" width="0.3475%" height="15" fill="rgb(217,0,24)"/><text x="7.5700%" y="127.50"></text></g><g><title>mir_const (327,133 samples, 0.29%)</title><rect x="7.3755%" y="101" width="0.2920%" height="15" fill="rgb(221,193,54)"/><text x="7.6255%" y="111.50"></text></g><g><title>unsafety_check_result_for_const_arg (201,361 samples, 0.18%)</title><rect x="7.4877%" y="85" width="0.1797%" height="15" fill="rgb(248,212,6)"/><text x="7.7377%" y="95.50"></text></g><g><title>mir_built (175,041 samples, 0.16%)</title><rect x="7.5112%" y="69" width="0.1562%" height="15" fill="rgb(208,68,35)"/><text x="7.7612%" y="79.50"></text></g><g><title>mir_borrowck_const_arg (1,114,702 samples, 1.00%)</title><rect x="6.6749%" y="149" width="0.9950%" height="15" fill="rgb(232,128,0)"/><text x="6.9249%" y="159.50"></text></g><g><title>param_env (227,402 samples, 0.20%)</title><rect x="8.5643%" y="117" width="0.2030%" height="15" fill="rgb(207,160,47)"/><text x="8.8143%" y="127.50"></text></g><g><title>item_attrs (179,550 samples, 0.16%)</title><rect x="9.1298%" y="85" width="0.1603%" height="15" fill="rgb(228,23,34)"/><text x="9.3798%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (173,350 samples, 0.15%)</title><rect x="9.1353%" y="69" width="0.1547%" height="15" fill="rgb(218,30,26)"/><text x="9.3853%" y="79.50"></text></g><g><title>codegen_fn_attrs (281,432 samples, 0.25%)</title><rect x="9.0506%" y="101" width="0.2512%" height="15" fill="rgb(220,122,19)"/><text x="9.3006%" y="111.50"></text></g><g><title>adt_drop_tys (222,893 samples, 0.20%)</title><rect x="10.9822%" y="69" width="0.1990%" height="15" fill="rgb(250,228,42)"/><text x="11.2322%" y="79.50"></text></g><g><title>is_copy_raw (505,287 samples, 0.45%)</title><rect x="11.1811%" y="69" width="0.4510%" height="15" fill="rgb(240,193,28)"/><text x="11.4311%" y="79.50"></text></g><g><title>evaluate_obligation (460,406 samples, 0.41%)</title><rect x="11.2212%" y="53" width="0.4110%" height="15" fill="rgb(216,20,37)"/><text x="11.4712%" y="63.50"></text></g><g><title>needs_drop_raw (779,540 samples, 0.70%)</title><rect x="10.9385%" y="85" width="0.6959%" height="15" fill="rgb(206,188,39)"/><text x="11.1885%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (368,167 samples, 0.33%)</title><rect x="11.8287%" y="69" width="0.3286%" height="15" fill="rgb(217,207,13)"/><text x="12.0787%" y="79.50"></text></g><g><title>impl_parent (169,471 samples, 0.15%)</title><rect x="12.5414%" y="53" width="0.1513%" height="15" fill="rgb(231,73,38)"/><text x="12.7914%" y="63.50"></text></g><g><title>specialization_graph_of (1,199,801 samples, 1.07%)</title><rect x="12.2091%" y="69" width="1.0710%" height="15" fill="rgb(225,20,46)"/><text x="12.4591%" y="79.50"></text></g><g><title>impl_trait_ref (658,018 samples, 0.59%)</title><rect x="12.6927%" y="53" width="0.5874%" height="15" fill="rgb(210,31,41)"/><text x="12.9427%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (355,815 samples, 0.32%)</title><rect x="12.9625%" y="37" width="0.3176%" height="15" fill="rgb(221,200,47)"/><text x="13.2125%" y="47.50"></text></g><g><title>resolve_instance (1,928,413 samples, 1.72%)</title><rect x="11.6343%" y="85" width="1.7214%" height="15" fill="rgb(226,26,5)"/><text x="11.8843%" y="95.50"></text></g><g><title>thir_body (751,036 samples, 0.67%)</title><rect x="13.3684%" y="85" width="0.6704%" height="15" fill="rgb(249,33,26)"/><text x="13.6184%" y="95.50"></text></g><g><title>mir_const (6,674,313 samples, 5.96%)</title><rect x="8.0893%" y="133" width="5.9578%" height="15" fill="rgb(235,183,28)"/><text x="8.3393%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (5,914,767 samples, 5.28%)</title><rect x="8.7673%" y="117" width="5.2798%" height="15" fill="rgb(221,5,38)"/><text x="9.0173%" y="127.50">unsafe..</text></g><g><title>mir_built (5,315,891 samples, 4.75%)</title><rect x="9.3019%" y="101" width="4.7452%" height="15" fill="rgb(247,18,42)"/><text x="9.5519%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (7,421,161 samples, 6.62%)</title><rect x="7.6699%" y="149" width="6.6245%" height="15" fill="rgb(241,131,45)"/><text x="7.9199%" y="159.50">mir_promo..</text></g><g><title>mir_const_qualif (277,034 samples, 0.25%)</title><rect x="14.0471%" y="133" width="0.2473%" height="15" fill="rgb(249,31,29)"/><text x="14.2971%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (228,753 samples, 0.20%)</title><rect x="14.2944%" y="149" width="0.2042%" height="15" fill="rgb(225,111,53)"/><text x="14.5444%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (445,448 samples, 0.40%)</title><rect x="14.4986%" y="149" width="0.3976%" height="15" fill="rgb(238,160,17)"/><text x="14.7486%" y="159.50"></text></g><g><title>normalize_projection_ty (264,495 samples, 0.24%)</title><rect x="14.6601%" y="133" width="0.2361%" height="15" fill="rgb(214,148,48)"/><text x="14.9101%" y="143.50"></text></g><g><title>type_op_prove_predicate (854,058 samples, 0.76%)</title><rect x="14.9289%" y="149" width="0.7624%" height="15" fill="rgb(232,36,49)"/><text x="15.1789%" y="159.50"></text></g><g><title>MIR_borrow_checking (16,358,692 samples, 14.60%)</title><rect x="1.1010%" y="181" width="14.6025%" height="15" fill="rgb(209,103,24)"/><text x="1.3510%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,264,460 samples, 14.52%)</title><rect x="1.1851%" y="165" width="14.5184%" height="15" fill="rgb(229,88,8)"/><text x="1.4351%" y="175.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (166,473 samples, 0.15%)</title><rect x="15.8838%" y="149" width="0.1486%" height="15" fill="rgb(213,181,19)"/><text x="16.1338%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (287,894 samples, 0.26%)</title><rect x="15.7761%" y="165" width="0.2570%" height="15" fill="rgb(254,191,54)"/><text x="16.0261%" y="175.50"></text></g><g><title>MIR_effect_checking (373,744 samples, 0.33%)</title><rect x="15.7035%" y="181" width="0.3336%" height="15" fill="rgb(241,83,37)"/><text x="15.9535%" y="191.50"></text></g><g><title>hir_module_items (140,741 samples, 0.13%)</title><rect x="16.0371%" y="181" width="0.1256%" height="15" fill="rgb(233,36,39)"/><text x="16.2871%" y="191.50"></text></g><g><title>codegen_fn_attrs (199,191 samples, 0.18%)</title><rect x="16.5606%" y="117" width="0.1778%" height="15" fill="rgb(226,3,54)"/><text x="16.8106%" y="127.50"></text></g><g><title>codegen_fn_attrs (432,953 samples, 0.39%)</title><rect x="16.3561%" y="149" width="0.3865%" height="15" fill="rgb(245,192,40)"/><text x="16.6061%" y="159.50"></text></g><g><title>should_inherit_track_caller (286,281 samples, 0.26%)</title><rect x="16.4870%" y="133" width="0.2555%" height="15" fill="rgb(238,167,29)"/><text x="16.7370%" y="143.50"></text></g><g><title>check_mod_attrs (620,197 samples, 0.55%)</title><rect x="16.1891%" y="165" width="0.5536%" height="15" fill="rgb(232,182,51)"/><text x="16.4391%" y="175.50"></text></g><g><title>param_env (314,924 samples, 0.28%)</title><rect x="17.1465%" y="149" width="0.2811%" height="15" fill="rgb(231,60,39)"/><text x="17.3965%" y="159.50"></text></g><g><title>predicates_of (179,882 samples, 0.16%)</title><rect x="17.2671%" y="133" width="0.1606%" height="15" fill="rgb(208,69,12)"/><text x="17.5171%" y="143.50"></text></g><g><title>predicates_defined_on (178,252 samples, 0.16%)</title><rect x="17.2685%" y="117" width="0.1591%" height="15" fill="rgb(235,93,37)"/><text x="17.5185%" y="127.50"></text></g><g><title>inferred_outlives_of (164,432 samples, 0.15%)</title><rect x="17.2808%" y="101" width="0.1468%" height="15" fill="rgb(213,116,39)"/><text x="17.5308%" y="111.50"></text></g><g><title>inferred_outlives_crate (156,761 samples, 0.14%)</title><rect x="17.2877%" y="85" width="0.1399%" height="15" fill="rgb(222,207,29)"/><text x="17.5377%" y="95.50"></text></g><g><title>check_mod_unstable_api_usage (693,857 samples, 0.62%)</title><rect x="16.8766%" y="165" width="0.6194%" height="15" fill="rgb(206,96,30)"/><text x="17.1266%" y="175.50"></text></g><g><title>misc_checking_1 (1,548,518 samples, 1.38%)</title><rect x="16.1632%" y="181" width="1.3823%" height="15" fill="rgb(218,138,4)"/><text x="16.4132%" y="191.50"></text></g><g><title>layout_of (199,662 samples, 0.18%)</title><rect x="17.6902%" y="85" width="0.1782%" height="15" fill="rgb(250,191,14)"/><text x="17.9402%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (132,992 samples, 0.12%)</title><rect x="17.7497%" y="69" width="0.1187%" height="15" fill="rgb(239,60,40)"/><text x="17.9997%" y="79.50"></text></g><g><title>normalize_projection_ty (131,152 samples, 0.12%)</title><rect x="17.7513%" y="53" width="0.1171%" height="15" fill="rgb(206,27,48)"/><text x="18.0013%" y="63.50"></text></g><g><title>layout_of (236,773 samples, 0.21%)</title><rect x="17.6665%" y="101" width="0.2114%" height="15" fill="rgb(225,35,8)"/><text x="17.9165%" y="111.50"></text></g><g><title>layout_of (267,743 samples, 0.24%)</title><rect x="17.6601%" y="117" width="0.2390%" height="15" fill="rgb(250,213,24)"/><text x="17.9101%" y="127.50"></text></g><g><title>check_mod_intrinsics (391,575 samples, 0.35%)</title><rect x="17.5548%" y="149" width="0.3495%" height="15" fill="rgb(247,123,22)"/><text x="17.8048%" y="159.50"></text></g><g><title>layout_of (317,743 samples, 0.28%)</title><rect x="17.6207%" y="133" width="0.2836%" height="15" fill="rgb(231,138,38)"/><text x="17.8707%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (653,928 samples, 0.58%)</title><rect x="17.5466%" y="165" width="0.5837%" height="15" fill="rgb(231,145,46)"/><text x="17.7966%" y="175.50"></text></g><g><title>check_mod_liveness (253,163 samples, 0.23%)</title><rect x="17.9044%" y="149" width="0.2260%" height="15" fill="rgb(251,118,11)"/><text x="18.1544%" y="159.50"></text></g><g><title>misc_checking_2 (983,201 samples, 0.88%)</title><rect x="17.5454%" y="181" width="0.8777%" height="15" fill="rgb(217,147,25)"/><text x="17.7954%" y="191.50"></text></g><g><title>match_checking (327,943 samples, 0.29%)</title><rect x="18.1304%" y="165" width="0.2927%" height="15" fill="rgb(247,81,37)"/><text x="18.3804%" y="175.50"></text></g><g><title>check_match (302,832 samples, 0.27%)</title><rect x="18.1528%" y="149" width="0.2703%" height="15" fill="rgb(209,12,38)"/><text x="18.4028%" y="159.50"></text></g><g><title>check_private_in_public (181,492 samples, 0.16%)</title><rect x="18.4313%" y="165" width="0.1620%" height="15" fill="rgb(227,1,9)"/><text x="18.6813%" y="175.50"></text></g><g><title>death_checking (439,555 samples, 0.39%)</title><rect x="18.5933%" y="165" width="0.3924%" height="15" fill="rgb(248,47,43)"/><text x="18.8433%" y="175.50"></text></g><g><title>item_attrs (138,990 samples, 0.12%)</title><rect x="18.8616%" y="149" width="0.1241%" height="15" fill="rgb(221,10,30)"/><text x="19.1116%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (137,460 samples, 0.12%)</title><rect x="18.8629%" y="133" width="0.1227%" height="15" fill="rgb(210,229,1)"/><text x="19.1129%" y="143.50"></text></g><g><title>eval_to_allocation_raw (143,071 samples, 0.13%)</title><rect x="19.4372%" y="133" width="0.1277%" height="15" fill="rgb(222,148,37)"/><text x="19.6872%" y="143.50"></text></g><g><title>eval_to_allocation_raw (142,191 samples, 0.13%)</title><rect x="19.4380%" y="117" width="0.1269%" height="15" fill="rgb(234,67,33)"/><text x="19.6880%" y="127.50"></text></g><g><title>eval_to_const_value_raw (207,352 samples, 0.19%)</title><rect x="19.5649%" y="133" width="0.1851%" height="15" fill="rgb(247,98,35)"/><text x="19.8149%" y="143.50"></text></g><g><title>eval_to_const_value_raw (202,492 samples, 0.18%)</title><rect x="19.5692%" y="117" width="0.1808%" height="15" fill="rgb(247,138,52)"/><text x="19.8192%" y="127.50"></text></g><g><title>eval_to_allocation_raw (198,102 samples, 0.18%)</title><rect x="19.5731%" y="101" width="0.1768%" height="15" fill="rgb(213,79,30)"/><text x="19.8231%" y="111.50"></text></g><g><title>param_env (308,654 samples, 0.28%)</title><rect x="19.7500%" y="133" width="0.2755%" height="15" fill="rgb(246,177,23)"/><text x="20.0000%" y="143.50"></text></g><g><title>predicates_of (137,972 samples, 0.12%)</title><rect x="19.9023%" y="117" width="0.1232%" height="15" fill="rgb(230,62,27)"/><text x="20.1523%" y="127.50"></text></g><g><title>predicates_defined_on (112,851 samples, 0.10%)</title><rect x="19.9248%" y="101" width="0.1007%" height="15" fill="rgb(216,154,8)"/><text x="20.1748%" y="111.50"></text></g><g><title>crate_lints (1,549,927 samples, 1.38%)</title><rect x="18.9870%" y="149" width="1.3835%" height="15" fill="rgb(244,35,45)"/><text x="19.2370%" y="159.50"></text></g><g><title>type_of (350,643 samples, 0.31%)</title><rect x="20.0576%" y="133" width="0.3130%" height="15" fill="rgb(251,115,12)"/><text x="20.3076%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (270,611 samples, 0.24%)</title><rect x="20.1290%" y="117" width="0.2416%" height="15" fill="rgb(240,54,50)"/><text x="20.3790%" y="127.50"></text></g><g><title>lint_checking (1,851,121 samples, 1.65%)</title><rect x="18.9856%" y="165" width="1.6524%" height="15" fill="rgb(233,84,52)"/><text x="19.2356%" y="175.50"></text></g><g><title>module_lints (299,644 samples, 0.27%)</title><rect x="20.3706%" y="149" width="0.2675%" height="15" fill="rgb(207,117,47)"/><text x="20.6206%" y="159.50"></text></g><g><title>lint_mod (294,524 samples, 0.26%)</title><rect x="20.3751%" y="133" width="0.2629%" height="15" fill="rgb(249,43,39)"/><text x="20.6251%" y="143.50"></text></g><g><title>privacy_access_levels (128,332 samples, 0.11%)</title><rect x="20.6380%" y="165" width="0.1146%" height="15" fill="rgb(209,38,44)"/><text x="20.8880%" y="175.50"></text></g><g><title>privacy_checking_modules (507,555 samples, 0.45%)</title><rect x="20.7526%" y="165" width="0.4531%" height="15" fill="rgb(236,212,23)"/><text x="21.0026%" y="175.50"></text></g><g><title>check_mod_privacy (503,425 samples, 0.45%)</title><rect x="20.7563%" y="149" width="0.4494%" height="15" fill="rgb(242,79,21)"/><text x="21.0063%" y="159.50"></text></g><g><title>misc_checking_3 (3,136,255 samples, 2.80%)</title><rect x="18.4231%" y="181" width="2.7996%" height="15" fill="rgb(211,96,35)"/><text x="18.6731%" y="191.50">mi..</text></g><g><title>impl_parent (1,359,035 samples, 1.21%)</title><rect x="23.1004%" y="117" width="1.2131%" height="15" fill="rgb(253,215,40)"/><text x="23.3504%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (639,257 samples, 0.57%)</title><rect x="23.7430%" y="101" width="0.5706%" height="15" fill="rgb(211,81,21)"/><text x="23.9930%" y="111.50"></text></g><g><title>impl_trait_ref (2,346,378 samples, 2.09%)</title><rect x="24.3140%" y="117" width="2.0945%" height="15" fill="rgb(208,190,38)"/><text x="24.5640%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,832,334 samples, 1.64%)</title><rect x="24.7728%" y="101" width="1.6356%" height="15" fill="rgb(235,213,38)"/><text x="25.0228%" y="111.50"></text></g><g><title>trait_impls_of (402,153 samples, 0.36%)</title><rect x="26.4327%" y="117" width="0.3590%" height="15" fill="rgb(237,122,38)"/><text x="26.6827%" y="127.50"></text></g><g><title>implementations_of_trait (125,170 samples, 0.11%)</title><rect x="26.6799%" y="101" width="0.1117%" height="15" fill="rgb(244,218,35)"/><text x="26.9299%" y="111.50"></text></g><g><title>coherent_trait (6,146,569 samples, 5.49%)</title><rect x="21.3056%" y="149" width="5.4867%" height="15" fill="rgb(240,68,47)"/><text x="21.5556%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (5,961,077 samples, 5.32%)</title><rect x="21.4711%" y="133" width="5.3211%" height="15" fill="rgb(210,16,53)"/><text x="21.7211%" y="143.50">special..</text></g><g><title>coherence_checking (6,266,620 samples, 5.59%)</title><rect x="21.2856%" y="165" width="5.5939%" height="15" fill="rgb(235,124,12)"/><text x="21.5356%" y="175.50">coheren..</text></g><g><title>adt_def (118,162 samples, 0.11%)</title><rect x="39.5460%" y="101" width="0.1055%" height="15" fill="rgb(224,169,11)"/><text x="39.7960%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (115,492 samples, 0.10%)</title><rect x="39.5484%" y="85" width="0.1031%" height="15" fill="rgb(250,166,2)"/><text x="39.7984%" y="95.50"></text></g><g><title>adt_sized_constraint (136,632 samples, 0.12%)</title><rect x="39.5354%" y="117" width="0.1220%" height="15" fill="rgb(242,216,29)"/><text x="39.7854%" y="127.50"></text></g><g><title>associated_item (435,963 samples, 0.39%)</title><rect x="39.7894%" y="101" width="0.3892%" height="15" fill="rgb(230,116,27)"/><text x="40.0394%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (341,542 samples, 0.30%)</title><rect x="39.8737%" y="85" width="0.3049%" height="15" fill="rgb(228,99,48)"/><text x="40.1237%" y="95.50"></text></g><g><title>associated_items (604,948 samples, 0.54%)</title><rect x="39.6604%" y="117" width="0.5400%" height="15" fill="rgb(253,11,6)"/><text x="39.9104%" y="127.50"></text></g><g><title>adt_dtorck_constraint (179,703 samples, 0.16%)</title><rect x="40.3628%" y="101" width="0.1604%" height="15" fill="rgb(247,143,39)"/><text x="40.6128%" y="111.50"></text></g><g><title>dropck_outlives (366,094 samples, 0.33%)</title><rect x="40.2616%" y="117" width="0.3268%" height="15" fill="rgb(236,97,10)"/><text x="40.5116%" y="127.50"></text></g><g><title>eval_to_const_value_raw (365,214 samples, 0.33%)</title><rect x="40.5884%" y="117" width="0.3260%" height="15" fill="rgb(233,208,19)"/><text x="40.8384%" y="127.50"></text></g><g><title>eval_to_const_value_raw (352,484 samples, 0.31%)</title><rect x="40.5998%" y="101" width="0.3146%" height="15" fill="rgb(216,164,2)"/><text x="40.8498%" y="111.50"></text></g><g><title>eval_to_allocation_raw (340,694 samples, 0.30%)</title><rect x="40.6103%" y="85" width="0.3041%" height="15" fill="rgb(220,129,5)"/><text x="40.8603%" y="95.50"></text></g><g><title>adt_sized_constraint (112,032 samples, 0.10%)</title><rect x="44.6121%" y="101" width="0.1000%" height="15" fill="rgb(242,17,10)"/><text x="44.8621%" y="111.50"></text></g><g><title>generics_of (719,196 samples, 0.64%)</title><rect x="44.7140%" y="101" width="0.6420%" height="15" fill="rgb(242,107,0)"/><text x="44.9640%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (519,085 samples, 0.46%)</title><rect x="44.8926%" y="85" width="0.4634%" height="15" fill="rgb(251,28,31)"/><text x="45.1426%" y="95.50"></text></g><g><title>impl_polarity (179,451 samples, 0.16%)</title><rect x="45.4298%" y="101" width="0.1602%" height="15" fill="rgb(233,223,10)"/><text x="45.6798%" y="111.50"></text></g><g><title>impl_trait_ref (1,013,924 samples, 0.91%)</title><rect x="45.5899%" y="101" width="0.9051%" height="15" fill="rgb(215,21,27)"/><text x="45.8399%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (842,712 samples, 0.75%)</title><rect x="45.7428%" y="85" width="0.7522%" height="15" fill="rgb(232,23,21)"/><text x="45.9928%" y="95.50"></text></g><g><title>opt_def_kind (183,792 samples, 0.16%)</title><rect x="46.7587%" y="85" width="0.1641%" height="15" fill="rgb(244,5,23)"/><text x="47.0087%" y="95.50"></text></g><g><title>explicit_predicates_of (186,304 samples, 0.17%)</title><rect x="47.3346%" y="69" width="0.1663%" height="15" fill="rgb(226,81,46)"/><text x="47.5846%" y="79.50"></text></g><g><title>predicates_of (1,207,078 samples, 1.08%)</title><rect x="46.5551%" y="101" width="1.0775%" height="15" fill="rgb(247,70,30)"/><text x="46.8051%" y="111.50"></text></g><g><title>predicates_defined_on (795,142 samples, 0.71%)</title><rect x="46.9228%" y="85" width="0.7098%" height="15" fill="rgb(212,68,19)"/><text x="47.1728%" y="95.50"></text></g><g><title>inferred_outlives_of (147,502 samples, 0.13%)</title><rect x="47.5009%" y="69" width="0.1317%" height="15" fill="rgb(240,187,13)"/><text x="47.7509%" y="79.50"></text></g><g><title>specializes (2,783,093 samples, 2.48%)</title><rect x="47.6326%" y="101" width="2.4843%" height="15" fill="rgb(223,113,26)"/><text x="47.8826%" y="111.50">sp..</text></g><g><title>param_env (1,595,108 samples, 1.42%)</title><rect x="48.6930%" y="85" width="1.4239%" height="15" fill="rgb(206,192,2)"/><text x="48.9430%" y="95.50"></text></g><g><title>def_span (732,745 samples, 0.65%)</title><rect x="49.4628%" y="69" width="0.6541%" height="15" fill="rgb(241,108,4)"/><text x="49.7128%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (653,785 samples, 0.58%)</title><rect x="49.5333%" y="53" width="0.5836%" height="15" fill="rgb(247,173,49)"/><text x="49.7833%" y="63.50"></text></g><g><title>trait_impls_of (380,690 samples, 0.34%)</title><rect x="50.1324%" y="101" width="0.3398%" height="15" fill="rgb(224,114,35)"/><text x="50.3824%" y="111.50"></text></g><g><title>implementations_of_trait (155,200 samples, 0.14%)</title><rect x="50.3337%" y="85" width="0.1385%" height="15" fill="rgb(245,159,27)"/><text x="50.5837%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (120,310 samples, 0.11%)</title><rect x="50.3649%" y="69" width="0.1074%" height="15" fill="rgb(245,172,44)"/><text x="50.6149%" y="79.50"></text></g><g><title>evaluate_obligation (10,728,100 samples, 9.58%)</title><rect x="40.9144%" y="117" width="9.5764%" height="15" fill="rgb(236,23,11)"/><text x="41.1644%" y="127.50">evaluate_oblig..</text></g><g><title>fn_sig (116,941 samples, 0.10%)</title><rect x="50.5232%" y="117" width="0.1044%" height="15" fill="rgb(205,117,38)"/><text x="50.7732%" y="127.50"></text></g><g><title>generics_of (120,480 samples, 0.11%)</title><rect x="50.6276%" y="117" width="0.1075%" height="15" fill="rgb(237,72,25)"/><text x="50.8776%" y="127.50"></text></g><g><title>associated_item (115,942 samples, 0.10%)</title><rect x="50.7815%" y="85" width="0.1035%" height="15" fill="rgb(244,70,9)"/><text x="51.0315%" y="95.50"></text></g><g><title>impl_item_implementor_ids (186,373 samples, 0.17%)</title><rect x="50.7351%" y="117" width="0.1664%" height="15" fill="rgb(217,125,39)"/><text x="50.9851%" y="127.50"></text></g><g><title>associated_items (167,723 samples, 0.15%)</title><rect x="50.7518%" y="101" width="0.1497%" height="15" fill="rgb(235,36,10)"/><text x="51.0018%" y="111.50"></text></g><g><title>item_attrs (212,771 samples, 0.19%)</title><rect x="50.9835%" y="117" width="0.1899%" height="15" fill="rgb(251,123,47)"/><text x="51.2335%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (206,361 samples, 0.18%)</title><rect x="50.9892%" y="101" width="0.1842%" height="15" fill="rgb(221,13,13)"/><text x="51.2392%" y="111.50"></text></g><g><title>evaluate_obligation (112,080 samples, 0.10%)</title><rect x="51.3383%" y="101" width="0.1000%" height="15" fill="rgb(238,131,9)"/><text x="51.5883%" y="111.50"></text></g><g><title>method_autoderef_steps (243,402 samples, 0.22%)</title><rect x="51.2319%" y="117" width="0.2173%" height="15" fill="rgb(211,50,8)"/><text x="51.4819%" y="127.50"></text></g><g><title>object_safety_violations (118,351 samples, 0.11%)</title><rect x="51.4491%" y="117" width="0.1056%" height="15" fill="rgb(245,182,24)"/><text x="51.6991%" y="127.50"></text></g><g><title>opt_const_param_of (838,009 samples, 0.75%)</title><rect x="51.5548%" y="117" width="0.7480%" height="15" fill="rgb(242,14,37)"/><text x="51.8048%" y="127.50"></text></g><g><title>typeck (808,319 samples, 0.72%)</title><rect x="51.5813%" y="101" width="0.7215%" height="15" fill="rgb(246,228,12)"/><text x="51.8313%" y="111.50"></text></g><g><title>explicit_predicates_of (121,891 samples, 0.11%)</title><rect x="52.4972%" y="85" width="0.1088%" height="15" fill="rgb(213,55,15)"/><text x="52.7472%" y="95.50"></text></g><g><title>predicates_of (359,381 samples, 0.32%)</title><rect x="52.3275%" y="117" width="0.3208%" height="15" fill="rgb(209,9,3)"/><text x="52.5775%" y="127.50"></text></g><g><title>predicates_defined_on (245,591 samples, 0.22%)</title><rect x="52.4291%" y="101" width="0.2192%" height="15" fill="rgb(230,59,30)"/><text x="52.6791%" y="111.50"></text></g><g><title>specializes (180,980 samples, 0.16%)</title><rect x="52.6601%" y="117" width="0.1616%" height="15" fill="rgb(209,121,21)"/><text x="52.9101%" y="127.50"></text></g><g><title>param_env (184,221 samples, 0.16%)</title><rect x="53.1772%" y="101" width="0.1644%" height="15" fill="rgb(220,109,13)"/><text x="53.4272%" y="111.50"></text></g><g><title>typeck_const_arg (498,726 samples, 0.45%)</title><rect x="52.9266%" y="117" width="0.4452%" height="15" fill="rgb(232,18,1)"/><text x="53.1766%" y="127.50"></text></g><g><title>item_bodies_checking (29,698,253 samples, 26.51%)</title><rect x="26.9052%" y="165" width="26.5100%" height="15" fill="rgb(215,41,42)"/><text x="27.1552%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,695,173 samples, 26.51%)</title><rect x="26.9080%" y="149" width="26.5073%" height="15" fill="rgb(224,123,36)"/><text x="27.1580%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (29,633,990 samples, 26.45%)</title><rect x="26.9626%" y="133" width="26.4527%" height="15" fill="rgb(240,125,3)"/><text x="27.2126%" y="143.50">typeck</text></g><g><title>evaluate_obligation (366,494 samples, 0.33%)</title><rect x="54.2134%" y="133" width="0.3271%" height="15" fill="rgb(205,98,50)"/><text x="54.4634%" y="143.50"></text></g><g><title>associated_item (203,151 samples, 0.18%)</title><rect x="55.0609%" y="101" width="0.1813%" height="15" fill="rgb(205,185,37)"/><text x="55.3109%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (177,471 samples, 0.16%)</title><rect x="55.0838%" y="85" width="0.1584%" height="15" fill="rgb(238,207,15)"/><text x="55.3338%" y="95.50"></text></g><g><title>associated_items (241,663 samples, 0.22%)</title><rect x="55.0307%" y="117" width="0.2157%" height="15" fill="rgb(213,199,42)"/><text x="55.2807%" y="127.50"></text></g><g><title>item_types_checking (2,177,064 samples, 1.94%)</title><rect x="53.4153%" y="165" width="1.9433%" height="15" fill="rgb(235,201,11)"/><text x="53.6653%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,170,714 samples, 1.94%)</title><rect x="53.4210%" y="149" width="1.9377%" height="15" fill="rgb(207,46,11)"/><text x="53.6710%" y="159.50">c..</text></g><g><title>typeck (628,117 samples, 0.56%)</title><rect x="54.7979%" y="133" width="0.5607%" height="15" fill="rgb(241,35,35)"/><text x="55.0479%" y="143.50"></text></g><g><title>fn_sig (218,332 samples, 0.19%)</title><rect x="55.5172%" y="133" width="0.1949%" height="15" fill="rgb(243,32,47)"/><text x="55.7672%" y="143.50"></text></g><g><title>named_region_map (295,553 samples, 0.26%)</title><rect x="55.7793%" y="117" width="0.2638%" height="15" fill="rgb(247,202,23)"/><text x="56.0293%" y="127.50"></text></g><g><title>resolve_lifetimes (283,413 samples, 0.25%)</title><rect x="55.7902%" y="101" width="0.2530%" height="15" fill="rgb(219,102,11)"/><text x="56.0402%" y="111.50"></text></g><g><title>lint_levels (120,931 samples, 0.11%)</title><rect x="55.9352%" y="85" width="0.1079%" height="15" fill="rgb(243,110,44)"/><text x="56.1852%" y="95.50"></text></g><g><title>generics_of (377,544 samples, 0.34%)</title><rect x="55.7121%" y="133" width="0.3370%" height="15" fill="rgb(222,74,54)"/><text x="55.9621%" y="143.50"></text></g><g><title>predicates_of (156,894 samples, 0.14%)</title><rect x="56.0983%" y="133" width="0.1401%" height="15" fill="rgb(216,99,12)"/><text x="56.3483%" y="143.50"></text></g><g><title>predicates_defined_on (122,772 samples, 0.11%)</title><rect x="56.1288%" y="117" width="0.1096%" height="15" fill="rgb(226,22,26)"/><text x="56.3788%" y="127.50"></text></g><g><title>type_collecting (1,045,021 samples, 0.93%)</title><rect x="55.3619%" y="165" width="0.9328%" height="15" fill="rgb(217,163,10)"/><text x="55.6119%" y="175.50"></text></g><g><title>collect_mod_item_types (1,039,231 samples, 0.93%)</title><rect x="55.3671%" y="149" width="0.9277%" height="15" fill="rgb(213,25,53)"/><text x="55.6171%" y="159.50"></text></g><g><title>evaluate_obligation (369,675 samples, 0.33%)</title><rect x="57.3302%" y="133" width="0.3300%" height="15" fill="rgb(252,105,26)"/><text x="57.5802%" y="143.50"></text></g><g><title>param_env (129,691 samples, 0.12%)</title><rect x="57.7614%" y="133" width="0.1158%" height="15" fill="rgb(220,39,43)"/><text x="58.0114%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,887,112 samples, 1.68%)</title><rect x="56.4113%" y="149" width="1.6845%" height="15" fill="rgb(229,68,48)"/><text x="56.6613%" y="159.50"></text></g><g><title>region_scope_tree (197,342 samples, 0.18%)</title><rect x="57.9197%" y="133" width="0.1762%" height="15" fill="rgb(252,8,32)"/><text x="58.1697%" y="143.50"></text></g><g><title>adt_sized_constraint (122,202 samples, 0.11%)</title><rect x="58.9720%" y="101" width="0.1091%" height="15" fill="rgb(223,20,43)"/><text x="59.2220%" y="111.50"></text></g><g><title>adt_sized_constraint (151,782 samples, 0.14%)</title><rect x="58.9481%" y="117" width="0.1355%" height="15" fill="rgb(229,81,49)"/><text x="59.1981%" y="127.50"></text></g><g><title>evaluate_obligation (395,862 samples, 0.35%)</title><rect x="58.7497%" y="133" width="0.3534%" height="15" fill="rgb(236,28,36)"/><text x="58.9997%" y="143.50"></text></g><g><title>param_env (142,900 samples, 0.13%)</title><rect x="59.1620%" y="133" width="0.1276%" height="15" fill="rgb(249,185,26)"/><text x="59.4120%" y="143.50"></text></g><g><title>analysis (65,611,104 samples, 58.57%)</title><rect x="0.9020%" y="197" width="58.5675%" height="15" fill="rgb(249,174,33)"/><text x="1.1520%" y="207.50">analysis</text></g><g><title>type_check_crate (42,846,610 samples, 38.25%)</title><rect x="21.2227%" y="181" width="38.2469%" height="15" fill="rgb(233,201,37)"/><text x="21.4727%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,551,000 samples, 3.17%)</title><rect x="56.2998%" y="165" width="3.1698%" height="15" fill="rgb(221,78,26)"/><text x="56.5498%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (1,538,948 samples, 1.37%)</title><rect x="58.0958%" y="149" width="1.3737%" height="15" fill="rgb(250,127,30)"/><text x="58.3458%" y="159.50"></text></g><g><title>codegen_crate (619,127 samples, 0.55%)</title><rect x="59.4786%" y="197" width="0.5527%" height="15" fill="rgb(230,49,44)"/><text x="59.7286%" y="207.50"></text></g><g><title>AST_validation (133,171 samples, 0.12%)</title><rect x="60.2242%" y="181" width="0.1189%" height="15" fill="rgb(229,67,23)"/><text x="60.4742%" y="191.50"></text></g><g><title>metadata_load_macro (605,018 samples, 0.54%)</title><rect x="88.9430%" y="149" width="0.5401%" height="15" fill="rgb(249,83,47)"/><text x="89.1930%" y="159.50"></text></g><g><title>metadata_register_crate (598,106 samples, 0.53%)</title><rect x="89.4831%" y="149" width="0.5339%" height="15" fill="rgb(215,43,3)"/><text x="89.7331%" y="159.50"></text></g><g><title>metadata_register_crate (161,642 samples, 0.14%)</title><rect x="89.8727%" y="133" width="0.1443%" height="15" fill="rgb(238,154,13)"/><text x="90.1227%" y="143.50"></text></g><g><title>macro_expand_crate (33,528,315 samples, 29.93%)</title><rect x="60.4754%" y="181" width="29.9289%" height="15" fill="rgb(219,56,2)"/><text x="60.7254%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (33,506,685 samples, 29.91%)</title><rect x="60.4947%" y="165" width="29.9096%" height="15" fill="rgb(233,0,4)"/><text x="60.7447%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (433,955 samples, 0.39%)</title><rect x="90.0170%" y="149" width="0.3874%" height="15" fill="rgb(235,30,7)"/><text x="90.2670%" y="159.50"></text></g><g><title>finalize_imports (188,513 samples, 0.17%)</title><rect x="90.4968%" y="165" width="0.1683%" height="15" fill="rgb(250,79,13)"/><text x="90.7468%" y="175.50"></text></g><g><title>finalize_macro_resolutions (153,151 samples, 0.14%)</title><rect x="90.6650%" y="165" width="0.1367%" height="15" fill="rgb(211,146,34)"/><text x="90.9150%" y="175.50"></text></g><g><title>late_resolve_crate (1,083,693 samples, 0.97%)</title><rect x="90.8017%" y="165" width="0.9674%" height="15" fill="rgb(228,22,38)"/><text x="91.0517%" y="175.50"></text></g><g><title>configure_and_expand (35,648,288 samples, 31.82%)</title><rect x="60.0312%" y="197" width="31.8213%" height="15" fill="rgb(235,168,5)"/><text x="60.2812%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,523,528 samples, 1.36%)</title><rect x="90.4926%" y="181" width="1.3600%" height="15" fill="rgb(221,155,16)"/><text x="90.7426%" y="191.50"></text></g><g><title>drop_ast (146,881 samples, 0.13%)</title><rect x="91.8525%" y="197" width="0.1311%" height="15" fill="rgb(215,215,53)"/><text x="92.1025%" y="207.50"></text></g><g><title>early_lint_checks (317,964 samples, 0.28%)</title><rect x="91.9989%" y="197" width="0.2838%" height="15" fill="rgb(223,4,10)"/><text x="92.2489%" y="207.50"></text></g><g><title>free_global_ctxt (2,399,547 samples, 2.14%)</title><rect x="92.2827%" y="197" width="2.1419%" height="15" fill="rgb(234,103,6)"/><text x="92.5327%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,854,710 samples, 1.66%)</title><rect x="94.4247%" y="197" width="1.6556%" height="15" fill="rgb(227,97,0)"/><text x="94.6747%" y="207.50"></text></g><g><title>hir_lowering (1,993,892 samples, 1.78%)</title><rect x="96.0803%" y="197" width="1.7798%" height="15" fill="rgb(234,150,53)"/><text x="96.3303%" y="207.50">h..</text></g><g><title>parse_crate (618,776 samples, 0.55%)</title><rect x="97.9021%" y="197" width="0.5523%" height="15" fill="rgb(228,201,54)"/><text x="98.1521%" y="207.50"></text></g><g><title>prepare_outputs (219,153 samples, 0.20%)</title><rect x="98.4630%" y="197" width="0.1956%" height="15" fill="rgb(222,22,37)"/><text x="98.7130%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (895,130 samples, 0.80%)</title><rect x="98.6587%" y="197" width="0.7990%" height="15" fill="rgb(237,53,32)"/><text x="98.9087%" y="207.50"></text></g><g><title>all (112,026,423 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (112,026,423 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (504,236 samples, 0.45%)</title><rect x="99.5499%" y="197" width="0.4501%" height="15" fill="rgb(241,220,44)"/><text x="99.7999%" y="207.50"></text></g></svg></svg>