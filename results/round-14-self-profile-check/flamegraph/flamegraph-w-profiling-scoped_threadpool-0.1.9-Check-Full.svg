<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (115,243 samples, 0.16%)</title><rect x="6.1261%" y="149" width="0.1568%" height="15" fill="rgb(227,0,7)"/><text x="6.3761%" y="159.50"></text></g><g><title>item_attrs (108,661 samples, 0.15%)</title><rect x="6.5624%" y="117" width="0.1479%" height="15" fill="rgb(217,0,24)"/><text x="6.8124%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,071 samples, 0.14%)</title><rect x="6.5673%" y="101" width="0.1430%" height="15" fill="rgb(221,193,54)"/><text x="6.8173%" y="111.50"></text></g><g><title>codegen_fn_attrs (170,632 samples, 0.23%)</title><rect x="6.4932%" y="133" width="0.2322%" height="15" fill="rgb(248,212,6)"/><text x="6.7432%" y="143.50"></text></g><g><title>is_copy_raw (74,751 samples, 0.10%)</title><rect x="7.8738%" y="85" width="0.1017%" height="15" fill="rgb(208,68,35)"/><text x="8.1238%" y="95.50"></text></g><g><title>adt_drop_tys (180,631 samples, 0.25%)</title><rect x="7.8240%" y="101" width="0.2458%" height="15" fill="rgb(232,128,0)"/><text x="8.0740%" y="111.50"></text></g><g><title>needs_drop_raw (684,166 samples, 0.93%)</title><rect x="7.7537%" y="117" width="0.9310%" height="15" fill="rgb(207,160,47)"/><text x="8.0037%" y="127.50"></text></g><g><title>is_copy_raw (451,925 samples, 0.61%)</title><rect x="8.0698%" y="101" width="0.6149%" height="15" fill="rgb(228,23,34)"/><text x="8.3198%" y="111.50"></text></g><g><title>evaluate_obligation (383,103 samples, 0.52%)</title><rect x="8.1634%" y="85" width="0.5213%" height="15" fill="rgb(218,30,26)"/><text x="8.4134%" y="95.50"></text></g><g><title>impl_parent (200,613 samples, 0.27%)</title><rect x="9.1705%" y="85" width="0.2730%" height="15" fill="rgb(220,122,19)"/><text x="9.4205%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (141,040 samples, 0.19%)</title><rect x="9.2516%" y="69" width="0.1919%" height="15" fill="rgb(250,228,42)"/><text x="9.5016%" y="79.50"></text></g><g><title>specialization_graph_of (1,082,312 samples, 1.47%)</title><rect x="8.8177%" y="101" width="1.4727%" height="15" fill="rgb(240,193,28)"/><text x="9.0677%" y="111.50"></text></g><g><title>impl_trait_ref (622,395 samples, 0.85%)</title><rect x="9.4435%" y="85" width="0.8469%" height="15" fill="rgb(216,20,37)"/><text x="9.6935%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (562,055 samples, 0.76%)</title><rect x="9.5256%" y="69" width="0.7648%" height="15" fill="rgb(206,188,39)"/><text x="9.7756%" y="79.50"></text></g><g><title>resolve_instance (1,199,843 samples, 1.63%)</title><rect x="8.6847%" y="117" width="1.6327%" height="15" fill="rgb(217,207,13)"/><text x="8.9347%" y="127.50"></text></g><g><title>thir_body (234,882 samples, 0.32%)</title><rect x="10.3276%" y="117" width="0.3196%" height="15" fill="rgb(231,73,38)"/><text x="10.5776%" y="127.50"></text></g><g><title>mir_const (3,589,812 samples, 4.88%)</title><rect x="5.7688%" y="165" width="4.8848%" height="15" fill="rgb(225,20,46)"/><text x="6.0188%" y="175.50">mir_co..</text></g><g><title>unsafety_check_result (3,211,987 samples, 4.37%)</title><rect x="6.2829%" y="149" width="4.3706%" height="15" fill="rgb(210,31,41)"/><text x="6.5329%" y="159.50">unsaf..</text></g><g><title>mir_built (2,886,833 samples, 3.93%)</title><rect x="6.7254%" y="133" width="3.9282%" height="15" fill="rgb(221,200,47)"/><text x="6.9754%" y="143.50">mir_..</text></g><g><title>mir_promoted (3,831,344 samples, 5.21%)</title><rect x="5.4568%" y="181" width="5.2134%" height="15" fill="rgb(226,26,5)"/><text x="5.7068%" y="191.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (160,272 samples, 0.22%)</title><rect x="10.6702%" y="181" width="0.2181%" height="15" fill="rgb(249,33,26)"/><text x="10.9202%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (253,172 samples, 0.34%)</title><rect x="10.8883%" y="181" width="0.3445%" height="15" fill="rgb(235,183,28)"/><text x="11.1383%" y="191.50"></text></g><g><title>normalize_projection_ty (154,751 samples, 0.21%)</title><rect x="11.0222%" y="165" width="0.2106%" height="15" fill="rgb(221,5,38)"/><text x="11.2722%" y="175.50"></text></g><g><title>type_op_prove_predicate (745,625 samples, 1.01%)</title><rect x="11.2328%" y="181" width="1.0146%" height="15" fill="rgb(247,18,42)"/><text x="11.4828%" y="191.50"></text></g><g><title>MIR_borrow_checking (7,803,037 samples, 10.62%)</title><rect x="1.6314%" y="213" width="10.6178%" height="15" fill="rgb(241,131,45)"/><text x="1.8814%" y="223.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (7,784,437 samples, 10.59%)</title><rect x="1.6567%" y="197" width="10.5925%" height="15" fill="rgb(249,31,29)"/><text x="1.9067%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (186,222 samples, 0.25%)</title><rect x="12.2595%" y="213" width="0.2534%" height="15" fill="rgb(225,111,53)"/><text x="12.5095%" y="223.50"></text></g><g><title>get_lang_items (106,321 samples, 0.14%)</title><rect x="12.8583%" y="165" width="0.1447%" height="15" fill="rgb(238,160,17)"/><text x="13.1083%" y="175.50"></text></g><g><title>should_inherit_track_caller (168,032 samples, 0.23%)</title><rect x="13.0030%" y="165" width="0.2286%" height="15" fill="rgb(214,148,48)"/><text x="13.2530%" y="175.50"></text></g><g><title>codegen_fn_attrs (378,684 samples, 0.52%)</title><rect x="12.7477%" y="181" width="0.5153%" height="15" fill="rgb(232,36,49)"/><text x="12.9977%" y="191.50"></text></g><g><title>check_mod_attrs (520,816 samples, 0.71%)</title><rect x="12.5549%" y="197" width="0.7087%" height="15" fill="rgb(209,103,24)"/><text x="12.8049%" y="207.50"></text></g><g><title>lookup_deprecation_entry (144,733 samples, 0.20%)</title><rect x="13.6481%" y="181" width="0.1969%" height="15" fill="rgb(229,88,8)"/><text x="13.8981%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (412,475 samples, 0.56%)</title><rect x="13.4347%" y="197" width="0.5613%" height="15" fill="rgb(213,181,19)"/><text x="13.6847%" y="207.50"></text></g><g><title>misc_checking_1 (1,150,623 samples, 1.57%)</title><rect x="12.5134%" y="213" width="1.5657%" height="15" fill="rgb(254,191,54)"/><text x="12.7634%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (235,953 samples, 0.32%)</title><rect x="14.0810%" y="197" width="0.3211%" height="15" fill="rgb(241,83,37)"/><text x="14.3310%" y="207.50"></text></g><g><title>check_mod_liveness (162,842 samples, 0.22%)</title><rect x="14.1805%" y="181" width="0.2216%" height="15" fill="rgb(233,36,39)"/><text x="14.4305%" y="191.50"></text></g><g><title>misc_checking_2 (437,635 samples, 0.60%)</title><rect x="14.0791%" y="213" width="0.5955%" height="15" fill="rgb(226,3,54)"/><text x="14.3291%" y="223.50"></text></g><g><title>match_checking (200,272 samples, 0.27%)</title><rect x="14.4021%" y="197" width="0.2725%" height="15" fill="rgb(245,192,40)"/><text x="14.6521%" y="207.50"></text></g><g><title>check_match (192,601 samples, 0.26%)</title><rect x="14.4125%" y="181" width="0.2621%" height="15" fill="rgb(238,167,29)"/><text x="14.6625%" y="191.50"></text></g><g><title>death_checking (111,241 samples, 0.15%)</title><rect x="14.7820%" y="197" width="0.1514%" height="15" fill="rgb(232,182,51)"/><text x="15.0320%" y="207.50"></text></g><g><title>param_env (113,861 samples, 0.15%)</title><rect x="15.5937%" y="165" width="0.1549%" height="15" fill="rgb(231,60,39)"/><text x="15.8437%" y="175.50"></text></g><g><title>impl_parent (522,795 samples, 0.71%)</title><rect x="16.9220%" y="133" width="0.7114%" height="15" fill="rgb(208,69,12)"/><text x="17.1720%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (321,663 samples, 0.44%)</title><rect x="17.1957%" y="117" width="0.4377%" height="15" fill="rgb(235,93,37)"/><text x="17.4457%" y="127.50"></text></g><g><title>specialization_graph_of (2,735,810 samples, 3.72%)</title><rect x="15.8499%" y="149" width="3.7227%" height="15" fill="rgb(213,116,39)"/><text x="16.0999%" y="159.50">spec..</text></g><g><title>impl_trait_ref (1,425,176 samples, 1.94%)</title><rect x="17.6334%" y="133" width="1.9393%" height="15" fill="rgb(222,207,29)"/><text x="17.8834%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,224,602 samples, 1.67%)</title><rect x="17.9063%" y="117" width="1.6663%" height="15" fill="rgb(206,96,30)"/><text x="18.1563%" y="127.50"></text></g><g><title>resolve_instance (2,813,082 samples, 3.83%)</title><rect x="15.7486%" y="165" width="3.8278%" height="15" fill="rgb(218,138,4)"/><text x="15.9986%" y="175.50">reso..</text></g><g><title>crate_lints (6,001,957 samples, 8.17%)</title><rect x="14.9366%" y="181" width="8.1670%" height="15" fill="rgb(250,191,14)"/><text x="15.1866%" y="191.50">crate_lints</text></g><g><title>type_of (2,586,325 samples, 3.52%)</title><rect x="19.5843%" y="165" width="3.5193%" height="15" fill="rgb(239,60,40)"/><text x="19.8343%" y="175.50">typ..</text></g><g><title>metadata_decode_entry_type_of (2,099,961 samples, 2.86%)</title><rect x="20.2461%" y="149" width="2.8575%" height="15" fill="rgb(206,27,48)"/><text x="20.4961%" y="159.50">me..</text></g><g><title>lint_checking (6,160,328 samples, 8.38%)</title><rect x="14.9334%" y="197" width="8.3825%" height="15" fill="rgb(225,35,8)"/><text x="15.1834%" y="207.50">lint_checking</text></g><g><title>module_lints (156,021 samples, 0.21%)</title><rect x="23.1036%" y="181" width="0.2123%" height="15" fill="rgb(250,213,24)"/><text x="23.3536%" y="191.50"></text></g><g><title>lint_mod (152,791 samples, 0.21%)</title><rect x="23.1080%" y="165" width="0.2079%" height="15" fill="rgb(247,123,22)"/><text x="23.3580%" y="175.50"></text></g><g><title>privacy_access_levels (78,571 samples, 0.11%)</title><rect x="23.3159%" y="197" width="0.1069%" height="15" fill="rgb(231,138,38)"/><text x="23.5659%" y="207.50"></text></g><g><title>privacy_checking_modules (280,314 samples, 0.38%)</title><rect x="23.4228%" y="197" width="0.3814%" height="15" fill="rgb(231,145,46)"/><text x="23.6728%" y="207.50"></text></g><g><title>check_mod_privacy (278,574 samples, 0.38%)</title><rect x="23.4252%" y="181" width="0.3791%" height="15" fill="rgb(251,118,11)"/><text x="23.6752%" y="191.50"></text></g><g><title>misc_checking_3 (6,725,575 samples, 9.15%)</title><rect x="14.6746%" y="213" width="9.1517%" height="15" fill="rgb(217,147,25)"/><text x="14.9246%" y="223.50">misc_checking..</text></g><g><title>impl_parent (177,172 samples, 0.24%)</title><rect x="24.2888%" y="149" width="0.2411%" height="15" fill="rgb(247,81,37)"/><text x="24.5388%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (122,801 samples, 0.17%)</title><rect x="24.3628%" y="133" width="0.1671%" height="15" fill="rgb(209,12,38)"/><text x="24.6128%" y="143.50"></text></g><g><title>impl_trait_ref (616,777 samples, 0.84%)</title><rect x="24.5299%" y="149" width="0.8393%" height="15" fill="rgb(227,1,9)"/><text x="24.7799%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (568,477 samples, 0.77%)</title><rect x="24.5956%" y="133" width="0.7735%" height="15" fill="rgb(248,47,43)"/><text x="24.8456%" y="143.50"></text></g><g><title>coherent_trait (1,160,093 samples, 1.58%)</title><rect x="23.9051%" y="181" width="1.5786%" height="15" fill="rgb(221,10,30)"/><text x="24.1551%" y="191.50"></text></g><g><title>specialization_graph_of (1,149,473 samples, 1.56%)</title><rect x="23.9196%" y="165" width="1.5641%" height="15" fill="rgb(210,229,1)"/><text x="24.1696%" y="175.50"></text></g><g><title>trait_impls_of (84,211 samples, 0.11%)</title><rect x="25.3691%" y="149" width="0.1146%" height="15" fill="rgb(222,148,37)"/><text x="25.6191%" y="159.50"></text></g><g><title>coherence_checking (1,222,623 samples, 1.66%)</title><rect x="23.8813%" y="197" width="1.6637%" height="15" fill="rgb(234,67,33)"/><text x="24.1313%" y="207.50"></text></g><g><title>adt_def (252,583 samples, 0.34%)</title><rect x="30.5052%" y="117" width="0.3437%" height="15" fill="rgb(247,98,35)"/><text x="30.7552%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (240,313 samples, 0.33%)</title><rect x="30.5219%" y="101" width="0.3270%" height="15" fill="rgb(247,138,52)"/><text x="30.7719%" y="111.50"></text></g><g><title>item_attrs (93,821 samples, 0.13%)</title><rect x="30.7212%" y="85" width="0.1277%" height="15" fill="rgb(213,79,30)"/><text x="30.9712%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (84,781 samples, 0.12%)</title><rect x="30.7335%" y="69" width="0.1154%" height="15" fill="rgb(246,177,23)"/><text x="30.9835%" y="79.50"></text></g><g><title>adt_destructor (96,362 samples, 0.13%)</title><rect x="30.8489%" y="117" width="0.1311%" height="15" fill="rgb(230,62,27)"/><text x="31.0989%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (84,921 samples, 0.12%)</title><rect x="30.8645%" y="101" width="0.1156%" height="15" fill="rgb(216,154,8)"/><text x="31.1145%" y="111.50"></text></g><g><title>adt_def (465,484 samples, 0.63%)</title><rect x="31.1038%" y="101" width="0.6334%" height="15" fill="rgb(244,35,45)"/><text x="31.3538%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (460,104 samples, 0.63%)</title><rect x="31.1112%" y="85" width="0.6261%" height="15" fill="rgb(251,115,12)"/><text x="31.3612%" y="95.50"></text></g><g><title>item_attrs (147,371 samples, 0.20%)</title><rect x="31.5367%" y="69" width="0.2005%" height="15" fill="rgb(240,54,50)"/><text x="31.7867%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (141,251 samples, 0.19%)</title><rect x="31.5450%" y="53" width="0.1922%" height="15" fill="rgb(233,84,52)"/><text x="31.7950%" y="63.50"></text></g><g><title>adt_def (184,001 samples, 0.25%)</title><rect x="31.8747%" y="85" width="0.2504%" height="15" fill="rgb(207,117,47)"/><text x="32.1247%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (179,920 samples, 0.24%)</title><rect x="31.8802%" y="69" width="0.2448%" height="15" fill="rgb(249,43,39)"/><text x="32.1302%" y="79.50"></text></g><g><title>item_attrs (119,860 samples, 0.16%)</title><rect x="31.9620%" y="53" width="0.1631%" height="15" fill="rgb(209,38,44)"/><text x="32.2120%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (115,430 samples, 0.16%)</title><rect x="31.9680%" y="37" width="0.1571%" height="15" fill="rgb(236,212,23)"/><text x="32.2180%" y="47.50"></text></g><g><title>adt_dtorck_constraint (120,530 samples, 0.16%)</title><rect x="32.1779%" y="85" width="0.1640%" height="15" fill="rgb(242,79,21)"/><text x="32.4279%" y="95.50"></text></g><g><title>adt_dtorck_constraint (450,013 samples, 0.61%)</title><rect x="31.8072%" y="101" width="0.6123%" height="15" fill="rgb(211,96,35)"/><text x="32.0572%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,201,641 samples, 1.64%)</title><rect x="30.9800%" y="117" width="1.6351%" height="15" fill="rgb(253,215,40)"/><text x="31.2300%" y="127.50"></text></g><g><title>type_of (110,881 samples, 0.15%)</title><rect x="32.4642%" y="101" width="0.1509%" height="15" fill="rgb(211,81,21)"/><text x="32.7142%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (100,411 samples, 0.14%)</title><rect x="32.4785%" y="85" width="0.1366%" height="15" fill="rgb(208,190,38)"/><text x="32.7285%" y="95.50"></text></g><g><title>dropck_outlives (2,118,553 samples, 2.88%)</title><rect x="30.0593%" y="149" width="2.8828%" height="15" fill="rgb(235,213,38)"/><text x="30.3093%" y="159.50">dr..</text></g><g><title>adt_dtorck_constraint (1,968,102 samples, 2.68%)</title><rect x="30.2640%" y="133" width="2.6780%" height="15" fill="rgb(237,122,38)"/><text x="30.5140%" y="143.50">ad..</text></g><g><title>type_of (168,632 samples, 0.23%)</title><rect x="32.7126%" y="117" width="0.2295%" height="15" fill="rgb(244,218,35)"/><text x="32.9626%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (143,462 samples, 0.20%)</title><rect x="32.7469%" y="101" width="0.1952%" height="15" fill="rgb(240,68,47)"/><text x="32.9969%" y="111.50"></text></g><g><title>evaluate_obligation (420,606 samples, 0.57%)</title><rect x="32.9421%" y="149" width="0.5723%" height="15" fill="rgb(210,16,53)"/><text x="33.1921%" y="159.50"></text></g><g><title>trait_impls_of (81,141 samples, 0.11%)</title><rect x="33.4040%" y="133" width="0.1104%" height="15" fill="rgb(235,124,12)"/><text x="33.6540%" y="143.50"></text></g><g><title>generics_of (101,300 samples, 0.14%)</title><rect x="33.5782%" y="149" width="0.1378%" height="15" fill="rgb(224,169,11)"/><text x="33.8282%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (84,950 samples, 0.12%)</title><rect x="33.6004%" y="133" width="0.1156%" height="15" fill="rgb(250,166,2)"/><text x="33.8504%" y="143.50"></text></g><g><title>impl_trait_ref (78,981 samples, 0.11%)</title><rect x="33.7675%" y="149" width="0.1075%" height="15" fill="rgb(242,216,29)"/><text x="34.0175%" y="159.50"></text></g><g><title>item_attrs (243,685 samples, 0.33%)</title><rect x="33.8788%" y="149" width="0.3316%" height="15" fill="rgb(230,116,27)"/><text x="34.1288%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (242,345 samples, 0.33%)</title><rect x="33.8807%" y="133" width="0.3298%" height="15" fill="rgb(228,99,48)"/><text x="34.1307%" y="143.50"></text></g><g><title>method_autoderef_steps (160,051 samples, 0.22%)</title><rect x="34.2282%" y="149" width="0.2178%" height="15" fill="rgb(253,11,6)"/><text x="34.4782%" y="159.50"></text></g><g><title>evaluate_obligation (76,301 samples, 0.10%)</title><rect x="34.3421%" y="133" width="0.1038%" height="15" fill="rgb(247,143,39)"/><text x="34.5921%" y="143.50"></text></g><g><title>predicates_of (95,860 samples, 0.13%)</title><rect x="34.4621%" y="149" width="0.1304%" height="15" fill="rgb(236,97,10)"/><text x="34.7121%" y="159.50"></text></g><g><title>adt_def (74,392 samples, 0.10%)</title><rect x="41.6587%" y="117" width="0.1012%" height="15" fill="rgb(233,208,19)"/><text x="41.9087%" y="127.50"></text></g><g><title>adt_sized_constraint (111,202 samples, 0.15%)</title><rect x="41.6300%" y="133" width="0.1513%" height="15" fill="rgb(216,164,2)"/><text x="41.8800%" y="143.50"></text></g><g><title>associated_item (553,374 samples, 0.75%)</title><rect x="42.1196%" y="117" width="0.7530%" height="15" fill="rgb(220,129,5)"/><text x="42.3696%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (407,442 samples, 0.55%)</title><rect x="42.3182%" y="101" width="0.5544%" height="15" fill="rgb(242,17,10)"/><text x="42.5682%" y="111.50"></text></g><g><title>associated_items (849,968 samples, 1.16%)</title><rect x="41.7892%" y="133" width="1.1566%" height="15" fill="rgb(242,107,0)"/><text x="42.0392%" y="143.50"></text></g><g><title>dropck_outlives (562,705 samples, 0.77%)</title><rect x="43.0093%" y="133" width="0.7657%" height="15" fill="rgb(251,28,31)"/><text x="43.2593%" y="143.50"></text></g><g><title>adt_dtorck_constraint (195,953 samples, 0.27%)</title><rect x="43.5083%" y="117" width="0.2666%" height="15" fill="rgb(233,223,10)"/><text x="43.7583%" y="127.50"></text></g><g><title>adt_sized_constraint (82,992 samples, 0.11%)</title><rect x="44.9080%" y="117" width="0.1129%" height="15" fill="rgb(215,21,27)"/><text x="45.1580%" y="127.50"></text></g><g><title>predicates_of (162,361 samples, 0.22%)</title><rect x="45.2173%" y="117" width="0.2209%" height="15" fill="rgb(232,23,21)"/><text x="45.4673%" y="127.50"></text></g><g><title>predicates_defined_on (116,961 samples, 0.16%)</title><rect x="45.2790%" y="101" width="0.1592%" height="15" fill="rgb(244,5,23)"/><text x="45.5290%" y="111.50"></text></g><g><title>evaluate_obligation (2,154,722 samples, 2.93%)</title><rect x="43.7749%" y="133" width="2.9320%" height="15" fill="rgb(226,81,46)"/><text x="44.0249%" y="143.50">ev..</text></g><g><title>trait_impls_of (926,890 samples, 1.26%)</title><rect x="45.4457%" y="117" width="1.2612%" height="15" fill="rgb(247,70,30)"/><text x="45.6957%" y="127.50"></text></g><g><title>implementations_of_trait (241,202 samples, 0.33%)</title><rect x="46.3787%" y="101" width="0.3282%" height="15" fill="rgb(212,68,19)"/><text x="46.6287%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (178,570 samples, 0.24%)</title><rect x="46.4639%" y="85" width="0.2430%" height="15" fill="rgb(240,187,13)"/><text x="46.7139%" y="95.50"></text></g><g><title>fn_sig (127,161 samples, 0.17%)</title><rect x="46.7433%" y="133" width="0.1730%" height="15" fill="rgb(223,113,26)"/><text x="46.9933%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (106,211 samples, 0.14%)</title><rect x="46.7718%" y="117" width="0.1445%" height="15" fill="rgb(206,192,2)"/><text x="47.0218%" y="127.50"></text></g><g><title>generics_of (113,021 samples, 0.15%)</title><rect x="46.9163%" y="133" width="0.1538%" height="15" fill="rgb(241,108,4)"/><text x="47.1663%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (80,780 samples, 0.11%)</title><rect x="46.9602%" y="117" width="0.1099%" height="15" fill="rgb(247,173,49)"/><text x="47.2102%" y="127.50"></text></g><g><title>impl_item_implementor_ids (81,690 samples, 0.11%)</title><rect x="47.0701%" y="133" width="0.1112%" height="15" fill="rgb(224,114,35)"/><text x="47.3201%" y="143.50"></text></g><g><title>is_copy_raw (389,598 samples, 0.53%)</title><rect x="47.3116%" y="133" width="0.5301%" height="15" fill="rgb(245,159,27)"/><text x="47.5616%" y="143.50"></text></g><g><title>evaluate_obligation (366,638 samples, 0.50%)</title><rect x="47.3428%" y="117" width="0.4989%" height="15" fill="rgb(245,172,44)"/><text x="47.5928%" y="127.50"></text></g><g><title>trait_impls_of (241,792 samples, 0.33%)</title><rect x="47.5127%" y="101" width="0.3290%" height="15" fill="rgb(236,23,11)"/><text x="47.7627%" y="111.50"></text></g><g><title>item_attrs (250,334 samples, 0.34%)</title><rect x="47.8417%" y="133" width="0.3406%" height="15" fill="rgb(205,117,38)"/><text x="48.0917%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (240,573 samples, 0.33%)</title><rect x="47.8550%" y="117" width="0.3274%" height="15" fill="rgb(237,72,25)"/><text x="48.1050%" y="127.50"></text></g><g><title>evaluate_obligation (404,523 samples, 0.55%)</title><rect x="48.6078%" y="117" width="0.5504%" height="15" fill="rgb(244,70,9)"/><text x="48.8578%" y="127.50"></text></g><g><title>method_autoderef_steps (715,066 samples, 0.97%)</title><rect x="48.2624%" y="133" width="0.9730%" height="15" fill="rgb(217,125,39)"/><text x="48.5124%" y="143.50"></text></g><g><title>explicit_predicates_of (127,261 samples, 0.17%)</title><rect x="49.6243%" y="101" width="0.1732%" height="15" fill="rgb(235,36,10)"/><text x="49.8743%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (94,271 samples, 0.13%)</title><rect x="49.6692%" y="85" width="0.1283%" height="15" fill="rgb(251,123,47)"/><text x="49.9192%" y="95.50"></text></g><g><title>predicates_of (444,693 samples, 0.61%)</title><rect x="49.2852%" y="133" width="0.6051%" height="15" fill="rgb(221,13,13)"/><text x="49.5352%" y="143.50"></text></g><g><title>predicates_defined_on (314,693 samples, 0.43%)</title><rect x="49.4621%" y="117" width="0.4282%" height="15" fill="rgb(238,131,9)"/><text x="49.7121%" y="127.50"></text></g><g><title>trait_impls_of (712,968 samples, 0.97%)</title><rect x="49.9103%" y="133" width="0.9702%" height="15" fill="rgb(211,50,8)"/><text x="50.1603%" y="143.50"></text></g><g><title>implementations_of_trait (160,700 samples, 0.22%)</title><rect x="50.6618%" y="117" width="0.2187%" height="15" fill="rgb(245,182,24)"/><text x="50.9118%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (140,660 samples, 0.19%)</title><rect x="50.6891%" y="101" width="0.1914%" height="15" fill="rgb(242,14,37)"/><text x="50.9391%" y="111.50"></text></g><g><title>type_of (84,212 samples, 0.11%)</title><rect x="50.8805%" y="133" width="0.1146%" height="15" fill="rgb(246,228,12)"/><text x="51.1305%" y="143.50"></text></g><g><title>typeck (12,053,114 samples, 16.40%)</title><rect x="34.6714%" y="149" width="16.4010%" height="15" fill="rgb(213,55,15)"/><text x="34.9214%" y="159.50">typeck</text></g><g><title>item_bodies_checking (18,756,839 samples, 25.52%)</title><rect x="25.5901%" y="197" width="25.5229%" height="15" fill="rgb(209,9,3)"/><text x="25.8401%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,753,609 samples, 25.52%)</title><rect x="25.5945%" y="181" width="25.5185%" height="15" fill="rgb(230,59,30)"/><text x="25.8445%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (18,727,499 samples, 25.48%)</title><rect x="25.6300%" y="165" width="25.4830%" height="15" fill="rgb(209,121,21)"/><text x="25.8800%" y="175.50">typeck</text></g><g><title>item_types_checking (516,206 samples, 0.70%)</title><rect x="51.1130%" y="197" width="0.7024%" height="15" fill="rgb(220,109,13)"/><text x="51.3630%" y="207.50"></text></g><g><title>check_mod_item_types (511,936 samples, 0.70%)</title><rect x="51.1189%" y="181" width="0.6966%" height="15" fill="rgb(232,18,1)"/><text x="51.3689%" y="191.50"></text></g><g><title>fn_sig (140,191 samples, 0.19%)</title><rect x="52.0939%" y="165" width="0.1908%" height="15" fill="rgb(215,41,42)"/><text x="52.3439%" y="175.50"></text></g><g><title>late_bound_vars_map (79,521 samples, 0.11%)</title><rect x="52.1765%" y="149" width="0.1082%" height="15" fill="rgb(224,123,36)"/><text x="52.4265%" y="159.50"></text></g><g><title>is_late_bound_map (103,301 samples, 0.14%)</title><rect x="52.3977%" y="149" width="0.1406%" height="15" fill="rgb(240,125,3)"/><text x="52.6477%" y="159.50"></text></g><g><title>resolve_lifetimes (95,371 samples, 0.13%)</title><rect x="52.4085%" y="133" width="0.1298%" height="15" fill="rgb(205,98,50)"/><text x="52.6585%" y="143.50"></text></g><g><title>generics_of (223,272 samples, 0.30%)</title><rect x="52.2847%" y="165" width="0.3038%" height="15" fill="rgb(205,185,37)"/><text x="52.5347%" y="175.50"></text></g><g><title>explicit_predicates_of (283,764 samples, 0.39%)</title><rect x="52.7198%" y="133" width="0.3861%" height="15" fill="rgb(238,207,15)"/><text x="52.9698%" y="143.50"></text></g><g><title>predicates_of (106,750 samples, 0.15%)</title><rect x="53.3071%" y="101" width="0.1453%" height="15" fill="rgb(213,199,42)"/><text x="53.5571%" y="111.50"></text></g><g><title>predicates_defined_on (93,350 samples, 0.13%)</title><rect x="53.3253%" y="85" width="0.1270%" height="15" fill="rgb(235,201,11)"/><text x="53.5753%" y="95.50"></text></g><g><title>generics_of (97,641 samples, 0.13%)</title><rect x="53.6159%" y="85" width="0.1329%" height="15" fill="rgb(207,46,11)"/><text x="53.8659%" y="95.50"></text></g><g><title>lint_levels (78,051 samples, 0.11%)</title><rect x="54.6684%" y="69" width="0.1062%" height="15" fill="rgb(241,35,35)"/><text x="54.9184%" y="79.50"></text></g><g><title>metadata_decode_entry_type_of (92,171 samples, 0.13%)</title><rect x="54.7746%" y="69" width="0.1254%" height="15" fill="rgb(243,32,47)"/><text x="55.0246%" y="79.50"></text></g><g><title>predicates_of (1,737,802 samples, 2.36%)</title><rect x="52.6095%" y="165" width="2.3647%" height="15" fill="rgb(247,202,23)"/><text x="52.8595%" y="175.50">pr..</text></g><g><title>predicates_defined_on (1,705,901 samples, 2.32%)</title><rect x="52.6529%" y="149" width="2.3213%" height="15" fill="rgb(219,102,11)"/><text x="52.9029%" y="159.50">p..</text></g><g><title>inferred_outlives_of (1,372,936 samples, 1.87%)</title><rect x="53.1059%" y="133" width="1.8682%" height="15" fill="rgb(243,110,44)"/><text x="53.3559%" y="143.50">i..</text></g><g><title>inferred_outlives_crate (1,347,995 samples, 1.83%)</title><rect x="53.1399%" y="117" width="1.8343%" height="15" fill="rgb(222,74,54)"/><text x="53.3899%" y="127.50">i..</text></g><g><title>type_of (1,118,374 samples, 1.52%)</title><rect x="53.4523%" y="101" width="1.5218%" height="15" fill="rgb(216,99,12)"/><text x="53.7023%" y="111.50"></text></g><g><title>type_of (864,230 samples, 1.18%)</title><rect x="53.7982%" y="85" width="1.1760%" height="15" fill="rgb(226,22,26)"/><text x="54.0482%" y="95.50"></text></g><g><title>type_collecting (2,449,107 samples, 3.33%)</title><rect x="51.8184%" y="197" width="3.3326%" height="15" fill="rgb(217,163,10)"/><text x="52.0684%" y="207.50">typ..</text></g><g><title>collect_mod_item_types (2,435,357 samples, 3.31%)</title><rect x="51.8371%" y="181" width="3.3139%" height="15" fill="rgb(213,25,53)"/><text x="52.0871%" y="191.50">col..</text></g><g><title>type_of (129,942 samples, 0.18%)</title><rect x="54.9741%" y="165" width="0.1768%" height="15" fill="rgb(252,105,26)"/><text x="55.2241%" y="175.50"></text></g><g><title>evaluate_obligation (421,525 samples, 0.57%)</title><rect x="56.5208%" y="165" width="0.5736%" height="15" fill="rgb(220,39,43)"/><text x="56.7708%" y="175.50"></text></g><g><title>implied_outlives_bounds (171,634 samples, 0.23%)</title><rect x="57.0944%" y="165" width="0.2335%" height="15" fill="rgb(229,68,48)"/><text x="57.3444%" y="175.50"></text></g><g><title>param_env (139,672 samples, 0.19%)</title><rect x="57.3279%" y="165" width="0.1901%" height="15" fill="rgb(252,8,32)"/><text x="57.5779%" y="175.50"></text></g><g><title>region_scope_tree (177,703 samples, 0.24%)</title><rect x="57.5180%" y="165" width="0.2418%" height="15" fill="rgb(223,20,43)"/><text x="57.7680%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,877,812 samples, 2.56%)</title><rect x="55.2985%" y="181" width="2.5552%" height="15" fill="rgb(229,81,49)"/><text x="55.5485%" y="191.50">ch..</text></g><g><title>adt_def (244,922 samples, 0.33%)</title><rect x="59.3036%" y="133" width="0.3333%" height="15" fill="rgb(236,28,36)"/><text x="59.5536%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (240,042 samples, 0.33%)</title><rect x="59.3102%" y="117" width="0.3266%" height="15" fill="rgb(249,185,26)"/><text x="59.5602%" y="127.50"></text></g><g><title>item_attrs (199,382 samples, 0.27%)</title><rect x="59.3655%" y="101" width="0.2713%" height="15" fill="rgb(249,174,33)"/><text x="59.6155%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (194,512 samples, 0.26%)</title><rect x="59.3722%" y="85" width="0.2647%" height="15" fill="rgb(233,201,37)"/><text x="59.6222%" y="95.50"></text></g><g><title>adt_def (96,062 samples, 0.13%)</title><rect x="59.6569%" y="117" width="0.1307%" height="15" fill="rgb(221,78,26)"/><text x="59.9069%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (94,042 samples, 0.13%)</title><rect x="59.6596%" y="101" width="0.1280%" height="15" fill="rgb(250,127,30)"/><text x="59.9096%" y="111.50"></text></g><g><title>adt_sized_constraint (85,091 samples, 0.12%)</title><rect x="59.7876%" y="117" width="0.1158%" height="15" fill="rgb(230,49,44)"/><text x="60.0376%" y="127.50"></text></g><g><title>adt_sized_constraint (225,033 samples, 0.31%)</title><rect x="59.6369%" y="133" width="0.3062%" height="15" fill="rgb(229,67,23)"/><text x="59.8869%" y="143.50"></text></g><g><title>adt_sized_constraint (529,395 samples, 0.72%)</title><rect x="59.2649%" y="149" width="0.7204%" height="15" fill="rgb(249,83,47)"/><text x="59.5149%" y="159.50"></text></g><g><title>evaluate_obligation (808,751 samples, 1.10%)</title><rect x="58.9607%" y="165" width="1.1005%" height="15" fill="rgb(215,43,3)"/><text x="59.2107%" y="175.50"></text></g><g><title>evaluate_obligation (162,862 samples, 0.22%)</title><rect x="60.1997%" y="149" width="0.2216%" height="15" fill="rgb(238,154,13)"/><text x="60.4497%" y="159.50"></text></g><g><title>layout_of (128,801 samples, 0.18%)</title><rect x="60.6308%" y="117" width="0.1753%" height="15" fill="rgb(219,56,2)"/><text x="60.8808%" y="127.50"></text></g><g><title>layout_of (238,092 samples, 0.32%)</title><rect x="60.5300%" y="133" width="0.3240%" height="15" fill="rgb(233,0,4)"/><text x="60.7800%" y="143.50"></text></g><g><title>layout_of (353,513 samples, 0.48%)</title><rect x="60.4213%" y="149" width="0.4810%" height="15" fill="rgb(235,30,7)"/><text x="60.6713%" y="159.50"></text></g><g><title>object_safety_violations (622,227 samples, 0.85%)</title><rect x="60.0954%" y="165" width="0.8467%" height="15" fill="rgb(250,79,13)"/><text x="60.3454%" y="175.50"></text></g><g><title>param_env (235,134 samples, 0.32%)</title><rect x="60.9420%" y="165" width="0.3200%" height="15" fill="rgb(211,146,34)"/><text x="61.1920%" y="175.50"></text></g><g><title>check_item_well_formed (2,683,089 samples, 3.65%)</title><rect x="57.8537%" y="181" width="3.6510%" height="15" fill="rgb(228,22,38)"/><text x="58.1037%" y="191.50">chec..</text></g><g><title>variances_of (84,961 samples, 0.12%)</title><rect x="61.3891%" y="165" width="0.1156%" height="15" fill="rgb(235,168,5)"/><text x="61.6391%" y="175.50"></text></g><g><title>crate_variances (77,831 samples, 0.11%)</title><rect x="61.3988%" y="149" width="0.1059%" height="15" fill="rgb(221,155,16)"/><text x="61.6488%" y="159.50"></text></g><g><title>evaluate_obligation (108,951 samples, 0.15%)</title><rect x="61.6510%" y="165" width="0.1483%" height="15" fill="rgb(215,215,53)"/><text x="61.9010%" y="175.50"></text></g><g><title>implied_outlives_bounds (98,651 samples, 0.13%)</title><rect x="61.7992%" y="165" width="0.1342%" height="15" fill="rgb(223,4,10)"/><text x="62.0492%" y="175.50"></text></g><g><title>analysis (44,575,358 samples, 60.65%)</title><rect x="1.2802%" y="229" width="60.6549%" height="15" fill="rgb(234,103,6)"/><text x="1.5302%" y="239.50">analysis</text></g><g><title>type_check_crate (28,006,183 samples, 38.11%)</title><rect x="23.8263%" y="213" width="38.1088%" height="15" fill="rgb(227,97,0)"/><text x="24.0763%" y="223.50">type_check_crate</text></g><g><title>wf_checking (4,984,426 samples, 6.78%)</title><rect x="55.1526%" y="197" width="6.7824%" height="15" fill="rgb(234,150,53)"/><text x="55.4026%" y="207.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (316,264 samples, 0.43%)</title><rect x="61.5047%" y="181" width="0.4303%" height="15" fill="rgb(228,201,54)"/><text x="61.7547%" y="191.50"></text></g><g><title>codegen_crate (405,555 samples, 0.55%)</title><rect x="61.9531%" y="229" width="0.5518%" height="15" fill="rgb(222,22,37)"/><text x="62.2031%" y="239.50"></text></g><g><title>AST_validation (112,571 samples, 0.15%)</title><rect x="62.8738%" y="213" width="0.1532%" height="15" fill="rgb(237,53,32)"/><text x="63.1238%" y="223.50"></text></g><g><title>crate_injection (86,431 samples, 0.12%)</title><rect x="63.0966%" y="213" width="0.1176%" height="15" fill="rgb(233,25,53)"/><text x="63.3466%" y="223.50"></text></g><g><title>metadata_load_macro (168,842 samples, 0.23%)</title><rect x="77.7541%" y="181" width="0.2297%" height="15" fill="rgb(210,40,34)"/><text x="78.0041%" y="191.50"></text></g><g><title>macro_expand_crate (13,466,781 samples, 18.32%)</title><rect x="63.2142%" y="213" width="18.3246%" height="15" fill="rgb(241,220,44)"/><text x="63.4642%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (13,438,830 samples, 18.29%)</title><rect x="63.2522%" y="197" width="18.2866%" height="15" fill="rgb(235,28,35)"/><text x="63.5022%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,612,550 samples, 3.55%)</title><rect x="77.9838%" y="181" width="3.5550%" height="15" fill="rgb(210,56,17)"/><text x="78.2338%" y="191.50">meta..</text></g><g><title>metadata_register_crate (977,353 samples, 1.33%)</title><rect x="80.2089%" y="165" width="1.3299%" height="15" fill="rgb(224,130,29)"/><text x="80.4589%" y="175.50"></text></g><g><title>metadata_register_crate (83,601 samples, 0.11%)</title><rect x="81.4250%" y="149" width="0.1138%" height="15" fill="rgb(235,212,8)"/><text x="81.6750%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (292,214 samples, 0.40%)</title><rect x="81.5467%" y="213" width="0.3976%" height="15" fill="rgb(223,33,50)"/><text x="81.7967%" y="223.50"></text></g><g><title>finalize_macro_resolutions (289,423 samples, 0.39%)</title><rect x="82.0443%" y="197" width="0.3938%" height="15" fill="rgb(219,149,13)"/><text x="82.2943%" y="207.50"></text></g><g><title>late_resolve_crate (1,481,426 samples, 2.02%)</title><rect x="82.4382%" y="197" width="2.0158%" height="15" fill="rgb(250,156,29)"/><text x="82.6882%" y="207.50">l..</text></g><g><title>configure_and_expand (16,201,271 samples, 22.05%)</title><rect x="62.5049%" y="229" width="22.0455%" height="15" fill="rgb(216,193,19)"/><text x="62.7549%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,915,181 samples, 2.61%)</title><rect x="81.9444%" y="213" width="2.6060%" height="15" fill="rgb(216,135,14)"/><text x="82.1944%" y="223.50">re..</text></g><g><title>drop_ast (147,541 samples, 0.20%)</title><rect x="84.5504%" y="229" width="0.2008%" height="15" fill="rgb(241,47,5)"/><text x="84.8004%" y="239.50"></text></g><g><title>early_lint_checks (259,023 samples, 0.35%)</title><rect x="84.7681%" y="229" width="0.3525%" height="15" fill="rgb(233,42,35)"/><text x="85.0181%" y="239.50"></text></g><g><title>free_global_ctxt (3,037,674 samples, 4.13%)</title><rect x="85.1206%" y="229" width="4.1334%" height="15" fill="rgb(231,13,6)"/><text x="85.3706%" y="239.50">free_..</text></g><g><title>generate_crate_metadata (580,016 samples, 0.79%)</title><rect x="89.2540%" y="229" width="0.7892%" height="15" fill="rgb(207,181,40)"/><text x="89.5040%" y="239.50"></text></g><g><title>hir_lowering (1,613,238 samples, 2.20%)</title><rect x="90.0433%" y="229" width="2.1952%" height="15" fill="rgb(254,173,49)"/><text x="90.2933%" y="239.50">h..</text></g><g><title>parse_crate (4,377,908 samples, 5.96%)</title><rect x="92.3048%" y="229" width="5.9571%" height="15" fill="rgb(221,1,38)"/><text x="92.5548%" y="239.50">parse_cr..</text></g><g><title>prepare_outputs (334,273 samples, 0.45%)</title><rect x="98.2766%" y="229" width="0.4549%" height="15" fill="rgb(206,124,46)"/><text x="98.5266%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (500,656 samples, 0.68%)</title><rect x="98.7314%" y="229" width="0.6813%" height="15" fill="rgb(249,21,11)"/><text x="98.9814%" y="239.50"></text></g><g><title>setup_global_ctxt (135,901 samples, 0.18%)</title><rect x="99.4296%" y="229" width="0.1849%" height="15" fill="rgb(222,201,40)"/><text x="99.6796%" y="239.50"></text></g><g><title>all (73,490,150 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,61,29)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (73,490,150 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,207,3)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (283,253 samples, 0.39%)</title><rect x="99.6146%" y="229" width="0.3854%" height="15" fill="rgb(222,56,46)"/><text x="99.8646%" y="239.50"></text></g></svg></svg>