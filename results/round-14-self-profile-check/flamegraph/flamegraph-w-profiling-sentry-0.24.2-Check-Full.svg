<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (279,122 samples, 0.15%)</title><rect x="8.9754%" y="197" width="0.1504%" height="15" fill="rgb(227,0,7)"/><text x="9.2254%" y="207.50"></text></g><g><title>def_span (265,403 samples, 0.14%)</title><rect x="10.5519%" y="149" width="0.1430%" height="15" fill="rgb(217,0,24)"/><text x="10.8019%" y="159.50"></text></g><g><title>param_env (785,338 samples, 0.42%)</title><rect x="10.2752%" y="165" width="0.4232%" height="15" fill="rgb(221,193,54)"/><text x="10.5252%" y="175.50"></text></g><g><title>item_attrs (500,635 samples, 0.27%)</title><rect x="11.1160%" y="133" width="0.2698%" height="15" fill="rgb(248,212,6)"/><text x="11.3660%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (480,305 samples, 0.26%)</title><rect x="11.1269%" y="117" width="0.2588%" height="15" fill="rgb(208,68,35)"/><text x="11.3769%" y="127.50"></text></g><g><title>codegen_fn_attrs (706,629 samples, 0.38%)</title><rect x="11.0302%" y="149" width="0.3807%" height="15" fill="rgb(232,128,0)"/><text x="11.2802%" y="159.50"></text></g><g><title>adt_drop_tys (307,634 samples, 0.17%)</title><rect x="13.4490%" y="101" width="0.1658%" height="15" fill="rgb(207,160,47)"/><text x="13.6990%" y="111.50"></text></g><g><title>is_copy_raw (221,434 samples, 0.12%)</title><rect x="13.6158%" y="101" width="0.1193%" height="15" fill="rgb(228,23,34)"/><text x="13.8658%" y="111.50"></text></g><g><title>param_env (189,064 samples, 0.10%)</title><rect x="13.7351%" y="101" width="0.1019%" height="15" fill="rgb(218,30,26)"/><text x="13.9851%" y="111.50"></text></g><g><title>adt_drop_tys (880,482 samples, 0.47%)</title><rect x="13.4035%" y="117" width="0.4744%" height="15" fill="rgb(220,122,19)"/><text x="13.6535%" y="127.50"></text></g><g><title>is_copy_raw (970,017 samples, 0.52%)</title><rect x="13.8780%" y="117" width="0.5227%" height="15" fill="rgb(250,228,42)"/><text x="14.1280%" y="127.50"></text></g><g><title>evaluate_obligation (728,415 samples, 0.39%)</title><rect x="14.0081%" y="101" width="0.3925%" height="15" fill="rgb(240,193,28)"/><text x="14.2581%" y="111.50"></text></g><g><title>needs_drop_raw (2,099,671 samples, 1.13%)</title><rect x="13.2799%" y="133" width="1.1313%" height="15" fill="rgb(216,20,37)"/><text x="13.5299%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (320,103 samples, 0.17%)</title><rect x="14.5519%" y="117" width="0.1725%" height="15" fill="rgb(206,188,39)"/><text x="14.8019%" y="127.50"></text></g><g><title>impl_parent (1,751,914 samples, 0.94%)</title><rect x="16.1510%" y="101" width="0.9440%" height="15" fill="rgb(217,207,13)"/><text x="16.4010%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (919,469 samples, 0.50%)</title><rect x="16.5995%" y="85" width="0.4954%" height="15" fill="rgb(231,73,38)"/><text x="16.8495%" y="95.50"></text></g><g><title>specialization_graph_of (7,165,232 samples, 3.86%)</title><rect x="14.7839%" y="117" width="3.8608%" height="15" fill="rgb(225,20,46)"/><text x="15.0339%" y="127.50">spec..</text></g><g><title>impl_trait_ref (2,876,164 samples, 1.55%)</title><rect x="17.0949%" y="101" width="1.5497%" height="15" fill="rgb(210,31,41)"/><text x="17.3449%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,248,246 samples, 1.21%)</title><rect x="17.4333%" y="85" width="1.2114%" height="15" fill="rgb(221,200,47)"/><text x="17.6833%" y="95.50"></text></g><g><title>resolve_instance (7,985,538 samples, 4.30%)</title><rect x="14.4113%" y="133" width="4.3027%" height="15" fill="rgb(226,26,5)"/><text x="14.6613%" y="143.50">resol..</text></g><g><title>thir_body (1,273,755 samples, 0.69%)</title><rect x="18.7453%" y="133" width="0.6863%" height="15" fill="rgb(249,33,26)"/><text x="18.9953%" y="143.50"></text></g><g><title>mir_const (18,073,485 samples, 9.74%)</title><rect x="9.7177%" y="181" width="9.7383%" height="15" fill="rgb(235,183,28)"/><text x="9.9677%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (16,253,496 samples, 8.76%)</title><rect x="10.6984%" y="165" width="8.7577%" height="15" fill="rgb(221,5,38)"/><text x="10.9484%" y="175.50">unsafety_che..</text></g><g><title>mir_built (14,931,109 samples, 8.05%)</title><rect x="11.4109%" y="149" width="8.0451%" height="15" fill="rgb(247,18,42)"/><text x="11.6609%" y="159.50">mir_built</text></g><g><title>mir_promoted (19,157,245 samples, 10.32%)</title><rect x="9.1560%" y="197" width="10.3223%" height="15" fill="rgb(241,131,45)"/><text x="9.4060%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,233,584 samples, 0.66%)</title><rect x="19.4805%" y="197" width="0.6647%" height="15" fill="rgb(249,31,29)"/><text x="19.7305%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (725,486 samples, 0.39%)</title><rect x="20.1452%" y="197" width="0.3909%" height="15" fill="rgb(225,111,53)"/><text x="20.3952%" y="207.50"></text></g><g><title>normalize_projection_ty (449,495 samples, 0.24%)</title><rect x="20.2939%" y="181" width="0.2422%" height="15" fill="rgb(238,160,17)"/><text x="20.5439%" y="191.50"></text></g><g><title>type_op_prove_predicate (3,981,492 samples, 2.15%)</title><rect x="20.6349%" y="197" width="2.1453%" height="15" fill="rgb(214,148,48)"/><text x="20.8849%" y="207.50">t..</text></g><g><title>evaluate_obligation (234,342 samples, 0.13%)</title><rect x="22.6540%" y="181" width="0.1263%" height="15" fill="rgb(232,36,49)"/><text x="22.9040%" y="191.50"></text></g><g><title>MIR_borrow_checking (41,484,103 samples, 22.35%)</title><rect x="0.4402%" y="229" width="22.3524%" height="15" fill="rgb(209,103,24)"/><text x="0.6902%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (41,350,382 samples, 22.28%)</title><rect x="0.5123%" y="213" width="22.2803%" height="15" fill="rgb(229,88,8)"/><text x="0.7623%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (334,162 samples, 0.18%)</title><rect x="23.0229%" y="197" width="0.1801%" height="15" fill="rgb(213,181,19)"/><text x="23.2729%" y="207.50"></text></g><g><title>check_mod_attrs (550,515 samples, 0.30%)</title><rect x="22.9064%" y="213" width="0.2966%" height="15" fill="rgb(254,191,54)"/><text x="23.1564%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (420,425 samples, 0.23%)</title><rect x="23.2921%" y="213" width="0.2265%" height="15" fill="rgb(241,83,37)"/><text x="23.5421%" y="223.50"></text></g><g><title>misc_checking_1 (1,228,613 samples, 0.66%)</title><rect x="22.8905%" y="229" width="0.6620%" height="15" fill="rgb(233,36,39)"/><text x="23.1405%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (857,319 samples, 0.46%)</title><rect x="23.5533%" y="213" width="0.4619%" height="15" fill="rgb(226,3,54)"/><text x="23.8033%" y="223.50"></text></g><g><title>check_mod_liveness (755,329 samples, 0.41%)</title><rect x="23.6083%" y="197" width="0.4070%" height="15" fill="rgb(245,192,40)"/><text x="23.8583%" y="207.50"></text></g><g><title>type_uninhabited_from (391,243 samples, 0.21%)</title><rect x="23.8045%" y="181" width="0.2108%" height="15" fill="rgb(238,167,29)"/><text x="24.0545%" y="191.50"></text></g><g><title>type_uninhabited_from (329,873 samples, 0.18%)</title><rect x="23.8375%" y="165" width="0.1777%" height="15" fill="rgb(232,182,51)"/><text x="24.0875%" y="175.50"></text></g><g><title>type_uninhabited_from (268,283 samples, 0.14%)</title><rect x="23.8707%" y="149" width="0.1446%" height="15" fill="rgb(231,60,39)"/><text x="24.1207%" y="159.50"></text></g><g><title>type_uninhabited_from (211,243 samples, 0.11%)</title><rect x="23.9015%" y="133" width="0.1138%" height="15" fill="rgb(208,69,12)"/><text x="24.1515%" y="143.50"></text></g><g><title>misc_checking_2 (1,602,267 samples, 0.86%)</title><rect x="23.5525%" y="229" width="0.8633%" height="15" fill="rgb(235,93,37)"/><text x="23.8025%" y="239.50"></text></g><g><title>match_checking (743,408 samples, 0.40%)</title><rect x="24.0153%" y="213" width="0.4006%" height="15" fill="rgb(213,116,39)"/><text x="24.2653%" y="223.50"></text></g><g><title>check_match (711,928 samples, 0.38%)</title><rect x="24.0322%" y="197" width="0.3836%" height="15" fill="rgb(222,207,29)"/><text x="24.2822%" y="207.50"></text></g><g><title>death_checking (416,904 samples, 0.22%)</title><rect x="24.5155%" y="213" width="0.2246%" height="15" fill="rgb(206,96,30)"/><text x="24.7655%" y="223.50"></text></g><g><title>param_env (392,774 samples, 0.21%)</title><rect x="25.6059%" y="181" width="0.2116%" height="15" fill="rgb(218,138,4)"/><text x="25.8559%" y="191.50"></text></g><g><title>crate_lints (4,830,194 samples, 2.60%)</title><rect x="24.7413%" y="197" width="2.6026%" height="15" fill="rgb(250,191,14)"/><text x="24.9913%" y="207.50">cr..</text></g><g><title>type_of (2,668,472 samples, 1.44%)</title><rect x="25.9060%" y="181" width="1.4378%" height="15" fill="rgb(239,60,40)"/><text x="26.1560%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (2,027,354 samples, 1.09%)</title><rect x="26.2515%" y="165" width="1.0924%" height="15" fill="rgb(206,27,48)"/><text x="26.5015%" y="175.50"></text></g><g><title>lint_checking (5,506,751 samples, 2.97%)</title><rect x="24.7402%" y="213" width="2.9671%" height="15" fill="rgb(225,35,8)"/><text x="24.9902%" y="223.50">lin..</text></g><g><title>module_lints (674,557 samples, 0.36%)</title><rect x="27.3438%" y="197" width="0.3635%" height="15" fill="rgb(250,213,24)"/><text x="27.5938%" y="207.50"></text></g><g><title>lint_mod (665,046 samples, 0.36%)</title><rect x="27.3490%" y="181" width="0.3583%" height="15" fill="rgb(247,123,22)"/><text x="27.5990%" y="191.50"></text></g><g><title>type_of (840,449 samples, 0.45%)</title><rect x="28.2556%" y="181" width="0.4528%" height="15" fill="rgb(231,138,38)"/><text x="28.5056%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (832,139 samples, 0.45%)</title><rect x="28.2601%" y="165" width="0.4484%" height="15" fill="rgb(231,145,46)"/><text x="28.5101%" y="175.50"></text></g><g><title>privacy_checking_modules (1,745,260 samples, 0.94%)</title><rect x="27.8017%" y="213" width="0.9404%" height="15" fill="rgb(251,118,11)"/><text x="28.0517%" y="223.50"></text></g><g><title>check_mod_privacy (1,739,710 samples, 0.94%)</title><rect x="27.8047%" y="197" width="0.9374%" height="15" fill="rgb(217,147,25)"/><text x="28.0547%" y="207.50"></text></g><g><title>misc_checking_3 (8,050,100 samples, 4.34%)</title><rect x="24.4158%" y="229" width="4.3375%" height="15" fill="rgb(247,81,37)"/><text x="24.6658%" y="239.50">misc_..</text></g><g><title>impl_parent (3,909,607 samples, 2.11%)</title><rect x="31.7344%" y="165" width="2.1066%" height="15" fill="rgb(209,12,38)"/><text x="31.9844%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (2,357,919 samples, 1.27%)</title><rect x="32.5705%" y="149" width="1.2705%" height="15" fill="rgb(227,1,9)"/><text x="32.8205%" y="159.50"></text></g><g><title>impl_trait_ref (9,613,021 samples, 5.18%)</title><rect x="33.8410%" y="165" width="5.1797%" height="15" fill="rgb(248,47,43)"/><text x="34.0910%" y="175.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,840,069 samples, 4.22%)</title><rect x="34.7963%" y="149" width="4.2244%" height="15" fill="rgb(221,10,30)"/><text x="35.0463%" y="159.50">metad..</text></g><g><title>trait_impls_of (1,443,205 samples, 0.78%)</title><rect x="39.0442%" y="165" width="0.7776%" height="15" fill="rgb(210,229,1)"/><text x="39.2942%" y="175.50"></text></g><g><title>implementations_of_trait (502,693 samples, 0.27%)</title><rect x="39.5509%" y="149" width="0.2709%" height="15" fill="rgb(222,148,37)"/><text x="39.8009%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (329,390 samples, 0.18%)</title><rect x="39.6443%" y="133" width="0.1775%" height="15" fill="rgb(234,67,33)"/><text x="39.8943%" y="143.50"></text></g><g><title>coherent_trait (20,433,698 samples, 11.01%)</title><rect x="28.8120%" y="197" width="11.0100%" height="15" fill="rgb(247,98,35)"/><text x="29.0620%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (20,413,078 samples, 11.00%)</title><rect x="28.8231%" y="181" width="10.9989%" height="15" fill="rgb(247,138,52)"/><text x="29.0731%" y="191.50">specialization_g..</text></g><g><title>coherence_checking (20,504,099 samples, 11.05%)</title><rect x="28.7970%" y="213" width="11.0480%" height="15" fill="rgb(213,79,30)"/><text x="29.0470%" y="223.50">coherence_checki..</text></g><g><title>associated_items (237,711 samples, 0.13%)</title><rect x="42.7483%" y="165" width="0.1281%" height="15" fill="rgb(246,177,23)"/><text x="42.9983%" y="175.50"></text></g><g><title>adt_destructor (264,013 samples, 0.14%)</title><rect x="43.1653%" y="133" width="0.1423%" height="15" fill="rgb(230,62,27)"/><text x="43.4153%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (256,883 samples, 0.14%)</title><rect x="43.1691%" y="117" width="0.1384%" height="15" fill="rgb(216,154,8)"/><text x="43.4191%" y="127.50"></text></g><g><title>adt_def (339,663 samples, 0.18%)</title><rect x="43.3383%" y="117" width="0.1830%" height="15" fill="rgb(244,35,45)"/><text x="43.5883%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (327,432 samples, 0.18%)</title><rect x="43.3449%" y="101" width="0.1764%" height="15" fill="rgb(251,115,12)"/><text x="43.5949%" y="111.50"></text></g><g><title>adt_def (218,662 samples, 0.12%)</title><rect x="43.7125%" y="69" width="0.1178%" height="15" fill="rgb(240,54,50)"/><text x="43.9625%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (217,692 samples, 0.12%)</title><rect x="43.7130%" y="53" width="0.1173%" height="15" fill="rgb(233,84,52)"/><text x="43.9630%" y="63.50"></text></g><g><title>adt_dtorck_constraint (392,395 samples, 0.21%)</title><rect x="43.7070%" y="85" width="0.2114%" height="15" fill="rgb(207,117,47)"/><text x="43.9570%" y="95.50"></text></g><g><title>adt_dtorck_constraint (554,367 samples, 0.30%)</title><rect x="43.6378%" y="101" width="0.2987%" height="15" fill="rgb(249,43,39)"/><text x="43.8878%" y="111.50"></text></g><g><title>adt_dtorck_constraint (808,168 samples, 0.44%)</title><rect x="43.5343%" y="117" width="0.4355%" height="15" fill="rgb(209,38,44)"/><text x="43.7843%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,293,525 samples, 0.70%)</title><rect x="43.3075%" y="133" width="0.6970%" height="15" fill="rgb(236,212,23)"/><text x="43.5575%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,901,910 samples, 1.02%)</title><rect x="43.0371%" y="149" width="1.0248%" height="15" fill="rgb(242,79,21)"/><text x="43.2871%" y="159.50"></text></g><g><title>dropck_outlives (2,192,095 samples, 1.18%)</title><rect x="42.8887%" y="165" width="1.1811%" height="15" fill="rgb(211,96,35)"/><text x="43.1387%" y="175.50"></text></g><g><title>evaluate_obligation (555,555 samples, 0.30%)</title><rect x="44.0698%" y="165" width="0.2993%" height="15" fill="rgb(253,215,40)"/><text x="44.3198%" y="175.50"></text></g><g><title>associated_item (800,440 samples, 0.43%)</title><rect x="58.4623%" y="133" width="0.4313%" height="15" fill="rgb(211,81,21)"/><text x="58.7123%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (623,968 samples, 0.34%)</title><rect x="58.5574%" y="117" width="0.3362%" height="15" fill="rgb(208,190,38)"/><text x="58.8074%" y="127.50"></text></g><g><title>associated_items (1,195,843 samples, 0.64%)</title><rect x="58.2806%" y="149" width="0.6443%" height="15" fill="rgb(235,213,38)"/><text x="58.5306%" y="159.50"></text></g><g><title>adt_def (1,054,060 samples, 0.57%)</title><rect x="60.0693%" y="117" width="0.5679%" height="15" fill="rgb(237,122,38)"/><text x="60.3193%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (1,026,240 samples, 0.55%)</title><rect x="60.0843%" y="101" width="0.5530%" height="15" fill="rgb(244,218,35)"/><text x="60.3343%" y="111.50"></text></g><g><title>item_attrs (546,665 samples, 0.29%)</title><rect x="60.3427%" y="85" width="0.2946%" height="15" fill="rgb(240,68,47)"/><text x="60.5927%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (516,955 samples, 0.28%)</title><rect x="60.3588%" y="69" width="0.2785%" height="15" fill="rgb(210,16,53)"/><text x="60.6088%" y="79.50"></text></g><g><title>adt_destructor (455,006 samples, 0.25%)</title><rect x="60.6373%" y="117" width="0.2452%" height="15" fill="rgb(235,124,12)"/><text x="60.8873%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (207,573 samples, 0.11%)</title><rect x="60.7706%" y="101" width="0.1118%" height="15" fill="rgb(224,169,11)"/><text x="61.0206%" y="111.50"></text></g><g><title>adt_def (606,699 samples, 0.33%)</title><rect x="61.0154%" y="101" width="0.3269%" height="15" fill="rgb(250,166,2)"/><text x="61.2654%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (591,329 samples, 0.32%)</title><rect x="61.0236%" y="85" width="0.3186%" height="15" fill="rgb(242,216,29)"/><text x="61.2736%" y="95.50"></text></g><g><title>item_attrs (326,174 samples, 0.18%)</title><rect x="61.1665%" y="69" width="0.1757%" height="15" fill="rgb(230,116,27)"/><text x="61.4165%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (310,004 samples, 0.17%)</title><rect x="61.1752%" y="53" width="0.1670%" height="15" fill="rgb(228,99,48)"/><text x="61.4252%" y="63.50"></text></g><g><title>adt_def (422,516 samples, 0.23%)</title><rect x="61.4667%" y="85" width="0.2277%" height="15" fill="rgb(253,11,6)"/><text x="61.7167%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (413,866 samples, 0.22%)</title><rect x="61.4714%" y="69" width="0.2230%" height="15" fill="rgb(247,143,39)"/><text x="61.7214%" y="79.50"></text></g><g><title>item_attrs (203,125 samples, 0.11%)</title><rect x="61.5849%" y="53" width="0.1094%" height="15" fill="rgb(236,97,10)"/><text x="61.8349%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (194,053 samples, 0.10%)</title><rect x="61.5898%" y="37" width="0.1046%" height="15" fill="rgb(233,208,19)"/><text x="61.8398%" y="47.50"></text></g><g><title>adt_dtorck_constraint (365,951 samples, 0.20%)</title><rect x="61.7280%" y="85" width="0.1972%" height="15" fill="rgb(216,164,2)"/><text x="61.9780%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,014,263 samples, 0.55%)</title><rect x="61.4209%" y="101" width="0.5465%" height="15" fill="rgb(220,129,5)"/><text x="61.6709%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,211,938 samples, 1.19%)</title><rect x="60.8825%" y="117" width="1.1918%" height="15" fill="rgb(242,17,10)"/><text x="61.1325%" y="127.50"></text></g><g><title>adt_dtorck_constraint (4,743,132 samples, 2.56%)</title><rect x="59.7880%" y="133" width="2.5557%" height="15" fill="rgb(242,107,0)"/><text x="60.0380%" y="143.50">ad..</text></g><g><title>type_of (359,145 samples, 0.19%)</title><rect x="62.1502%" y="117" width="0.1935%" height="15" fill="rgb(251,28,31)"/><text x="62.4002%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (294,164 samples, 0.16%)</title><rect x="62.1852%" y="101" width="0.1585%" height="15" fill="rgb(233,223,10)"/><text x="62.4352%" y="111.50"></text></g><g><title>evaluate_obligation (230,453 samples, 0.12%)</title><rect x="62.7204%" y="117" width="0.1242%" height="15" fill="rgb(215,21,27)"/><text x="62.9704%" y="127.50"></text></g><g><title>trait_impls_of (195,421 samples, 0.11%)</title><rect x="62.9347%" y="117" width="0.1053%" height="15" fill="rgb(232,23,21)"/><text x="63.1847%" y="127.50"></text></g><g><title>normalize_projection_ty (1,146,815 samples, 0.62%)</title><rect x="62.4324%" y="133" width="0.6179%" height="15" fill="rgb(244,5,23)"/><text x="62.6824%" y="143.50"></text></g><g><title>dropck_outlives (7,520,204 samples, 4.05%)</title><rect x="59.0023%" y="149" width="4.0520%" height="15" fill="rgb(226,81,46)"/><text x="59.2523%" y="159.50">drop..</text></g><g><title>adt_def (282,214 samples, 0.15%)</title><rect x="66.4771%" y="117" width="0.1521%" height="15" fill="rgb(247,70,30)"/><text x="66.7271%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (273,604 samples, 0.15%)</title><rect x="66.4817%" y="101" width="0.1474%" height="15" fill="rgb(212,68,19)"/><text x="66.7317%" y="111.50"></text></g><g><title>adt_sized_constraint (215,154 samples, 0.12%)</title><rect x="66.6291%" y="117" width="0.1159%" height="15" fill="rgb(240,187,13)"/><text x="66.8791%" y="127.50"></text></g><g><title>adt_sized_constraint (598,559 samples, 0.32%)</title><rect x="66.4494%" y="133" width="0.3225%" height="15" fill="rgb(223,113,26)"/><text x="66.6994%" y="143.50"></text></g><g><title>predicates_of (402,555 samples, 0.22%)</title><rect x="66.9762%" y="133" width="0.2169%" height="15" fill="rgb(206,192,2)"/><text x="67.2262%" y="143.50"></text></g><g><title>predicates_defined_on (279,633 samples, 0.15%)</title><rect x="67.0424%" y="117" width="0.1507%" height="15" fill="rgb(241,108,4)"/><text x="67.2924%" y="127.50"></text></g><g><title>trait_impls_of (2,045,593 samples, 1.10%)</title><rect x="67.2377%" y="133" width="1.1022%" height="15" fill="rgb(247,173,49)"/><text x="67.4877%" y="143.50"></text></g><g><title>implementations_of_trait (869,984 samples, 0.47%)</title><rect x="67.8711%" y="117" width="0.4688%" height="15" fill="rgb(224,114,35)"/><text x="68.1211%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (426,478 samples, 0.23%)</title><rect x="68.1101%" y="101" width="0.2298%" height="15" fill="rgb(245,159,27)"/><text x="68.3601%" y="111.50"></text></g><g><title>evaluate_obligation (10,020,457 samples, 5.40%)</title><rect x="63.0556%" y="149" width="5.3992%" height="15" fill="rgb(245,172,44)"/><text x="63.3056%" y="159.50">evaluat..</text></g><g><title>type_of (213,265 samples, 0.11%)</title><rect x="68.3399%" y="133" width="0.1149%" height="15" fill="rgb(236,23,11)"/><text x="68.5899%" y="143.50"></text></g><g><title>fn_sig (242,864 samples, 0.13%)</title><rect x="68.4761%" y="149" width="0.1309%" height="15" fill="rgb(205,117,38)"/><text x="68.7261%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (209,534 samples, 0.11%)</title><rect x="68.4940%" y="133" width="0.1129%" height="15" fill="rgb(237,72,25)"/><text x="68.7440%" y="143.50"></text></g><g><title>generics_of (206,061 samples, 0.11%)</title><rect x="68.6069%" y="149" width="0.1110%" height="15" fill="rgb(244,70,9)"/><text x="68.8569%" y="159.50"></text></g><g><title>is_copy_raw (1,006,639 samples, 0.54%)</title><rect x="68.9172%" y="149" width="0.5424%" height="15" fill="rgb(217,125,39)"/><text x="69.1672%" y="159.50"></text></g><g><title>evaluate_obligation (812,138 samples, 0.44%)</title><rect x="69.0220%" y="133" width="0.4376%" height="15" fill="rgb(235,36,10)"/><text x="69.2720%" y="143.50"></text></g><g><title>item_attrs (261,152 samples, 0.14%)</title><rect x="69.4617%" y="149" width="0.1407%" height="15" fill="rgb(251,123,47)"/><text x="69.7117%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (249,892 samples, 0.13%)</title><rect x="69.4677%" y="133" width="0.1346%" height="15" fill="rgb(221,13,13)"/><text x="69.7177%" y="143.50"></text></g><g><title>evaluate_obligation (567,016 samples, 0.31%)</title><rect x="69.9288%" y="133" width="0.3055%" height="15" fill="rgb(238,131,9)"/><text x="70.1788%" y="143.50"></text></g><g><title>method_autoderef_steps (1,055,319 samples, 0.57%)</title><rect x="69.6789%" y="149" width="0.5686%" height="15" fill="rgb(211,50,8)"/><text x="69.9289%" y="159.50"></text></g><g><title>object_safety_violations (344,764 samples, 0.19%)</title><rect x="70.2489%" y="149" width="0.1858%" height="15" fill="rgb(245,182,24)"/><text x="70.4989%" y="159.50"></text></g><g><title>explicit_predicates_of (258,613 samples, 0.14%)</title><rect x="70.7221%" y="117" width="0.1393%" height="15" fill="rgb(242,14,37)"/><text x="70.9721%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (197,432 samples, 0.11%)</title><rect x="70.7550%" y="101" width="0.1064%" height="15" fill="rgb(246,228,12)"/><text x="71.0050%" y="111.50"></text></g><g><title>predicates_of (802,460 samples, 0.43%)</title><rect x="70.4813%" y="149" width="0.4324%" height="15" fill="rgb(213,55,15)"/><text x="70.7313%" y="159.50"></text></g><g><title>predicates_defined_on (532,457 samples, 0.29%)</title><rect x="70.6268%" y="133" width="0.2869%" height="15" fill="rgb(209,9,3)"/><text x="70.8768%" y="143.50"></text></g><g><title>specializes (406,406 samples, 0.22%)</title><rect x="70.9137%" y="149" width="0.2190%" height="15" fill="rgb(230,59,30)"/><text x="71.1637%" y="159.50"></text></g><g><title>trait_impls_of (231,882 samples, 0.12%)</title><rect x="71.1552%" y="149" width="0.1249%" height="15" fill="rgb(209,121,21)"/><text x="71.4052%" y="159.50"></text></g><g><title>typeck (49,559,594 samples, 26.70%)</title><rect x="44.7880%" y="165" width="26.7036%" height="15" fill="rgb(220,109,13)"/><text x="45.0380%" y="175.50">typeck</text></g><g><title>item_bodies_checking (58,739,356 samples, 31.65%)</title><rect x="39.8572%" y="213" width="31.6498%" height="15" fill="rgb(232,18,1)"/><text x="40.1072%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (58,735,256 samples, 31.65%)</title><rect x="39.8594%" y="197" width="31.6476%" height="15" fill="rgb(215,41,42)"/><text x="40.1094%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (58,676,986 samples, 31.62%)</title><rect x="39.8908%" y="181" width="31.6162%" height="15" fill="rgb(224,123,36)"/><text x="40.1408%" y="191.50">typeck</text></g><g><title>item_types_checking (415,404 samples, 0.22%)</title><rect x="71.5070%" y="213" width="0.2238%" height="15" fill="rgb(240,125,3)"/><text x="71.7570%" y="223.50"></text></g><g><title>check_mod_item_types (409,304 samples, 0.22%)</title><rect x="71.5102%" y="197" width="0.2205%" height="15" fill="rgb(205,98,50)"/><text x="71.7602%" y="207.50"></text></g><g><title>fn_sig (454,994 samples, 0.25%)</title><rect x="71.8392%" y="181" width="0.2452%" height="15" fill="rgb(205,185,37)"/><text x="72.0892%" y="191.50"></text></g><g><title>named_region_map (254,263 samples, 0.14%)</title><rect x="72.1394%" y="165" width="0.1370%" height="15" fill="rgb(238,207,15)"/><text x="72.3894%" y="175.50"></text></g><g><title>resolve_lifetimes (244,953 samples, 0.13%)</title><rect x="72.1444%" y="149" width="0.1320%" height="15" fill="rgb(213,199,42)"/><text x="72.3944%" y="159.50"></text></g><g><title>generics_of (367,074 samples, 0.20%)</title><rect x="72.0844%" y="181" width="0.1978%" height="15" fill="rgb(235,201,11)"/><text x="72.3344%" y="191.50"></text></g><g><title>explicit_predicates_of (210,134 samples, 0.11%)</title><rect x="72.3385%" y="149" width="0.1132%" height="15" fill="rgb(207,46,11)"/><text x="72.5885%" y="159.50"></text></g><g><title>predicates_of (519,328 samples, 0.28%)</title><rect x="72.2959%" y="181" width="0.2798%" height="15" fill="rgb(241,35,35)"/><text x="72.5459%" y="191.50"></text></g><g><title>predicates_defined_on (489,147 samples, 0.26%)</title><rect x="72.3122%" y="165" width="0.2636%" height="15" fill="rgb(243,32,47)"/><text x="72.5622%" y="175.50"></text></g><g><title>inferred_outlives_of (230,153 samples, 0.12%)</title><rect x="72.4517%" y="149" width="0.1240%" height="15" fill="rgb(247,202,23)"/><text x="72.7017%" y="159.50"></text></g><g><title>inferred_outlives_crate (213,783 samples, 0.12%)</title><rect x="72.4606%" y="133" width="0.1152%" height="15" fill="rgb(219,102,11)"/><text x="72.7106%" y="143.50"></text></g><g><title>type_collecting (1,614,308 samples, 0.87%)</title><rect x="71.7331%" y="213" width="0.8698%" height="15" fill="rgb(243,110,44)"/><text x="71.9831%" y="223.50"></text></g><g><title>collect_mod_item_types (1,596,868 samples, 0.86%)</title><rect x="71.7425%" y="197" width="0.8604%" height="15" fill="rgb(222,74,54)"/><text x="71.9925%" y="207.50"></text></g><g><title>evaluate_obligation (425,617 samples, 0.23%)</title><rect x="73.0646%" y="181" width="0.2293%" height="15" fill="rgb(216,99,12)"/><text x="73.3146%" y="191.50"></text></g><g><title>object_safety_violations (263,383 samples, 0.14%)</title><rect x="73.3678%" y="181" width="0.1419%" height="15" fill="rgb(226,22,26)"/><text x="73.6178%" y="191.50"></text></g><g><title>region_scope_tree (293,343 samples, 0.16%)</title><rect x="73.5986%" y="181" width="0.1581%" height="15" fill="rgb(217,163,10)"/><text x="73.8486%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,258,017 samples, 1.22%)</title><rect x="72.6724%" y="197" width="1.2167%" height="15" fill="rgb(213,25,53)"/><text x="72.9224%" y="207.50"></text></g><g><title>trait_impls_of (245,733 samples, 0.13%)</title><rect x="73.7566%" y="181" width="0.1324%" height="15" fill="rgb(252,105,26)"/><text x="74.0066%" y="191.50"></text></g><g><title>adt_def (186,733 samples, 0.10%)</title><rect x="75.2815%" y="149" width="0.1006%" height="15" fill="rgb(220,39,43)"/><text x="75.5315%" y="159.50"></text></g><g><title>adt_sized_constraint (295,753 samples, 0.16%)</title><rect x="75.3822%" y="149" width="0.1594%" height="15" fill="rgb(229,68,48)"/><text x="75.6322%" y="159.50"></text></g><g><title>adt_sized_constraint (535,506 samples, 0.29%)</title><rect x="75.2673%" y="165" width="0.2885%" height="15" fill="rgb(252,8,32)"/><text x="75.5173%" y="175.50"></text></g><g><title>trait_impls_of (200,342 samples, 0.11%)</title><rect x="75.6670%" y="165" width="0.1079%" height="15" fill="rgb(223,20,43)"/><text x="75.9170%" y="175.50"></text></g><g><title>evaluate_obligation (3,012,593 samples, 1.62%)</title><rect x="74.2898%" y="181" width="1.6232%" height="15" fill="rgb(229,81,49)"/><text x="74.5398%" y="191.50"></text></g><g><title>type_of (256,255 samples, 0.14%)</title><rect x="75.7749%" y="165" width="0.1381%" height="15" fill="rgb(236,28,36)"/><text x="76.0249%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (195,034 samples, 0.11%)</title><rect x="75.8079%" y="149" width="0.1051%" height="15" fill="rgb(249,185,26)"/><text x="76.0579%" y="159.50"></text></g><g><title>trait_impls_of (252,811 samples, 0.14%)</title><rect x="76.1291%" y="181" width="0.1362%" height="15" fill="rgb(249,174,33)"/><text x="76.3791%" y="191.50"></text></g><g><title>analysis (141,024,314 samples, 75.99%)</title><rect x="0.2990%" y="245" width="75.9864%" height="15" fill="rgb(233,201,37)"/><text x="0.5490%" y="255.50">analysis</text></g><g><title>type_check_crate (88,215,374 samples, 47.53%)</title><rect x="28.7534%" y="229" width="47.5320%" height="15" fill="rgb(221,78,26)"/><text x="29.0034%" y="239.50">type_check_crate</text></g><g><title>wf_checking (6,829,826 samples, 3.68%)</title><rect x="72.6053%" y="213" width="3.6800%" height="15" fill="rgb(250,127,30)"/><text x="72.8553%" y="223.50">wf_c..</text></g><g><title>check_item_well_formed (4,447,328 samples, 2.40%)</title><rect x="73.8890%" y="197" width="2.3963%" height="15" fill="rgb(230,49,44)"/><text x="74.1390%" y="207.50">ch..</text></g><g><title>codegen_crate (781,279 samples, 0.42%)</title><rect x="76.2889%" y="245" width="0.4210%" height="15" fill="rgb(229,67,23)"/><text x="76.5389%" y="255.50"></text></g><g><title>metadata_register_crate (10,485,658 samples, 5.65%)</title><rect x="83.5509%" y="197" width="5.6499%" height="15" fill="rgb(249,83,47)"/><text x="83.8009%" y="207.50">metadat..</text></g><g><title>metadata_register_crate (8,712,326 samples, 4.69%)</title><rect x="84.5064%" y="181" width="4.6944%" height="15" fill="rgb(215,43,3)"/><text x="84.7564%" y="191.50">metad..</text></g><g><title>metadata_register_crate (6,772,336 samples, 3.65%)</title><rect x="85.5517%" y="165" width="3.6491%" height="15" fill="rgb(238,154,13)"/><text x="85.8017%" y="175.50">meta..</text></g><g><title>metadata_register_crate (5,246,279 samples, 2.83%)</title><rect x="86.3739%" y="149" width="2.8268%" height="15" fill="rgb(219,56,2)"/><text x="86.6239%" y="159.50">me..</text></g><g><title>metadata_register_crate (201,102 samples, 0.11%)</title><rect x="89.0924%" y="133" width="0.1084%" height="15" fill="rgb(233,0,4)"/><text x="89.3424%" y="143.50"></text></g><g><title>macro_expand_crate (22,884,565 samples, 12.33%)</title><rect x="76.9490%" y="229" width="12.3306%" height="15" fill="rgb(235,30,7)"/><text x="77.1990%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (22,873,195 samples, 12.32%)</title><rect x="76.9551%" y="213" width="12.3245%" height="15" fill="rgb(250,79,13)"/><text x="77.2051%" y="223.50">expand_crate</text></g><g><title>finalize_imports (226,903 samples, 0.12%)</title><rect x="89.3211%" y="213" width="0.1223%" height="15" fill="rgb(211,146,34)"/><text x="89.5711%" y="223.50"></text></g><g><title>late_resolve_crate (2,716,680 samples, 1.46%)</title><rect x="89.4845%" y="213" width="1.4638%" height="15" fill="rgb(228,22,38)"/><text x="89.7345%" y="223.50"></text></g><g><title>configure_and_expand (26,528,226 samples, 14.29%)</title><rect x="76.7098%" y="245" width="14.2939%" height="15" fill="rgb(235,168,5)"/><text x="76.9598%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (3,128,225 samples, 1.69%)</title><rect x="89.3181%" y="229" width="1.6855%" height="15" fill="rgb(221,155,16)"/><text x="89.5681%" y="239.50"></text></g><g><title>early_lint_checks (330,024 samples, 0.18%)</title><rect x="91.1069%" y="245" width="0.1778%" height="15" fill="rgb(215,215,53)"/><text x="91.3569%" y="255.50"></text></g><g><title>free_global_ctxt (5,970,347 samples, 3.22%)</title><rect x="91.2847%" y="245" width="3.2169%" height="15" fill="rgb(223,4,10)"/><text x="91.5347%" y="255.50">fre..</text></g><g><title>crate_host_hash (258,343 samples, 0.14%)</title><rect x="95.1465%" y="229" width="0.1392%" height="15" fill="rgb(234,103,6)"/><text x="95.3965%" y="239.50"></text></g><g><title>layout_of (197,072 samples, 0.11%)</title><rect x="96.2908%" y="117" width="0.1062%" height="15" fill="rgb(227,97,0)"/><text x="96.5408%" y="127.50"></text></g><g><title>layout_of (248,333 samples, 0.13%)</title><rect x="96.2723%" y="133" width="0.1338%" height="15" fill="rgb(234,150,53)"/><text x="96.5223%" y="143.50"></text></g><g><title>layout_of (322,963 samples, 0.17%)</title><rect x="96.2410%" y="149" width="0.1740%" height="15" fill="rgb(228,201,54)"/><text x="96.4910%" y="159.50"></text></g><g><title>layout_of (375,074 samples, 0.20%)</title><rect x="96.2210%" y="165" width="0.2021%" height="15" fill="rgb(222,22,37)"/><text x="96.4710%" y="175.50"></text></g><g><title>layout_of (470,725 samples, 0.25%)</title><rect x="96.1707%" y="213" width="0.2536%" height="15" fill="rgb(237,53,32)"/><text x="96.4207%" y="223.50"></text></g><g><title>layout_of (427,844 samples, 0.23%)</title><rect x="96.1938%" y="197" width="0.2305%" height="15" fill="rgb(233,25,53)"/><text x="96.4438%" y="207.50"></text></g><g><title>layout_of (392,214 samples, 0.21%)</title><rect x="96.2130%" y="181" width="0.2113%" height="15" fill="rgb(210,40,34)"/><text x="96.4630%" y="191.50"></text></g><g><title>is_copy_raw (213,102 samples, 0.11%)</title><rect x="97.2954%" y="181" width="0.1148%" height="15" fill="rgb(241,220,44)"/><text x="97.5454%" y="191.50"></text></g><g><title>needs_drop_raw (380,375 samples, 0.20%)</title><rect x="97.2076%" y="197" width="0.2050%" height="15" fill="rgb(235,28,35)"/><text x="97.4576%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,881,960 samples, 1.01%)</title><rect x="96.4244%" y="213" width="1.0140%" height="15" fill="rgb(210,56,17)"/><text x="96.6744%" y="223.50"></text></g><g><title>optimized_mir (3,750,331 samples, 2.02%)</title><rect x="95.4191%" y="229" width="2.0207%" height="15" fill="rgb(224,130,29)"/><text x="95.6691%" y="239.50">o..</text></g><g><title>generate_crate_metadata (5,497,691 samples, 2.96%)</title><rect x="94.5016%" y="245" width="2.9623%" height="15" fill="rgb(235,212,8)"/><text x="94.7516%" y="255.50">gen..</text></g><g><title>hir_lowering (2,203,264 samples, 1.19%)</title><rect x="97.4639%" y="245" width="1.1872%" height="15" fill="rgb(223,33,50)"/><text x="97.7139%" y="255.50"></text></g><g><title>parse_crate (393,325 samples, 0.21%)</title><rect x="98.6945%" y="245" width="0.2119%" height="15" fill="rgb(219,149,13)"/><text x="98.9445%" y="255.50"></text></g><g><title>prepare_outputs (187,062 samples, 0.10%)</title><rect x="98.9098%" y="245" width="0.1008%" height="15" fill="rgb(250,156,29)"/><text x="99.1598%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,350,125 samples, 0.73%)</title><rect x="99.0106%" y="245" width="0.7275%" height="15" fill="rgb(216,193,19)"/><text x="99.2606%" y="255.50"></text></g><g><title>all (185,591,640 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(216,135,14)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (185,591,640 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,47,5)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (386,374 samples, 0.21%)</title><rect x="99.7918%" y="245" width="0.2082%" height="15" fill="rgb(233,42,35)"/><text x="100.0418%" y="255.50"></text></g></svg></svg>