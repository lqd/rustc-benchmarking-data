<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (461,185 samples, 0.13%)</title><rect x="13.8080%" y="133" width="0.1324%" height="15" fill="rgb(227,0,7)"/><text x="14.0580%" y="143.50"></text></g><g><title>param_env (1,281,631 samples, 0.37%)</title><rect x="16.2286%" y="101" width="0.3681%" height="15" fill="rgb(217,0,24)"/><text x="16.4786%" y="111.50"></text></g><g><title>item_attrs (399,844 samples, 0.11%)</title><rect x="17.3865%" y="69" width="0.1148%" height="15" fill="rgb(221,193,54)"/><text x="17.6365%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (388,134 samples, 0.11%)</title><rect x="17.3899%" y="53" width="0.1115%" height="15" fill="rgb(248,212,6)"/><text x="17.6399%" y="63.50"></text></g><g><title>codegen_fn_attrs (753,978 samples, 0.22%)</title><rect x="17.3013%" y="85" width="0.2165%" height="15" fill="rgb(208,68,35)"/><text x="17.5513%" y="95.50"></text></g><g><title>is_copy_raw (1,232,075 samples, 0.35%)</title><rect x="20.9160%" y="69" width="0.3538%" height="15" fill="rgb(232,128,0)"/><text x="21.1660%" y="79.50"></text></g><g><title>evaluate_obligation (1,033,523 samples, 0.30%)</title><rect x="20.9730%" y="53" width="0.2968%" height="15" fill="rgb(207,160,47)"/><text x="21.2230%" y="63.50"></text></g><g><title>is_copy_raw (1,093,268 samples, 0.31%)</title><rect x="21.3946%" y="53" width="0.3140%" height="15" fill="rgb(228,23,34)"/><text x="21.6446%" y="63.50"></text></g><g><title>evaluate_obligation (872,756 samples, 0.25%)</title><rect x="21.4579%" y="37" width="0.2506%" height="15" fill="rgb(218,30,26)"/><text x="21.7079%" y="47.50"></text></g><g><title>needs_drop_raw (1,531,404 samples, 0.44%)</title><rect x="21.2698%" y="69" width="0.4398%" height="15" fill="rgb(220,122,19)"/><text x="21.5198%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,326,003 samples, 0.38%)</title><rect x="22.0872%" y="53" width="0.3808%" height="15" fill="rgb(250,228,42)"/><text x="22.3372%" y="63.50"></text></g><g><title>resolve_instance (3,141,212 samples, 0.90%)</title><rect x="21.7096%" y="69" width="0.9021%" height="15" fill="rgb(240,193,28)"/><text x="21.9596%" y="79.50"></text></g><g><title>thir_body (4,734,044 samples, 1.36%)</title><rect x="22.6666%" y="69" width="1.3595%" height="15" fill="rgb(216,20,37)"/><text x="22.9166%" y="79.50"></text></g><g><title>mir_const (31,481,948 samples, 9.04%)</title><rect x="15.0190%" y="117" width="9.0411%" height="15" fill="rgb(206,188,39)"/><text x="15.2690%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (25,988,488 samples, 7.46%)</title><rect x="16.5967%" y="101" width="7.4635%" height="15" fill="rgb(217,207,13)"/><text x="16.8467%" y="111.50">unsafety_c..</text></g><g><title>mir_built (22,780,960 samples, 6.54%)</title><rect x="17.5178%" y="85" width="6.5424%" height="15" fill="rgb(231,73,38)"/><text x="17.7678%" y="95.50">mir_built</text></g><g><title>mir_promoted (35,469,654 samples, 10.19%)</title><rect x="13.9660%" y="133" width="10.1864%" height="15" fill="rgb(225,20,46)"/><text x="14.2160%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (953,930 samples, 0.27%)</title><rect x="24.1524%" y="133" width="0.2740%" height="15" fill="rgb(210,31,41)"/><text x="24.4024%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,181,962 samples, 0.34%)</title><rect x="24.4263%" y="133" width="0.3394%" height="15" fill="rgb(221,200,47)"/><text x="24.6763%" y="143.50"></text></g><g><title>normalize_projection_ty (634,606 samples, 0.18%)</title><rect x="24.5835%" y="117" width="0.1822%" height="15" fill="rgb(226,26,5)"/><text x="24.8335%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,267,234 samples, 1.23%)</title><rect x="24.8694%" y="133" width="1.2255%" height="15" fill="rgb(249,33,26)"/><text x="25.1194%" y="143.50"></text></g><g><title>MIR_borrow_checking (88,799,220 samples, 25.50%)</title><rect x="0.5952%" y="165" width="25.5018%" height="15" fill="rgb(235,183,28)"/><text x="0.8452%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (87,940,439 samples, 25.26%)</title><rect x="0.8418%" y="149" width="25.2552%" height="15" fill="rgb(221,5,38)"/><text x="1.0918%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,023,283 samples, 0.29%)</title><rect x="26.1965%" y="165" width="0.2939%" height="15" fill="rgb(247,18,42)"/><text x="26.4465%" y="175.50"></text></g><g><title>codegen_fn_attrs (423,864 samples, 0.12%)</title><rect x="26.9767%" y="101" width="0.1217%" height="15" fill="rgb(241,131,45)"/><text x="27.2267%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,235,115 samples, 0.35%)</title><rect x="26.7547%" y="133" width="0.3547%" height="15" fill="rgb(249,31,29)"/><text x="27.0047%" y="143.50"></text></g><g><title>should_inherit_track_caller (985,852 samples, 0.28%)</title><rect x="26.8263%" y="117" width="0.2831%" height="15" fill="rgb(225,111,53)"/><text x="27.0763%" y="127.50"></text></g><g><title>check_mod_attrs (2,096,853 samples, 0.60%)</title><rect x="26.5073%" y="149" width="0.6022%" height="15" fill="rgb(238,160,17)"/><text x="26.7573%" y="159.50"></text></g><g><title>check_mod_const_bodies (644,276 samples, 0.19%)</title><rect x="27.1095%" y="149" width="0.1850%" height="15" fill="rgb(214,148,48)"/><text x="27.3595%" y="159.50"></text></g><g><title>lookup_deprecation_entry (621,008 samples, 0.18%)</title><rect x="27.5505%" y="133" width="0.1783%" height="15" fill="rgb(232,36,49)"/><text x="27.8005%" y="143.50"></text></g><g><title>stability_index (478,045 samples, 0.14%)</title><rect x="27.5916%" y="117" width="0.1373%" height="15" fill="rgb(209,103,24)"/><text x="27.8416%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,347,465 samples, 0.39%)</title><rect x="27.3870%" y="149" width="0.3870%" height="15" fill="rgb(229,88,8)"/><text x="27.6370%" y="159.50"></text></g><g><title>misc_checking_1 (4,681,952 samples, 1.34%)</title><rect x="26.4905%" y="165" width="1.3446%" height="15" fill="rgb(213,181,19)"/><text x="26.7405%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,779,589 samples, 0.51%)</title><rect x="27.8357%" y="149" width="0.5111%" height="15" fill="rgb(254,191,54)"/><text x="28.0857%" y="159.50"></text></g><g><title>check_mod_liveness (1,433,482 samples, 0.41%)</title><rect x="27.9351%" y="133" width="0.4117%" height="15" fill="rgb(241,83,37)"/><text x="28.1851%" y="143.50"></text></g><g><title>misc_checking_2 (3,317,907 samples, 0.95%)</title><rect x="27.8351%" y="165" width="0.9529%" height="15" fill="rgb(233,36,39)"/><text x="28.0851%" y="175.50"></text></g><g><title>match_checking (1,536,488 samples, 0.44%)</title><rect x="28.3467%" y="149" width="0.4413%" height="15" fill="rgb(226,3,54)"/><text x="28.5967%" y="159.50"></text></g><g><title>check_match (1,340,147 samples, 0.38%)</title><rect x="28.4031%" y="133" width="0.3849%" height="15" fill="rgb(245,192,40)"/><text x="28.6531%" y="143.50"></text></g><g><title>check_private_in_public (1,143,133 samples, 0.33%)</title><rect x="28.7912%" y="149" width="0.3283%" height="15" fill="rgb(238,167,29)"/><text x="29.0412%" y="159.50"></text></g><g><title>codegen_fn_attrs (391,384 samples, 0.11%)</title><rect x="29.5667%" y="133" width="0.1124%" height="15" fill="rgb(232,182,51)"/><text x="29.8167%" y="143.50"></text></g><g><title>death_checking (2,012,343 samples, 0.58%)</title><rect x="29.1195%" y="149" width="0.5779%" height="15" fill="rgb(231,60,39)"/><text x="29.3695%" y="159.50"></text></g><g><title>param_env (1,450,686 samples, 0.42%)</title><rect x="30.2644%" y="117" width="0.4166%" height="15" fill="rgb(208,69,12)"/><text x="30.5144%" y="127.50"></text></g><g><title>predicates_of (646,196 samples, 0.19%)</title><rect x="30.4955%" y="101" width="0.1856%" height="15" fill="rgb(235,93,37)"/><text x="30.7455%" y="111.50"></text></g><g><title>predicates_defined_on (516,815 samples, 0.15%)</title><rect x="30.5326%" y="85" width="0.1484%" height="15" fill="rgb(213,116,39)"/><text x="30.7826%" y="95.50"></text></g><g><title>crate_lints (4,585,630 samples, 1.32%)</title><rect x="29.6979%" y="133" width="1.3169%" height="15" fill="rgb(222,207,29)"/><text x="29.9479%" y="143.50"></text></g><g><title>type_of (1,160,862 samples, 0.33%)</title><rect x="30.6814%" y="117" width="0.3334%" height="15" fill="rgb(206,96,30)"/><text x="30.9314%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (928,198 samples, 0.27%)</title><rect x="30.7482%" y="101" width="0.2666%" height="15" fill="rgb(218,138,4)"/><text x="30.9982%" y="111.50"></text></g><g><title>lint_checking (6,018,806 samples, 1.73%)</title><rect x="29.6974%" y="149" width="1.7285%" height="15" fill="rgb(250,191,14)"/><text x="29.9474%" y="159.50"></text></g><g><title>module_lints (1,431,566 samples, 0.41%)</title><rect x="31.0148%" y="133" width="0.4111%" height="15" fill="rgb(239,60,40)"/><text x="31.2648%" y="143.50"></text></g><g><title>lint_mod (1,414,066 samples, 0.41%)</title><rect x="31.0198%" y="117" width="0.4061%" height="15" fill="rgb(206,27,48)"/><text x="31.2698%" y="127.50"></text></g><g><title>privacy_access_levels (1,621,878 samples, 0.47%)</title><rect x="31.4259%" y="149" width="0.4658%" height="15" fill="rgb(225,35,8)"/><text x="31.6759%" y="159.50"></text></g><g><title>privacy_checking_modules (3,317,127 samples, 0.95%)</title><rect x="31.8917%" y="149" width="0.9526%" height="15" fill="rgb(250,213,24)"/><text x="32.1417%" y="159.50"></text></g><g><title>check_mod_privacy (3,303,567 samples, 0.95%)</title><rect x="31.8956%" y="133" width="0.9487%" height="15" fill="rgb(247,123,22)"/><text x="32.1456%" y="143.50"></text></g><g><title>misc_checking_3 (14,167,887 samples, 4.07%)</title><rect x="28.7880%" y="165" width="4.0688%" height="15" fill="rgb(231,138,38)"/><text x="29.0380%" y="175.50">misc..</text></g><g><title>impl_parent (2,641,218 samples, 0.76%)</title><rect x="34.3668%" y="101" width="0.7585%" height="15" fill="rgb(231,145,46)"/><text x="34.6168%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,584,915 samples, 0.46%)</title><rect x="34.6702%" y="85" width="0.4552%" height="15" fill="rgb(251,118,11)"/><text x="34.9202%" y="95.50"></text></g><g><title>impl_trait_ref (6,254,466 samples, 1.80%)</title><rect x="35.1254%" y="101" width="1.7962%" height="15" fill="rgb(217,147,25)"/><text x="35.3754%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,922,738 samples, 1.41%)</title><rect x="35.5078%" y="85" width="1.4137%" height="15" fill="rgb(247,81,37)"/><text x="35.7578%" y="95.50"></text></g><g><title>trait_impls_of (943,601 samples, 0.27%)</title><rect x="37.0240%" y="101" width="0.2710%" height="15" fill="rgb(209,12,38)"/><text x="37.2740%" y="111.50"></text></g><g><title>coherent_trait (15,051,916 samples, 4.32%)</title><rect x="32.9808%" y="133" width="4.3227%" height="15" fill="rgb(227,1,9)"/><text x="33.2308%" y="143.50">coher..</text></g><g><title>specialization_graph_of (14,995,414 samples, 4.31%)</title><rect x="32.9970%" y="117" width="4.3065%" height="15" fill="rgb(248,47,43)"/><text x="33.2470%" y="127.50">speci..</text></g><g><title>coherence_checking (15,358,769 samples, 4.41%)</title><rect x="32.9728%" y="149" width="4.4108%" height="15" fill="rgb(221,10,30)"/><text x="33.2228%" y="159.50">coher..</text></g><g><title>associated_item (791,908 samples, 0.23%)</title><rect x="58.1243%" y="85" width="0.2274%" height="15" fill="rgb(210,229,1)"/><text x="58.3743%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (645,076 samples, 0.19%)</title><rect x="58.1664%" y="69" width="0.1853%" height="15" fill="rgb(222,148,37)"/><text x="58.4164%" y="79.50"></text></g><g><title>associated_items (1,120,701 samples, 0.32%)</title><rect x="58.0476%" y="101" width="0.3218%" height="15" fill="rgb(234,67,33)"/><text x="58.2976%" y="111.50"></text></g><g><title>dropck_outlives (825,839 samples, 0.24%)</title><rect x="58.4004%" y="101" width="0.2372%" height="15" fill="rgb(247,98,35)"/><text x="58.6504%" y="111.50"></text></g><g><title>is_mir_available (415,954 samples, 0.12%)</title><rect x="58.6552%" y="69" width="0.1195%" height="15" fill="rgb(247,138,52)"/><text x="58.9052%" y="79.50"></text></g><g><title>mir_keys (410,514 samples, 0.12%)</title><rect x="58.6568%" y="53" width="0.1179%" height="15" fill="rgb(213,79,30)"/><text x="58.9068%" y="63.50"></text></g><g><title>mir_for_ctfe (486,456 samples, 0.14%)</title><rect x="58.8167%" y="69" width="0.1397%" height="15" fill="rgb(246,177,23)"/><text x="59.0667%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (446,545 samples, 0.13%)</title><rect x="58.8282%" y="53" width="0.1282%" height="15" fill="rgb(230,62,27)"/><text x="59.0782%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,187,463 samples, 0.34%)</title><rect x="58.6376%" y="101" width="0.3410%" height="15" fill="rgb(216,154,8)"/><text x="58.8876%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,169,673 samples, 0.34%)</title><rect x="58.6427%" y="85" width="0.3359%" height="15" fill="rgb(244,35,45)"/><text x="58.8927%" y="95.50"></text></g><g><title>evaluate_obligation (4,095,330 samples, 1.18%)</title><rect x="58.9786%" y="101" width="1.1761%" height="15" fill="rgb(251,115,12)"/><text x="59.2286%" y="111.50"></text></g><g><title>item_attrs (351,245 samples, 0.10%)</title><rect x="60.4111%" y="101" width="0.1009%" height="15" fill="rgb(240,54,50)"/><text x="60.6611%" y="111.50"></text></g><g><title>evaluate_obligation (801,509 samples, 0.23%)</title><rect x="60.8495%" y="85" width="0.2302%" height="15" fill="rgb(233,84,52)"/><text x="61.0995%" y="95.50"></text></g><g><title>method_autoderef_steps (1,890,479 samples, 0.54%)</title><rect x="60.5392%" y="101" width="0.5429%" height="15" fill="rgb(207,117,47)"/><text x="60.7892%" y="111.50"></text></g><g><title>predicates_of (846,639 samples, 0.24%)</title><rect x="61.2183%" y="101" width="0.2431%" height="15" fill="rgb(249,43,39)"/><text x="61.4683%" y="111.50"></text></g><g><title>predicates_defined_on (515,567 samples, 0.15%)</title><rect x="61.3134%" y="85" width="0.1481%" height="15" fill="rgb(209,38,44)"/><text x="61.5634%" y="95.50"></text></g><g><title>associated_items (472,154 samples, 0.14%)</title><rect x="63.0450%" y="85" width="0.1356%" height="15" fill="rgb(236,212,23)"/><text x="63.2950%" y="95.50"></text></g><g><title>evaluate_obligation (1,023,361 samples, 0.29%)</title><rect x="63.2458%" y="85" width="0.2939%" height="15" fill="rgb(242,79,21)"/><text x="63.4958%" y="95.50"></text></g><g><title>typeck (7,844,989 samples, 2.25%)</title><rect x="61.5576%" y="101" width="2.2530%" height="15" fill="rgb(211,96,35)"/><text x="61.8076%" y="111.50">t..</text></g><g><title>item_bodies_checking (92,005,285 samples, 26.42%)</title><rect x="37.4507%" y="149" width="26.4225%" height="15" fill="rgb(253,215,40)"/><text x="37.7007%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (92,001,195 samples, 26.42%)</title><rect x="37.4518%" y="133" width="26.4214%" height="15" fill="rgb(211,81,21)"/><text x="37.7018%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (91,394,387 samples, 26.25%)</title><rect x="37.6261%" y="117" width="26.2471%" height="15" fill="rgb(208,190,38)"/><text x="37.8761%" y="127.50">typeck</text></g><g><title>evaluate_obligation (554,726 samples, 0.16%)</title><rect x="65.8084%" y="117" width="0.1593%" height="15" fill="rgb(235,213,38)"/><text x="66.0584%" y="127.50"></text></g><g><title>impl_item_implementor_ids (351,236 samples, 0.10%)</title><rect x="66.0082%" y="117" width="0.1009%" height="15" fill="rgb(237,122,38)"/><text x="66.2582%" y="127.50"></text></g><g><title>item_types_checking (7,874,958 samples, 2.26%)</title><rect x="63.8732%" y="149" width="2.2616%" height="15" fill="rgb(244,218,35)"/><text x="64.1232%" y="159.50">i..</text></g><g><title>check_mod_item_types (7,853,088 samples, 2.26%)</title><rect x="63.8795%" y="133" width="2.2553%" height="15" fill="rgb(240,68,47)"/><text x="64.1295%" y="143.50">c..</text></g><g><title>fn_sig (1,428,078 samples, 0.41%)</title><rect x="66.6382%" y="117" width="0.4101%" height="15" fill="rgb(210,16,53)"/><text x="66.8882%" y="127.50"></text></g><g><title>lint_levels (413,225 samples, 0.12%)</title><rect x="67.3838%" y="69" width="0.1187%" height="15" fill="rgb(235,124,12)"/><text x="67.6338%" y="79.50"></text></g><g><title>is_late_bound_map (932,329 samples, 0.27%)</title><rect x="67.2349%" y="101" width="0.2678%" height="15" fill="rgb(224,169,11)"/><text x="67.4849%" y="111.50"></text></g><g><title>resolve_lifetimes (885,298 samples, 0.25%)</title><rect x="67.2484%" y="85" width="0.2542%" height="15" fill="rgb(250,166,2)"/><text x="67.4984%" y="95.50"></text></g><g><title>named_region_map (1,410,210 samples, 0.40%)</title><rect x="67.5027%" y="101" width="0.4050%" height="15" fill="rgb(242,216,29)"/><text x="67.7527%" y="111.50"></text></g><g><title>resolve_lifetimes (1,275,868 samples, 0.37%)</title><rect x="67.5412%" y="85" width="0.3664%" height="15" fill="rgb(230,116,27)"/><text x="67.7912%" y="95.50"></text></g><g><title>generics_of (3,077,495 samples, 0.88%)</title><rect x="67.0483%" y="117" width="0.8838%" height="15" fill="rgb(228,99,48)"/><text x="67.2983%" y="127.50"></text></g><g><title>explicit_predicates_of (685,720 samples, 0.20%)</title><rect x="68.2818%" y="85" width="0.1969%" height="15" fill="rgb(253,11,6)"/><text x="68.5318%" y="95.50"></text></g><g><title>predicates_of (2,120,856 samples, 0.61%)</title><rect x="68.0376%" y="117" width="0.6091%" height="15" fill="rgb(247,143,39)"/><text x="68.2876%" y="127.50"></text></g><g><title>predicates_defined_on (1,786,074 samples, 0.51%)</title><rect x="68.1338%" y="101" width="0.5129%" height="15" fill="rgb(236,97,10)"/><text x="68.3838%" y="111.50"></text></g><g><title>inferred_outlives_of (585,056 samples, 0.17%)</title><rect x="68.4787%" y="85" width="0.1680%" height="15" fill="rgb(233,208,19)"/><text x="68.7287%" y="95.50"></text></g><g><title>inferred_outlives_crate (475,325 samples, 0.14%)</title><rect x="68.5102%" y="69" width="0.1365%" height="15" fill="rgb(216,164,2)"/><text x="68.7602%" y="79.50"></text></g><g><title>type_collecting (9,325,693 samples, 2.68%)</title><rect x="66.1399%" y="149" width="2.6782%" height="15" fill="rgb(220,129,5)"/><text x="66.3899%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (9,301,213 samples, 2.67%)</title><rect x="66.1469%" y="133" width="2.6712%" height="15" fill="rgb(242,17,10)"/><text x="66.3969%" y="143.50">co..</text></g><g><title>type_of (482,764 samples, 0.14%)</title><rect x="68.6794%" y="117" width="0.1386%" height="15" fill="rgb(242,107,0)"/><text x="68.9294%" y="127.50"></text></g><g><title>evaluate_obligation (2,473,243 samples, 0.71%)</title><rect x="72.3370%" y="117" width="0.7103%" height="15" fill="rgb(251,28,31)"/><text x="72.5870%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,174,876 samples, 0.34%)</title><rect x="73.0473%" y="117" width="0.3374%" height="15" fill="rgb(233,223,10)"/><text x="73.2973%" y="127.50"></text></g><g><title>param_env (1,954,259 samples, 0.56%)</title><rect x="73.3847%" y="117" width="0.5612%" height="15" fill="rgb(215,21,27)"/><text x="73.6347%" y="127.50"></text></g><g><title>region_scope_tree (1,826,822 samples, 0.52%)</title><rect x="73.9697%" y="117" width="0.5246%" height="15" fill="rgb(232,23,21)"/><text x="74.2197%" y="127.50"></text></g><g><title>check_impl_item_well_formed (18,747,924 samples, 5.38%)</title><rect x="69.1713%" y="133" width="5.3841%" height="15" fill="rgb(244,5,23)"/><text x="69.4213%" y="143.50">check_i..</text></g><g><title>evaluate_obligation (2,178,666 samples, 0.63%)</title><rect x="76.4971%" y="117" width="0.6257%" height="15" fill="rgb(226,81,46)"/><text x="76.7471%" y="127.50"></text></g><g><title>param_env (1,400,460 samples, 0.40%)</title><rect x="77.2259%" y="117" width="0.4022%" height="15" fill="rgb(247,70,30)"/><text x="77.4759%" y="127.50"></text></g><g><title>check_item_well_formed (11,336,720 samples, 3.26%)</title><rect x="74.5554%" y="133" width="3.2557%" height="15" fill="rgb(212,68,19)"/><text x="74.8054%" y="143.50">che..</text></g><g><title>analysis (270,698,089 samples, 77.74%)</title><rect x="0.3113%" y="181" width="77.7404%" height="15" fill="rgb(240,187,13)"/><text x="0.5613%" y="191.50">analysis</text></g><g><title>type_check_crate (157,372,327 samples, 45.19%)</title><rect x="32.8568%" y="165" width="45.1950%" height="15" fill="rgb(223,113,26)"/><text x="33.1068%" y="175.50">type_check_crate</text></g><g><title>wf_checking (32,118,804 samples, 9.22%)</title><rect x="68.8277%" y="149" width="9.2240%" height="15" fill="rgb(206,192,2)"/><text x="69.0777%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (837,838 samples, 0.24%)</title><rect x="77.8112%" y="133" width="0.2406%" height="15" fill="rgb(241,108,4)"/><text x="78.0612%" y="143.50"></text></g><g><title>codegen_crate (593,966 samples, 0.17%)</title><rect x="78.0535%" y="181" width="0.1706%" height="15" fill="rgb(247,173,49)"/><text x="78.3035%" y="191.50"></text></g><g><title>AST_validation (363,894 samples, 0.10%)</title><rect x="78.2632%" y="165" width="0.1045%" height="15" fill="rgb(224,114,35)"/><text x="78.5132%" y="175.50"></text></g><g><title>metadata_register_crate (1,305,924 samples, 0.38%)</title><rect x="89.0022%" y="133" width="0.3750%" height="15" fill="rgb(245,159,27)"/><text x="89.2522%" y="143.50"></text></g><g><title>metadata_register_crate (465,626 samples, 0.13%)</title><rect x="89.2435%" y="117" width="0.1337%" height="15" fill="rgb(245,172,44)"/><text x="89.4935%" y="127.50"></text></g><g><title>macro_expand_crate (38,685,617 samples, 11.11%)</title><rect x="78.4438%" y="165" width="11.1099%" height="15" fill="rgb(236,23,11)"/><text x="78.6938%" y="175.50">macro_expand_cra..</text></g><g><title>expand_crate (38,668,297 samples, 11.10%)</title><rect x="78.4488%" y="149" width="11.1050%" height="15" fill="rgb(205,117,38)"/><text x="78.6988%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (614,638 samples, 0.18%)</title><rect x="89.3772%" y="133" width="0.1765%" height="15" fill="rgb(237,72,25)"/><text x="89.6272%" y="143.50"></text></g><g><title>late_resolve_crate (5,703,104 samples, 1.64%)</title><rect x="89.7502%" y="149" width="1.6378%" height="15" fill="rgb(244,70,9)"/><text x="90.0002%" y="159.50"></text></g><g><title>configure_and_expand (46,333,412 samples, 13.31%)</title><rect x="78.2240%" y="181" width="13.3063%" height="15" fill="rgb(217,125,39)"/><text x="78.4740%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,797,206 samples, 1.95%)</title><rect x="89.5782%" y="165" width="1.9521%" height="15" fill="rgb(235,36,10)"/><text x="89.8282%" y="175.50">r..</text></g><g><title>drop_ast (841,049 samples, 0.24%)</title><rect x="91.5303%" y="181" width="0.2415%" height="15" fill="rgb(251,123,47)"/><text x="91.7803%" y="191.50"></text></g><g><title>early_lint_checks (1,389,245 samples, 0.40%)</title><rect x="91.7770%" y="181" width="0.3990%" height="15" fill="rgb(221,13,13)"/><text x="92.0270%" y="191.50"></text></g><g><title>free_global_ctxt (5,377,609 samples, 1.54%)</title><rect x="92.1759%" y="181" width="1.5444%" height="15" fill="rgb(238,131,9)"/><text x="92.4259%" y="191.50"></text></g><g><title>generate_crate_metadata (4,729,582 samples, 1.36%)</title><rect x="93.7203%" y="181" width="1.3583%" height="15" fill="rgb(211,50,8)"/><text x="93.9703%" y="191.50"></text></g><g><title>hir_lowering (13,873,343 samples, 3.98%)</title><rect x="95.0786%" y="181" width="3.9842%" height="15" fill="rgb(245,182,24)"/><text x="95.3286%" y="191.50">hir_..</text></g><g><title>parse_crate (562,346 samples, 0.16%)</title><rect x="99.0845%" y="181" width="0.1615%" height="15" fill="rgb(242,14,37)"/><text x="99.3345%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,722,088 samples, 0.49%)</title><rect x="99.3129%" y="181" width="0.4946%" height="15" fill="rgb(246,228,12)"/><text x="99.5629%" y="191.50"></text></g><g><title>all (348,207,596 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (348,207,596 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (583,206 samples, 0.17%)</title><rect x="99.8325%" y="181" width="0.1675%" height="15" fill="rgb(230,59,30)"/><text x="100.0825%" y="191.50"></text></g></svg></svg>