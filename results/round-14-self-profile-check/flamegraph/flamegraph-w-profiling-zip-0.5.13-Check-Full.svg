<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (993,151 samples, 0.23%)</title><rect x="14.2401%" y="133" width="0.2312%" height="15" fill="rgb(227,0,7)"/><text x="14.4901%" y="143.50"></text></g><g><title>item_attrs (911,235 samples, 0.21%)</title><rect x="14.9874%" y="101" width="0.2122%" height="15" fill="rgb(217,0,24)"/><text x="15.2374%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (878,665 samples, 0.20%)</title><rect x="14.9950%" y="85" width="0.2046%" height="15" fill="rgb(221,193,54)"/><text x="15.2450%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,253,248 samples, 0.29%)</title><rect x="14.9204%" y="117" width="0.2918%" height="15" fill="rgb(248,212,6)"/><text x="15.1704%" y="127.50"></text></g><g><title>is_copy_raw (480,632 samples, 0.11%)</title><rect x="18.4135%" y="101" width="0.1119%" height="15" fill="rgb(208,68,35)"/><text x="18.6635%" y="111.50"></text></g><g><title>adt_drop_tys (827,709 samples, 0.19%)</title><rect x="18.6807%" y="85" width="0.1927%" height="15" fill="rgb(232,128,0)"/><text x="18.9307%" y="95.50"></text></g><g><title>is_copy_raw (4,181,739 samples, 0.97%)</title><rect x="18.8738%" y="85" width="0.9737%" height="15" fill="rgb(207,160,47)"/><text x="19.1238%" y="95.50"></text></g><g><title>evaluate_obligation (3,483,621 samples, 0.81%)</title><rect x="19.0364%" y="69" width="0.8111%" height="15" fill="rgb(228,23,34)"/><text x="19.2864%" y="79.50"></text></g><g><title>needs_drop_raw (5,681,416 samples, 1.32%)</title><rect x="18.5283%" y="101" width="1.3229%" height="15" fill="rgb(218,30,26)"/><text x="18.7783%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (893,470 samples, 0.21%)</title><rect x="19.9988%" y="85" width="0.2080%" height="15" fill="rgb(220,122,19)"/><text x="20.2488%" y="95.50"></text></g><g><title>impl_parent (768,039 samples, 0.18%)</title><rect x="20.6431%" y="69" width="0.1788%" height="15" fill="rgb(250,228,42)"/><text x="20.8931%" y="79.50"></text></g><g><title>specialization_graph_of (3,936,533 samples, 0.92%)</title><rect x="20.2481%" y="85" width="0.9166%" height="15" fill="rgb(240,193,28)"/><text x="20.4981%" y="95.50"></text></g><g><title>impl_trait_ref (1,472,071 samples, 0.34%)</title><rect x="20.8219%" y="69" width="0.3428%" height="15" fill="rgb(216,20,37)"/><text x="21.0719%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,147,468 samples, 0.27%)</title><rect x="20.8975%" y="53" width="0.2672%" height="15" fill="rgb(206,188,39)"/><text x="21.1475%" y="63.50"></text></g><g><title>resolve_instance (5,859,044 samples, 1.36%)</title><rect x="19.8511%" y="101" width="1.3642%" height="15" fill="rgb(217,207,13)"/><text x="20.1011%" y="111.50"></text></g><g><title>thir_body (5,550,344 samples, 1.29%)</title><rect x="21.2341%" y="101" width="1.2924%" height="15" fill="rgb(231,73,38)"/><text x="21.4841%" y="111.50"></text></g><g><title>mir_const (39,183,201 samples, 9.12%)</title><rect x="13.4160%" y="149" width="9.1235%" height="15" fill="rgb(225,20,46)"/><text x="13.6660%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (34,650,666 samples, 8.07%)</title><rect x="14.4714%" y="133" width="8.0682%" height="15" fill="rgb(210,31,41)"/><text x="14.7214%" y="143.50">unsafety_ch..</text></g><g><title>mir_built (31,468,789 samples, 7.33%)</title><rect x="15.2122%" y="117" width="7.3273%" height="15" fill="rgb(221,200,47)"/><text x="15.4622%" y="127.50">mir_built</text></g><g><title>mir_const (972,430 samples, 0.23%)</title><rect x="22.6441%" y="133" width="0.2264%" height="15" fill="rgb(226,26,5)"/><text x="22.8941%" y="143.50"></text></g><g><title>unsafety_check_result (789,159 samples, 0.18%)</title><rect x="22.6868%" y="117" width="0.1837%" height="15" fill="rgb(249,33,26)"/><text x="22.9368%" y="127.50"></text></g><g><title>mir_built (718,599 samples, 0.17%)</title><rect x="22.7032%" y="101" width="0.1673%" height="15" fill="rgb(235,183,28)"/><text x="22.9532%" y="111.50"></text></g><g><title>mir_const_qualif (1,424,457 samples, 0.33%)</title><rect x="22.5395%" y="149" width="0.3317%" height="15" fill="rgb(221,5,38)"/><text x="22.7895%" y="159.50"></text></g><g><title>mir_promoted (44,131,753 samples, 10.28%)</title><rect x="12.5955%" y="165" width="10.2758%" height="15" fill="rgb(247,18,42)"/><text x="12.8455%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,236,391 samples, 0.52%)</title><rect x="22.8727%" y="165" width="0.5207%" height="15" fill="rgb(241,131,45)"/><text x="23.1227%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (2,288,000 samples, 0.53%)</title><rect x="23.3935%" y="165" width="0.5327%" height="15" fill="rgb(249,31,29)"/><text x="23.6435%" y="175.50"></text></g><g><title>normalize_projection_ty (1,560,115 samples, 0.36%)</title><rect x="23.5629%" y="149" width="0.3633%" height="15" fill="rgb(225,111,53)"/><text x="23.8129%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,412,673 samples, 0.33%)</title><rect x="23.9262%" y="165" width="0.3289%" height="15" fill="rgb(238,160,17)"/><text x="24.1762%" y="175.50"></text></g><g><title>normalize_projection_ty (918,168 samples, 0.21%)</title><rect x="24.0413%" y="149" width="0.2138%" height="15" fill="rgb(214,148,48)"/><text x="24.2913%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,615,642 samples, 1.77%)</title><rect x="24.2701%" y="165" width="1.7732%" height="15" fill="rgb(232,36,49)"/><text x="24.5201%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (109,996,308 samples, 25.61%)</title><rect x="0.4368%" y="197" width="25.6118%" height="15" fill="rgb(209,103,24)"/><text x="0.6868%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (109,592,225 samples, 25.52%)</title><rect x="0.5309%" y="181" width="25.5177%" height="15" fill="rgb(229,88,8)"/><text x="0.7809%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (572,977 samples, 0.13%)</title><rect x="26.0487%" y="197" width="0.1334%" height="15" fill="rgb(213,181,19)"/><text x="26.2987%" y="207.50"></text></g><g><title>hir_module_items (570,355 samples, 0.13%)</title><rect x="26.1821%" y="197" width="0.1328%" height="15" fill="rgb(254,191,54)"/><text x="26.4321%" y="207.50"></text></g><g><title>codegen_fn_attrs (625,278 samples, 0.15%)</title><rect x="26.5511%" y="165" width="0.1456%" height="15" fill="rgb(241,83,37)"/><text x="26.8011%" y="175.50"></text></g><g><title>should_inherit_track_caller (519,356 samples, 0.12%)</title><rect x="26.5757%" y="149" width="0.1209%" height="15" fill="rgb(233,36,39)"/><text x="26.8257%" y="159.50"></text></g><g><title>check_mod_attrs (1,603,637 samples, 0.37%)</title><rect x="26.3233%" y="181" width="0.3734%" height="15" fill="rgb(226,3,54)"/><text x="26.5733%" y="191.50"></text></g><g><title>lint_levels (1,038,672 samples, 0.24%)</title><rect x="26.9574%" y="165" width="0.2418%" height="15" fill="rgb(245,192,40)"/><text x="27.2074%" y="175.50"></text></g><g><title>lookup_deprecation_entry (435,955 samples, 0.10%)</title><rect x="27.1992%" y="165" width="0.1015%" height="15" fill="rgb(238,167,29)"/><text x="27.4492%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (2,134,283 samples, 0.50%)</title><rect x="26.8425%" y="181" width="0.4970%" height="15" fill="rgb(232,182,51)"/><text x="27.0925%" y="191.50"></text></g><g><title>misc_checking_1 (4,501,541 samples, 1.05%)</title><rect x="26.3150%" y="197" width="1.0482%" height="15" fill="rgb(231,60,39)"/><text x="26.5650%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (2,261,255 samples, 0.53%)</title><rect x="27.3637%" y="181" width="0.5265%" height="15" fill="rgb(208,69,12)"/><text x="27.6137%" y="191.50"></text></g><g><title>check_mod_liveness (1,867,381 samples, 0.43%)</title><rect x="27.4554%" y="165" width="0.4348%" height="15" fill="rgb(235,93,37)"/><text x="27.7054%" y="175.50"></text></g><g><title>misc_checking_2 (6,202,840 samples, 1.44%)</title><rect x="27.3632%" y="197" width="1.4443%" height="15" fill="rgb(213,116,39)"/><text x="27.6132%" y="207.50"></text></g><g><title>match_checking (3,939,385 samples, 0.92%)</title><rect x="27.8902%" y="181" width="0.9173%" height="15" fill="rgb(222,207,29)"/><text x="28.1402%" y="191.50"></text></g><g><title>check_match (3,826,114 samples, 0.89%)</title><rect x="27.9166%" y="165" width="0.8909%" height="15" fill="rgb(206,96,30)"/><text x="28.1666%" y="175.50"></text></g><g><title>check_private_in_public (624,127 samples, 0.15%)</title><rect x="28.8103%" y="181" width="0.1453%" height="15" fill="rgb(218,138,4)"/><text x="29.0603%" y="191.50"></text></g><g><title>death_checking (1,300,565 samples, 0.30%)</title><rect x="28.9556%" y="181" width="0.3028%" height="15" fill="rgb(250,191,14)"/><text x="29.2056%" y="191.50"></text></g><g><title>param_env (518,765 samples, 0.12%)</title><rect x="29.8128%" y="149" width="0.1208%" height="15" fill="rgb(239,60,40)"/><text x="30.0628%" y="159.50"></text></g><g><title>crate_lints (4,296,188 samples, 1.00%)</title><rect x="29.2589%" y="165" width="1.0003%" height="15" fill="rgb(206,27,48)"/><text x="29.5089%" y="175.50"></text></g><g><title>type_of (1,221,165 samples, 0.28%)</title><rect x="29.9749%" y="149" width="0.2843%" height="15" fill="rgb(225,35,8)"/><text x="30.2249%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (973,532 samples, 0.23%)</title><rect x="30.0325%" y="133" width="0.2267%" height="15" fill="rgb(250,213,24)"/><text x="30.2825%" y="143.50"></text></g><g><title>lint_checking (6,809,706 samples, 1.59%)</title><rect x="29.2584%" y="181" width="1.5856%" height="15" fill="rgb(247,123,22)"/><text x="29.5084%" y="191.50"></text></g><g><title>module_lints (2,511,568 samples, 0.58%)</title><rect x="30.2592%" y="165" width="0.5848%" height="15" fill="rgb(231,138,38)"/><text x="30.5092%" y="175.50"></text></g><g><title>lint_mod (2,497,368 samples, 0.58%)</title><rect x="30.2625%" y="149" width="0.5815%" height="15" fill="rgb(231,145,46)"/><text x="30.5125%" y="159.50"></text></g><g><title>privacy_access_levels (812,399 samples, 0.19%)</title><rect x="30.8440%" y="181" width="0.1892%" height="15" fill="rgb(251,118,11)"/><text x="31.0940%" y="191.50"></text></g><g><title>privacy_checking_modules (3,846,403 samples, 0.90%)</title><rect x="31.0332%" y="181" width="0.8956%" height="15" fill="rgb(217,147,25)"/><text x="31.2832%" y="191.50"></text></g><g><title>check_mod_privacy (3,836,333 samples, 0.89%)</title><rect x="31.0355%" y="165" width="0.8933%" height="15" fill="rgb(247,81,37)"/><text x="31.2855%" y="175.50"></text></g><g><title>misc_checking_3 (13,438,021 samples, 3.13%)</title><rect x="28.8074%" y="197" width="3.1289%" height="15" fill="rgb(209,12,38)"/><text x="29.0574%" y="207.50">mis..</text></g><g><title>impl_parent (3,127,830 samples, 0.73%)</title><rect x="33.2570%" y="133" width="0.7283%" height="15" fill="rgb(227,1,9)"/><text x="33.5070%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,686,875 samples, 0.39%)</title><rect x="33.5925%" y="117" width="0.3928%" height="15" fill="rgb(248,47,43)"/><text x="33.8425%" y="127.50"></text></g><g><title>impl_trait_ref (6,281,290 samples, 1.46%)</title><rect x="33.9853%" y="133" width="1.4626%" height="15" fill="rgb(221,10,30)"/><text x="34.2353%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,070,364 samples, 1.18%)</title><rect x="34.2672%" y="117" width="1.1806%" height="15" fill="rgb(210,229,1)"/><text x="34.5172%" y="127.50"></text></g><g><title>trait_impls_of (1,026,084 samples, 0.24%)</title><rect x="35.4553%" y="133" width="0.2389%" height="15" fill="rgb(222,148,37)"/><text x="35.7053%" y="143.50"></text></g><g><title>coherent_trait (15,916,639 samples, 3.71%)</title><rect x="31.9884%" y="165" width="3.7061%" height="15" fill="rgb(234,67,33)"/><text x="32.2384%" y="175.50">cohe..</text></g><g><title>specialization_graph_of (15,359,394 samples, 3.58%)</title><rect x="32.1181%" y="149" width="3.5763%" height="15" fill="rgb(247,98,35)"/><text x="32.3681%" y="159.50">spec..</text></g><g><title>coherence_checking (16,053,570 samples, 3.74%)</title><rect x="31.9809%" y="181" width="3.7380%" height="15" fill="rgb(247,138,52)"/><text x="32.2309%" y="191.50">cohe..</text></g><g><title>associated_item (686,586 samples, 0.16%)</title><rect x="60.7699%" y="117" width="0.1599%" height="15" fill="rgb(213,79,30)"/><text x="61.0199%" y="127.50"></text></g><g><title>associated_items (960,639 samples, 0.22%)</title><rect x="60.7172%" y="133" width="0.2237%" height="15" fill="rgb(246,177,23)"/><text x="60.9672%" y="143.50"></text></g><g><title>adt_dtorck_constraint (872,239 samples, 0.20%)</title><rect x="61.2499%" y="117" width="0.2031%" height="15" fill="rgb(230,62,27)"/><text x="61.4999%" y="127.50"></text></g><g><title>dropck_outlives (2,088,173 samples, 0.49%)</title><rect x="60.9871%" y="133" width="0.4862%" height="15" fill="rgb(216,154,8)"/><text x="61.2371%" y="143.50"></text></g><g><title>eval_to_const_value_raw (446,495 samples, 0.10%)</title><rect x="61.4737%" y="133" width="0.1040%" height="15" fill="rgb(244,35,45)"/><text x="61.7237%" y="143.50"></text></g><g><title>eval_to_allocation_raw (440,165 samples, 0.10%)</title><rect x="61.4752%" y="117" width="0.1025%" height="15" fill="rgb(251,115,12)"/><text x="61.7252%" y="127.50"></text></g><g><title>generics_of (2,274,201 samples, 0.53%)</title><rect x="65.1442%" y="117" width="0.5295%" height="15" fill="rgb(240,54,50)"/><text x="65.3942%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,332,561 samples, 0.31%)</title><rect x="65.3635%" y="101" width="0.3103%" height="15" fill="rgb(233,84,52)"/><text x="65.6135%" y="111.50"></text></g><g><title>impl_trait_ref (1,632,607 samples, 0.38%)</title><rect x="65.7471%" y="117" width="0.3801%" height="15" fill="rgb(207,117,47)"/><text x="65.9971%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,289,687 samples, 0.30%)</title><rect x="65.8270%" y="101" width="0.3003%" height="15" fill="rgb(249,43,39)"/><text x="66.0770%" y="111.50"></text></g><g><title>predicates_of (1,566,196 samples, 0.36%)</title><rect x="66.1492%" y="117" width="0.3647%" height="15" fill="rgb(209,38,44)"/><text x="66.3992%" y="127.50"></text></g><g><title>predicates_defined_on (904,798 samples, 0.21%)</title><rect x="66.3032%" y="101" width="0.2107%" height="15" fill="rgb(236,212,23)"/><text x="66.5532%" y="111.50"></text></g><g><title>specializes (3,282,288 samples, 0.76%)</title><rect x="66.5138%" y="117" width="0.7643%" height="15" fill="rgb(242,79,21)"/><text x="66.7638%" y="127.50"></text></g><g><title>param_env (1,972,735 samples, 0.46%)</title><rect x="66.8188%" y="101" width="0.4593%" height="15" fill="rgb(211,96,35)"/><text x="67.0688%" y="111.50"></text></g><g><title>def_span (874,185 samples, 0.20%)</title><rect x="67.0746%" y="85" width="0.2035%" height="15" fill="rgb(253,215,40)"/><text x="67.3246%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (771,974 samples, 0.18%)</title><rect x="67.0984%" y="69" width="0.1797%" height="15" fill="rgb(211,81,21)"/><text x="67.3484%" y="79.50"></text></g><g><title>trait_impls_of (1,127,933 samples, 0.26%)</title><rect x="67.2855%" y="117" width="0.2626%" height="15" fill="rgb(208,190,38)"/><text x="67.5355%" y="127.50"></text></g><g><title>implementations_of_trait (498,736 samples, 0.12%)</title><rect x="67.4320%" y="101" width="0.1161%" height="15" fill="rgb(235,213,38)"/><text x="67.6820%" y="111.50"></text></g><g><title>evaluate_obligation (25,677,126 samples, 5.98%)</title><rect x="61.5777%" y="133" width="5.9787%" height="15" fill="rgb(237,122,38)"/><text x="61.8277%" y="143.50">evaluate..</text></g><g><title>fn_sig (429,637 samples, 0.10%)</title><rect x="67.5734%" y="133" width="0.1000%" height="15" fill="rgb(244,218,35)"/><text x="67.8234%" y="143.50"></text></g><g><title>generics_of (1,460,007 samples, 0.34%)</title><rect x="67.6734%" y="133" width="0.3400%" height="15" fill="rgb(240,68,47)"/><text x="67.9234%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (1,093,251 samples, 0.25%)</title><rect x="67.7588%" y="117" width="0.2546%" height="15" fill="rgb(210,16,53)"/><text x="68.0088%" y="127.50"></text></g><g><title>evaluate_obligation (730,566 samples, 0.17%)</title><rect x="68.4531%" y="117" width="0.1701%" height="15" fill="rgb(235,124,12)"/><text x="68.7031%" y="127.50"></text></g><g><title>method_autoderef_steps (1,551,067 samples, 0.36%)</title><rect x="68.2662%" y="133" width="0.3612%" height="15" fill="rgb(224,169,11)"/><text x="68.5162%" y="143.50"></text></g><g><title>predicates_of (832,949 samples, 0.19%)</title><rect x="68.6917%" y="133" width="0.1939%" height="15" fill="rgb(250,166,2)"/><text x="68.9417%" y="143.50"></text></g><g><title>predicates_defined_on (567,317 samples, 0.13%)</title><rect x="68.7535%" y="117" width="0.1321%" height="15" fill="rgb(242,216,29)"/><text x="69.0035%" y="127.50"></text></g><g><title>associated_items (578,676 samples, 0.13%)</title><rect x="72.6545%" y="117" width="0.1347%" height="15" fill="rgb(230,116,27)"/><text x="72.9045%" y="127.50"></text></g><g><title>dropck_outlives (440,325 samples, 0.10%)</title><rect x="72.8059%" y="117" width="0.1025%" height="15" fill="rgb(228,99,48)"/><text x="73.0559%" y="127.50"></text></g><g><title>evaluate_obligation (2,993,113 samples, 0.70%)</title><rect x="72.9085%" y="117" width="0.6969%" height="15" fill="rgb(253,11,6)"/><text x="73.1585%" y="127.50"></text></g><g><title>method_autoderef_steps (549,558 samples, 0.13%)</title><rect x="73.8155%" y="117" width="0.1280%" height="15" fill="rgb(247,143,39)"/><text x="74.0655%" y="127.50"></text></g><g><title>typeck (21,740,776 samples, 5.06%)</title><rect x="69.0189%" y="133" width="5.0622%" height="15" fill="rgb(236,97,10)"/><text x="69.2689%" y="143.50">typeck</text></g><g><title>item_bodies_checking (164,817,515 samples, 38.38%)</title><rect x="35.7392%" y="181" width="38.3765%" height="15" fill="rgb(233,208,19)"/><text x="35.9892%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (164,813,815 samples, 38.38%)</title><rect x="35.7400%" y="165" width="38.3757%" height="15" fill="rgb(216,164,2)"/><text x="35.9900%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (164,543,912 samples, 38.31%)</title><rect x="35.8029%" y="149" width="38.3128%" height="15" fill="rgb(220,129,5)"/><text x="36.0529%" y="159.50">typeck</text></g><g><title>specialization_graph_of (747,248 samples, 0.17%)</title><rect x="74.7496%" y="37" width="0.1740%" height="15" fill="rgb(242,17,10)"/><text x="74.9996%" y="47.50"></text></g><g><title>resolve_instance (793,499 samples, 0.18%)</title><rect x="74.7400%" y="53" width="0.1848%" height="15" fill="rgb(242,107,0)"/><text x="74.9900%" y="63.50"></text></g><g><title>mir_built (2,748,881 samples, 0.64%)</title><rect x="74.6768%" y="69" width="0.6401%" height="15" fill="rgb(251,28,31)"/><text x="74.9268%" y="79.50"></text></g><g><title>typeck (1,655,619 samples, 0.39%)</title><rect x="74.9314%" y="53" width="0.3855%" height="15" fill="rgb(233,223,10)"/><text x="75.1814%" y="63.50"></text></g><g><title>mir_const (2,935,763 samples, 0.68%)</title><rect x="74.6483%" y="101" width="0.6836%" height="15" fill="rgb(215,21,27)"/><text x="74.8983%" y="111.50"></text></g><g><title>unsafety_check_result (2,853,183 samples, 0.66%)</title><rect x="74.6675%" y="85" width="0.6643%" height="15" fill="rgb(232,23,21)"/><text x="74.9175%" y="95.50"></text></g><g><title>mir_promoted (2,955,734 samples, 0.69%)</title><rect x="74.6440%" y="117" width="0.6882%" height="15" fill="rgb(244,5,23)"/><text x="74.8940%" y="127.50"></text></g><g><title>type_of (3,919,684 samples, 0.91%)</title><rect x="74.4675%" y="149" width="0.9127%" height="15" fill="rgb(226,81,46)"/><text x="74.7175%" y="159.50"></text></g><g><title>mir_borrowck (3,841,854 samples, 0.89%)</title><rect x="74.4856%" y="133" width="0.8945%" height="15" fill="rgb(247,70,30)"/><text x="74.7356%" y="143.50"></text></g><g><title>item_types_checking (6,003,928 samples, 1.40%)</title><rect x="74.1157%" y="181" width="1.3980%" height="15" fill="rgb(212,68,19)"/><text x="74.3657%" y="191.50"></text></g><g><title>check_mod_item_types (5,991,368 samples, 1.40%)</title><rect x="74.1186%" y="165" width="1.3950%" height="15" fill="rgb(240,187,13)"/><text x="74.3686%" y="175.50"></text></g><g><title>typeck (573,456 samples, 0.13%)</title><rect x="75.3802%" y="149" width="0.1335%" height="15" fill="rgb(223,113,26)"/><text x="75.6302%" y="159.50"></text></g><g><title>mir_for_ctfe (564,286 samples, 0.13%)</title><rect x="75.8076%" y="101" width="0.1314%" height="15" fill="rgb(206,192,2)"/><text x="76.0576%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (517,296 samples, 0.12%)</title><rect x="75.8186%" y="85" width="0.1204%" height="15" fill="rgb(241,108,4)"/><text x="76.0686%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,286,565 samples, 0.30%)</title><rect x="75.7055%" y="149" width="0.2996%" height="15" fill="rgb(247,173,49)"/><text x="75.9555%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,275,395 samples, 0.30%)</title><rect x="75.7081%" y="133" width="0.2970%" height="15" fill="rgb(224,114,35)"/><text x="75.9581%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,267,935 samples, 0.30%)</title><rect x="75.7099%" y="117" width="0.2952%" height="15" fill="rgb(245,159,27)"/><text x="75.9599%" y="127.50"></text></g><g><title>fn_sig (778,728 samples, 0.18%)</title><rect x="76.0051%" y="149" width="0.1813%" height="15" fill="rgb(245,172,44)"/><text x="76.2551%" y="159.50"></text></g><g><title>generics_of (940,121 samples, 0.22%)</title><rect x="76.1864%" y="149" width="0.2189%" height="15" fill="rgb(236,23,11)"/><text x="76.4364%" y="159.50"></text></g><g><title>late_bound_vars_map (437,096 samples, 0.10%)</title><rect x="76.6056%" y="101" width="0.1018%" height="15" fill="rgb(205,117,38)"/><text x="76.8556%" y="111.50"></text></g><g><title>explicit_predicates_of (761,439 samples, 0.18%)</title><rect x="76.5380%" y="117" width="0.1773%" height="15" fill="rgb(237,72,25)"/><text x="76.7880%" y="127.50"></text></g><g><title>predicates_of (2,040,002 samples, 0.47%)</title><rect x="76.4477%" y="149" width="0.4750%" height="15" fill="rgb(244,70,9)"/><text x="76.6977%" y="159.50"></text></g><g><title>predicates_defined_on (1,895,971 samples, 0.44%)</title><rect x="76.4813%" y="133" width="0.4415%" height="15" fill="rgb(217,125,39)"/><text x="76.7313%" y="143.50"></text></g><g><title>inferred_outlives_of (891,080 samples, 0.21%)</title><rect x="76.7153%" y="117" width="0.2075%" height="15" fill="rgb(235,36,10)"/><text x="76.9653%" y="127.50"></text></g><g><title>inferred_outlives_crate (838,340 samples, 0.20%)</title><rect x="76.7275%" y="101" width="0.1952%" height="15" fill="rgb(251,123,47)"/><text x="76.9775%" y="111.50"></text></g><g><title>type_of (496,096 samples, 0.12%)</title><rect x="76.8072%" y="85" width="0.1155%" height="15" fill="rgb(221,13,13)"/><text x="77.0572%" y="95.50"></text></g><g><title>type_collecting (6,276,531 samples, 1.46%)</title><rect x="75.5150%" y="181" width="1.4614%" height="15" fill="rgb(238,131,9)"/><text x="75.7650%" y="191.50"></text></g><g><title>collect_mod_item_types (6,251,211 samples, 1.46%)</title><rect x="75.5209%" y="165" width="1.4555%" height="15" fill="rgb(211,50,8)"/><text x="75.7709%" y="175.50"></text></g><g><title>evaluate_obligation (942,383 samples, 0.22%)</title><rect x="78.2234%" y="149" width="0.2194%" height="15" fill="rgb(245,182,24)"/><text x="78.4734%" y="159.50"></text></g><g><title>implied_outlives_bounds (551,915 samples, 0.13%)</title><rect x="78.4450%" y="149" width="0.1285%" height="15" fill="rgb(242,14,37)"/><text x="78.6950%" y="159.50"></text></g><g><title>object_safety_violations (561,506 samples, 0.13%)</title><rect x="78.5735%" y="149" width="0.1307%" height="15" fill="rgb(246,228,12)"/><text x="78.8235%" y="159.50"></text></g><g><title>param_env (729,339 samples, 0.17%)</title><rect x="78.7042%" y="149" width="0.1698%" height="15" fill="rgb(213,55,15)"/><text x="78.9542%" y="159.50"></text></g><g><title>region_scope_tree (1,345,607 samples, 0.31%)</title><rect x="78.8835%" y="149" width="0.3133%" height="15" fill="rgb(209,9,3)"/><text x="79.1335%" y="159.50"></text></g><g><title>check_impl_item_well_formed (9,023,047 samples, 2.10%)</title><rect x="77.1055%" y="165" width="2.1010%" height="15" fill="rgb(230,59,30)"/><text x="77.3555%" y="175.50">c..</text></g><g><title>evaluate_obligation (824,670 samples, 0.19%)</title><rect x="79.8226%" y="149" width="0.1920%" height="15" fill="rgb(209,121,21)"/><text x="80.0726%" y="159.50"></text></g><g><title>param_env (493,627 samples, 0.11%)</title><rect x="80.1528%" y="149" width="0.1149%" height="15" fill="rgb(220,109,13)"/><text x="80.4028%" y="159.50"></text></g><g><title>region_scope_tree (613,313 samples, 0.14%)</title><rect x="80.2847%" y="149" width="0.1428%" height="15" fill="rgb(232,18,1)"/><text x="80.5347%" y="159.50"></text></g><g><title>check_item_well_formed (5,463,500 samples, 1.27%)</title><rect x="79.2065%" y="165" width="1.2721%" height="15" fill="rgb(215,41,42)"/><text x="79.4565%" y="175.50"></text></g><g><title>analysis (344,808,522 samples, 80.29%)</title><rect x="0.2125%" y="213" width="80.2861%" height="15" fill="rgb(224,123,36)"/><text x="0.4625%" y="223.50">analysis</text></g><g><title>type_check_crate (208,562,588 samples, 48.56%)</title><rect x="31.9364%" y="197" width="48.5623%" height="15" fill="rgb(240,125,3)"/><text x="32.1864%" y="207.50">type_check_crate</text></g><g><title>wf_checking (15,110,720 samples, 3.52%)</title><rect x="76.9802%" y="181" width="3.5184%" height="15" fill="rgb(205,98,50)"/><text x="77.2302%" y="191.50">wf_..</text></g><g><title>codegen_crate (455,506 samples, 0.11%)</title><rect x="80.5012%" y="213" width="0.1061%" height="15" fill="rgb(205,185,37)"/><text x="80.7512%" y="223.50"></text></g><g><title>AST_validation (465,475 samples, 0.11%)</title><rect x="80.6595%" y="197" width="0.1084%" height="15" fill="rgb(238,207,15)"/><text x="80.9095%" y="207.50"></text></g><g><title>metadata_register_crate (4,689,933 samples, 1.09%)</title><rect x="91.3371%" y="165" width="1.0920%" height="15" fill="rgb(213,199,42)"/><text x="91.5871%" y="175.50"></text></g><g><title>metadata_register_crate (3,380,501 samples, 0.79%)</title><rect x="91.6420%" y="149" width="0.7871%" height="15" fill="rgb(235,201,11)"/><text x="91.8920%" y="159.50"></text></g><g><title>macro_expand_crate (51,350,489 samples, 11.96%)</title><rect x="80.8351%" y="197" width="11.9566%" height="15" fill="rgb(207,46,11)"/><text x="81.0851%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (51,336,288 samples, 11.95%)</title><rect x="80.8384%" y="181" width="11.9533%" height="15" fill="rgb(241,35,35)"/><text x="81.0884%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,557,056 samples, 0.36%)</title><rect x="92.4291%" y="165" width="0.3625%" height="15" fill="rgb(243,32,47)"/><text x="92.6791%" y="175.50"></text></g><g><title>late_resolve_crate (5,436,861 samples, 1.27%)</title><rect x="92.8996%" y="181" width="1.2659%" height="15" fill="rgb(247,202,23)"/><text x="93.1496%" y="191.50"></text></g><g><title>configure_and_expand (58,570,479 samples, 13.64%)</title><rect x="80.6073%" y="213" width="13.6377%" height="15" fill="rgb(219,102,11)"/><text x="80.8573%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (6,123,529 samples, 1.43%)</title><rect x="92.8191%" y="197" width="1.4258%" height="15" fill="rgb(243,110,44)"/><text x="93.0691%" y="207.50"></text></g><g><title>drop_ast (609,286 samples, 0.14%)</title><rect x="94.2450%" y="213" width="0.1419%" height="15" fill="rgb(222,74,54)"/><text x="94.4950%" y="223.50"></text></g><g><title>early_lint_checks (1,314,055 samples, 0.31%)</title><rect x="94.3923%" y="213" width="0.3060%" height="15" fill="rgb(216,99,12)"/><text x="94.6423%" y="223.50"></text></g><g><title>free_global_ctxt (6,407,102 samples, 1.49%)</title><rect x="94.6983%" y="213" width="1.4918%" height="15" fill="rgb(226,22,26)"/><text x="94.9483%" y="223.50"></text></g><g><title>mir_for_ctfe (433,403 samples, 0.10%)</title><rect x="96.8188%" y="197" width="0.1009%" height="15" fill="rgb(217,163,10)"/><text x="97.0688%" y="207.50"></text></g><g><title>generate_crate_metadata (3,299,507 samples, 0.77%)</title><rect x="96.1901%" y="213" width="0.7683%" height="15" fill="rgb(213,25,53)"/><text x="96.4401%" y="223.50"></text></g><g><title>hir_lowering (10,225,376 samples, 2.38%)</title><rect x="96.9584%" y="213" width="2.3809%" height="15" fill="rgb(252,105,26)"/><text x="97.2084%" y="223.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,787,310 samples, 0.42%)</title><rect x="99.4617%" y="213" width="0.4162%" height="15" fill="rgb(220,39,43)"/><text x="99.7117%" y="223.50"></text></g><g><title>all (429,474,575 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (429,474,575 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>