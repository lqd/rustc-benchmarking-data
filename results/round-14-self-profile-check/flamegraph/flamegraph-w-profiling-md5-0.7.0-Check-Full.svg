<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (480,976 samples, 0.37%)</title><rect x="12.9470%" y="85" width="0.3701%" height="15" fill="rgb(227,0,7)"/><text x="13.1970%" y="95.50"></text></g><g><title>is_copy_raw (381,505 samples, 0.29%)</title><rect x="13.0236%" y="69" width="0.2936%" height="15" fill="rgb(217,0,24)"/><text x="13.2736%" y="79.50"></text></g><g><title>evaluate_obligation (338,654 samples, 0.26%)</title><rect x="13.0565%" y="53" width="0.2606%" height="15" fill="rgb(221,193,54)"/><text x="13.3065%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (271,694 samples, 0.21%)</title><rect x="13.4170%" y="69" width="0.2091%" height="15" fill="rgb(248,212,6)"/><text x="13.6670%" y="79.50"></text></g><g><title>impl_parent (190,104 samples, 0.15%)</title><rect x="13.8833%" y="53" width="0.1463%" height="15" fill="rgb(208,68,35)"/><text x="14.1333%" y="63.50"></text></g><g><title>specialization_graph_of (993,781 samples, 0.76%)</title><rect x="13.6598%" y="69" width="0.7647%" height="15" fill="rgb(232,128,0)"/><text x="13.9098%" y="79.50"></text></g><g><title>impl_trait_ref (513,282 samples, 0.39%)</title><rect x="14.0296%" y="53" width="0.3950%" height="15" fill="rgb(207,160,47)"/><text x="14.2796%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (450,922 samples, 0.35%)</title><rect x="14.0775%" y="37" width="0.3470%" height="15" fill="rgb(228,23,34)"/><text x="14.3275%" y="47.50"></text></g><g><title>resolve_instance (1,494,107 samples, 1.15%)</title><rect x="13.3171%" y="85" width="1.1497%" height="15" fill="rgb(218,30,26)"/><text x="13.5671%" y="95.50"></text></g><g><title>thir_body (1,459,211 samples, 1.12%)</title><rect x="14.4724%" y="85" width="1.1229%" height="15" fill="rgb(220,122,19)"/><text x="14.7224%" y="95.50"></text></g><g><title>mir_const (7,839,752 samples, 6.03%)</title><rect x="9.5661%" y="133" width="6.0326%" height="15" fill="rgb(250,228,42)"/><text x="9.8161%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,221,625 samples, 5.56%)</title><rect x="10.0418%" y="117" width="5.5570%" height="15" fill="rgb(240,193,28)"/><text x="10.2918%" y="127.50">unsafet..</text></g><g><title>mir_built (6,768,499 samples, 5.21%)</title><rect x="10.3905%" y="101" width="5.2083%" height="15" fill="rgb(216,20,37)"/><text x="10.6405%" y="111.50">mir_bu..</text></g><g><title>mir_const_qualif (806,718 samples, 0.62%)</title><rect x="15.5988%" y="133" width="0.6208%" height="15" fill="rgb(206,188,39)"/><text x="15.8488%" y="143.50"></text></g><g><title>mir_const (652,755 samples, 0.50%)</title><rect x="15.7172%" y="117" width="0.5023%" height="15" fill="rgb(217,207,13)"/><text x="15.9672%" y="127.50"></text></g><g><title>unsafety_check_result (467,944 samples, 0.36%)</title><rect x="15.8595%" y="101" width="0.3601%" height="15" fill="rgb(231,73,38)"/><text x="16.1095%" y="111.50"></text></g><g><title>mir_built (381,573 samples, 0.29%)</title><rect x="15.9259%" y="85" width="0.2936%" height="15" fill="rgb(225,20,46)"/><text x="16.1759%" y="95.50"></text></g><g><title>mir_promoted (9,386,626 samples, 7.22%)</title><rect x="8.9967%" y="149" width="7.2229%" height="15" fill="rgb(210,31,41)"/><text x="9.2467%" y="159.50">mir_promot..</text></g><g><title>type_op_normalize_fn_sig (270,472 samples, 0.21%)</title><rect x="16.3017%" y="149" width="0.2081%" height="15" fill="rgb(221,200,47)"/><text x="16.5517%" y="159.50"></text></g><g><title>normalize_projection_ty (179,822 samples, 0.14%)</title><rect x="16.3714%" y="133" width="0.1384%" height="15" fill="rgb(226,26,5)"/><text x="16.6214%" y="143.50"></text></g><g><title>type_op_prove_predicate (645,651 samples, 0.50%)</title><rect x="16.5635%" y="149" width="0.4968%" height="15" fill="rgb(249,33,26)"/><text x="16.8135%" y="159.50"></text></g><g><title>MIR_borrow_checking (21,046,144 samples, 16.19%)</title><rect x="0.8683%" y="181" width="16.1948%" height="15" fill="rgb(235,183,28)"/><text x="1.1183%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,968,343 samples, 16.13%)</title><rect x="0.9282%" y="165" width="16.1350%" height="15" fill="rgb(221,5,38)"/><text x="1.1782%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (393,504 samples, 0.30%)</title><rect x="17.0631%" y="181" width="0.3028%" height="15" fill="rgb(247,18,42)"/><text x="17.3131%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (329,044 samples, 0.25%)</title><rect x="17.1128%" y="165" width="0.2532%" height="15" fill="rgb(241,131,45)"/><text x="17.3628%" y="175.50"></text></g><g><title>hir_module_items (157,632 samples, 0.12%)</title><rect x="17.3659%" y="181" width="0.1213%" height="15" fill="rgb(249,31,29)"/><text x="17.6159%" y="191.50"></text></g><g><title>should_inherit_track_caller (205,883 samples, 0.16%)</title><rect x="17.7826%" y="133" width="0.1584%" height="15" fill="rgb(225,111,53)"/><text x="18.0326%" y="143.50"></text></g><g><title>codegen_fn_attrs (337,674 samples, 0.26%)</title><rect x="17.6939%" y="149" width="0.2598%" height="15" fill="rgb(238,160,17)"/><text x="17.9439%" y="159.50"></text></g><g><title>check_mod_attrs (588,267 samples, 0.45%)</title><rect x="17.5011%" y="165" width="0.4527%" height="15" fill="rgb(214,148,48)"/><text x="17.7511%" y="175.50"></text></g><g><title>lint_levels (153,212 samples, 0.12%)</title><rect x="18.1595%" y="149" width="0.1179%" height="15" fill="rgb(232,36,49)"/><text x="18.4095%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (461,905 samples, 0.36%)</title><rect x="18.0639%" y="165" width="0.3554%" height="15" fill="rgb(209,103,24)"/><text x="18.3139%" y="175.50"></text></g><g><title>misc_checking_1 (1,251,384 samples, 0.96%)</title><rect x="17.4875%" y="181" width="0.9629%" height="15" fill="rgb(229,88,8)"/><text x="17.7375%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (471,605 samples, 0.36%)</title><rect x="18.4516%" y="165" width="0.3629%" height="15" fill="rgb(213,181,19)"/><text x="18.7016%" y="175.50"></text></g><g><title>check_mod_liveness (373,114 samples, 0.29%)</title><rect x="18.5274%" y="149" width="0.2871%" height="15" fill="rgb(254,191,54)"/><text x="18.7774%" y="159.50"></text></g><g><title>misc_checking_2 (770,608 samples, 0.59%)</title><rect x="18.4505%" y="181" width="0.5930%" height="15" fill="rgb(241,83,37)"/><text x="18.7005%" y="191.50"></text></g><g><title>match_checking (297,553 samples, 0.23%)</title><rect x="18.8145%" y="165" width="0.2290%" height="15" fill="rgb(233,36,39)"/><text x="19.0645%" y="175.50"></text></g><g><title>check_match (276,523 samples, 0.21%)</title><rect x="18.8307%" y="149" width="0.2128%" height="15" fill="rgb(226,3,54)"/><text x="19.0807%" y="159.50"></text></g><g><title>death_checking (353,473 samples, 0.27%)</title><rect x="19.1417%" y="165" width="0.2720%" height="15" fill="rgb(245,192,40)"/><text x="19.3917%" y="175.50"></text></g><g><title>eval_to_const_value_raw (359,933 samples, 0.28%)</title><rect x="20.0152%" y="133" width="0.2770%" height="15" fill="rgb(238,167,29)"/><text x="20.2652%" y="143.50"></text></g><g><title>eval_to_const_value_raw (335,813 samples, 0.26%)</title><rect x="20.0338%" y="117" width="0.2584%" height="15" fill="rgb(232,182,51)"/><text x="20.2838%" y="127.50"></text></g><g><title>eval_to_allocation_raw (313,643 samples, 0.24%)</title><rect x="20.0508%" y="101" width="0.2413%" height="15" fill="rgb(231,60,39)"/><text x="20.3008%" y="111.50"></text></g><g><title>param_env (131,562 samples, 0.10%)</title><rect x="20.2922%" y="133" width="0.1012%" height="15" fill="rgb(208,69,12)"/><text x="20.5422%" y="143.50"></text></g><g><title>crate_lints (2,352,486 samples, 1.81%)</title><rect x="19.4150%" y="149" width="1.8102%" height="15" fill="rgb(235,93,37)"/><text x="19.6650%" y="159.50">c..</text></g><g><title>type_of (1,079,482 samples, 0.83%)</title><rect x="20.3946%" y="133" width="0.8307%" height="15" fill="rgb(213,116,39)"/><text x="20.6446%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (847,448 samples, 0.65%)</title><rect x="20.5731%" y="117" width="0.6521%" height="15" fill="rgb(222,207,29)"/><text x="20.8231%" y="127.50"></text></g><g><title>lint_checking (2,941,243 samples, 2.26%)</title><rect x="19.4137%" y="165" width="2.2633%" height="15" fill="rgb(206,96,30)"/><text x="19.6637%" y="175.50">l..</text></g><g><title>module_lints (587,067 samples, 0.45%)</title><rect x="21.2252%" y="149" width="0.4517%" height="15" fill="rgb(218,138,4)"/><text x="21.4752%" y="159.50"></text></g><g><title>lint_mod (584,227 samples, 0.45%)</title><rect x="21.2274%" y="133" width="0.4496%" height="15" fill="rgb(250,191,14)"/><text x="21.4774%" y="143.50"></text></g><g><title>privacy_access_levels (185,992 samples, 0.14%)</title><rect x="21.6770%" y="165" width="0.1431%" height="15" fill="rgb(239,60,40)"/><text x="21.9270%" y="175.50"></text></g><g><title>privacy_checking_modules (539,436 samples, 0.42%)</title><rect x="21.8201%" y="165" width="0.4151%" height="15" fill="rgb(206,27,48)"/><text x="22.0701%" y="175.50"></text></g><g><title>check_mod_privacy (537,166 samples, 0.41%)</title><rect x="21.8218%" y="149" width="0.4133%" height="15" fill="rgb(225,35,8)"/><text x="22.0718%" y="159.50"></text></g><g><title>misc_checking_3 (4,165,287 samples, 3.21%)</title><rect x="19.0434%" y="181" width="3.2052%" height="15" fill="rgb(250,213,24)"/><text x="19.2934%" y="191.50">mis..</text></g><g><title>impl_trait_ref (198,201 samples, 0.15%)</title><rect x="22.4265%" y="85" width="0.1525%" height="15" fill="rgb(247,123,22)"/><text x="22.6765%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (179,411 samples, 0.14%)</title><rect x="22.4410%" y="69" width="0.1381%" height="15" fill="rgb(231,138,38)"/><text x="22.6910%" y="79.50"></text></g><g><title>adt_destructor (350,024 samples, 0.27%)</title><rect x="22.3277%" y="133" width="0.2693%" height="15" fill="rgb(231,145,46)"/><text x="22.5777%" y="143.50"></text></g><g><title>coherent_trait (347,134 samples, 0.27%)</title><rect x="22.3299%" y="117" width="0.2671%" height="15" fill="rgb(251,118,11)"/><text x="22.5799%" y="127.50"></text></g><g><title>specialization_graph_of (345,574 samples, 0.27%)</title><rect x="22.3311%" y="101" width="0.2659%" height="15" fill="rgb(217,147,25)"/><text x="22.5811%" y="111.50"></text></g><g><title>is_copy_raw (133,611 samples, 0.10%)</title><rect x="22.5971%" y="133" width="0.1028%" height="15" fill="rgb(247,81,37)"/><text x="22.8471%" y="143.50"></text></g><g><title>impl_parent (2,805,056 samples, 2.16%)</title><rect x="26.0309%" y="117" width="2.1585%" height="15" fill="rgb(209,12,38)"/><text x="26.2809%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,498,503 samples, 1.15%)</title><rect x="27.0362%" y="101" width="1.1531%" height="15" fill="rgb(227,1,9)"/><text x="27.2862%" y="111.50"></text></g><g><title>impl_trait_ref (5,413,376 samples, 4.17%)</title><rect x="28.1893%" y="117" width="4.1655%" height="15" fill="rgb(248,47,43)"/><text x="28.4393%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,342,440 samples, 3.34%)</title><rect x="29.0134%" y="101" width="3.3415%" height="15" fill="rgb(221,10,30)"/><text x="29.2634%" y="111.50">met..</text></g><g><title>trait_impls_of (882,860 samples, 0.68%)</title><rect x="32.3778%" y="117" width="0.6794%" height="15" fill="rgb(210,229,1)"/><text x="32.6278%" y="127.50"></text></g><g><title>implementations_of_trait (233,072 samples, 0.18%)</title><rect x="32.8778%" y="101" width="0.1793%" height="15" fill="rgb(222,148,37)"/><text x="33.1278%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (181,182 samples, 0.14%)</title><rect x="32.9177%" y="85" width="0.1394%" height="15" fill="rgb(234,67,33)"/><text x="33.1677%" y="95.50"></text></g><g><title>coherent_trait (13,978,395 samples, 10.76%)</title><rect x="22.3015%" y="149" width="10.7563%" height="15" fill="rgb(247,98,35)"/><text x="22.5515%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,423,139 samples, 10.33%)</title><rect x="22.7288%" y="133" width="10.3290%" height="15" fill="rgb(247,138,52)"/><text x="22.9788%" y="143.50">specialization_..</text></g><g><title>coherence_checking (14,070,766 samples, 10.83%)</title><rect x="22.2850%" y="165" width="10.8273%" height="15" fill="rgb(213,79,30)"/><text x="22.5350%" y="175.50">coherence_checki..</text></g><g><title>associated_item (322,095 samples, 0.25%)</title><rect x="58.1738%" y="101" width="0.2478%" height="15" fill="rgb(246,177,23)"/><text x="58.4238%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (267,864 samples, 0.21%)</title><rect x="58.2155%" y="85" width="0.2061%" height="15" fill="rgb(230,62,27)"/><text x="58.4655%" y="95.50"></text></g><g><title>associated_items (433,015 samples, 0.33%)</title><rect x="58.1007%" y="117" width="0.3332%" height="15" fill="rgb(216,154,8)"/><text x="58.3507%" y="127.50"></text></g><g><title>adt_dtorck_constraint (143,661 samples, 0.11%)</title><rect x="58.6360%" y="85" width="0.1105%" height="15" fill="rgb(244,35,45)"/><text x="58.8860%" y="95.50"></text></g><g><title>dropck_outlives (392,875 samples, 0.30%)</title><rect x="58.4619%" y="117" width="0.3023%" height="15" fill="rgb(251,115,12)"/><text x="58.7119%" y="127.50"></text></g><g><title>adt_dtorck_constraint (284,313 samples, 0.22%)</title><rect x="58.5454%" y="101" width="0.2188%" height="15" fill="rgb(240,54,50)"/><text x="58.7954%" y="111.50"></text></g><g><title>generics_of (494,895 samples, 0.38%)</title><rect x="60.6644%" y="101" width="0.3808%" height="15" fill="rgb(233,84,52)"/><text x="60.9144%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (385,055 samples, 0.30%)</title><rect x="60.7489%" y="85" width="0.2963%" height="15" fill="rgb(207,117,47)"/><text x="60.9989%" y="95.50"></text></g><g><title>impl_trait_ref (740,089 samples, 0.57%)</title><rect x="61.1455%" y="101" width="0.5695%" height="15" fill="rgb(249,43,39)"/><text x="61.3955%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (634,448 samples, 0.49%)</title><rect x="61.2268%" y="85" width="0.4882%" height="15" fill="rgb(209,38,44)"/><text x="61.4768%" y="95.50"></text></g><g><title>predicates_of (395,067 samples, 0.30%)</title><rect x="61.7419%" y="101" width="0.3040%" height="15" fill="rgb(236,212,23)"/><text x="61.9919%" y="111.50"></text></g><g><title>predicates_defined_on (235,033 samples, 0.18%)</title><rect x="61.8650%" y="85" width="0.1809%" height="15" fill="rgb(242,79,21)"/><text x="62.1150%" y="95.50"></text></g><g><title>specializes (894,798 samples, 0.69%)</title><rect x="62.0459%" y="101" width="0.6885%" height="15" fill="rgb(211,96,35)"/><text x="62.2959%" y="111.50"></text></g><g><title>param_env (566,797 samples, 0.44%)</title><rect x="62.2983%" y="85" width="0.4361%" height="15" fill="rgb(253,215,40)"/><text x="62.5483%" y="95.50"></text></g><g><title>def_span (308,425 samples, 0.24%)</title><rect x="62.4971%" y="69" width="0.2373%" height="15" fill="rgb(211,81,21)"/><text x="62.7471%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (285,265 samples, 0.22%)</title><rect x="62.5149%" y="53" width="0.2195%" height="15" fill="rgb(208,190,38)"/><text x="62.7649%" y="63.50"></text></g><g><title>trait_impls_of (523,238 samples, 0.40%)</title><rect x="62.7461%" y="101" width="0.4026%" height="15" fill="rgb(235,213,38)"/><text x="62.9961%" y="111.50"></text></g><g><title>implementations_of_trait (217,964 samples, 0.17%)</title><rect x="62.9811%" y="85" width="0.1677%" height="15" fill="rgb(237,122,38)"/><text x="63.2311%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (155,734 samples, 0.12%)</title><rect x="63.0289%" y="69" width="0.1198%" height="15" fill="rgb(244,218,35)"/><text x="63.2789%" y="79.50"></text></g><g><title>evaluate_obligation (5,727,414 samples, 4.41%)</title><rect x="58.7642%" y="117" width="4.4072%" height="15" fill="rgb(240,68,47)"/><text x="59.0142%" y="127.50">evalu..</text></g><g><title>generics_of (207,502 samples, 0.16%)</title><rect x="63.2560%" y="117" width="0.1597%" height="15" fill="rgb(210,16,53)"/><text x="63.5060%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (166,282 samples, 0.13%)</title><rect x="63.2877%" y="101" width="0.1280%" height="15" fill="rgb(235,124,12)"/><text x="63.5377%" y="111.50"></text></g><g><title>impl_item_implementor_ids (166,351 samples, 0.13%)</title><rect x="63.4156%" y="117" width="0.1280%" height="15" fill="rgb(224,169,11)"/><text x="63.6656%" y="127.50"></text></g><g><title>associated_items (149,741 samples, 0.12%)</title><rect x="63.4284%" y="101" width="0.1152%" height="15" fill="rgb(250,166,2)"/><text x="63.6784%" y="111.50"></text></g><g><title>opt_def_kind (244,173 samples, 0.19%)</title><rect x="63.8261%" y="117" width="0.1879%" height="15" fill="rgb(242,216,29)"/><text x="64.0761%" y="127.50"></text></g><g><title>param_env (144,701 samples, 0.11%)</title><rect x="64.0140%" y="117" width="0.1113%" height="15" fill="rgb(230,116,27)"/><text x="64.2640%" y="127.50"></text></g><g><title>predicates_of (354,556 samples, 0.27%)</title><rect x="64.1301%" y="117" width="0.2728%" height="15" fill="rgb(228,99,48)"/><text x="64.3801%" y="127.50"></text></g><g><title>predicates_defined_on (235,165 samples, 0.18%)</title><rect x="64.2219%" y="101" width="0.1810%" height="15" fill="rgb(253,11,6)"/><text x="64.4719%" y="111.50"></text></g><g><title>item_bodies_checking (40,977,035 samples, 31.53%)</title><rect x="33.1261%" y="165" width="31.5315%" height="15" fill="rgb(247,143,39)"/><text x="33.3761%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,974,395 samples, 31.53%)</title><rect x="33.1281%" y="149" width="31.5294%" height="15" fill="rgb(236,97,10)"/><text x="33.3781%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (40,926,824 samples, 31.49%)</title><rect x="33.1647%" y="133" width="31.4928%" height="15" fill="rgb(233,208,19)"/><text x="33.4147%" y="143.50">typeck</text></g><g><title>item_types_checking (785,299 samples, 0.60%)</title><rect x="64.6576%" y="165" width="0.6043%" height="15" fill="rgb(216,164,2)"/><text x="64.9076%" y="175.50"></text></g><g><title>check_mod_item_types (783,099 samples, 0.60%)</title><rect x="64.6592%" y="149" width="0.6026%" height="15" fill="rgb(220,129,5)"/><text x="64.9092%" y="159.50"></text></g><g><title>typeck (263,013 samples, 0.20%)</title><rect x="65.0594%" y="133" width="0.2024%" height="15" fill="rgb(242,17,10)"/><text x="65.3094%" y="143.50"></text></g><g><title>fn_sig (235,962 samples, 0.18%)</title><rect x="65.3970%" y="133" width="0.1816%" height="15" fill="rgb(242,107,0)"/><text x="65.6470%" y="143.50"></text></g><g><title>named_region_map (177,062 samples, 0.14%)</title><rect x="65.6228%" y="117" width="0.1362%" height="15" fill="rgb(251,28,31)"/><text x="65.8728%" y="127.50"></text></g><g><title>resolve_lifetimes (168,641 samples, 0.13%)</title><rect x="65.6293%" y="101" width="0.1298%" height="15" fill="rgb(233,223,10)"/><text x="65.8793%" y="111.50"></text></g><g><title>generics_of (249,983 samples, 0.19%)</title><rect x="65.5786%" y="133" width="0.1924%" height="15" fill="rgb(215,21,27)"/><text x="65.8286%" y="143.50"></text></g><g><title>predicates_of (314,697 samples, 0.24%)</title><rect x="65.8164%" y="133" width="0.2422%" height="15" fill="rgb(232,23,21)"/><text x="66.0664%" y="143.50"></text></g><g><title>predicates_defined_on (289,947 samples, 0.22%)</title><rect x="65.8354%" y="117" width="0.2231%" height="15" fill="rgb(244,5,23)"/><text x="66.0854%" y="127.50"></text></g><g><title>type_collecting (1,121,383 samples, 0.86%)</title><rect x="65.2626%" y="165" width="0.8629%" height="15" fill="rgb(226,81,46)"/><text x="65.5126%" y="175.50"></text></g><g><title>collect_mod_item_types (1,113,363 samples, 0.86%)</title><rect x="65.2688%" y="149" width="0.8567%" height="15" fill="rgb(247,70,30)"/><text x="65.5188%" y="159.50"></text></g><g><title>evaluate_obligation (272,144 samples, 0.21%)</title><rect x="66.7074%" y="133" width="0.2094%" height="15" fill="rgb(212,68,19)"/><text x="66.9574%" y="143.50"></text></g><g><title>region_scope_tree (134,611 samples, 0.10%)</title><rect x="67.0812%" y="133" width="0.1036%" height="15" fill="rgb(240,187,13)"/><text x="67.3312%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,286,807 samples, 0.99%)</title><rect x="66.2231%" y="149" width="0.9902%" height="15" fill="rgb(223,113,26)"/><text x="66.4731%" y="159.50"></text></g><g><title>evaluate_obligation (165,862 samples, 0.13%)</title><rect x="67.6271%" y="133" width="0.1276%" height="15" fill="rgb(206,192,2)"/><text x="67.8771%" y="143.50"></text></g><g><title>param_env (130,551 samples, 0.10%)</title><rect x="67.8118%" y="133" width="0.1005%" height="15" fill="rgb(241,108,4)"/><text x="68.0618%" y="143.50"></text></g><g><title>region_scope_tree (362,334 samples, 0.28%)</title><rect x="67.9704%" y="133" width="0.2788%" height="15" fill="rgb(247,173,49)"/><text x="68.2204%" y="143.50"></text></g><g><title>analysis (87,940,497 samples, 67.67%)</title><rect x="0.6104%" y="197" width="67.6694%" height="15" fill="rgb(224,114,35)"/><text x="0.8604%" y="207.50">analysis</text></g><g><title>type_check_crate (59,820,395 samples, 46.03%)</title><rect x="22.2486%" y="181" width="46.0313%" height="15" fill="rgb(245,159,27)"/><text x="22.4986%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,794,021 samples, 2.15%)</title><rect x="66.1299%" y="165" width="2.1500%" height="15" fill="rgb(245,172,44)"/><text x="66.3799%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,386,042 samples, 1.07%)</title><rect x="67.2133%" y="149" width="1.0665%" height="15" fill="rgb(236,23,11)"/><text x="67.4633%" y="159.50"></text></g><g><title>codegen_crate (449,565 samples, 0.35%)</title><rect x="68.2902%" y="197" width="0.3459%" height="15" fill="rgb(205,117,38)"/><text x="68.5402%" y="207.50"></text></g><g><title>AST_validation (135,151 samples, 0.10%)</title><rect x="68.8124%" y="181" width="0.1040%" height="15" fill="rgb(237,72,25)"/><text x="69.0624%" y="191.50"></text></g><g><title>metadata_load_macro (195,401 samples, 0.15%)</title><rect x="85.1880%" y="149" width="0.1504%" height="15" fill="rgb(244,70,9)"/><text x="85.4380%" y="159.50"></text></g><g><title>macro_expand_crate (23,914,466 samples, 18.40%)</title><rect x="69.0416%" y="181" width="18.4020%" height="15" fill="rgb(217,125,39)"/><text x="69.2916%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (23,900,135 samples, 18.39%)</title><rect x="69.0527%" y="165" width="18.3909%" height="15" fill="rgb(235,36,10)"/><text x="69.3027%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,735,880 samples, 2.11%)</title><rect x="85.3384%" y="149" width="2.1052%" height="15" fill="rgb(251,123,47)"/><text x="85.5884%" y="159.50">m..</text></g><g><title>metadata_register_crate (1,000,030 samples, 0.77%)</title><rect x="86.6741%" y="133" width="0.7695%" height="15" fill="rgb(221,13,13)"/><text x="86.9241%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (328,344 samples, 0.25%)</title><rect x="87.4464%" y="181" width="0.2527%" height="15" fill="rgb(238,131,9)"/><text x="87.6964%" y="191.50"></text></g><g><title>finalize_macro_resolutions (421,825 samples, 0.32%)</title><rect x="87.7144%" y="165" width="0.3246%" height="15" fill="rgb(211,50,8)"/><text x="87.9644%" y="175.50"></text></g><g><title>late_resolve_crate (1,661,439 samples, 1.28%)</title><rect x="88.0390%" y="165" width="1.2785%" height="15" fill="rgb(245,182,24)"/><text x="88.2890%" y="175.50"></text></g><g><title>configure_and_expand (26,995,270 samples, 20.77%)</title><rect x="68.6361%" y="197" width="20.7726%" height="15" fill="rgb(242,14,37)"/><text x="68.8861%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,221,835 samples, 1.71%)</title><rect x="87.6991%" y="181" width="1.7097%" height="15" fill="rgb(246,228,12)"/><text x="87.9491%" y="191.50"></text></g><g><title>drop_ast (215,602 samples, 0.17%)</title><rect x="89.4088%" y="197" width="0.1659%" height="15" fill="rgb(213,55,15)"/><text x="89.6588%" y="207.50"></text></g><g><title>early_lint_checks (413,875 samples, 0.32%)</title><rect x="89.5865%" y="197" width="0.3185%" height="15" fill="rgb(209,9,3)"/><text x="89.8365%" y="207.50"></text></g><g><title>free_global_ctxt (3,747,302 samples, 2.88%)</title><rect x="89.9050%" y="197" width="2.8835%" height="15" fill="rgb(230,59,30)"/><text x="90.1550%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (831,219 samples, 0.64%)</title><rect x="92.7885%" y="197" width="0.6396%" height="15" fill="rgb(209,121,21)"/><text x="93.0385%" y="207.50"></text></g><g><title>hir_lowering (2,566,578 samples, 1.97%)</title><rect x="93.4281%" y="197" width="1.9750%" height="15" fill="rgb(220,109,13)"/><text x="93.6781%" y="207.50">h..</text></g><g><title>parse_crate (4,519,881 samples, 3.48%)</title><rect x="95.4427%" y="197" width="3.4780%" height="15" fill="rgb(232,18,1)"/><text x="95.6927%" y="207.50">par..</text></g><g><title>prepare_outputs (191,372 samples, 0.15%)</title><rect x="98.9293%" y="197" width="0.1473%" height="15" fill="rgb(215,41,42)"/><text x="99.1793%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (759,438 samples, 0.58%)</title><rect x="99.0766%" y="197" width="0.5844%" height="15" fill="rgb(224,123,36)"/><text x="99.3266%" y="207.50"></text></g><g><title>all (129,955,993 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (129,955,993 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (332,774 samples, 0.26%)</title><rect x="99.7439%" y="197" width="0.2561%" height="15" fill="rgb(205,185,37)"/><text x="99.9939%" y="207.50"></text></g></svg></svg>