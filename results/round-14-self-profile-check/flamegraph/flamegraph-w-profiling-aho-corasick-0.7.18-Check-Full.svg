<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_borrowck_const_arg (1,472,396 samples, 0.18%)</title><rect x="16.6534%" y="133" width="0.1761%" height="15" fill="rgb(227,0,7)"/><text x="16.9034%" y="143.50"></text></g><g><title>param_env (1,129,844 samples, 0.14%)</title><rect x="18.7505%" y="101" width="0.1351%" height="15" fill="rgb(217,0,24)"/><text x="19.0005%" y="111.50"></text></g><g><title>item_attrs (994,403 samples, 0.12%)</title><rect x="19.5456%" y="69" width="0.1189%" height="15" fill="rgb(221,193,54)"/><text x="19.7956%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (962,563 samples, 0.12%)</title><rect x="19.5494%" y="53" width="0.1151%" height="15" fill="rgb(248,212,6)"/><text x="19.7994%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,494,580 samples, 0.18%)</title><rect x="19.4937%" y="85" width="0.1788%" height="15" fill="rgb(208,68,35)"/><text x="19.7437%" y="95.50"></text></g><g><title>is_copy_raw (4,339,809 samples, 0.52%)</title><rect x="23.5224%" y="53" width="0.5191%" height="15" fill="rgb(232,128,0)"/><text x="23.7724%" y="63.50"></text></g><g><title>evaluate_obligation (3,524,383 samples, 0.42%)</title><rect x="23.6200%" y="37" width="0.4216%" height="15" fill="rgb(207,160,47)"/><text x="23.8700%" y="47.50"></text></g><g><title>needs_drop_raw (5,865,583 samples, 0.70%)</title><rect x="23.3402%" y="69" width="0.7016%" height="15" fill="rgb(228,23,34)"/><text x="23.5902%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,977,379 samples, 0.24%)</title><rect x="24.2072%" y="53" width="0.2365%" height="15" fill="rgb(218,30,26)"/><text x="24.4572%" y="63.50"></text></g><g><title>resolve_instance (4,300,878 samples, 0.51%)</title><rect x="24.0421%" y="69" width="0.5144%" height="15" fill="rgb(220,122,19)"/><text x="24.2921%" y="79.50"></text></g><g><title>thir_body (12,401,936 samples, 1.48%)</title><rect x="24.5895%" y="69" width="1.4834%" height="15" fill="rgb(250,228,42)"/><text x="24.8395%" y="79.50"></text></g><g><title>mir_const (69,636,233 samples, 8.33%)</title><rect x="17.7649%" y="117" width="8.3294%" height="15" fill="rgb(240,193,28)"/><text x="18.0149%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (60,266,095 samples, 7.21%)</title><rect x="18.8857%" y="101" width="7.2086%" height="15" fill="rgb(216,20,37)"/><text x="19.1357%" y="111.50">unsafety_c..</text></g><g><title>mir_built (53,688,002 samples, 6.42%)</title><rect x="19.6725%" y="85" width="6.4218%" height="15" fill="rgb(206,188,39)"/><text x="19.9225%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (1,415,001 samples, 0.17%)</title><rect x="26.0943%" y="117" width="0.1693%" height="15" fill="rgb(217,207,13)"/><text x="26.3443%" y="127.50"></text></g><g><title>mir_promoted (78,873,194 samples, 9.43%)</title><rect x="16.8295%" y="133" width="9.4343%" height="15" fill="rgb(231,73,38)"/><text x="17.0795%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,117,674 samples, 0.25%)</title><rect x="26.2647%" y="133" width="0.2533%" height="15" fill="rgb(225,20,46)"/><text x="26.5147%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,641,256 samples, 0.56%)</title><rect x="26.5180%" y="133" width="0.5552%" height="15" fill="rgb(210,31,41)"/><text x="26.7680%" y="143.50"></text></g><g><title>normalize_projection_ty (3,070,630 samples, 0.37%)</title><rect x="26.7058%" y="117" width="0.3673%" height="15" fill="rgb(221,200,47)"/><text x="26.9558%" y="127.50"></text></g><g><title>type_op_prove_predicate (18,269,176 samples, 2.19%)</title><rect x="27.1390%" y="133" width="2.1852%" height="15" fill="rgb(226,26,5)"/><text x="27.3890%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (240,848,505 samples, 28.81%)</title><rect x="0.5187%" y="165" width="28.8086%" height="15" fill="rgb(249,33,26)"/><text x="0.7687%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (239,488,572 samples, 28.65%)</title><rect x="0.6814%" y="149" width="28.6459%" height="15" fill="rgb(235,183,28)"/><text x="0.9314%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,249,093 samples, 0.15%)</title><rect x="29.3273%" y="165" width="0.1494%" height="15" fill="rgb(221,5,38)"/><text x="29.5773%" y="175.50"></text></g><g><title>hir_module_items (1,562,675 samples, 0.19%)</title><rect x="29.4767%" y="165" width="0.1869%" height="15" fill="rgb(247,18,42)"/><text x="29.7267%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,507,775 samples, 0.30%)</title><rect x="29.9086%" y="133" width="0.3000%" height="15" fill="rgb(241,131,45)"/><text x="30.1586%" y="143.50"></text></g><g><title>should_inherit_track_caller (1,402,994 samples, 0.17%)</title><rect x="30.0408%" y="117" width="0.1678%" height="15" fill="rgb(249,31,29)"/><text x="30.2908%" y="127.50"></text></g><g><title>check_mod_attrs (4,500,201 samples, 0.54%)</title><rect x="29.6703%" y="149" width="0.5383%" height="15" fill="rgb(225,111,53)"/><text x="29.9203%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,025,949 samples, 0.12%)</title><rect x="30.2086%" y="149" width="0.1227%" height="15" fill="rgb(238,160,17)"/><text x="30.4586%" y="159.50"></text></g><g><title>lint_levels (1,362,465 samples, 0.16%)</title><rect x="30.5363%" y="133" width="0.1630%" height="15" fill="rgb(214,148,48)"/><text x="30.7863%" y="143.50"></text></g><g><title>lookup_deprecation_entry (841,800 samples, 0.10%)</title><rect x="30.6992%" y="133" width="0.1007%" height="15" fill="rgb(232,36,49)"/><text x="30.9492%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,433,169 samples, 0.41%)</title><rect x="30.4169%" y="149" width="0.4107%" height="15" fill="rgb(209,103,24)"/><text x="30.6669%" y="159.50"></text></g><g><title>misc_checking_1 (9,970,990 samples, 1.19%)</title><rect x="29.6637%" y="165" width="1.1927%" height="15" fill="rgb(229,88,8)"/><text x="29.9137%" y="175.50"></text></g><g><title>check_mod_intrinsics (905,829 samples, 0.11%)</title><rect x="30.8597%" y="133" width="0.1083%" height="15" fill="rgb(213,181,19)"/><text x="31.1097%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (4,709,801 samples, 0.56%)</title><rect x="30.8567%" y="149" width="0.5634%" height="15" fill="rgb(254,191,54)"/><text x="31.1067%" y="159.50"></text></g><g><title>check_mod_liveness (3,778,672 samples, 0.45%)</title><rect x="30.9681%" y="133" width="0.4520%" height="15" fill="rgb(241,83,37)"/><text x="31.2181%" y="143.50"></text></g><g><title>misc_checking_2 (10,593,687 samples, 1.27%)</title><rect x="30.8564%" y="165" width="1.2671%" height="15" fill="rgb(233,36,39)"/><text x="31.1064%" y="175.50"></text></g><g><title>match_checking (5,881,326 samples, 0.70%)</title><rect x="31.4200%" y="149" width="0.7035%" height="15" fill="rgb(226,3,54)"/><text x="31.6700%" y="159.50"></text></g><g><title>check_match (5,544,261 samples, 0.66%)</title><rect x="31.4604%" y="133" width="0.6632%" height="15" fill="rgb(245,192,40)"/><text x="31.7104%" y="143.50"></text></g><g><title>check_private_in_public (1,742,679 samples, 0.21%)</title><rect x="32.1255%" y="149" width="0.2084%" height="15" fill="rgb(238,167,29)"/><text x="32.3755%" y="159.50"></text></g><g><title>death_checking (4,058,375 samples, 0.49%)</title><rect x="32.3339%" y="149" width="0.4854%" height="15" fill="rgb(232,182,51)"/><text x="32.5839%" y="159.50"></text></g><g><title>param_env (965,360 samples, 0.12%)</title><rect x="33.4054%" y="117" width="0.1155%" height="15" fill="rgb(231,60,39)"/><text x="33.6554%" y="127.50"></text></g><g><title>crate_lints (7,408,162 samples, 0.89%)</title><rect x="32.8197%" y="133" width="0.8861%" height="15" fill="rgb(208,69,12)"/><text x="33.0697%" y="143.50"></text></g><g><title>type_of (1,305,602 samples, 0.16%)</title><rect x="33.5497%" y="117" width="0.1562%" height="15" fill="rgb(235,93,37)"/><text x="33.7997%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,052,288 samples, 0.13%)</title><rect x="33.5800%" y="101" width="0.1259%" height="15" fill="rgb(213,116,39)"/><text x="33.8300%" y="111.50"></text></g><g><title>lint_checking (12,706,891 samples, 1.52%)</title><rect x="32.8194%" y="149" width="1.5199%" height="15" fill="rgb(222,207,29)"/><text x="33.0694%" y="159.50"></text></g><g><title>module_lints (5,295,689 samples, 0.63%)</title><rect x="33.7059%" y="133" width="0.6334%" height="15" fill="rgb(206,96,30)"/><text x="33.9559%" y="143.50"></text></g><g><title>lint_mod (5,273,319 samples, 0.63%)</title><rect x="33.7085%" y="117" width="0.6308%" height="15" fill="rgb(218,138,4)"/><text x="33.9585%" y="127.50"></text></g><g><title>privacy_access_levels (2,300,126 samples, 0.28%)</title><rect x="34.3393%" y="149" width="0.2751%" height="15" fill="rgb(250,191,14)"/><text x="34.5893%" y="159.50"></text></g><g><title>privacy_checking_modules (8,844,318 samples, 1.06%)</title><rect x="34.6144%" y="149" width="1.0579%" height="15" fill="rgb(239,60,40)"/><text x="34.8644%" y="159.50"></text></g><g><title>check_mod_privacy (8,827,838 samples, 1.06%)</title><rect x="34.6164%" y="133" width="1.0559%" height="15" fill="rgb(206,27,48)"/><text x="34.8664%" y="143.50"></text></g><g><title>misc_checking_3 (29,773,000 samples, 3.56%)</title><rect x="32.1235%" y="165" width="3.5612%" height="15" fill="rgb(225,35,8)"/><text x="32.3735%" y="175.50">misc..</text></g><g><title>impl_parent (2,908,043 samples, 0.35%)</title><rect x="36.3569%" y="101" width="0.3478%" height="15" fill="rgb(250,213,24)"/><text x="36.6069%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,603,634 samples, 0.19%)</title><rect x="36.5129%" y="85" width="0.1918%" height="15" fill="rgb(247,123,22)"/><text x="36.7629%" y="95.50"></text></g><g><title>impl_trait_ref (5,548,531 samples, 0.66%)</title><rect x="36.7047%" y="101" width="0.6637%" height="15" fill="rgb(231,138,38)"/><text x="36.9547%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,463,838 samples, 0.53%)</title><rect x="36.8345%" y="85" width="0.5339%" height="15" fill="rgb(231,145,46)"/><text x="37.0845%" y="95.50"></text></g><g><title>coherent_trait (14,671,802 samples, 1.75%)</title><rect x="35.7517%" y="133" width="1.7549%" height="15" fill="rgb(251,118,11)"/><text x="36.0017%" y="143.50"></text></g><g><title>specialization_graph_of (13,830,114 samples, 1.65%)</title><rect x="35.8524%" y="117" width="1.6543%" height="15" fill="rgb(217,147,25)"/><text x="36.1024%" y="127.50"></text></g><g><title>trait_impls_of (1,154,204 samples, 0.14%)</title><rect x="37.3686%" y="101" width="0.1381%" height="15" fill="rgb(247,81,37)"/><text x="37.6186%" y="111.50"></text></g><g><title>coherence_checking (14,976,826 samples, 1.79%)</title><rect x="35.7477%" y="149" width="1.7914%" height="15" fill="rgb(209,12,38)"/><text x="35.9977%" y="159.50">c..</text></g><g><title>associated_items (1,171,490 samples, 0.14%)</title><rect x="63.3637%" y="101" width="0.1401%" height="15" fill="rgb(227,1,9)"/><text x="63.6137%" y="111.50"></text></g><g><title>dropck_outlives (1,857,088 samples, 0.22%)</title><rect x="63.5304%" y="101" width="0.2221%" height="15" fill="rgb(248,47,43)"/><text x="63.7804%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,699,188 samples, 0.20%)</title><rect x="64.7390%" y="85" width="0.2032%" height="15" fill="rgb(221,10,30)"/><text x="64.9890%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,664,038 samples, 0.20%)</title><rect x="64.7433%" y="69" width="0.1990%" height="15" fill="rgb(210,229,1)"/><text x="64.9933%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,620,178 samples, 0.19%)</title><rect x="64.7485%" y="53" width="0.1938%" height="15" fill="rgb(222,148,37)"/><text x="64.9985%" y="63.50"></text></g><g><title>evaluate_obligation (13,184,362 samples, 1.58%)</title><rect x="63.7526%" y="101" width="1.5770%" height="15" fill="rgb(234,67,33)"/><text x="64.0026%" y="111.50"></text></g><g><title>generics_of (2,008,156 samples, 0.24%)</title><rect x="65.3775%" y="101" width="0.2402%" height="15" fill="rgb(247,98,35)"/><text x="65.6275%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,557,740 samples, 0.19%)</title><rect x="65.4314%" y="85" width="0.1863%" height="15" fill="rgb(247,138,52)"/><text x="65.6814%" y="95.50"></text></g><g><title>method_autoderef_steps (2,388,493 samples, 0.29%)</title><rect x="65.8408%" y="101" width="0.2857%" height="15" fill="rgb(213,79,30)"/><text x="66.0908%" y="111.50"></text></g><g><title>evaluate_obligation (1,163,994 samples, 0.14%)</title><rect x="65.9873%" y="85" width="0.1392%" height="15" fill="rgb(246,177,23)"/><text x="66.2373%" y="95.50"></text></g><g><title>opt_const_param_of (5,088,324 samples, 0.61%)</title><rect x="66.1297%" y="101" width="0.6086%" height="15" fill="rgb(230,62,27)"/><text x="66.3797%" y="111.50"></text></g><g><title>typeck (4,932,482 samples, 0.59%)</title><rect x="66.1484%" y="85" width="0.5900%" height="15" fill="rgb(216,154,8)"/><text x="66.3984%" y="95.50"></text></g><g><title>predicates_of (1,141,902 samples, 0.14%)</title><rect x="66.8072%" y="101" width="0.1366%" height="15" fill="rgb(244,35,45)"/><text x="67.0572%" y="111.50"></text></g><g><title>evaluate_obligation (2,673,709 samples, 0.32%)</title><rect x="70.8522%" y="85" width="0.3198%" height="15" fill="rgb(251,115,12)"/><text x="71.1022%" y="95.50"></text></g><g><title>typeck (37,028,591 samples, 4.43%)</title><rect x="67.0403%" y="101" width="4.4291%" height="15" fill="rgb(240,54,50)"/><text x="67.2903%" y="111.50">typeck</text></g><g><title>item_bodies_checking (284,370,325 samples, 34.01%)</title><rect x="37.5675%" y="149" width="34.0144%" height="15" fill="rgb(233,84,52)"/><text x="37.8175%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (284,366,605 samples, 34.01%)</title><rect x="37.5680%" y="133" width="34.0139%" height="15" fill="rgb(207,117,47)"/><text x="37.8180%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (283,528,786 samples, 33.91%)</title><rect x="37.6682%" y="117" width="33.9137%" height="15" fill="rgb(249,43,39)"/><text x="37.9182%" y="127.50">typeck</text></g><g><title>impl_trait_ref (899,462 samples, 0.11%)</title><rect x="73.0504%" y="85" width="0.1076%" height="15" fill="rgb(209,38,44)"/><text x="73.3004%" y="95.50"></text></g><g><title>specializes (2,110,666 samples, 0.25%)</title><rect x="73.2470%" y="85" width="0.2525%" height="15" fill="rgb(236,212,23)"/><text x="73.4970%" y="95.50"></text></g><g><title>param_env (1,228,950 samples, 0.15%)</title><rect x="73.3524%" y="69" width="0.1470%" height="15" fill="rgb(242,79,21)"/><text x="73.6024%" y="79.50"></text></g><g><title>evaluate_obligation (7,330,211 samples, 0.88%)</title><rect x="72.6385%" y="101" width="0.8768%" height="15" fill="rgb(211,96,35)"/><text x="72.8885%" y="111.50"></text></g><g><title>item_types_checking (16,454,772 samples, 1.97%)</title><rect x="71.5819%" y="149" width="1.9682%" height="15" fill="rgb(253,215,40)"/><text x="71.8319%" y="159.50">i..</text></g><g><title>check_mod_item_types (16,435,582 samples, 1.97%)</title><rect x="71.5842%" y="133" width="1.9659%" height="15" fill="rgb(211,81,21)"/><text x="71.8342%" y="143.50">c..</text></g><g><title>typeck (8,915,820 samples, 1.07%)</title><rect x="72.4836%" y="117" width="1.0664%" height="15" fill="rgb(208,190,38)"/><text x="72.7336%" y="127.50"></text></g><g><title>fn_sig (2,283,622 samples, 0.27%)</title><rect x="73.8223%" y="117" width="0.2732%" height="15" fill="rgb(235,213,38)"/><text x="74.0723%" y="127.50"></text></g><g><title>named_region_map (1,280,442 samples, 0.15%)</title><rect x="74.2621%" y="101" width="0.1532%" height="15" fill="rgb(237,122,38)"/><text x="74.5121%" y="111.50"></text></g><g><title>resolve_lifetimes (1,125,750 samples, 0.13%)</title><rect x="74.2806%" y="85" width="0.1347%" height="15" fill="rgb(244,218,35)"/><text x="74.5306%" y="95.50"></text></g><g><title>generics_of (2,752,980 samples, 0.33%)</title><rect x="74.0955%" y="117" width="0.3293%" height="15" fill="rgb(240,68,47)"/><text x="74.3455%" y="127.50"></text></g><g><title>late_bound_vars_map (972,921 samples, 0.12%)</title><rect x="74.7005%" y="69" width="0.1164%" height="15" fill="rgb(210,16,53)"/><text x="74.9505%" y="79.50"></text></g><g><title>resolve_lifetimes (933,790 samples, 0.11%)</title><rect x="74.7052%" y="53" width="0.1117%" height="15" fill="rgb(235,124,12)"/><text x="74.9552%" y="63.50"></text></g><g><title>explicit_predicates_of (1,946,081 samples, 0.23%)</title><rect x="74.5935%" y="85" width="0.2328%" height="15" fill="rgb(224,169,11)"/><text x="74.8435%" y="95.50"></text></g><g><title>predicates_of (4,380,673 samples, 0.52%)</title><rect x="74.4648%" y="117" width="0.5240%" height="15" fill="rgb(250,166,2)"/><text x="74.7148%" y="127.50"></text></g><g><title>predicates_defined_on (3,961,499 samples, 0.47%)</title><rect x="74.5150%" y="101" width="0.4738%" height="15" fill="rgb(242,216,29)"/><text x="74.7650%" y="111.50"></text></g><g><title>inferred_outlives_of (1,359,203 samples, 0.16%)</title><rect x="74.8262%" y="85" width="0.1626%" height="15" fill="rgb(230,116,27)"/><text x="75.0762%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,218,303 samples, 0.15%)</title><rect x="74.8431%" y="69" width="0.1457%" height="15" fill="rgb(228,99,48)"/><text x="75.0931%" y="79.50"></text></g><g><title>type_collecting (12,512,298 samples, 1.50%)</title><rect x="73.5512%" y="149" width="1.4966%" height="15" fill="rgb(253,11,6)"/><text x="73.8012%" y="159.50"></text></g><g><title>collect_mod_item_types (12,491,098 samples, 1.49%)</title><rect x="73.5537%" y="133" width="1.4941%" height="15" fill="rgb(247,143,39)"/><text x="73.8037%" y="143.50"></text></g><g><title>adt_sized_constraint (837,920 samples, 0.10%)</title><rect x="77.8953%" y="53" width="0.1002%" height="15" fill="rgb(236,97,10)"/><text x="78.1453%" y="63.50"></text></g><g><title>adt_sized_constraint (836,200 samples, 0.10%)</title><rect x="77.8955%" y="37" width="0.1000%" height="15" fill="rgb(233,208,19)"/><text x="78.1455%" y="47.50"></text></g><g><title>adt_sized_constraint (877,440 samples, 0.10%)</title><rect x="77.8906%" y="69" width="0.1050%" height="15" fill="rgb(216,164,2)"/><text x="78.1406%" y="79.50"></text></g><g><title>adt_sized_constraint (897,720 samples, 0.11%)</title><rect x="77.8888%" y="85" width="0.1074%" height="15" fill="rgb(220,129,5)"/><text x="78.1388%" y="95.50"></text></g><g><title>adt_sized_constraint (978,842 samples, 0.12%)</title><rect x="77.8793%" y="101" width="0.1171%" height="15" fill="rgb(242,17,10)"/><text x="78.1293%" y="111.50"></text></g><g><title>evaluate_obligation (4,245,899 samples, 0.51%)</title><rect x="77.4945%" y="117" width="0.5079%" height="15" fill="rgb(242,107,0)"/><text x="77.7445%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,557,303 samples, 0.19%)</title><rect x="78.0036%" y="117" width="0.1863%" height="15" fill="rgb(251,28,31)"/><text x="78.2536%" y="127.50"></text></g><g><title>param_env (3,576,851 samples, 0.43%)</title><rect x="78.2282%" y="117" width="0.4278%" height="15" fill="rgb(233,223,10)"/><text x="78.4782%" y="127.50"></text></g><g><title>region_scope_tree (4,008,502 samples, 0.48%)</title><rect x="78.6659%" y="117" width="0.4795%" height="15" fill="rgb(215,21,27)"/><text x="78.9159%" y="127.50"></text></g><g><title>check_impl_item_well_formed (32,685,255 samples, 3.91%)</title><rect x="75.2507%" y="133" width="3.9096%" height="15" fill="rgb(232,23,21)"/><text x="75.5007%" y="143.50">chec..</text></g><g><title>evaluate_obligation (2,572,903 samples, 0.31%)</title><rect x="80.1315%" y="117" width="0.3078%" height="15" fill="rgb(244,5,23)"/><text x="80.3815%" y="127.50"></text></g><g><title>param_env (1,840,739 samples, 0.22%)</title><rect x="80.5099%" y="117" width="0.2202%" height="15" fill="rgb(226,81,46)"/><text x="80.7599%" y="127.50"></text></g><g><title>check_item_well_formed (14,184,354 samples, 1.70%)</title><rect x="79.1602%" y="133" width="1.6966%" height="15" fill="rgb(247,70,30)"/><text x="79.4102%" y="143.50"></text></g><g><title>analysis (675,614,042 samples, 80.81%)</title><rect x="0.2494%" y="181" width="80.8122%" height="15" fill="rgb(212,68,19)"/><text x="0.4994%" y="191.50">analysis</text></g><g><title>type_check_crate (379,363,995 samples, 45.38%)</title><rect x="35.6848%" y="165" width="45.3768%" height="15" fill="rgb(240,187,13)"/><text x="35.9348%" y="175.50">type_check_crate</text></g><g><title>wf_checking (50,217,215 samples, 6.01%)</title><rect x="75.0550%" y="149" width="6.0066%" height="15" fill="rgb(223,113,26)"/><text x="75.3050%" y="159.50">wf_check..</text></g><g><title>check_trait_item_well_formed (1,711,559 samples, 0.20%)</title><rect x="80.8569%" y="133" width="0.2047%" height="15" fill="rgb(206,192,2)"/><text x="81.1069%" y="143.50"></text></g><g><title>AST_validation (984,280 samples, 0.12%)</title><rect x="81.1279%" y="165" width="0.1177%" height="15" fill="rgb(241,108,4)"/><text x="81.3779%" y="175.50"></text></g><g><title>metadata_register_crate (1,252,294 samples, 0.15%)</title><rect x="90.8971%" y="133" width="0.1498%" height="15" fill="rgb(247,173,49)"/><text x="91.1471%" y="143.50"></text></g><g><title>macro_expand_crate (83,507,804 samples, 9.99%)</title><rect x="81.3223%" y="165" width="9.9886%" height="15" fill="rgb(224,114,35)"/><text x="81.5723%" y="175.50">macro_expand_c..</text></g><g><title>expand_crate (83,495,594 samples, 9.99%)</title><rect x="81.3238%" y="149" width="9.9872%" height="15" fill="rgb(245,159,27)"/><text x="81.5738%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,206,942 samples, 0.26%)</title><rect x="91.0469%" y="133" width="0.2640%" height="15" fill="rgb(245,172,44)"/><text x="91.2969%" y="143.50"></text></g><g><title>late_resolve_crate (13,187,386 samples, 1.58%)</title><rect x="91.4746%" y="149" width="1.5774%" height="15" fill="rgb(236,23,11)"/><text x="91.7246%" y="159.50"></text></g><g><title>resolve_check_unused (934,940 samples, 0.11%)</title><rect x="93.0600%" y="149" width="0.1118%" height="15" fill="rgb(205,117,38)"/><text x="93.3100%" y="159.50"></text></g><g><title>configure_and_expand (101,353,731 samples, 12.12%)</title><rect x="81.1074%" y="181" width="12.1232%" height="15" fill="rgb(237,72,25)"/><text x="81.3574%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (15,952,426 samples, 1.91%)</title><rect x="91.3225%" y="165" width="1.9081%" height="15" fill="rgb(244,70,9)"/><text x="91.5725%" y="175.50">r..</text></g><g><title>drop_ast (1,826,140 samples, 0.22%)</title><rect x="93.2306%" y="181" width="0.2184%" height="15" fill="rgb(217,125,39)"/><text x="93.4806%" y="191.50"></text></g><g><title>early_lint_checks (3,788,442 samples, 0.45%)</title><rect x="93.4514%" y="181" width="0.4531%" height="15" fill="rgb(235,36,10)"/><text x="93.7014%" y="191.50"></text></g><g><title>free_global_ctxt (8,940,269 samples, 1.07%)</title><rect x="93.9045%" y="181" width="1.0694%" height="15" fill="rgb(251,123,47)"/><text x="94.1545%" y="191.50"></text></g><g><title>generate_crate_metadata (10,186,572 samples, 1.22%)</title><rect x="94.9739%" y="181" width="1.2184%" height="15" fill="rgb(221,13,13)"/><text x="95.2239%" y="191.50"></text></g><g><title>hir_lowering (27,073,760 samples, 3.24%)</title><rect x="96.1923%" y="181" width="3.2384%" height="15" fill="rgb(238,131,9)"/><text x="96.4423%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,461,417 samples, 0.29%)</title><rect x="99.5623%" y="181" width="0.2944%" height="15" fill="rgb(211,50,8)"/><text x="99.8123%" y="191.50"></text></g><g><title>all (836,030,066 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (836,030,066 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,043,982 samples, 0.12%)</title><rect x="99.8751%" y="181" width="0.1249%" height="15" fill="rgb(246,228,12)"/><text x="100.1251%" y="191.50"></text></g></svg></svg>