<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (96,401 samples, 0.11%)</title><rect x="7.1523%" y="149" width="0.1124%" height="15" fill="rgb(227,0,7)"/><text x="7.4023%" y="159.50"></text></g><g><title>param_env (161,990 samples, 0.19%)</title><rect x="8.1518%" y="117" width="0.1888%" height="15" fill="rgb(217,0,24)"/><text x="8.4018%" y="127.50"></text></g><g><title>item_attrs (96,152 samples, 0.11%)</title><rect x="8.6403%" y="85" width="0.1121%" height="15" fill="rgb(221,193,54)"/><text x="8.8903%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (92,882 samples, 0.11%)</title><rect x="8.6441%" y="69" width="0.1083%" height="15" fill="rgb(248,212,6)"/><text x="8.8941%" y="79.50"></text></g><g><title>codegen_fn_attrs (149,233 samples, 0.17%)</title><rect x="8.5916%" y="101" width="0.1740%" height="15" fill="rgb(208,68,35)"/><text x="8.8416%" y="111.50"></text></g><g><title>adt_drop_tys (96,331 samples, 0.11%)</title><rect x="10.2779%" y="37" width="0.1123%" height="15" fill="rgb(232,128,0)"/><text x="10.5279%" y="47.50"></text></g><g><title>adt_drop_tys (198,222 samples, 0.23%)</title><rect x="10.2695%" y="53" width="0.2311%" height="15" fill="rgb(207,160,47)"/><text x="10.5195%" y="63.50"></text></g><g><title>param_env (181,212 samples, 0.21%)</title><rect x="10.5979%" y="53" width="0.2113%" height="15" fill="rgb(228,23,34)"/><text x="10.8479%" y="63.50"></text></g><g><title>adt_drop_tys (548,425 samples, 0.64%)</title><rect x="10.2319%" y="69" width="0.6393%" height="15" fill="rgb(218,30,26)"/><text x="10.4819%" y="79.50"></text></g><g><title>is_copy_raw (787,629 samples, 0.92%)</title><rect x="10.8712%" y="69" width="0.9182%" height="15" fill="rgb(220,122,19)"/><text x="11.1212%" y="79.50"></text></g><g><title>evaluate_obligation (626,157 samples, 0.73%)</title><rect x="11.0594%" y="53" width="0.7300%" height="15" fill="rgb(250,228,42)"/><text x="11.3094%" y="63.50"></text></g><g><title>needs_drop_raw (1,433,915 samples, 1.67%)</title><rect x="10.1307%" y="85" width="1.6716%" height="15" fill="rgb(240,193,28)"/><text x="10.3807%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (482,087 samples, 0.56%)</title><rect x="11.9926%" y="69" width="0.5620%" height="15" fill="rgb(216,20,37)"/><text x="12.2426%" y="79.50"></text></g><g><title>specialization_graph_of (362,543 samples, 0.42%)</title><rect x="12.6636%" y="69" width="0.4226%" height="15" fill="rgb(206,188,39)"/><text x="12.9136%" y="79.50"></text></g><g><title>impl_trait_ref (140,420 samples, 0.16%)</title><rect x="12.9226%" y="53" width="0.1637%" height="15" fill="rgb(217,207,13)"/><text x="13.1726%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (112,800 samples, 0.13%)</title><rect x="12.9548%" y="37" width="0.1315%" height="15" fill="rgb(231,73,38)"/><text x="13.2048%" y="47.50"></text></g><g><title>resolve_instance (1,142,681 samples, 1.33%)</title><rect x="11.8023%" y="85" width="1.3321%" height="15" fill="rgb(225,20,46)"/><text x="12.0523%" y="95.50"></text></g><g><title>thir_body (407,806 samples, 0.48%)</title><rect x="13.1484%" y="85" width="0.4754%" height="15" fill="rgb(210,31,41)"/><text x="13.3984%" y="95.50"></text></g><g><title>mir_const (5,136,487 samples, 5.99%)</title><rect x="7.6742%" y="133" width="5.9880%" height="15" fill="rgb(221,200,47)"/><text x="7.9242%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,564,800 samples, 5.32%)</title><rect x="8.3407%" y="117" width="5.3215%" height="15" fill="rgb(226,26,5)"/><text x="8.5907%" y="127.50">unsafet..</text></g><g><title>mir_built (4,200,344 samples, 4.90%)</title><rect x="8.7655%" y="101" width="4.8966%" height="15" fill="rgb(249,33,26)"/><text x="9.0155%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (5,509,843 samples, 6.42%)</title><rect x="7.2647%" y="149" width="6.4232%" height="15" fill="rgb(235,183,28)"/><text x="7.5147%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (511,835 samples, 0.60%)</title><rect x="13.6879%" y="149" width="0.5967%" height="15" fill="rgb(221,5,38)"/><text x="13.9379%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (497,555 samples, 0.58%)</title><rect x="14.2846%" y="149" width="0.5800%" height="15" fill="rgb(247,18,42)"/><text x="14.5346%" y="159.50"></text></g><g><title>normalize_projection_ty (345,951 samples, 0.40%)</title><rect x="14.4613%" y="133" width="0.4033%" height="15" fill="rgb(241,131,45)"/><text x="14.7113%" y="143.50"></text></g><g><title>type_op_normalize_ty (172,931 samples, 0.20%)</title><rect x="14.9243%" y="149" width="0.2016%" height="15" fill="rgb(249,31,29)"/><text x="15.1743%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,917,514 samples, 2.24%)</title><rect x="15.1259%" y="149" width="2.2354%" height="15" fill="rgb(225,111,53)"/><text x="15.3759%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (13,640,461 samples, 15.90%)</title><rect x="1.4615%" y="181" width="15.9016%" height="15" fill="rgb(238,160,17)"/><text x="1.7115%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,589,231 samples, 15.84%)</title><rect x="1.5212%" y="165" width="15.8419%" height="15" fill="rgb(214,148,48)"/><text x="1.7712%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (260,493 samples, 0.30%)</title><rect x="17.3786%" y="181" width="0.3037%" height="15" fill="rgb(232,36,49)"/><text x="17.6286%" y="191.50"></text></g><g><title>get_lang_items (105,711 samples, 0.12%)</title><rect x="18.4083%" y="101" width="0.1232%" height="15" fill="rgb(209,103,24)"/><text x="18.6583%" y="111.50"></text></g><g><title>codegen_fn_attrs (285,194 samples, 0.33%)</title><rect x="18.3497%" y="117" width="0.3325%" height="15" fill="rgb(229,88,8)"/><text x="18.5997%" y="127.50"></text></g><g><title>codegen_fn_attrs (543,247 samples, 0.63%)</title><rect x="18.0594%" y="149" width="0.6333%" height="15" fill="rgb(213,181,19)"/><text x="18.3094%" y="159.50"></text></g><g><title>should_inherit_track_caller (438,685 samples, 0.51%)</title><rect x="18.1813%" y="133" width="0.5114%" height="15" fill="rgb(254,191,54)"/><text x="18.4313%" y="143.50"></text></g><g><title>check_mod_attrs (827,439 samples, 0.96%)</title><rect x="17.7287%" y="165" width="0.9646%" height="15" fill="rgb(241,83,37)"/><text x="17.9787%" y="175.50"></text></g><g><title>check_mod_const_bodies (150,853 samples, 0.18%)</title><rect x="18.6933%" y="165" width="0.1759%" height="15" fill="rgb(233,36,39)"/><text x="18.9433%" y="175.50"></text></g><g><title>lookup_deprecation_entry (179,873 samples, 0.21%)</title><rect x="19.2326%" y="149" width="0.2097%" height="15" fill="rgb(226,3,54)"/><text x="19.4826%" y="159.50"></text></g><g><title>stability_index (111,232 samples, 0.13%)</title><rect x="19.3126%" y="133" width="0.1297%" height="15" fill="rgb(245,192,40)"/><text x="19.5626%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (465,735 samples, 0.54%)</title><rect x="18.9855%" y="165" width="0.5429%" height="15" fill="rgb(238,167,29)"/><text x="19.2355%" y="175.50"></text></g><g><title>looking_for_derive_registrar (86,461 samples, 0.10%)</title><rect x="19.5314%" y="165" width="0.1008%" height="15" fill="rgb(232,182,51)"/><text x="19.7814%" y="175.50"></text></g><g><title>misc_checking_1 (1,684,299 samples, 1.96%)</title><rect x="17.6828%" y="181" width="1.9635%" height="15" fill="rgb(231,60,39)"/><text x="17.9328%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (218,572 samples, 0.25%)</title><rect x="19.6481%" y="165" width="0.2548%" height="15" fill="rgb(208,69,12)"/><text x="19.8981%" y="175.50"></text></g><g><title>check_mod_liveness (172,561 samples, 0.20%)</title><rect x="19.7018%" y="149" width="0.2012%" height="15" fill="rgb(235,93,37)"/><text x="19.9518%" y="159.50"></text></g><g><title>misc_checking_2 (461,935 samples, 0.54%)</title><rect x="19.6463%" y="181" width="0.5385%" height="15" fill="rgb(213,116,39)"/><text x="19.8963%" y="191.50"></text></g><g><title>match_checking (241,753 samples, 0.28%)</title><rect x="19.9030%" y="165" width="0.2818%" height="15" fill="rgb(222,207,29)"/><text x="20.1530%" y="175.50"></text></g><g><title>check_match (227,523 samples, 0.27%)</title><rect x="19.9195%" y="149" width="0.2652%" height="15" fill="rgb(206,96,30)"/><text x="20.1695%" y="159.50"></text></g><g><title>check_private_in_public (134,171 samples, 0.16%)</title><rect x="20.1953%" y="165" width="0.1564%" height="15" fill="rgb(218,138,4)"/><text x="20.4453%" y="175.50"></text></g><g><title>death_checking (265,553 samples, 0.31%)</title><rect x="20.3517%" y="165" width="0.3096%" height="15" fill="rgb(250,191,14)"/><text x="20.6017%" y="175.50"></text></g><g><title>param_env (231,943 samples, 0.27%)</title><rect x="21.1297%" y="133" width="0.2704%" height="15" fill="rgb(239,60,40)"/><text x="21.3797%" y="143.50"></text></g><g><title>predicates_of (102,001 samples, 0.12%)</title><rect x="21.2811%" y="117" width="0.1189%" height="15" fill="rgb(206,27,48)"/><text x="21.5311%" y="127.50"></text></g><g><title>crate_lints (968,021 samples, 1.13%)</title><rect x="20.6631%" y="149" width="1.1285%" height="15" fill="rgb(225,35,8)"/><text x="20.9131%" y="159.50"></text></g><g><title>type_of (333,435 samples, 0.39%)</title><rect x="21.4029%" y="133" width="0.3887%" height="15" fill="rgb(250,213,24)"/><text x="21.6529%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (251,455 samples, 0.29%)</title><rect x="21.4984%" y="117" width="0.2931%" height="15" fill="rgb(247,123,22)"/><text x="21.7484%" y="127.50"></text></g><g><title>lint_checking (1,125,593 samples, 1.31%)</title><rect x="20.6613%" y="165" width="1.3122%" height="15" fill="rgb(231,138,38)"/><text x="20.9113%" y="175.50"></text></g><g><title>module_lints (156,042 samples, 0.18%)</title><rect x="21.7916%" y="149" width="0.1819%" height="15" fill="rgb(231,145,46)"/><text x="22.0416%" y="159.50"></text></g><g><title>lint_mod (153,032 samples, 0.18%)</title><rect x="21.7951%" y="133" width="0.1784%" height="15" fill="rgb(251,118,11)"/><text x="22.0451%" y="143.50"></text></g><g><title>privacy_access_levels (192,142 samples, 0.22%)</title><rect x="21.9735%" y="165" width="0.2240%" height="15" fill="rgb(217,147,25)"/><text x="22.2235%" y="175.50"></text></g><g><title>privacy_checking_modules (438,925 samples, 0.51%)</title><rect x="22.1975%" y="165" width="0.5117%" height="15" fill="rgb(247,81,37)"/><text x="22.4475%" y="175.50"></text></g><g><title>check_mod_privacy (436,515 samples, 0.51%)</title><rect x="22.2003%" y="149" width="0.5089%" height="15" fill="rgb(209,12,38)"/><text x="22.4503%" y="159.50"></text></g><g><title>misc_checking_3 (2,176,864 samples, 2.54%)</title><rect x="20.1848%" y="181" width="2.5377%" height="15" fill="rgb(227,1,9)"/><text x="20.4348%" y="191.50">mi..</text></g><g><title>adt_destructor (113,702 samples, 0.13%)</title><rect x="22.8841%" y="133" width="0.1326%" height="15" fill="rgb(248,47,43)"/><text x="23.1341%" y="143.50"></text></g><g><title>coherent_trait (100,621 samples, 0.12%)</title><rect x="22.8994%" y="117" width="0.1173%" height="15" fill="rgb(221,10,30)"/><text x="23.1494%" y="127.50"></text></g><g><title>specialization_graph_of (98,691 samples, 0.12%)</title><rect x="22.9016%" y="101" width="0.1151%" height="15" fill="rgb(210,229,1)"/><text x="23.1516%" y="111.50"></text></g><g><title>param_env (152,661 samples, 0.18%)</title><rect x="23.0167%" y="133" width="0.1780%" height="15" fill="rgb(222,148,37)"/><text x="23.2667%" y="143.50"></text></g><g><title>impl_parent (1,104,844 samples, 1.29%)</title><rect x="25.4856%" y="117" width="1.2880%" height="15" fill="rgb(234,67,33)"/><text x="25.7356%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (602,180 samples, 0.70%)</title><rect x="26.0716%" y="101" width="0.7020%" height="15" fill="rgb(247,98,35)"/><text x="26.3216%" y="111.50"></text></g><g><title>impl_trait_ref (2,662,232 samples, 3.10%)</title><rect x="26.7736%" y="117" width="3.1035%" height="15" fill="rgb(247,138,52)"/><text x="27.0236%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,136,387 samples, 2.49%)</title><rect x="27.3866%" y="101" width="2.4905%" height="15" fill="rgb(213,79,30)"/><text x="27.6366%" y="111.50">me..</text></g><g><title>coherent_trait (6,474,582 samples, 7.55%)</title><rect x="22.8253%" y="149" width="7.5479%" height="15" fill="rgb(246,177,23)"/><text x="23.0753%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (6,157,729 samples, 7.18%)</title><rect x="23.1946%" y="133" width="7.1785%" height="15" fill="rgb(230,62,27)"/><text x="23.4446%" y="143.50">specializa..</text></g><g><title>trait_impls_of (422,836 samples, 0.49%)</title><rect x="29.8802%" y="117" width="0.4929%" height="15" fill="rgb(216,154,8)"/><text x="30.1302%" y="127.50"></text></g><g><title>implementations_of_trait (115,274 samples, 0.13%)</title><rect x="30.2387%" y="101" width="0.1344%" height="15" fill="rgb(244,35,45)"/><text x="30.4887%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (93,723 samples, 0.11%)</title><rect x="30.2639%" y="85" width="0.1093%" height="15" fill="rgb(251,115,12)"/><text x="30.5139%" y="95.50"></text></g><g><title>coherence_checking (6,595,304 samples, 7.69%)</title><rect x="22.7880%" y="165" width="7.6886%" height="15" fill="rgb(240,54,50)"/><text x="23.0380%" y="175.50">coherence_c..</text></g><g><title>associated_item (298,293 samples, 0.35%)</title><rect x="43.4211%" y="101" width="0.3477%" height="15" fill="rgb(233,84,52)"/><text x="43.6711%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (225,543 samples, 0.26%)</title><rect x="43.5059%" y="85" width="0.2629%" height="15" fill="rgb(207,117,47)"/><text x="43.7559%" y="95.50"></text></g><g><title>associated_items (453,194 samples, 0.53%)</title><rect x="43.2694%" y="117" width="0.5283%" height="15" fill="rgb(249,43,39)"/><text x="43.5194%" y="127.50"></text></g><g><title>adt_dtorck_constraint (159,781 samples, 0.19%)</title><rect x="44.0707%" y="101" width="0.1863%" height="15" fill="rgb(209,38,44)"/><text x="44.3207%" y="111.50"></text></g><g><title>dropck_outlives (542,834 samples, 0.63%)</title><rect x="43.8463%" y="117" width="0.6328%" height="15" fill="rgb(236,212,23)"/><text x="44.0963%" y="127.50"></text></g><g><title>normalize_projection_ty (190,621 samples, 0.22%)</title><rect x="44.2569%" y="101" width="0.2222%" height="15" fill="rgb(242,79,21)"/><text x="44.5069%" y="111.50"></text></g><g><title>predicates_of (120,402 samples, 0.14%)</title><rect x="46.0070%" y="101" width="0.1404%" height="15" fill="rgb(211,96,35)"/><text x="46.2570%" y="111.50"></text></g><g><title>predicates_defined_on (87,772 samples, 0.10%)</title><rect x="46.0451%" y="85" width="0.1023%" height="15" fill="rgb(253,215,40)"/><text x="46.2951%" y="95.50"></text></g><g><title>specializes (125,431 samples, 0.15%)</title><rect x="46.1474%" y="101" width="0.1462%" height="15" fill="rgb(211,81,21)"/><text x="46.3974%" y="111.50"></text></g><g><title>param_env (110,111 samples, 0.13%)</title><rect x="46.1652%" y="85" width="0.1284%" height="15" fill="rgb(208,190,38)"/><text x="46.4152%" y="95.50"></text></g><g><title>def_span (89,711 samples, 0.10%)</title><rect x="46.1890%" y="69" width="0.1046%" height="15" fill="rgb(235,213,38)"/><text x="46.4390%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (88,421 samples, 0.10%)</title><rect x="46.1905%" y="53" width="0.1031%" height="15" fill="rgb(237,122,38)"/><text x="46.4405%" y="63.50"></text></g><g><title>evaluate_obligation (1,829,578 samples, 2.13%)</title><rect x="44.4791%" y="117" width="2.1329%" height="15" fill="rgb(244,218,35)"/><text x="44.7291%" y="127.50">e..</text></g><g><title>trait_impls_of (259,481 samples, 0.30%)</title><rect x="46.3095%" y="101" width="0.3025%" height="15" fill="rgb(240,68,47)"/><text x="46.5595%" y="111.50"></text></g><g><title>implementations_of_trait (102,461 samples, 0.12%)</title><rect x="46.4926%" y="85" width="0.1194%" height="15" fill="rgb(210,16,53)"/><text x="46.7426%" y="95.50"></text></g><g><title>generics_of (105,192 samples, 0.12%)</title><rect x="46.7462%" y="117" width="0.1226%" height="15" fill="rgb(235,124,12)"/><text x="46.9962%" y="127.50"></text></g><g><title>impl_item_implementor_ids (125,532 samples, 0.15%)</title><rect x="46.8688%" y="117" width="0.1463%" height="15" fill="rgb(224,169,11)"/><text x="47.1188%" y="127.50"></text></g><g><title>associated_items (107,481 samples, 0.13%)</title><rect x="46.8898%" y="101" width="0.1253%" height="15" fill="rgb(250,166,2)"/><text x="47.1398%" y="111.50"></text></g><g><title>item_attrs (97,851 samples, 0.11%)</title><rect x="47.1110%" y="117" width="0.1141%" height="15" fill="rgb(242,216,29)"/><text x="47.3610%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (91,961 samples, 0.11%)</title><rect x="47.1179%" y="101" width="0.1072%" height="15" fill="rgb(230,116,27)"/><text x="47.3679%" y="111.50"></text></g><g><title>method_autoderef_steps (261,522 samples, 0.30%)</title><rect x="47.2801%" y="117" width="0.3049%" height="15" fill="rgb(228,99,48)"/><text x="47.5301%" y="127.50"></text></g><g><title>evaluate_obligation (132,481 samples, 0.15%)</title><rect x="47.4305%" y="101" width="0.1544%" height="15" fill="rgb(253,11,6)"/><text x="47.6805%" y="111.50"></text></g><g><title>explicit_predicates_of (220,081 samples, 0.26%)</title><rect x="47.8628%" y="85" width="0.2566%" height="15" fill="rgb(247,143,39)"/><text x="48.1128%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (193,691 samples, 0.23%)</title><rect x="47.8936%" y="69" width="0.2258%" height="15" fill="rgb(236,97,10)"/><text x="48.1436%" y="79.50"></text></g><g><title>predicates_of (700,637 samples, 0.82%)</title><rect x="47.6266%" y="117" width="0.8168%" height="15" fill="rgb(233,208,19)"/><text x="47.8766%" y="127.50"></text></g><g><title>predicates_defined_on (573,514 samples, 0.67%)</title><rect x="47.7748%" y="101" width="0.6686%" height="15" fill="rgb(216,164,2)"/><text x="48.0248%" y="111.50"></text></g><g><title>inferred_outlives_of (277,893 samples, 0.32%)</title><rect x="48.1194%" y="85" width="0.3240%" height="15" fill="rgb(220,129,5)"/><text x="48.3694%" y="95.50"></text></g><g><title>item_bodies_checking (15,520,843 samples, 18.09%)</title><rect x="30.5409%" y="165" width="18.0937%" height="15" fill="rgb(242,17,10)"/><text x="30.7909%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,517,963 samples, 18.09%)</title><rect x="30.5443%" y="149" width="18.0904%" height="15" fill="rgb(242,107,0)"/><text x="30.7943%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (15,474,663 samples, 18.04%)</title><rect x="30.5948%" y="133" width="18.0399%" height="15" fill="rgb(251,28,31)"/><text x="30.8448%" y="143.50">typeck</text></g><g><title>item_types_checking (952,231 samples, 1.11%)</title><rect x="48.6346%" y="165" width="1.1101%" height="15" fill="rgb(233,223,10)"/><text x="48.8846%" y="175.50"></text></g><g><title>check_mod_item_types (948,631 samples, 1.11%)</title><rect x="48.6388%" y="149" width="1.1059%" height="15" fill="rgb(215,21,27)"/><text x="48.8888%" y="159.50"></text></g><g><title>fn_sig (408,333 samples, 0.48%)</title><rect x="50.1904%" y="133" width="0.4760%" height="15" fill="rgb(232,23,21)"/><text x="50.4404%" y="143.50"></text></g><g><title>named_region_map (321,963 samples, 0.38%)</title><rect x="50.8616%" y="117" width="0.3753%" height="15" fill="rgb(244,5,23)"/><text x="51.1116%" y="127.50"></text></g><g><title>resolve_lifetimes (296,883 samples, 0.35%)</title><rect x="50.8908%" y="101" width="0.3461%" height="15" fill="rgb(226,81,46)"/><text x="51.1408%" y="111.50"></text></g><g><title>lint_levels (186,712 samples, 0.22%)</title><rect x="51.0192%" y="85" width="0.2177%" height="15" fill="rgb(247,70,30)"/><text x="51.2692%" y="95.50"></text></g><g><title>generics_of (518,146 samples, 0.60%)</title><rect x="50.6664%" y="133" width="0.6040%" height="15" fill="rgb(212,68,19)"/><text x="50.9164%" y="143.50"></text></g><g><title>item_bounds (134,072 samples, 0.16%)</title><rect x="51.3301%" y="133" width="0.1563%" height="15" fill="rgb(240,187,13)"/><text x="51.5801%" y="143.50"></text></g><g><title>late_bound_vars_map (514,963 samples, 0.60%)</title><rect x="52.1951%" y="85" width="0.6003%" height="15" fill="rgb(223,113,26)"/><text x="52.4451%" y="95.50"></text></g><g><title>resolve_lifetimes (492,463 samples, 0.57%)</title><rect x="52.2214%" y="69" width="0.5741%" height="15" fill="rgb(206,192,2)"/><text x="52.4714%" y="79.50"></text></g><g><title>explicit_predicates_of (1,197,081 samples, 1.40%)</title><rect x="51.6992%" y="101" width="1.3955%" height="15" fill="rgb(241,108,4)"/><text x="51.9492%" y="111.50"></text></g><g><title>type_param_predicates (172,212 samples, 0.20%)</title><rect x="52.8939%" y="85" width="0.2008%" height="15" fill="rgb(247,173,49)"/><text x="53.1439%" y="95.50"></text></g><g><title>predicates_of (1,742,199 samples, 2.03%)</title><rect x="51.4864%" y="133" width="2.0310%" height="15" fill="rgb(224,114,35)"/><text x="51.7364%" y="143.50">p..</text></g><g><title>predicates_defined_on (1,675,319 samples, 1.95%)</title><rect x="51.5644%" y="117" width="1.9530%" height="15" fill="rgb(245,159,27)"/><text x="51.8144%" y="127.50">p..</text></g><g><title>inferred_outlives_of (362,614 samples, 0.42%)</title><rect x="53.0947%" y="101" width="0.4227%" height="15" fill="rgb(245,172,44)"/><text x="53.3447%" y="111.50"></text></g><g><title>inferred_outlives_crate (327,283 samples, 0.38%)</title><rect x="53.1359%" y="85" width="0.3815%" height="15" fill="rgb(236,23,11)"/><text x="53.3859%" y="95.50"></text></g><g><title>type_of (221,693 samples, 0.26%)</title><rect x="53.2590%" y="69" width="0.2584%" height="15" fill="rgb(205,117,38)"/><text x="53.5090%" y="79.50"></text></g><g><title>type_param_predicates (135,962 samples, 0.16%)</title><rect x="53.3589%" y="53" width="0.1585%" height="15" fill="rgb(237,72,25)"/><text x="53.6089%" y="63.50"></text></g><g><title>type_param_predicates (129,431 samples, 0.15%)</title><rect x="53.3665%" y="37" width="0.1509%" height="15" fill="rgb(244,70,9)"/><text x="53.6165%" y="47.50"></text></g><g><title>type_collecting (3,509,339 samples, 4.09%)</title><rect x="49.7482%" y="165" width="4.0911%" height="15" fill="rgb(217,125,39)"/><text x="49.9982%" y="175.50">type..</text></g><g><title>collect_mod_item_types (3,493,519 samples, 4.07%)</title><rect x="49.7666%" y="149" width="4.0726%" height="15" fill="rgb(235,36,10)"/><text x="50.0166%" y="159.50">coll..</text></g><g><title>type_of (276,075 samples, 0.32%)</title><rect x="53.5174%" y="133" width="0.3218%" height="15" fill="rgb(251,123,47)"/><text x="53.7674%" y="143.50"></text></g><g><title>evaluate_obligation (504,476 samples, 0.59%)</title><rect x="57.9479%" y="133" width="0.5881%" height="15" fill="rgb(221,13,13)"/><text x="58.1979%" y="143.50"></text></g><g><title>implied_outlives_bounds (467,414 samples, 0.54%)</title><rect x="58.5522%" y="133" width="0.5449%" height="15" fill="rgb(238,131,9)"/><text x="58.8022%" y="143.50"></text></g><g><title>param_env (490,307 samples, 0.57%)</title><rect x="59.1069%" y="133" width="0.5716%" height="15" fill="rgb(211,50,8)"/><text x="59.3569%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,062,557 samples, 5.90%)</title><rect x="54.0679%" y="149" width="5.9018%" height="15" fill="rgb(245,182,24)"/><text x="54.3179%" y="159.50">check_im..</text></g><g><title>region_scope_tree (200,051 samples, 0.23%)</title><rect x="59.7364%" y="133" width="0.2332%" height="15" fill="rgb(242,14,37)"/><text x="59.9864%" y="143.50"></text></g><g><title>evaluate_obligation (274,983 samples, 0.32%)</title><rect x="62.2069%" y="133" width="0.3206%" height="15" fill="rgb(246,228,12)"/><text x="62.4569%" y="143.50"></text></g><g><title>implied_outlives_bounds (217,403 samples, 0.25%)</title><rect x="62.5906%" y="133" width="0.2534%" height="15" fill="rgb(213,55,15)"/><text x="62.8406%" y="143.50"></text></g><g><title>param_env (595,536 samples, 0.69%)</title><rect x="62.8800%" y="133" width="0.6943%" height="15" fill="rgb(209,9,3)"/><text x="63.1300%" y="143.50"></text></g><g><title>explicit_predicates_of (168,221 samples, 0.20%)</title><rect x="63.7320%" y="101" width="0.1961%" height="15" fill="rgb(230,59,30)"/><text x="63.9820%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (150,771 samples, 0.18%)</title><rect x="63.7523%" y="85" width="0.1758%" height="15" fill="rgb(209,121,21)"/><text x="64.0023%" y="95.50"></text></g><g><title>predicates_of (331,365 samples, 0.39%)</title><rect x="63.5743%" y="133" width="0.3863%" height="15" fill="rgb(220,109,13)"/><text x="63.8243%" y="143.50"></text></g><g><title>predicates_defined_on (237,222 samples, 0.28%)</title><rect x="63.6840%" y="117" width="0.2765%" height="15" fill="rgb(232,18,1)"/><text x="63.9340%" y="127.50"></text></g><g><title>trait_impls_of (232,883 samples, 0.27%)</title><rect x="63.9913%" y="133" width="0.2715%" height="15" fill="rgb(215,41,42)"/><text x="64.2413%" y="143.50"></text></g><g><title>implementations_of_trait (99,182 samples, 0.12%)</title><rect x="64.1472%" y="117" width="0.1156%" height="15" fill="rgb(224,123,36)"/><text x="64.3972%" y="127.50"></text></g><g><title>check_item_well_formed (3,746,572 samples, 4.37%)</title><rect x="59.9696%" y="149" width="4.3676%" height="15" fill="rgb(240,125,3)"/><text x="60.2196%" y="159.50">check..</text></g><g><title>evaluate_obligation (89,461 samples, 0.10%)</title><rect x="65.0800%" y="133" width="0.1043%" height="15" fill="rgb(205,98,50)"/><text x="65.3300%" y="143.50"></text></g><g><title>implied_outlives_bounds (97,922 samples, 0.11%)</title><rect x="65.1843%" y="133" width="0.1142%" height="15" fill="rgb(205,185,37)"/><text x="65.4343%" y="143.50"></text></g><g><title>param_env (97,843 samples, 0.11%)</title><rect x="65.3447%" y="133" width="0.1141%" height="15" fill="rgb(238,207,15)"/><text x="65.5947%" y="143.50"></text></g><g><title>analysis (55,328,326 samples, 64.50%)</title><rect x="1.0323%" y="197" width="64.5000%" height="15" fill="rgb(213,199,42)"/><text x="1.2823%" y="207.50">analysis</text></g><g><title>type_check_crate (36,722,438 samples, 42.81%)</title><rect x="22.7225%" y="181" width="42.8099%" height="15" fill="rgb(235,201,11)"/><text x="22.9725%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,028,291 samples, 11.69%)</title><rect x="53.8417%" y="165" width="11.6907%" height="15" fill="rgb(207,46,11)"/><text x="54.0917%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,025,152 samples, 1.20%)</title><rect x="64.3373%" y="149" width="1.1951%" height="15" fill="rgb(241,35,35)"/><text x="64.5873%" y="159.50"></text></g><g><title>codegen_crate (527,496 samples, 0.61%)</title><rect x="65.5462%" y="197" width="0.6149%" height="15" fill="rgb(243,32,47)"/><text x="65.7962%" y="207.50"></text></g><g><title>AST_validation (201,142 samples, 0.23%)</title><rect x="66.4288%" y="181" width="0.2345%" height="15" fill="rgb(247,202,23)"/><text x="66.6788%" y="191.50"></text></g><g><title>crate_injection (93,551 samples, 0.11%)</title><rect x="66.7593%" y="181" width="0.1091%" height="15" fill="rgb(219,102,11)"/><text x="67.0093%" y="191.50"></text></g><g><title>metadata_register_crate (806,898 samples, 0.94%)</title><rect x="84.3056%" y="149" width="0.9407%" height="15" fill="rgb(243,110,44)"/><text x="84.5556%" y="159.50"></text></g><g><title>metadata_register_crate (494,705 samples, 0.58%)</title><rect x="84.6696%" y="133" width="0.5767%" height="15" fill="rgb(222,74,54)"/><text x="84.9196%" y="143.50"></text></g><g><title>metadata_register_crate (163,511 samples, 0.19%)</title><rect x="85.0557%" y="117" width="0.1906%" height="15" fill="rgb(216,99,12)"/><text x="85.3057%" y="127.50"></text></g><g><title>macro_expand_crate (15,831,716 samples, 18.46%)</title><rect x="66.8684%" y="181" width="18.4561%" height="15" fill="rgb(226,22,26)"/><text x="67.1184%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (15,802,486 samples, 18.42%)</title><rect x="66.9024%" y="165" width="18.4220%" height="15" fill="rgb(217,163,10)"/><text x="67.1524%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (198,442 samples, 0.23%)</title><rect x="85.3310%" y="181" width="0.2313%" height="15" fill="rgb(213,25,53)"/><text x="85.5810%" y="191.50"></text></g><g><title>finalize_imports (170,751 samples, 0.20%)</title><rect x="85.5724%" y="165" width="0.1991%" height="15" fill="rgb(252,105,26)"/><text x="85.8224%" y="175.50"></text></g><g><title>finalize_macro_resolutions (110,291 samples, 0.13%)</title><rect x="85.7714%" y="165" width="0.1286%" height="15" fill="rgb(220,39,43)"/><text x="86.0214%" y="175.50"></text></g><g><title>late_resolve_crate (1,596,087 samples, 1.86%)</title><rect x="85.9000%" y="165" width="1.8607%" height="15" fill="rgb(229,68,48)"/><text x="86.1500%" y="175.50">l..</text></g><g><title>configure_and_expand (18,668,208 samples, 21.76%)</title><rect x="66.1612%" y="197" width="21.7628%" height="15" fill="rgb(252,8,32)"/><text x="66.4112%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,025,872 samples, 2.36%)</title><rect x="85.5623%" y="181" width="2.3617%" height="15" fill="rgb(223,20,43)"/><text x="85.8123%" y="191.50">re..</text></g><g><title>drop_ast (199,893 samples, 0.23%)</title><rect x="87.9240%" y="197" width="0.2330%" height="15" fill="rgb(229,81,49)"/><text x="88.1740%" y="207.50"></text></g><g><title>early_lint_checks (385,064 samples, 0.45%)</title><rect x="88.1772%" y="197" width="0.4489%" height="15" fill="rgb(236,28,36)"/><text x="88.4272%" y="207.50"></text></g><g><title>free_global_ctxt (1,895,741 samples, 2.21%)</title><rect x="88.6261%" y="197" width="2.2100%" height="15" fill="rgb(249,185,26)"/><text x="88.8761%" y="207.50">f..</text></g><g><title>generate_crate_metadata (712,828 samples, 0.83%)</title><rect x="90.8360%" y="197" width="0.8310%" height="15" fill="rgb(249,174,33)"/><text x="91.0860%" y="207.50"></text></g><g><title>hir_lowering (3,452,378 samples, 4.02%)</title><rect x="91.6670%" y="197" width="4.0247%" height="15" fill="rgb(233,201,37)"/><text x="91.9170%" y="207.50">hir_..</text></g><g><title>parse_crate (2,331,646 samples, 2.72%)</title><rect x="95.7355%" y="197" width="2.7182%" height="15" fill="rgb(221,78,26)"/><text x="95.9855%" y="207.50">pa..</text></g><g><title>prepare_outputs (326,903 samples, 0.38%)</title><rect x="98.4630%" y="197" width="0.3811%" height="15" fill="rgb(250,127,30)"/><text x="98.7130%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (495,436 samples, 0.58%)</title><rect x="98.8441%" y="197" width="0.5776%" height="15" fill="rgb(230,49,44)"/><text x="99.0941%" y="207.50"></text></g><g><title>setup_global_ctxt (170,312 samples, 0.20%)</title><rect x="99.4343%" y="197" width="0.1985%" height="15" fill="rgb(229,67,23)"/><text x="99.6843%" y="207.50"></text></g><g><title>all (85,780,294 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (85,780,294 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (314,953 samples, 0.37%)</title><rect x="99.6328%" y="197" width="0.3672%" height="15" fill="rgb(238,154,13)"/><text x="99.8828%" y="207.50"></text></g></svg></svg>