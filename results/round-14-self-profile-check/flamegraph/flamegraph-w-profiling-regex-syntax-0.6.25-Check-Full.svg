<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (6,088,517 samples, 0.26%)</title><rect x="22.4876%" y="149" width="0.2597%" height="15" fill="rgb(227,0,7)"/><text x="22.7376%" y="159.50"></text></g><g><title>evaluate_obligation (4,854,237 samples, 0.21%)</title><rect x="22.5402%" y="133" width="0.2070%" height="15" fill="rgb(217,0,24)"/><text x="22.7902%" y="143.50"></text></g><g><title>needs_drop_raw (8,197,236 samples, 0.35%)</title><rect x="22.3996%" y="165" width="0.3496%" height="15" fill="rgb(221,193,54)"/><text x="22.6496%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (3,378,560 samples, 0.14%)</title><rect x="22.8582%" y="149" width="0.1441%" height="15" fill="rgb(248,212,6)"/><text x="23.1082%" y="159.50"></text></g><g><title>resolve_instance (7,345,166 samples, 0.31%)</title><rect x="22.7513%" y="165" width="0.3133%" height="15" fill="rgb(208,68,35)"/><text x="23.0013%" y="175.50"></text></g><g><title>thir_body (22,933,419 samples, 0.98%)</title><rect x="23.0821%" y="165" width="0.9782%" height="15" fill="rgb(232,128,0)"/><text x="23.3321%" y="175.50"></text></g><g><title>mir_const (121,182,367 samples, 5.17%)</title><rect x="18.9044%" y="213" width="5.1688%" height="15" fill="rgb(207,160,47)"/><text x="19.1544%" y="223.50">mir_co..</text></g><g><title>unsafety_check_result (105,951,068 samples, 4.52%)</title><rect x="19.5540%" y="197" width="4.5192%" height="15" fill="rgb(228,23,34)"/><text x="19.8040%" y="207.50">unsaf..</text></g><g><title>mir_built (95,385,252 samples, 4.07%)</title><rect x="20.0047%" y="181" width="4.0685%" height="15" fill="rgb(218,30,26)"/><text x="20.2547%" y="191.50">mir_..</text></g><g><title>thir_body (34,324,009 samples, 1.46%)</title><rect x="25.9075%" y="149" width="1.4640%" height="15" fill="rgb(220,122,19)"/><text x="26.1575%" y="159.50"></text></g><g><title>lit_to_const (2,767,228 samples, 0.12%)</title><rect x="27.2535%" y="133" width="0.1180%" height="15" fill="rgb(250,228,42)"/><text x="27.5035%" y="143.50"></text></g><g><title>mir_const_qualif (77,382,933 samples, 3.30%)</title><rect x="24.0732%" y="213" width="3.3006%" height="15" fill="rgb(240,193,28)"/><text x="24.3232%" y="223.50">mir..</text></g><g><title>mir_const (74,393,367 samples, 3.17%)</title><rect x="24.2007%" y="197" width="3.1731%" height="15" fill="rgb(216,20,37)"/><text x="24.4507%" y="207.50">mir..</text></g><g><title>unsafety_check_result (70,962,226 samples, 3.03%)</title><rect x="24.3470%" y="181" width="3.0268%" height="15" fill="rgb(206,188,39)"/><text x="24.5970%" y="191.50">uns..</text></g><g><title>mir_built (69,167,933 samples, 2.95%)</title><rect x="24.4236%" y="165" width="2.9502%" height="15" fill="rgb(217,207,13)"/><text x="24.6736%" y="175.50">mir..</text></g><g><title>mir_promoted (242,811,570 samples, 10.36%)</title><rect x="17.0234%" y="229" width="10.3567%" height="15" fill="rgb(231,73,38)"/><text x="17.2734%" y="239.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (6,054,584 samples, 0.26%)</title><rect x="27.3805%" y="229" width="0.2582%" height="15" fill="rgb(225,20,46)"/><text x="27.6305%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (6,148,233 samples, 0.26%)</title><rect x="27.6387%" y="229" width="0.2622%" height="15" fill="rgb(210,31,41)"/><text x="27.8887%" y="239.50"></text></g><g><title>normalize_projection_ty (3,938,985 samples, 0.17%)</title><rect x="27.7329%" y="213" width="0.1680%" height="15" fill="rgb(221,200,47)"/><text x="27.9829%" y="223.50"></text></g><g><title>type_op_normalize_predicate (2,566,752 samples, 0.11%)</title><rect x="27.9010%" y="229" width="0.1095%" height="15" fill="rgb(226,26,5)"/><text x="28.1510%" y="239.50"></text></g><g><title>type_op_prove_predicate (27,479,606 samples, 1.17%)</title><rect x="28.0185%" y="229" width="1.1721%" height="15" fill="rgb(249,33,26)"/><text x="28.2685%" y="239.50"></text></g><g><title>MIR_borrow_checking (665,439,399 samples, 28.38%)</title><rect x="0.8091%" y="261" width="28.3832%" height="15" fill="rgb(235,183,28)"/><text x="1.0591%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (662,656,758 samples, 28.26%)</title><rect x="0.9278%" y="245" width="28.2645%" height="15" fill="rgb(221,5,38)"/><text x="1.1778%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (8,431,894 samples, 0.36%)</title><rect x="29.1923%" y="261" width="0.3596%" height="15" fill="rgb(247,18,42)"/><text x="29.4423%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,188,609 samples, 0.31%)</title><rect x="29.2453%" y="245" width="0.3066%" height="15" fill="rgb(241,131,45)"/><text x="29.4953%" y="255.50"></text></g><g><title>hir_module_items (3,567,787 samples, 0.15%)</title><rect x="29.5520%" y="261" width="0.1522%" height="15" fill="rgb(249,31,29)"/><text x="29.8020%" y="271.50"></text></g><g><title>codegen_fn_attrs (3,170,177 samples, 0.14%)</title><rect x="30.0718%" y="229" width="0.1352%" height="15" fill="rgb(225,111,53)"/><text x="30.3218%" y="239.50"></text></g><g><title>check_mod_attrs (11,697,351 samples, 0.50%)</title><rect x="29.7081%" y="245" width="0.4989%" height="15" fill="rgb(238,160,17)"/><text x="29.9581%" y="255.50"></text></g><g><title>check_mod_loops (2,501,805 samples, 0.11%)</title><rect x="30.3047%" y="245" width="0.1067%" height="15" fill="rgb(214,148,48)"/><text x="30.5547%" y="255.50"></text></g><g><title>lint_levels (6,390,642 samples, 0.27%)</title><rect x="30.5163%" y="229" width="0.2726%" height="15" fill="rgb(232,36,49)"/><text x="30.7663%" y="239.50"></text></g><g><title>lookup_deprecation_entry (2,679,908 samples, 0.11%)</title><rect x="30.7889%" y="229" width="0.1143%" height="15" fill="rgb(209,103,24)"/><text x="31.0389%" y="239.50"></text></g><g><title>stability_index (2,513,788 samples, 0.11%)</title><rect x="30.7960%" y="213" width="0.1072%" height="15" fill="rgb(229,88,8)"/><text x="31.0460%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (11,573,563 samples, 0.49%)</title><rect x="30.4197%" y="245" width="0.4937%" height="15" fill="rgb(213,181,19)"/><text x="30.6697%" y="255.50"></text></g><g><title>misc_checking_1 (28,974,314 samples, 1.24%)</title><rect x="29.7042%" y="261" width="1.2359%" height="15" fill="rgb(254,191,54)"/><text x="29.9542%" y="271.50"></text></g><g><title>check_mod_intrinsics (2,654,811 samples, 0.11%)</title><rect x="30.9420%" y="229" width="0.1132%" height="15" fill="rgb(241,83,37)"/><text x="31.1920%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (10,501,487 samples, 0.45%)</title><rect x="30.9402%" y="245" width="0.4479%" height="15" fill="rgb(233,36,39)"/><text x="31.1902%" y="255.50"></text></g><g><title>check_mod_liveness (7,804,364 samples, 0.33%)</title><rect x="31.0552%" y="229" width="0.3329%" height="15" fill="rgb(226,3,54)"/><text x="31.3052%" y="239.50"></text></g><g><title>misc_checking_2 (26,426,565 samples, 1.13%)</title><rect x="30.9400%" y="261" width="1.1272%" height="15" fill="rgb(245,192,40)"/><text x="31.1900%" y="271.50"></text></g><g><title>match_checking (15,921,508 samples, 0.68%)</title><rect x="31.3881%" y="245" width="0.6791%" height="15" fill="rgb(238,167,29)"/><text x="31.6381%" y="255.50"></text></g><g><title>check_match (15,104,290 samples, 0.64%)</title><rect x="31.4229%" y="229" width="0.6442%" height="15" fill="rgb(232,182,51)"/><text x="31.6729%" y="239.50"></text></g><g><title>check_private_in_public (5,631,253 samples, 0.24%)</title><rect x="32.0682%" y="245" width="0.2402%" height="15" fill="rgb(231,60,39)"/><text x="32.3182%" y="255.50"></text></g><g><title>death_checking (9,207,844 samples, 0.39%)</title><rect x="32.3084%" y="245" width="0.3927%" height="15" fill="rgb(208,69,12)"/><text x="32.5584%" y="255.50"></text></g><g><title>mir_for_ctfe (4,321,315 samples, 0.18%)</title><rect x="37.6133%" y="101" width="0.1843%" height="15" fill="rgb(235,93,37)"/><text x="37.8633%" y="111.50"></text></g><g><title>promoted_mir (7,973,281 samples, 0.34%)</title><rect x="37.7976%" y="101" width="0.3401%" height="15" fill="rgb(213,116,39)"/><text x="38.0476%" y="111.50"></text></g><g><title>eval_to_const_value_raw (173,791,444 samples, 7.41%)</title><rect x="34.6215%" y="149" width="7.4128%" height="15" fill="rgb(222,207,29)"/><text x="34.8715%" y="159.50">eval_to_co..</text></g><g><title>eval_to_const_value_raw (173,533,033 samples, 7.40%)</title><rect x="34.6326%" y="133" width="7.4018%" height="15" fill="rgb(206,96,30)"/><text x="34.8826%" y="143.50">eval_to_co..</text></g><g><title>eval_to_allocation_raw (173,072,809 samples, 7.38%)</title><rect x="34.6522%" y="117" width="7.3821%" height="15" fill="rgb(218,138,4)"/><text x="34.9022%" y="127.50">eval_to_al..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (91,355,144 samples, 3.90%)</title><rect x="38.1377%" y="101" width="3.8966%" height="15" fill="rgb(250,191,14)"/><text x="38.3877%" y="111.50">try_..</text></g><g><title>eval_to_const_value_raw (90,328,985 samples, 3.85%)</title><rect x="38.1815%" y="85" width="3.8528%" height="15" fill="rgb(239,60,40)"/><text x="38.4315%" y="95.50">eval..</text></g><g><title>eval_to_const_value_raw (89,890,619 samples, 3.83%)</title><rect x="38.2002%" y="69" width="3.8341%" height="15" fill="rgb(206,27,48)"/><text x="38.4502%" y="79.50">eval..</text></g><g><title>eval_to_allocation_raw (89,197,238 samples, 3.80%)</title><rect x="38.2298%" y="53" width="3.8046%" height="15" fill="rgb(225,35,8)"/><text x="38.4798%" y="63.50">eval..</text></g><g><title>promoted_mir (26,229,767 samples, 1.12%)</title><rect x="40.9155%" y="37" width="1.1188%" height="15" fill="rgb(250,213,24)"/><text x="41.1655%" y="47.50"></text></g><g><title>eval_to_const_value_raw (204,579,636 samples, 8.73%)</title><rect x="33.3205%" y="213" width="8.7260%" height="15" fill="rgb(247,123,22)"/><text x="33.5705%" y="223.50">eval_to_cons..</text></g><g><title>eval_to_const_value_raw (204,567,496 samples, 8.73%)</title><rect x="33.3210%" y="197" width="8.7255%" height="15" fill="rgb(231,138,38)"/><text x="33.5710%" y="207.50">eval_to_cons..</text></g><g><title>eval_to_allocation_raw (204,549,266 samples, 8.72%)</title><rect x="33.3218%" y="181" width="8.7247%" height="15" fill="rgb(231,145,46)"/><text x="33.5718%" y="191.50">eval_to_allo..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (175,469,976 samples, 7.48%)</title><rect x="34.5621%" y="165" width="7.4844%" height="15" fill="rgb(251,118,11)"/><text x="34.8121%" y="175.50">try_normal..</text></g><g><title>crate_lints (222,511,467 samples, 9.49%)</title><rect x="32.7013%" y="229" width="9.4908%" height="15" fill="rgb(217,147,25)"/><text x="32.9513%" y="239.50">crate_lints</text></g><g><title>lint_checking (247,774,510 samples, 10.57%)</title><rect x="32.7011%" y="245" width="10.5684%" height="15" fill="rgb(247,81,37)"/><text x="32.9511%" y="255.50">lint_checking</text></g><g><title>module_lints (25,259,103 samples, 1.08%)</title><rect x="42.1921%" y="229" width="1.0774%" height="15" fill="rgb(209,12,38)"/><text x="42.4421%" y="239.50"></text></g><g><title>lint_mod (25,227,253 samples, 1.08%)</title><rect x="42.1935%" y="213" width="1.0760%" height="15" fill="rgb(227,1,9)"/><text x="42.4435%" y="223.50"></text></g><g><title>privacy_access_levels (6,771,215 samples, 0.29%)</title><rect x="43.2695%" y="245" width="0.2888%" height="15" fill="rgb(248,47,43)"/><text x="43.5195%" y="255.50"></text></g><g><title>privacy_checking_modules (26,932,971 samples, 1.15%)</title><rect x="43.5583%" y="245" width="1.1488%" height="15" fill="rgb(221,10,30)"/><text x="43.8083%" y="255.50"></text></g><g><title>check_mod_privacy (26,904,951 samples, 1.15%)</title><rect x="43.5595%" y="229" width="1.1476%" height="15" fill="rgb(210,229,1)"/><text x="43.8095%" y="239.50"></text></g><g><title>misc_checking_3 (296,536,395 samples, 12.65%)</title><rect x="32.0672%" y="261" width="12.6483%" height="15" fill="rgb(222,148,37)"/><text x="32.3172%" y="271.50">misc_checking_3</text></g><g><title>impl_parent (3,062,599 samples, 0.13%)</title><rect x="45.0268%" y="197" width="0.1306%" height="15" fill="rgb(234,67,33)"/><text x="45.2768%" y="207.50"></text></g><g><title>impl_trait_ref (6,651,542 samples, 0.28%)</title><rect x="45.1574%" y="197" width="0.2837%" height="15" fill="rgb(247,98,35)"/><text x="45.4074%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,001,045 samples, 0.21%)</title><rect x="45.2278%" y="181" width="0.2133%" height="15" fill="rgb(247,138,52)"/><text x="45.4778%" y="191.50"></text></g><g><title>coherent_trait (17,344,763 samples, 0.74%)</title><rect x="44.7649%" y="229" width="0.7398%" height="15" fill="rgb(213,79,30)"/><text x="45.0149%" y="239.50"></text></g><g><title>specialization_graph_of (16,465,694 samples, 0.70%)</title><rect x="44.8024%" y="213" width="0.7023%" height="15" fill="rgb(246,177,23)"/><text x="45.0524%" y="223.50"></text></g><g><title>coherence_checking (17,942,740 samples, 0.77%)</title><rect x="44.7631%" y="245" width="0.7653%" height="15" fill="rgb(230,62,27)"/><text x="45.0131%" y="255.50"></text></g><g><title>dropck_outlives (2,774,555 samples, 0.12%)</title><rect x="61.5160%" y="197" width="0.1183%" height="15" fill="rgb(216,154,8)"/><text x="61.7660%" y="207.50"></text></g><g><title>eval_to_const_value_raw (2,637,239 samples, 0.11%)</title><rect x="61.6344%" y="197" width="0.1125%" height="15" fill="rgb(244,35,45)"/><text x="61.8844%" y="207.50"></text></g><g><title>eval_to_allocation_raw (2,631,569 samples, 0.11%)</title><rect x="61.6346%" y="181" width="0.1122%" height="15" fill="rgb(251,115,12)"/><text x="61.8846%" y="191.50"></text></g><g><title>specializes (2,948,997 samples, 0.13%)</title><rect x="62.5846%" y="181" width="0.1258%" height="15" fill="rgb(240,54,50)"/><text x="62.8346%" y="191.50"></text></g><g><title>evaluate_obligation (23,367,461 samples, 1.00%)</title><rect x="61.7469%" y="197" width="0.9967%" height="15" fill="rgb(233,84,52)"/><text x="61.9969%" y="207.50"></text></g><g><title>method_autoderef_steps (3,582,534 samples, 0.15%)</title><rect x="62.8829%" y="197" width="0.1528%" height="15" fill="rgb(207,117,47)"/><text x="63.1329%" y="207.50"></text></g><g><title>evaluate_obligation (4,017,271 samples, 0.17%)</title><rect x="65.2215%" y="181" width="0.1713%" height="15" fill="rgb(249,43,39)"/><text x="65.4715%" y="191.50"></text></g><g><title>typeck (55,362,249 samples, 2.36%)</title><rect x="63.1562%" y="197" width="2.3614%" height="15" fill="rgb(209,38,44)"/><text x="63.4062%" y="207.50">ty..</text></g><g><title>item_bodies_checking (468,678,318 samples, 19.99%)</title><rect x="45.5563%" y="245" width="19.9907%" height="15" fill="rgb(236,212,23)"/><text x="45.8063%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (468,674,508 samples, 19.99%)</title><rect x="45.5564%" y="229" width="19.9905%" height="15" fill="rgb(242,79,21)"/><text x="45.8064%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (466,909,633 samples, 19.92%)</title><rect x="45.6317%" y="213" width="19.9152%" height="15" fill="rgb(211,96,35)"/><text x="45.8817%" y="223.50">typeck</text></g><g><title>mir_built (8,147,452 samples, 0.35%)</title><rect x="66.2664%" y="133" width="0.3475%" height="15" fill="rgb(253,215,40)"/><text x="66.5164%" y="143.50"></text></g><g><title>typeck (7,224,842 samples, 0.31%)</title><rect x="66.3058%" y="117" width="0.3082%" height="15" fill="rgb(211,81,21)"/><text x="66.5558%" y="127.50"></text></g><g><title>mir_const (9,221,683 samples, 0.39%)</title><rect x="66.2345%" y="165" width="0.3933%" height="15" fill="rgb(208,190,38)"/><text x="66.4845%" y="175.50"></text></g><g><title>unsafety_check_result (8,628,307 samples, 0.37%)</title><rect x="66.2598%" y="149" width="0.3680%" height="15" fill="rgb(235,213,38)"/><text x="66.5098%" y="159.50"></text></g><g><title>thir_body (7,208,171 samples, 0.31%)</title><rect x="67.1609%" y="101" width="0.3075%" height="15" fill="rgb(237,122,38)"/><text x="67.4109%" y="111.50"></text></g><g><title>mir_const (73,923,435 samples, 3.15%)</title><rect x="66.6526%" y="149" width="3.1531%" height="15" fill="rgb(244,218,35)"/><text x="66.9026%" y="159.50">mir..</text></g><g><title>unsafety_check_result (72,943,115 samples, 3.11%)</title><rect x="66.6944%" y="133" width="3.1113%" height="15" fill="rgb(240,68,47)"/><text x="66.9444%" y="143.50">uns..</text></g><g><title>mir_built (72,148,526 samples, 3.08%)</title><rect x="66.7283%" y="117" width="3.0774%" height="15" fill="rgb(210,16,53)"/><text x="66.9783%" y="127.50">mir..</text></g><g><title>typeck (54,797,161 samples, 2.34%)</title><rect x="67.4684%" y="101" width="2.3373%" height="15" fill="rgb(235,124,12)"/><text x="67.7184%" y="111.50">t..</text></g><g><title>mir_const_qualif (74,506,223 samples, 3.18%)</title><rect x="66.6278%" y="165" width="3.1779%" height="15" fill="rgb(224,169,11)"/><text x="66.8778%" y="175.50">mir..</text></g><g><title>mir_promoted (83,924,739 samples, 3.58%)</title><rect x="66.2261%" y="181" width="3.5797%" height="15" fill="rgb(250,166,2)"/><text x="66.4761%" y="191.50">mir_..</text></g><g><title>type_of (88,752,281 samples, 3.79%)</title><rect x="66.0622%" y="213" width="3.7856%" height="15" fill="rgb(242,216,29)"/><text x="66.3122%" y="223.50">type..</text></g><g><title>mir_borrowck (88,710,501 samples, 3.78%)</title><rect x="66.0640%" y="197" width="3.7838%" height="15" fill="rgb(230,116,27)"/><text x="66.3140%" y="207.50">mir_..</text></g><g><title>item_types_checking (237,626,327 samples, 10.14%)</title><rect x="65.5469%" y="245" width="10.1355%" height="15" fill="rgb(228,99,48)"/><text x="65.7969%" y="255.50">item_types_chec..</text></g><g><title>check_mod_item_types (237,593,956 samples, 10.13%)</title><rect x="65.5483%" y="229" width="10.1342%" height="15" fill="rgb(253,11,6)"/><text x="65.7983%" y="239.50">check_mod_item_..</text></g><g><title>typeck (136,794,427 samples, 5.83%)</title><rect x="69.8478%" y="213" width="5.8347%" height="15" fill="rgb(247,143,39)"/><text x="70.0978%" y="223.50">typeck</text></g><g><title>fn_sig (3,290,536 samples, 0.14%)</title><rect x="75.8830%" y="213" width="0.1404%" height="15" fill="rgb(236,97,10)"/><text x="76.1330%" y="223.50"></text></g><g><title>named_region_map (3,503,084 samples, 0.15%)</title><rect x="76.1479%" y="197" width="0.1494%" height="15" fill="rgb(233,208,19)"/><text x="76.3979%" y="207.50"></text></g><g><title>resolve_lifetimes (3,183,172 samples, 0.14%)</title><rect x="76.1616%" y="181" width="0.1358%" height="15" fill="rgb(216,164,2)"/><text x="76.4116%" y="191.50"></text></g><g><title>generics_of (6,606,919 samples, 0.28%)</title><rect x="76.0233%" y="213" width="0.2818%" height="15" fill="rgb(220,129,5)"/><text x="76.2733%" y="223.50"></text></g><g><title>predicates_of (5,918,543 samples, 0.25%)</title><rect x="76.3247%" y="213" width="0.2524%" height="15" fill="rgb(242,17,10)"/><text x="76.5747%" y="223.50"></text></g><g><title>predicates_defined_on (5,033,552 samples, 0.21%)</title><rect x="76.3625%" y="197" width="0.2147%" height="15" fill="rgb(242,107,0)"/><text x="76.6125%" y="207.50"></text></g><g><title>type_collecting (23,969,608 samples, 1.02%)</title><rect x="75.6830%" y="245" width="1.0224%" height="15" fill="rgb(251,28,31)"/><text x="75.9330%" y="255.50"></text></g><g><title>collect_mod_item_types (23,932,578 samples, 1.02%)</title><rect x="75.6845%" y="229" width="1.0208%" height="15" fill="rgb(233,223,10)"/><text x="75.9345%" y="239.50"></text></g><g><title>type_of (2,951,710 samples, 0.13%)</title><rect x="76.5794%" y="213" width="0.1259%" height="15" fill="rgb(215,21,27)"/><text x="76.8294%" y="223.50"></text></g><g><title>evaluate_obligation (3,196,583 samples, 0.14%)</title><rect x="77.8160%" y="213" width="0.1363%" height="15" fill="rgb(232,23,21)"/><text x="78.0660%" y="223.50"></text></g><g><title>param_env (3,430,918 samples, 0.15%)</title><rect x="78.0190%" y="213" width="0.1463%" height="15" fill="rgb(244,5,23)"/><text x="78.2690%" y="223.50"></text></g><g><title>region_scope_tree (7,063,767 samples, 0.30%)</title><rect x="78.1676%" y="213" width="0.3013%" height="15" fill="rgb(226,81,46)"/><text x="78.4176%" y="223.50"></text></g><g><title>check_impl_item_well_formed (37,645,246 samples, 1.61%)</title><rect x="76.8644%" y="229" width="1.6057%" height="15" fill="rgb(247,70,30)"/><text x="77.1144%" y="239.50"></text></g><g><title>evaluate_obligation (4,191,759 samples, 0.18%)</title><rect x="79.1516%" y="213" width="0.1788%" height="15" fill="rgb(212,68,19)"/><text x="79.4016%" y="223.50"></text></g><g><title>param_env (4,025,166 samples, 0.17%)</title><rect x="79.3625%" y="213" width="0.1717%" height="15" fill="rgb(240,187,13)"/><text x="79.6125%" y="223.50"></text></g><g><title>region_scope_tree (7,073,002 samples, 0.30%)</title><rect x="79.5390%" y="213" width="0.3017%" height="15" fill="rgb(223,113,26)"/><text x="79.7890%" y="223.50"></text></g><g><title>check_item_well_formed (32,759,166 samples, 1.40%)</title><rect x="78.4701%" y="229" width="1.3973%" height="15" fill="rgb(206,192,2)"/><text x="78.7201%" y="239.50"></text></g><g><title>analysis (1,865,380,671 samples, 79.56%)</title><rect x="0.3959%" y="277" width="79.5647%" height="15" fill="rgb(241,108,4)"/><text x="0.6459%" y="287.50">analysis</text></g><g><title>type_check_crate (826,315,016 samples, 35.25%)</title><rect x="44.7154%" y="261" width="35.2451%" height="15" fill="rgb(247,173,49)"/><text x="44.9654%" y="271.50">type_check_crate</text></g><g><title>wf_checking (76,082,260 samples, 3.25%)</title><rect x="76.7154%" y="245" width="3.2452%" height="15" fill="rgb(224,114,35)"/><text x="76.9654%" y="255.50">wf_..</text></g><g><title>AST_validation (4,337,278 samples, 0.18%)</title><rect x="79.9902%" y="261" width="0.1850%" height="15" fill="rgb(245,159,27)"/><text x="80.2402%" y="271.50"></text></g><g><title>complete_gated_feature_checking (3,573,330 samples, 0.15%)</title><rect x="80.1752%" y="261" width="0.1524%" height="15" fill="rgb(245,172,44)"/><text x="80.4252%" y="271.50"></text></g><g><title>macro_expand_crate (214,271,876 samples, 9.14%)</title><rect x="80.3314%" y="261" width="9.1394%" height="15" fill="rgb(236,23,11)"/><text x="80.5814%" y="271.50">macro_expand_..</text></g><g><title>expand_crate (214,253,796 samples, 9.14%)</title><rect x="80.3321%" y="245" width="9.1386%" height="15" fill="rgb(205,117,38)"/><text x="80.5821%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (8,625,418 samples, 0.37%)</title><rect x="89.1029%" y="229" width="0.3679%" height="15" fill="rgb(237,72,25)"/><text x="89.3529%" y="239.50"></text></g><g><title>late_resolve_crate (25,653,547 samples, 1.09%)</title><rect x="89.5406%" y="245" width="1.0942%" height="15" fill="rgb(244,70,9)"/><text x="89.7906%" y="255.50"></text></g><g><title>resolve_check_unused (3,466,559 samples, 0.15%)</title><rect x="90.6434%" y="245" width="0.1479%" height="15" fill="rgb(217,125,39)"/><text x="90.8934%" y="255.50"></text></g><g><title>resolve_postprocess (3,291,377 samples, 0.14%)</title><rect x="90.7914%" y="245" width="0.1404%" height="15" fill="rgb(235,36,10)"/><text x="91.0414%" y="255.50"></text></g><g><title>configure_and_expand (256,755,121 samples, 10.95%)</title><rect x="79.9804%" y="277" width="10.9515%" height="15" fill="rgb(251,123,47)"/><text x="80.2304%" y="287.50">configure_and_ex..</text></g><g><title>resolve_crate (34,098,631 samples, 1.45%)</title><rect x="89.4774%" y="261" width="1.4544%" height="15" fill="rgb(221,13,13)"/><text x="89.7274%" y="271.50"></text></g><g><title>drop_ast (6,892,368 samples, 0.29%)</title><rect x="90.9318%" y="277" width="0.2940%" height="15" fill="rgb(238,131,9)"/><text x="91.1818%" y="287.50"></text></g><g><title>early_lint_checks (16,779,048 samples, 0.72%)</title><rect x="91.2268%" y="277" width="0.7157%" height="15" fill="rgb(211,50,8)"/><text x="91.4768%" y="287.50"></text></g><g><title>free_global_ctxt (22,767,615 samples, 0.97%)</title><rect x="91.9425%" y="277" width="0.9711%" height="15" fill="rgb(245,182,24)"/><text x="92.1925%" y="287.50"></text></g><g><title>generate_crate_metadata (79,830,332 samples, 3.41%)</title><rect x="92.9136%" y="277" width="3.4050%" height="15" fill="rgb(242,14,37)"/><text x="93.1636%" y="287.50">gen..</text></g><g><title>hir_lowering (76,297,852 samples, 3.25%)</title><rect x="96.3186%" y="277" width="3.2544%" height="15" fill="rgb(246,228,12)"/><text x="96.5686%" y="287.50">hir..</text></g><g><title>self_profile_alloc_query_strings (4,177,296 samples, 0.18%)</title><rect x="99.6466%" y="277" width="0.1782%" height="15" fill="rgb(213,55,15)"/><text x="99.8966%" y="287.50"></text></g><g><title>all (2,344,484,126 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (2,344,484,126 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (3,914,574 samples, 0.17%)</title><rect x="99.8330%" y="277" width="0.1670%" height="15" fill="rgb(209,121,21)"/><text x="100.0830%" y="287.50"></text></g></svg></svg>