<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (4,651,682 samples, 0.23%)</title><rect x="18.4328%" y="149" width="0.2315%" height="15" fill="rgb(227,0,7)"/><text x="18.6828%" y="159.50"></text></g><g><title>param_env (2,346,256 samples, 0.12%)</title><rect x="20.5617%" y="117" width="0.1168%" height="15" fill="rgb(217,0,24)"/><text x="20.8117%" y="127.50"></text></g><g><title>item_attrs (2,131,475 samples, 0.11%)</title><rect x="21.3643%" y="85" width="0.1061%" height="15" fill="rgb(221,193,54)"/><text x="21.6143%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,051,305 samples, 0.10%)</title><rect x="21.3683%" y="69" width="0.1021%" height="15" fill="rgb(248,212,6)"/><text x="21.6183%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,959,001 samples, 0.15%)</title><rect x="21.3290%" y="101" width="0.1473%" height="15" fill="rgb(208,68,35)"/><text x="21.5790%" y="111.50"></text></g><g><title>adt_drop_tys (2,445,777 samples, 0.12%)</title><rect x="24.9653%" y="69" width="0.1217%" height="15" fill="rgb(232,128,0)"/><text x="25.2153%" y="79.50"></text></g><g><title>is_copy_raw (9,525,692 samples, 0.47%)</title><rect x="25.0875%" y="69" width="0.4741%" height="15" fill="rgb(207,160,47)"/><text x="25.3375%" y="79.50"></text></g><g><title>evaluate_obligation (7,126,569 samples, 0.35%)</title><rect x="25.2069%" y="53" width="0.3547%" height="15" fill="rgb(228,23,34)"/><text x="25.4569%" y="63.50"></text></g><g><title>needs_drop_raw (14,314,231 samples, 0.71%)</title><rect x="24.8679%" y="85" width="0.7124%" height="15" fill="rgb(218,30,26)"/><text x="25.1179%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (17,302,094 samples, 0.86%)</title><rect x="25.7852%" y="69" width="0.8611%" height="15" fill="rgb(220,122,19)"/><text x="26.0352%" y="79.50"></text></g><g><title>evaluate_obligation (3,378,881 samples, 0.17%)</title><rect x="26.4781%" y="53" width="0.1682%" height="15" fill="rgb(250,228,42)"/><text x="26.7281%" y="63.50"></text></g><g><title>resolve_instance (23,764,422 samples, 1.18%)</title><rect x="25.5822%" y="85" width="1.1828%" height="15" fill="rgb(240,193,28)"/><text x="25.8322%" y="95.50"></text></g><g><title>thir_body (27,132,157 samples, 1.35%)</title><rect x="26.8033%" y="85" width="1.3504%" height="15" fill="rgb(216,20,37)"/><text x="27.0533%" y="95.50"></text></g><g><title>mir_const (170,378,444 samples, 8.48%)</title><rect x="19.7052%" y="133" width="8.4798%" height="15" fill="rgb(206,188,39)"/><text x="19.9552%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (150,823,495 samples, 7.51%)</title><rect x="20.6785%" y="117" width="7.5066%" height="15" fill="rgb(217,207,13)"/><text x="20.9285%" y="127.50">unsafety_c..</text></g><g><title>mir_built (134,794,225 samples, 6.71%)</title><rect x="21.4763%" y="101" width="6.7088%" height="15" fill="rgb(231,73,38)"/><text x="21.7263%" y="111.50">mir_built</text></g><g><title>mir_const (5,622,174 samples, 0.28%)</title><rect x="28.3112%" y="117" width="0.2798%" height="15" fill="rgb(225,20,46)"/><text x="28.5612%" y="127.50"></text></g><g><title>unsafety_check_result (4,308,988 samples, 0.21%)</title><rect x="28.3766%" y="101" width="0.2145%" height="15" fill="rgb(210,31,41)"/><text x="28.6266%" y="111.50"></text></g><g><title>mir_built (3,849,965 samples, 0.19%)</title><rect x="28.3994%" y="85" width="0.1916%" height="15" fill="rgb(221,200,47)"/><text x="28.6494%" y="95.50"></text></g><g><title>mir_const_qualif (8,223,727 samples, 0.41%)</title><rect x="28.1851%" y="133" width="0.4093%" height="15" fill="rgb(226,26,5)"/><text x="28.4351%" y="143.50"></text></g><g><title>mir_promoted (197,247,682 samples, 9.82%)</title><rect x="18.7773%" y="149" width="9.8171%" height="15" fill="rgb(249,33,26)"/><text x="19.0273%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (10,754,368 samples, 0.54%)</title><rect x="28.5966%" y="149" width="0.5353%" height="15" fill="rgb(235,183,28)"/><text x="28.8466%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (23,324,619 samples, 1.16%)</title><rect x="29.1318%" y="149" width="1.1609%" height="15" fill="rgb(221,5,38)"/><text x="29.3818%" y="159.50"></text></g><g><title>normalize_projection_ty (9,109,246 samples, 0.45%)</title><rect x="29.8393%" y="133" width="0.4534%" height="15" fill="rgb(247,18,42)"/><text x="30.0893%" y="143.50"></text></g><g><title>type_op_normalize_predicate (22,102,697 samples, 1.10%)</title><rect x="30.2929%" y="149" width="1.1001%" height="15" fill="rgb(241,131,45)"/><text x="30.5429%" y="159.50"></text></g><g><title>normalize_projection_ty (10,244,154 samples, 0.51%)</title><rect x="30.8831%" y="133" width="0.5099%" height="15" fill="rgb(249,31,29)"/><text x="31.1331%" y="143.50"></text></g><g><title>type_op_prove_predicate (73,565,465 samples, 3.66%)</title><rect x="31.4505%" y="149" width="3.6614%" height="15" fill="rgb(225,111,53)"/><text x="31.7005%" y="159.50">type..</text></g><g><title>MIR_borrow_checking (699,858,520 samples, 34.83%)</title><rect x="0.2829%" y="181" width="34.8324%" height="15" fill="rgb(238,160,17)"/><text x="0.5329%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (696,855,350 samples, 34.68%)</title><rect x="0.4323%" y="165" width="34.6829%" height="15" fill="rgb(214,148,48)"/><text x="0.6823%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (4,109,706 samples, 0.20%)</title><rect x="35.1153%" y="181" width="0.2045%" height="15" fill="rgb(232,36,49)"/><text x="35.3653%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,925,942 samples, 0.15%)</title><rect x="35.1742%" y="165" width="0.1456%" height="15" fill="rgb(209,103,24)"/><text x="35.4242%" y="175.50"></text></g><g><title>hir_module_items (2,929,081 samples, 0.15%)</title><rect x="35.3198%" y="181" width="0.1458%" height="15" fill="rgb(229,88,8)"/><text x="35.5698%" y="191.50"></text></g><g><title>codegen_fn_attrs (4,043,938 samples, 0.20%)</title><rect x="35.6922%" y="149" width="0.2013%" height="15" fill="rgb(213,181,19)"/><text x="35.9422%" y="159.50"></text></g><g><title>should_inherit_track_caller (2,802,261 samples, 0.14%)</title><rect x="35.7540%" y="133" width="0.1395%" height="15" fill="rgb(254,191,54)"/><text x="36.0040%" y="143.50"></text></g><g><title>check_mod_attrs (8,504,543 samples, 0.42%)</title><rect x="35.4702%" y="165" width="0.4233%" height="15" fill="rgb(241,83,37)"/><text x="35.7202%" y="175.50"></text></g><g><title>lint_levels (4,279,277 samples, 0.21%)</title><rect x="36.1844%" y="149" width="0.2130%" height="15" fill="rgb(233,36,39)"/><text x="36.4344%" y="159.50"></text></g><g><title>lookup_deprecation_entry (2,188,923 samples, 0.11%)</title><rect x="36.3974%" y="149" width="0.1089%" height="15" fill="rgb(226,3,54)"/><text x="36.6474%" y="159.50"></text></g><g><title>stability_index (2,012,162 samples, 0.10%)</title><rect x="36.4062%" y="133" width="0.1001%" height="15" fill="rgb(245,192,40)"/><text x="36.6562%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (8,731,864 samples, 0.43%)</title><rect x="36.0848%" y="165" width="0.4346%" height="15" fill="rgb(238,167,29)"/><text x="36.3348%" y="175.50"></text></g><g><title>misc_checking_1 (21,584,138 samples, 1.07%)</title><rect x="35.4656%" y="181" width="1.0743%" height="15" fill="rgb(232,182,51)"/><text x="35.7156%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (11,992,522 samples, 0.60%)</title><rect x="36.5400%" y="165" width="0.5969%" height="15" fill="rgb(231,60,39)"/><text x="36.7900%" y="175.50"></text></g><g><title>check_mod_liveness (10,188,165 samples, 0.51%)</title><rect x="36.6298%" y="149" width="0.5071%" height="15" fill="rgb(208,69,12)"/><text x="36.8798%" y="159.50"></text></g><g><title>type_uninhabited_from (2,460,669 samples, 0.12%)</title><rect x="37.0144%" y="133" width="0.1225%" height="15" fill="rgb(235,93,37)"/><text x="37.2644%" y="143.50"></text></g><g><title>misc_checking_2 (26,249,050 samples, 1.31%)</title><rect x="36.5399%" y="181" width="1.3064%" height="15" fill="rgb(213,116,39)"/><text x="36.7899%" y="191.50"></text></g><g><title>match_checking (14,253,148 samples, 0.71%)</title><rect x="37.1369%" y="165" width="0.7094%" height="15" fill="rgb(222,207,29)"/><text x="37.3869%" y="175.50"></text></g><g><title>check_match (13,397,073 samples, 0.67%)</title><rect x="37.1795%" y="149" width="0.6668%" height="15" fill="rgb(206,96,30)"/><text x="37.4295%" y="159.50"></text></g><g><title>check_private_in_public (4,124,016 samples, 0.21%)</title><rect x="37.8474%" y="165" width="0.2053%" height="15" fill="rgb(218,138,4)"/><text x="38.0974%" y="175.50"></text></g><g><title>death_checking (7,358,631 samples, 0.37%)</title><rect x="38.0527%" y="165" width="0.3662%" height="15" fill="rgb(250,191,14)"/><text x="38.3027%" y="175.50"></text></g><g><title>param_env (2,739,847 samples, 0.14%)</title><rect x="38.9237%" y="133" width="0.1364%" height="15" fill="rgb(239,60,40)"/><text x="39.1737%" y="143.50"></text></g><g><title>crate_lints (14,714,042 samples, 0.73%)</title><rect x="38.4191%" y="149" width="0.7323%" height="15" fill="rgb(206,27,48)"/><text x="38.6691%" y="159.50"></text></g><g><title>lint_checking (26,455,672 samples, 1.32%)</title><rect x="38.4189%" y="165" width="1.3167%" height="15" fill="rgb(225,35,8)"/><text x="38.6689%" y="175.50"></text></g><g><title>module_lints (11,737,990 samples, 0.58%)</title><rect x="39.1514%" y="149" width="0.5842%" height="15" fill="rgb(250,213,24)"/><text x="39.4014%" y="159.50"></text></g><g><title>lint_mod (11,704,820 samples, 0.58%)</title><rect x="39.1531%" y="133" width="0.5826%" height="15" fill="rgb(247,123,22)"/><text x="39.4031%" y="143.50"></text></g><g><title>privacy_access_levels (6,475,231 samples, 0.32%)</title><rect x="39.7357%" y="165" width="0.3223%" height="15" fill="rgb(231,138,38)"/><text x="39.9857%" y="175.50"></text></g><g><title>privacy_checking_modules (19,984,701 samples, 0.99%)</title><rect x="40.0579%" y="165" width="0.9947%" height="15" fill="rgb(231,145,46)"/><text x="40.3079%" y="175.50"></text></g><g><title>check_mod_privacy (19,955,350 samples, 0.99%)</title><rect x="40.0594%" y="149" width="0.9932%" height="15" fill="rgb(251,118,11)"/><text x="40.3094%" y="159.50"></text></g><g><title>misc_checking_3 (64,665,134 samples, 3.22%)</title><rect x="37.8463%" y="181" width="3.2184%" height="15" fill="rgb(217,147,25)"/><text x="38.0963%" y="191.50">mis..</text></g><g><title>impl_parent (4,584,461 samples, 0.23%)</title><rect x="41.5847%" y="117" width="0.2282%" height="15" fill="rgb(247,81,37)"/><text x="41.8347%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,557,043 samples, 0.13%)</title><rect x="41.6856%" y="101" width="0.1273%" height="15" fill="rgb(209,12,38)"/><text x="41.9356%" y="111.50"></text></g><g><title>impl_trait_ref (8,532,502 samples, 0.42%)</title><rect x="41.8131%" y="117" width="0.4247%" height="15" fill="rgb(227,1,9)"/><text x="42.0631%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,751,281 samples, 0.34%)</title><rect x="41.9017%" y="101" width="0.3360%" height="15" fill="rgb(248,47,43)"/><text x="42.1517%" y="111.50"></text></g><g><title>trait_impls_of (2,059,062 samples, 0.10%)</title><rect x="42.2431%" y="117" width="0.1025%" height="15" fill="rgb(221,10,30)"/><text x="42.4931%" y="127.50"></text></g><g><title>coherent_trait (28,400,545 samples, 1.41%)</title><rect x="41.1636%" y="149" width="1.4135%" height="15" fill="rgb(210,229,1)"/><text x="41.4136%" y="159.50"></text></g><g><title>specialization_graph_of (27,748,258 samples, 1.38%)</title><rect x="41.1961%" y="133" width="1.3810%" height="15" fill="rgb(222,148,37)"/><text x="41.4461%" y="143.50"></text></g><g><title>visible_parent_map (4,650,612 samples, 0.23%)</title><rect x="42.3457%" y="117" width="0.2315%" height="15" fill="rgb(234,67,33)"/><text x="42.5957%" y="127.50"></text></g><g><title>module_children (4,197,736 samples, 0.21%)</title><rect x="42.3682%" y="101" width="0.2089%" height="15" fill="rgb(247,98,35)"/><text x="42.6182%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (4,119,466 samples, 0.21%)</title><rect x="42.3721%" y="85" width="0.2050%" height="15" fill="rgb(247,138,52)"/><text x="42.6221%" y="95.50"></text></g><g><title>coherence_checking (29,136,943 samples, 1.45%)</title><rect x="41.1611%" y="165" width="1.4502%" height="15" fill="rgb(213,79,30)"/><text x="41.4111%" y="175.50"></text></g><g><title>dropck_outlives (4,388,165 samples, 0.22%)</title><rect x="59.9544%" y="117" width="0.2184%" height="15" fill="rgb(246,177,23)"/><text x="60.2044%" y="127.50"></text></g><g><title>specializes (3,324,281 samples, 0.17%)</title><rect x="61.1329%" y="101" width="0.1655%" height="15" fill="rgb(230,62,27)"/><text x="61.3829%" y="111.50"></text></g><g><title>param_env (2,010,829 samples, 0.10%)</title><rect x="61.1983%" y="85" width="0.1001%" height="15" fill="rgb(216,154,8)"/><text x="61.4483%" y="95.50"></text></g><g><title>evaluate_obligation (23,117,131 samples, 1.15%)</title><rect x="60.1728%" y="117" width="1.1506%" height="15" fill="rgb(244,35,45)"/><text x="60.4228%" y="127.50"></text></g><g><title>method_autoderef_steps (3,753,634 samples, 0.19%)</title><rect x="61.4255%" y="117" width="0.1868%" height="15" fill="rgb(251,115,12)"/><text x="61.6755%" y="127.50"></text></g><g><title>dropck_outlives (4,055,756 samples, 0.20%)</title><rect x="76.0003%" y="101" width="0.2019%" height="15" fill="rgb(240,54,50)"/><text x="76.2503%" y="111.50"></text></g><g><title>evaluate_obligation (26,854,919 samples, 1.34%)</title><rect x="76.2024%" y="101" width="1.3366%" height="15" fill="rgb(233,84,52)"/><text x="76.4524%" y="111.50"></text></g><g><title>evaluate_obligation (3,531,712 samples, 0.18%)</title><rect x="77.9836%" y="85" width="0.1758%" height="15" fill="rgb(207,117,47)"/><text x="78.2336%" y="95.50"></text></g><g><title>method_autoderef_steps (7,689,395 samples, 0.38%)</title><rect x="77.7782%" y="101" width="0.3827%" height="15" fill="rgb(249,43,39)"/><text x="78.0282%" y="111.50"></text></g><g><title>typeck (332,940,277 samples, 16.57%)</title><rect x="61.7243%" y="117" width="16.5706%" height="15" fill="rgb(209,38,44)"/><text x="61.9743%" y="127.50">typeck</text></g><g><title>item_bodies_checking (716,904,288 samples, 35.68%)</title><rect x="42.6365%" y="165" width="35.6808%" height="15" fill="rgb(236,212,23)"/><text x="42.8865%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (716,900,378 samples, 35.68%)</title><rect x="42.6367%" y="149" width="35.6806%" height="15" fill="rgb(242,79,21)"/><text x="42.8867%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (714,493,850 samples, 35.56%)</title><rect x="42.7565%" y="133" width="35.5608%" height="15" fill="rgb(211,96,35)"/><text x="43.0065%" y="143.50">typeck</text></g><g><title>mir_borrowck (3,747,241 samples, 0.19%)</title><rect x="79.3233%" y="101" width="0.1865%" height="15" fill="rgb(253,215,40)"/><text x="79.5733%" y="111.50"></text></g><g><title>mir_built (23,099,931 samples, 1.15%)</title><rect x="79.5851%" y="53" width="1.1497%" height="15" fill="rgb(211,81,21)"/><text x="79.8351%" y="63.50"></text></g><g><title>typeck (20,456,517 samples, 1.02%)</title><rect x="79.7167%" y="37" width="1.0181%" height="15" fill="rgb(208,190,38)"/><text x="79.9667%" y="47.50"></text></g><g><title>mir_const (25,503,627 samples, 1.27%)</title><rect x="79.5224%" y="85" width="1.2693%" height="15" fill="rgb(235,213,38)"/><text x="79.7724%" y="95.50"></text></g><g><title>unsafety_check_result (24,579,340 samples, 1.22%)</title><rect x="79.5684%" y="69" width="1.2233%" height="15" fill="rgb(237,122,38)"/><text x="79.8184%" y="79.50"></text></g><g><title>mir_promoted (25,788,191 samples, 1.28%)</title><rect x="79.5098%" y="101" width="1.2835%" height="15" fill="rgb(244,218,35)"/><text x="79.7598%" y="111.50"></text></g><g><title>type_of (43,632,189 samples, 2.17%)</title><rect x="78.8562%" y="133" width="2.1716%" height="15" fill="rgb(240,68,47)"/><text x="79.1062%" y="143.50">t..</text></g><g><title>mir_borrowck (43,539,769 samples, 2.17%)</title><rect x="78.8608%" y="117" width="2.1670%" height="15" fill="rgb(210,16,53)"/><text x="79.1108%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (2,880,959 samples, 0.14%)</title><rect x="80.8844%" y="101" width="0.1434%" height="15" fill="rgb(235,124,12)"/><text x="81.1344%" y="111.50"></text></g><g><title>item_types_checking (54,930,307 samples, 2.73%)</title><rect x="78.3173%" y="165" width="2.7339%" height="15" fill="rgb(224,169,11)"/><text x="78.5673%" y="175.50">it..</text></g><g><title>check_mod_item_types (54,895,636 samples, 2.73%)</title><rect x="78.3190%" y="149" width="2.7322%" height="15" fill="rgb(250,166,2)"/><text x="78.5690%" y="159.50">ch..</text></g><g><title>fn_sig (3,445,602 samples, 0.17%)</title><rect x="81.2293%" y="133" width="0.1715%" height="15" fill="rgb(242,216,29)"/><text x="81.4793%" y="143.50"></text></g><g><title>resolve_lifetimes (3,199,972 samples, 0.16%)</title><rect x="81.4829%" y="101" width="0.1593%" height="15" fill="rgb(230,116,27)"/><text x="81.7329%" y="111.50"></text></g><g><title>is_late_bound_map (3,312,493 samples, 0.16%)</title><rect x="81.4775%" y="117" width="0.1649%" height="15" fill="rgb(228,99,48)"/><text x="81.7275%" y="127.50"></text></g><g><title>named_region_map (2,147,065 samples, 0.11%)</title><rect x="81.6423%" y="117" width="0.1069%" height="15" fill="rgb(253,11,6)"/><text x="81.8923%" y="127.50"></text></g><g><title>generics_of (7,137,413 samples, 0.36%)</title><rect x="81.4008%" y="133" width="0.3552%" height="15" fill="rgb(247,143,39)"/><text x="81.6508%" y="143.50"></text></g><g><title>predicates_of (6,040,200 samples, 0.30%)</title><rect x="81.7707%" y="133" width="0.3006%" height="15" fill="rgb(236,97,10)"/><text x="82.0207%" y="143.50"></text></g><g><title>predicates_defined_on (5,356,516 samples, 0.27%)</title><rect x="81.8047%" y="117" width="0.2666%" height="15" fill="rgb(233,208,19)"/><text x="82.0547%" y="127.50"></text></g><g><title>inferred_outlives_of (2,033,446 samples, 0.10%)</title><rect x="81.9701%" y="101" width="0.1012%" height="15" fill="rgb(216,164,2)"/><text x="82.2201%" y="111.50"></text></g><g><title>type_collecting (21,797,681 samples, 1.08%)</title><rect x="81.0523%" y="165" width="1.0849%" height="15" fill="rgb(220,129,5)"/><text x="81.3023%" y="175.50"></text></g><g><title>collect_mod_item_types (21,763,121 samples, 1.08%)</title><rect x="81.0540%" y="149" width="1.0832%" height="15" fill="rgb(242,17,10)"/><text x="81.3040%" y="159.50"></text></g><g><title>evaluate_obligation (2,207,531 samples, 0.11%)</title><rect x="83.6129%" y="133" width="0.1099%" height="15" fill="rgb(242,107,0)"/><text x="83.8629%" y="143.50"></text></g><g><title>param_env (4,233,940 samples, 0.21%)</title><rect x="83.8443%" y="133" width="0.2107%" height="15" fill="rgb(251,28,31)"/><text x="84.0943%" y="143.50"></text></g><g><title>region_scope_tree (7,378,420 samples, 0.37%)</title><rect x="84.0613%" y="133" width="0.3672%" height="15" fill="rgb(233,223,10)"/><text x="84.3113%" y="143.50"></text></g><g><title>check_impl_item_well_formed (43,188,385 samples, 2.15%)</title><rect x="82.2863%" y="149" width="2.1495%" height="15" fill="rgb(215,21,27)"/><text x="82.5363%" y="159.50">c..</text></g><g><title>evaluate_obligation (2,296,869 samples, 0.11%)</title><rect x="84.9010%" y="133" width="0.1143%" height="15" fill="rgb(232,23,21)"/><text x="85.1510%" y="143.50"></text></g><g><title>check_item_well_formed (16,574,828 samples, 0.82%)</title><rect x="84.4358%" y="149" width="0.8249%" height="15" fill="rgb(244,5,23)"/><text x="84.6858%" y="159.50"></text></g><g><title>analysis (1,716,826,393 samples, 85.45%)</title><rect x="0.0737%" y="197" width="85.4475%" height="15" fill="rgb(226,81,46)"/><text x="0.3237%" y="207.50">analysis</text></g><g><title>type_check_crate (893,228,406 samples, 44.46%)</title><rect x="41.0647%" y="181" width="44.4565%" height="15" fill="rgb(247,70,30)"/><text x="41.3147%" y="191.50">type_check_crate</text></g><g><title>wf_checking (67,782,328 samples, 3.37%)</title><rect x="82.1477%" y="165" width="3.3736%" height="15" fill="rgb(212,68,19)"/><text x="82.3977%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (5,233,945 samples, 0.26%)</title><rect x="85.2608%" y="149" width="0.2605%" height="15" fill="rgb(240,187,13)"/><text x="85.5108%" y="159.50"></text></g><g><title>AST_validation (3,157,935 samples, 0.16%)</title><rect x="85.5574%" y="181" width="0.1572%" height="15" fill="rgb(223,113,26)"/><text x="85.8074%" y="191.50"></text></g><g><title>complete_gated_feature_checking (2,172,994 samples, 0.11%)</title><rect x="85.7146%" y="181" width="0.1082%" height="15" fill="rgb(206,192,2)"/><text x="85.9646%" y="191.50"></text></g><g><title>macro_expand_crate (140,935,406 samples, 7.01%)</title><rect x="85.8279%" y="181" width="7.0144%" height="15" fill="rgb(241,108,4)"/><text x="86.0779%" y="191.50">macro_exp..</text></g><g><title>expand_crate (140,916,566 samples, 7.01%)</title><rect x="85.8289%" y="165" width="7.0135%" height="15" fill="rgb(247,173,49)"/><text x="86.0789%" y="175.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (3,458,613 samples, 0.17%)</title><rect x="92.6702%" y="149" width="0.1721%" height="15" fill="rgb(224,114,35)"/><text x="92.9202%" y="159.50"></text></g><g><title>late_resolve_crate (24,189,867 samples, 1.20%)</title><rect x="92.9566%" y="165" width="1.2039%" height="15" fill="rgb(245,159,27)"/><text x="93.2066%" y="175.50"></text></g><g><title>configure_and_expand (176,960,024 samples, 8.81%)</title><rect x="85.5451%" y="197" width="8.8074%" height="15" fill="rgb(245,172,44)"/><text x="85.7951%" y="207.50">configure_an..</text></g><g><title>resolve_crate (30,140,053 samples, 1.50%)</title><rect x="92.8525%" y="181" width="1.5001%" height="15" fill="rgb(236,23,11)"/><text x="93.1025%" y="191.50"></text></g><g><title>drop_ast (6,123,607 samples, 0.30%)</title><rect x="94.3525%" y="197" width="0.3048%" height="15" fill="rgb(205,117,38)"/><text x="94.6025%" y="207.50"></text></g><g><title>early_lint_checks (7,633,734 samples, 0.38%)</title><rect x="94.6587%" y="197" width="0.3799%" height="15" fill="rgb(237,72,25)"/><text x="94.9087%" y="207.50"></text></g><g><title>free_global_ctxt (16,121,898 samples, 0.80%)</title><rect x="95.0386%" y="197" width="0.8024%" height="15" fill="rgb(244,70,9)"/><text x="95.2886%" y="207.50"></text></g><g><title>mir_for_ctfe (4,229,096 samples, 0.21%)</title><rect x="96.6473%" y="181" width="0.2105%" height="15" fill="rgb(217,125,39)"/><text x="96.8973%" y="191.50"></text></g><g><title>generate_crate_metadata (21,384,856 samples, 1.06%)</title><rect x="95.8410%" y="197" width="1.0643%" height="15" fill="rgb(235,36,10)"/><text x="96.0910%" y="207.50"></text></g><g><title>hir_lowering (55,186,240 samples, 2.75%)</title><rect x="96.9054%" y="197" width="2.7467%" height="15" fill="rgb(251,123,47)"/><text x="97.1554%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (3,937,543 samples, 0.20%)</title><rect x="99.7200%" y="197" width="0.1960%" height="15" fill="rgb(221,13,13)"/><text x="99.9700%" y="207.50"></text></g><g><title>all (2,009,217,392 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,009,217,392 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>