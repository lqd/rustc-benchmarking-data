<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (214,582 samples, 0.48%)</title><rect x="5.8418%" y="197" width="0.4818%" height="15" fill="rgb(227,0,7)"/><text x="6.0918%" y="207.50"></text></g><g><title>needs_drop_raw (444,206 samples, 1.00%)</title><rect x="7.9245%" y="133" width="0.9973%" height="15" fill="rgb(217,0,24)"/><text x="8.1745%" y="143.50"></text></g><g><title>is_copy_raw (423,685 samples, 0.95%)</title><rect x="7.9706%" y="117" width="0.9512%" height="15" fill="rgb(221,193,54)"/><text x="8.2206%" y="127.50"></text></g><g><title>evaluate_obligation (377,254 samples, 0.85%)</title><rect x="8.0749%" y="101" width="0.8470%" height="15" fill="rgb(248,212,6)"/><text x="8.3249%" y="111.50"></text></g><g><title>trait_impls_of (298,203 samples, 0.67%)</title><rect x="8.2523%" y="85" width="0.6695%" height="15" fill="rgb(208,68,35)"/><text x="8.5023%" y="95.50"></text></g><g><title>implementations_of_trait (64,972 samples, 0.15%)</title><rect x="8.7760%" y="69" width="0.1459%" height="15" fill="rgb(232,128,0)"/><text x="9.0260%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (50,862 samples, 0.11%)</title><rect x="8.8076%" y="53" width="0.1142%" height="15" fill="rgb(207,160,47)"/><text x="9.0576%" y="63.50"></text></g><g><title>mir_const (1,005,648 samples, 2.26%)</title><rect x="6.7741%" y="181" width="2.2578%" height="15" fill="rgb(228,23,34)"/><text x="7.0241%" y="191.50">m..</text></g><g><title>unsafety_check_result (842,718 samples, 1.89%)</title><rect x="7.1398%" y="165" width="1.8920%" height="15" fill="rgb(218,30,26)"/><text x="7.3898%" y="175.50">u..</text></g><g><title>mir_built (761,907 samples, 1.71%)</title><rect x="7.3213%" y="149" width="1.7105%" height="15" fill="rgb(220,122,19)"/><text x="7.5713%" y="159.50"></text></g><g><title>mir_promoted (1,206,793 samples, 2.71%)</title><rect x="6.3525%" y="197" width="2.7093%" height="15" fill="rgb(250,228,42)"/><text x="6.6025%" y="207.50">mi..</text></g><g><title>MIR_borrow_checking (3,655,761 samples, 8.21%)</title><rect x="2.2080%" y="229" width="8.2075%" height="15" fill="rgb(240,193,28)"/><text x="2.4580%" y="239.50">MIR_borrow_..</text></g><g><title>mir_borrowck (3,634,700 samples, 8.16%)</title><rect x="2.2553%" y="213" width="8.1602%" height="15" fill="rgb(216,20,37)"/><text x="2.5053%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (602,937 samples, 1.35%)</title><rect x="9.0618%" y="197" width="1.3536%" height="15" fill="rgb(206,188,39)"/><text x="9.3118%" y="207.50"></text></g><g><title>hir_module_items (155,002 samples, 0.35%)</title><rect x="10.4310%" y="229" width="0.3480%" height="15" fill="rgb(217,207,13)"/><text x="10.6810%" y="239.50"></text></g><g><title>get_lang_items (96,931 samples, 0.22%)</title><rect x="11.2621%" y="181" width="0.2176%" height="15" fill="rgb(231,73,38)"/><text x="11.5121%" y="191.50"></text></g><g><title>associated_item (55,431 samples, 0.12%)</title><rect x="11.5454%" y="165" width="0.1244%" height="15" fill="rgb(225,20,46)"/><text x="11.7954%" y="175.50"></text></g><g><title>should_inherit_track_caller (88,591 samples, 0.20%)</title><rect x="11.4797%" y="181" width="0.1989%" height="15" fill="rgb(210,31,41)"/><text x="11.7297%" y="191.50"></text></g><g><title>codegen_fn_attrs (290,743 samples, 0.65%)</title><rect x="11.1024%" y="197" width="0.6527%" height="15" fill="rgb(221,200,47)"/><text x="11.3524%" y="207.50"></text></g><g><title>check_mod_attrs (400,465 samples, 0.90%)</title><rect x="10.8570%" y="213" width="0.8991%" height="15" fill="rgb(226,26,5)"/><text x="11.1070%" y="223.50"></text></g><g><title>lookup_stability (64,440 samples, 0.14%)</title><rect x="12.1024%" y="197" width="0.1447%" height="15" fill="rgb(249,33,26)"/><text x="12.3524%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (176,872 samples, 0.40%)</title><rect x="11.8833%" y="213" width="0.3971%" height="15" fill="rgb(235,183,28)"/><text x="12.1333%" y="223.50"></text></g><g><title>misc_checking_1 (708,028 samples, 1.59%)</title><rect x="10.7802%" y="229" width="1.5896%" height="15" fill="rgb(221,5,38)"/><text x="11.0302%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (57,951 samples, 0.13%)</title><rect x="12.3755%" y="213" width="0.1301%" height="15" fill="rgb(247,18,42)"/><text x="12.6255%" y="223.50"></text></g><g><title>misc_checking_2 (186,332 samples, 0.42%)</title><rect x="12.3698%" y="229" width="0.4183%" height="15" fill="rgb(241,131,45)"/><text x="12.6198%" y="239.50"></text></g><g><title>match_checking (125,821 samples, 0.28%)</title><rect x="12.5056%" y="213" width="0.2825%" height="15" fill="rgb(249,31,29)"/><text x="12.7556%" y="223.50"></text></g><g><title>check_match (117,761 samples, 0.26%)</title><rect x="12.5237%" y="197" width="0.2644%" height="15" fill="rgb(225,111,53)"/><text x="12.7737%" y="207.50"></text></g><g><title>check_private_in_public (72,541 samples, 0.16%)</title><rect x="12.8181%" y="213" width="0.1629%" height="15" fill="rgb(238,160,17)"/><text x="13.0681%" y="223.50"></text></g><g><title>death_checking (183,972 samples, 0.41%)</title><rect x="12.9810%" y="213" width="0.4130%" height="15" fill="rgb(214,148,48)"/><text x="13.2310%" y="223.50"></text></g><g><title>lint_levels (62,341 samples, 0.14%)</title><rect x="13.2540%" y="197" width="0.1400%" height="15" fill="rgb(232,36,49)"/><text x="13.5040%" y="207.50"></text></g><g><title>crate_lints (272,253 samples, 0.61%)</title><rect x="13.3997%" y="197" width="0.6112%" height="15" fill="rgb(209,103,24)"/><text x="13.6497%" y="207.50"></text></g><g><title>param_env (135,802 samples, 0.30%)</title><rect x="13.7061%" y="181" width="0.3049%" height="15" fill="rgb(229,88,8)"/><text x="13.9561%" y="191.50"></text></g><g><title>predicates_of (57,632 samples, 0.13%)</title><rect x="13.8816%" y="165" width="0.1294%" height="15" fill="rgb(213,181,19)"/><text x="14.1316%" y="175.50"></text></g><g><title>predicates_defined_on (48,482 samples, 0.11%)</title><rect x="13.9021%" y="149" width="0.1088%" height="15" fill="rgb(254,191,54)"/><text x="14.1521%" y="159.50"></text></g><g><title>lint_checking (334,784 samples, 0.75%)</title><rect x="13.3940%" y="213" width="0.7516%" height="15" fill="rgb(241,83,37)"/><text x="13.6440%" y="223.50"></text></g><g><title>module_lints (59,981 samples, 0.13%)</title><rect x="14.0109%" y="197" width="0.1347%" height="15" fill="rgb(233,36,39)"/><text x="14.2609%" y="207.50"></text></g><g><title>lint_mod (56,521 samples, 0.13%)</title><rect x="14.0187%" y="181" width="0.1269%" height="15" fill="rgb(226,3,54)"/><text x="14.2687%" y="191.50"></text></g><g><title>privacy_access_levels (90,811 samples, 0.20%)</title><rect x="14.1456%" y="213" width="0.2039%" height="15" fill="rgb(245,192,40)"/><text x="14.3956%" y="223.50"></text></g><g><title>privacy_checking_modules (327,584 samples, 0.74%)</title><rect x="14.3495%" y="213" width="0.7355%" height="15" fill="rgb(238,167,29)"/><text x="14.5995%" y="223.50"></text></g><g><title>check_mod_privacy (324,744 samples, 0.73%)</title><rect x="14.3559%" y="197" width="0.7291%" height="15" fill="rgb(232,182,51)"/><text x="14.6059%" y="207.50"></text></g><g><title>misc_checking_3 (1,035,482 samples, 2.32%)</title><rect x="12.7881%" y="229" width="2.3247%" height="15" fill="rgb(231,60,39)"/><text x="13.0381%" y="239.50">m..</text></g><g><title>coherent_trait (63,181 samples, 0.14%)</title><rect x="15.2608%" y="197" width="0.1418%" height="15" fill="rgb(208,69,12)"/><text x="15.5108%" y="207.50"></text></g><g><title>specialization_graph_of (54,920 samples, 0.12%)</title><rect x="15.2793%" y="181" width="0.1233%" height="15" fill="rgb(235,93,37)"/><text x="15.5293%" y="191.50"></text></g><g><title>coherence_checking (118,471 samples, 0.27%)</title><rect x="15.2079%" y="213" width="0.2660%" height="15" fill="rgb(213,116,39)"/><text x="15.4579%" y="223.50"></text></g><g><title>adt_def (170,182 samples, 0.38%)</title><rect x="19.2431%" y="149" width="0.3821%" height="15" fill="rgb(222,207,29)"/><text x="19.4931%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (167,352 samples, 0.38%)</title><rect x="19.2494%" y="133" width="0.3757%" height="15" fill="rgb(206,96,30)"/><text x="19.4994%" y="143.50"></text></g><g><title>item_attrs (143,422 samples, 0.32%)</title><rect x="19.3031%" y="117" width="0.3220%" height="15" fill="rgb(218,138,4)"/><text x="19.5531%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (140,062 samples, 0.31%)</title><rect x="19.3107%" y="101" width="0.3144%" height="15" fill="rgb(250,191,14)"/><text x="19.5607%" y="111.50"></text></g><g><title>adt_sized_constraint (203,512 samples, 0.46%)</title><rect x="19.2042%" y="165" width="0.4569%" height="15" fill="rgb(239,60,40)"/><text x="19.4542%" y="175.50"></text></g><g><title>adt_def (353,454 samples, 0.79%)</title><rect x="20.2679%" y="117" width="0.7935%" height="15" fill="rgb(206,27,48)"/><text x="20.5179%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (351,114 samples, 0.79%)</title><rect x="20.2732%" y="101" width="0.7883%" height="15" fill="rgb(225,35,8)"/><text x="20.5232%" y="111.50"></text></g><g><title>item_attrs (96,571 samples, 0.22%)</title><rect x="20.8447%" y="85" width="0.2168%" height="15" fill="rgb(250,213,24)"/><text x="21.0947%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (93,621 samples, 0.21%)</title><rect x="20.8513%" y="69" width="0.2102%" height="15" fill="rgb(247,123,22)"/><text x="21.1013%" y="79.50"></text></g><g><title>impl_parent (176,705 samples, 0.40%)</title><rect x="21.5546%" y="53" width="0.3967%" height="15" fill="rgb(231,138,38)"/><text x="21.8046%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (126,234 samples, 0.28%)</title><rect x="21.6679%" y="37" width="0.2834%" height="15" fill="rgb(231,145,46)"/><text x="21.9179%" y="47.50"></text></g><g><title>impl_trait_ref (613,166 samples, 1.38%)</title><rect x="21.9513%" y="53" width="1.3766%" height="15" fill="rgb(251,118,11)"/><text x="22.2013%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (563,116 samples, 1.26%)</title><rect x="22.0637%" y="37" width="1.2642%" height="15" fill="rgb(217,147,25)"/><text x="22.3137%" y="47.50"></text></g><g><title>coherent_trait (1,052,202 samples, 2.36%)</title><rect x="21.0982%" y="85" width="2.3623%" height="15" fill="rgb(247,81,37)"/><text x="21.3482%" y="95.50">co..</text></g><g><title>specialization_graph_of (1,048,352 samples, 2.35%)</title><rect x="21.1068%" y="69" width="2.3536%" height="15" fill="rgb(209,12,38)"/><text x="21.3568%" y="79.50">s..</text></g><g><title>trait_impls_of (59,021 samples, 0.13%)</title><rect x="23.3279%" y="53" width="0.1325%" height="15" fill="rgb(227,1,9)"/><text x="23.5779%" y="63.50"></text></g><g><title>adt_destructor (1,079,512 samples, 2.42%)</title><rect x="21.0615%" y="117" width="2.4236%" height="15" fill="rgb(248,47,43)"/><text x="21.3115%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (1,076,092 samples, 2.42%)</title><rect x="21.0691%" y="101" width="2.4159%" height="15" fill="rgb(221,10,30)"/><text x="21.3191%" y="111.50">me..</text></g><g><title>adt_def (156,712 samples, 0.35%)</title><rect x="23.5071%" y="101" width="0.3518%" height="15" fill="rgb(210,229,1)"/><text x="23.7571%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (155,542 samples, 0.35%)</title><rect x="23.5097%" y="85" width="0.3492%" height="15" fill="rgb(222,148,37)"/><text x="23.7597%" y="95.50"></text></g><g><title>item_attrs (143,522 samples, 0.32%)</title><rect x="23.5367%" y="69" width="0.3222%" height="15" fill="rgb(234,67,33)"/><text x="23.7867%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,252 samples, 0.32%)</title><rect x="23.5396%" y="53" width="0.3194%" height="15" fill="rgb(247,98,35)"/><text x="23.7896%" y="63.50"></text></g><g><title>adt_dtorck_constraint (175,522 samples, 0.39%)</title><rect x="23.4851%" y="117" width="0.3941%" height="15" fill="rgb(247,138,52)"/><text x="23.7351%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,710,998 samples, 3.84%)</title><rect x="20.1950%" y="133" width="3.8413%" height="15" fill="rgb(213,79,30)"/><text x="20.4450%" y="143.50">adt_..</text></g><g><title>type_of (65,250 samples, 0.15%)</title><rect x="23.8899%" y="117" width="0.1465%" height="15" fill="rgb(246,177,23)"/><text x="24.1399%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (62,670 samples, 0.14%)</title><rect x="23.8957%" y="101" width="0.1407%" height="15" fill="rgb(230,62,27)"/><text x="24.1457%" y="111.50"></text></g><g><title>dropck_outlives (2,007,073 samples, 4.51%)</title><rect x="19.6611%" y="165" width="4.5060%" height="15" fill="rgb(216,154,8)"/><text x="19.9111%" y="175.50">dropc..</text></g><g><title>adt_dtorck_constraint (1,878,072 samples, 4.22%)</title><rect x="19.9507%" y="149" width="4.2164%" height="15" fill="rgb(244,35,45)"/><text x="20.2007%" y="159.50">adt_d..</text></g><g><title>impl_trait_ref (60,600 samples, 0.14%)</title><rect x="24.3131%" y="165" width="0.1361%" height="15" fill="rgb(251,115,12)"/><text x="24.5631%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (54,000 samples, 0.12%)</title><rect x="24.3280%" y="149" width="0.1212%" height="15" fill="rgb(240,54,50)"/><text x="24.5780%" y="159.50"></text></g><g><title>predicates_of (64,241 samples, 0.14%)</title><rect x="24.4608%" y="165" width="0.1442%" height="15" fill="rgb(233,84,52)"/><text x="24.7108%" y="175.50"></text></g><g><title>item_bodies_checking (4,102,036 samples, 9.21%)</title><rect x="15.5278%" y="213" width="9.2094%" height="15" fill="rgb(207,117,47)"/><text x="15.7778%" y="223.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (4,098,456 samples, 9.20%)</title><rect x="15.5359%" y="197" width="9.2013%" height="15" fill="rgb(249,43,39)"/><text x="15.7859%" y="207.50">typeck_item_b..</text></g><g><title>typeck (4,080,096 samples, 9.16%)</title><rect x="15.5771%" y="181" width="9.1601%" height="15" fill="rgb(209,38,44)"/><text x="15.8271%" y="191.50">typeck</text></g><g><title>item_types_checking (263,623 samples, 0.59%)</title><rect x="24.7372%" y="213" width="0.5919%" height="15" fill="rgb(236,212,23)"/><text x="24.9872%" y="223.50"></text></g><g><title>check_mod_item_types (260,153 samples, 0.58%)</title><rect x="24.7450%" y="197" width="0.5841%" height="15" fill="rgb(242,79,21)"/><text x="24.9950%" y="207.50"></text></g><g><title>fn_sig (524,946 samples, 1.18%)</title><rect x="25.6200%" y="181" width="1.1785%" height="15" fill="rgb(211,96,35)"/><text x="25.8700%" y="191.50"></text></g><g><title>type_of (52,390 samples, 0.12%)</title><rect x="26.6809%" y="165" width="0.1176%" height="15" fill="rgb(253,215,40)"/><text x="26.9309%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (48,330 samples, 0.11%)</title><rect x="26.6900%" y="149" width="0.1085%" height="15" fill="rgb(211,81,21)"/><text x="26.9400%" y="159.50"></text></g><g><title>named_region_map (75,230 samples, 0.17%)</title><rect x="26.9777%" y="165" width="0.1689%" height="15" fill="rgb(208,190,38)"/><text x="27.2277%" y="175.50"></text></g><g><title>resolve_lifetimes (58,910 samples, 0.13%)</title><rect x="27.0144%" y="149" width="0.1323%" height="15" fill="rgb(235,213,38)"/><text x="27.2644%" y="159.50"></text></g><g><title>generics_of (166,481 samples, 0.37%)</title><rect x="26.7985%" y="181" width="0.3738%" height="15" fill="rgb(237,122,38)"/><text x="27.0485%" y="191.50"></text></g><g><title>late_bound_vars_map (95,191 samples, 0.21%)</title><rect x="27.4665%" y="133" width="0.2137%" height="15" fill="rgb(244,218,35)"/><text x="27.7165%" y="143.50"></text></g><g><title>resolve_lifetimes (90,501 samples, 0.20%)</title><rect x="27.4770%" y="117" width="0.2032%" height="15" fill="rgb(240,68,47)"/><text x="27.7270%" y="127.50"></text></g><g><title>explicit_predicates_of (201,624 samples, 0.45%)</title><rect x="27.2891%" y="149" width="0.4527%" height="15" fill="rgb(210,16,53)"/><text x="27.5391%" y="159.50"></text></g><g><title>predicates_of (259,224 samples, 0.58%)</title><rect x="27.1841%" y="181" width="0.5820%" height="15" fill="rgb(235,124,12)"/><text x="27.4341%" y="191.50"></text></g><g><title>predicates_defined_on (241,364 samples, 0.54%)</title><rect x="27.2242%" y="165" width="0.5419%" height="15" fill="rgb(224,169,11)"/><text x="27.4742%" y="175.50"></text></g><g><title>super_predicates_of (230,342 samples, 0.52%)</title><rect x="27.7661%" y="181" width="0.5171%" height="15" fill="rgb(250,166,2)"/><text x="28.0161%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (214,582 samples, 0.48%)</title><rect x="27.8015%" y="165" width="0.4818%" height="15" fill="rgb(242,216,29)"/><text x="28.0515%" y="175.50"></text></g><g><title>type_collecting (1,341,405 samples, 3.01%)</title><rect x="25.3340%" y="213" width="3.0116%" height="15" fill="rgb(230,116,27)"/><text x="25.5840%" y="223.50">typ..</text></g><g><title>collect_mod_item_types (1,330,165 samples, 2.99%)</title><rect x="25.3592%" y="197" width="2.9863%" height="15" fill="rgb(228,99,48)"/><text x="25.6092%" y="207.50">col..</text></g><g><title>evaluate_obligation (237,002 samples, 0.53%)</title><rect x="29.8883%" y="181" width="0.5321%" height="15" fill="rgb(253,11,6)"/><text x="30.1383%" y="191.50"></text></g><g><title>implied_outlives_bounds (154,140 samples, 0.35%)</title><rect x="30.4204%" y="181" width="0.3461%" height="15" fill="rgb(247,143,39)"/><text x="30.6704%" y="191.50"></text></g><g><title>param_env (94,090 samples, 0.21%)</title><rect x="30.7664%" y="181" width="0.2112%" height="15" fill="rgb(236,97,10)"/><text x="31.0164%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,137,502 samples, 2.55%)</title><rect x="28.5215%" y="197" width="2.5538%" height="15" fill="rgb(233,208,19)"/><text x="28.7715%" y="207.50">ch..</text></g><g><title>param_env (193,443 samples, 0.43%)</title><rect x="32.7906%" y="181" width="0.4343%" height="15" fill="rgb(216,164,2)"/><text x="33.0406%" y="191.50"></text></g><g><title>predicates_of (88,631 samples, 0.20%)</title><rect x="33.2249%" y="181" width="0.1990%" height="15" fill="rgb(220,129,5)"/><text x="33.4749%" y="191.50"></text></g><g><title>predicates_defined_on (67,661 samples, 0.15%)</title><rect x="33.2720%" y="165" width="0.1519%" height="15" fill="rgb(242,17,10)"/><text x="33.5220%" y="175.50"></text></g><g><title>check_item_well_formed (1,212,694 samples, 2.72%)</title><rect x="31.0753%" y="197" width="2.7226%" height="15" fill="rgb(242,107,0)"/><text x="31.3253%" y="207.50">ch..</text></g><g><title>trait_impls_of (156,352 samples, 0.35%)</title><rect x="33.4468%" y="181" width="0.3510%" height="15" fill="rgb(251,28,31)"/><text x="33.6968%" y="191.50"></text></g><g><title>implementations_of_trait (64,301 samples, 0.14%)</title><rect x="33.6535%" y="165" width="0.1444%" height="15" fill="rgb(233,223,10)"/><text x="33.9035%" y="175.50"></text></g><g><title>predicates_of (68,630 samples, 0.15%)</title><rect x="36.7351%" y="165" width="0.1541%" height="15" fill="rgb(215,21,27)"/><text x="36.9851%" y="175.50"></text></g><g><title>evaluate_obligation (685,797 samples, 1.54%)</title><rect x="35.6536%" y="181" width="1.5397%" height="15" fill="rgb(232,23,21)"/><text x="35.9036%" y="191.50"></text></g><g><title>trait_impls_of (135,431 samples, 0.30%)</title><rect x="36.8892%" y="165" width="0.3041%" height="15" fill="rgb(244,5,23)"/><text x="37.1392%" y="175.50"></text></g><g><title>implementations_of_trait (69,281 samples, 0.16%)</title><rect x="37.0377%" y="149" width="0.1555%" height="15" fill="rgb(226,81,46)"/><text x="37.2877%" y="159.50"></text></g><g><title>implied_outlives_bounds (216,674 samples, 0.49%)</title><rect x="37.2887%" y="181" width="0.4864%" height="15" fill="rgb(247,70,30)"/><text x="37.5387%" y="191.50"></text></g><g><title>evaluate_obligation (180,992 samples, 0.41%)</title><rect x="37.9947%" y="165" width="0.4063%" height="15" fill="rgb(212,68,19)"/><text x="38.2447%" y="175.50"></text></g><g><title>layout_of (88,281 samples, 0.20%)</title><rect x="38.4786%" y="165" width="0.1982%" height="15" fill="rgb(240,187,13)"/><text x="38.7286%" y="175.50"></text></g><g><title>object_safety_violations (430,945 samples, 0.97%)</title><rect x="37.7752%" y="181" width="0.9675%" height="15" fill="rgb(223,113,26)"/><text x="38.0252%" y="191.50"></text></g><g><title>param_env (106,991 samples, 0.24%)</title><rect x="38.7427%" y="181" width="0.2402%" height="15" fill="rgb(206,192,2)"/><text x="38.9927%" y="191.50"></text></g><g><title>analysis (16,581,546 samples, 37.23%)</title><rect x="1.8645%" y="245" width="37.2268%" height="15" fill="rgb(241,108,4)"/><text x="2.1145%" y="255.50">analysis</text></g><g><title>type_check_crate (10,680,500 samples, 23.98%)</title><rect x="15.1128%" y="229" width="23.9785%" height="15" fill="rgb(247,173,49)"/><text x="15.3628%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,784,544 samples, 10.74%)</title><rect x="28.3497%" y="213" width="10.7417%" height="15" fill="rgb(224,114,35)"/><text x="28.5997%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,357,817 samples, 5.29%)</title><rect x="33.7978%" y="197" width="5.2935%" height="15" fill="rgb(245,159,27)"/><text x="34.0478%" y="207.50">check_..</text></g><g><title>native_libraries (48,210 samples, 0.11%)</title><rect x="40.3456%" y="229" width="0.1082%" height="15" fill="rgb(245,172,44)"/><text x="40.5956%" y="239.50"></text></g><g><title>codegen_crate (627,547 samples, 1.41%)</title><rect x="39.1155%" y="245" width="1.4089%" height="15" fill="rgb(236,23,11)"/><text x="39.3655%" y="255.50"></text></g><g><title>AST_validation (102,701 samples, 0.23%)</title><rect x="40.9949%" y="229" width="0.2306%" height="15" fill="rgb(205,117,38)"/><text x="41.2449%" y="239.50"></text></g><g><title>crate_injection (89,401 samples, 0.20%)</title><rect x="41.2841%" y="229" width="0.2007%" height="15" fill="rgb(237,72,25)"/><text x="41.5341%" y="239.50"></text></g><g><title>metadata_load_macro (57,030 samples, 0.13%)</title><rect x="65.8148%" y="197" width="0.1280%" height="15" fill="rgb(244,70,9)"/><text x="66.0648%" y="207.50"></text></g><g><title>macro_expand_crate (13,606,483 samples, 30.55%)</title><rect x="41.4848%" y="229" width="30.5476%" height="15" fill="rgb(217,125,39)"/><text x="41.7348%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (13,587,692 samples, 30.51%)</title><rect x="41.5270%" y="213" width="30.5054%" height="15" fill="rgb(235,36,10)"/><text x="41.7770%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,712,391 samples, 6.09%)</title><rect x="65.9429%" y="197" width="6.0895%" height="15" fill="rgb(251,123,47)"/><text x="66.1929%" y="207.50">metadata..</text></g><g><title>metadata_register_crate (982,749 samples, 2.21%)</title><rect x="69.8260%" y="181" width="2.2063%" height="15" fill="rgb(221,13,13)"/><text x="70.0760%" y="191.50">m..</text></g><g><title>metadata_register_crate (85,490 samples, 0.19%)</title><rect x="71.8405%" y="165" width="0.1919%" height="15" fill="rgb(238,131,9)"/><text x="72.0905%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (334,114 samples, 0.75%)</title><rect x="72.0464%" y="229" width="0.7501%" height="15" fill="rgb(211,50,8)"/><text x="72.2964%" y="239.50"></text></g><g><title>finalize_macro_resolutions (203,692 samples, 0.46%)</title><rect x="72.8968%" y="213" width="0.4573%" height="15" fill="rgb(245,182,24)"/><text x="73.1468%" y="223.50"></text></g><g><title>late_resolve_crate (150,942 samples, 0.34%)</title><rect x="73.3541%" y="213" width="0.3389%" height="15" fill="rgb(242,14,37)"/><text x="73.6041%" y="223.50"></text></g><g><title>configure_and_expand (14,830,666 samples, 33.30%)</title><rect x="40.5244%" y="245" width="33.2959%" height="15" fill="rgb(246,228,12)"/><text x="40.7744%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (456,045 samples, 1.02%)</title><rect x="72.7965%" y="229" width="1.0239%" height="15" fill="rgb(213,55,15)"/><text x="73.0465%" y="239.50"></text></g><g><title>drop_ast (91,951 samples, 0.21%)</title><rect x="73.8204%" y="245" width="0.2064%" height="15" fill="rgb(209,9,3)"/><text x="74.0704%" y="255.50"></text></g><g><title>early_lint_checks (169,831 samples, 0.38%)</title><rect x="74.0826%" y="245" width="0.3813%" height="15" fill="rgb(230,59,30)"/><text x="74.3326%" y="255.50"></text></g><g><title>free_global_ctxt (2,794,041 samples, 6.27%)</title><rect x="74.4639%" y="245" width="6.2728%" height="15" fill="rgb(209,121,21)"/><text x="74.7139%" y="255.50">free_glo..</text></g><g><title>crate_hash (139,612 samples, 0.31%)</title><rect x="82.7102%" y="229" width="0.3134%" height="15" fill="rgb(220,109,13)"/><text x="82.9602%" y="239.50"></text></g><g><title>generate_crate_metadata (1,209,013 samples, 2.71%)</title><rect x="80.7367%" y="245" width="2.7143%" height="15" fill="rgb(232,18,1)"/><text x="80.9867%" y="255.50">ge..</text></g><g><title>hir_lowering (1,964,092 samples, 4.41%)</title><rect x="83.4510%" y="245" width="4.4095%" height="15" fill="rgb(215,41,42)"/><text x="83.7010%" y="255.50">hir_l..</text></g><g><title>link (87,761 samples, 0.20%)</title><rect x="87.8606%" y="245" width="0.1970%" height="15" fill="rgb(224,123,36)"/><text x="88.1106%" y="255.50"></text></g><g><title>parse_crate (3,711,711 samples, 8.33%)</title><rect x="88.0576%" y="245" width="8.3331%" height="15" fill="rgb(240,125,3)"/><text x="88.3076%" y="255.50">parse_crate</text></g><g><title>prepare_outputs (297,913 samples, 0.67%)</title><rect x="96.4135%" y="245" width="0.6688%" height="15" fill="rgb(205,98,50)"/><text x="96.6635%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (641,027 samples, 1.44%)</title><rect x="97.0823%" y="245" width="1.4392%" height="15" fill="rgb(205,185,37)"/><text x="97.3323%" y="255.50"></text></g><g><title>setup_global_ctxt (128,951 samples, 0.29%)</title><rect x="98.5601%" y="245" width="0.2895%" height="15" fill="rgb(238,207,15)"/><text x="98.8101%" y="255.50"></text></g><g><title>all (44,541,976 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (44,541,976 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (512,416 samples, 1.15%)</title><rect x="98.8496%" y="245" width="1.1504%" height="15" fill="rgb(207,46,11)"/><text x="99.0996%" y="255.50"></text></g></svg></svg>