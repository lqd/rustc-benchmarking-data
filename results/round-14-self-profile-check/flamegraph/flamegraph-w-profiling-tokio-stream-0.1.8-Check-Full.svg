<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (683,848 samples, 0.16%)</title><rect x="11.4428%" y="117" width="0.1631%" height="15" fill="rgb(227,0,7)"/><text x="11.6928%" y="127.50"></text></g><g><title>item_attrs (552,048 samples, 0.13%)</title><rect x="12.0074%" y="85" width="0.1316%" height="15" fill="rgb(217,0,24)"/><text x="12.2574%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (530,357 samples, 0.13%)</title><rect x="12.0126%" y="69" width="0.1265%" height="15" fill="rgb(221,193,54)"/><text x="12.2626%" y="79.50"></text></g><g><title>codegen_fn_attrs (795,722 samples, 0.19%)</title><rect x="11.9574%" y="101" width="0.1898%" height="15" fill="rgb(248,212,6)"/><text x="12.2074%" y="111.50"></text></g><g><title>adt_drop_tys (684,418 samples, 0.16%)</title><rect x="14.3856%" y="69" width="0.1632%" height="15" fill="rgb(208,68,35)"/><text x="14.6356%" y="79.50"></text></g><g><title>param_env (428,993 samples, 0.10%)</title><rect x="14.4465%" y="53" width="0.1023%" height="15" fill="rgb(232,128,0)"/><text x="14.6965%" y="63.50"></text></g><g><title>is_copy_raw (4,884,138 samples, 1.16%)</title><rect x="14.5494%" y="69" width="1.1647%" height="15" fill="rgb(207,160,47)"/><text x="14.7994%" y="79.50"></text></g><g><title>evaluate_obligation (4,178,571 samples, 1.00%)</title><rect x="14.7176%" y="53" width="0.9965%" height="15" fill="rgb(228,23,34)"/><text x="14.9676%" y="63.50"></text></g><g><title>needs_drop_raw (6,149,805 samples, 1.47%)</title><rect x="14.2494%" y="85" width="1.4666%" height="15" fill="rgb(218,30,26)"/><text x="14.4994%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (645,990 samples, 0.15%)</title><rect x="15.8905%" y="69" width="0.1541%" height="15" fill="rgb(220,122,19)"/><text x="16.1405%" y="79.50"></text></g><g><title>impl_parent (443,212 samples, 0.11%)</title><rect x="16.2425%" y="53" width="0.1057%" height="15" fill="rgb(250,228,42)"/><text x="16.4925%" y="63.50"></text></g><g><title>specialization_graph_of (1,837,751 samples, 0.44%)</title><rect x="16.0701%" y="69" width="0.4383%" height="15" fill="rgb(240,193,28)"/><text x="16.3201%" y="79.50"></text></g><g><title>impl_trait_ref (671,698 samples, 0.16%)</title><rect x="16.3482%" y="53" width="0.1602%" height="15" fill="rgb(216,20,37)"/><text x="16.5982%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (546,586 samples, 0.13%)</title><rect x="16.3780%" y="37" width="0.1303%" height="15" fill="rgb(206,188,39)"/><text x="16.6280%" y="47.50"></text></g><g><title>resolve_instance (3,544,022 samples, 0.85%)</title><rect x="15.7159%" y="85" width="0.8451%" height="15" fill="rgb(217,207,13)"/><text x="15.9659%" y="95.50"></text></g><g><title>thir_body (3,006,786 samples, 0.72%)</title><rect x="16.5842%" y="85" width="0.7170%" height="15" fill="rgb(231,73,38)"/><text x="16.8342%" y="95.50"></text></g><g><title>mir_const (27,128,417 samples, 6.47%)</title><rect x="10.8669%" y="133" width="6.4694%" height="15" fill="rgb(225,20,46)"/><text x="11.1169%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (24,029,496 samples, 5.73%)</title><rect x="11.6059%" y="117" width="5.7304%" height="15" fill="rgb(210,31,41)"/><text x="11.8559%" y="127.50">unsafet..</text></g><g><title>mir_built (21,759,739 samples, 5.19%)</title><rect x="12.1471%" y="101" width="5.1891%" height="15" fill="rgb(221,200,47)"/><text x="12.3971%" y="111.50">mir_bu..</text></g><g><title>mir_const (554,288 samples, 0.13%)</title><rect x="17.5170%" y="117" width="0.1322%" height="15" fill="rgb(226,26,5)"/><text x="17.7670%" y="127.50"></text></g><g><title>mir_const_qualif (1,418,638 samples, 0.34%)</title><rect x="17.3362%" y="133" width="0.3383%" height="15" fill="rgb(249,33,26)"/><text x="17.5862%" y="143.50"></text></g><g><title>mir_promoted (30,940,434 samples, 7.38%)</title><rect x="10.2962%" y="149" width="7.3784%" height="15" fill="rgb(235,183,28)"/><text x="10.5462%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (2,931,950 samples, 0.70%)</title><rect x="17.6746%" y="149" width="0.6992%" height="15" fill="rgb(221,5,38)"/><text x="17.9246%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,737,772 samples, 0.41%)</title><rect x="18.3738%" y="149" width="0.4144%" height="15" fill="rgb(247,18,42)"/><text x="18.6238%" y="159.50"></text></g><g><title>normalize_projection_ty (920,139 samples, 0.22%)</title><rect x="18.5688%" y="133" width="0.2194%" height="15" fill="rgb(241,131,45)"/><text x="18.8188%" y="143.50"></text></g><g><title>type_op_normalize_ty (920,531 samples, 0.22%)</title><rect x="18.8646%" y="149" width="0.2195%" height="15" fill="rgb(249,31,29)"/><text x="19.1146%" y="159.50"></text></g><g><title>normalize_projection_ty (487,644 samples, 0.12%)</title><rect x="18.9679%" y="133" width="0.1163%" height="15" fill="rgb(225,111,53)"/><text x="19.2179%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,378,995 samples, 2.00%)</title><rect x="19.0842%" y="149" width="1.9982%" height="15" fill="rgb(238,160,17)"/><text x="19.3342%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (86,484,352 samples, 20.62%)</title><rect x="0.4612%" y="181" width="20.6241%" height="15" fill="rgb(214,148,48)"/><text x="0.7112%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (85,967,555 samples, 20.50%)</title><rect x="0.5845%" y="165" width="20.5008%" height="15" fill="rgb(232,36,49)"/><text x="0.8345%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (697,817 samples, 0.17%)</title><rect x="21.0853%" y="181" width="0.1664%" height="15" fill="rgb(209,103,24)"/><text x="21.3353%" y="191.50"></text></g><g><title>hir_module_items (868,950 samples, 0.21%)</title><rect x="21.2517%" y="181" width="0.2072%" height="15" fill="rgb(229,88,8)"/><text x="21.5017%" y="191.50"></text></g><g><title>should_inherit_track_caller (583,395 samples, 0.14%)</title><rect x="21.7838%" y="133" width="0.1391%" height="15" fill="rgb(213,181,19)"/><text x="22.0338%" y="143.50"></text></g><g><title>codegen_fn_attrs (968,730 samples, 0.23%)</title><rect x="21.6970%" y="149" width="0.2310%" height="15" fill="rgb(254,191,54)"/><text x="21.9470%" y="159.50"></text></g><g><title>check_mod_attrs (1,886,851 samples, 0.45%)</title><rect x="21.4781%" y="165" width="0.4500%" height="15" fill="rgb(241,83,37)"/><text x="21.7281%" y="175.50"></text></g><g><title>check_mod_const_bodies (473,145 samples, 0.11%)</title><rect x="21.9280%" y="165" width="0.1128%" height="15" fill="rgb(233,36,39)"/><text x="22.1780%" y="175.50"></text></g><g><title>lint_levels (1,436,466 samples, 0.34%)</title><rect x="22.2812%" y="149" width="0.3426%" height="15" fill="rgb(226,3,54)"/><text x="22.5312%" y="159.50"></text></g><g><title>lookup_deprecation_entry (615,746 samples, 0.15%)</title><rect x="22.6238%" y="149" width="0.1468%" height="15" fill="rgb(245,192,40)"/><text x="22.8738%" y="159.50"></text></g><g><title>stability_index (495,926 samples, 0.12%)</title><rect x="22.6523%" y="133" width="0.1183%" height="15" fill="rgb(238,167,29)"/><text x="22.9023%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,876,081 samples, 0.69%)</title><rect x="22.1235%" y="165" width="0.6859%" height="15" fill="rgb(232,182,51)"/><text x="22.3735%" y="175.50"></text></g><g><title>misc_checking_1 (5,897,195 samples, 1.41%)</title><rect x="21.4591%" y="181" width="1.4063%" height="15" fill="rgb(231,60,39)"/><text x="21.7091%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,742,739 samples, 0.42%)</title><rect x="22.8659%" y="165" width="0.4156%" height="15" fill="rgb(208,69,12)"/><text x="23.1159%" y="175.50"></text></g><g><title>check_mod_liveness (1,406,795 samples, 0.34%)</title><rect x="22.9460%" y="149" width="0.3355%" height="15" fill="rgb(235,93,37)"/><text x="23.1960%" y="159.50"></text></g><g><title>misc_checking_2 (3,502,169 samples, 0.84%)</title><rect x="22.8654%" y="181" width="0.8352%" height="15" fill="rgb(213,116,39)"/><text x="23.1154%" y="191.50"></text></g><g><title>match_checking (1,757,350 samples, 0.42%)</title><rect x="23.2815%" y="165" width="0.4191%" height="15" fill="rgb(222,207,29)"/><text x="23.5315%" y="175.50"></text></g><g><title>check_match (1,623,689 samples, 0.39%)</title><rect x="23.3134%" y="149" width="0.3872%" height="15" fill="rgb(206,96,30)"/><text x="23.5634%" y="159.50"></text></g><g><title>check_private_in_public (1,028,862 samples, 0.25%)</title><rect x="23.7034%" y="165" width="0.2454%" height="15" fill="rgb(218,138,4)"/><text x="23.9534%" y="175.50"></text></g><g><title>death_checking (1,793,630 samples, 0.43%)</title><rect x="23.9488%" y="165" width="0.4277%" height="15" fill="rgb(250,191,14)"/><text x="24.1988%" y="175.50"></text></g><g><title>eval_to_const_value_raw (689,528 samples, 0.16%)</title><rect x="25.0454%" y="133" width="0.1644%" height="15" fill="rgb(239,60,40)"/><text x="25.2954%" y="143.50"></text></g><g><title>eval_to_const_value_raw (673,998 samples, 0.16%)</title><rect x="25.0491%" y="117" width="0.1607%" height="15" fill="rgb(206,27,48)"/><text x="25.2991%" y="127.50"></text></g><g><title>eval_to_allocation_raw (643,168 samples, 0.15%)</title><rect x="25.0565%" y="101" width="0.1534%" height="15" fill="rgb(225,35,8)"/><text x="25.3065%" y="111.50"></text></g><g><title>param_env (1,548,016 samples, 0.37%)</title><rect x="25.2099%" y="133" width="0.3692%" height="15" fill="rgb(250,213,24)"/><text x="25.4599%" y="143.50"></text></g><g><title>predicates_of (670,250 samples, 0.16%)</title><rect x="25.4192%" y="117" width="0.1598%" height="15" fill="rgb(247,123,22)"/><text x="25.6692%" y="127.50"></text></g><g><title>predicates_defined_on (548,429 samples, 0.13%)</title><rect x="25.4483%" y="101" width="0.1308%" height="15" fill="rgb(231,138,38)"/><text x="25.6983%" y="111.50"></text></g><g><title>crate_lints (6,495,821 samples, 1.55%)</title><rect x="24.3771%" y="149" width="1.5491%" height="15" fill="rgb(231,145,46)"/><text x="24.6271%" y="159.50"></text></g><g><title>type_of (1,439,108 samples, 0.34%)</title><rect x="25.5830%" y="133" width="0.3432%" height="15" fill="rgb(251,118,11)"/><text x="25.8330%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,136,945 samples, 0.27%)</title><rect x="25.6551%" y="117" width="0.2711%" height="15" fill="rgb(217,147,25)"/><text x="25.9051%" y="127.50"></text></g><g><title>lint_checking (7,945,328 samples, 1.89%)</title><rect x="24.3765%" y="165" width="1.8947%" height="15" fill="rgb(247,81,37)"/><text x="24.6265%" y="175.50">l..</text></g><g><title>module_lints (1,446,867 samples, 0.35%)</title><rect x="25.9262%" y="149" width="0.3450%" height="15" fill="rgb(209,12,38)"/><text x="26.1762%" y="159.50"></text></g><g><title>lint_mod (1,421,257 samples, 0.34%)</title><rect x="25.9323%" y="133" width="0.3389%" height="15" fill="rgb(227,1,9)"/><text x="26.1823%" y="143.50"></text></g><g><title>privacy_access_levels (1,512,587 samples, 0.36%)</title><rect x="26.2712%" y="165" width="0.3607%" height="15" fill="rgb(248,47,43)"/><text x="26.5212%" y="175.50"></text></g><g><title>privacy_checking_modules (3,929,823 samples, 0.94%)</title><rect x="26.6319%" y="165" width="0.9372%" height="15" fill="rgb(221,10,30)"/><text x="26.8819%" y="175.50"></text></g><g><title>check_mod_privacy (3,903,563 samples, 0.93%)</title><rect x="26.6382%" y="149" width="0.9309%" height="15" fill="rgb(210,229,1)"/><text x="26.8882%" y="159.50"></text></g><g><title>misc_checking_3 (16,261,931 samples, 3.88%)</title><rect x="23.7006%" y="181" width="3.8780%" height="15" fill="rgb(222,148,37)"/><text x="23.9506%" y="191.50">misc..</text></g><g><title>impl_parent (2,405,342 samples, 0.57%)</title><rect x="28.5797%" y="117" width="0.5736%" height="15" fill="rgb(234,67,33)"/><text x="28.8297%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,375,448 samples, 0.33%)</title><rect x="28.8253%" y="101" width="0.3280%" height="15" fill="rgb(247,98,35)"/><text x="29.0753%" y="111.50"></text></g><g><title>impl_trait_ref (5,275,302 samples, 1.26%)</title><rect x="29.1533%" y="117" width="1.2580%" height="15" fill="rgb(247,138,52)"/><text x="29.4033%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,439,000 samples, 1.06%)</title><rect x="29.3527%" y="101" width="1.0586%" height="15" fill="rgb(213,79,30)"/><text x="29.6027%" y="111.50"></text></g><g><title>trait_impls_of (1,167,543 samples, 0.28%)</title><rect x="30.4264%" y="117" width="0.2784%" height="15" fill="rgb(246,177,23)"/><text x="30.6764%" y="127.50"></text></g><g><title>implementations_of_trait (538,205 samples, 0.13%)</title><rect x="30.5764%" y="101" width="0.1283%" height="15" fill="rgb(230,62,27)"/><text x="30.8264%" y="111.50"></text></g><g><title>coherent_trait (12,746,662 samples, 3.04%)</title><rect x="27.6652%" y="149" width="3.0397%" height="15" fill="rgb(216,154,8)"/><text x="27.9152%" y="159.50">coh..</text></g><g><title>specialization_graph_of (12,698,381 samples, 3.03%)</title><rect x="27.6768%" y="133" width="3.0282%" height="15" fill="rgb(244,35,45)"/><text x="27.9268%" y="143.50">spe..</text></g><g><title>coherence_checking (13,251,407 samples, 3.16%)</title><rect x="27.6565%" y="165" width="3.1601%" height="15" fill="rgb(251,115,12)"/><text x="27.9065%" y="175.50">coh..</text></g><g><title>associated_item (615,286 samples, 0.15%)</title><rect x="47.1144%" y="101" width="0.1467%" height="15" fill="rgb(240,54,50)"/><text x="47.3644%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (498,456 samples, 0.12%)</title><rect x="47.1422%" y="85" width="0.1189%" height="15" fill="rgb(233,84,52)"/><text x="47.3922%" y="95.50"></text></g><g><title>associated_items (880,526 samples, 0.21%)</title><rect x="47.0607%" y="117" width="0.2100%" height="15" fill="rgb(207,117,47)"/><text x="47.3107%" y="127.50"></text></g><g><title>adt_dtorck_constraint (623,275 samples, 0.15%)</title><rect x="47.7845%" y="85" width="0.1486%" height="15" fill="rgb(249,43,39)"/><text x="48.0345%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,297,252 samples, 0.31%)</title><rect x="47.6433%" y="101" width="0.3094%" height="15" fill="rgb(209,38,44)"/><text x="47.8933%" y="111.50"></text></g><g><title>dropck_outlives (2,850,158 samples, 0.68%)</title><rect x="47.3281%" y="117" width="0.6797%" height="15" fill="rgb(236,212,23)"/><text x="47.5781%" y="127.50"></text></g><g><title>generics_of (469,248 samples, 0.11%)</title><rect x="49.0467%" y="101" width="0.1119%" height="15" fill="rgb(242,79,21)"/><text x="49.2967%" y="111.50"></text></g><g><title>impl_trait_ref (559,166 samples, 0.13%)</title><rect x="49.1932%" y="101" width="0.1333%" height="15" fill="rgb(211,96,35)"/><text x="49.4432%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (467,435 samples, 0.11%)</title><rect x="49.2151%" y="85" width="0.1115%" height="15" fill="rgb(253,215,40)"/><text x="49.4651%" y="95.50"></text></g><g><title>predicates_of (520,865 samples, 0.12%)</title><rect x="49.3358%" y="101" width="0.1242%" height="15" fill="rgb(211,81,21)"/><text x="49.5858%" y="111.50"></text></g><g><title>specializes (1,016,373 samples, 0.24%)</title><rect x="49.4600%" y="101" width="0.2424%" height="15" fill="rgb(208,190,38)"/><text x="49.7100%" y="111.50"></text></g><g><title>param_env (594,988 samples, 0.14%)</title><rect x="49.5605%" y="85" width="0.1419%" height="15" fill="rgb(235,213,38)"/><text x="49.8105%" y="95.50"></text></g><g><title>trait_impls_of (772,641 samples, 0.18%)</title><rect x="49.7075%" y="101" width="0.1843%" height="15" fill="rgb(237,122,38)"/><text x="49.9575%" y="111.50"></text></g><g><title>evaluate_obligation (7,915,120 samples, 1.89%)</title><rect x="48.0077%" y="117" width="1.8875%" height="15" fill="rgb(244,218,35)"/><text x="48.2577%" y="127.50">e..</text></g><g><title>evaluate_obligation (1,147,803 samples, 0.27%)</title><rect x="50.9101%" y="101" width="0.2737%" height="15" fill="rgb(240,68,47)"/><text x="51.1601%" y="111.50"></text></g><g><title>method_autoderef_steps (3,910,645 samples, 0.93%)</title><rect x="50.2530%" y="117" width="0.9326%" height="15" fill="rgb(210,16,53)"/><text x="50.5030%" y="127.50"></text></g><g><title>predicates_of (711,186 samples, 0.17%)</title><rect x="51.2616%" y="117" width="0.1696%" height="15" fill="rgb(235,124,12)"/><text x="51.5116%" y="127.50"></text></g><g><title>predicates_defined_on (493,153 samples, 0.12%)</title><rect x="51.3136%" y="101" width="0.1176%" height="15" fill="rgb(224,169,11)"/><text x="51.5636%" y="111.50"></text></g><g><title>typeck (5,429,181 samples, 1.29%)</title><rect x="51.5047%" y="117" width="1.2947%" height="15" fill="rgb(250,166,2)"/><text x="51.7547%" y="127.50"></text></g><g><title>item_bodies_checking (92,157,284 samples, 21.98%)</title><rect x="30.8580%" y="165" width="21.9769%" height="15" fill="rgb(242,216,29)"/><text x="31.1080%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (92,153,234 samples, 21.98%)</title><rect x="30.8589%" y="149" width="21.9759%" height="15" fill="rgb(230,116,27)"/><text x="31.1089%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (91,801,609 samples, 21.89%)</title><rect x="30.9428%" y="133" width="21.8921%" height="15" fill="rgb(228,99,48)"/><text x="31.1928%" y="143.50">typeck</text></g><g><title>adt_destructor (596,917 samples, 0.14%)</title><rect x="54.2361%" y="133" width="0.1423%" height="15" fill="rgb(253,11,6)"/><text x="54.4861%" y="143.50"></text></g><g><title>coherent_trait (555,077 samples, 0.13%)</title><rect x="54.2461%" y="117" width="0.1324%" height="15" fill="rgb(247,143,39)"/><text x="54.4961%" y="127.50"></text></g><g><title>specialization_graph_of (551,567 samples, 0.13%)</title><rect x="54.2469%" y="101" width="0.1315%" height="15" fill="rgb(236,97,10)"/><text x="54.4969%" y="111.50"></text></g><g><title>resolve_instance (428,825 samples, 0.10%)</title><rect x="55.3147%" y="37" width="0.1023%" height="15" fill="rgb(233,208,19)"/><text x="55.5647%" y="47.50"></text></g><g><title>mir_built (4,266,938 samples, 1.02%)</title><rect x="55.2455%" y="53" width="1.0175%" height="15" fill="rgb(216,164,2)"/><text x="55.4955%" y="63.50"></text></g><g><title>typeck (3,468,289 samples, 0.83%)</title><rect x="55.4359%" y="37" width="0.8271%" height="15" fill="rgb(220,129,5)"/><text x="55.6859%" y="47.50"></text></g><g><title>mir_const (4,918,764 samples, 1.17%)</title><rect x="55.1315%" y="85" width="1.1730%" height="15" fill="rgb(242,17,10)"/><text x="55.3815%" y="95.50"></text></g><g><title>unsafety_check_result (4,566,941 samples, 1.09%)</title><rect x="55.2154%" y="69" width="1.0891%" height="15" fill="rgb(242,107,0)"/><text x="55.4654%" y="79.50"></text></g><g><title>mir_promoted (5,037,255 samples, 1.20%)</title><rect x="55.1060%" y="101" width="1.2012%" height="15" fill="rgb(251,28,31)"/><text x="55.3560%" y="111.50"></text></g><g><title>type_of (7,984,670 samples, 1.90%)</title><rect x="54.5529%" y="133" width="1.9041%" height="15" fill="rgb(233,223,10)"/><text x="54.8029%" y="143.50">t..</text></g><g><title>mir_borrowck (7,881,268 samples, 1.88%)</title><rect x="54.5776%" y="117" width="1.8795%" height="15" fill="rgb(215,21,27)"/><text x="54.8276%" y="127.50">m..</text></g><g><title>item_types_checking (16,208,581 samples, 3.87%)</title><rect x="52.8349%" y="165" width="3.8653%" height="15" fill="rgb(232,23,21)"/><text x="53.0849%" y="175.50">item..</text></g><g><title>check_mod_item_types (16,172,471 samples, 3.86%)</title><rect x="52.8435%" y="149" width="3.8567%" height="15" fill="rgb(244,5,23)"/><text x="53.0935%" y="159.50">chec..</text></g><g><title>typeck (1,019,423 samples, 0.24%)</title><rect x="56.4570%" y="133" width="0.2431%" height="15" fill="rgb(226,81,46)"/><text x="56.7070%" y="143.50"></text></g><g><title>fn_sig (1,585,243 samples, 0.38%)</title><rect x="57.0387%" y="133" width="0.3780%" height="15" fill="rgb(247,70,30)"/><text x="57.2887%" y="143.50"></text></g><g><title>is_late_bound_map (988,754 samples, 0.24%)</title><rect x="57.5619%" y="117" width="0.2358%" height="15" fill="rgb(212,68,19)"/><text x="57.8119%" y="127.50"></text></g><g><title>resolve_lifetimes (924,134 samples, 0.22%)</title><rect x="57.5773%" y="101" width="0.2204%" height="15" fill="rgb(240,187,13)"/><text x="57.8273%" y="111.50"></text></g><g><title>named_region_map (487,906 samples, 0.12%)</title><rect x="57.7977%" y="117" width="0.1164%" height="15" fill="rgb(223,113,26)"/><text x="58.0477%" y="127.50"></text></g><g><title>resolve_lifetimes (441,935 samples, 0.11%)</title><rect x="57.8087%" y="101" width="0.1054%" height="15" fill="rgb(206,192,2)"/><text x="58.0587%" y="111.50"></text></g><g><title>generics_of (2,143,082 samples, 0.51%)</title><rect x="57.4168%" y="133" width="0.5111%" height="15" fill="rgb(241,108,4)"/><text x="57.6668%" y="143.50"></text></g><g><title>late_bound_vars_map (767,756 samples, 0.18%)</title><rect x="58.5108%" y="85" width="0.1831%" height="15" fill="rgb(247,173,49)"/><text x="58.7608%" y="95.50"></text></g><g><title>resolve_lifetimes (710,406 samples, 0.17%)</title><rect x="58.5244%" y="69" width="0.1694%" height="15" fill="rgb(224,114,35)"/><text x="58.7744%" y="79.50"></text></g><g><title>explicit_predicates_of (2,540,075 samples, 0.61%)</title><rect x="58.1541%" y="101" width="0.6057%" height="15" fill="rgb(245,159,27)"/><text x="58.4041%" y="111.50"></text></g><g><title>predicates_of (5,026,290 samples, 1.20%)</title><rect x="57.9638%" y="133" width="1.1986%" height="15" fill="rgb(245,172,44)"/><text x="58.2138%" y="143.50"></text></g><g><title>predicates_defined_on (4,720,397 samples, 1.13%)</title><rect x="58.0368%" y="117" width="1.1257%" height="15" fill="rgb(236,23,11)"/><text x="58.2868%" y="127.50"></text></g><g><title>inferred_outlives_of (1,688,258 samples, 0.40%)</title><rect x="58.7599%" y="101" width="0.4026%" height="15" fill="rgb(205,117,38)"/><text x="59.0099%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,570,118 samples, 0.37%)</title><rect x="58.7880%" y="85" width="0.3744%" height="15" fill="rgb(237,72,25)"/><text x="59.0380%" y="95.50"></text></g><g><title>type_of (905,633 samples, 0.22%)</title><rect x="58.9465%" y="69" width="0.2160%" height="15" fill="rgb(244,70,9)"/><text x="59.1965%" y="79.50"></text></g><g><title>type_collecting (11,152,774 samples, 2.66%)</title><rect x="56.7040%" y="165" width="2.6596%" height="15" fill="rgb(217,125,39)"/><text x="56.9540%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (11,106,714 samples, 2.65%)</title><rect x="56.7150%" y="149" width="2.6486%" height="15" fill="rgb(235,36,10)"/><text x="56.9650%" y="159.50">co..</text></g><g><title>type_of (684,001 samples, 0.16%)</title><rect x="59.2005%" y="133" width="0.1631%" height="15" fill="rgb(251,123,47)"/><text x="59.4505%" y="143.50"></text></g><g><title>evaluate_obligation (4,423,672 samples, 1.05%)</title><rect x="62.1014%" y="133" width="1.0549%" height="15" fill="rgb(221,13,13)"/><text x="62.3514%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,600,588 samples, 0.38%)</title><rect x="63.1730%" y="133" width="0.3817%" height="15" fill="rgb(238,131,9)"/><text x="63.4230%" y="143.50"></text></g><g><title>param_env (1,439,934 samples, 0.34%)</title><rect x="63.5562%" y="133" width="0.3434%" height="15" fill="rgb(211,50,8)"/><text x="63.8062%" y="143.50"></text></g><g><title>region_scope_tree (1,142,355 samples, 0.27%)</title><rect x="63.9128%" y="133" width="0.2724%" height="15" fill="rgb(245,182,24)"/><text x="64.1628%" y="143.50"></text></g><g><title>check_impl_item_well_formed (19,307,682 samples, 4.60%)</title><rect x="59.6334%" y="149" width="4.6043%" height="15" fill="rgb(242,14,37)"/><text x="59.8834%" y="159.50">check..</text></g><g><title>adt_def (523,445 samples, 0.12%)</title><rect x="66.9931%" y="101" width="0.1248%" height="15" fill="rgb(246,228,12)"/><text x="67.2431%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (520,005 samples, 0.12%)</title><rect x="66.9940%" y="85" width="0.1240%" height="15" fill="rgb(213,55,15)"/><text x="67.2440%" y="95.50"></text></g><g><title>item_attrs (482,105 samples, 0.11%)</title><rect x="67.0030%" y="69" width="0.1150%" height="15" fill="rgb(209,9,3)"/><text x="67.2530%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (478,595 samples, 0.11%)</title><rect x="67.0038%" y="53" width="0.1141%" height="15" fill="rgb(230,59,30)"/><text x="67.2538%" y="63.50"></text></g><g><title>adt_sized_constraint (662,696 samples, 0.16%)</title><rect x="66.9892%" y="117" width="0.1580%" height="15" fill="rgb(209,121,21)"/><text x="67.2392%" y="127.50"></text></g><g><title>evaluate_obligation (914,270 samples, 0.22%)</title><rect x="66.9373%" y="133" width="0.2180%" height="15" fill="rgb(220,109,13)"/><text x="67.1873%" y="143.50"></text></g><g><title>implied_outlives_bounds (710,745 samples, 0.17%)</title><rect x="67.1773%" y="133" width="0.1695%" height="15" fill="rgb(232,18,1)"/><text x="67.4273%" y="143.50"></text></g><g><title>param_env (2,149,580 samples, 0.51%)</title><rect x="67.3514%" y="133" width="0.5126%" height="15" fill="rgb(215,41,42)"/><text x="67.6014%" y="143.50"></text></g><g><title>check_item_well_formed (16,562,142 samples, 3.95%)</title><rect x="64.2377%" y="149" width="3.9496%" height="15" fill="rgb(224,123,36)"/><text x="64.4877%" y="159.50">chec..</text></g><g><title>variances_of (426,034 samples, 0.10%)</title><rect x="68.0857%" y="133" width="0.1016%" height="15" fill="rgb(240,125,3)"/><text x="68.3357%" y="143.50"></text></g><g><title>analysis (286,524,545 samples, 68.33%)</title><rect x="0.2306%" y="197" width="68.3279%" height="15" fill="rgb(205,98,50)"/><text x="0.4806%" y="207.50">analysis</text></g><g><title>type_check_crate (171,844,301 samples, 40.98%)</title><rect x="27.5786%" y="181" width="40.9800%" height="15" fill="rgb(205,185,37)"/><text x="27.8286%" y="191.50">type_check_crate</text></g><g><title>wf_checking (38,533,298 samples, 9.19%)</title><rect x="59.3694%" y="165" width="9.1891%" height="15" fill="rgb(238,207,15)"/><text x="59.6194%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,556,708 samples, 0.37%)</title><rect x="68.1873%" y="149" width="0.3712%" height="15" fill="rgb(213,199,42)"/><text x="68.4373%" y="159.50"></text></g><g><title>codegen_crate (724,228 samples, 0.17%)</title><rect x="68.5607%" y="197" width="0.1727%" height="15" fill="rgb(235,201,11)"/><text x="68.8107%" y="207.50"></text></g><g><title>AST_validation (1,164,963 samples, 0.28%)</title><rect x="68.7810%" y="181" width="0.2778%" height="15" fill="rgb(207,46,11)"/><text x="69.0310%" y="191.50"></text></g><g><title>metadata_load_macro (903,400 samples, 0.22%)</title><rect x="87.4853%" y="149" width="0.2154%" height="15" fill="rgb(241,35,35)"/><text x="87.7353%" y="159.50"></text></g><g><title>metadata_register_crate (7,665,215 samples, 1.83%)</title><rect x="87.7007%" y="149" width="1.8279%" height="15" fill="rgb(243,32,47)"/><text x="87.9507%" y="159.50">m..</text></g><g><title>metadata_register_crate (5,647,252 samples, 1.35%)</title><rect x="88.1820%" y="133" width="1.3467%" height="15" fill="rgb(247,202,23)"/><text x="88.4320%" y="143.50"></text></g><g><title>macro_expand_crate (86,617,733 samples, 20.66%)</title><rect x="69.1368%" y="181" width="20.6559%" height="15" fill="rgb(219,102,11)"/><text x="69.3868%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (86,603,003 samples, 20.65%)</title><rect x="69.1403%" y="165" width="20.6524%" height="15" fill="rgb(243,110,44)"/><text x="69.3903%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,107,115 samples, 0.26%)</title><rect x="89.5287%" y="149" width="0.2640%" height="15" fill="rgb(222,74,54)"/><text x="89.7787%" y="159.50"></text></g><g><title>finalize_macro_resolutions (588,527 samples, 0.14%)</title><rect x="89.9112%" y="165" width="0.1403%" height="15" fill="rgb(216,99,12)"/><text x="90.1612%" y="175.50"></text></g><g><title>late_resolve_crate (5,906,976 samples, 1.41%)</title><rect x="90.0515%" y="165" width="1.4086%" height="15" fill="rgb(226,22,26)"/><text x="90.3015%" y="175.50"></text></g><g><title>configure_and_expand (95,828,915 samples, 22.85%)</title><rect x="68.7334%" y="197" width="22.8525%" height="15" fill="rgb(217,163,10)"/><text x="68.9834%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,391,972 samples, 1.76%)</title><rect x="89.8231%" y="181" width="1.7628%" height="15" fill="rgb(213,25,53)"/><text x="90.0731%" y="191.50"></text></g><g><title>drop_ast (1,429,496 samples, 0.34%)</title><rect x="91.5858%" y="197" width="0.3409%" height="15" fill="rgb(252,105,26)"/><text x="91.8358%" y="207.50"></text></g><g><title>early_lint_checks (3,263,716 samples, 0.78%)</title><rect x="91.9346%" y="197" width="0.7783%" height="15" fill="rgb(220,39,43)"/><text x="92.1846%" y="207.50"></text></g><g><title>free_global_ctxt (5,583,722 samples, 1.33%)</title><rect x="92.7129%" y="197" width="1.3316%" height="15" fill="rgb(229,68,48)"/><text x="92.9629%" y="207.50"></text></g><g><title>generate_crate_metadata (7,727,216 samples, 1.84%)</title><rect x="94.0445%" y="197" width="1.8427%" height="15" fill="rgb(252,8,32)"/><text x="94.2945%" y="207.50">g..</text></g><g><title>hir_lowering (13,958,705 samples, 3.33%)</title><rect x="95.8872%" y="197" width="3.3288%" height="15" fill="rgb(223,20,43)"/><text x="96.1372%" y="207.50">hir..</text></g><g><title>self_profile_alloc_query_strings (1,632,648 samples, 0.39%)</title><rect x="99.3984%" y="197" width="0.3893%" height="15" fill="rgb(229,81,49)"/><text x="99.6484%" y="207.50"></text></g><g><title>all (419,337,252 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (419,337,252 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (737,979 samples, 0.18%)</title><rect x="99.8240%" y="197" width="0.1760%" height="15" fill="rgb(249,174,33)"/><text x="100.0740%" y="207.50"></text></g></svg></svg>