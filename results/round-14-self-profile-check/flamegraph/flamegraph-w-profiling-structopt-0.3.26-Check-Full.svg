<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (67,570 samples, 0.12%)</title><rect x="6.2454%" y="229" width="0.1245%" height="15" fill="rgb(227,0,7)"/><text x="6.4954%" y="239.50"></text></g><g><title>item_attrs (57,412 samples, 0.11%)</title><rect x="6.5606%" y="197" width="0.1058%" height="15" fill="rgb(217,0,24)"/><text x="6.8106%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (55,372 samples, 0.10%)</title><rect x="6.5643%" y="181" width="0.1020%" height="15" fill="rgb(221,193,54)"/><text x="6.8143%" y="191.50"></text></g><g><title>codegen_fn_attrs (80,302 samples, 0.15%)</title><rect x="6.5283%" y="213" width="0.1479%" height="15" fill="rgb(248,212,6)"/><text x="6.7783%" y="223.50"></text></g><g><title>adt_drop_tys (82,041 samples, 0.15%)</title><rect x="7.5106%" y="165" width="0.1511%" height="15" fill="rgb(208,68,35)"/><text x="7.7606%" y="175.50"></text></g><g><title>adt_drop_tys (166,791 samples, 0.31%)</title><rect x="7.4906%" y="181" width="0.3073%" height="15" fill="rgb(232,128,0)"/><text x="7.7406%" y="191.50"></text></g><g><title>explicit_predicates_of (111,831 samples, 0.21%)</title><rect x="8.3455%" y="117" width="0.2060%" height="15" fill="rgb(207,160,47)"/><text x="8.5955%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (110,481 samples, 0.20%)</title><rect x="8.3480%" y="101" width="0.2035%" height="15" fill="rgb(228,23,34)"/><text x="8.5980%" y="111.50"></text></g><g><title>needs_drop_raw (613,606 samples, 1.13%)</title><rect x="7.4254%" y="197" width="1.1304%" height="15" fill="rgb(218,30,26)"/><text x="7.6754%" y="207.50"></text></g><g><title>is_copy_raw (411,415 samples, 0.76%)</title><rect x="7.7978%" y="181" width="0.7579%" height="15" fill="rgb(220,122,19)"/><text x="8.0478%" y="191.50"></text></g><g><title>evaluate_obligation (359,105 samples, 0.66%)</title><rect x="7.8942%" y="165" width="0.6615%" height="15" fill="rgb(250,228,42)"/><text x="8.1442%" y="175.50"></text></g><g><title>predicates_of (126,431 samples, 0.23%)</title><rect x="8.3228%" y="149" width="0.2329%" height="15" fill="rgb(240,193,28)"/><text x="8.5728%" y="159.50"></text></g><g><title>predicates_defined_on (118,691 samples, 0.22%)</title><rect x="8.3371%" y="133" width="0.2187%" height="15" fill="rgb(216,20,37)"/><text x="8.5871%" y="143.50"></text></g><g><title>resolve_instance (153,811 samples, 0.28%)</title><rect x="8.5557%" y="197" width="0.2834%" height="15" fill="rgb(206,188,39)"/><text x="8.8057%" y="207.50"></text></g><g><title>thir_body (111,321 samples, 0.21%)</title><rect x="8.8509%" y="197" width="0.2051%" height="15" fill="rgb(217,207,13)"/><text x="9.1009%" y="207.50"></text></g><g><title>mir_const (1,749,039 samples, 3.22%)</title><rect x="5.8782%" y="245" width="3.2221%" height="15" fill="rgb(231,73,38)"/><text x="6.1282%" y="255.50">mir..</text></g><g><title>unsafety_check_result (1,482,118 samples, 2.73%)</title><rect x="6.3699%" y="229" width="2.7304%" height="15" fill="rgb(225,20,46)"/><text x="6.6199%" y="239.50">un..</text></g><g><title>mir_built (1,315,854 samples, 2.42%)</title><rect x="6.6762%" y="213" width="2.4241%" height="15" fill="rgb(210,31,41)"/><text x="6.9262%" y="223.50">mi..</text></g><g><title>mir_promoted (1,946,090 samples, 3.59%)</title><rect x="5.5382%" y="261" width="3.5851%" height="15" fill="rgb(221,200,47)"/><text x="5.7882%" y="271.50">mir_..</text></g><g><title>type_op_ascribe_user_type (135,492 samples, 0.25%)</title><rect x="9.1233%" y="261" width="0.2496%" height="15" fill="rgb(226,26,5)"/><text x="9.3733%" y="271.50"></text></g><g><title>type_op_normalize_predicate (54,751 samples, 0.10%)</title><rect x="9.4337%" y="261" width="0.1009%" height="15" fill="rgb(249,33,26)"/><text x="9.6837%" y="271.50"></text></g><g><title>type_op_prove_predicate (350,481 samples, 0.65%)</title><rect x="9.5345%" y="261" width="0.6457%" height="15" fill="rgb(235,183,28)"/><text x="9.7845%" y="271.50"></text></g><g><title>MIR_borrow_checking (4,426,579 samples, 8.15%)</title><rect x="2.0681%" y="293" width="8.1546%" height="15" fill="rgb(221,5,38)"/><text x="2.3181%" y="303.50">MIR_borrow_..</text></g><g><title>mir_borrowck (4,402,609 samples, 8.11%)</title><rect x="2.1122%" y="277" width="8.1105%" height="15" fill="rgb(247,18,42)"/><text x="2.3622%" y="287.50">mir_borrowck</text></g><g><title>hir_module_items (177,432 samples, 0.33%)</title><rect x="10.2341%" y="293" width="0.3269%" height="15" fill="rgb(241,131,45)"/><text x="10.4841%" y="303.50"></text></g><g><title>get_lang_items (116,342 samples, 0.21%)</title><rect x="11.0710%" y="245" width="0.2143%" height="15" fill="rgb(249,31,29)"/><text x="11.3210%" y="255.50"></text></g><g><title>associated_item (56,122 samples, 0.10%)</title><rect x="11.3339%" y="229" width="0.1034%" height="15" fill="rgb(225,111,53)"/><text x="11.5839%" y="239.50"></text></g><g><title>should_inherit_track_caller (86,782 samples, 0.16%)</title><rect x="11.2853%" y="245" width="0.1599%" height="15" fill="rgb(238,160,17)"/><text x="11.5353%" y="255.50"></text></g><g><title>codegen_fn_attrs (313,844 samples, 0.58%)</title><rect x="10.9320%" y="261" width="0.5782%" height="15" fill="rgb(214,148,48)"/><text x="11.1820%" y="271.50"></text></g><g><title>check_mod_attrs (483,195 samples, 0.89%)</title><rect x="10.6207%" y="277" width="0.8901%" height="15" fill="rgb(232,36,49)"/><text x="10.8707%" y="287.50"></text></g><g><title>lookup_deprecation_entry (94,051 samples, 0.17%)</title><rect x="11.7833%" y="261" width="0.1733%" height="15" fill="rgb(209,103,24)"/><text x="12.0333%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (211,212 samples, 0.39%)</title><rect x="11.6588%" y="277" width="0.3891%" height="15" fill="rgb(229,88,8)"/><text x="11.9088%" y="287.50"></text></g><g><title>misc_checking_1 (851,110 samples, 1.57%)</title><rect x="10.5616%" y="293" width="1.5679%" height="15" fill="rgb(213,181,19)"/><text x="10.8116%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (310,694 samples, 0.57%)</title><rect x="12.1318%" y="277" width="0.5724%" height="15" fill="rgb(254,191,54)"/><text x="12.3818%" y="287.50"></text></g><g><title>check_mod_liveness (292,463 samples, 0.54%)</title><rect x="12.1654%" y="261" width="0.5388%" height="15" fill="rgb(241,83,37)"/><text x="12.4154%" y="271.50"></text></g><g><title>type_uninhabited_from (234,523 samples, 0.43%)</title><rect x="12.2722%" y="245" width="0.4320%" height="15" fill="rgb(233,36,39)"/><text x="12.5222%" y="255.50"></text></g><g><title>type_uninhabited_from (213,292 samples, 0.39%)</title><rect x="12.3113%" y="229" width="0.3929%" height="15" fill="rgb(226,3,54)"/><text x="12.5613%" y="239.50"></text></g><g><title>type_uninhabited_from (175,902 samples, 0.32%)</title><rect x="12.3801%" y="213" width="0.3240%" height="15" fill="rgb(245,192,40)"/><text x="12.6301%" y="223.50"></text></g><g><title>type_uninhabited_from (103,530 samples, 0.19%)</title><rect x="12.5135%" y="197" width="0.1907%" height="15" fill="rgb(238,167,29)"/><text x="12.7635%" y="207.50"></text></g><g><title>type_uninhabited_from (65,800 samples, 0.12%)</title><rect x="12.5830%" y="181" width="0.1212%" height="15" fill="rgb(232,182,51)"/><text x="12.8330%" y="191.50"></text></g><g><title>misc_checking_2 (423,545 samples, 0.78%)</title><rect x="12.1295%" y="293" width="0.7803%" height="15" fill="rgb(231,60,39)"/><text x="12.3795%" y="303.50"></text></g><g><title>match_checking (111,591 samples, 0.21%)</title><rect x="12.7042%" y="277" width="0.2056%" height="15" fill="rgb(208,69,12)"/><text x="12.9542%" y="287.50"></text></g><g><title>check_match (104,751 samples, 0.19%)</title><rect x="12.7168%" y="261" width="0.1930%" height="15" fill="rgb(235,93,37)"/><text x="12.9668%" y="271.50"></text></g><g><title>death_checking (67,081 samples, 0.12%)</title><rect x="13.0150%" y="277" width="0.1236%" height="15" fill="rgb(213,116,39)"/><text x="13.2650%" y="287.50"></text></g><g><title>crate_lints (1,035,661 samples, 1.91%)</title><rect x="13.1409%" y="261" width="1.9079%" height="15" fill="rgb(222,207,29)"/><text x="13.3909%" y="271.50">c..</text></g><g><title>lint_checking (1,102,242 samples, 2.03%)</title><rect x="13.1386%" y="277" width="2.0305%" height="15" fill="rgb(206,96,30)"/><text x="13.3886%" y="287.50">l..</text></g><g><title>module_lints (65,281 samples, 0.12%)</title><rect x="15.0488%" y="261" width="0.1203%" height="15" fill="rgb(218,138,4)"/><text x="15.2988%" y="271.50"></text></g><g><title>lint_mod (63,261 samples, 0.12%)</title><rect x="15.0526%" y="245" width="0.1165%" height="15" fill="rgb(250,191,14)"/><text x="15.3026%" y="255.50"></text></g><g><title>privacy_access_levels (68,331 samples, 0.13%)</title><rect x="15.1691%" y="277" width="0.1259%" height="15" fill="rgb(239,60,40)"/><text x="15.4191%" y="287.50"></text></g><g><title>privacy_checking_modules (120,251 samples, 0.22%)</title><rect x="15.2950%" y="277" width="0.2215%" height="15" fill="rgb(206,27,48)"/><text x="15.5450%" y="287.50"></text></g><g><title>check_mod_privacy (119,281 samples, 0.22%)</title><rect x="15.2968%" y="261" width="0.2197%" height="15" fill="rgb(225,35,8)"/><text x="15.5468%" y="271.50"></text></g><g><title>misc_checking_3 (1,433,476 samples, 2.64%)</title><rect x="12.9098%" y="293" width="2.6407%" height="15" fill="rgb(250,213,24)"/><text x="13.1598%" y="303.50">mi..</text></g><g><title>coherent_trait (87,301 samples, 0.16%)</title><rect x="15.6175%" y="261" width="0.1608%" height="15" fill="rgb(247,123,22)"/><text x="15.8675%" y="271.50"></text></g><g><title>specialization_graph_of (80,661 samples, 0.15%)</title><rect x="15.6297%" y="245" width="0.1486%" height="15" fill="rgb(231,138,38)"/><text x="15.8797%" y="255.50"></text></g><g><title>coherence_checking (138,992 samples, 0.26%)</title><rect x="15.5906%" y="277" width="0.2561%" height="15" fill="rgb(231,145,46)"/><text x="15.8406%" y="287.50"></text></g><g><title>adt_sized_constraint (66,531 samples, 0.12%)</title><rect x="19.7872%" y="197" width="0.1226%" height="15" fill="rgb(251,118,11)"/><text x="20.0372%" y="207.50"></text></g><g><title>adt_sized_constraint (77,481 samples, 0.14%)</title><rect x="19.7695%" y="213" width="0.1427%" height="15" fill="rgb(217,147,25)"/><text x="20.0195%" y="223.50"></text></g><g><title>adt_sized_constraint (100,821 samples, 0.19%)</title><rect x="19.7341%" y="229" width="0.1857%" height="15" fill="rgb(247,81,37)"/><text x="19.9841%" y="239.50"></text></g><g><title>associated_item (122,093 samples, 0.22%)</title><rect x="20.0371%" y="213" width="0.2249%" height="15" fill="rgb(209,12,38)"/><text x="20.2871%" y="223.50"></text></g><g><title>metadata_decode_entry_associated_item (92,682 samples, 0.17%)</title><rect x="20.0913%" y="197" width="0.1707%" height="15" fill="rgb(227,1,9)"/><text x="20.3413%" y="207.50"></text></g><g><title>associated_items (190,693 samples, 0.35%)</title><rect x="19.9260%" y="229" width="0.3513%" height="15" fill="rgb(248,47,43)"/><text x="20.1760%" y="239.50"></text></g><g><title>adt_def (190,984 samples, 0.35%)</title><rect x="20.8728%" y="197" width="0.3518%" height="15" fill="rgb(221,10,30)"/><text x="21.1228%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (187,414 samples, 0.35%)</title><rect x="20.8794%" y="181" width="0.3453%" height="15" fill="rgb(210,229,1)"/><text x="21.1294%" y="191.50"></text></g><g><title>item_attrs (142,533 samples, 0.26%)</title><rect x="20.9621%" y="165" width="0.2626%" height="15" fill="rgb(222,148,37)"/><text x="21.2121%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (139,133 samples, 0.26%)</title><rect x="20.9684%" y="149" width="0.2563%" height="15" fill="rgb(234,67,33)"/><text x="21.2184%" y="159.50"></text></g><g><title>adt_def (163,372 samples, 0.30%)</title><rect x="21.5356%" y="165" width="0.3010%" height="15" fill="rgb(247,98,35)"/><text x="21.7856%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (161,952 samples, 0.30%)</title><rect x="21.5382%" y="149" width="0.2983%" height="15" fill="rgb(247,138,52)"/><text x="21.7882%" y="159.50"></text></g><g><title>item_attrs (55,351 samples, 0.10%)</title><rect x="21.7346%" y="133" width="0.1020%" height="15" fill="rgb(213,79,30)"/><text x="21.9846%" y="143.50"></text></g><g><title>impl_parent (78,140 samples, 0.14%)</title><rect x="22.2974%" y="53" width="0.1439%" height="15" fill="rgb(246,177,23)"/><text x="22.5474%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (58,520 samples, 0.11%)</title><rect x="22.3335%" y="37" width="0.1078%" height="15" fill="rgb(230,62,27)"/><text x="22.5835%" y="47.50"></text></g><g><title>impl_trait_ref (305,184 samples, 0.56%)</title><rect x="22.4413%" y="53" width="0.5622%" height="15" fill="rgb(216,154,8)"/><text x="22.6913%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (285,743 samples, 0.53%)</title><rect x="22.4772%" y="37" width="0.5264%" height="15" fill="rgb(244,35,45)"/><text x="22.7272%" y="47.50"></text></g><g><title>coherent_trait (511,956 samples, 0.94%)</title><rect x="22.1176%" y="85" width="0.9431%" height="15" fill="rgb(251,115,12)"/><text x="22.3676%" y="95.50"></text></g><g><title>specialization_graph_of (510,276 samples, 0.94%)</title><rect x="22.1206%" y="69" width="0.9400%" height="15" fill="rgb(240,54,50)"/><text x="22.3706%" y="79.50"></text></g><g><title>adt_destructor (517,166 samples, 0.95%)</title><rect x="22.1101%" y="117" width="0.9527%" height="15" fill="rgb(233,84,52)"/><text x="22.3601%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (516,476 samples, 0.95%)</title><rect x="22.1114%" y="101" width="0.9515%" height="15" fill="rgb(207,117,47)"/><text x="22.3614%" y="111.50"></text></g><g><title>adt_dtorck_constraint (538,296 samples, 0.99%)</title><rect x="22.0740%" y="133" width="0.9916%" height="15" fill="rgb(249,43,39)"/><text x="22.3240%" y="143.50"></text></g><g><title>adt_dtorck_constraint (596,687 samples, 1.10%)</title><rect x="21.9762%" y="149" width="1.0992%" height="15" fill="rgb(209,38,44)"/><text x="22.2262%" y="159.50"></text></g><g><title>adt_dtorck_constraint (669,527 samples, 1.23%)</title><rect x="21.8673%" y="165" width="1.2334%" height="15" fill="rgb(236,212,23)"/><text x="22.1173%" y="175.50"></text></g><g><title>adt_dtorck_constraint (910,460 samples, 1.68%)</title><rect x="21.4838%" y="181" width="1.6772%" height="15" fill="rgb(242,79,21)"/><text x="21.7338%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,108,091 samples, 2.04%)</title><rect x="21.2785%" y="197" width="2.0413%" height="15" fill="rgb(211,96,35)"/><text x="21.5285%" y="207.50">a..</text></g><g><title>type_of (74,861 samples, 0.14%)</title><rect x="23.1819%" y="181" width="0.1379%" height="15" fill="rgb(253,215,40)"/><text x="23.4319%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (65,901 samples, 0.12%)</title><rect x="23.1985%" y="165" width="0.1214%" height="15" fill="rgb(211,81,21)"/><text x="23.4485%" y="175.50"></text></g><g><title>dropck_outlives (1,871,914 samples, 3.45%)</title><rect x="20.3126%" y="229" width="3.4484%" height="15" fill="rgb(208,190,38)"/><text x="20.5626%" y="239.50">dro..</text></g><g><title>adt_dtorck_constraint (1,638,088 samples, 3.02%)</title><rect x="20.7433%" y="213" width="3.0177%" height="15" fill="rgb(235,213,38)"/><text x="20.9933%" y="223.50">adt..</text></g><g><title>type_of (223,372 samples, 0.41%)</title><rect x="23.3495%" y="197" width="0.4115%" height="15" fill="rgb(237,122,38)"/><text x="23.5995%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (215,102 samples, 0.40%)</title><rect x="23.3647%" y="181" width="0.3963%" height="15" fill="rgb(244,218,35)"/><text x="23.6147%" y="191.50"></text></g><g><title>evaluate_obligation (194,173 samples, 0.36%)</title><rect x="23.7610%" y="229" width="0.3577%" height="15" fill="rgb(240,68,47)"/><text x="24.0110%" y="239.50"></text></g><g><title>method_autoderef_steps (73,652 samples, 0.14%)</title><rect x="24.3807%" y="229" width="0.1357%" height="15" fill="rgb(210,16,53)"/><text x="24.6307%" y="239.50"></text></g><g><title>predicates_of (120,680 samples, 0.22%)</title><rect x="24.5437%" y="229" width="0.2223%" height="15" fill="rgb(235,124,12)"/><text x="24.7937%" y="239.50"></text></g><g><title>predicates_defined_on (83,760 samples, 0.15%)</title><rect x="24.6117%" y="213" width="0.1543%" height="15" fill="rgb(224,169,11)"/><text x="24.8617%" y="223.50"></text></g><g><title>associated_item (76,311 samples, 0.14%)</title><rect x="25.8748%" y="197" width="0.1406%" height="15" fill="rgb(250,166,2)"/><text x="26.1248%" y="207.50"></text></g><g><title>associated_items (111,472 samples, 0.21%)</title><rect x="25.8171%" y="213" width="0.2054%" height="15" fill="rgb(242,216,29)"/><text x="26.0671%" y="223.50"></text></g><g><title>evaluate_obligation (273,674 samples, 0.50%)</title><rect x="26.1173%" y="213" width="0.5042%" height="15" fill="rgb(230,116,27)"/><text x="26.3673%" y="223.50"></text></g><g><title>trait_impls_of (216,752 samples, 0.40%)</title><rect x="26.2222%" y="197" width="0.3993%" height="15" fill="rgb(228,99,48)"/><text x="26.4722%" y="207.50"></text></g><g><title>implementations_of_trait (63,700 samples, 0.12%)</title><rect x="26.5042%" y="181" width="0.1173%" height="15" fill="rgb(253,11,6)"/><text x="26.7542%" y="191.50"></text></g><g><title>typeck (1,052,711 samples, 1.94%)</title><rect x="24.8969%" y="229" width="1.9393%" height="15" fill="rgb(247,143,39)"/><text x="25.1469%" y="239.50">t..</text></g><g><title>item_bodies_checking (5,969,756 samples, 11.00%)</title><rect x="15.8831%" y="277" width="10.9975%" height="15" fill="rgb(236,97,10)"/><text x="16.1331%" y="287.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (5,967,606 samples, 10.99%)</title><rect x="15.8870%" y="261" width="10.9935%" height="15" fill="rgb(233,208,19)"/><text x="16.1370%" y="271.50">typeck_item_bodi..</text></g><g><title>typeck (5,951,246 samples, 10.96%)</title><rect x="15.9172%" y="245" width="10.9634%" height="15" fill="rgb(216,164,2)"/><text x="16.1672%" y="255.50">typeck</text></g><g><title>item_types_checking (164,342 samples, 0.30%)</title><rect x="26.8806%" y="277" width="0.3028%" height="15" fill="rgb(220,129,5)"/><text x="27.1306%" y="287.50"></text></g><g><title>check_mod_item_types (162,722 samples, 0.30%)</title><rect x="26.8835%" y="261" width="0.2998%" height="15" fill="rgb(242,17,10)"/><text x="27.1335%" y="271.50"></text></g><g><title>fn_sig (178,422 samples, 0.33%)</title><rect x="27.4289%" y="245" width="0.3287%" height="15" fill="rgb(242,107,0)"/><text x="27.6789%" y="255.50"></text></g><g><title>type_of (59,811 samples, 0.11%)</title><rect x="27.6474%" y="229" width="0.1102%" height="15" fill="rgb(251,28,31)"/><text x="27.8974%" y="239.50"></text></g><g><title>is_late_bound_map (115,741 samples, 0.21%)</title><rect x="27.9035%" y="229" width="0.2132%" height="15" fill="rgb(233,223,10)"/><text x="28.1535%" y="239.50"></text></g><g><title>resolve_lifetimes (108,411 samples, 0.20%)</title><rect x="27.9170%" y="213" width="0.1997%" height="15" fill="rgb(215,21,27)"/><text x="28.1670%" y="223.50"></text></g><g><title>generics_of (209,401 samples, 0.39%)</title><rect x="27.7575%" y="245" width="0.3858%" height="15" fill="rgb(232,23,21)"/><text x="28.0075%" y="255.50"></text></g><g><title>late_bound_vars_map (195,473 samples, 0.36%)</title><rect x="28.5634%" y="197" width="0.3601%" height="15" fill="rgb(244,5,23)"/><text x="28.8134%" y="207.50"></text></g><g><title>resolve_lifetimes (191,463 samples, 0.35%)</title><rect x="28.5708%" y="181" width="0.3527%" height="15" fill="rgb(226,81,46)"/><text x="28.8208%" y="191.50"></text></g><g><title>lint_levels (80,161 samples, 0.15%)</title><rect x="28.7759%" y="165" width="0.1477%" height="15" fill="rgb(247,70,30)"/><text x="29.0259%" y="175.50"></text></g><g><title>type_param_predicates (107,871 samples, 0.20%)</title><rect x="29.0611%" y="197" width="0.1987%" height="15" fill="rgb(212,68,19)"/><text x="29.3111%" y="207.50"></text></g><g><title>explicit_predicates_of (544,447 samples, 1.00%)</title><rect x="28.2583%" y="213" width="1.0030%" height="15" fill="rgb(240,187,13)"/><text x="28.5083%" y="223.50"></text></g><g><title>predicates_of (613,858 samples, 1.13%)</title><rect x="28.1507%" y="245" width="1.1308%" height="15" fill="rgb(223,113,26)"/><text x="28.4007%" y="255.50"></text></g><g><title>predicates_defined_on (593,658 samples, 1.09%)</title><rect x="28.1880%" y="229" width="1.0936%" height="15" fill="rgb(206,192,2)"/><text x="28.4380%" y="239.50"></text></g><g><title>super_predicates_of (97,471 samples, 0.18%)</title><rect x="29.2816%" y="245" width="0.1796%" height="15" fill="rgb(241,108,4)"/><text x="29.5316%" y="255.50"></text></g><g><title>super_predicates_that_define_assoc_type (85,260 samples, 0.16%)</title><rect x="29.3041%" y="229" width="0.1571%" height="15" fill="rgb(247,173,49)"/><text x="29.5541%" y="239.50"></text></g><g><title>type_collecting (1,301,454 samples, 2.40%)</title><rect x="27.1848%" y="277" width="2.3975%" height="15" fill="rgb(224,114,35)"/><text x="27.4348%" y="287.50">ty..</text></g><g><title>collect_mod_item_types (1,291,374 samples, 2.38%)</title><rect x="27.2034%" y="261" width="2.3790%" height="15" fill="rgb(245,159,27)"/><text x="27.4534%" y="271.50">co..</text></g><g><title>type_of (63,260 samples, 0.12%)</title><rect x="29.4658%" y="245" width="0.1165%" height="15" fill="rgb(245,172,44)"/><text x="29.7158%" y="255.50"></text></g><g><title>check_impl_item_well_formed (252,343 samples, 0.46%)</title><rect x="29.6794%" y="261" width="0.4649%" height="15" fill="rgb(236,23,11)"/><text x="29.9294%" y="271.50"></text></g><g><title>evaluate_obligation (71,861 samples, 0.13%)</title><rect x="30.6889%" y="245" width="0.1324%" height="15" fill="rgb(205,117,38)"/><text x="30.9389%" y="255.50"></text></g><g><title>param_env (182,262 samples, 0.34%)</title><rect x="30.8389%" y="245" width="0.3358%" height="15" fill="rgb(237,72,25)"/><text x="31.0889%" y="255.50"></text></g><g><title>check_item_well_formed (583,587 samples, 1.08%)</title><rect x="30.1443%" y="261" width="1.0751%" height="15" fill="rgb(244,70,9)"/><text x="30.3943%" y="271.50"></text></g><g><title>adt_def (74,980 samples, 0.14%)</title><rect x="32.5091%" y="213" width="0.1381%" height="15" fill="rgb(217,125,39)"/><text x="32.7591%" y="223.50"></text></g><g><title>metadata_decode_entry_adt_def (72,920 samples, 0.13%)</title><rect x="32.5129%" y="197" width="0.1343%" height="15" fill="rgb(235,36,10)"/><text x="32.7629%" y="207.50"></text></g><g><title>adt_def (90,691 samples, 0.17%)</title><rect x="32.7314%" y="181" width="0.1671%" height="15" fill="rgb(251,123,47)"/><text x="32.9814%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (90,221 samples, 0.17%)</title><rect x="32.7323%" y="165" width="0.1662%" height="15" fill="rgb(221,13,13)"/><text x="32.9823%" y="175.50"></text></g><g><title>item_attrs (85,291 samples, 0.16%)</title><rect x="32.7414%" y="149" width="0.1571%" height="15" fill="rgb(238,131,9)"/><text x="32.9914%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (84,811 samples, 0.16%)</title><rect x="32.7423%" y="133" width="0.1562%" height="15" fill="rgb(211,50,8)"/><text x="32.9923%" y="143.50"></text></g><g><title>adt_sized_constraint (94,771 samples, 0.17%)</title><rect x="32.7257%" y="197" width="0.1746%" height="15" fill="rgb(245,182,24)"/><text x="32.9757%" y="207.50"></text></g><g><title>adt_sized_constraint (153,033 samples, 0.28%)</title><rect x="32.6473%" y="213" width="0.2819%" height="15" fill="rgb(242,14,37)"/><text x="32.8973%" y="223.50"></text></g><g><title>evaluate_obligation (305,163 samples, 0.56%)</title><rect x="32.4051%" y="245" width="0.5622%" height="15" fill="rgb(246,228,12)"/><text x="32.6551%" y="255.50"></text></g><g><title>adt_sized_constraint (260,113 samples, 0.48%)</title><rect x="32.4881%" y="229" width="0.4792%" height="15" fill="rgb(213,55,15)"/><text x="32.7381%" y="239.50"></text></g><g><title>implied_outlives_bounds (161,563 samples, 0.30%)</title><rect x="33.0593%" y="245" width="0.2976%" height="15" fill="rgb(209,9,3)"/><text x="33.3093%" y="255.50"></text></g><g><title>param_env (379,974 samples, 0.70%)</title><rect x="33.3867%" y="245" width="0.7000%" height="15" fill="rgb(230,59,30)"/><text x="33.6367%" y="255.50"></text></g><g><title>trait_impls_of (171,751 samples, 0.32%)</title><rect x="33.7703%" y="229" width="0.3164%" height="15" fill="rgb(209,121,21)"/><text x="34.0203%" y="239.50"></text></g><g><title>implementations_of_trait (73,560 samples, 0.14%)</title><rect x="33.9511%" y="213" width="0.1355%" height="15" fill="rgb(220,109,13)"/><text x="34.2011%" y="223.50"></text></g><g><title>explicit_predicates_of (61,483 samples, 0.11%)</title><rect x="34.1706%" y="213" width="0.1133%" height="15" fill="rgb(232,18,1)"/><text x="34.4206%" y="223.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (54,322 samples, 0.10%)</title><rect x="34.1837%" y="197" width="0.1001%" height="15" fill="rgb(215,41,42)"/><text x="34.4337%" y="207.50"></text></g><g><title>predicates_of (128,953 samples, 0.24%)</title><rect x="34.0867%" y="245" width="0.2376%" height="15" fill="rgb(224,123,36)"/><text x="34.3367%" y="255.50"></text></g><g><title>predicates_defined_on (102,653 samples, 0.19%)</title><rect x="34.1351%" y="229" width="0.1891%" height="15" fill="rgb(240,125,3)"/><text x="34.3851%" y="239.50"></text></g><g><title>analysis (18,139,662 samples, 33.42%)</title><rect x="1.7306%" y="309" width="33.4168%" height="15" fill="rgb(205,98,50)"/><text x="1.9806%" y="319.50">analysis</text></g><g><title>type_check_crate (10,637,778 samples, 19.60%)</title><rect x="15.5505%" y="293" width="19.5969%" height="15" fill="rgb(205,185,37)"/><text x="15.8005%" y="303.50">type_check_crate</text></g><g><title>wf_checking (3,019,794 samples, 5.56%)</title><rect x="29.5843%" y="277" width="5.5631%" height="15" fill="rgb(238,207,15)"/><text x="29.8343%" y="287.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (2,132,254 samples, 3.93%)</title><rect x="31.2194%" y="261" width="3.9280%" height="15" fill="rgb(213,199,42)"/><text x="31.4694%" y="271.50">chec..</text></g><g><title>trait_impls_of (407,364 samples, 0.75%)</title><rect x="34.3969%" y="245" width="0.7504%" height="15" fill="rgb(235,201,11)"/><text x="34.6469%" y="255.50"></text></g><g><title>implementations_of_trait (120,712 samples, 0.22%)</title><rect x="34.9250%" y="229" width="0.2224%" height="15" fill="rgb(207,46,11)"/><text x="35.1750%" y="239.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (88,741 samples, 0.16%)</title><rect x="34.9839%" y="213" width="0.1635%" height="15" fill="rgb(241,35,35)"/><text x="35.2339%" y="223.50"></text></g><g><title>codegen_crate (657,757 samples, 1.21%)</title><rect x="35.1710%" y="309" width="1.2117%" height="15" fill="rgb(243,32,47)"/><text x="35.4210%" y="319.50"></text></g><g><title>AST_validation (157,522 samples, 0.29%)</title><rect x="36.7946%" y="293" width="0.2902%" height="15" fill="rgb(247,202,23)"/><text x="37.0446%" y="303.50"></text></g><g><title>crate_injection (89,131 samples, 0.16%)</title><rect x="37.1774%" y="293" width="0.1642%" height="15" fill="rgb(219,102,11)"/><text x="37.4274%" y="303.50"></text></g><g><title>metadata_load_macro (59,621 samples, 0.11%)</title><rect x="56.7814%" y="261" width="0.1098%" height="15" fill="rgb(243,110,44)"/><text x="57.0314%" y="271.50"></text></g><g><title>macro_expand_crate (23,890,737 samples, 44.01%)</title><rect x="37.3416%" y="293" width="44.0114%" height="15" fill="rgb(222,74,54)"/><text x="37.5916%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (23,869,277 samples, 43.97%)</title><rect x="37.3811%" y="277" width="43.9719%" height="15" fill="rgb(216,99,12)"/><text x="37.6311%" y="287.50">expand_crate</text></g><g><title>metadata_register_crate (13,278,619 samples, 24.46%)</title><rect x="56.8912%" y="261" width="24.4618%" height="15" fill="rgb(226,22,26)"/><text x="57.1412%" y="271.50">metadata_register_crate</text></g><g><title>metadata_register_crate (1,227,644 samples, 2.26%)</title><rect x="79.0915%" y="245" width="2.2616%" height="15" fill="rgb(217,163,10)"/><text x="79.3415%" y="255.50">m..</text></g><g><title>metadata_register_crate (105,301 samples, 0.19%)</title><rect x="81.1591%" y="229" width="0.1940%" height="15" fill="rgb(213,25,53)"/><text x="81.4091%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (164,832 samples, 0.30%)</title><rect x="81.3724%" y="293" width="0.3037%" height="15" fill="rgb(252,105,26)"/><text x="81.6224%" y="303.50"></text></g><g><title>late_resolve_crate (1,293,414 samples, 2.38%)</title><rect x="81.8037%" y="277" width="2.3827%" height="15" fill="rgb(220,39,43)"/><text x="82.0537%" y="287.50">la..</text></g><g><title>configure_and_expand (26,035,400 samples, 47.96%)</title><rect x="36.3827%" y="309" width="47.9623%" height="15" fill="rgb(229,68,48)"/><text x="36.6327%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (1,448,816 samples, 2.67%)</title><rect x="81.6761%" y="293" width="2.6690%" height="15" fill="rgb(252,8,32)"/><text x="81.9261%" y="303.50">re..</text></g><g><title>drop_ast (125,952 samples, 0.23%)</title><rect x="84.3451%" y="309" width="0.2320%" height="15" fill="rgb(223,20,43)"/><text x="84.5951%" y="319.50"></text></g><g><title>early_lint_checks (337,214 samples, 0.62%)</title><rect x="84.6094%" y="309" width="0.6212%" height="15" fill="rgb(229,81,49)"/><text x="84.8594%" y="319.50"></text></g><g><title>free_global_ctxt (1,930,181 samples, 3.56%)</title><rect x="85.2306%" y="309" width="3.5558%" height="15" fill="rgb(236,28,36)"/><text x="85.4806%" y="319.50">free..</text></g><g><title>crate_hash (71,061 samples, 0.13%)</title><rect x="89.5200%" y="293" width="0.1309%" height="15" fill="rgb(249,185,26)"/><text x="89.7700%" y="303.50"></text></g><g><title>generate_crate_metadata (557,647 samples, 1.03%)</title><rect x="88.7864%" y="309" width="1.0273%" height="15" fill="rgb(249,174,33)"/><text x="89.0364%" y="319.50"></text></g><g><title>hir_lowering (1,412,855 samples, 2.60%)</title><rect x="89.8137%" y="309" width="2.6028%" height="15" fill="rgb(233,201,37)"/><text x="90.0637%" y="319.50">hi..</text></g><g><title>parse_crate (2,889,602 samples, 5.32%)</title><rect x="92.4946%" y="309" width="5.3232%" height="15" fill="rgb(221,78,26)"/><text x="92.7446%" y="319.50">parse_c..</text></g><g><title>prepare_outputs (300,644 samples, 0.55%)</title><rect x="97.8410%" y="309" width="0.5538%" height="15" fill="rgb(250,127,30)"/><text x="98.0910%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (393,094 samples, 0.72%)</title><rect x="98.3948%" y="309" width="0.7242%" height="15" fill="rgb(230,49,44)"/><text x="98.6448%" y="319.50"></text></g><g><title>setup_global_ctxt (133,211 samples, 0.25%)</title><rect x="99.1378%" y="309" width="0.2454%" height="15" fill="rgb(229,67,23)"/><text x="99.3878%" y="319.50"></text></g><g><title>all (54,283,014 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (54,283,014 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (334,804 samples, 0.62%)</title><rect x="99.3832%" y="309" width="0.6168%" height="15" fill="rgb(238,154,13)"/><text x="99.6332%" y="319.50"></text></g></svg></svg>