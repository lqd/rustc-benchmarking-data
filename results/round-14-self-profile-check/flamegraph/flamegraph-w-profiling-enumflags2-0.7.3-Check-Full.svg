<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (487,108 samples, 0.32%)</title><rect x="8.3777%" y="181" width="0.3202%" height="15" fill="rgb(227,0,7)"/><text x="8.6277%" y="191.50"></text></g><g><title>param_env (228,110 samples, 0.15%)</title><rect x="9.6965%" y="149" width="0.1500%" height="15" fill="rgb(217,0,24)"/><text x="9.9465%" y="159.50"></text></g><g><title>codegen_fn_attrs (173,502 samples, 0.11%)</title><rect x="10.0606%" y="133" width="0.1141%" height="15" fill="rgb(221,193,54)"/><text x="10.3106%" y="143.50"></text></g><g><title>is_copy_raw (257,281 samples, 0.17%)</title><rect x="11.4432%" y="117" width="0.1691%" height="15" fill="rgb(248,212,6)"/><text x="11.6932%" y="127.50"></text></g><g><title>evaluate_obligation (213,451 samples, 0.14%)</title><rect x="11.4720%" y="101" width="0.1403%" height="15" fill="rgb(208,68,35)"/><text x="11.7220%" y="111.50"></text></g><g><title>is_copy_raw (746,279 samples, 0.49%)</title><rect x="11.7198%" y="101" width="0.4906%" height="15" fill="rgb(232,128,0)"/><text x="11.9698%" y="111.50"></text></g><g><title>evaluate_obligation (614,858 samples, 0.40%)</title><rect x="11.8062%" y="85" width="0.4042%" height="15" fill="rgb(207,160,47)"/><text x="12.0562%" y="95.50"></text></g><g><title>needs_drop_raw (911,290 samples, 0.60%)</title><rect x="11.6123%" y="117" width="0.5991%" height="15" fill="rgb(228,23,34)"/><text x="11.8623%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (785,951 samples, 0.52%)</title><rect x="12.3462%" y="101" width="0.5167%" height="15" fill="rgb(218,30,26)"/><text x="12.5962%" y="111.50"></text></g><g><title>resolve_instance (1,094,975 samples, 0.72%)</title><rect x="12.2114%" y="117" width="0.7198%" height="15" fill="rgb(220,122,19)"/><text x="12.4614%" y="127.50"></text></g><g><title>thir_body (630,788 samples, 0.41%)</title><rect x="12.9479%" y="117" width="0.4147%" height="15" fill="rgb(250,228,42)"/><text x="13.1979%" y="127.50"></text></g><g><title>mir_const (6,267,390 samples, 4.12%)</title><rect x="9.3342%" y="165" width="4.1202%" height="15" fill="rgb(240,193,28)"/><text x="9.5842%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (5,488,125 samples, 3.61%)</title><rect x="9.8464%" y="149" width="3.6079%" height="15" fill="rgb(216,20,37)"/><text x="10.0964%" y="159.50">unsa..</text></g><g><title>mir_built (4,988,810 samples, 3.28%)</title><rect x="10.1747%" y="133" width="3.2797%" height="15" fill="rgb(206,188,39)"/><text x="10.4247%" y="143.50">mir..</text></g><g><title>thir_body (213,932 samples, 0.14%)</title><rect x="14.7669%" y="101" width="0.1406%" height="15" fill="rgb(217,207,13)"/><text x="15.0169%" y="111.50"></text></g><g><title>mir_const (1,408,313 samples, 0.93%)</title><rect x="13.9867%" y="149" width="0.9258%" height="15" fill="rgb(231,73,38)"/><text x="14.2367%" y="159.50"></text></g><g><title>unsafety_check_result (1,192,523 samples, 0.78%)</title><rect x="14.1285%" y="133" width="0.7840%" height="15" fill="rgb(225,20,46)"/><text x="14.3785%" y="143.50"></text></g><g><title>mir_built (1,042,092 samples, 0.69%)</title><rect x="14.2274%" y="117" width="0.6851%" height="15" fill="rgb(210,31,41)"/><text x="14.4774%" y="127.50"></text></g><g><title>mir_const_qualif (2,351,985 samples, 1.55%)</title><rect x="13.4543%" y="165" width="1.5462%" height="15" fill="rgb(221,200,47)"/><text x="13.7043%" y="175.50"></text></g><g><title>mir_promoted (9,395,039 samples, 6.18%)</title><rect x="8.8244%" y="181" width="6.1763%" height="15" fill="rgb(226,26,5)"/><text x="9.0744%" y="191.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (855,161 samples, 0.56%)</title><rect x="15.0017%" y="181" width="0.5622%" height="15" fill="rgb(249,33,26)"/><text x="15.2517%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (485,451 samples, 0.32%)</title><rect x="15.5639%" y="181" width="0.3191%" height="15" fill="rgb(235,183,28)"/><text x="15.8139%" y="191.50"></text></g><g><title>normalize_projection_ty (248,900 samples, 0.16%)</title><rect x="15.7194%" y="165" width="0.1636%" height="15" fill="rgb(221,5,38)"/><text x="15.9694%" y="175.50"></text></g><g><title>type_op_normalize_predicate (307,353 samples, 0.20%)</title><rect x="15.8878%" y="181" width="0.2021%" height="15" fill="rgb(247,18,42)"/><text x="16.1378%" y="191.50"></text></g><g><title>type_op_normalize_ty (574,212 samples, 0.38%)</title><rect x="16.0899%" y="181" width="0.3775%" height="15" fill="rgb(241,131,45)"/><text x="16.3399%" y="191.50"></text></g><g><title>normalize_projection_ty (190,740 samples, 0.13%)</title><rect x="16.3420%" y="165" width="0.1254%" height="15" fill="rgb(249,31,29)"/><text x="16.5920%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,803,813 samples, 1.84%)</title><rect x="16.4674%" y="181" width="1.8432%" height="15" fill="rgb(225,111,53)"/><text x="16.7174%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (26,348,144 samples, 17.32%)</title><rect x="0.9925%" y="213" width="17.3213%" height="15" fill="rgb(238,160,17)"/><text x="1.2425%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,189,433 samples, 17.22%)</title><rect x="1.0969%" y="197" width="17.2170%" height="15" fill="rgb(214,148,48)"/><text x="1.3469%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (678,298 samples, 0.45%)</title><rect x="18.3138%" y="213" width="0.4459%" height="15" fill="rgb(232,36,49)"/><text x="18.5638%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (600,727 samples, 0.39%)</title><rect x="18.3648%" y="197" width="0.3949%" height="15" fill="rgb(209,103,24)"/><text x="18.6148%" y="207.50"></text></g><g><title>hir_module_items (346,394 samples, 0.23%)</title><rect x="18.7597%" y="213" width="0.2277%" height="15" fill="rgb(229,88,8)"/><text x="19.0097%" y="223.50"></text></g><g><title>codegen_fn_attrs (178,833 samples, 0.12%)</title><rect x="19.4318%" y="149" width="0.1176%" height="15" fill="rgb(213,181,19)"/><text x="19.6818%" y="159.50"></text></g><g><title>should_inherit_track_caller (326,074 samples, 0.21%)</title><rect x="19.3411%" y="165" width="0.2144%" height="15" fill="rgb(254,191,54)"/><text x="19.5911%" y="175.50"></text></g><g><title>codegen_fn_attrs (571,246 samples, 0.38%)</title><rect x="19.1949%" y="181" width="0.3755%" height="15" fill="rgb(241,83,37)"/><text x="19.4449%" y="191.50"></text></g><g><title>check_mod_attrs (858,390 samples, 0.56%)</title><rect x="19.0064%" y="197" width="0.5643%" height="15" fill="rgb(233,36,39)"/><text x="19.2564%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (435,765 samples, 0.29%)</title><rect x="19.7307%" y="197" width="0.2865%" height="15" fill="rgb(226,3,54)"/><text x="19.9807%" y="207.50"></text></g><g><title>misc_checking_1 (1,657,028 samples, 1.09%)</title><rect x="18.9878%" y="213" width="1.0893%" height="15" fill="rgb(245,192,40)"/><text x="19.2378%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (428,795 samples, 0.28%)</title><rect x="20.0783%" y="197" width="0.2819%" height="15" fill="rgb(238,167,29)"/><text x="20.3283%" y="207.50"></text></g><g><title>check_mod_liveness (342,494 samples, 0.23%)</title><rect x="20.1350%" y="181" width="0.2252%" height="15" fill="rgb(232,182,51)"/><text x="20.3850%" y="191.50"></text></g><g><title>misc_checking_2 (899,370 samples, 0.59%)</title><rect x="20.0771%" y="213" width="0.5912%" height="15" fill="rgb(231,60,39)"/><text x="20.3271%" y="223.50"></text></g><g><title>match_checking (468,795 samples, 0.31%)</title><rect x="20.3602%" y="197" width="0.3082%" height="15" fill="rgb(208,69,12)"/><text x="20.6102%" y="207.50"></text></g><g><title>check_match (429,895 samples, 0.28%)</title><rect x="20.3858%" y="181" width="0.2826%" height="15" fill="rgb(235,93,37)"/><text x="20.6358%" y="191.50"></text></g><g><title>check_private_in_public (265,853 samples, 0.17%)</title><rect x="20.6752%" y="197" width="0.1748%" height="15" fill="rgb(213,116,39)"/><text x="20.9252%" y="207.50"></text></g><g><title>death_checking (497,646 samples, 0.33%)</title><rect x="20.8499%" y="197" width="0.3272%" height="15" fill="rgb(222,207,29)"/><text x="21.0999%" y="207.50"></text></g><g><title>param_env (252,122 samples, 0.17%)</title><rect x="21.5451%" y="165" width="0.1657%" height="15" fill="rgb(206,96,30)"/><text x="21.7951%" y="175.50"></text></g><g><title>crate_lints (1,160,302 samples, 0.76%)</title><rect x="21.1782%" y="181" width="0.7628%" height="15" fill="rgb(218,138,4)"/><text x="21.4282%" y="191.50"></text></g><g><title>type_of (348,343 samples, 0.23%)</title><rect x="21.7120%" y="165" width="0.2290%" height="15" fill="rgb(250,191,14)"/><text x="21.9620%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (269,182 samples, 0.18%)</title><rect x="21.7640%" y="149" width="0.1770%" height="15" fill="rgb(239,60,40)"/><text x="22.0140%" y="159.50"></text></g><g><title>lint_checking (1,524,026 samples, 1.00%)</title><rect x="21.1771%" y="197" width="1.0019%" height="15" fill="rgb(206,27,48)"/><text x="21.4271%" y="207.50"></text></g><g><title>module_lints (362,064 samples, 0.24%)</title><rect x="21.9410%" y="181" width="0.2380%" height="15" fill="rgb(225,35,8)"/><text x="22.1910%" y="191.50"></text></g><g><title>lint_mod (356,684 samples, 0.23%)</title><rect x="21.9445%" y="165" width="0.2345%" height="15" fill="rgb(250,213,24)"/><text x="22.1945%" y="175.50"></text></g><g><title>privacy_access_levels (376,834 samples, 0.25%)</title><rect x="22.1790%" y="197" width="0.2477%" height="15" fill="rgb(247,123,22)"/><text x="22.4290%" y="207.50"></text></g><g><title>privacy_checking_modules (928,191 samples, 0.61%)</title><rect x="22.4267%" y="197" width="0.6102%" height="15" fill="rgb(231,138,38)"/><text x="22.6767%" y="207.50"></text></g><g><title>check_mod_privacy (923,201 samples, 0.61%)</title><rect x="22.4300%" y="181" width="0.6069%" height="15" fill="rgb(231,145,46)"/><text x="22.6800%" y="191.50"></text></g><g><title>misc_checking_3 (3,620,390 samples, 2.38%)</title><rect x="20.6684%" y="213" width="2.3800%" height="15" fill="rgb(251,118,11)"/><text x="20.9184%" y="223.50">mi..</text></g><g><title>impl_parent (1,647,798 samples, 1.08%)</title><rect x="25.2299%" y="149" width="1.0833%" height="15" fill="rgb(217,147,25)"/><text x="25.4799%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (776,264 samples, 0.51%)</title><rect x="25.8029%" y="133" width="0.5103%" height="15" fill="rgb(247,81,37)"/><text x="26.0529%" y="143.50"></text></g><g><title>impl_trait_ref (2,590,292 samples, 1.70%)</title><rect x="26.3142%" y="149" width="1.7029%" height="15" fill="rgb(209,12,38)"/><text x="26.5642%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,948,768 samples, 1.28%)</title><rect x="26.7360%" y="133" width="1.2811%" height="15" fill="rgb(227,1,9)"/><text x="26.9860%" y="143.50"></text></g><g><title>trait_impls_of (475,644 samples, 0.31%)</title><rect x="28.0901%" y="149" width="0.3127%" height="15" fill="rgb(248,47,43)"/><text x="28.3401%" y="159.50"></text></g><g><title>coherent_trait (8,044,910 samples, 5.29%)</title><rect x="23.1152%" y="181" width="5.2887%" height="15" fill="rgb(221,10,30)"/><text x="23.3652%" y="191.50">cohere..</text></g><g><title>specialization_graph_of (7,736,816 samples, 5.09%)</title><rect x="23.3177%" y="165" width="5.0862%" height="15" fill="rgb(210,229,1)"/><text x="23.5677%" y="175.50">specia..</text></g><g><title>coherence_checking (8,201,042 samples, 5.39%)</title><rect x="23.0984%" y="197" width="5.3914%" height="15" fill="rgb(222,148,37)"/><text x="23.3484%" y="207.50">coheren..</text></g><g><title>associated_item (160,331 samples, 0.11%)</title><rect x="40.5397%" y="133" width="0.1054%" height="15" fill="rgb(234,67,33)"/><text x="40.7897%" y="143.50"></text></g><g><title>associated_items (226,911 samples, 0.15%)</title><rect x="40.5012%" y="149" width="0.1492%" height="15" fill="rgb(247,98,35)"/><text x="40.7512%" y="159.50"></text></g><g><title>dropck_outlives (520,183 samples, 0.34%)</title><rect x="40.6856%" y="149" width="0.3420%" height="15" fill="rgb(247,138,52)"/><text x="40.9356%" y="159.50"></text></g><g><title>generics_of (526,276 samples, 0.35%)</title><rect x="43.5066%" y="133" width="0.3460%" height="15" fill="rgb(213,79,30)"/><text x="43.7566%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (370,753 samples, 0.24%)</title><rect x="43.6088%" y="117" width="0.2437%" height="15" fill="rgb(246,177,23)"/><text x="43.8588%" y="127.50"></text></g><g><title>impl_trait_ref (667,740 samples, 0.44%)</title><rect x="43.9515%" y="133" width="0.4390%" height="15" fill="rgb(230,62,27)"/><text x="44.2015%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (523,288 samples, 0.34%)</title><rect x="44.0465%" y="117" width="0.3440%" height="15" fill="rgb(216,154,8)"/><text x="44.2965%" y="127.50"></text></g><g><title>predicates_of (778,437 samples, 0.51%)</title><rect x="44.4198%" y="133" width="0.5117%" height="15" fill="rgb(244,35,45)"/><text x="44.6698%" y="143.50"></text></g><g><title>predicates_defined_on (431,155 samples, 0.28%)</title><rect x="44.6481%" y="117" width="0.2834%" height="15" fill="rgb(251,115,12)"/><text x="44.8981%" y="127.50"></text></g><g><title>specializes (2,394,988 samples, 1.57%)</title><rect x="44.9316%" y="133" width="1.5745%" height="15" fill="rgb(240,54,50)"/><text x="45.1816%" y="143.50"></text></g><g><title>param_env (1,414,935 samples, 0.93%)</title><rect x="45.5759%" y="117" width="0.9302%" height="15" fill="rgb(233,84,52)"/><text x="45.8259%" y="127.50"></text></g><g><title>def_span (651,855 samples, 0.43%)</title><rect x="46.0775%" y="101" width="0.4285%" height="15" fill="rgb(207,117,47)"/><text x="46.3275%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (581,045 samples, 0.38%)</title><rect x="46.1241%" y="85" width="0.3820%" height="15" fill="rgb(249,43,39)"/><text x="46.3741%" y="95.50"></text></g><g><title>evaluate_obligation (8,469,183 samples, 5.57%)</title><rect x="41.0275%" y="149" width="5.5677%" height="15" fill="rgb(209,38,44)"/><text x="41.2775%" y="159.50">evaluat..</text></g><g><title>item_attrs (303,762 samples, 0.20%)</title><rect x="46.7244%" y="149" width="0.1997%" height="15" fill="rgb(236,212,23)"/><text x="46.9744%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (298,132 samples, 0.20%)</title><rect x="46.7281%" y="133" width="0.1960%" height="15" fill="rgb(242,79,21)"/><text x="46.9781%" y="143.50"></text></g><g><title>method_autoderef_steps (202,283 samples, 0.13%)</title><rect x="46.9565%" y="149" width="0.1330%" height="15" fill="rgb(211,96,35)"/><text x="47.2065%" y="159.50"></text></g><g><title>predicates_of (172,080 samples, 0.11%)</title><rect x="47.1422%" y="149" width="0.1131%" height="15" fill="rgb(253,215,40)"/><text x="47.3922%" y="159.50"></text></g><g><title>dropck_outlives (165,060 samples, 0.11%)</title><rect x="49.8628%" y="133" width="0.1085%" height="15" fill="rgb(211,81,21)"/><text x="50.1128%" y="143.50"></text></g><g><title>evaluate_obligation (254,933 samples, 0.17%)</title><rect x="49.9714%" y="133" width="0.1676%" height="15" fill="rgb(208,190,38)"/><text x="50.2214%" y="143.50"></text></g><g><title>typeck (4,862,383 samples, 3.20%)</title><rect x="47.3408%" y="149" width="3.1965%" height="15" fill="rgb(235,213,38)"/><text x="47.5908%" y="159.50">typ..</text></g><g><title>item_bodies_checking (33,534,224 samples, 22.05%)</title><rect x="28.5245%" y="197" width="22.0454%" height="15" fill="rgb(237,122,38)"/><text x="28.7745%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (33,530,144 samples, 22.04%)</title><rect x="28.5272%" y="181" width="22.0428%" height="15" fill="rgb(244,218,35)"/><text x="28.7772%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (33,414,512 samples, 21.97%)</title><rect x="28.6032%" y="165" width="21.9667%" height="15" fill="rgb(240,68,47)"/><text x="28.8532%" y="175.50">typeck</text></g><g><title>mir_borrowck (335,284 samples, 0.22%)</title><rect x="52.7803%" y="133" width="0.2204%" height="15" fill="rgb(210,16,53)"/><text x="53.0303%" y="143.50"></text></g><g><title>specialization_graph_of (508,145 samples, 0.33%)</title><rect x="53.4325%" y="53" width="0.3341%" height="15" fill="rgb(235,124,12)"/><text x="53.6825%" y="63.50"></text></g><g><title>impl_trait_ref (352,894 samples, 0.23%)</title><rect x="53.5345%" y="37" width="0.2320%" height="15" fill="rgb(224,169,11)"/><text x="53.7845%" y="47.50"></text></g><g><title>resolve_instance (677,338 samples, 0.45%)</title><rect x="53.3254%" y="69" width="0.4453%" height="15" fill="rgb(250,166,2)"/><text x="53.5754%" y="79.50"></text></g><g><title>associated_items (170,452 samples, 0.11%)</title><rect x="54.5806%" y="53" width="0.1121%" height="15" fill="rgb(242,216,29)"/><text x="54.8306%" y="63.50"></text></g><g><title>evaluate_obligation (173,992 samples, 0.11%)</title><rect x="54.7774%" y="53" width="0.1144%" height="15" fill="rgb(230,116,27)"/><text x="55.0274%" y="63.50"></text></g><g><title>mir_built (2,999,744 samples, 1.97%)</title><rect x="53.1688%" y="85" width="1.9720%" height="15" fill="rgb(228,99,48)"/><text x="53.4188%" y="95.50">m..</text></g><g><title>typeck (2,029,803 samples, 1.33%)</title><rect x="53.8064%" y="69" width="1.3344%" height="15" fill="rgb(253,11,6)"/><text x="54.0564%" y="79.50"></text></g><g><title>mir_const (3,292,807 samples, 2.16%)</title><rect x="53.0439%" y="117" width="2.1647%" height="15" fill="rgb(247,143,39)"/><text x="53.2939%" y="127.50">m..</text></g><g><title>unsafety_check_result (3,172,956 samples, 2.09%)</title><rect x="53.1227%" y="101" width="2.0859%" height="15" fill="rgb(236,97,10)"/><text x="53.3727%" y="111.50">u..</text></g><g><title>mir_promoted (3,364,468 samples, 2.21%)</title><rect x="53.0007%" y="133" width="2.2118%" height="15" fill="rgb(233,208,19)"/><text x="53.2507%" y="143.50">m..</text></g><g><title>item_types_checking (7,413,803 samples, 4.87%)</title><rect x="50.5699%" y="197" width="4.8738%" height="15" fill="rgb(216,164,2)"/><text x="50.8199%" y="207.50">item_t..</text></g><g><title>check_mod_item_types (7,406,673 samples, 4.87%)</title><rect x="50.5746%" y="181" width="4.8692%" height="15" fill="rgb(220,129,5)"/><text x="50.8246%" y="191.50">check_..</text></g><g><title>type_of (4,821,104 samples, 3.17%)</title><rect x="52.2744%" y="165" width="3.1694%" height="15" fill="rgb(242,17,10)"/><text x="52.5244%" y="175.50">typ..</text></g><g><title>mir_borrowck (4,817,694 samples, 3.17%)</title><rect x="52.2766%" y="149" width="3.1672%" height="15" fill="rgb(242,107,0)"/><text x="52.5266%" y="159.50">mir..</text></g><g><title>type_op_prove_predicate (215,942 samples, 0.14%)</title><rect x="55.3018%" y="133" width="0.1420%" height="15" fill="rgb(251,28,31)"/><text x="55.5518%" y="143.50"></text></g><g><title>fn_sig (421,595 samples, 0.28%)</title><rect x="55.6841%" y="165" width="0.2772%" height="15" fill="rgb(233,223,10)"/><text x="55.9341%" y="175.50"></text></g><g><title>generics_of (204,330 samples, 0.13%)</title><rect x="55.9613%" y="165" width="0.1343%" height="15" fill="rgb(215,21,27)"/><text x="56.2113%" y="175.50"></text></g><g><title>late_bound_vars_map (593,148 samples, 0.39%)</title><rect x="56.5931%" y="117" width="0.3899%" height="15" fill="rgb(232,23,21)"/><text x="56.8431%" y="127.50"></text></g><g><title>resolve_lifetimes (567,868 samples, 0.37%)</title><rect x="56.6097%" y="101" width="0.3733%" height="15" fill="rgb(244,5,23)"/><text x="56.8597%" y="111.50"></text></g><g><title>explicit_predicates_of (1,061,112 samples, 0.70%)</title><rect x="56.3387%" y="133" width="0.6976%" height="15" fill="rgb(226,81,46)"/><text x="56.5887%" y="143.50"></text></g><g><title>predicates_of (1,503,988 samples, 0.99%)</title><rect x="56.2185%" y="165" width="0.9887%" height="15" fill="rgb(247,70,30)"/><text x="56.4685%" y="175.50"></text></g><g><title>predicates_defined_on (1,433,635 samples, 0.94%)</title><rect x="56.2647%" y="149" width="0.9425%" height="15" fill="rgb(212,68,19)"/><text x="56.5147%" y="159.50"></text></g><g><title>inferred_outlives_of (259,983 samples, 0.17%)</title><rect x="57.0363%" y="133" width="0.1709%" height="15" fill="rgb(240,187,13)"/><text x="57.2863%" y="143.50"></text></g><g><title>inferred_outlives_crate (227,013 samples, 0.15%)</title><rect x="57.0579%" y="117" width="0.1492%" height="15" fill="rgb(223,113,26)"/><text x="57.3079%" y="127.50"></text></g><g><title>super_predicates_of (218,892 samples, 0.14%)</title><rect x="57.2072%" y="165" width="0.1439%" height="15" fill="rgb(206,192,2)"/><text x="57.4572%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (211,042 samples, 0.14%)</title><rect x="57.2123%" y="149" width="0.1387%" height="15" fill="rgb(241,108,4)"/><text x="57.4623%" y="159.50"></text></g><g><title>type_collecting (3,092,195 samples, 2.03%)</title><rect x="55.4454%" y="197" width="2.0328%" height="15" fill="rgb(247,173,49)"/><text x="55.6954%" y="207.50">t..</text></g><g><title>collect_mod_item_types (3,078,824 samples, 2.02%)</title><rect x="55.4542%" y="181" width="2.0240%" height="15" fill="rgb(224,114,35)"/><text x="55.7042%" y="191.50">c..</text></g><g><title>type_of (191,001 samples, 0.13%)</title><rect x="57.3527%" y="165" width="0.1256%" height="15" fill="rgb(245,159,27)"/><text x="57.6027%" y="175.50"></text></g><g><title>evaluate_obligation (440,694 samples, 0.29%)</title><rect x="60.0793%" y="165" width="0.2897%" height="15" fill="rgb(245,172,44)"/><text x="60.3293%" y="175.50"></text></g><g><title>implied_outlives_bounds (481,625 samples, 0.32%)</title><rect x="60.3794%" y="165" width="0.3166%" height="15" fill="rgb(236,23,11)"/><text x="60.6294%" y="175.50"></text></g><g><title>param_env (863,804 samples, 0.57%)</title><rect x="60.6961%" y="165" width="0.5679%" height="15" fill="rgb(205,117,38)"/><text x="60.9461%" y="175.50"></text></g><g><title>region_scope_tree (378,793 samples, 0.25%)</title><rect x="61.2906%" y="165" width="0.2490%" height="15" fill="rgb(237,72,25)"/><text x="61.5406%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,909,185 samples, 3.88%)</title><rect x="57.6620%" y="181" width="3.8847%" height="15" fill="rgb(244,70,9)"/><text x="57.9120%" y="191.50">chec..</text></g><g><title>associated_item (156,081 samples, 0.10%)</title><rect x="64.3230%" y="117" width="0.1026%" height="15" fill="rgb(217,125,39)"/><text x="64.5730%" y="127.50"></text></g><g><title>impl_item_implementor_ids (206,541 samples, 0.14%)</title><rect x="64.2956%" y="149" width="0.1358%" height="15" fill="rgb(235,36,10)"/><text x="64.5456%" y="159.50"></text></g><g><title>associated_items (190,571 samples, 0.13%)</title><rect x="64.3061%" y="133" width="0.1253%" height="15" fill="rgb(251,123,47)"/><text x="64.5561%" y="143.50"></text></g><g><title>evaluate_obligation (969,450 samples, 0.64%)</title><rect x="63.9192%" y="165" width="0.6373%" height="15" fill="rgb(221,13,13)"/><text x="64.1692%" y="175.50"></text></g><g><title>implied_outlives_bounds (232,945 samples, 0.15%)</title><rect x="64.5704%" y="165" width="0.1531%" height="15" fill="rgb(238,131,9)"/><text x="64.8204%" y="175.50"></text></g><g><title>param_env (585,145 samples, 0.38%)</title><rect x="64.7235%" y="165" width="0.3847%" height="15" fill="rgb(211,50,8)"/><text x="64.9735%" y="175.50"></text></g><g><title>check_item_well_formed (5,710,462 samples, 3.75%)</title><rect x="61.5468%" y="181" width="3.7541%" height="15" fill="rgb(245,182,24)"/><text x="61.7968%" y="191.50">chec..</text></g><g><title>analysis (98,936,354 samples, 65.04%)</title><rect x="0.6664%" y="229" width="65.0409%" height="15" fill="rgb(242,14,37)"/><text x="0.9164%" y="239.50">analysis</text></g><g><title>type_check_crate (64,890,094 samples, 42.66%)</title><rect x="23.0484%" y="213" width="42.6588%" height="15" fill="rgb(246,228,12)"/><text x="23.2984%" y="223.50">type_check_crate</text></g><g><title>wf_checking (12,510,859 samples, 8.22%)</title><rect x="57.4826%" y="197" width="8.2247%" height="15" fill="rgb(213,55,15)"/><text x="57.7326%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (618,268 samples, 0.41%)</title><rect x="65.3008%" y="181" width="0.4065%" height="15" fill="rgb(209,9,3)"/><text x="65.5508%" y="191.50"></text></g><g><title>codegen_crate (474,075 samples, 0.31%)</title><rect x="65.7156%" y="229" width="0.3117%" height="15" fill="rgb(230,59,30)"/><text x="65.9656%" y="239.50"></text></g><g><title>AST_validation (400,534 samples, 0.26%)</title><rect x="66.1740%" y="213" width="0.2633%" height="15" fill="rgb(209,121,21)"/><text x="66.4240%" y="223.50"></text></g><g><title>complete_gated_feature_checking (181,532 samples, 0.12%)</title><rect x="66.4373%" y="213" width="0.1193%" height="15" fill="rgb(220,109,13)"/><text x="66.6873%" y="223.50"></text></g><g><title>metadata_load_macro (216,611 samples, 0.14%)</title><rect x="78.8674%" y="181" width="0.1424%" height="15" fill="rgb(232,18,1)"/><text x="79.1174%" y="191.50"></text></g><g><title>metadata_register_crate (8,046,440 samples, 5.29%)</title><rect x="79.0098%" y="181" width="5.2897%" height="15" fill="rgb(215,41,42)"/><text x="79.2598%" y="191.50">metada..</text></g><g><title>macro_expand_crate (27,023,521 samples, 17.77%)</title><rect x="66.6214%" y="213" width="17.7653%" height="15" fill="rgb(224,123,36)"/><text x="66.8714%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (27,005,721 samples, 17.75%)</title><rect x="66.6331%" y="197" width="17.7536%" height="15" fill="rgb(240,125,3)"/><text x="66.8831%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (271,553 samples, 0.18%)</title><rect x="84.3908%" y="213" width="0.1785%" height="15" fill="rgb(205,98,50)"/><text x="84.6408%" y="223.50"></text></g><g><title>finalize_macro_resolutions (215,313 samples, 0.14%)</title><rect x="84.6566%" y="197" width="0.1415%" height="15" fill="rgb(205,185,37)"/><text x="84.9066%" y="207.50"></text></g><g><title>late_resolve_crate (3,135,304 samples, 2.06%)</title><rect x="84.7981%" y="197" width="2.0612%" height="15" fill="rgb(238,207,15)"/><text x="85.0481%" y="207.50">l..</text></g><g><title>configure_and_expand (31,964,666 samples, 21.01%)</title><rect x="66.0273%" y="229" width="21.0136%" height="15" fill="rgb(213,199,42)"/><text x="66.2773%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (3,759,581 samples, 2.47%)</title><rect x="84.5693%" y="213" width="2.4716%" height="15" fill="rgb(235,201,11)"/><text x="84.8193%" y="223.50">re..</text></g><g><title>drop_ast (369,004 samples, 0.24%)</title><rect x="87.0409%" y="229" width="0.2426%" height="15" fill="rgb(207,46,11)"/><text x="87.2909%" y="239.50"></text></g><g><title>early_lint_checks (655,867 samples, 0.43%)</title><rect x="87.2984%" y="229" width="0.4312%" height="15" fill="rgb(241,35,35)"/><text x="87.5484%" y="239.50"></text></g><g><title>free_global_ctxt (2,476,658 samples, 1.63%)</title><rect x="87.7296%" y="229" width="1.6282%" height="15" fill="rgb(243,32,47)"/><text x="87.9796%" y="239.50"></text></g><g><title>mir_for_ctfe (224,672 samples, 0.15%)</title><rect x="90.3601%" y="213" width="0.1477%" height="15" fill="rgb(247,202,23)"/><text x="90.6101%" y="223.50"></text></g><g><title>generate_crate_metadata (1,861,740 samples, 1.22%)</title><rect x="89.3577%" y="229" width="1.2239%" height="15" fill="rgb(219,102,11)"/><text x="89.6077%" y="239.50"></text></g><g><title>hir_lowering (7,551,805 samples, 4.96%)</title><rect x="90.5817%" y="229" width="4.9646%" height="15" fill="rgb(243,110,44)"/><text x="90.8317%" y="239.50">hir_lo..</text></g><g><title>parse_crate (4,885,655 samples, 3.21%)</title><rect x="95.5814%" y="229" width="3.2118%" height="15" fill="rgb(222,74,54)"/><text x="95.8314%" y="239.50">par..</text></g><g><title>prepare_outputs (382,005 samples, 0.25%)</title><rect x="98.7998%" y="229" width="0.2511%" height="15" fill="rgb(216,99,12)"/><text x="99.0498%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (892,940 samples, 0.59%)</title><rect x="99.0510%" y="229" width="0.5870%" height="15" fill="rgb(226,22,26)"/><text x="99.3010%" y="239.50"></text></g><g><title>all (152,114,087 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (152,114,087 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (401,625 samples, 0.26%)</title><rect x="99.7360%" y="229" width="0.2640%" height="15" fill="rgb(252,105,26)"/><text x="99.9860%" y="239.50"></text></g></svg></svg>