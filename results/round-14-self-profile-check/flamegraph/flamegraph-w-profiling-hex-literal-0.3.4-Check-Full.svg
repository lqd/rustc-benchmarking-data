<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (118,870 samples, 0.16%)</title><rect x="6.2730%" y="149" width="0.1593%" height="15" fill="rgb(227,0,7)"/><text x="6.5230%" y="159.50"></text></g><g><title>codegen_fn_attrs (125,452 samples, 0.17%)</title><rect x="6.6381%" y="133" width="0.1682%" height="15" fill="rgb(217,0,24)"/><text x="6.8881%" y="143.50"></text></g><g><title>is_copy_raw (90,212 samples, 0.12%)</title><rect x="8.0992%" y="85" width="0.1209%" height="15" fill="rgb(221,193,54)"/><text x="8.3492%" y="95.50"></text></g><g><title>adt_drop_tys (231,114 samples, 0.31%)</title><rect x="8.0438%" y="101" width="0.3098%" height="15" fill="rgb(248,212,6)"/><text x="8.2938%" y="111.50"></text></g><g><title>is_copy_raw (311,705 samples, 0.42%)</title><rect x="8.3536%" y="101" width="0.4178%" height="15" fill="rgb(208,68,35)"/><text x="8.6036%" y="111.50"></text></g><g><title>evaluate_obligation (264,504 samples, 0.35%)</title><rect x="8.4169%" y="85" width="0.3545%" height="15" fill="rgb(232,128,0)"/><text x="8.6669%" y="95.50"></text></g><g><title>needs_drop_raw (597,079 samples, 0.80%)</title><rect x="7.9776%" y="117" width="0.8003%" height="15" fill="rgb(207,160,47)"/><text x="8.2276%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (82,080 samples, 0.11%)</title><rect x="8.8789%" y="101" width="0.1100%" height="15" fill="rgb(228,23,34)"/><text x="9.1289%" y="111.50"></text></g><g><title>specialization_graph_of (202,172 samples, 0.27%)</title><rect x="9.0262%" y="101" width="0.2710%" height="15" fill="rgb(218,30,26)"/><text x="9.2762%" y="111.50"></text></g><g><title>impl_trait_ref (90,890 samples, 0.12%)</title><rect x="9.1754%" y="85" width="0.1218%" height="15" fill="rgb(220,122,19)"/><text x="9.4254%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (77,780 samples, 0.10%)</title><rect x="9.1930%" y="69" width="0.1043%" height="15" fill="rgb(250,228,42)"/><text x="9.4430%" y="79.50"></text></g><g><title>resolve_instance (422,624 samples, 0.57%)</title><rect x="8.7794%" y="117" width="0.5665%" height="15" fill="rgb(240,193,28)"/><text x="9.0294%" y="127.50"></text></g><g><title>thir_body (302,234 samples, 0.41%)</title><rect x="9.3519%" y="117" width="0.4051%" height="15" fill="rgb(216,20,37)"/><text x="9.6019%" y="127.50"></text></g><g><title>mir_const (2,890,631 samples, 3.87%)</title><rect x="5.8863%" y="165" width="3.8746%" height="15" fill="rgb(206,188,39)"/><text x="6.1363%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (2,483,218 samples, 3.33%)</title><rect x="6.4324%" y="149" width="3.3285%" height="15" fill="rgb(217,207,13)"/><text x="6.6824%" y="159.50">uns..</text></g><g><title>mir_built (2,204,244 samples, 2.95%)</title><rect x="6.8063%" y="133" width="2.9546%" height="15" fill="rgb(231,73,38)"/><text x="7.0563%" y="143.50">mir..</text></g><g><title>has_structural_eq_impls (154,722 samples, 0.21%)</title><rect x="9.8429%" y="149" width="0.2074%" height="15" fill="rgb(225,20,46)"/><text x="10.0929%" y="159.50"></text></g><g><title>evaluate_obligation (144,992 samples, 0.19%)</title><rect x="9.8559%" y="133" width="0.1943%" height="15" fill="rgb(210,31,41)"/><text x="10.1059%" y="143.50"></text></g><g><title>trait_impls_of (133,132 samples, 0.18%)</title><rect x="9.8718%" y="117" width="0.1785%" height="15" fill="rgb(221,200,47)"/><text x="10.1218%" y="127.50"></text></g><g><title>is_freeze_raw (101,131 samples, 0.14%)</title><rect x="10.0515%" y="149" width="0.1356%" height="15" fill="rgb(226,26,5)"/><text x="10.3015%" y="159.50"></text></g><g><title>evaluate_obligation (98,511 samples, 0.13%)</title><rect x="10.0550%" y="133" width="0.1320%" height="15" fill="rgb(249,33,26)"/><text x="10.3050%" y="143.50"></text></g><g><title>mir_const (78,851 samples, 0.11%)</title><rect x="10.1885%" y="149" width="0.1057%" height="15" fill="rgb(235,183,28)"/><text x="10.4385%" y="159.50"></text></g><g><title>mir_promoted (3,613,719 samples, 4.84%)</title><rect x="5.4521%" y="181" width="4.8439%" height="15" fill="rgb(221,5,38)"/><text x="5.7021%" y="191.50">mir_pr..</text></g><g><title>mir_const_qualif (399,204 samples, 0.54%)</title><rect x="9.7609%" y="165" width="0.5351%" height="15" fill="rgb(247,18,42)"/><text x="10.0109%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (150,253 samples, 0.20%)</title><rect x="10.2960%" y="181" width="0.2014%" height="15" fill="rgb(241,131,45)"/><text x="10.5460%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (129,712 samples, 0.17%)</title><rect x="10.4974%" y="181" width="0.1739%" height="15" fill="rgb(249,31,29)"/><text x="10.7474%" y="191.50"></text></g><g><title>normalize_projection_ty (86,401 samples, 0.12%)</title><rect x="10.5555%" y="165" width="0.1158%" height="15" fill="rgb(225,111,53)"/><text x="10.8055%" y="175.50"></text></g><g><title>type_op_prove_predicate (551,297 samples, 0.74%)</title><rect x="10.7825%" y="181" width="0.7390%" height="15" fill="rgb(238,160,17)"/><text x="11.0325%" y="191.50"></text></g><g><title>MIR_borrow_checking (7,604,324 samples, 10.19%)</title><rect x="1.3384%" y="213" width="10.1929%" height="15" fill="rgb(214,148,48)"/><text x="1.5884%" y="223.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (7,582,634 samples, 10.16%)</title><rect x="1.3675%" y="197" width="10.1639%" height="15" fill="rgb(232,36,49)"/><text x="1.6175%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (111,941 samples, 0.15%)</title><rect x="11.5313%" y="213" width="0.1500%" height="15" fill="rgb(209,103,24)"/><text x="11.7813%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (86,191 samples, 0.12%)</title><rect x="11.5659%" y="197" width="0.1155%" height="15" fill="rgb(229,88,8)"/><text x="11.8159%" y="207.50"></text></g><g><title>hir_module_items (193,982 samples, 0.26%)</title><rect x="11.6814%" y="213" width="0.2600%" height="15" fill="rgb(213,181,19)"/><text x="11.9314%" y="223.50"></text></g><g><title>get_lang_items (156,811 samples, 0.21%)</title><rect x="12.3769%" y="165" width="0.2102%" height="15" fill="rgb(254,191,54)"/><text x="12.6269%" y="175.50"></text></g><g><title>should_inherit_track_caller (163,942 samples, 0.22%)</title><rect x="12.5871%" y="165" width="0.2198%" height="15" fill="rgb(241,83,37)"/><text x="12.8371%" y="175.50"></text></g><g><title>codegen_fn_attrs (435,957 samples, 0.58%)</title><rect x="12.2615%" y="181" width="0.5844%" height="15" fill="rgb(233,36,39)"/><text x="12.5115%" y="191.50"></text></g><g><title>check_mod_attrs (641,817 samples, 0.86%)</title><rect x="11.9860%" y="197" width="0.8603%" height="15" fill="rgb(226,3,54)"/><text x="12.2360%" y="207.50"></text></g><g><title>check_mod_const_bodies (84,270 samples, 0.11%)</title><rect x="12.8463%" y="197" width="0.1130%" height="15" fill="rgb(245,192,40)"/><text x="13.0963%" y="207.50"></text></g><g><title>lookup_deprecation_entry (151,070 samples, 0.20%)</title><rect x="13.2786%" y="181" width="0.2025%" height="15" fill="rgb(238,167,29)"/><text x="13.5286%" y="191.50"></text></g><g><title>lookup_stability (82,501 samples, 0.11%)</title><rect x="13.4811%" y="181" width="0.1106%" height="15" fill="rgb(232,182,51)"/><text x="13.7311%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (467,456 samples, 0.63%)</title><rect x="13.0484%" y="197" width="0.6266%" height="15" fill="rgb(231,60,39)"/><text x="13.2984%" y="207.50"></text></g><g><title>misc_checking_1 (1,356,125 samples, 1.82%)</title><rect x="11.9421%" y="213" width="1.8178%" height="15" fill="rgb(208,69,12)"/><text x="12.1921%" y="223.50">m..</text></g><g><title>liveness_and_intrinsic_checking (193,233 samples, 0.26%)</title><rect x="13.7617%" y="197" width="0.2590%" height="15" fill="rgb(235,93,37)"/><text x="14.0117%" y="207.50"></text></g><g><title>check_mod_liveness (157,912 samples, 0.21%)</title><rect x="13.8090%" y="181" width="0.2117%" height="15" fill="rgb(213,116,39)"/><text x="14.0590%" y="191.50"></text></g><g><title>misc_checking_2 (494,836 samples, 0.66%)</title><rect x="13.7598%" y="213" width="0.6633%" height="15" fill="rgb(222,207,29)"/><text x="14.0098%" y="223.50"></text></g><g><title>match_checking (300,233 samples, 0.40%)</title><rect x="14.0207%" y="197" width="0.4024%" height="15" fill="rgb(206,96,30)"/><text x="14.2707%" y="207.50"></text></g><g><title>check_match (291,613 samples, 0.39%)</title><rect x="14.0322%" y="181" width="0.3909%" height="15" fill="rgb(218,138,4)"/><text x="14.2822%" y="191.50"></text></g><g><title>death_checking (154,062 samples, 0.21%)</title><rect x="14.5283%" y="197" width="0.2065%" height="15" fill="rgb(250,191,14)"/><text x="14.7783%" y="207.50"></text></g><g><title>fn_abi_of_instance (122,792 samples, 0.16%)</title><rect x="15.1912%" y="69" width="0.1646%" height="15" fill="rgb(239,60,40)"/><text x="15.4412%" y="79.50"></text></g><g><title>eval_to_const_value_raw (351,244 samples, 0.47%)</title><rect x="15.0482%" y="117" width="0.4708%" height="15" fill="rgb(206,27,48)"/><text x="15.2982%" y="127.50"></text></g><g><title>eval_to_const_value_raw (350,564 samples, 0.47%)</title><rect x="15.0491%" y="101" width="0.4699%" height="15" fill="rgb(225,35,8)"/><text x="15.2991%" y="111.50"></text></g><g><title>eval_to_allocation_raw (348,874 samples, 0.47%)</title><rect x="15.0514%" y="85" width="0.4676%" height="15" fill="rgb(250,213,24)"/><text x="15.3014%" y="95.50"></text></g><g><title>eval_to_allocation_raw (394,744 samples, 0.53%)</title><rect x="14.9916%" y="165" width="0.5291%" height="15" fill="rgb(247,123,22)"/><text x="15.2416%" y="175.50"></text></g><g><title>eval_to_allocation_raw (394,084 samples, 0.53%)</title><rect x="14.9925%" y="149" width="0.5282%" height="15" fill="rgb(231,138,38)"/><text x="15.2425%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (358,844 samples, 0.48%)</title><rect x="15.0397%" y="133" width="0.4810%" height="15" fill="rgb(231,145,46)"/><text x="15.2897%" y="143.50"></text></g><g><title>eval_to_const_value_raw (109,192 samples, 0.15%)</title><rect x="15.5207%" y="165" width="0.1464%" height="15" fill="rgb(251,118,11)"/><text x="15.7707%" y="175.50"></text></g><g><title>eval_to_const_value_raw (100,812 samples, 0.14%)</title><rect x="15.5319%" y="149" width="0.1351%" height="15" fill="rgb(217,147,25)"/><text x="15.7819%" y="159.50"></text></g><g><title>eval_to_allocation_raw (95,432 samples, 0.13%)</title><rect x="15.5392%" y="133" width="0.1279%" height="15" fill="rgb(247,81,37)"/><text x="15.7892%" y="143.50"></text></g><g><title>param_env (139,182 samples, 0.19%)</title><rect x="15.6671%" y="165" width="0.1866%" height="15" fill="rgb(209,12,38)"/><text x="15.9171%" y="175.50"></text></g><g><title>predicates_of (75,390 samples, 0.10%)</title><rect x="15.7526%" y="149" width="0.1011%" height="15" fill="rgb(227,1,9)"/><text x="16.0026%" y="159.50"></text></g><g><title>crate_lints (856,830 samples, 1.15%)</title><rect x="14.7370%" y="181" width="1.1485%" height="15" fill="rgb(248,47,43)"/><text x="14.9870%" y="191.50"></text></g><g><title>lint_checking (983,631 samples, 1.32%)</title><rect x="14.7349%" y="197" width="1.3185%" height="15" fill="rgb(221,10,30)"/><text x="14.9849%" y="207.50"></text></g><g><title>module_lints (125,201 samples, 0.17%)</title><rect x="15.8855%" y="181" width="0.1678%" height="15" fill="rgb(210,229,1)"/><text x="16.1355%" y="191.50"></text></g><g><title>lint_mod (122,241 samples, 0.16%)</title><rect x="15.8895%" y="165" width="0.1639%" height="15" fill="rgb(222,148,37)"/><text x="16.1395%" y="175.50"></text></g><g><title>privacy_checking_modules (248,703 samples, 0.33%)</title><rect x="16.1143%" y="197" width="0.3334%" height="15" fill="rgb(234,67,33)"/><text x="16.3643%" y="207.50"></text></g><g><title>check_mod_privacy (246,943 samples, 0.33%)</title><rect x="16.1166%" y="181" width="0.3310%" height="15" fill="rgb(247,98,35)"/><text x="16.3666%" y="191.50"></text></g><g><title>misc_checking_3 (1,525,667 samples, 2.05%)</title><rect x="14.4231%" y="213" width="2.0450%" height="15" fill="rgb(247,138,52)"/><text x="14.6731%" y="223.50">m..</text></g><g><title>impl_parent (125,741 samples, 0.17%)</title><rect x="16.8888%" y="117" width="0.1685%" height="15" fill="rgb(213,79,30)"/><text x="17.1388%" y="127.50"></text></g><g><title>impl_trait_ref (371,995 samples, 0.50%)</title><rect x="17.0573%" y="117" width="0.4986%" height="15" fill="rgb(246,177,23)"/><text x="17.3073%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (317,845 samples, 0.43%)</title><rect x="17.1299%" y="101" width="0.4260%" height="15" fill="rgb(230,62,27)"/><text x="17.3799%" y="111.50"></text></g><g><title>adt_destructor (760,929 samples, 1.02%)</title><rect x="16.6314%" y="165" width="1.0200%" height="15" fill="rgb(216,154,8)"/><text x="16.8814%" y="175.50"></text></g><g><title>coherent_trait (755,599 samples, 1.01%)</title><rect x="16.6385%" y="149" width="1.0128%" height="15" fill="rgb(244,35,45)"/><text x="16.8885%" y="159.50"></text></g><g><title>specialization_graph_of (752,619 samples, 1.01%)</title><rect x="16.6425%" y="133" width="1.0088%" height="15" fill="rgb(251,115,12)"/><text x="16.8925%" y="143.50"></text></g><g><title>param_env (136,742 samples, 0.18%)</title><rect x="17.6513%" y="165" width="0.1833%" height="15" fill="rgb(240,54,50)"/><text x="17.9013%" y="175.50"></text></g><g><title>impl_parent (2,400,052 samples, 3.22%)</title><rect x="23.3339%" y="149" width="3.2171%" height="15" fill="rgb(233,84,52)"/><text x="23.5839%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,368,597 samples, 1.83%)</title><rect x="24.7165%" y="133" width="1.8345%" height="15" fill="rgb(207,117,47)"/><text x="24.9665%" y="143.50">m..</text></g><g><title>impl_trait_ref (7,204,506 samples, 9.66%)</title><rect x="26.5510%" y="149" width="9.6570%" height="15" fill="rgb(249,43,39)"/><text x="26.8010%" y="159.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,147,543 samples, 8.24%)</title><rect x="27.9677%" y="133" width="8.2403%" height="15" fill="rgb(209,38,44)"/><text x="28.2177%" y="143.50">metadata_de..</text></g><g><title>coherent_trait (15,452,282 samples, 20.71%)</title><rect x="16.5591%" y="181" width="20.7125%" height="15" fill="rgb(236,212,23)"/><text x="16.8091%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (14,500,690 samples, 19.44%)</title><rect x="17.8346%" y="165" width="19.4369%" height="15" fill="rgb(242,79,21)"/><text x="18.0846%" y="175.50">specialization_graph_of</text></g><g><title>trait_impls_of (793,448 samples, 1.06%)</title><rect x="36.2080%" y="149" width="1.0635%" height="15" fill="rgb(211,96,35)"/><text x="36.4580%" y="159.50"></text></g><g><title>implementations_of_trait (184,080 samples, 0.25%)</title><rect x="37.0248%" y="133" width="0.2467%" height="15" fill="rgb(253,215,40)"/><text x="37.2748%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (152,300 samples, 0.20%)</title><rect x="37.0674%" y="117" width="0.2041%" height="15" fill="rgb(211,81,21)"/><text x="37.3174%" y="127.50"></text></g><g><title>coherence_checking (15,540,553 samples, 20.83%)</title><rect x="16.5263%" y="197" width="20.8308%" height="15" fill="rgb(208,190,38)"/><text x="16.7763%" y="207.50">coherence_checking</text></g><g><title>associated_item (389,264 samples, 0.52%)</title><rect x="44.5300%" y="133" width="0.5218%" height="15" fill="rgb(235,213,38)"/><text x="44.7800%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (311,323 samples, 0.42%)</title><rect x="44.6345%" y="117" width="0.4173%" height="15" fill="rgb(237,122,38)"/><text x="44.8845%" y="127.50"></text></g><g><title>associated_items (553,686 samples, 0.74%)</title><rect x="44.3431%" y="149" width="0.7422%" height="15" fill="rgb(244,218,35)"/><text x="44.5931%" y="159.50"></text></g><g><title>adt_dtorck_constraint (170,753 samples, 0.23%)</title><rect x="45.4045%" y="117" width="0.2289%" height="15" fill="rgb(240,68,47)"/><text x="45.6545%" y="127.50"></text></g><g><title>adt_dtorck_constraint (283,054 samples, 0.38%)</title><rect x="45.2814%" y="133" width="0.3794%" height="15" fill="rgb(210,16,53)"/><text x="45.5314%" y="143.50"></text></g><g><title>dropck_outlives (411,536 samples, 0.55%)</title><rect x="45.1533%" y="149" width="0.5516%" height="15" fill="rgb(235,124,12)"/><text x="45.4033%" y="159.50"></text></g><g><title>adt_def (159,971 samples, 0.21%)</title><rect x="46.9018%" y="117" width="0.2144%" height="15" fill="rgb(224,169,11)"/><text x="47.1518%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (158,201 samples, 0.21%)</title><rect x="46.9041%" y="101" width="0.2121%" height="15" fill="rgb(250,166,2)"/><text x="47.1541%" y="111.50"></text></g><g><title>item_attrs (137,401 samples, 0.18%)</title><rect x="46.9320%" y="85" width="0.1842%" height="15" fill="rgb(242,216,29)"/><text x="47.1820%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,081 samples, 0.18%)</title><rect x="46.9351%" y="69" width="0.1811%" height="15" fill="rgb(230,116,27)"/><text x="47.1851%" y="79.50"></text></g><g><title>adt_sized_constraint (233,472 samples, 0.31%)</title><rect x="46.8881%" y="133" width="0.3129%" height="15" fill="rgb(228,99,48)"/><text x="47.1381%" y="143.50"></text></g><g><title>predicates_of (151,240 samples, 0.20%)</title><rect x="47.4447%" y="133" width="0.2027%" height="15" fill="rgb(253,11,6)"/><text x="47.6947%" y="143.50"></text></g><g><title>predicates_defined_on (89,890 samples, 0.12%)</title><rect x="47.5269%" y="117" width="0.1205%" height="15" fill="rgb(247,143,39)"/><text x="47.7769%" y="127.50"></text></g><g><title>specializes (320,753 samples, 0.43%)</title><rect x="47.6474%" y="133" width="0.4299%" height="15" fill="rgb(236,97,10)"/><text x="47.8974%" y="143.50"></text></g><g><title>param_env (202,522 samples, 0.27%)</title><rect x="47.8059%" y="117" width="0.2715%" height="15" fill="rgb(233,208,19)"/><text x="48.0559%" y="127.50"></text></g><g><title>def_span (105,040 samples, 0.14%)</title><rect x="47.9366%" y="101" width="0.1408%" height="15" fill="rgb(216,164,2)"/><text x="48.1866%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (97,840 samples, 0.13%)</title><rect x="47.9462%" y="85" width="0.1311%" height="15" fill="rgb(220,129,5)"/><text x="48.1962%" y="95.50"></text></g><g><title>trait_impls_of (508,117 samples, 0.68%)</title><rect x="48.0914%" y="133" width="0.6811%" height="15" fill="rgb(242,17,10)"/><text x="48.3414%" y="143.50"></text></g><g><title>implementations_of_trait (197,114 samples, 0.26%)</title><rect x="48.5083%" y="117" width="0.2642%" height="15" fill="rgb(242,107,0)"/><text x="48.7583%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (139,962 samples, 0.19%)</title><rect x="48.5849%" y="101" width="0.1876%" height="15" fill="rgb(251,28,31)"/><text x="48.8349%" y="111.50"></text></g><g><title>evaluate_obligation (2,290,138 samples, 3.07%)</title><rect x="45.7049%" y="149" width="3.0697%" height="15" fill="rgb(233,223,10)"/><text x="45.9549%" y="159.50">eva..</text></g><g><title>generics_of (79,310 samples, 0.11%)</title><rect x="48.9019%" y="149" width="0.1063%" height="15" fill="rgb(215,21,27)"/><text x="49.1519%" y="159.50"></text></g><g><title>item_attrs (103,063 samples, 0.14%)</title><rect x="49.1561%" y="149" width="0.1381%" height="15" fill="rgb(232,23,21)"/><text x="49.4061%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (97,943 samples, 0.13%)</title><rect x="49.1630%" y="133" width="0.1313%" height="15" fill="rgb(244,5,23)"/><text x="49.4130%" y="143.50"></text></g><g><title>evaluate_obligation (140,122 samples, 0.19%)</title><rect x="49.4616%" y="133" width="0.1878%" height="15" fill="rgb(226,81,46)"/><text x="49.7116%" y="143.50"></text></g><g><title>method_autoderef_steps (239,132 samples, 0.32%)</title><rect x="49.3525%" y="149" width="0.3205%" height="15" fill="rgb(247,70,30)"/><text x="49.6025%" y="159.50"></text></g><g><title>explicit_predicates_of (79,122 samples, 0.11%)</title><rect x="49.8871%" y="117" width="0.1061%" height="15" fill="rgb(212,68,19)"/><text x="50.1371%" y="127.50"></text></g><g><title>predicates_of (261,965 samples, 0.35%)</title><rect x="49.7048%" y="149" width="0.3511%" height="15" fill="rgb(240,187,13)"/><text x="49.9548%" y="159.50"></text></g><g><title>predicates_defined_on (181,575 samples, 0.24%)</title><rect x="49.8125%" y="133" width="0.2434%" height="15" fill="rgb(223,113,26)"/><text x="50.0625%" y="143.50"></text></g><g><title>item_bodies_checking (9,539,177 samples, 12.79%)</title><rect x="37.4090%" y="197" width="12.7864%" height="15" fill="rgb(206,192,2)"/><text x="37.6590%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,536,537 samples, 12.78%)</title><rect x="37.4126%" y="181" width="12.7829%" height="15" fill="rgb(241,108,4)"/><text x="37.6626%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (9,520,307 samples, 12.76%)</title><rect x="37.4343%" y="165" width="12.7612%" height="15" fill="rgb(247,173,49)"/><text x="37.6843%" y="175.50">typeck</text></g><g><title>item_types_checking (1,189,064 samples, 1.59%)</title><rect x="50.1955%" y="197" width="1.5938%" height="15" fill="rgb(224,114,35)"/><text x="50.4455%" y="207.50"></text></g><g><title>check_mod_item_types (1,184,694 samples, 1.59%)</title><rect x="50.2013%" y="181" width="1.5880%" height="15" fill="rgb(245,159,27)"/><text x="50.4513%" y="191.50"></text></g><g><title>typeck (737,597 samples, 0.99%)</title><rect x="50.8006%" y="165" width="0.9887%" height="15" fill="rgb(245,172,44)"/><text x="51.0506%" y="175.50"></text></g><g><title>lint_levels (83,411 samples, 0.11%)</title><rect x="51.7893%" y="197" width="0.1118%" height="15" fill="rgb(236,23,11)"/><text x="52.0393%" y="207.50"></text></g><g><title>late_bound_vars_map (146,792 samples, 0.20%)</title><rect x="52.5279%" y="149" width="0.1968%" height="15" fill="rgb(205,117,38)"/><text x="52.7779%" y="159.50"></text></g><g><title>resolve_lifetimes (130,322 samples, 0.17%)</title><rect x="52.5500%" y="133" width="0.1747%" height="15" fill="rgb(237,72,25)"/><text x="52.8000%" y="143.50"></text></g><g><title>fn_sig (432,557 samples, 0.58%)</title><rect x="52.2079%" y="165" width="0.5798%" height="15" fill="rgb(244,70,9)"/><text x="52.4579%" y="175.50"></text></g><g><title>generics_of (142,032 samples, 0.19%)</title><rect x="52.7877%" y="165" width="0.1904%" height="15" fill="rgb(217,125,39)"/><text x="53.0377%" y="175.50"></text></g><g><title>late_bound_vars_map (89,702 samples, 0.12%)</title><rect x="53.3342%" y="117" width="0.1202%" height="15" fill="rgb(235,36,10)"/><text x="53.5842%" y="127.50"></text></g><g><title>resolve_lifetimes (83,612 samples, 0.11%)</title><rect x="53.3423%" y="101" width="0.1121%" height="15" fill="rgb(251,123,47)"/><text x="53.5923%" y="111.50"></text></g><g><title>explicit_predicates_of (252,323 samples, 0.34%)</title><rect x="53.1341%" y="133" width="0.3382%" height="15" fill="rgb(221,13,13)"/><text x="53.3841%" y="143.50"></text></g><g><title>associated_item (97,071 samples, 0.13%)</title><rect x="53.7986%" y="37" width="0.1301%" height="15" fill="rgb(238,131,9)"/><text x="54.0486%" y="47.50"></text></g><g><title>associated_items (147,302 samples, 0.20%)</title><rect x="53.7357%" y="53" width="0.1974%" height="15" fill="rgb(211,50,8)"/><text x="53.9857%" y="63.50"></text></g><g><title>late_bound_vars_map (188,692 samples, 0.25%)</title><rect x="53.6858%" y="85" width="0.2529%" height="15" fill="rgb(245,182,24)"/><text x="53.9358%" y="95.50"></text></g><g><title>resolve_lifetimes (186,312 samples, 0.25%)</title><rect x="53.6890%" y="69" width="0.2497%" height="15" fill="rgb(242,14,37)"/><text x="53.9390%" y="79.50"></text></g><g><title>explicit_predicates_of (251,994 samples, 0.34%)</title><rect x="53.6104%" y="101" width="0.3378%" height="15" fill="rgb(246,228,12)"/><text x="53.8604%" y="111.50"></text></g><g><title>predicates_of (871,340 samples, 1.17%)</title><rect x="53.0092%" y="165" width="1.1680%" height="15" fill="rgb(213,55,15)"/><text x="53.2592%" y="175.50"></text></g><g><title>predicates_defined_on (837,098 samples, 1.12%)</title><rect x="53.0551%" y="149" width="1.1221%" height="15" fill="rgb(209,9,3)"/><text x="53.3051%" y="159.50"></text></g><g><title>inferred_outlives_of (525,825 samples, 0.70%)</title><rect x="53.4724%" y="133" width="0.7048%" height="15" fill="rgb(230,59,30)"/><text x="53.7224%" y="143.50"></text></g><g><title>inferred_outlives_crate (501,685 samples, 0.67%)</title><rect x="53.5047%" y="117" width="0.6725%" height="15" fill="rgb(209,121,21)"/><text x="53.7547%" y="127.50"></text></g><g><title>type_of (115,360 samples, 0.15%)</title><rect x="54.0226%" y="101" width="0.1546%" height="15" fill="rgb(220,109,13)"/><text x="54.2726%" y="111.50"></text></g><g><title>super_predicates_of (99,531 samples, 0.13%)</title><rect x="54.1772%" y="165" width="0.1334%" height="15" fill="rgb(232,18,1)"/><text x="54.4272%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (83,461 samples, 0.11%)</title><rect x="54.1987%" y="149" width="0.1119%" height="15" fill="rgb(215,41,42)"/><text x="54.4487%" y="159.50"></text></g><g><title>type_collecting (1,927,742 samples, 2.58%)</title><rect x="51.9031%" y="197" width="2.5840%" height="15" fill="rgb(224,123,36)"/><text x="52.1531%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (1,912,072 samples, 2.56%)</title><rect x="51.9241%" y="181" width="2.5630%" height="15" fill="rgb(240,125,3)"/><text x="52.1741%" y="191.50">co..</text></g><g><title>type_of (129,961 samples, 0.17%)</title><rect x="54.3129%" y="165" width="0.1742%" height="15" fill="rgb(205,98,50)"/><text x="54.5629%" y="175.50"></text></g><g><title>adt_def (78,191 samples, 0.10%)</title><rect x="56.2595%" y="85" width="0.1048%" height="15" fill="rgb(205,185,37)"/><text x="56.5095%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (77,781 samples, 0.10%)</title><rect x="56.2600%" y="69" width="0.1043%" height="15" fill="rgb(238,207,15)"/><text x="56.5100%" y="79.50"></text></g><g><title>adt_sized_constraint (87,211 samples, 0.12%)</title><rect x="56.2573%" y="101" width="0.1169%" height="15" fill="rgb(213,199,42)"/><text x="56.5073%" y="111.50"></text></g><g><title>adt_sized_constraint (125,341 samples, 0.17%)</title><rect x="56.2140%" y="117" width="0.1680%" height="15" fill="rgb(235,201,11)"/><text x="56.4640%" y="127.50"></text></g><g><title>adt_sized_constraint (525,206 samples, 0.70%)</title><rect x="55.6835%" y="133" width="0.7040%" height="15" fill="rgb(207,46,11)"/><text x="55.9335%" y="143.50"></text></g><g><title>adt_sized_constraint (564,676 samples, 0.76%)</title><rect x="55.6346%" y="149" width="0.7569%" height="15" fill="rgb(241,35,35)"/><text x="55.8846%" y="159.50"></text></g><g><title>evaluate_obligation (781,888 samples, 1.05%)</title><rect x="55.4225%" y="165" width="1.0481%" height="15" fill="rgb(243,32,47)"/><text x="55.6725%" y="175.50"></text></g><g><title>implied_outlives_bounds (86,021 samples, 0.12%)</title><rect x="56.4806%" y="165" width="0.1153%" height="15" fill="rgb(247,202,23)"/><text x="56.7306%" y="175.50"></text></g><g><title>param_env (89,152 samples, 0.12%)</title><rect x="56.5959%" y="165" width="0.1195%" height="15" fill="rgb(219,102,11)"/><text x="56.8459%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,736,491 samples, 2.33%)</title><rect x="54.6276%" y="181" width="2.3276%" height="15" fill="rgb(243,110,44)"/><text x="54.8776%" y="191.50">c..</text></g><g><title>region_scope_tree (160,253 samples, 0.21%)</title><rect x="56.7404%" y="165" width="0.2148%" height="15" fill="rgb(222,74,54)"/><text x="56.9904%" y="175.50"></text></g><g><title>adt_sized_constraint (88,491 samples, 0.12%)</title><rect x="58.7857%" y="133" width="0.1186%" height="15" fill="rgb(216,99,12)"/><text x="59.0357%" y="143.50"></text></g><g><title>adt_sized_constraint (150,072 samples, 0.20%)</title><rect x="58.7056%" y="149" width="0.2012%" height="15" fill="rgb(226,22,26)"/><text x="58.9556%" y="159.50"></text></g><g><title>trait_impls_of (88,971 samples, 0.12%)</title><rect x="59.0084%" y="149" width="0.1193%" height="15" fill="rgb(217,163,10)"/><text x="59.2584%" y="159.50"></text></g><g><title>evaluate_obligation (700,288 samples, 0.94%)</title><rect x="58.2315%" y="165" width="0.9387%" height="15" fill="rgb(213,25,53)"/><text x="58.4815%" y="175.50"></text></g><g><title>param_env (171,532 samples, 0.23%)</title><rect x="59.2187%" y="165" width="0.2299%" height="15" fill="rgb(252,105,26)"/><text x="59.4687%" y="175.50"></text></g><g><title>check_item_well_formed (2,075,702 samples, 2.78%)</title><rect x="56.9552%" y="181" width="2.7823%" height="15" fill="rgb(220,39,43)"/><text x="57.2052%" y="191.50">ch..</text></g><g><title>implied_outlives_bounds (113,052 samples, 0.15%)</title><rect x="59.9335%" y="165" width="0.1515%" height="15" fill="rgb(229,68,48)"/><text x="60.1835%" y="175.50"></text></g><g><title>analysis (44,112,211 samples, 59.13%)</title><rect x="0.9856%" y="229" width="59.1286%" height="15" fill="rgb(252,8,32)"/><text x="1.2356%" y="239.50">analysis</text></g><g><title>type_check_crate (32,561,663 samples, 43.65%)</title><rect x="16.4682%" y="213" width="43.6461%" height="15" fill="rgb(223,20,43)"/><text x="16.7182%" y="223.50">type_check_crate</text></g><g><title>wf_checking (4,196,666 samples, 5.63%)</title><rect x="54.4890%" y="197" width="5.6253%" height="15" fill="rgb(229,81,49)"/><text x="54.7390%" y="207.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (281,093 samples, 0.38%)</title><rect x="59.7375%" y="181" width="0.3768%" height="15" fill="rgb(236,28,36)"/><text x="59.9875%" y="191.50"></text></g><g><title>codegen_crate (386,114 samples, 0.52%)</title><rect x="60.1449%" y="229" width="0.5176%" height="15" fill="rgb(249,185,26)"/><text x="60.3949%" y="239.50"></text></g><g><title>AST_validation (121,331 samples, 0.16%)</title><rect x="61.0158%" y="213" width="0.1626%" height="15" fill="rgb(249,174,33)"/><text x="61.2658%" y="223.50"></text></g><g><title>crate_injection (99,331 samples, 0.13%)</title><rect x="61.2583%" y="213" width="0.1331%" height="15" fill="rgb(233,201,37)"/><text x="61.5083%" y="223.50"></text></g><g><title>metadata_load_macro (379,864 samples, 0.51%)</title><rect x="80.2964%" y="181" width="0.5092%" height="15" fill="rgb(221,78,26)"/><text x="80.5464%" y="191.50"></text></g><g><title>metadata_register_crate (2,759,611 samples, 3.70%)</title><rect x="80.8056%" y="181" width="3.6990%" height="15" fill="rgb(250,127,30)"/><text x="81.0556%" y="191.50">meta..</text></g><g><title>metadata_register_crate (999,142 samples, 1.34%)</title><rect x="83.1653%" y="165" width="1.3393%" height="15" fill="rgb(230,49,44)"/><text x="83.4153%" y="175.50"></text></g><g><title>metadata_register_crate (88,631 samples, 0.12%)</title><rect x="84.3858%" y="149" width="0.1188%" height="15" fill="rgb(229,67,23)"/><text x="84.6358%" y="159.50"></text></g><g><title>macro_expand_crate (17,313,233 samples, 23.21%)</title><rect x="61.3915%" y="213" width="23.2069%" height="15" fill="rgb(249,83,47)"/><text x="61.6415%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (17,285,072 samples, 23.17%)</title><rect x="61.4292%" y="197" width="23.1692%" height="15" fill="rgb(215,43,3)"/><text x="61.6792%" y="207.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (400,055 samples, 0.54%)</title><rect x="84.6012%" y="213" width="0.5362%" height="15" fill="rgb(238,154,13)"/><text x="84.8512%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (115,261 samples, 0.15%)</title><rect x="85.1374%" y="213" width="0.1545%" height="15" fill="rgb(219,56,2)"/><text x="85.3874%" y="223.50"></text></g><g><title>finalize_macro_resolutions (152,891 samples, 0.20%)</title><rect x="85.3944%" y="197" width="0.2049%" height="15" fill="rgb(233,0,4)"/><text x="85.6444%" y="207.50"></text></g><g><title>late_resolve_crate (2,245,835 samples, 3.01%)</title><rect x="85.5993%" y="197" width="3.0103%" height="15" fill="rgb(235,30,7)"/><text x="85.8493%" y="207.50">lat..</text></g><g><title>configure_and_expand (20,950,564 samples, 28.08%)</title><rect x="60.6625%" y="229" width="28.0824%" height="15" fill="rgb(250,79,13)"/><text x="60.9125%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,576,058 samples, 3.45%)</title><rect x="85.2919%" y="213" width="3.4530%" height="15" fill="rgb(211,146,34)"/><text x="85.5419%" y="223.50">res..</text></g><g><title>drop_ast (155,461 samples, 0.21%)</title><rect x="88.7449%" y="229" width="0.2084%" height="15" fill="rgb(228,22,38)"/><text x="88.9949%" y="239.50"></text></g><g><title>early_lint_checks (303,814 samples, 0.41%)</title><rect x="88.9717%" y="229" width="0.4072%" height="15" fill="rgb(235,168,5)"/><text x="89.2217%" y="239.50"></text></g><g><title>free_global_ctxt (2,861,762 samples, 3.84%)</title><rect x="89.3789%" y="229" width="3.8359%" height="15" fill="rgb(221,155,16)"/><text x="89.6289%" y="239.50">free..</text></g><g><title>generate_crate_metadata (174,732 samples, 0.23%)</title><rect x="93.2149%" y="229" width="0.2342%" height="15" fill="rgb(215,215,53)"/><text x="93.4649%" y="239.50"></text></g><g><title>hir_lowering (1,980,682 samples, 2.65%)</title><rect x="93.4491%" y="229" width="2.6549%" height="15" fill="rgb(223,4,10)"/><text x="93.6991%" y="239.50">hi..</text></g><g><title>parse_crate (1,575,857 samples, 2.11%)</title><rect x="96.1669%" y="229" width="2.1123%" height="15" fill="rgb(234,103,6)"/><text x="96.4169%" y="239.50">p..</text></g><g><title>prepare_outputs (307,973 samples, 0.41%)</title><rect x="98.2935%" y="229" width="0.4128%" height="15" fill="rgb(227,97,0)"/><text x="98.5435%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (524,666 samples, 0.70%)</title><rect x="98.7063%" y="229" width="0.7033%" height="15" fill="rgb(234,150,53)"/><text x="98.9563%" y="239.50"></text></g><g><title>setup_global_ctxt (130,451 samples, 0.17%)</title><rect x="99.4245%" y="229" width="0.1749%" height="15" fill="rgb(228,201,54)"/><text x="99.6745%" y="239.50"></text></g><g><title>all (74,603,801 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (74,603,801 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (298,894 samples, 0.40%)</title><rect x="99.5994%" y="229" width="0.4006%" height="15" fill="rgb(233,25,53)"/><text x="99.8494%" y="239.50"></text></g></svg></svg>