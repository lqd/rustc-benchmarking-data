<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (157,470 samples, 0.16%)</title><rect x="6.2025%" y="149" width="0.1584%" height="15" fill="rgb(227,0,7)"/><text x="6.4525%" y="159.50"></text></g><g><title>param_env (153,581 samples, 0.15%)</title><rect x="7.1219%" y="117" width="0.1545%" height="15" fill="rgb(217,0,24)"/><text x="7.3719%" y="127.50"></text></g><g><title>item_attrs (110,792 samples, 0.11%)</title><rect x="7.5268%" y="85" width="0.1114%" height="15" fill="rgb(221,193,54)"/><text x="7.7768%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,482 samples, 0.11%)</title><rect x="7.5311%" y="69" width="0.1071%" height="15" fill="rgb(248,212,6)"/><text x="7.7811%" y="79.50"></text></g><g><title>codegen_fn_attrs (162,462 samples, 0.16%)</title><rect x="7.4848%" y="101" width="0.1634%" height="15" fill="rgb(208,68,35)"/><text x="7.7348%" y="111.50"></text></g><g><title>adt_drop_tys (125,571 samples, 0.13%)</title><rect x="8.8818%" y="53" width="0.1263%" height="15" fill="rgb(232,128,0)"/><text x="9.1318%" y="63.50"></text></g><g><title>adt_drop_tys (264,803 samples, 0.27%)</title><rect x="8.8576%" y="69" width="0.2663%" height="15" fill="rgb(207,160,47)"/><text x="9.1076%" y="79.50"></text></g><g><title>is_copy_raw (968,695 samples, 0.97%)</title><rect x="9.1239%" y="69" width="0.9743%" height="15" fill="rgb(228,23,34)"/><text x="9.3739%" y="79.50"></text></g><g><title>evaluate_obligation (795,924 samples, 0.80%)</title><rect x="9.2977%" y="53" width="0.8005%" height="15" fill="rgb(218,30,26)"/><text x="9.5477%" y="63.50"></text></g><g><title>needs_drop_raw (1,354,650 samples, 1.36%)</title><rect x="8.7537%" y="85" width="1.3624%" height="15" fill="rgb(220,122,19)"/><text x="9.0037%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (221,901 samples, 0.22%)</title><rect x="10.2210%" y="69" width="0.2232%" height="15" fill="rgb(250,228,42)"/><text x="10.4710%" y="79.50"></text></g><g><title>specialization_graph_of (207,812 samples, 0.21%)</title><rect x="10.4774%" y="69" width="0.2090%" height="15" fill="rgb(240,193,28)"/><text x="10.7274%" y="79.50"></text></g><g><title>impl_trait_ref (100,441 samples, 0.10%)</title><rect x="10.5854%" y="53" width="0.1010%" height="15" fill="rgb(216,20,37)"/><text x="10.8354%" y="63.50"></text></g><g><title>resolve_instance (629,676 samples, 0.63%)</title><rect x="10.1162%" y="85" width="0.6333%" height="15" fill="rgb(206,188,39)"/><text x="10.3662%" y="95.50"></text></g><g><title>thir_body (341,337 samples, 0.34%)</title><rect x="10.7597%" y="85" width="0.3433%" height="15" fill="rgb(217,207,13)"/><text x="11.0097%" y="95.50"></text></g><g><title>mir_const (4,387,808 samples, 4.41%)</title><rect x="6.7633%" y="133" width="4.4130%" height="15" fill="rgb(231,73,38)"/><text x="7.0133%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (3,877,685 samples, 3.90%)</title><rect x="7.2764%" y="117" width="3.9000%" height="15" fill="rgb(225,20,46)"/><text x="7.5264%" y="127.50">unsa..</text></g><g><title>mir_built (3,508,010 samples, 3.53%)</title><rect x="7.6482%" y="101" width="3.5282%" height="15" fill="rgb(210,31,41)"/><text x="7.8982%" y="111.50">mir..</text></g><g><title>mir_promoted (4,719,132 samples, 4.75%)</title><rect x="6.4479%" y="149" width="4.7463%" height="15" fill="rgb(221,200,47)"/><text x="6.6979%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (417,034 samples, 0.42%)</title><rect x="11.1941%" y="149" width="0.4194%" height="15" fill="rgb(226,26,5)"/><text x="11.4441%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (320,585 samples, 0.32%)</title><rect x="11.6136%" y="149" width="0.3224%" height="15" fill="rgb(249,33,26)"/><text x="11.8636%" y="159.50"></text></g><g><title>normalize_projection_ty (105,111 samples, 0.11%)</title><rect x="11.8303%" y="133" width="0.1057%" height="15" fill="rgb(235,183,28)"/><text x="12.0803%" y="143.50"></text></g><g><title>type_op_normalize_predicate (267,841 samples, 0.27%)</title><rect x="11.9360%" y="149" width="0.2694%" height="15" fill="rgb(221,5,38)"/><text x="12.1860%" y="159.50"></text></g><g><title>type_op_normalize_ty (163,373 samples, 0.16%)</title><rect x="12.2054%" y="149" width="0.1643%" height="15" fill="rgb(247,18,42)"/><text x="12.4554%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,426,300 samples, 2.44%)</title><rect x="12.3697%" y="149" width="2.4403%" height="15" fill="rgb(241,131,45)"/><text x="12.6197%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (13,715,335 samples, 13.79%)</title><rect x="1.0310%" y="181" width="13.7942%" height="15" fill="rgb(249,31,29)"/><text x="1.2810%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,663,154 samples, 13.74%)</title><rect x="1.0835%" y="165" width="13.7417%" height="15" fill="rgb(225,111,53)"/><text x="1.3335%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (217,302 samples, 0.22%)</title><rect x="14.8400%" y="181" width="0.2186%" height="15" fill="rgb(238,160,17)"/><text x="15.0900%" y="191.50"></text></g><g><title>get_lang_items (135,551 samples, 0.14%)</title><rect x="15.4350%" y="133" width="0.1363%" height="15" fill="rgb(214,148,48)"/><text x="15.6850%" y="143.50"></text></g><g><title>codegen_fn_attrs (189,323 samples, 0.19%)</title><rect x="15.7229%" y="117" width="0.1904%" height="15" fill="rgb(232,36,49)"/><text x="15.9729%" y="127.50"></text></g><g><title>should_inherit_track_caller (348,044 samples, 0.35%)</title><rect x="15.5713%" y="133" width="0.3500%" height="15" fill="rgb(209,103,24)"/><text x="15.8213%" y="143.50"></text></g><g><title>codegen_fn_attrs (617,248 samples, 0.62%)</title><rect x="15.3275%" y="149" width="0.6208%" height="15" fill="rgb(229,88,8)"/><text x="15.5775%" y="159.50"></text></g><g><title>check_mod_attrs (857,960 samples, 0.86%)</title><rect x="15.0858%" y="165" width="0.8629%" height="15" fill="rgb(213,181,19)"/><text x="15.3358%" y="175.50"></text></g><g><title>check_mod_const_bodies (125,391 samples, 0.13%)</title><rect x="15.9487%" y="165" width="0.1261%" height="15" fill="rgb(254,191,54)"/><text x="16.1987%" y="175.50"></text></g><g><title>lookup_deprecation_entry (205,451 samples, 0.21%)</title><rect x="16.3865%" y="149" width="0.2066%" height="15" fill="rgb(241,83,37)"/><text x="16.6365%" y="159.50"></text></g><g><title>stability_index (111,721 samples, 0.11%)</title><rect x="16.4808%" y="133" width="0.1124%" height="15" fill="rgb(233,36,39)"/><text x="16.7308%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (575,227 samples, 0.58%)</title><rect x="16.1542%" y="165" width="0.5785%" height="15" fill="rgb(226,3,54)"/><text x="16.4042%" y="175.50"></text></g><g><title>misc_checking_1 (1,726,559 samples, 1.74%)</title><rect x="15.0594%" y="181" width="1.7365%" height="15" fill="rgb(245,192,40)"/><text x="15.3094%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (203,262 samples, 0.20%)</title><rect x="16.7972%" y="165" width="0.2044%" height="15" fill="rgb(238,167,29)"/><text x="17.0472%" y="175.50"></text></g><g><title>check_mod_liveness (165,292 samples, 0.17%)</title><rect x="16.8354%" y="149" width="0.1662%" height="15" fill="rgb(232,182,51)"/><text x="17.0854%" y="159.50"></text></g><g><title>misc_checking_2 (472,915 samples, 0.48%)</title><rect x="16.7959%" y="181" width="0.4756%" height="15" fill="rgb(231,60,39)"/><text x="17.0459%" y="191.50"></text></g><g><title>match_checking (268,343 samples, 0.27%)</title><rect x="17.0016%" y="165" width="0.2699%" height="15" fill="rgb(208,69,12)"/><text x="17.2516%" y="175.50"></text></g><g><title>check_match (251,553 samples, 0.25%)</title><rect x="17.0185%" y="149" width="0.2530%" height="15" fill="rgb(235,93,37)"/><text x="17.2685%" y="159.50"></text></g><g><title>check_private_in_public (113,061 samples, 0.11%)</title><rect x="17.2789%" y="165" width="0.1137%" height="15" fill="rgb(213,116,39)"/><text x="17.5289%" y="175.50"></text></g><g><title>death_checking (669,998 samples, 0.67%)</title><rect x="17.3926%" y="165" width="0.6739%" height="15" fill="rgb(222,207,29)"/><text x="17.6426%" y="175.50"></text></g><g><title>item_attrs (496,145 samples, 0.50%)</title><rect x="17.5675%" y="149" width="0.4990%" height="15" fill="rgb(206,96,30)"/><text x="17.8175%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (494,215 samples, 0.50%)</title><rect x="17.5694%" y="133" width="0.4971%" height="15" fill="rgb(218,138,4)"/><text x="17.8194%" y="143.50"></text></g><g><title>param_env (136,801 samples, 0.14%)</title><rect x="18.6230%" y="133" width="0.1376%" height="15" fill="rgb(250,191,14)"/><text x="18.8730%" y="143.50"></text></g><g><title>crate_lints (2,049,863 samples, 2.06%)</title><rect x="18.0678%" y="149" width="2.0617%" height="15" fill="rgb(239,60,40)"/><text x="18.3178%" y="159.50">c..</text></g><g><title>type_of (1,356,807 samples, 1.36%)</title><rect x="18.7649%" y="133" width="1.3646%" height="15" fill="rgb(206,27,48)"/><text x="19.0149%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (863,150 samples, 0.87%)</title><rect x="19.2614%" y="117" width="0.8681%" height="15" fill="rgb(225,35,8)"/><text x="19.5114%" y="127.50"></text></g><g><title>lint_checking (2,211,735 samples, 2.22%)</title><rect x="18.0665%" y="165" width="2.2245%" height="15" fill="rgb(250,213,24)"/><text x="18.3165%" y="175.50">l..</text></g><g><title>module_lints (160,512 samples, 0.16%)</title><rect x="20.1295%" y="149" width="0.1614%" height="15" fill="rgb(247,123,22)"/><text x="20.3795%" y="159.50"></text></g><g><title>lint_mod (158,311 samples, 0.16%)</title><rect x="20.1317%" y="133" width="0.1592%" height="15" fill="rgb(231,138,38)"/><text x="20.3817%" y="143.50"></text></g><g><title>privacy_access_levels (137,272 samples, 0.14%)</title><rect x="20.2909%" y="165" width="0.1381%" height="15" fill="rgb(231,145,46)"/><text x="20.5409%" y="175.50"></text></g><g><title>privacy_checking_modules (457,705 samples, 0.46%)</title><rect x="20.4290%" y="165" width="0.4603%" height="15" fill="rgb(251,118,11)"/><text x="20.6790%" y="175.50"></text></g><g><title>check_mod_privacy (456,235 samples, 0.46%)</title><rect x="20.4304%" y="149" width="0.4589%" height="15" fill="rgb(217,147,25)"/><text x="20.6804%" y="159.50"></text></g><g><title>misc_checking_3 (3,610,031 samples, 3.63%)</title><rect x="17.2715%" y="181" width="3.6308%" height="15" fill="rgb(247,81,37)"/><text x="17.5215%" y="191.50">misc..</text></g><g><title>impl_parent (3,025,190 samples, 3.04%)</title><rect x="26.6573%" y="117" width="3.0426%" height="15" fill="rgb(209,12,38)"/><text x="26.9073%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,773,406 samples, 1.78%)</title><rect x="27.9162%" y="101" width="1.7836%" height="15" fill="rgb(227,1,9)"/><text x="28.1662%" y="111.50">m..</text></g><g><title>impl_trait_ref (8,022,401 samples, 8.07%)</title><rect x="29.6998%" y="117" width="8.0685%" height="15" fill="rgb(248,47,43)"/><text x="29.9498%" y="127.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,752,531 samples, 6.79%)</title><rect x="30.9770%" y="101" width="6.7914%" height="15" fill="rgb(221,10,30)"/><text x="31.2270%" y="111.50">metadata_..</text></g><g><title>coherent_trait (17,938,372 samples, 18.04%)</title><rect x="20.9657%" y="149" width="18.0415%" height="15" fill="rgb(210,229,1)"/><text x="21.2157%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (17,905,712 samples, 18.01%)</title><rect x="20.9986%" y="133" width="18.0087%" height="15" fill="rgb(222,148,37)"/><text x="21.2486%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,228,474 samples, 1.24%)</title><rect x="37.7718%" y="117" width="1.2355%" height="15" fill="rgb(234,67,33)"/><text x="38.0218%" y="127.50"></text></g><g><title>implementations_of_trait (322,026 samples, 0.32%)</title><rect x="38.6834%" y="101" width="0.3239%" height="15" fill="rgb(247,98,35)"/><text x="38.9334%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (238,186 samples, 0.24%)</title><rect x="38.7677%" y="85" width="0.2396%" height="15" fill="rgb(247,138,52)"/><text x="39.0177%" y="95.50"></text></g><g><title>coherence_checking (18,026,613 samples, 18.13%)</title><rect x="20.9424%" y="165" width="18.1303%" height="15" fill="rgb(213,79,30)"/><text x="21.1924%" y="175.50">coherence_checking</text></g><g><title>associated_item (314,513 samples, 0.32%)</title><rect x="45.8135%" y="101" width="0.3163%" height="15" fill="rgb(246,177,23)"/><text x="46.0635%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (242,692 samples, 0.24%)</title><rect x="45.8858%" y="85" width="0.2441%" height="15" fill="rgb(230,62,27)"/><text x="46.1358%" y="95.50"></text></g><g><title>associated_items (467,865 samples, 0.47%)</title><rect x="45.6843%" y="117" width="0.4706%" height="15" fill="rgb(216,154,8)"/><text x="45.9343%" y="127.50"></text></g><g><title>adt_dtorck_constraint (101,332 samples, 0.10%)</title><rect x="46.4477%" y="69" width="0.1019%" height="15" fill="rgb(244,35,45)"/><text x="46.6977%" y="79.50"></text></g><g><title>adt_dtorck_constraint (106,772 samples, 0.11%)</title><rect x="46.4429%" y="85" width="0.1074%" height="15" fill="rgb(251,115,12)"/><text x="46.6929%" y="95.50"></text></g><g><title>adt_dtorck_constraint (172,053 samples, 0.17%)</title><rect x="46.3961%" y="101" width="0.1730%" height="15" fill="rgb(240,54,50)"/><text x="46.6461%" y="111.50"></text></g><g><title>dropck_outlives (431,854 samples, 0.43%)</title><rect x="46.2117%" y="117" width="0.4343%" height="15" fill="rgb(233,84,52)"/><text x="46.4617%" y="127.50"></text></g><g><title>mir_const_qualif (100,771 samples, 0.10%)</title><rect x="46.7444%" y="85" width="0.1014%" height="15" fill="rgb(207,117,47)"/><text x="46.9944%" y="95.50"></text></g><g><title>mir_borrowck (264,633 samples, 0.27%)</title><rect x="46.9464%" y="53" width="0.2662%" height="15" fill="rgb(249,43,39)"/><text x="47.1964%" y="63.50"></text></g><g><title>mir_for_ctfe (368,164 samples, 0.37%)</title><rect x="46.8457%" y="85" width="0.3703%" height="15" fill="rgb(209,38,44)"/><text x="47.0957%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (338,364 samples, 0.34%)</title><rect x="46.8757%" y="69" width="0.3403%" height="15" fill="rgb(236,212,23)"/><text x="47.1257%" y="79.50"></text></g><g><title>eval_to_const_value_raw (161,712 samples, 0.16%)</title><rect x="47.2224%" y="69" width="0.1626%" height="15" fill="rgb(242,79,21)"/><text x="47.4724%" y="79.50"></text></g><g><title>eval_to_const_value_raw (160,472 samples, 0.16%)</title><rect x="47.2237%" y="53" width="0.1614%" height="15" fill="rgb(211,96,35)"/><text x="47.4737%" y="63.50"></text></g><g><title>eval_to_allocation_raw (157,292 samples, 0.16%)</title><rect x="47.2269%" y="37" width="0.1582%" height="15" fill="rgb(253,215,40)"/><text x="47.4769%" y="47.50"></text></g><g><title>eval_to_const_value_raw (735,628 samples, 0.74%)</title><rect x="46.6464%" y="117" width="0.7399%" height="15" fill="rgb(211,81,21)"/><text x="46.8964%" y="127.50"></text></g><g><title>eval_to_allocation_raw (723,728 samples, 0.73%)</title><rect x="46.6584%" y="101" width="0.7279%" height="15" fill="rgb(208,190,38)"/><text x="46.9084%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (168,992 samples, 0.17%)</title><rect x="47.2163%" y="85" width="0.1700%" height="15" fill="rgb(235,213,38)"/><text x="47.4663%" y="95.50"></text></g><g><title>trait_impls_of (152,331 samples, 0.15%)</title><rect x="48.2681%" y="101" width="0.1532%" height="15" fill="rgb(237,122,38)"/><text x="48.5181%" y="111.50"></text></g><g><title>evaluate_obligation (1,032,834 samples, 1.04%)</title><rect x="47.3863%" y="117" width="1.0388%" height="15" fill="rgb(244,218,35)"/><text x="47.6363%" y="127.50"></text></g><g><title>method_autoderef_steps (169,423 samples, 0.17%)</title><rect x="48.7277%" y="117" width="0.1704%" height="15" fill="rgb(240,68,47)"/><text x="48.9777%" y="127.50"></text></g><g><title>object_safety_violations (127,351 samples, 0.13%)</title><rect x="48.8981%" y="117" width="0.1281%" height="15" fill="rgb(210,16,53)"/><text x="49.1481%" y="127.50"></text></g><g><title>predicates_of (180,103 samples, 0.18%)</title><rect x="49.0625%" y="117" width="0.1811%" height="15" fill="rgb(235,124,12)"/><text x="49.3125%" y="127.50"></text></g><g><title>predicates_defined_on (125,633 samples, 0.13%)</title><rect x="49.1173%" y="101" width="0.1264%" height="15" fill="rgb(224,169,11)"/><text x="49.3673%" y="111.50"></text></g><g><title>adt_dtorck_constraint (135,951 samples, 0.14%)</title><rect x="53.0186%" y="85" width="0.1367%" height="15" fill="rgb(250,166,2)"/><text x="53.2686%" y="95.50"></text></g><g><title>dropck_outlives (275,464 samples, 0.28%)</title><rect x="52.9001%" y="101" width="0.2770%" height="15" fill="rgb(242,216,29)"/><text x="53.1501%" y="111.50"></text></g><g><title>evaluate_obligation (371,035 samples, 0.37%)</title><rect x="53.1771%" y="101" width="0.3732%" height="15" fill="rgb(230,116,27)"/><text x="53.4271%" y="111.50"></text></g><g><title>is_copy_raw (199,102 samples, 0.20%)</title><rect x="53.6511%" y="101" width="0.2002%" height="15" fill="rgb(228,99,48)"/><text x="53.9011%" y="111.50"></text></g><g><title>evaluate_obligation (180,702 samples, 0.18%)</title><rect x="53.6696%" y="85" width="0.1817%" height="15" fill="rgb(253,11,6)"/><text x="53.9196%" y="95.50"></text></g><g><title>trait_impls_of (151,312 samples, 0.15%)</title><rect x="53.6991%" y="69" width="0.1522%" height="15" fill="rgb(247,143,39)"/><text x="53.9491%" y="79.50"></text></g><g><title>predicates_of (108,041 samples, 0.11%)</title><rect x="54.0050%" y="101" width="0.1087%" height="15" fill="rgb(236,97,10)"/><text x="54.2550%" y="111.50"></text></g><g><title>typeck (4,877,866 samples, 4.91%)</title><rect x="49.3148%" y="117" width="4.9059%" height="15" fill="rgb(233,208,19)"/><text x="49.5648%" y="127.50">typeck</text></g><g><title>item_bodies_checking (15,033,330 samples, 15.12%)</title><rect x="39.1282%" y="165" width="15.1198%" height="15" fill="rgb(216,164,2)"/><text x="39.3782%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,031,220 samples, 15.12%)</title><rect x="39.1303%" y="149" width="15.1177%" height="15" fill="rgb(220,129,5)"/><text x="39.3803%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (14,995,310 samples, 15.08%)</title><rect x="39.1664%" y="133" width="15.0816%" height="15" fill="rgb(242,17,10)"/><text x="39.4164%" y="143.50">typeck</text></g><g><title>impl_trait_ref (149,643 samples, 0.15%)</title><rect x="55.0636%" y="85" width="0.1505%" height="15" fill="rgb(242,107,0)"/><text x="55.3136%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (129,463 samples, 0.13%)</title><rect x="55.0839%" y="69" width="0.1302%" height="15" fill="rgb(251,28,31)"/><text x="55.3339%" y="79.50"></text></g><g><title>adt_destructor (327,614 samples, 0.33%)</title><rect x="54.9144%" y="133" width="0.3295%" height="15" fill="rgb(233,223,10)"/><text x="55.1644%" y="143.50"></text></g><g><title>coherent_trait (323,904 samples, 0.33%)</title><rect x="54.9182%" y="117" width="0.3258%" height="15" fill="rgb(215,21,27)"/><text x="55.1682%" y="127.50"></text></g><g><title>specialization_graph_of (322,384 samples, 0.32%)</title><rect x="54.9197%" y="101" width="0.3242%" height="15" fill="rgb(232,23,21)"/><text x="55.1697%" y="111.50"></text></g><g><title>item_types_checking (1,184,333 samples, 1.19%)</title><rect x="54.2480%" y="165" width="1.1911%" height="15" fill="rgb(244,5,23)"/><text x="54.4980%" y="175.50"></text></g><g><title>check_mod_item_types (1,182,093 samples, 1.19%)</title><rect x="54.2503%" y="149" width="1.1889%" height="15" fill="rgb(226,81,46)"/><text x="54.5003%" y="159.50"></text></g><g><title>associated_item (105,010 samples, 0.11%)</title><rect x="56.4578%" y="85" width="0.1056%" height="15" fill="rgb(247,70,30)"/><text x="56.7078%" y="95.50"></text></g><g><title>associated_items (165,562 samples, 0.17%)</title><rect x="56.4037%" y="101" width="0.1665%" height="15" fill="rgb(212,68,19)"/><text x="56.6537%" y="111.50"></text></g><g><title>fn_sig (807,566 samples, 0.81%)</title><rect x="55.7948%" y="133" width="0.8122%" height="15" fill="rgb(240,187,13)"/><text x="56.0448%" y="143.50"></text></g><g><title>type_param_predicates (339,643 samples, 0.34%)</title><rect x="56.2654%" y="117" width="0.3416%" height="15" fill="rgb(223,113,26)"/><text x="56.5154%" y="127.50"></text></g><g><title>is_late_bound_map (664,378 samples, 0.67%)</title><rect x="56.7936%" y="117" width="0.6682%" height="15" fill="rgb(206,192,2)"/><text x="57.0436%" y="127.50"></text></g><g><title>resolve_lifetimes (618,658 samples, 0.62%)</title><rect x="56.8396%" y="101" width="0.6222%" height="15" fill="rgb(241,108,4)"/><text x="57.0896%" y="111.50"></text></g><g><title>lint_levels (158,322 samples, 0.16%)</title><rect x="57.5671%" y="85" width="0.1592%" height="15" fill="rgb(247,173,49)"/><text x="57.8171%" y="95.50"></text></g><g><title>named_region_map (265,523 samples, 0.27%)</title><rect x="57.4618%" y="117" width="0.2671%" height="15" fill="rgb(224,114,35)"/><text x="57.7118%" y="127.50"></text></g><g><title>resolve_lifetimes (250,933 samples, 0.25%)</title><rect x="57.4765%" y="101" width="0.2524%" height="15" fill="rgb(245,159,27)"/><text x="57.7265%" y="111.50"></text></g><g><title>generics_of (1,142,123 samples, 1.15%)</title><rect x="56.6070%" y="133" width="1.1487%" height="15" fill="rgb(245,172,44)"/><text x="56.8570%" y="143.50"></text></g><g><title>impl_trait_ref (134,154 samples, 0.13%)</title><rect x="57.7557%" y="133" width="0.1349%" height="15" fill="rgb(236,23,11)"/><text x="58.0057%" y="143.50"></text></g><g><title>late_bound_vars_map (131,651 samples, 0.13%)</title><rect x="58.6782%" y="85" width="0.1324%" height="15" fill="rgb(205,117,38)"/><text x="58.9282%" y="95.50"></text></g><g><title>resolve_lifetimes (109,201 samples, 0.11%)</title><rect x="58.7008%" y="69" width="0.1098%" height="15" fill="rgb(237,72,25)"/><text x="58.9508%" y="79.50"></text></g><g><title>explicit_predicates_of (796,790 samples, 0.80%)</title><rect x="58.0774%" y="101" width="0.8014%" height="15" fill="rgb(244,70,9)"/><text x="58.3274%" y="111.50"></text></g><g><title>predicates_of (1,105,764 samples, 1.11%)</title><rect x="57.8906%" y="133" width="1.1121%" height="15" fill="rgb(217,125,39)"/><text x="58.1406%" y="143.50"></text></g><g><title>predicates_defined_on (1,038,683 samples, 1.04%)</title><rect x="57.9581%" y="117" width="1.0447%" height="15" fill="rgb(235,36,10)"/><text x="58.2081%" y="127.50"></text></g><g><title>inferred_outlives_of (123,261 samples, 0.12%)</title><rect x="58.8788%" y="101" width="0.1240%" height="15" fill="rgb(251,123,47)"/><text x="59.1288%" y="111.50"></text></g><g><title>type_collecting (3,762,263 samples, 3.78%)</title><rect x="55.4408%" y="165" width="3.7839%" height="15" fill="rgb(221,13,13)"/><text x="55.6908%" y="175.50">type..</text></g><g><title>collect_mod_item_types (3,751,283 samples, 3.77%)</title><rect x="55.4519%" y="149" width="3.7729%" height="15" fill="rgb(238,131,9)"/><text x="55.7019%" y="159.50">coll..</text></g><g><title>type_of (220,712 samples, 0.22%)</title><rect x="59.0028%" y="133" width="0.2220%" height="15" fill="rgb(211,50,8)"/><text x="59.2528%" y="143.50"></text></g><g><title>evaluate_obligation (369,164 samples, 0.37%)</title><rect x="60.6069%" y="133" width="0.3713%" height="15" fill="rgb(245,182,24)"/><text x="60.8569%" y="143.50"></text></g><g><title>implied_outlives_bounds (307,730 samples, 0.31%)</title><rect x="60.9782%" y="133" width="0.3095%" height="15" fill="rgb(242,14,37)"/><text x="61.2282%" y="143.50"></text></g><g><title>param_env (183,894 samples, 0.18%)</title><rect x="61.2877%" y="133" width="0.1850%" height="15" fill="rgb(246,228,12)"/><text x="61.5377%" y="143.50"></text></g><g><title>region_scope_tree (130,600 samples, 0.13%)</title><rect x="61.4821%" y="133" width="0.1314%" height="15" fill="rgb(213,55,15)"/><text x="61.7321%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,296,445 samples, 2.31%)</title><rect x="59.3487%" y="149" width="2.3097%" height="15" fill="rgb(209,9,3)"/><text x="59.5987%" y="159.50">c..</text></g><g><title>adt_sized_constraint (125,971 samples, 0.13%)</title><rect x="63.2907%" y="117" width="0.1267%" height="15" fill="rgb(230,59,30)"/><text x="63.5407%" y="127.50"></text></g><g><title>adt_sized_constraint (143,372 samples, 0.14%)</title><rect x="63.2765%" y="133" width="0.1442%" height="15" fill="rgb(209,121,21)"/><text x="63.5265%" y="143.50"></text></g><g><title>evaluate_obligation (214,912 samples, 0.22%)</title><rect x="63.4207%" y="133" width="0.2161%" height="15" fill="rgb(220,109,13)"/><text x="63.6707%" y="143.50"></text></g><g><title>adt_sized_constraint (167,161 samples, 0.17%)</title><rect x="63.4688%" y="117" width="0.1681%" height="15" fill="rgb(232,18,1)"/><text x="63.7188%" y="127.50"></text></g><g><title>implied_outlives_bounds (229,182 samples, 0.23%)</title><rect x="63.6494%" y="133" width="0.2305%" height="15" fill="rgb(215,41,42)"/><text x="63.8994%" y="143.50"></text></g><g><title>param_env (255,024 samples, 0.26%)</title><rect x="63.9465%" y="133" width="0.2565%" height="15" fill="rgb(224,123,36)"/><text x="64.1965%" y="143.50"></text></g><g><title>predicates_of (129,091 samples, 0.13%)</title><rect x="64.2030%" y="133" width="0.1298%" height="15" fill="rgb(240,125,3)"/><text x="64.4530%" y="143.50"></text></g><g><title>trait_impls_of (124,391 samples, 0.13%)</title><rect x="64.3778%" y="133" width="0.1251%" height="15" fill="rgb(205,98,50)"/><text x="64.6278%" y="143.50"></text></g><g><title>analysis (63,486,676 samples, 63.85%)</title><rect x="0.7088%" y="197" width="63.8518%" height="15" fill="rgb(205,185,37)"/><text x="0.9588%" y="207.50">analysis</text></g><g><title>type_check_crate (43,408,660 samples, 43.66%)</title><rect x="20.9023%" y="181" width="43.6583%" height="15" fill="rgb(238,207,15)"/><text x="21.1523%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,302,530 samples, 5.33%)</title><rect x="59.2276%" y="165" width="5.3330%" height="15" fill="rgb(213,199,42)"/><text x="59.4776%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (2,885,702 samples, 2.90%)</title><rect x="61.6583%" y="149" width="2.9023%" height="15" fill="rgb(235,201,11)"/><text x="61.9083%" y="159.50">ch..</text></g><g><title>codegen_crate (345,864 samples, 0.35%)</title><rect x="64.5717%" y="197" width="0.3479%" height="15" fill="rgb(207,46,11)"/><text x="64.8217%" y="207.50"></text></g><g><title>AST_validation (183,313 samples, 0.18%)</title><rect x="65.1313%" y="181" width="0.1844%" height="15" fill="rgb(241,35,35)"/><text x="65.3813%" y="191.50"></text></g><g><title>metadata_load_macro (227,573 samples, 0.23%)</title><rect x="79.4062%" y="149" width="0.2289%" height="15" fill="rgb(243,32,47)"/><text x="79.6562%" y="159.50"></text></g><g><title>macro_expand_crate (17,563,998 samples, 17.67%)</title><rect x="65.4620%" y="181" width="17.6650%" height="15" fill="rgb(247,202,23)"/><text x="65.7120%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,539,718 samples, 17.64%)</title><rect x="65.4864%" y="165" width="17.6406%" height="15" fill="rgb(219,102,11)"/><text x="65.7364%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (3,471,950 samples, 3.49%)</title><rect x="79.6351%" y="149" width="3.4919%" height="15" fill="rgb(243,110,44)"/><text x="79.8851%" y="159.50">met..</text></g><g><title>metadata_register_crate (1,407,603 samples, 1.42%)</title><rect x="81.7113%" y="133" width="1.4157%" height="15" fill="rgb(222,74,54)"/><text x="81.9613%" y="143.50"></text></g><g><title>metadata_register_crate (283,463 samples, 0.29%)</title><rect x="82.8419%" y="117" width="0.2851%" height="15" fill="rgb(216,99,12)"/><text x="83.0919%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (246,042 samples, 0.25%)</title><rect x="83.1315%" y="181" width="0.2475%" height="15" fill="rgb(226,22,26)"/><text x="83.3815%" y="191.50"></text></g><g><title>finalize_macro_resolutions (104,412 samples, 0.11%)</title><rect x="83.4434%" y="165" width="0.1050%" height="15" fill="rgb(217,163,10)"/><text x="83.6934%" y="175.50"></text></g><g><title>late_resolve_crate (3,041,604 samples, 3.06%)</title><rect x="83.5484%" y="165" width="3.0591%" height="15" fill="rgb(213,25,53)"/><text x="83.7984%" y="175.50">lat..</text></g><g><title>configure_and_expand (21,679,295 samples, 21.80%)</title><rect x="64.9195%" y="197" width="21.8040%" height="15" fill="rgb(252,105,26)"/><text x="65.1695%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,325,407 samples, 3.34%)</title><rect x="83.3790%" y="181" width="3.3445%" height="15" fill="rgb(220,39,43)"/><text x="83.6290%" y="191.50">res..</text></g><g><title>drop_ast (201,382 samples, 0.20%)</title><rect x="86.7235%" y="197" width="0.2025%" height="15" fill="rgb(229,68,48)"/><text x="86.9735%" y="207.50"></text></g><g><title>early_lint_checks (363,454 samples, 0.37%)</title><rect x="86.9411%" y="197" width="0.3655%" height="15" fill="rgb(252,8,32)"/><text x="87.1911%" y="207.50"></text></g><g><title>free_global_ctxt (3,243,247 samples, 3.26%)</title><rect x="87.3066%" y="197" width="3.2619%" height="15" fill="rgb(223,20,43)"/><text x="87.5566%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (802,609 samples, 0.81%)</title><rect x="90.5685%" y="197" width="0.8072%" height="15" fill="rgb(229,81,49)"/><text x="90.8185%" y="207.50"></text></g><g><title>hir_lowering (3,100,615 samples, 3.12%)</title><rect x="91.3758%" y="197" width="3.1184%" height="15" fill="rgb(236,28,36)"/><text x="91.6258%" y="207.50">hir..</text></g><g><title>parse_crate (3,921,324 samples, 3.94%)</title><rect x="94.5364%" y="197" width="3.9439%" height="15" fill="rgb(249,185,26)"/><text x="94.7864%" y="207.50">pars..</text></g><g><title>prepare_outputs (345,904 samples, 0.35%)</title><rect x="98.4887%" y="197" width="0.3479%" height="15" fill="rgb(249,174,33)"/><text x="98.7387%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (728,249 samples, 0.73%)</title><rect x="98.8366%" y="197" width="0.7324%" height="15" fill="rgb(233,201,37)"/><text x="99.0866%" y="207.50"></text></g><g><title>setup_global_ctxt (116,221 samples, 0.12%)</title><rect x="99.5773%" y="197" width="0.1169%" height="15" fill="rgb(221,78,26)"/><text x="99.8273%" y="207.50"></text></g><g><title>all (99,428,121 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (99,428,121 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (304,073 samples, 0.31%)</title><rect x="99.6942%" y="197" width="0.3058%" height="15" fill="rgb(229,67,23)"/><text x="99.9442%" y="207.50"></text></g></svg></svg>