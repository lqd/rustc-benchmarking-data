<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (68,950 samples, 0.13%)</title><rect x="5.5072%" y="149" width="0.1283%" height="15" fill="rgb(227,0,7)"/><text x="5.7572%" y="159.50"></text></g><g><title>is_copy_raw (94,742 samples, 0.18%)</title><rect x="6.7159%" y="85" width="0.1762%" height="15" fill="rgb(217,0,24)"/><text x="6.9659%" y="95.50"></text></g><g><title>evaluate_obligation (88,411 samples, 0.16%)</title><rect x="6.7276%" y="69" width="0.1645%" height="15" fill="rgb(221,193,54)"/><text x="6.9776%" y="79.50"></text></g><g><title>adt_drop_tys (119,432 samples, 0.22%)</title><rect x="6.7008%" y="101" width="0.2222%" height="15" fill="rgb(248,212,6)"/><text x="6.9508%" y="111.50"></text></g><g><title>needs_drop_raw (540,335 samples, 1.01%)</title><rect x="6.6556%" y="117" width="1.0051%" height="15" fill="rgb(208,68,35)"/><text x="6.9056%" y="127.50"></text></g><g><title>is_copy_raw (396,653 samples, 0.74%)</title><rect x="6.9229%" y="101" width="0.7378%" height="15" fill="rgb(232,128,0)"/><text x="7.1729%" y="111.50"></text></g><g><title>evaluate_obligation (373,103 samples, 0.69%)</title><rect x="6.9667%" y="85" width="0.6940%" height="15" fill="rgb(207,160,47)"/><text x="7.2167%" y="95.50"></text></g><g><title>trait_impls_of (252,043 samples, 0.47%)</title><rect x="7.1919%" y="69" width="0.4688%" height="15" fill="rgb(228,23,34)"/><text x="7.4419%" y="79.50"></text></g><g><title>implementations_of_trait (71,162 samples, 0.13%)</title><rect x="7.5284%" y="53" width="0.1324%" height="15" fill="rgb(218,30,26)"/><text x="7.7784%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (63,922 samples, 0.12%)</title><rect x="7.5418%" y="37" width="0.1189%" height="15" fill="rgb(220,122,19)"/><text x="7.7918%" y="47.50"></text></g><g><title>resolve_instance (141,343 samples, 0.26%)</title><rect x="7.6608%" y="117" width="0.2629%" height="15" fill="rgb(250,228,42)"/><text x="7.9108%" y="127.50"></text></g><g><title>thir_body (138,261 samples, 0.26%)</title><rect x="7.9335%" y="117" width="0.2572%" height="15" fill="rgb(240,193,28)"/><text x="8.1835%" y="127.50"></text></g><g><title>mir_const (1,653,359 samples, 3.08%)</title><rect x="5.1209%" y="165" width="3.0755%" height="15" fill="rgb(216,20,37)"/><text x="5.3709%" y="175.50">mir..</text></g><g><title>unsafety_check_result (1,376,736 samples, 2.56%)</title><rect x="5.6355%" y="149" width="2.5609%" height="15" fill="rgb(206,188,39)"/><text x="5.8855%" y="159.50">un..</text></g><g><title>mir_built (1,220,474 samples, 2.27%)</title><rect x="5.9262%" y="133" width="2.2703%" height="15" fill="rgb(217,207,13)"/><text x="6.1762%" y="143.50">m..</text></g><g><title>mir_promoted (1,866,372 samples, 3.47%)</title><rect x="4.7478%" y="181" width="3.4717%" height="15" fill="rgb(231,73,38)"/><text x="4.9978%" y="191.50">mir..</text></g><g><title>type_op_ascribe_user_type (127,232 samples, 0.24%)</title><rect x="8.2195%" y="181" width="0.2367%" height="15" fill="rgb(225,20,46)"/><text x="8.4695%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (81,741 samples, 0.15%)</title><rect x="8.4562%" y="181" width="0.1521%" height="15" fill="rgb(210,31,41)"/><text x="8.7062%" y="191.50"></text></g><g><title>type_op_normalize_ty (73,801 samples, 0.14%)</title><rect x="8.6082%" y="181" width="0.1373%" height="15" fill="rgb(221,200,47)"/><text x="8.8582%" y="191.50"></text></g><g><title>type_op_prove_predicate (213,054 samples, 0.40%)</title><rect x="8.7455%" y="181" width="0.3963%" height="15" fill="rgb(226,26,5)"/><text x="8.9955%" y="191.50"></text></g><g><title>MIR_borrow_checking (4,076,066 samples, 7.58%)</title><rect x="1.5641%" y="213" width="7.5821%" height="15" fill="rgb(249,33,26)"/><text x="1.8141%" y="223.50">MIR_borrow..</text></g><g><title>mir_borrowck (4,055,746 samples, 7.54%)</title><rect x="1.6019%" y="197" width="7.5443%" height="15" fill="rgb(235,183,28)"/><text x="1.8519%" y="207.50">mir_borrow..</text></g><g><title>hir_module_items (137,152 samples, 0.26%)</title><rect x="9.1542%" y="213" width="0.2551%" height="15" fill="rgb(221,5,38)"/><text x="9.4042%" y="223.50"></text></g><g><title>get_lang_items (90,211 samples, 0.17%)</title><rect x="9.7919%" y="165" width="0.1678%" height="15" fill="rgb(247,18,42)"/><text x="10.0419%" y="175.50"></text></g><g><title>codegen_fn_attrs (94,212 samples, 0.18%)</title><rect x="10.1453%" y="149" width="0.1752%" height="15" fill="rgb(241,131,45)"/><text x="10.3953%" y="159.50"></text></g><g><title>should_inherit_track_caller (196,932 samples, 0.37%)</title><rect x="9.9597%" y="165" width="0.3663%" height="15" fill="rgb(249,31,29)"/><text x="10.2097%" y="175.50"></text></g><g><title>codegen_fn_attrs (380,275 samples, 0.71%)</title><rect x="9.6614%" y="181" width="0.7074%" height="15" fill="rgb(225,111,53)"/><text x="9.9114%" y="191.50"></text></g><g><title>check_mod_attrs (487,635 samples, 0.91%)</title><rect x="9.4624%" y="197" width="0.9071%" height="15" fill="rgb(238,160,17)"/><text x="9.7124%" y="207.50"></text></g><g><title>lookup_deprecation_entry (83,460 samples, 0.16%)</title><rect x="10.6688%" y="181" width="0.1552%" height="15" fill="rgb(214,148,48)"/><text x="10.9188%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (251,943 samples, 0.47%)</title><rect x="10.5004%" y="197" width="0.4687%" height="15" fill="rgb(232,36,49)"/><text x="10.7504%" y="207.50"></text></g><g><title>misc_checking_1 (883,550 samples, 1.64%)</title><rect x="9.4104%" y="213" width="1.6435%" height="15" fill="rgb(209,103,24)"/><text x="9.6604%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (82,661 samples, 0.15%)</title><rect x="11.0580%" y="197" width="0.1538%" height="15" fill="rgb(229,88,8)"/><text x="11.3080%" y="207.50"></text></g><g><title>check_mod_liveness (59,381 samples, 0.11%)</title><rect x="11.1013%" y="181" width="0.1105%" height="15" fill="rgb(213,181,19)"/><text x="11.3513%" y="191.50"></text></g><g><title>misc_checking_2 (208,982 samples, 0.39%)</title><rect x="11.0540%" y="213" width="0.3887%" height="15" fill="rgb(254,191,54)"/><text x="11.3040%" y="223.50"></text></g><g><title>match_checking (124,151 samples, 0.23%)</title><rect x="11.2118%" y="197" width="0.2309%" height="15" fill="rgb(241,83,37)"/><text x="11.4618%" y="207.50"></text></g><g><title>check_match (117,461 samples, 0.22%)</title><rect x="11.2242%" y="181" width="0.2185%" height="15" fill="rgb(233,36,39)"/><text x="11.4742%" y="191.50"></text></g><g><title>death_checking (95,421 samples, 0.18%)</title><rect x="11.5283%" y="197" width="0.1775%" height="15" fill="rgb(226,3,54)"/><text x="11.7783%" y="207.50"></text></g><g><title>crate_lints (1,503,087 samples, 2.80%)</title><rect x="11.7084%" y="181" width="2.7960%" height="15" fill="rgb(245,192,40)"/><text x="11.9584%" y="191.50">cr..</text></g><g><title>type_of (1,026,430 samples, 1.91%)</title><rect x="12.5950%" y="165" width="1.9093%" height="15" fill="rgb(238,167,29)"/><text x="12.8450%" y="175.50">t..</text></g><g><title>metadata_decode_entry_type_of (779,718 samples, 1.45%)</title><rect x="13.0540%" y="149" width="1.4504%" height="15" fill="rgb(232,182,51)"/><text x="13.3040%" y="159.50"></text></g><g><title>lint_checking (1,556,387 samples, 2.90%)</title><rect x="11.7058%" y="197" width="2.8951%" height="15" fill="rgb(231,60,39)"/><text x="11.9558%" y="207.50">li..</text></g><g><title>privacy_access_levels (55,620 samples, 0.10%)</title><rect x="14.6009%" y="197" width="0.1035%" height="15" fill="rgb(208,69,12)"/><text x="14.8509%" y="207.50"></text></g><g><title>privacy_checking_modules (87,930 samples, 0.16%)</title><rect x="14.7044%" y="197" width="0.1636%" height="15" fill="rgb(235,93,37)"/><text x="14.9544%" y="207.50"></text></g><g><title>check_mod_privacy (86,400 samples, 0.16%)</title><rect x="14.7072%" y="181" width="0.1607%" height="15" fill="rgb(213,116,39)"/><text x="14.9572%" y="191.50"></text></g><g><title>misc_checking_3 (1,854,410 samples, 3.45%)</title><rect x="11.4427%" y="213" width="3.4495%" height="15" fill="rgb(222,207,29)"/><text x="11.6927%" y="223.50">mis..</text></g><g><title>impl_parent (1,748,837 samples, 3.25%)</title><rect x="20.1208%" y="149" width="3.2531%" height="15" fill="rgb(206,96,30)"/><text x="20.3708%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,038,158 samples, 1.93%)</title><rect x="21.4427%" y="133" width="1.9311%" height="15" fill="rgb(218,138,4)"/><text x="21.6927%" y="143.50">m..</text></g><g><title>impl_trait_ref (6,721,235 samples, 12.50%)</title><rect x="23.3739%" y="149" width="12.5026%" height="15" fill="rgb(250,191,14)"/><text x="23.6239%" y="159.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,005,736 samples, 11.17%)</title><rect x="24.7048%" y="133" width="11.1716%" height="15" fill="rgb(239,60,40)"/><text x="24.9548%" y="143.50">metadata_decode_..</text></g><g><title>coherent_trait (11,819,982 samples, 21.99%)</title><rect x="14.9939%" y="181" width="21.9870%" height="15" fill="rgb(206,27,48)"/><text x="15.2439%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (11,801,612 samples, 21.95%)</title><rect x="15.0281%" y="165" width="21.9529%" height="15" fill="rgb(225,35,8)"/><text x="15.2781%" y="175.50">specialization_graph_of</text></g><g><title>trait_impls_of (590,357 samples, 1.10%)</title><rect x="35.8828%" y="149" width="1.0982%" height="15" fill="rgb(250,213,24)"/><text x="36.1328%" y="159.50"></text></g><g><title>implementations_of_trait (162,190 samples, 0.30%)</title><rect x="36.6793%" y="133" width="0.3017%" height="15" fill="rgb(247,123,22)"/><text x="36.9293%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (122,050 samples, 0.23%)</title><rect x="36.7539%" y="117" width="0.2270%" height="15" fill="rgb(231,138,38)"/><text x="37.0039%" y="127.50"></text></g><g><title>coherence_checking (11,894,644 samples, 22.13%)</title><rect x="14.9529%" y="197" width="22.1259%" height="15" fill="rgb(231,145,46)"/><text x="15.2029%" y="207.50">coherence_checking</text></g><g><title>adt_sized_constraint (125,241 samples, 0.23%)</title><rect x="44.3967%" y="149" width="0.2330%" height="15" fill="rgb(251,118,11)"/><text x="44.6467%" y="159.50"></text></g><g><title>adt_sized_constraint (81,901 samples, 0.15%)</title><rect x="44.4773%" y="133" width="0.1523%" height="15" fill="rgb(217,147,25)"/><text x="44.7273%" y="143.50"></text></g><g><title>adt_def (77,111 samples, 0.14%)</title><rect x="44.4862%" y="117" width="0.1434%" height="15" fill="rgb(247,81,37)"/><text x="44.7362%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (75,941 samples, 0.14%)</title><rect x="44.4884%" y="101" width="0.1413%" height="15" fill="rgb(209,12,38)"/><text x="44.7384%" y="111.50"></text></g><g><title>item_attrs (64,011 samples, 0.12%)</title><rect x="44.5106%" y="85" width="0.1191%" height="15" fill="rgb(227,1,9)"/><text x="44.7606%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (63,111 samples, 0.12%)</title><rect x="44.5123%" y="69" width="0.1174%" height="15" fill="rgb(248,47,43)"/><text x="44.7623%" y="79.50"></text></g><g><title>associated_item (66,800 samples, 0.12%)</title><rect x="44.7128%" y="133" width="0.1243%" height="15" fill="rgb(221,10,30)"/><text x="44.9628%" y="143.50"></text></g><g><title>associated_items (120,251 samples, 0.22%)</title><rect x="44.6297%" y="149" width="0.2237%" height="15" fill="rgb(210,229,1)"/><text x="44.8797%" y="159.50"></text></g><g><title>dropck_outlives (116,171 samples, 0.22%)</title><rect x="44.8950%" y="149" width="0.2161%" height="15" fill="rgb(222,148,37)"/><text x="45.1450%" y="159.50"></text></g><g><title>evaluate_obligation (183,362 samples, 0.34%)</title><rect x="45.1111%" y="149" width="0.3411%" height="15" fill="rgb(234,67,33)"/><text x="45.3611%" y="159.50"></text></g><g><title>item_attrs (247,814 samples, 0.46%)</title><rect x="45.7575%" y="149" width="0.4610%" height="15" fill="rgb(247,98,35)"/><text x="46.0075%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (242,014 samples, 0.45%)</title><rect x="45.7682%" y="133" width="0.4502%" height="15" fill="rgb(247,138,52)"/><text x="46.0182%" y="143.50"></text></g><g><title>evaluate_obligation (63,391 samples, 0.12%)</title><rect x="46.3418%" y="133" width="0.1179%" height="15" fill="rgb(213,79,30)"/><text x="46.5918%" y="143.50"></text></g><g><title>method_autoderef_steps (125,851 samples, 0.23%)</title><rect x="46.2578%" y="149" width="0.2341%" height="15" fill="rgb(246,177,23)"/><text x="46.5078%" y="159.50"></text></g><g><title>evaluate_obligation (130,241 samples, 0.24%)</title><rect x="46.9415%" y="133" width="0.2423%" height="15" fill="rgb(230,62,27)"/><text x="47.1915%" y="143.50"></text></g><g><title>layout_of (83,381 samples, 0.16%)</title><rect x="47.1838%" y="133" width="0.1551%" height="15" fill="rgb(216,154,8)"/><text x="47.4338%" y="143.50"></text></g><g><title>object_safety_violations (477,765 samples, 0.89%)</title><rect x="46.4919%" y="149" width="0.8887%" height="15" fill="rgb(244,35,45)"/><text x="46.7419%" y="159.50"></text></g><g><title>explicit_predicates_of (204,591 samples, 0.38%)</title><rect x="47.5451%" y="117" width="0.3806%" height="15" fill="rgb(251,115,12)"/><text x="47.7951%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (194,281 samples, 0.36%)</title><rect x="47.5643%" y="101" width="0.3614%" height="15" fill="rgb(240,54,50)"/><text x="47.8143%" y="111.50"></text></g><g><title>predicates_of (298,514 samples, 0.56%)</title><rect x="47.4066%" y="149" width="0.5553%" height="15" fill="rgb(233,84,52)"/><text x="47.6566%" y="159.50"></text></g><g><title>predicates_defined_on (256,094 samples, 0.48%)</title><rect x="47.4855%" y="133" width="0.4764%" height="15" fill="rgb(207,117,47)"/><text x="47.7355%" y="143.50"></text></g><g><title>type_of (101,792 samples, 0.19%)</title><rect x="48.0727%" y="149" width="0.1893%" height="15" fill="rgb(249,43,39)"/><text x="48.3227%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (88,202 samples, 0.16%)</title><rect x="48.0980%" y="133" width="0.1641%" height="15" fill="rgb(209,38,44)"/><text x="48.3480%" y="143.50"></text></g><g><title>item_bodies_checking (5,998,507 samples, 11.16%)</title><rect x="37.1291%" y="197" width="11.1582%" height="15" fill="rgb(236,212,23)"/><text x="37.3791%" y="207.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (5,995,527 samples, 11.15%)</title><rect x="37.1347%" y="181" width="11.1526%" height="15" fill="rgb(242,79,21)"/><text x="37.3847%" y="191.50">typeck_item_bodi..</text></g><g><title>typeck (5,975,347 samples, 11.12%)</title><rect x="37.1722%" y="165" width="11.1151%" height="15" fill="rgb(211,96,35)"/><text x="37.4222%" y="175.50">typeck</text></g><g><title>item_types_checking (577,026 samples, 1.07%)</title><rect x="48.2873%" y="197" width="1.0734%" height="15" fill="rgb(253,215,40)"/><text x="48.5373%" y="207.50"></text></g><g><title>check_mod_item_types (572,376 samples, 1.06%)</title><rect x="48.2959%" y="181" width="1.0647%" height="15" fill="rgb(211,81,21)"/><text x="48.5459%" y="191.50"></text></g><g><title>fn_sig (243,352 samples, 0.45%)</title><rect x="49.6559%" y="165" width="0.4527%" height="15" fill="rgb(208,190,38)"/><text x="49.9059%" y="175.50"></text></g><g><title>generics_of (99,262 samples, 0.18%)</title><rect x="50.1086%" y="165" width="0.1846%" height="15" fill="rgb(235,213,38)"/><text x="50.3586%" y="175.50"></text></g><g><title>late_bound_vars_map (237,304 samples, 0.44%)</title><rect x="50.7265%" y="117" width="0.4414%" height="15" fill="rgb(237,122,38)"/><text x="50.9765%" y="127.50"></text></g><g><title>resolve_lifetimes (223,094 samples, 0.41%)</title><rect x="50.7529%" y="101" width="0.4150%" height="15" fill="rgb(244,218,35)"/><text x="51.0029%" y="111.50"></text></g><g><title>explicit_predicates_of (407,445 samples, 0.76%)</title><rect x="50.4602%" y="133" width="0.7579%" height="15" fill="rgb(240,68,47)"/><text x="50.7102%" y="143.50"></text></g><g><title>predicates_of (605,747 samples, 1.13%)</title><rect x="50.3557%" y="165" width="1.1268%" height="15" fill="rgb(210,16,53)"/><text x="50.6057%" y="175.50"></text></g><g><title>predicates_defined_on (583,227 samples, 1.08%)</title><rect x="50.3976%" y="149" width="1.0849%" height="15" fill="rgb(235,124,12)"/><text x="50.6476%" y="159.50"></text></g><g><title>inferred_outlives_of (142,111 samples, 0.26%)</title><rect x="51.2181%" y="133" width="0.2643%" height="15" fill="rgb(224,169,11)"/><text x="51.4681%" y="143.50"></text></g><g><title>inferred_outlives_crate (123,491 samples, 0.23%)</title><rect x="51.2527%" y="117" width="0.2297%" height="15" fill="rgb(250,166,2)"/><text x="51.5027%" y="127.50"></text></g><g><title>type_of (58,401 samples, 0.11%)</title><rect x="51.3738%" y="101" width="0.1086%" height="15" fill="rgb(242,216,29)"/><text x="51.6238%" y="111.50"></text></g><g><title>type_collecting (1,276,744 samples, 2.37%)</title><rect x="49.3635%" y="197" width="2.3749%" height="15" fill="rgb(230,116,27)"/><text x="49.6135%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (1,264,844 samples, 2.35%)</title><rect x="49.3857%" y="181" width="2.3528%" height="15" fill="rgb(228,99,48)"/><text x="49.6357%" y="191.50">c..</text></g><g><title>type_of (76,191 samples, 0.14%)</title><rect x="51.5968%" y="165" width="0.1417%" height="15" fill="rgb(253,11,6)"/><text x="51.8468%" y="175.50"></text></g><g><title>evaluate_obligation (324,963 samples, 0.60%)</title><rect x="53.1155%" y="165" width="0.6045%" height="15" fill="rgb(247,143,39)"/><text x="53.3655%" y="175.50"></text></g><g><title>implied_outlives_bounds (117,161 samples, 0.22%)</title><rect x="53.7342%" y="165" width="0.2179%" height="15" fill="rgb(236,97,10)"/><text x="53.9842%" y="175.50"></text></g><g><title>param_env (94,611 samples, 0.18%)</title><rect x="53.9521%" y="165" width="0.1760%" height="15" fill="rgb(233,208,19)"/><text x="54.2021%" y="175.50"></text></g><g><title>predicates_of (74,001 samples, 0.14%)</title><rect x="54.1281%" y="165" width="0.1377%" height="15" fill="rgb(216,164,2)"/><text x="54.3781%" y="175.50"></text></g><g><title>predicates_defined_on (59,280 samples, 0.11%)</title><rect x="54.1555%" y="149" width="0.1103%" height="15" fill="rgb(220,129,5)"/><text x="54.4055%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,366,724 samples, 2.54%)</title><rect x="51.8604%" y="181" width="2.5423%" height="15" fill="rgb(242,17,10)"/><text x="52.1104%" y="191.50">ch..</text></g><g><title>region_scope_tree (73,611 samples, 0.14%)</title><rect x="54.2658%" y="165" width="0.1369%" height="15" fill="rgb(242,107,0)"/><text x="54.5158%" y="175.50"></text></g><g><title>param_env (244,746 samples, 0.46%)</title><rect x="55.8533%" y="165" width="0.4553%" height="15" fill="rgb(251,28,31)"/><text x="56.1033%" y="175.50"></text></g><g><title>predicates_of (72,990 samples, 0.14%)</title><rect x="56.3085%" y="165" width="0.1358%" height="15" fill="rgb(233,223,10)"/><text x="56.5585%" y="175.50"></text></g><g><title>check_item_well_formed (1,199,454 samples, 2.23%)</title><rect x="54.4027%" y="181" width="2.2312%" height="15" fill="rgb(215,21,27)"/><text x="54.6527%" y="191.50">c..</text></g><g><title>variances_of (89,851 samples, 0.17%)</title><rect x="56.4667%" y="165" width="0.1671%" height="15" fill="rgb(232,23,21)"/><text x="56.7167%" y="175.50"></text></g><g><title>crate_variances (84,171 samples, 0.16%)</title><rect x="56.4773%" y="149" width="0.1566%" height="15" fill="rgb(244,5,23)"/><text x="56.7273%" y="159.50"></text></g><g><title>implied_outlives_bounds (85,070 samples, 0.16%)</title><rect x="56.8314%" y="165" width="0.1582%" height="15" fill="rgb(226,81,46)"/><text x="57.0814%" y="175.50"></text></g><g><title>analysis (29,981,675 samples, 55.77%)</title><rect x="1.2433%" y="229" width="55.7706%" height="15" fill="rgb(247,70,30)"/><text x="1.4933%" y="239.50">analysis</text></g><g><title>type_check_crate (22,644,153 samples, 42.12%)</title><rect x="14.8922%" y="213" width="42.1217%" height="15" fill="rgb(212,68,19)"/><text x="15.1422%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,834,871 samples, 5.27%)</title><rect x="51.7406%" y="197" width="5.2733%" height="15" fill="rgb(240,187,13)"/><text x="51.9906%" y="207.50">wf_che..</text></g><g><title>check_trait_item_well_formed (204,293 samples, 0.38%)</title><rect x="56.6339%" y="181" width="0.3800%" height="15" fill="rgb(223,113,26)"/><text x="56.8839%" y="191.50"></text></g><g><title>missing_lang_items (213,842 samples, 0.40%)</title><rect x="57.5635%" y="213" width="0.3978%" height="15" fill="rgb(206,192,2)"/><text x="57.8135%" y="223.50"></text></g><g><title>codegen_crate (533,945 samples, 0.99%)</title><rect x="57.0360%" y="229" width="0.9932%" height="15" fill="rgb(241,108,4)"/><text x="57.2860%" y="239.50"></text></g><g><title>AST_validation (89,971 samples, 0.17%)</title><rect x="58.4591%" y="213" width="0.1674%" height="15" fill="rgb(247,173,49)"/><text x="58.7091%" y="223.50"></text></g><g><title>crate_injection (80,801 samples, 0.15%)</title><rect x="58.6855%" y="213" width="0.1503%" height="15" fill="rgb(224,114,35)"/><text x="58.9355%" y="223.50"></text></g><g><title>metadata_load_macro (101,350 samples, 0.19%)</title><rect x="77.8814%" y="181" width="0.1885%" height="15" fill="rgb(245,159,27)"/><text x="78.1314%" y="191.50"></text></g><g><title>macro_expand_crate (13,108,056 samples, 24.38%)</title><rect x="58.8358%" y="213" width="24.3831%" height="15" fill="rgb(245,172,44)"/><text x="59.0858%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (13,082,675 samples, 24.34%)</title><rect x="58.8830%" y="197" width="24.3358%" height="15" fill="rgb(236,23,11)"/><text x="59.1330%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,768,031 samples, 5.15%)</title><rect x="78.0699%" y="181" width="5.1490%" height="15" fill="rgb(205,117,38)"/><text x="78.3199%" y="191.50">metada..</text></g><g><title>metadata_register_crate (1,031,751 samples, 1.92%)</title><rect x="81.2997%" y="165" width="1.9192%" height="15" fill="rgb(237,72,25)"/><text x="81.5497%" y="175.50">m..</text></g><g><title>metadata_register_crate (82,731 samples, 0.15%)</title><rect x="83.0650%" y="149" width="0.1539%" height="15" fill="rgb(244,70,9)"/><text x="83.3150%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (165,792 samples, 0.31%)</title><rect x="83.2284%" y="213" width="0.3084%" height="15" fill="rgb(217,125,39)"/><text x="83.4784%" y="223.50"></text></g><g><title>late_resolve_crate (1,490,387 samples, 2.77%)</title><rect x="83.6707%" y="197" width="2.7724%" height="15" fill="rgb(235,36,10)"/><text x="83.9207%" y="207.50">la..</text></g><g><title>configure_and_expand (15,332,181 samples, 28.52%)</title><rect x="58.0292%" y="229" width="28.5203%" height="15" fill="rgb(251,123,47)"/><text x="58.2792%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,619,578 samples, 3.01%)</title><rect x="83.5368%" y="213" width="3.0127%" height="15" fill="rgb(221,13,13)"/><text x="83.7868%" y="223.50">res..</text></g><g><title>drop_ast (72,261 samples, 0.13%)</title><rect x="86.5495%" y="229" width="0.1344%" height="15" fill="rgb(238,131,9)"/><text x="86.7995%" y="239.50"></text></g><g><title>early_lint_checks (171,312 samples, 0.32%)</title><rect x="86.7095%" y="229" width="0.3187%" height="15" fill="rgb(211,50,8)"/><text x="86.9595%" y="239.50"></text></g><g><title>free_global_ctxt (2,402,467 samples, 4.47%)</title><rect x="87.0282%" y="229" width="4.4690%" height="15" fill="rgb(245,182,24)"/><text x="87.2782%" y="239.50">free_..</text></g><g><title>crate_hash (68,171 samples, 0.13%)</title><rect x="92.0420%" y="213" width="0.1268%" height="15" fill="rgb(242,14,37)"/><text x="92.2920%" y="223.50"></text></g><g><title>generate_crate_metadata (475,325 samples, 0.88%)</title><rect x="91.4972%" y="229" width="0.8842%" height="15" fill="rgb(246,228,12)"/><text x="91.7472%" y="239.50"></text></g><g><title>hir_lowering (967,401 samples, 1.80%)</title><rect x="92.3813%" y="229" width="1.7995%" height="15" fill="rgb(213,55,15)"/><text x="92.6313%" y="239.50">h..</text></g><g><title>parse_crate (1,889,051 samples, 3.51%)</title><rect x="94.2648%" y="229" width="3.5139%" height="15" fill="rgb(209,9,3)"/><text x="94.5148%" y="239.50">par..</text></g><g><title>prepare_outputs (331,084 samples, 0.62%)</title><rect x="97.7954%" y="229" width="0.6159%" height="15" fill="rgb(230,59,30)"/><text x="98.0454%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (392,654 samples, 0.73%)</title><rect x="98.4112%" y="229" width="0.7304%" height="15" fill="rgb(209,121,21)"/><text x="98.6612%" y="239.50"></text></g><g><title>setup_global_ctxt (137,742 samples, 0.26%)</title><rect x="99.1616%" y="229" width="0.2562%" height="15" fill="rgb(220,109,13)"/><text x="99.4116%" y="239.50"></text></g><g><title>all (53,758,881 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (53,758,881 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (312,973 samples, 0.58%)</title><rect x="99.4178%" y="229" width="0.5822%" height="15" fill="rgb(224,123,36)"/><text x="99.6678%" y="239.50"></text></g></svg></svg>