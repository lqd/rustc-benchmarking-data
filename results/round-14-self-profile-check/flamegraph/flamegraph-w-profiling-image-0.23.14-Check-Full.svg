<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (4,318,527 samples, 0.13%)</title><rect x="15.4411%" y="133" width="0.1330%" height="15" fill="rgb(227,0,7)"/><text x="15.6911%" y="143.50"></text></g><g><title>codegen_fn_attrs (3,974,461 samples, 0.12%)</title><rect x="18.1107%" y="85" width="0.1224%" height="15" fill="rgb(217,0,24)"/><text x="18.3607%" y="95.50"></text></g><g><title>is_copy_raw (24,182,595 samples, 0.74%)</title><rect x="22.1422%" y="53" width="0.7449%" height="15" fill="rgb(221,193,54)"/><text x="22.3922%" y="63.50"></text></g><g><title>evaluate_obligation (19,398,498 samples, 0.60%)</title><rect x="22.2896%" y="37" width="0.5975%" height="15" fill="rgb(248,212,6)"/><text x="22.5396%" y="47.50"></text></g><g><title>needs_drop_raw (30,471,908 samples, 0.94%)</title><rect x="21.9511%" y="69" width="0.9386%" height="15" fill="rgb(208,68,35)"/><text x="22.2011%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (13,190,139 samples, 0.41%)</title><rect x="23.0670%" y="53" width="0.4063%" height="15" fill="rgb(232,128,0)"/><text x="23.3170%" y="63.50"></text></g><g><title>resolve_instance (22,279,482 samples, 0.69%)</title><rect x="22.8958%" y="69" width="0.6863%" height="15" fill="rgb(207,160,47)"/><text x="23.1458%" y="79.50"></text></g><g><title>thir_body (47,628,679 samples, 1.47%)</title><rect x="23.6082%" y="69" width="1.4671%" height="15" fill="rgb(228,23,34)"/><text x="23.8582%" y="79.50"></text></g><g><title>mir_const (277,525,542 samples, 8.55%)</title><rect x="16.5617%" y="117" width="8.5488%" height="15" fill="rgb(218,30,26)"/><text x="16.8117%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (245,760,918 samples, 7.57%)</title><rect x="17.5402%" y="101" width="7.5703%" height="15" fill="rgb(220,122,19)"/><text x="17.7902%" y="111.50">unsafety_c..</text></g><g><title>mir_built (223,264,345 samples, 6.88%)</title><rect x="18.2332%" y="85" width="6.8773%" height="15" fill="rgb(250,228,42)"/><text x="18.4832%" y="95.50">mir_built</text></g><g><title>mir_const (8,743,678 samples, 0.27%)</title><rect x="25.1976%" y="101" width="0.2693%" height="15" fill="rgb(240,193,28)"/><text x="25.4476%" y="111.50"></text></g><g><title>unsafety_check_result (7,142,183 samples, 0.22%)</title><rect x="25.2470%" y="85" width="0.2200%" height="15" fill="rgb(216,20,37)"/><text x="25.4970%" y="95.50"></text></g><g><title>mir_built (6,549,687 samples, 0.20%)</title><rect x="25.2652%" y="69" width="0.2018%" height="15" fill="rgb(206,188,39)"/><text x="25.5152%" y="79.50"></text></g><g><title>mir_const_qualif (11,573,492 samples, 0.36%)</title><rect x="25.1105%" y="117" width="0.3565%" height="15" fill="rgb(217,207,13)"/><text x="25.3605%" y="127.50"></text></g><g><title>mir_promoted (317,833,363 samples, 9.79%)</title><rect x="15.6767%" y="133" width="9.7904%" height="15" fill="rgb(231,73,38)"/><text x="15.9267%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (13,754,867 samples, 0.42%)</title><rect x="25.4686%" y="133" width="0.4237%" height="15" fill="rgb(225,20,46)"/><text x="25.7186%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (26,033,763 samples, 0.80%)</title><rect x="25.8923%" y="133" width="0.8019%" height="15" fill="rgb(210,31,41)"/><text x="26.1423%" y="143.50"></text></g><g><title>normalize_projection_ty (16,805,003 samples, 0.52%)</title><rect x="26.1766%" y="117" width="0.5177%" height="15" fill="rgb(221,200,47)"/><text x="26.4266%" y="127.50"></text></g><g><title>type_op_normalize_predicate (9,863,959 samples, 0.30%)</title><rect x="26.6944%" y="133" width="0.3038%" height="15" fill="rgb(226,26,5)"/><text x="26.9444%" y="143.50"></text></g><g><title>normalize_projection_ty (5,235,695 samples, 0.16%)</title><rect x="26.8370%" y="117" width="0.1613%" height="15" fill="rgb(249,33,26)"/><text x="27.0870%" y="127.50"></text></g><g><title>type_op_prove_predicate (79,442,316 samples, 2.45%)</title><rect x="27.0775%" y="133" width="2.4471%" height="15" fill="rgb(235,183,28)"/><text x="27.3275%" y="143.50">ty..</text></g><g><title>evaluate_obligation (9,244,808 samples, 0.28%)</title><rect x="29.2399%" y="117" width="0.2848%" height="15" fill="rgb(221,5,38)"/><text x="29.4899%" y="127.50"></text></g><g><title>MIR_borrow_checking (948,542,394 samples, 29.22%)</title><rect x="0.3086%" y="165" width="29.2184%" height="15" fill="rgb(247,18,42)"/><text x="0.5586%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (944,400,981 samples, 29.09%)</title><rect x="0.4362%" y="149" width="29.0908%" height="15" fill="rgb(241,131,45)"/><text x="0.6862%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (7,692,366 samples, 0.24%)</title><rect x="29.5270%" y="165" width="0.2370%" height="15" fill="rgb(249,31,29)"/><text x="29.7770%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,053,458 samples, 0.12%)</title><rect x="29.6391%" y="149" width="0.1249%" height="15" fill="rgb(225,111,53)"/><text x="29.8891%" y="159.50"></text></g><g><title>hir_module_items (5,459,178 samples, 0.17%)</title><rect x="29.7640%" y="165" width="0.1682%" height="15" fill="rgb(238,160,17)"/><text x="30.0140%" y="175.50"></text></g><g><title>codegen_fn_attrs (5,314,254 samples, 0.16%)</title><rect x="30.1769%" y="133" width="0.1637%" height="15" fill="rgb(214,148,48)"/><text x="30.4269%" y="143.50"></text></g><g><title>check_mod_attrs (13,099,629 samples, 0.40%)</title><rect x="29.9371%" y="149" width="0.4035%" height="15" fill="rgb(232,36,49)"/><text x="30.1871%" y="159.50"></text></g><g><title>check_mod_const_bodies (3,249,787 samples, 0.10%)</title><rect x="30.3406%" y="149" width="0.1001%" height="15" fill="rgb(209,103,24)"/><text x="30.5906%" y="159.50"></text></g><g><title>check_mod_loops (3,384,016 samples, 0.10%)</title><rect x="30.4407%" y="149" width="0.1042%" height="15" fill="rgb(229,88,8)"/><text x="30.6907%" y="159.50"></text></g><g><title>lint_levels (8,170,671 samples, 0.25%)</title><rect x="30.6577%" y="133" width="0.2517%" height="15" fill="rgb(213,181,19)"/><text x="30.9077%" y="143.50"></text></g><g><title>lookup_deprecation_entry (5,038,668 samples, 0.16%)</title><rect x="30.9094%" y="133" width="0.1552%" height="15" fill="rgb(254,191,54)"/><text x="31.1594%" y="143.50"></text></g><g><title>stability_index (4,749,444 samples, 0.15%)</title><rect x="30.9183%" y="117" width="0.1463%" height="15" fill="rgb(241,83,37)"/><text x="31.1683%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (16,804,245 samples, 0.52%)</title><rect x="30.5561%" y="149" width="0.5176%" height="15" fill="rgb(233,36,39)"/><text x="30.8061%" y="159.50"></text></g><g><title>misc_checking_1 (38,125,734 samples, 1.17%)</title><rect x="29.9322%" y="165" width="1.1744%" height="15" fill="rgb(226,3,54)"/><text x="30.1822%" y="175.50"></text></g><g><title>check_mod_intrinsics (3,420,632 samples, 0.11%)</title><rect x="31.1091%" y="133" width="0.1054%" height="15" fill="rgb(245,192,40)"/><text x="31.3591%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (20,269,016 samples, 0.62%)</title><rect x="31.1067%" y="149" width="0.6244%" height="15" fill="rgb(238,167,29)"/><text x="31.3567%" y="159.50"></text></g><g><title>check_mod_liveness (16,770,352 samples, 0.52%)</title><rect x="31.2145%" y="133" width="0.5166%" height="15" fill="rgb(232,182,51)"/><text x="31.4645%" y="143.50"></text></g><g><title>misc_checking_2 (50,125,858 samples, 1.54%)</title><rect x="31.1066%" y="165" width="1.5441%" height="15" fill="rgb(231,60,39)"/><text x="31.3566%" y="175.50"></text></g><g><title>match_checking (29,852,842 samples, 0.92%)</title><rect x="31.7311%" y="149" width="0.9196%" height="15" fill="rgb(208,69,12)"/><text x="31.9811%" y="159.50"></text></g><g><title>check_match (28,398,548 samples, 0.87%)</title><rect x="31.7759%" y="133" width="0.8748%" height="15" fill="rgb(235,93,37)"/><text x="32.0259%" y="143.50"></text></g><g><title>check_private_in_public (10,333,536 samples, 0.32%)</title><rect x="32.6514%" y="149" width="0.3183%" height="15" fill="rgb(213,116,39)"/><text x="32.9014%" y="159.50"></text></g><g><title>death_checking (18,618,906 samples, 0.57%)</title><rect x="32.9697%" y="149" width="0.5735%" height="15" fill="rgb(222,207,29)"/><text x="33.2197%" y="159.50"></text></g><g><title>eval_to_allocation_raw (3,382,405 samples, 0.10%)</title><rect x="34.0721%" y="117" width="0.1042%" height="15" fill="rgb(206,96,30)"/><text x="34.3221%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,343,565 samples, 0.10%)</title><rect x="34.0733%" y="101" width="0.1030%" height="15" fill="rgb(218,138,4)"/><text x="34.3233%" y="111.50"></text></g><g><title>param_env (7,017,157 samples, 0.22%)</title><rect x="34.2028%" y="117" width="0.2162%" height="15" fill="rgb(250,191,14)"/><text x="34.4528%" y="127.50"></text></g><g><title>predicates_of (3,469,201 samples, 0.11%)</title><rect x="34.3121%" y="101" width="0.1069%" height="15" fill="rgb(239,60,40)"/><text x="34.5621%" y="111.50"></text></g><g><title>crate_lints (30,921,914 samples, 0.95%)</title><rect x="33.5433%" y="133" width="0.9525%" height="15" fill="rgb(206,27,48)"/><text x="33.7933%" y="143.50"></text></g><g><title>lint_checking (53,289,344 samples, 1.64%)</title><rect x="33.5432%" y="149" width="1.6415%" height="15" fill="rgb(225,35,8)"/><text x="33.7932%" y="159.50"></text></g><g><title>module_lints (22,363,760 samples, 0.69%)</title><rect x="34.4958%" y="133" width="0.6889%" height="15" fill="rgb(250,213,24)"/><text x="34.7458%" y="143.50"></text></g><g><title>lint_mod (22,300,157 samples, 0.69%)</title><rect x="34.4978%" y="117" width="0.6869%" height="15" fill="rgb(247,123,22)"/><text x="34.7478%" y="127.50"></text></g><g><title>privacy_access_levels (18,023,770 samples, 0.56%)</title><rect x="35.1847%" y="149" width="0.5552%" height="15" fill="rgb(231,138,38)"/><text x="35.4347%" y="159.50"></text></g><g><title>privacy_checking_modules (35,078,770 samples, 1.08%)</title><rect x="35.7399%" y="149" width="1.0805%" height="15" fill="rgb(231,145,46)"/><text x="35.9899%" y="159.50"></text></g><g><title>check_mod_privacy (35,019,280 samples, 1.08%)</title><rect x="35.7417%" y="133" width="1.0787%" height="15" fill="rgb(251,118,11)"/><text x="35.9917%" y="143.50"></text></g><g><title>misc_checking_3 (135,703,080 samples, 4.18%)</title><rect x="32.6506%" y="165" width="4.1801%" height="15" fill="rgb(217,147,25)"/><text x="32.9006%" y="175.50">misc_..</text></g><g><title>impl_parent (4,279,919 samples, 0.13%)</title><rect x="37.1899%" y="101" width="0.1318%" height="15" fill="rgb(247,81,37)"/><text x="37.4399%" y="111.50"></text></g><g><title>impl_trait_ref (8,009,057 samples, 0.25%)</title><rect x="37.3217%" y="101" width="0.2467%" height="15" fill="rgb(209,12,38)"/><text x="37.5717%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,331,788 samples, 0.20%)</title><rect x="37.3734%" y="85" width="0.1950%" height="15" fill="rgb(227,1,9)"/><text x="37.6234%" y="95.50"></text></g><g><title>coherent_trait (23,586,933 samples, 0.73%)</title><rect x="36.9083%" y="133" width="0.7266%" height="15" fill="rgb(248,47,43)"/><text x="37.1583%" y="143.50"></text></g><g><title>specialization_graph_of (22,110,627 samples, 0.68%)</title><rect x="36.9537%" y="117" width="0.6811%" height="15" fill="rgb(221,10,30)"/><text x="37.2037%" y="127.50"></text></g><g><title>coherence_checking (24,605,504 samples, 0.76%)</title><rect x="36.9069%" y="149" width="0.7579%" height="15" fill="rgb(210,229,1)"/><text x="37.1569%" y="159.50"></text></g><g><title>dropck_outlives (10,711,068 samples, 0.33%)</title><rect x="66.6209%" y="101" width="0.3299%" height="15" fill="rgb(222,148,37)"/><text x="66.8709%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,633,732 samples, 0.14%)</title><rect x="66.9532%" y="85" width="0.1427%" height="15" fill="rgb(234,67,33)"/><text x="67.2032%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,300,272 samples, 0.16%)</title><rect x="66.9512%" y="101" width="0.1633%" height="15" fill="rgb(247,98,35)"/><text x="67.2012%" y="111.50"></text></g><g><title>predicates_of (3,346,815 samples, 0.10%)</title><rect x="69.3990%" y="85" width="0.1031%" height="15" fill="rgb(247,138,52)"/><text x="69.6490%" y="95.50"></text></g><g><title>specializes (7,522,387 samples, 0.23%)</title><rect x="69.5046%" y="85" width="0.2317%" height="15" fill="rgb(213,79,30)"/><text x="69.7546%" y="95.50"></text></g><g><title>param_env (3,707,026 samples, 0.11%)</title><rect x="69.6222%" y="69" width="0.1142%" height="15" fill="rgb(246,177,23)"/><text x="69.8722%" y="79.50"></text></g><g><title>evaluate_obligation (86,585,903 samples, 2.67%)</title><rect x="67.1145%" y="101" width="2.6671%" height="15" fill="rgb(230,62,27)"/><text x="67.3645%" y="111.50">ev..</text></g><g><title>method_autoderef_steps (13,222,840 samples, 0.41%)</title><rect x="69.9735%" y="101" width="0.4073%" height="15" fill="rgb(216,154,8)"/><text x="70.2235%" y="111.50"></text></g><g><title>evaluate_obligation (6,180,031 samples, 0.19%)</title><rect x="70.1905%" y="85" width="0.1904%" height="15" fill="rgb(244,35,45)"/><text x="70.4405%" y="95.50"></text></g><g><title>evaluate_obligation (27,158,653 samples, 0.84%)</title><rect x="76.8895%" y="85" width="0.8366%" height="15" fill="rgb(251,115,12)"/><text x="77.1395%" y="95.50"></text></g><g><title>is_copy_raw (6,105,071 samples, 0.19%)</title><rect x="77.7970%" y="85" width="0.1881%" height="15" fill="rgb(240,54,50)"/><text x="78.0470%" y="95.50"></text></g><g><title>method_autoderef_steps (4,342,930 samples, 0.13%)</title><rect x="77.9985%" y="85" width="0.1338%" height="15" fill="rgb(233,84,52)"/><text x="78.2485%" y="95.50"></text></g><g><title>typeck (245,618,779 samples, 7.57%)</title><rect x="70.6310%" y="101" width="7.5659%" height="15" fill="rgb(207,117,47)"/><text x="70.8810%" y="111.50">typeck</text></g><g><title>item_bodies_checking (1,315,481,407 samples, 40.52%)</title><rect x="37.7001%" y="149" width="40.5214%" height="15" fill="rgb(249,43,39)"/><text x="37.9501%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,315,477,117 samples, 40.52%)</title><rect x="37.7003%" y="133" width="40.5213%" height="15" fill="rgb(209,38,44)"/><text x="37.9503%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,310,503,121 samples, 40.37%)</title><rect x="37.8535%" y="117" width="40.3681%" height="15" fill="rgb(236,212,23)"/><text x="38.1035%" y="127.50">typeck</text></g><g><title>evaluate_obligation (3,653,889 samples, 0.11%)</title><rect x="79.4373%" y="101" width="0.1126%" height="15" fill="rgb(242,79,21)"/><text x="79.6873%" y="111.50"></text></g><g><title>item_types_checking (43,361,462 samples, 1.34%)</title><rect x="78.2215%" y="149" width="1.3357%" height="15" fill="rgb(211,96,35)"/><text x="78.4715%" y="159.50"></text></g><g><title>check_mod_item_types (43,308,781 samples, 1.33%)</title><rect x="78.2232%" y="133" width="1.3341%" height="15" fill="rgb(253,215,40)"/><text x="78.4732%" y="143.50"></text></g><g><title>typeck (9,930,667 samples, 0.31%)</title><rect x="79.2513%" y="117" width="0.3059%" height="15" fill="rgb(211,81,21)"/><text x="79.5013%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,808,229 samples, 0.27%)</title><rect x="79.7885%" y="117" width="0.2713%" height="15" fill="rgb(208,190,38)"/><text x="80.0385%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,771,079 samples, 0.27%)</title><rect x="79.7896%" y="101" width="0.2702%" height="15" fill="rgb(235,213,38)"/><text x="80.0396%" y="111.50"></text></g><g><title>eval_to_allocation_raw (8,730,429 samples, 0.27%)</title><rect x="79.7909%" y="85" width="0.2689%" height="15" fill="rgb(237,122,38)"/><text x="80.0409%" y="95.50"></text></g><g><title>fn_sig (6,651,445 samples, 0.20%)</title><rect x="80.0598%" y="117" width="0.2049%" height="15" fill="rgb(244,218,35)"/><text x="80.3098%" y="127.50"></text></g><g><title>named_region_map (5,338,410 samples, 0.16%)</title><rect x="80.4031%" y="101" width="0.1644%" height="15" fill="rgb(240,68,47)"/><text x="80.6531%" y="111.50"></text></g><g><title>resolve_lifetimes (4,835,995 samples, 0.15%)</title><rect x="80.4186%" y="85" width="0.1490%" height="15" fill="rgb(210,16,53)"/><text x="80.6686%" y="95.50"></text></g><g><title>generics_of (10,130,920 samples, 0.31%)</title><rect x="80.2647%" y="117" width="0.3121%" height="15" fill="rgb(235,124,12)"/><text x="80.5147%" y="127.50"></text></g><g><title>late_bound_vars_map (3,589,004 samples, 0.11%)</title><rect x="80.8707%" y="69" width="0.1106%" height="15" fill="rgb(224,169,11)"/><text x="81.1207%" y="79.50"></text></g><g><title>resolve_lifetimes (3,401,273 samples, 0.10%)</title><rect x="80.8764%" y="53" width="0.1048%" height="15" fill="rgb(250,166,2)"/><text x="81.1264%" y="63.50"></text></g><g><title>explicit_predicates_of (8,740,703 samples, 0.27%)</title><rect x="80.7327%" y="85" width="0.2692%" height="15" fill="rgb(242,216,29)"/><text x="80.9827%" y="95.50"></text></g><g><title>predicates_of (16,718,320 samples, 0.51%)</title><rect x="80.6200%" y="117" width="0.5150%" height="15" fill="rgb(230,116,27)"/><text x="80.8700%" y="127.50"></text></g><g><title>predicates_defined_on (15,323,663 samples, 0.47%)</title><rect x="80.6630%" y="101" width="0.4720%" height="15" fill="rgb(228,99,48)"/><text x="80.9130%" y="111.50"></text></g><g><title>inferred_outlives_of (4,320,770 samples, 0.13%)</title><rect x="81.0019%" y="85" width="0.1331%" height="15" fill="rgb(253,11,6)"/><text x="81.2519%" y="95.50"></text></g><g><title>inferred_outlives_crate (3,849,263 samples, 0.12%)</title><rect x="81.0164%" y="69" width="0.1186%" height="15" fill="rgb(247,143,39)"/><text x="81.2664%" y="79.50"></text></g><g><title>type_collecting (53,181,692 samples, 1.64%)</title><rect x="79.5590%" y="149" width="1.6382%" height="15" fill="rgb(236,97,10)"/><text x="79.8090%" y="159.50"></text></g><g><title>collect_mod_item_types (53,112,260 samples, 1.64%)</title><rect x="79.5611%" y="133" width="1.6360%" height="15" fill="rgb(233,208,19)"/><text x="79.8111%" y="143.50"></text></g><g><title>evaluate_obligation (7,992,268 samples, 0.25%)</title><rect x="83.0159%" y="117" width="0.2462%" height="15" fill="rgb(216,164,2)"/><text x="83.2659%" y="127.50"></text></g><g><title>implied_outlives_bounds (5,612,048 samples, 0.17%)</title><rect x="83.2660%" y="117" width="0.1729%" height="15" fill="rgb(220,129,5)"/><text x="83.5160%" y="127.50"></text></g><g><title>param_env (11,543,106 samples, 0.36%)</title><rect x="83.4709%" y="117" width="0.3556%" height="15" fill="rgb(242,17,10)"/><text x="83.7209%" y="127.50"></text></g><g><title>region_scope_tree (11,695,314 samples, 0.36%)</title><rect x="83.8313%" y="117" width="0.3603%" height="15" fill="rgb(242,107,0)"/><text x="84.0813%" y="127.50"></text></g><g><title>check_impl_item_well_formed (91,303,534 samples, 2.81%)</title><rect x="81.3860%" y="133" width="2.8125%" height="15" fill="rgb(251,28,31)"/><text x="81.6360%" y="143.50">ch..</text></g><g><title>evaluate_obligation (8,772,015 samples, 0.27%)</title><rect x="85.3824%" y="117" width="0.2702%" height="15" fill="rgb(233,223,10)"/><text x="85.6324%" y="127.50"></text></g><g><title>param_env (8,708,165 samples, 0.27%)</title><rect x="85.7641%" y="117" width="0.2682%" height="15" fill="rgb(215,21,27)"/><text x="86.0141%" y="127.50"></text></g><g><title>region_scope_tree (4,196,037 samples, 0.13%)</title><rect x="86.0381%" y="117" width="0.1293%" height="15" fill="rgb(232,23,21)"/><text x="86.2881%" y="127.50"></text></g><g><title>check_item_well_formed (66,046,550 samples, 2.03%)</title><rect x="84.1984%" y="133" width="2.0345%" height="15" fill="rgb(244,5,23)"/><text x="84.4484%" y="143.50">c..</text></g><g><title>analysis (2,803,620,145 samples, 86.36%)</title><rect x="0.0543%" y="181" width="86.3613%" height="15" fill="rgb(226,81,46)"/><text x="0.3043%" y="191.50">analysis</text></g><g><title>type_check_crate (1,609,713,671 samples, 49.58%)</title><rect x="36.8308%" y="165" width="49.5848%" height="15" fill="rgb(247,70,30)"/><text x="37.0808%" y="175.50">type_check_crate</text></g><g><title>wf_checking (169,130,022 samples, 5.21%)</title><rect x="81.2058%" y="149" width="5.2098%" height="15" fill="rgb(212,68,19)"/><text x="81.4558%" y="159.50">wf_che..</text></g><g><title>check_trait_item_well_formed (5,929,838 samples, 0.18%)</title><rect x="86.2329%" y="133" width="0.1827%" height="15" fill="rgb(240,187,13)"/><text x="86.4829%" y="143.50"></text></g><g><title>AST_validation (5,379,039 samples, 0.17%)</title><rect x="86.4373%" y="165" width="0.1657%" height="15" fill="rgb(223,113,26)"/><text x="86.6873%" y="175.50"></text></g><g><title>complete_gated_feature_checking (4,165,576 samples, 0.13%)</title><rect x="86.6030%" y="165" width="0.1283%" height="15" fill="rgb(206,192,2)"/><text x="86.8530%" y="175.50"></text></g><g><title>macro_expand_crate (177,128,672 samples, 5.46%)</title><rect x="86.7328%" y="165" width="5.4562%" height="15" fill="rgb(241,108,4)"/><text x="86.9828%" y="175.50">macro_e..</text></g><g><title>expand_crate (177,113,411 samples, 5.46%)</title><rect x="86.7333%" y="149" width="5.4557%" height="15" fill="rgb(247,173,49)"/><text x="86.9833%" y="159.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (5,404,567 samples, 0.17%)</title><rect x="92.0225%" y="133" width="0.1665%" height="15" fill="rgb(224,114,35)"/><text x="92.2725%" y="143.50"></text></g><g><title>late_resolve_crate (46,742,080 samples, 1.44%)</title><rect x="92.2713%" y="149" width="1.4398%" height="15" fill="rgb(245,159,27)"/><text x="92.5213%" y="159.50"></text></g><g><title>resolve_check_unused (3,623,190 samples, 0.11%)</title><rect x="93.7244%" y="149" width="0.1116%" height="15" fill="rgb(245,172,44)"/><text x="93.9744%" y="159.50"></text></g><g><title>resolve_postprocess (3,301,767 samples, 0.10%)</title><rect x="93.8360%" y="149" width="0.1017%" height="15" fill="rgb(236,23,11)"/><text x="94.0860%" y="159.50"></text></g><g><title>configure_and_expand (243,650,631 samples, 7.51%)</title><rect x="86.4324%" y="181" width="7.5053%" height="15" fill="rgb(205,117,38)"/><text x="86.6824%" y="191.50">configure_..</text></g><g><title>resolve_crate (56,653,671 samples, 1.75%)</title><rect x="92.1926%" y="165" width="1.7451%" height="15" fill="rgb(237,72,25)"/><text x="92.4426%" y="175.50"></text></g><g><title>drop_ast (11,641,319 samples, 0.36%)</title><rect x="93.9377%" y="181" width="0.3586%" height="15" fill="rgb(244,70,9)"/><text x="94.1877%" y="191.50"></text></g><g><title>early_lint_checks (13,635,622 samples, 0.42%)</title><rect x="94.2973%" y="181" width="0.4200%" height="15" fill="rgb(217,125,39)"/><text x="94.5473%" y="191.50"></text></g><g><title>free_global_ctxt (28,337,686 samples, 0.87%)</title><rect x="94.7174%" y="181" width="0.8729%" height="15" fill="rgb(235,36,10)"/><text x="94.9674%" y="191.50"></text></g><g><title>generate_crate_metadata (32,105,017 samples, 0.99%)</title><rect x="95.5903%" y="181" width="0.9889%" height="15" fill="rgb(251,123,47)"/><text x="95.8403%" y="191.50"></text></g><g><title>hir_lowering (100,563,499 samples, 3.10%)</title><rect x="96.5792%" y="181" width="3.0977%" height="15" fill="rgb(221,13,13)"/><text x="96.8292%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (7,170,660 samples, 0.22%)</title><rect x="99.7145%" y="181" width="0.2209%" height="15" fill="rgb(238,131,9)"/><text x="99.9645%" y="191.50"></text></g><g><title>all (3,246,385,652 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (3,246,385,652 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>