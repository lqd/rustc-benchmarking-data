<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (133,103 samples, 0.14%)</title><rect x="7.3626%" y="181" width="0.1384%" height="15" fill="rgb(227,0,7)"/><text x="7.6126%" y="191.50"></text></g><g><title>param_env (218,873 samples, 0.23%)</title><rect x="8.5428%" y="149" width="0.2276%" height="15" fill="rgb(217,0,24)"/><text x="8.7928%" y="159.50"></text></g><g><title>item_attrs (214,622 samples, 0.22%)</title><rect x="9.1163%" y="117" width="0.2232%" height="15" fill="rgb(221,193,54)"/><text x="9.3663%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (207,432 samples, 0.22%)</title><rect x="9.1238%" y="101" width="0.2157%" height="15" fill="rgb(248,212,6)"/><text x="9.3738%" y="111.50"></text></g><g><title>codegen_fn_attrs (306,884 samples, 0.32%)</title><rect x="9.0352%" y="133" width="0.3192%" height="15" fill="rgb(208,68,35)"/><text x="9.2852%" y="143.50"></text></g><g><title>adt_drop_tys (120,431 samples, 0.13%)</title><rect x="11.0359%" y="85" width="0.1252%" height="15" fill="rgb(232,128,0)"/><text x="11.2859%" y="95.50"></text></g><g><title>is_copy_raw (167,231 samples, 0.17%)</title><rect x="11.1612%" y="85" width="0.1739%" height="15" fill="rgb(207,160,47)"/><text x="11.4112%" y="95.50"></text></g><g><title>evaluate_obligation (129,810 samples, 0.14%)</title><rect x="11.2001%" y="69" width="0.1350%" height="15" fill="rgb(228,23,34)"/><text x="11.4501%" y="79.50"></text></g><g><title>adt_drop_tys (479,227 samples, 0.50%)</title><rect x="10.9709%" y="101" width="0.4984%" height="15" fill="rgb(218,30,26)"/><text x="11.2209%" y="111.50"></text></g><g><title>param_env (129,071 samples, 0.13%)</title><rect x="11.3351%" y="85" width="0.1342%" height="15" fill="rgb(220,122,19)"/><text x="11.5851%" y="95.50"></text></g><g><title>is_copy_raw (856,369 samples, 0.89%)</title><rect x="11.4740%" y="101" width="0.8906%" height="15" fill="rgb(250,228,42)"/><text x="11.7240%" y="111.50"></text></g><g><title>evaluate_obligation (700,568 samples, 0.73%)</title><rect x="11.6360%" y="85" width="0.7286%" height="15" fill="rgb(240,193,28)"/><text x="11.8860%" y="95.50"></text></g><g><title>needs_drop_raw (1,482,166 samples, 1.54%)</title><rect x="10.8372%" y="117" width="1.5414%" height="15" fill="rgb(216,20,37)"/><text x="11.0872%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (154,942 samples, 0.16%)</title><rect x="12.5561%" y="101" width="0.1611%" height="15" fill="rgb(206,188,39)"/><text x="12.8061%" y="111.50"></text></g><g><title>impl_parent (211,402 samples, 0.22%)</title><rect x="13.0617%" y="85" width="0.2199%" height="15" fill="rgb(217,207,13)"/><text x="13.3117%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (144,921 samples, 0.15%)</title><rect x="13.1309%" y="69" width="0.1507%" height="15" fill="rgb(231,73,38)"/><text x="13.3809%" y="79.50"></text></g><g><title>specialization_graph_of (1,021,312 samples, 1.06%)</title><rect x="12.7366%" y="101" width="1.0621%" height="15" fill="rgb(225,20,46)"/><text x="12.9866%" y="111.50"></text></g><g><title>impl_trait_ref (497,277 samples, 0.52%)</title><rect x="13.2816%" y="85" width="0.5172%" height="15" fill="rgb(210,31,41)"/><text x="13.5316%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (431,667 samples, 0.45%)</title><rect x="13.3498%" y="69" width="0.4489%" height="15" fill="rgb(221,200,47)"/><text x="13.5998%" y="79.50"></text></g><g><title>resolve_instance (1,450,786 samples, 1.51%)</title><rect x="12.3787%" y="117" width="1.5088%" height="15" fill="rgb(226,26,5)"/><text x="12.6287%" y="127.50"></text></g><g><title>thir_body (496,828 samples, 0.52%)</title><rect x="13.9026%" y="117" width="0.5167%" height="15" fill="rgb(249,33,26)"/><text x="14.1526%" y="127.50"></text></g><g><title>mir_const (6,182,537 samples, 6.43%)</title><rect x="8.0520%" y="165" width="6.4297%" height="15" fill="rgb(235,183,28)"/><text x="8.3020%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (5,491,758 samples, 5.71%)</title><rect x="8.7704%" y="149" width="5.7113%" height="15" fill="rgb(221,5,38)"/><text x="9.0204%" y="159.50">unsafet..</text></g><g><title>mir_built (4,930,203 samples, 5.13%)</title><rect x="9.3544%" y="133" width="5.1273%" height="15" fill="rgb(247,18,42)"/><text x="9.6044%" y="143.50">mir_bu..</text></g><g><title>mir_promoted (6,643,282 samples, 6.91%)</title><rect x="7.5942%" y="181" width="6.9089%" height="15" fill="rgb(241,131,45)"/><text x="7.8442%" y="191.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (188,883 samples, 0.20%)</title><rect x="14.5031%" y="181" width="0.1964%" height="15" fill="rgb(249,31,29)"/><text x="14.7531%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (339,055 samples, 0.35%)</title><rect x="14.6995%" y="181" width="0.3526%" height="15" fill="rgb(225,111,53)"/><text x="14.9495%" y="191.50"></text></g><g><title>normalize_projection_ty (164,333 samples, 0.17%)</title><rect x="14.8813%" y="165" width="0.1709%" height="15" fill="rgb(238,160,17)"/><text x="15.1313%" y="175.50"></text></g><g><title>type_op_normalize_predicate (140,391 samples, 0.15%)</title><rect x="15.0522%" y="181" width="0.1460%" height="15" fill="rgb(214,148,48)"/><text x="15.3022%" y="191.50"></text></g><g><title>type_op_normalize_ty (96,870 samples, 0.10%)</title><rect x="15.1982%" y="181" width="0.1007%" height="15" fill="rgb(232,36,49)"/><text x="15.4482%" y="191.50"></text></g><g><title>type_op_prove_predicate (2,380,982 samples, 2.48%)</title><rect x="15.2989%" y="181" width="2.4762%" height="15" fill="rgb(209,103,24)"/><text x="15.5489%" y="191.50">ty..</text></g><g><title>MIR_borrow_checking (16,470,933 samples, 17.13%)</title><rect x="0.6502%" y="213" width="17.1295%" height="15" fill="rgb(229,88,8)"/><text x="0.9002%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,423,182 samples, 17.08%)</title><rect x="0.6999%" y="197" width="17.0798%" height="15" fill="rgb(213,181,19)"/><text x="0.9499%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (102,661 samples, 0.11%)</title><rect x="17.7943%" y="213" width="0.1068%" height="15" fill="rgb(254,191,54)"/><text x="18.0443%" y="223.50"></text></g><g><title>codegen_fn_attrs (175,131 samples, 0.18%)</title><rect x="18.1186%" y="149" width="0.1821%" height="15" fill="rgb(241,83,37)"/><text x="18.3686%" y="159.50"></text></g><g><title>codegen_fn_attrs (271,954 samples, 0.28%)</title><rect x="18.0208%" y="181" width="0.2828%" height="15" fill="rgb(233,36,39)"/><text x="18.2708%" y="191.50"></text></g><g><title>should_inherit_track_caller (238,424 samples, 0.25%)</title><rect x="18.0556%" y="165" width="0.2480%" height="15" fill="rgb(226,3,54)"/><text x="18.3056%" y="175.50"></text></g><g><title>check_mod_attrs (374,364 samples, 0.39%)</title><rect x="17.9145%" y="197" width="0.3893%" height="15" fill="rgb(245,192,40)"/><text x="18.1645%" y="207.50"></text></g><g><title>lookup_deprecation_entry (97,881 samples, 0.10%)</title><rect x="18.5931%" y="181" width="0.1018%" height="15" fill="rgb(238,167,29)"/><text x="18.8431%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (361,054 samples, 0.38%)</title><rect x="18.4039%" y="197" width="0.3755%" height="15" fill="rgb(232,182,51)"/><text x="18.6539%" y="207.50"></text></g><g><title>misc_checking_1 (893,320 samples, 0.93%)</title><rect x="17.9015%" y="213" width="0.9290%" height="15" fill="rgb(231,60,39)"/><text x="18.1515%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (348,804 samples, 0.36%)</title><rect x="18.8325%" y="197" width="0.3627%" height="15" fill="rgb(208,69,12)"/><text x="19.0825%" y="207.50"></text></g><g><title>check_mod_liveness (301,713 samples, 0.31%)</title><rect x="18.8815%" y="181" width="0.3138%" height="15" fill="rgb(235,93,37)"/><text x="19.1315%" y="191.50"></text></g><g><title>type_uninhabited_from (140,351 samples, 0.15%)</title><rect x="19.0493%" y="165" width="0.1460%" height="15" fill="rgb(213,116,39)"/><text x="19.2993%" y="175.50"></text></g><g><title>misc_checking_2 (641,047 samples, 0.67%)</title><rect x="18.8305%" y="213" width="0.6667%" height="15" fill="rgb(222,207,29)"/><text x="19.0805%" y="223.50"></text></g><g><title>match_checking (290,303 samples, 0.30%)</title><rect x="19.1953%" y="197" width="0.3019%" height="15" fill="rgb(206,96,30)"/><text x="19.4453%" y="207.50"></text></g><g><title>check_match (276,253 samples, 0.29%)</title><rect x="19.2099%" y="181" width="0.2873%" height="15" fill="rgb(218,138,4)"/><text x="19.4599%" y="191.50"></text></g><g><title>check_private_in_public (123,411 samples, 0.13%)</title><rect x="19.5089%" y="197" width="0.1283%" height="15" fill="rgb(250,191,14)"/><text x="19.7589%" y="207.50"></text></g><g><title>death_checking (236,553 samples, 0.25%)</title><rect x="19.6373%" y="197" width="0.2460%" height="15" fill="rgb(239,60,40)"/><text x="19.8873%" y="207.50"></text></g><g><title>param_env (172,871 samples, 0.18%)</title><rect x="20.5263%" y="165" width="0.1798%" height="15" fill="rgb(206,27,48)"/><text x="20.7763%" y="175.50"></text></g><g><title>resolve_instance (112,312 samples, 0.12%)</title><rect x="20.7061%" y="165" width="0.1168%" height="15" fill="rgb(225,35,8)"/><text x="20.9561%" y="175.50"></text></g><g><title>crate_lints (2,021,273 samples, 2.10%)</title><rect x="19.8847%" y="181" width="2.1021%" height="15" fill="rgb(250,213,24)"/><text x="20.1347%" y="191.50">c..</text></g><g><title>type_of (1,113,099 samples, 1.16%)</title><rect x="20.8292%" y="165" width="1.1576%" height="15" fill="rgb(247,123,22)"/><text x="21.0792%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (850,396 samples, 0.88%)</title><rect x="21.1024%" y="149" width="0.8844%" height="15" fill="rgb(231,138,38)"/><text x="21.3524%" y="159.50"></text></g><g><title>layout_of (149,912 samples, 0.16%)</title><rect x="22.3039%" y="53" width="0.1559%" height="15" fill="rgb(231,145,46)"/><text x="22.5539%" y="63.50"></text></g><g><title>layout_of (126,011 samples, 0.13%)</title><rect x="22.3287%" y="37" width="0.1310%" height="15" fill="rgb(251,118,11)"/><text x="22.5787%" y="47.50"></text></g><g><title>lint_checking (2,484,048 samples, 2.58%)</title><rect x="19.8833%" y="197" width="2.5834%" height="15" fill="rgb(217,147,25)"/><text x="20.1333%" y="207.50">li..</text></g><g><title>module_lints (461,415 samples, 0.48%)</title><rect x="21.9868%" y="181" width="0.4799%" height="15" fill="rgb(247,81,37)"/><text x="22.2368%" y="191.50"></text></g><g><title>lint_mod (458,825 samples, 0.48%)</title><rect x="21.9895%" y="165" width="0.4772%" height="15" fill="rgb(209,12,38)"/><text x="22.2395%" y="175.50"></text></g><g><title>layout_of (230,182 samples, 0.24%)</title><rect x="22.2273%" y="149" width="0.2394%" height="15" fill="rgb(227,1,9)"/><text x="22.4773%" y="159.50"></text></g><g><title>layout_of (215,972 samples, 0.22%)</title><rect x="22.2421%" y="133" width="0.2246%" height="15" fill="rgb(248,47,43)"/><text x="22.4921%" y="143.50"></text></g><g><title>layout_of (211,512 samples, 0.22%)</title><rect x="22.2467%" y="117" width="0.2200%" height="15" fill="rgb(221,10,30)"/><text x="22.4967%" y="127.50"></text></g><g><title>layout_of (201,822 samples, 0.21%)</title><rect x="22.2568%" y="101" width="0.2099%" height="15" fill="rgb(210,229,1)"/><text x="22.5068%" y="111.50"></text></g><g><title>layout_of (191,392 samples, 0.20%)</title><rect x="22.2676%" y="85" width="0.1990%" height="15" fill="rgb(222,148,37)"/><text x="22.5176%" y="95.50"></text></g><g><title>layout_of (166,502 samples, 0.17%)</title><rect x="22.2935%" y="69" width="0.1732%" height="15" fill="rgb(234,67,33)"/><text x="22.5435%" y="79.50"></text></g><g><title>privacy_access_levels (134,111 samples, 0.14%)</title><rect x="22.4667%" y="197" width="0.1395%" height="15" fill="rgb(247,98,35)"/><text x="22.7167%" y="207.50"></text></g><g><title>privacy_checking_modules (735,578 samples, 0.76%)</title><rect x="22.6061%" y="197" width="0.7650%" height="15" fill="rgb(247,138,52)"/><text x="22.8561%" y="207.50"></text></g><g><title>check_mod_privacy (733,378 samples, 0.76%)</title><rect x="22.6084%" y="181" width="0.7627%" height="15" fill="rgb(213,79,30)"/><text x="22.8584%" y="191.50"></text></g><g><title>misc_checking_3 (3,735,791 samples, 3.89%)</title><rect x="19.4972%" y="213" width="3.8852%" height="15" fill="rgb(246,177,23)"/><text x="19.7472%" y="223.50">misc..</text></g><g><title>impl_parent (3,032,212 samples, 3.15%)</title><rect x="28.9661%" y="149" width="3.1534%" height="15" fill="rgb(230,62,27)"/><text x="29.2161%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,702,273 samples, 1.77%)</title><rect x="30.3492%" y="133" width="1.7703%" height="15" fill="rgb(216,154,8)"/><text x="30.5992%" y="143.50">m..</text></g><g><title>impl_trait_ref (8,601,525 samples, 8.95%)</title><rect x="32.1195%" y="149" width="8.9454%" height="15" fill="rgb(244,35,45)"/><text x="32.3695%" y="159.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,282,829 samples, 7.57%)</title><rect x="33.4909%" y="133" width="7.5740%" height="15" fill="rgb(251,115,12)"/><text x="33.7409%" y="143.50">metadata_d..</text></g><g><title>coherent_trait (17,765,958 samples, 18.48%)</title><rect x="23.4733%" y="181" width="18.4763%" height="15" fill="rgb(240,54,50)"/><text x="23.7233%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (17,745,217 samples, 18.45%)</title><rect x="23.4949%" y="165" width="18.4547%" height="15" fill="rgb(233,84,52)"/><text x="23.7449%" y="175.50">specialization_graph_of</text></g><g><title>trait_impls_of (847,038 samples, 0.88%)</title><rect x="41.0687%" y="149" width="0.8809%" height="15" fill="rgb(207,117,47)"/><text x="41.3187%" y="159.50"></text></g><g><title>implementations_of_trait (191,470 samples, 0.20%)</title><rect x="41.7504%" y="133" width="0.1991%" height="15" fill="rgb(249,43,39)"/><text x="42.0004%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (146,240 samples, 0.15%)</title><rect x="41.7975%" y="117" width="0.1521%" height="15" fill="rgb(209,38,44)"/><text x="42.0475%" y="127.50"></text></g><g><title>coherence_checking (17,847,329 samples, 18.56%)</title><rect x="23.4357%" y="197" width="18.5609%" height="15" fill="rgb(236,212,23)"/><text x="23.6857%" y="207.50">coherence_checking</text></g><g><title>adt_sized_constraint (100,903 samples, 0.10%)</title><rect x="51.7318%" y="149" width="0.1049%" height="15" fill="rgb(242,79,21)"/><text x="51.9818%" y="159.50"></text></g><g><title>associated_item (203,493 samples, 0.21%)</title><rect x="51.9438%" y="133" width="0.2116%" height="15" fill="rgb(211,96,35)"/><text x="52.1938%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (160,753 samples, 0.17%)</title><rect x="51.9883%" y="117" width="0.1672%" height="15" fill="rgb(253,215,40)"/><text x="52.2383%" y="127.50"></text></g><g><title>associated_items (324,513 samples, 0.34%)</title><rect x="51.8416%" y="149" width="0.3375%" height="15" fill="rgb(211,81,21)"/><text x="52.0916%" y="159.50"></text></g><g><title>adt_def (319,054 samples, 0.33%)</title><rect x="53.0144%" y="117" width="0.3318%" height="15" fill="rgb(208,190,38)"/><text x="53.2644%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (312,404 samples, 0.32%)</title><rect x="53.0213%" y="101" width="0.3249%" height="15" fill="rgb(235,213,38)"/><text x="53.2713%" y="111.50"></text></g><g><title>item_attrs (191,634 samples, 0.20%)</title><rect x="53.1469%" y="85" width="0.1993%" height="15" fill="rgb(237,122,38)"/><text x="53.3969%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (184,034 samples, 0.19%)</title><rect x="53.1548%" y="69" width="0.1914%" height="15" fill="rgb(244,218,35)"/><text x="53.4048%" y="79.50"></text></g><g><title>adt_def (566,505 samples, 0.59%)</title><rect x="53.5001%" y="101" width="0.5892%" height="15" fill="rgb(240,68,47)"/><text x="53.7501%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (562,575 samples, 0.59%)</title><rect x="53.5042%" y="85" width="0.5851%" height="15" fill="rgb(210,16,53)"/><text x="53.7542%" y="95.50"></text></g><g><title>item_attrs (520,255 samples, 0.54%)</title><rect x="53.5482%" y="69" width="0.5411%" height="15" fill="rgb(235,124,12)"/><text x="53.7982%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (516,255 samples, 0.54%)</title><rect x="53.5524%" y="53" width="0.5369%" height="15" fill="rgb(224,169,11)"/><text x="53.8024%" y="63.50"></text></g><g><title>adt_def (135,980 samples, 0.14%)</title><rect x="54.1780%" y="85" width="0.1414%" height="15" fill="rgb(250,166,2)"/><text x="54.4280%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (132,290 samples, 0.14%)</title><rect x="54.1819%" y="69" width="0.1376%" height="15" fill="rgb(242,216,29)"/><text x="54.4319%" y="79.50"></text></g><g><title>adt_dtorck_constraint (174,682 samples, 0.18%)</title><rect x="54.3602%" y="85" width="0.1817%" height="15" fill="rgb(230,116,27)"/><text x="54.6102%" y="95.50"></text></g><g><title>adt_dtorck_constraint (436,404 samples, 0.45%)</title><rect x="54.1272%" y="101" width="0.4539%" height="15" fill="rgb(228,99,48)"/><text x="54.3772%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,184,000 samples, 1.23%)</title><rect x="53.4216%" y="117" width="1.2313%" height="15" fill="rgb(253,11,6)"/><text x="53.6716%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,864,028 samples, 1.94%)</title><rect x="52.8594%" y="133" width="1.9386%" height="15" fill="rgb(247,143,39)"/><text x="53.1094%" y="143.50">a..</text></g><g><title>dropck_outlives (2,553,336 samples, 2.66%)</title><rect x="52.2275%" y="149" width="2.6554%" height="15" fill="rgb(236,97,10)"/><text x="52.4775%" y="159.50">dr..</text></g><g><title>predicates_of (130,261 samples, 0.14%)</title><rect x="56.2418%" y="133" width="0.1355%" height="15" fill="rgb(233,208,19)"/><text x="56.4918%" y="143.50"></text></g><g><title>trait_impls_of (213,344 samples, 0.22%)</title><rect x="56.3845%" y="133" width="0.2219%" height="15" fill="rgb(216,164,2)"/><text x="56.6345%" y="143.50"></text></g><g><title>evaluate_obligation (1,678,121 samples, 1.75%)</title><rect x="54.8830%" y="149" width="1.7452%" height="15" fill="rgb(220,129,5)"/><text x="55.1330%" y="159.50"></text></g><g><title>fn_sig (110,901 samples, 0.12%)</title><rect x="56.6542%" y="149" width="0.1153%" height="15" fill="rgb(242,17,10)"/><text x="56.9042%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (97,900 samples, 0.10%)</title><rect x="56.6677%" y="133" width="0.1018%" height="15" fill="rgb(242,107,0)"/><text x="56.9177%" y="143.50"></text></g><g><title>item_attrs (161,160 samples, 0.17%)</title><rect x="57.0295%" y="149" width="0.1676%" height="15" fill="rgb(251,28,31)"/><text x="57.2795%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (153,540 samples, 0.16%)</title><rect x="57.0374%" y="133" width="0.1597%" height="15" fill="rgb(233,223,10)"/><text x="57.2874%" y="143.50"></text></g><g><title>evaluate_obligation (350,152 samples, 0.36%)</title><rect x="57.5940%" y="133" width="0.3642%" height="15" fill="rgb(215,21,27)"/><text x="57.8440%" y="143.50"></text></g><g><title>method_autoderef_steps (691,996 samples, 0.72%)</title><rect x="57.2551%" y="149" width="0.7197%" height="15" fill="rgb(232,23,21)"/><text x="57.5051%" y="159.50"></text></g><g><title>object_safety_violations (193,872 samples, 0.20%)</title><rect x="57.9748%" y="149" width="0.2016%" height="15" fill="rgb(244,5,23)"/><text x="58.2248%" y="159.50"></text></g><g><title>explicit_predicates_of (102,800 samples, 0.11%)</title><rect x="58.4114%" y="117" width="0.1069%" height="15" fill="rgb(226,81,46)"/><text x="58.6614%" y="127.50"></text></g><g><title>predicates_of (341,711 samples, 0.36%)</title><rect x="58.2145%" y="149" width="0.3554%" height="15" fill="rgb(247,70,30)"/><text x="58.4645%" y="159.50"></text></g><g><title>predicates_defined_on (235,760 samples, 0.25%)</title><rect x="58.3247%" y="133" width="0.2452%" height="15" fill="rgb(212,68,19)"/><text x="58.5747%" y="143.50"></text></g><g><title>associated_item (108,841 samples, 0.11%)</title><rect x="62.2581%" y="117" width="0.1132%" height="15" fill="rgb(240,187,13)"/><text x="62.5081%" y="127.50"></text></g><g><title>associated_items (173,561 samples, 0.18%)</title><rect x="62.2035%" y="133" width="0.1805%" height="15" fill="rgb(223,113,26)"/><text x="62.4535%" y="143.50"></text></g><g><title>dropck_outlives (267,784 samples, 0.28%)</title><rect x="62.4211%" y="133" width="0.2785%" height="15" fill="rgb(206,192,2)"/><text x="62.6711%" y="143.50"></text></g><g><title>evaluate_obligation (806,278 samples, 0.84%)</title><rect x="62.6996%" y="133" width="0.8385%" height="15" fill="rgb(241,108,4)"/><text x="62.9496%" y="143.50"></text></g><g><title>trait_impls_of (282,033 samples, 0.29%)</title><rect x="63.2448%" y="117" width="0.2933%" height="15" fill="rgb(247,173,49)"/><text x="63.4948%" y="127.50"></text></g><g><title>method_autoderef_steps (137,593 samples, 0.14%)</title><rect x="63.7609%" y="133" width="0.1431%" height="15" fill="rgb(224,114,35)"/><text x="64.0109%" y="143.50"></text></g><g><title>predicates_of (120,322 samples, 0.13%)</title><rect x="63.9091%" y="133" width="0.1251%" height="15" fill="rgb(245,159,27)"/><text x="64.1591%" y="143.50"></text></g><g><title>typeck (5,167,908 samples, 5.37%)</title><rect x="58.7100%" y="149" width="5.3745%" height="15" fill="rgb(245,172,44)"/><text x="58.9600%" y="159.50">typeck</text></g><g><title>item_bodies_checking (21,255,646 samples, 22.11%)</title><rect x="42.0204%" y="197" width="22.1055%" height="15" fill="rgb(236,23,11)"/><text x="42.2704%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,252,296 samples, 22.10%)</title><rect x="42.0239%" y="181" width="22.1020%" height="15" fill="rgb(205,117,38)"/><text x="42.2739%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (21,214,126 samples, 22.06%)</title><rect x="42.0636%" y="165" width="22.0623%" height="15" fill="rgb(237,72,25)"/><text x="42.3136%" y="175.50">typeck</text></g><g><title>item_types_checking (1,574,128 samples, 1.64%)</title><rect x="64.1259%" y="197" width="1.6371%" height="15" fill="rgb(244,70,9)"/><text x="64.3759%" y="207.50"></text></g><g><title>check_mod_item_types (1,569,528 samples, 1.63%)</title><rect x="64.1307%" y="181" width="1.6323%" height="15" fill="rgb(217,125,39)"/><text x="64.3807%" y="191.50"></text></g><g><title>fn_sig (426,785 samples, 0.44%)</title><rect x="65.9368%" y="165" width="0.4438%" height="15" fill="rgb(235,36,10)"/><text x="66.1868%" y="175.50"></text></g><g><title>generics_of (139,870 samples, 0.15%)</title><rect x="66.3807%" y="165" width="0.1455%" height="15" fill="rgb(251,123,47)"/><text x="66.6307%" y="175.50"></text></g><g><title>late_bound_vars_map (105,841 samples, 0.11%)</title><rect x="66.8034%" y="117" width="0.1101%" height="15" fill="rgb(221,13,13)"/><text x="67.0534%" y="127.50"></text></g><g><title>resolve_lifetimes (102,221 samples, 0.11%)</title><rect x="66.8072%" y="101" width="0.1063%" height="15" fill="rgb(238,131,9)"/><text x="67.0572%" y="111.50"></text></g><g><title>explicit_predicates_of (328,382 samples, 0.34%)</title><rect x="66.6288%" y="133" width="0.3415%" height="15" fill="rgb(211,50,8)"/><text x="66.8788%" y="143.50"></text></g><g><title>predicates_of (101,373 samples, 0.11%)</title><rect x="67.0662%" y="101" width="0.1054%" height="15" fill="rgb(245,182,24)"/><text x="67.3162%" y="111.50"></text></g><g><title>type_of (115,551 samples, 0.12%)</title><rect x="67.8484%" y="85" width="0.1202%" height="15" fill="rgb(242,14,37)"/><text x="68.0984%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (105,031 samples, 0.11%)</title><rect x="67.8593%" y="69" width="0.1092%" height="15" fill="rgb(246,228,12)"/><text x="68.1093%" y="79.50"></text></g><g><title>predicates_of (1,367,454 samples, 1.42%)</title><rect x="66.5469%" y="165" width="1.4221%" height="15" fill="rgb(213,55,15)"/><text x="66.7969%" y="175.50"></text></g><g><title>predicates_defined_on (1,338,503 samples, 1.39%)</title><rect x="66.5770%" y="149" width="1.3920%" height="15" fill="rgb(209,9,3)"/><text x="66.8270%" y="159.50"></text></g><g><title>inferred_outlives_of (960,321 samples, 1.00%)</title><rect x="66.9703%" y="133" width="0.9987%" height="15" fill="rgb(230,59,30)"/><text x="67.2203%" y="143.50"></text></g><g><title>inferred_outlives_crate (944,071 samples, 0.98%)</title><rect x="66.9872%" y="117" width="0.9818%" height="15" fill="rgb(209,121,21)"/><text x="67.2372%" y="127.50"></text></g><g><title>type_of (766,738 samples, 0.80%)</title><rect x="67.1716%" y="101" width="0.7974%" height="15" fill="rgb(220,109,13)"/><text x="67.4216%" y="111.50"></text></g><g><title>type_collecting (2,282,675 samples, 2.37%)</title><rect x="65.7656%" y="197" width="2.3739%" height="15" fill="rgb(232,18,1)"/><text x="66.0156%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (2,275,875 samples, 2.37%)</title><rect x="65.7726%" y="181" width="2.3669%" height="15" fill="rgb(215,41,42)"/><text x="66.0226%" y="191.50">co..</text></g><g><title>type_of (132,134 samples, 0.14%)</title><rect x="68.0021%" y="165" width="0.1374%" height="15" fill="rgb(224,123,36)"/><text x="68.2521%" y="175.50"></text></g><g><title>evaluate_obligation (778,972 samples, 0.81%)</title><rect x="71.1376%" y="165" width="0.8101%" height="15" fill="rgb(240,125,3)"/><text x="71.3876%" y="175.50"></text></g><g><title>implied_outlives_bounds (548,793 samples, 0.57%)</title><rect x="71.9777%" y="165" width="0.5707%" height="15" fill="rgb(205,98,50)"/><text x="72.2277%" y="175.50"></text></g><g><title>param_env (612,746 samples, 0.64%)</title><rect x="72.5967%" y="165" width="0.6372%" height="15" fill="rgb(205,185,37)"/><text x="72.8467%" y="175.50"></text></g><g><title>predicates_of (151,731 samples, 0.16%)</title><rect x="73.2339%" y="165" width="0.1578%" height="15" fill="rgb(238,207,15)"/><text x="73.4839%" y="175.50"></text></g><g><title>predicates_defined_on (99,811 samples, 0.10%)</title><rect x="73.2879%" y="149" width="0.1038%" height="15" fill="rgb(213,199,42)"/><text x="73.5379%" y="159.50"></text></g><g><title>region_scope_tree (402,955 samples, 0.42%)</title><rect x="73.3917%" y="165" width="0.4191%" height="15" fill="rgb(235,201,11)"/><text x="73.6417%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,490,002 samples, 5.71%)</title><rect x="68.3788%" y="181" width="5.7095%" height="15" fill="rgb(207,46,11)"/><text x="68.6288%" y="191.50">check_i..</text></g><g><title>trait_impls_of (263,643 samples, 0.27%)</title><rect x="73.8141%" y="165" width="0.2742%" height="15" fill="rgb(241,35,35)"/><text x="74.0641%" y="175.50"></text></g><g><title>implementations_of_trait (107,101 samples, 0.11%)</title><rect x="73.9769%" y="149" width="0.1114%" height="15" fill="rgb(243,32,47)"/><text x="74.2269%" y="159.50"></text></g><g><title>adt_sized_constraint (100,151 samples, 0.10%)</title><rect x="75.9508%" y="165" width="0.1042%" height="15" fill="rgb(247,202,23)"/><text x="76.2008%" y="175.50"></text></g><g><title>adt_def (503,595 samples, 0.52%)</title><rect x="77.4025%" y="133" width="0.5237%" height="15" fill="rgb(219,102,11)"/><text x="77.6525%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (496,344 samples, 0.52%)</title><rect x="77.4101%" y="117" width="0.5162%" height="15" fill="rgb(243,110,44)"/><text x="77.6601%" y="127.50"></text></g><g><title>item_attrs (420,334 samples, 0.44%)</title><rect x="77.4891%" y="101" width="0.4371%" height="15" fill="rgb(222,74,54)"/><text x="77.7391%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (412,474 samples, 0.43%)</title><rect x="77.4973%" y="85" width="0.4290%" height="15" fill="rgb(216,99,12)"/><text x="77.7473%" y="95.50"></text></g><g><title>adt_def (313,172 samples, 0.33%)</title><rect x="77.9429%" y="117" width="0.3257%" height="15" fill="rgb(226,22,26)"/><text x="78.1929%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (310,222 samples, 0.32%)</title><rect x="77.9460%" y="101" width="0.3226%" height="15" fill="rgb(217,163,10)"/><text x="78.1960%" y="111.50"></text></g><g><title>item_attrs (274,131 samples, 0.29%)</title><rect x="77.9835%" y="85" width="0.2851%" height="15" fill="rgb(213,25,53)"/><text x="78.2335%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (270,431 samples, 0.28%)</title><rect x="77.9874%" y="69" width="0.2812%" height="15" fill="rgb(252,105,26)"/><text x="78.2374%" y="79.50"></text></g><g><title>adt_sized_constraint (356,052 samples, 0.37%)</title><rect x="77.9263%" y="133" width="0.3703%" height="15" fill="rgb(220,39,43)"/><text x="78.1763%" y="143.50"></text></g><g><title>adt_sized_constraint (941,969 samples, 0.98%)</title><rect x="77.3585%" y="149" width="0.9796%" height="15" fill="rgb(229,68,48)"/><text x="77.6085%" y="159.50"></text></g><g><title>explicit_predicates_of (297,593 samples, 0.31%)</title><rect x="78.5179%" y="117" width="0.3095%" height="15" fill="rgb(252,8,32)"/><text x="78.7679%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (288,433 samples, 0.30%)</title><rect x="78.5275%" y="101" width="0.3000%" height="15" fill="rgb(223,20,43)"/><text x="78.7775%" y="111.50"></text></g><g><title>predicates_of (387,843 samples, 0.40%)</title><rect x="78.4470%" y="149" width="0.4033%" height="15" fill="rgb(229,81,49)"/><text x="78.6970%" y="159.50"></text></g><g><title>predicates_defined_on (344,863 samples, 0.36%)</title><rect x="78.4917%" y="133" width="0.3587%" height="15" fill="rgb(236,28,36)"/><text x="78.7417%" y="143.50"></text></g><g><title>evaluate_obligation (2,809,920 samples, 2.92%)</title><rect x="76.0591%" y="165" width="2.9223%" height="15" fill="rgb(249,185,26)"/><text x="76.3091%" y="175.50">ev..</text></g><g><title>implied_outlives_bounds (106,410 samples, 0.11%)</title><rect x="78.9962%" y="165" width="0.1107%" height="15" fill="rgb(249,174,33)"/><text x="79.2462%" y="175.50"></text></g><g><title>evaluate_obligation (352,164 samples, 0.37%)</title><rect x="79.3955%" y="149" width="0.3662%" height="15" fill="rgb(233,201,37)"/><text x="79.6455%" y="159.50"></text></g><g><title>layout_of (104,621 samples, 0.11%)</title><rect x="79.8940%" y="133" width="0.1088%" height="15" fill="rgb(221,78,26)"/><text x="80.1440%" y="143.50"></text></g><g><title>layout_of (333,403 samples, 0.35%)</title><rect x="79.8196%" y="149" width="0.3467%" height="15" fill="rgb(250,127,30)"/><text x="80.0696%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (152,142 samples, 0.16%)</title><rect x="80.0082%" y="133" width="0.1582%" height="15" fill="rgb(230,49,44)"/><text x="80.2582%" y="143.50"></text></g><g><title>normalize_projection_ty (109,121 samples, 0.11%)</title><rect x="80.0529%" y="117" width="0.1135%" height="15" fill="rgb(229,67,23)"/><text x="80.3029%" y="127.50"></text></g><g><title>object_safety_violations (1,157,063 samples, 1.20%)</title><rect x="79.1069%" y="165" width="1.2033%" height="15" fill="rgb(249,83,47)"/><text x="79.3569%" y="175.50"></text></g><g><title>param_env (410,933 samples, 0.43%)</title><rect x="80.3102%" y="165" width="0.4274%" height="15" fill="rgb(215,43,3)"/><text x="80.5602%" y="175.50"></text></g><g><title>trait_impls_of (141,910 samples, 0.15%)</title><rect x="80.8672%" y="165" width="0.1476%" height="15" fill="rgb(238,154,13)"/><text x="81.1172%" y="175.50"></text></g><g><title>analysis (77,572,144 samples, 80.67%)</title><rect x="0.4697%" y="229" width="80.6736%" height="15" fill="rgb(219,56,2)"/><text x="0.7197%" y="239.50">analysis</text></g><g><title>type_check_crate (55,540,349 samples, 57.76%)</title><rect x="23.3824%" y="213" width="57.7610%" height="15" fill="rgb(233,0,4)"/><text x="23.6324%" y="223.50">type_check_crate</text></g><g><title>wf_checking (12,501,289 samples, 13.00%)</title><rect x="68.1422%" y="197" width="13.0011%" height="15" fill="rgb(235,30,7)"/><text x="68.3922%" y="207.50">wf_checking</text></g><g><title>check_item_well_formed (6,783,785 samples, 7.06%)</title><rect x="74.0883%" y="181" width="7.0550%" height="15" fill="rgb(250,79,13)"/><text x="74.3383%" y="191.50">check_ite..</text></g><g><title>variances_of (123,642 samples, 0.13%)</title><rect x="81.0147%" y="165" width="0.1286%" height="15" fill="rgb(211,146,34)"/><text x="81.2647%" y="175.50"></text></g><g><title>crate_variances (115,032 samples, 0.12%)</title><rect x="81.0237%" y="149" width="0.1196%" height="15" fill="rgb(228,22,38)"/><text x="81.2737%" y="159.50"></text></g><g><title>codegen_crate (385,215 samples, 0.40%)</title><rect x="81.1503%" y="229" width="0.4006%" height="15" fill="rgb(235,168,5)"/><text x="81.4003%" y="239.50"></text></g><g><title>metadata_load_macro (165,762 samples, 0.17%)</title><rect x="87.8408%" y="181" width="0.1724%" height="15" fill="rgb(221,155,16)"/><text x="88.0908%" y="191.50"></text></g><g><title>macro_expand_crate (7,292,581 samples, 7.58%)</title><rect x="81.8537%" y="213" width="7.5842%" height="15" fill="rgb(215,215,53)"/><text x="82.1037%" y="223.50">macro_expa..</text></g><g><title>expand_crate (7,283,241 samples, 7.57%)</title><rect x="81.8634%" y="197" width="7.5744%" height="15" fill="rgb(223,4,10)"/><text x="82.1134%" y="207.50">expand_cra..</text></g><g><title>metadata_register_crate (1,369,856 samples, 1.42%)</title><rect x="88.0132%" y="181" width="1.4246%" height="15" fill="rgb(234,103,6)"/><text x="88.2632%" y="191.50"></text></g><g><title>metadata_register_crate (477,765 samples, 0.50%)</title><rect x="88.9409%" y="165" width="0.4969%" height="15" fill="rgb(227,97,0)"/><text x="89.1909%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (123,131 samples, 0.13%)</title><rect x="89.4411%" y="213" width="0.1281%" height="15" fill="rgb(234,150,53)"/><text x="89.6911%" y="223.50"></text></g><g><title>late_resolve_crate (1,331,085 samples, 1.38%)</title><rect x="89.6327%" y="197" width="1.3843%" height="15" fill="rgb(228,201,54)"/><text x="89.8827%" y="207.50"></text></g><g><title>configure_and_expand (9,157,302 samples, 9.52%)</title><rect x="81.5510%" y="229" width="9.5234%" height="15" fill="rgb(222,22,37)"/><text x="81.8010%" y="239.50">configure_and_..</text></g><g><title>resolve_crate (1,447,376 samples, 1.51%)</title><rect x="89.5691%" y="213" width="1.5052%" height="15" fill="rgb(237,53,32)"/><text x="89.8191%" y="223.50"></text></g><g><title>early_lint_checks (171,442 samples, 0.18%)</title><rect x="91.1800%" y="229" width="0.1783%" height="15" fill="rgb(233,25,53)"/><text x="91.4300%" y="239.50"></text></g><g><title>free_global_ctxt (3,277,566 samples, 3.41%)</title><rect x="91.3583%" y="229" width="3.4086%" height="15" fill="rgb(210,40,34)"/><text x="91.6083%" y="239.50">fre..</text></g><g><title>generate_crate_metadata (750,839 samples, 0.78%)</title><rect x="94.7669%" y="229" width="0.7809%" height="15" fill="rgb(241,220,44)"/><text x="95.0169%" y="239.50"></text></g><g><title>hir_lowering (1,412,836 samples, 1.47%)</title><rect x="95.5478%" y="229" width="1.4693%" height="15" fill="rgb(235,28,35)"/><text x="95.7978%" y="239.50"></text></g><g><title>parse_crate (1,491,567 samples, 1.55%)</title><rect x="97.0714%" y="229" width="1.5512%" height="15" fill="rgb(210,56,17)"/><text x="97.3214%" y="239.50"></text></g><g><title>prepare_outputs (194,832 samples, 0.20%)</title><rect x="98.6284%" y="229" width="0.2026%" height="15" fill="rgb(224,130,29)"/><text x="98.8784%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (724,568 samples, 0.75%)</title><rect x="98.8311%" y="229" width="0.7535%" height="15" fill="rgb(235,212,8)"/><text x="99.0811%" y="239.50"></text></g><g><title>all (96,155,502 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(223,33,50)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (96,155,502 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (305,103 samples, 0.32%)</title><rect x="99.6827%" y="229" width="0.3173%" height="15" fill="rgb(250,156,29)"/><text x="99.9327%" y="239.50"></text></g></svg></svg>