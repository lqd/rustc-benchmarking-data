<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>adt_drop_tys (1,152,014 samples, 0.12%)</title><rect x="17.7908%" y="53" width="0.1178%" height="15" fill="rgb(227,0,7)"/><text x="18.0408%" y="63.50"></text></g><g><title>is_copy_raw (1,255,992 samples, 0.13%)</title><rect x="17.9086%" y="53" width="0.1284%" height="15" fill="rgb(217,0,24)"/><text x="18.1586%" y="63.50"></text></g><g><title>needs_drop_raw (3,026,802 samples, 0.31%)</title><rect x="17.7467%" y="69" width="0.3094%" height="15" fill="rgb(221,193,54)"/><text x="17.9967%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,223,907 samples, 0.23%)</title><rect x="18.1178%" y="53" width="0.2273%" height="15" fill="rgb(248,212,6)"/><text x="18.3678%" y="63.50"></text></g><g><title>specialization_graph_of (1,933,163 samples, 0.20%)</title><rect x="18.3655%" y="53" width="0.1976%" height="15" fill="rgb(208,68,35)"/><text x="18.6155%" y="63.50"></text></g><g><title>impl_trait_ref (1,013,580 samples, 0.10%)</title><rect x="18.4595%" y="37" width="0.1036%" height="15" fill="rgb(232,128,0)"/><text x="18.7095%" y="47.50"></text></g><g><title>resolve_instance (5,138,360 samples, 0.53%)</title><rect x="18.0561%" y="69" width="0.5253%" height="15" fill="rgb(207,160,47)"/><text x="18.3061%" y="79.50"></text></g><g><title>thir_body (11,572,148 samples, 1.18%)</title><rect x="18.5923%" y="69" width="1.1830%" height="15" fill="rgb(228,23,34)"/><text x="18.8423%" y="79.50"></text></g><g><title>mir_const (58,800,925 samples, 6.01%)</title><rect x="13.7721%" y="117" width="6.0109%" height="15" fill="rgb(218,30,26)"/><text x="14.0221%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (53,146,086 samples, 5.43%)</title><rect x="14.3501%" y="101" width="5.4329%" height="15" fill="rgb(220,122,19)"/><text x="14.6001%" y="111.50">unsafet..</text></g><g><title>mir_built (49,059,039 samples, 5.02%)</title><rect x="14.7679%" y="85" width="5.0151%" height="15" fill="rgb(250,228,42)"/><text x="15.0179%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (64,632,112 samples, 6.61%)</title><rect x="13.2155%" y="133" width="6.6070%" height="15" fill="rgb(240,193,28)"/><text x="13.4655%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,167,374 samples, 0.12%)</title><rect x="19.8225%" y="133" width="0.1193%" height="15" fill="rgb(216,20,37)"/><text x="20.0725%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,943,385 samples, 0.30%)</title><rect x="19.9418%" y="133" width="0.3009%" height="15" fill="rgb(206,188,39)"/><text x="20.1918%" y="143.50"></text></g><g><title>normalize_projection_ty (2,108,533 samples, 0.22%)</title><rect x="20.0272%" y="117" width="0.2155%" height="15" fill="rgb(217,207,13)"/><text x="20.2772%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,017,872 samples, 0.21%)</title><rect x="20.2427%" y="133" width="0.2063%" height="15" fill="rgb(231,73,38)"/><text x="20.4927%" y="143.50"></text></g><g><title>type_op_prove_predicate (11,752,744 samples, 1.20%)</title><rect x="20.4490%" y="133" width="1.2014%" height="15" fill="rgb(225,20,46)"/><text x="20.6990%" y="143.50"></text></g><g><title>MIR_borrow_checking (207,498,398 samples, 21.21%)</title><rect x="0.4399%" y="165" width="21.2116%" height="15" fill="rgb(210,31,41)"/><text x="0.6899%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (207,196,280 samples, 21.18%)</title><rect x="0.4707%" y="149" width="21.1807%" height="15" fill="rgb(221,200,47)"/><text x="0.7207%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,897,382 samples, 0.19%)</title><rect x="21.7546%" y="149" width="0.1940%" height="15" fill="rgb(226,26,5)"/><text x="22.0046%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,066,172 samples, 0.11%)</title><rect x="22.0292%" y="149" width="0.1090%" height="15" fill="rgb(249,33,26)"/><text x="22.2792%" y="159.50"></text></g><g><title>misc_checking_1 (3,875,694 samples, 0.40%)</title><rect x="21.7509%" y="165" width="0.3962%" height="15" fill="rgb(235,183,28)"/><text x="22.0009%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,749,832 samples, 0.38%)</title><rect x="22.1473%" y="149" width="0.3833%" height="15" fill="rgb(221,5,38)"/><text x="22.3973%" y="159.50"></text></g><g><title>check_mod_liveness (3,026,672 samples, 0.31%)</title><rect x="22.2213%" y="133" width="0.3094%" height="15" fill="rgb(247,18,42)"/><text x="22.4713%" y="143.50"></text></g><g><title>misc_checking_2 (7,102,960 samples, 0.73%)</title><rect x="22.1471%" y="165" width="0.7261%" height="15" fill="rgb(241,131,45)"/><text x="22.3971%" y="175.50"></text></g><g><title>match_checking (3,350,488 samples, 0.34%)</title><rect x="22.5307%" y="149" width="0.3425%" height="15" fill="rgb(249,31,29)"/><text x="22.7807%" y="159.50"></text></g><g><title>check_match (3,283,088 samples, 0.34%)</title><rect x="22.5376%" y="133" width="0.3356%" height="15" fill="rgb(225,111,53)"/><text x="22.7876%" y="143.50"></text></g><g><title>death_checking (1,621,498 samples, 0.17%)</title><rect x="22.9333%" y="149" width="0.1658%" height="15" fill="rgb(238,160,17)"/><text x="23.1833%" y="159.50"></text></g><g><title>crate_lints (4,438,350 samples, 0.45%)</title><rect x="23.0993%" y="133" width="0.4537%" height="15" fill="rgb(214,148,48)"/><text x="23.3493%" y="143.50"></text></g><g><title>lint_checking (9,316,515 samples, 0.95%)</title><rect x="23.0990%" y="149" width="0.9524%" height="15" fill="rgb(232,36,49)"/><text x="23.3490%" y="159.50"></text></g><g><title>module_lints (4,875,425 samples, 0.50%)</title><rect x="23.5530%" y="133" width="0.4984%" height="15" fill="rgb(209,103,24)"/><text x="23.8030%" y="143.50"></text></g><g><title>lint_mod (4,863,615 samples, 0.50%)</title><rect x="23.5542%" y="117" width="0.4972%" height="15" fill="rgb(229,88,8)"/><text x="23.8042%" y="127.50"></text></g><g><title>privacy_checking_modules (6,447,942 samples, 0.66%)</title><rect x="24.1181%" y="149" width="0.6591%" height="15" fill="rgb(213,181,19)"/><text x="24.3681%" y="159.50"></text></g><g><title>check_mod_privacy (6,440,952 samples, 0.66%)</title><rect x="24.1189%" y="133" width="0.6584%" height="15" fill="rgb(254,191,54)"/><text x="24.3689%" y="143.50"></text></g><g><title>misc_checking_3 (18,650,030 samples, 1.91%)</title><rect x="22.8732%" y="165" width="1.9065%" height="15" fill="rgb(241,83,37)"/><text x="23.1232%" y="175.50">m..</text></g><g><title>impl_parent (2,549,263 samples, 0.26%)</title><rect x="25.2373%" y="101" width="0.2606%" height="15" fill="rgb(233,36,39)"/><text x="25.4873%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,458,721 samples, 0.15%)</title><rect x="25.3488%" y="85" width="0.1491%" height="15" fill="rgb(226,3,54)"/><text x="25.5988%" y="95.50"></text></g><g><title>impl_trait_ref (5,845,577 samples, 0.60%)</title><rect x="25.4979%" y="101" width="0.5976%" height="15" fill="rgb(245,192,40)"/><text x="25.7479%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,519,027 samples, 0.46%)</title><rect x="25.6335%" y="85" width="0.4620%" height="15" fill="rgb(238,167,29)"/><text x="25.8835%" y="95.50"></text></g><g><title>coherent_trait (13,716,224 samples, 1.40%)</title><rect x="24.7966%" y="133" width="1.4021%" height="15" fill="rgb(232,182,51)"/><text x="25.0466%" y="143.50"></text></g><g><title>specialization_graph_of (13,196,928 samples, 1.35%)</title><rect x="24.8496%" y="117" width="1.3491%" height="15" fill="rgb(231,60,39)"/><text x="25.0996%" y="127.50"></text></g><g><title>trait_impls_of (1,007,571 samples, 0.10%)</title><rect x="26.0957%" y="101" width="0.1030%" height="15" fill="rgb(208,69,12)"/><text x="26.3457%" y="111.50"></text></g><g><title>coherence_checking (13,812,946 samples, 1.41%)</title><rect x="24.7945%" y="149" width="1.4120%" height="15" fill="rgb(235,93,37)"/><text x="25.0445%" y="159.50"></text></g><g><title>dropck_outlives (1,670,629 samples, 0.17%)</title><rect x="34.4756%" y="101" width="0.1708%" height="15" fill="rgb(213,116,39)"/><text x="34.7256%" y="111.50"></text></g><g><title>evaluate_obligation (3,884,112 samples, 0.40%)</title><rect x="34.6464%" y="101" width="0.3971%" height="15" fill="rgb(222,207,29)"/><text x="34.8964%" y="111.50"></text></g><g><title>dropck_outlives (1,743,028 samples, 0.18%)</title><rect x="51.4818%" y="85" width="0.1782%" height="15" fill="rgb(206,96,30)"/><text x="51.7318%" y="95.50"></text></g><g><title>evaluate_obligation (6,270,235 samples, 0.64%)</title><rect x="51.6600%" y="85" width="0.6410%" height="15" fill="rgb(218,138,4)"/><text x="51.9100%" y="95.50"></text></g><g><title>method_autoderef_steps (1,304,620 samples, 0.13%)</title><rect x="52.4972%" y="85" width="0.1334%" height="15" fill="rgb(250,191,14)"/><text x="52.7472%" y="95.50"></text></g><g><title>typeck (170,171,058 samples, 17.40%)</title><rect x="35.3570%" y="101" width="17.3958%" height="15" fill="rgb(239,60,40)"/><text x="35.6070%" y="111.50">typeck</text></g><g><title>item_bodies_checking (259,747,116 samples, 26.55%)</title><rect x="26.2102%" y="149" width="26.5527%" height="15" fill="rgb(206,27,48)"/><text x="26.4602%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (259,743,585 samples, 26.55%)</title><rect x="26.2106%" y="133" width="26.5524%" height="15" fill="rgb(225,35,8)"/><text x="26.4606%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (259,606,924 samples, 26.54%)</title><rect x="26.2246%" y="117" width="26.5384%" height="15" fill="rgb(250,213,24)"/><text x="26.4746%" y="127.50">typeck</text></g><g><title>item_types_checking (1,260,644 samples, 0.13%)</title><rect x="52.7630%" y="149" width="0.1289%" height="15" fill="rgb(247,123,22)"/><text x="53.0130%" y="159.50"></text></g><g><title>check_mod_item_types (1,252,474 samples, 0.13%)</title><rect x="52.7638%" y="133" width="0.1280%" height="15" fill="rgb(231,138,38)"/><text x="53.0138%" y="143.50"></text></g><g><title>named_region_map (1,985,375 samples, 0.20%)</title><rect x="53.0085%" y="101" width="0.2030%" height="15" fill="rgb(231,145,46)"/><text x="53.2585%" y="111.50"></text></g><g><title>resolve_lifetimes (1,956,145 samples, 0.20%)</title><rect x="53.0115%" y="85" width="0.2000%" height="15" fill="rgb(251,118,11)"/><text x="53.2615%" y="95.50"></text></g><g><title>lint_levels (1,066,942 samples, 0.11%)</title><rect x="53.1024%" y="69" width="0.1091%" height="15" fill="rgb(217,147,25)"/><text x="53.3524%" y="79.50"></text></g><g><title>generics_of (2,163,526 samples, 0.22%)</title><rect x="52.9924%" y="117" width="0.2212%" height="15" fill="rgb(247,81,37)"/><text x="53.2424%" y="127.50"></text></g><g><title>type_collecting (3,832,423 samples, 0.39%)</title><rect x="52.8927%" y="149" width="0.3918%" height="15" fill="rgb(209,12,38)"/><text x="53.1427%" y="159.50"></text></g><g><title>collect_mod_item_types (3,814,563 samples, 0.39%)</title><rect x="52.8945%" y="133" width="0.3899%" height="15" fill="rgb(227,1,9)"/><text x="53.1445%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,507,111 samples, 0.15%)</title><rect x="53.3291%" y="133" width="0.1541%" height="15" fill="rgb(248,47,43)"/><text x="53.5791%" y="143.50"></text></g><g><title>region_scope_tree (2,915,352 samples, 0.30%)</title><rect x="53.7763%" y="117" width="0.2980%" height="15" fill="rgb(221,10,30)"/><text x="54.0263%" y="127.50"></text></g><g><title>analysis (526,900,836 samples, 53.86%)</title><rect x="0.2195%" y="181" width="53.8626%" height="15" fill="rgb(210,229,1)"/><text x="0.4695%" y="191.50">analysis</text></g><g><title>type_check_crate (286,645,148 samples, 29.30%)</title><rect x="24.7797%" y="165" width="29.3024%" height="15" fill="rgb(222,148,37)"/><text x="25.0297%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,794,167 samples, 0.80%)</title><rect x="53.2853%" y="149" width="0.7968%" height="15" fill="rgb(234,67,33)"/><text x="53.5353%" y="159.50"></text></g><g><title>check_item_well_formed (5,859,017 samples, 0.60%)</title><rect x="53.4831%" y="133" width="0.5989%" height="15" fill="rgb(247,98,35)"/><text x="53.7331%" y="143.50"></text></g><g><title>AST_validation (1,091,033 samples, 0.11%)</title><rect x="54.1500%" y="165" width="0.1115%" height="15" fill="rgb(247,138,52)"/><text x="54.4000%" y="175.50"></text></g><g><title>metadata_load_macro (1,028,278 samples, 0.11%)</title><rect x="93.0144%" y="133" width="0.1051%" height="15" fill="rgb(213,79,30)"/><text x="93.2644%" y="143.50"></text></g><g><title>metadata_register_crate (2,908,373 samples, 0.30%)</title><rect x="93.1195%" y="133" width="0.2973%" height="15" fill="rgb(246,177,23)"/><text x="93.3695%" y="143.50"></text></g><g><title>metadata_register_crate (1,047,541 samples, 0.11%)</title><rect x="93.3097%" y="117" width="0.1071%" height="15" fill="rgb(230,62,27)"/><text x="93.5597%" y="127.50"></text></g><g><title>macro_expand_crate (383,166,376 samples, 39.17%)</title><rect x="54.3483%" y="165" width="39.1693%" height="15" fill="rgb(216,154,8)"/><text x="54.5983%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (383,138,316 samples, 39.17%)</title><rect x="54.3512%" y="149" width="39.1664%" height="15" fill="rgb(244,35,45)"/><text x="54.6012%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (986,580 samples, 0.10%)</title><rect x="93.4168%" y="133" width="0.1009%" height="15" fill="rgb(251,115,12)"/><text x="93.6668%" y="143.50"></text></g><g><title>maybe_create_a_macro_crate (1,320,325 samples, 0.13%)</title><rect x="93.5178%" y="165" width="0.1350%" height="15" fill="rgb(240,54,50)"/><text x="93.7678%" y="175.50"></text></g><g><title>finalize_macro_resolutions (6,225,230 samples, 0.64%)</title><rect x="93.6857%" y="149" width="0.6364%" height="15" fill="rgb(233,84,52)"/><text x="93.9357%" y="159.50"></text></g><g><title>late_resolve_crate (13,709,365 samples, 1.40%)</title><rect x="94.3221%" y="149" width="1.4014%" height="15" fill="rgb(207,117,47)"/><text x="94.5721%" y="159.50"></text></g><g><title>resolve_check_unused (1,202,723 samples, 0.12%)</title><rect x="95.7254%" y="149" width="0.1229%" height="15" fill="rgb(249,43,39)"/><text x="95.9754%" y="159.50"></text></g><g><title>configure_and_expand (408,895,896 samples, 41.80%)</title><rect x="54.1285%" y="181" width="41.7995%" height="15" fill="rgb(209,38,44)"/><text x="54.3785%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (22,157,759 samples, 2.27%)</title><rect x="93.6630%" y="165" width="2.2651%" height="15" fill="rgb(236,212,23)"/><text x="93.9130%" y="175.50">r..</text></g><g><title>drop_ast (1,978,482 samples, 0.20%)</title><rect x="95.9281%" y="181" width="0.2023%" height="15" fill="rgb(242,79,21)"/><text x="96.1781%" y="191.50"></text></g><g><title>early_lint_checks (5,098,127 samples, 0.52%)</title><rect x="96.1323%" y="181" width="0.5212%" height="15" fill="rgb(211,96,35)"/><text x="96.3823%" y="191.50"></text></g><g><title>free_global_ctxt (7,356,253 samples, 0.75%)</title><rect x="96.6535%" y="181" width="0.7520%" height="15" fill="rgb(253,215,40)"/><text x="96.9035%" y="191.50"></text></g><g><title>hir_lowering (21,963,218 samples, 2.25%)</title><rect x="97.4248%" y="181" width="2.2452%" height="15" fill="rgb(211,81,21)"/><text x="97.6748%" y="191.50">h..</text></g><g><title>parse_crate (1,281,755 samples, 0.13%)</title><rect x="99.6784%" y="181" width="0.1310%" height="15" fill="rgb(208,190,38)"/><text x="99.9284%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,120,552 samples, 0.11%)</title><rect x="99.8374%" y="181" width="0.1145%" height="15" fill="rgb(235,213,38)"/><text x="100.0874%" y="191.50"></text></g><g><title>all (978,231,010 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (978,231,010 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>