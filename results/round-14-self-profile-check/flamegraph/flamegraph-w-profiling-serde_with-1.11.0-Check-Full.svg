<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (4,838,743 samples, 0.26%)</title><rect x="13.8923%" y="133" width="0.2621%" height="15" fill="rgb(227,0,7)"/><text x="14.1423%" y="143.50"></text></g><g><title>is_sized_raw (4,142,862 samples, 0.22%)</title><rect x="14.2096%" y="133" width="0.2244%" height="15" fill="rgb(217,0,24)"/><text x="14.4596%" y="143.50"></text></g><g><title>evaluate_obligation (2,074,460 samples, 0.11%)</title><rect x="14.3217%" y="117" width="0.1124%" height="15" fill="rgb(221,193,54)"/><text x="14.5717%" y="127.50"></text></g><g><title>adt_drop_tys (1,883,377 samples, 0.10%)</title><rect x="18.8985%" y="53" width="0.1020%" height="15" fill="rgb(248,212,6)"/><text x="19.1485%" y="63.50"></text></g><g><title>is_copy_raw (48,658,183 samples, 2.64%)</title><rect x="19.0005%" y="53" width="2.6360%" height="15" fill="rgb(208,68,35)"/><text x="19.2505%" y="63.50">is..</text></g><g><title>evaluate_obligation (39,154,047 samples, 2.12%)</title><rect x="19.5154%" y="37" width="2.1211%" height="15" fill="rgb(232,128,0)"/><text x="19.7654%" y="47.50">e..</text></g><g><title>needs_drop_raw (56,024,587 samples, 3.04%)</title><rect x="18.6411%" y="69" width="3.0351%" height="15" fill="rgb(207,160,47)"/><text x="18.8911%" y="79.50">nee..</text></g><g><title>codegen_fulfill_obligation (11,185,971 samples, 0.61%)</title><rect x="21.8304%" y="53" width="0.6060%" height="15" fill="rgb(228,23,34)"/><text x="22.0804%" y="63.50"></text></g><g><title>resolve_instance (16,087,863 samples, 0.87%)</title><rect x="21.6780%" y="69" width="0.8715%" height="15" fill="rgb(218,30,26)"/><text x="21.9280%" y="79.50"></text></g><g><title>thir_body (14,100,569 samples, 0.76%)</title><rect x="22.5701%" y="69" width="0.7639%" height="15" fill="rgb(220,122,19)"/><text x="22.8201%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,126,916 samples, 0.22%)</title><rect x="23.3452%" y="69" width="0.2236%" height="15" fill="rgb(250,228,42)"/><text x="23.5952%" y="79.50"></text></g><g><title>mir_const (156,939,106 samples, 8.50%)</title><rect x="15.0705%" y="117" width="8.5020%" height="15" fill="rgb(240,193,28)"/><text x="15.3205%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (143,763,579 samples, 7.79%)</title><rect x="15.7843%" y="101" width="7.7882%" height="15" fill="rgb(216,20,37)"/><text x="16.0343%" y="111.50">unsafety_ch..</text></g><g><title>mir_built (135,384,222 samples, 7.33%)</title><rect x="16.2383%" y="85" width="7.3343%" height="15" fill="rgb(206,188,39)"/><text x="16.4883%" y="95.50">mir_built</text></g><g><title>mir_promoted (169,902,299 samples, 9.20%)</title><rect x="14.4681%" y="133" width="9.2043%" height="15" fill="rgb(217,207,13)"/><text x="14.7181%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (16,374,706 samples, 0.89%)</title><rect x="23.6732%" y="133" width="0.8871%" height="15" fill="rgb(231,73,38)"/><text x="23.9232%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (33,000,460 samples, 1.79%)</title><rect x="24.5603%" y="133" width="1.7878%" height="15" fill="rgb(225,20,46)"/><text x="24.8103%" y="143.50">t..</text></g><g><title>normalize_projection_ty (18,018,198 samples, 0.98%)</title><rect x="25.3719%" y="117" width="0.9761%" height="15" fill="rgb(210,31,41)"/><text x="25.6219%" y="127.50"></text></g><g><title>type_op_normalize_predicate (29,716,727 samples, 1.61%)</title><rect x="26.3480%" y="133" width="1.6099%" height="15" fill="rgb(221,200,47)"/><text x="26.5980%" y="143.50"></text></g><g><title>normalize_projection_ty (15,505,139 samples, 0.84%)</title><rect x="27.1179%" y="117" width="0.8400%" height="15" fill="rgb(226,26,5)"/><text x="27.3679%" y="127.50"></text></g><g><title>type_op_normalize_ty (19,017,418 samples, 1.03%)</title><rect x="27.9579%" y="133" width="1.0302%" height="15" fill="rgb(249,33,26)"/><text x="28.2079%" y="143.50"></text></g><g><title>normalize_projection_ty (8,342,831 samples, 0.45%)</title><rect x="28.5362%" y="117" width="0.4520%" height="15" fill="rgb(235,183,28)"/><text x="28.7862%" y="127.50"></text></g><g><title>type_op_prove_predicate (143,260,989 samples, 7.76%)</title><rect x="28.9882%" y="133" width="7.7610%" height="15" fill="rgb(221,5,38)"/><text x="29.2382%" y="143.50">type_op_pro..</text></g><g><title>MIR_borrow_checking (673,072,043 samples, 36.46%)</title><rect x="0.2880%" y="165" width="36.4630%" height="15" fill="rgb(247,18,42)"/><text x="0.5380%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (670,782,701 samples, 36.34%)</title><rect x="0.4120%" y="149" width="36.3390%" height="15" fill="rgb(241,131,45)"/><text x="0.6620%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (2,716,110 samples, 0.15%)</title><rect x="36.8250%" y="165" width="0.1471%" height="15" fill="rgb(249,31,29)"/><text x="37.0750%" y="175.50"></text></g><g><title>codegen_fn_attrs (3,241,033 samples, 0.18%)</title><rect x="37.1469%" y="133" width="0.1756%" height="15" fill="rgb(225,111,53)"/><text x="37.3969%" y="143.50"></text></g><g><title>check_mod_attrs (6,379,021 samples, 0.35%)</title><rect x="36.9769%" y="149" width="0.3456%" height="15" fill="rgb(238,160,17)"/><text x="37.2269%" y="159.50"></text></g><g><title>lint_levels (3,533,069 samples, 0.19%)</title><rect x="37.6296%" y="133" width="0.1914%" height="15" fill="rgb(214,148,48)"/><text x="37.8796%" y="143.50"></text></g><g><title>lookup_deprecation_entry (2,368,787 samples, 0.13%)</title><rect x="37.8210%" y="133" width="0.1283%" height="15" fill="rgb(232,36,49)"/><text x="38.0710%" y="143.50"></text></g><g><title>stability_index (2,053,723 samples, 0.11%)</title><rect x="37.8381%" y="117" width="0.1113%" height="15" fill="rgb(209,103,24)"/><text x="38.0881%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (8,591,003 samples, 0.47%)</title><rect x="37.4954%" y="149" width="0.4654%" height="15" fill="rgb(229,88,8)"/><text x="37.7454%" y="159.50"></text></g><g><title>misc_checking_1 (18,749,129 samples, 1.02%)</title><rect x="36.9721%" y="165" width="1.0157%" height="15" fill="rgb(213,181,19)"/><text x="37.2221%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (8,934,969 samples, 0.48%)</title><rect x="37.9880%" y="149" width="0.4840%" height="15" fill="rgb(254,191,54)"/><text x="38.2380%" y="159.50"></text></g><g><title>check_mod_liveness (7,783,748 samples, 0.42%)</title><rect x="38.0504%" y="133" width="0.4217%" height="15" fill="rgb(241,83,37)"/><text x="38.3004%" y="143.50"></text></g><g><title>type_uninhabited_from (2,239,962 samples, 0.12%)</title><rect x="38.3507%" y="117" width="0.1213%" height="15" fill="rgb(233,36,39)"/><text x="38.6007%" y="127.50"></text></g><g><title>misc_checking_2 (19,489,267 samples, 1.06%)</title><rect x="37.9878%" y="165" width="1.0558%" height="15" fill="rgb(226,3,54)"/><text x="38.2378%" y="175.50"></text></g><g><title>match_checking (10,550,808 samples, 0.57%)</title><rect x="38.4721%" y="149" width="0.5716%" height="15" fill="rgb(245,192,40)"/><text x="38.7221%" y="159.50"></text></g><g><title>check_match (9,917,139 samples, 0.54%)</title><rect x="38.5064%" y="133" width="0.5373%" height="15" fill="rgb(238,167,29)"/><text x="38.7564%" y="143.50"></text></g><g><title>check_private_in_public (4,224,717 samples, 0.23%)</title><rect x="39.0449%" y="149" width="0.2289%" height="15" fill="rgb(232,182,51)"/><text x="39.2949%" y="159.50"></text></g><g><title>death_checking (6,297,370 samples, 0.34%)</title><rect x="39.2737%" y="149" width="0.3412%" height="15" fill="rgb(231,60,39)"/><text x="39.5237%" y="159.50"></text></g><g><title>param_env (1,860,040 samples, 0.10%)</title><rect x="40.0867%" y="117" width="0.1008%" height="15" fill="rgb(208,69,12)"/><text x="40.3367%" y="127.50"></text></g><g><title>crate_lints (11,914,373 samples, 0.65%)</title><rect x="39.6151%" y="133" width="0.6454%" height="15" fill="rgb(235,93,37)"/><text x="39.8651%" y="143.50"></text></g><g><title>lint_checking (20,168,545 samples, 1.09%)</title><rect x="39.6149%" y="149" width="1.0926%" height="15" fill="rgb(213,116,39)"/><text x="39.8649%" y="159.50"></text></g><g><title>module_lints (8,249,632 samples, 0.45%)</title><rect x="40.2606%" y="133" width="0.4469%" height="15" fill="rgb(222,207,29)"/><text x="40.5106%" y="143.50"></text></g><g><title>lint_mod (8,221,472 samples, 0.45%)</title><rect x="40.2621%" y="117" width="0.4454%" height="15" fill="rgb(206,96,30)"/><text x="40.5121%" y="127.50"></text></g><g><title>privacy_access_levels (7,610,835 samples, 0.41%)</title><rect x="40.7075%" y="149" width="0.4123%" height="15" fill="rgb(218,138,4)"/><text x="40.9575%" y="159.50"></text></g><g><title>privacy_checking_modules (21,193,356 samples, 1.15%)</title><rect x="41.1198%" y="149" width="1.1481%" height="15" fill="rgb(250,191,14)"/><text x="41.3698%" y="159.50"></text></g><g><title>check_mod_privacy (21,164,015 samples, 1.15%)</title><rect x="41.1214%" y="133" width="1.1465%" height="15" fill="rgb(239,60,40)"/><text x="41.3714%" y="143.50"></text></g><g><title>misc_checking_3 (59,685,135 samples, 3.23%)</title><rect x="39.0436%" y="165" width="3.2334%" height="15" fill="rgb(206,27,48)"/><text x="39.2936%" y="175.50">mis..</text></g><g><title>impl_parent (3,577,510 samples, 0.19%)</title><rect x="42.7890%" y="101" width="0.1938%" height="15" fill="rgb(225,35,8)"/><text x="43.0390%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,945,222 samples, 0.11%)</title><rect x="42.8774%" y="85" width="0.1054%" height="15" fill="rgb(250,213,24)"/><text x="43.1274%" y="95.50"></text></g><g><title>impl_trait_ref (7,728,149 samples, 0.42%)</title><rect x="42.9828%" y="101" width="0.4187%" height="15" fill="rgb(247,123,22)"/><text x="43.2328%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,095,098 samples, 0.33%)</title><rect x="43.0713%" y="85" width="0.3302%" height="15" fill="rgb(231,138,38)"/><text x="43.3213%" y="95.50"></text></g><g><title>coherent_trait (20,298,936 samples, 1.10%)</title><rect x="42.3752%" y="133" width="1.0997%" height="15" fill="rgb(231,145,46)"/><text x="42.6252%" y="143.50"></text></g><g><title>specialization_graph_of (19,391,907 samples, 1.05%)</title><rect x="42.4244%" y="117" width="1.0505%" height="15" fill="rgb(251,118,11)"/><text x="42.6744%" y="127.50"></text></g><g><title>coherence_checking (20,923,834 samples, 1.13%)</title><rect x="42.3728%" y="149" width="1.1335%" height="15" fill="rgb(217,147,25)"/><text x="42.6228%" y="159.50"></text></g><g><title>dropck_outlives (15,589,367 samples, 0.84%)</title><rect x="65.1737%" y="101" width="0.8445%" height="15" fill="rgb(247,81,37)"/><text x="65.4237%" y="111.50"></text></g><g><title>normalize_projection_ty (2,351,187 samples, 0.13%)</title><rect x="65.8909%" y="85" width="0.1274%" height="15" fill="rgb(209,12,38)"/><text x="66.1409%" y="95.50"></text></g><g><title>evaluate_obligation (19,840,464 samples, 1.07%)</title><rect x="66.0183%" y="101" width="1.0748%" height="15" fill="rgb(227,1,9)"/><text x="66.2683%" y="111.50"></text></g><g><title>evaluate_obligation (3,339,990 samples, 0.18%)</title><rect x="67.4440%" y="85" width="0.1809%" height="15" fill="rgb(248,47,43)"/><text x="67.6940%" y="95.50"></text></g><g><title>method_autoderef_steps (7,448,770 samples, 0.40%)</title><rect x="67.2220%" y="101" width="0.4035%" height="15" fill="rgb(221,10,30)"/><text x="67.4720%" y="111.50"></text></g><g><title>dropck_outlives (2,102,535 samples, 0.11%)</title><rect x="72.0074%" y="85" width="0.1139%" height="15" fill="rgb(210,229,1)"/><text x="72.2574%" y="95.50"></text></g><g><title>evaluate_obligation (7,295,465 samples, 0.40%)</title><rect x="72.1213%" y="85" width="0.3952%" height="15" fill="rgb(222,148,37)"/><text x="72.3713%" y="95.50"></text></g><g><title>method_autoderef_steps (2,672,322 samples, 0.14%)</title><rect x="72.6397%" y="85" width="0.1448%" height="15" fill="rgb(234,67,33)"/><text x="72.8897%" y="95.50"></text></g><g><title>typeck (91,705,873 samples, 4.97%)</title><rect x="67.8585%" y="101" width="4.9681%" height="15" fill="rgb(247,98,35)"/><text x="68.1085%" y="111.50">typeck</text></g><g><title>item_bodies_checking (541,243,093 samples, 29.32%)</title><rect x="43.5470%" y="149" width="29.3213%" height="15" fill="rgb(247,138,52)"/><text x="43.7970%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (541,239,123 samples, 29.32%)</title><rect x="43.5472%" y="133" width="29.3211%" height="15" fill="rgb(213,79,30)"/><text x="43.7972%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (539,602,992 samples, 29.23%)</title><rect x="43.6358%" y="117" width="29.2324%" height="15" fill="rgb(246,177,23)"/><text x="43.8858%" y="127.50">typeck</text></g><g><title>item_types_checking (33,379,912 samples, 1.81%)</title><rect x="72.8683%" y="149" width="1.8083%" height="15" fill="rgb(230,62,27)"/><text x="73.1183%" y="159.50">i..</text></g><g><title>check_mod_item_types (33,346,682 samples, 1.81%)</title><rect x="72.8701%" y="133" width="1.8065%" height="15" fill="rgb(216,154,8)"/><text x="73.1201%" y="143.50">c..</text></g><g><title>fn_sig (6,685,124 samples, 0.36%)</title><rect x="74.9131%" y="117" width="0.3622%" height="15" fill="rgb(244,35,45)"/><text x="75.1631%" y="127.50"></text></g><g><title>is_late_bound_map (5,293,388 samples, 0.29%)</title><rect x="75.3844%" y="101" width="0.2868%" height="15" fill="rgb(251,115,12)"/><text x="75.6344%" y="111.50"></text></g><g><title>resolve_lifetimes (5,005,455 samples, 0.27%)</title><rect x="75.4000%" y="85" width="0.2712%" height="15" fill="rgb(240,54,50)"/><text x="75.6500%" y="95.50"></text></g><g><title>generics_of (8,178,220 samples, 0.44%)</title><rect x="75.2752%" y="117" width="0.4430%" height="15" fill="rgb(233,84,52)"/><text x="75.5252%" y="127.50"></text></g><g><title>late_bound_vars_map (2,662,616 samples, 0.14%)</title><rect x="76.1641%" y="69" width="0.1442%" height="15" fill="rgb(207,117,47)"/><text x="76.4141%" y="79.50"></text></g><g><title>resolve_lifetimes (2,376,443 samples, 0.13%)</title><rect x="76.1796%" y="53" width="0.1287%" height="15" fill="rgb(249,43,39)"/><text x="76.4296%" y="63.50"></text></g><g><title>explicit_predicates_of (8,567,753 samples, 0.46%)</title><rect x="75.8736%" y="85" width="0.4641%" height="15" fill="rgb(209,38,44)"/><text x="76.1236%" y="95.50"></text></g><g><title>predicates_of (12,281,871 samples, 0.67%)</title><rect x="75.7652%" y="117" width="0.6654%" height="15" fill="rgb(236,212,23)"/><text x="76.0152%" y="127.50"></text></g><g><title>predicates_defined_on (11,500,632 samples, 0.62%)</title><rect x="75.8075%" y="101" width="0.6230%" height="15" fill="rgb(242,79,21)"/><text x="76.0575%" y="111.50"></text></g><g><title>type_collecting (34,640,556 samples, 1.88%)</title><rect x="74.6775%" y="149" width="1.8766%" height="15" fill="rgb(211,96,35)"/><text x="74.9275%" y="159.50">t..</text></g><g><title>collect_mod_item_types (34,599,115 samples, 1.87%)</title><rect x="74.6798%" y="133" width="1.8744%" height="15" fill="rgb(253,215,40)"/><text x="74.9298%" y="143.50">c..</text></g><g><title>type_of (2,221,699 samples, 0.12%)</title><rect x="76.4338%" y="117" width="0.1204%" height="15" fill="rgb(211,81,21)"/><text x="76.6838%" y="127.50"></text></g><g><title>evaluate_obligation (4,382,080 samples, 0.24%)</title><rect x="80.2137%" y="117" width="0.2374%" height="15" fill="rgb(208,190,38)"/><text x="80.4637%" y="127.50"></text></g><g><title>implied_outlives_bounds (8,668,502 samples, 0.47%)</title><rect x="80.4645%" y="117" width="0.4696%" height="15" fill="rgb(235,213,38)"/><text x="80.7145%" y="127.50"></text></g><g><title>param_env (7,216,561 samples, 0.39%)</title><rect x="80.9384%" y="117" width="0.3909%" height="15" fill="rgb(237,122,38)"/><text x="81.1884%" y="127.50"></text></g><g><title>region_scope_tree (4,993,206 samples, 0.27%)</title><rect x="81.3368%" y="117" width="0.2705%" height="15" fill="rgb(244,218,35)"/><text x="81.5868%" y="127.50"></text></g><g><title>check_impl_item_well_formed (89,678,705 samples, 4.86%)</title><rect x="76.7557%" y="133" width="4.8583%" height="15" fill="rgb(240,68,47)"/><text x="77.0057%" y="143.50">check_..</text></g><g><title>evaluate_obligation (2,428,447 samples, 0.13%)</title><rect x="84.2531%" y="117" width="0.1316%" height="15" fill="rgb(210,16,53)"/><text x="84.5031%" y="127.50"></text></g><g><title>implied_outlives_bounds (3,326,181 samples, 0.18%)</title><rect x="84.4092%" y="117" width="0.1802%" height="15" fill="rgb(235,124,12)"/><text x="84.6592%" y="127.50"></text></g><g><title>param_env (5,439,522 samples, 0.29%)</title><rect x="84.6033%" y="117" width="0.2947%" height="15" fill="rgb(224,169,11)"/><text x="84.8533%" y="127.50"></text></g><g><title>check_item_well_formed (63,055,729 samples, 3.42%)</title><rect x="81.6140%" y="133" width="3.4160%" height="15" fill="rgb(250,166,2)"/><text x="81.8640%" y="143.50">che..</text></g><g><title>analysis (1,568,418,082 samples, 84.97%)</title><rect x="0.1031%" y="181" width="84.9674%" height="15" fill="rgb(242,216,29)"/><text x="0.3531%" y="191.50">analysis</text></g><g><title>type_check_crate (789,927,715 samples, 42.79%)</title><rect x="42.2770%" y="165" width="42.7935%" height="15" fill="rgb(230,116,27)"/><text x="42.5270%" y="175.50">type_check_crate</text></g><g><title>wf_checking (157,044,400 samples, 8.51%)</title><rect x="76.5628%" y="149" width="8.5077%" height="15" fill="rgb(228,99,48)"/><text x="76.8128%" y="159.50">wf_checking</text></g><g><title>AST_validation (2,408,237 samples, 0.13%)</title><rect x="85.1117%" y="165" width="0.1305%" height="15" fill="rgb(253,11,6)"/><text x="85.3617%" y="175.50"></text></g><g><title>metadata_register_crate (11,666,761 samples, 0.63%)</title><rect x="91.9429%" y="133" width="0.6320%" height="15" fill="rgb(247,143,39)"/><text x="92.1929%" y="143.50"></text></g><g><title>metadata_register_crate (4,559,493 samples, 0.25%)</title><rect x="92.3279%" y="117" width="0.2470%" height="15" fill="rgb(236,97,10)"/><text x="92.5779%" y="127.50"></text></g><g><title>macro_expand_crate (134,957,024 samples, 7.31%)</title><rect x="85.3452%" y="165" width="7.3112%" height="15" fill="rgb(233,208,19)"/><text x="85.5952%" y="175.50">macro_expa..</text></g><g><title>expand_crate (134,938,294 samples, 7.31%)</title><rect x="85.3462%" y="149" width="7.3101%" height="15" fill="rgb(216,164,2)"/><text x="85.5962%" y="159.50">expand_cra..</text></g><g><title>late_resolve_crate (22,847,545 samples, 1.24%)</title><rect x="92.7363%" y="149" width="1.2377%" height="15" fill="rgb(220,129,5)"/><text x="92.9863%" y="159.50"></text></g><g><title>configure_and_expand (167,246,014 samples, 9.06%)</title><rect x="85.0964%" y="181" width="9.0604%" height="15" fill="rgb(242,17,10)"/><text x="85.3464%" y="191.50">configure_and..</text></g><g><title>resolve_crate (27,449,556 samples, 1.49%)</title><rect x="92.6698%" y="165" width="1.4871%" height="15" fill="rgb(242,107,0)"/><text x="92.9198%" y="175.50"></text></g><g><title>drop_ast (4,576,071 samples, 0.25%)</title><rect x="94.1568%" y="181" width="0.2479%" height="15" fill="rgb(251,28,31)"/><text x="94.4068%" y="191.50"></text></g><g><title>early_lint_checks (5,997,457 samples, 0.32%)</title><rect x="94.4059%" y="181" width="0.3249%" height="15" fill="rgb(233,223,10)"/><text x="94.6559%" y="191.50"></text></g><g><title>free_global_ctxt (11,520,119 samples, 0.62%)</title><rect x="94.7308%" y="181" width="0.6241%" height="15" fill="rgb(215,21,27)"/><text x="94.9808%" y="191.50"></text></g><g><title>generate_crate_metadata (22,643,362 samples, 1.23%)</title><rect x="95.3549%" y="181" width="1.2267%" height="15" fill="rgb(232,23,21)"/><text x="95.6049%" y="191.50"></text></g><g><title>hir_lowering (52,636,176 samples, 2.85%)</title><rect x="96.5816%" y="181" width="2.8515%" height="15" fill="rgb(244,5,23)"/><text x="96.8316%" y="191.50">hi..</text></g><g><title>parse_crate (4,714,563 samples, 0.26%)</title><rect x="99.4371%" y="181" width="0.2554%" height="15" fill="rgb(226,81,46)"/><text x="99.6871%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,885,523 samples, 0.21%)</title><rect x="99.7078%" y="181" width="0.2105%" height="15" fill="rgb(247,70,30)"/><text x="99.9578%" y="191.50"></text></g><g><title>all (1,845,905,146 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,845,905,146 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>