<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (190,244 samples, 0.10%)</title><rect x="11.6884%" y="149" width="0.1016%" height="15" fill="rgb(227,0,7)"/><text x="11.9384%" y="159.50"></text></g><g><title>param_env (460,806 samples, 0.25%)</title><rect x="13.3998%" y="117" width="0.2461%" height="15" fill="rgb(217,0,24)"/><text x="13.6498%" y="127.50"></text></g><g><title>item_attrs (430,194 samples, 0.23%)</title><rect x="14.1194%" y="85" width="0.2297%" height="15" fill="rgb(221,193,54)"/><text x="14.3694%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (418,714 samples, 0.22%)</title><rect x="14.1255%" y="69" width="0.2236%" height="15" fill="rgb(248,212,6)"/><text x="14.3755%" y="79.50"></text></g><g><title>codegen_fn_attrs (576,725 samples, 0.31%)</title><rect x="14.0552%" y="101" width="0.3080%" height="15" fill="rgb(208,68,35)"/><text x="14.3052%" y="111.50"></text></g><g><title>param_env (209,914 samples, 0.11%)</title><rect x="17.2939%" y="53" width="0.1121%" height="15" fill="rgb(232,128,0)"/><text x="17.5439%" y="63.50"></text></g><g><title>adt_drop_tys (589,135 samples, 0.31%)</title><rect x="17.1151%" y="69" width="0.3146%" height="15" fill="rgb(207,160,47)"/><text x="17.3651%" y="79.50"></text></g><g><title>is_copy_raw (1,219,282 samples, 0.65%)</title><rect x="17.4297%" y="69" width="0.6511%" height="15" fill="rgb(228,23,34)"/><text x="17.6797%" y="79.50"></text></g><g><title>evaluate_obligation (1,042,680 samples, 0.56%)</title><rect x="17.5241%" y="53" width="0.5568%" height="15" fill="rgb(218,30,26)"/><text x="17.7741%" y="63.50"></text></g><g><title>needs_drop_raw (2,049,181 samples, 1.09%)</title><rect x="17.0213%" y="85" width="1.0943%" height="15" fill="rgb(220,122,19)"/><text x="17.2713%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (509,116 samples, 0.27%)</title><rect x="18.2790%" y="69" width="0.2719%" height="15" fill="rgb(250,228,42)"/><text x="18.5290%" y="79.50"></text></g><g><title>specialization_graph_of (230,332 samples, 0.12%)</title><rect x="18.6053%" y="69" width="0.1230%" height="15" fill="rgb(240,193,28)"/><text x="18.8553%" y="79.50"></text></g><g><title>resolve_instance (1,240,532 samples, 0.66%)</title><rect x="18.1307%" y="85" width="0.6625%" height="15" fill="rgb(216,20,37)"/><text x="18.3807%" y="95.50"></text></g><g><title>thir_body (1,760,873 samples, 0.94%)</title><rect x="18.8214%" y="85" width="0.9403%" height="15" fill="rgb(206,188,39)"/><text x="19.0714%" y="95.50"></text></g><g><title>mir_const (13,398,920 samples, 7.16%)</title><rect x="12.6286%" y="133" width="7.1553%" height="15" fill="rgb(217,207,13)"/><text x="12.8786%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (11,494,010 samples, 6.14%)</title><rect x="13.6459%" y="117" width="6.1380%" height="15" fill="rgb(231,73,38)"/><text x="13.8959%" y="127.50">unsafety..</text></g><g><title>mir_built (10,150,757 samples, 5.42%)</title><rect x="14.3632%" y="101" width="5.4207%" height="15" fill="rgb(225,20,46)"/><text x="14.6132%" y="111.50">mir_bui..</text></g><g><title>thir_body (226,952 samples, 0.12%)</title><rect x="20.6097%" y="69" width="0.1212%" height="15" fill="rgb(210,31,41)"/><text x="20.8597%" y="79.50"></text></g><g><title>mir_const (1,185,301 samples, 0.63%)</title><rect x="20.1023%" y="117" width="0.6330%" height="15" fill="rgb(221,200,47)"/><text x="20.3523%" y="127.50"></text></g><g><title>unsafety_check_result (941,015 samples, 0.50%)</title><rect x="20.2327%" y="101" width="0.5025%" height="15" fill="rgb(226,26,5)"/><text x="20.4827%" y="111.50"></text></g><g><title>mir_built (835,723 samples, 0.45%)</title><rect x="20.2890%" y="85" width="0.4463%" height="15" fill="rgb(249,33,26)"/><text x="20.5390%" y="95.50"></text></g><g><title>mir_const_qualif (1,829,246 samples, 0.98%)</title><rect x="19.7839%" y="133" width="0.9769%" height="15" fill="rgb(235,183,28)"/><text x="20.0339%" y="143.50"></text></g><g><title>mir_promoted (16,795,175 samples, 8.97%)</title><rect x="11.7952%" y="149" width="8.9689%" height="15" fill="rgb(221,5,38)"/><text x="12.0452%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (556,097 samples, 0.30%)</title><rect x="20.7664%" y="149" width="0.2970%" height="15" fill="rgb(247,18,42)"/><text x="21.0164%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (633,784 samples, 0.34%)</title><rect x="21.0633%" y="149" width="0.3385%" height="15" fill="rgb(241,131,45)"/><text x="21.3133%" y="159.50"></text></g><g><title>normalize_projection_ty (419,762 samples, 0.22%)</title><rect x="21.1776%" y="133" width="0.2242%" height="15" fill="rgb(249,31,29)"/><text x="21.4276%" y="143.50"></text></g><g><title>type_op_normalize_predicate (787,427 samples, 0.42%)</title><rect x="21.4018%" y="149" width="0.4205%" height="15" fill="rgb(225,111,53)"/><text x="21.6518%" y="159.50"></text></g><g><title>normalize_projection_ty (456,405 samples, 0.24%)</title><rect x="21.5786%" y="133" width="0.2437%" height="15" fill="rgb(238,160,17)"/><text x="21.8286%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,863,416 samples, 1.53%)</title><rect x="21.8477%" y="149" width="1.5291%" height="15" fill="rgb(214,148,48)"/><text x="22.0977%" y="159.50"></text></g><g><title>MIR_borrow_checking (42,581,756 samples, 22.74%)</title><rect x="0.6414%" y="181" width="22.7395%" height="15" fill="rgb(232,36,49)"/><text x="0.8914%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,072,291 samples, 22.47%)</title><rect x="0.9135%" y="165" width="22.4674%" height="15" fill="rgb(209,103,24)"/><text x="1.1635%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (775,069 samples, 0.41%)</title><rect x="23.3809%" y="181" width="0.4139%" height="15" fill="rgb(229,88,8)"/><text x="23.6309%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (636,485 samples, 0.34%)</title><rect x="23.4549%" y="165" width="0.3399%" height="15" fill="rgb(213,181,19)"/><text x="23.7049%" y="175.50"></text></g><g><title>hir_module_items (284,883 samples, 0.15%)</title><rect x="23.7948%" y="181" width="0.1521%" height="15" fill="rgb(254,191,54)"/><text x="24.0448%" y="191.50"></text></g><g><title>codegen_fn_attrs (227,601 samples, 0.12%)</title><rect x="24.4106%" y="117" width="0.1215%" height="15" fill="rgb(241,83,37)"/><text x="24.6606%" y="127.50"></text></g><g><title>should_inherit_track_caller (412,334 samples, 0.22%)</title><rect x="24.3187%" y="133" width="0.2202%" height="15" fill="rgb(233,36,39)"/><text x="24.5687%" y="143.50"></text></g><g><title>codegen_fn_attrs (654,568 samples, 0.35%)</title><rect x="24.2018%" y="149" width="0.3496%" height="15" fill="rgb(226,3,54)"/><text x="24.4518%" y="159.50"></text></g><g><title>check_mod_attrs (1,100,191 samples, 0.59%)</title><rect x="23.9640%" y="165" width="0.5875%" height="15" fill="rgb(245,192,40)"/><text x="24.2140%" y="175.50"></text></g><g><title>check_mod_const_bodies (205,301 samples, 0.11%)</title><rect x="24.5515%" y="165" width="0.1096%" height="15" fill="rgb(238,167,29)"/><text x="24.8015%" y="175.50"></text></g><g><title>lookup_deprecation_entry (205,253 samples, 0.11%)</title><rect x="24.8632%" y="149" width="0.1096%" height="15" fill="rgb(232,182,51)"/><text x="25.1132%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (588,778 samples, 0.31%)</title><rect x="24.7276%" y="165" width="0.3144%" height="15" fill="rgb(231,60,39)"/><text x="24.9776%" y="175.50"></text></g><g><title>misc_checking_1 (2,137,284 samples, 1.14%)</title><rect x="23.9472%" y="181" width="1.1414%" height="15" fill="rgb(208,69,12)"/><text x="24.1972%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (805,139 samples, 0.43%)</title><rect x="25.0894%" y="165" width="0.4300%" height="15" fill="rgb(235,93,37)"/><text x="25.3394%" y="175.50"></text></g><g><title>check_mod_liveness (638,067 samples, 0.34%)</title><rect x="25.1786%" y="149" width="0.3407%" height="15" fill="rgb(213,116,39)"/><text x="25.4286%" y="159.50"></text></g><g><title>misc_checking_2 (2,106,163 samples, 1.12%)</title><rect x="25.0886%" y="181" width="1.1247%" height="15" fill="rgb(222,207,29)"/><text x="25.3386%" y="191.50"></text></g><g><title>match_checking (1,299,474 samples, 0.69%)</title><rect x="25.5193%" y="165" width="0.6939%" height="15" fill="rgb(206,96,30)"/><text x="25.7693%" y="175.50"></text></g><g><title>check_match (1,234,423 samples, 0.66%)</title><rect x="25.5541%" y="149" width="0.6592%" height="15" fill="rgb(218,138,4)"/><text x="25.8041%" y="159.50"></text></g><g><title>check_private_in_public (358,074 samples, 0.19%)</title><rect x="26.2190%" y="165" width="0.1912%" height="15" fill="rgb(250,191,14)"/><text x="26.4690%" y="175.50"></text></g><g><title>death_checking (855,040 samples, 0.46%)</title><rect x="26.4102%" y="165" width="0.4566%" height="15" fill="rgb(239,60,40)"/><text x="26.6602%" y="175.50"></text></g><g><title>item_attrs (236,293 samples, 0.13%)</title><rect x="26.7407%" y="149" width="0.1262%" height="15" fill="rgb(206,27,48)"/><text x="26.9907%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (233,633 samples, 0.12%)</title><rect x="26.7421%" y="133" width="0.1248%" height="15" fill="rgb(225,35,8)"/><text x="26.9921%" y="143.50"></text></g><g><title>eval_to_allocation_raw (296,433 samples, 0.16%)</title><rect x="27.4663%" y="133" width="0.1583%" height="15" fill="rgb(250,213,24)"/><text x="27.7163%" y="143.50"></text></g><g><title>eval_to_allocation_raw (294,993 samples, 0.16%)</title><rect x="27.4671%" y="117" width="0.1575%" height="15" fill="rgb(247,123,22)"/><text x="27.7171%" y="127.50"></text></g><g><title>eval_to_const_value_raw (442,747 samples, 0.24%)</title><rect x="27.7708%" y="69" width="0.2364%" height="15" fill="rgb(231,138,38)"/><text x="28.0208%" y="79.50"></text></g><g><title>eval_to_const_value_raw (435,027 samples, 0.23%)</title><rect x="27.7749%" y="53" width="0.2323%" height="15" fill="rgb(231,145,46)"/><text x="28.0249%" y="63.50"></text></g><g><title>eval_to_allocation_raw (422,047 samples, 0.23%)</title><rect x="27.7818%" y="37" width="0.2254%" height="15" fill="rgb(251,118,11)"/><text x="28.0318%" y="47.50"></text></g><g><title>eval_to_const_value_raw (726,538 samples, 0.39%)</title><rect x="27.6246%" y="133" width="0.3880%" height="15" fill="rgb(217,147,25)"/><text x="27.8746%" y="143.50"></text></g><g><title>eval_to_const_value_raw (723,588 samples, 0.39%)</title><rect x="27.6262%" y="117" width="0.3864%" height="15" fill="rgb(247,81,37)"/><text x="27.8762%" y="127.50"></text></g><g><title>eval_to_allocation_raw (719,398 samples, 0.38%)</title><rect x="27.6284%" y="101" width="0.3842%" height="15" fill="rgb(209,12,38)"/><text x="27.8784%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (483,997 samples, 0.26%)</title><rect x="27.7541%" y="85" width="0.2585%" height="15" fill="rgb(227,1,9)"/><text x="28.0041%" y="95.50"></text></g><g><title>param_env (460,073 samples, 0.25%)</title><rect x="28.0126%" y="133" width="0.2457%" height="15" fill="rgb(248,47,43)"/><text x="28.2626%" y="143.50"></text></g><g><title>predicates_of (201,691 samples, 0.11%)</title><rect x="28.1505%" y="117" width="0.1077%" height="15" fill="rgb(221,10,30)"/><text x="28.4005%" y="127.50"></text></g><g><title>crate_lints (3,754,972 samples, 2.01%)</title><rect x="26.8679%" y="149" width="2.0052%" height="15" fill="rgb(210,229,1)"/><text x="27.1179%" y="159.50">c..</text></g><g><title>type_of (1,138,530 samples, 0.61%)</title><rect x="28.2651%" y="133" width="0.6080%" height="15" fill="rgb(222,148,37)"/><text x="28.5151%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (909,300 samples, 0.49%)</title><rect x="28.3875%" y="117" width="0.4856%" height="15" fill="rgb(234,67,33)"/><text x="28.6375%" y="127.50"></text></g><g><title>lint_checking (4,698,473 samples, 2.51%)</title><rect x="26.8668%" y="165" width="2.5091%" height="15" fill="rgb(247,98,35)"/><text x="27.1168%" y="175.50">li..</text></g><g><title>module_lints (941,571 samples, 0.50%)</title><rect x="28.8731%" y="149" width="0.5028%" height="15" fill="rgb(247,138,52)"/><text x="29.1231%" y="159.50"></text></g><g><title>lint_mod (930,631 samples, 0.50%)</title><rect x="28.8789%" y="133" width="0.4970%" height="15" fill="rgb(213,79,30)"/><text x="29.1289%" y="143.50"></text></g><g><title>privacy_access_levels (439,035 samples, 0.23%)</title><rect x="29.3759%" y="165" width="0.2345%" height="15" fill="rgb(246,177,23)"/><text x="29.6259%" y="175.50"></text></g><g><title>privacy_checking_modules (1,245,194 samples, 0.66%)</title><rect x="29.6104%" y="165" width="0.6650%" height="15" fill="rgb(230,62,27)"/><text x="29.8604%" y="175.50"></text></g><g><title>check_mod_privacy (1,237,334 samples, 0.66%)</title><rect x="29.6146%" y="149" width="0.6608%" height="15" fill="rgb(216,154,8)"/><text x="29.8646%" y="159.50"></text></g><g><title>misc_checking_3 (7,628,086 samples, 4.07%)</title><rect x="26.2133%" y="181" width="4.0735%" height="15" fill="rgb(244,35,45)"/><text x="26.4633%" y="191.50">misc..</text></g><g><title>adt_destructor (291,064 samples, 0.16%)</title><rect x="30.4189%" y="133" width="0.1554%" height="15" fill="rgb(251,115,12)"/><text x="30.6689%" y="143.50"></text></g><g><title>coherent_trait (283,424 samples, 0.15%)</title><rect x="30.4230%" y="117" width="0.1514%" height="15" fill="rgb(240,54,50)"/><text x="30.6730%" y="127.50"></text></g><g><title>specialization_graph_of (280,923 samples, 0.15%)</title><rect x="30.4243%" y="101" width="0.1500%" height="15" fill="rgb(233,84,52)"/><text x="30.6743%" y="111.50"></text></g><g><title>impl_parent (3,908,367 samples, 2.09%)</title><rect x="34.0273%" y="117" width="2.0871%" height="15" fill="rgb(207,117,47)"/><text x="34.2773%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (2,121,592 samples, 1.13%)</title><rect x="34.9815%" y="101" width="1.1330%" height="15" fill="rgb(249,43,39)"/><text x="35.2315%" y="111.50"></text></g><g><title>impl_trait_ref (7,642,129 samples, 4.08%)</title><rect x="36.1145%" y="117" width="4.0810%" height="15" fill="rgb(209,38,44)"/><text x="36.3645%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,825,735 samples, 3.11%)</title><rect x="37.0845%" y="101" width="3.1111%" height="15" fill="rgb(236,212,23)"/><text x="37.3345%" y="111.50">met..</text></g><g><title>coherent_trait (19,839,160 samples, 10.59%)</title><rect x="30.3755%" y="149" width="10.5945%" height="15" fill="rgb(242,79,21)"/><text x="30.6255%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (19,177,402 samples, 10.24%)</title><rect x="30.7289%" y="133" width="10.2411%" height="15" fill="rgb(211,96,35)"/><text x="30.9789%" y="143.50">specialization_..</text></g><g><title>trait_impls_of (1,448,119 samples, 0.77%)</title><rect x="40.1967%" y="117" width="0.7733%" height="15" fill="rgb(253,215,40)"/><text x="40.4467%" y="127.50"></text></g><g><title>implementations_of_trait (443,422 samples, 0.24%)</title><rect x="40.7332%" y="101" width="0.2368%" height="15" fill="rgb(211,81,21)"/><text x="40.9832%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (316,562 samples, 0.17%)</title><rect x="40.8010%" y="85" width="0.1691%" height="15" fill="rgb(208,190,38)"/><text x="41.0510%" y="95.50"></text></g><g><title>orphan_check_crate (218,163 samples, 0.12%)</title><rect x="40.9940%" y="149" width="0.1165%" height="15" fill="rgb(235,213,38)"/><text x="41.2440%" y="159.50"></text></g><g><title>coherence_checking (20,154,795 samples, 10.76%)</title><rect x="30.3542%" y="165" width="10.7631%" height="15" fill="rgb(237,122,38)"/><text x="30.6042%" y="175.50">coherence_checki..</text></g><g><title>associated_item (324,455 samples, 0.17%)</title><rect x="57.3453%" y="101" width="0.1733%" height="15" fill="rgb(244,218,35)"/><text x="57.5953%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (270,563 samples, 0.14%)</title><rect x="57.3741%" y="85" width="0.1445%" height="15" fill="rgb(240,68,47)"/><text x="57.6241%" y="95.50"></text></g><g><title>associated_items (462,556 samples, 0.25%)</title><rect x="57.2821%" y="117" width="0.2470%" height="15" fill="rgb(210,16,53)"/><text x="57.5321%" y="127.50"></text></g><g><title>dropck_outlives (426,772 samples, 0.23%)</title><rect x="57.5634%" y="117" width="0.2279%" height="15" fill="rgb(235,124,12)"/><text x="57.8134%" y="127.50"></text></g><g><title>generics_of (582,235 samples, 0.31%)</title><rect x="59.7825%" y="101" width="0.3109%" height="15" fill="rgb(224,169,11)"/><text x="60.0325%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (419,491 samples, 0.22%)</title><rect x="59.8694%" y="85" width="0.2240%" height="15" fill="rgb(250,166,2)"/><text x="60.1194%" y="95.50"></text></g><g><title>impl_trait_ref (623,254 samples, 0.33%)</title><rect x="60.2001%" y="101" width="0.3328%" height="15" fill="rgb(242,216,29)"/><text x="60.4501%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (482,234 samples, 0.26%)</title><rect x="60.2755%" y="85" width="0.2575%" height="15" fill="rgb(230,116,27)"/><text x="60.5255%" y="95.50"></text></g><g><title>predicates_of (891,104 samples, 0.48%)</title><rect x="60.5567%" y="101" width="0.4759%" height="15" fill="rgb(228,99,48)"/><text x="60.8067%" y="111.50"></text></g><g><title>predicates_defined_on (477,386 samples, 0.25%)</title><rect x="60.7776%" y="85" width="0.2549%" height="15" fill="rgb(253,11,6)"/><text x="61.0276%" y="95.50"></text></g><g><title>specializes (2,234,713 samples, 1.19%)</title><rect x="61.0325%" y="101" width="1.1934%" height="15" fill="rgb(247,143,39)"/><text x="61.2825%" y="111.50"></text></g><g><title>param_env (1,340,555 samples, 0.72%)</title><rect x="61.5100%" y="85" width="0.7159%" height="15" fill="rgb(236,97,10)"/><text x="61.7600%" y="95.50"></text></g><g><title>def_span (608,897 samples, 0.33%)</title><rect x="61.9007%" y="69" width="0.3252%" height="15" fill="rgb(233,208,19)"/><text x="62.1507%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (542,046 samples, 0.29%)</title><rect x="61.9364%" y="53" width="0.2895%" height="15" fill="rgb(216,164,2)"/><text x="62.1864%" y="63.50"></text></g><g><title>trait_impls_of (238,953 samples, 0.13%)</title><rect x="62.2301%" y="101" width="0.1276%" height="15" fill="rgb(220,129,5)"/><text x="62.4801%" y="111.50"></text></g><g><title>evaluate_obligation (8,562,737 samples, 4.57%)</title><rect x="57.7913%" y="117" width="4.5727%" height="15" fill="rgb(242,17,10)"/><text x="58.0413%" y="127.50">evalu..</text></g><g><title>impl_trait_ref (520,716 samples, 0.28%)</title><rect x="62.5666%" y="117" width="0.2781%" height="15" fill="rgb(242,107,0)"/><text x="62.8166%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (508,106 samples, 0.27%)</title><rect x="62.5733%" y="101" width="0.2713%" height="15" fill="rgb(251,28,31)"/><text x="62.8233%" y="111.50"></text></g><g><title>method_autoderef_steps (274,167 samples, 0.15%)</title><rect x="62.9923%" y="117" width="0.1464%" height="15" fill="rgb(233,223,10)"/><text x="63.2423%" y="127.50"></text></g><g><title>predicates_of (337,225 samples, 0.18%)</title><rect x="63.2596%" y="117" width="0.1801%" height="15" fill="rgb(215,21,27)"/><text x="63.5096%" y="127.50"></text></g><g><title>predicates_defined_on (236,155 samples, 0.13%)</title><rect x="63.3136%" y="101" width="0.1261%" height="15" fill="rgb(232,23,21)"/><text x="63.5636%" y="111.50"></text></g><g><title>associated_item (298,043 samples, 0.16%)</title><rect x="67.5173%" y="85" width="0.1592%" height="15" fill="rgb(244,5,23)"/><text x="67.7673%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (241,463 samples, 0.13%)</title><rect x="67.5475%" y="69" width="0.1289%" height="15" fill="rgb(226,81,46)"/><text x="67.7975%" y="79.50"></text></g><g><title>associated_items (423,705 samples, 0.23%)</title><rect x="67.4628%" y="101" width="0.2263%" height="15" fill="rgb(247,70,30)"/><text x="67.7128%" y="111.50"></text></g><g><title>dropck_outlives (539,114 samples, 0.29%)</title><rect x="67.7136%" y="101" width="0.2879%" height="15" fill="rgb(212,68,19)"/><text x="67.9636%" y="111.50"></text></g><g><title>normalize_projection_ty (218,932 samples, 0.12%)</title><rect x="67.8845%" y="85" width="0.1169%" height="15" fill="rgb(240,187,13)"/><text x="68.1345%" y="95.50"></text></g><g><title>evaluate_obligation (1,499,506 samples, 0.80%)</title><rect x="68.0015%" y="101" width="0.8008%" height="15" fill="rgb(223,113,26)"/><text x="68.2515%" y="111.50"></text></g><g><title>evaluate_obligation (191,232 samples, 0.10%)</title><rect x="69.1942%" y="85" width="0.1021%" height="15" fill="rgb(206,192,2)"/><text x="69.4442%" y="95.50"></text></g><g><title>method_autoderef_steps (353,206 samples, 0.19%)</title><rect x="69.1132%" y="101" width="0.1886%" height="15" fill="rgb(241,108,4)"/><text x="69.3632%" y="111.50"></text></g><g><title>predicates_of (206,974 samples, 0.11%)</title><rect x="69.3111%" y="101" width="0.1105%" height="15" fill="rgb(247,173,49)"/><text x="69.5611%" y="111.50"></text></g><g><title>typeck (11,013,562 samples, 5.88%)</title><rect x="63.5947%" y="117" width="5.8815%" height="15" fill="rgb(224,114,35)"/><text x="63.8447%" y="127.50">typeck</text></g><g><title>item_bodies_checking (53,125,343 samples, 28.37%)</title><rect x="41.1471%" y="165" width="28.3700%" height="15" fill="rgb(245,159,27)"/><text x="41.3971%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (53,121,623 samples, 28.37%)</title><rect x="41.1491%" y="149" width="28.3680%" height="15" fill="rgb(245,172,44)"/><text x="41.3991%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (52,948,408 samples, 28.28%)</title><rect x="41.2416%" y="133" width="28.2755%" height="15" fill="rgb(236,23,11)"/><text x="41.4916%" y="143.50">typeck</text></g><g><title>dropck_outlives (203,342 samples, 0.11%)</title><rect x="70.6765%" y="117" width="0.1086%" height="15" fill="rgb(205,117,38)"/><text x="70.9265%" y="127.50"></text></g><g><title>item_types_checking (2,494,708 samples, 1.33%)</title><rect x="69.5171%" y="165" width="1.3322%" height="15" fill="rgb(237,72,25)"/><text x="69.7671%" y="175.50"></text></g><g><title>check_mod_item_types (2,484,198 samples, 1.33%)</title><rect x="69.5227%" y="149" width="1.3266%" height="15" fill="rgb(244,70,9)"/><text x="69.7727%" y="159.50"></text></g><g><title>typeck (873,741 samples, 0.47%)</title><rect x="70.3827%" y="133" width="0.4666%" height="15" fill="rgb(217,125,39)"/><text x="70.6327%" y="143.50"></text></g><g><title>late_bound_vars_map (209,864 samples, 0.11%)</title><rect x="71.3007%" y="117" width="0.1121%" height="15" fill="rgb(235,36,10)"/><text x="71.5507%" y="127.50"></text></g><g><title>fn_sig (654,378 samples, 0.35%)</title><rect x="71.0929%" y="133" width="0.3495%" height="15" fill="rgb(251,123,47)"/><text x="71.3429%" y="143.50"></text></g><g><title>named_region_map (753,730 samples, 0.40%)</title><rect x="71.5390%" y="117" width="0.4025%" height="15" fill="rgb(221,13,13)"/><text x="71.7890%" y="127.50"></text></g><g><title>resolve_lifetimes (725,310 samples, 0.39%)</title><rect x="71.5542%" y="101" width="0.3873%" height="15" fill="rgb(238,131,9)"/><text x="71.8042%" y="111.50"></text></g><g><title>lint_levels (359,294 samples, 0.19%)</title><rect x="71.7497%" y="85" width="0.1919%" height="15" fill="rgb(211,50,8)"/><text x="71.9997%" y="95.50"></text></g><g><title>generics_of (957,582 samples, 0.51%)</title><rect x="71.4423%" y="133" width="0.5114%" height="15" fill="rgb(245,182,24)"/><text x="71.6923%" y="143.50"></text></g><g><title>explicit_predicates_of (202,732 samples, 0.11%)</title><rect x="72.1351%" y="101" width="0.1083%" height="15" fill="rgb(242,14,37)"/><text x="72.3851%" y="111.50"></text></g><g><title>predicates_of (710,905 samples, 0.38%)</title><rect x="72.0138%" y="133" width="0.3796%" height="15" fill="rgb(246,228,12)"/><text x="72.2638%" y="143.50"></text></g><g><title>predicates_defined_on (620,045 samples, 0.33%)</title><rect x="72.0623%" y="117" width="0.3311%" height="15" fill="rgb(213,55,15)"/><text x="72.3123%" y="127.50"></text></g><g><title>inferred_outlives_of (280,863 samples, 0.15%)</title><rect x="72.2434%" y="101" width="0.1500%" height="15" fill="rgb(209,9,3)"/><text x="72.4934%" y="111.50"></text></g><g><title>inferred_outlives_crate (246,603 samples, 0.13%)</title><rect x="72.2617%" y="85" width="0.1317%" height="15" fill="rgb(230,59,30)"/><text x="72.5117%" y="95.50"></text></g><g><title>type_collecting (3,055,885 samples, 1.63%)</title><rect x="70.8515%" y="165" width="1.6319%" height="15" fill="rgb(209,121,21)"/><text x="71.1015%" y="175.50"></text></g><g><title>collect_mod_item_types (3,042,035 samples, 1.62%)</title><rect x="70.8589%" y="149" width="1.6245%" height="15" fill="rgb(220,109,13)"/><text x="71.1089%" y="159.50"></text></g><g><title>evaluate_obligation (453,812 samples, 0.24%)</title><rect x="73.9453%" y="133" width="0.2423%" height="15" fill="rgb(232,18,1)"/><text x="74.1953%" y="143.50"></text></g><g><title>param_env (440,165 samples, 0.24%)</title><rect x="74.2869%" y="133" width="0.2351%" height="15" fill="rgb(215,41,42)"/><text x="74.5369%" y="143.50"></text></g><g><title>region_scope_tree (564,158 samples, 0.30%)</title><rect x="74.5449%" y="133" width="0.3013%" height="15" fill="rgb(224,123,36)"/><text x="74.7949%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,927,307 samples, 2.10%)</title><rect x="72.7668%" y="149" width="2.0973%" height="15" fill="rgb(240,125,3)"/><text x="73.0168%" y="159.50">c..</text></g><g><title>adt_sized_constraint (292,232 samples, 0.16%)</title><rect x="75.9994%" y="101" width="0.1561%" height="15" fill="rgb(205,98,50)"/><text x="76.2494%" y="111.50"></text></g><g><title>adt_sized_constraint (342,643 samples, 0.18%)</title><rect x="75.9750%" y="117" width="0.1830%" height="15" fill="rgb(205,185,37)"/><text x="76.2250%" y="127.50"></text></g><g><title>evaluate_obligation (925,789 samples, 0.49%)</title><rect x="75.6807%" y="133" width="0.4944%" height="15" fill="rgb(238,207,15)"/><text x="75.9307%" y="143.50"></text></g><g><title>param_env (354,723 samples, 0.19%)</title><rect x="76.2403%" y="133" width="0.1894%" height="15" fill="rgb(213,199,42)"/><text x="76.4903%" y="143.50"></text></g><g><title>predicates_of (190,223 samples, 0.10%)</title><rect x="76.4297%" y="133" width="0.1016%" height="15" fill="rgb(235,201,11)"/><text x="76.6797%" y="143.50"></text></g><g><title>region_scope_tree (199,061 samples, 0.11%)</title><rect x="76.5313%" y="133" width="0.1063%" height="15" fill="rgb(207,46,11)"/><text x="76.7813%" y="143.50"></text></g><g><title>check_item_well_formed (3,433,997 samples, 1.83%)</title><rect x="74.8641%" y="149" width="1.8338%" height="15" fill="rgb(241,35,35)"/><text x="75.1141%" y="159.50">c..</text></g><g><title>analysis (143,262,582 samples, 76.51%)</title><rect x="0.4024%" y="197" width="76.5050%" height="15" fill="rgb(243,32,47)"/><text x="0.6524%" y="207.50">analysis</text></g><g><title>type_check_crate (87,301,266 samples, 46.62%)</title><rect x="30.2868%" y="181" width="46.6206%" height="15" fill="rgb(247,202,23)"/><text x="30.5368%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,273,313 samples, 4.42%)</title><rect x="72.4893%" y="165" width="4.4181%" height="15" fill="rgb(219,102,11)"/><text x="72.7393%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (392,334 samples, 0.21%)</title><rect x="76.6979%" y="149" width="0.2095%" height="15" fill="rgb(243,110,44)"/><text x="76.9479%" y="159.50"></text></g><g><title>codegen_crate (423,274 samples, 0.23%)</title><rect x="76.9124%" y="197" width="0.2260%" height="15" fill="rgb(222,74,54)"/><text x="77.1624%" y="207.50"></text></g><g><title>AST_validation (251,113 samples, 0.13%)</title><rect x="77.2361%" y="181" width="0.1341%" height="15" fill="rgb(216,99,12)"/><text x="77.4861%" y="191.50"></text></g><g><title>metadata_load_macro (437,474 samples, 0.23%)</title><rect x="88.0946%" y="149" width="0.2336%" height="15" fill="rgb(226,22,26)"/><text x="88.3446%" y="159.50"></text></g><g><title>metadata_register_crate (1,275,934 samples, 0.68%)</title><rect x="88.3282%" y="149" width="0.6814%" height="15" fill="rgb(217,163,10)"/><text x="88.5782%" y="159.50"></text></g><g><title>metadata_register_crate (463,476 samples, 0.25%)</title><rect x="88.7621%" y="133" width="0.2475%" height="15" fill="rgb(213,25,53)"/><text x="89.0121%" y="143.50"></text></g><g><title>macro_expand_crate (21,930,625 samples, 11.71%)</title><rect x="77.4678%" y="181" width="11.7114%" height="15" fill="rgb(252,105,26)"/><text x="77.7178%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (21,912,655 samples, 11.70%)</title><rect x="77.4774%" y="165" width="11.7018%" height="15" fill="rgb(220,39,43)"/><text x="77.7274%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (317,514 samples, 0.17%)</title><rect x="89.0096%" y="149" width="0.1696%" height="15" fill="rgb(229,68,48)"/><text x="89.2596%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (226,823 samples, 0.12%)</title><rect x="89.1813%" y="181" width="0.1211%" height="15" fill="rgb(252,8,32)"/><text x="89.4313%" y="191.50"></text></g><g><title>finalize_macro_resolutions (251,133 samples, 0.13%)</title><rect x="89.3534%" y="165" width="0.1341%" height="15" fill="rgb(223,20,43)"/><text x="89.6034%" y="175.50"></text></g><g><title>late_resolve_crate (2,640,109 samples, 1.41%)</title><rect x="89.4876%" y="165" width="1.4099%" height="15" fill="rgb(229,81,49)"/><text x="89.7376%" y="175.50"></text></g><g><title>configure_and_expand (25,928,639 samples, 13.85%)</title><rect x="77.1385%" y="197" width="13.8464%" height="15" fill="rgb(236,28,36)"/><text x="77.3885%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,150,495 samples, 1.68%)</title><rect x="89.3024%" y="181" width="1.6824%" height="15" fill="rgb(249,185,26)"/><text x="89.5524%" y="191.50"></text></g><g><title>drop_ast (345,004 samples, 0.18%)</title><rect x="90.9849%" y="197" width="0.1842%" height="15" fill="rgb(249,174,33)"/><text x="91.2349%" y="207.50"></text></g><g><title>early_lint_checks (597,757 samples, 0.32%)</title><rect x="91.1783%" y="197" width="0.3192%" height="15" fill="rgb(233,201,37)"/><text x="91.4283%" y="207.50"></text></g><g><title>free_global_ctxt (4,525,519 samples, 2.42%)</title><rect x="91.4975%" y="197" width="2.4167%" height="15" fill="rgb(221,78,26)"/><text x="91.7475%" y="207.50">fr..</text></g><g><title>mir_for_ctfe (477,345 samples, 0.25%)</title><rect x="94.8795%" y="181" width="0.2549%" height="15" fill="rgb(250,127,30)"/><text x="95.1295%" y="191.50"></text></g><g><title>generate_crate_metadata (2,379,196 samples, 1.27%)</title><rect x="93.9142%" y="197" width="1.2705%" height="15" fill="rgb(230,49,44)"/><text x="94.1642%" y="207.50"></text></g><g><title>hir_lowering (4,689,632 samples, 2.50%)</title><rect x="95.1847%" y="197" width="2.5044%" height="15" fill="rgb(229,67,23)"/><text x="95.4347%" y="207.50">hi..</text></g><g><title>parse_crate (2,310,736 samples, 1.23%)</title><rect x="97.7237%" y="197" width="1.2340%" height="15" fill="rgb(249,83,47)"/><text x="97.9737%" y="207.50"></text></g><g><title>prepare_outputs (222,533 samples, 0.12%)</title><rect x="98.9611%" y="197" width="0.1188%" height="15" fill="rgb(215,43,3)"/><text x="99.2111%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,248,674 samples, 0.67%)</title><rect x="99.0799%" y="197" width="0.6668%" height="15" fill="rgb(238,154,13)"/><text x="99.3299%" y="207.50"></text></g><g><title>all (187,259,102 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (187,259,102 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (381,245 samples, 0.20%)</title><rect x="99.7964%" y="197" width="0.2036%" height="15" fill="rgb(235,30,7)"/><text x="100.0464%" y="207.50"></text></g></svg></svg>