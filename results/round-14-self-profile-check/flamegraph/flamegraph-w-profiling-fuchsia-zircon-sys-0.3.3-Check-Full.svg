<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (552,576 samples, 0.31%)</title><rect x="12.2881%" y="149" width="0.3143%" height="15" fill="rgb(227,0,7)"/><text x="12.5381%" y="159.50"></text></g><g><title>resolve_lifetimes (241,342 samples, 0.14%)</title><rect x="12.4652%" y="133" width="0.1373%" height="15" fill="rgb(217,0,24)"/><text x="12.7152%" y="143.50"></text></g><g><title>needs_drop_raw (232,351 samples, 0.13%)</title><rect x="16.1224%" y="85" width="0.1322%" height="15" fill="rgb(221,193,54)"/><text x="16.3724%" y="95.50"></text></g><g><title>resolve_instance (383,416 samples, 0.22%)</title><rect x="16.2545%" y="85" width="0.2181%" height="15" fill="rgb(248,212,6)"/><text x="16.5045%" y="95.50"></text></g><g><title>thir_body (1,307,265 samples, 0.74%)</title><rect x="16.4885%" y="85" width="0.7436%" height="15" fill="rgb(208,68,35)"/><text x="16.7385%" y="95.50"></text></g><g><title>mir_const (6,733,245 samples, 3.83%)</title><rect x="13.4111%" y="133" width="3.8299%" height="15" fill="rgb(232,128,0)"/><text x="13.6611%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (5,870,175 samples, 3.34%)</title><rect x="13.9021%" y="117" width="3.3389%" height="15" fill="rgb(207,160,47)"/><text x="14.1521%" y="127.50">uns..</text></g><g><title>mir_built (5,366,820 samples, 3.05%)</title><rect x="14.1884%" y="101" width="3.0526%" height="15" fill="rgb(228,23,34)"/><text x="14.4384%" y="111.50">mir..</text></g><g><title>thir_body (469,993 samples, 0.27%)</title><rect x="18.9275%" y="69" width="0.2673%" height="15" fill="rgb(218,30,26)"/><text x="19.1775%" y="79.50"></text></g><g><title>mir_promoted (11,621,151 samples, 6.61%)</title><rect x="12.6024%" y="149" width="6.6101%" height="15" fill="rgb(220,122,19)"/><text x="12.8524%" y="159.50">mir_promo..</text></g><g><title>mir_const_qualif (3,466,109 samples, 1.97%)</title><rect x="17.2410%" y="133" width="1.9715%" height="15" fill="rgb(250,228,42)"/><text x="17.4910%" y="143.50">m..</text></g><g><title>mir_const (2,908,979 samples, 1.65%)</title><rect x="17.5579%" y="117" width="1.6546%" height="15" fill="rgb(240,193,28)"/><text x="17.8079%" y="127.50"></text></g><g><title>unsafety_check_result (2,084,711 samples, 1.19%)</title><rect x="18.0267%" y="101" width="1.1858%" height="15" fill="rgb(216,20,37)"/><text x="18.2767%" y="111.50"></text></g><g><title>mir_built (1,833,987 samples, 1.04%)</title><rect x="18.1693%" y="85" width="1.0432%" height="15" fill="rgb(206,188,39)"/><text x="18.4193%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (238,101 samples, 0.14%)</title><rect x="19.2145%" y="149" width="0.1354%" height="15" fill="rgb(217,207,13)"/><text x="19.4645%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,316,189 samples, 0.75%)</title><rect x="19.4307%" y="149" width="0.7486%" height="15" fill="rgb(231,73,38)"/><text x="19.6807%" y="159.50"></text></g><g><title>MIR_borrow_checking (34,256,432 samples, 19.49%)</title><rect x="0.6976%" y="181" width="19.4850%" height="15" fill="rgb(225,20,46)"/><text x="0.9476%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (33,892,068 samples, 19.28%)</title><rect x="0.9048%" y="165" width="19.2778%" height="15" fill="rgb(210,31,41)"/><text x="1.1548%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,689,739 samples, 0.96%)</title><rect x="20.1826%" y="181" width="0.9611%" height="15" fill="rgb(221,200,47)"/><text x="20.4326%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,486,065 samples, 0.85%)</title><rect x="20.2984%" y="165" width="0.8453%" height="15" fill="rgb(226,26,5)"/><text x="20.5484%" y="175.50"></text></g><g><title>hir_module_items (376,334 samples, 0.21%)</title><rect x="21.1437%" y="181" width="0.2141%" height="15" fill="rgb(249,33,26)"/><text x="21.3937%" y="191.50"></text></g><g><title>codegen_fn_attrs (251,153 samples, 0.14%)</title><rect x="21.7664%" y="117" width="0.1429%" height="15" fill="rgb(235,183,28)"/><text x="22.0164%" y="127.50"></text></g><g><title>codegen_fn_attrs (555,076 samples, 0.32%)</title><rect x="21.6037%" y="149" width="0.3157%" height="15" fill="rgb(221,5,38)"/><text x="21.8537%" y="159.50"></text></g><g><title>should_inherit_track_caller (441,746 samples, 0.25%)</title><rect x="21.6682%" y="133" width="0.2513%" height="15" fill="rgb(247,18,42)"/><text x="21.9182%" y="143.50"></text></g><g><title>check_mod_attrs (967,501 samples, 0.55%)</title><rect x="21.3693%" y="165" width="0.5503%" height="15" fill="rgb(241,131,45)"/><text x="21.6193%" y="175.50"></text></g><g><title>is_copy_raw (337,543 samples, 0.19%)</title><rect x="22.2135%" y="149" width="0.1920%" height="15" fill="rgb(249,31,29)"/><text x="22.4635%" y="159.50"></text></g><g><title>evaluate_obligation (298,783 samples, 0.17%)</title><rect x="22.2355%" y="133" width="0.1699%" height="15" fill="rgb(225,111,53)"/><text x="22.4855%" y="143.50"></text></g><g><title>lint_levels (257,573 samples, 0.15%)</title><rect x="22.4055%" y="149" width="0.1465%" height="15" fill="rgb(238,160,17)"/><text x="22.6555%" y="159.50"></text></g><g><title>param_env (421,505 samples, 0.24%)</title><rect x="22.6808%" y="149" width="0.2398%" height="15" fill="rgb(214,148,48)"/><text x="22.9308%" y="159.50"></text></g><g><title>predicates_of (286,453 samples, 0.16%)</title><rect x="22.7576%" y="133" width="0.1629%" height="15" fill="rgb(232,36,49)"/><text x="23.0076%" y="143.50"></text></g><g><title>predicates_defined_on (284,273 samples, 0.16%)</title><rect x="22.7588%" y="117" width="0.1617%" height="15" fill="rgb(209,103,24)"/><text x="23.0088%" y="127.50"></text></g><g><title>inferred_outlives_of (260,883 samples, 0.15%)</title><rect x="22.7721%" y="101" width="0.1484%" height="15" fill="rgb(229,88,8)"/><text x="23.0221%" y="111.50"></text></g><g><title>inferred_outlives_crate (253,493 samples, 0.14%)</title><rect x="22.7763%" y="85" width="0.1442%" height="15" fill="rgb(213,181,19)"/><text x="23.0263%" y="95.50"></text></g><g><title>check_mod_unstable_api_usage (1,537,867 samples, 0.87%)</title><rect x="22.0883%" y="165" width="0.8747%" height="15" fill="rgb(254,191,54)"/><text x="22.3383%" y="175.50"></text></g><g><title>misc_checking_1 (2,922,313 samples, 1.66%)</title><rect x="21.3581%" y="181" width="1.6622%" height="15" fill="rgb(241,83,37)"/><text x="21.6081%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (347,174 samples, 0.20%)</title><rect x="23.0213%" y="165" width="0.1975%" height="15" fill="rgb(233,36,39)"/><text x="23.2713%" y="175.50"></text></g><g><title>check_mod_liveness (205,383 samples, 0.12%)</title><rect x="23.1020%" y="149" width="0.1168%" height="15" fill="rgb(226,3,54)"/><text x="23.3520%" y="159.50"></text></g><g><title>misc_checking_2 (1,428,126 samples, 0.81%)</title><rect x="23.0203%" y="181" width="0.8123%" height="15" fill="rgb(245,192,40)"/><text x="23.2703%" y="191.50"></text></g><g><title>match_checking (1,079,102 samples, 0.61%)</title><rect x="23.2188%" y="165" width="0.6138%" height="15" fill="rgb(238,167,29)"/><text x="23.4688%" y="175.50"></text></g><g><title>check_match (994,701 samples, 0.57%)</title><rect x="23.2668%" y="149" width="0.5658%" height="15" fill="rgb(232,182,51)"/><text x="23.5168%" y="159.50"></text></g><g><title>check_private_in_public (449,265 samples, 0.26%)</title><rect x="23.8386%" y="165" width="0.2555%" height="15" fill="rgb(231,60,39)"/><text x="24.0886%" y="175.50"></text></g><g><title>death_checking (911,900 samples, 0.52%)</title><rect x="24.0941%" y="165" width="0.5187%" height="15" fill="rgb(208,69,12)"/><text x="24.3441%" y="175.50"></text></g><g><title>mir_for_ctfe (543,933 samples, 0.31%)</title><rect x="26.0349%" y="85" width="0.3094%" height="15" fill="rgb(235,93,37)"/><text x="26.2849%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,688,747 samples, 0.96%)</title><rect x="25.4519%" y="133" width="0.9606%" height="15" fill="rgb(213,116,39)"/><text x="25.7019%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,592,026 samples, 0.91%)</title><rect x="25.5069%" y="117" width="0.9055%" height="15" fill="rgb(222,207,29)"/><text x="25.7569%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,461,454 samples, 0.83%)</title><rect x="25.5812%" y="101" width="0.8313%" height="15" fill="rgb(206,96,30)"/><text x="25.8312%" y="111.50"></text></g><g><title>crate_lints (4,455,539 samples, 2.53%)</title><rect x="24.6141%" y="149" width="2.5343%" height="15" fill="rgb(218,138,4)"/><text x="24.8641%" y="159.50">cr..</text></g><g><title>type_of (1,130,751 samples, 0.64%)</title><rect x="26.5053%" y="133" width="0.6432%" height="15" fill="rgb(250,191,14)"/><text x="26.7553%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (896,589 samples, 0.51%)</title><rect x="26.6384%" y="117" width="0.5100%" height="15" fill="rgb(239,60,40)"/><text x="26.8884%" y="127.50"></text></g><g><title>lint_checking (5,214,897 samples, 2.97%)</title><rect x="24.6128%" y="165" width="2.9662%" height="15" fill="rgb(206,27,48)"/><text x="24.8628%" y="175.50">lin..</text></g><g><title>module_lints (757,018 samples, 0.43%)</title><rect x="27.1484%" y="149" width="0.4306%" height="15" fill="rgb(225,35,8)"/><text x="27.3984%" y="159.50"></text></g><g><title>lint_mod (753,438 samples, 0.43%)</title><rect x="27.1505%" y="133" width="0.4286%" height="15" fill="rgb(250,213,24)"/><text x="27.4005%" y="143.50"></text></g><g><title>privacy_access_levels (699,358 samples, 0.40%)</title><rect x="27.5790%" y="165" width="0.3978%" height="15" fill="rgb(247,123,22)"/><text x="27.8290%" y="175.50"></text></g><g><title>privacy_checking_modules (1,189,143 samples, 0.68%)</title><rect x="27.9768%" y="165" width="0.6764%" height="15" fill="rgb(231,138,38)"/><text x="28.2268%" y="175.50"></text></g><g><title>check_mod_privacy (1,187,263 samples, 0.68%)</title><rect x="27.9779%" y="149" width="0.6753%" height="15" fill="rgb(231,145,46)"/><text x="28.2279%" y="159.50"></text></g><g><title>misc_checking_3 (8,490,854 samples, 4.83%)</title><rect x="23.8326%" y="181" width="4.8296%" height="15" fill="rgb(251,118,11)"/><text x="24.0826%" y="191.50">misc_c..</text></g><g><title>impl_trait_ref (189,463 samples, 0.11%)</title><rect x="28.8913%" y="85" width="0.1078%" height="15" fill="rgb(217,147,25)"/><text x="29.1413%" y="95.50"></text></g><g><title>adt_destructor (335,964 samples, 0.19%)</title><rect x="28.8217%" y="133" width="0.1911%" height="15" fill="rgb(247,81,37)"/><text x="29.0717%" y="143.50"></text></g><g><title>coherent_trait (326,804 samples, 0.19%)</title><rect x="28.8269%" y="117" width="0.1859%" height="15" fill="rgb(209,12,38)"/><text x="29.0769%" y="127.50"></text></g><g><title>specialization_graph_of (325,184 samples, 0.18%)</title><rect x="28.8278%" y="101" width="0.1850%" height="15" fill="rgb(227,1,9)"/><text x="29.0778%" y="111.50"></text></g><g><title>mir_borrowck (212,702 samples, 0.12%)</title><rect x="29.1052%" y="53" width="0.1210%" height="15" fill="rgb(248,47,43)"/><text x="29.3552%" y="63.50"></text></g><g><title>mir_for_ctfe (273,523 samples, 0.16%)</title><rect x="29.0708%" y="85" width="0.1556%" height="15" fill="rgb(221,10,30)"/><text x="29.3208%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (255,083 samples, 0.15%)</title><rect x="29.0813%" y="69" width="0.1451%" height="15" fill="rgb(210,229,1)"/><text x="29.3313%" y="79.50"></text></g><g><title>eval_to_const_value_raw (185,582 samples, 0.11%)</title><rect x="29.2311%" y="69" width="0.1056%" height="15" fill="rgb(222,148,37)"/><text x="29.4811%" y="79.50"></text></g><g><title>eval_to_const_value_raw (184,062 samples, 0.10%)</title><rect x="29.2319%" y="53" width="0.1047%" height="15" fill="rgb(234,67,33)"/><text x="29.4819%" y="63.50"></text></g><g><title>eval_to_allocation_raw (180,372 samples, 0.10%)</title><rect x="29.2340%" y="37" width="0.1026%" height="15" fill="rgb(247,98,35)"/><text x="29.4840%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (197,002 samples, 0.11%)</title><rect x="29.2266%" y="85" width="0.1121%" height="15" fill="rgb(247,138,52)"/><text x="29.4766%" y="95.50"></text></g><g><title>eval_to_const_value_raw (671,127 samples, 0.38%)</title><rect x="29.0128%" y="133" width="0.3817%" height="15" fill="rgb(213,79,30)"/><text x="29.2628%" y="143.50"></text></g><g><title>eval_to_const_value_raw (669,567 samples, 0.38%)</title><rect x="29.0137%" y="117" width="0.3808%" height="15" fill="rgb(246,177,23)"/><text x="29.2637%" y="127.50"></text></g><g><title>eval_to_allocation_raw (668,117 samples, 0.38%)</title><rect x="29.0145%" y="101" width="0.3800%" height="15" fill="rgb(230,62,27)"/><text x="29.2645%" y="111.50"></text></g><g><title>is_copy_raw (359,784 samples, 0.20%)</title><rect x="29.3945%" y="133" width="0.2046%" height="15" fill="rgb(216,154,8)"/><text x="29.6445%" y="143.50"></text></g><g><title>evaluate_obligation (318,283 samples, 0.18%)</title><rect x="29.4181%" y="117" width="0.1810%" height="15" fill="rgb(244,35,45)"/><text x="29.6681%" y="127.50"></text></g><g><title>impl_parent (2,304,138 samples, 1.31%)</title><rect x="31.8034%" y="117" width="1.3106%" height="15" fill="rgb(251,115,12)"/><text x="32.0534%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,381,500 samples, 0.79%)</title><rect x="32.3282%" y="101" width="0.7858%" height="15" fill="rgb(240,54,50)"/><text x="32.5782%" y="111.50"></text></g><g><title>impl_trait_ref (5,165,233 samples, 2.94%)</title><rect x="33.1140%" y="117" width="2.9380%" height="15" fill="rgb(233,84,52)"/><text x="33.3640%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,017,898 samples, 2.29%)</title><rect x="33.7666%" y="101" width="2.2854%" height="15" fill="rgb(207,117,47)"/><text x="34.0166%" y="111.50">m..</text></g><g><title>coherent_trait (13,440,890 samples, 7.65%)</title><rect x="28.7555%" y="149" width="7.6452%" height="15" fill="rgb(249,43,39)"/><text x="29.0055%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (11,872,793 samples, 6.75%)</title><rect x="29.6474%" y="133" width="6.7532%" height="15" fill="rgb(209,38,44)"/><text x="29.8974%" y="143.50">specializ..</text></g><g><title>trait_impls_of (610,907 samples, 0.35%)</title><rect x="36.0532%" y="117" width="0.3475%" height="15" fill="rgb(236,212,23)"/><text x="36.3032%" y="127.50"></text></g><g><title>coherence_checking (13,548,541 samples, 7.71%)</title><rect x="28.7441%" y="165" width="7.7064%" height="15" fill="rgb(242,79,21)"/><text x="28.9941%" y="175.50">coherence_c..</text></g><g><title>dropck_outlives (195,572 samples, 0.11%)</title><rect x="49.6121%" y="117" width="0.1112%" height="15" fill="rgb(211,96,35)"/><text x="49.8621%" y="127.50"></text></g><g><title>mir_borrowck (202,932 samples, 0.12%)</title><rect x="49.8509%" y="37" width="0.1154%" height="15" fill="rgb(253,215,40)"/><text x="50.1009%" y="47.50"></text></g><g><title>mir_for_ctfe (297,734 samples, 0.17%)</title><rect x="49.7973%" y="69" width="0.1694%" height="15" fill="rgb(211,81,21)"/><text x="50.0473%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (272,004 samples, 0.15%)</title><rect x="49.8119%" y="53" width="0.1547%" height="15" fill="rgb(208,190,38)"/><text x="50.0619%" y="63.50"></text></g><g><title>eval_to_const_value_raw (428,276 samples, 0.24%)</title><rect x="49.7234%" y="117" width="0.2436%" height="15" fill="rgb(235,213,38)"/><text x="49.9734%" y="127.50"></text></g><g><title>eval_to_const_value_raw (426,566 samples, 0.24%)</title><rect x="49.7244%" y="101" width="0.2426%" height="15" fill="rgb(237,122,38)"/><text x="49.9744%" y="111.50"></text></g><g><title>eval_to_allocation_raw (422,856 samples, 0.24%)</title><rect x="49.7265%" y="85" width="0.2405%" height="15" fill="rgb(244,218,35)"/><text x="49.9765%" y="95.50"></text></g><g><title>mir_for_ctfe (865,094 samples, 0.49%)</title><rect x="51.5253%" y="53" width="0.4921%" height="15" fill="rgb(240,68,47)"/><text x="51.7753%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (856,434 samples, 0.49%)</title><rect x="51.5303%" y="37" width="0.4871%" height="15" fill="rgb(210,16,53)"/><text x="51.7803%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,920,141 samples, 1.09%)</title><rect x="50.9418%" y="101" width="1.0922%" height="15" fill="rgb(235,124,12)"/><text x="51.1918%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,896,791 samples, 1.08%)</title><rect x="50.9550%" y="85" width="1.0789%" height="15" fill="rgb(224,169,11)"/><text x="51.2050%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,857,901 samples, 1.06%)</title><rect x="50.9772%" y="69" width="1.0568%" height="15" fill="rgb(250,166,2)"/><text x="51.2272%" y="79.50"></text></g><g><title>predicates_of (196,991 samples, 0.11%)</title><rect x="52.1281%" y="101" width="0.1120%" height="15" fill="rgb(242,216,29)"/><text x="52.3781%" y="111.50"></text></g><g><title>evaluate_obligation (4,149,781 samples, 2.36%)</title><rect x="49.9670%" y="117" width="2.3604%" height="15" fill="rgb(230,116,27)"/><text x="50.2170%" y="127.50">ev..</text></g><g><title>param_env (185,502 samples, 0.11%)</title><rect x="52.5666%" y="117" width="0.1055%" height="15" fill="rgb(228,99,48)"/><text x="52.8166%" y="127.50"></text></g><g><title>item_bodies_checking (28,794,091 samples, 16.38%)</title><rect x="36.4790%" y="165" width="16.3780%" height="15" fill="rgb(253,11,6)"/><text x="36.7290%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,790,551 samples, 16.38%)</title><rect x="36.4811%" y="149" width="16.3760%" height="15" fill="rgb(247,143,39)"/><text x="36.7311%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (28,651,357 samples, 16.30%)</title><rect x="36.5602%" y="133" width="16.2968%" height="15" fill="rgb(236,97,10)"/><text x="36.8102%" y="143.50">typeck</text></g><g><title>generics_of (465,406 samples, 0.26%)</title><rect x="57.8910%" y="101" width="0.2647%" height="15" fill="rgb(233,208,19)"/><text x="58.1410%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (331,981 samples, 0.19%)</title><rect x="57.9669%" y="85" width="0.1888%" height="15" fill="rgb(216,164,2)"/><text x="58.2169%" y="95.50"></text></g><g><title>impl_trait_ref (776,659 samples, 0.44%)</title><rect x="58.2210%" y="101" width="0.4418%" height="15" fill="rgb(220,129,5)"/><text x="58.4710%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (646,489 samples, 0.37%)</title><rect x="58.2950%" y="85" width="0.3677%" height="15" fill="rgb(242,17,10)"/><text x="58.5450%" y="95.50"></text></g><g><title>predicates_of (722,239 samples, 0.41%)</title><rect x="58.6822%" y="101" width="0.4108%" height="15" fill="rgb(242,107,0)"/><text x="58.9322%" y="111.50"></text></g><g><title>predicates_defined_on (389,983 samples, 0.22%)</title><rect x="58.8712%" y="85" width="0.2218%" height="15" fill="rgb(251,28,31)"/><text x="59.1212%" y="95.50"></text></g><g><title>specializes (1,933,372 samples, 1.10%)</title><rect x="59.0930%" y="101" width="1.0997%" height="15" fill="rgb(233,223,10)"/><text x="59.3430%" y="111.50"></text></g><g><title>param_env (1,132,342 samples, 0.64%)</title><rect x="59.5486%" y="85" width="0.6441%" height="15" fill="rgb(215,21,27)"/><text x="59.7986%" y="95.50"></text></g><g><title>def_span (526,348 samples, 0.30%)</title><rect x="59.8933%" y="69" width="0.2994%" height="15" fill="rgb(232,23,21)"/><text x="60.1433%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (467,107 samples, 0.27%)</title><rect x="59.9270%" y="53" width="0.2657%" height="15" fill="rgb(244,5,23)"/><text x="60.1770%" y="63.50"></text></g><g><title>evaluate_obligation (6,346,540 samples, 3.61%)</title><rect x="56.6454%" y="117" width="3.6099%" height="15" fill="rgb(226,81,46)"/><text x="56.8954%" y="127.50">eval..</text></g><g><title>fn_sig (181,353 samples, 0.10%)</title><rect x="60.2563%" y="117" width="0.1032%" height="15" fill="rgb(247,70,30)"/><text x="60.5063%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (180,303 samples, 0.10%)</title><rect x="60.2569%" y="101" width="0.1026%" height="15" fill="rgb(212,68,19)"/><text x="60.5069%" y="111.50"></text></g><g><title>item_types_checking (13,495,381 samples, 7.68%)</title><rect x="52.8571%" y="165" width="7.6762%" height="15" fill="rgb(240,187,13)"/><text x="53.1071%" y="175.50">item_types_..</text></g><g><title>check_mod_item_types (13,491,520 samples, 7.67%)</title><rect x="52.8593%" y="149" width="7.6740%" height="15" fill="rgb(223,113,26)"/><text x="53.1093%" y="159.50">check_mod_i..</text></g><g><title>typeck (11,918,541 samples, 6.78%)</title><rect x="53.7540%" y="133" width="6.7792%" height="15" fill="rgb(206,192,2)"/><text x="54.0040%" y="143.50">typeck</text></g><g><title>mir_const_qualif (345,824 samples, 0.20%)</title><rect x="61.1600%" y="85" width="0.1967%" height="15" fill="rgb(241,108,4)"/><text x="61.4100%" y="95.50"></text></g><g><title>mir_const (284,452 samples, 0.16%)</title><rect x="61.1949%" y="69" width="0.1618%" height="15" fill="rgb(247,173,49)"/><text x="61.4449%" y="79.50"></text></g><g><title>unsafety_check_result (194,721 samples, 0.11%)</title><rect x="61.2460%" y="53" width="0.1108%" height="15" fill="rgb(224,114,35)"/><text x="61.4960%" y="63.50"></text></g><g><title>mir_borrowck (787,788 samples, 0.45%)</title><rect x="61.5445%" y="53" width="0.4481%" height="15" fill="rgb(245,159,27)"/><text x="61.7945%" y="63.50"></text></g><g><title>mir_for_ctfe (1,121,191 samples, 0.64%)</title><rect x="61.3567%" y="85" width="0.6377%" height="15" fill="rgb(245,172,44)"/><text x="61.6067%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,024,701 samples, 0.58%)</title><rect x="61.4116%" y="69" width="0.5828%" height="15" fill="rgb(236,23,11)"/><text x="61.6616%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,225,415 samples, 1.27%)</title><rect x="60.9638%" y="133" width="1.2658%" height="15" fill="rgb(205,117,38)"/><text x="61.2138%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,204,085 samples, 1.25%)</title><rect x="60.9759%" y="117" width="1.2537%" height="15" fill="rgb(237,72,25)"/><text x="61.2259%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,183,604 samples, 1.24%)</title><rect x="60.9875%" y="101" width="1.2420%" height="15" fill="rgb(244,70,9)"/><text x="61.2375%" y="111.50"></text></g><g><title>typeck (411,216 samples, 0.23%)</title><rect x="61.9957%" y="85" width="0.2339%" height="15" fill="rgb(217,125,39)"/><text x="62.2457%" y="95.50"></text></g><g><title>late_bound_vars_map (255,411 samples, 0.15%)</title><rect x="62.4522%" y="117" width="0.1453%" height="15" fill="rgb(235,36,10)"/><text x="62.7022%" y="127.50"></text></g><g><title>resolve_lifetimes (179,101 samples, 0.10%)</title><rect x="62.4956%" y="101" width="0.1019%" height="15" fill="rgb(251,123,47)"/><text x="62.7456%" y="111.50"></text></g><g><title>fn_sig (684,200 samples, 0.39%)</title><rect x="62.2296%" y="133" width="0.3892%" height="15" fill="rgb(221,13,13)"/><text x="62.4796%" y="143.50"></text></g><g><title>named_region_map (472,176 samples, 0.27%)</title><rect x="62.7719%" y="117" width="0.2686%" height="15" fill="rgb(238,131,9)"/><text x="63.0219%" y="127.50"></text></g><g><title>resolve_lifetimes (433,455 samples, 0.25%)</title><rect x="62.7939%" y="101" width="0.2465%" height="15" fill="rgb(211,50,8)"/><text x="63.0439%" y="111.50"></text></g><g><title>generics_of (778,809 samples, 0.44%)</title><rect x="62.6187%" y="133" width="0.4430%" height="15" fill="rgb(245,182,24)"/><text x="62.8687%" y="143.50"></text></g><g><title>explicit_predicates_of (230,681 samples, 0.13%)</title><rect x="63.4490%" y="101" width="0.1312%" height="15" fill="rgb(242,14,37)"/><text x="63.6990%" y="111.50"></text></g><g><title>predicates_of (774,685 samples, 0.44%)</title><rect x="63.1709%" y="133" width="0.4406%" height="15" fill="rgb(246,228,12)"/><text x="63.4209%" y="143.50"></text></g><g><title>predicates_defined_on (585,523 samples, 0.33%)</title><rect x="63.2784%" y="117" width="0.3330%" height="15" fill="rgb(213,55,15)"/><text x="63.5284%" y="127.50"></text></g><g><title>type_collecting (5,554,691 samples, 3.16%)</title><rect x="60.5338%" y="165" width="3.1595%" height="15" fill="rgb(209,9,3)"/><text x="60.7838%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (5,552,081 samples, 3.16%)</title><rect x="60.5353%" y="149" width="3.1580%" height="15" fill="rgb(230,59,30)"/><text x="60.7853%" y="159.50">col..</text></g><g><title>evaluate_obligation (392,606 samples, 0.22%)</title><rect x="65.1198%" y="133" width="0.2233%" height="15" fill="rgb(209,121,21)"/><text x="65.3698%" y="143.50"></text></g><g><title>param_env (250,594 samples, 0.14%)</title><rect x="65.4135%" y="133" width="0.1425%" height="15" fill="rgb(220,109,13)"/><text x="65.6635%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,567,479 samples, 2.03%)</title><rect x="63.9080%" y="149" width="2.0292%" height="15" fill="rgb(232,18,1)"/><text x="64.1580%" y="159.50">c..</text></g><g><title>region_scope_tree (654,887 samples, 0.37%)</title><rect x="65.5647%" y="133" width="0.3725%" height="15" fill="rgb(215,41,42)"/><text x="65.8147%" y="143.50"></text></g><g><title>evaluate_obligation (845,247 samples, 0.48%)</title><rect x="67.9203%" y="133" width="0.4808%" height="15" fill="rgb(224,123,36)"/><text x="68.1703%" y="143.50"></text></g><g><title>param_env (1,071,729 samples, 0.61%)</title><rect x="68.4666%" y="133" width="0.6096%" height="15" fill="rgb(240,125,3)"/><text x="68.7166%" y="143.50"></text></g><g><title>region_scope_tree (285,343 samples, 0.16%)</title><rect x="69.0996%" y="133" width="0.1623%" height="15" fill="rgb(205,98,50)"/><text x="69.3496%" y="143.50"></text></g><g><title>analysis (121,154,490 samples, 68.91%)</title><rect x="0.4036%" y="197" width="68.9125%" height="15" fill="rgb(205,185,37)"/><text x="0.6536%" y="207.50">analysis</text></g><g><title>type_check_crate (71,473,276 samples, 40.65%)</title><rect x="28.6622%" y="181" width="40.6539%" height="15" fill="rgb(238,207,15)"/><text x="28.9122%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,865,570 samples, 5.61%)</title><rect x="63.7045%" y="165" width="5.6115%" height="15" fill="rgb(213,199,42)"/><text x="63.9545%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (5,940,347 samples, 3.38%)</title><rect x="65.9372%" y="149" width="3.3789%" height="15" fill="rgb(235,201,11)"/><text x="66.1872%" y="159.50">che..</text></g><g><title>codegen_crate (374,555 samples, 0.21%)</title><rect x="69.3220%" y="197" width="0.2130%" height="15" fill="rgb(207,46,11)"/><text x="69.5720%" y="207.50"></text></g><g><title>AST_validation (400,475 samples, 0.23%)</title><rect x="69.6553%" y="181" width="0.2278%" height="15" fill="rgb(241,35,35)"/><text x="69.9053%" y="191.50"></text></g><g><title>metadata_load_macro (310,042 samples, 0.18%)</title><rect x="86.0304%" y="149" width="0.1764%" height="15" fill="rgb(243,32,47)"/><text x="86.2804%" y="159.50"></text></g><g><title>macro_expand_crate (31,165,537 samples, 17.73%)</title><rect x="69.9999%" y="181" width="17.7269%" height="15" fill="rgb(247,202,23)"/><text x="70.2499%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (31,142,347 samples, 17.71%)</title><rect x="70.0131%" y="165" width="17.7137%" height="15" fill="rgb(219,102,11)"/><text x="70.2631%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,672,500 samples, 1.52%)</title><rect x="86.2067%" y="149" width="1.5201%" height="15" fill="rgb(243,110,44)"/><text x="86.4567%" y="159.50"></text></g><g><title>metadata_register_crate (1,000,091 samples, 0.57%)</title><rect x="87.1580%" y="133" width="0.5689%" height="15" fill="rgb(222,74,54)"/><text x="87.4080%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (206,302 samples, 0.12%)</title><rect x="87.7297%" y="181" width="0.1173%" height="15" fill="rgb(216,99,12)"/><text x="87.9797%" y="191.50"></text></g><g><title>finalize_macro_resolutions (505,515 samples, 0.29%)</title><rect x="87.8622%" y="165" width="0.2875%" height="15" fill="rgb(226,22,26)"/><text x="88.1122%" y="175.50"></text></g><g><title>late_resolve_crate (2,752,250 samples, 1.57%)</title><rect x="88.1497%" y="165" width="1.5655%" height="15" fill="rgb(217,163,10)"/><text x="88.3997%" y="175.50"></text></g><g><title>configure_and_expand (35,689,127 samples, 20.30%)</title><rect x="69.5350%" y="197" width="20.2999%" height="15" fill="rgb(213,25,53)"/><text x="69.7850%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,494,808 samples, 1.99%)</title><rect x="87.8471%" y="181" width="1.9878%" height="15" fill="rgb(252,105,26)"/><text x="88.0971%" y="191.50">r..</text></g><g><title>drop_ast (277,103 samples, 0.16%)</title><rect x="89.8349%" y="197" width="0.1576%" height="15" fill="rgb(220,39,43)"/><text x="90.0849%" y="207.50"></text></g><g><title>early_lint_checks (713,208 samples, 0.41%)</title><rect x="90.0025%" y="197" width="0.4057%" height="15" fill="rgb(229,68,48)"/><text x="90.2525%" y="207.50"></text></g><g><title>free_global_ctxt (3,726,951 samples, 2.12%)</title><rect x="90.4082%" y="197" width="2.1199%" height="15" fill="rgb(252,8,32)"/><text x="90.6582%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,708,770 samples, 1.54%)</title><rect x="92.5280%" y="197" width="1.5407%" height="15" fill="rgb(223,20,43)"/><text x="92.7780%" y="207.50"></text></g><g><title>hir_lowering (5,868,375 samples, 3.34%)</title><rect x="94.0688%" y="197" width="3.3379%" height="15" fill="rgb(229,81,49)"/><text x="94.3188%" y="207.50">hir..</text></g><g><title>parse_crate (2,679,700 samples, 1.52%)</title><rect x="97.4400%" y="197" width="1.5242%" height="15" fill="rgb(236,28,36)"/><text x="97.6900%" y="207.50"></text></g><g><title>prepare_outputs (187,252 samples, 0.11%)</title><rect x="98.9702%" y="197" width="0.1065%" height="15" fill="rgb(249,185,26)"/><text x="99.2202%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,139,722 samples, 0.65%)</title><rect x="99.0767%" y="197" width="0.6483%" height="15" fill="rgb(249,174,33)"/><text x="99.3267%" y="207.50"></text></g><g><title>all (175,809,209 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (175,809,209 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (392,974 samples, 0.22%)</title><rect x="99.7765%" y="197" width="0.2235%" height="15" fill="rgb(250,127,30)"/><text x="100.0265%" y="207.50"></text></g></svg></svg>