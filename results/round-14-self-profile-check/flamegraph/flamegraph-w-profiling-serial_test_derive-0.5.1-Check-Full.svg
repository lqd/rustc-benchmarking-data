<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (115,793 samples, 0.14%)</title><rect x="6.8700%" y="197" width="0.1406%" height="15" fill="rgb(227,0,7)"/><text x="7.1200%" y="207.50"></text></g><g><title>item_attrs (100,721 samples, 0.12%)</title><rect x="7.2330%" y="165" width="0.1223%" height="15" fill="rgb(217,0,24)"/><text x="7.4830%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,991 samples, 0.12%)</title><rect x="7.2375%" y="149" width="0.1178%" height="15" fill="rgb(221,193,54)"/><text x="7.4875%" y="159.50"></text></g><g><title>codegen_fn_attrs (148,332 samples, 0.18%)</title><rect x="7.1839%" y="181" width="0.1801%" height="15" fill="rgb(248,212,6)"/><text x="7.4339%" y="191.50"></text></g><g><title>adt_drop_tys (134,962 samples, 0.16%)</title><rect x="8.9392%" y="117" width="0.1639%" height="15" fill="rgb(208,68,35)"/><text x="9.1892%" y="127.50"></text></g><g><title>adt_drop_tys (183,494 samples, 0.22%)</title><rect x="8.9268%" y="133" width="0.2228%" height="15" fill="rgb(232,128,0)"/><text x="9.1768%" y="143.50"></text></g><g><title>adt_drop_tys (333,024 samples, 0.40%)</title><rect x="8.9032%" y="149" width="0.4043%" height="15" fill="rgb(207,160,47)"/><text x="9.1532%" y="159.50"></text></g><g><title>needs_drop_raw (629,836 samples, 0.76%)</title><rect x="8.8590%" y="165" width="0.7647%" height="15" fill="rgb(228,23,34)"/><text x="9.1090%" y="175.50"></text></g><g><title>is_copy_raw (260,432 samples, 0.32%)</title><rect x="9.3075%" y="149" width="0.3162%" height="15" fill="rgb(218,30,26)"/><text x="9.5575%" y="159.50"></text></g><g><title>evaluate_obligation (225,882 samples, 0.27%)</title><rect x="9.3494%" y="133" width="0.2742%" height="15" fill="rgb(220,122,19)"/><text x="9.5994%" y="143.50"></text></g><g><title>impl_parent (224,623 samples, 0.27%)</title><rect x="10.1147%" y="133" width="0.2727%" height="15" fill="rgb(250,228,42)"/><text x="10.3647%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (159,303 samples, 0.19%)</title><rect x="10.1940%" y="117" width="0.1934%" height="15" fill="rgb(240,193,28)"/><text x="10.4440%" y="127.50"></text></g><g><title>specialization_graph_of (1,145,383 samples, 1.39%)</title><rect x="9.7652%" y="149" width="1.3906%" height="15" fill="rgb(216,20,37)"/><text x="10.0152%" y="159.50"></text></g><g><title>impl_trait_ref (632,894 samples, 0.77%)</title><rect x="10.3874%" y="133" width="0.7684%" height="15" fill="rgb(206,188,39)"/><text x="10.6374%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (566,583 samples, 0.69%)</title><rect x="10.4679%" y="117" width="0.6879%" height="15" fill="rgb(217,207,13)"/><text x="10.7179%" y="127.50"></text></g><g><title>resolve_instance (1,275,974 samples, 1.55%)</title><rect x="9.6237%" y="165" width="1.5492%" height="15" fill="rgb(231,73,38)"/><text x="9.8737%" y="175.50"></text></g><g><title>thir_body (399,114 samples, 0.48%)</title><rect x="11.1757%" y="165" width="0.4846%" height="15" fill="rgb(225,20,46)"/><text x="11.4257%" y="175.50"></text></g><g><title>mir_const (4,205,707 samples, 5.11%)</title><rect x="6.5617%" y="213" width="5.1062%" height="15" fill="rgb(210,31,41)"/><text x="6.8117%" y="223.50">mir_co..</text></g><g><title>unsafety_check_result (3,836,003 samples, 4.66%)</title><rect x="7.0105%" y="197" width="4.6573%" height="15" fill="rgb(221,200,47)"/><text x="7.2605%" y="207.50">unsaf..</text></g><g><title>mir_built (3,544,920 samples, 4.30%)</title><rect x="7.3640%" y="181" width="4.3039%" height="15" fill="rgb(226,26,5)"/><text x="7.6140%" y="191.50">mir_b..</text></g><g><title>has_structural_eq_impls (141,442 samples, 0.17%)</title><rect x="11.7544%" y="197" width="0.1717%" height="15" fill="rgb(249,33,26)"/><text x="12.0044%" y="207.50"></text></g><g><title>evaluate_obligation (131,952 samples, 0.16%)</title><rect x="11.7659%" y="181" width="0.1602%" height="15" fill="rgb(235,183,28)"/><text x="12.0159%" y="191.50"></text></g><g><title>trait_impls_of (119,171 samples, 0.14%)</title><rect x="11.7814%" y="165" width="0.1447%" height="15" fill="rgb(221,5,38)"/><text x="12.0314%" y="175.50"></text></g><g><title>is_freeze_raw (107,181 samples, 0.13%)</title><rect x="11.9275%" y="197" width="0.1301%" height="15" fill="rgb(247,18,42)"/><text x="12.1775%" y="207.50"></text></g><g><title>evaluate_obligation (104,331 samples, 0.13%)</title><rect x="11.9309%" y="181" width="0.1267%" height="15" fill="rgb(241,131,45)"/><text x="12.1809%" y="191.50"></text></g><g><title>mir_const (123,002 samples, 0.15%)</title><rect x="12.0592%" y="197" width="0.1493%" height="15" fill="rgb(249,31,29)"/><text x="12.3092%" y="207.50"></text></g><g><title>unsafety_check_result (103,322 samples, 0.13%)</title><rect x="12.0831%" y="181" width="0.1254%" height="15" fill="rgb(225,111,53)"/><text x="12.3331%" y="191.50"></text></g><g><title>mir_built (92,522 samples, 0.11%)</title><rect x="12.0962%" y="165" width="0.1123%" height="15" fill="rgb(238,160,17)"/><text x="12.3462%" y="175.50"></text></g><g><title>mir_promoted (4,949,395 samples, 6.01%)</title><rect x="6.2010%" y="229" width="6.0091%" height="15" fill="rgb(214,148,48)"/><text x="6.4510%" y="239.50">mir_prom..</text></g><g><title>mir_const_qualif (446,615 samples, 0.54%)</title><rect x="11.6679%" y="213" width="0.5422%" height="15" fill="rgb(232,36,49)"/><text x="11.9179%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (105,260 samples, 0.13%)</title><rect x="12.2101%" y="229" width="0.1278%" height="15" fill="rgb(209,103,24)"/><text x="12.4601%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (160,182 samples, 0.19%)</title><rect x="12.3379%" y="229" width="0.1945%" height="15" fill="rgb(229,88,8)"/><text x="12.5879%" y="239.50"></text></g><g><title>normalize_projection_ty (106,292 samples, 0.13%)</title><rect x="12.4033%" y="213" width="0.1291%" height="15" fill="rgb(213,181,19)"/><text x="12.6533%" y="223.50"></text></g><g><title>type_op_normalize_predicate (103,302 samples, 0.13%)</title><rect x="12.5324%" y="229" width="0.1254%" height="15" fill="rgb(254,191,54)"/><text x="12.7824%" y="239.50"></text></g><g><title>type_op_prove_predicate (739,181 samples, 0.90%)</title><rect x="12.6578%" y="229" width="0.8974%" height="15" fill="rgb(241,83,37)"/><text x="12.9078%" y="239.50"></text></g><g><title>evaluate_obligation (175,991 samples, 0.21%)</title><rect x="13.3416%" y="213" width="0.2137%" height="15" fill="rgb(233,36,39)"/><text x="13.5916%" y="223.50"></text></g><g><title>MIR_borrow_checking (10,417,606 samples, 12.65%)</title><rect x="0.9101%" y="261" width="12.6481%" height="15" fill="rgb(226,3,54)"/><text x="1.1601%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,405,216 samples, 12.63%)</title><rect x="0.9251%" y="245" width="12.6331%" height="15" fill="rgb(245,192,40)"/><text x="1.1751%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (110,682 samples, 0.13%)</title><rect x="13.5582%" y="261" width="0.1344%" height="15" fill="rgb(238,167,29)"/><text x="13.8082%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (91,831 samples, 0.11%)</title><rect x="13.5811%" y="245" width="0.1115%" height="15" fill="rgb(232,182,51)"/><text x="13.8311%" y="255.50"></text></g><g><title>codegen_fn_attrs (131,171 samples, 0.16%)</title><rect x="13.9104%" y="229" width="0.1593%" height="15" fill="rgb(231,60,39)"/><text x="14.1604%" y="239.50"></text></g><g><title>check_mod_attrs (217,412 samples, 0.26%)</title><rect x="13.8058%" y="245" width="0.2640%" height="15" fill="rgb(208,69,12)"/><text x="14.0558%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (162,082 samples, 0.20%)</title><rect x="14.1392%" y="245" width="0.1968%" height="15" fill="rgb(235,93,37)"/><text x="14.3892%" y="255.50"></text></g><g><title>misc_checking_1 (483,115 samples, 0.59%)</title><rect x="13.7905%" y="261" width="0.5866%" height="15" fill="rgb(213,116,39)"/><text x="14.0405%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (275,304 samples, 0.33%)</title><rect x="14.3787%" y="245" width="0.3342%" height="15" fill="rgb(222,207,29)"/><text x="14.6287%" y="255.50"></text></g><g><title>check_mod_liveness (234,303 samples, 0.28%)</title><rect x="14.4285%" y="229" width="0.2845%" height="15" fill="rgb(206,96,30)"/><text x="14.6785%" y="239.50"></text></g><g><title>type_uninhabited_from (109,151 samples, 0.13%)</title><rect x="14.5804%" y="213" width="0.1325%" height="15" fill="rgb(218,138,4)"/><text x="14.8304%" y="223.50"></text></g><g><title>type_uninhabited_from (93,631 samples, 0.11%)</title><rect x="14.5993%" y="197" width="0.1137%" height="15" fill="rgb(250,191,14)"/><text x="14.8493%" y="207.50"></text></g><g><title>misc_checking_2 (560,197 samples, 0.68%)</title><rect x="14.3770%" y="261" width="0.6801%" height="15" fill="rgb(239,60,40)"/><text x="14.6270%" y="271.50"></text></g><g><title>match_checking (283,513 samples, 0.34%)</title><rect x="14.7129%" y="245" width="0.3442%" height="15" fill="rgb(206,27,48)"/><text x="14.9629%" y="255.50"></text></g><g><title>check_match (277,103 samples, 0.34%)</title><rect x="14.7207%" y="229" width="0.3364%" height="15" fill="rgb(225,35,8)"/><text x="14.9707%" y="239.50"></text></g><g><title>death_checking (84,531 samples, 0.10%)</title><rect x="15.1097%" y="245" width="0.1026%" height="15" fill="rgb(250,213,24)"/><text x="15.3597%" y="255.50"></text></g><g><title>fn_abi_of_instance (117,821 samples, 0.14%)</title><rect x="15.5950%" y="117" width="0.1430%" height="15" fill="rgb(247,123,22)"/><text x="15.8450%" y="127.50"></text></g><g><title>eval_to_const_value_raw (338,104 samples, 0.41%)</title><rect x="15.4608%" y="165" width="0.4105%" height="15" fill="rgb(231,138,38)"/><text x="15.7108%" y="175.50"></text></g><g><title>eval_to_const_value_raw (337,354 samples, 0.41%)</title><rect x="15.4618%" y="149" width="0.4096%" height="15" fill="rgb(231,145,46)"/><text x="15.7118%" y="159.50"></text></g><g><title>eval_to_allocation_raw (335,614 samples, 0.41%)</title><rect x="15.4639%" y="133" width="0.4075%" height="15" fill="rgb(251,118,11)"/><text x="15.7139%" y="143.50"></text></g><g><title>eval_to_allocation_raw (378,484 samples, 0.46%)</title><rect x="15.4134%" y="213" width="0.4595%" height="15" fill="rgb(217,147,25)"/><text x="15.6634%" y="223.50"></text></g><g><title>eval_to_allocation_raw (377,664 samples, 0.46%)</title><rect x="15.4144%" y="197" width="0.4585%" height="15" fill="rgb(247,81,37)"/><text x="15.6644%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (346,154 samples, 0.42%)</title><rect x="15.4527%" y="181" width="0.4203%" height="15" fill="rgb(209,12,38)"/><text x="15.7027%" y="191.50"></text></g><g><title>eval_to_const_value_raw (110,871 samples, 0.13%)</title><rect x="15.8730%" y="213" width="0.1346%" height="15" fill="rgb(227,1,9)"/><text x="16.1230%" y="223.50"></text></g><g><title>eval_to_const_value_raw (107,721 samples, 0.13%)</title><rect x="15.8768%" y="197" width="0.1308%" height="15" fill="rgb(248,47,43)"/><text x="16.1268%" y="207.50"></text></g><g><title>eval_to_allocation_raw (101,881 samples, 0.12%)</title><rect x="15.8839%" y="181" width="0.1237%" height="15" fill="rgb(221,10,30)"/><text x="16.1339%" y="191.50"></text></g><g><title>param_env (95,841 samples, 0.12%)</title><rect x="16.0076%" y="213" width="0.1164%" height="15" fill="rgb(210,229,1)"/><text x="16.2576%" y="223.50"></text></g><g><title>specialization_graph_of (164,872 samples, 0.20%)</title><rect x="16.1849%" y="197" width="0.2002%" height="15" fill="rgb(222,148,37)"/><text x="16.4349%" y="207.50"></text></g><g><title>resolve_instance (215,972 samples, 0.26%)</title><rect x="16.1239%" y="213" width="0.2622%" height="15" fill="rgb(234,67,33)"/><text x="16.3739%" y="223.50"></text></g><g><title>crate_lints (972,240 samples, 1.18%)</title><rect x="15.2143%" y="229" width="1.1804%" height="15" fill="rgb(247,98,35)"/><text x="15.4643%" y="239.50"></text></g><g><title>lint_checking (1,159,512 samples, 1.41%)</title><rect x="15.2124%" y="245" width="1.4078%" height="15" fill="rgb(247,138,52)"/><text x="15.4624%" y="255.50"></text></g><g><title>module_lints (185,662 samples, 0.23%)</title><rect x="16.3947%" y="229" width="0.2254%" height="15" fill="rgb(213,79,30)"/><text x="16.6447%" y="239.50"></text></g><g><title>lint_mod (183,222 samples, 0.22%)</title><rect x="16.3977%" y="213" width="0.2225%" height="15" fill="rgb(246,177,23)"/><text x="16.6477%" y="223.50"></text></g><g><title>privacy_checking_modules (276,864 samples, 0.34%)</title><rect x="16.6802%" y="245" width="0.3361%" height="15" fill="rgb(230,62,27)"/><text x="16.9302%" y="255.50"></text></g><g><title>check_mod_privacy (275,303 samples, 0.33%)</title><rect x="16.6821%" y="229" width="0.3342%" height="15" fill="rgb(216,154,8)"/><text x="16.9321%" y="239.50"></text></g><g><title>misc_checking_3 (1,622,938 samples, 1.97%)</title><rect x="15.0572%" y="261" width="1.9704%" height="15" fill="rgb(244,35,45)"/><text x="15.3072%" y="271.50">m..</text></g><g><title>adt_dtorck_constraint (152,393 samples, 0.19%)</title><rect x="17.8972%" y="117" width="0.1850%" height="15" fill="rgb(251,115,12)"/><text x="18.1472%" y="127.50"></text></g><g><title>adt_dtorck_constraint (270,104 samples, 0.33%)</title><rect x="17.7799%" y="133" width="0.3279%" height="15" fill="rgb(240,54,50)"/><text x="18.0299%" y="143.50"></text></g><g><title>adt_dtorck_constraint (396,444 samples, 0.48%)</title><rect x="17.6539%" y="149" width="0.4813%" height="15" fill="rgb(233,84,52)"/><text x="17.9039%" y="159.50"></text></g><g><title>adt_dtorck_constraint (505,056 samples, 0.61%)</title><rect x="17.5502%" y="165" width="0.6132%" height="15" fill="rgb(207,117,47)"/><text x="17.8002%" y="175.50"></text></g><g><title>dropck_outlives (585,647 samples, 0.71%)</title><rect x="17.4686%" y="197" width="0.7110%" height="15" fill="rgb(249,43,39)"/><text x="17.7186%" y="207.50"></text></g><g><title>adt_dtorck_constraint (574,316 samples, 0.70%)</title><rect x="17.4824%" y="181" width="0.6973%" height="15" fill="rgb(209,38,44)"/><text x="17.7324%" y="191.50"></text></g><g><title>evaluate_obligation (265,574 samples, 0.32%)</title><rect x="18.1797%" y="197" width="0.3224%" height="15" fill="rgb(236,212,23)"/><text x="18.4297%" y="207.50"></text></g><g><title>trait_impls_of (91,031 samples, 0.11%)</title><rect x="18.3916%" y="181" width="0.1105%" height="15" fill="rgb(242,79,21)"/><text x="18.6416%" y="191.50"></text></g><g><title>associated_item (413,885 samples, 0.50%)</title><rect x="28.9791%" y="165" width="0.5025%" height="15" fill="rgb(211,96,35)"/><text x="29.2291%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (326,853 samples, 0.40%)</title><rect x="29.0847%" y="149" width="0.3968%" height="15" fill="rgb(253,215,40)"/><text x="29.3347%" y="159.50"></text></g><g><title>associated_items (590,027 samples, 0.72%)</title><rect x="28.7993%" y="181" width="0.7164%" height="15" fill="rgb(211,81,21)"/><text x="29.0493%" y="191.50"></text></g><g><title>adt_def (229,783 samples, 0.28%)</title><rect x="30.4352%" y="149" width="0.2790%" height="15" fill="rgb(208,190,38)"/><text x="30.6852%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (220,403 samples, 0.27%)</title><rect x="30.4466%" y="133" width="0.2676%" height="15" fill="rgb(235,213,38)"/><text x="30.6966%" y="143.50"></text></g><g><title>item_attrs (127,661 samples, 0.15%)</title><rect x="30.5592%" y="117" width="0.1550%" height="15" fill="rgb(237,122,38)"/><text x="30.8092%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (119,231 samples, 0.14%)</title><rect x="30.5694%" y="101" width="0.1448%" height="15" fill="rgb(244,218,35)"/><text x="30.8194%" y="111.50"></text></g><g><title>adt_destructor (286,424 samples, 0.35%)</title><rect x="30.7141%" y="149" width="0.3478%" height="15" fill="rgb(240,68,47)"/><text x="30.9641%" y="159.50"></text></g><g><title>adt_def (293,983 samples, 0.36%)</title><rect x="31.3586%" y="133" width="0.3569%" height="15" fill="rgb(210,16,53)"/><text x="31.6086%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (286,523 samples, 0.35%)</title><rect x="31.3677%" y="117" width="0.3479%" height="15" fill="rgb(235,124,12)"/><text x="31.6177%" y="127.50"></text></g><g><title>item_attrs (166,232 samples, 0.20%)</title><rect x="31.5137%" y="101" width="0.2018%" height="15" fill="rgb(224,169,11)"/><text x="31.7637%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (158,322 samples, 0.19%)</title><rect x="31.5233%" y="85" width="0.1922%" height="15" fill="rgb(250,166,2)"/><text x="31.7733%" y="95.50"></text></g><g><title>adt_def (577,184 samples, 0.70%)</title><rect x="32.1634%" y="117" width="0.7008%" height="15" fill="rgb(242,216,29)"/><text x="32.4134%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (559,994 samples, 0.68%)</title><rect x="32.1842%" y="101" width="0.6799%" height="15" fill="rgb(230,116,27)"/><text x="32.4342%" y="111.50"></text></g><g><title>item_attrs (387,173 samples, 0.47%)</title><rect x="32.3940%" y="85" width="0.4701%" height="15" fill="rgb(228,99,48)"/><text x="32.6440%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (369,913 samples, 0.45%)</title><rect x="32.4150%" y="69" width="0.4491%" height="15" fill="rgb(253,11,6)"/><text x="32.6650%" y="79.50"></text></g><g><title>adt_destructor (97,160 samples, 0.12%)</title><rect x="32.8641%" y="117" width="0.1180%" height="15" fill="rgb(247,143,39)"/><text x="33.1141%" y="127.50"></text></g><g><title>adt_def (296,922 samples, 0.36%)</title><rect x="33.1662%" y="101" width="0.3605%" height="15" fill="rgb(236,97,10)"/><text x="33.4162%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (284,432 samples, 0.35%)</title><rect x="33.1813%" y="85" width="0.3453%" height="15" fill="rgb(233,208,19)"/><text x="33.4313%" y="95.50"></text></g><g><title>item_attrs (157,762 samples, 0.19%)</title><rect x="33.3351%" y="69" width="0.1915%" height="15" fill="rgb(216,164,2)"/><text x="33.5851%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (146,172 samples, 0.18%)</title><rect x="33.3492%" y="53" width="0.1775%" height="15" fill="rgb(220,129,5)"/><text x="33.5992%" y="63.50"></text></g><g><title>adt_def (196,453 samples, 0.24%)</title><rect x="33.7172%" y="85" width="0.2385%" height="15" fill="rgb(242,17,10)"/><text x="33.9672%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (188,583 samples, 0.23%)</title><rect x="33.7267%" y="69" width="0.2290%" height="15" fill="rgb(242,107,0)"/><text x="33.9767%" y="79.50"></text></g><g><title>item_attrs (100,542 samples, 0.12%)</title><rect x="33.8336%" y="53" width="0.1221%" height="15" fill="rgb(251,28,31)"/><text x="34.0836%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (92,411 samples, 0.11%)</title><rect x="33.8435%" y="37" width="0.1122%" height="15" fill="rgb(233,223,10)"/><text x="34.0935%" y="47.50"></text></g><g><title>adt_dtorck_constraint (433,246 samples, 0.53%)</title><rect x="33.6232%" y="101" width="0.5260%" height="15" fill="rgb(215,21,27)"/><text x="33.8732%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,086,773 samples, 1.32%)</title><rect x="32.9821%" y="117" width="1.3195%" height="15" fill="rgb(232,23,21)"/><text x="33.2321%" y="127.50"></text></g><g><title>type_of (90,641 samples, 0.11%)</title><rect x="34.1915%" y="101" width="0.1100%" height="15" fill="rgb(244,5,23)"/><text x="34.4415%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,363,254 samples, 2.87%)</title><rect x="31.7553%" y="133" width="2.8693%" height="15" fill="rgb(226,81,46)"/><text x="32.0053%" y="143.50">ad..</text></g><g><title>type_of (233,094 samples, 0.28%)</title><rect x="34.3416%" y="117" width="0.2830%" height="15" fill="rgb(247,70,30)"/><text x="34.5916%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (167,564 samples, 0.20%)</title><rect x="34.4211%" y="101" width="0.2034%" height="15" fill="rgb(212,68,19)"/><text x="34.6711%" y="111.50"></text></g><g><title>adt_dtorck_constraint (3,116,054 samples, 3.78%)</title><rect x="31.0619%" y="149" width="3.7832%" height="15" fill="rgb(240,187,13)"/><text x="31.3119%" y="159.50">adt_..</text></g><g><title>type_of (165,803 samples, 0.20%)</title><rect x="34.6438%" y="133" width="0.2013%" height="15" fill="rgb(223,113,26)"/><text x="34.8938%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (124,741 samples, 0.15%)</title><rect x="34.6937%" y="117" width="0.1514%" height="15" fill="rgb(206,192,2)"/><text x="34.9437%" y="127.50"></text></g><g><title>dropck_outlives (4,449,340 samples, 5.40%)</title><rect x="29.5872%" y="181" width="5.4020%" height="15" fill="rgb(241,108,4)"/><text x="29.8372%" y="191.50">dropck_..</text></g><g><title>adt_dtorck_constraint (3,930,243 samples, 4.77%)</title><rect x="30.2174%" y="165" width="4.7718%" height="15" fill="rgb(247,173,49)"/><text x="30.4674%" y="175.50">adt_dt..</text></g><g><title>type_of (93,681 samples, 0.11%)</title><rect x="34.8754%" y="149" width="0.1137%" height="15" fill="rgb(224,114,35)"/><text x="35.1254%" y="159.50"></text></g><g><title>adt_def (360,454 samples, 0.44%)</title><rect x="35.9302%" y="149" width="0.4376%" height="15" fill="rgb(245,159,27)"/><text x="36.1802%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (356,744 samples, 0.43%)</title><rect x="35.9347%" y="133" width="0.4331%" height="15" fill="rgb(245,172,44)"/><text x="36.1847%" y="143.50"></text></g><g><title>item_attrs (303,654 samples, 0.37%)</title><rect x="35.9992%" y="117" width="0.3687%" height="15" fill="rgb(236,23,11)"/><text x="36.2492%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (299,284 samples, 0.36%)</title><rect x="36.0045%" y="101" width="0.3634%" height="15" fill="rgb(205,117,38)"/><text x="36.2545%" y="111.50"></text></g><g><title>adt_sized_constraint (125,051 samples, 0.15%)</title><rect x="36.3678%" y="149" width="0.1518%" height="15" fill="rgb(237,72,25)"/><text x="36.6178%" y="159.50"></text></g><g><title>adt_sized_constraint (536,575 samples, 0.65%)</title><rect x="35.9024%" y="165" width="0.6515%" height="15" fill="rgb(244,70,9)"/><text x="36.1524%" y="175.50"></text></g><g><title>predicates_of (177,993 samples, 0.22%)</title><rect x="36.7151%" y="165" width="0.2161%" height="15" fill="rgb(217,125,39)"/><text x="36.9651%" y="175.50"></text></g><g><title>predicates_defined_on (123,522 samples, 0.15%)</title><rect x="36.7812%" y="149" width="0.1500%" height="15" fill="rgb(235,36,10)"/><text x="37.0312%" y="159.50"></text></g><g><title>evaluate_obligation (2,232,896 samples, 2.71%)</title><rect x="34.9892%" y="181" width="2.7110%" height="15" fill="rgb(251,123,47)"/><text x="35.2392%" y="191.50">ev..</text></g><g><title>trait_impls_of (580,604 samples, 0.70%)</title><rect x="36.9952%" y="165" width="0.7049%" height="15" fill="rgb(221,13,13)"/><text x="37.2452%" y="175.50"></text></g><g><title>implementations_of_trait (189,312 samples, 0.23%)</title><rect x="37.4703%" y="149" width="0.2298%" height="15" fill="rgb(238,131,9)"/><text x="37.7203%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (115,631 samples, 0.14%)</title><rect x="37.5598%" y="133" width="0.1404%" height="15" fill="rgb(211,50,8)"/><text x="37.8098%" y="143.50"></text></g><g><title>fn_sig (121,552 samples, 0.15%)</title><rect x="37.7273%" y="181" width="0.1476%" height="15" fill="rgb(245,182,24)"/><text x="37.9773%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (109,482 samples, 0.13%)</title><rect x="37.7420%" y="165" width="0.1329%" height="15" fill="rgb(242,14,37)"/><text x="37.9920%" y="175.50"></text></g><g><title>generics_of (98,503 samples, 0.12%)</title><rect x="37.8749%" y="181" width="0.1196%" height="15" fill="rgb(246,228,12)"/><text x="38.1249%" y="191.50"></text></g><g><title>impl_item_implementor_ids (90,320 samples, 0.11%)</title><rect x="37.9945%" y="181" width="0.1097%" height="15" fill="rgb(213,55,15)"/><text x="38.2445%" y="191.50"></text></g><g><title>is_copy_raw (254,083 samples, 0.31%)</title><rect x="38.2132%" y="181" width="0.3085%" height="15" fill="rgb(209,9,3)"/><text x="38.4632%" y="191.50"></text></g><g><title>evaluate_obligation (245,243 samples, 0.30%)</title><rect x="38.2239%" y="165" width="0.2978%" height="15" fill="rgb(230,59,30)"/><text x="38.4739%" y="175.50"></text></g><g><title>trait_impls_of (174,952 samples, 0.21%)</title><rect x="38.3093%" y="149" width="0.2124%" height="15" fill="rgb(209,121,21)"/><text x="38.5593%" y="159.50"></text></g><g><title>evaluate_obligation (98,241 samples, 0.12%)</title><rect x="38.8393%" y="165" width="0.1193%" height="15" fill="rgb(220,109,13)"/><text x="39.0893%" y="175.50"></text></g><g><title>method_autoderef_steps (217,092 samples, 0.26%)</title><rect x="38.7070%" y="181" width="0.2636%" height="15" fill="rgb(232,18,1)"/><text x="38.9570%" y="191.50"></text></g><g><title>explicit_predicates_of (98,180 samples, 0.12%)</title><rect x="39.1997%" y="149" width="0.1192%" height="15" fill="rgb(215,41,42)"/><text x="39.4497%" y="159.50"></text></g><g><title>predicates_of (318,722 samples, 0.39%)</title><rect x="38.9854%" y="181" width="0.3870%" height="15" fill="rgb(224,123,36)"/><text x="39.2354%" y="191.50"></text></g><g><title>predicates_defined_on (209,461 samples, 0.25%)</title><rect x="39.1180%" y="165" width="0.2543%" height="15" fill="rgb(240,125,3)"/><text x="39.3680%" y="175.50"></text></g><g><title>trait_impls_of (148,793 samples, 0.18%)</title><rect x="39.4802%" y="181" width="0.1807%" height="15" fill="rgb(205,98,50)"/><text x="39.7302%" y="191.50"></text></g><g><title>type_of (94,263 samples, 0.11%)</title><rect x="39.6609%" y="181" width="0.1144%" height="15" fill="rgb(205,185,37)"/><text x="39.9109%" y="191.50"></text></g><g><title>typeck (17,483,134 samples, 21.23%)</title><rect x="18.6065%" y="197" width="21.2265%" height="15" fill="rgb(238,207,15)"/><text x="18.8565%" y="207.50">typeck</text></g><g><title>item_bodies_checking (18,717,138 samples, 22.72%)</title><rect x="17.1103%" y="245" width="22.7247%" height="15" fill="rgb(213,199,42)"/><text x="17.3603%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,714,118 samples, 22.72%)</title><rect x="17.1139%" y="229" width="22.7210%" height="15" fill="rgb(235,201,11)"/><text x="17.3639%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (18,709,528 samples, 22.72%)</title><rect x="17.1195%" y="213" width="22.7154%" height="15" fill="rgb(207,46,11)"/><text x="17.3695%" y="223.50">typeck</text></g><g><title>impl_parent (91,321 samples, 0.11%)</title><rect x="40.4912%" y="85" width="0.1109%" height="15" fill="rgb(241,35,35)"/><text x="40.7412%" y="95.50"></text></g><g><title>impl_trait_ref (325,013 samples, 0.39%)</title><rect x="40.6021%" y="85" width="0.3946%" height="15" fill="rgb(243,32,47)"/><text x="40.8521%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (302,213 samples, 0.37%)</title><rect x="40.6297%" y="69" width="0.3669%" height="15" fill="rgb(247,202,23)"/><text x="40.8797%" y="79.50"></text></g><g><title>coherent_trait (562,986 samples, 0.68%)</title><rect x="40.3599%" y="117" width="0.6835%" height="15" fill="rgb(219,102,11)"/><text x="40.6099%" y="127.50"></text></g><g><title>specialization_graph_of (559,276 samples, 0.68%)</title><rect x="40.3645%" y="101" width="0.6790%" height="15" fill="rgb(243,110,44)"/><text x="40.6145%" y="111.50"></text></g><g><title>adt_destructor (570,396 samples, 0.69%)</title><rect x="40.3528%" y="149" width="0.6925%" height="15" fill="rgb(222,74,54)"/><text x="40.6028%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (569,896 samples, 0.69%)</title><rect x="40.3534%" y="133" width="0.6919%" height="15" fill="rgb(216,99,12)"/><text x="40.6034%" y="143.50"></text></g><g><title>adt_dtorck_constraint (580,316 samples, 0.70%)</title><rect x="40.3412%" y="165" width="0.7046%" height="15" fill="rgb(226,22,26)"/><text x="40.5912%" y="175.50"></text></g><g><title>dropck_outlives (608,527 samples, 0.74%)</title><rect x="40.3084%" y="197" width="0.7388%" height="15" fill="rgb(217,163,10)"/><text x="40.5584%" y="207.50"></text></g><g><title>adt_dtorck_constraint (592,796 samples, 0.72%)</title><rect x="40.3275%" y="181" width="0.7197%" height="15" fill="rgb(213,25,53)"/><text x="40.5775%" y="191.50"></text></g><g><title>evaluate_obligation (91,411 samples, 0.11%)</title><rect x="41.0472%" y="197" width="0.1110%" height="15" fill="rgb(252,105,26)"/><text x="41.2972%" y="207.50"></text></g><g><title>item_types_checking (1,191,573 samples, 1.45%)</title><rect x="39.8350%" y="245" width="1.4467%" height="15" fill="rgb(220,39,43)"/><text x="40.0850%" y="255.50"></text></g><g><title>check_mod_item_types (1,189,973 samples, 1.44%)</title><rect x="39.8369%" y="229" width="1.4448%" height="15" fill="rgb(229,68,48)"/><text x="40.0869%" y="239.50"></text></g><g><title>typeck (1,156,513 samples, 1.40%)</title><rect x="39.8775%" y="213" width="1.4041%" height="15" fill="rgb(252,8,32)"/><text x="40.1275%" y="223.50"></text></g><g><title>fn_sig (134,341 samples, 0.16%)</title><rect x="41.3479%" y="213" width="0.1631%" height="15" fill="rgb(223,20,43)"/><text x="41.5979%" y="223.50"></text></g><g><title>type_collecting (295,214 samples, 0.36%)</title><rect x="41.2835%" y="245" width="0.3584%" height="15" fill="rgb(229,81,49)"/><text x="41.5335%" y="255.50"></text></g><g><title>collect_mod_item_types (288,824 samples, 0.35%)</title><rect x="41.2912%" y="229" width="0.3507%" height="15" fill="rgb(236,28,36)"/><text x="41.5412%" y="239.50"></text></g><g><title>evaluate_obligation (251,582 samples, 0.31%)</title><rect x="41.9954%" y="213" width="0.3054%" height="15" fill="rgb(249,185,26)"/><text x="42.2454%" y="223.50"></text></g><g><title>param_env (133,962 samples, 0.16%)</title><rect x="42.3663%" y="213" width="0.1626%" height="15" fill="rgb(249,174,33)"/><text x="42.6163%" y="223.50"></text></g><g><title>region_scope_tree (113,532 samples, 0.14%)</title><rect x="42.5409%" y="213" width="0.1378%" height="15" fill="rgb(233,201,37)"/><text x="42.7909%" y="223.50"></text></g><g><title>analysis (34,552,996 samples, 41.95%)</title><rect x="0.7281%" y="277" width="41.9512%" height="15" fill="rgb(221,78,26)"/><text x="0.9781%" y="287.50">analysis</text></g><g><title>type_check_crate (21,127,985 samples, 25.65%)</title><rect x="17.0276%" y="261" width="25.6517%" height="15" fill="rgb(250,127,30)"/><text x="17.2776%" y="271.50">type_check_crate</text></g><g><title>wf_checking (853,520 samples, 1.04%)</title><rect x="41.6430%" y="245" width="1.0363%" height="15" fill="rgb(230,49,44)"/><text x="41.8930%" y="255.50"></text></g><g><title>check_item_well_formed (823,189 samples, 1.00%)</title><rect x="41.6799%" y="229" width="0.9994%" height="15" fill="rgb(229,67,23)"/><text x="41.9299%" y="239.50"></text></g><g><title>codegen_crate (584,396 samples, 0.71%)</title><rect x="42.6936%" y="277" width="0.7095%" height="15" fill="rgb(249,83,47)"/><text x="42.9436%" y="287.50"></text></g><g><title>crate_injection (90,061 samples, 0.11%)</title><rect x="43.7784%" y="261" width="0.1093%" height="15" fill="rgb(215,43,3)"/><text x="44.0284%" y="271.50"></text></g><g><title>metadata_load_macro (872,600 samples, 1.06%)</title><rect x="83.9773%" y="229" width="1.0594%" height="15" fill="rgb(238,154,13)"/><text x="84.2273%" y="239.50"></text></g><g><title>macro_expand_crate (36,783,949 samples, 44.66%)</title><rect x="43.8877%" y="261" width="44.6598%" height="15" fill="rgb(219,56,2)"/><text x="44.1377%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (36,765,369 samples, 44.64%)</title><rect x="43.9103%" y="245" width="44.6372%" height="15" fill="rgb(233,0,4)"/><text x="44.1603%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,891,634 samples, 3.51%)</title><rect x="85.0367%" y="229" width="3.5108%" height="15" fill="rgb(235,30,7)"/><text x="85.2867%" y="239.50">met..</text></g><g><title>metadata_register_crate (981,271 samples, 1.19%)</title><rect x="87.3561%" y="213" width="1.1914%" height="15" fill="rgb(250,79,13)"/><text x="87.6061%" y="223.50"></text></g><g><title>maybe_create_a_macro_crate (335,864 samples, 0.41%)</title><rect x="88.5488%" y="261" width="0.4078%" height="15" fill="rgb(211,146,34)"/><text x="88.7988%" y="271.50"></text></g><g><title>pre_AST_expansion_lint_checks (147,301 samples, 0.18%)</title><rect x="88.9566%" y="261" width="0.1788%" height="15" fill="rgb(228,22,38)"/><text x="89.2066%" y="271.50"></text></g><g><title>finalize_macro_resolutions (174,242 samples, 0.21%)</title><rect x="89.1829%" y="245" width="0.2115%" height="15" fill="rgb(235,168,5)"/><text x="89.4329%" y="255.50"></text></g><g><title>late_resolve_crate (1,790,130 samples, 2.17%)</title><rect x="89.3944%" y="245" width="2.1734%" height="15" fill="rgb(221,155,16)"/><text x="89.6444%" y="255.50">l..</text></g><g><title>configure_and_expand (39,724,012 samples, 48.23%)</title><rect x="43.4032%" y="277" width="48.2294%" height="15" fill="rgb(215,215,53)"/><text x="43.6532%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (2,056,723 samples, 2.50%)</title><rect x="89.1354%" y="261" width="2.4971%" height="15" fill="rgb(223,4,10)"/><text x="89.3854%" y="271.50">re..</text></g><g><title>early_lint_checks (199,952 samples, 0.24%)</title><rect x="91.7422%" y="277" width="0.2428%" height="15" fill="rgb(234,103,6)"/><text x="91.9922%" y="287.50"></text></g><g><title>free_global_ctxt (2,607,438 samples, 3.17%)</title><rect x="91.9850%" y="277" width="3.1657%" height="15" fill="rgb(227,97,0)"/><text x="92.2350%" y="287.50">fre..</text></g><g><title>generate_crate_metadata (168,261 samples, 0.20%)</title><rect x="95.1507%" y="277" width="0.2043%" height="15" fill="rgb(234,150,53)"/><text x="95.4007%" y="287.50"></text></g><g><title>hir_lowering (912,231 samples, 1.11%)</title><rect x="95.3550%" y="277" width="1.1075%" height="15" fill="rgb(228,201,54)"/><text x="95.6050%" y="287.50"></text></g><g><title>parse_crate (1,820,330 samples, 2.21%)</title><rect x="96.5211%" y="277" width="2.2101%" height="15" fill="rgb(222,22,37)"/><text x="96.7711%" y="287.50">p..</text></g><g><title>prepare_outputs (177,742 samples, 0.22%)</title><rect x="98.7420%" y="277" width="0.2158%" height="15" fill="rgb(237,53,32)"/><text x="98.9920%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (475,435 samples, 0.58%)</title><rect x="98.9578%" y="277" width="0.5772%" height="15" fill="rgb(233,25,53)"/><text x="99.2078%" y="287.50"></text></g><g><title>setup_global_ctxt (87,541 samples, 0.11%)</title><rect x="99.5480%" y="277" width="0.1063%" height="15" fill="rgb(210,40,34)"/><text x="99.7980%" y="287.50"></text></g><g><title>all (82,364,777 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (82,364,777 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,28,35)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (284,764 samples, 0.35%)</title><rect x="99.6543%" y="277" width="0.3457%" height="15" fill="rgb(210,56,17)"/><text x="99.9043%" y="287.50"></text></g></svg></svg>