<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (738,808 samples, 0.22%)</title><rect x="15.8175%" y="101" width="0.2249%" height="15" fill="rgb(227,0,7)"/><text x="16.0675%" y="111.50"></text></g><g><title>is_copy_raw (330,203 samples, 0.10%)</title><rect x="15.9419%" y="85" width="0.1005%" height="15" fill="rgb(217,0,24)"/><text x="16.1919%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,432,068 samples, 0.44%)</title><rect x="16.1163%" y="85" width="0.4359%" height="15" fill="rgb(221,193,54)"/><text x="16.3663%" y="95.50"></text></g><g><title>impl_parent (425,277 samples, 0.13%)</title><rect x="16.7506%" y="69" width="0.1295%" height="15" fill="rgb(248,212,6)"/><text x="17.0006%" y="79.50"></text></g><g><title>specialization_graph_of (2,171,826 samples, 0.66%)</title><rect x="16.5633%" y="85" width="0.6611%" height="15" fill="rgb(208,68,35)"/><text x="16.8133%" y="95.50"></text></g><g><title>impl_trait_ref (1,131,480 samples, 0.34%)</title><rect x="16.8800%" y="69" width="0.3444%" height="15" fill="rgb(232,128,0)"/><text x="17.1300%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (972,898 samples, 0.30%)</title><rect x="16.9283%" y="53" width="0.2962%" height="15" fill="rgb(207,160,47)"/><text x="17.1783%" y="63.50"></text></g><g><title>resolve_instance (3,935,025 samples, 1.20%)</title><rect x="16.0424%" y="101" width="1.1979%" height="15" fill="rgb(228,23,34)"/><text x="16.2924%" y="111.50"></text></g><g><title>thir_body (3,759,638 samples, 1.14%)</title><rect x="17.2465%" y="101" width="1.1445%" height="15" fill="rgb(218,30,26)"/><text x="17.4965%" y="111.50"></text></g><g><title>mir_const (20,042,754 samples, 6.10%)</title><rect x="12.2973%" y="149" width="6.1012%" height="15" fill="rgb(220,122,19)"/><text x="12.5473%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (18,426,947 samples, 5.61%)</title><rect x="12.7892%" y="133" width="5.6094%" height="15" fill="rgb(250,228,42)"/><text x="13.0392%" y="143.50">unsafet..</text></g><g><title>mir_built (17,289,194 samples, 5.26%)</title><rect x="13.1355%" y="117" width="5.2630%" height="15" fill="rgb(240,193,28)"/><text x="13.3855%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (22,090,588 samples, 6.72%)</title><rect x="11.8297%" y="165" width="6.7246%" height="15" fill="rgb(216,20,37)"/><text x="12.0797%" y="175.50">mir_promo..</text></g><g><title>mir_const_qualif (511,706 samples, 0.16%)</title><rect x="18.3986%" y="149" width="0.1558%" height="15" fill="rgb(206,188,39)"/><text x="18.6486%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (971,102 samples, 0.30%)</title><rect x="18.5669%" y="165" width="0.2956%" height="15" fill="rgb(217,207,13)"/><text x="18.8169%" y="175.50"></text></g><g><title>normalize_projection_ty (732,109 samples, 0.22%)</title><rect x="18.6397%" y="149" width="0.2229%" height="15" fill="rgb(231,73,38)"/><text x="18.8897%" y="159.50"></text></g><g><title>type_op_normalize_predicate (943,637 samples, 0.29%)</title><rect x="18.8625%" y="165" width="0.2873%" height="15" fill="rgb(225,20,46)"/><text x="19.1125%" y="175.50"></text></g><g><title>normalize_projection_ty (427,134 samples, 0.13%)</title><rect x="19.0198%" y="149" width="0.1300%" height="15" fill="rgb(210,31,41)"/><text x="19.2698%" y="159.50"></text></g><g><title>MIR_borrow_checking (65,094,557 samples, 19.82%)</title><rect x="0.5284%" y="197" width="19.8155%" height="15" fill="rgb(221,200,47)"/><text x="0.7784%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (64,998,225 samples, 19.79%)</title><rect x="0.5577%" y="181" width="19.7862%" height="15" fill="rgb(226,26,5)"/><text x="0.8077%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (3,922,708 samples, 1.19%)</title><rect x="19.1498%" y="165" width="1.1941%" height="15" fill="rgb(249,33,26)"/><text x="19.3998%" y="175.50"></text></g><g><title>check_mod_attrs (671,677 samples, 0.20%)</title><rect x="20.4581%" y="181" width="0.2045%" height="15" fill="rgb(235,183,28)"/><text x="20.7081%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (347,014 samples, 0.11%)</title><rect x="20.7374%" y="181" width="0.1056%" height="15" fill="rgb(221,5,38)"/><text x="20.9874%" y="191.50"></text></g><g><title>misc_checking_1 (1,319,675 samples, 0.40%)</title><rect x="20.4513%" y="197" width="0.4017%" height="15" fill="rgb(247,18,42)"/><text x="20.7013%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,153,843 samples, 0.35%)</title><rect x="20.8535%" y="181" width="0.3512%" height="15" fill="rgb(241,131,45)"/><text x="21.1035%" y="191.50"></text></g><g><title>check_mod_liveness (931,951 samples, 0.28%)</title><rect x="20.9211%" y="165" width="0.2837%" height="15" fill="rgb(249,31,29)"/><text x="21.1711%" y="175.50"></text></g><g><title>misc_checking_2 (2,219,355 samples, 0.68%)</title><rect x="20.8530%" y="197" width="0.6756%" height="15" fill="rgb(225,111,53)"/><text x="21.1030%" y="207.50"></text></g><g><title>match_checking (1,063,872 samples, 0.32%)</title><rect x="21.2048%" y="181" width="0.3239%" height="15" fill="rgb(238,160,17)"/><text x="21.4548%" y="191.50"></text></g><g><title>check_match (1,039,421 samples, 0.32%)</title><rect x="21.2122%" y="165" width="0.3164%" height="15" fill="rgb(214,148,48)"/><text x="21.4622%" y="175.50"></text></g><g><title>death_checking (333,424 samples, 0.10%)</title><rect x="21.5677%" y="181" width="0.1015%" height="15" fill="rgb(232,36,49)"/><text x="21.8177%" y="191.50"></text></g><g><title>eval_to_const_value_raw (537,506 samples, 0.16%)</title><rect x="21.9874%" y="101" width="0.1636%" height="15" fill="rgb(209,103,24)"/><text x="22.2374%" y="111.50"></text></g><g><title>eval_to_const_value_raw (536,716 samples, 0.16%)</title><rect x="21.9876%" y="85" width="0.1634%" height="15" fill="rgb(229,88,8)"/><text x="22.2376%" y="95.50"></text></g><g><title>eval_to_allocation_raw (535,016 samples, 0.16%)</title><rect x="21.9881%" y="69" width="0.1629%" height="15" fill="rgb(213,181,19)"/><text x="22.2381%" y="79.50"></text></g><g><title>eval_to_allocation_raw (602,947 samples, 0.18%)</title><rect x="21.9681%" y="149" width="0.1835%" height="15" fill="rgb(254,191,54)"/><text x="22.2181%" y="159.50"></text></g><g><title>eval_to_allocation_raw (602,277 samples, 0.18%)</title><rect x="21.9683%" y="133" width="0.1833%" height="15" fill="rgb(241,83,37)"/><text x="22.2183%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (549,116 samples, 0.17%)</title><rect x="21.9845%" y="117" width="0.1672%" height="15" fill="rgb(233,36,39)"/><text x="22.2345%" y="127.50"></text></g><g><title>crate_lints (1,851,941 samples, 0.56%)</title><rect x="21.6697%" y="165" width="0.5638%" height="15" fill="rgb(226,3,54)"/><text x="21.9197%" y="175.50"></text></g><g><title>lint_checking (3,346,068 samples, 1.02%)</title><rect x="21.6692%" y="181" width="1.0186%" height="15" fill="rgb(245,192,40)"/><text x="21.9192%" y="191.50"></text></g><g><title>module_lints (1,492,647 samples, 0.45%)</title><rect x="22.2334%" y="165" width="0.4544%" height="15" fill="rgb(238,167,29)"/><text x="22.4834%" y="175.50"></text></g><g><title>lint_mod (1,490,157 samples, 0.45%)</title><rect x="22.2342%" y="149" width="0.4536%" height="15" fill="rgb(232,182,51)"/><text x="22.4842%" y="159.50"></text></g><g><title>privacy_checking_modules (1,861,601 samples, 0.57%)</title><rect x="22.7472%" y="181" width="0.5667%" height="15" fill="rgb(231,60,39)"/><text x="22.9972%" y="191.50"></text></g><g><title>check_mod_privacy (1,859,821 samples, 0.57%)</title><rect x="22.7477%" y="165" width="0.5662%" height="15" fill="rgb(208,69,12)"/><text x="22.9977%" y="175.50"></text></g><g><title>misc_checking_3 (5,875,256 samples, 1.79%)</title><rect x="21.5286%" y="197" width="1.7885%" height="15" fill="rgb(235,93,37)"/><text x="21.7786%" y="207.50">m..</text></g><g><title>adt_def (343,153 samples, 0.10%)</title><rect x="25.9679%" y="69" width="0.1045%" height="15" fill="rgb(213,116,39)"/><text x="26.2179%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (337,873 samples, 0.10%)</title><rect x="25.9695%" y="53" width="0.1029%" height="15" fill="rgb(222,207,29)"/><text x="26.2195%" y="63.50"></text></g><g><title>adt_dtorck_constraint (608,526 samples, 0.19%)</title><rect x="26.0840%" y="69" width="0.1852%" height="15" fill="rgb(206,96,30)"/><text x="26.3340%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,195,712 samples, 0.36%)</title><rect x="25.9338%" y="85" width="0.3640%" height="15" fill="rgb(218,138,4)"/><text x="26.1838%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,736,690 samples, 0.53%)</title><rect x="25.8079%" y="101" width="0.5287%" height="15" fill="rgb(250,191,14)"/><text x="26.0579%" y="111.50"></text></g><g><title>dropck_outlives (2,386,897 samples, 0.73%)</title><rect x="25.6347%" y="133" width="0.7266%" height="15" fill="rgb(239,60,40)"/><text x="25.8847%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,273,095 samples, 0.69%)</title><rect x="25.6694%" y="117" width="0.6920%" height="15" fill="rgb(206,27,48)"/><text x="25.9194%" y="127.50"></text></g><g><title>evaluate_obligation (834,031 samples, 0.25%)</title><rect x="26.3613%" y="133" width="0.2539%" height="15" fill="rgb(225,35,8)"/><text x="26.6113%" y="143.50"></text></g><g><title>trait_impls_of (430,975 samples, 0.13%)</title><rect x="26.4840%" y="117" width="0.1312%" height="15" fill="rgb(250,213,24)"/><text x="26.7340%" y="127.50"></text></g><g><title>associated_item (373,754 samples, 0.11%)</title><rect x="45.2855%" y="101" width="0.1138%" height="15" fill="rgb(247,123,22)"/><text x="45.5355%" y="111.50"></text></g><g><title>associated_items (523,466 samples, 0.16%)</title><rect x="45.2484%" y="117" width="0.1593%" height="15" fill="rgb(231,138,38)"/><text x="45.4984%" y="127.50"></text></g><g><title>dropck_outlives (374,824 samples, 0.11%)</title><rect x="45.4156%" y="117" width="0.1141%" height="15" fill="rgb(231,145,46)"/><text x="45.6656%" y="127.50"></text></g><g><title>evaluate_obligation (3,294,429 samples, 1.00%)</title><rect x="45.5297%" y="117" width="1.0029%" height="15" fill="rgb(251,118,11)"/><text x="45.7797%" y="127.50"></text></g><g><title>trait_impls_of (448,726 samples, 0.14%)</title><rect x="46.3960%" y="101" width="0.1366%" height="15" fill="rgb(217,147,25)"/><text x="46.6460%" y="111.50"></text></g><g><title>lint_levels (483,876 samples, 0.15%)</title><rect x="46.7142%" y="117" width="0.1473%" height="15" fill="rgb(247,81,37)"/><text x="46.9642%" y="127.50"></text></g><g><title>method_autoderef_steps (554,125 samples, 0.17%)</title><rect x="46.8687%" y="117" width="0.1687%" height="15" fill="rgb(209,12,38)"/><text x="47.1187%" y="127.50"></text></g><g><title>typeck (66,968,548 samples, 20.39%)</title><rect x="26.8172%" y="133" width="20.3860%" height="15" fill="rgb(227,1,9)"/><text x="27.0672%" y="143.50">typeck</text></g><g><title>item_bodies_checking (78,390,435 samples, 23.86%)</title><rect x="23.3448%" y="181" width="23.8629%" height="15" fill="rgb(248,47,43)"/><text x="23.5948%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (78,387,215 samples, 23.86%)</title><rect x="23.3458%" y="165" width="23.8619%" height="15" fill="rgb(221,10,30)"/><text x="23.5958%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (78,349,825 samples, 23.85%)</title><rect x="23.3572%" y="149" width="23.8506%" height="15" fill="rgb(210,229,1)"/><text x="23.6072%" y="159.50">typeck</text></g><g><title>coherent_trait (567,206 samples, 0.17%)</title><rect x="47.4402%" y="53" width="0.1727%" height="15" fill="rgb(222,148,37)"/><text x="47.6902%" y="63.50"></text></g><g><title>specialization_graph_of (563,406 samples, 0.17%)</title><rect x="47.4413%" y="37" width="0.1715%" height="15" fill="rgb(234,67,33)"/><text x="47.6913%" y="47.50"></text></g><g><title>adt_destructor (573,476 samples, 0.17%)</title><rect x="47.4387%" y="85" width="0.1746%" height="15" fill="rgb(247,98,35)"/><text x="47.6887%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (572,966 samples, 0.17%)</title><rect x="47.4389%" y="69" width="0.1744%" height="15" fill="rgb(247,138,52)"/><text x="47.6889%" y="79.50"></text></g><g><title>adt_dtorck_constraint (579,507 samples, 0.18%)</title><rect x="47.4370%" y="101" width="0.1764%" height="15" fill="rgb(213,79,30)"/><text x="47.6870%" y="111.50"></text></g><g><title>dropck_outlives (608,717 samples, 0.19%)</title><rect x="47.4285%" y="133" width="0.1853%" height="15" fill="rgb(246,177,23)"/><text x="47.6785%" y="143.50"></text></g><g><title>adt_dtorck_constraint (592,267 samples, 0.18%)</title><rect x="47.4335%" y="117" width="0.1803%" height="15" fill="rgb(230,62,27)"/><text x="47.6835%" y="127.50"></text></g><g><title>item_types_checking (1,530,317 samples, 0.47%)</title><rect x="47.2078%" y="181" width="0.4658%" height="15" fill="rgb(216,154,8)"/><text x="47.4578%" y="191.50"></text></g><g><title>check_mod_item_types (1,528,337 samples, 0.47%)</title><rect x="47.2084%" y="165" width="0.4652%" height="15" fill="rgb(244,35,45)"/><text x="47.4584%" y="175.50"></text></g><g><title>typeck (1,492,827 samples, 0.45%)</title><rect x="47.2192%" y="149" width="0.4544%" height="15" fill="rgb(251,115,12)"/><text x="47.4692%" y="159.50"></text></g><g><title>generics_of (384,886 samples, 0.12%)</title><rect x="47.7812%" y="149" width="0.1172%" height="15" fill="rgb(240,54,50)"/><text x="48.0312%" y="159.50"></text></g><g><title>type_collecting (814,199 samples, 0.25%)</title><rect x="47.6743%" y="181" width="0.2479%" height="15" fill="rgb(233,84,52)"/><text x="47.9243%" y="191.50"></text></g><g><title>collect_mod_item_types (807,259 samples, 0.25%)</title><rect x="47.6764%" y="165" width="0.2457%" height="15" fill="rgb(207,117,47)"/><text x="47.9264%" y="175.50"></text></g><g><title>adt_sized_constraint (487,846 samples, 0.15%)</title><rect x="48.2507%" y="69" width="0.1485%" height="15" fill="rgb(249,43,39)"/><text x="48.5007%" y="79.50"></text></g><g><title>adt_sized_constraint (633,527 samples, 0.19%)</title><rect x="48.2198%" y="85" width="0.1929%" height="15" fill="rgb(209,38,44)"/><text x="48.4698%" y="95.50"></text></g><g><title>adt_sized_constraint (735,728 samples, 0.22%)</title><rect x="48.1949%" y="101" width="0.2240%" height="15" fill="rgb(236,212,23)"/><text x="48.4449%" y="111.50"></text></g><g><title>adt_sized_constraint (810,649 samples, 0.25%)</title><rect x="48.1783%" y="117" width="0.2468%" height="15" fill="rgb(242,79,21)"/><text x="48.4283%" y="127.50"></text></g><g><title>adt_sized_constraint (860,219 samples, 0.26%)</title><rect x="48.1634%" y="133" width="0.2619%" height="15" fill="rgb(211,96,35)"/><text x="48.4134%" y="143.50"></text></g><g><title>evaluate_obligation (1,106,051 samples, 0.34%)</title><rect x="48.1218%" y="149" width="0.3367%" height="15" fill="rgb(253,215,40)"/><text x="48.3718%" y="159.50"></text></g><g><title>region_scope_tree (928,390 samples, 0.28%)</title><rect x="48.5561%" y="149" width="0.2826%" height="15" fill="rgb(211,81,21)"/><text x="48.8061%" y="159.50"></text></g><g><title>analysis (159,425,899 samples, 48.53%)</title><rect x="0.3079%" y="213" width="48.5310%" height="15" fill="rgb(208,190,38)"/><text x="0.5579%" y="223.50">analysis</text></g><g><title>type_check_crate (83,839,774 samples, 25.52%)</title><rect x="23.3171%" y="197" width="25.5218%" height="15" fill="rgb(235,213,38)"/><text x="23.5671%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,008,053 samples, 0.92%)</title><rect x="47.9232%" y="181" width="0.9157%" height="15" fill="rgb(237,122,38)"/><text x="48.1732%" y="191.50"></text></g><g><title>check_item_well_formed (2,898,492 samples, 0.88%)</title><rect x="47.9566%" y="165" width="0.8823%" height="15" fill="rgb(244,218,35)"/><text x="48.2066%" y="175.50"></text></g><g><title>codegen_crate (416,685 samples, 0.13%)</title><rect x="48.8424%" y="213" width="0.1268%" height="15" fill="rgb(240,68,47)"/><text x="49.0924%" y="223.50"></text></g><g><title>metadata_load_macro (898,612 samples, 0.27%)</title><rect x="90.8952%" y="165" width="0.2735%" height="15" fill="rgb(210,16,53)"/><text x="91.1452%" y="175.50"></text></g><g><title>macro_expand_crate (140,818,572 samples, 42.87%)</title><rect x="49.1762%" y="197" width="42.8667%" height="15" fill="rgb(235,124,12)"/><text x="49.4262%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (140,792,122 samples, 42.86%)</title><rect x="49.1842%" y="181" width="42.8587%" height="15" fill="rgb(224,169,11)"/><text x="49.4342%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,871,762 samples, 0.87%)</title><rect x="91.1687%" y="165" width="0.8742%" height="15" fill="rgb(250,166,2)"/><text x="91.4187%" y="175.50"></text></g><g><title>metadata_register_crate (984,923 samples, 0.30%)</title><rect x="91.7431%" y="149" width="0.2998%" height="15" fill="rgb(242,216,29)"/><text x="91.9931%" y="159.50"></text></g><g><title>maybe_create_a_macro_crate (515,055 samples, 0.16%)</title><rect x="92.0433%" y="197" width="0.1568%" height="15" fill="rgb(230,116,27)"/><text x="92.2933%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (348,554 samples, 0.11%)</title><rect x="92.2001%" y="197" width="0.1061%" height="15" fill="rgb(228,99,48)"/><text x="92.4501%" y="207.50"></text></g><g><title>finalize_macro_resolutions (1,895,661 samples, 0.58%)</title><rect x="92.3256%" y="181" width="0.5771%" height="15" fill="rgb(253,11,6)"/><text x="92.5756%" y="191.50"></text></g><g><title>late_resolve_crate (4,359,419 samples, 1.33%)</title><rect x="92.9027%" y="181" width="1.3271%" height="15" fill="rgb(247,143,39)"/><text x="93.1527%" y="191.50"></text></g><g><title>configure_and_expand (148,981,803 samples, 45.35%)</title><rect x="48.9692%" y="213" width="45.3517%" height="15" fill="rgb(236,97,10)"/><text x="49.2192%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (6,618,584 samples, 2.01%)</title><rect x="92.3062%" y="197" width="2.0148%" height="15" fill="rgb(233,208,19)"/><text x="92.5562%" y="207.50">r..</text></g><g><title>drop_ast (405,724 samples, 0.12%)</title><rect x="94.3210%" y="213" width="0.1235%" height="15" fill="rgb(216,164,2)"/><text x="94.5710%" y="223.50"></text></g><g><title>early_lint_checks (1,331,715 samples, 0.41%)</title><rect x="94.4500%" y="213" width="0.4054%" height="15" fill="rgb(220,129,5)"/><text x="94.7000%" y="223.50"></text></g><g><title>free_global_ctxt (3,395,118 samples, 1.03%)</title><rect x="94.8554%" y="213" width="1.0335%" height="15" fill="rgb(242,17,10)"/><text x="95.1054%" y="223.50"></text></g><g><title>hir_lowering (6,455,233 samples, 1.97%)</title><rect x="95.9434%" y="213" width="1.9650%" height="15" fill="rgb(242,107,0)"/><text x="96.1934%" y="223.50">h..</text></g><g><title>parse_crate (5,621,802 samples, 1.71%)</title><rect x="97.9255%" y="213" width="1.7113%" height="15" fill="rgb(251,28,31)"/><text x="98.1755%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (578,876 samples, 0.18%)</title><rect x="99.7036%" y="213" width="0.1762%" height="15" fill="rgb(233,223,10)"/><text x="99.9536%" y="223.50"></text></g><g><title>all (328,503,045 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (328,503,045 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>