<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (9,286,339 samples, 0.13%)</title><rect x="14.8310%" y="149" width="0.1301%" height="15" fill="rgb(227,0,7)"/><text x="15.0810%" y="159.50"></text></g><g><title>is_copy_raw (51,437,074 samples, 0.72%)</title><rect x="20.0980%" y="69" width="0.7207%" height="15" fill="rgb(217,0,24)"/><text x="20.3480%" y="79.50"></text></g><g><title>evaluate_obligation (42,835,844 samples, 0.60%)</title><rect x="20.2186%" y="53" width="0.6002%" height="15" fill="rgb(221,193,54)"/><text x="20.4686%" y="63.50"></text></g><g><title>needs_drop_raw (58,412,668 samples, 0.82%)</title><rect x="20.0025%" y="85" width="0.8185%" height="15" fill="rgb(248,212,6)"/><text x="20.2525%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (30,719,566 samples, 0.43%)</title><rect x="20.9363%" y="69" width="0.4304%" height="15" fill="rgb(208,68,35)"/><text x="21.1863%" y="79.50"></text></g><g><title>resolve_instance (40,913,007 samples, 0.57%)</title><rect x="20.8213%" y="85" width="0.5733%" height="15" fill="rgb(232,128,0)"/><text x="21.0713%" y="95.50"></text></g><g><title>thir_body (75,991,065 samples, 1.06%)</title><rect x="21.4141%" y="85" width="1.0648%" height="15" fill="rgb(207,160,47)"/><text x="21.6641%" y="95.50"></text></g><g><title>mir_const (488,872,853 samples, 6.85%)</title><rect x="15.6957%" y="133" width="6.8501%" height="15" fill="rgb(228,23,34)"/><text x="15.9457%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (448,144,522 samples, 6.28%)</title><rect x="16.2664%" y="117" width="6.2794%" height="15" fill="rgb(218,30,26)"/><text x="16.5164%" y="127.50">unsafety..</text></g><g><title>mir_built (419,957,355 samples, 5.88%)</title><rect x="16.6614%" y="101" width="5.8844%" height="15" fill="rgb(220,122,19)"/><text x="16.9114%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (536,462,801 samples, 7.52%)</title><rect x="15.0879%" y="149" width="7.5169%" height="15" fill="rgb(250,228,42)"/><text x="15.3379%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (18,340,525 samples, 0.26%)</title><rect x="22.6050%" y="149" width="0.2570%" height="15" fill="rgb(240,193,28)"/><text x="22.8550%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (61,312,525 samples, 0.86%)</title><rect x="22.8619%" y="149" width="0.8591%" height="15" fill="rgb(216,20,37)"/><text x="23.1119%" y="159.50"></text></g><g><title>normalize_projection_ty (22,946,416 samples, 0.32%)</title><rect x="23.3995%" y="133" width="0.3215%" height="15" fill="rgb(206,188,39)"/><text x="23.6495%" y="143.50"></text></g><g><title>type_op_normalize_predicate (17,927,485 samples, 0.25%)</title><rect x="23.7211%" y="149" width="0.2512%" height="15" fill="rgb(217,207,13)"/><text x="23.9711%" y="159.50"></text></g><g><title>type_op_normalize_ty (85,034,458 samples, 1.19%)</title><rect x="23.9723%" y="149" width="1.1915%" height="15" fill="rgb(231,73,38)"/><text x="24.2223%" y="159.50"></text></g><g><title>normalize_projection_ty (54,052,074 samples, 0.76%)</title><rect x="24.4064%" y="133" width="0.7574%" height="15" fill="rgb(225,20,46)"/><text x="24.6564%" y="143.50"></text></g><g><title>type_op_prove_predicate (230,673,775 samples, 3.23%)</title><rect x="25.1638%" y="149" width="3.2322%" height="15" fill="rgb(210,31,41)"/><text x="25.4138%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (2,009,685,835 samples, 28.16%)</title><rect x="0.2368%" y="181" width="28.1597%" height="15" fill="rgb(221,200,47)"/><text x="0.4868%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (2,003,361,969 samples, 28.07%)</title><rect x="0.3255%" y="165" width="28.0711%" height="15" fill="rgb(226,26,5)"/><text x="0.5755%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (29,580,967 samples, 0.41%)</title><rect x="28.5423%" y="165" width="0.4145%" height="15" fill="rgb(249,33,26)"/><text x="28.7923%" y="175.50"></text></g><g><title>lint_levels (10,208,963 samples, 0.14%)</title><rect x="28.8137%" y="149" width="0.1430%" height="15" fill="rgb(235,183,28)"/><text x="29.0637%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (13,634,248 samples, 0.19%)</title><rect x="29.1131%" y="165" width="0.1910%" height="15" fill="rgb(221,5,38)"/><text x="29.3631%" y="175.50"></text></g><g><title>misc_checking_1 (55,412,762 samples, 0.78%)</title><rect x="28.5408%" y="181" width="0.7764%" height="15" fill="rgb(247,18,42)"/><text x="28.7908%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (30,635,559 samples, 0.43%)</title><rect x="29.3173%" y="165" width="0.4293%" height="15" fill="rgb(241,131,45)"/><text x="29.5673%" y="175.50"></text></g><g><title>check_mod_liveness (25,018,206 samples, 0.35%)</title><rect x="29.3960%" y="149" width="0.3506%" height="15" fill="rgb(249,31,29)"/><text x="29.6460%" y="159.50"></text></g><g><title>misc_checking_2 (71,855,184 samples, 1.01%)</title><rect x="29.3172%" y="181" width="1.0068%" height="15" fill="rgb(225,111,53)"/><text x="29.5672%" y="191.50"></text></g><g><title>match_checking (41,216,125 samples, 0.58%)</title><rect x="29.7466%" y="165" width="0.5775%" height="15" fill="rgb(238,160,17)"/><text x="29.9966%" y="175.50"></text></g><g><title>check_match (39,827,004 samples, 0.56%)</title><rect x="29.7660%" y="149" width="0.5581%" height="15" fill="rgb(214,148,48)"/><text x="30.0160%" y="159.50"></text></g><g><title>check_private_in_public (14,903,344 samples, 0.21%)</title><rect x="30.3244%" y="165" width="0.2088%" height="15" fill="rgb(232,36,49)"/><text x="30.5744%" y="175.50"></text></g><g><title>death_checking (20,363,036 samples, 0.29%)</title><rect x="30.5333%" y="165" width="0.2853%" height="15" fill="rgb(209,103,24)"/><text x="30.7833%" y="175.50"></text></g><g><title>crate_lints (29,875,180 samples, 0.42%)</title><rect x="30.8186%" y="149" width="0.4186%" height="15" fill="rgb(229,88,8)"/><text x="31.0686%" y="159.50"></text></g><g><title>lint_checking (80,036,364 samples, 1.12%)</title><rect x="30.8186%" y="165" width="1.1215%" height="15" fill="rgb(213,181,19)"/><text x="31.0686%" y="175.50"></text></g><g><title>module_lints (50,157,584 samples, 0.70%)</title><rect x="31.2372%" y="149" width="0.7028%" height="15" fill="rgb(254,191,54)"/><text x="31.4872%" y="159.50"></text></g><g><title>lint_mod (50,100,252 samples, 0.70%)</title><rect x="31.2380%" y="133" width="0.7020%" height="15" fill="rgb(241,83,37)"/><text x="31.4880%" y="143.50"></text></g><g><title>privacy_access_levels (19,691,788 samples, 0.28%)</title><rect x="31.9401%" y="165" width="0.2759%" height="15" fill="rgb(233,36,39)"/><text x="32.1901%" y="175.50"></text></g><g><title>privacy_checking_modules (104,940,849 samples, 1.47%)</title><rect x="32.2160%" y="165" width="1.4704%" height="15" fill="rgb(226,3,54)"/><text x="32.4660%" y="175.50"></text></g><g><title>check_mod_privacy (104,906,739 samples, 1.47%)</title><rect x="32.2165%" y="149" width="1.4700%" height="15" fill="rgb(245,192,40)"/><text x="32.4665%" y="159.50"></text></g><g><title>misc_checking_3 (240,293,364 samples, 3.37%)</title><rect x="30.3241%" y="181" width="3.3670%" height="15" fill="rgb(238,167,29)"/><text x="30.5741%" y="191.50">mis..</text></g><g><title>impl_trait_ref (7,336,327 samples, 0.10%)</title><rect x="33.9240%" y="117" width="0.1028%" height="15" fill="rgb(232,182,51)"/><text x="34.1740%" y="127.50"></text></g><g><title>coherent_trait (22,634,340 samples, 0.32%)</title><rect x="33.7321%" y="149" width="0.3172%" height="15" fill="rgb(231,60,39)"/><text x="33.9821%" y="159.50"></text></g><g><title>specialization_graph_of (20,635,047 samples, 0.29%)</title><rect x="33.7601%" y="133" width="0.2891%" height="15" fill="rgb(208,69,12)"/><text x="34.0101%" y="143.50"></text></g><g><title>coherence_checking (23,611,180 samples, 0.33%)</title><rect x="33.7314%" y="165" width="0.3308%" height="15" fill="rgb(235,93,37)"/><text x="33.9814%" y="175.50"></text></g><g><title>dropck_outlives (15,431,415 samples, 0.22%)</title><rect x="66.3574%" y="117" width="0.2162%" height="15" fill="rgb(213,116,39)"/><text x="66.6074%" y="127.50"></text></g><g><title>evaluate_obligation (128,619,389 samples, 1.80%)</title><rect x="66.5737%" y="117" width="1.8022%" height="15" fill="rgb(222,207,29)"/><text x="66.8237%" y="127.50">e..</text></g><g><title>method_autoderef_steps (32,606,029 samples, 0.46%)</title><rect x="68.4025%" y="117" width="0.4569%" height="15" fill="rgb(206,96,30)"/><text x="68.6525%" y="127.50"></text></g><g><title>evaluate_obligation (16,333,953 samples, 0.23%)</title><rect x="68.6305%" y="101" width="0.2289%" height="15" fill="rgb(218,138,4)"/><text x="68.8805%" y="111.50"></text></g><g><title>evaluate_obligation (45,850,061 samples, 0.64%)</title><rect x="75.4179%" y="101" width="0.6425%" height="15" fill="rgb(250,191,14)"/><text x="75.6679%" y="111.50"></text></g><g><title>typeck (524,145,629 samples, 7.34%)</title><rect x="68.9009%" y="117" width="7.3443%" height="15" fill="rgb(239,60,40)"/><text x="69.1509%" y="127.50">typeck</text></g><g><title>item_bodies_checking (3,009,536,748 samples, 42.17%)</title><rect x="34.0847%" y="165" width="42.1696%" height="15" fill="rgb(206,27,48)"/><text x="34.3347%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (3,009,533,178 samples, 42.17%)</title><rect x="34.0847%" y="149" width="42.1695%" height="15" fill="rgb(225,35,8)"/><text x="34.3347%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (3,005,595,535 samples, 42.11%)</title><rect x="34.1399%" y="133" width="42.1144%" height="15" fill="rgb(250,213,24)"/><text x="34.3899%" y="143.50">typeck</text></g><g><title>implied_outlives_bounds (9,795,687 samples, 0.14%)</title><rect x="78.6234%" y="133" width="0.1373%" height="15" fill="rgb(247,123,22)"/><text x="78.8734%" y="143.50"></text></g><g><title>mir_borrowck (8,961,288 samples, 0.13%)</title><rect x="79.0538%" y="85" width="0.1256%" height="15" fill="rgb(231,138,38)"/><text x="79.3038%" y="95.50"></text></g><g><title>mir_borrowck (21,884,079 samples, 0.31%)</title><rect x="78.9364%" y="101" width="0.3066%" height="15" fill="rgb(231,145,46)"/><text x="79.1864%" y="111.50"></text></g><g><title>mir_built (81,693,105 samples, 1.14%)</title><rect x="79.2759%" y="53" width="1.1447%" height="15" fill="rgb(251,118,11)"/><text x="79.5259%" y="63.50"></text></g><g><title>typeck (76,574,294 samples, 1.07%)</title><rect x="79.3476%" y="37" width="1.0730%" height="15" fill="rgb(217,147,25)"/><text x="79.5976%" y="47.50"></text></g><g><title>mir_const (92,003,165 samples, 1.29%)</title><rect x="79.2483%" y="85" width="1.2891%" height="15" fill="rgb(247,81,37)"/><text x="79.4983%" y="95.50"></text></g><g><title>unsafety_check_result (90,303,946 samples, 1.27%)</title><rect x="79.2721%" y="69" width="1.2653%" height="15" fill="rgb(209,12,38)"/><text x="79.5221%" y="79.50"></text></g><g><title>unsafety_check_result (8,342,309 samples, 0.12%)</title><rect x="80.4206%" y="53" width="0.1169%" height="15" fill="rgb(227,1,9)"/><text x="80.6706%" y="63.50"></text></g><g><title>mir_promoted (92,443,282 samples, 1.30%)</title><rect x="79.2430%" y="101" width="1.2953%" height="15" fill="rgb(248,47,43)"/><text x="79.4930%" y="111.50"></text></g><g><title>type_of (131,440,296 samples, 1.84%)</title><rect x="78.7633%" y="133" width="1.8417%" height="15" fill="rgb(221,10,30)"/><text x="79.0133%" y="143.50">t..</text></g><g><title>mir_borrowck (131,317,704 samples, 1.84%)</title><rect x="78.7650%" y="117" width="1.8400%" height="15" fill="rgb(210,229,1)"/><text x="79.0150%" y="127.50">m..</text></g><g><title>item_types_checking (317,828,300 samples, 4.45%)</title><rect x="76.2543%" y="165" width="4.4534%" height="15" fill="rgb(222,148,37)"/><text x="76.5043%" y="175.50">item_..</text></g><g><title>check_mod_item_types (317,764,450 samples, 4.45%)</title><rect x="76.2552%" y="149" width="4.4525%" height="15" fill="rgb(234,67,33)"/><text x="76.5052%" y="159.50">check..</text></g><g><title>typeck (7,329,242 samples, 0.10%)</title><rect x="80.6050%" y="133" width="0.1027%" height="15" fill="rgb(247,98,35)"/><text x="80.8550%" y="143.50"></text></g><g><title>fn_sig (11,740,042 samples, 0.16%)</title><rect x="80.9049%" y="133" width="0.1645%" height="15" fill="rgb(247,138,52)"/><text x="81.1549%" y="143.50"></text></g><g><title>generics_of (8,389,595 samples, 0.12%)</title><rect x="81.0694%" y="133" width="0.1176%" height="15" fill="rgb(213,79,30)"/><text x="81.3194%" y="143.50"></text></g><g><title>late_bound_vars_map (12,046,840 samples, 0.17%)</title><rect x="81.4524%" y="85" width="0.1688%" height="15" fill="rgb(246,177,23)"/><text x="81.7024%" y="95.50"></text></g><g><title>resolve_lifetimes (11,628,582 samples, 0.16%)</title><rect x="81.4583%" y="69" width="0.1629%" height="15" fill="rgb(230,62,27)"/><text x="81.7083%" y="79.50"></text></g><g><title>explicit_predicates_of (29,183,323 samples, 0.41%)</title><rect x="81.2736%" y="101" width="0.4089%" height="15" fill="rgb(216,154,8)"/><text x="81.5236%" y="111.50"></text></g><g><title>predicates_of (38,811,343 samples, 0.54%)</title><rect x="81.2047%" y="133" width="0.5438%" height="15" fill="rgb(244,35,45)"/><text x="81.4547%" y="143.50"></text></g><g><title>predicates_defined_on (36,862,324 samples, 0.52%)</title><rect x="81.2320%" y="117" width="0.5165%" height="15" fill="rgb(251,115,12)"/><text x="81.4820%" y="127.50"></text></g><g><title>type_collecting (86,274,303 samples, 1.21%)</title><rect x="80.7081%" y="165" width="1.2089%" height="15" fill="rgb(240,54,50)"/><text x="80.9581%" y="175.50"></text></g><g><title>collect_mod_item_types (86,231,713 samples, 1.21%)</title><rect x="80.7087%" y="149" width="1.2083%" height="15" fill="rgb(233,84,52)"/><text x="80.9587%" y="159.50"></text></g><g><title>type_of (11,925,979 samples, 0.17%)</title><rect x="81.7498%" y="133" width="0.1671%" height="15" fill="rgb(207,117,47)"/><text x="81.9998%" y="143.50"></text></g><g><title>evaluate_obligation (13,626,126 samples, 0.19%)</title><rect x="85.5589%" y="133" width="0.1909%" height="15" fill="rgb(249,43,39)"/><text x="85.8089%" y="143.50"></text></g><g><title>implied_outlives_bounds (26,495,989 samples, 0.37%)</title><rect x="85.7597%" y="133" width="0.3713%" height="15" fill="rgb(209,38,44)"/><text x="86.0097%" y="143.50"></text></g><g><title>param_env (27,386,595 samples, 0.38%)</title><rect x="86.1314%" y="133" width="0.3837%" height="15" fill="rgb(236,212,23)"/><text x="86.3814%" y="143.50"></text></g><g><title>region_scope_tree (25,706,315 samples, 0.36%)</title><rect x="86.5157%" y="133" width="0.3602%" height="15" fill="rgb(242,79,21)"/><text x="86.7657%" y="143.50"></text></g><g><title>check_impl_item_well_formed (344,275,658 samples, 4.82%)</title><rect x="82.0525%" y="149" width="4.8240%" height="15" fill="rgb(211,96,35)"/><text x="82.3025%" y="159.50">check_..</text></g><g><title>param_env (11,257,000 samples, 0.16%)</title><rect x="88.1625%" y="133" width="0.1577%" height="15" fill="rgb(253,215,40)"/><text x="88.4125%" y="143.50"></text></g><g><title>check_item_well_formed (108,863,315 samples, 1.53%)</title><rect x="86.8765%" y="149" width="1.5254%" height="15" fill="rgb(211,81,21)"/><text x="87.1265%" y="159.50"></text></g><g><title>analysis (6,317,798,196 samples, 88.52%)</title><rect x="0.0292%" y="197" width="88.5249%" height="15" fill="rgb(208,190,38)"/><text x="0.2792%" y="207.50">analysis</text></g><g><title>type_check_crate (3,915,435,724 samples, 54.86%)</title><rect x="33.6911%" y="181" width="54.8630%" height="15" fill="rgb(235,213,38)"/><text x="33.9411%" y="191.50">type_check_crate</text></g><g><title>wf_checking (473,344,399 samples, 6.63%)</title><rect x="81.9216%" y="165" width="6.6325%" height="15" fill="rgb(237,122,38)"/><text x="82.1716%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (10,862,689 samples, 0.15%)</title><rect x="88.4019%" y="149" width="0.1522%" height="15" fill="rgb(244,218,35)"/><text x="88.6519%" y="159.50"></text></g><g><title>AST_validation (9,545,516 samples, 0.13%)</title><rect x="88.5637%" y="181" width="0.1338%" height="15" fill="rgb(240,68,47)"/><text x="88.8137%" y="191.50"></text></g><g><title>complete_gated_feature_checking (7,749,185 samples, 0.11%)</title><rect x="88.6975%" y="181" width="0.1086%" height="15" fill="rgb(210,16,53)"/><text x="88.9475%" y="191.50"></text></g><g><title>macro_expand_crate (347,818,121 samples, 4.87%)</title><rect x="88.8075%" y="181" width="4.8736%" height="15" fill="rgb(235,124,12)"/><text x="89.0575%" y="191.50">macro_..</text></g><g><title>expand_crate (347,794,151 samples, 4.87%)</title><rect x="88.8078%" y="165" width="4.8733%" height="15" fill="rgb(224,169,11)"/><text x="89.0578%" y="175.50">expand..</text></g><g><title>late_resolve_crate (104,817,608 samples, 1.47%)</title><rect x="93.7524%" y="165" width="1.4687%" height="15" fill="rgb(250,166,2)"/><text x="94.0024%" y="175.50"></text></g><g><title>configure_and_expand (488,408,265 samples, 6.84%)</title><rect x="88.5604%" y="197" width="6.8436%" height="15" fill="rgb(242,216,29)"/><text x="88.8104%" y="207.50">configure..</text></g><g><title>resolve_crate (122,464,893 samples, 1.72%)</title><rect x="93.6880%" y="181" width="1.7160%" height="15" fill="rgb(230,116,27)"/><text x="93.9380%" y="191.50"></text></g><g><title>drop_ast (26,345,291 samples, 0.37%)</title><rect x="95.4039%" y="197" width="0.3691%" height="15" fill="rgb(228,99,48)"/><text x="95.6539%" y="207.50"></text></g><g><title>early_lint_checks (23,962,145 samples, 0.34%)</title><rect x="95.7734%" y="197" width="0.3358%" height="15" fill="rgb(253,11,6)"/><text x="96.0234%" y="207.50"></text></g><g><title>free_global_ctxt (37,224,080 samples, 0.52%)</title><rect x="96.1092%" y="197" width="0.5216%" height="15" fill="rgb(247,143,39)"/><text x="96.3592%" y="207.50"></text></g><g><title>generate_crate_metadata (47,243,182 samples, 0.66%)</title><rect x="96.6308%" y="197" width="0.6620%" height="15" fill="rgb(236,97,10)"/><text x="96.8808%" y="207.50"></text></g><g><title>hir_lowering (176,165,435 samples, 2.47%)</title><rect x="97.2927%" y="197" width="2.4684%" height="15" fill="rgb(233,208,19)"/><text x="97.5427%" y="207.50">hi..</text></g><g><title>all (7,136,745,161 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (7,136,745,161 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>