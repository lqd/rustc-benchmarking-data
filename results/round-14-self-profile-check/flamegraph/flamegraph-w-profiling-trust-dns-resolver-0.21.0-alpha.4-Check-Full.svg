<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,218,111 samples, 0.14%)</title><rect x="9.2022%" y="197" width="0.1391%" height="15" fill="rgb(227,0,7)"/><text x="9.4522%" y="207.50"></text></g><g><title>param_env (1,071,298 samples, 0.12%)</title><rect x="10.4869%" y="165" width="0.1223%" height="15" fill="rgb(217,0,24)"/><text x="10.7369%" y="175.50"></text></g><g><title>item_attrs (942,349 samples, 0.11%)</title><rect x="10.9657%" y="133" width="0.1076%" height="15" fill="rgb(221,193,54)"/><text x="11.2157%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (906,839 samples, 0.10%)</title><rect x="10.9697%" y="117" width="0.1035%" height="15" fill="rgb(248,212,6)"/><text x="11.2197%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,319,203 samples, 0.15%)</title><rect x="10.9293%" y="149" width="0.1506%" height="15" fill="rgb(208,68,35)"/><text x="11.1793%" y="159.50"></text></g><g><title>adt_drop_tys (1,296,860 samples, 0.15%)</title><rect x="13.0870%" y="117" width="0.1481%" height="15" fill="rgb(232,128,0)"/><text x="13.3370%" y="127.50"></text></g><g><title>is_copy_raw (4,086,760 samples, 0.47%)</title><rect x="13.2354%" y="117" width="0.4666%" height="15" fill="rgb(207,160,47)"/><text x="13.4854%" y="127.50"></text></g><g><title>evaluate_obligation (3,136,879 samples, 0.36%)</title><rect x="13.3439%" y="101" width="0.3581%" height="15" fill="rgb(228,23,34)"/><text x="13.5939%" y="111.50"></text></g><g><title>needs_drop_raw (6,255,554 samples, 0.71%)</title><rect x="12.9995%" y="133" width="0.7141%" height="15" fill="rgb(218,30,26)"/><text x="13.2495%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (8,784,707 samples, 1.00%)</title><rect x="13.9275%" y="117" width="1.0029%" height="15" fill="rgb(220,122,19)"/><text x="14.1775%" y="127.50"></text></g><g><title>evaluate_obligation (3,694,659 samples, 0.42%)</title><rect x="14.5086%" y="101" width="0.4218%" height="15" fill="rgb(250,228,42)"/><text x="14.7586%" y="111.50"></text></g><g><title>resolve_instance (12,029,753 samples, 1.37%)</title><rect x="13.7172%" y="133" width="1.3733%" height="15" fill="rgb(240,193,28)"/><text x="13.9672%" y="143.50"></text></g><g><title>thir_body (5,954,728 samples, 0.68%)</title><rect x="15.1108%" y="133" width="0.6798%" height="15" fill="rgb(216,20,37)"/><text x="15.3608%" y="143.50"></text></g><g><title>mir_const (51,182,256 samples, 5.84%)</title><rect x="9.9718%" y="181" width="5.8431%" height="15" fill="rgb(206,188,39)"/><text x="10.2218%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (45,599,384 samples, 5.21%)</title><rect x="10.6092%" y="165" width="5.2057%" height="15" fill="rgb(217,207,13)"/><text x="10.8592%" y="175.50">unsafe..</text></g><g><title>mir_built (41,476,212 samples, 4.74%)</title><rect x="11.0799%" y="149" width="4.7350%" height="15" fill="rgb(231,73,38)"/><text x="11.3299%" y="159.50">mir_bu..</text></g><g><title>mir_const_qualif (2,131,796 samples, 0.24%)</title><rect x="15.8149%" y="181" width="0.2434%" height="15" fill="rgb(225,20,46)"/><text x="16.0649%" y="191.50"></text></g><g><title>mir_promoted (58,121,460 samples, 6.64%)</title><rect x="9.4231%" y="197" width="6.6353%" height="15" fill="rgb(210,31,41)"/><text x="9.6731%" y="207.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (4,791,314 samples, 0.55%)</title><rect x="16.0590%" y="197" width="0.5470%" height="15" fill="rgb(221,200,47)"/><text x="16.3090%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (5,238,121 samples, 0.60%)</title><rect x="16.6060%" y="197" width="0.5980%" height="15" fill="rgb(226,26,5)"/><text x="16.8560%" y="207.50"></text></g><g><title>normalize_projection_ty (3,630,316 samples, 0.41%)</title><rect x="16.7895%" y="181" width="0.4144%" height="15" fill="rgb(249,33,26)"/><text x="17.0395%" y="191.50"></text></g><g><title>type_op_normalize_predicate (3,565,935 samples, 0.41%)</title><rect x="17.2040%" y="197" width="0.4071%" height="15" fill="rgb(235,183,28)"/><text x="17.4540%" y="207.50"></text></g><g><title>normalize_projection_ty (927,690 samples, 0.11%)</title><rect x="17.5052%" y="181" width="0.1059%" height="15" fill="rgb(221,5,38)"/><text x="17.7552%" y="191.50"></text></g><g><title>type_op_normalize_ty (1,225,564 samples, 0.14%)</title><rect x="17.6111%" y="197" width="0.1399%" height="15" fill="rgb(247,18,42)"/><text x="17.8611%" y="207.50"></text></g><g><title>type_op_prove_predicate (25,148,816 samples, 2.87%)</title><rect x="17.7510%" y="197" width="2.8711%" height="15" fill="rgb(241,131,45)"/><text x="18.0010%" y="207.50">ty..</text></g><g><title>MIR_borrow_checking (177,629,162 samples, 20.28%)</title><rect x="0.3452%" y="229" width="20.2786%" height="15" fill="rgb(249,31,29)"/><text x="0.5952%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (176,791,042 samples, 20.18%)</title><rect x="0.4409%" y="213" width="20.1829%" height="15" fill="rgb(225,111,53)"/><text x="0.6909%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (1,302,901 samples, 0.15%)</title><rect x="20.6879%" y="229" width="0.1487%" height="15" fill="rgb(238,160,17)"/><text x="20.9379%" y="239.50"></text></g><g><title>codegen_fn_attrs (1,479,658 samples, 0.17%)</title><rect x="20.9980%" y="197" width="0.1689%" height="15" fill="rgb(214,148,48)"/><text x="21.2480%" y="207.50"></text></g><g><title>check_mod_attrs (2,833,903 samples, 0.32%)</title><rect x="20.8434%" y="213" width="0.3235%" height="15" fill="rgb(232,36,49)"/><text x="21.0934%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (1,779,417 samples, 0.20%)</title><rect x="21.3067%" y="213" width="0.2031%" height="15" fill="rgb(209,103,24)"/><text x="21.5567%" y="223.50"></text></g><g><title>misc_checking_1 (6,197,449 samples, 0.71%)</title><rect x="20.8368%" y="229" width="0.7075%" height="15" fill="rgb(229,88,8)"/><text x="21.0868%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (4,343,858 samples, 0.50%)</title><rect x="21.5445%" y="213" width="0.4959%" height="15" fill="rgb(213,181,19)"/><text x="21.7945%" y="223.50"></text></g><g><title>check_mod_liveness (3,735,290 samples, 0.43%)</title><rect x="21.6140%" y="197" width="0.4264%" height="15" fill="rgb(254,191,54)"/><text x="21.8640%" y="207.50"></text></g><g><title>type_uninhabited_from (1,429,649 samples, 0.16%)</title><rect x="21.8772%" y="181" width="0.1632%" height="15" fill="rgb(241,83,37)"/><text x="22.1272%" y="191.50"></text></g><g><title>type_uninhabited_from (1,108,092 samples, 0.13%)</title><rect x="21.9139%" y="165" width="0.1265%" height="15" fill="rgb(233,36,39)"/><text x="22.1639%" y="175.50"></text></g><g><title>type_uninhabited_from (910,518 samples, 0.10%)</title><rect x="21.9365%" y="149" width="0.1039%" height="15" fill="rgb(226,3,54)"/><text x="22.1865%" y="159.50"></text></g><g><title>misc_checking_2 (10,117,392 samples, 1.16%)</title><rect x="21.5443%" y="229" width="1.1550%" height="15" fill="rgb(245,192,40)"/><text x="21.7943%" y="239.50"></text></g><g><title>match_checking (5,771,194 samples, 0.66%)</title><rect x="22.0404%" y="213" width="0.6589%" height="15" fill="rgb(238,167,29)"/><text x="22.2904%" y="223.50"></text></g><g><title>check_match (5,504,306 samples, 0.63%)</title><rect x="22.0709%" y="197" width="0.6284%" height="15" fill="rgb(232,182,51)"/><text x="22.3209%" y="207.50"></text></g><g><title>check_private_in_public (1,508,927 samples, 0.17%)</title><rect x="22.7009%" y="213" width="0.1723%" height="15" fill="rgb(231,60,39)"/><text x="22.9509%" y="223.50"></text></g><g><title>death_checking (3,094,165 samples, 0.35%)</title><rect x="22.8731%" y="213" width="0.3532%" height="15" fill="rgb(208,69,12)"/><text x="23.1231%" y="223.50"></text></g><g><title>eval_to_const_value_raw (1,198,514 samples, 0.14%)</title><rect x="23.7595%" y="117" width="0.1368%" height="15" fill="rgb(235,93,37)"/><text x="24.0095%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,195,904 samples, 0.14%)</title><rect x="23.7598%" y="101" width="0.1365%" height="15" fill="rgb(213,116,39)"/><text x="24.0098%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,189,744 samples, 0.14%)</title><rect x="23.7605%" y="85" width="0.1358%" height="15" fill="rgb(222,207,29)"/><text x="24.0105%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,502,406 samples, 0.17%)</title><rect x="23.7257%" y="181" width="0.1715%" height="15" fill="rgb(206,96,30)"/><text x="23.9757%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,497,436 samples, 0.17%)</title><rect x="23.7263%" y="165" width="0.1710%" height="15" fill="rgb(218,138,4)"/><text x="23.9763%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,485,726 samples, 0.17%)</title><rect x="23.7276%" y="149" width="0.1696%" height="15" fill="rgb(250,191,14)"/><text x="23.9776%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,246,204 samples, 0.14%)</title><rect x="23.7550%" y="133" width="0.1423%" height="15" fill="rgb(239,60,40)"/><text x="24.0050%" y="143.50"></text></g><g><title>param_env (2,456,408 samples, 0.28%)</title><rect x="23.8973%" y="181" width="0.2804%" height="15" fill="rgb(206,27,48)"/><text x="24.1473%" y="191.50"></text></g><g><title>predicates_of (946,109 samples, 0.11%)</title><rect x="24.0697%" y="165" width="0.1080%" height="15" fill="rgb(225,35,8)"/><text x="24.3197%" y="175.50"></text></g><g><title>crate_lints (10,800,540 samples, 1.23%)</title><rect x="23.2267%" y="197" width="1.2330%" height="15" fill="rgb(250,213,24)"/><text x="23.4767%" y="207.50"></text></g><g><title>type_of (1,891,332 samples, 0.22%)</title><rect x="24.2438%" y="181" width="0.2159%" height="15" fill="rgb(247,123,22)"/><text x="24.4938%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,345,144 samples, 0.15%)</title><rect x="24.3062%" y="165" width="0.1536%" height="15" fill="rgb(231,138,38)"/><text x="24.5562%" y="175.50"></text></g><g><title>layout_of (881,800 samples, 0.10%)</title><rect x="24.9080%" y="133" width="0.1007%" height="15" fill="rgb(231,145,46)"/><text x="25.1580%" y="143.50"></text></g><g><title>layout_of (970,311 samples, 0.11%)</title><rect x="24.9029%" y="149" width="0.1108%" height="15" fill="rgb(251,118,11)"/><text x="25.1529%" y="159.50"></text></g><g><title>layout_of (1,024,071 samples, 0.12%)</title><rect x="24.8970%" y="165" width="0.1169%" height="15" fill="rgb(217,147,25)"/><text x="25.1470%" y="175.50"></text></g><g><title>lint_checking (15,659,564 samples, 1.79%)</title><rect x="23.2264%" y="213" width="1.7877%" height="15" fill="rgb(247,81,37)"/><text x="23.4764%" y="223.50">l..</text></g><g><title>module_lints (4,855,684 samples, 0.55%)</title><rect x="24.4598%" y="197" width="0.5543%" height="15" fill="rgb(209,12,38)"/><text x="24.7098%" y="207.50"></text></g><g><title>lint_mod (4,835,474 samples, 0.55%)</title><rect x="24.4621%" y="181" width="0.5520%" height="15" fill="rgb(227,1,9)"/><text x="24.7121%" y="191.50"></text></g><g><title>privacy_access_levels (2,846,191 samples, 0.32%)</title><rect x="25.0141%" y="213" width="0.3249%" height="15" fill="rgb(248,47,43)"/><text x="25.2641%" y="223.50"></text></g><g><title>privacy_checking_modules (7,947,928 samples, 0.91%)</title><rect x="25.3390%" y="213" width="0.9074%" height="15" fill="rgb(221,10,30)"/><text x="25.5890%" y="223.50"></text></g><g><title>check_mod_privacy (7,932,548 samples, 0.91%)</title><rect x="25.3408%" y="197" width="0.9056%" height="15" fill="rgb(210,229,1)"/><text x="25.5908%" y="207.50"></text></g><g><title>misc_checking_3 (31,126,315 samples, 3.55%)</title><rect x="22.6993%" y="229" width="3.5535%" height="15" fill="rgb(222,148,37)"/><text x="22.9493%" y="239.50">misc..</text></g><g><title>impl_parent (4,399,568 samples, 0.50%)</title><rect x="27.3189%" y="165" width="0.5023%" height="15" fill="rgb(234,67,33)"/><text x="27.5689%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,558,312 samples, 0.29%)</title><rect x="27.5291%" y="149" width="0.2921%" height="15" fill="rgb(247,98,35)"/><text x="27.7791%" y="159.50"></text></g><g><title>impl_trait_ref (9,374,586 samples, 1.07%)</title><rect x="27.8211%" y="165" width="1.0702%" height="15" fill="rgb(247,138,52)"/><text x="28.0711%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,134,333 samples, 0.81%)</title><rect x="28.0769%" y="149" width="0.8145%" height="15" fill="rgb(213,79,30)"/><text x="28.3269%" y="159.50"></text></g><g><title>trait_impls_of (2,113,853 samples, 0.24%)</title><rect x="28.8993%" y="165" width="0.2413%" height="15" fill="rgb(246,177,23)"/><text x="29.1493%" y="175.50"></text></g><g><title>coherent_trait (24,779,196 samples, 2.83%)</title><rect x="26.3120%" y="197" width="2.8289%" height="15" fill="rgb(230,62,27)"/><text x="26.5620%" y="207.50">co..</text></g><g><title>specialization_graph_of (23,906,476 samples, 2.73%)</title><rect x="26.4116%" y="181" width="2.7292%" height="15" fill="rgb(216,154,8)"/><text x="26.6616%" y="191.50">sp..</text></g><g><title>coherence_checking (25,153,790 samples, 2.87%)</title><rect x="26.3081%" y="213" width="2.8716%" height="15" fill="rgb(244,35,45)"/><text x="26.5581%" y="223.50">co..</text></g><g><title>associated_items (940,360 samples, 0.11%)</title><rect x="39.7827%" y="165" width="0.1074%" height="15" fill="rgb(251,115,12)"/><text x="40.0327%" y="175.50"></text></g><g><title>adt_def (1,219,192 samples, 0.14%)</title><rect x="40.4100%" y="117" width="0.1392%" height="15" fill="rgb(240,54,50)"/><text x="40.6600%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (1,211,262 samples, 0.14%)</title><rect x="40.4109%" y="101" width="0.1383%" height="15" fill="rgb(233,84,52)"/><text x="40.6609%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,882,851 samples, 0.21%)</title><rect x="40.3969%" y="133" width="0.2150%" height="15" fill="rgb(207,117,47)"/><text x="40.6469%" y="143.50"></text></g><g><title>adt_dtorck_constraint (3,088,816 samples, 0.35%)</title><rect x="40.2932%" y="149" width="0.3526%" height="15" fill="rgb(249,43,39)"/><text x="40.5432%" y="159.50"></text></g><g><title>normalize_projection_ty (2,151,404 samples, 0.25%)</title><rect x="40.6562%" y="149" width="0.2456%" height="15" fill="rgb(209,38,44)"/><text x="40.9062%" y="159.50"></text></g><g><title>dropck_outlives (8,690,566 samples, 0.99%)</title><rect x="39.9101%" y="165" width="0.9921%" height="15" fill="rgb(236,212,23)"/><text x="40.1601%" y="175.50"></text></g><g><title>evaluate_obligation (17,018,858 samples, 1.94%)</title><rect x="40.9022%" y="165" width="1.9429%" height="15" fill="rgb(242,79,21)"/><text x="41.1522%" y="175.50">e..</text></g><g><title>method_autoderef_steps (1,516,993 samples, 0.17%)</title><rect x="42.9887%" y="165" width="0.1732%" height="15" fill="rgb(211,96,35)"/><text x="43.2387%" y="175.50"></text></g><g><title>dropck_outlives (3,172,809 samples, 0.36%)</title><rect x="49.2258%" y="149" width="0.3622%" height="15" fill="rgb(253,215,40)"/><text x="49.4758%" y="159.50"></text></g><g><title>normalize_projection_ty (931,360 samples, 0.11%)</title><rect x="49.4817%" y="133" width="0.1063%" height="15" fill="rgb(211,81,21)"/><text x="49.7317%" y="143.50"></text></g><g><title>evaluate_obligation (12,589,479 samples, 1.44%)</title><rect x="49.5881%" y="149" width="1.4372%" height="15" fill="rgb(208,190,38)"/><text x="49.8381%" y="159.50"></text></g><g><title>evaluate_obligation (1,265,063 samples, 0.14%)</title><rect x="51.4100%" y="133" width="0.1444%" height="15" fill="rgb(235,213,38)"/><text x="51.6600%" y="143.50"></text></g><g><title>method_autoderef_steps (2,669,400 samples, 0.30%)</title><rect x="51.2516%" y="149" width="0.3047%" height="15" fill="rgb(237,122,38)"/><text x="51.5016%" y="159.50"></text></g><g><title>typeck (73,626,310 samples, 8.41%)</title><rect x="43.2883%" y="165" width="8.4054%" height="15" fill="rgb(244,218,35)"/><text x="43.5383%" y="175.50">typeck</text></g><g><title>item_bodies_checking (197,162,188 samples, 22.51%)</title><rect x="29.2074%" y="213" width="22.5085%" height="15" fill="rgb(240,68,47)"/><text x="29.4574%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (197,158,538 samples, 22.51%)</title><rect x="29.2078%" y="197" width="22.5081%" height="15" fill="rgb(210,16,53)"/><text x="29.4578%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (196,599,894 samples, 22.44%)</title><rect x="29.2716%" y="181" width="22.4443%" height="15" fill="rgb(235,124,12)"/><text x="29.5216%" y="191.50">typeck</text></g><g><title>evaluate_obligation (4,897,800 samples, 0.56%)</title><rect x="53.0703%" y="181" width="0.5591%" height="15" fill="rgb(224,169,11)"/><text x="53.3203%" y="191.50"></text></g><g><title>layout_of (992,051 samples, 0.11%)</title><rect x="53.7402%" y="133" width="0.1133%" height="15" fill="rgb(250,166,2)"/><text x="53.9902%" y="143.50"></text></g><g><title>layout_of (983,801 samples, 0.11%)</title><rect x="53.7411%" y="117" width="0.1123%" height="15" fill="rgb(242,216,29)"/><text x="53.9911%" y="127.50"></text></g><g><title>layout_of (957,921 samples, 0.11%)</title><rect x="53.7441%" y="101" width="0.1094%" height="15" fill="rgb(230,116,27)"/><text x="53.9941%" y="111.50"></text></g><g><title>layout_of (1,016,611 samples, 0.12%)</title><rect x="53.7379%" y="149" width="0.1161%" height="15" fill="rgb(228,99,48)"/><text x="53.9879%" y="159.50"></text></g><g><title>layout_of (1,054,452 samples, 0.12%)</title><rect x="53.7351%" y="165" width="0.1204%" height="15" fill="rgb(253,11,6)"/><text x="53.9851%" y="175.50"></text></g><g><title>layout_of (1,082,992 samples, 0.12%)</title><rect x="53.7324%" y="181" width="0.1236%" height="15" fill="rgb(247,143,39)"/><text x="53.9824%" y="191.50"></text></g><g><title>mir_borrowck (1,809,160 samples, 0.21%)</title><rect x="57.9482%" y="133" width="0.2065%" height="15" fill="rgb(236,97,10)"/><text x="58.1982%" y="143.50"></text></g><g><title>mir_const (1,671,247 samples, 0.19%)</title><rect x="58.3194%" y="117" width="0.1908%" height="15" fill="rgb(233,208,19)"/><text x="58.5694%" y="127.50"></text></g><g><title>mir_promoted (3,139,834 samples, 0.36%)</title><rect x="58.1547%" y="133" width="0.3585%" height="15" fill="rgb(216,164,2)"/><text x="58.4047%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (984,619 samples, 0.11%)</title><rect x="58.5132%" y="133" width="0.1124%" height="15" fill="rgb(220,129,5)"/><text x="58.7632%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,874,344 samples, 0.44%)</title><rect x="58.6256%" y="133" width="0.4423%" height="15" fill="rgb(242,17,10)"/><text x="58.8756%" y="143.50"></text></g><g><title>normalize_projection_ty (2,748,722 samples, 0.31%)</title><rect x="58.7541%" y="117" width="0.3138%" height="15" fill="rgb(242,107,0)"/><text x="59.0041%" y="127.50"></text></g><g><title>type_op_prove_predicate (9,415,296 samples, 1.07%)</title><rect x="59.1505%" y="133" width="1.0749%" height="15" fill="rgb(251,28,31)"/><text x="59.4005%" y="143.50"></text></g><g><title>mir_borrowck (47,190,304 samples, 5.39%)</title><rect x="54.8385%" y="149" width="5.3874%" height="15" fill="rgb(233,223,10)"/><text x="55.0885%" y="159.50">mir_bor..</text></g><g><title>associated_item (907,315 samples, 0.10%)</title><rect x="67.9206%" y="53" width="0.1036%" height="15" fill="rgb(215,21,27)"/><text x="68.1706%" y="63.50"></text></g><g><title>associated_items (1,328,978 samples, 0.15%)</title><rect x="67.8818%" y="69" width="0.1517%" height="15" fill="rgb(232,23,21)"/><text x="68.1318%" y="79.50"></text></g><g><title>adt_dtorck_constraint (898,271 samples, 0.10%)</title><rect x="68.5374%" y="37" width="0.1025%" height="15" fill="rgb(244,5,23)"/><text x="68.7874%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,560,265 samples, 0.18%)</title><rect x="68.4748%" y="53" width="0.1781%" height="15" fill="rgb(226,81,46)"/><text x="68.7248%" y="63.50"></text></g><g><title>dropck_outlives (6,855,864 samples, 0.78%)</title><rect x="68.0488%" y="69" width="0.7827%" height="15" fill="rgb(247,70,30)"/><text x="68.2988%" y="79.50"></text></g><g><title>normalize_projection_ty (1,564,016 samples, 0.18%)</title><rect x="68.6530%" y="53" width="0.1786%" height="15" fill="rgb(212,68,19)"/><text x="68.9030%" y="63.50"></text></g><g><title>evaluate_obligation (15,279,926 samples, 1.74%)</title><rect x="68.8327%" y="69" width="1.7444%" height="15" fill="rgb(240,187,13)"/><text x="69.0827%" y="79.50"></text></g><g><title>is_copy_raw (2,430,847 samples, 0.28%)</title><rect x="70.7865%" y="69" width="0.2775%" height="15" fill="rgb(223,113,26)"/><text x="71.0365%" y="79.50"></text></g><g><title>evaluate_obligation (1,730,735 samples, 0.20%)</title><rect x="70.8664%" y="53" width="0.1976%" height="15" fill="rgb(206,192,2)"/><text x="71.1164%" y="63.50"></text></g><g><title>evaluate_obligation (1,072,143 samples, 0.12%)</title><rect x="71.2701%" y="53" width="0.1224%" height="15" fill="rgb(241,108,4)"/><text x="71.5201%" y="63.50"></text></g><g><title>method_autoderef_steps (2,376,710 samples, 0.27%)</title><rect x="71.1369%" y="69" width="0.2713%" height="15" fill="rgb(247,173,49)"/><text x="71.3869%" y="79.50"></text></g><g><title>mir_built (98,753,863 samples, 11.27%)</title><rect x="60.3524%" y="101" width="11.2740%" height="15" fill="rgb(224,114,35)"/><text x="60.6024%" y="111.50">mir_built</text></g><g><title>typeck (95,918,312 samples, 10.95%)</title><rect x="60.6761%" y="85" width="10.9503%" height="15" fill="rgb(245,159,27)"/><text x="60.9261%" y="95.50">typeck</text></g><g><title>needs_drop_raw (1,136,436 samples, 0.13%)</title><rect x="72.3221%" y="69" width="0.1297%" height="15" fill="rgb(245,172,44)"/><text x="72.5721%" y="79.50"></text></g><g><title>thir_body (1,905,252 samples, 0.22%)</title><rect x="72.4620%" y="69" width="0.2175%" height="15" fill="rgb(236,23,11)"/><text x="72.7120%" y="79.50"></text></g><g><title>mir_built (8,098,062 samples, 0.92%)</title><rect x="71.7626%" y="85" width="0.9245%" height="15" fill="rgb(205,117,38)"/><text x="72.0126%" y="95.50"></text></g><g><title>mir_const (109,124,928 samples, 12.46%)</title><rect x="60.2612%" y="133" width="12.4580%" height="15" fill="rgb(237,72,25)"/><text x="60.5112%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (108,496,053 samples, 12.39%)</title><rect x="60.3330%" y="117" width="12.3862%" height="15" fill="rgb(244,70,9)"/><text x="60.5830%" y="127.50">unsafety_check_res..</text></g><g><title>unsafety_check_result (9,572,297 samples, 1.09%)</title><rect x="71.6264%" y="101" width="1.0928%" height="15" fill="rgb(217,125,39)"/><text x="71.8764%" y="111.50"></text></g><g><title>mir_promoted (109,463,961 samples, 12.50%)</title><rect x="60.2259%" y="149" width="12.4967%" height="15" fill="rgb(235,36,10)"/><text x="60.4759%" y="159.50">mir_promoted</text></g><g><title>type_of (170,031,753 samples, 19.41%)</title><rect x="53.8621%" y="181" width="19.4113%" height="15" fill="rgb(251,123,47)"/><text x="54.1121%" y="191.50">type_of</text></g><g><title>mir_borrowck (169,829,012 samples, 19.39%)</title><rect x="53.8852%" y="165" width="19.3881%" height="15" fill="rgb(221,13,13)"/><text x="54.1352%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (3,944,693 samples, 0.45%)</title><rect x="72.8230%" y="149" width="0.4503%" height="15" fill="rgb(238,131,9)"/><text x="73.0730%" y="159.50"></text></g><g><title>item_types_checking (190,375,704 samples, 21.73%)</title><rect x="51.7159%" y="213" width="21.7338%" height="15" fill="rgb(211,50,8)"/><text x="51.9659%" y="223.50">item_types_checking</text></g><g><title>check_mod_item_types (190,346,124 samples, 21.73%)</title><rect x="51.7193%" y="197" width="21.7304%" height="15" fill="rgb(245,182,24)"/><text x="51.9693%" y="207.50">check_mod_item_types</text></g><g><title>typeck (1,544,928 samples, 0.18%)</title><rect x="73.2733%" y="181" width="0.1764%" height="15" fill="rgb(242,14,37)"/><text x="73.5233%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,812,339 samples, 0.21%)</title><rect x="73.6789%" y="181" width="0.2069%" height="15" fill="rgb(246,228,12)"/><text x="73.9289%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,793,328 samples, 0.20%)</title><rect x="73.6811%" y="165" width="0.2047%" height="15" fill="rgb(213,55,15)"/><text x="73.9311%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,784,488 samples, 0.20%)</title><rect x="73.6821%" y="149" width="0.2037%" height="15" fill="rgb(209,9,3)"/><text x="73.9321%" y="159.50"></text></g><g><title>fn_sig (2,301,490 samples, 0.26%)</title><rect x="73.8858%" y="181" width="0.2627%" height="15" fill="rgb(230,59,30)"/><text x="74.1358%" y="191.50"></text></g><g><title>named_region_map (1,074,148 samples, 0.12%)</title><rect x="74.2452%" y="165" width="0.1226%" height="15" fill="rgb(209,121,21)"/><text x="74.4952%" y="175.50"></text></g><g><title>resolve_lifetimes (969,488 samples, 0.11%)</title><rect x="74.2571%" y="149" width="0.1107%" height="15" fill="rgb(220,109,13)"/><text x="74.5071%" y="159.50"></text></g><g><title>generics_of (2,000,125 samples, 0.23%)</title><rect x="74.1485%" y="181" width="0.2283%" height="15" fill="rgb(232,18,1)"/><text x="74.3985%" y="191.50"></text></g><g><title>lint_levels (1,136,183 samples, 0.13%)</title><rect x="74.7512%" y="101" width="0.1297%" height="15" fill="rgb(215,41,42)"/><text x="75.0012%" y="111.50"></text></g><g><title>late_bound_vars_map (2,104,744 samples, 0.24%)</title><rect x="74.6409%" y="133" width="0.2403%" height="15" fill="rgb(224,123,36)"/><text x="74.8909%" y="143.50"></text></g><g><title>resolve_lifetimes (2,069,954 samples, 0.24%)</title><rect x="74.6449%" y="117" width="0.2363%" height="15" fill="rgb(240,125,3)"/><text x="74.8949%" y="127.50"></text></g><g><title>explicit_predicates_of (3,201,945 samples, 0.37%)</title><rect x="74.5277%" y="149" width="0.3655%" height="15" fill="rgb(205,98,50)"/><text x="74.7777%" y="159.50"></text></g><g><title>predicates_of (5,943,574 samples, 0.68%)</title><rect x="74.4251%" y="181" width="0.6785%" height="15" fill="rgb(205,185,37)"/><text x="74.6751%" y="191.50"></text></g><g><title>predicates_defined_on (5,600,781 samples, 0.64%)</title><rect x="74.4642%" y="165" width="0.6394%" height="15" fill="rgb(238,207,15)"/><text x="74.7142%" y="175.50"></text></g><g><title>inferred_outlives_of (1,843,139 samples, 0.21%)</title><rect x="74.8932%" y="149" width="0.2104%" height="15" fill="rgb(213,199,42)"/><text x="75.1432%" y="159.50"></text></g><g><title>inferred_outlives_crate (1,728,559 samples, 0.20%)</title><rect x="74.9063%" y="133" width="0.1973%" height="15" fill="rgb(235,201,11)"/><text x="75.1563%" y="143.50"></text></g><g><title>type_of (1,007,911 samples, 0.12%)</title><rect x="74.9886%" y="117" width="0.1151%" height="15" fill="rgb(207,46,11)"/><text x="75.2386%" y="127.50"></text></g><g><title>type_collecting (15,113,627 samples, 1.73%)</title><rect x="73.4530%" y="213" width="1.7254%" height="15" fill="rgb(241,35,35)"/><text x="73.7030%" y="223.50"></text></g><g><title>collect_mod_item_types (15,083,957 samples, 1.72%)</title><rect x="73.4564%" y="197" width="1.7220%" height="15" fill="rgb(243,32,47)"/><text x="73.7064%" y="207.50"></text></g><g><title>adt_sized_constraint (1,022,144 samples, 0.12%)</title><rect x="77.1561%" y="165" width="0.1167%" height="15" fill="rgb(247,202,23)"/><text x="77.4061%" y="175.50"></text></g><g><title>evaluate_obligation (3,437,083 samples, 0.39%)</title><rect x="76.9034%" y="181" width="0.3924%" height="15" fill="rgb(219,102,11)"/><text x="77.1534%" y="191.50"></text></g><g><title>implied_outlives_bounds (1,520,080 samples, 0.17%)</title><rect x="77.3105%" y="181" width="0.1735%" height="15" fill="rgb(243,110,44)"/><text x="77.5605%" y="191.50"></text></g><g><title>object_safety_violations (898,830 samples, 0.10%)</title><rect x="77.4841%" y="181" width="0.1026%" height="15" fill="rgb(222,74,54)"/><text x="77.7341%" y="191.50"></text></g><g><title>param_env (2,243,974 samples, 0.26%)</title><rect x="77.5867%" y="181" width="0.2562%" height="15" fill="rgb(216,99,12)"/><text x="77.8367%" y="191.50"></text></g><g><title>region_scope_tree (2,412,147 samples, 0.28%)</title><rect x="77.8554%" y="181" width="0.2754%" height="15" fill="rgb(226,22,26)"/><text x="78.1054%" y="191.50"></text></g><g><title>check_impl_item_well_formed (24,573,427 samples, 2.81%)</title><rect x="75.3369%" y="197" width="2.8054%" height="15" fill="rgb(217,163,10)"/><text x="75.5869%" y="207.50">ch..</text></g><g><title>evaluate_obligation (8,117,019 samples, 0.93%)</title><rect x="79.3564%" y="181" width="0.9267%" height="15" fill="rgb(213,25,53)"/><text x="79.6064%" y="191.50"></text></g><g><title>param_env (1,716,605 samples, 0.20%)</title><rect x="80.3532%" y="181" width="0.1960%" height="15" fill="rgb(252,105,26)"/><text x="80.6032%" y="191.50"></text></g><g><title>check_item_well_formed (22,634,460 samples, 2.58%)</title><rect x="78.1423%" y="197" width="2.5840%" height="15" fill="rgb(220,39,43)"/><text x="78.3923%" y="207.50">ch..</text></g><g><title>analysis (706,381,870 samples, 80.64%)</title><rect x="0.1681%" y="245" width="80.6423%" height="15" fill="rgb(229,68,48)"/><text x="0.4181%" y="255.50">analysis</text></g><g><title>type_check_crate (477,894,854 samples, 54.56%)</title><rect x="26.2528%" y="229" width="54.5577%" height="15" fill="rgb(252,8,32)"/><text x="26.5028%" y="239.50">type_check_crate</text></g><g><title>wf_checking (49,299,176 samples, 5.63%)</title><rect x="75.1823%" y="213" width="5.6281%" height="15" fill="rgb(223,20,43)"/><text x="75.4323%" y="223.50">wf_chec..</text></g><g><title>metadata_register_crate (13,312,957 samples, 1.52%)</title><rect x="88.1276%" y="197" width="1.5198%" height="15" fill="rgb(229,81,49)"/><text x="88.3776%" y="207.50"></text></g><g><title>metadata_register_crate (11,300,214 samples, 1.29%)</title><rect x="88.3574%" y="181" width="1.2901%" height="15" fill="rgb(236,28,36)"/><text x="88.6074%" y="191.50"></text></g><g><title>metadata_register_crate (3,336,365 samples, 0.38%)</title><rect x="89.2666%" y="165" width="0.3809%" height="15" fill="rgb(249,185,26)"/><text x="89.5166%" y="175.50"></text></g><g><title>macro_expand_crate (76,775,761 samples, 8.76%)</title><rect x="81.0331%" y="229" width="8.7649%" height="15" fill="rgb(249,174,33)"/><text x="81.2831%" y="239.50">macro_expand..</text></g><g><title>expand_crate (76,763,191 samples, 8.76%)</title><rect x="81.0345%" y="213" width="8.7635%" height="15" fill="rgb(233,201,37)"/><text x="81.2845%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,318,701 samples, 0.15%)</title><rect x="89.6475%" y="197" width="0.1505%" height="15" fill="rgb(221,78,26)"/><text x="89.8975%" y="207.50"></text></g><g><title>late_resolve_crate (8,804,138 samples, 1.01%)</title><rect x="89.9261%" y="213" width="1.0051%" height="15" fill="rgb(250,127,30)"/><text x="90.1761%" y="223.50"></text></g><g><title>configure_and_expand (88,797,056 samples, 10.14%)</title><rect x="80.8855%" y="245" width="10.1373%" height="15" fill="rgb(230,49,44)"/><text x="81.1355%" y="255.50">configure_and_e..</text></g><g><title>resolve_crate (10,628,748 samples, 1.21%)</title><rect x="89.8094%" y="229" width="1.2134%" height="15" fill="rgb(229,67,23)"/><text x="90.0594%" y="239.50"></text></g><g><title>drop_ast (1,387,956 samples, 0.16%)</title><rect x="91.0228%" y="245" width="0.1585%" height="15" fill="rgb(249,83,47)"/><text x="91.2728%" y="255.50"></text></g><g><title>early_lint_checks (2,442,196 samples, 0.28%)</title><rect x="91.1847%" y="245" width="0.2788%" height="15" fill="rgb(215,43,3)"/><text x="91.4347%" y="255.50"></text></g><g><title>free_global_ctxt (9,266,053 samples, 1.06%)</title><rect x="91.4635%" y="245" width="1.0578%" height="15" fill="rgb(238,154,13)"/><text x="91.7135%" y="255.50"></text></g><g><title>is_copy_raw (1,824,952 samples, 0.21%)</title><rect x="96.9443%" y="181" width="0.2083%" height="15" fill="rgb(219,56,2)"/><text x="97.1943%" y="191.50"></text></g><g><title>evaluate_obligation (1,378,509 samples, 0.16%)</title><rect x="96.9952%" y="165" width="0.1574%" height="15" fill="rgb(233,0,4)"/><text x="97.2452%" y="175.50"></text></g><g><title>needs_drop_raw (2,289,724 samples, 0.26%)</title><rect x="96.8919%" y="197" width="0.2614%" height="15" fill="rgb(235,30,7)"/><text x="97.1419%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (16,974,460 samples, 1.94%)</title><rect x="95.2591%" y="213" width="1.9378%" height="15" fill="rgb(250,79,13)"/><text x="95.5091%" y="223.50">m..</text></g><g><title>optimized_mir (31,133,937 samples, 3.55%)</title><rect x="93.6460%" y="229" width="3.5543%" height="15" fill="rgb(211,146,34)"/><text x="93.8960%" y="239.50">opti..</text></g><g><title>generate_crate_metadata (41,536,351 samples, 4.74%)</title><rect x="92.5213%" y="245" width="4.7419%" height="15" fill="rgb(228,22,38)"/><text x="92.7713%" y="255.50">genera..</text></g><g><title>hir_lowering (19,439,325 samples, 2.22%)</title><rect x="97.2632%" y="245" width="2.2192%" height="15" fill="rgb(235,168,5)"/><text x="97.5132%" y="255.50">h..</text></g><g><title>self_profile_alloc_query_strings (2,770,311 samples, 0.32%)</title><rect x="99.5719%" y="245" width="0.3163%" height="15" fill="rgb(221,155,16)"/><text x="99.8219%" y="255.50"></text></g><g><title>all (875,944,072 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (875,944,072 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>