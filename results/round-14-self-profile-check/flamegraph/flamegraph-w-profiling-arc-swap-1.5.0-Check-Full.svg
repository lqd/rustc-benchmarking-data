<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (256,536 samples, 0.10%)</title><rect x="10.7675%" y="149" width="0.1016%" height="15" fill="rgb(227,0,7)"/><text x="11.0175%" y="159.50"></text></g><g><title>is_sized_raw (292,612 samples, 0.12%)</title><rect x="10.9621%" y="149" width="0.1159%" height="15" fill="rgb(217,0,24)"/><text x="11.2121%" y="159.50"></text></g><g><title>param_env (590,084 samples, 0.23%)</title><rect x="12.4614%" y="117" width="0.2337%" height="15" fill="rgb(221,193,54)"/><text x="12.7114%" y="127.50"></text></g><g><title>item_attrs (492,096 samples, 0.19%)</title><rect x="13.2742%" y="85" width="0.1949%" height="15" fill="rgb(248,212,6)"/><text x="13.5242%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (476,665 samples, 0.19%)</title><rect x="13.2804%" y="69" width="0.1888%" height="15" fill="rgb(208,68,35)"/><text x="13.5304%" y="79.50"></text></g><g><title>codegen_fn_attrs (939,433 samples, 0.37%)</title><rect x="13.1093%" y="101" width="0.3721%" height="15" fill="rgb(232,128,0)"/><text x="13.3593%" y="111.50"></text></g><g><title>is_copy_raw (320,134 samples, 0.13%)</title><rect x="15.8983%" y="85" width="0.1268%" height="15" fill="rgb(207,160,47)"/><text x="16.1483%" y="95.50"></text></g><g><title>adt_drop_tys (278,504 samples, 0.11%)</title><rect x="16.1452%" y="69" width="0.1103%" height="15" fill="rgb(228,23,34)"/><text x="16.3952%" y="79.50"></text></g><g><title>is_copy_raw (1,872,058 samples, 0.74%)</title><rect x="16.2561%" y="69" width="0.7414%" height="15" fill="rgb(218,30,26)"/><text x="16.5061%" y="79.50"></text></g><g><title>evaluate_obligation (1,503,136 samples, 0.60%)</title><rect x="16.4023%" y="53" width="0.5953%" height="15" fill="rgb(220,122,19)"/><text x="16.6523%" y="63.50"></text></g><g><title>needs_drop_raw (2,477,575 samples, 0.98%)</title><rect x="16.0255%" y="85" width="0.9812%" height="15" fill="rgb(250,228,42)"/><text x="16.2755%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (684,772 samples, 0.27%)</title><rect x="17.2335%" y="69" width="0.2712%" height="15" fill="rgb(240,193,28)"/><text x="17.4835%" y="79.50"></text></g><g><title>specialization_graph_of (809,548 samples, 0.32%)</title><rect x="17.5401%" y="69" width="0.3206%" height="15" fill="rgb(216,20,37)"/><text x="17.7901%" y="79.50"></text></g><g><title>impl_trait_ref (410,066 samples, 0.16%)</title><rect x="17.6983%" y="53" width="0.1624%" height="15" fill="rgb(206,188,39)"/><text x="17.9483%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (354,636 samples, 0.14%)</title><rect x="17.7203%" y="37" width="0.1405%" height="15" fill="rgb(217,207,13)"/><text x="17.9703%" y="47.50"></text></g><g><title>resolve_instance (2,326,772 samples, 0.92%)</title><rect x="17.0173%" y="85" width="0.9215%" height="15" fill="rgb(231,73,38)"/><text x="17.2673%" y="95.50"></text></g><g><title>thir_body (2,223,512 samples, 0.88%)</title><rect x="17.9683%" y="85" width="0.8806%" height="15" fill="rgb(225,20,46)"/><text x="18.2183%" y="95.50"></text></g><g><title>mir_const (18,070,847 samples, 7.16%)</title><rect x="11.7481%" y="133" width="7.1569%" height="15" fill="rgb(210,31,41)"/><text x="11.9981%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (15,679,723 samples, 6.21%)</title><rect x="12.6951%" y="117" width="6.2099%" height="15" fill="rgb(221,200,47)"/><text x="12.9451%" y="127.50">unsafety..</text></g><g><title>mir_built (13,694,407 samples, 5.42%)</title><rect x="13.4814%" y="101" width="5.4236%" height="15" fill="rgb(226,26,5)"/><text x="13.7314%" y="111.50">mir_bui..</text></g><g><title>mir_const (261,104 samples, 0.10%)</title><rect x="19.1140%" y="117" width="0.1034%" height="15" fill="rgb(249,33,26)"/><text x="19.3640%" y="127.50"></text></g><g><title>mir_const_qualif (849,061 samples, 0.34%)</title><rect x="18.9050%" y="133" width="0.3363%" height="15" fill="rgb(235,183,28)"/><text x="19.1550%" y="143.50"></text></g><g><title>mir_promoted (20,612,923 samples, 8.16%)</title><rect x="11.0780%" y="149" width="8.1637%" height="15" fill="rgb(221,5,38)"/><text x="11.3280%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,940,179 samples, 0.77%)</title><rect x="19.2419%" y="149" width="0.7684%" height="15" fill="rgb(247,18,42)"/><text x="19.4919%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,063,107 samples, 0.42%)</title><rect x="20.0103%" y="149" width="0.4210%" height="15" fill="rgb(241,131,45)"/><text x="20.2603%" y="159.50"></text></g><g><title>normalize_projection_ty (487,349 samples, 0.19%)</title><rect x="20.2383%" y="133" width="0.1930%" height="15" fill="rgb(249,31,29)"/><text x="20.4883%" y="143.50"></text></g><g><title>type_op_normalize_ty (762,517 samples, 0.30%)</title><rect x="20.4987%" y="149" width="0.3020%" height="15" fill="rgb(225,111,53)"/><text x="20.7487%" y="159.50"></text></g><g><title>normalize_projection_ty (379,034 samples, 0.15%)</title><rect x="20.6506%" y="133" width="0.1501%" height="15" fill="rgb(238,160,17)"/><text x="20.9006%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,137,231 samples, 2.43%)</title><rect x="20.8007%" y="149" width="2.4306%" height="15" fill="rgb(214,148,48)"/><text x="21.0507%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (57,193,732 samples, 22.65%)</title><rect x="0.5863%" y="181" width="22.6514%" height="15" fill="rgb(232,36,49)"/><text x="0.8363%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (56,885,338 samples, 22.53%)</title><rect x="0.7085%" y="165" width="22.5292%" height="15" fill="rgb(209,103,24)"/><text x="0.9585%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (450,395 samples, 0.18%)</title><rect x="23.2377%" y="181" width="0.1784%" height="15" fill="rgb(229,88,8)"/><text x="23.4877%" y="191.50"></text></g><g><title>hir_module_items (456,612 samples, 0.18%)</title><rect x="23.4161%" y="181" width="0.1808%" height="15" fill="rgb(213,181,19)"/><text x="23.6661%" y="191.50"></text></g><g><title>should_inherit_track_caller (377,734 samples, 0.15%)</title><rect x="23.9376%" y="133" width="0.1496%" height="15" fill="rgb(254,191,54)"/><text x="24.1876%" y="143.50"></text></g><g><title>codegen_fn_attrs (692,547 samples, 0.27%)</title><rect x="23.8204%" y="149" width="0.2743%" height="15" fill="rgb(241,83,37)"/><text x="24.0704%" y="159.50"></text></g><g><title>check_mod_attrs (1,206,602 samples, 0.48%)</title><rect x="23.6169%" y="165" width="0.4779%" height="15" fill="rgb(233,36,39)"/><text x="23.8669%" y="175.50"></text></g><g><title>check_mod_const_bodies (278,905 samples, 0.11%)</title><rect x="24.0948%" y="165" width="0.1105%" height="15" fill="rgb(226,3,54)"/><text x="24.3448%" y="175.50"></text></g><g><title>lookup_deprecation_entry (308,163 samples, 0.12%)</title><rect x="24.4333%" y="149" width="0.1220%" height="15" fill="rgb(245,192,40)"/><text x="24.6833%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (840,788 samples, 0.33%)</title><rect x="24.2812%" y="165" width="0.3330%" height="15" fill="rgb(238,167,29)"/><text x="24.5312%" y="175.50"></text></g><g><title>misc_checking_1 (2,686,630 samples, 1.06%)</title><rect x="23.5971%" y="181" width="1.0640%" height="15" fill="rgb(232,182,51)"/><text x="23.8471%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,062,591 samples, 0.42%)</title><rect x="24.6619%" y="165" width="0.4208%" height="15" fill="rgb(231,60,39)"/><text x="24.9119%" y="175.50"></text></g><g><title>check_mod_liveness (847,327 samples, 0.34%)</title><rect x="24.7472%" y="149" width="0.3356%" height="15" fill="rgb(208,69,12)"/><text x="24.9972%" y="159.50"></text></g><g><title>mir_borrowck (253,343 samples, 0.10%)</title><rect x="25.5300%" y="53" width="0.1003%" height="15" fill="rgb(235,93,37)"/><text x="25.7800%" y="63.50"></text></g><g><title>eval_to_const_value_raw (416,215 samples, 0.16%)</title><rect x="25.4659%" y="133" width="0.1648%" height="15" fill="rgb(213,116,39)"/><text x="25.7159%" y="143.50"></text></g><g><title>eval_to_const_value_raw (413,885 samples, 0.16%)</title><rect x="25.4669%" y="117" width="0.1639%" height="15" fill="rgb(222,207,29)"/><text x="25.7169%" y="127.50"></text></g><g><title>eval_to_allocation_raw (408,385 samples, 0.16%)</title><rect x="25.4690%" y="101" width="0.1617%" height="15" fill="rgb(206,96,30)"/><text x="25.7190%" y="111.50"></text></g><g><title>mir_for_ctfe (369,494 samples, 0.15%)</title><rect x="25.4844%" y="85" width="0.1463%" height="15" fill="rgb(218,138,4)"/><text x="25.7344%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (338,964 samples, 0.13%)</title><rect x="25.4965%" y="69" width="0.1342%" height="15" fill="rgb(250,191,14)"/><text x="25.7465%" y="79.50"></text></g><g><title>misc_checking_2 (2,701,650 samples, 1.07%)</title><rect x="24.6611%" y="181" width="1.0700%" height="15" fill="rgb(239,60,40)"/><text x="24.9111%" y="191.50"></text></g><g><title>match_checking (1,637,098 samples, 0.65%)</title><rect x="25.0827%" y="165" width="0.6484%" height="15" fill="rgb(206,27,48)"/><text x="25.3327%" y="175.50"></text></g><g><title>check_match (1,556,316 samples, 0.62%)</title><rect x="25.1147%" y="149" width="0.6164%" height="15" fill="rgb(225,35,8)"/><text x="25.3647%" y="159.50"></text></g><g><title>check_private_in_public (588,177 samples, 0.23%)</title><rect x="25.7354%" y="165" width="0.2329%" height="15" fill="rgb(250,213,24)"/><text x="25.9854%" y="175.50"></text></g><g><title>death_checking (1,254,134 samples, 0.50%)</title><rect x="25.9684%" y="165" width="0.4967%" height="15" fill="rgb(247,123,22)"/><text x="26.2184%" y="175.50"></text></g><g><title>eval_to_allocation_raw (470,395 samples, 0.19%)</title><rect x="27.0587%" y="133" width="0.1863%" height="15" fill="rgb(231,138,38)"/><text x="27.3087%" y="143.50"></text></g><g><title>eval_to_allocation_raw (468,665 samples, 0.19%)</title><rect x="27.0594%" y="117" width="0.1856%" height="15" fill="rgb(231,145,46)"/><text x="27.3094%" y="127.50"></text></g><g><title>param_env (852,137 samples, 0.34%)</title><rect x="27.3317%" y="133" width="0.3375%" height="15" fill="rgb(251,118,11)"/><text x="27.5817%" y="143.50"></text></g><g><title>predicates_of (438,823 samples, 0.17%)</title><rect x="27.4954%" y="117" width="0.1738%" height="15" fill="rgb(217,147,25)"/><text x="27.7454%" y="127.50"></text></g><g><title>predicates_defined_on (351,122 samples, 0.14%)</title><rect x="27.5301%" y="101" width="0.1391%" height="15" fill="rgb(247,81,37)"/><text x="27.7801%" y="111.50"></text></g><g><title>crate_lints (4,175,686 samples, 1.65%)</title><rect x="26.4659%" y="149" width="1.6538%" height="15" fill="rgb(209,12,38)"/><text x="26.7159%" y="159.50"></text></g><g><title>type_of (1,126,245 samples, 0.45%)</title><rect x="27.6736%" y="133" width="0.4460%" height="15" fill="rgb(227,1,9)"/><text x="27.9236%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (896,041 samples, 0.35%)</title><rect x="27.7648%" y="117" width="0.3549%" height="15" fill="rgb(248,47,43)"/><text x="28.0148%" y="127.50"></text></g><g><title>lint_checking (5,058,306 samples, 2.00%)</title><rect x="26.4651%" y="165" width="2.0033%" height="15" fill="rgb(221,10,30)"/><text x="26.7151%" y="175.50">l..</text></g><g><title>module_lints (880,400 samples, 0.35%)</title><rect x="28.1197%" y="149" width="0.3487%" height="15" fill="rgb(210,229,1)"/><text x="28.3697%" y="159.50"></text></g><g><title>lint_mod (865,640 samples, 0.34%)</title><rect x="28.1255%" y="133" width="0.3428%" height="15" fill="rgb(222,148,37)"/><text x="28.3755%" y="143.50"></text></g><g><title>privacy_access_levels (1,180,003 samples, 0.47%)</title><rect x="28.4684%" y="165" width="0.4673%" height="15" fill="rgb(234,67,33)"/><text x="28.7184%" y="175.50"></text></g><g><title>privacy_checking_modules (2,162,854 samples, 0.86%)</title><rect x="28.9357%" y="165" width="0.8566%" height="15" fill="rgb(247,98,35)"/><text x="29.1857%" y="175.50"></text></g><g><title>check_mod_privacy (2,149,884 samples, 0.85%)</title><rect x="28.9408%" y="149" width="0.8515%" height="15" fill="rgb(247,138,52)"/><text x="29.1908%" y="159.50"></text></g><g><title>misc_checking_3 (10,285,634 samples, 4.07%)</title><rect x="25.7311%" y="181" width="4.0736%" height="15" fill="rgb(213,79,30)"/><text x="25.9811%" y="191.50">misc..</text></g><g><title>adt_destructor (308,693 samples, 0.12%)</title><rect x="29.9158%" y="133" width="0.1223%" height="15" fill="rgb(246,177,23)"/><text x="30.1658%" y="143.50"></text></g><g><title>coherent_trait (305,143 samples, 0.12%)</title><rect x="29.9172%" y="117" width="0.1209%" height="15" fill="rgb(230,62,27)"/><text x="30.1672%" y="127.50"></text></g><g><title>specialization_graph_of (302,913 samples, 0.12%)</title><rect x="29.9181%" y="101" width="0.1200%" height="15" fill="rgb(216,154,8)"/><text x="30.1681%" y="111.50"></text></g><g><title>impl_parent (3,181,986 samples, 1.26%)</title><rect x="32.3352%" y="117" width="1.2602%" height="15" fill="rgb(244,35,45)"/><text x="32.5852%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,785,647 samples, 0.71%)</title><rect x="32.8883%" y="101" width="0.7072%" height="15" fill="rgb(251,115,12)"/><text x="33.1383%" y="111.50"></text></g><g><title>impl_trait_ref (6,137,042 samples, 2.43%)</title><rect x="33.5964%" y="117" width="2.4306%" height="15" fill="rgb(240,54,50)"/><text x="33.8464%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,921,090 samples, 1.95%)</title><rect x="34.0780%" y="101" width="1.9490%" height="15" fill="rgb(233,84,52)"/><text x="34.3280%" y="111.50">m..</text></g><g><title>trait_impls_of (1,055,942 samples, 0.42%)</title><rect x="36.1474%" y="117" width="0.4182%" height="15" fill="rgb(207,117,47)"/><text x="36.3974%" y="127.50"></text></g><g><title>implementations_of_trait (313,642 samples, 0.12%)</title><rect x="36.4414%" y="101" width="0.1242%" height="15" fill="rgb(249,43,39)"/><text x="36.6914%" y="111.50"></text></g><g><title>coherent_trait (20,209,234 samples, 8.00%)</title><rect x="29.8878%" y="149" width="8.0038%" height="15" fill="rgb(209,38,44)"/><text x="30.1378%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (19,609,847 samples, 7.77%)</title><rect x="30.1252%" y="133" width="7.7664%" height="15" fill="rgb(236,212,23)"/><text x="30.3752%" y="143.50">specializat..</text></g><g><title>visible_parent_map (3,332,057 samples, 1.32%)</title><rect x="36.5719%" y="117" width="1.3196%" height="15" fill="rgb(242,79,21)"/><text x="36.8219%" y="127.50"></text></g><g><title>module_children (3,015,984 samples, 1.19%)</title><rect x="36.6971%" y="101" width="1.1945%" height="15" fill="rgb(211,96,35)"/><text x="36.9471%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (2,955,413 samples, 1.17%)</title><rect x="36.7211%" y="85" width="1.1705%" height="15" fill="rgb(253,215,40)"/><text x="36.9711%" y="95.50"></text></g><g><title>coherence_checking (20,402,065 samples, 8.08%)</title><rect x="29.8754%" y="165" width="8.0802%" height="15" fill="rgb(211,81,21)"/><text x="30.1254%" y="175.50">coherence_c..</text></g><g><title>associated_item (775,541 samples, 0.31%)</title><rect x="53.9513%" y="101" width="0.3072%" height="15" fill="rgb(208,190,38)"/><text x="54.2013%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (440,427 samples, 0.17%)</title><rect x="54.0840%" y="85" width="0.1744%" height="15" fill="rgb(235,213,38)"/><text x="54.3340%" y="95.50"></text></g><g><title>associated_items (1,048,691 samples, 0.42%)</title><rect x="53.8649%" y="117" width="0.4153%" height="15" fill="rgb(237,122,38)"/><text x="54.1149%" y="127.50"></text></g><g><title>adt_dtorck_constraint (399,992 samples, 0.16%)</title><rect x="54.5928%" y="101" width="0.1584%" height="15" fill="rgb(244,218,35)"/><text x="54.8428%" y="111.50"></text></g><g><title>dropck_outlives (1,247,516 samples, 0.49%)</title><rect x="54.3412%" y="117" width="0.4941%" height="15" fill="rgb(240,68,47)"/><text x="54.5912%" y="127.50"></text></g><g><title>adt_sized_constraint (803,949 samples, 0.32%)</title><rect x="55.9381%" y="101" width="0.3184%" height="15" fill="rgb(210,16,53)"/><text x="56.1881%" y="111.50"></text></g><g><title>adt_def (796,469 samples, 0.32%)</title><rect x="55.9410%" y="85" width="0.3154%" height="15" fill="rgb(235,124,12)"/><text x="56.1910%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (795,269 samples, 0.31%)</title><rect x="55.9415%" y="69" width="0.3150%" height="15" fill="rgb(224,169,11)"/><text x="56.1915%" y="79.50"></text></g><g><title>item_attrs (781,679 samples, 0.31%)</title><rect x="55.9469%" y="53" width="0.3096%" height="15" fill="rgb(250,166,2)"/><text x="56.1969%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (780,139 samples, 0.31%)</title><rect x="55.9475%" y="37" width="0.3090%" height="15" fill="rgb(242,216,29)"/><text x="56.1975%" y="47.50"></text></g><g><title>mir_for_ctfe (871,997 samples, 0.35%)</title><rect x="56.5757%" y="53" width="0.3454%" height="15" fill="rgb(230,116,27)"/><text x="56.8257%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (862,707 samples, 0.34%)</title><rect x="56.5794%" y="37" width="0.3417%" height="15" fill="rgb(228,99,48)"/><text x="56.8294%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,705,589 samples, 0.68%)</title><rect x="56.2576%" y="101" width="0.6755%" height="15" fill="rgb(253,11,6)"/><text x="56.5076%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,679,488 samples, 0.67%)</title><rect x="56.2680%" y="85" width="0.6652%" height="15" fill="rgb(247,143,39)"/><text x="56.5180%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,636,408 samples, 0.65%)</title><rect x="56.2850%" y="69" width="0.6481%" height="15" fill="rgb(236,97,10)"/><text x="56.5350%" y="79.50"></text></g><g><title>trait_impls_of (332,933 samples, 0.13%)</title><rect x="57.1647%" y="101" width="0.1319%" height="15" fill="rgb(233,208,19)"/><text x="57.4147%" y="111.50"></text></g><g><title>evaluate_obligation (6,218,873 samples, 2.46%)</title><rect x="54.8352%" y="117" width="2.4630%" height="15" fill="rgb(216,164,2)"/><text x="55.0852%" y="127.50">ev..</text></g><g><title>item_attrs (341,715 samples, 0.14%)</title><rect x="57.5397%" y="117" width="0.1353%" height="15" fill="rgb(220,129,5)"/><text x="57.7897%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (328,704 samples, 0.13%)</title><rect x="57.5449%" y="101" width="0.1302%" height="15" fill="rgb(242,17,10)"/><text x="57.7949%" y="111.50"></text></g><g><title>evaluate_obligation (570,270 samples, 0.23%)</title><rect x="57.9601%" y="101" width="0.2259%" height="15" fill="rgb(242,107,0)"/><text x="58.2101%" y="111.50"></text></g><g><title>method_autoderef_steps (1,192,715 samples, 0.47%)</title><rect x="57.7235%" y="117" width="0.4724%" height="15" fill="rgb(251,28,31)"/><text x="57.9735%" y="127.50"></text></g><g><title>predicates_of (486,287 samples, 0.19%)</title><rect x="58.2780%" y="117" width="0.1926%" height="15" fill="rgb(233,223,10)"/><text x="58.5280%" y="127.50"></text></g><g><title>predicates_defined_on (336,375 samples, 0.13%)</title><rect x="58.3374%" y="101" width="0.1332%" height="15" fill="rgb(215,21,27)"/><text x="58.5874%" y="111.50"></text></g><g><title>evaluate_obligation (1,042,910 samples, 0.41%)</title><rect x="61.4161%" y="101" width="0.4130%" height="15" fill="rgb(232,23,21)"/><text x="61.6661%" y="111.50"></text></g><g><title>is_copy_raw (320,607 samples, 0.13%)</title><rect x="61.9069%" y="101" width="0.1270%" height="15" fill="rgb(244,5,23)"/><text x="62.1569%" y="111.50"></text></g><g><title>typeck (9,339,934 samples, 3.70%)</title><rect x="58.5296%" y="117" width="3.6990%" height="15" fill="rgb(226,81,46)"/><text x="58.7796%" y="127.50">type..</text></g><g><title>item_bodies_checking (61,276,538 samples, 24.27%)</title><rect x="37.9981%" y="165" width="24.2683%" height="15" fill="rgb(247,70,30)"/><text x="38.2481%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (61,272,688 samples, 24.27%)</title><rect x="37.9996%" y="149" width="24.2668%" height="15" fill="rgb(212,68,19)"/><text x="38.2496%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (61,059,384 samples, 24.18%)</title><rect x="38.0841%" y="133" width="24.1823%" height="15" fill="rgb(240,187,13)"/><text x="38.3341%" y="143.50">typeck</text></g><g><title>item_types_checking (5,649,462 samples, 2.24%)</title><rect x="62.2664%" y="165" width="2.2374%" height="15" fill="rgb(223,113,26)"/><text x="62.5164%" y="175.50">i..</text></g><g><title>check_mod_item_types (5,634,052 samples, 2.23%)</title><rect x="62.2725%" y="149" width="2.2313%" height="15" fill="rgb(206,192,2)"/><text x="62.5225%" y="159.50">c..</text></g><g><title>typeck (858,498 samples, 0.34%)</title><rect x="64.1638%" y="133" width="0.3400%" height="15" fill="rgb(241,108,4)"/><text x="64.4138%" y="143.50"></text></g><g><title>fn_sig (670,335 samples, 0.27%)</title><rect x="64.7967%" y="133" width="0.2655%" height="15" fill="rgb(247,173,49)"/><text x="65.0467%" y="143.50"></text></g><g><title>is_late_bound_map (427,305 samples, 0.17%)</title><rect x="65.1839%" y="117" width="0.1692%" height="15" fill="rgb(224,114,35)"/><text x="65.4339%" y="127.50"></text></g><g><title>resolve_lifetimes (415,675 samples, 0.16%)</title><rect x="65.1885%" y="101" width="0.1646%" height="15" fill="rgb(245,159,27)"/><text x="65.4385%" y="111.50"></text></g><g><title>lint_levels (300,823 samples, 0.12%)</title><rect x="65.2340%" y="85" width="0.1191%" height="15" fill="rgb(245,172,44)"/><text x="65.4840%" y="95.50"></text></g><g><title>generics_of (948,073 samples, 0.38%)</title><rect x="65.0622%" y="133" width="0.3755%" height="15" fill="rgb(236,23,11)"/><text x="65.3122%" y="143.50"></text></g><g><title>late_bound_vars_map (707,110 samples, 0.28%)</title><rect x="66.0180%" y="85" width="0.2800%" height="15" fill="rgb(205,117,38)"/><text x="66.2680%" y="95.50"></text></g><g><title>resolve_lifetimes (648,660 samples, 0.26%)</title><rect x="66.0411%" y="69" width="0.2569%" height="15" fill="rgb(237,72,25)"/><text x="66.2911%" y="79.50"></text></g><g><title>explicit_predicates_of (1,756,449 samples, 0.70%)</title><rect x="65.6796%" y="101" width="0.6956%" height="15" fill="rgb(244,70,9)"/><text x="65.9296%" y="111.50"></text></g><g><title>predicates_of (2,958,672 samples, 1.17%)</title><rect x="65.5191%" y="133" width="1.1718%" height="15" fill="rgb(217,125,39)"/><text x="65.7691%" y="143.50"></text></g><g><title>predicates_defined_on (2,794,381 samples, 1.11%)</title><rect x="65.5841%" y="117" width="1.1067%" height="15" fill="rgb(235,36,10)"/><text x="65.8341%" y="127.50"></text></g><g><title>inferred_outlives_of (796,789 samples, 0.32%)</title><rect x="66.3753%" y="101" width="0.3156%" height="15" fill="rgb(251,123,47)"/><text x="66.6253%" y="111.50"></text></g><g><title>inferred_outlives_crate (740,558 samples, 0.29%)</title><rect x="66.3975%" y="85" width="0.2933%" height="15" fill="rgb(221,13,13)"/><text x="66.6475%" y="95.50"></text></g><g><title>type_of (536,124 samples, 0.21%)</title><rect x="66.4785%" y="69" width="0.2123%" height="15" fill="rgb(238,131,9)"/><text x="66.7285%" y="79.50"></text></g><g><title>type_collecting (5,924,395 samples, 2.35%)</title><rect x="64.5070%" y="165" width="2.3463%" height="15" fill="rgb(211,50,8)"/><text x="64.7570%" y="175.50">t..</text></g><g><title>collect_mod_item_types (5,905,245 samples, 2.34%)</title><rect x="64.5146%" y="149" width="2.3388%" height="15" fill="rgb(245,182,24)"/><text x="64.7646%" y="159.50">c..</text></g><g><title>type_of (389,843 samples, 0.15%)</title><rect x="66.6989%" y="133" width="0.1544%" height="15" fill="rgb(242,14,37)"/><text x="66.9489%" y="143.50"></text></g><g><title>evaluate_obligation (1,514,934 samples, 0.60%)</title><rect x="69.6938%" y="133" width="0.6000%" height="15" fill="rgb(246,228,12)"/><text x="69.9438%" y="143.50"></text></g><g><title>implied_outlives_bounds (951,882 samples, 0.38%)</title><rect x="70.3069%" y="133" width="0.3770%" height="15" fill="rgb(213,55,15)"/><text x="70.5569%" y="143.50"></text></g><g><title>param_env (1,137,724 samples, 0.45%)</title><rect x="70.6839%" y="133" width="0.4506%" height="15" fill="rgb(209,9,3)"/><text x="70.9339%" y="143.50"></text></g><g><title>region_scope_tree (873,608 samples, 0.35%)</title><rect x="71.1557%" y="133" width="0.3460%" height="15" fill="rgb(230,59,30)"/><text x="71.4057%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,150,054 samples, 4.42%)</title><rect x="67.0963%" y="149" width="4.4159%" height="15" fill="rgb(209,121,21)"/><text x="67.3463%" y="159.50">check..</text></g><g><title>mir_borrowck (378,025 samples, 0.15%)</title><rect x="74.4604%" y="53" width="0.1497%" height="15" fill="rgb(220,109,13)"/><text x="74.7104%" y="63.50"></text></g><g><title>mir_for_ctfe (508,426 samples, 0.20%)</title><rect x="74.4089%" y="85" width="0.2014%" height="15" fill="rgb(232,18,1)"/><text x="74.6589%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (463,336 samples, 0.18%)</title><rect x="74.4268%" y="69" width="0.1835%" height="15" fill="rgb(215,41,42)"/><text x="74.6768%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,192,504 samples, 0.47%)</title><rect x="74.2575%" y="133" width="0.4723%" height="15" fill="rgb(224,123,36)"/><text x="74.5075%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,176,543 samples, 0.47%)</title><rect x="74.2638%" y="117" width="0.4660%" height="15" fill="rgb(240,125,3)"/><text x="74.5138%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,174,643 samples, 0.47%)</title><rect x="74.2646%" y="101" width="0.4652%" height="15" fill="rgb(205,98,50)"/><text x="74.5146%" y="111.50"></text></g><g><title>evaluate_obligation (430,904 samples, 0.17%)</title><rect x="74.7298%" y="133" width="0.1707%" height="15" fill="rgb(205,185,37)"/><text x="74.9798%" y="143.50"></text></g><g><title>implied_outlives_bounds (342,248 samples, 0.14%)</title><rect x="74.9333%" y="133" width="0.1355%" height="15" fill="rgb(238,207,15)"/><text x="75.1833%" y="143.50"></text></g><g><title>param_env (1,058,113 samples, 0.42%)</title><rect x="75.1550%" y="133" width="0.4191%" height="15" fill="rgb(213,199,42)"/><text x="75.4050%" y="143.50"></text></g><g><title>check_item_well_formed (10,911,440 samples, 4.32%)</title><rect x="71.5122%" y="149" width="4.3214%" height="15" fill="rgb(235,201,11)"/><text x="71.7622%" y="159.50">check..</text></g><g><title>variances_of (257,773 samples, 0.10%)</title><rect x="75.7316%" y="133" width="0.1021%" height="15" fill="rgb(207,46,11)"/><text x="75.9816%" y="143.50"></text></g><g><title>analysis (191,712,110 samples, 75.93%)</title><rect x="0.3547%" y="197" width="75.9269%" height="15" fill="rgb(241,35,35)"/><text x="0.6047%" y="207.50">analysis</text></g><g><title>type_check_crate (117,352,078 samples, 46.48%)</title><rect x="29.8047%" y="181" width="46.4769%" height="15" fill="rgb(243,32,47)"/><text x="30.0547%" y="191.50">type_check_crate</text></g><g><title>wf_checking (23,793,114 samples, 9.42%)</title><rect x="66.8584%" y="165" width="9.4232%" height="15" fill="rgb(247,202,23)"/><text x="67.1084%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,130,914 samples, 0.45%)</title><rect x="75.8336%" y="149" width="0.4479%" height="15" fill="rgb(219,102,11)"/><text x="76.0836%" y="159.50"></text></g><g><title>codegen_crate (419,835 samples, 0.17%)</title><rect x="76.2861%" y="197" width="0.1663%" height="15" fill="rgb(243,110,44)"/><text x="76.5361%" y="207.50"></text></g><g><title>AST_validation (296,954 samples, 0.12%)</title><rect x="76.5334%" y="181" width="0.1176%" height="15" fill="rgb(222,74,54)"/><text x="76.7834%" y="191.50"></text></g><g><title>metadata_load_macro (569,567 samples, 0.23%)</title><rect x="86.8899%" y="149" width="0.2256%" height="15" fill="rgb(216,99,12)"/><text x="87.1399%" y="159.50"></text></g><g><title>metadata_register_crate (1,332,765 samples, 0.53%)</title><rect x="87.1155%" y="149" width="0.5278%" height="15" fill="rgb(226,22,26)"/><text x="87.3655%" y="159.50"></text></g><g><title>metadata_register_crate (486,165 samples, 0.19%)</title><rect x="87.4508%" y="133" width="0.1925%" height="15" fill="rgb(217,163,10)"/><text x="87.7008%" y="143.50"></text></g><g><title>macro_expand_crate (28,087,831 samples, 11.12%)</title><rect x="76.7463%" y="181" width="11.1241%" height="15" fill="rgb(213,25,53)"/><text x="76.9963%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (28,067,221 samples, 11.12%)</title><rect x="76.7544%" y="165" width="11.1159%" height="15" fill="rgb(252,105,26)"/><text x="77.0044%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (573,286 samples, 0.23%)</title><rect x="87.6433%" y="149" width="0.2270%" height="15" fill="rgb(220,39,43)"/><text x="87.8933%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (439,085 samples, 0.17%)</title><rect x="87.8720%" y="181" width="0.1739%" height="15" fill="rgb(229,68,48)"/><text x="88.1220%" y="191.50"></text></g><g><title>late_resolve_crate (3,601,330 samples, 1.43%)</title><rect x="88.1809%" y="165" width="1.4263%" height="15" fill="rgb(252,8,32)"/><text x="88.4309%" y="175.50"></text></g><g><title>configure_and_expand (33,517,811 samples, 13.27%)</title><rect x="76.4524%" y="197" width="13.2746%" height="15" fill="rgb(223,20,43)"/><text x="76.7024%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,244,817 samples, 1.68%)</title><rect x="88.0459%" y="181" width="1.6811%" height="15" fill="rgb(229,81,49)"/><text x="88.2959%" y="191.50"></text></g><g><title>drop_ast (435,095 samples, 0.17%)</title><rect x="89.7270%" y="197" width="0.1723%" height="15" fill="rgb(236,28,36)"/><text x="89.9770%" y="207.50"></text></g><g><title>early_lint_checks (887,869 samples, 0.35%)</title><rect x="89.9052%" y="197" width="0.3516%" height="15" fill="rgb(249,185,26)"/><text x="90.1552%" y="207.50"></text></g><g><title>free_global_ctxt (4,789,073 samples, 1.90%)</title><rect x="90.2568%" y="197" width="1.8967%" height="15" fill="rgb(249,174,33)"/><text x="90.5068%" y="207.50">f..</text></g><g><title>generate_crate_metadata (3,613,710 samples, 1.43%)</title><rect x="92.1535%" y="197" width="1.4312%" height="15" fill="rgb(233,201,37)"/><text x="92.4035%" y="207.50"></text></g><g><title>hir_lowering (7,593,264 samples, 3.01%)</title><rect x="93.5847%" y="197" width="3.0073%" height="15" fill="rgb(221,78,26)"/><text x="93.8347%" y="207.50">hir..</text></g><g><title>parse_crate (6,482,732 samples, 2.57%)</title><rect x="96.6283%" y="197" width="2.5675%" height="15" fill="rgb(250,127,30)"/><text x="96.8783%" y="207.50">pa..</text></g><g><title>self_profile_alloc_query_strings (1,251,174 samples, 0.50%)</title><rect x="99.2774%" y="197" width="0.4955%" height="15" fill="rgb(230,49,44)"/><text x="99.5274%" y="207.50"></text></g><g><title>all (252,495,752 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (252,495,752 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (478,725 samples, 0.19%)</title><rect x="99.8104%" y="197" width="0.1896%" height="15" fill="rgb(215,43,3)"/><text x="100.0604%" y="207.50"></text></g></svg></svg>