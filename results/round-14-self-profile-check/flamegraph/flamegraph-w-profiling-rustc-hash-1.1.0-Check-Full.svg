<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (71,731 samples, 0.16%)</title><rect x="6.6332%" y="117" width="0.1584%" height="15" fill="rgb(227,0,7)"/><text x="6.8832%" y="127.50"></text></g><g><title>item_attrs (69,010 samples, 0.15%)</title><rect x="7.0086%" y="85" width="0.1524%" height="15" fill="rgb(217,0,24)"/><text x="7.2586%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (66,700 samples, 0.15%)</title><rect x="7.0137%" y="69" width="0.1473%" height="15" fill="rgb(221,193,54)"/><text x="7.2637%" y="79.50"></text></g><g><title>codegen_fn_attrs (101,740 samples, 0.22%)</title><rect x="6.9438%" y="101" width="0.2247%" height="15" fill="rgb(248,212,6)"/><text x="7.1938%" y="111.50"></text></g><g><title>is_copy_raw (49,531 samples, 0.11%)</title><rect x="8.0471%" y="85" width="0.1094%" height="15" fill="rgb(208,68,35)"/><text x="8.2971%" y="95.50"></text></g><g><title>needs_drop_raw (87,631 samples, 0.19%)</title><rect x="8.1608%" y="85" width="0.1936%" height="15" fill="rgb(232,128,0)"/><text x="8.4108%" y="95.50"></text></g><g><title>is_copy_raw (77,601 samples, 0.17%)</title><rect x="8.1830%" y="69" width="0.1714%" height="15" fill="rgb(207,160,47)"/><text x="8.4330%" y="79.50"></text></g><g><title>evaluate_obligation (66,121 samples, 0.15%)</title><rect x="8.2083%" y="53" width="0.1461%" height="15" fill="rgb(228,23,34)"/><text x="8.4583%" y="63.50"></text></g><g><title>impl_parent (110,811 samples, 0.24%)</title><rect x="8.7950%" y="53" width="0.2448%" height="15" fill="rgb(218,30,26)"/><text x="9.0450%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (68,991 samples, 0.15%)</title><rect x="8.8874%" y="37" width="0.1524%" height="15" fill="rgb(220,122,19)"/><text x="9.1374%" y="47.50"></text></g><g><title>specialization_graph_of (521,106 samples, 1.15%)</title><rect x="8.4344%" y="69" width="1.1511%" height="15" fill="rgb(250,228,42)"/><text x="8.6844%" y="79.50"></text></g><g><title>impl_trait_ref (247,023 samples, 0.55%)</title><rect x="9.0398%" y="53" width="0.5457%" height="15" fill="rgb(240,193,28)"/><text x="9.2898%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (202,013 samples, 0.45%)</title><rect x="9.1392%" y="37" width="0.4462%" height="15" fill="rgb(216,20,37)"/><text x="9.3892%" y="47.50"></text></g><g><title>resolve_instance (577,636 samples, 1.28%)</title><rect x="8.3544%" y="85" width="1.2760%" height="15" fill="rgb(206,188,39)"/><text x="8.6044%" y="95.50"></text></g><g><title>thir_body (163,511 samples, 0.36%)</title><rect x="9.6389%" y="85" width="0.3612%" height="15" fill="rgb(217,207,13)"/><text x="9.8889%" y="95.50"></text></g><g><title>mir_const (1,684,350 samples, 3.72%)</title><rect x="6.2862%" y="133" width="3.7206%" height="15" fill="rgb(231,73,38)"/><text x="6.5362%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (1,455,516 samples, 3.22%)</title><rect x="6.7917%" y="117" width="3.2152%" height="15" fill="rgb(225,20,46)"/><text x="7.0417%" y="127.50">uns..</text></g><g><title>mir_built (1,284,915 samples, 2.84%)</title><rect x="7.1685%" y="101" width="2.8383%" height="15" fill="rgb(210,31,41)"/><text x="7.4185%" y="111.50">mi..</text></g><g><title>mir_promoted (1,966,001 samples, 4.34%)</title><rect x="5.9861%" y="149" width="4.3428%" height="15" fill="rgb(221,200,47)"/><text x="6.2361%" y="159.50">mir_p..</text></g><g><title>mir_const_qualif (145,781 samples, 0.32%)</title><rect x="10.0068%" y="133" width="0.3220%" height="15" fill="rgb(226,26,5)"/><text x="10.2568%" y="143.50"></text></g><g><title>mir_const (125,601 samples, 0.28%)</title><rect x="10.0514%" y="117" width="0.2774%" height="15" fill="rgb(249,33,26)"/><text x="10.3014%" y="127.50"></text></g><g><title>unsafety_check_result (80,661 samples, 0.18%)</title><rect x="10.1507%" y="101" width="0.1782%" height="15" fill="rgb(235,183,28)"/><text x="10.4007%" y="111.50"></text></g><g><title>mir_built (49,170 samples, 0.11%)</title><rect x="10.2202%" y="85" width="0.1086%" height="15" fill="rgb(221,5,38)"/><text x="10.4702%" y="95.50"></text></g><g><title>type_op_normalize_fn_sig (306,493 samples, 0.68%)</title><rect x="10.3432%" y="149" width="0.6770%" height="15" fill="rgb(247,18,42)"/><text x="10.5932%" y="159.50"></text></g><g><title>normalize_projection_ty (201,353 samples, 0.44%)</title><rect x="10.5755%" y="133" width="0.4448%" height="15" fill="rgb(241,131,45)"/><text x="10.8255%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,375,969 samples, 9.67%)</title><rect x="1.9444%" y="181" width="9.6663%" height="15" fill="rgb(249,31,29)"/><text x="2.1944%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (4,356,898 samples, 9.62%)</title><rect x="1.9865%" y="165" width="9.6241%" height="15" fill="rgb(225,111,53)"/><text x="2.2365%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (267,293 samples, 0.59%)</title><rect x="11.0203%" y="149" width="0.5904%" height="15" fill="rgb(238,160,17)"/><text x="11.2703%" y="159.50"></text></g><g><title>MIR_effect_checking (96,002 samples, 0.21%)</title><rect x="11.6107%" y="181" width="0.2121%" height="15" fill="rgb(214,148,48)"/><text x="11.8607%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (77,860 samples, 0.17%)</title><rect x="11.6508%" y="165" width="0.1720%" height="15" fill="rgb(232,36,49)"/><text x="11.9008%" y="175.50"></text></g><g><title>hir_module_items (164,812 samples, 0.36%)</title><rect x="11.8228%" y="181" width="0.3641%" height="15" fill="rgb(209,103,24)"/><text x="12.0728%" y="191.50"></text></g><g><title>associated_item (53,121 samples, 0.12%)</title><rect x="12.7434%" y="117" width="0.1173%" height="15" fill="rgb(229,88,8)"/><text x="12.9934%" y="127.50"></text></g><g><title>get_lang_items (102,211 samples, 0.23%)</title><rect x="12.9821%" y="101" width="0.2258%" height="15" fill="rgb(213,181,19)"/><text x="13.2321%" y="111.50"></text></g><g><title>item_attrs (72,530 samples, 0.16%)</title><rect x="13.2078%" y="101" width="0.1602%" height="15" fill="rgb(254,191,54)"/><text x="13.4578%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (67,060 samples, 0.15%)</title><rect x="13.2199%" y="85" width="0.1481%" height="15" fill="rgb(241,83,37)"/><text x="13.4699%" y="95.50"></text></g><g><title>codegen_fn_attrs (297,213 samples, 0.66%)</title><rect x="12.8607%" y="117" width="0.6565%" height="15" fill="rgb(233,36,39)"/><text x="13.1107%" y="127.50"></text></g><g><title>codegen_fn_attrs (448,695 samples, 0.99%)</title><rect x="12.5349%" y="149" width="0.9911%" height="15" fill="rgb(226,3,54)"/><text x="12.7849%" y="159.50"></text></g><g><title>should_inherit_track_caller (398,405 samples, 0.88%)</title><rect x="12.6460%" y="133" width="0.8801%" height="15" fill="rgb(245,192,40)"/><text x="12.8960%" y="143.50"></text></g><g><title>check_mod_attrs (578,677 samples, 1.28%)</title><rect x="12.2489%" y="165" width="1.2783%" height="15" fill="rgb(238,167,29)"/><text x="12.4989%" y="175.50"></text></g><g><title>check_mod_const_bodies (46,551 samples, 0.10%)</title><rect x="13.5271%" y="165" width="0.1028%" height="15" fill="rgb(232,182,51)"/><text x="13.7771%" y="175.50"></text></g><g><title>lookup_deprecation_entry (87,201 samples, 0.19%)</title><rect x="13.9031%" y="149" width="0.1926%" height="15" fill="rgb(231,60,39)"/><text x="14.1531%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (249,412 samples, 0.55%)</title><rect x="13.7051%" y="165" width="0.5509%" height="15" fill="rgb(208,69,12)"/><text x="13.9551%" y="175.50"></text></g><g><title>misc_checking_1 (980,191 samples, 2.17%)</title><rect x="12.1875%" y="181" width="2.1652%" height="15" fill="rgb(235,93,37)"/><text x="12.4375%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (94,791 samples, 0.21%)</title><rect x="14.3554%" y="165" width="0.2094%" height="15" fill="rgb(213,116,39)"/><text x="14.6054%" y="175.50"></text></g><g><title>check_mod_liveness (74,461 samples, 0.16%)</title><rect x="14.4003%" y="149" width="0.1645%" height="15" fill="rgb(222,207,29)"/><text x="14.6503%" y="159.50"></text></g><g><title>misc_checking_2 (209,032 samples, 0.46%)</title><rect x="14.3527%" y="181" width="0.4617%" height="15" fill="rgb(206,96,30)"/><text x="14.6027%" y="191.50"></text></g><g><title>match_checking (113,011 samples, 0.25%)</title><rect x="14.5648%" y="165" width="0.2496%" height="15" fill="rgb(218,138,4)"/><text x="14.8148%" y="175.50"></text></g><g><title>check_match (107,011 samples, 0.24%)</title><rect x="14.5781%" y="149" width="0.2364%" height="15" fill="rgb(250,191,14)"/><text x="14.8281%" y="159.50"></text></g><g><title>death_checking (68,420 samples, 0.15%)</title><rect x="14.9252%" y="165" width="0.1511%" height="15" fill="rgb(239,60,40)"/><text x="15.1752%" y="175.50"></text></g><g><title>eval_to_const_value_raw (94,781 samples, 0.21%)</title><rect x="16.0376%" y="133" width="0.2094%" height="15" fill="rgb(206,27,48)"/><text x="16.2876%" y="143.50"></text></g><g><title>eval_to_const_value_raw (92,661 samples, 0.20%)</title><rect x="16.0423%" y="117" width="0.2047%" height="15" fill="rgb(225,35,8)"/><text x="16.2923%" y="127.50"></text></g><g><title>eval_to_allocation_raw (87,791 samples, 0.19%)</title><rect x="16.0530%" y="101" width="0.1939%" height="15" fill="rgb(250,213,24)"/><text x="16.3030%" y="111.50"></text></g><g><title>param_env (85,191 samples, 0.19%)</title><rect x="16.2469%" y="133" width="0.1882%" height="15" fill="rgb(247,123,22)"/><text x="16.4969%" y="143.50"></text></g><g><title>crate_lints (3,164,905 samples, 6.99%)</title><rect x="15.0803%" y="149" width="6.9911%" height="15" fill="rgb(231,138,38)"/><text x="15.3303%" y="159.50">crate_lin..</text></g><g><title>type_of (2,548,230 samples, 5.63%)</title><rect x="16.4425%" y="133" width="5.6289%" height="15" fill="rgb(231,145,46)"/><text x="16.6925%" y="143.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,287,278 samples, 5.05%)</title><rect x="17.0189%" y="117" width="5.0525%" height="15" fill="rgb(251,118,11)"/><text x="17.2689%" y="127.50">metada..</text></g><g><title>lint_checking (3,243,896 samples, 7.17%)</title><rect x="15.0764%" y="165" width="7.1656%" height="15" fill="rgb(217,147,25)"/><text x="15.3264%" y="175.50">lint_check..</text></g><g><title>module_lints (77,241 samples, 0.17%)</title><rect x="22.0713%" y="149" width="0.1706%" height="15" fill="rgb(247,81,37)"/><text x="22.3213%" y="159.50"></text></g><g><title>lint_mod (75,341 samples, 0.17%)</title><rect x="22.0755%" y="133" width="0.1664%" height="15" fill="rgb(209,12,38)"/><text x="22.3255%" y="143.50"></text></g><g><title>privacy_access_levels (53,970 samples, 0.12%)</title><rect x="22.2420%" y="165" width="0.1192%" height="15" fill="rgb(227,1,9)"/><text x="22.4920%" y="175.50"></text></g><g><title>privacy_checking_modules (122,201 samples, 0.27%)</title><rect x="22.3612%" y="165" width="0.2699%" height="15" fill="rgb(248,47,43)"/><text x="22.6112%" y="175.50"></text></g><g><title>check_mod_privacy (120,731 samples, 0.27%)</title><rect x="22.3644%" y="149" width="0.2667%" height="15" fill="rgb(221,10,30)"/><text x="22.6144%" y="159.50"></text></g><g><title>misc_checking_3 (3,552,479 samples, 7.85%)</title><rect x="14.8144%" y="181" width="7.8472%" height="15" fill="rgb(210,229,1)"/><text x="15.0644%" y="191.50">misc_checki..</text></g><g><title>impl_parent (350,657 samples, 0.77%)</title><rect x="23.6714%" y="117" width="0.7746%" height="15" fill="rgb(222,148,37)"/><text x="23.9214%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (265,456 samples, 0.59%)</title><rect x="23.8596%" y="101" width="0.5864%" height="15" fill="rgb(234,67,33)"/><text x="24.1096%" y="111.50"></text></g><g><title>impl_trait_ref (987,558 samples, 2.18%)</title><rect x="24.4460%" y="117" width="2.1815%" height="15" fill="rgb(247,98,35)"/><text x="24.6960%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (892,416 samples, 1.97%)</title><rect x="24.6562%" y="101" width="1.9713%" height="15" fill="rgb(247,138,52)"/><text x="24.9062%" y="111.50">m..</text></g><g><title>coherent_trait (1,888,871 samples, 4.17%)</title><rect x="22.7582%" y="149" width="4.1724%" height="15" fill="rgb(213,79,30)"/><text x="23.0082%" y="159.50">coher..</text></g><g><title>specialization_graph_of (1,880,591 samples, 4.15%)</title><rect x="22.7765%" y="133" width="4.1541%" height="15" fill="rgb(246,177,23)"/><text x="23.0265%" y="143.50">speci..</text></g><g><title>trait_impls_of (137,221 samples, 0.30%)</title><rect x="26.6275%" y="117" width="0.3031%" height="15" fill="rgb(230,62,27)"/><text x="26.8775%" y="127.50"></text></g><g><title>implementations_of_trait (47,320 samples, 0.10%)</title><rect x="26.8261%" y="101" width="0.1045%" height="15" fill="rgb(216,154,8)"/><text x="27.0761%" y="111.50"></text></g><g><title>coherence_checking (1,947,692 samples, 4.30%)</title><rect x="22.7231%" y="165" width="4.3023%" height="15" fill="rgb(244,35,45)"/><text x="22.9731%" y="175.50">coher..</text></g><g><title>associated_item (168,463 samples, 0.37%)</title><rect x="28.9882%" y="101" width="0.3721%" height="15" fill="rgb(251,115,12)"/><text x="29.2382%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (147,883 samples, 0.33%)</title><rect x="29.0336%" y="85" width="0.3267%" height="15" fill="rgb(240,54,50)"/><text x="29.2836%" y="95.50"></text></g><g><title>associated_items (202,183 samples, 0.45%)</title><rect x="28.9219%" y="117" width="0.4466%" height="15" fill="rgb(233,84,52)"/><text x="29.1719%" y="127.50"></text></g><g><title>evaluate_obligation (128,291 samples, 0.28%)</title><rect x="29.4376%" y="117" width="0.2834%" height="15" fill="rgb(207,117,47)"/><text x="29.6876%" y="127.50"></text></g><g><title>method_autoderef_steps (49,571 samples, 0.11%)</title><rect x="29.8269%" y="117" width="0.1095%" height="15" fill="rgb(249,43,39)"/><text x="30.0769%" y="127.50"></text></g><g><title>associated_item (401,905 samples, 0.89%)</title><rect x="36.8697%" y="85" width="0.8878%" height="15" fill="rgb(209,38,44)"/><text x="37.1197%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (311,514 samples, 0.69%)</title><rect x="37.0694%" y="69" width="0.6881%" height="15" fill="rgb(236,212,23)"/><text x="37.3194%" y="79.50"></text></g><g><title>associated_items (557,486 samples, 1.23%)</title><rect x="36.5630%" y="101" width="1.2315%" height="15" fill="rgb(242,79,21)"/><text x="36.8130%" y="111.50"></text></g><g><title>dropck_outlives (50,780 samples, 0.11%)</title><rect x="37.8309%" y="101" width="0.1122%" height="15" fill="rgb(211,96,35)"/><text x="38.0809%" y="111.50"></text></g><g><title>codegen_fn_attrs (47,731 samples, 0.11%)</title><rect x="38.3695%" y="37" width="0.1054%" height="15" fill="rgb(253,215,40)"/><text x="38.6195%" y="47.50"></text></g><g><title>fn_abi_of_instance (81,941 samples, 0.18%)</title><rect x="38.3270%" y="53" width="0.1810%" height="15" fill="rgb(211,81,21)"/><text x="38.5770%" y="63.50"></text></g><g><title>eval_to_const_value_raw (328,783 samples, 0.73%)</title><rect x="37.9431%" y="101" width="0.7263%" height="15" fill="rgb(208,190,38)"/><text x="38.1931%" y="111.50"></text></g><g><title>eval_to_const_value_raw (312,453 samples, 0.69%)</title><rect x="37.9791%" y="85" width="0.6902%" height="15" fill="rgb(235,213,38)"/><text x="38.2291%" y="95.50"></text></g><g><title>eval_to_allocation_raw (304,073 samples, 0.67%)</title><rect x="37.9976%" y="69" width="0.6717%" height="15" fill="rgb(237,122,38)"/><text x="38.2476%" y="79.50"></text></g><g><title>predicates_of (51,201 samples, 0.11%)</title><rect x="39.4852%" y="85" width="0.1131%" height="15" fill="rgb(244,218,35)"/><text x="39.7352%" y="95.50"></text></g><g><title>evaluate_obligation (897,371 samples, 1.98%)</title><rect x="38.6693%" y="101" width="1.9822%" height="15" fill="rgb(240,68,47)"/><text x="38.9193%" y="111.50">e..</text></g><g><title>trait_impls_of (471,615 samples, 1.04%)</title><rect x="39.6098%" y="85" width="1.0418%" height="15" fill="rgb(210,16,53)"/><text x="39.8598%" y="95.50"></text></g><g><title>implementations_of_trait (140,803 samples, 0.31%)</title><rect x="40.3405%" y="69" width="0.3110%" height="15" fill="rgb(235,124,12)"/><text x="40.5905%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (99,942 samples, 0.22%)</title><rect x="40.4308%" y="53" width="0.2208%" height="15" fill="rgb(224,169,11)"/><text x="40.6808%" y="63.50"></text></g><g><title>generics_of (53,621 samples, 0.12%)</title><rect x="40.7562%" y="101" width="0.1184%" height="15" fill="rgb(250,166,2)"/><text x="41.0062%" y="111.50"></text></g><g><title>associated_item (57,510 samples, 0.13%)</title><rect x="40.9293%" y="69" width="0.1270%" height="15" fill="rgb(242,216,29)"/><text x="41.1793%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (51,420 samples, 0.11%)</title><rect x="40.9428%" y="53" width="0.1136%" height="15" fill="rgb(230,116,27)"/><text x="41.1928%" y="63.50"></text></g><g><title>impl_item_implementor_ids (86,611 samples, 0.19%)</title><rect x="40.8760%" y="101" width="0.1913%" height="15" fill="rgb(228,99,48)"/><text x="41.1260%" y="111.50"></text></g><g><title>associated_items (77,351 samples, 0.17%)</title><rect x="40.8965%" y="85" width="0.1709%" height="15" fill="rgb(253,11,6)"/><text x="41.1465%" y="95.50"></text></g><g><title>impl_trait_ref (54,790 samples, 0.12%)</title><rect x="41.0778%" y="101" width="0.1210%" height="15" fill="rgb(247,143,39)"/><text x="41.3278%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (48,290 samples, 0.11%)</title><rect x="41.0922%" y="85" width="0.1067%" height="15" fill="rgb(236,97,10)"/><text x="41.3422%" y="95.50"></text></g><g><title>is_copy_raw (163,492 samples, 0.36%)</title><rect x="41.2137%" y="101" width="0.3611%" height="15" fill="rgb(233,208,19)"/><text x="41.4637%" y="111.50"></text></g><g><title>evaluate_obligation (148,542 samples, 0.33%)</title><rect x="41.2468%" y="85" width="0.3281%" height="15" fill="rgb(216,164,2)"/><text x="41.4968%" y="95.50"></text></g><g><title>item_attrs (89,621 samples, 0.20%)</title><rect x="41.5749%" y="101" width="0.1980%" height="15" fill="rgb(220,129,5)"/><text x="41.8249%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,181 samples, 0.19%)</title><rect x="41.5781%" y="85" width="0.1948%" height="15" fill="rgb(242,17,10)"/><text x="41.8281%" y="95.50"></text></g><g><title>explicit_predicates_of (50,050 samples, 0.11%)</title><rect x="42.1662%" y="69" width="0.1106%" height="15" fill="rgb(242,107,0)"/><text x="42.4162%" y="79.50"></text></g><g><title>predicates_of (151,902 samples, 0.34%)</title><rect x="41.9917%" y="101" width="0.3355%" height="15" fill="rgb(251,28,31)"/><text x="42.2417%" y="111.50"></text></g><g><title>predicates_defined_on (100,151 samples, 0.22%)</title><rect x="42.1061%" y="85" width="0.2212%" height="15" fill="rgb(233,223,10)"/><text x="42.3561%" y="95.50"></text></g><g><title>trait_impls_of (256,453 samples, 0.57%)</title><rect x="42.3652%" y="101" width="0.5665%" height="15" fill="rgb(215,21,27)"/><text x="42.6152%" y="111.50"></text></g><g><title>implementations_of_trait (70,421 samples, 0.16%)</title><rect x="42.7761%" y="85" width="0.1556%" height="15" fill="rgb(232,23,21)"/><text x="43.0261%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (53,530 samples, 0.12%)</title><rect x="42.8134%" y="69" width="0.1182%" height="15" fill="rgb(244,5,23)"/><text x="43.0634%" y="79.50"></text></g><g><title>typeck (5,885,445 samples, 13.00%)</title><rect x="30.0480%" y="117" width="13.0006%" height="15" fill="rgb(226,81,46)"/><text x="30.2980%" y="127.50">typeck</text></g><g><title>item_bodies_checking (7,233,921 samples, 15.98%)</title><rect x="27.0790%" y="165" width="15.9793%" height="15" fill="rgb(247,70,30)"/><text x="27.3290%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (7,231,911 samples, 15.97%)</title><rect x="27.0834%" y="149" width="15.9749%" height="15" fill="rgb(212,68,19)"/><text x="27.3334%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (7,221,180 samples, 15.95%)</title><rect x="27.1071%" y="133" width="15.9512%" height="15" fill="rgb(240,187,13)"/><text x="27.3571%" y="143.50">typeck</text></g><g><title>impl_parent (63,070 samples, 0.14%)</title><rect x="43.5832%" y="85" width="0.1393%" height="15" fill="rgb(223,113,26)"/><text x="43.8332%" y="95.50"></text></g><g><title>impl_trait_ref (190,333 samples, 0.42%)</title><rect x="43.7225%" y="85" width="0.4204%" height="15" fill="rgb(206,192,2)"/><text x="43.9725%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (170,263 samples, 0.38%)</title><rect x="43.7668%" y="69" width="0.3761%" height="15" fill="rgb(241,108,4)"/><text x="44.0168%" y="79.50"></text></g><g><title>adt_destructor (360,284 samples, 0.80%)</title><rect x="43.4093%" y="133" width="0.7958%" height="15" fill="rgb(247,173,49)"/><text x="43.6593%" y="143.50"></text></g><g><title>coherent_trait (356,334 samples, 0.79%)</title><rect x="43.4180%" y="117" width="0.7871%" height="15" fill="rgb(224,114,35)"/><text x="43.6680%" y="127.50"></text></g><g><title>specialization_graph_of (354,894 samples, 0.78%)</title><rect x="43.4212%" y="101" width="0.7839%" height="15" fill="rgb(245,159,27)"/><text x="43.6712%" y="111.50"></text></g><g><title>item_types_checking (653,858 samples, 1.44%)</title><rect x="43.0583%" y="165" width="1.4443%" height="15" fill="rgb(245,172,44)"/><text x="43.3083%" y="175.50"></text></g><g><title>check_mod_item_types (652,038 samples, 1.44%)</title><rect x="43.0623%" y="149" width="1.4403%" height="15" fill="rgb(236,23,11)"/><text x="43.3123%" y="159.50"></text></g><g><title>typeck (71,360 samples, 0.16%)</title><rect x="44.3450%" y="133" width="0.1576%" height="15" fill="rgb(205,117,38)"/><text x="44.5950%" y="143.50"></text></g><g><title>fn_sig (74,571 samples, 0.16%)</title><rect x="44.7408%" y="133" width="0.1647%" height="15" fill="rgb(237,72,25)"/><text x="44.9908%" y="143.50"></text></g><g><title>named_region_map (60,071 samples, 0.13%)</title><rect x="45.0267%" y="117" width="0.1327%" height="15" fill="rgb(244,70,9)"/><text x="45.2767%" y="127.50"></text></g><g><title>resolve_lifetimes (56,241 samples, 0.12%)</title><rect x="45.0351%" y="101" width="0.1242%" height="15" fill="rgb(217,125,39)"/><text x="45.2851%" y="111.50"></text></g><g><title>generics_of (136,702 samples, 0.30%)</title><rect x="44.9055%" y="133" width="0.3020%" height="15" fill="rgb(235,36,10)"/><text x="45.1555%" y="143.50"></text></g><g><title>explicit_predicates_of (61,610 samples, 0.14%)</title><rect x="45.3301%" y="101" width="0.1361%" height="15" fill="rgb(251,123,47)"/><text x="45.5801%" y="111.50"></text></g><g><title>predicates_of (139,951 samples, 0.31%)</title><rect x="45.2500%" y="133" width="0.3091%" height="15" fill="rgb(221,13,13)"/><text x="45.5000%" y="143.50"></text></g><g><title>predicates_defined_on (126,991 samples, 0.28%)</title><rect x="45.2786%" y="117" width="0.2805%" height="15" fill="rgb(238,131,9)"/><text x="45.5286%" y="127.50"></text></g><g><title>type_collecting (690,228 samples, 1.52%)</title><rect x="44.5062%" y="165" width="1.5247%" height="15" fill="rgb(211,50,8)"/><text x="44.7562%" y="175.50"></text></g><g><title>collect_mod_item_types (681,008 samples, 1.50%)</title><rect x="44.5265%" y="149" width="1.5043%" height="15" fill="rgb(245,182,24)"/><text x="44.7765%" y="159.50"></text></g><g><title>type_of (213,542 samples, 0.47%)</title><rect x="45.5591%" y="133" width="0.4717%" height="15" fill="rgb(242,14,37)"/><text x="45.8091%" y="143.50"></text></g><g><title>type_of (98,741 samples, 0.22%)</title><rect x="45.8127%" y="117" width="0.2181%" height="15" fill="rgb(246,228,12)"/><text x="46.0627%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (55,841 samples, 0.12%)</title><rect x="45.9075%" y="101" width="0.1233%" height="15" fill="rgb(213,55,15)"/><text x="46.1575%" y="111.50"></text></g><g><title>evaluate_obligation (168,452 samples, 0.37%)</title><rect x="46.8829%" y="133" width="0.3721%" height="15" fill="rgb(209,9,3)"/><text x="47.1329%" y="143.50"></text></g><g><title>implied_outlives_bounds (58,401 samples, 0.13%)</title><rect x="47.2550%" y="133" width="0.1290%" height="15" fill="rgb(230,59,30)"/><text x="47.5050%" y="143.50"></text></g><g><title>param_env (48,490 samples, 0.11%)</title><rect x="47.3840%" y="133" width="0.1071%" height="15" fill="rgb(209,121,21)"/><text x="47.6340%" y="143.50"></text></g><g><title>check_impl_item_well_formed (695,258 samples, 1.54%)</title><rect x="46.1305%" y="149" width="1.5358%" height="15" fill="rgb(220,109,13)"/><text x="46.3805%" y="159.50"></text></g><g><title>region_scope_tree (79,312 samples, 0.18%)</title><rect x="47.4911%" y="133" width="0.1752%" height="15" fill="rgb(232,18,1)"/><text x="47.7411%" y="143.50"></text></g><g><title>evaluate_obligation (123,331 samples, 0.27%)</title><rect x="48.3745%" y="133" width="0.2724%" height="15" fill="rgb(215,41,42)"/><text x="48.6245%" y="143.50"></text></g><g><title>param_env (150,582 samples, 0.33%)</title><rect x="48.7471%" y="133" width="0.3326%" height="15" fill="rgb(224,123,36)"/><text x="48.9971%" y="143.50"></text></g><g><title>analysis (21,623,422 samples, 47.76%)</title><rect x="1.4942%" y="197" width="47.7649%" height="15" fill="rgb(240,125,3)"/><text x="1.7442%" y="207.50">analysis</text></g><g><title>type_check_crate (12,040,815 samples, 26.60%)</title><rect x="22.6617%" y="181" width="26.5975%" height="15" fill="rgb(205,98,50)"/><text x="22.9117%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,460,526 samples, 3.23%)</title><rect x="46.0329%" y="165" width="3.2262%" height="15" fill="rgb(205,185,37)"/><text x="46.2829%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (721,098 samples, 1.59%)</title><rect x="47.6663%" y="149" width="1.5929%" height="15" fill="rgb(238,207,15)"/><text x="47.9163%" y="159.50"></text></g><g><title>codegen_crate (375,664 samples, 0.83%)</title><rect x="49.2850%" y="197" width="0.8298%" height="15" fill="rgb(213,199,42)"/><text x="49.5350%" y="207.50"></text></g><g><title>AST_validation (119,281 samples, 0.26%)</title><rect x="50.6061%" y="181" width="0.2635%" height="15" fill="rgb(235,201,11)"/><text x="50.8561%" y="191.50"></text></g><g><title>crate_injection (97,111 samples, 0.21%)</title><rect x="50.9516%" y="181" width="0.2145%" height="15" fill="rgb(207,46,11)"/><text x="51.2016%" y="191.50"></text></g><g><title>metadata_load_macro (68,781 samples, 0.15%)</title><rect x="75.8886%" y="149" width="0.1519%" height="15" fill="rgb(241,35,35)"/><text x="76.1386%" y="159.50"></text></g><g><title>macro_expand_crate (13,421,070 samples, 29.65%)</title><rect x="51.1661%" y="181" width="29.6464%" height="15" fill="rgb(243,32,47)"/><text x="51.4161%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,405,230 samples, 29.61%)</title><rect x="51.2011%" y="165" width="29.6114%" height="15" fill="rgb(247,202,23)"/><text x="51.4511%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,160,295 samples, 4.77%)</title><rect x="76.0406%" y="149" width="4.7720%" height="15" fill="rgb(219,102,11)"/><text x="76.2906%" y="159.50">metada..</text></g><g><title>metadata_register_crate (800,039 samples, 1.77%)</title><rect x="79.0453%" y="133" width="1.7672%" height="15" fill="rgb(243,110,44)"/><text x="79.2953%" y="143.50"></text></g><g><title>metadata_register_crate (68,580 samples, 0.15%)</title><rect x="80.6610%" y="117" width="0.1515%" height="15" fill="rgb(222,74,54)"/><text x="80.9110%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (124,791 samples, 0.28%)</title><rect x="80.8233%" y="181" width="0.2757%" height="15" fill="rgb(216,99,12)"/><text x="81.0733%" y="191.50"></text></g><g><title>finalize_imports (59,981 samples, 0.13%)</title><rect x="81.1183%" y="165" width="0.1325%" height="15" fill="rgb(226,22,26)"/><text x="81.3683%" y="175.50"></text></g><g><title>finalize_macro_resolutions (193,522 samples, 0.43%)</title><rect x="81.2508%" y="165" width="0.4275%" height="15" fill="rgb(217,163,10)"/><text x="81.5008%" y="175.50"></text></g><g><title>late_resolve_crate (988,421 samples, 2.18%)</title><rect x="81.6783%" y="165" width="2.1834%" height="15" fill="rgb(213,25,53)"/><text x="81.9283%" y="175.50">l..</text></g><g><title>configure_and_expand (15,343,171 samples, 33.89%)</title><rect x="50.1149%" y="197" width="33.8922%" height="15" fill="rgb(252,105,26)"/><text x="50.3649%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,316,515 samples, 2.91%)</title><rect x="81.0990%" y="181" width="2.9081%" height="15" fill="rgb(220,39,43)"/><text x="81.3490%" y="191.50">re..</text></g><g><title>drop_ast (82,621 samples, 0.18%)</title><rect x="84.0071%" y="197" width="0.1825%" height="15" fill="rgb(229,68,48)"/><text x="84.2571%" y="207.50"></text></g><g><title>early_lint_checks (172,982 samples, 0.38%)</title><rect x="84.2211%" y="197" width="0.3821%" height="15" fill="rgb(252,8,32)"/><text x="84.4711%" y="207.50"></text></g><g><title>free_global_ctxt (2,716,100 samples, 6.00%)</title><rect x="84.6032%" y="197" width="5.9997%" height="15" fill="rgb(223,20,43)"/><text x="84.8532%" y="207.50">free_glo..</text></g><g><title>crate_hash (67,441 samples, 0.15%)</title><rect x="91.2448%" y="181" width="0.1490%" height="15" fill="rgb(229,81,49)"/><text x="91.4948%" y="191.50"></text></g><g><title>generate_crate_metadata (418,345 samples, 0.92%)</title><rect x="90.6029%" y="197" width="0.9241%" height="15" fill="rgb(236,28,36)"/><text x="90.8529%" y="207.50"></text></g><g><title>hir_lowering (1,040,191 samples, 2.30%)</title><rect x="91.5270%" y="197" width="2.2977%" height="15" fill="rgb(249,185,26)"/><text x="91.7770%" y="207.50">h..</text></g><g><title>parse_crate (1,552,097 samples, 3.43%)</title><rect x="93.9161%" y="197" width="3.4285%" height="15" fill="rgb(249,174,33)"/><text x="94.1661%" y="207.50">par..</text></g><g><title>prepare_outputs (330,004 samples, 0.73%)</title><rect x="97.3655%" y="197" width="0.7290%" height="15" fill="rgb(233,201,37)"/><text x="97.6155%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (417,225 samples, 0.92%)</title><rect x="98.0944%" y="197" width="0.9216%" height="15" fill="rgb(221,78,26)"/><text x="98.3444%" y="207.50"></text></g><g><title>setup_global_ctxt (131,682 samples, 0.29%)</title><rect x="99.0410%" y="197" width="0.2909%" height="15" fill="rgb(250,127,30)"/><text x="99.2910%" y="207.50"></text></g><g><title>all (45,270,505 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (45,270,505 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (302,453 samples, 0.67%)</title><rect x="99.3319%" y="197" width="0.6681%" height="15" fill="rgb(249,83,47)"/><text x="99.5819%" y="207.50"></text></g></svg></svg>