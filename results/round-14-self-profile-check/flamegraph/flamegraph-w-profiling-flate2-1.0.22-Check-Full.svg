<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (431,761 samples, 0.10%)</title><rect x="14.6842%" y="229" width="0.1028%" height="15" fill="rgb(227,0,7)"/><text x="14.9342%" y="239.50"></text></g><g><title>param_env (641,985 samples, 0.15%)</title><rect x="16.8002%" y="197" width="0.1529%" height="15" fill="rgb(217,0,24)"/><text x="17.0502%" y="207.50"></text></g><g><title>item_attrs (528,315 samples, 0.13%)</title><rect x="17.5744%" y="165" width="0.1258%" height="15" fill="rgb(221,193,54)"/><text x="17.8244%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (508,523 samples, 0.12%)</title><rect x="17.5791%" y="149" width="0.1211%" height="15" fill="rgb(248,212,6)"/><text x="17.8291%" y="159.50"></text></g><g><title>codegen_fn_attrs (766,680 samples, 0.18%)</title><rect x="17.5271%" y="181" width="0.1826%" height="15" fill="rgb(208,68,35)"/><text x="17.7771%" y="191.50"></text></g><g><title>needs_drop_raw (3,539,296 samples, 0.84%)</title><rect x="21.1605%" y="165" width="0.8427%" height="15" fill="rgb(232,128,0)"/><text x="21.4105%" y="175.50"></text></g><g><title>is_copy_raw (2,678,712 samples, 0.64%)</title><rect x="21.3654%" y="149" width="0.6378%" height="15" fill="rgb(207,160,47)"/><text x="21.6154%" y="159.50"></text></g><g><title>evaluate_obligation (2,183,890 samples, 0.52%)</title><rect x="21.4832%" y="133" width="0.5200%" height="15" fill="rgb(228,23,34)"/><text x="21.7332%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (720,150 samples, 0.17%)</title><rect x="22.2220%" y="149" width="0.1715%" height="15" fill="rgb(218,30,26)"/><text x="22.4720%" y="159.50"></text></g><g><title>specialization_graph_of (1,694,398 samples, 0.40%)</title><rect x="22.4253%" y="149" width="0.4035%" height="15" fill="rgb(220,122,19)"/><text x="22.6753%" y="159.50"></text></g><g><title>impl_trait_ref (1,135,062 samples, 0.27%)</title><rect x="22.5585%" y="133" width="0.2703%" height="15" fill="rgb(250,228,42)"/><text x="22.8085%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,067,802 samples, 0.25%)</title><rect x="22.5745%" y="117" width="0.2543%" height="15" fill="rgb(240,193,28)"/><text x="22.8245%" y="127.50"></text></g><g><title>resolve_instance (3,595,580 samples, 0.86%)</title><rect x="22.0208%" y="165" width="0.8561%" height="15" fill="rgb(216,20,37)"/><text x="22.2708%" y="175.50"></text></g><g><title>thir_body (5,363,328 samples, 1.28%)</title><rect x="22.9136%" y="165" width="1.2771%" height="15" fill="rgb(206,188,39)"/><text x="23.1636%" y="175.50"></text></g><g><title>mir_const (35,450,700 samples, 8.44%)</title><rect x="15.7749%" y="213" width="8.4411%" height="15" fill="rgb(217,207,13)"/><text x="16.0249%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (30,502,636 samples, 7.26%)</title><rect x="16.9530%" y="197" width="7.2630%" height="15" fill="rgb(231,73,38)"/><text x="17.2030%" y="207.50">unsafety_c..</text></g><g><title>mir_built (27,325,026 samples, 6.51%)</title><rect x="17.7097%" y="181" width="6.5063%" height="15" fill="rgb(225,20,46)"/><text x="17.9597%" y="191.50">mir_built</text></g><g><title>mir_promoted (40,262,350 samples, 9.59%)</title><rect x="14.7949%" y="229" width="9.5868%" height="15" fill="rgb(210,31,41)"/><text x="15.0449%" y="239.50">mir_promoted</text></g><g><title>mir_const_qualif (696,177 samples, 0.17%)</title><rect x="24.2160%" y="213" width="0.1658%" height="15" fill="rgb(221,200,47)"/><text x="24.4660%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (2,078,887 samples, 0.50%)</title><rect x="24.3821%" y="229" width="0.4950%" height="15" fill="rgb(226,26,5)"/><text x="24.6321%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (1,299,047 samples, 0.31%)</title><rect x="24.8771%" y="229" width="0.3093%" height="15" fill="rgb(249,33,26)"/><text x="25.1271%" y="239.50"></text></g><g><title>normalize_projection_ty (927,442 samples, 0.22%)</title><rect x="24.9656%" y="213" width="0.2208%" height="15" fill="rgb(235,183,28)"/><text x="25.2156%" y="223.50"></text></g><g><title>type_op_normalize_predicate (455,296 samples, 0.11%)</title><rect x="25.1864%" y="229" width="0.1084%" height="15" fill="rgb(221,5,38)"/><text x="25.4364%" y="239.50"></text></g><g><title>type_op_prove_predicate (8,599,203 samples, 2.05%)</title><rect x="25.3024%" y="229" width="2.0476%" height="15" fill="rgb(247,18,42)"/><text x="25.5524%" y="239.50">t..</text></g><g><title>MIR_borrow_checking (112,852,238 samples, 26.87%)</title><rect x="0.4823%" y="261" width="26.8712%" height="15" fill="rgb(241,131,45)"/><text x="0.7323%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (112,053,206 samples, 26.68%)</title><rect x="0.6725%" y="245" width="26.6809%" height="15" fill="rgb(249,31,29)"/><text x="0.9225%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (473,335 samples, 0.11%)</title><rect x="27.3535%" y="261" width="0.1127%" height="15" fill="rgb(225,111,53)"/><text x="27.6035%" y="271.50"></text></g><g><title>hir_module_items (887,579 samples, 0.21%)</title><rect x="27.4662%" y="261" width="0.2113%" height="15" fill="rgb(238,160,17)"/><text x="27.7162%" y="271.50"></text></g><g><title>should_inherit_track_caller (680,184 samples, 0.16%)</title><rect x="28.0450%" y="213" width="0.1620%" height="15" fill="rgb(214,148,48)"/><text x="28.2950%" y="223.50"></text></g><g><title>codegen_fn_attrs (1,211,799 samples, 0.29%)</title><rect x="27.9230%" y="229" width="0.2885%" height="15" fill="rgb(232,36,49)"/><text x="28.1730%" y="239.50"></text></g><g><title>check_mod_attrs (2,187,823 samples, 0.52%)</title><rect x="27.6906%" y="245" width="0.5209%" height="15" fill="rgb(209,103,24)"/><text x="27.9406%" y="255.50"></text></g><g><title>check_mod_const_bodies (590,575 samples, 0.14%)</title><rect x="28.2115%" y="245" width="0.1406%" height="15" fill="rgb(229,88,8)"/><text x="28.4615%" y="255.50"></text></g><g><title>lookup_deprecation_entry (467,746 samples, 0.11%)</title><rect x="28.5527%" y="229" width="0.1114%" height="15" fill="rgb(213,181,19)"/><text x="28.8027%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (1,116,860 samples, 0.27%)</title><rect x="28.4315%" y="245" width="0.2659%" height="15" fill="rgb(254,191,54)"/><text x="28.6815%" y="255.50"></text></g><g><title>misc_checking_1 (4,461,439 samples, 1.06%)</title><rect x="27.6777%" y="261" width="1.0623%" height="15" fill="rgb(241,83,37)"/><text x="27.9277%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (2,016,232 samples, 0.48%)</title><rect x="28.7404%" y="245" width="0.4801%" height="15" fill="rgb(233,36,39)"/><text x="28.9904%" y="255.50"></text></g><g><title>check_mod_liveness (1,610,438 samples, 0.38%)</title><rect x="28.8371%" y="229" width="0.3835%" height="15" fill="rgb(226,3,54)"/><text x="29.0871%" y="239.50"></text></g><g><title>misc_checking_2 (4,497,410 samples, 1.07%)</title><rect x="28.7400%" y="261" width="1.0709%" height="15" fill="rgb(245,192,40)"/><text x="28.9900%" y="271.50"></text></g><g><title>match_checking (2,479,358 samples, 0.59%)</title><rect x="29.2205%" y="245" width="0.5904%" height="15" fill="rgb(238,167,29)"/><text x="29.4705%" y="255.50"></text></g><g><title>check_match (2,302,625 samples, 0.55%)</title><rect x="29.2626%" y="229" width="0.5483%" height="15" fill="rgb(232,182,51)"/><text x="29.5126%" y="239.50"></text></g><g><title>check_private_in_public (1,014,211 samples, 0.24%)</title><rect x="29.8137%" y="245" width="0.2415%" height="15" fill="rgb(231,60,39)"/><text x="30.0637%" y="255.50"></text></g><g><title>death_checking (2,163,085 samples, 0.52%)</title><rect x="30.0552%" y="245" width="0.5151%" height="15" fill="rgb(208,69,12)"/><text x="30.3052%" y="255.50"></text></g><g><title>param_env (1,130,405 samples, 0.27%)</title><rect x="31.1095%" y="213" width="0.2692%" height="15" fill="rgb(235,93,37)"/><text x="31.3595%" y="223.50"></text></g><g><title>predicates_of (576,726 samples, 0.14%)</title><rect x="31.2413%" y="197" width="0.1373%" height="15" fill="rgb(213,116,39)"/><text x="31.4913%" y="207.50"></text></g><g><title>predicates_defined_on (447,205 samples, 0.11%)</title><rect x="31.2722%" y="181" width="0.1065%" height="15" fill="rgb(222,207,29)"/><text x="31.5222%" y="191.50"></text></g><g><title>crate_lints (4,619,632 samples, 1.10%)</title><rect x="30.5708%" y="229" width="1.1000%" height="15" fill="rgb(206,96,30)"/><text x="30.8208%" y="239.50"></text></g><g><title>type_of (1,150,089 samples, 0.27%)</title><rect x="31.3969%" y="213" width="0.2738%" height="15" fill="rgb(218,138,4)"/><text x="31.6469%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (919,287 samples, 0.22%)</title><rect x="31.4519%" y="197" width="0.2189%" height="15" fill="rgb(250,191,14)"/><text x="31.7019%" y="207.50"></text></g><g><title>lint_checking (6,895,787 samples, 1.64%)</title><rect x="30.5703%" y="245" width="1.6420%" height="15" fill="rgb(239,60,40)"/><text x="30.8203%" y="255.50"></text></g><g><title>module_lints (2,273,775 samples, 0.54%)</title><rect x="31.6708%" y="229" width="0.5414%" height="15" fill="rgb(206,27,48)"/><text x="31.9208%" y="239.50"></text></g><g><title>lint_mod (2,254,855 samples, 0.54%)</title><rect x="31.6753%" y="213" width="0.5369%" height="15" fill="rgb(225,35,8)"/><text x="31.9253%" y="223.50"></text></g><g><title>privacy_access_levels (1,317,475 samples, 0.31%)</title><rect x="32.2122%" y="245" width="0.3137%" height="15" fill="rgb(250,213,24)"/><text x="32.4622%" y="255.50"></text></g><g><title>privacy_checking_modules (3,837,693 samples, 0.91%)</title><rect x="32.5259%" y="245" width="0.9138%" height="15" fill="rgb(247,123,22)"/><text x="32.7759%" y="255.50"></text></g><g><title>check_mod_privacy (3,823,703 samples, 0.91%)</title><rect x="32.5292%" y="229" width="0.9105%" height="15" fill="rgb(231,138,38)"/><text x="32.7792%" y="239.50"></text></g><g><title>misc_checking_3 (15,280,951 samples, 3.64%)</title><rect x="29.8109%" y="261" width="3.6385%" height="15" fill="rgb(231,145,46)"/><text x="30.0609%" y="271.50">misc..</text></g><g><title>impl_parent (2,780,148 samples, 0.66%)</title><rect x="34.5237%" y="197" width="0.6620%" height="15" fill="rgb(251,118,11)"/><text x="34.7737%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,501,205 samples, 0.36%)</title><rect x="34.8283%" y="181" width="0.3575%" height="15" fill="rgb(217,147,25)"/><text x="35.0783%" y="191.50"></text></g><g><title>impl_trait_ref (5,767,956 samples, 1.37%)</title><rect x="35.1857%" y="197" width="1.3734%" height="15" fill="rgb(247,81,37)"/><text x="35.4357%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,537,711 samples, 1.08%)</title><rect x="35.4786%" y="181" width="1.0805%" height="15" fill="rgb(209,12,38)"/><text x="35.7286%" y="191.50"></text></g><g><title>trait_impls_of (920,221 samples, 0.22%)</title><rect x="36.5666%" y="197" width="0.2191%" height="15" fill="rgb(227,1,9)"/><text x="36.8166%" y="207.50"></text></g><g><title>coherent_trait (13,651,022 samples, 3.25%)</title><rect x="33.5354%" y="229" width="3.2504%" height="15" fill="rgb(248,47,43)"/><text x="33.7854%" y="239.50">coh..</text></g><g><title>specialization_graph_of (13,492,931 samples, 3.21%)</title><rect x="33.5731%" y="213" width="3.2128%" height="15" fill="rgb(221,10,30)"/><text x="33.8231%" y="223.50">spe..</text></g><g><title>coherence_checking (13,923,216 samples, 3.32%)</title><rect x="33.5293%" y="245" width="3.3152%" height="15" fill="rgb(210,229,1)"/><text x="33.7793%" y="255.50">coh..</text></g><g><title>associated_item (862,385 samples, 0.21%)</title><rect x="61.8005%" y="181" width="0.2053%" height="15" fill="rgb(222,148,37)"/><text x="62.0505%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (700,103 samples, 0.17%)</title><rect x="61.8392%" y="165" width="0.1667%" height="15" fill="rgb(234,67,33)"/><text x="62.0892%" y="175.50"></text></g><g><title>associated_items (1,448,253 samples, 0.34%)</title><rect x="61.6762%" y="197" width="0.3448%" height="15" fill="rgb(247,98,35)"/><text x="61.9262%" y="207.50"></text></g><g><title>adt_dtorck_constraint (685,629 samples, 0.16%)</title><rect x="62.2821%" y="181" width="0.1633%" height="15" fill="rgb(247,138,52)"/><text x="62.5321%" y="191.50"></text></g><g><title>dropck_outlives (1,616,629 samples, 0.38%)</title><rect x="62.0633%" y="197" width="0.3849%" height="15" fill="rgb(213,79,30)"/><text x="62.3133%" y="207.50"></text></g><g><title>generics_of (459,887 samples, 0.11%)</title><rect x="64.2953%" y="181" width="0.1095%" height="15" fill="rgb(246,177,23)"/><text x="64.5453%" y="191.50"></text></g><g><title>impl_trait_ref (445,082 samples, 0.11%)</title><rect x="64.4496%" y="181" width="0.1060%" height="15" fill="rgb(230,62,27)"/><text x="64.6996%" y="191.50"></text></g><g><title>predicates_of (599,318 samples, 0.14%)</title><rect x="64.5644%" y="181" width="0.1427%" height="15" fill="rgb(216,154,8)"/><text x="64.8144%" y="191.50"></text></g><g><title>specializes (907,279 samples, 0.22%)</title><rect x="64.7071%" y="181" width="0.2160%" height="15" fill="rgb(244,35,45)"/><text x="64.9571%" y="191.50"></text></g><g><title>param_env (513,626 samples, 0.12%)</title><rect x="64.8008%" y="165" width="0.1223%" height="15" fill="rgb(251,115,12)"/><text x="65.0508%" y="175.50"></text></g><g><title>trait_impls_of (732,198 samples, 0.17%)</title><rect x="64.9284%" y="181" width="0.1743%" height="15" fill="rgb(240,54,50)"/><text x="65.1784%" y="191.50"></text></g><g><title>evaluate_obligation (11,166,418 samples, 2.66%)</title><rect x="62.4482%" y="197" width="2.6588%" height="15" fill="rgb(233,84,52)"/><text x="62.6982%" y="207.50">ev..</text></g><g><title>generics_of (1,304,023 samples, 0.31%)</title><rect x="65.1934%" y="197" width="0.3105%" height="15" fill="rgb(207,117,47)"/><text x="65.4434%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (1,016,390 samples, 0.24%)</title><rect x="65.2619%" y="181" width="0.2420%" height="15" fill="rgb(249,43,39)"/><text x="65.5119%" y="191.50"></text></g><g><title>evaluate_obligation (832,096 samples, 0.20%)</title><rect x="65.9048%" y="181" width="0.1981%" height="15" fill="rgb(209,38,44)"/><text x="66.1548%" y="191.50"></text></g><g><title>method_autoderef_steps (1,674,289 samples, 0.40%)</title><rect x="65.7068%" y="197" width="0.3987%" height="15" fill="rgb(236,212,23)"/><text x="65.9568%" y="207.50"></text></g><g><title>predicates_of (958,044 samples, 0.23%)</title><rect x="66.2258%" y="197" width="0.2281%" height="15" fill="rgb(242,79,21)"/><text x="66.4758%" y="207.50"></text></g><g><title>predicates_defined_on (505,325 samples, 0.12%)</title><rect x="66.3336%" y="181" width="0.1203%" height="15" fill="rgb(211,96,35)"/><text x="66.5836%" y="191.50"></text></g><g><title>evaluate_obligation (1,924,571 samples, 0.46%)</title><rect x="68.6558%" y="181" width="0.4583%" height="15" fill="rgb(253,215,40)"/><text x="68.9058%" y="191.50"></text></g><g><title>typeck (11,656,621 samples, 2.78%)</title><rect x="66.5180%" y="197" width="2.7756%" height="15" fill="rgb(211,81,21)"/><text x="66.7680%" y="207.50">ty..</text></g><g><title>item_bodies_checking (136,338,470 samples, 32.46%)</title><rect x="36.8818%" y="245" width="32.4635%" height="15" fill="rgb(208,190,38)"/><text x="37.1318%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (136,334,550 samples, 32.46%)</title><rect x="36.8827%" y="229" width="32.4625%" height="15" fill="rgb(235,213,38)"/><text x="37.1327%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (135,809,537 samples, 32.34%)</title><rect x="37.0078%" y="213" width="32.3375%" height="15" fill="rgb(237,122,38)"/><text x="37.2578%" y="223.50">typeck</text></g><g><title>generics_of (471,075 samples, 0.11%)</title><rect x="71.0187%" y="181" width="0.1122%" height="15" fill="rgb(244,218,35)"/><text x="71.2687%" y="191.50"></text></g><g><title>impl_trait_ref (740,759 samples, 0.18%)</title><rect x="71.1588%" y="181" width="0.1764%" height="15" fill="rgb(240,68,47)"/><text x="71.4088%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (604,397 samples, 0.14%)</title><rect x="71.1912%" y="165" width="0.1439%" height="15" fill="rgb(210,16,53)"/><text x="71.4412%" y="175.50"></text></g><g><title>predicates_of (656,944 samples, 0.16%)</title><rect x="71.3430%" y="181" width="0.1564%" height="15" fill="rgb(235,124,12)"/><text x="71.5930%" y="191.50"></text></g><g><title>specializes (1,934,135 samples, 0.46%)</title><rect x="71.4994%" y="181" width="0.4605%" height="15" fill="rgb(224,169,11)"/><text x="71.7494%" y="191.50"></text></g><g><title>param_env (1,124,925 samples, 0.27%)</title><rect x="71.6921%" y="165" width="0.2679%" height="15" fill="rgb(250,166,2)"/><text x="71.9421%" y="175.50"></text></g><g><title>def_span (515,177 samples, 0.12%)</title><rect x="71.8373%" y="149" width="0.1227%" height="15" fill="rgb(242,216,29)"/><text x="72.0873%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (457,007 samples, 0.11%)</title><rect x="71.8511%" y="133" width="0.1088%" height="15" fill="rgb(230,116,27)"/><text x="72.1011%" y="143.50"></text></g><g><title>evaluate_obligation (5,997,557 samples, 1.43%)</title><rect x="70.5510%" y="197" width="1.4281%" height="15" fill="rgb(228,99,48)"/><text x="70.8010%" y="207.50"></text></g><g><title>item_types_checking (11,295,625 samples, 2.69%)</title><rect x="69.3453%" y="245" width="2.6896%" height="15" fill="rgb(253,11,6)"/><text x="69.5953%" y="255.50">it..</text></g><g><title>check_mod_item_types (11,276,755 samples, 2.69%)</title><rect x="69.3498%" y="229" width="2.6851%" height="15" fill="rgb(247,143,39)"/><text x="69.5998%" y="239.50">ch..</text></g><g><title>typeck (7,314,741 samples, 1.74%)</title><rect x="70.2932%" y="213" width="1.7417%" height="15" fill="rgb(236,97,10)"/><text x="70.5432%" y="223.50"></text></g><g><title>mir_borrowck (756,806 samples, 0.18%)</title><rect x="72.5880%" y="133" width="0.1802%" height="15" fill="rgb(233,208,19)"/><text x="72.8380%" y="143.50"></text></g><g><title>mir_for_ctfe (1,070,251 samples, 0.25%)</title><rect x="72.5141%" y="165" width="0.2548%" height="15" fill="rgb(216,164,2)"/><text x="72.7641%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (992,159 samples, 0.24%)</title><rect x="72.5327%" y="149" width="0.2362%" height="15" fill="rgb(220,129,5)"/><text x="72.7827%" y="159.50"></text></g><g><title>mir_borrowck (426,704 samples, 0.10%)</title><rect x="72.8873%" y="69" width="0.1016%" height="15" fill="rgb(242,17,10)"/><text x="73.1373%" y="79.50"></text></g><g><title>mir_for_ctfe (610,626 samples, 0.15%)</title><rect x="72.8440%" y="101" width="0.1454%" height="15" fill="rgb(242,107,0)"/><text x="73.0940%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (564,656 samples, 0.13%)</title><rect x="72.8549%" y="85" width="0.1344%" height="15" fill="rgb(251,28,31)"/><text x="73.1049%" y="95.50"></text></g><g><title>coherent_trait (598,116 samples, 0.14%)</title><rect x="73.0808%" y="53" width="0.1424%" height="15" fill="rgb(233,223,10)"/><text x="73.3308%" y="63.50"></text></g><g><title>specialization_graph_of (592,826 samples, 0.14%)</title><rect x="73.0821%" y="37" width="0.1412%" height="15" fill="rgb(215,21,27)"/><text x="73.3321%" y="47.50"></text></g><g><title>adt_destructor (604,896 samples, 0.14%)</title><rect x="73.0794%" y="85" width="0.1440%" height="15" fill="rgb(232,23,21)"/><text x="73.3294%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (603,916 samples, 0.14%)</title><rect x="73.0796%" y="69" width="0.1438%" height="15" fill="rgb(244,5,23)"/><text x="73.3296%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,003,781 samples, 0.48%)</title><rect x="72.7752%" y="149" width="0.4771%" height="15" fill="rgb(226,81,46)"/><text x="73.0252%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,999,601 samples, 0.48%)</title><rect x="72.7762%" y="133" width="0.4761%" height="15" fill="rgb(247,70,30)"/><text x="73.0262%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,993,021 samples, 0.47%)</title><rect x="72.7777%" y="117" width="0.4746%" height="15" fill="rgb(212,68,19)"/><text x="73.0277%" y="127.50"></text></g><g><title>typeck (932,719 samples, 0.22%)</title><rect x="73.0302%" y="101" width="0.2221%" height="15" fill="rgb(240,187,13)"/><text x="73.2802%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,041,833 samples, 0.49%)</title><rect x="72.7693%" y="165" width="0.4862%" height="15" fill="rgb(223,113,26)"/><text x="73.0193%" y="175.50"></text></g><g><title>eval_to_const_value_raw (4,391,417 samples, 1.05%)</title><rect x="72.3538%" y="213" width="1.0456%" height="15" fill="rgb(206,192,2)"/><text x="72.6038%" y="223.50"></text></g><g><title>eval_to_const_value_raw (4,373,377 samples, 1.04%)</title><rect x="72.3581%" y="197" width="1.0413%" height="15" fill="rgb(241,108,4)"/><text x="72.6081%" y="207.50"></text></g><g><title>eval_to_allocation_raw (4,362,617 samples, 1.04%)</title><rect x="72.3607%" y="181" width="1.0388%" height="15" fill="rgb(247,173,49)"/><text x="72.6107%" y="191.50"></text></g><g><title>typeck (604,564 samples, 0.14%)</title><rect x="73.2555%" y="165" width="0.1440%" height="15" fill="rgb(224,114,35)"/><text x="73.5055%" y="175.50"></text></g><g><title>fn_sig (1,365,733 samples, 0.33%)</title><rect x="73.3995%" y="213" width="0.3252%" height="15" fill="rgb(245,159,27)"/><text x="73.6495%" y="223.50"></text></g><g><title>named_region_map (1,462,842 samples, 0.35%)</title><rect x="73.9342%" y="197" width="0.3483%" height="15" fill="rgb(245,172,44)"/><text x="74.1842%" y="207.50"></text></g><g><title>resolve_lifetimes (1,373,011 samples, 0.33%)</title><rect x="73.9556%" y="181" width="0.3269%" height="15" fill="rgb(236,23,11)"/><text x="74.2056%" y="191.50"></text></g><g><title>lint_levels (688,758 samples, 0.16%)</title><rect x="74.1186%" y="165" width="0.1640%" height="15" fill="rgb(205,117,38)"/><text x="74.3686%" y="175.50"></text></g><g><title>generics_of (2,399,311 samples, 0.57%)</title><rect x="73.7247%" y="213" width="0.5713%" height="15" fill="rgb(237,72,25)"/><text x="73.9747%" y="223.50"></text></g><g><title>late_bound_vars_map (1,094,082 samples, 0.26%)</title><rect x="74.7106%" y="165" width="0.2605%" height="15" fill="rgb(244,70,9)"/><text x="74.9606%" y="175.50"></text></g><g><title>resolve_lifetimes (1,029,632 samples, 0.25%)</title><rect x="74.7259%" y="149" width="0.2452%" height="15" fill="rgb(217,125,39)"/><text x="74.9759%" y="159.50"></text></g><g><title>explicit_predicates_of (1,830,615 samples, 0.44%)</title><rect x="74.5478%" y="181" width="0.4359%" height="15" fill="rgb(235,36,10)"/><text x="74.7978%" y="191.50"></text></g><g><title>predicates_of (3,289,316 samples, 0.78%)</title><rect x="74.3822%" y="213" width="0.7832%" height="15" fill="rgb(251,123,47)"/><text x="74.6322%" y="223.50"></text></g><g><title>predicates_defined_on (3,024,390 samples, 0.72%)</title><rect x="74.4453%" y="197" width="0.7201%" height="15" fill="rgb(221,13,13)"/><text x="74.6953%" y="207.50"></text></g><g><title>inferred_outlives_of (763,277 samples, 0.18%)</title><rect x="74.9837%" y="181" width="0.1817%" height="15" fill="rgb(238,131,9)"/><text x="75.2337%" y="191.50"></text></g><g><title>inferred_outlives_crate (655,957 samples, 0.16%)</title><rect x="75.0093%" y="165" width="0.1562%" height="15" fill="rgb(211,50,8)"/><text x="75.2593%" y="175.50"></text></g><g><title>type_collecting (13,547,602 samples, 3.23%)</title><rect x="72.0370%" y="245" width="3.2258%" height="15" fill="rgb(245,182,24)"/><text x="72.2870%" y="255.50">typ..</text></g><g><title>collect_mod_item_types (13,520,522 samples, 3.22%)</title><rect x="72.0434%" y="229" width="3.2194%" height="15" fill="rgb(242,14,37)"/><text x="72.2934%" y="239.50">col..</text></g><g><title>evaluate_obligation (2,779,058 samples, 0.66%)</title><rect x="78.2538%" y="213" width="0.6617%" height="15" fill="rgb(246,228,12)"/><text x="78.5038%" y="223.50"></text></g><g><title>implied_outlives_bounds (1,090,841 samples, 0.26%)</title><rect x="78.9165%" y="213" width="0.2597%" height="15" fill="rgb(213,55,15)"/><text x="79.1665%" y="223.50"></text></g><g><title>param_env (1,873,637 samples, 0.45%)</title><rect x="79.1763%" y="213" width="0.4461%" height="15" fill="rgb(209,9,3)"/><text x="79.4263%" y="223.50"></text></g><g><title>region_scope_tree (1,922,408 samples, 0.46%)</title><rect x="79.6283%" y="213" width="0.4577%" height="15" fill="rgb(230,59,30)"/><text x="79.8783%" y="223.50"></text></g><g><title>check_impl_item_well_formed (19,174,457 samples, 4.57%)</title><rect x="75.5241%" y="229" width="4.5656%" height="15" fill="rgb(209,121,21)"/><text x="75.7741%" y="239.50">check..</text></g><g><title>eval_to_const_value_raw (737,979 samples, 0.18%)</title><rect x="81.8119%" y="197" width="0.1757%" height="15" fill="rgb(220,109,13)"/><text x="82.0619%" y="207.50"></text></g><g><title>eval_to_const_value_raw (727,939 samples, 0.17%)</title><rect x="81.8143%" y="181" width="0.1733%" height="15" fill="rgb(232,18,1)"/><text x="82.0643%" y="191.50"></text></g><g><title>eval_to_allocation_raw (712,208 samples, 0.17%)</title><rect x="81.8180%" y="165" width="0.1696%" height="15" fill="rgb(215,41,42)"/><text x="82.0680%" y="175.50"></text></g><g><title>evaluate_obligation (2,158,201 samples, 0.51%)</title><rect x="81.5096%" y="213" width="0.5139%" height="15" fill="rgb(224,123,36)"/><text x="81.7596%" y="223.50"></text></g><g><title>implied_outlives_bounds (447,492 samples, 0.11%)</title><rect x="82.0452%" y="213" width="0.1066%" height="15" fill="rgb(240,125,3)"/><text x="82.2952%" y="223.50"></text></g><g><title>param_env (1,315,895 samples, 0.31%)</title><rect x="82.1518%" y="213" width="0.3133%" height="15" fill="rgb(205,98,50)"/><text x="82.4018%" y="223.50"></text></g><g><title>check_item_well_formed (10,800,102 samples, 2.57%)</title><rect x="80.0898%" y="229" width="2.5716%" height="15" fill="rgb(205,185,37)"/><text x="80.3398%" y="239.50">ch..</text></g><g><title>analysis (347,027,918 samples, 82.63%)</title><rect x="0.2235%" y="277" width="82.6306%" height="15" fill="rgb(238,207,15)"/><text x="0.4735%" y="287.50">analysis</text></g><g><title>type_check_crate (207,487,323 samples, 49.40%)</title><rect x="33.4494%" y="261" width="49.4047%" height="15" fill="rgb(213,199,42)"/><text x="33.6994%" y="271.50">type_check_crate</text></g><g><title>wf_checking (31,849,105 samples, 7.58%)</title><rect x="75.2705%" y="245" width="7.5836%" height="15" fill="rgb(235,201,11)"/><text x="75.5205%" y="255.50">wf_checking</text></g><g><title>check_trait_item_well_formed (809,460 samples, 0.19%)</title><rect x="82.6614%" y="229" width="0.1927%" height="15" fill="rgb(207,46,11)"/><text x="82.9114%" y="239.50"></text></g><g><title>metadata_register_crate (1,364,144 samples, 0.32%)</title><rect x="90.5920%" y="229" width="0.3248%" height="15" fill="rgb(241,35,35)"/><text x="90.8420%" y="239.50"></text></g><g><title>metadata_register_crate (468,816 samples, 0.11%)</title><rect x="90.8052%" y="213" width="0.1116%" height="15" fill="rgb(243,32,47)"/><text x="91.0552%" y="223.50"></text></g><g><title>macro_expand_crate (33,515,054 samples, 7.98%)</title><rect x="83.1505%" y="261" width="7.9802%" height="15" fill="rgb(247,202,23)"/><text x="83.4005%" y="271.50">macro_expan..</text></g><g><title>expand_crate (33,505,004 samples, 7.98%)</title><rect x="83.1529%" y="245" width="7.9779%" height="15" fill="rgb(219,102,11)"/><text x="83.4029%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (898,248 samples, 0.21%)</title><rect x="90.9169%" y="229" width="0.2139%" height="15" fill="rgb(243,110,44)"/><text x="91.1669%" y="239.50"></text></g><g><title>late_resolve_crate (6,581,344 samples, 1.57%)</title><rect x="91.2712%" y="245" width="1.5671%" height="15" fill="rgb(222,74,54)"/><text x="91.5212%" y="255.50"></text></g><g><title>configure_and_expand (42,039,550 samples, 10.01%)</title><rect x="82.9524%" y="277" width="10.0100%" height="15" fill="rgb(216,99,12)"/><text x="83.2024%" y="287.50">configure_and_..</text></g><g><title>resolve_crate (7,604,715 samples, 1.81%)</title><rect x="91.1517%" y="261" width="1.8108%" height="15" fill="rgb(226,22,26)"/><text x="91.4017%" y="271.50">r..</text></g><g><title>drop_ast (845,729 samples, 0.20%)</title><rect x="92.9625%" y="277" width="0.2014%" height="15" fill="rgb(217,163,10)"/><text x="93.2125%" y="287.50"></text></g><g><title>early_lint_checks (1,549,557 samples, 0.37%)</title><rect x="93.1684%" y="277" width="0.3690%" height="15" fill="rgb(213,25,53)"/><text x="93.4184%" y="287.50"></text></g><g><title>free_global_ctxt (6,237,270 samples, 1.49%)</title><rect x="93.5373%" y="277" width="1.4852%" height="15" fill="rgb(252,105,26)"/><text x="93.7873%" y="287.50"></text></g><g><title>generate_crate_metadata (4,453,059 samples, 1.06%)</title><rect x="95.0225%" y="277" width="1.0603%" height="15" fill="rgb(220,39,43)"/><text x="95.2725%" y="287.50"></text></g><g><title>hir_lowering (13,003,135 samples, 3.10%)</title><rect x="96.0828%" y="277" width="3.0962%" height="15" fill="rgb(229,68,48)"/><text x="96.3328%" y="287.50">hir..</text></g><g><title>parse_crate (650,737 samples, 0.15%)</title><rect x="99.1946%" y="277" width="0.1549%" height="15" fill="rgb(252,8,32)"/><text x="99.4446%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (1,874,051 samples, 0.45%)</title><rect x="99.4042%" y="277" width="0.4462%" height="15" fill="rgb(223,20,43)"/><text x="99.6542%" y="287.50"></text></g><g><title>all (419,974,992 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (419,974,992 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (530,996 samples, 0.13%)</title><rect x="99.8736%" y="277" width="0.1264%" height="15" fill="rgb(249,185,26)"/><text x="100.1236%" y="287.50"></text></g></svg></svg>