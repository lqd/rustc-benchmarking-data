<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (336,376 samples, 0.27%)</title><rect x="10.2623%" y="181" width="0.2727%" height="15" fill="rgb(227,0,7)"/><text x="10.5123%" y="191.50"></text></g><g><title>item_attrs (365,655 samples, 0.30%)</title><rect x="10.9455%" y="149" width="0.2964%" height="15" fill="rgb(217,0,24)"/><text x="11.1955%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (354,145 samples, 0.29%)</title><rect x="10.9548%" y="133" width="0.2871%" height="15" fill="rgb(221,193,54)"/><text x="11.2048%" y="143.50"></text></g><g><title>codegen_fn_attrs (498,216 samples, 0.40%)</title><rect x="10.8576%" y="165" width="0.4038%" height="15" fill="rgb(248,212,6)"/><text x="11.1076%" y="175.50"></text></g><g><title>adt_drop_tys (202,753 samples, 0.16%)</title><rect x="13.5986%" y="117" width="0.1643%" height="15" fill="rgb(208,68,35)"/><text x="13.8486%" y="127.50"></text></g><g><title>adt_drop_tys (483,657 samples, 0.39%)</title><rect x="13.5644%" y="133" width="0.3920%" height="15" fill="rgb(232,128,0)"/><text x="13.8144%" y="143.50"></text></g><g><title>param_env (147,451 samples, 0.12%)</title><rect x="13.8370%" y="117" width="0.1195%" height="15" fill="rgb(207,160,47)"/><text x="14.0870%" y="127.50"></text></g><g><title>needs_drop_raw (1,622,537 samples, 1.32%)</title><rect x="13.4449%" y="149" width="1.3152%" height="15" fill="rgb(228,23,34)"/><text x="13.6949%" y="159.50"></text></g><g><title>is_copy_raw (991,369 samples, 0.80%)</title><rect x="13.9565%" y="133" width="0.8036%" height="15" fill="rgb(218,30,26)"/><text x="14.2065%" y="143.50"></text></g><g><title>evaluate_obligation (844,929 samples, 0.68%)</title><rect x="14.0752%" y="117" width="0.6849%" height="15" fill="rgb(220,122,19)"/><text x="14.3252%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (213,772 samples, 0.17%)</title><rect x="14.8916%" y="133" width="0.1733%" height="15" fill="rgb(250,228,42)"/><text x="15.1416%" y="143.50"></text></g><g><title>specialization_graph_of (422,695 samples, 0.34%)</title><rect x="15.0885%" y="133" width="0.3426%" height="15" fill="rgb(240,193,28)"/><text x="15.3385%" y="143.50"></text></g><g><title>impl_trait_ref (123,621 samples, 0.10%)</title><rect x="15.3309%" y="117" width="0.1002%" height="15" fill="rgb(216,20,37)"/><text x="15.5809%" y="127.50"></text></g><g><title>resolve_instance (898,750 samples, 0.73%)</title><rect x="14.7601%" y="149" width="0.7285%" height="15" fill="rgb(206,188,39)"/><text x="15.0101%" y="159.50"></text></g><g><title>thir_body (946,012 samples, 0.77%)</title><rect x="15.5003%" y="149" width="0.7668%" height="15" fill="rgb(217,207,13)"/><text x="15.7503%" y="159.50"></text></g><g><title>mir_const (8,211,136 samples, 6.66%)</title><rect x="9.6248%" y="197" width="6.6558%" height="15" fill="rgb(231,73,38)"/><text x="9.8748%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (7,088,331 samples, 5.75%)</title><rect x="10.5349%" y="181" width="5.7456%" height="15" fill="rgb(225,20,46)"/><text x="10.7849%" y="191.50">unsafet..</text></g><g><title>mir_built (6,192,011 samples, 5.02%)</title><rect x="11.2615%" y="165" width="5.0191%" height="15" fill="rgb(210,31,41)"/><text x="11.5115%" y="175.50">mir_bu..</text></g><g><title>mir_promoted (9,223,224 samples, 7.48%)</title><rect x="8.9822%" y="213" width="7.4761%" height="15" fill="rgb(221,200,47)"/><text x="9.2322%" y="223.50">mir_promot..</text></g><g><title>mir_const_qualif (219,272 samples, 0.18%)</title><rect x="16.2806%" y="197" width="0.1777%" height="15" fill="rgb(226,26,5)"/><text x="16.5306%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (502,864 samples, 0.41%)</title><rect x="16.4583%" y="213" width="0.4076%" height="15" fill="rgb(249,33,26)"/><text x="16.7083%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (437,265 samples, 0.35%)</title><rect x="16.8659%" y="213" width="0.3544%" height="15" fill="rgb(235,183,28)"/><text x="17.1159%" y="223.50"></text></g><g><title>normalize_projection_ty (299,644 samples, 0.24%)</title><rect x="16.9775%" y="197" width="0.2429%" height="15" fill="rgb(221,5,38)"/><text x="17.2275%" y="207.50"></text></g><g><title>type_op_normalize_predicate (191,283 samples, 0.16%)</title><rect x="17.2204%" y="213" width="0.1550%" height="15" fill="rgb(247,18,42)"/><text x="17.4704%" y="223.50"></text></g><g><title>normalize_projection_ty (137,381 samples, 0.11%)</title><rect x="17.2641%" y="197" width="0.1114%" height="15" fill="rgb(241,131,45)"/><text x="17.5141%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,660,399 samples, 1.35%)</title><rect x="17.3811%" y="213" width="1.3459%" height="15" fill="rgb(249,31,29)"/><text x="17.6311%" y="223.50"></text></g><g><title>MIR_borrow_checking (21,766,093 samples, 17.64%)</title><rect x="1.0992%" y="245" width="17.6431%" height="15" fill="rgb(225,111,53)"/><text x="1.3492%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,694,653 samples, 17.59%)</title><rect x="1.1571%" y="229" width="17.5852%" height="15" fill="rgb(238,160,17)"/><text x="1.4071%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (279,802 samples, 0.23%)</title><rect x="18.8275%" y="245" width="0.2268%" height="15" fill="rgb(214,148,48)"/><text x="19.0775%" y="255.50"></text></g><g><title>codegen_fn_attrs (185,671 samples, 0.15%)</title><rect x="19.6844%" y="181" width="0.1505%" height="15" fill="rgb(232,36,49)"/><text x="19.9344%" y="191.50"></text></g><g><title>should_inherit_track_caller (298,462 samples, 0.24%)</title><rect x="19.6015%" y="197" width="0.2419%" height="15" fill="rgb(209,103,24)"/><text x="19.8515%" y="207.50"></text></g><g><title>codegen_fn_attrs (555,585 samples, 0.45%)</title><rect x="19.4279%" y="213" width="0.4503%" height="15" fill="rgb(229,88,8)"/><text x="19.6779%" y="223.50"></text></g><g><title>check_mod_attrs (975,500 samples, 0.79%)</title><rect x="19.0877%" y="229" width="0.7907%" height="15" fill="rgb(213,181,19)"/><text x="19.3377%" y="239.50"></text></g><g><title>check_mod_const_bodies (198,131 samples, 0.16%)</title><rect x="19.8784%" y="229" width="0.1606%" height="15" fill="rgb(254,191,54)"/><text x="20.1284%" y="239.50"></text></g><g><title>lint_levels (309,303 samples, 0.25%)</title><rect x="20.4927%" y="213" width="0.2507%" height="15" fill="rgb(241,83,37)"/><text x="20.7427%" y="223.50"></text></g><g><title>lookup_deprecation_entry (266,464 samples, 0.22%)</title><rect x="20.7434%" y="213" width="0.2160%" height="15" fill="rgb(233,36,39)"/><text x="20.9934%" y="223.50"></text></g><g><title>stability_index (151,712 samples, 0.12%)</title><rect x="20.8364%" y="197" width="0.1230%" height="15" fill="rgb(226,3,54)"/><text x="21.0864%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (1,194,944 samples, 0.97%)</title><rect x="20.1598%" y="229" width="0.9686%" height="15" fill="rgb(245,192,40)"/><text x="20.4098%" y="239.50"></text></g><g><title>misc_checking_1 (2,667,830 samples, 2.16%)</title><rect x="19.0547%" y="245" width="2.1625%" height="15" fill="rgb(238,167,29)"/><text x="19.3047%" y="255.50">m..</text></g><g><title>liveness_and_intrinsic_checking (491,815 samples, 0.40%)</title><rect x="21.2185%" y="229" width="0.3987%" height="15" fill="rgb(232,182,51)"/><text x="21.4685%" y="239.50"></text></g><g><title>check_mod_liveness (403,935 samples, 0.33%)</title><rect x="21.2897%" y="213" width="0.3274%" height="15" fill="rgb(231,60,39)"/><text x="21.5397%" y="223.50"></text></g><g><title>misc_checking_2 (1,018,121 samples, 0.83%)</title><rect x="21.2172%" y="245" width="0.8253%" height="15" fill="rgb(208,69,12)"/><text x="21.4672%" y="255.50"></text></g><g><title>match_checking (524,645 samples, 0.43%)</title><rect x="21.6172%" y="229" width="0.4253%" height="15" fill="rgb(235,93,37)"/><text x="21.8672%" y="239.50"></text></g><g><title>check_match (504,544 samples, 0.41%)</title><rect x="21.6335%" y="213" width="0.4090%" height="15" fill="rgb(213,116,39)"/><text x="21.8835%" y="223.50"></text></g><g><title>check_private_in_public (140,572 samples, 0.11%)</title><rect x="22.0512%" y="229" width="0.1139%" height="15" fill="rgb(222,207,29)"/><text x="22.3012%" y="239.50"></text></g><g><title>death_checking (727,378 samples, 0.59%)</title><rect x="22.1651%" y="229" width="0.5896%" height="15" fill="rgb(206,96,30)"/><text x="22.4151%" y="239.50"></text></g><g><title>item_attrs (464,345 samples, 0.38%)</title><rect x="22.3783%" y="213" width="0.3764%" height="15" fill="rgb(218,138,4)"/><text x="22.6283%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (463,065 samples, 0.38%)</title><rect x="22.3794%" y="197" width="0.3753%" height="15" fill="rgb(250,191,14)"/><text x="22.6294%" y="207.50"></text></g><g><title>eval_to_const_value_raw (328,703 samples, 0.27%)</title><rect x="23.3615%" y="149" width="0.2664%" height="15" fill="rgb(239,60,40)"/><text x="23.6115%" y="159.50"></text></g><g><title>eval_to_const_value_raw (327,493 samples, 0.27%)</title><rect x="23.3625%" y="133" width="0.2655%" height="15" fill="rgb(206,27,48)"/><text x="23.6125%" y="143.50"></text></g><g><title>eval_to_allocation_raw (325,703 samples, 0.26%)</title><rect x="23.3640%" y="117" width="0.2640%" height="15" fill="rgb(225,35,8)"/><text x="23.6140%" y="127.50"></text></g><g><title>eval_to_allocation_raw (431,084 samples, 0.35%)</title><rect x="23.2789%" y="197" width="0.3494%" height="15" fill="rgb(250,213,24)"/><text x="23.5289%" y="207.50"></text></g><g><title>eval_to_allocation_raw (429,404 samples, 0.35%)</title><rect x="23.2802%" y="181" width="0.3481%" height="15" fill="rgb(247,123,22)"/><text x="23.5302%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (337,713 samples, 0.27%)</title><rect x="23.3546%" y="165" width="0.2737%" height="15" fill="rgb(231,138,38)"/><text x="23.6046%" y="175.50"></text></g><g><title>param_env (470,697 samples, 0.38%)</title><rect x="23.6283%" y="197" width="0.3815%" height="15" fill="rgb(231,145,46)"/><text x="23.8783%" y="207.50"></text></g><g><title>impl_parent (556,146 samples, 0.45%)</title><rect x="24.7131%" y="165" width="0.4508%" height="15" fill="rgb(251,118,11)"/><text x="24.9631%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (356,005 samples, 0.29%)</title><rect x="24.8754%" y="149" width="0.2886%" height="15" fill="rgb(217,147,25)"/><text x="25.1254%" y="159.50"></text></g><g><title>specialization_graph_of (2,316,056 samples, 1.88%)</title><rect x="24.0488%" y="181" width="1.8773%" height="15" fill="rgb(247,81,37)"/><text x="24.2988%" y="191.50">s..</text></g><g><title>impl_trait_ref (940,339 samples, 0.76%)</title><rect x="25.1639%" y="165" width="0.7622%" height="15" fill="rgb(209,12,38)"/><text x="25.4139%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (739,419 samples, 0.60%)</title><rect x="25.3268%" y="149" width="0.5994%" height="15" fill="rgb(227,1,9)"/><text x="25.5768%" y="159.50"></text></g><g><title>resolve_instance (2,367,126 samples, 1.92%)</title><rect x="24.0098%" y="197" width="1.9187%" height="15" fill="rgb(248,47,43)"/><text x="24.2598%" y="207.50">r..</text></g><g><title>crate_lints (4,870,914 samples, 3.95%)</title><rect x="22.7562%" y="213" width="3.9482%" height="15" fill="rgb(221,10,30)"/><text x="23.0062%" y="223.50">crat..</text></g><g><title>type_of (943,840 samples, 0.77%)</title><rect x="25.9394%" y="197" width="0.7651%" height="15" fill="rgb(210,229,1)"/><text x="26.1894%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (715,827 samples, 0.58%)</title><rect x="26.1243%" y="181" width="0.5802%" height="15" fill="rgb(222,148,37)"/><text x="26.3743%" y="191.50"></text></g><g><title>lint_checking (5,443,970 samples, 4.41%)</title><rect x="22.7547%" y="229" width="4.4128%" height="15" fill="rgb(234,67,33)"/><text x="23.0047%" y="239.50">lint_..</text></g><g><title>module_lints (571,166 samples, 0.46%)</title><rect x="26.7045%" y="213" width="0.4630%" height="15" fill="rgb(247,98,35)"/><text x="26.9545%" y="223.50"></text></g><g><title>lint_mod (563,926 samples, 0.46%)</title><rect x="26.7104%" y="197" width="0.4571%" height="15" fill="rgb(247,138,52)"/><text x="26.9604%" y="207.50"></text></g><g><title>layout_of (179,362 samples, 0.15%)</title><rect x="27.0221%" y="181" width="0.1454%" height="15" fill="rgb(213,79,30)"/><text x="27.2721%" y="191.50"></text></g><g><title>layout_of (163,932 samples, 0.13%)</title><rect x="27.0346%" y="165" width="0.1329%" height="15" fill="rgb(246,177,23)"/><text x="27.2846%" y="175.50"></text></g><g><title>layout_of (148,052 samples, 0.12%)</title><rect x="27.0475%" y="149" width="0.1200%" height="15" fill="rgb(230,62,27)"/><text x="27.2975%" y="159.50"></text></g><g><title>layout_of (133,532 samples, 0.11%)</title><rect x="27.0592%" y="133" width="0.1082%" height="15" fill="rgb(216,154,8)"/><text x="27.3092%" y="143.50"></text></g><g><title>privacy_access_levels (193,842 samples, 0.16%)</title><rect x="27.1675%" y="229" width="0.1571%" height="15" fill="rgb(244,35,45)"/><text x="27.4175%" y="239.50"></text></g><g><title>privacy_checking_modules (734,039 samples, 0.59%)</title><rect x="27.3246%" y="229" width="0.5950%" height="15" fill="rgb(251,115,12)"/><text x="27.5746%" y="239.50"></text></g><g><title>check_mod_privacy (729,559 samples, 0.59%)</title><rect x="27.3282%" y="213" width="0.5914%" height="15" fill="rgb(240,54,50)"/><text x="27.5782%" y="223.50"></text></g><g><title>misc_checking_3 (7,261,941 samples, 5.89%)</title><rect x="22.0424%" y="245" width="5.8864%" height="15" fill="rgb(233,84,52)"/><text x="22.2924%" y="255.50">misc_ch..</text></g><g><title>impl_parent (2,293,692 samples, 1.86%)</title><rect x="30.5535%" y="181" width="1.8592%" height="15" fill="rgb(207,117,47)"/><text x="30.8035%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,227,499 samples, 0.99%)</title><rect x="31.4177%" y="165" width="0.9950%" height="15" fill="rgb(249,43,39)"/><text x="31.6677%" y="175.50"></text></g><g><title>impl_trait_ref (5,378,302 samples, 4.36%)</title><rect x="32.4127%" y="181" width="4.3595%" height="15" fill="rgb(209,38,44)"/><text x="32.6627%" y="191.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,542,315 samples, 3.68%)</title><rect x="33.0903%" y="165" width="3.6819%" height="15" fill="rgb(236,212,23)"/><text x="33.3403%" y="175.50">meta..</text></g><g><title>coherent_trait (11,572,249 samples, 9.38%)</title><rect x="27.9998%" y="213" width="9.3802%" height="15" fill="rgb(242,79,21)"/><text x="28.2498%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (11,553,809 samples, 9.37%)</title><rect x="28.0147%" y="197" width="9.3652%" height="15" fill="rgb(211,96,35)"/><text x="28.2647%" y="207.50">specializatio..</text></g><g><title>trait_impls_of (748,219 samples, 0.61%)</title><rect x="36.7735%" y="181" width="0.6065%" height="15" fill="rgb(253,215,40)"/><text x="37.0235%" y="191.50"></text></g><g><title>implementations_of_trait (216,784 samples, 0.18%)</title><rect x="37.2043%" y="165" width="0.1757%" height="15" fill="rgb(211,81,21)"/><text x="37.4543%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (165,513 samples, 0.13%)</title><rect x="37.2458%" y="149" width="0.1342%" height="15" fill="rgb(208,190,38)"/><text x="37.4958%" y="159.50"></text></g><g><title>coherence_checking (11,654,629 samples, 9.45%)</title><rect x="27.9783%" y="229" width="9.4470%" height="15" fill="rgb(235,213,38)"/><text x="28.2283%" y="239.50">coherence_chec..</text></g><g><title>associated_item (358,776 samples, 0.29%)</title><rect x="51.3685%" y="165" width="0.2908%" height="15" fill="rgb(237,122,38)"/><text x="51.6185%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (288,664 samples, 0.23%)</title><rect x="51.4253%" y="149" width="0.2340%" height="15" fill="rgb(244,218,35)"/><text x="51.6753%" y="159.50"></text></g><g><title>associated_items (526,159 samples, 0.43%)</title><rect x="51.2562%" y="181" width="0.4265%" height="15" fill="rgb(240,68,47)"/><text x="51.5062%" y="191.50"></text></g><g><title>adt_def (136,502 samples, 0.11%)</title><rect x="52.0221%" y="149" width="0.1106%" height="15" fill="rgb(210,16,53)"/><text x="52.2721%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (135,081 samples, 0.11%)</title><rect x="52.0232%" y="133" width="0.1095%" height="15" fill="rgb(235,124,12)"/><text x="52.2732%" y="143.50"></text></g><g><title>adt_dtorck_constraint (257,764 samples, 0.21%)</title><rect x="52.1912%" y="133" width="0.2089%" height="15" fill="rgb(224,169,11)"/><text x="52.4412%" y="143.50"></text></g><g><title>adt_dtorck_constraint (323,255 samples, 0.26%)</title><rect x="52.1538%" y="149" width="0.2620%" height="15" fill="rgb(250,166,2)"/><text x="52.4038%" y="159.50"></text></g><g><title>dropck_outlives (877,811 samples, 0.71%)</title><rect x="51.7341%" y="181" width="0.7115%" height="15" fill="rgb(242,216,29)"/><text x="51.9841%" y="191.50"></text></g><g><title>adt_dtorck_constraint (574,859 samples, 0.47%)</title><rect x="51.9797%" y="165" width="0.4660%" height="15" fill="rgb(230,116,27)"/><text x="52.2297%" y="175.50"></text></g><g><title>predicates_of (184,603 samples, 0.15%)</title><rect x="53.8727%" y="165" width="0.1496%" height="15" fill="rgb(228,99,48)"/><text x="54.1227%" y="175.50"></text></g><g><title>evaluate_obligation (2,730,078 samples, 2.21%)</title><rect x="52.4457%" y="181" width="2.2129%" height="15" fill="rgb(253,11,6)"/><text x="52.6957%" y="191.50">e..</text></g><g><title>trait_impls_of (709,307 samples, 0.57%)</title><rect x="54.0837%" y="165" width="0.5749%" height="15" fill="rgb(247,143,39)"/><text x="54.3337%" y="175.50"></text></g><g><title>implementations_of_trait (137,041 samples, 0.11%)</title><rect x="54.5475%" y="149" width="0.1111%" height="15" fill="rgb(236,97,10)"/><text x="54.7975%" y="159.50"></text></g><g><title>fn_sig (150,292 samples, 0.12%)</title><rect x="54.6782%" y="181" width="0.1218%" height="15" fill="rgb(233,208,19)"/><text x="54.9282%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (127,042 samples, 0.10%)</title><rect x="54.6970%" y="165" width="0.1030%" height="15" fill="rgb(216,164,2)"/><text x="54.9470%" y="175.50"></text></g><g><title>generics_of (128,171 samples, 0.10%)</title><rect x="54.8000%" y="181" width="0.1039%" height="15" fill="rgb(220,129,5)"/><text x="55.0500%" y="191.50"></text></g><g><title>item_attrs (194,724 samples, 0.16%)</title><rect x="55.0811%" y="181" width="0.1578%" height="15" fill="rgb(242,17,10)"/><text x="55.3311%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (185,654 samples, 0.15%)</title><rect x="55.0884%" y="165" width="0.1505%" height="15" fill="rgb(242,107,0)"/><text x="55.3384%" y="175.50"></text></g><g><title>evaluate_obligation (159,611 samples, 0.13%)</title><rect x="55.4351%" y="165" width="0.1294%" height="15" fill="rgb(251,28,31)"/><text x="55.6851%" y="175.50"></text></g><g><title>method_autoderef_steps (327,102 samples, 0.27%)</title><rect x="55.3077%" y="181" width="0.2651%" height="15" fill="rgb(233,223,10)"/><text x="55.5577%" y="191.50"></text></g><g><title>explicit_predicates_of (143,922 samples, 0.12%)</title><rect x="55.8236%" y="149" width="0.1167%" height="15" fill="rgb(215,21,27)"/><text x="56.0736%" y="159.50"></text></g><g><title>predicates_of (433,677 samples, 0.35%)</title><rect x="55.6397%" y="181" width="0.3515%" height="15" fill="rgb(232,23,21)"/><text x="55.8897%" y="191.50"></text></g><g><title>predicates_defined_on (313,456 samples, 0.25%)</title><rect x="55.7371%" y="165" width="0.2541%" height="15" fill="rgb(244,5,23)"/><text x="55.9871%" y="175.50"></text></g><g><title>evaluate_obligation (650,758 samples, 0.53%)</title><rect x="58.2746%" y="165" width="0.5275%" height="15" fill="rgb(226,81,46)"/><text x="58.5246%" y="175.50"></text></g><g><title>is_copy_raw (258,032 samples, 0.21%)</title><rect x="58.8968%" y="165" width="0.2092%" height="15" fill="rgb(247,70,30)"/><text x="59.1468%" y="175.50"></text></g><g><title>evaluate_obligation (236,362 samples, 0.19%)</title><rect x="58.9144%" y="149" width="0.1916%" height="15" fill="rgb(212,68,19)"/><text x="59.1644%" y="159.50"></text></g><g><title>trait_impls_of (123,391 samples, 0.10%)</title><rect x="59.0059%" y="133" width="0.1000%" height="15" fill="rgb(240,187,13)"/><text x="59.2559%" y="143.50"></text></g><g><title>typeck (3,835,374 samples, 3.11%)</title><rect x="56.1731%" y="181" width="3.1089%" height="15" fill="rgb(223,113,26)"/><text x="56.4231%" y="191.50">typ..</text></g><g><title>item_bodies_checking (26,988,031 samples, 21.88%)</title><rect x="37.4625%" y="229" width="21.8759%" height="15" fill="rgb(206,192,2)"/><text x="37.7125%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (26,985,151 samples, 21.87%)</title><rect x="37.4648%" y="213" width="21.8735%" height="15" fill="rgb(241,108,4)"/><text x="37.7148%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (26,930,971 samples, 21.83%)</title><rect x="37.5087%" y="197" width="21.8296%" height="15" fill="rgb(247,173,49)"/><text x="37.7587%" y="207.50">typeck</text></g><g><title>impl_trait_ref (160,112 samples, 0.13%)</title><rect x="59.9792%" y="53" width="0.1298%" height="15" fill="rgb(224,114,35)"/><text x="60.2292%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (141,411 samples, 0.11%)</title><rect x="59.9944%" y="37" width="0.1146%" height="15" fill="rgb(245,159,27)"/><text x="60.2444%" y="47.50"></text></g><g><title>coherent_trait (317,793 samples, 0.26%)</title><rect x="59.8708%" y="85" width="0.2576%" height="15" fill="rgb(245,172,44)"/><text x="60.1208%" y="95.50"></text></g><g><title>specialization_graph_of (315,973 samples, 0.26%)</title><rect x="59.8723%" y="69" width="0.2561%" height="15" fill="rgb(236,23,11)"/><text x="60.1223%" y="79.50"></text></g><g><title>adt_destructor (323,033 samples, 0.26%)</title><rect x="59.8670%" y="117" width="0.2618%" height="15" fill="rgb(205,117,38)"/><text x="60.1170%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (322,213 samples, 0.26%)</title><rect x="59.8677%" y="101" width="0.2612%" height="15" fill="rgb(237,72,25)"/><text x="60.1177%" y="111.50"></text></g><g><title>adt_dtorck_constraint (399,174 samples, 0.32%)</title><rect x="59.8065%" y="133" width="0.3236%" height="15" fill="rgb(244,70,9)"/><text x="60.0565%" y="143.50"></text></g><g><title>adt_dtorck_constraint (437,745 samples, 0.35%)</title><rect x="59.7787%" y="149" width="0.3548%" height="15" fill="rgb(217,125,39)"/><text x="60.0287%" y="159.50"></text></g><g><title>dropck_outlives (470,045 samples, 0.38%)</title><rect x="59.7552%" y="181" width="0.3810%" height="15" fill="rgb(235,36,10)"/><text x="60.0052%" y="191.50"></text></g><g><title>adt_dtorck_constraint (449,945 samples, 0.36%)</title><rect x="59.7715%" y="165" width="0.3647%" height="15" fill="rgb(251,123,47)"/><text x="60.0215%" y="175.50"></text></g><g><title>item_types_checking (1,008,392 samples, 0.82%)</title><rect x="59.3383%" y="229" width="0.8174%" height="15" fill="rgb(221,13,13)"/><text x="59.5883%" y="239.50"></text></g><g><title>check_mod_item_types (1,002,470 samples, 0.81%)</title><rect x="59.3431%" y="213" width="0.8126%" height="15" fill="rgb(238,131,9)"/><text x="59.5931%" y="223.50"></text></g><g><title>typeck (567,507 samples, 0.46%)</title><rect x="59.6957%" y="197" width="0.4600%" height="15" fill="rgb(211,50,8)"/><text x="59.9457%" y="207.50"></text></g><g><title>associated_items (158,231 samples, 0.13%)</title><rect x="60.8881%" y="181" width="0.1283%" height="15" fill="rgb(245,182,24)"/><text x="61.1381%" y="191.50"></text></g><g><title>fn_sig (912,501 samples, 0.74%)</title><rect x="60.4854%" y="197" width="0.7397%" height="15" fill="rgb(242,14,37)"/><text x="60.7354%" y="207.50"></text></g><g><title>type_of (167,681 samples, 0.14%)</title><rect x="61.0892%" y="181" width="0.1359%" height="15" fill="rgb(246,228,12)"/><text x="61.3392%" y="191.50"></text></g><g><title>is_late_bound_map (163,572 samples, 0.13%)</title><rect x="61.3707%" y="181" width="0.1326%" height="15" fill="rgb(213,55,15)"/><text x="61.6207%" y="191.50"></text></g><g><title>resolve_lifetimes (153,232 samples, 0.12%)</title><rect x="61.3790%" y="165" width="0.1242%" height="15" fill="rgb(209,9,3)"/><text x="61.6290%" y="175.50"></text></g><g><title>named_region_map (277,803 samples, 0.23%)</title><rect x="61.5032%" y="181" width="0.2252%" height="15" fill="rgb(230,59,30)"/><text x="61.7532%" y="191.50"></text></g><g><title>resolve_lifetimes (258,623 samples, 0.21%)</title><rect x="61.5188%" y="165" width="0.2096%" height="15" fill="rgb(209,121,21)"/><text x="61.7688%" y="175.50"></text></g><g><title>generics_of (639,417 samples, 0.52%)</title><rect x="61.2251%" y="197" width="0.5183%" height="15" fill="rgb(220,109,13)"/><text x="61.4751%" y="207.50"></text></g><g><title>late_bound_vars_map (189,853 samples, 0.15%)</title><rect x="62.1241%" y="149" width="0.1539%" height="15" fill="rgb(232,18,1)"/><text x="62.3741%" y="159.50"></text></g><g><title>resolve_lifetimes (168,113 samples, 0.14%)</title><rect x="62.1418%" y="133" width="0.1363%" height="15" fill="rgb(215,41,42)"/><text x="62.3918%" y="143.50"></text></g><g><title>explicit_predicates_of (453,904 samples, 0.37%)</title><rect x="61.9435%" y="165" width="0.3679%" height="15" fill="rgb(224,123,36)"/><text x="62.1935%" y="175.50"></text></g><g><title>predicates_of (954,329 samples, 0.77%)</title><rect x="61.7981%" y="197" width="0.7736%" height="15" fill="rgb(240,125,3)"/><text x="62.0481%" y="207.50"></text></g><g><title>predicates_defined_on (889,479 samples, 0.72%)</title><rect x="61.8507%" y="181" width="0.7210%" height="15" fill="rgb(205,98,50)"/><text x="62.1007%" y="191.50"></text></g><g><title>inferred_outlives_of (321,083 samples, 0.26%)</title><rect x="62.3114%" y="165" width="0.2603%" height="15" fill="rgb(205,185,37)"/><text x="62.5614%" y="175.50"></text></g><g><title>inferred_outlives_crate (287,163 samples, 0.23%)</title><rect x="62.3389%" y="149" width="0.2328%" height="15" fill="rgb(238,207,15)"/><text x="62.5889%" y="159.50"></text></g><g><title>type_collecting (3,192,706 samples, 2.59%)</title><rect x="60.1580%" y="229" width="2.5879%" height="15" fill="rgb(213,199,42)"/><text x="60.4080%" y="239.50">ty..</text></g><g><title>collect_mod_item_types (3,172,326 samples, 2.57%)</title><rect x="60.1746%" y="213" width="2.5714%" height="15" fill="rgb(235,201,11)"/><text x="60.4246%" y="223.50">co..</text></g><g><title>type_of (215,042 samples, 0.17%)</title><rect x="62.5717%" y="197" width="0.1743%" height="15" fill="rgb(207,46,11)"/><text x="62.8217%" y="207.50"></text></g><g><title>adt_def (135,571 samples, 0.11%)</title><rect x="63.5674%" y="133" width="0.1099%" height="15" fill="rgb(241,35,35)"/><text x="63.8174%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (135,171 samples, 0.11%)</title><rect x="63.5677%" y="117" width="0.1096%" height="15" fill="rgb(243,32,47)"/><text x="63.8177%" y="127.50"></text></g><g><title>adt_sized_constraint (188,372 samples, 0.15%)</title><rect x="63.5657%" y="149" width="0.1527%" height="15" fill="rgb(247,202,23)"/><text x="63.8157%" y="159.50"></text></g><g><title>adt_sized_constraint (251,253 samples, 0.20%)</title><rect x="63.5176%" y="165" width="0.2037%" height="15" fill="rgb(219,102,11)"/><text x="63.7676%" y="175.50"></text></g><g><title>adt_sized_constraint (320,894 samples, 0.26%)</title><rect x="63.4627%" y="181" width="0.2601%" height="15" fill="rgb(243,110,44)"/><text x="63.7127%" y="191.50"></text></g><g><title>evaluate_obligation (536,295 samples, 0.43%)</title><rect x="63.3181%" y="197" width="0.4347%" height="15" fill="rgb(222,74,54)"/><text x="63.5681%" y="207.50"></text></g><g><title>evaluate_obligation (133,141 samples, 0.11%)</title><rect x="63.9432%" y="181" width="0.1079%" height="15" fill="rgb(216,99,12)"/><text x="64.1932%" y="191.50"></text></g><g><title>object_safety_violations (457,365 samples, 0.37%)</title><rect x="63.8387%" y="197" width="0.3707%" height="15" fill="rgb(226,22,26)"/><text x="64.0887%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,970,832 samples, 1.60%)</title><rect x="62.8410%" y="213" width="1.5975%" height="15" fill="rgb(217,163,10)"/><text x="63.0910%" y="223.50"></text></g><g><title>region_scope_tree (189,102 samples, 0.15%)</title><rect x="64.2852%" y="197" width="0.1533%" height="15" fill="rgb(213,25,53)"/><text x="64.5352%" y="207.50"></text></g><g><title>adt_sized_constraint (148,352 samples, 0.12%)</title><rect x="65.3225%" y="165" width="0.1203%" height="15" fill="rgb(252,105,26)"/><text x="65.5725%" y="175.50"></text></g><g><title>adt_sized_constraint (273,303 samples, 0.22%)</title><rect x="65.2311%" y="181" width="0.2215%" height="15" fill="rgb(220,39,43)"/><text x="65.4811%" y="191.50"></text></g><g><title>evaluate_obligation (495,264 samples, 0.40%)</title><rect x="65.0855%" y="197" width="0.4014%" height="15" fill="rgb(229,68,48)"/><text x="65.3355%" y="207.50"></text></g><g><title>param_env (214,183 samples, 0.17%)</title><rect x="65.5759%" y="197" width="0.1736%" height="15" fill="rgb(252,8,32)"/><text x="65.8259%" y="207.50"></text></g><g><title>region_scope_tree (158,961 samples, 0.13%)</title><rect x="65.7944%" y="197" width="0.1289%" height="15" fill="rgb(223,20,43)"/><text x="66.0444%" y="207.50"></text></g><g><title>analysis (80,594,750 samples, 65.33%)</title><rect x="0.6682%" y="261" width="65.3282%" height="15" fill="rgb(229,81,49)"/><text x="0.9182%" y="271.50">analysis</text></g><g><title>type_check_crate (46,963,685 samples, 38.07%)</title><rect x="27.9288%" y="245" width="38.0677%" height="15" fill="rgb(236,28,36)"/><text x="28.1788%" y="255.50">type_check_crate</text></g><g><title>wf_checking (4,007,545 samples, 3.25%)</title><rect x="62.7480%" y="229" width="3.2484%" height="15" fill="rgb(249,185,26)"/><text x="62.9980%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (1,922,050 samples, 1.56%)</title><rect x="64.4385%" y="213" width="1.5580%" height="15" fill="rgb(249,174,33)"/><text x="64.6885%" y="223.50"></text></g><g><title>codegen_crate (392,825 samples, 0.32%)</title><rect x="66.0069%" y="261" width="0.3184%" height="15" fill="rgb(233,201,37)"/><text x="66.2569%" y="271.50"></text></g><g><title>AST_validation (211,013 samples, 0.17%)</title><rect x="66.5096%" y="245" width="0.1710%" height="15" fill="rgb(221,78,26)"/><text x="66.7596%" y="255.50"></text></g><g><title>complete_gated_feature_checking (123,602 samples, 0.10%)</title><rect x="66.6806%" y="245" width="0.1002%" height="15" fill="rgb(250,127,30)"/><text x="66.9306%" y="255.50"></text></g><g><title>metadata_load_macro (280,053 samples, 0.23%)</title><rect x="83.4334%" y="213" width="0.2270%" height="15" fill="rgb(230,49,44)"/><text x="83.6834%" y="223.50"></text></g><g><title>metadata_register_crate (2,692,429 samples, 2.18%)</title><rect x="83.6604%" y="213" width="2.1824%" height="15" fill="rgb(229,67,23)"/><text x="83.9104%" y="223.50">m..</text></g><g><title>metadata_register_crate (967,921 samples, 0.78%)</title><rect x="85.0583%" y="197" width="0.7846%" height="15" fill="rgb(249,83,47)"/><text x="85.3083%" y="207.50"></text></g><g><title>macro_expand_crate (23,801,406 samples, 19.29%)</title><rect x="66.8586%" y="245" width="19.2929%" height="15" fill="rgb(215,43,3)"/><text x="67.1086%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (23,773,026 samples, 19.27%)</title><rect x="66.8816%" y="229" width="19.2699%" height="15" fill="rgb(238,154,13)"/><text x="67.1316%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (380,755 samples, 0.31%)</title><rect x="85.8428%" y="213" width="0.3086%" height="15" fill="rgb(219,56,2)"/><text x="86.0928%" y="223.50"></text></g><g><title>finalize_imports (140,711 samples, 0.11%)</title><rect x="86.2505%" y="229" width="0.1141%" height="15" fill="rgb(233,0,4)"/><text x="86.5005%" y="239.50"></text></g><g><title>finalize_macro_resolutions (189,252 samples, 0.15%)</title><rect x="86.3645%" y="229" width="0.1534%" height="15" fill="rgb(235,30,7)"/><text x="86.6145%" y="239.50"></text></g><g><title>late_resolve_crate (3,406,097 samples, 2.76%)</title><rect x="86.5179%" y="229" width="2.7609%" height="15" fill="rgb(250,79,13)"/><text x="86.7679%" y="239.50">la..</text></g><g><title>configure_and_expand (28,507,228 samples, 23.11%)</title><rect x="66.3253%" y="261" width="23.1073%" height="15" fill="rgb(211,146,34)"/><text x="66.5753%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (3,935,943 samples, 3.19%)</title><rect x="86.2422%" y="245" width="3.1904%" height="15" fill="rgb(228,22,38)"/><text x="86.4922%" y="255.50">res..</text></g><g><title>drop_ast (323,223 samples, 0.26%)</title><rect x="89.4326%" y="261" width="0.2620%" height="15" fill="rgb(235,168,5)"/><text x="89.6826%" y="271.50"></text></g><g><title>early_lint_checks (626,917 samples, 0.51%)</title><rect x="89.7064%" y="261" width="0.5082%" height="15" fill="rgb(221,155,16)"/><text x="89.9564%" y="271.50"></text></g><g><title>free_global_ctxt (3,485,499 samples, 2.83%)</title><rect x="90.2146%" y="261" width="2.8253%" height="15" fill="rgb(215,215,53)"/><text x="90.4646%" y="271.50">fr..</text></g><g><title>generate_crate_metadata (809,569 samples, 0.66%)</title><rect x="93.0398%" y="261" width="0.6562%" height="15" fill="rgb(223,4,10)"/><text x="93.2898%" y="271.50"></text></g><g><title>hir_lowering (4,726,883 samples, 3.83%)</title><rect x="93.6961%" y="261" width="3.8315%" height="15" fill="rgb(234,103,6)"/><text x="93.9461%" y="271.50">hir_..</text></g><g><title>parse_crate (1,322,885 samples, 1.07%)</title><rect x="97.5760%" y="261" width="1.0723%" height="15" fill="rgb(227,97,0)"/><text x="97.8260%" y="271.50"></text></g><g><title>prepare_outputs (381,354 samples, 0.31%)</title><rect x="98.6559%" y="261" width="0.3091%" height="15" fill="rgb(234,150,53)"/><text x="98.9059%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (802,239 samples, 0.65%)</title><rect x="98.9650%" y="261" width="0.6503%" height="15" fill="rgb(228,201,54)"/><text x="99.2150%" y="271.50"></text></g><g><title>setup_global_ctxt (139,902 samples, 0.11%)</title><rect x="99.6278%" y="261" width="0.1134%" height="15" fill="rgb(222,22,37)"/><text x="99.8778%" y="271.50"></text></g><g><title>all (123,368,947 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (123,368,947 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (319,263 samples, 0.26%)</title><rect x="99.7412%" y="261" width="0.2588%" height="15" fill="rgb(210,40,34)"/><text x="99.9912%" y="271.50"></text></g></svg></svg>