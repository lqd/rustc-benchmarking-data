<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,221,216 samples, 0.22%)</title><rect x="19.7926%" y="117" width="0.2228%" height="15" fill="rgb(227,0,7)"/><text x="20.0426%" y="127.50"></text></g><g><title>item_attrs (997,288 samples, 0.18%)</title><rect x="20.6446%" y="85" width="0.1819%" height="15" fill="rgb(217,0,24)"/><text x="20.8946%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (965,377 samples, 0.18%)</title><rect x="20.6504%" y="69" width="0.1761%" height="15" fill="rgb(221,193,54)"/><text x="20.9004%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,337,711 samples, 0.24%)</title><rect x="20.5924%" y="101" width="0.2440%" height="15" fill="rgb(248,212,6)"/><text x="20.8424%" y="111.50"></text></g><g><title>adt_drop_tys (565,815 samples, 0.10%)</title><rect x="24.9518%" y="69" width="0.1032%" height="15" fill="rgb(208,68,35)"/><text x="25.2018%" y="79.50"></text></g><g><title>is_copy_raw (3,002,540 samples, 0.55%)</title><rect x="25.0552%" y="69" width="0.5478%" height="15" fill="rgb(232,128,0)"/><text x="25.3052%" y="79.50"></text></g><g><title>evaluate_obligation (2,495,184 samples, 0.46%)</title><rect x="25.1478%" y="53" width="0.4552%" height="15" fill="rgb(207,160,47)"/><text x="25.3978%" y="63.50"></text></g><g><title>needs_drop_raw (4,072,698 samples, 0.74%)</title><rect x="24.8718%" y="85" width="0.7430%" height="15" fill="rgb(228,23,34)"/><text x="25.1218%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (764,731 samples, 0.14%)</title><rect x="25.7918%" y="69" width="0.1395%" height="15" fill="rgb(218,30,26)"/><text x="26.0418%" y="79.50"></text></g><g><title>specialization_graph_of (638,635 samples, 0.12%)</title><rect x="25.9714%" y="69" width="0.1165%" height="15" fill="rgb(220,122,19)"/><text x="26.2214%" y="79.50"></text></g><g><title>resolve_instance (2,833,151 samples, 0.52%)</title><rect x="25.6201%" y="85" width="0.5169%" height="15" fill="rgb(250,228,42)"/><text x="25.8701%" y="95.50"></text></g><g><title>thir_body (9,060,853 samples, 1.65%)</title><rect x="26.1677%" y="85" width="1.6530%" height="15" fill="rgb(240,193,28)"/><text x="26.4177%" y="95.50"></text></g><g><title>mir_const (49,555,902 samples, 9.04%)</title><rect x="18.8000%" y="133" width="9.0406%" height="15" fill="rgb(216,20,37)"/><text x="19.0500%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (42,893,449 samples, 7.83%)</title><rect x="20.0154%" y="117" width="7.8251%" height="15" fill="rgb(206,188,39)"/><text x="20.2654%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (38,388,545 samples, 7.00%)</title><rect x="20.8373%" y="101" width="7.0033%" height="15" fill="rgb(217,207,13)"/><text x="21.0873%" y="111.50">mir_built</text></g><g><title>mir_promoted (56,165,815 samples, 10.25%)</title><rect x="17.7586%" y="149" width="10.2464%" height="15" fill="rgb(231,73,38)"/><text x="18.0086%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (901,677 samples, 0.16%)</title><rect x="27.8406%" y="133" width="0.1645%" height="15" fill="rgb(225,20,46)"/><text x="28.0906%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,628,538 samples, 0.30%)</title><rect x="28.0059%" y="149" width="0.2971%" height="15" fill="rgb(210,31,41)"/><text x="28.2559%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,412,360 samples, 0.44%)</title><rect x="28.3030%" y="149" width="0.4401%" height="15" fill="rgb(221,200,47)"/><text x="28.5530%" y="159.50"></text></g><g><title>normalize_projection_ty (1,459,628 samples, 0.27%)</title><rect x="28.4768%" y="133" width="0.2663%" height="15" fill="rgb(226,26,5)"/><text x="28.7268%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,152,617 samples, 0.21%)</title><rect x="28.7431%" y="149" width="0.2103%" height="15" fill="rgb(249,33,26)"/><text x="28.9931%" y="159.50"></text></g><g><title>normalize_projection_ty (603,570 samples, 0.11%)</title><rect x="28.8432%" y="133" width="0.1101%" height="15" fill="rgb(235,183,28)"/><text x="29.0932%" y="143.50"></text></g><g><title>type_op_prove_predicate (9,053,440 samples, 1.65%)</title><rect x="28.9621%" y="149" width="1.6516%" height="15" fill="rgb(221,5,38)"/><text x="29.2121%" y="159.50"></text></g><g><title>MIR_borrow_checking (165,630,159 samples, 30.22%)</title><rect x="0.4055%" y="181" width="30.2162%" height="15" fill="rgb(247,18,42)"/><text x="0.6555%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (165,042,314 samples, 30.11%)</title><rect x="0.5127%" y="165" width="30.1090%" height="15" fill="rgb(241,131,45)"/><text x="0.7627%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (857,938 samples, 0.16%)</title><rect x="30.6972%" y="181" width="0.1565%" height="15" fill="rgb(249,31,29)"/><text x="30.9472%" y="191.50"></text></g><g><title>codegen_fn_attrs (920,279 samples, 0.17%)</title><rect x="31.0955%" y="149" width="0.1679%" height="15" fill="rgb(225,111,53)"/><text x="31.3455%" y="159.50"></text></g><g><title>check_mod_attrs (2,215,865 samples, 0.40%)</title><rect x="30.8592%" y="165" width="0.4042%" height="15" fill="rgb(238,160,17)"/><text x="31.1092%" y="175.50"></text></g><g><title>lint_levels (1,024,651 samples, 0.19%)</title><rect x="31.5574%" y="149" width="0.1869%" height="15" fill="rgb(214,148,48)"/><text x="31.8074%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,346,167 samples, 0.43%)</title><rect x="31.4382%" y="165" width="0.4280%" height="15" fill="rgb(232,36,49)"/><text x="31.6882%" y="175.50"></text></g><g><title>misc_checking_1 (5,685,923 samples, 1.04%)</title><rect x="30.8538%" y="181" width="1.0373%" height="15" fill="rgb(209,103,24)"/><text x="31.1038%" y="191.50"></text></g><g><title>check_mod_intrinsics (606,535 samples, 0.11%)</title><rect x="31.8938%" y="149" width="0.1107%" height="15" fill="rgb(229,88,8)"/><text x="32.1438%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (3,381,387 samples, 0.62%)</title><rect x="31.8915%" y="165" width="0.6169%" height="15" fill="rgb(213,181,19)"/><text x="32.1415%" y="175.50"></text></g><g><title>check_mod_liveness (2,762,232 samples, 0.50%)</title><rect x="32.0045%" y="149" width="0.5039%" height="15" fill="rgb(254,191,54)"/><text x="32.2545%" y="159.50"></text></g><g><title>type_uninhabited_from (580,685 samples, 0.11%)</title><rect x="32.4025%" y="133" width="0.1059%" height="15" fill="rgb(241,83,37)"/><text x="32.6525%" y="143.50"></text></g><g><title>misc_checking_2 (8,143,830 samples, 1.49%)</title><rect x="31.8911%" y="181" width="1.4857%" height="15" fill="rgb(233,36,39)"/><text x="32.1411%" y="191.50"></text></g><g><title>match_checking (4,759,963 samples, 0.87%)</title><rect x="32.5084%" y="165" width="0.8684%" height="15" fill="rgb(226,3,54)"/><text x="32.7584%" y="175.50"></text></g><g><title>check_match (4,607,419 samples, 0.84%)</title><rect x="32.5362%" y="149" width="0.8405%" height="15" fill="rgb(245,192,40)"/><text x="32.7862%" y="159.50"></text></g><g><title>check_private_in_public (922,610 samples, 0.17%)</title><rect x="33.3790%" y="165" width="0.1683%" height="15" fill="rgb(238,167,29)"/><text x="33.6290%" y="175.50"></text></g><g><title>death_checking (1,812,320 samples, 0.33%)</title><rect x="33.5474%" y="165" width="0.3306%" height="15" fill="rgb(232,182,51)"/><text x="33.7974%" y="175.50"></text></g><g><title>eval_to_const_value_raw (887,252 samples, 0.16%)</title><rect x="34.4756%" y="69" width="0.1619%" height="15" fill="rgb(231,60,39)"/><text x="34.7256%" y="79.50"></text></g><g><title>eval_to_const_value_raw (879,691 samples, 0.16%)</title><rect x="34.4769%" y="53" width="0.1605%" height="15" fill="rgb(208,69,12)"/><text x="34.7269%" y="63.50"></text></g><g><title>eval_to_allocation_raw (867,791 samples, 0.16%)</title><rect x="34.4791%" y="37" width="0.1583%" height="15" fill="rgb(235,93,37)"/><text x="34.7291%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,112,352 samples, 0.20%)</title><rect x="34.4357%" y="133" width="0.2029%" height="15" fill="rgb(213,116,39)"/><text x="34.6857%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,107,022 samples, 0.20%)</title><rect x="34.4367%" y="117" width="0.2020%" height="15" fill="rgb(222,207,29)"/><text x="34.6867%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,100,732 samples, 0.20%)</title><rect x="34.4378%" y="101" width="0.2008%" height="15" fill="rgb(206,96,30)"/><text x="34.6878%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (936,642 samples, 0.17%)</title><rect x="34.4678%" y="85" width="0.1709%" height="15" fill="rgb(218,138,4)"/><text x="34.7178%" y="95.50"></text></g><g><title>param_env (684,291 samples, 0.12%)</title><rect x="34.6386%" y="133" width="0.1248%" height="15" fill="rgb(250,191,14)"/><text x="34.8886%" y="143.50"></text></g><g><title>crate_lints (6,261,079 samples, 1.14%)</title><rect x="33.8784%" y="149" width="1.1422%" height="15" fill="rgb(239,60,40)"/><text x="34.1284%" y="159.50"></text></g><g><title>type_of (1,237,446 samples, 0.23%)</title><rect x="34.7949%" y="133" width="0.2257%" height="15" fill="rgb(206,27,48)"/><text x="35.0449%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,000,743 samples, 0.18%)</title><rect x="34.8381%" y="117" width="0.1826%" height="15" fill="rgb(225,35,8)"/><text x="35.0881%" y="127.50"></text></g><g><title>lint_checking (9,677,308 samples, 1.77%)</title><rect x="33.8780%" y="165" width="1.7654%" height="15" fill="rgb(250,213,24)"/><text x="34.1280%" y="175.50"></text></g><g><title>module_lints (3,413,709 samples, 0.62%)</title><rect x="35.0207%" y="149" width="0.6228%" height="15" fill="rgb(247,123,22)"/><text x="35.2707%" y="159.50"></text></g><g><title>lint_mod (3,404,489 samples, 0.62%)</title><rect x="35.0223%" y="133" width="0.6211%" height="15" fill="rgb(231,138,38)"/><text x="35.2723%" y="143.50"></text></g><g><title>privacy_access_levels (1,235,364 samples, 0.23%)</title><rect x="35.6434%" y="165" width="0.2254%" height="15" fill="rgb(231,145,46)"/><text x="35.8934%" y="175.50"></text></g><g><title>privacy_checking_modules (5,528,091 samples, 1.01%)</title><rect x="35.8688%" y="165" width="1.0085%" height="15" fill="rgb(251,118,11)"/><text x="36.1188%" y="175.50"></text></g><g><title>check_mod_privacy (5,522,151 samples, 1.01%)</title><rect x="35.8699%" y="149" width="1.0074%" height="15" fill="rgb(217,147,25)"/><text x="36.1199%" y="159.50"></text></g><g><title>misc_checking_3 (19,224,644 samples, 3.51%)</title><rect x="33.3768%" y="181" width="3.5072%" height="15" fill="rgb(247,81,37)"/><text x="33.6268%" y="191.50">mis..</text></g><g><title>impl_parent (3,705,292 samples, 0.68%)</title><rect x="38.0604%" y="117" width="0.6760%" height="15" fill="rgb(209,12,38)"/><text x="38.3104%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,799,630 samples, 0.33%)</title><rect x="38.4080%" y="101" width="0.3283%" height="15" fill="rgb(227,1,9)"/><text x="38.6580%" y="111.50"></text></g><g><title>impl_trait_ref (6,380,505 samples, 1.16%)</title><rect x="38.7367%" y="117" width="1.1640%" height="15" fill="rgb(248,47,43)"/><text x="38.9867%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,085,985 samples, 0.93%)</title><rect x="38.9729%" y="101" width="0.9278%" height="15" fill="rgb(221,10,30)"/><text x="39.2229%" y="111.50"></text></g><g><title>trait_impls_of (1,198,077 samples, 0.22%)</title><rect x="39.9251%" y="117" width="0.2186%" height="15" fill="rgb(210,229,1)"/><text x="40.1751%" y="127.50"></text></g><g><title>coherent_trait (17,593,076 samples, 3.21%)</title><rect x="36.9347%" y="149" width="3.2095%" height="15" fill="rgb(222,148,37)"/><text x="37.1847%" y="159.50">coh..</text></g><g><title>specialization_graph_of (16,828,687 samples, 3.07%)</title><rect x="37.0741%" y="133" width="3.0701%" height="15" fill="rgb(234,67,33)"/><text x="37.3241%" y="143.50">spe..</text></g><g><title>coherence_checking (17,759,817 samples, 3.24%)</title><rect x="36.9286%" y="165" width="3.2400%" height="15" fill="rgb(247,98,35)"/><text x="37.1786%" y="175.50">coh..</text></g><g><title>adt_sized_constraint (1,906,091 samples, 0.35%)</title><rect x="58.5588%" y="117" width="0.3477%" height="15" fill="rgb(247,138,52)"/><text x="58.8088%" y="127.50"></text></g><g><title>type_of (1,706,849 samples, 0.31%)</title><rect x="58.5951%" y="101" width="0.3114%" height="15" fill="rgb(213,79,30)"/><text x="58.8451%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (1,703,899 samples, 0.31%)</title><rect x="58.5957%" y="85" width="0.3108%" height="15" fill="rgb(246,177,23)"/><text x="58.8457%" y="95.50"></text></g><g><title>associated_items (595,828 samples, 0.11%)</title><rect x="58.9466%" y="117" width="0.1087%" height="15" fill="rgb(230,62,27)"/><text x="59.1966%" y="127.50"></text></g><g><title>dropck_outlives (1,082,410 samples, 0.20%)</title><rect x="59.0840%" y="117" width="0.1975%" height="15" fill="rgb(216,154,8)"/><text x="59.3340%" y="127.50"></text></g><g><title>generics_of (925,901 samples, 0.17%)</title><rect x="60.3786%" y="101" width="0.1689%" height="15" fill="rgb(244,35,45)"/><text x="60.6286%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (730,029 samples, 0.13%)</title><rect x="60.4144%" y="85" width="0.1332%" height="15" fill="rgb(251,115,12)"/><text x="60.6644%" y="95.50"></text></g><g><title>impl_trait_ref (558,367 samples, 0.10%)</title><rect x="60.5766%" y="101" width="0.1019%" height="15" fill="rgb(240,54,50)"/><text x="60.8266%" y="111.50"></text></g><g><title>predicates_of (663,380 samples, 0.12%)</title><rect x="60.6882%" y="101" width="0.1210%" height="15" fill="rgb(233,84,52)"/><text x="60.9382%" y="111.50"></text></g><g><title>specializes (931,530 samples, 0.17%)</title><rect x="60.8092%" y="101" width="0.1699%" height="15" fill="rgb(207,117,47)"/><text x="61.0592%" y="111.50"></text></g><g><title>evaluate_obligation (9,710,946 samples, 1.77%)</title><rect x="59.2815%" y="117" width="1.7716%" height="15" fill="rgb(249,43,39)"/><text x="59.5315%" y="127.50">e..</text></g><g><title>generics_of (794,430 samples, 0.14%)</title><rect x="61.1074%" y="117" width="0.1449%" height="15" fill="rgb(209,38,44)"/><text x="61.3574%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (610,099 samples, 0.11%)</title><rect x="61.1410%" y="101" width="0.1113%" height="15" fill="rgb(236,212,23)"/><text x="61.3910%" y="111.50"></text></g><g><title>method_autoderef_steps (880,818 samples, 0.16%)</title><rect x="61.3977%" y="117" width="0.1607%" height="15" fill="rgb(242,79,21)"/><text x="61.6477%" y="127.50"></text></g><g><title>predicates_of (591,896 samples, 0.11%)</title><rect x="61.6102%" y="117" width="0.1080%" height="15" fill="rgb(211,96,35)"/><text x="61.8602%" y="127.50"></text></g><g><title>associated_items (600,216 samples, 0.11%)</title><rect x="76.8904%" y="101" width="0.1095%" height="15" fill="rgb(253,215,40)"/><text x="77.1404%" y="111.50"></text></g><g><title>dropck_outlives (618,183 samples, 0.11%)</title><rect x="77.0197%" y="101" width="0.1128%" height="15" fill="rgb(211,81,21)"/><text x="77.2697%" y="111.50"></text></g><g><title>impl_trait_ref (857,922 samples, 0.16%)</title><rect x="77.9398%" y="85" width="0.1565%" height="15" fill="rgb(208,190,38)"/><text x="78.1898%" y="95.50"></text></g><g><title>specializes (802,428 samples, 0.15%)</title><rect x="78.1825%" y="85" width="0.1464%" height="15" fill="rgb(235,213,38)"/><text x="78.4325%" y="95.50"></text></g><g><title>evaluate_obligation (6,976,551 samples, 1.27%)</title><rect x="77.1325%" y="101" width="1.2727%" height="15" fill="rgb(237,122,38)"/><text x="77.3825%" y="111.50"></text></g><g><title>typeck (93,775,070 samples, 17.11%)</title><rect x="61.7924%" y="117" width="17.1076%" height="15" fill="rgb(244,218,35)"/><text x="62.0424%" y="127.50">typeck</text></g><g><title>item_bodies_checking (212,617,031 samples, 38.79%)</title><rect x="40.1834%" y="165" width="38.7881%" height="15" fill="rgb(240,68,47)"/><text x="40.4334%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (212,613,101 samples, 38.79%)</title><rect x="40.1841%" y="149" width="38.7874%" height="15" fill="rgb(210,16,53)"/><text x="40.4341%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (212,260,474 samples, 38.72%)</title><rect x="40.2485%" y="133" width="38.7231%" height="15" fill="rgb(235,124,12)"/><text x="40.4985%" y="143.50">typeck</text></g><g><title>item_types_checking (3,804,952 samples, 0.69%)</title><rect x="78.9716%" y="165" width="0.6941%" height="15" fill="rgb(224,169,11)"/><text x="79.2216%" y="175.50"></text></g><g><title>check_mod_item_types (3,796,242 samples, 0.69%)</title><rect x="78.9732%" y="149" width="0.6926%" height="15" fill="rgb(250,166,2)"/><text x="79.2232%" y="159.50"></text></g><g><title>typeck (1,310,675 samples, 0.24%)</title><rect x="79.4266%" y="133" width="0.2391%" height="15" fill="rgb(242,216,29)"/><text x="79.6766%" y="143.50"></text></g><g><title>fn_sig (898,655 samples, 0.16%)</title><rect x="79.8471%" y="133" width="0.1639%" height="15" fill="rgb(230,116,27)"/><text x="80.0971%" y="143.50"></text></g><g><title>is_late_bound_map (576,110 samples, 0.11%)</title><rect x="80.0760%" y="117" width="0.1051%" height="15" fill="rgb(228,99,48)"/><text x="80.3260%" y="127.50"></text></g><g><title>named_region_map (1,026,246 samples, 0.19%)</title><rect x="80.1811%" y="117" width="0.1872%" height="15" fill="rgb(253,11,6)"/><text x="80.4311%" y="127.50"></text></g><g><title>resolve_lifetimes (955,886 samples, 0.17%)</title><rect x="80.1940%" y="101" width="0.1744%" height="15" fill="rgb(247,143,39)"/><text x="80.4440%" y="111.50"></text></g><g><title>generics_of (1,993,429 samples, 0.36%)</title><rect x="80.0110%" y="133" width="0.3637%" height="15" fill="rgb(236,97,10)"/><text x="80.2610%" y="143.50"></text></g><g><title>predicates_of (1,699,178 samples, 0.31%)</title><rect x="80.4004%" y="133" width="0.3100%" height="15" fill="rgb(233,208,19)"/><text x="80.6504%" y="143.50"></text></g><g><title>predicates_defined_on (1,535,568 samples, 0.28%)</title><rect x="80.4303%" y="117" width="0.2801%" height="15" fill="rgb(216,164,2)"/><text x="80.6803%" y="127.50"></text></g><g><title>inferred_outlives_of (732,039 samples, 0.13%)</title><rect x="80.5769%" y="101" width="0.1335%" height="15" fill="rgb(220,129,5)"/><text x="80.8269%" y="111.50"></text></g><g><title>inferred_outlives_crate (677,908 samples, 0.12%)</title><rect x="80.5867%" y="85" width="0.1237%" height="15" fill="rgb(242,17,10)"/><text x="80.8367%" y="95.50"></text></g><g><title>type_collecting (6,017,607 samples, 1.10%)</title><rect x="79.6671%" y="165" width="1.0978%" height="15" fill="rgb(242,107,0)"/><text x="79.9171%" y="175.50"></text></g><g><title>collect_mod_item_types (6,005,367 samples, 1.10%)</title><rect x="79.6693%" y="149" width="1.0956%" height="15" fill="rgb(251,28,31)"/><text x="79.9193%" y="159.50"></text></g><g><title>evaluate_obligation (1,142,420 samples, 0.21%)</title><rect x="81.9519%" y="133" width="0.2084%" height="15" fill="rgb(233,223,10)"/><text x="82.2019%" y="143.50"></text></g><g><title>implied_outlives_bounds (601,775 samples, 0.11%)</title><rect x="82.1633%" y="133" width="0.1098%" height="15" fill="rgb(215,21,27)"/><text x="82.4133%" y="143.50"></text></g><g><title>param_env (881,577 samples, 0.16%)</title><rect x="82.3366%" y="133" width="0.1608%" height="15" fill="rgb(232,23,21)"/><text x="82.5866%" y="143.50"></text></g><g><title>region_scope_tree (2,228,211 samples, 0.41%)</title><rect x="82.5152%" y="133" width="0.4065%" height="15" fill="rgb(244,5,23)"/><text x="82.7652%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,147,947 samples, 2.03%)</title><rect x="80.9013%" y="149" width="2.0337%" height="15" fill="rgb(226,81,46)"/><text x="81.1513%" y="159.50">c..</text></g><g><title>evaluate_obligation (1,024,771 samples, 0.19%)</title><rect x="83.5354%" y="133" width="0.1870%" height="15" fill="rgb(247,70,30)"/><text x="83.7854%" y="143.50"></text></g><g><title>param_env (665,778 samples, 0.12%)</title><rect x="83.7734%" y="133" width="0.1215%" height="15" fill="rgb(212,68,19)"/><text x="84.0234%" y="143.50"></text></g><g><title>region_scope_tree (572,704 samples, 0.10%)</title><rect x="83.9189%" y="133" width="0.1045%" height="15" fill="rgb(240,187,13)"/><text x="84.1689%" y="143.50"></text></g><g><title>check_item_well_formed (6,170,249 samples, 1.13%)</title><rect x="82.9350%" y="149" width="1.1257%" height="15" fill="rgb(223,113,26)"/><text x="83.1850%" y="159.50"></text></g><g><title>analysis (460,175,941 samples, 83.95%)</title><rect x="0.1306%" y="197" width="83.9508%" height="15" fill="rgb(206,192,2)"/><text x="0.3806%" y="207.50">analysis</text></g><g><title>type_check_crate (258,712,233 samples, 47.20%)</title><rect x="36.8840%" y="181" width="47.1974%" height="15" fill="rgb(241,108,4)"/><text x="37.1340%" y="191.50">type_check_crate</text></g><g><title>wf_checking (18,153,992 samples, 3.31%)</title><rect x="80.7695%" y="165" width="3.3119%" height="15" fill="rgb(247,173,49)"/><text x="81.0195%" y="175.50">wf_..</text></g><g><title>AST_validation (595,757 samples, 0.11%)</title><rect x="84.1897%" y="181" width="0.1087%" height="15" fill="rgb(224,114,35)"/><text x="84.4397%" y="191.50"></text></g><g><title>metadata_register_crate (1,513,558 samples, 0.28%)</title><rect x="90.4631%" y="149" width="0.2761%" height="15" fill="rgb(245,159,27)"/><text x="90.7131%" y="159.50"></text></g><g><title>metadata_register_crate (566,216 samples, 0.10%)</title><rect x="90.6359%" y="133" width="0.1033%" height="15" fill="rgb(245,172,44)"/><text x="90.8859%" y="143.50"></text></g><g><title>macro_expand_crate (35,460,003 samples, 6.47%)</title><rect x="84.3743%" y="181" width="6.4690%" height="15" fill="rgb(236,23,11)"/><text x="84.6243%" y="191.50">macro_ex..</text></g><g><title>expand_crate (35,440,973 samples, 6.47%)</title><rect x="84.3777%" y="165" width="6.4656%" height="15" fill="rgb(205,117,38)"/><text x="84.6277%" y="175.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (570,389 samples, 0.10%)</title><rect x="90.7392%" y="149" width="0.1041%" height="15" fill="rgb(237,72,25)"/><text x="90.9892%" y="159.50"></text></g><g><title>late_resolve_crate (8,210,211 samples, 1.50%)</title><rect x="91.0405%" y="165" width="1.4978%" height="15" fill="rgb(244,70,9)"/><text x="91.2905%" y="175.50"></text></g><g><title>configure_and_expand (46,591,136 samples, 8.50%)</title><rect x="84.1659%" y="197" width="8.4997%" height="15" fill="rgb(217,125,39)"/><text x="84.4159%" y="207.50">configure_an..</text></g><g><title>resolve_crate (9,558,866 samples, 1.74%)</title><rect x="90.9217%" y="181" width="1.7438%" height="15" fill="rgb(235,36,10)"/><text x="91.1717%" y="191.50"></text></g><g><title>drop_ast (1,606,838 samples, 0.29%)</title><rect x="92.6656%" y="197" width="0.2931%" height="15" fill="rgb(251,123,47)"/><text x="92.9156%" y="207.50"></text></g><g><title>early_lint_checks (2,572,658 samples, 0.47%)</title><rect x="92.9623%" y="197" width="0.4693%" height="15" fill="rgb(221,13,13)"/><text x="93.2123%" y="207.50"></text></g><g><title>free_global_ctxt (7,328,132 samples, 1.34%)</title><rect x="93.4317%" y="197" width="1.3369%" height="15" fill="rgb(238,131,9)"/><text x="93.6817%" y="207.50"></text></g><g><title>generate_crate_metadata (3,460,038 samples, 0.63%)</title><rect x="94.7686%" y="197" width="0.6312%" height="15" fill="rgb(211,50,8)"/><text x="95.0186%" y="207.50"></text></g><g><title>hir_lowering (15,799,946 samples, 2.88%)</title><rect x="95.3998%" y="197" width="2.8824%" height="15" fill="rgb(245,182,24)"/><text x="95.6498%" y="207.50">hi..</text></g><g><title>parse_crate (6,818,436 samples, 1.24%)</title><rect x="98.2969%" y="197" width="1.2439%" height="15" fill="rgb(242,14,37)"/><text x="98.5469%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,651,028 samples, 0.30%)</title><rect x="99.5845%" y="197" width="0.3012%" height="15" fill="rgb(246,228,12)"/><text x="99.8345%" y="207.50"></text></g><g><title>all (548,149,657 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (548,149,657 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>