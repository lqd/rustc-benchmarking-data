<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (14,202,754 samples, 0.28%)</title><rect x="4.7955%" y="85" width="0.2767%" height="15" fill="rgb(227,0,7)"/><text x="5.0455%" y="95.50"></text></g><g><title>evaluate_obligation (11,912,343 samples, 0.23%)</title><rect x="4.8402%" y="69" width="0.2321%" height="15" fill="rgb(217,0,24)"/><text x="5.0902%" y="79.50"></text></g><g><title>needs_drop_raw (17,037,021 samples, 0.33%)</title><rect x="4.7414%" y="101" width="0.3320%" height="15" fill="rgb(221,193,54)"/><text x="4.9914%" y="111.50"></text></g><g><title>resolve_instance (9,529,148 samples, 0.19%)</title><rect x="5.0740%" y="101" width="0.1857%" height="15" fill="rgb(248,212,6)"/><text x="5.3240%" y="111.50"></text></g><g><title>thir_body (12,393,923 samples, 0.24%)</title><rect x="5.2678%" y="101" width="0.2415%" height="15" fill="rgb(208,68,35)"/><text x="5.5178%" y="111.50"></text></g><g><title>mir_const (97,204,989 samples, 1.89%)</title><rect x="3.6243%" y="149" width="1.8941%" height="15" fill="rgb(232,128,0)"/><text x="3.8743%" y="159.50">m..</text></g><g><title>unsafety_check_result (84,716,116 samples, 1.65%)</title><rect x="3.8676%" y="133" width="1.6507%" height="15" fill="rgb(207,160,47)"/><text x="4.1176%" y="143.50"></text></g><g><title>mir_built (75,576,082 samples, 1.47%)</title><rect x="4.0457%" y="117" width="1.4726%" height="15" fill="rgb(228,23,34)"/><text x="4.2957%" y="127.50"></text></g><g><title>mir_promoted (109,770,521 samples, 2.14%)</title><rect x="3.4335%" y="165" width="2.1389%" height="15" fill="rgb(218,30,26)"/><text x="3.6835%" y="175.50">m..</text></g><g><title>type_op_ascribe_user_type (8,318,072 samples, 0.16%)</title><rect x="5.5724%" y="165" width="0.1621%" height="15" fill="rgb(220,122,19)"/><text x="5.8224%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (6,818,517 samples, 0.13%)</title><rect x="5.7345%" y="165" width="0.1329%" height="15" fill="rgb(250,228,42)"/><text x="5.9845%" y="175.50"></text></g><g><title>type_op_prove_predicate (31,964,568 samples, 0.62%)</title><rect x="5.9681%" y="165" width="0.6228%" height="15" fill="rgb(240,193,28)"/><text x="6.2181%" y="175.50"></text></g><g><title>MIR_borrow_checking (331,031,019 samples, 6.45%)</title><rect x="0.1413%" y="197" width="6.4502%" height="15" fill="rgb(216,20,37)"/><text x="0.3913%" y="207.50">MIR_borr..</text></g><g><title>mir_borrowck (328,969,178 samples, 6.41%)</title><rect x="0.1814%" y="181" width="6.4100%" height="15" fill="rgb(206,188,39)"/><text x="0.4314%" y="191.50">mir_borr..</text></g><g><title>check_mod_attrs (8,656,266 samples, 0.17%)</title><rect x="6.7065%" y="181" width="0.1687%" height="15" fill="rgb(217,207,13)"/><text x="6.9565%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (5,913,665 samples, 0.12%)</title><rect x="6.9570%" y="181" width="0.1152%" height="15" fill="rgb(231,73,38)"/><text x="7.2070%" y="191.50"></text></g><g><title>misc_checking_1 (20,129,603 samples, 0.39%)</title><rect x="6.7008%" y="197" width="0.3922%" height="15" fill="rgb(225,20,46)"/><text x="6.9508%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (9,089,990 samples, 0.18%)</title><rect x="7.0931%" y="181" width="0.1771%" height="15" fill="rgb(210,31,41)"/><text x="7.3431%" y="191.50"></text></g><g><title>check_mod_liveness (7,603,599 samples, 0.15%)</title><rect x="7.1221%" y="165" width="0.1482%" height="15" fill="rgb(221,200,47)"/><text x="7.3721%" y="175.50"></text></g><g><title>misc_checking_2 (17,491,463 samples, 0.34%)</title><rect x="7.0931%" y="197" width="0.3408%" height="15" fill="rgb(226,26,5)"/><text x="7.3431%" y="207.50"></text></g><g><title>match_checking (8,397,843 samples, 0.16%)</title><rect x="7.2703%" y="181" width="0.1636%" height="15" fill="rgb(249,33,26)"/><text x="7.5203%" y="191.50"></text></g><g><title>check_match (7,647,954 samples, 0.15%)</title><rect x="7.2849%" y="165" width="0.1490%" height="15" fill="rgb(235,183,28)"/><text x="7.5349%" y="175.50"></text></g><g><title>check_private_in_public (5,786,554 samples, 0.11%)</title><rect x="7.4343%" y="181" width="0.1128%" height="15" fill="rgb(221,5,38)"/><text x="7.6843%" y="191.50"></text></g><g><title>death_checking (9,753,588 samples, 0.19%)</title><rect x="7.5471%" y="181" width="0.1901%" height="15" fill="rgb(247,18,42)"/><text x="7.7971%" y="191.50"></text></g><g><title>param_env (7,920,521 samples, 0.15%)</title><rect x="8.0115%" y="149" width="0.1543%" height="15" fill="rgb(241,131,45)"/><text x="8.2615%" y="159.50"></text></g><g><title>crate_lints (23,767,364 samples, 0.46%)</title><rect x="7.7372%" y="165" width="0.4631%" height="15" fill="rgb(249,31,29)"/><text x="7.9872%" y="175.50"></text></g><g><title>lint_checking (33,414,080 samples, 0.65%)</title><rect x="7.7371%" y="181" width="0.6511%" height="15" fill="rgb(225,111,53)"/><text x="7.9871%" y="191.50"></text></g><g><title>module_lints (9,643,096 samples, 0.19%)</title><rect x="8.2003%" y="165" width="0.1879%" height="15" fill="rgb(238,160,17)"/><text x="8.4503%" y="175.50"></text></g><g><title>lint_mod (9,541,554 samples, 0.19%)</title><rect x="8.2023%" y="149" width="0.1859%" height="15" fill="rgb(214,148,48)"/><text x="8.4523%" y="159.50"></text></g><g><title>privacy_access_levels (9,940,730 samples, 0.19%)</title><rect x="8.3882%" y="181" width="0.1937%" height="15" fill="rgb(232,36,49)"/><text x="8.6382%" y="191.50"></text></g><g><title>privacy_checking_modules (19,245,193 samples, 0.37%)</title><rect x="8.5819%" y="181" width="0.3750%" height="15" fill="rgb(209,103,24)"/><text x="8.8319%" y="191.50"></text></g><g><title>check_mod_privacy (19,134,783 samples, 0.37%)</title><rect x="8.5840%" y="165" width="0.3728%" height="15" fill="rgb(229,88,8)"/><text x="8.8340%" y="175.50"></text></g><g><title>misc_checking_3 (78,466,868 samples, 1.53%)</title><rect x="7.4339%" y="197" width="1.5289%" height="15" fill="rgb(213,181,19)"/><text x="7.6839%" y="207.50"></text></g><g><title>impl_trait_ref (9,170,048 samples, 0.18%)</title><rect x="9.2604%" y="133" width="0.1787%" height="15" fill="rgb(254,191,54)"/><text x="9.5104%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,882,435 samples, 0.13%)</title><rect x="9.3050%" y="117" width="0.1341%" height="15" fill="rgb(241,83,37)"/><text x="9.5550%" y="127.50"></text></g><g><title>coherent_trait (26,528,763 samples, 0.52%)</title><rect x="8.9923%" y="165" width="0.5169%" height="15" fill="rgb(233,36,39)"/><text x="9.2423%" y="175.50"></text></g><g><title>specialization_graph_of (25,727,845 samples, 0.50%)</title><rect x="9.0079%" y="149" width="0.5013%" height="15" fill="rgb(226,3,54)"/><text x="9.2579%" y="159.50"></text></g><g><title>coherence_checking (27,848,107 samples, 0.54%)</title><rect x="8.9909%" y="181" width="0.5426%" height="15" fill="rgb(245,192,40)"/><text x="9.2409%" y="191.50"></text></g><g><title>evaluate_obligation (17,174,345 samples, 0.33%)</title><rect x="14.4629%" y="133" width="0.3346%" height="15" fill="rgb(238,167,29)"/><text x="14.7129%" y="143.50"></text></g><g><title>method_autoderef_steps (11,216,283 samples, 0.22%)</title><rect x="14.9002%" y="133" width="0.2186%" height="15" fill="rgb(232,182,51)"/><text x="15.1502%" y="143.50"></text></g><g><title>evaluate_obligation (5,472,072 samples, 0.11%)</title><rect x="16.1153%" y="117" width="0.1066%" height="15" fill="rgb(231,60,39)"/><text x="16.3653%" y="127.50"></text></g><g><title>typeck (59,753,852 samples, 1.16%)</title><rect x="15.1686%" y="133" width="1.1643%" height="15" fill="rgb(208,69,12)"/><text x="15.4186%" y="143.50"></text></g><g><title>item_bodies_checking (348,450,992 samples, 6.79%)</title><rect x="9.5514%" y="181" width="6.7896%" height="15" fill="rgb(235,93,37)"/><text x="9.8014%" y="191.50">item_bodi..</text></g><g><title>typeck_item_bodies (348,446,592 samples, 6.79%)</title><rect x="9.5515%" y="165" width="6.7895%" height="15" fill="rgb(213,116,39)"/><text x="9.8015%" y="175.50">typeck_it..</text></g><g><title>typeck (346,977,946 samples, 6.76%)</title><rect x="9.5801%" y="149" width="6.7609%" height="15" fill="rgb(222,207,29)"/><text x="9.8301%" y="159.50">typeck</text></g><g><title>mir_borrowck (7,244,541 samples, 0.14%)</title><rect x="18.0433%" y="85" width="0.1412%" height="15" fill="rgb(206,96,30)"/><text x="18.2933%" y="95.50"></text></g><g><title>mir_borrowck (17,248,237 samples, 0.34%)</title><rect x="17.9131%" y="101" width="0.3361%" height="15" fill="rgb(218,138,4)"/><text x="18.1631%" y="111.50"></text></g><g><title>mir_promoted (5,448,145 samples, 0.11%)</title><rect x="18.2492%" y="101" width="0.1062%" height="15" fill="rgb(250,191,14)"/><text x="18.4992%" y="111.50"></text></g><g><title>type_op_prove_predicate (7,385,128 samples, 0.14%)</title><rect x="18.4451%" y="101" width="0.1439%" height="15" fill="rgb(239,60,40)"/><text x="18.6951%" y="111.50"></text></g><g><title>mir_borrowck (69,810,061 samples, 1.36%)</title><rect x="17.2288%" y="117" width="1.3603%" height="15" fill="rgb(206,27,48)"/><text x="17.4788%" y="127.50"></text></g><g><title>evaluate_obligation (9,068,851 samples, 0.18%)</title><rect x="20.6655%" y="37" width="0.1767%" height="15" fill="rgb(225,35,8)"/><text x="20.9155%" y="47.50"></text></g><g><title>mir_built (123,919,578 samples, 2.41%)</title><rect x="18.6305%" y="69" width="2.4146%" height="15" fill="rgb(250,213,24)"/><text x="18.8805%" y="79.50">mi..</text></g><g><title>typeck (118,561,676 samples, 2.31%)</title><rect x="18.7349%" y="53" width="2.3102%" height="15" fill="rgb(247,123,22)"/><text x="18.9849%" y="63.50">t..</text></g><g><title>mir_built (12,834,391 samples, 0.25%)</title><rect x="21.0794%" y="53" width="0.2501%" height="15" fill="rgb(231,138,38)"/><text x="21.3294%" y="63.50"></text></g><g><title>mir_const (144,666,987 samples, 2.82%)</title><rect x="18.6043%" y="101" width="2.8189%" height="15" fill="rgb(231,145,46)"/><text x="18.8543%" y="111.50">mi..</text></g><g><title>unsafety_check_result (143,710,621 samples, 2.80%)</title><rect x="18.6230%" y="85" width="2.8002%" height="15" fill="rgb(251,118,11)"/><text x="18.8730%" y="95.50">un..</text></g><g><title>unsafety_check_result (19,402,608 samples, 0.38%)</title><rect x="21.0451%" y="69" width="0.3781%" height="15" fill="rgb(217,147,25)"/><text x="21.2951%" y="79.50"></text></g><g><title>mir_promoted (145,549,552 samples, 2.84%)</title><rect x="18.5891%" y="117" width="2.8361%" height="15" fill="rgb(247,81,37)"/><text x="18.8391%" y="127.50">mi..</text></g><g><title>type_of (237,317,511 samples, 4.62%)</title><rect x="16.9063%" y="149" width="4.6242%" height="15" fill="rgb(209,12,38)"/><text x="17.1563%" y="159.50">type_..</text></g><g><title>mir_borrowck (236,590,431 samples, 4.61%)</title><rect x="16.9205%" y="133" width="4.6100%" height="15" fill="rgb(227,1,9)"/><text x="17.1705%" y="143.50">mir_b..</text></g><g><title>item_types_checking (272,272,430 samples, 5.31%)</title><rect x="16.3411%" y="181" width="5.3053%" height="15" fill="rgb(248,47,43)"/><text x="16.5911%" y="191.50">item_t..</text></g><g><title>check_mod_item_types (272,085,030 samples, 5.30%)</title><rect x="16.3447%" y="165" width="5.3016%" height="15" fill="rgb(221,10,30)"/><text x="16.5947%" y="175.50">check_..</text></g><g><title>typeck (5,947,153 samples, 0.12%)</title><rect x="21.5305%" y="149" width="0.1159%" height="15" fill="rgb(210,229,1)"/><text x="21.7805%" y="159.50"></text></g><g><title>fn_sig (5,518,776 samples, 0.11%)</title><rect x="21.7543%" y="149" width="0.1075%" height="15" fill="rgb(222,148,37)"/><text x="22.0043%" y="159.50"></text></g><g><title>is_late_bound_map (9,425,601 samples, 0.18%)</title><rect x="21.9125%" y="133" width="0.1837%" height="15" fill="rgb(234,67,33)"/><text x="22.1625%" y="143.50"></text></g><g><title>resolve_lifetimes (9,154,218 samples, 0.18%)</title><rect x="21.9177%" y="117" width="0.1784%" height="15" fill="rgb(247,98,35)"/><text x="22.1677%" y="127.50"></text></g><g><title>lint_levels (6,028,637 samples, 0.12%)</title><rect x="21.9786%" y="101" width="0.1175%" height="15" fill="rgb(247,138,52)"/><text x="22.2286%" y="111.50"></text></g><g><title>generics_of (14,466,425 samples, 0.28%)</title><rect x="21.8618%" y="149" width="0.2819%" height="15" fill="rgb(213,79,30)"/><text x="22.1118%" y="159.50"></text></g><g><title>explicit_predicates_of (8,075,562 samples, 0.16%)</title><rect x="22.2079%" y="117" width="0.1574%" height="15" fill="rgb(246,177,23)"/><text x="22.4579%" y="127.50"></text></g><g><title>predicates_of (16,677,756 samples, 0.32%)</title><rect x="22.1555%" y="149" width="0.3250%" height="15" fill="rgb(230,62,27)"/><text x="22.4055%" y="159.50"></text></g><g><title>predicates_defined_on (15,622,607 samples, 0.30%)</title><rect x="22.1761%" y="133" width="0.3044%" height="15" fill="rgb(216,154,8)"/><text x="22.4261%" y="143.50"></text></g><g><title>inferred_outlives_of (5,912,856 samples, 0.12%)</title><rect x="22.3653%" y="117" width="0.1152%" height="15" fill="rgb(244,35,45)"/><text x="22.6153%" y="127.50"></text></g><g><title>inferred_outlives_crate (5,453,000 samples, 0.11%)</title><rect x="22.3742%" y="101" width="0.1063%" height="15" fill="rgb(251,115,12)"/><text x="22.6242%" y="111.50"></text></g><g><title>type_collecting (45,173,130 samples, 0.88%)</title><rect x="21.6477%" y="181" width="0.8802%" height="15" fill="rgb(240,54,50)"/><text x="21.8977%" y="191.50"></text></g><g><title>collect_mod_item_types (45,024,539 samples, 0.88%)</title><rect x="21.6506%" y="165" width="0.8773%" height="15" fill="rgb(233,84,52)"/><text x="21.9006%" y="175.50"></text></g><g><title>evaluate_obligation (13,224,899 samples, 0.26%)</title><rect x="23.3747%" y="149" width="0.2577%" height="15" fill="rgb(207,117,47)"/><text x="23.6247%" y="159.50"></text></g><g><title>region_scope_tree (5,259,681 samples, 0.10%)</title><rect x="23.8357%" y="149" width="0.1025%" height="15" fill="rgb(249,43,39)"/><text x="24.0857%" y="159.50"></text></g><g><title>check_impl_item_well_formed (67,828,047 samples, 1.32%)</title><rect x="22.6172%" y="165" width="1.3216%" height="15" fill="rgb(209,38,44)"/><text x="22.8672%" y="175.50"></text></g><g><title>param_env (6,809,642 samples, 0.13%)</title><rect x="24.7611%" y="149" width="0.1327%" height="15" fill="rgb(236,212,23)"/><text x="25.0111%" y="159.50"></text></g><g><title>check_item_well_formed (52,460,382 samples, 1.02%)</title><rect x="23.9389%" y="165" width="1.0222%" height="15" fill="rgb(242,79,21)"/><text x="24.1889%" y="175.50"></text></g><g><title>analysis (1,283,104,154 samples, 25.00%)</title><rect x="0.0674%" y="213" width="25.0015%" height="15" fill="rgb(211,96,35)"/><text x="0.3174%" y="223.50">analysis</text></g><g><title>type_check_crate (826,581,888 samples, 16.11%)</title><rect x="8.9628%" y="197" width="16.1061%" height="15" fill="rgb(253,215,40)"/><text x="9.2128%" y="207.50">type_check_crate</text></g><g><title>wf_checking (130,281,780 samples, 2.54%)</title><rect x="22.5303%" y="181" width="2.5386%" height="15" fill="rgb(211,81,21)"/><text x="22.7803%" y="191.50">wf..</text></g><g><title>check_trait_item_well_formed (5,534,122 samples, 0.11%)</title><rect x="24.9611%" y="165" width="0.1078%" height="15" fill="rgb(208,190,38)"/><text x="25.2111%" y="175.50"></text></g><g><title>AST_validation (5,238,228 samples, 0.10%)</title><rect x="25.0833%" y="197" width="0.1021%" height="15" fill="rgb(235,213,38)"/><text x="25.3333%" y="207.50"></text></g><g><title>macro_expand_crate (3,625,923,232 samples, 70.65%)</title><rect x="25.2344%" y="197" width="70.6517%" height="15" fill="rgb(237,122,38)"/><text x="25.4844%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (3,625,903,232 samples, 70.65%)</title><rect x="25.2348%" y="181" width="70.6513%" height="15" fill="rgb(244,218,35)"/><text x="25.4848%" y="191.50">expand_crate</text></g><g><title>late_resolve_crate (24,220,138 samples, 0.47%)</title><rect x="95.9874%" y="181" width="0.4719%" height="15" fill="rgb(240,68,47)"/><text x="96.2374%" y="191.50"></text></g><g><title>configure_and_expand (3,667,794,295 samples, 71.47%)</title><rect x="25.0800%" y="213" width="71.4676%" height="15" fill="rgb(210,16,53)"/><text x="25.3300%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (33,868,964 samples, 0.66%)</title><rect x="95.8876%" y="197" width="0.6599%" height="15" fill="rgb(235,124,12)"/><text x="96.1376%" y="207.50"></text></g><g><title>drop_ast (8,005,249 samples, 0.16%)</title><rect x="96.5476%" y="213" width="0.1560%" height="15" fill="rgb(224,169,11)"/><text x="96.7976%" y="223.50"></text></g><g><title>early_lint_checks (11,226,164 samples, 0.22%)</title><rect x="96.7042%" y="213" width="0.2187%" height="15" fill="rgb(250,166,2)"/><text x="96.9542%" y="223.50"></text></g><g><title>free_global_ctxt (15,316,689 samples, 0.30%)</title><rect x="96.9229%" y="213" width="0.2984%" height="15" fill="rgb(242,216,29)"/><text x="97.1729%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (22,435,745 samples, 0.44%)</title><rect x="98.2325%" y="181" width="0.4372%" height="15" fill="rgb(230,116,27)"/><text x="98.4825%" y="191.50"></text></g><g><title>optimized_mir (39,576,528 samples, 0.77%)</title><rect x="97.8992%" y="197" width="0.7712%" height="15" fill="rgb(228,99,48)"/><text x="98.1492%" y="207.50"></text></g><g><title>generate_crate_metadata (74,885,088 samples, 1.46%)</title><rect x="97.2214%" y="213" width="1.4591%" height="15" fill="rgb(253,11,6)"/><text x="97.4714%" y="223.50"></text></g><g><title>hir_lowering (58,591,798 samples, 1.14%)</title><rect x="98.6805%" y="213" width="1.1417%" height="15" fill="rgb(247,143,39)"/><text x="98.9305%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (5,235,328 samples, 0.10%)</title><rect x="99.8414%" y="213" width="0.1020%" height="15" fill="rgb(236,97,10)"/><text x="100.0914%" y="223.50"></text></g><g><title>all (5,132,108,612 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (5,132,108,612 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>