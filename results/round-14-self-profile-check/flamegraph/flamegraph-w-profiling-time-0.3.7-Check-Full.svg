<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (556,215 samples, 0.13%)</title><rect x="14.0037%" y="133" width="0.1306%" height="15" fill="rgb(227,0,7)"/><text x="14.2537%" y="143.50"></text></g><g><title>param_env (427,445 samples, 0.10%)</title><rect x="15.9608%" y="101" width="0.1004%" height="15" fill="rgb(217,0,24)"/><text x="16.2108%" y="111.50"></text></g><g><title>codegen_fn_attrs (436,389 samples, 0.10%)</title><rect x="16.4202%" y="85" width="0.1025%" height="15" fill="rgb(221,193,54)"/><text x="16.6702%" y="95.50"></text></g><g><title>needs_drop_raw (979,861 samples, 0.23%)</title><rect x="18.6838%" y="69" width="0.2301%" height="15" fill="rgb(248,212,6)"/><text x="18.9338%" y="79.50"></text></g><g><title>is_copy_raw (775,988 samples, 0.18%)</title><rect x="18.7317%" y="53" width="0.1822%" height="15" fill="rgb(208,68,35)"/><text x="18.9817%" y="63.50"></text></g><g><title>evaluate_obligation (649,687 samples, 0.15%)</title><rect x="18.7613%" y="37" width="0.1526%" height="15" fill="rgb(232,128,0)"/><text x="19.0113%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (947,323 samples, 0.22%)</title><rect x="19.1487%" y="53" width="0.2225%" height="15" fill="rgb(207,160,47)"/><text x="19.3987%" y="63.50"></text></g><g><title>specialization_graph_of (859,289 samples, 0.20%)</title><rect x="19.4357%" y="53" width="0.2018%" height="15" fill="rgb(228,23,34)"/><text x="19.6857%" y="63.50"></text></g><g><title>impl_trait_ref (428,724 samples, 0.10%)</title><rect x="19.5368%" y="37" width="0.1007%" height="15" fill="rgb(218,30,26)"/><text x="19.7868%" y="47.50"></text></g><g><title>resolve_instance (3,204,408 samples, 0.75%)</title><rect x="18.9220%" y="69" width="0.7526%" height="15" fill="rgb(220,122,19)"/><text x="19.1720%" y="79.50"></text></g><g><title>thir_body (3,615,962 samples, 0.85%)</title><rect x="19.6994%" y="69" width="0.8492%" height="15" fill="rgb(250,228,42)"/><text x="19.9494%" y="79.50"></text></g><g><title>mir_const (22,467,826 samples, 5.28%)</title><rect x="15.2874%" y="117" width="5.2766%" height="15" fill="rgb(240,193,28)"/><text x="15.5374%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (19,173,083 samples, 4.50%)</title><rect x="16.0612%" y="101" width="4.5028%" height="15" fill="rgb(216,20,37)"/><text x="16.3112%" y="111.50">unsaf..</text></g><g><title>mir_built (17,207,828 samples, 4.04%)</title><rect x="16.5227%" y="85" width="4.0413%" height="15" fill="rgb(206,188,39)"/><text x="16.7727%" y="95.50">mir_..</text></g><g><title>thir_body (3,543,937 samples, 0.83%)</title><rect x="24.3975%" y="53" width="0.8323%" height="15" fill="rgb(217,207,13)"/><text x="24.6475%" y="63.50"></text></g><g><title>mir_const (16,701,165 samples, 3.92%)</title><rect x="21.3171%" y="101" width="3.9223%" height="15" fill="rgb(231,73,38)"/><text x="21.5671%" y="111.50">mir_..</text></g><g><title>unsafety_check_result (14,131,360 samples, 3.32%)</title><rect x="21.9206%" y="85" width="3.3188%" height="15" fill="rgb(225,20,46)"/><text x="22.1706%" y="95.50">uns..</text></g><g><title>mir_built (12,739,293 samples, 2.99%)</title><rect x="22.2475%" y="69" width="2.9919%" height="15" fill="rgb(210,31,41)"/><text x="22.4975%" y="79.50">mir..</text></g><g><title>mir_promoted (47,479,477 samples, 11.15%)</title><rect x="14.1411%" y="133" width="11.1507%" height="15" fill="rgb(221,200,47)"/><text x="14.3911%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (20,130,736 samples, 4.73%)</title><rect x="20.5640%" y="117" width="4.7278%" height="15" fill="rgb(226,26,5)"/><text x="20.8140%" y="127.50">mir_co..</text></g><g><title>type_op_ascribe_user_type (570,190 samples, 0.13%)</title><rect x="25.2932%" y="133" width="0.1339%" height="15" fill="rgb(249,33,26)"/><text x="25.5432%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (631,881 samples, 0.15%)</title><rect x="25.4271%" y="133" width="0.1484%" height="15" fill="rgb(235,183,28)"/><text x="25.6771%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,126,661 samples, 0.26%)</title><rect x="25.6098%" y="133" width="0.2646%" height="15" fill="rgb(221,5,38)"/><text x="25.8598%" y="143.50"></text></g><g><title>normalize_projection_ty (789,346 samples, 0.19%)</title><rect x="25.6891%" y="117" width="0.1854%" height="15" fill="rgb(247,18,42)"/><text x="25.9391%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,652,075 samples, 0.86%)</title><rect x="25.8744%" y="133" width="0.8577%" height="15" fill="rgb(241,131,45)"/><text x="26.1244%" y="143.50"></text></g><g><title>MIR_borrow_checking (111,346,899 samples, 26.15%)</title><rect x="0.5855%" y="165" width="26.1501%" height="15" fill="rgb(249,31,29)"/><text x="0.8355%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (110,457,059 samples, 25.94%)</title><rect x="0.7945%" y="149" width="25.9411%" height="15" fill="rgb(225,111,53)"/><text x="1.0445%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (9,613,727 samples, 2.26%)</title><rect x="26.7356%" y="165" width="2.2578%" height="15" fill="rgb(238,160,17)"/><text x="26.9856%" y="175.50">M..</text></g><g><title>mir_drops_elaborated_and_const_checked (9,139,685 samples, 2.15%)</title><rect x="26.8469%" y="149" width="2.1465%" height="15" fill="rgb(214,148,48)"/><text x="27.0969%" y="159.50">m..</text></g><g><title>hir_module_items (1,127,043 samples, 0.26%)</title><rect x="28.9934%" y="165" width="0.2647%" height="15" fill="rgb(232,36,49)"/><text x="29.2434%" y="175.50"></text></g><g><title>codegen_fn_attrs (458,474 samples, 0.11%)</title><rect x="29.7858%" y="101" width="0.1077%" height="15" fill="rgb(209,103,24)"/><text x="30.0358%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,308,292 samples, 0.31%)</title><rect x="29.5953%" y="133" width="0.3073%" height="15" fill="rgb(229,88,8)"/><text x="29.8453%" y="143.50"></text></g><g><title>should_inherit_track_caller (1,051,439 samples, 0.25%)</title><rect x="29.6557%" y="117" width="0.2469%" height="15" fill="rgb(213,181,19)"/><text x="29.9057%" y="127.50"></text></g><g><title>check_mod_attrs (2,690,849 samples, 0.63%)</title><rect x="29.2707%" y="149" width="0.6320%" height="15" fill="rgb(254,191,54)"/><text x="29.5207%" y="159.50"></text></g><g><title>check_mod_const_bodies (650,537 samples, 0.15%)</title><rect x="29.9026%" y="149" width="0.1528%" height="15" fill="rgb(241,83,37)"/><text x="30.1526%" y="159.50"></text></g><g><title>lookup_deprecation_entry (652,167 samples, 0.15%)</title><rect x="30.2955%" y="133" width="0.1532%" height="15" fill="rgb(233,36,39)"/><text x="30.5455%" y="143.50"></text></g><g><title>stability_index (565,826 samples, 0.13%)</title><rect x="30.3158%" y="117" width="0.1329%" height="15" fill="rgb(226,3,54)"/><text x="30.5658%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,423,116 samples, 0.33%)</title><rect x="30.1488%" y="149" width="0.3342%" height="15" fill="rgb(245,192,40)"/><text x="30.3988%" y="159.50"></text></g><g><title>misc_checking_1 (5,414,971 samples, 1.27%)</title><rect x="29.2583%" y="165" width="1.2717%" height="15" fill="rgb(238,167,29)"/><text x="29.5083%" y="175.50"></text></g><g><title>check_mod_intrinsics (457,308 samples, 0.11%)</title><rect x="30.5352%" y="133" width="0.1074%" height="15" fill="rgb(232,182,51)"/><text x="30.7852%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (2,132,544 samples, 0.50%)</title><rect x="30.5304%" y="149" width="0.5008%" height="15" fill="rgb(231,60,39)"/><text x="30.7804%" y="159.50"></text></g><g><title>check_mod_liveness (1,654,846 samples, 0.39%)</title><rect x="30.6426%" y="133" width="0.3886%" height="15" fill="rgb(208,69,12)"/><text x="30.8926%" y="143.50"></text></g><g><title>misc_checking_2 (5,414,821 samples, 1.27%)</title><rect x="30.5300%" y="165" width="1.2717%" height="15" fill="rgb(235,93,37)"/><text x="30.7800%" y="175.50"></text></g><g><title>match_checking (3,280,437 samples, 0.77%)</title><rect x="31.0313%" y="149" width="0.7704%" height="15" fill="rgb(213,116,39)"/><text x="31.2813%" y="159.50"></text></g><g><title>check_match (3,068,364 samples, 0.72%)</title><rect x="31.0811%" y="133" width="0.7206%" height="15" fill="rgb(222,207,29)"/><text x="31.3311%" y="143.50"></text></g><g><title>check_private_in_public (1,158,513 samples, 0.27%)</title><rect x="31.8047%" y="149" width="0.2721%" height="15" fill="rgb(206,96,30)"/><text x="32.0547%" y="159.50"></text></g><g><title>death_checking (2,218,014 samples, 0.52%)</title><rect x="32.0768%" y="149" width="0.5209%" height="15" fill="rgb(218,138,4)"/><text x="32.3268%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,102,903 samples, 0.26%)</title><rect x="33.2371%" y="117" width="0.2590%" height="15" fill="rgb(250,191,14)"/><text x="33.4871%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,096,943 samples, 0.26%)</title><rect x="33.2385%" y="101" width="0.2576%" height="15" fill="rgb(239,60,40)"/><text x="33.4885%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,084,462 samples, 0.25%)</title><rect x="33.2415%" y="85" width="0.2547%" height="15" fill="rgb(206,27,48)"/><text x="33.4915%" y="95.50"></text></g><g><title>param_env (849,281 samples, 0.20%)</title><rect x="33.4961%" y="117" width="0.1995%" height="15" fill="rgb(225,35,8)"/><text x="33.7461%" y="127.50"></text></g><g><title>crate_lints (5,865,456 samples, 1.38%)</title><rect x="32.5983%" y="133" width="1.3775%" height="15" fill="rgb(250,213,24)"/><text x="32.8483%" y="143.50"></text></g><g><title>type_of (1,186,173 samples, 0.28%)</title><rect x="33.6973%" y="117" width="0.2786%" height="15" fill="rgb(247,123,22)"/><text x="33.9473%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (955,612 samples, 0.22%)</title><rect x="33.7514%" y="101" width="0.2244%" height="15" fill="rgb(231,138,38)"/><text x="34.0014%" y="111.50"></text></g><g><title>lint_checking (8,264,303 samples, 1.94%)</title><rect x="32.5977%" y="149" width="1.9409%" height="15" fill="rgb(231,145,46)"/><text x="32.8477%" y="159.50">l..</text></g><g><title>module_lints (2,396,097 samples, 0.56%)</title><rect x="33.9758%" y="133" width="0.5627%" height="15" fill="rgb(251,118,11)"/><text x="34.2258%" y="143.50"></text></g><g><title>lint_mod (2,379,057 samples, 0.56%)</title><rect x="33.9798%" y="117" width="0.5587%" height="15" fill="rgb(217,147,25)"/><text x="34.2298%" y="127.50"></text></g><g><title>privacy_access_levels (2,350,246 samples, 0.55%)</title><rect x="34.5386%" y="149" width="0.5520%" height="15" fill="rgb(247,81,37)"/><text x="34.7886%" y="159.50"></text></g><g><title>privacy_checking_modules (3,819,001 samples, 0.90%)</title><rect x="35.0905%" y="149" width="0.8969%" height="15" fill="rgb(209,12,38)"/><text x="35.3405%" y="159.50"></text></g><g><title>check_mod_privacy (3,807,091 samples, 0.89%)</title><rect x="35.0933%" y="133" width="0.8941%" height="15" fill="rgb(227,1,9)"/><text x="35.3433%" y="143.50"></text></g><g><title>misc_checking_3 (17,874,828 samples, 4.20%)</title><rect x="31.8017%" y="165" width="4.1979%" height="15" fill="rgb(248,47,43)"/><text x="32.0517%" y="175.50">misc_..</text></g><g><title>impl_parent (3,694,964 samples, 0.87%)</title><rect x="37.9210%" y="101" width="0.8678%" height="15" fill="rgb(221,10,30)"/><text x="38.1710%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,001,266 samples, 0.47%)</title><rect x="38.3188%" y="85" width="0.4700%" height="15" fill="rgb(210,229,1)"/><text x="38.5688%" y="95.50"></text></g><g><title>impl_trait_ref (7,021,372 samples, 1.65%)</title><rect x="38.7891%" y="101" width="1.6490%" height="15" fill="rgb(222,148,37)"/><text x="39.0391%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,504,934 samples, 1.29%)</title><rect x="39.1452%" y="85" width="1.2928%" height="15" fill="rgb(234,67,33)"/><text x="39.3952%" y="95.50"></text></g><g><title>trait_impls_of (1,316,748 samples, 0.31%)</title><rect x="40.4657%" y="101" width="0.3092%" height="15" fill="rgb(247,98,35)"/><text x="40.7157%" y="111.50"></text></g><g><title>coherent_trait (19,709,560 samples, 4.63%)</title><rect x="36.1465%" y="133" width="4.6288%" height="15" fill="rgb(247,138,52)"/><text x="36.3965%" y="143.50">coher..</text></g><g><title>specialization_graph_of (19,083,004 samples, 4.48%)</title><rect x="36.2937%" y="117" width="4.4817%" height="15" fill="rgb(213,79,30)"/><text x="36.5437%" y="127.50">speci..</text></g><g><title>coherence_checking (19,994,193 samples, 4.70%)</title><rect x="36.1383%" y="149" width="4.6957%" height="15" fill="rgb(246,177,23)"/><text x="36.3883%" y="159.50">coher..</text></g><g><title>associated_item (780,309 samples, 0.18%)</title><rect x="63.9023%" y="85" width="0.1833%" height="15" fill="rgb(230,62,27)"/><text x="64.1523%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (641,358 samples, 0.15%)</title><rect x="63.9349%" y="69" width="0.1506%" height="15" fill="rgb(216,154,8)"/><text x="64.1849%" y="79.50"></text></g><g><title>associated_items (1,286,226 samples, 0.30%)</title><rect x="63.7948%" y="101" width="0.3021%" height="15" fill="rgb(244,35,45)"/><text x="64.0448%" y="111.50"></text></g><g><title>generics_of (844,488 samples, 0.20%)</title><rect x="65.6549%" y="85" width="0.1983%" height="15" fill="rgb(251,115,12)"/><text x="65.9049%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (620,754 samples, 0.15%)</title><rect x="65.7074%" y="69" width="0.1458%" height="15" fill="rgb(240,54,50)"/><text x="65.9574%" y="79.50"></text></g><g><title>predicates_of (919,253 samples, 0.22%)</title><rect x="65.9777%" y="85" width="0.2159%" height="15" fill="rgb(233,84,52)"/><text x="66.2277%" y="95.50"></text></g><g><title>predicates_defined_on (515,527 samples, 0.12%)</title><rect x="66.0725%" y="69" width="0.1211%" height="15" fill="rgb(207,117,47)"/><text x="66.3225%" y="79.50"></text></g><g><title>specializes (1,807,781 samples, 0.42%)</title><rect x="66.1936%" y="85" width="0.4246%" height="15" fill="rgb(249,43,39)"/><text x="66.4436%" y="95.50"></text></g><g><title>param_env (1,105,638 samples, 0.26%)</title><rect x="66.3585%" y="69" width="0.2597%" height="15" fill="rgb(209,38,44)"/><text x="66.6085%" y="79.50"></text></g><g><title>def_span (442,022 samples, 0.10%)</title><rect x="66.5143%" y="53" width="0.1038%" height="15" fill="rgb(236,212,23)"/><text x="66.7643%" y="63.50"></text></g><g><title>evaluate_obligation (10,604,025 samples, 2.49%)</title><rect x="64.2208%" y="101" width="2.4904%" height="15" fill="rgb(242,79,21)"/><text x="64.4708%" y="111.50">ev..</text></g><g><title>predicates_of (492,506 samples, 0.12%)</title><rect x="67.1845%" y="101" width="0.1157%" height="15" fill="rgb(211,96,35)"/><text x="67.4345%" y="111.50"></text></g><g><title>evaluate_obligation (712,307 samples, 0.17%)</title><rect x="68.0271%" y="85" width="0.1673%" height="15" fill="rgb(253,215,40)"/><text x="68.2771%" y="95.50"></text></g><g><title>typeck (3,993,355 samples, 0.94%)</title><rect x="67.3502%" y="101" width="0.9378%" height="15" fill="rgb(211,81,21)"/><text x="67.6002%" y="111.50"></text></g><g><title>item_bodies_checking (116,883,230 samples, 27.45%)</title><rect x="40.8946%" y="149" width="27.4503%" height="15" fill="rgb(208,190,38)"/><text x="41.1446%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (116,878,900 samples, 27.45%)</title><rect x="40.8956%" y="133" width="27.4493%" height="15" fill="rgb(235,213,38)"/><text x="41.1456%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (116,262,099 samples, 27.30%)</title><rect x="41.0404%" y="117" width="27.3044%" height="15" fill="rgb(237,122,38)"/><text x="41.2904%" y="127.50">typeck</text></g><g><title>typeck (631,189 samples, 0.15%)</title><rect x="69.8433%" y="117" width="0.1482%" height="15" fill="rgb(244,218,35)"/><text x="70.0933%" y="127.50"></text></g><g><title>item_types_checking (7,019,698 samples, 1.65%)</title><rect x="68.3449%" y="149" width="1.6486%" height="15" fill="rgb(240,68,47)"/><text x="68.5949%" y="159.50"></text></g><g><title>check_mod_item_types (7,002,348 samples, 1.64%)</title><rect x="68.3489%" y="133" width="1.6445%" height="15" fill="rgb(210,16,53)"/><text x="68.5989%" y="143.50"></text></g><g><title>mir_borrowck (876,090 samples, 0.21%)</title><rect x="70.7540%" y="37" width="0.2058%" height="15" fill="rgb(235,124,12)"/><text x="71.0040%" y="47.50"></text></g><g><title>mir_for_ctfe (1,287,234 samples, 0.30%)</title><rect x="70.6585%" y="69" width="0.3023%" height="15" fill="rgb(224,169,11)"/><text x="70.9085%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,172,444 samples, 0.28%)</title><rect x="70.6854%" y="53" width="0.2754%" height="15" fill="rgb(250,166,2)"/><text x="70.9354%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,802,821 samples, 0.66%)</title><rect x="70.4318%" y="117" width="0.6582%" height="15" fill="rgb(242,216,29)"/><text x="70.6818%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,777,751 samples, 0.65%)</title><rect x="70.4377%" y="101" width="0.6524%" height="15" fill="rgb(230,116,27)"/><text x="70.6877%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,750,531 samples, 0.65%)</title><rect x="70.4441%" y="85" width="0.6460%" height="15" fill="rgb(228,99,48)"/><text x="70.6941%" y="95.50"></text></g><g><title>typeck (547,715 samples, 0.13%)</title><rect x="70.9615%" y="69" width="0.1286%" height="15" fill="rgb(253,11,6)"/><text x="71.2115%" y="79.50"></text></g><g><title>late_bound_vars_map (1,086,311 samples, 0.26%)</title><rect x="71.3788%" y="101" width="0.2551%" height="15" fill="rgb(247,143,39)"/><text x="71.6288%" y="111.50"></text></g><g><title>resolve_lifetimes (905,370 samples, 0.21%)</title><rect x="71.4213%" y="85" width="0.2126%" height="15" fill="rgb(236,97,10)"/><text x="71.6713%" y="95.50"></text></g><g><title>fn_sig (2,399,534 samples, 0.56%)</title><rect x="71.0901%" y="117" width="0.5635%" height="15" fill="rgb(233,208,19)"/><text x="71.3401%" y="127.50"></text></g><g><title>named_region_map (2,264,065 samples, 0.53%)</title><rect x="71.8134%" y="101" width="0.5317%" height="15" fill="rgb(216,164,2)"/><text x="72.0634%" y="111.50"></text></g><g><title>resolve_lifetimes (2,176,145 samples, 0.51%)</title><rect x="71.8341%" y="85" width="0.5111%" height="15" fill="rgb(220,129,5)"/><text x="72.0841%" y="95.50"></text></g><g><title>lint_levels (1,225,133 samples, 0.29%)</title><rect x="72.0574%" y="69" width="0.2877%" height="15" fill="rgb(242,17,10)"/><text x="72.3074%" y="79.50"></text></g><g><title>generics_of (3,025,270 samples, 0.71%)</title><rect x="71.6536%" y="117" width="0.7105%" height="15" fill="rgb(242,107,0)"/><text x="71.9036%" y="127.50"></text></g><g><title>explicit_predicates_of (602,947 samples, 0.14%)</title><rect x="72.6940%" y="85" width="0.1416%" height="15" fill="rgb(251,28,31)"/><text x="72.9440%" y="95.50"></text></g><g><title>predicates_of (1,772,535 samples, 0.42%)</title><rect x="72.4864%" y="117" width="0.4163%" height="15" fill="rgb(233,223,10)"/><text x="72.7364%" y="127.50"></text></g><g><title>predicates_defined_on (1,431,510 samples, 0.34%)</title><rect x="72.5664%" y="101" width="0.3362%" height="15" fill="rgb(215,21,27)"/><text x="72.8164%" y="111.50"></text></g><g><title>type_collecting (12,902,593 samples, 3.03%)</title><rect x="69.9954%" y="149" width="3.0302%" height="15" fill="rgb(232,23,21)"/><text x="70.2454%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (12,879,903 samples, 3.02%)</title><rect x="70.0007%" y="133" width="3.0249%" height="15" fill="rgb(244,5,23)"/><text x="70.2507%" y="143.50">col..</text></g><g><title>type_of (483,945 samples, 0.11%)</title><rect x="72.9119%" y="117" width="0.1137%" height="15" fill="rgb(226,81,46)"/><text x="73.1619%" y="127.50"></text></g><g><title>evaluate_obligation (903,384 samples, 0.21%)</title><rect x="75.3155%" y="117" width="0.2122%" height="15" fill="rgb(247,70,30)"/><text x="75.5655%" y="127.50"></text></g><g><title>object_safety_violations (428,084 samples, 0.10%)</title><rect x="75.6568%" y="117" width="0.1005%" height="15" fill="rgb(212,68,19)"/><text x="75.9068%" y="127.50"></text></g><g><title>param_env (1,759,963 samples, 0.41%)</title><rect x="75.7573%" y="117" width="0.4133%" height="15" fill="rgb(240,187,13)"/><text x="76.0073%" y="127.50"></text></g><g><title>region_scope_tree (2,538,542 samples, 0.60%)</title><rect x="76.1882%" y="117" width="0.5962%" height="15" fill="rgb(223,113,26)"/><text x="76.4382%" y="127.50"></text></g><g><title>check_impl_item_well_formed (14,973,064 samples, 3.52%)</title><rect x="73.2859%" y="133" width="3.5165%" height="15" fill="rgb(206,192,2)"/><text x="73.5359%" y="143.50">che..</text></g><g><title>evaluate_obligation (2,369,052 samples, 0.56%)</title><rect x="77.9367%" y="117" width="0.5564%" height="15" fill="rgb(241,108,4)"/><text x="78.1867%" y="127.50"></text></g><g><title>param_env (1,091,301 samples, 0.26%)</title><rect x="78.5359%" y="117" width="0.2563%" height="15" fill="rgb(247,173,49)"/><text x="78.7859%" y="127.50"></text></g><g><title>check_item_well_formed (8,938,045 samples, 2.10%)</title><rect x="76.8024%" y="133" width="2.0991%" height="15" fill="rgb(224,114,35)"/><text x="77.0524%" y="143.50">c..</text></g><g><title>analysis (335,157,998 samples, 78.71%)</title><rect x="0.2625%" y="181" width="78.7127%" height="15" fill="rgb(245,159,27)"/><text x="0.5125%" y="191.50">analysis</text></g><g><title>type_check_crate (182,989,675 samples, 42.98%)</title><rect x="35.9996%" y="165" width="42.9756%" height="15" fill="rgb(245,172,44)"/><text x="36.2496%" y="175.50">type_check_crate</text></g><g><title>wf_checking (25,289,661 samples, 5.94%)</title><rect x="73.0359%" y="149" width="5.9393%" height="15" fill="rgb(236,23,11)"/><text x="73.2859%" y="159.50">wf_check..</text></g><g><title>AST_validation (634,137 samples, 0.15%)</title><rect x="79.1025%" y="165" width="0.1489%" height="15" fill="rgb(205,117,38)"/><text x="79.3525%" y="175.50"></text></g><g><title>metadata_register_crate (1,250,454 samples, 0.29%)</title><rect x="87.9817%" y="133" width="0.2937%" height="15" fill="rgb(237,72,25)"/><text x="88.2317%" y="143.50"></text></g><g><title>metadata_register_crate (465,145 samples, 0.11%)</title><rect x="88.1661%" y="117" width="0.1092%" height="15" fill="rgb(244,70,9)"/><text x="88.4161%" y="127.50"></text></g><g><title>macro_expand_crate (38,878,413 samples, 9.13%)</title><rect x="79.3416%" y="165" width="9.1307%" height="15" fill="rgb(217,125,39)"/><text x="79.5916%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (38,867,233 samples, 9.13%)</title><rect x="79.3442%" y="149" width="9.1281%" height="15" fill="rgb(235,36,10)"/><text x="79.5942%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (838,590 samples, 0.20%)</title><rect x="88.2754%" y="133" width="0.1969%" height="15" fill="rgb(251,123,47)"/><text x="88.5254%" y="143.50"></text></g><g><title>finalize_macro_resolutions (585,816 samples, 0.14%)</title><rect x="88.5500%" y="149" width="0.1376%" height="15" fill="rgb(221,13,13)"/><text x="88.8000%" y="159.50"></text></g><g><title>late_resolve_crate (6,868,396 samples, 1.61%)</title><rect x="88.6876%" y="149" width="1.6131%" height="15" fill="rgb(238,131,9)"/><text x="88.9376%" y="159.50"></text></g><g><title>configure_and_expand (48,447,189 samples, 11.38%)</title><rect x="79.0729%" y="181" width="11.3779%" height="15" fill="rgb(211,50,8)"/><text x="79.3229%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (8,278,272 samples, 1.94%)</title><rect x="88.5066%" y="165" width="1.9442%" height="15" fill="rgb(245,182,24)"/><text x="88.7566%" y="175.50">r..</text></g><g><title>drop_ast (1,086,432 samples, 0.26%)</title><rect x="90.4508%" y="181" width="0.2552%" height="15" fill="rgb(242,14,37)"/><text x="90.7008%" y="191.50"></text></g><g><title>early_lint_checks (2,765,591 samples, 0.65%)</title><rect x="90.7109%" y="181" width="0.6495%" height="15" fill="rgb(246,228,12)"/><text x="90.9609%" y="191.50"></text></g><g><title>free_global_ctxt (6,810,396 samples, 1.60%)</title><rect x="91.3604%" y="181" width="1.5994%" height="15" fill="rgb(213,55,15)"/><text x="91.6104%" y="191.50"></text></g><g><title>mir_for_ctfe (1,814,696 samples, 0.43%)</title><rect x="94.7370%" y="165" width="0.4262%" height="15" fill="rgb(209,9,3)"/><text x="94.9870%" y="175.50"></text></g><g><title>generate_crate_metadata (9,711,488 samples, 2.28%)</title><rect x="92.9598%" y="181" width="2.2808%" height="15" fill="rgb(230,59,30)"/><text x="93.2098%" y="191.50">g..</text></g><g><title>hir_lowering (16,526,024 samples, 3.88%)</title><rect x="95.2406%" y="181" width="3.8812%" height="15" fill="rgb(209,121,21)"/><text x="95.4906%" y="191.50">hir_..</text></g><g><title>parse_crate (669,067 samples, 0.16%)</title><rect x="99.1487%" y="181" width="0.1571%" height="15" fill="rgb(220,109,13)"/><text x="99.3987%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,893,811 samples, 0.44%)</title><rect x="99.3565%" y="181" width="0.4448%" height="15" fill="rgb(232,18,1)"/><text x="99.6065%" y="191.50"></text></g><g><title>all (425,799,307 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (425,799,307 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (710,608 samples, 0.17%)</title><rect x="99.8331%" y="181" width="0.1669%" height="15" fill="rgb(240,125,3)"/><text x="100.0831%" y="191.50"></text></g></svg></svg>