<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (38,791 samples, 0.20%)</title><rect x="9.3076%" y="85" width="0.2050%" height="15" fill="rgb(227,0,7)"/><text x="9.5576%" y="95.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (34,491 samples, 0.18%)</title><rect x="9.3303%" y="69" width="0.1823%" height="15" fill="rgb(217,0,24)"/><text x="9.5803%" y="79.50"></text></g><g><title>param_env (36,240 samples, 0.19%)</title><rect x="9.5126%" y="85" width="0.1915%" height="15" fill="rgb(221,193,54)"/><text x="9.7626%" y="95.50"></text></g><g><title>item_attrs (57,451 samples, 0.30%)</title><rect x="10.2123%" y="53" width="0.3036%" height="15" fill="rgb(248,212,6)"/><text x="10.4623%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (55,691 samples, 0.29%)</title><rect x="10.2216%" y="37" width="0.2943%" height="15" fill="rgb(208,68,35)"/><text x="10.4716%" y="47.50"></text></g><g><title>codegen_fn_attrs (73,381 samples, 0.39%)</title><rect x="10.1336%" y="69" width="0.3877%" height="15" fill="rgb(232,128,0)"/><text x="10.3836%" y="79.50"></text></g><g><title>resolve_instance (38,100 samples, 0.20%)</title><rect x="11.2030%" y="53" width="0.2013%" height="15" fill="rgb(207,160,47)"/><text x="11.4530%" y="63.50"></text></g><g><title>thir_body (27,150 samples, 0.14%)</title><rect x="11.4132%" y="53" width="0.1435%" height="15" fill="rgb(228,23,34)"/><text x="11.6632%" y="63.50"></text></g><g><title>mir_const (540,566 samples, 2.86%)</title><rect x="8.7399%" y="101" width="2.8563%" height="15" fill="rgb(218,30,26)"/><text x="8.9899%" y="111.50">mi..</text></g><g><title>unsafety_check_result (358,094 samples, 1.89%)</title><rect x="9.7041%" y="85" width="1.8922%" height="15" fill="rgb(220,122,19)"/><text x="9.9541%" y="95.50">u..</text></g><g><title>mir_built (203,412 samples, 1.07%)</title><rect x="10.5214%" y="69" width="1.0748%" height="15" fill="rgb(250,228,42)"/><text x="10.7714%" y="79.50"></text></g><g><title>mir_promoted (702,337 samples, 3.71%)</title><rect x="7.9315%" y="117" width="3.7111%" height="15" fill="rgb(240,193,28)"/><text x="8.1815%" y="127.50">mir_..</text></g><g><title>MIR_borrow_checking (1,506,197 samples, 7.96%)</title><rect x="4.0507%" y="149" width="7.9587%" height="15" fill="rgb(216,20,37)"/><text x="4.3007%" y="159.50">MIR_borrow_..</text></g><g><title>mir_borrowck (1,500,147 samples, 7.93%)</title><rect x="4.0827%" y="133" width="7.9268%" height="15" fill="rgb(206,188,39)"/><text x="4.3327%" y="143.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (69,412 samples, 0.37%)</title><rect x="11.6427%" y="117" width="0.3668%" height="15" fill="rgb(217,207,13)"/><text x="11.8927%" y="127.50"></text></g><g><title>hir_owner (24,750 samples, 0.13%)</title><rect x="12.4190%" y="133" width="0.1308%" height="15" fill="rgb(231,73,38)"/><text x="12.6690%" y="143.50"></text></g><g><title>hir_module_items (95,931 samples, 0.51%)</title><rect x="12.0445%" y="149" width="0.5069%" height="15" fill="rgb(225,20,46)"/><text x="12.2945%" y="159.50"></text></g><g><title>get_lang_items (48,670 samples, 0.26%)</title><rect x="13.4595%" y="101" width="0.2572%" height="15" fill="rgb(210,31,41)"/><text x="13.7095%" y="111.50"></text></g><g><title>codegen_fn_attrs (164,631 samples, 0.87%)</title><rect x="13.0921%" y="117" width="0.8699%" height="15" fill="rgb(221,200,47)"/><text x="13.3421%" y="127.50"></text></g><g><title>supported_target_features (37,151 samples, 0.20%)</title><rect x="13.7657%" y="101" width="0.1963%" height="15" fill="rgb(226,26,5)"/><text x="14.0157%" y="111.50"></text></g><g><title>check_mod_attrs (223,923 samples, 1.18%)</title><rect x="12.7796%" y="133" width="1.1832%" height="15" fill="rgb(249,33,26)"/><text x="13.0296%" y="143.50"></text></g><g><title>check_mod_const_bodies (30,431 samples, 0.16%)</title><rect x="13.9628%" y="133" width="0.1608%" height="15" fill="rgb(235,183,28)"/><text x="14.2128%" y="143.50"></text></g><g><title>lookup_deprecation_entry (25,420 samples, 0.13%)</title><rect x="14.2827%" y="117" width="0.1343%" height="15" fill="rgb(221,5,38)"/><text x="14.5327%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (50,350 samples, 0.27%)</title><rect x="14.1905%" y="133" width="0.2660%" height="15" fill="rgb(247,18,42)"/><text x="14.4405%" y="143.50"></text></g><g><title>looking_for_derive_registrar (24,671 samples, 0.13%)</title><rect x="14.4630%" y="133" width="0.1304%" height="15" fill="rgb(241,131,45)"/><text x="14.7130%" y="143.50"></text></g><g><title>misc_checking_1 (390,625 samples, 2.06%)</title><rect x="12.5555%" y="149" width="2.0641%" height="15" fill="rgb(249,31,29)"/><text x="12.8055%" y="159.50">m..</text></g><g><title>liveness_and_intrinsic_checking (75,421 samples, 0.40%)</title><rect x="14.6316%" y="133" width="0.3985%" height="15" fill="rgb(225,111,53)"/><text x="14.8816%" y="143.50"></text></g><g><title>check_mod_liveness (58,451 samples, 0.31%)</title><rect x="14.7213%" y="117" width="0.3089%" height="15" fill="rgb(238,160,17)"/><text x="14.9713%" y="127.50"></text></g><g><title>misc_checking_2 (163,732 samples, 0.87%)</title><rect x="14.6196%" y="149" width="0.8652%" height="15" fill="rgb(214,148,48)"/><text x="14.8696%" y="159.50"></text></g><g><title>match_checking (86,041 samples, 0.45%)</title><rect x="15.0301%" y="133" width="0.4546%" height="15" fill="rgb(232,36,49)"/><text x="15.2801%" y="143.50"></text></g><g><title>check_match (81,791 samples, 0.43%)</title><rect x="15.0526%" y="117" width="0.4322%" height="15" fill="rgb(209,103,24)"/><text x="15.3026%" y="127.50"></text></g><g><title>check_private_in_public (25,220 samples, 0.13%)</title><rect x="15.5452%" y="133" width="0.1333%" height="15" fill="rgb(229,88,8)"/><text x="15.7952%" y="143.50"></text></g><g><title>death_checking (95,771 samples, 0.51%)</title><rect x="15.6785%" y="133" width="0.5061%" height="15" fill="rgb(213,181,19)"/><text x="15.9285%" y="143.50"></text></g><g><title>lint_levels (36,251 samples, 0.19%)</title><rect x="15.9930%" y="117" width="0.1916%" height="15" fill="rgb(254,191,54)"/><text x="16.2430%" y="127.50"></text></g><g><title>param_env (72,151 samples, 0.38%)</title><rect x="16.6050%" y="101" width="0.3812%" height="15" fill="rgb(241,83,37)"/><text x="16.8550%" y="111.50"></text></g><g><title>predicates_of (32,051 samples, 0.17%)</title><rect x="16.8169%" y="85" width="0.1694%" height="15" fill="rgb(233,36,39)"/><text x="17.0669%" y="95.50"></text></g><g><title>predicates_defined_on (26,380 samples, 0.14%)</title><rect x="16.8469%" y="69" width="0.1394%" height="15" fill="rgb(226,3,54)"/><text x="17.0969%" y="79.50"></text></g><g><title>crate_lints (167,932 samples, 0.89%)</title><rect x="16.1993%" y="117" width="0.8874%" height="15" fill="rgb(245,192,40)"/><text x="16.4493%" y="127.50"></text></g><g><title>symbol_name (18,990 samples, 0.10%)</title><rect x="16.9863%" y="101" width="0.1003%" height="15" fill="rgb(238,167,29)"/><text x="17.2363%" y="111.50"></text></g><g><title>lint_checking (210,063 samples, 1.11%)</title><rect x="16.1845%" y="133" width="1.1100%" height="15" fill="rgb(232,182,51)"/><text x="16.4345%" y="143.50"></text></g><g><title>module_lints (39,341 samples, 0.21%)</title><rect x="17.0866%" y="117" width="0.2079%" height="15" fill="rgb(231,60,39)"/><text x="17.3366%" y="127.50"></text></g><g><title>lint_mod (35,900 samples, 0.19%)</title><rect x="17.1048%" y="101" width="0.1897%" height="15" fill="rgb(208,69,12)"/><text x="17.3548%" y="111.50"></text></g><g><title>privacy_access_levels (53,951 samples, 0.29%)</title><rect x="17.2945%" y="133" width="0.2851%" height="15" fill="rgb(235,93,37)"/><text x="17.5445%" y="143.50"></text></g><g><title>privacy_checking_modules (27,550 samples, 0.15%)</title><rect x="17.5796%" y="133" width="0.1456%" height="15" fill="rgb(213,116,39)"/><text x="17.8296%" y="143.50"></text></g><g><title>check_mod_privacy (25,540 samples, 0.13%)</title><rect x="17.5902%" y="117" width="0.1350%" height="15" fill="rgb(222,207,29)"/><text x="17.8402%" y="127.50"></text></g><g><title>misc_checking_3 (437,915 samples, 2.31%)</title><rect x="15.4848%" y="149" width="2.3139%" height="15" fill="rgb(206,96,30)"/><text x="15.7348%" y="159.50">m..</text></g><g><title>coherence_checking (36,470 samples, 0.19%)</title><rect x="17.9454%" y="133" width="0.1927%" height="15" fill="rgb(218,138,4)"/><text x="18.1954%" y="143.50"></text></g><g><title>associated_item (209,303 samples, 1.11%)</title><rect x="22.8114%" y="69" width="1.1060%" height="15" fill="rgb(250,191,14)"/><text x="23.0614%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (152,023 samples, 0.80%)</title><rect x="23.1140%" y="53" width="0.8033%" height="15" fill="rgb(239,60,40)"/><text x="23.3640%" y="63.50"></text></g><g><title>associated_items (304,053 samples, 1.61%)</title><rect x="22.3498%" y="85" width="1.6066%" height="15" fill="rgb(206,27,48)"/><text x="22.5998%" y="95.50"></text></g><g><title>evaluate_obligation (168,452 samples, 0.89%)</title><rect x="24.0096%" y="85" width="0.8901%" height="15" fill="rgb(225,35,8)"/><text x="24.2596%" y="95.50"></text></g><g><title>trait_impls_of (37,031 samples, 0.20%)</title><rect x="24.7041%" y="69" width="0.1957%" height="15" fill="rgb(250,213,24)"/><text x="24.9541%" y="79.50"></text></g><g><title>fn_sig (54,901 samples, 0.29%)</title><rect x="24.9249%" y="85" width="0.2901%" height="15" fill="rgb(247,123,22)"/><text x="25.1749%" y="95.50"></text></g><g><title>metadata_decode_entry_fn_sig (51,911 samples, 0.27%)</title><rect x="24.9407%" y="69" width="0.2743%" height="15" fill="rgb(231,138,38)"/><text x="25.1907%" y="79.50"></text></g><g><title>generics_of (30,630 samples, 0.16%)</title><rect x="25.2150%" y="85" width="0.1618%" height="15" fill="rgb(231,145,46)"/><text x="25.4650%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (26,010 samples, 0.14%)</title><rect x="25.2394%" y="69" width="0.1374%" height="15" fill="rgb(251,118,11)"/><text x="25.4894%" y="79.50"></text></g><g><title>method_autoderef_steps (94,831 samples, 0.50%)</title><rect x="25.6296%" y="85" width="0.5011%" height="15" fill="rgb(217,147,25)"/><text x="25.8796%" y="95.50"></text></g><g><title>evaluate_obligation (74,881 samples, 0.40%)</title><rect x="25.7350%" y="69" width="0.3957%" height="15" fill="rgb(247,81,37)"/><text x="25.9850%" y="79.50"></text></g><g><title>trait_impls_of (30,171 samples, 0.16%)</title><rect x="25.9713%" y="53" width="0.1594%" height="15" fill="rgb(209,12,38)"/><text x="26.2213%" y="63.50"></text></g><g><title>explicit_predicates_of (37,020 samples, 0.20%)</title><rect x="26.3530%" y="53" width="0.1956%" height="15" fill="rgb(227,1,9)"/><text x="26.6030%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (33,430 samples, 0.18%)</title><rect x="26.3720%" y="37" width="0.1766%" height="15" fill="rgb(248,47,43)"/><text x="26.6220%" y="47.50"></text></g><g><title>predicates_of (81,770 samples, 0.43%)</title><rect x="26.2129%" y="85" width="0.4321%" height="15" fill="rgb(221,10,30)"/><text x="26.4629%" y="95.50"></text></g><g><title>predicates_defined_on (65,160 samples, 0.34%)</title><rect x="26.3007%" y="69" width="0.3443%" height="15" fill="rgb(210,229,1)"/><text x="26.5507%" y="79.50"></text></g><g><title>type_of (28,140 samples, 0.15%)</title><rect x="26.8210%" y="85" width="0.1487%" height="15" fill="rgb(222,148,37)"/><text x="27.0710%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (26,590 samples, 0.14%)</title><rect x="26.8292%" y="69" width="0.1405%" height="15" fill="rgb(234,67,33)"/><text x="27.0792%" y="79.50"></text></g><g><title>item_bodies_checking (1,679,929 samples, 8.88%)</title><rect x="18.1618%" y="133" width="8.8767%" height="15" fill="rgb(247,98,35)"/><text x="18.4118%" y="143.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (1,677,119 samples, 8.86%)</title><rect x="18.1767%" y="117" width="8.8619%" height="15" fill="rgb(247,138,52)"/><text x="18.4267%" y="127.50">typeck_item_b..</text></g><g><title>typeck (1,672,219 samples, 8.84%)</title><rect x="18.2026%" y="101" width="8.8360%" height="15" fill="rgb(213,79,30)"/><text x="18.4526%" y="111.50">typeck</text></g><g><title>fn_sig (60,500 samples, 0.32%)</title><rect x="27.4009%" y="101" width="0.3197%" height="15" fill="rgb(246,177,23)"/><text x="27.6509%" y="111.50"></text></g><g><title>named_region_map (63,891 samples, 0.34%)</title><rect x="27.8658%" y="85" width="0.3376%" height="15" fill="rgb(230,62,27)"/><text x="28.1158%" y="95.50"></text></g><g><title>resolve_lifetimes (52,220 samples, 0.28%)</title><rect x="27.9274%" y="69" width="0.2759%" height="15" fill="rgb(216,154,8)"/><text x="28.1774%" y="79.50"></text></g><g><title>generics_of (99,512 samples, 0.53%)</title><rect x="27.7206%" y="101" width="0.5258%" height="15" fill="rgb(244,35,45)"/><text x="27.9706%" y="111.50"></text></g><g><title>explicit_predicates_of (24,531 samples, 0.13%)</title><rect x="28.3171%" y="69" width="0.1296%" height="15" fill="rgb(251,115,12)"/><text x="28.5671%" y="79.50"></text></g><g><title>predicates_of (38,951 samples, 0.21%)</title><rect x="28.2464%" y="101" width="0.2058%" height="15" fill="rgb(240,54,50)"/><text x="28.4964%" y="111.50"></text></g><g><title>predicates_defined_on (34,531 samples, 0.18%)</title><rect x="28.2697%" y="85" width="0.1825%" height="15" fill="rgb(233,84,52)"/><text x="28.5197%" y="95.50"></text></g><g><title>type_collecting (275,493 samples, 1.46%)</title><rect x="27.0872%" y="133" width="1.4557%" height="15" fill="rgb(207,117,47)"/><text x="27.3372%" y="143.50"></text></g><g><title>collect_mod_item_types (258,423 samples, 1.37%)</title><rect x="27.1774%" y="117" width="1.3655%" height="15" fill="rgb(249,43,39)"/><text x="27.4274%" y="127.50"></text></g><g><title>evaluate_obligation (109,241 samples, 0.58%)</title><rect x="30.9911%" y="101" width="0.5772%" height="15" fill="rgb(209,38,44)"/><text x="31.2411%" y="111.50"></text></g><g><title>implied_outlives_bounds (87,071 samples, 0.46%)</title><rect x="31.5684%" y="101" width="0.4601%" height="15" fill="rgb(236,212,23)"/><text x="31.8184%" y="111.50"></text></g><g><title>param_env (200,632 samples, 1.06%)</title><rect x="32.0284%" y="101" width="1.0601%" height="15" fill="rgb(242,79,21)"/><text x="32.2784%" y="111.50"></text></g><g><title>analysis (5,643,453 samples, 29.82%)</title><rect x="3.3591%" y="165" width="29.8200%" height="15" fill="rgb(211,96,35)"/><text x="3.6091%" y="175.50">analysis</text></g><g><title>type_check_crate (2,910,742 samples, 15.38%)</title><rect x="17.7987%" y="149" width="15.3803%" height="15" fill="rgb(253,215,40)"/><text x="18.0487%" y="159.50">type_check_crate</text></g><g><title>wf_checking (876,670 samples, 4.63%)</title><rect x="28.5467%" y="133" width="4.6323%" height="15" fill="rgb(211,81,21)"/><text x="28.7967%" y="143.50">wf_ch..</text></g><g><title>check_item_well_formed (856,699 samples, 4.53%)</title><rect x="28.6523%" y="117" width="4.5268%" height="15" fill="rgb(208,190,38)"/><text x="28.9023%" y="127.50">check..</text></g><g><title>codegen_crate (424,974 samples, 2.25%)</title><rect x="33.2402%" y="165" width="2.2456%" height="15" fill="rgb(235,213,38)"/><text x="33.4902%" y="175.50">c..</text></g><g><title>AST_validation (68,511 samples, 0.36%)</title><rect x="36.6266%" y="149" width="0.3620%" height="15" fill="rgb(237,122,38)"/><text x="36.8766%" y="159.50"></text></g><g><title>complete_gated_feature_checking (30,510 samples, 0.16%)</title><rect x="36.9886%" y="149" width="0.1612%" height="15" fill="rgb(244,218,35)"/><text x="37.2386%" y="159.50"></text></g><g><title>crate_injection (100,761 samples, 0.53%)</title><rect x="37.1498%" y="149" width="0.5324%" height="15" fill="rgb(240,68,47)"/><text x="37.3998%" y="159.50"></text></g><g><title>metadata_load_macro (39,621 samples, 0.21%)</title><rect x="71.0277%" y="117" width="0.2094%" height="15" fill="rgb(210,16,53)"/><text x="71.2777%" y="127.50"></text></g><g><title>macro_expand_crate (6,549,023 samples, 34.60%)</title><rect x="37.6822%" y="149" width="34.6050%" height="15" fill="rgb(235,124,12)"/><text x="37.9322%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (6,527,203 samples, 34.49%)</title><rect x="37.7975%" y="133" width="34.4897%" height="15" fill="rgb(224,169,11)"/><text x="38.0475%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (198,742 samples, 1.05%)</title><rect x="71.2371%" y="117" width="1.0502%" height="15" fill="rgb(250,166,2)"/><text x="71.4871%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (112,181 samples, 0.59%)</title><rect x="72.3090%" y="149" width="0.5928%" height="15" fill="rgb(242,216,29)"/><text x="72.5590%" y="159.50"></text></g><g><title>finalize_imports (23,660 samples, 0.13%)</title><rect x="72.9452%" y="133" width="0.1250%" height="15" fill="rgb(230,116,27)"/><text x="73.1952%" y="143.50"></text></g><g><title>finalize_macro_resolutions (270,543 samples, 1.43%)</title><rect x="73.0703%" y="133" width="1.4295%" height="15" fill="rgb(228,99,48)"/><text x="73.3203%" y="143.50"></text></g><g><title>late_resolve_crate (321,514 samples, 1.70%)</title><rect x="74.4998%" y="133" width="1.6989%" height="15" fill="rgb(253,11,6)"/><text x="74.7498%" y="143.50"></text></g><g><title>resolve_check_unused (24,830 samples, 0.13%)</title><rect x="76.2238%" y="133" width="0.1312%" height="15" fill="rgb(247,143,39)"/><text x="76.4738%" y="143.50"></text></g><g><title>configure_and_expand (7,746,557 samples, 40.93%)</title><rect x="35.4858%" y="165" width="40.9328%" height="15" fill="rgb(236,97,10)"/><text x="35.7358%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (665,558 samples, 3.52%)</title><rect x="72.9017%" y="149" width="3.5168%" height="15" fill="rgb(233,208,19)"/><text x="73.1517%" y="159.50">res..</text></g><g><title>drop_ast (37,830 samples, 0.20%)</title><rect x="76.4186%" y="165" width="0.1999%" height="15" fill="rgb(216,164,2)"/><text x="76.6686%" y="175.50"></text></g><g><title>drop_compiler (24,480 samples, 0.13%)</title><rect x="76.6184%" y="165" width="0.1294%" height="15" fill="rgb(220,129,5)"/><text x="76.8684%" y="175.50"></text></g><g><title>early_lint_checks (75,491 samples, 0.40%)</title><rect x="76.7478%" y="165" width="0.3989%" height="15" fill="rgb(242,17,10)"/><text x="76.9978%" y="175.50"></text></g><g><title>free_global_ctxt (1,224,613 samples, 6.47%)</title><rect x="77.1467%" y="165" width="6.4708%" height="15" fill="rgb(242,107,0)"/><text x="77.3967%" y="175.50">free_glo..</text></g><g><title>crate_hash (129,642 samples, 0.69%)</title><rect x="84.9324%" y="149" width="0.6850%" height="15" fill="rgb(251,28,31)"/><text x="85.1824%" y="159.50"></text></g><g><title>mir_keys (22,821 samples, 0.12%)</title><rect x="85.7856%" y="149" width="0.1206%" height="15" fill="rgb(233,223,10)"/><text x="86.0356%" y="159.50"></text></g><g><title>generate_crate_metadata (464,315 samples, 2.45%)</title><rect x="83.6175%" y="165" width="2.4534%" height="15" fill="rgb(215,21,27)"/><text x="83.8675%" y="175.50">ge..</text></g><g><title>hir_lowering (301,214 samples, 1.59%)</title><rect x="86.0710%" y="165" width="1.5916%" height="15" fill="rgb(232,23,21)"/><text x="86.3210%" y="175.50"></text></g><g><title>finish_ongoing_codegen (25,410 samples, 0.13%)</title><rect x="87.7463%" y="149" width="0.1343%" height="15" fill="rgb(244,5,23)"/><text x="87.9963%" y="159.50"></text></g><g><title>link (65,881 samples, 0.35%)</title><rect x="87.6626%" y="165" width="0.3481%" height="15" fill="rgb(226,81,46)"/><text x="87.9126%" y="175.50"></text></g><g><title>parse_crate (851,899 samples, 4.50%)</title><rect x="88.0107%" y="165" width="4.5014%" height="15" fill="rgb(247,70,30)"/><text x="88.2607%" y="175.50">parse..</text></g><g><title>prepare_outputs (297,063 samples, 1.57%)</title><rect x="92.5596%" y="165" width="1.5697%" height="15" fill="rgb(212,68,19)"/><text x="92.8096%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (521,825 samples, 2.76%)</title><rect x="94.1293%" y="165" width="2.7573%" height="15" fill="rgb(240,187,13)"/><text x="94.3793%" y="175.50">se..</text></g><g><title>setup_global_ctxt (137,701 samples, 0.73%)</title><rect x="96.9764%" y="165" width="0.7276%" height="15" fill="rgb(223,113,26)"/><text x="97.2264%" y="175.50"></text></g><g><title>all (18,925,080 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (18,925,080 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (434,515 samples, 2.30%)</title><rect x="97.7040%" y="165" width="2.2960%" height="15" fill="rgb(247,173,49)"/><text x="97.9540%" y="175.50">w..</text></g></svg></svg>