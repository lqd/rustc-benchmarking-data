<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (528,114 samples, 0.30%)</title><rect x="13.1633%" y="85" width="0.2964%" height="15" fill="rgb(227,0,7)"/><text x="13.4133%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (521,414 samples, 0.29%)</title><rect x="13.1670%" y="69" width="0.2926%" height="15" fill="rgb(217,0,24)"/><text x="13.4170%" y="79.50"></text></g><g><title>codegen_fn_attrs (633,944 samples, 0.36%)</title><rect x="13.1164%" y="101" width="0.3557%" height="15" fill="rgb(221,193,54)"/><text x="13.3664%" y="111.50"></text></g><g><title>adt_drop_tys (184,823 samples, 0.10%)</title><rect x="16.0772%" y="69" width="0.1037%" height="15" fill="rgb(248,212,6)"/><text x="16.3272%" y="79.50"></text></g><g><title>needs_drop_raw (1,411,775 samples, 0.79%)</title><rect x="15.9979%" y="85" width="0.7922%" height="15" fill="rgb(208,68,35)"/><text x="16.2479%" y="95.50"></text></g><g><title>is_copy_raw (1,085,621 samples, 0.61%)</title><rect x="16.1809%" y="69" width="0.6092%" height="15" fill="rgb(232,128,0)"/><text x="16.4309%" y="79.50"></text></g><g><title>evaluate_obligation (910,041 samples, 0.51%)</title><rect x="16.2794%" y="53" width="0.5107%" height="15" fill="rgb(207,160,47)"/><text x="16.5294%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (227,712 samples, 0.13%)</title><rect x="16.9150%" y="69" width="0.1278%" height="15" fill="rgb(228,23,34)"/><text x="17.1650%" y="79.50"></text></g><g><title>specialization_graph_of (216,293 samples, 0.12%)</title><rect x="17.0650%" y="69" width="0.1214%" height="15" fill="rgb(218,30,26)"/><text x="17.3150%" y="79.50"></text></g><g><title>resolve_instance (748,188 samples, 0.42%)</title><rect x="16.8074%" y="85" width="0.4198%" height="15" fill="rgb(220,122,19)"/><text x="17.0574%" y="95.50"></text></g><g><title>thir_body (1,523,920 samples, 0.86%)</title><rect x="17.2411%" y="85" width="0.8552%" height="15" fill="rgb(250,228,42)"/><text x="17.4911%" y="95.50"></text></g><g><title>mir_const (10,703,807 samples, 6.01%)</title><rect x="12.1372%" y="133" width="6.0065%" height="15" fill="rgb(240,193,28)"/><text x="12.3872%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (9,533,673 samples, 5.35%)</title><rect x="12.7938%" y="117" width="5.3498%" height="15" fill="rgb(216,20,37)"/><text x="13.0438%" y="127.50">unsafet..</text></g><g><title>mir_built (8,324,933 samples, 4.67%)</title><rect x="13.4721%" y="101" width="4.6716%" height="15" fill="rgb(206,188,39)"/><text x="13.7221%" y="111.50">mir_b..</text></g><g><title>mir_promoted (11,980,005 samples, 6.72%)</title><rect x="11.5175%" y="149" width="6.7226%" height="15" fill="rgb(217,207,13)"/><text x="11.7675%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (673,557 samples, 0.38%)</title><rect x="18.2425%" y="149" width="0.3780%" height="15" fill="rgb(231,73,38)"/><text x="18.4925%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (923,151 samples, 0.52%)</title><rect x="18.6205%" y="149" width="0.5180%" height="15" fill="rgb(225,20,46)"/><text x="18.8705%" y="159.50"></text></g><g><title>normalize_projection_ty (427,776 samples, 0.24%)</title><rect x="18.8985%" y="133" width="0.2400%" height="15" fill="rgb(210,31,41)"/><text x="19.1485%" y="143.50"></text></g><g><title>type_op_normalize_predicate (198,282 samples, 0.11%)</title><rect x="19.1534%" y="149" width="0.1113%" height="15" fill="rgb(221,200,47)"/><text x="19.4034%" y="159.50"></text></g><g><title>type_op_normalize_ty (359,215 samples, 0.20%)</title><rect x="19.2646%" y="149" width="0.2016%" height="15" fill="rgb(226,26,5)"/><text x="19.5146%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,336,232 samples, 2.43%)</title><rect x="19.4662%" y="149" width="2.4333%" height="15" fill="rgb(249,33,26)"/><text x="19.7162%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (37,841,491 samples, 21.23%)</title><rect x="0.6676%" y="181" width="21.2348%" height="15" fill="rgb(235,183,28)"/><text x="0.9176%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (37,741,360 samples, 21.18%)</title><rect x="0.7238%" y="165" width="21.1786%" height="15" fill="rgb(221,5,38)"/><text x="0.9738%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (193,322 samples, 0.11%)</title><rect x="21.9743%" y="181" width="0.1085%" height="15" fill="rgb(247,18,42)"/><text x="22.2243%" y="191.50"></text></g><g><title>should_inherit_track_caller (214,751 samples, 0.12%)</title><rect x="22.3538%" y="133" width="0.1205%" height="15" fill="rgb(241,131,45)"/><text x="22.6038%" y="143.50"></text></g><g><title>codegen_fn_attrs (397,063 samples, 0.22%)</title><rect x="22.2579%" y="149" width="0.2228%" height="15" fill="rgb(249,31,29)"/><text x="22.5079%" y="159.50"></text></g><g><title>check_mod_attrs (689,778 samples, 0.39%)</title><rect x="22.0937%" y="165" width="0.3871%" height="15" fill="rgb(225,111,53)"/><text x="22.3437%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (471,946 samples, 0.26%)</title><rect x="22.6041%" y="165" width="0.2648%" height="15" fill="rgb(238,160,17)"/><text x="22.8541%" y="175.50"></text></g><g><title>misc_checking_1 (1,443,396 samples, 0.81%)</title><rect x="22.0830%" y="181" width="0.8100%" height="15" fill="rgb(214,148,48)"/><text x="22.3330%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (801,828 samples, 0.45%)</title><rect x="22.8941%" y="165" width="0.4499%" height="15" fill="rgb(232,36,49)"/><text x="23.1441%" y="175.50"></text></g><g><title>check_mod_liveness (668,468 samples, 0.38%)</title><rect x="22.9689%" y="149" width="0.3751%" height="15" fill="rgb(209,103,24)"/><text x="23.2189%" y="159.50"></text></g><g><title>misc_checking_2 (1,907,370 samples, 1.07%)</title><rect x="22.8930%" y="181" width="1.0703%" height="15" fill="rgb(229,88,8)"/><text x="23.1430%" y="191.50"></text></g><g><title>match_checking (1,103,572 samples, 0.62%)</title><rect x="23.3440%" y="165" width="0.6193%" height="15" fill="rgb(213,181,19)"/><text x="23.5940%" y="175.50"></text></g><g><title>check_match (1,075,702 samples, 0.60%)</title><rect x="23.3597%" y="149" width="0.6036%" height="15" fill="rgb(254,191,54)"/><text x="23.6097%" y="159.50"></text></g><g><title>check_private_in_public (255,903 samples, 0.14%)</title><rect x="23.9688%" y="165" width="0.1436%" height="15" fill="rgb(241,83,37)"/><text x="24.2188%" y="175.50"></text></g><g><title>death_checking (567,137 samples, 0.32%)</title><rect x="24.1124%" y="165" width="0.3183%" height="15" fill="rgb(233,36,39)"/><text x="24.3624%" y="175.50"></text></g><g><title>item_attrs (192,363 samples, 0.11%)</title><rect x="24.3227%" y="149" width="0.1079%" height="15" fill="rgb(226,3,54)"/><text x="24.5727%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (190,162 samples, 0.11%)</title><rect x="24.3239%" y="133" width="0.1067%" height="15" fill="rgb(245,192,40)"/><text x="24.5739%" y="143.50"></text></g><g><title>crate_lints (2,248,365 samples, 1.26%)</title><rect x="24.4315%" y="149" width="1.2617%" height="15" fill="rgb(238,167,29)"/><text x="24.6815%" y="159.50"></text></g><g><title>type_of (1,102,230 samples, 0.62%)</title><rect x="25.0746%" y="133" width="0.6185%" height="15" fill="rgb(232,182,51)"/><text x="25.3246%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (873,000 samples, 0.49%)</title><rect x="25.2033%" y="117" width="0.4899%" height="15" fill="rgb(231,60,39)"/><text x="25.4533%" y="127.50"></text></g><g><title>lint_checking (2,943,612 samples, 1.65%)</title><rect x="24.4306%" y="165" width="1.6518%" height="15" fill="rgb(208,69,12)"/><text x="24.6806%" y="175.50"></text></g><g><title>module_lints (693,707 samples, 0.39%)</title><rect x="25.6932%" y="149" width="0.3893%" height="15" fill="rgb(235,93,37)"/><text x="25.9432%" y="159.50"></text></g><g><title>lint_mod (690,087 samples, 0.39%)</title><rect x="25.6952%" y="133" width="0.3872%" height="15" fill="rgb(213,116,39)"/><text x="25.9452%" y="143.50"></text></g><g><title>privacy_access_levels (344,303 samples, 0.19%)</title><rect x="26.0824%" y="165" width="0.1932%" height="15" fill="rgb(222,207,29)"/><text x="26.3324%" y="175.50"></text></g><g><title>privacy_checking_modules (1,408,936 samples, 0.79%)</title><rect x="26.2756%" y="165" width="0.7906%" height="15" fill="rgb(206,96,30)"/><text x="26.5256%" y="175.50"></text></g><g><title>check_mod_privacy (1,405,916 samples, 0.79%)</title><rect x="26.2773%" y="149" width="0.7889%" height="15" fill="rgb(218,138,4)"/><text x="26.5273%" y="159.50"></text></g><g><title>misc_checking_3 (5,552,071 samples, 3.12%)</title><rect x="23.9633%" y="181" width="3.1156%" height="15" fill="rgb(250,191,14)"/><text x="24.2133%" y="191.50">mis..</text></g><g><title>impl_parent (2,420,565 samples, 1.36%)</title><rect x="29.4686%" y="117" width="1.3583%" height="15" fill="rgb(239,60,40)"/><text x="29.7186%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,430,194 samples, 0.80%)</title><rect x="30.0243%" y="101" width="0.8026%" height="15" fill="rgb(206,27,48)"/><text x="30.2743%" y="111.50"></text></g><g><title>impl_trait_ref (5,441,623 samples, 3.05%)</title><rect x="30.8281%" y="117" width="3.0536%" height="15" fill="rgb(225,35,8)"/><text x="31.0781%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,292,326 samples, 2.41%)</title><rect x="31.4731%" y="101" width="2.4086%" height="15" fill="rgb(250,213,24)"/><text x="31.7231%" y="111.50">me..</text></g><g><title>trait_impls_of (746,497 samples, 0.42%)</title><rect x="33.9091%" y="117" width="0.4189%" height="15" fill="rgb(247,123,22)"/><text x="34.1591%" y="127.50"></text></g><g><title>implementations_of_trait (219,621 samples, 0.12%)</title><rect x="34.2048%" y="101" width="0.1232%" height="15" fill="rgb(231,138,38)"/><text x="34.4548%" y="111.50"></text></g><g><title>coherent_trait (12,843,843 samples, 7.21%)</title><rect x="27.1215%" y="149" width="7.2074%" height="15" fill="rgb(231,145,46)"/><text x="27.3715%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (12,823,553 samples, 7.20%)</title><rect x="27.1328%" y="133" width="7.1960%" height="15" fill="rgb(251,118,11)"/><text x="27.3828%" y="143.50">specializa..</text></g><g><title>coherence_checking (12,912,353 samples, 7.25%)</title><rect x="27.1091%" y="165" width="7.2458%" height="15" fill="rgb(217,147,25)"/><text x="27.3591%" y="175.50">coherence_..</text></g><g><title>associated_item (249,482 samples, 0.14%)</title><rect x="50.3209%" y="101" width="0.1400%" height="15" fill="rgb(247,81,37)"/><text x="50.5709%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (197,871 samples, 0.11%)</title><rect x="50.3498%" y="85" width="0.1110%" height="15" fill="rgb(209,12,38)"/><text x="50.5998%" y="95.50"></text></g><g><title>associated_items (364,183 samples, 0.20%)</title><rect x="50.2664%" y="117" width="0.2044%" height="15" fill="rgb(227,1,9)"/><text x="50.5164%" y="127.50"></text></g><g><title>adt_dtorck_constraint (267,103 samples, 0.15%)</title><rect x="50.6484%" y="101" width="0.1499%" height="15" fill="rgb(248,47,43)"/><text x="50.8984%" y="111.50"></text></g><g><title>dropck_outlives (578,768 samples, 0.32%)</title><rect x="50.4949%" y="117" width="0.3248%" height="15" fill="rgb(221,10,30)"/><text x="50.7449%" y="127.50"></text></g><g><title>predicates_of (245,142 samples, 0.14%)</title><rect x="51.7625%" y="101" width="0.1376%" height="15" fill="rgb(210,229,1)"/><text x="52.0125%" y="111.50"></text></g><g><title>specializes (192,591 samples, 0.11%)</title><rect x="51.9001%" y="101" width="0.1081%" height="15" fill="rgb(222,148,37)"/><text x="52.1501%" y="111.50"></text></g><g><title>evaluate_obligation (2,257,787 samples, 1.27%)</title><rect x="50.8197%" y="117" width="1.2670%" height="15" fill="rgb(234,67,33)"/><text x="51.0697%" y="127.50"></text></g><g><title>method_autoderef_steps (295,422 samples, 0.17%)</title><rect x="52.4041%" y="117" width="0.1658%" height="15" fill="rgb(247,98,35)"/><text x="52.6541%" y="127.50"></text></g><g><title>predicates_of (382,739 samples, 0.21%)</title><rect x="52.6676%" y="117" width="0.2148%" height="15" fill="rgb(247,138,52)"/><text x="52.9176%" y="127.50"></text></g><g><title>predicates_defined_on (280,427 samples, 0.16%)</title><rect x="52.7250%" y="101" width="0.1574%" height="15" fill="rgb(213,79,30)"/><text x="52.9750%" y="111.50"></text></g><g><title>evaluate_obligation (1,116,660 samples, 0.63%)</title><rect x="59.4667%" y="101" width="0.6266%" height="15" fill="rgb(246,177,23)"/><text x="59.7167%" y="111.50"></text></g><g><title>trait_impls_of (211,141 samples, 0.12%)</title><rect x="59.9748%" y="85" width="0.1185%" height="15" fill="rgb(230,62,27)"/><text x="60.2248%" y="95.50"></text></g><g><title>method_autoderef_steps (210,191 samples, 0.12%)</title><rect x="60.3141%" y="101" width="0.1179%" height="15" fill="rgb(216,154,8)"/><text x="60.5641%" y="111.50"></text></g><g><title>typeck (13,556,951 samples, 7.61%)</title><rect x="52.9382%" y="117" width="7.6075%" height="15" fill="rgb(244,35,45)"/><text x="53.1882%" y="127.50">typeck</text></g><g><title>item_bodies_checking (46,685,229 samples, 26.20%)</title><rect x="34.3737%" y="165" width="26.1975%" height="15" fill="rgb(251,115,12)"/><text x="34.6237%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (46,681,199 samples, 26.20%)</title><rect x="34.3760%" y="149" width="26.1953%" height="15" fill="rgb(240,54,50)"/><text x="34.6260%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (46,613,778 samples, 26.16%)</title><rect x="34.4138%" y="133" width="26.1574%" height="15" fill="rgb(233,84,52)"/><text x="34.6638%" y="143.50">typeck</text></g><g><title>adt_destructor (311,544 samples, 0.17%)</title><rect x="60.9730%" y="133" width="0.1748%" height="15" fill="rgb(207,117,47)"/><text x="61.2230%" y="143.50"></text></g><g><title>coherent_trait (306,944 samples, 0.17%)</title><rect x="60.9756%" y="117" width="0.1722%" height="15" fill="rgb(249,43,39)"/><text x="61.2256%" y="127.50"></text></g><g><title>specialization_graph_of (305,084 samples, 0.17%)</title><rect x="60.9767%" y="101" width="0.1712%" height="15" fill="rgb(209,38,44)"/><text x="61.2267%" y="111.50"></text></g><g><title>item_types_checking (1,236,504 samples, 0.69%)</title><rect x="60.5712%" y="165" width="0.6939%" height="15" fill="rgb(236,212,23)"/><text x="60.8212%" y="175.50"></text></g><g><title>check_mod_item_types (1,233,154 samples, 0.69%)</title><rect x="60.5731%" y="149" width="0.6920%" height="15" fill="rgb(242,79,21)"/><text x="60.8231%" y="159.50"></text></g><g><title>fn_sig (381,904 samples, 0.21%)</title><rect x="61.4377%" y="133" width="0.2143%" height="15" fill="rgb(211,96,35)"/><text x="61.6877%" y="143.50"></text></g><g><title>late_bound_vars_map (532,857 samples, 0.30%)</title><rect x="62.1198%" y="85" width="0.2990%" height="15" fill="rgb(253,215,40)"/><text x="62.3698%" y="95.50"></text></g><g><title>resolve_lifetimes (518,587 samples, 0.29%)</title><rect x="62.1278%" y="69" width="0.2910%" height="15" fill="rgb(211,81,21)"/><text x="62.3778%" y="79.50"></text></g><g><title>lint_levels (191,422 samples, 0.11%)</title><rect x="62.3114%" y="53" width="0.1074%" height="15" fill="rgb(208,190,38)"/><text x="62.5614%" y="63.50"></text></g><g><title>explicit_predicates_of (931,403 samples, 0.52%)</title><rect x="61.9098%" y="101" width="0.5227%" height="15" fill="rgb(235,213,38)"/><text x="62.1598%" y="111.50"></text></g><g><title>predicates_of (1,594,150 samples, 0.89%)</title><rect x="61.8298%" y="133" width="0.8946%" height="15" fill="rgb(237,122,38)"/><text x="62.0798%" y="143.50"></text></g><g><title>predicates_defined_on (1,537,940 samples, 0.86%)</title><rect x="61.8614%" y="117" width="0.8630%" height="15" fill="rgb(244,218,35)"/><text x="62.1114%" y="127.50"></text></g><g><title>inferred_outlives_of (520,196 samples, 0.29%)</title><rect x="62.4325%" y="101" width="0.2919%" height="15" fill="rgb(240,68,47)"/><text x="62.6825%" y="111.50"></text></g><g><title>inferred_outlives_crate (496,125 samples, 0.28%)</title><rect x="62.4460%" y="85" width="0.2784%" height="15" fill="rgb(210,16,53)"/><text x="62.6960%" y="95.50"></text></g><g><title>type_of (395,015 samples, 0.22%)</title><rect x="62.5027%" y="69" width="0.2217%" height="15" fill="rgb(235,124,12)"/><text x="62.7527%" y="79.50"></text></g><g><title>type_param_predicates (228,213 samples, 0.13%)</title><rect x="62.5963%" y="53" width="0.1281%" height="15" fill="rgb(224,169,11)"/><text x="62.8463%" y="63.50"></text></g><g><title>type_param_predicates (220,043 samples, 0.12%)</title><rect x="62.6009%" y="37" width="0.1235%" height="15" fill="rgb(250,166,2)"/><text x="62.8509%" y="47.50"></text></g><g><title>type_collecting (2,731,870 samples, 1.53%)</title><rect x="61.2660%" y="165" width="1.5330%" height="15" fill="rgb(242,216,29)"/><text x="61.5160%" y="175.50"></text></g><g><title>collect_mod_item_types (2,724,350 samples, 1.53%)</title><rect x="61.2702%" y="149" width="1.5288%" height="15" fill="rgb(230,116,27)"/><text x="61.5202%" y="159.50"></text></g><g><title>evaluate_obligation (322,952 samples, 0.18%)</title><rect x="64.2347%" y="133" width="0.1812%" height="15" fill="rgb(228,99,48)"/><text x="64.4847%" y="143.50"></text></g><g><title>implied_outlives_bounds (313,852 samples, 0.18%)</title><rect x="64.4159%" y="133" width="0.1761%" height="15" fill="rgb(253,11,6)"/><text x="64.6659%" y="143.50"></text></g><g><title>param_env (400,195 samples, 0.22%)</title><rect x="64.5920%" y="133" width="0.2246%" height="15" fill="rgb(247,143,39)"/><text x="64.8420%" y="143.50"></text></g><g><title>region_scope_tree (560,236 samples, 0.31%)</title><rect x="64.8245%" y="133" width="0.3144%" height="15" fill="rgb(236,97,10)"/><text x="65.0745%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,967,785 samples, 2.23%)</title><rect x="62.9264%" y="149" width="2.2265%" height="15" fill="rgb(233,208,19)"/><text x="63.1764%" y="159.50">c..</text></g><g><title>evaluate_obligation (203,872 samples, 0.11%)</title><rect x="66.2763%" y="133" width="0.1144%" height="15" fill="rgb(216,164,2)"/><text x="66.5263%" y="143.50"></text></g><g><title>param_env (317,579 samples, 0.18%)</title><rect x="66.4554%" y="133" width="0.1782%" height="15" fill="rgb(220,129,5)"/><text x="66.7054%" y="143.50"></text></g><g><title>check_item_well_formed (2,942,322 samples, 1.65%)</title><rect x="65.1529%" y="149" width="1.6511%" height="15" fill="rgb(242,17,10)"/><text x="65.4029%" y="159.50"></text></g><g><title>evaluate_obligation (231,102 samples, 0.13%)</title><rect x="67.4685%" y="133" width="0.1297%" height="15" fill="rgb(242,107,0)"/><text x="67.7185%" y="143.50"></text></g><g><title>implied_outlives_bounds (180,471 samples, 0.10%)</title><rect x="67.5981%" y="133" width="0.1013%" height="15" fill="rgb(251,28,31)"/><text x="67.8481%" y="143.50"></text></g><g><title>analysis (120,211,295 samples, 67.46%)</title><rect x="0.4367%" y="197" width="67.4568%" height="15" fill="rgb(233,223,10)"/><text x="0.6867%" y="207.50">analysis</text></g><g><title>type_check_crate (72,733,668 samples, 40.81%)</title><rect x="27.0789%" y="181" width="40.8147%" height="15" fill="rgb(215,21,27)"/><text x="27.3289%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,074,521 samples, 5.09%)</title><rect x="62.8013%" y="165" width="5.0922%" height="15" fill="rgb(232,23,21)"/><text x="63.0513%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (1,941,520 samples, 1.09%)</title><rect x="66.8040%" y="149" width="1.0895%" height="15" fill="rgb(244,5,23)"/><text x="67.0540%" y="159.50"></text></g><g><title>codegen_crate (569,106 samples, 0.32%)</title><rect x="67.9004%" y="197" width="0.3194%" height="15" fill="rgb(226,81,46)"/><text x="68.1504%" y="207.50"></text></g><g><title>AST_validation (352,504 samples, 0.20%)</title><rect x="68.3514%" y="181" width="0.1978%" height="15" fill="rgb(247,70,30)"/><text x="68.6014%" y="191.50"></text></g><g><title>complete_gated_feature_checking (223,182 samples, 0.13%)</title><rect x="68.5492%" y="181" width="0.1252%" height="15" fill="rgb(212,68,19)"/><text x="68.7992%" y="191.50"></text></g><g><title>metadata_load_macro (523,166 samples, 0.29%)</title><rect x="84.8941%" y="149" width="0.2936%" height="15" fill="rgb(240,187,13)"/><text x="85.1441%" y="159.50"></text></g><g><title>metadata_register_crate (2,618,520 samples, 1.47%)</title><rect x="85.1876%" y="149" width="1.4694%" height="15" fill="rgb(223,113,26)"/><text x="85.4376%" y="159.50"></text></g><g><title>metadata_register_crate (953,352 samples, 0.53%)</title><rect x="86.1220%" y="133" width="0.5350%" height="15" fill="rgb(206,192,2)"/><text x="86.3720%" y="143.50"></text></g><g><title>macro_expand_crate (32,208,218 samples, 18.07%)</title><rect x="68.7244%" y="181" width="18.0737%" height="15" fill="rgb(241,108,4)"/><text x="68.9744%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (32,191,288 samples, 18.06%)</title><rect x="68.7339%" y="165" width="18.0642%" height="15" fill="rgb(247,173,49)"/><text x="68.9839%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (251,463 samples, 0.14%)</title><rect x="86.6570%" y="149" width="0.1411%" height="15" fill="rgb(224,114,35)"/><text x="86.9070%" y="159.50"></text></g><g><title>finalize_macro_resolutions (349,234 samples, 0.20%)</title><rect x="86.9344%" y="165" width="0.1960%" height="15" fill="rgb(245,159,27)"/><text x="87.1844%" y="175.50"></text></g><g><title>late_resolve_crate (5,868,845 samples, 3.29%)</title><rect x="87.1303%" y="165" width="3.2933%" height="15" fill="rgb(245,172,44)"/><text x="87.3803%" y="175.50">lat..</text></g><g><title>configure_and_expand (39,912,253 samples, 22.40%)</title><rect x="68.2197%" y="197" width="22.3969%" height="15" fill="rgb(236,23,11)"/><text x="68.4697%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (6,646,234 samples, 3.73%)</title><rect x="86.8870%" y="181" width="3.7295%" height="15" fill="rgb(205,117,38)"/><text x="87.1370%" y="191.50">reso..</text></g><g><title>drop_ast (243,393 samples, 0.14%)</title><rect x="90.6166%" y="197" width="0.1366%" height="15" fill="rgb(237,72,25)"/><text x="90.8666%" y="207.50"></text></g><g><title>early_lint_checks (487,485 samples, 0.27%)</title><rect x="90.7613%" y="197" width="0.2736%" height="15" fill="rgb(244,70,9)"/><text x="91.0113%" y="207.50"></text></g><g><title>free_global_ctxt (3,781,512 samples, 2.12%)</title><rect x="91.0348%" y="197" width="2.1220%" height="15" fill="rgb(217,125,39)"/><text x="91.2848%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,327,045 samples, 0.74%)</title><rect x="93.1568%" y="197" width="0.7447%" height="15" fill="rgb(235,36,10)"/><text x="93.4068%" y="207.50"></text></g><g><title>hir_lowering (7,112,299 samples, 3.99%)</title><rect x="93.9015%" y="197" width="3.9911%" height="15" fill="rgb(251,123,47)"/><text x="94.1515%" y="207.50">hir_..</text></g><g><title>parse_crate (2,162,004 samples, 1.21%)</title><rect x="97.9204%" y="197" width="1.2132%" height="15" fill="rgb(221,13,13)"/><text x="98.1704%" y="207.50"></text></g><g><title>prepare_outputs (326,034 samples, 0.18%)</title><rect x="99.1389%" y="197" width="0.1830%" height="15" fill="rgb(238,131,9)"/><text x="99.3889%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (788,119 samples, 0.44%)</title><rect x="99.3219%" y="197" width="0.4423%" height="15" fill="rgb(211,50,8)"/><text x="99.5719%" y="207.50"></text></g><g><title>all (178,204,760 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (178,204,760 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (328,354 samples, 0.18%)</title><rect x="99.8157%" y="197" width="0.1843%" height="15" fill="rgb(246,228,12)"/><text x="100.0657%" y="207.50"></text></g></svg></svg>