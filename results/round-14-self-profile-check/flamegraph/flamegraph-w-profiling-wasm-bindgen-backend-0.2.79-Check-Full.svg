<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (1,074,858 samples, 0.10%)</title><rect x="14.1011%" y="149" width="0.1003%" height="15" fill="rgb(227,0,7)"/><text x="14.3511%" y="159.50"></text></g><g><title>adt_drop_tys (1,352,215 samples, 0.13%)</title><rect x="17.1259%" y="117" width="0.1262%" height="15" fill="rgb(217,0,24)"/><text x="17.3759%" y="127.50"></text></g><g><title>needs_drop_raw (4,906,348 samples, 0.46%)</title><rect x="17.0735%" y="133" width="0.4578%" height="15" fill="rgb(221,193,54)"/><text x="17.3235%" y="143.50"></text></g><g><title>is_copy_raw (2,992,413 samples, 0.28%)</title><rect x="17.2520%" y="117" width="0.2792%" height="15" fill="rgb(248,212,6)"/><text x="17.5020%" y="127.50"></text></g><g><title>evaluate_obligation (2,410,177 samples, 0.22%)</title><rect x="17.3063%" y="101" width="0.2249%" height="15" fill="rgb(208,68,35)"/><text x="17.5563%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,754,152 samples, 0.26%)</title><rect x="17.6242%" y="117" width="0.2570%" height="15" fill="rgb(232,128,0)"/><text x="17.8742%" y="127.50"></text></g><g><title>specialization_graph_of (2,104,381 samples, 0.20%)</title><rect x="17.9161%" y="117" width="0.1963%" height="15" fill="rgb(207,160,47)"/><text x="18.1661%" y="127.50"></text></g><g><title>resolve_instance (6,530,484 samples, 0.61%)</title><rect x="17.5312%" y="133" width="0.6093%" height="15" fill="rgb(228,23,34)"/><text x="17.7812%" y="143.50"></text></g><g><title>thir_body (11,890,863 samples, 1.11%)</title><rect x="18.1513%" y="133" width="1.1094%" height="15" fill="rgb(218,30,26)"/><text x="18.4013%" y="143.50"></text></g><g><title>mir_const (64,434,749 samples, 6.01%)</title><rect x="13.2569%" y="181" width="6.0116%" height="15" fill="rgb(220,122,19)"/><text x="13.5069%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (58,714,807 samples, 5.48%)</title><rect x="13.7906%" y="165" width="5.4780%" height="15" fill="rgb(250,228,42)"/><text x="14.0406%" y="175.50">unsafet..</text></g><g><title>mir_built (54,311,727 samples, 5.07%)</title><rect x="14.2014%" y="149" width="5.0672%" height="15" fill="rgb(240,193,28)"/><text x="14.4514%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (71,444,863 samples, 6.67%)</title><rect x="12.7007%" y="197" width="6.6656%" height="15" fill="rgb(216,20,37)"/><text x="12.9507%" y="207.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,894,394 samples, 0.18%)</title><rect x="19.3670%" y="197" width="0.1767%" height="15" fill="rgb(206,188,39)"/><text x="19.6170%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (2,718,861 samples, 0.25%)</title><rect x="19.5438%" y="197" width="0.2537%" height="15" fill="rgb(217,207,13)"/><text x="19.7938%" y="207.50"></text></g><g><title>normalize_projection_ty (1,767,094 samples, 0.16%)</title><rect x="19.6326%" y="181" width="0.1649%" height="15" fill="rgb(231,73,38)"/><text x="19.8826%" y="191.50"></text></g><g><title>type_op_normalize_predicate (2,562,333 samples, 0.24%)</title><rect x="19.7974%" y="197" width="0.2391%" height="15" fill="rgb(225,20,46)"/><text x="20.0474%" y="207.50"></text></g><g><title>normalize_projection_ty (1,398,562 samples, 0.13%)</title><rect x="19.9060%" y="181" width="0.1305%" height="15" fill="rgb(210,31,41)"/><text x="20.1560%" y="191.50"></text></g><g><title>type_op_prove_predicate (11,167,659 samples, 1.04%)</title><rect x="20.0371%" y="197" width="1.0419%" height="15" fill="rgb(221,200,47)"/><text x="20.2871%" y="207.50"></text></g><g><title>MIR_borrow_checking (220,969,982 samples, 20.62%)</title><rect x="0.4649%" y="229" width="20.6160%" height="15" fill="rgb(226,26,5)"/><text x="0.7149%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (220,459,136 samples, 20.57%)</title><rect x="0.5126%" y="213" width="20.5683%" height="15" fill="rgb(249,33,26)"/><text x="0.7626%" y="223.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,188,164 samples, 0.20%)</title><rect x="21.2081%" y="213" width="0.2042%" height="15" fill="rgb(235,183,28)"/><text x="21.4581%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (1,360,316 samples, 0.13%)</title><rect x="21.4986%" y="213" width="0.1269%" height="15" fill="rgb(221,5,38)"/><text x="21.7486%" y="223.50"></text></g><g><title>misc_checking_1 (4,623,711 samples, 0.43%)</title><rect x="21.2051%" y="229" width="0.4314%" height="15" fill="rgb(247,18,42)"/><text x="21.4551%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (3,973,455 samples, 0.37%)</title><rect x="21.6367%" y="213" width="0.3707%" height="15" fill="rgb(241,131,45)"/><text x="21.8867%" y="223.50"></text></g><g><title>check_mod_liveness (3,227,917 samples, 0.30%)</title><rect x="21.7063%" y="197" width="0.3012%" height="15" fill="rgb(249,31,29)"/><text x="21.9563%" y="207.50"></text></g><g><title>misc_checking_2 (7,765,817 samples, 0.72%)</title><rect x="21.6365%" y="229" width="0.7245%" height="15" fill="rgb(225,111,53)"/><text x="21.8865%" y="239.50"></text></g><g><title>match_checking (3,790,262 samples, 0.35%)</title><rect x="22.0074%" y="213" width="0.3536%" height="15" fill="rgb(238,160,17)"/><text x="22.2574%" y="223.50"></text></g><g><title>check_match (3,686,641 samples, 0.34%)</title><rect x="22.0171%" y="197" width="0.3440%" height="15" fill="rgb(214,148,48)"/><text x="22.2671%" y="207.50"></text></g><g><title>death_checking (1,986,493 samples, 0.19%)</title><rect x="22.4543%" y="213" width="0.1853%" height="15" fill="rgb(232,36,49)"/><text x="22.7043%" y="223.50"></text></g><g><title>crate_lints (7,246,351 samples, 0.68%)</title><rect x="22.6400%" y="197" width="0.6761%" height="15" fill="rgb(209,103,24)"/><text x="22.8900%" y="207.50"></text></g><g><title>type_of (1,323,644 samples, 0.12%)</title><rect x="23.1925%" y="181" width="0.1235%" height="15" fill="rgb(229,88,8)"/><text x="23.4425%" y="191.50"></text></g><g><title>layout_of (1,323,095 samples, 0.12%)</title><rect x="23.9212%" y="37" width="0.1234%" height="15" fill="rgb(213,181,19)"/><text x="24.1712%" y="47.50"></text></g><g><title>layout_of (1,978,784 samples, 0.18%)</title><rect x="23.9033%" y="53" width="0.1846%" height="15" fill="rgb(254,191,54)"/><text x="24.1533%" y="63.50"></text></g><g><title>layout_of (2,126,135 samples, 0.20%)</title><rect x="23.8919%" y="69" width="0.1984%" height="15" fill="rgb(241,83,37)"/><text x="24.1419%" y="79.50"></text></g><g><title>layout_of (2,364,227 samples, 0.22%)</title><rect x="23.8751%" y="101" width="0.2206%" height="15" fill="rgb(233,36,39)"/><text x="24.1251%" y="111.50"></text></g><g><title>layout_of (2,269,277 samples, 0.21%)</title><rect x="23.8839%" y="85" width="0.2117%" height="15" fill="rgb(226,3,54)"/><text x="24.1339%" y="95.50"></text></g><g><title>layout_of (2,507,108 samples, 0.23%)</title><rect x="23.8635%" y="133" width="0.2339%" height="15" fill="rgb(245,192,40)"/><text x="24.1135%" y="143.50"></text></g><g><title>layout_of (2,450,607 samples, 0.23%)</title><rect x="23.8688%" y="117" width="0.2286%" height="15" fill="rgb(238,167,29)"/><text x="24.1188%" y="127.50"></text></g><g><title>layout_of (2,642,210 samples, 0.25%)</title><rect x="23.8512%" y="165" width="0.2465%" height="15" fill="rgb(232,182,51)"/><text x="24.1012%" y="175.50"></text></g><g><title>layout_of (2,571,799 samples, 0.24%)</title><rect x="23.8577%" y="149" width="0.2399%" height="15" fill="rgb(231,60,39)"/><text x="24.1077%" y="159.50"></text></g><g><title>lint_checking (15,628,586 samples, 1.46%)</title><rect x="22.6397%" y="213" width="1.4581%" height="15" fill="rgb(208,69,12)"/><text x="22.8897%" y="223.50"></text></g><g><title>module_lints (8,378,935 samples, 0.78%)</title><rect x="23.3160%" y="197" width="0.7817%" height="15" fill="rgb(235,93,37)"/><text x="23.5660%" y="207.50"></text></g><g><title>lint_mod (8,368,575 samples, 0.78%)</title><rect x="23.3170%" y="181" width="0.7808%" height="15" fill="rgb(213,116,39)"/><text x="23.5670%" y="191.50"></text></g><g><title>privacy_access_levels (1,766,090 samples, 0.16%)</title><rect x="24.0978%" y="213" width="0.1648%" height="15" fill="rgb(222,207,29)"/><text x="24.3478%" y="223.50"></text></g><g><title>privacy_checking_modules (7,412,994 samples, 0.69%)</title><rect x="24.2625%" y="213" width="0.6916%" height="15" fill="rgb(206,96,30)"/><text x="24.5125%" y="223.50"></text></g><g><title>check_mod_privacy (7,405,204 samples, 0.69%)</title><rect x="24.2633%" y="197" width="0.6909%" height="15" fill="rgb(218,138,4)"/><text x="24.5133%" y="207.50"></text></g><g><title>misc_checking_3 (27,831,274 samples, 2.60%)</title><rect x="22.3610%" y="229" width="2.5966%" height="15" fill="rgb(250,191,14)"/><text x="22.6110%" y="239.50">mi..</text></g><g><title>impl_parent (3,447,342 samples, 0.32%)</title><rect x="25.5354%" y="165" width="0.3216%" height="15" fill="rgb(239,60,40)"/><text x="25.7854%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,848,432 samples, 0.17%)</title><rect x="25.6846%" y="149" width="0.1725%" height="15" fill="rgb(206,27,48)"/><text x="25.9346%" y="159.50"></text></g><g><title>impl_trait_ref (6,520,841 samples, 0.61%)</title><rect x="25.8570%" y="165" width="0.6084%" height="15" fill="rgb(225,35,8)"/><text x="26.1070%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,142,160 samples, 0.48%)</title><rect x="25.9856%" y="149" width="0.4798%" height="15" fill="rgb(250,213,24)"/><text x="26.2356%" y="159.50"></text></g><g><title>trait_impls_of (1,141,381 samples, 0.11%)</title><rect x="26.4676%" y="165" width="0.1065%" height="15" fill="rgb(247,123,22)"/><text x="26.7176%" y="175.50"></text></g><g><title>coherent_trait (17,122,953 samples, 1.60%)</title><rect x="24.9767%" y="197" width="1.5975%" height="15" fill="rgb(231,138,38)"/><text x="25.2267%" y="207.50"></text></g><g><title>specialization_graph_of (16,715,539 samples, 1.56%)</title><rect x="25.0147%" y="181" width="1.5595%" height="15" fill="rgb(231,145,46)"/><text x="25.2647%" y="191.50"></text></g><g><title>coherence_checking (17,336,636 samples, 1.62%)</title><rect x="24.9740%" y="213" width="1.6175%" height="15" fill="rgb(251,118,11)"/><text x="25.2240%" y="223.50"></text></g><g><title>associated_items (1,321,885 samples, 0.12%)</title><rect x="37.0364%" y="165" width="0.1233%" height="15" fill="rgb(217,147,25)"/><text x="37.2864%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,317,444 samples, 0.12%)</title><rect x="37.5394%" y="101" width="0.1229%" height="15" fill="rgb(247,81,37)"/><text x="37.7894%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,782,699 samples, 0.17%)</title><rect x="37.5035%" y="117" width="0.1663%" height="15" fill="rgb(209,12,38)"/><text x="37.7535%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,417,124 samples, 0.23%)</title><rect x="37.4528%" y="133" width="0.2255%" height="15" fill="rgb(227,1,9)"/><text x="37.7028%" y="143.50"></text></g><g><title>dropck_outlives (5,515,897 samples, 0.51%)</title><rect x="37.1746%" y="165" width="0.5146%" height="15" fill="rgb(248,47,43)"/><text x="37.4246%" y="175.50"></text></g><g><title>adt_dtorck_constraint (3,201,013 samples, 0.30%)</title><rect x="37.3906%" y="149" width="0.2986%" height="15" fill="rgb(221,10,30)"/><text x="37.6406%" y="159.50"></text></g><g><title>specializes (1,246,238 samples, 0.12%)</title><rect x="38.2652%" y="149" width="0.1163%" height="15" fill="rgb(210,229,1)"/><text x="38.5152%" y="159.50"></text></g><g><title>evaluate_obligation (8,022,353 samples, 0.75%)</title><rect x="37.6895%" y="165" width="0.7485%" height="15" fill="rgb(222,148,37)"/><text x="37.9395%" y="175.50"></text></g><g><title>method_autoderef_steps (1,883,580 samples, 0.18%)</title><rect x="38.6178%" y="165" width="0.1757%" height="15" fill="rgb(234,67,33)"/><text x="38.8678%" y="175.50"></text></g><g><title>dropck_outlives (1,632,094 samples, 0.15%)</title><rect x="50.5354%" y="149" width="0.1523%" height="15" fill="rgb(247,98,35)"/><text x="50.7854%" y="159.50"></text></g><g><title>evaluate_obligation (5,294,654 samples, 0.49%)</title><rect x="50.6879%" y="149" width="0.4940%" height="15" fill="rgb(247,138,52)"/><text x="50.9379%" y="159.50"></text></g><g><title>method_autoderef_steps (3,158,459 samples, 0.29%)</title><rect x="51.2901%" y="149" width="0.2947%" height="15" fill="rgb(213,79,30)"/><text x="51.5401%" y="159.50"></text></g><g><title>typeck (136,553,398 samples, 12.74%)</title><rect x="38.9228%" y="165" width="12.7401%" height="15" fill="rgb(246,177,23)"/><text x="39.1728%" y="175.50">typeck</text></g><g><title>item_bodies_checking (268,783,480 samples, 25.08%)</title><rect x="26.5977%" y="213" width="25.0769%" height="15" fill="rgb(230,62,27)"/><text x="26.8477%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (268,779,550 samples, 25.08%)</title><rect x="26.5980%" y="197" width="25.0765%" height="15" fill="rgb(216,154,8)"/><text x="26.8480%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (268,564,398 samples, 25.06%)</title><rect x="26.6181%" y="181" width="25.0564%" height="15" fill="rgb(244,35,45)"/><text x="26.8681%" y="191.50">typeck</text></g><g><title>item_types_checking (5,849,837 samples, 0.55%)</title><rect x="51.6745%" y="213" width="0.5458%" height="15" fill="rgb(251,115,12)"/><text x="51.9245%" y="223.50"></text></g><g><title>check_mod_item_types (5,841,887 samples, 0.55%)</title><rect x="51.6753%" y="197" width="0.5450%" height="15" fill="rgb(240,54,50)"/><text x="51.9253%" y="207.50"></text></g><g><title>named_region_map (2,245,875 samples, 0.21%)</title><rect x="52.4330%" y="165" width="0.2095%" height="15" fill="rgb(233,84,52)"/><text x="52.6830%" y="175.50"></text></g><g><title>resolve_lifetimes (2,196,974 samples, 0.20%)</title><rect x="52.4375%" y="149" width="0.2050%" height="15" fill="rgb(207,117,47)"/><text x="52.6875%" y="159.50"></text></g><g><title>lint_levels (1,295,355 samples, 0.12%)</title><rect x="52.5216%" y="133" width="0.1209%" height="15" fill="rgb(249,43,39)"/><text x="52.7716%" y="143.50"></text></g><g><title>generics_of (2,960,485 samples, 0.28%)</title><rect x="52.3689%" y="181" width="0.2762%" height="15" fill="rgb(209,38,44)"/><text x="52.6189%" y="191.50"></text></g><g><title>predicates_of (1,989,611 samples, 0.19%)</title><rect x="52.6543%" y="181" width="0.1856%" height="15" fill="rgb(236,212,23)"/><text x="52.9043%" y="191.50"></text></g><g><title>predicates_defined_on (1,809,610 samples, 0.17%)</title><rect x="52.6711%" y="165" width="0.1688%" height="15" fill="rgb(242,79,21)"/><text x="52.9211%" y="175.50"></text></g><g><title>type_collecting (6,884,878 samples, 0.64%)</title><rect x="52.2210%" y="213" width="0.6423%" height="15" fill="rgb(211,96,35)"/><text x="52.4710%" y="223.50"></text></g><g><title>collect_mod_item_types (6,867,558 samples, 0.64%)</title><rect x="52.2226%" y="197" width="0.6407%" height="15" fill="rgb(253,215,40)"/><text x="52.4726%" y="207.50"></text></g><g><title>evaluate_obligation (1,275,487 samples, 0.12%)</title><rect x="53.2162%" y="181" width="0.1190%" height="15" fill="rgb(211,81,21)"/><text x="53.4662%" y="191.50"></text></g><g><title>region_scope_tree (3,257,903 samples, 0.30%)</title><rect x="53.4397%" y="181" width="0.3040%" height="15" fill="rgb(208,190,38)"/><text x="53.6897%" y="191.50"></text></g><g><title>check_impl_item_well_formed (8,809,657 samples, 0.82%)</title><rect x="52.9249%" y="197" width="0.8219%" height="15" fill="rgb(235,213,38)"/><text x="53.1749%" y="207.50"></text></g><g><title>adt_sized_constraint (1,483,306 samples, 0.14%)</title><rect x="54.1496%" y="165" width="0.1384%" height="15" fill="rgb(237,122,38)"/><text x="54.3996%" y="175.50"></text></g><g><title>evaluate_obligation (2,441,474 samples, 0.23%)</title><rect x="54.0726%" y="181" width="0.2278%" height="15" fill="rgb(244,218,35)"/><text x="54.3226%" y="191.50"></text></g><g><title>check_item_well_formed (7,586,266 samples, 0.71%)</title><rect x="53.7468%" y="197" width="0.7078%" height="15" fill="rgb(240,68,47)"/><text x="53.9968%" y="207.50"></text></g><g><title>analysis (581,308,244 samples, 54.23%)</title><rect x="0.2404%" y="245" width="54.2347%" height="15" fill="rgb(210,16,53)"/><text x="0.4904%" y="255.50">analysis</text></g><g><title>type_check_crate (316,379,248 samples, 29.52%)</title><rect x="24.9576%" y="229" width="29.5174%" height="15" fill="rgb(235,124,12)"/><text x="25.2076%" y="239.50">type_check_crate</text></g><g><title>wf_checking (17,261,794 samples, 1.61%)</title><rect x="52.8646%" y="213" width="1.6105%" height="15" fill="rgb(224,169,11)"/><text x="53.1146%" y="223.50"></text></g><g><title>AST_validation (1,237,734 samples, 0.12%)</title><rect x="54.5391%" y="229" width="0.1155%" height="15" fill="rgb(250,166,2)"/><text x="54.7891%" y="239.50"></text></g><g><title>metadata_register_crate (2,919,283 samples, 0.27%)</title><rect x="92.8199%" y="197" width="0.2724%" height="15" fill="rgb(242,216,29)"/><text x="93.0699%" y="207.50"></text></g><g><title>macro_expand_crate (412,072,485 samples, 38.45%)</title><rect x="54.7527%" y="229" width="38.4454%" height="15" fill="rgb(230,116,27)"/><text x="55.0027%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (412,042,755 samples, 38.44%)</title><rect x="54.7554%" y="213" width="38.4426%" height="15" fill="rgb(228,99,48)"/><text x="55.0054%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,133,952 samples, 0.11%)</title><rect x="93.0923%" y="197" width="0.1058%" height="15" fill="rgb(253,11,6)"/><text x="93.3423%" y="207.50"></text></g><g><title>finalize_macro_resolutions (7,122,731 samples, 0.66%)</title><rect x="93.2310%" y="213" width="0.6645%" height="15" fill="rgb(247,143,39)"/><text x="93.4810%" y="223.50"></text></g><g><title>late_resolve_crate (13,573,603 samples, 1.27%)</title><rect x="93.8955%" y="213" width="1.2664%" height="15" fill="rgb(236,97,10)"/><text x="94.1455%" y="223.50"></text></g><g><title>resolve_check_unused (1,244,654 samples, 0.12%)</title><rect x="95.1663%" y="213" width="0.1161%" height="15" fill="rgb(233,208,19)"/><text x="95.4163%" y="223.50"></text></g><g><title>configure_and_expand (437,855,126 samples, 40.85%)</title><rect x="54.5189%" y="245" width="40.8508%" height="15" fill="rgb(216,164,2)"/><text x="54.7689%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (23,159,252 samples, 2.16%)</title><rect x="93.2091%" y="229" width="2.1607%" height="15" fill="rgb(220,129,5)"/><text x="93.4591%" y="239.50">r..</text></g><g><title>drop_ast (2,217,605 samples, 0.21%)</title><rect x="95.3698%" y="245" width="0.2069%" height="15" fill="rgb(242,17,10)"/><text x="95.6198%" y="255.50"></text></g><g><title>early_lint_checks (5,459,552 samples, 0.51%)</title><rect x="95.5788%" y="245" width="0.5094%" height="15" fill="rgb(242,107,0)"/><text x="95.8288%" y="255.50"></text></g><g><title>free_global_ctxt (9,211,454 samples, 0.86%)</title><rect x="96.0881%" y="245" width="0.8594%" height="15" fill="rgb(251,28,31)"/><text x="96.3381%" y="255.50"></text></g><g><title>generate_crate_metadata (3,865,534 samples, 0.36%)</title><rect x="96.9475%" y="245" width="0.3606%" height="15" fill="rgb(233,223,10)"/><text x="97.1975%" y="255.50"></text></g><g><title>hir_lowering (25,629,149 samples, 2.39%)</title><rect x="97.3082%" y="245" width="2.3911%" height="15" fill="rgb(215,21,27)"/><text x="97.5582%" y="255.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,759,730 samples, 0.16%)</title><rect x="99.7714%" y="245" width="0.1642%" height="15" fill="rgb(232,23,21)"/><text x="100.0214%" y="255.50"></text></g><g><title>all (1,071,838,984 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (1,071,838,984 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>