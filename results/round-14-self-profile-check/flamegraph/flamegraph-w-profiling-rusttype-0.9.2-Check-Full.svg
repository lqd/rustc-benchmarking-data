<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (364,004 samples, 0.19%)</title><rect x="13.6868%" y="133" width="0.1940%" height="15" fill="rgb(227,0,7)"/><text x="13.9368%" y="143.50"></text></g><g><title>item_attrs (279,876 samples, 0.15%)</title><rect x="14.4205%" y="101" width="0.1492%" height="15" fill="rgb(217,0,24)"/><text x="14.6705%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (266,686 samples, 0.14%)</title><rect x="14.4275%" y="85" width="0.1421%" height="15" fill="rgb(221,193,54)"/><text x="14.6775%" y="95.50"></text></g><g><title>codegen_fn_attrs (410,877 samples, 0.22%)</title><rect x="14.3618%" y="117" width="0.2190%" height="15" fill="rgb(248,212,6)"/><text x="14.6118%" y="127.50"></text></g><g><title>adt_drop_tys (197,213 samples, 0.11%)</title><rect x="17.6531%" y="69" width="0.1051%" height="15" fill="rgb(208,68,35)"/><text x="17.9031%" y="79.50"></text></g><g><title>is_copy_raw (365,513 samples, 0.19%)</title><rect x="17.7599%" y="69" width="0.1948%" height="15" fill="rgb(232,128,0)"/><text x="18.0099%" y="79.50"></text></g><g><title>evaluate_obligation (311,073 samples, 0.17%)</title><rect x="17.7889%" y="53" width="0.1658%" height="15" fill="rgb(207,160,47)"/><text x="18.0389%" y="63.50"></text></g><g><title>adt_drop_tys (723,026 samples, 0.39%)</title><rect x="17.6209%" y="85" width="0.3853%" height="15" fill="rgb(228,23,34)"/><text x="17.8709%" y="95.50"></text></g><g><title>needs_drop_raw (2,058,701 samples, 1.10%)</title><rect x="17.5368%" y="101" width="1.0972%" height="15" fill="rgb(218,30,26)"/><text x="17.7868%" y="111.50"></text></g><g><title>is_copy_raw (1,177,994 samples, 0.63%)</title><rect x="18.0062%" y="85" width="0.6278%" height="15" fill="rgb(220,122,19)"/><text x="18.2562%" y="95.50"></text></g><g><title>evaluate_obligation (962,402 samples, 0.51%)</title><rect x="18.1211%" y="69" width="0.5129%" height="15" fill="rgb(250,228,42)"/><text x="18.3711%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (665,785 samples, 0.35%)</title><rect x="18.8589%" y="85" width="0.3548%" height="15" fill="rgb(240,193,28)"/><text x="19.1089%" y="95.50"></text></g><g><title>resolve_instance (1,385,504 samples, 0.74%)</title><rect x="18.6480%" y="101" width="0.7384%" height="15" fill="rgb(216,20,37)"/><text x="18.8980%" y="111.50"></text></g><g><title>thir_body (2,074,963 samples, 1.11%)</title><rect x="19.4207%" y="101" width="1.1059%" height="15" fill="rgb(206,188,39)"/><text x="19.6707%" y="111.50"></text></g><g><title>mir_const (14,507,583 samples, 7.73%)</title><rect x="12.8196%" y="149" width="7.7319%" height="15" fill="rgb(217,207,13)"/><text x="13.0696%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (12,516,302 samples, 6.67%)</title><rect x="13.8808%" y="133" width="6.6707%" height="15" fill="rgb(231,73,38)"/><text x="14.1308%" y="143.50">unsafety_..</text></g><g><title>mir_built (11,203,044 samples, 5.97%)</title><rect x="14.5808%" y="117" width="5.9708%" height="15" fill="rgb(225,20,46)"/><text x="14.8308%" y="127.50">mir_built</text></g><g><title>mir_promoted (16,027,829 samples, 8.54%)</title><rect x="12.0621%" y="165" width="8.5422%" height="15" fill="rgb(210,31,41)"/><text x="12.3121%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (431,004 samples, 0.23%)</title><rect x="20.6042%" y="165" width="0.2297%" height="15" fill="rgb(221,200,47)"/><text x="20.8542%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (448,495 samples, 0.24%)</title><rect x="20.8340%" y="165" width="0.2390%" height="15" fill="rgb(226,26,5)"/><text x="21.0840%" y="175.50"></text></g><g><title>normalize_projection_ty (296,103 samples, 0.16%)</title><rect x="20.9152%" y="149" width="0.1578%" height="15" fill="rgb(249,33,26)"/><text x="21.1652%" y="159.50"></text></g><g><title>type_op_normalize_predicate (339,604 samples, 0.18%)</title><rect x="21.0730%" y="165" width="0.1810%" height="15" fill="rgb(235,183,28)"/><text x="21.3230%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,834,449 samples, 1.51%)</title><rect x="21.2635%" y="165" width="1.5106%" height="15" fill="rgb(221,5,38)"/><text x="21.5135%" y="175.50"></text></g><g><title>MIR_borrow_checking (41,342,422 samples, 22.03%)</title><rect x="0.7478%" y="197" width="22.0338%" height="15" fill="rgb(247,18,42)"/><text x="0.9978%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (41,079,488 samples, 21.89%)</title><rect x="0.8879%" y="181" width="21.8937%" height="15" fill="rgb(241,131,45)"/><text x="1.1379%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (308,024 samples, 0.16%)</title><rect x="22.8192%" y="197" width="0.1642%" height="15" fill="rgb(249,31,29)"/><text x="23.0692%" y="207.50"></text></g><g><title>should_inherit_track_caller (376,534 samples, 0.20%)</title><rect x="23.3598%" y="149" width="0.2007%" height="15" fill="rgb(225,111,53)"/><text x="23.6098%" y="159.50"></text></g><g><title>codegen_fn_attrs (658,967 samples, 0.35%)</title><rect x="23.2182%" y="165" width="0.3512%" height="15" fill="rgb(238,160,17)"/><text x="23.4682%" y="175.50"></text></g><g><title>check_mod_attrs (1,075,181 samples, 0.57%)</title><rect x="22.9965%" y="181" width="0.5730%" height="15" fill="rgb(214,148,48)"/><text x="23.2465%" y="191.50"></text></g><g><title>check_mod_const_bodies (222,253 samples, 0.12%)</title><rect x="23.5695%" y="181" width="0.1185%" height="15" fill="rgb(232,36,49)"/><text x="23.8195%" y="191.50"></text></g><g><title>lint_levels (280,783 samples, 0.15%)</title><rect x="23.9022%" y="165" width="0.1496%" height="15" fill="rgb(209,103,24)"/><text x="24.1522%" y="175.50"></text></g><g><title>lookup_deprecation_entry (204,202 samples, 0.11%)</title><rect x="24.0519%" y="165" width="0.1088%" height="15" fill="rgb(229,88,8)"/><text x="24.3019%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (847,419 samples, 0.45%)</title><rect x="23.7569%" y="181" width="0.4516%" height="15" fill="rgb(213,181,19)"/><text x="24.0069%" y="191.50"></text></g><g><title>misc_checking_1 (2,369,486 samples, 1.26%)</title><rect x="22.9837%" y="197" width="1.2628%" height="15" fill="rgb(254,191,54)"/><text x="23.2337%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (930,591 samples, 0.50%)</title><rect x="24.2474%" y="181" width="0.4960%" height="15" fill="rgb(241,83,37)"/><text x="24.4974%" y="191.50"></text></g><g><title>check_mod_liveness (776,727 samples, 0.41%)</title><rect x="24.3294%" y="165" width="0.4140%" height="15" fill="rgb(233,36,39)"/><text x="24.5794%" y="175.50"></text></g><g><title>type_uninhabited_from (356,965 samples, 0.19%)</title><rect x="24.5531%" y="149" width="0.1902%" height="15" fill="rgb(226,3,54)"/><text x="24.8031%" y="159.50"></text></g><g><title>type_uninhabited_from (318,564 samples, 0.17%)</title><rect x="24.5736%" y="133" width="0.1698%" height="15" fill="rgb(245,192,40)"/><text x="24.8236%" y="143.50"></text></g><g><title>type_uninhabited_from (282,254 samples, 0.15%)</title><rect x="24.5930%" y="117" width="0.1504%" height="15" fill="rgb(238,167,29)"/><text x="24.8430%" y="127.50"></text></g><g><title>type_uninhabited_from (263,354 samples, 0.14%)</title><rect x="24.6030%" y="101" width="0.1404%" height="15" fill="rgb(232,182,51)"/><text x="24.8530%" y="111.50"></text></g><g><title>misc_checking_2 (2,022,412 samples, 1.08%)</title><rect x="24.2465%" y="197" width="1.0779%" height="15" fill="rgb(231,60,39)"/><text x="24.4965%" y="207.50"></text></g><g><title>match_checking (1,090,151 samples, 0.58%)</title><rect x="24.7434%" y="181" width="0.5810%" height="15" fill="rgb(208,69,12)"/><text x="24.9934%" y="191.50"></text></g><g><title>check_match (1,029,530 samples, 0.55%)</title><rect x="24.7757%" y="165" width="0.5487%" height="15" fill="rgb(235,93,37)"/><text x="25.0257%" y="175.50"></text></g><g><title>check_private_in_public (410,754 samples, 0.22%)</title><rect x="25.3303%" y="181" width="0.2189%" height="15" fill="rgb(213,116,39)"/><text x="25.5803%" y="191.50"></text></g><g><title>death_checking (836,959 samples, 0.45%)</title><rect x="25.5492%" y="181" width="0.4461%" height="15" fill="rgb(222,207,29)"/><text x="25.7992%" y="191.50"></text></g><g><title>item_attrs (215,803 samples, 0.12%)</title><rect x="25.8803%" y="165" width="0.1150%" height="15" fill="rgb(206,96,30)"/><text x="26.1303%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (213,193 samples, 0.11%)</title><rect x="25.8817%" y="149" width="0.1136%" height="15" fill="rgb(218,138,4)"/><text x="26.1317%" y="159.50"></text></g><g><title>param_env (211,831 samples, 0.11%)</title><rect x="26.6545%" y="149" width="0.1129%" height="15" fill="rgb(250,191,14)"/><text x="26.9045%" y="159.50"></text></g><g><title>crate_lints (2,668,119 samples, 1.42%)</title><rect x="25.9962%" y="165" width="1.4220%" height="15" fill="rgb(239,60,40)"/><text x="26.2462%" y="175.50"></text></g><g><title>type_of (1,164,093 samples, 0.62%)</title><rect x="26.7978%" y="149" width="0.6204%" height="15" fill="rgb(206,27,48)"/><text x="27.0478%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (923,650 samples, 0.49%)</title><rect x="26.9260%" y="133" width="0.4923%" height="15" fill="rgb(225,35,8)"/><text x="27.1760%" y="143.50"></text></g><g><title>lint_checking (3,428,678 samples, 1.83%)</title><rect x="25.9953%" y="181" width="1.8273%" height="15" fill="rgb(250,213,24)"/><text x="26.2453%" y="191.50">l..</text></g><g><title>module_lints (758,769 samples, 0.40%)</title><rect x="27.4182%" y="165" width="0.4044%" height="15" fill="rgb(247,123,22)"/><text x="27.6682%" y="175.50"></text></g><g><title>lint_mod (753,179 samples, 0.40%)</title><rect x="27.4212%" y="149" width="0.4014%" height="15" fill="rgb(231,138,38)"/><text x="27.6712%" y="159.50"></text></g><g><title>privacy_access_levels (563,726 samples, 0.30%)</title><rect x="27.8226%" y="181" width="0.3004%" height="15" fill="rgb(231,145,46)"/><text x="28.0726%" y="191.50"></text></g><g><title>privacy_checking_modules (1,474,706 samples, 0.79%)</title><rect x="28.1231%" y="181" width="0.7860%" height="15" fill="rgb(251,118,11)"/><text x="28.3731%" y="191.50"></text></g><g><title>check_mod_privacy (1,471,106 samples, 0.78%)</title><rect x="28.1250%" y="165" width="0.7840%" height="15" fill="rgb(217,147,25)"/><text x="28.3750%" y="175.50"></text></g><g><title>misc_checking_3 (6,752,394 samples, 3.60%)</title><rect x="25.3244%" y="197" width="3.5987%" height="15" fill="rgb(247,81,37)"/><text x="25.5744%" y="207.50">misc..</text></g><g><title>adt_destructor (297,704 samples, 0.16%)</title><rect x="29.0369%" y="149" width="0.1587%" height="15" fill="rgb(209,12,38)"/><text x="29.2869%" y="159.50"></text></g><g><title>coherent_trait (293,224 samples, 0.16%)</title><rect x="29.0393%" y="133" width="0.1563%" height="15" fill="rgb(227,1,9)"/><text x="29.2893%" y="143.50"></text></g><g><title>specialization_graph_of (291,884 samples, 0.16%)</title><rect x="29.0400%" y="117" width="0.1556%" height="15" fill="rgb(248,47,43)"/><text x="29.2900%" y="127.50"></text></g><g><title>impl_parent (3,432,811 samples, 1.83%)</title><rect x="32.8003%" y="133" width="1.8295%" height="15" fill="rgb(221,10,30)"/><text x="33.0503%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,967,215 samples, 1.05%)</title><rect x="33.5814%" y="117" width="1.0484%" height="15" fill="rgb(210,229,1)"/><text x="33.8314%" y="127.50"></text></g><g><title>impl_trait_ref (7,706,832 samples, 4.11%)</title><rect x="34.6322%" y="133" width="4.1074%" height="15" fill="rgb(222,148,37)"/><text x="34.8822%" y="143.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,887,772 samples, 3.14%)</title><rect x="35.6017%" y="117" width="3.1379%" height="15" fill="rgb(234,67,33)"/><text x="35.8517%" y="127.50">met..</text></g><g><title>trait_impls_of (1,246,924 samples, 0.66%)</title><rect x="38.7818%" y="133" width="0.6646%" height="15" fill="rgb(247,98,35)"/><text x="39.0318%" y="143.50"></text></g><g><title>implementations_of_trait (362,496 samples, 0.19%)</title><rect x="39.2532%" y="117" width="0.1932%" height="15" fill="rgb(247,138,52)"/><text x="39.5032%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (282,445 samples, 0.15%)</title><rect x="39.2958%" y="101" width="0.1505%" height="15" fill="rgb(213,79,30)"/><text x="39.5458%" y="111.50"></text></g><g><title>coherent_trait (19,610,649 samples, 10.45%)</title><rect x="28.9952%" y="165" width="10.4517%" height="15" fill="rgb(246,177,23)"/><text x="29.2452%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (19,012,633 samples, 10.13%)</title><rect x="29.3139%" y="149" width="10.1330%" height="15" fill="rgb(230,62,27)"/><text x="29.5639%" y="159.50">specialization_..</text></g><g><title>coherence_checking (19,754,181 samples, 10.53%)</title><rect x="28.9802%" y="181" width="10.5282%" height="15" fill="rgb(216,154,8)"/><text x="29.2302%" y="191.50">coherence_check..</text></g><g><title>associated_item (228,853 samples, 0.12%)</title><rect x="56.5530%" y="117" width="0.1220%" height="15" fill="rgb(244,35,45)"/><text x="56.8030%" y="127.50"></text></g><g><title>associated_items (352,664 samples, 0.19%)</title><rect x="56.5007%" y="133" width="0.1880%" height="15" fill="rgb(251,115,12)"/><text x="56.7507%" y="143.50"></text></g><g><title>def_span (238,093 samples, 0.13%)</title><rect x="56.7330%" y="133" width="0.1269%" height="15" fill="rgb(240,54,50)"/><text x="56.9830%" y="143.50"></text></g><g><title>adt_def (462,625 samples, 0.25%)</title><rect x="57.3599%" y="85" width="0.2466%" height="15" fill="rgb(233,84,52)"/><text x="57.6099%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (460,015 samples, 0.25%)</title><rect x="57.3613%" y="69" width="0.2452%" height="15" fill="rgb(207,117,47)"/><text x="57.6113%" y="79.50"></text></g><g><title>item_attrs (382,974 samples, 0.20%)</title><rect x="57.4024%" y="53" width="0.2041%" height="15" fill="rgb(249,43,39)"/><text x="57.6524%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (380,074 samples, 0.20%)</title><rect x="57.4039%" y="37" width="0.2026%" height="15" fill="rgb(209,38,44)"/><text x="57.6539%" y="47.50"></text></g><g><title>adt_dtorck_constraint (711,689 samples, 0.38%)</title><rect x="57.3377%" y="101" width="0.3793%" height="15" fill="rgb(236,212,23)"/><text x="57.5877%" y="111.50"></text></g><g><title>dropck_outlives (1,752,070 samples, 0.93%)</title><rect x="56.8599%" y="133" width="0.9338%" height="15" fill="rgb(242,79,21)"/><text x="57.1099%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,206,343 samples, 0.64%)</title><rect x="57.1507%" y="117" width="0.6429%" height="15" fill="rgb(211,96,35)"/><text x="57.4007%" y="127.50"></text></g><g><title>evaluate_obligation (2,103,568 samples, 1.12%)</title><rect x="57.7937%" y="133" width="1.1211%" height="15" fill="rgb(253,215,40)"/><text x="58.0437%" y="143.50"></text></g><g><title>method_autoderef_steps (421,521 samples, 0.22%)</title><rect x="59.2459%" y="133" width="0.2247%" height="15" fill="rgb(211,81,21)"/><text x="59.4959%" y="143.50"></text></g><g><title>evaluate_obligation (213,051 samples, 0.11%)</title><rect x="59.3570%" y="117" width="0.1135%" height="15" fill="rgb(208,190,38)"/><text x="59.6070%" y="127.50"></text></g><g><title>object_safety_violations (286,733 samples, 0.15%)</title><rect x="59.4706%" y="133" width="0.1528%" height="15" fill="rgb(235,213,38)"/><text x="59.7206%" y="143.50"></text></g><g><title>predicates_of (390,294 samples, 0.21%)</title><rect x="59.6692%" y="133" width="0.2080%" height="15" fill="rgb(237,122,38)"/><text x="59.9192%" y="143.50"></text></g><g><title>predicates_defined_on (259,892 samples, 0.14%)</title><rect x="59.7387%" y="117" width="0.1385%" height="15" fill="rgb(244,218,35)"/><text x="59.9887%" y="127.50"></text></g><g><title>evaluate_obligation (970,539 samples, 0.52%)</title><rect x="61.8876%" y="117" width="0.5173%" height="15" fill="rgb(240,68,47)"/><text x="62.1376%" y="127.50"></text></g><g><title>method_autoderef_steps (213,082 samples, 0.11%)</title><rect x="62.5465%" y="117" width="0.1136%" height="15" fill="rgb(210,16,53)"/><text x="62.7965%" y="127.50"></text></g><g><title>typeck (5,215,358 samples, 2.78%)</title><rect x="59.9424%" y="133" width="2.7796%" height="15" fill="rgb(235,124,12)"/><text x="60.1924%" y="143.50">ty..</text></g><g><title>item_bodies_checking (43,564,616 samples, 23.22%)</title><rect x="39.5467%" y="181" width="23.2182%" height="15" fill="rgb(224,169,11)"/><text x="39.7967%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (43,560,666 samples, 23.22%)</title><rect x="39.5488%" y="165" width="23.2160%" height="15" fill="rgb(250,166,2)"/><text x="39.7988%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (43,365,982 samples, 23.11%)</title><rect x="39.6526%" y="149" width="23.1123%" height="15" fill="rgb(242,216,29)"/><text x="39.9026%" y="159.50">typeck</text></g><g><title>item_types_checking (2,829,582 samples, 1.51%)</title><rect x="62.7649%" y="181" width="1.5081%" height="15" fill="rgb(230,116,27)"/><text x="63.0149%" y="191.50"></text></g><g><title>check_mod_item_types (2,824,162 samples, 1.51%)</title><rect x="62.7678%" y="165" width="1.5052%" height="15" fill="rgb(228,99,48)"/><text x="63.0178%" y="175.50"></text></g><g><title>fn_sig (461,494 samples, 0.25%)</title><rect x="64.5732%" y="149" width="0.2460%" height="15" fill="rgb(253,11,6)"/><text x="64.8232%" y="159.50"></text></g><g><title>is_late_bound_map (358,782 samples, 0.19%)</title><rect x="64.9521%" y="133" width="0.1912%" height="15" fill="rgb(247,143,39)"/><text x="65.2021%" y="143.50"></text></g><g><title>resolve_lifetimes (336,252 samples, 0.18%)</title><rect x="64.9641%" y="117" width="0.1792%" height="15" fill="rgb(236,97,10)"/><text x="65.2141%" y="127.50"></text></g><g><title>named_region_map (188,541 samples, 0.10%)</title><rect x="65.1433%" y="133" width="0.1005%" height="15" fill="rgb(233,208,19)"/><text x="65.3933%" y="143.50"></text></g><g><title>generics_of (831,436 samples, 0.44%)</title><rect x="64.8191%" y="149" width="0.4431%" height="15" fill="rgb(216,164,2)"/><text x="65.0691%" y="159.50"></text></g><g><title>late_bound_vars_map (269,153 samples, 0.14%)</title><rect x="65.7404%" y="101" width="0.1434%" height="15" fill="rgb(220,129,5)"/><text x="65.9904%" y="111.50"></text></g><g><title>resolve_lifetimes (245,703 samples, 0.13%)</title><rect x="65.7529%" y="85" width="0.1309%" height="15" fill="rgb(242,17,10)"/><text x="66.0029%" y="95.50"></text></g><g><title>explicit_predicates_of (879,559 samples, 0.47%)</title><rect x="65.4958%" y="117" width="0.4688%" height="15" fill="rgb(242,107,0)"/><text x="65.7458%" y="127.50"></text></g><g><title>predicates_of (1,725,048 samples, 0.92%)</title><rect x="65.3332%" y="149" width="0.9194%" height="15" fill="rgb(251,28,31)"/><text x="65.5832%" y="159.50"></text></g><g><title>predicates_defined_on (1,605,957 samples, 0.86%)</title><rect x="65.3967%" y="133" width="0.8559%" height="15" fill="rgb(233,223,10)"/><text x="65.6467%" y="143.50"></text></g><g><title>inferred_outlives_of (540,395 samples, 0.29%)</title><rect x="65.9646%" y="117" width="0.2880%" height="15" fill="rgb(215,21,27)"/><text x="66.2146%" y="127.50"></text></g><g><title>inferred_outlives_crate (495,425 samples, 0.26%)</title><rect x="65.9885%" y="101" width="0.2640%" height="15" fill="rgb(232,23,21)"/><text x="66.2385%" y="111.50"></text></g><g><title>type_of (263,855 samples, 0.14%)</title><rect x="66.1119%" y="85" width="0.1406%" height="15" fill="rgb(244,5,23)"/><text x="66.3619%" y="95.50"></text></g><g><title>type_collecting (3,981,684 samples, 2.12%)</title><rect x="64.2741%" y="181" width="2.1221%" height="15" fill="rgb(226,81,46)"/><text x="64.5241%" y="191.50">t..</text></g><g><title>collect_mod_item_types (3,970,643 samples, 2.12%)</title><rect x="64.2800%" y="165" width="2.1162%" height="15" fill="rgb(247,70,30)"/><text x="64.5300%" y="175.50">c..</text></g><g><title>type_of (237,363 samples, 0.13%)</title><rect x="66.2697%" y="149" width="0.1265%" height="15" fill="rgb(212,68,19)"/><text x="66.5197%" y="159.50"></text></g><g><title>evaluate_obligation (998,373 samples, 0.53%)</title><rect x="69.0800%" y="149" width="0.5321%" height="15" fill="rgb(240,187,13)"/><text x="69.3300%" y="159.50"></text></g><g><title>implied_outlives_bounds (502,874 samples, 0.27%)</title><rect x="69.6124%" y="149" width="0.2680%" height="15" fill="rgb(223,113,26)"/><text x="69.8624%" y="159.50"></text></g><g><title>param_env (755,429 samples, 0.40%)</title><rect x="69.8879%" y="149" width="0.4026%" height="15" fill="rgb(206,192,2)"/><text x="70.1379%" y="159.50"></text></g><g><title>region_scope_tree (807,360 samples, 0.43%)</title><rect x="70.3238%" y="149" width="0.4303%" height="15" fill="rgb(241,108,4)"/><text x="70.5738%" y="159.50"></text></g><g><title>check_impl_item_well_formed (7,782,630 samples, 4.15%)</title><rect x="66.6287%" y="165" width="4.1478%" height="15" fill="rgb(247,173,49)"/><text x="66.8787%" y="175.50">check..</text></g><g><title>evaluate_obligation (525,943 samples, 0.28%)</title><rect x="72.6478%" y="149" width="0.2803%" height="15" fill="rgb(224,114,35)"/><text x="72.8978%" y="159.50"></text></g><g><title>implied_outlives_bounds (235,222 samples, 0.13%)</title><rect x="72.9538%" y="149" width="0.1254%" height="15" fill="rgb(245,159,27)"/><text x="73.2038%" y="159.50"></text></g><g><title>param_env (626,467 samples, 0.33%)</title><rect x="73.0791%" y="149" width="0.3339%" height="15" fill="rgb(245,172,44)"/><text x="73.3291%" y="159.50"></text></g><g><title>check_item_well_formed (5,270,317 samples, 2.81%)</title><rect x="70.7766%" y="165" width="2.8089%" height="15" fill="rgb(236,23,11)"/><text x="71.0266%" y="175.50">ch..</text></g><g><title>analysis (137,258,581 samples, 73.15%)</title><rect x="0.4710%" y="213" width="73.1532%" height="15" fill="rgb(205,117,38)"/><text x="0.7210%" y="223.50">analysis</text></g><g><title>type_check_crate (83,873,226 samples, 44.70%)</title><rect x="28.9232%" y="197" width="44.7010%" height="15" fill="rgb(237,72,25)"/><text x="29.1732%" y="207.50">type_check_crate</text></g><g><title>wf_checking (13,549,941 samples, 7.22%)</title><rect x="66.4026%" y="181" width="7.2216%" height="15" fill="rgb(244,70,9)"/><text x="66.6526%" y="191.50">wf_checking</text></g><g><title>codegen_crate (533,066 samples, 0.28%)</title><rect x="73.6307%" y="213" width="0.2841%" height="15" fill="rgb(217,125,39)"/><text x="73.8807%" y="223.50"></text></g><g><title>AST_validation (200,683 samples, 0.11%)</title><rect x="74.0379%" y="197" width="0.1070%" height="15" fill="rgb(235,36,10)"/><text x="74.2879%" y="207.50"></text></g><g><title>metadata_load_macro (236,833 samples, 0.13%)</title><rect x="86.0627%" y="165" width="0.1262%" height="15" fill="rgb(251,123,47)"/><text x="86.3127%" y="175.50"></text></g><g><title>metadata_register_crate (2,862,993 samples, 1.53%)</title><rect x="86.1889%" y="165" width="1.5259%" height="15" fill="rgb(221,13,13)"/><text x="86.4389%" y="175.50"></text></g><g><title>metadata_register_crate (1,068,993 samples, 0.57%)</title><rect x="87.1450%" y="149" width="0.5697%" height="15" fill="rgb(238,131,9)"/><text x="87.3950%" y="159.50"></text></g><g><title>macro_expand_crate (25,529,314 samples, 13.61%)</title><rect x="74.2520%" y="197" width="13.6061%" height="15" fill="rgb(211,50,8)"/><text x="74.5020%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (25,514,164 samples, 13.60%)</title><rect x="74.2601%" y="181" width="13.5980%" height="15" fill="rgb(245,182,24)"/><text x="74.5101%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (268,943 samples, 0.14%)</title><rect x="87.7148%" y="165" width="0.1433%" height="15" fill="rgb(242,14,37)"/><text x="87.9648%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (308,323 samples, 0.16%)</title><rect x="87.8599%" y="197" width="0.1643%" height="15" fill="rgb(246,228,12)"/><text x="88.1099%" y="207.50"></text></g><g><title>finalize_macro_resolutions (243,403 samples, 0.13%)</title><rect x="88.0523%" y="181" width="0.1297%" height="15" fill="rgb(213,55,15)"/><text x="88.3023%" y="191.50"></text></g><g><title>late_resolve_crate (3,137,875 samples, 1.67%)</title><rect x="88.1820%" y="181" width="1.6724%" height="15" fill="rgb(209,9,3)"/><text x="88.4320%" y="191.50"></text></g><g><title>configure_and_expand (30,084,525 samples, 16.03%)</title><rect x="73.9148%" y="213" width="16.0338%" height="15" fill="rgb(230,59,30)"/><text x="74.1648%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (3,610,770 samples, 1.92%)</title><rect x="88.0242%" y="197" width="1.9244%" height="15" fill="rgb(209,121,21)"/><text x="88.2742%" y="207.50">r..</text></g><g><title>drop_ast (286,033 samples, 0.15%)</title><rect x="89.9486%" y="213" width="0.1524%" height="15" fill="rgb(220,109,13)"/><text x="90.1986%" y="223.50"></text></g><g><title>early_lint_checks (647,178 samples, 0.34%)</title><rect x="90.1117%" y="213" width="0.3449%" height="15" fill="rgb(232,18,1)"/><text x="90.3617%" y="223.50"></text></g><g><title>free_global_ctxt (4,192,396 samples, 2.23%)</title><rect x="90.4566%" y="213" width="2.2344%" height="15" fill="rgb(215,41,42)"/><text x="90.7066%" y="223.50">f..</text></g><g><title>generate_crate_metadata (1,945,382 samples, 1.04%)</title><rect x="92.6910%" y="213" width="1.0368%" height="15" fill="rgb(224,123,36)"/><text x="92.9410%" y="223.50"></text></g><g><title>hir_lowering (5,511,381 samples, 2.94%)</title><rect x="93.7278%" y="213" width="2.9373%" height="15" fill="rgb(240,125,3)"/><text x="93.9778%" y="223.50">hi..</text></g><g><title>parse_crate (4,403,540 samples, 2.35%)</title><rect x="96.6951%" y="213" width="2.3469%" height="15" fill="rgb(205,98,50)"/><text x="96.9451%" y="223.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,126,932 samples, 0.60%)</title><rect x="99.1423%" y="213" width="0.6006%" height="15" fill="rgb(205,185,37)"/><text x="99.3923%" y="223.50"></text></g><g><title>all (187,631,724 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (187,631,724 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (379,975 samples, 0.20%)</title><rect x="99.7975%" y="213" width="0.2025%" height="15" fill="rgb(235,201,11)"/><text x="100.0475%" y="223.50"></text></g></svg></svg>