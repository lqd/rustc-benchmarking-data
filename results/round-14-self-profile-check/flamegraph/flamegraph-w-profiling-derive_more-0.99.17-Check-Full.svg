<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,826,276 samples, 0.14%)</title><rect x="15.8805%" y="149" width="0.1437%" height="15" fill="rgb(227,0,7)"/><text x="16.1305%" y="159.50"></text></g><g><title>param_env (1,412,979 samples, 0.11%)</title><rect x="17.3768%" y="117" width="0.1112%" height="15" fill="rgb(217,0,24)"/><text x="17.6268%" y="127.50"></text></g><g><title>item_attrs (1,388,024 samples, 0.11%)</title><rect x="17.9695%" y="85" width="0.1092%" height="15" fill="rgb(221,193,54)"/><text x="18.2195%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,337,403 samples, 0.11%)</title><rect x="17.9735%" y="69" width="0.1052%" height="15" fill="rgb(248,212,6)"/><text x="18.2235%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,924,649 samples, 0.15%)</title><rect x="17.9336%" y="101" width="0.1514%" height="15" fill="rgb(208,68,35)"/><text x="18.1836%" y="111.50"></text></g><g><title>adt_drop_tys (2,093,061 samples, 0.16%)</title><rect x="21.5584%" y="69" width="0.1647%" height="15" fill="rgb(232,128,0)"/><text x="21.8084%" y="79.50"></text></g><g><title>is_copy_raw (4,819,007 samples, 0.38%)</title><rect x="21.7230%" y="69" width="0.3791%" height="15" fill="rgb(207,160,47)"/><text x="21.9730%" y="79.50"></text></g><g><title>evaluate_obligation (3,732,693 samples, 0.29%)</title><rect x="21.8085%" y="53" width="0.2937%" height="15" fill="rgb(228,23,34)"/><text x="22.0585%" y="63.50"></text></g><g><title>needs_drop_raw (8,128,095 samples, 0.64%)</title><rect x="21.4685%" y="85" width="0.6395%" height="15" fill="rgb(218,30,26)"/><text x="21.7185%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (8,141,123 samples, 0.64%)</title><rect x="22.2365%" y="69" width="0.6405%" height="15" fill="rgb(220,122,19)"/><text x="22.4865%" y="79.50"></text></g><g><title>evaluate_obligation (1,646,997 samples, 0.13%)</title><rect x="22.7474%" y="53" width="0.1296%" height="15" fill="rgb(250,228,42)"/><text x="22.9974%" y="63.50"></text></g><g><title>specialization_graph_of (4,668,651 samples, 0.37%)</title><rect x="22.9140%" y="69" width="0.3673%" height="15" fill="rgb(240,193,28)"/><text x="23.1640%" y="79.50"></text></g><g><title>impl_trait_ref (1,877,957 samples, 0.15%)</title><rect x="23.1335%" y="53" width="0.1477%" height="15" fill="rgb(216,20,37)"/><text x="23.3835%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,517,952 samples, 0.12%)</title><rect x="23.1618%" y="37" width="0.1194%" height="15" fill="rgb(206,188,39)"/><text x="23.4118%" y="47.50"></text></g><g><title>resolve_instance (15,348,911 samples, 1.21%)</title><rect x="22.1081%" y="85" width="1.2076%" height="15" fill="rgb(217,207,13)"/><text x="22.3581%" y="95.50"></text></g><g><title>thir_body (16,975,625 samples, 1.34%)</title><rect x="23.3404%" y="85" width="1.3356%" height="15" fill="rgb(231,73,38)"/><text x="23.5904%" y="95.50"></text></g><g><title>mir_const (101,180,612 samples, 7.96%)</title><rect x="16.7310%" y="133" width="7.9604%" height="15" fill="rgb(225,20,46)"/><text x="16.9810%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (91,559,279 samples, 7.20%)</title><rect x="17.4880%" y="117" width="7.2034%" height="15" fill="rgb(210,31,41)"/><text x="17.7380%" y="127.50">unsafety_c..</text></g><g><title>mir_built (83,970,167 samples, 6.61%)</title><rect x="18.0850%" y="101" width="6.6064%" height="15" fill="rgb(221,200,47)"/><text x="18.3350%" y="111.50">mir_built</text></g><g><title>mir_promoted (110,987,780 samples, 8.73%)</title><rect x="16.0469%" y="149" width="8.7320%" height="15" fill="rgb(226,26,5)"/><text x="16.2969%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,147,700 samples, 0.17%)</title><rect x="24.7794%" y="149" width="0.1690%" height="15" fill="rgb(249,33,26)"/><text x="25.0294%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (7,089,808 samples, 0.56%)</title><rect x="24.9483%" y="149" width="0.5578%" height="15" fill="rgb(235,183,28)"/><text x="25.1983%" y="159.50"></text></g><g><title>normalize_projection_ty (4,953,193 samples, 0.39%)</title><rect x="25.1164%" y="133" width="0.3897%" height="15" fill="rgb(221,5,38)"/><text x="25.3664%" y="143.50"></text></g><g><title>type_op_normalize_predicate (12,017,227 samples, 0.95%)</title><rect x="25.5061%" y="149" width="0.9455%" height="15" fill="rgb(247,18,42)"/><text x="25.7561%" y="159.50"></text></g><g><title>normalize_projection_ty (7,345,880 samples, 0.58%)</title><rect x="25.8736%" y="133" width="0.5779%" height="15" fill="rgb(241,131,45)"/><text x="26.1236%" y="143.50"></text></g><g><title>type_op_prove_predicate (36,956,384 samples, 2.91%)</title><rect x="26.4561%" y="149" width="2.9075%" height="15" fill="rgb(249,31,29)"/><text x="26.7061%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (369,522,295 samples, 29.07%)</title><rect x="0.2946%" y="181" width="29.0722%" height="15" fill="rgb(225,111,53)"/><text x="0.5446%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (368,335,159 samples, 28.98%)</title><rect x="0.3880%" y="165" width="28.9788%" height="15" fill="rgb(238,160,17)"/><text x="0.6380%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (1,312,925 samples, 0.10%)</title><rect x="29.4020%" y="181" width="0.1033%" height="15" fill="rgb(214,148,48)"/><text x="29.6520%" y="191.50"></text></g><g><title>check_mod_attrs (2,960,277 samples, 0.23%)</title><rect x="29.5107%" y="165" width="0.2329%" height="15" fill="rgb(232,36,49)"/><text x="29.7607%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,689,677 samples, 0.13%)</title><rect x="29.8576%" y="165" width="0.1329%" height="15" fill="rgb(209,103,24)"/><text x="30.1076%" y="175.50"></text></g><g><title>misc_checking_1 (6,402,582 samples, 0.50%)</title><rect x="29.5053%" y="181" width="0.5037%" height="15" fill="rgb(229,88,8)"/><text x="29.7553%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (6,717,175 samples, 0.53%)</title><rect x="30.0093%" y="165" width="0.5285%" height="15" fill="rgb(213,181,19)"/><text x="30.2593%" y="175.50"></text></g><g><title>check_mod_liveness (5,673,723 samples, 0.45%)</title><rect x="30.0914%" y="149" width="0.4464%" height="15" fill="rgb(254,191,54)"/><text x="30.3414%" y="159.50"></text></g><g><title>misc_checking_2 (14,339,240 samples, 1.13%)</title><rect x="30.0090%" y="181" width="1.1281%" height="15" fill="rgb(241,83,37)"/><text x="30.2590%" y="191.50"></text></g><g><title>match_checking (7,619,205 samples, 0.60%)</title><rect x="30.5377%" y="165" width="0.5994%" height="15" fill="rgb(233,36,39)"/><text x="30.7877%" y="175.50"></text></g><g><title>check_match (7,407,224 samples, 0.58%)</title><rect x="30.5544%" y="149" width="0.5828%" height="15" fill="rgb(226,3,54)"/><text x="30.8044%" y="159.50"></text></g><g><title>check_private_in_public (1,360,595 samples, 0.11%)</title><rect x="31.1382%" y="165" width="0.1070%" height="15" fill="rgb(245,192,40)"/><text x="31.3882%" y="175.50"></text></g><g><title>death_checking (2,931,283 samples, 0.23%)</title><rect x="31.2453%" y="165" width="0.2306%" height="15" fill="rgb(238,167,29)"/><text x="31.4953%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,005,383 samples, 0.16%)</title><rect x="31.8697%" y="85" width="0.1578%" height="15" fill="rgb(232,182,51)"/><text x="32.1197%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,004,773 samples, 0.16%)</title><rect x="31.8697%" y="69" width="0.1577%" height="15" fill="rgb(231,60,39)"/><text x="32.1197%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,002,793 samples, 0.16%)</title><rect x="31.8699%" y="53" width="0.1576%" height="15" fill="rgb(208,69,12)"/><text x="32.1199%" y="63.50"></text></g><g><title>eval_to_allocation_raw (2,345,606 samples, 0.18%)</title><rect x="31.8431%" y="133" width="0.1845%" height="15" fill="rgb(235,93,37)"/><text x="32.0931%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,344,856 samples, 0.18%)</title><rect x="31.8431%" y="117" width="0.1845%" height="15" fill="rgb(213,116,39)"/><text x="32.0931%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,016,613 samples, 0.16%)</title><rect x="31.8690%" y="101" width="0.1587%" height="15" fill="rgb(222,207,29)"/><text x="32.1190%" y="111.50"></text></g><g><title>param_env (2,489,129 samples, 0.20%)</title><rect x="32.0536%" y="133" width="0.1958%" height="15" fill="rgb(206,96,30)"/><text x="32.3036%" y="143.50"></text></g><g><title>crate_lints (10,680,978 samples, 0.84%)</title><rect x="31.4762%" y="149" width="0.8403%" height="15" fill="rgb(218,138,4)"/><text x="31.7262%" y="159.50"></text></g><g><title>lint_checking (17,732,597 samples, 1.40%)</title><rect x="31.4759%" y="165" width="1.3951%" height="15" fill="rgb(250,191,14)"/><text x="31.7259%" y="175.50"></text></g><g><title>module_lints (7,047,899 samples, 0.55%)</title><rect x="32.3165%" y="149" width="0.5545%" height="15" fill="rgb(239,60,40)"/><text x="32.5665%" y="159.50"></text></g><g><title>lint_mod (7,022,169 samples, 0.55%)</title><rect x="32.3185%" y="133" width="0.5525%" height="15" fill="rgb(206,27,48)"/><text x="32.5685%" y="143.50"></text></g><g><title>privacy_checking_modules (10,604,188 samples, 0.83%)</title><rect x="32.9608%" y="165" width="0.8343%" height="15" fill="rgb(225,35,8)"/><text x="33.2108%" y="175.50"></text></g><g><title>check_mod_privacy (10,585,858 samples, 0.83%)</title><rect x="32.9622%" y="149" width="0.8328%" height="15" fill="rgb(250,213,24)"/><text x="33.2122%" y="159.50"></text></g><g><title>misc_checking_3 (33,838,447 samples, 2.66%)</title><rect x="31.1372%" y="181" width="2.6622%" height="15" fill="rgb(247,123,22)"/><text x="31.3872%" y="191.50">mi..</text></g><g><title>impl_parent (3,025,415 samples, 0.24%)</title><rect x="34.2591%" y="117" width="0.2380%" height="15" fill="rgb(231,138,38)"/><text x="34.5091%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,718,996 samples, 0.14%)</title><rect x="34.3619%" y="101" width="0.1352%" height="15" fill="rgb(231,145,46)"/><text x="34.6119%" y="111.50"></text></g><g><title>impl_trait_ref (6,387,571 samples, 0.50%)</title><rect x="34.4971%" y="117" width="0.5025%" height="15" fill="rgb(251,118,11)"/><text x="34.7471%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,857,445 samples, 0.38%)</title><rect x="34.6175%" y="101" width="0.3822%" height="15" fill="rgb(217,147,25)"/><text x="34.8675%" y="111.50"></text></g><g><title>coherent_trait (15,890,087 samples, 1.25%)</title><rect x="33.8351%" y="149" width="1.2502%" height="15" fill="rgb(247,81,37)"/><text x="34.0851%" y="159.50"></text></g><g><title>specialization_graph_of (15,436,403 samples, 1.21%)</title><rect x="33.8708%" y="133" width="1.2145%" height="15" fill="rgb(209,12,38)"/><text x="34.1208%" y="143.50"></text></g><g><title>coherence_checking (16,067,889 samples, 1.26%)</title><rect x="33.8329%" y="165" width="1.2641%" height="15" fill="rgb(227,1,9)"/><text x="34.0829%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,373,748 samples, 0.11%)</title><rect x="46.9886%" y="85" width="0.1081%" height="15" fill="rgb(248,47,43)"/><text x="47.2386%" y="95.50"></text></g><g><title>dropck_outlives (3,021,658 samples, 0.24%)</title><rect x="46.8646%" y="117" width="0.2377%" height="15" fill="rgb(221,10,30)"/><text x="47.1146%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,866,545 samples, 0.15%)</title><rect x="46.9555%" y="101" width="0.1469%" height="15" fill="rgb(210,229,1)"/><text x="47.2055%" y="111.50"></text></g><g><title>evaluate_obligation (4,899,330 samples, 0.39%)</title><rect x="47.1024%" y="117" width="0.3855%" height="15" fill="rgb(222,148,37)"/><text x="47.3524%" y="127.50"></text></g><g><title>dropck_outlives (4,760,773 samples, 0.37%)</title><rect x="63.8059%" y="101" width="0.3746%" height="15" fill="rgb(234,67,33)"/><text x="64.0559%" y="111.50"></text></g><g><title>evaluate_obligation (19,602,651 samples, 1.54%)</title><rect x="64.1805%" y="101" width="1.5422%" height="15" fill="rgb(247,98,35)"/><text x="64.4305%" y="111.50"></text></g><g><title>method_autoderef_steps (4,771,450 samples, 0.38%)</title><rect x="66.0021%" y="101" width="0.3754%" height="15" fill="rgb(247,138,52)"/><text x="66.2521%" y="111.50"></text></g><g><title>evaluate_obligation (2,144,282 samples, 0.17%)</title><rect x="66.2087%" y="85" width="0.1687%" height="15" fill="rgb(213,79,30)"/><text x="66.4587%" y="95.50"></text></g><g><title>typeck (238,868,285 samples, 18.79%)</title><rect x="47.7645%" y="117" width="18.7930%" height="15" fill="rgb(246,177,23)"/><text x="48.0145%" y="127.50">typeck</text></g><g><title>item_bodies_checking (399,915,244 samples, 31.46%)</title><rect x="35.1040%" y="165" width="31.4634%" height="15" fill="rgb(230,62,27)"/><text x="35.3540%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (399,911,594 samples, 31.46%)</title><rect x="35.1043%" y="149" width="31.4631%" height="15" fill="rgb(216,154,8)"/><text x="35.3543%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (399,500,240 samples, 31.43%)</title><rect x="35.1366%" y="133" width="31.4307%" height="15" fill="rgb(244,35,45)"/><text x="35.3866%" y="143.50">typeck</text></g><g><title>mir_const (1,788,941 samples, 0.14%)</title><rect x="66.7961%" y="85" width="0.1407%" height="15" fill="rgb(251,115,12)"/><text x="67.0461%" y="95.50"></text></g><g><title>unsafety_check_result (1,695,790 samples, 0.13%)</title><rect x="66.8034%" y="69" width="0.1334%" height="15" fill="rgb(240,54,50)"/><text x="67.0534%" y="79.50"></text></g><g><title>mir_built (1,636,769 samples, 0.13%)</title><rect x="66.8081%" y="53" width="0.1288%" height="15" fill="rgb(233,84,52)"/><text x="67.0581%" y="63.50"></text></g><g><title>typeck (1,300,525 samples, 0.10%)</title><rect x="66.8345%" y="37" width="0.1023%" height="15" fill="rgb(207,117,47)"/><text x="67.0845%" y="47.50"></text></g><g><title>mir_promoted (1,917,892 samples, 0.15%)</title><rect x="66.7865%" y="101" width="0.1509%" height="15" fill="rgb(249,43,39)"/><text x="67.0365%" y="111.50"></text></g><g><title>type_of (3,090,324 samples, 0.24%)</title><rect x="66.7084%" y="133" width="0.2431%" height="15" fill="rgb(209,38,44)"/><text x="66.9584%" y="143.50"></text></g><g><title>mir_borrowck (3,025,554 samples, 0.24%)</title><rect x="66.7135%" y="117" width="0.2380%" height="15" fill="rgb(236,212,23)"/><text x="66.9635%" y="127.50"></text></g><g><title>item_types_checking (8,497,864 samples, 0.67%)</title><rect x="66.5674%" y="165" width="0.6686%" height="15" fill="rgb(242,79,21)"/><text x="66.8174%" y="175.50"></text></g><g><title>check_mod_item_types (8,483,363 samples, 0.67%)</title><rect x="66.5685%" y="149" width="0.6674%" height="15" fill="rgb(211,96,35)"/><text x="66.8185%" y="159.50"></text></g><g><title>typeck (3,614,579 samples, 0.28%)</title><rect x="66.9516%" y="133" width="0.2844%" height="15" fill="rgb(253,215,40)"/><text x="67.2016%" y="143.50"></text></g><g><title>lint_levels (2,003,103 samples, 0.16%)</title><rect x="67.5344%" y="85" width="0.1576%" height="15" fill="rgb(211,81,21)"/><text x="67.7844%" y="95.50"></text></g><g><title>is_late_bound_map (2,931,752 samples, 0.23%)</title><rect x="67.4614%" y="117" width="0.2307%" height="15" fill="rgb(208,190,38)"/><text x="67.7114%" y="127.50"></text></g><g><title>resolve_lifetimes (2,901,911 samples, 0.23%)</title><rect x="67.4637%" y="101" width="0.2283%" height="15" fill="rgb(235,213,38)"/><text x="67.7137%" y="111.50"></text></g><g><title>generics_of (4,648,143 samples, 0.37%)</title><rect x="67.4282%" y="133" width="0.3657%" height="15" fill="rgb(237,122,38)"/><text x="67.6782%" y="143.50"></text></g><g><title>predicates_of (1,580,107 samples, 0.12%)</title><rect x="67.7997%" y="133" width="0.1243%" height="15" fill="rgb(244,218,35)"/><text x="68.0497%" y="143.50"></text></g><g><title>predicates_defined_on (1,426,564 samples, 0.11%)</title><rect x="67.8117%" y="117" width="0.1122%" height="15" fill="rgb(240,68,47)"/><text x="68.0617%" y="127.50"></text></g><g><title>type_collecting (9,024,030 samples, 0.71%)</title><rect x="67.2382%" y="165" width="0.7100%" height="15" fill="rgb(210,16,53)"/><text x="67.4882%" y="175.50"></text></g><g><title>collect_mod_item_types (8,992,799 samples, 0.71%)</title><rect x="67.2406%" y="149" width="0.7075%" height="15" fill="rgb(235,124,12)"/><text x="67.4906%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,723,260 samples, 0.45%)</title><rect x="68.0224%" y="149" width="0.4503%" height="15" fill="rgb(224,169,11)"/><text x="68.2724%" y="159.50"></text></g><g><title>evaluate_obligation (1,363,596 samples, 0.11%)</title><rect x="68.7987%" y="133" width="0.1073%" height="15" fill="rgb(250,166,2)"/><text x="69.0487%" y="143.50"></text></g><g><title>region_scope_tree (3,234,637 samples, 0.25%)</title><rect x="69.0731%" y="133" width="0.2545%" height="15" fill="rgb(242,216,29)"/><text x="69.3231%" y="143.50"></text></g><g><title>check_item_well_formed (11,065,987 samples, 0.87%)</title><rect x="68.4727%" y="149" width="0.8706%" height="15" fill="rgb(230,116,27)"/><text x="68.7227%" y="159.50"></text></g><g><title>analysis (880,311,796 samples, 69.26%)</title><rect x="0.0874%" y="197" width="69.2587%" height="15" fill="rgb(228,99,48)"/><text x="0.3374%" y="207.50">analysis</text></g><g><title>type_check_crate (451,815,403 samples, 35.55%)</title><rect x="33.7994%" y="181" width="35.5466%" height="15" fill="rgb(253,11,6)"/><text x="34.0494%" y="191.50">type_check_crate</text></g><g><title>wf_checking (17,740,349 samples, 1.40%)</title><rect x="67.9504%" y="165" width="1.3957%" height="15" fill="rgb(247,143,39)"/><text x="68.2004%" y="175.50"></text></g><g><title>AST_validation (1,997,262 samples, 0.16%)</title><rect x="69.4061%" y="181" width="0.1571%" height="15" fill="rgb(236,97,10)"/><text x="69.6561%" y="191.50"></text></g><g><title>metadata_register_crate (1,435,586 samples, 0.11%)</title><rect x="93.3759%" y="149" width="0.1129%" height="15" fill="rgb(233,208,19)"/><text x="93.6259%" y="159.50"></text></g><g><title>macro_expand_crate (304,006,163 samples, 23.92%)</title><rect x="69.6581%" y="181" width="23.9177%" height="15" fill="rgb(216,164,2)"/><text x="69.9081%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (303,991,113 samples, 23.92%)</title><rect x="69.6593%" y="165" width="23.9165%" height="15" fill="rgb(220,129,5)"/><text x="69.9093%" y="175.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (1,788,220 samples, 0.14%)</title><rect x="93.5760%" y="181" width="0.1407%" height="15" fill="rgb(242,17,10)"/><text x="93.8260%" y="191.50"></text></g><g><title>finalize_macro_resolutions (5,144,917 samples, 0.40%)</title><rect x="93.7689%" y="165" width="0.4048%" height="15" fill="rgb(242,107,0)"/><text x="94.0189%" y="175.50"></text></g><g><title>late_resolve_crate (16,326,692 samples, 1.28%)</title><rect x="94.1737%" y="165" width="1.2845%" height="15" fill="rgb(251,28,31)"/><text x="94.4237%" y="175.50"></text></g><g><title>resolve_check_unused (1,425,055 samples, 0.11%)</title><rect x="95.4627%" y="165" width="0.1121%" height="15" fill="rgb(233,223,10)"/><text x="95.7127%" y="175.50"></text></g><g><title>configure_and_expand (333,797,756 samples, 26.26%)</title><rect x="69.3929%" y="197" width="26.2616%" height="15" fill="rgb(215,21,27)"/><text x="69.6429%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (24,543,744 samples, 1.93%)</title><rect x="93.7235%" y="181" width="1.9310%" height="15" fill="rgb(232,23,21)"/><text x="93.9735%" y="191.50">r..</text></g><g><title>drop_ast (4,494,511 samples, 0.35%)</title><rect x="95.6545%" y="197" width="0.3536%" height="15" fill="rgb(244,5,23)"/><text x="95.9045%" y="207.50"></text></g><g><title>early_lint_checks (5,972,356 samples, 0.47%)</title><rect x="96.0101%" y="197" width="0.4699%" height="15" fill="rgb(226,81,46)"/><text x="96.2601%" y="207.50"></text></g><g><title>free_global_ctxt (10,360,256 samples, 0.82%)</title><rect x="96.4799%" y="197" width="0.8151%" height="15" fill="rgb(247,70,30)"/><text x="96.7299%" y="207.50"></text></g><g><title>hir_lowering (30,160,547 samples, 2.37%)</title><rect x="97.3434%" y="197" width="2.3729%" height="15" fill="rgb(212,68,19)"/><text x="97.5934%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,963,582 samples, 0.15%)</title><rect x="99.8036%" y="197" width="0.1545%" height="15" fill="rgb(240,187,13)"/><text x="100.0536%" y="207.50"></text></g><g><title>all (1,271,049,269 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,271,049,269 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>