<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (212,614 samples, 0.15%)</title><rect x="14.3689%" y="117" width="0.1544%" height="15" fill="rgb(227,0,7)"/><text x="14.6189%" y="127.50"></text></g><g><title>item_attrs (221,412 samples, 0.16%)</title><rect x="15.0107%" y="85" width="0.1608%" height="15" fill="rgb(217,0,24)"/><text x="15.2607%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (213,132 samples, 0.15%)</title><rect x="15.0167%" y="69" width="0.1548%" height="15" fill="rgb(221,193,54)"/><text x="15.2667%" y="79.50"></text></g><g><title>codegen_fn_attrs (333,694 samples, 0.24%)</title><rect x="14.9449%" y="101" width="0.2424%" height="15" fill="rgb(248,212,6)"/><text x="15.1949%" y="111.50"></text></g><g><title>adt_drop_tys (195,731 samples, 0.14%)</title><rect x="18.0043%" y="53" width="0.1422%" height="15" fill="rgb(208,68,35)"/><text x="18.2543%" y="63.50"></text></g><g><title>is_copy_raw (210,253 samples, 0.15%)</title><rect x="18.1478%" y="53" width="0.1527%" height="15" fill="rgb(232,128,0)"/><text x="18.3978%" y="63.50"></text></g><g><title>evaluate_obligation (161,293 samples, 0.12%)</title><rect x="18.1834%" y="37" width="0.1172%" height="15" fill="rgb(207,160,47)"/><text x="18.4334%" y="47.50"></text></g><g><title>param_env (205,773 samples, 0.15%)</title><rect x="18.3005%" y="53" width="0.1495%" height="15" fill="rgb(228,23,34)"/><text x="18.5505%" y="63.50"></text></g><g><title>adt_drop_tys (768,199 samples, 0.56%)</title><rect x="17.9558%" y="69" width="0.5580%" height="15" fill="rgb(218,30,26)"/><text x="18.2058%" y="79.50"></text></g><g><title>is_copy_raw (633,369 samples, 0.46%)</title><rect x="18.5138%" y="69" width="0.4601%" height="15" fill="rgb(220,122,19)"/><text x="18.7638%" y="79.50"></text></g><g><title>evaluate_obligation (517,249 samples, 0.38%)</title><rect x="18.5982%" y="53" width="0.3757%" height="15" fill="rgb(250,228,42)"/><text x="18.8482%" y="63.50"></text></g><g><title>needs_drop_raw (1,545,698 samples, 1.12%)</title><rect x="17.8661%" y="85" width="1.1228%" height="15" fill="rgb(240,193,28)"/><text x="18.1161%" y="95.50"></text></g><g><title>impl_parent (193,881 samples, 0.14%)</title><rect x="19.3942%" y="53" width="0.1408%" height="15" fill="rgb(216,20,37)"/><text x="19.6442%" y="63.50"></text></g><g><title>specialization_graph_of (975,080 samples, 0.71%)</title><rect x="19.1932%" y="69" width="0.7083%" height="15" fill="rgb(206,188,39)"/><text x="19.4432%" y="79.50"></text></g><g><title>impl_trait_ref (504,488 samples, 0.37%)</title><rect x="19.5351%" y="53" width="0.3664%" height="15" fill="rgb(217,207,13)"/><text x="19.7851%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (441,797 samples, 0.32%)</title><rect x="19.5806%" y="37" width="0.3209%" height="15" fill="rgb(231,73,38)"/><text x="19.8306%" y="47.50"></text></g><g><title>resolve_instance (1,296,674 samples, 0.94%)</title><rect x="18.9889%" y="85" width="0.9419%" height="15" fill="rgb(225,20,46)"/><text x="19.2389%" y="95.50"></text></g><g><title>thir_body (1,359,777 samples, 0.99%)</title><rect x="19.9480%" y="85" width="0.9877%" height="15" fill="rgb(210,31,41)"/><text x="20.1980%" y="95.50"></text></g><g><title>mir_const (9,996,373 samples, 7.26%)</title><rect x="13.6917%" y="133" width="7.2611%" height="15" fill="rgb(221,200,47)"/><text x="13.9417%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,851,507 samples, 6.43%)</title><rect x="14.5233%" y="117" width="6.4295%" height="15" fill="rgb(226,26,5)"/><text x="14.7733%" y="127.50">unsafety..</text></g><g><title>mir_built (7,933,377 samples, 5.76%)</title><rect x="15.1902%" y="101" width="5.7626%" height="15" fill="rgb(249,33,26)"/><text x="15.4402%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (11,021,372 samples, 8.01%)</title><rect x="12.9744%" y="149" width="8.0057%" height="15" fill="rgb(235,183,28)"/><text x="13.2244%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,088,204 samples, 0.79%)</title><rect x="20.9837%" y="149" width="0.7904%" height="15" fill="rgb(221,5,38)"/><text x="21.2337%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (737,013 samples, 0.54%)</title><rect x="21.7741%" y="149" width="0.5353%" height="15" fill="rgb(247,18,42)"/><text x="22.0241%" y="159.50"></text></g><g><title>normalize_projection_ty (474,729 samples, 0.34%)</title><rect x="21.9647%" y="133" width="0.3448%" height="15" fill="rgb(241,131,45)"/><text x="22.2147%" y="143.50"></text></g><g><title>type_op_normalize_predicate (173,121 samples, 0.13%)</title><rect x="22.3095%" y="149" width="0.1258%" height="15" fill="rgb(249,31,29)"/><text x="22.5595%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,478,154 samples, 1.80%)</title><rect x="22.4352%" y="149" width="1.8001%" height="15" fill="rgb(225,111,53)"/><text x="22.6852%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (32,492,169 samples, 23.60%)</title><rect x="0.6524%" y="181" width="23.6015%" height="15" fill="rgb(238,160,17)"/><text x="0.9024%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (32,387,539 samples, 23.53%)</title><rect x="0.7284%" y="165" width="23.5255%" height="15" fill="rgb(214,148,48)"/><text x="0.9784%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (184,641 samples, 0.13%)</title><rect x="24.2696%" y="181" width="0.1341%" height="15" fill="rgb(232,36,49)"/><text x="24.5196%" y="191.50"></text></g><g><title>should_inherit_track_caller (161,771 samples, 0.12%)</title><rect x="24.7384%" y="133" width="0.1175%" height="15" fill="rgb(209,103,24)"/><text x="24.9884%" y="143.50"></text></g><g><title>codegen_fn_attrs (343,944 samples, 0.25%)</title><rect x="24.6189%" y="149" width="0.2498%" height="15" fill="rgb(229,88,8)"/><text x="24.8689%" y="159.50"></text></g><g><title>check_mod_attrs (618,166 samples, 0.45%)</title><rect x="24.4198%" y="165" width="0.4490%" height="15" fill="rgb(213,181,19)"/><text x="24.6698%" y="175.50"></text></g><g><title>lookup_deprecation_entry (139,371 samples, 0.10%)</title><rect x="25.1102%" y="149" width="0.1012%" height="15" fill="rgb(254,191,54)"/><text x="25.3602%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (368,224 samples, 0.27%)</title><rect x="25.0014%" y="165" width="0.2675%" height="15" fill="rgb(241,83,37)"/><text x="25.2514%" y="175.50"></text></g><g><title>misc_checking_1 (1,234,414 samples, 0.90%)</title><rect x="24.4040%" y="181" width="0.8966%" height="15" fill="rgb(233,36,39)"/><text x="24.6540%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (545,336 samples, 0.40%)</title><rect x="25.3019%" y="165" width="0.3961%" height="15" fill="rgb(226,3,54)"/><text x="25.5519%" y="175.50"></text></g><g><title>check_mod_liveness (426,815 samples, 0.31%)</title><rect x="25.3880%" y="149" width="0.3100%" height="15" fill="rgb(245,192,40)"/><text x="25.6380%" y="159.50"></text></g><g><title>misc_checking_2 (1,385,105 samples, 1.01%)</title><rect x="25.3006%" y="181" width="1.0061%" height="15" fill="rgb(238,167,29)"/><text x="25.5506%" y="191.50"></text></g><g><title>match_checking (837,999 samples, 0.61%)</title><rect x="25.6980%" y="165" width="0.6087%" height="15" fill="rgb(232,182,51)"/><text x="25.9480%" y="175.50"></text></g><g><title>check_match (810,658 samples, 0.59%)</title><rect x="25.7179%" y="149" width="0.5888%" height="15" fill="rgb(231,60,39)"/><text x="25.9679%" y="159.50"></text></g><g><title>check_private_in_public (193,082 samples, 0.14%)</title><rect x="26.3142%" y="165" width="0.1403%" height="15" fill="rgb(208,69,12)"/><text x="26.5642%" y="175.50"></text></g><g><title>death_checking (433,775 samples, 0.32%)</title><rect x="26.4544%" y="165" width="0.3151%" height="15" fill="rgb(235,93,37)"/><text x="26.7044%" y="175.50"></text></g><g><title>param_env (162,471 samples, 0.12%)</title><rect x="27.3916%" y="133" width="0.1180%" height="15" fill="rgb(213,116,39)"/><text x="27.6416%" y="143.50"></text></g><g><title>crate_lints (2,287,246 samples, 1.66%)</title><rect x="26.7706%" y="149" width="1.6614%" height="15" fill="rgb(222,207,29)"/><text x="27.0206%" y="159.50"></text></g><g><title>type_of (1,136,554 samples, 0.83%)</title><rect x="27.6064%" y="133" width="0.8256%" height="15" fill="rgb(206,96,30)"/><text x="27.8564%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (889,352 samples, 0.65%)</title><rect x="27.7860%" y="117" width="0.6460%" height="15" fill="rgb(218,138,4)"/><text x="28.0360%" y="127.50"></text></g><g><title>lint_checking (2,953,873 samples, 2.15%)</title><rect x="26.7695%" y="165" width="2.1456%" height="15" fill="rgb(250,191,14)"/><text x="27.0195%" y="175.50">l..</text></g><g><title>module_lints (665,137 samples, 0.48%)</title><rect x="28.4320%" y="149" width="0.4831%" height="15" fill="rgb(239,60,40)"/><text x="28.6820%" y="159.50"></text></g><g><title>lint_mod (661,377 samples, 0.48%)</title><rect x="28.4347%" y="133" width="0.4804%" height="15" fill="rgb(206,27,48)"/><text x="28.6847%" y="143.50"></text></g><g><title>privacy_access_levels (210,252 samples, 0.15%)</title><rect x="28.9151%" y="165" width="0.1527%" height="15" fill="rgb(225,35,8)"/><text x="29.1651%" y="175.50"></text></g><g><title>privacy_checking_modules (1,055,652 samples, 0.77%)</title><rect x="29.0679%" y="165" width="0.7668%" height="15" fill="rgb(250,213,24)"/><text x="29.3179%" y="175.50"></text></g><g><title>check_mod_privacy (1,052,672 samples, 0.76%)</title><rect x="29.0700%" y="149" width="0.7646%" height="15" fill="rgb(247,123,22)"/><text x="29.3200%" y="159.50"></text></g><g><title>misc_checking_3 (4,878,304 samples, 3.54%)</title><rect x="26.3067%" y="181" width="3.5435%" height="15" fill="rgb(231,138,38)"/><text x="26.5567%" y="191.50">misc..</text></g><g><title>impl_trait_ref (206,063 samples, 0.15%)</title><rect x="30.0350%" y="85" width="0.1497%" height="15" fill="rgb(231,145,46)"/><text x="30.2850%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (185,633 samples, 0.13%)</title><rect x="30.0498%" y="69" width="0.1348%" height="15" fill="rgb(251,118,11)"/><text x="30.2998%" y="79.50"></text></g><g><title>adt_destructor (378,024 samples, 0.27%)</title><rect x="29.9345%" y="133" width="0.2746%" height="15" fill="rgb(217,147,25)"/><text x="30.1845%" y="143.50"></text></g><g><title>coherent_trait (368,424 samples, 0.27%)</title><rect x="29.9415%" y="117" width="0.2676%" height="15" fill="rgb(247,81,37)"/><text x="30.1915%" y="127.50"></text></g><g><title>specialization_graph_of (367,114 samples, 0.27%)</title><rect x="29.9424%" y="101" width="0.2667%" height="15" fill="rgb(209,12,38)"/><text x="30.1924%" y="111.50"></text></g><g><title>is_copy_raw (218,643 samples, 0.16%)</title><rect x="30.2091%" y="133" width="0.1588%" height="15" fill="rgb(227,1,9)"/><text x="30.4591%" y="143.50"></text></g><g><title>evaluate_obligation (180,792 samples, 0.13%)</title><rect x="30.2366%" y="117" width="0.1313%" height="15" fill="rgb(248,47,43)"/><text x="30.4866%" y="127.50"></text></g><g><title>impl_parent (2,394,157 samples, 1.74%)</title><rect x="33.6215%" y="117" width="1.7391%" height="15" fill="rgb(221,10,30)"/><text x="33.8715%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,371,856 samples, 1.00%)</title><rect x="34.3641%" y="101" width="0.9965%" height="15" fill="rgb(210,229,1)"/><text x="34.6141%" y="111.50"></text></g><g><title>impl_trait_ref (5,107,347 samples, 3.71%)</title><rect x="35.3606%" y="117" width="3.7099%" height="15" fill="rgb(222,148,37)"/><text x="35.6106%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,071,221 samples, 2.96%)</title><rect x="36.1132%" y="101" width="2.9572%" height="15" fill="rgb(234,67,33)"/><text x="36.3632%" y="111.50">met..</text></g><g><title>coherent_trait (13,412,658 samples, 9.74%)</title><rect x="29.9018%" y="149" width="9.7426%" height="15" fill="rgb(247,98,35)"/><text x="30.1518%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (12,635,080 samples, 9.18%)</title><rect x="30.4666%" y="133" width="9.1778%" height="15" fill="rgb(247,138,52)"/><text x="30.7166%" y="143.50">specializatio..</text></g><g><title>trait_impls_of (786,917 samples, 0.57%)</title><rect x="39.0728%" y="117" width="0.5716%" height="15" fill="rgb(213,79,30)"/><text x="39.3228%" y="127.50"></text></g><g><title>implementations_of_trait (223,623 samples, 0.16%)</title><rect x="39.4820%" y="101" width="0.1624%" height="15" fill="rgb(246,177,23)"/><text x="39.7320%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (184,803 samples, 0.13%)</title><rect x="39.5102%" y="85" width="0.1342%" height="15" fill="rgb(230,62,27)"/><text x="39.7602%" y="95.50"></text></g><g><title>coherence_checking (13,483,820 samples, 9.79%)</title><rect x="29.8877%" y="165" width="9.7943%" height="15" fill="rgb(216,154,8)"/><text x="30.1377%" y="175.50">coherence_chec..</text></g><g><title>adt_def (460,085 samples, 0.33%)</title><rect x="55.0904%" y="101" width="0.3342%" height="15" fill="rgb(244,35,45)"/><text x="55.3404%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (457,475 samples, 0.33%)</title><rect x="55.0923%" y="85" width="0.3323%" height="15" fill="rgb(251,115,12)"/><text x="55.3423%" y="95.50"></text></g><g><title>item_attrs (427,295 samples, 0.31%)</title><rect x="55.1142%" y="69" width="0.3104%" height="15" fill="rgb(240,54,50)"/><text x="55.3642%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (424,215 samples, 0.31%)</title><rect x="55.1164%" y="53" width="0.3081%" height="15" fill="rgb(233,84,52)"/><text x="55.3664%" y="63.50"></text></g><g><title>adt_sized_constraint (190,452 samples, 0.14%)</title><rect x="55.4246%" y="101" width="0.1383%" height="15" fill="rgb(207,117,47)"/><text x="55.6746%" y="111.50"></text></g><g><title>adt_sized_constraint (677,438 samples, 0.49%)</title><rect x="55.0798%" y="117" width="0.4921%" height="15" fill="rgb(249,43,39)"/><text x="55.3298%" y="127.50"></text></g><g><title>associated_items (199,094 samples, 0.14%)</title><rect x="55.5753%" y="117" width="0.1446%" height="15" fill="rgb(209,38,44)"/><text x="55.8253%" y="127.50"></text></g><g><title>adt_dtorck_constraint (265,222 samples, 0.19%)</title><rect x="55.9629%" y="85" width="0.1927%" height="15" fill="rgb(236,212,23)"/><text x="56.2129%" y="95.50"></text></g><g><title>dropck_outlives (591,474 samples, 0.43%)</title><rect x="55.7536%" y="117" width="0.4296%" height="15" fill="rgb(242,79,21)"/><text x="56.0036%" y="127.50"></text></g><g><title>adt_dtorck_constraint (405,684 samples, 0.29%)</title><rect x="55.8886%" y="101" width="0.2947%" height="15" fill="rgb(211,96,35)"/><text x="56.1386%" y="111.50"></text></g><g><title>adt_sized_constraint (210,143 samples, 0.15%)</title><rect x="57.1290%" y="101" width="0.1526%" height="15" fill="rgb(253,215,40)"/><text x="57.3790%" y="111.50"></text></g><g><title>predicates_of (301,732 samples, 0.22%)</title><rect x="57.4313%" y="101" width="0.2192%" height="15" fill="rgb(211,81,21)"/><text x="57.6813%" y="111.50"></text></g><g><title>predicates_defined_on (189,881 samples, 0.14%)</title><rect x="57.5126%" y="85" width="0.1379%" height="15" fill="rgb(208,190,38)"/><text x="57.7626%" y="95.50"></text></g><g><title>specializes (357,504 samples, 0.26%)</title><rect x="57.6505%" y="101" width="0.2597%" height="15" fill="rgb(235,213,38)"/><text x="57.9005%" y="111.50"></text></g><g><title>param_env (165,490 samples, 0.12%)</title><rect x="57.7900%" y="85" width="0.1202%" height="15" fill="rgb(237,122,38)"/><text x="58.0400%" y="95.50"></text></g><g><title>trait_impls_of (249,414 samples, 0.18%)</title><rect x="57.9150%" y="101" width="0.1812%" height="15" fill="rgb(244,218,35)"/><text x="58.1650%" y="111.50"></text></g><g><title>evaluate_obligation (2,637,108 samples, 1.92%)</title><rect x="56.1832%" y="117" width="1.9155%" height="15" fill="rgb(240,68,47)"/><text x="56.4332%" y="127.50">e..</text></g><g><title>impl_item_implementor_ids (145,122 samples, 0.11%)</title><rect x="58.2864%" y="117" width="0.1054%" height="15" fill="rgb(210,16,53)"/><text x="58.5364%" y="127.50"></text></g><g><title>method_autoderef_steps (387,675 samples, 0.28%)</title><rect x="58.5844%" y="117" width="0.2816%" height="15" fill="rgb(235,124,12)"/><text x="58.8344%" y="127.50"></text></g><g><title>evaluate_obligation (179,331 samples, 0.13%)</title><rect x="58.7358%" y="101" width="0.1303%" height="15" fill="rgb(224,169,11)"/><text x="58.9858%" y="111.50"></text></g><g><title>object_safety_violations (151,172 samples, 0.11%)</title><rect x="58.8660%" y="117" width="0.1098%" height="15" fill="rgb(250,166,2)"/><text x="59.1160%" y="127.50"></text></g><g><title>predicates_of (331,192 samples, 0.24%)</title><rect x="59.0006%" y="117" width="0.2406%" height="15" fill="rgb(242,216,29)"/><text x="59.2506%" y="127.50"></text></g><g><title>predicates_defined_on (235,631 samples, 0.17%)</title><rect x="59.0700%" y="101" width="0.1712%" height="15" fill="rgb(230,116,27)"/><text x="59.3200%" y="111.50"></text></g><g><title>associated_item (362,387 samples, 0.26%)</title><rect x="67.8422%" y="85" width="0.2632%" height="15" fill="rgb(228,99,48)"/><text x="68.0922%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (278,976 samples, 0.20%)</title><rect x="67.9028%" y="69" width="0.2026%" height="15" fill="rgb(253,11,6)"/><text x="68.1528%" y="79.50"></text></g><g><title>associated_items (529,109 samples, 0.38%)</title><rect x="67.7384%" y="101" width="0.3843%" height="15" fill="rgb(247,143,39)"/><text x="67.9884%" y="111.50"></text></g><g><title>adt_dtorck_constraint (197,352 samples, 0.14%)</title><rect x="68.3862%" y="53" width="0.1434%" height="15" fill="rgb(236,97,10)"/><text x="68.6362%" y="63.50"></text></g><g><title>adt_dtorck_constraint (260,382 samples, 0.19%)</title><rect x="68.3536%" y="69" width="0.1891%" height="15" fill="rgb(233,208,19)"/><text x="68.6036%" y="79.50"></text></g><g><title>adt_dtorck_constraint (454,083 samples, 0.33%)</title><rect x="68.2412%" y="85" width="0.3298%" height="15" fill="rgb(216,164,2)"/><text x="68.4912%" y="95.50"></text></g><g><title>dropck_outlives (722,045 samples, 0.52%)</title><rect x="68.1382%" y="101" width="0.5245%" height="15" fill="rgb(220,129,5)"/><text x="68.3882%" y="111.50"></text></g><g><title>evaluate_obligation (1,287,438 samples, 0.94%)</title><rect x="68.6627%" y="101" width="0.9352%" height="15" fill="rgb(242,17,10)"/><text x="68.9127%" y="111.50"></text></g><g><title>trait_impls_of (261,533 samples, 0.19%)</title><rect x="69.4079%" y="85" width="0.1900%" height="15" fill="rgb(242,107,0)"/><text x="69.6579%" y="95.50"></text></g><g><title>is_copy_raw (138,512 samples, 0.10%)</title><rect x="69.8361%" y="101" width="0.1006%" height="15" fill="rgb(251,28,31)"/><text x="70.0861%" y="111.50"></text></g><g><title>evaluate_obligation (175,660 samples, 0.13%)</title><rect x="70.1655%" y="85" width="0.1276%" height="15" fill="rgb(233,223,10)"/><text x="70.4155%" y="95.50"></text></g><g><title>method_autoderef_steps (364,713 samples, 0.26%)</title><rect x="70.0459%" y="101" width="0.2649%" height="15" fill="rgb(215,21,27)"/><text x="70.2959%" y="111.50"></text></g><g><title>explicit_predicates_of (307,173 samples, 0.22%)</title><rect x="70.4122%" y="69" width="0.2231%" height="15" fill="rgb(232,23,21)"/><text x="70.6622%" y="79.50"></text></g><g><title>predicates_of (460,596 samples, 0.33%)</title><rect x="70.3253%" y="101" width="0.3346%" height="15" fill="rgb(244,5,23)"/><text x="70.5753%" y="111.50"></text></g><g><title>predicates_defined_on (387,695 samples, 0.28%)</title><rect x="70.3783%" y="85" width="0.2816%" height="15" fill="rgb(226,81,46)"/><text x="70.6283%" y="95.50"></text></g><g><title>typeck (15,800,036 samples, 11.48%)</title><rect x="59.3263%" y="117" width="11.4768%" height="15" fill="rgb(247,70,30)"/><text x="59.5763%" y="127.50">typeck</text></g><g><title>item_bodies_checking (42,868,124 samples, 31.14%)</title><rect x="39.7002%" y="165" width="31.1384%" height="15" fill="rgb(212,68,19)"/><text x="39.9502%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,865,074 samples, 31.14%)</title><rect x="39.7024%" y="149" width="31.1362%" height="15" fill="rgb(240,187,13)"/><text x="39.9524%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (42,794,092 samples, 31.08%)</title><rect x="39.7539%" y="133" width="31.0846%" height="15" fill="rgb(223,113,26)"/><text x="40.0039%" y="143.50">typeck</text></g><g><title>item_types_checking (744,038 samples, 0.54%)</title><rect x="70.8385%" y="165" width="0.5405%" height="15" fill="rgb(206,192,2)"/><text x="71.0885%" y="175.50"></text></g><g><title>check_mod_item_types (740,348 samples, 0.54%)</title><rect x="70.8412%" y="149" width="0.5378%" height="15" fill="rgb(241,108,4)"/><text x="71.0912%" y="159.50"></text></g><g><title>fn_sig (244,703 samples, 0.18%)</title><rect x="71.5784%" y="133" width="0.1777%" height="15" fill="rgb(247,173,49)"/><text x="71.8284%" y="143.50"></text></g><g><title>is_late_bound_map (275,443 samples, 0.20%)</title><rect x="71.8486%" y="117" width="0.2001%" height="15" fill="rgb(224,114,35)"/><text x="72.0986%" y="127.50"></text></g><g><title>resolve_lifetimes (255,553 samples, 0.19%)</title><rect x="71.8630%" y="101" width="0.1856%" height="15" fill="rgb(245,159,27)"/><text x="72.1130%" y="111.50"></text></g><g><title>named_region_map (379,325 samples, 0.28%)</title><rect x="72.0486%" y="117" width="0.2755%" height="15" fill="rgb(245,172,44)"/><text x="72.2986%" y="127.50"></text></g><g><title>resolve_lifetimes (358,235 samples, 0.26%)</title><rect x="72.0639%" y="101" width="0.2602%" height="15" fill="rgb(236,23,11)"/><text x="72.3139%" y="111.50"></text></g><g><title>lint_levels (200,112 samples, 0.15%)</title><rect x="72.1788%" y="85" width="0.1454%" height="15" fill="rgb(205,117,38)"/><text x="72.4288%" y="95.50"></text></g><g><title>generics_of (800,108 samples, 0.58%)</title><rect x="71.7561%" y="133" width="0.5812%" height="15" fill="rgb(237,72,25)"/><text x="72.0061%" y="143.50"></text></g><g><title>explicit_predicates_of (185,172 samples, 0.13%)</title><rect x="72.4595%" y="101" width="0.1345%" height="15" fill="rgb(244,70,9)"/><text x="72.7095%" y="111.50"></text></g><g><title>predicates_of (543,166 samples, 0.39%)</title><rect x="72.3719%" y="133" width="0.3945%" height="15" fill="rgb(217,125,39)"/><text x="72.6219%" y="143.50"></text></g><g><title>predicates_defined_on (498,986 samples, 0.36%)</title><rect x="72.4040%" y="117" width="0.3625%" height="15" fill="rgb(235,36,10)"/><text x="72.6540%" y="127.50"></text></g><g><title>inferred_outlives_of (237,462 samples, 0.17%)</title><rect x="72.5940%" y="101" width="0.1725%" height="15" fill="rgb(251,123,47)"/><text x="72.8440%" y="111.50"></text></g><g><title>inferred_outlives_crate (216,512 samples, 0.16%)</title><rect x="72.6092%" y="85" width="0.1573%" height="15" fill="rgb(221,13,13)"/><text x="72.8592%" y="95.50"></text></g><g><title>type_collecting (2,027,802 samples, 1.47%)</title><rect x="71.3803%" y="165" width="1.4729%" height="15" fill="rgb(238,131,9)"/><text x="71.6303%" y="175.50"></text></g><g><title>collect_mod_item_types (2,017,052 samples, 1.47%)</title><rect x="71.3881%" y="149" width="1.4651%" height="15" fill="rgb(211,50,8)"/><text x="71.6381%" y="159.50"></text></g><g><title>evaluate_obligation (238,976 samples, 0.17%)</title><rect x="73.9005%" y="133" width="0.1736%" height="15" fill="rgb(245,182,24)"/><text x="74.1505%" y="143.50"></text></g><g><title>param_env (149,203 samples, 0.11%)</title><rect x="74.1382%" y="133" width="0.1084%" height="15" fill="rgb(242,14,37)"/><text x="74.3882%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,189,968 samples, 1.59%)</title><rect x="72.9892%" y="149" width="1.5907%" height="15" fill="rgb(246,228,12)"/><text x="73.2392%" y="159.50"></text></g><g><title>region_scope_tree (446,486 samples, 0.32%)</title><rect x="74.2556%" y="133" width="0.3243%" height="15" fill="rgb(213,55,15)"/><text x="74.5056%" y="143.50"></text></g><g><title>adt_sized_constraint (140,441 samples, 0.10%)</title><rect x="75.6456%" y="117" width="0.1020%" height="15" fill="rgb(209,9,3)"/><text x="75.8956%" y="127.50"></text></g><g><title>evaluate_obligation (325,843 samples, 0.24%)</title><rect x="75.5116%" y="133" width="0.2367%" height="15" fill="rgb(230,59,30)"/><text x="75.7616%" y="143.50"></text></g><g><title>param_env (225,813 samples, 0.16%)</title><rect x="75.8046%" y="133" width="0.1640%" height="15" fill="rgb(209,121,21)"/><text x="76.0546%" y="143.50"></text></g><g><title>check_item_well_formed (2,176,530 samples, 1.58%)</title><rect x="74.5799%" y="149" width="1.5810%" height="15" fill="rgb(220,109,13)"/><text x="74.8299%" y="159.50"></text></g><g><title>evaluate_obligation (156,412 samples, 0.11%)</title><rect x="76.2652%" y="133" width="0.1136%" height="15" fill="rgb(232,18,1)"/><text x="76.5152%" y="143.50"></text></g><g><title>analysis (104,666,497 samples, 76.03%)</title><rect x="0.4101%" y="197" width="76.0272%" height="15" fill="rgb(215,41,42)"/><text x="0.6601%" y="207.50">analysis</text></g><g><title>type_check_crate (64,136,399 samples, 46.59%)</title><rect x="29.8502%" y="181" width="46.5871%" height="15" fill="rgb(224,123,36)"/><text x="30.1002%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,930,614 samples, 3.58%)</title><rect x="72.8559%" y="165" width="3.5815%" height="15" fill="rgb(240,125,3)"/><text x="73.1059%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (380,583 samples, 0.28%)</title><rect x="76.1609%" y="149" width="0.2764%" height="15" fill="rgb(205,98,50)"/><text x="76.4109%" y="159.50"></text></g><g><title>codegen_crate (553,096 samples, 0.40%)</title><rect x="76.4428%" y="197" width="0.4018%" height="15" fill="rgb(205,185,37)"/><text x="76.6928%" y="207.50"></text></g><g><title>AST_validation (140,631 samples, 0.10%)</title><rect x="76.9587%" y="181" width="0.1022%" height="15" fill="rgb(238,207,15)"/><text x="77.2087%" y="191.50"></text></g><g><title>metadata_load_macro (310,262 samples, 0.23%)</title><rect x="85.9846%" y="149" width="0.2254%" height="15" fill="rgb(213,199,42)"/><text x="86.2346%" y="159.50"></text></g><g><title>metadata_register_crate (4,377,619 samples, 3.18%)</title><rect x="86.2100%" y="149" width="3.1798%" height="15" fill="rgb(235,201,11)"/><text x="86.4600%" y="159.50">met..</text></g><g><title>metadata_register_crate (3,077,572 samples, 2.24%)</title><rect x="87.1543%" y="133" width="2.2355%" height="15" fill="rgb(207,46,11)"/><text x="87.4043%" y="143.50">m..</text></g><g><title>macro_expand_crate (16,976,088 samples, 12.33%)</title><rect x="77.1597%" y="181" width="12.3310%" height="15" fill="rgb(241,35,35)"/><text x="77.4097%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (16,957,978 samples, 12.32%)</title><rect x="77.1728%" y="165" width="12.3179%" height="15" fill="rgb(243,32,47)"/><text x="77.4228%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (138,911 samples, 0.10%)</title><rect x="89.3898%" y="149" width="0.1009%" height="15" fill="rgb(247,202,23)"/><text x="89.6398%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (151,611 samples, 0.11%)</title><rect x="89.4931%" y="181" width="0.1101%" height="15" fill="rgb(219,102,11)"/><text x="89.7431%" y="191.50"></text></g><g><title>finalize_macro_resolutions (229,833 samples, 0.17%)</title><rect x="89.6289%" y="165" width="0.1669%" height="15" fill="rgb(243,110,44)"/><text x="89.8789%" y="175.50"></text></g><g><title>late_resolve_crate (1,977,482 samples, 1.44%)</title><rect x="89.7958%" y="165" width="1.4364%" height="15" fill="rgb(222,74,54)"/><text x="90.0458%" y="175.50"></text></g><g><title>configure_and_expand (19,918,821 samples, 14.47%)</title><rect x="76.8446%" y="197" width="14.4686%" height="15" fill="rgb(216,99,12)"/><text x="77.0946%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,354,106 samples, 1.71%)</title><rect x="89.6032%" y="181" width="1.7100%" height="15" fill="rgb(226,22,26)"/><text x="89.8532%" y="191.50"></text></g><g><title>drop_ast (216,632 samples, 0.16%)</title><rect x="91.3131%" y="197" width="0.1574%" height="15" fill="rgb(217,163,10)"/><text x="91.5631%" y="207.50"></text></g><g><title>early_lint_checks (429,025 samples, 0.31%)</title><rect x="91.4847%" y="197" width="0.3116%" height="15" fill="rgb(213,25,53)"/><text x="91.7347%" y="207.50"></text></g><g><title>free_global_ctxt (3,982,584 samples, 2.89%)</title><rect x="91.7963%" y="197" width="2.8929%" height="15" fill="rgb(252,105,26)"/><text x="92.0463%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,101,692 samples, 0.80%)</title><rect x="94.6892%" y="197" width="0.8002%" height="15" fill="rgb(220,39,43)"/><text x="94.9392%" y="207.50"></text></g><g><title>hir_lowering (3,021,133 samples, 2.19%)</title><rect x="95.4894%" y="197" width="2.1945%" height="15" fill="rgb(229,68,48)"/><text x="95.7394%" y="207.50">h..</text></g><g><title>parse_crate (1,660,579 samples, 1.21%)</title><rect x="97.7272%" y="197" width="1.2062%" height="15" fill="rgb(252,8,32)"/><text x="97.9772%" y="207.50"></text></g><g><title>prepare_outputs (184,872 samples, 0.13%)</title><rect x="98.9380%" y="197" width="0.1343%" height="15" fill="rgb(223,20,43)"/><text x="99.1880%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (830,389 samples, 0.60%)</title><rect x="99.0723%" y="197" width="0.6032%" height="15" fill="rgb(229,81,49)"/><text x="99.3223%" y="207.50"></text></g><g><title>all (137,669,773 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (137,669,773 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (339,284 samples, 0.25%)</title><rect x="99.7536%" y="197" width="0.2464%" height="15" fill="rgb(249,174,33)"/><text x="100.0036%" y="207.50"></text></g></svg></svg>