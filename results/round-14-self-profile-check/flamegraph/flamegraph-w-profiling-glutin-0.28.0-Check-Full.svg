<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (921,589 samples, 0.16%)</title><rect x="16.1147%" y="133" width="0.1603%" height="15" fill="rgb(227,0,7)"/><text x="16.3647%" y="143.50"></text></g><g><title>param_env (1,048,205 samples, 0.18%)</title><rect x="18.1251%" y="101" width="0.1823%" height="15" fill="rgb(217,0,24)"/><text x="18.3751%" y="111.50"></text></g><g><title>item_attrs (852,217 samples, 0.15%)</title><rect x="18.9769%" y="69" width="0.1483%" height="15" fill="rgb(221,193,54)"/><text x="19.2269%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (812,506 samples, 0.14%)</title><rect x="18.9838%" y="53" width="0.1413%" height="15" fill="rgb(248,212,6)"/><text x="19.2338%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,288,329 samples, 0.22%)</title><rect x="18.9132%" y="85" width="0.2241%" height="15" fill="rgb(208,68,35)"/><text x="19.1632%" y="95.50"></text></g><g><title>is_copy_raw (617,796 samples, 0.11%)</title><rect x="22.5272%" y="69" width="0.1075%" height="15" fill="rgb(232,128,0)"/><text x="22.7772%" y="79.50"></text></g><g><title>adt_drop_tys (764,815 samples, 0.13%)</title><rect x="22.7693%" y="53" width="0.1330%" height="15" fill="rgb(207,160,47)"/><text x="23.0193%" y="63.50"></text></g><g><title>is_copy_raw (5,190,161 samples, 0.90%)</title><rect x="22.9024%" y="53" width="0.9029%" height="15" fill="rgb(228,23,34)"/><text x="23.1524%" y="63.50"></text></g><g><title>evaluate_obligation (4,225,328 samples, 0.74%)</title><rect x="23.0702%" y="37" width="0.7350%" height="15" fill="rgb(218,30,26)"/><text x="23.3202%" y="47.50"></text></g><g><title>needs_drop_raw (6,763,161 samples, 1.18%)</title><rect x="22.6357%" y="69" width="1.1765%" height="15" fill="rgb(220,122,19)"/><text x="22.8857%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (846,998 samples, 0.15%)</title><rect x="23.9562%" y="53" width="0.1473%" height="15" fill="rgb(250,228,42)"/><text x="24.2062%" y="63.50"></text></g><g><title>specialization_graph_of (1,939,440 samples, 0.34%)</title><rect x="24.1301%" y="53" width="0.3374%" height="15" fill="rgb(240,193,28)"/><text x="24.3801%" y="63.50"></text></g><g><title>resolve_instance (4,047,479 samples, 0.70%)</title><rect x="23.8123%" y="69" width="0.7041%" height="15" fill="rgb(216,20,37)"/><text x="24.0623%" y="79.50"></text></g><g><title>thir_body (7,923,642 samples, 1.38%)</title><rect x="24.5503%" y="69" width="1.3784%" height="15" fill="rgb(206,188,39)"/><text x="24.8003%" y="79.50"></text></g><g><title>mir_const (50,085,832 samples, 8.71%)</title><rect x="17.2392%" y="117" width="8.7130%" height="15" fill="rgb(217,207,13)"/><text x="17.4892%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (43,945,181 samples, 7.64%)</title><rect x="18.3075%" y="101" width="7.6448%" height="15" fill="rgb(231,73,38)"/><text x="18.5575%" y="111.50">unsafety_c..</text></g><g><title>mir_built (39,174,820 samples, 6.81%)</title><rect x="19.1373%" y="85" width="6.8149%" height="15" fill="rgb(225,20,46)"/><text x="19.3873%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (1,179,592 samples, 0.21%)</title><rect x="25.9523%" y="117" width="0.2052%" height="15" fill="rgb(210,31,41)"/><text x="26.2023%" y="127.50"></text></g><g><title>mir_promoted (56,419,884 samples, 9.81%)</title><rect x="16.3428%" y="133" width="9.8149%" height="15" fill="rgb(221,200,47)"/><text x="16.5928%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,197,007 samples, 0.56%)</title><rect x="26.1584%" y="133" width="0.5562%" height="15" fill="rgb(226,26,5)"/><text x="26.4084%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,905,246 samples, 0.33%)</title><rect x="26.7146%" y="133" width="0.3314%" height="15" fill="rgb(249,33,26)"/><text x="26.9646%" y="143.50"></text></g><g><title>normalize_projection_ty (1,107,680 samples, 0.19%)</title><rect x="26.8533%" y="117" width="0.1927%" height="15" fill="rgb(235,183,28)"/><text x="27.1033%" y="127.50"></text></g><g><title>type_op_normalize_predicate (977,401 samples, 0.17%)</title><rect x="27.0460%" y="133" width="0.1700%" height="15" fill="rgb(221,5,38)"/><text x="27.2960%" y="143.50"></text></g><g><title>type_op_prove_predicate (12,326,841 samples, 2.14%)</title><rect x="27.2453%" y="133" width="2.1444%" height="15" fill="rgb(247,18,42)"/><text x="27.4953%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (166,065,690 samples, 28.89%)</title><rect x="0.5057%" y="165" width="28.8891%" height="15" fill="rgb(241,131,45)"/><text x="0.7557%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (165,340,394 samples, 28.76%)</title><rect x="0.6319%" y="149" width="28.7630%" height="15" fill="rgb(249,31,29)"/><text x="0.8819%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,012,240 samples, 0.18%)</title><rect x="29.4743%" y="165" width="0.1761%" height="15" fill="rgb(225,111,53)"/><text x="29.7243%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,054,369 samples, 0.18%)</title><rect x="29.8765%" y="133" width="0.1834%" height="15" fill="rgb(238,160,17)"/><text x="30.1265%" y="143.50"></text></g><g><title>should_inherit_track_caller (861,238 samples, 0.15%)</title><rect x="29.9101%" y="117" width="0.1498%" height="15" fill="rgb(214,148,48)"/><text x="30.1601%" y="127.50"></text></g><g><title>check_mod_attrs (2,302,305 samples, 0.40%)</title><rect x="29.6594%" y="149" width="0.4005%" height="15" fill="rgb(232,36,49)"/><text x="29.9094%" y="159.50"></text></g><g><title>check_mod_const_bodies (588,069 samples, 0.10%)</title><rect x="30.0599%" y="149" width="0.1023%" height="15" fill="rgb(209,103,24)"/><text x="30.3099%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,381,765 samples, 0.24%)</title><rect x="30.2354%" y="149" width="0.2404%" height="15" fill="rgb(229,88,8)"/><text x="30.4854%" y="159.50"></text></g><g><title>misc_checking_1 (4,931,526 samples, 0.86%)</title><rect x="29.6504%" y="165" width="0.8579%" height="15" fill="rgb(213,181,19)"/><text x="29.9004%" y="175.50"></text></g><g><title>check_mod_intrinsics (642,019 samples, 0.11%)</title><rect x="30.5128%" y="133" width="0.1117%" height="15" fill="rgb(254,191,54)"/><text x="30.7628%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (3,311,727 samples, 0.58%)</title><rect x="30.5088%" y="149" width="0.5761%" height="15" fill="rgb(241,83,37)"/><text x="30.7588%" y="159.50"></text></g><g><title>check_mod_liveness (2,646,648 samples, 0.46%)</title><rect x="30.6245%" y="133" width="0.4604%" height="15" fill="rgb(233,36,39)"/><text x="30.8745%" y="143.50"></text></g><g><title>type_uninhabited_from (678,749 samples, 0.12%)</title><rect x="30.9668%" y="117" width="0.1181%" height="15" fill="rgb(226,3,54)"/><text x="31.2168%" y="127.50"></text></g><g><title>param_env (713,357 samples, 0.12%)</title><rect x="31.8152%" y="117" width="0.1241%" height="15" fill="rgb(245,192,40)"/><text x="32.0652%" y="127.50"></text></g><g><title>misc_checking_2 (8,250,202 samples, 1.44%)</title><rect x="30.5083%" y="165" width="1.4352%" height="15" fill="rgb(238,167,29)"/><text x="30.7583%" y="175.50"></text></g><g><title>match_checking (4,935,975 samples, 0.86%)</title><rect x="31.0849%" y="149" width="0.8587%" height="15" fill="rgb(232,182,51)"/><text x="31.3349%" y="159.50"></text></g><g><title>check_match (4,730,634 samples, 0.82%)</title><rect x="31.1206%" y="133" width="0.8230%" height="15" fill="rgb(231,60,39)"/><text x="31.3706%" y="143.50"></text></g><g><title>check_private_in_public (1,149,263 samples, 0.20%)</title><rect x="31.9459%" y="149" width="0.1999%" height="15" fill="rgb(208,69,12)"/><text x="32.1959%" y="159.50"></text></g><g><title>death_checking (2,475,078 samples, 0.43%)</title><rect x="32.1458%" y="149" width="0.4306%" height="15" fill="rgb(235,93,37)"/><text x="32.3958%" y="159.50"></text></g><g><title>eval_to_const_value_raw (806,710 samples, 0.14%)</title><rect x="33.2965%" y="69" width="0.1403%" height="15" fill="rgb(213,116,39)"/><text x="33.5465%" y="79.50"></text></g><g><title>eval_to_const_value_raw (802,650 samples, 0.14%)</title><rect x="33.2972%" y="53" width="0.1396%" height="15" fill="rgb(222,207,29)"/><text x="33.5472%" y="63.50"></text></g><g><title>eval_to_allocation_raw (798,670 samples, 0.14%)</title><rect x="33.2979%" y="37" width="0.1389%" height="15" fill="rgb(206,96,30)"/><text x="33.5479%" y="47.50"></text></g><g><title>eval_to_allocation_raw (1,258,804 samples, 0.22%)</title><rect x="33.2185%" y="117" width="0.2190%" height="15" fill="rgb(218,138,4)"/><text x="33.4685%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,249,854 samples, 0.22%)</title><rect x="33.2200%" y="101" width="0.2174%" height="15" fill="rgb(250,191,14)"/><text x="33.4700%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (832,120 samples, 0.14%)</title><rect x="33.2927%" y="85" width="0.1448%" height="15" fill="rgb(239,60,40)"/><text x="33.5427%" y="95.50"></text></g><g><title>param_env (1,179,824 samples, 0.21%)</title><rect x="33.4375%" y="117" width="0.2052%" height="15" fill="rgb(206,27,48)"/><text x="33.6875%" y="127.50"></text></g><g><title>crate_lints (8,554,135 samples, 1.49%)</title><rect x="32.5770%" y="133" width="1.4881%" height="15" fill="rgb(225,35,8)"/><text x="32.8270%" y="143.50"></text></g><g><title>type_of (2,011,501 samples, 0.35%)</title><rect x="33.7152%" y="117" width="0.3499%" height="15" fill="rgb(250,213,24)"/><text x="33.9652%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,507,196 samples, 0.26%)</title><rect x="33.8029%" y="101" width="0.2622%" height="15" fill="rgb(247,123,22)"/><text x="34.0529%" y="111.50"></text></g><g><title>lint_checking (12,484,029 samples, 2.17%)</title><rect x="32.5764%" y="149" width="2.1717%" height="15" fill="rgb(231,138,38)"/><text x="32.8264%" y="159.50">l..</text></g><g><title>module_lints (3,926,054 samples, 0.68%)</title><rect x="34.0651%" y="133" width="0.6830%" height="15" fill="rgb(231,145,46)"/><text x="34.3151%" y="143.50"></text></g><g><title>lint_mod (3,907,034 samples, 0.68%)</title><rect x="34.0684%" y="117" width="0.6797%" height="15" fill="rgb(251,118,11)"/><text x="34.3184%" y="127.50"></text></g><g><title>privacy_access_levels (1,287,924 samples, 0.22%)</title><rect x="34.7481%" y="149" width="0.2241%" height="15" fill="rgb(217,147,25)"/><text x="34.9981%" y="159.50"></text></g><g><title>privacy_checking_modules (5,956,396 samples, 1.04%)</title><rect x="34.9722%" y="149" width="1.0362%" height="15" fill="rgb(247,81,37)"/><text x="35.2222%" y="159.50"></text></g><g><title>check_mod_privacy (5,942,685 samples, 1.03%)</title><rect x="34.9745%" y="133" width="1.0338%" height="15" fill="rgb(209,12,38)"/><text x="35.2245%" y="143.50"></text></g><g><title>misc_checking_3 (23,406,470 samples, 4.07%)</title><rect x="31.9436%" y="165" width="4.0718%" height="15" fill="rgb(227,1,9)"/><text x="32.1936%" y="175.50">misc..</text></g><g><title>impl_parent (5,900,678 samples, 1.03%)</title><rect x="37.8462%" y="101" width="1.0265%" height="15" fill="rgb(248,47,43)"/><text x="38.0962%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (3,301,417 samples, 0.57%)</title><rect x="38.2984%" y="85" width="0.5743%" height="15" fill="rgb(221,10,30)"/><text x="38.5484%" y="95.50"></text></g><g><title>impl_trait_ref (11,711,793 samples, 2.04%)</title><rect x="38.8727%" y="101" width="2.0374%" height="15" fill="rgb(210,229,1)"/><text x="39.1227%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (8,907,524 samples, 1.55%)</title><rect x="39.3605%" y="85" width="1.5496%" height="15" fill="rgb(222,148,37)"/><text x="39.6105%" y="95.50"></text></g><g><title>trait_impls_of (2,344,319 samples, 0.41%)</title><rect x="40.9148%" y="101" width="0.4078%" height="15" fill="rgb(234,67,33)"/><text x="41.1648%" y="111.50"></text></g><g><title>implementations_of_trait (848,982 samples, 0.15%)</title><rect x="41.1749%" y="85" width="0.1477%" height="15" fill="rgb(247,98,35)"/><text x="41.4249%" y="95.50"></text></g><g><title>coherent_trait (30,144,456 samples, 5.24%)</title><rect x="36.0788%" y="133" width="5.2440%" height="15" fill="rgb(247,138,52)"/><text x="36.3288%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (29,302,375 samples, 5.10%)</title><rect x="36.2253%" y="117" width="5.0975%" height="15" fill="rgb(213,79,30)"/><text x="36.4753%" y="127.50">specia..</text></g><g><title>coherence_checking (30,448,220 samples, 5.30%)</title><rect x="36.0716%" y="149" width="5.2968%" height="15" fill="rgb(246,177,23)"/><text x="36.3216%" y="159.50">cohere..</text></g><g><title>associated_items (614,648 samples, 0.11%)</title><rect x="57.5652%" y="101" width="0.1069%" height="15" fill="rgb(230,62,27)"/><text x="57.8152%" y="111.50"></text></g><g><title>adt_dtorck_constraint (3,048,041 samples, 0.53%)</title><rect x="58.0476%" y="69" width="0.5302%" height="15" fill="rgb(216,154,8)"/><text x="58.2976%" y="79.50"></text></g><g><title>type_of (1,660,739 samples, 0.29%)</title><rect x="58.2889%" y="53" width="0.2889%" height="15" fill="rgb(244,35,45)"/><text x="58.5389%" y="63.50"></text></g><g><title>metadata_decode_entry_type_of (1,460,206 samples, 0.25%)</title><rect x="58.3238%" y="37" width="0.2540%" height="15" fill="rgb(251,115,12)"/><text x="58.5738%" y="47.50"></text></g><g><title>dropck_outlives (5,017,654 samples, 0.87%)</title><rect x="57.7453%" y="101" width="0.8729%" height="15" fill="rgb(240,54,50)"/><text x="57.9953%" y="111.50"></text></g><g><title>adt_dtorck_constraint (3,870,314 samples, 0.67%)</title><rect x="57.9449%" y="85" width="0.6733%" height="15" fill="rgb(233,84,52)"/><text x="58.1949%" y="95.50"></text></g><g><title>evaluate_obligation (4,304,723 samples, 0.75%)</title><rect x="58.6181%" y="101" width="0.7489%" height="15" fill="rgb(207,117,47)"/><text x="58.8681%" y="111.50"></text></g><g><title>trait_impls_of (669,146 samples, 0.12%)</title><rect x="59.2506%" y="85" width="0.1164%" height="15" fill="rgb(249,43,39)"/><text x="59.5006%" y="95.50"></text></g><g><title>method_autoderef_steps (817,099 samples, 0.14%)</title><rect x="59.5776%" y="101" width="0.1421%" height="15" fill="rgb(209,38,44)"/><text x="59.8276%" y="111.50"></text></g><g><title>predicates_of (792,628 samples, 0.14%)</title><rect x="59.7586%" y="101" width="0.1379%" height="15" fill="rgb(236,212,23)"/><text x="60.0086%" y="111.50"></text></g><g><title>associated_item (754,996 samples, 0.13%)</title><rect x="72.3696%" y="69" width="0.1313%" height="15" fill="rgb(242,79,21)"/><text x="72.6196%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (602,215 samples, 0.10%)</title><rect x="72.3962%" y="53" width="0.1048%" height="15" fill="rgb(211,96,35)"/><text x="72.6462%" y="63.50"></text></g><g><title>associated_items (1,090,489 samples, 0.19%)</title><rect x="72.3216%" y="85" width="0.1897%" height="15" fill="rgb(253,215,40)"/><text x="72.5716%" y="95.50"></text></g><g><title>dropck_outlives (1,534,852 samples, 0.27%)</title><rect x="72.5381%" y="85" width="0.2670%" height="15" fill="rgb(211,81,21)"/><text x="72.7881%" y="95.50"></text></g><g><title>generics_of (904,650 samples, 0.16%)</title><rect x="73.8971%" y="69" width="0.1574%" height="15" fill="rgb(208,190,38)"/><text x="74.1471%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (744,129 samples, 0.13%)</title><rect x="73.9250%" y="53" width="0.1295%" height="15" fill="rgb(235,213,38)"/><text x="74.1750%" y="63.50"></text></g><g><title>impl_trait_ref (743,643 samples, 0.13%)</title><rect x="74.0693%" y="69" width="0.1294%" height="15" fill="rgb(237,122,38)"/><text x="74.3193%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (592,262 samples, 0.10%)</title><rect x="74.0956%" y="53" width="0.1030%" height="15" fill="rgb(244,218,35)"/><text x="74.3456%" y="63.50"></text></g><g><title>trait_impls_of (671,416 samples, 0.12%)</title><rect x="74.3721%" y="69" width="0.1168%" height="15" fill="rgb(240,68,47)"/><text x="74.6221%" y="79.50"></text></g><g><title>evaluate_obligation (9,694,619 samples, 1.69%)</title><rect x="72.8051%" y="85" width="1.6865%" height="15" fill="rgb(210,16,53)"/><text x="73.0551%" y="95.50"></text></g><g><title>generics_of (1,512,322 samples, 0.26%)</title><rect x="74.5403%" y="85" width="0.2631%" height="15" fill="rgb(235,124,12)"/><text x="74.7903%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (923,762 samples, 0.16%)</title><rect x="74.6427%" y="69" width="0.1607%" height="15" fill="rgb(224,169,11)"/><text x="74.8927%" y="79.50"></text></g><g><title>is_copy_raw (1,062,113 samples, 0.18%)</title><rect x="74.9073%" y="85" width="0.1848%" height="15" fill="rgb(250,166,2)"/><text x="75.1573%" y="95.50"></text></g><g><title>evaluate_obligation (830,020 samples, 0.14%)</title><rect x="74.9477%" y="69" width="0.1444%" height="15" fill="rgb(242,216,29)"/><text x="75.1977%" y="79.50"></text></g><g><title>evaluate_obligation (738,518 samples, 0.13%)</title><rect x="75.3034%" y="69" width="0.1285%" height="15" fill="rgb(230,116,27)"/><text x="75.5534%" y="79.50"></text></g><g><title>method_autoderef_steps (1,572,048 samples, 0.27%)</title><rect x="75.1649%" y="85" width="0.2735%" height="15" fill="rgb(228,99,48)"/><text x="75.4149%" y="95.50"></text></g><g><title>predicates_of (1,128,504 samples, 0.20%)</title><rect x="75.4487%" y="85" width="0.1963%" height="15" fill="rgb(253,11,6)"/><text x="75.6987%" y="95.50"></text></g><g><title>predicates_defined_on (584,049 samples, 0.10%)</title><rect x="75.5434%" y="69" width="0.1016%" height="15" fill="rgb(247,143,39)"/><text x="75.7934%" y="79.50"></text></g><g><title>typeck (90,792,179 samples, 15.79%)</title><rect x="59.9586%" y="101" width="15.7944%" height="15" fill="rgb(236,97,10)"/><text x="60.2086%" y="111.50">typeck</text></g><g><title>item_bodies_checking (197,645,681 samples, 34.38%)</title><rect x="41.3916%" y="149" width="34.3829%" height="15" fill="rgb(233,208,19)"/><text x="41.6416%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (197,642,051 samples, 34.38%)</title><rect x="41.3922%" y="133" width="34.3822%" height="15" fill="rgb(216,164,2)"/><text x="41.6422%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (197,219,897 samples, 34.31%)</title><rect x="41.4656%" y="117" width="34.3088%" height="15" fill="rgb(220,129,5)"/><text x="41.7156%" y="127.50">typeck</text></g><g><title>item_types_checking (4,711,933 samples, 0.82%)</title><rect x="75.7744%" y="149" width="0.8197%" height="15" fill="rgb(242,17,10)"/><text x="76.0244%" y="159.50"></text></g><g><title>check_mod_item_types (4,692,732 samples, 0.82%)</title><rect x="75.7778%" y="133" width="0.8164%" height="15" fill="rgb(242,107,0)"/><text x="76.0278%" y="143.50"></text></g><g><title>typeck (1,180,395 samples, 0.21%)</title><rect x="76.3888%" y="117" width="0.2053%" height="15" fill="rgb(251,28,31)"/><text x="76.6388%" y="127.50"></text></g><g><title>fn_sig (1,200,862 samples, 0.21%)</title><rect x="76.8175%" y="117" width="0.2089%" height="15" fill="rgb(233,223,10)"/><text x="77.0675%" y="127.50"></text></g><g><title>lint_levels (941,570 samples, 0.16%)</title><rect x="77.2376%" y="69" width="0.1638%" height="15" fill="rgb(215,21,27)"/><text x="77.4876%" y="79.50"></text></g><g><title>is_late_bound_map (1,440,395 samples, 0.25%)</title><rect x="77.1513%" y="101" width="0.2506%" height="15" fill="rgb(232,23,21)"/><text x="77.4013%" y="111.50"></text></g><g><title>resolve_lifetimes (1,415,985 samples, 0.25%)</title><rect x="77.1555%" y="85" width="0.2463%" height="15" fill="rgb(244,5,23)"/><text x="77.4055%" y="95.50"></text></g><g><title>named_region_map (1,176,032 samples, 0.20%)</title><rect x="77.4019%" y="101" width="0.2046%" height="15" fill="rgb(226,81,46)"/><text x="77.6519%" y="111.50"></text></g><g><title>resolve_lifetimes (1,086,792 samples, 0.19%)</title><rect x="77.4174%" y="85" width="0.1891%" height="15" fill="rgb(247,70,30)"/><text x="77.6674%" y="95.50"></text></g><g><title>generics_of (3,382,867 samples, 0.59%)</title><rect x="77.0264%" y="117" width="0.5885%" height="15" fill="rgb(212,68,19)"/><text x="77.2764%" y="127.50"></text></g><g><title>explicit_predicates_of (903,900 samples, 0.16%)</title><rect x="77.7470%" y="85" width="0.1572%" height="15" fill="rgb(240,187,13)"/><text x="77.9970%" y="95.50"></text></g><g><title>predicates_of (2,624,709 samples, 0.46%)</title><rect x="77.6389%" y="117" width="0.4566%" height="15" fill="rgb(223,113,26)"/><text x="77.8889%" y="127.50"></text></g><g><title>predicates_defined_on (2,385,444 samples, 0.41%)</title><rect x="77.6805%" y="101" width="0.4150%" height="15" fill="rgb(206,192,2)"/><text x="77.9305%" y="111.50"></text></g><g><title>inferred_outlives_of (1,099,471 samples, 0.19%)</title><rect x="77.9042%" y="85" width="0.1913%" height="15" fill="rgb(241,108,4)"/><text x="78.1542%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,017,811 samples, 0.18%)</title><rect x="77.9185%" y="69" width="0.1771%" height="15" fill="rgb(247,173,49)"/><text x="78.1685%" y="79.50"></text></g><g><title>type_collecting (9,006,600 samples, 1.57%)</title><rect x="76.5963%" y="149" width="1.5668%" height="15" fill="rgb(224,114,35)"/><text x="76.8463%" y="159.50"></text></g><g><title>collect_mod_item_types (8,983,799 samples, 1.56%)</title><rect x="76.6002%" y="133" width="1.5628%" height="15" fill="rgb(245,159,27)"/><text x="76.8502%" y="143.50"></text></g><g><title>evaluate_obligation (1,799,619 samples, 0.31%)</title><rect x="79.6847%" y="117" width="0.3131%" height="15" fill="rgb(245,172,44)"/><text x="79.9347%" y="127.50"></text></g><g><title>implied_outlives_bounds (986,255 samples, 0.17%)</title><rect x="80.0003%" y="117" width="0.1716%" height="15" fill="rgb(236,23,11)"/><text x="80.2503%" y="127.50"></text></g><g><title>param_env (1,154,724 samples, 0.20%)</title><rect x="80.2529%" y="117" width="0.2009%" height="15" fill="rgb(205,117,38)"/><text x="80.5029%" y="127.50"></text></g><g><title>region_scope_tree (1,970,098 samples, 0.34%)</title><rect x="80.4683%" y="117" width="0.3427%" height="15" fill="rgb(237,72,25)"/><text x="80.7183%" y="127.50"></text></g><g><title>check_impl_item_well_formed (14,339,623 samples, 2.49%)</title><rect x="78.3275%" y="133" width="2.4946%" height="15" fill="rgb(244,70,9)"/><text x="78.5775%" y="143.50">ch..</text></g><g><title>evaluate_obligation (1,691,869 samples, 0.29%)</title><rect x="81.5789%" y="117" width="0.2943%" height="15" fill="rgb(217,125,39)"/><text x="81.8289%" y="127.50"></text></g><g><title>param_env (1,002,260 samples, 0.17%)</title><rect x="81.9434%" y="117" width="0.1744%" height="15" fill="rgb(235,36,10)"/><text x="82.1934%" y="127.50"></text></g><g><title>check_item_well_formed (8,365,433 samples, 1.46%)</title><rect x="80.8220%" y="133" width="1.4553%" height="15" fill="rgb(251,123,47)"/><text x="81.0720%" y="143.50"></text></g><g><title>analysis (471,983,716 samples, 82.11%)</title><rect x="0.2487%" y="181" width="82.1073%" height="15" fill="rgb(221,13,13)"/><text x="0.4987%" y="191.50">analysis</text></g><g><title>type_check_crate (266,383,356 samples, 46.34%)</title><rect x="36.0154%" y="165" width="46.3406%" height="15" fill="rgb(238,131,9)"/><text x="36.2654%" y="175.50">type_check_crate</text></g><g><title>wf_checking (24,072,817 samples, 4.19%)</title><rect x="78.1683%" y="149" width="4.1878%" height="15" fill="rgb(211,50,8)"/><text x="78.4183%" y="159.50">wf_ch..</text></g><g><title>codegen_crate (805,569 samples, 0.14%)</title><rect x="82.3572%" y="181" width="0.1401%" height="15" fill="rgb(245,182,24)"/><text x="82.6072%" y="191.50"></text></g><g><title>AST_validation (778,219 samples, 0.14%)</title><rect x="82.5206%" y="165" width="0.1354%" height="15" fill="rgb(242,14,37)"/><text x="82.7706%" y="175.50"></text></g><g><title>metadata_register_crate (2,673,639 samples, 0.47%)</title><rect x="90.4009%" y="133" width="0.4651%" height="15" fill="rgb(246,228,12)"/><text x="90.6509%" y="143.50"></text></g><g><title>metadata_register_crate (1,462,898 samples, 0.25%)</title><rect x="90.6115%" y="117" width="0.2545%" height="15" fill="rgb(213,55,15)"/><text x="90.8615%" y="127.50"></text></g><g><title>metadata_register_crate (606,577 samples, 0.11%)</title><rect x="90.7605%" y="101" width="0.1055%" height="15" fill="rgb(209,9,3)"/><text x="91.0105%" y="111.50"></text></g><g><title>macro_expand_crate (47,933,684 samples, 8.34%)</title><rect x="82.7269%" y="165" width="8.3386%" height="15" fill="rgb(230,59,30)"/><text x="82.9769%" y="175.50">macro_expand..</text></g><g><title>expand_crate (47,923,064 samples, 8.34%)</title><rect x="82.7287%" y="149" width="8.3368%" height="15" fill="rgb(209,121,21)"/><text x="82.9787%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,147,063 samples, 0.20%)</title><rect x="90.8660%" y="133" width="0.1995%" height="15" fill="rgb(220,109,13)"/><text x="91.1160%" y="143.50"></text></g><g><title>late_resolve_crate (10,412,386 samples, 1.81%)</title><rect x="91.2113%" y="149" width="1.8114%" height="15" fill="rgb(232,18,1)"/><text x="91.4613%" y="159.50">l..</text></g><g><title>configure_and_expand (61,282,183 samples, 10.66%)</title><rect x="82.4974%" y="181" width="10.6608%" height="15" fill="rgb(215,41,42)"/><text x="82.7474%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (11,917,303 samples, 2.07%)</title><rect x="91.0850%" y="165" width="2.0732%" height="15" fill="rgb(224,123,36)"/><text x="91.3350%" y="175.50">r..</text></g><g><title>drop_ast (1,180,043 samples, 0.21%)</title><rect x="93.1581%" y="181" width="0.2053%" height="15" fill="rgb(240,125,3)"/><text x="93.4081%" y="191.50"></text></g><g><title>early_lint_checks (2,427,497 samples, 0.42%)</title><rect x="93.3681%" y="181" width="0.4223%" height="15" fill="rgb(205,98,50)"/><text x="93.6181%" y="191.50"></text></g><g><title>free_global_ctxt (8,527,524 samples, 1.48%)</title><rect x="93.7904%" y="181" width="1.4835%" height="15" fill="rgb(205,185,37)"/><text x="94.0404%" y="191.50"></text></g><g><title>generate_crate_metadata (4,958,146 samples, 0.86%)</title><rect x="95.2738%" y="181" width="0.8625%" height="15" fill="rgb(238,207,15)"/><text x="95.5238%" y="191.50"></text></g><g><title>hir_lowering (17,221,661 samples, 3.00%)</title><rect x="96.1364%" y="181" width="2.9959%" height="15" fill="rgb(213,199,42)"/><text x="96.3864%" y="191.50">hir..</text></g><g><title>parse_crate (1,747,140 samples, 0.30%)</title><rect x="99.1458%" y="181" width="0.3039%" height="15" fill="rgb(235,201,11)"/><text x="99.3958%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,267,626 samples, 0.39%)</title><rect x="99.4901%" y="181" width="0.3945%" height="15" fill="rgb(207,46,11)"/><text x="99.7401%" y="191.50"></text></g><g><title>all (574,837,602 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (574,837,602 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>