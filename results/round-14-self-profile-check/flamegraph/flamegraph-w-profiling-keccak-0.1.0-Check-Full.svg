<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (368,891 samples, 0.20%)</title><rect x="9.5932%" y="165" width="0.2049%" height="15" fill="rgb(227,0,7)"/><text x="9.8432%" y="175.50"></text></g><g><title>resolve_lifetimes (211,700 samples, 0.12%)</title><rect x="9.6806%" y="149" width="0.1176%" height="15" fill="rgb(217,0,24)"/><text x="9.9306%" y="159.50"></text></g><g><title>specialization_graph_of (452,195 samples, 0.25%)</title><rect x="13.4847%" y="85" width="0.2512%" height="15" fill="rgb(221,193,54)"/><text x="13.7347%" y="95.50"></text></g><g><title>impl_trait_ref (276,271 samples, 0.15%)</title><rect x="13.5824%" y="69" width="0.1535%" height="15" fill="rgb(248,212,6)"/><text x="13.8324%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (247,191 samples, 0.14%)</title><rect x="13.5985%" y="53" width="0.1373%" height="15" fill="rgb(208,68,35)"/><text x="13.8485%" y="63.50"></text></g><g><title>resolve_instance (542,966 samples, 0.30%)</title><rect x="13.4371%" y="101" width="0.3016%" height="15" fill="rgb(232,128,0)"/><text x="13.6871%" y="111.50"></text></g><g><title>thir_body (1,281,764 samples, 0.71%)</title><rect x="13.7389%" y="101" width="0.7119%" height="15" fill="rgb(207,160,47)"/><text x="13.9889%" y="111.50"></text></g><g><title>mir_const (7,354,622 samples, 4.09%)</title><rect x="10.3659%" y="149" width="4.0850%" height="15" fill="rgb(228,23,34)"/><text x="10.6159%" y="159.50">mir_..</text></g><g><title>unsafety_check_result (6,784,065 samples, 3.77%)</title><rect x="10.6828%" y="133" width="3.7681%" height="15" fill="rgb(218,30,26)"/><text x="10.9328%" y="143.50">unsa..</text></g><g><title>mir_built (6,432,051 samples, 3.57%)</title><rect x="10.8783%" y="117" width="3.5726%" height="15" fill="rgb(220,122,19)"/><text x="11.1283%" y="127.50">mir_..</text></g><g><title>thir_body (271,043 samples, 0.15%)</title><rect x="15.7113%" y="85" width="0.1505%" height="15" fill="rgb(250,228,42)"/><text x="15.9613%" y="95.50"></text></g><g><title>mir_promoted (10,941,081 samples, 6.08%)</title><rect x="9.7981%" y="165" width="6.0770%" height="15" fill="rgb(240,193,28)"/><text x="10.0481%" y="175.50">mir_prom..</text></g><g><title>mir_const_qualif (2,564,347 samples, 1.42%)</title><rect x="14.4509%" y="149" width="1.4243%" height="15" fill="rgb(216,20,37)"/><text x="14.7009%" y="159.50"></text></g><g><title>mir_const (2,117,708 samples, 1.18%)</title><rect x="14.6989%" y="133" width="1.1762%" height="15" fill="rgb(206,188,39)"/><text x="14.9489%" y="143.50"></text></g><g><title>unsafety_check_result (1,477,114 samples, 0.82%)</title><rect x="15.0548%" y="117" width="0.8204%" height="15" fill="rgb(217,207,13)"/><text x="15.3048%" y="127.50"></text></g><g><title>mir_built (1,280,022 samples, 0.71%)</title><rect x="15.1642%" y="101" width="0.7110%" height="15" fill="rgb(231,73,38)"/><text x="15.4142%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (286,901 samples, 0.16%)</title><rect x="15.8760%" y="165" width="0.1594%" height="15" fill="rgb(225,20,46)"/><text x="16.1260%" y="175.50"></text></g><g><title>MIR_borrow_checking (27,321,023 samples, 15.18%)</title><rect x="0.9484%" y="197" width="15.1750%" height="15" fill="rgb(210,31,41)"/><text x="1.1984%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (27,118,930 samples, 15.06%)</title><rect x="1.0607%" y="181" width="15.0628%" height="15" fill="rgb(221,200,47)"/><text x="1.3107%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,332,535 samples, 0.74%)</title><rect x="16.1235%" y="197" width="0.7401%" height="15" fill="rgb(226,26,5)"/><text x="16.3735%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,208,265 samples, 0.67%)</title><rect x="16.1925%" y="181" width="0.6711%" height="15" fill="rgb(249,33,26)"/><text x="16.4425%" y="191.50"></text></g><g><title>hir_module_items (385,185 samples, 0.21%)</title><rect x="16.8636%" y="197" width="0.2139%" height="15" fill="rgb(235,183,28)"/><text x="17.1136%" y="207.50"></text></g><g><title>check_mod_attrs (760,998 samples, 0.42%)</title><rect x="17.0944%" y="181" width="0.4227%" height="15" fill="rgb(221,5,38)"/><text x="17.3444%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (410,344 samples, 0.23%)</title><rect x="17.7012%" y="181" width="0.2279%" height="15" fill="rgb(247,18,42)"/><text x="17.9512%" y="191.50"></text></g><g><title>misc_checking_1 (1,681,278 samples, 0.93%)</title><rect x="17.0779%" y="197" width="0.9338%" height="15" fill="rgb(241,131,45)"/><text x="17.3279%" y="207.50"></text></g><g><title>lint_levels (186,442 samples, 0.10%)</title><rect x="18.2763%" y="149" width="0.1036%" height="15" fill="rgb(249,31,29)"/><text x="18.5263%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (665,848 samples, 0.37%)</title><rect x="18.0126%" y="181" width="0.3698%" height="15" fill="rgb(225,111,53)"/><text x="18.2626%" y="191.50"></text></g><g><title>check_mod_liveness (561,527 samples, 0.31%)</title><rect x="18.0705%" y="165" width="0.3119%" height="15" fill="rgb(238,160,17)"/><text x="18.3205%" y="175.50"></text></g><g><title>misc_checking_2 (944,431 samples, 0.52%)</title><rect x="18.0118%" y="197" width="0.5246%" height="15" fill="rgb(214,148,48)"/><text x="18.2618%" y="207.50"></text></g><g><title>match_checking (277,113 samples, 0.15%)</title><rect x="18.3824%" y="181" width="0.1539%" height="15" fill="rgb(232,36,49)"/><text x="18.6324%" y="191.50"></text></g><g><title>check_match (235,443 samples, 0.13%)</title><rect x="18.4056%" y="165" width="0.1308%" height="15" fill="rgb(209,103,24)"/><text x="18.6556%" y="175.50"></text></g><g><title>death_checking (409,815 samples, 0.23%)</title><rect x="18.6098%" y="181" width="0.2276%" height="15" fill="rgb(229,88,8)"/><text x="18.8598%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,511,958 samples, 0.84%)</title><rect x="19.1530%" y="149" width="0.8398%" height="15" fill="rgb(213,181,19)"/><text x="19.4030%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,425,476 samples, 0.79%)</title><rect x="19.2010%" y="133" width="0.7918%" height="15" fill="rgb(254,191,54)"/><text x="19.4510%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,314,654 samples, 0.73%)</title><rect x="19.2626%" y="117" width="0.7302%" height="15" fill="rgb(241,83,37)"/><text x="19.5126%" y="127.50"></text></g><g><title>mir_for_ctfe (415,684 samples, 0.23%)</title><rect x="19.7619%" y="101" width="0.2309%" height="15" fill="rgb(233,36,39)"/><text x="20.0119%" y="111.50"></text></g><g><title>crate_lints (2,143,944 samples, 1.19%)</title><rect x="18.8383%" y="165" width="1.1908%" height="15" fill="rgb(226,3,54)"/><text x="19.0883%" y="175.50"></text></g><g><title>lint_checking (2,947,833 samples, 1.64%)</title><rect x="18.8375%" y="181" width="1.6373%" height="15" fill="rgb(245,192,40)"/><text x="19.0875%" y="191.50"></text></g><g><title>module_lints (802,289 samples, 0.45%)</title><rect x="20.0292%" y="165" width="0.4456%" height="15" fill="rgb(238,167,29)"/><text x="20.2792%" y="175.50"></text></g><g><title>lint_mod (800,279 samples, 0.44%)</title><rect x="20.0303%" y="149" width="0.4445%" height="15" fill="rgb(232,182,51)"/><text x="20.2803%" y="159.50"></text></g><g><title>privacy_checking_modules (464,025 samples, 0.26%)</title><rect x="20.5538%" y="181" width="0.2577%" height="15" fill="rgb(231,60,39)"/><text x="20.8038%" y="191.50"></text></g><g><title>check_mod_privacy (462,445 samples, 0.26%)</title><rect x="20.5546%" y="165" width="0.2569%" height="15" fill="rgb(208,69,12)"/><text x="20.8046%" y="175.50"></text></g><g><title>misc_checking_3 (4,106,246 samples, 2.28%)</title><rect x="18.5363%" y="197" width="2.2807%" height="15" fill="rgb(235,93,37)"/><text x="18.7863%" y="207.50">m..</text></g><g><title>associated_items (191,253 samples, 0.11%)</title><rect x="71.7706%" y="133" width="0.1062%" height="15" fill="rgb(213,116,39)"/><text x="72.0206%" y="143.50"></text></g><g><title>generics_of (492,697 samples, 0.27%)</title><rect x="73.2054%" y="117" width="0.2737%" height="15" fill="rgb(222,207,29)"/><text x="73.4554%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (366,434 samples, 0.20%)</title><rect x="73.2755%" y="101" width="0.2035%" height="15" fill="rgb(206,96,30)"/><text x="73.5255%" y="111.50"></text></g><g><title>impl_trait_ref (986,897 samples, 0.55%)</title><rect x="73.5440%" y="117" width="0.5482%" height="15" fill="rgb(218,138,4)"/><text x="73.7940%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (870,046 samples, 0.48%)</title><rect x="73.6089%" y="101" width="0.4833%" height="15" fill="rgb(250,191,14)"/><text x="73.8589%" y="111.50"></text></g><g><title>predicates_of (336,854 samples, 0.19%)</title><rect x="74.1149%" y="117" width="0.1871%" height="15" fill="rgb(239,60,40)"/><text x="74.3649%" y="127.50"></text></g><g><title>predicates_defined_on (210,522 samples, 0.12%)</title><rect x="74.1850%" y="101" width="0.1169%" height="15" fill="rgb(206,27,48)"/><text x="74.4350%" y="111.50"></text></g><g><title>specializes (721,448 samples, 0.40%)</title><rect x="74.3020%" y="117" width="0.4007%" height="15" fill="rgb(225,35,8)"/><text x="74.5520%" y="127.50"></text></g><g><title>param_env (470,457 samples, 0.26%)</title><rect x="74.4414%" y="101" width="0.2613%" height="15" fill="rgb(250,213,24)"/><text x="74.6914%" y="111.50"></text></g><g><title>def_span (245,152 samples, 0.14%)</title><rect x="74.5665%" y="85" width="0.1362%" height="15" fill="rgb(247,123,22)"/><text x="74.8165%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (226,842 samples, 0.13%)</title><rect x="74.5767%" y="69" width="0.1260%" height="15" fill="rgb(231,138,38)"/><text x="74.8267%" y="79.50"></text></g><g><title>trait_impls_of (321,132 samples, 0.18%)</title><rect x="74.7179%" y="117" width="0.1784%" height="15" fill="rgb(231,145,46)"/><text x="74.9679%" y="127.50"></text></g><g><title>evaluate_obligation (5,265,261 samples, 2.92%)</title><rect x="71.9891%" y="133" width="2.9245%" height="15" fill="rgb(251,118,11)"/><text x="72.2391%" y="143.50">ev..</text></g><g><title>generics_of (194,291 samples, 0.11%)</title><rect x="74.9737%" y="133" width="0.1079%" height="15" fill="rgb(217,147,25)"/><text x="75.2237%" y="143.50"></text></g><g><title>impl_trait_ref (245,862 samples, 0.14%)</title><rect x="75.1605%" y="133" width="0.1366%" height="15" fill="rgb(247,81,37)"/><text x="75.4105%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (215,742 samples, 0.12%)</title><rect x="75.1772%" y="117" width="0.1198%" height="15" fill="rgb(209,12,38)"/><text x="75.4272%" y="127.50"></text></g><g><title>predicates_of (332,425 samples, 0.18%)</title><rect x="75.4687%" y="133" width="0.1846%" height="15" fill="rgb(227,1,9)"/><text x="75.7187%" y="143.50"></text></g><g><title>predicates_defined_on (218,882 samples, 0.12%)</title><rect x="75.5318%" y="117" width="0.1216%" height="15" fill="rgb(248,47,43)"/><text x="75.7818%" y="127.50"></text></g><g><title>specializes (282,014 samples, 0.16%)</title><rect x="75.6670%" y="133" width="0.1566%" height="15" fill="rgb(221,10,30)"/><text x="75.9170%" y="143.50"></text></g><g><title>param_env (209,594 samples, 0.12%)</title><rect x="75.7072%" y="117" width="0.1164%" height="15" fill="rgb(210,229,1)"/><text x="75.9572%" y="127.50"></text></g><g><title>item_bodies_checking (99,027,260 samples, 55.00%)</title><rect x="20.9037%" y="181" width="55.0031%" height="15" fill="rgb(222,148,37)"/><text x="21.1537%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (99,023,570 samples, 55.00%)</title><rect x="20.9057%" y="165" width="55.0011%" height="15" fill="rgb(234,67,33)"/><text x="21.1557%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (98,988,220 samples, 54.98%)</title><rect x="20.9254%" y="149" width="54.9814%" height="15" fill="rgb(247,98,35)"/><text x="21.1754%" y="159.50">typeck</text></g><g><title>item_types_checking (2,874,622 samples, 1.60%)</title><rect x="75.9068%" y="181" width="1.5967%" height="15" fill="rgb(247,138,52)"/><text x="76.1568%" y="191.50"></text></g><g><title>check_mod_item_types (2,870,742 samples, 1.59%)</title><rect x="75.9090%" y="165" width="1.5945%" height="15" fill="rgb(213,79,30)"/><text x="76.1590%" y="175.50"></text></g><g><title>typeck (2,705,649 samples, 1.50%)</title><rect x="76.0007%" y="149" width="1.5028%" height="15" fill="rgb(246,177,23)"/><text x="76.2507%" y="159.50"></text></g><g><title>named_region_map (271,203 samples, 0.15%)</title><rect x="77.8691%" y="133" width="0.1506%" height="15" fill="rgb(230,62,27)"/><text x="78.1191%" y="143.50"></text></g><g><title>resolve_lifetimes (258,073 samples, 0.14%)</title><rect x="77.8764%" y="117" width="0.1433%" height="15" fill="rgb(216,154,8)"/><text x="78.1264%" y="127.50"></text></g><g><title>generics_of (442,965 samples, 0.25%)</title><rect x="77.7922%" y="149" width="0.2460%" height="15" fill="rgb(244,35,45)"/><text x="78.0422%" y="159.50"></text></g><g><title>explicit_predicates_of (180,071 samples, 0.10%)</title><rect x="78.2040%" y="117" width="0.1000%" height="15" fill="rgb(251,115,12)"/><text x="78.4540%" y="127.50"></text></g><g><title>predicates_of (520,476 samples, 0.29%)</title><rect x="78.0382%" y="149" width="0.2891%" height="15" fill="rgb(240,54,50)"/><text x="78.2882%" y="159.50"></text></g><g><title>predicates_defined_on (413,054 samples, 0.23%)</title><rect x="78.0979%" y="133" width="0.2294%" height="15" fill="rgb(233,84,52)"/><text x="78.3479%" y="143.50"></text></g><g><title>type_collecting (1,693,439 samples, 0.94%)</title><rect x="77.5038%" y="181" width="0.9406%" height="15" fill="rgb(207,117,47)"/><text x="77.7538%" y="191.50"></text></g><g><title>collect_mod_item_types (1,682,478 samples, 0.93%)</title><rect x="77.5099%" y="165" width="0.9345%" height="15" fill="rgb(249,43,39)"/><text x="77.7599%" y="175.50"></text></g><g><title>type_of (210,762 samples, 0.12%)</title><rect x="78.3273%" y="149" width="0.1171%" height="15" fill="rgb(209,38,44)"/><text x="78.5773%" y="159.50"></text></g><g><title>mir_const_qualif (251,913 samples, 0.14%)</title><rect x="79.8445%" y="101" width="0.1399%" height="15" fill="rgb(236,212,23)"/><text x="80.0945%" y="111.50"></text></g><g><title>mir_const (212,752 samples, 0.12%)</title><rect x="79.8663%" y="85" width="0.1182%" height="15" fill="rgb(242,79,21)"/><text x="80.1163%" y="95.50"></text></g><g><title>mir_borrowck (618,997 samples, 0.34%)</title><rect x="80.1069%" y="69" width="0.3438%" height="15" fill="rgb(211,96,35)"/><text x="80.3569%" y="79.50"></text></g><g><title>mir_for_ctfe (840,519 samples, 0.47%)</title><rect x="79.9845%" y="101" width="0.4669%" height="15" fill="rgb(253,215,40)"/><text x="80.2345%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (775,659 samples, 0.43%)</title><rect x="80.0205%" y="85" width="0.4308%" height="15" fill="rgb(211,81,21)"/><text x="80.2705%" y="95.50"></text></g><g><title>mir_for_ctfe (188,842 samples, 0.10%)</title><rect x="80.5476%" y="37" width="0.1049%" height="15" fill="rgb(208,190,38)"/><text x="80.7976%" y="47.50"></text></g><g><title>eval_to_const_value_raw (409,344 samples, 0.23%)</title><rect x="80.4600%" y="85" width="0.2274%" height="15" fill="rgb(235,213,38)"/><text x="80.7100%" y="95.50"></text></g><g><title>eval_to_const_value_raw (405,544 samples, 0.23%)</title><rect x="80.4621%" y="69" width="0.2253%" height="15" fill="rgb(237,122,38)"/><text x="80.7121%" y="79.50"></text></g><g><title>eval_to_allocation_raw (398,494 samples, 0.22%)</title><rect x="80.4660%" y="53" width="0.2213%" height="15" fill="rgb(244,218,35)"/><text x="80.7160%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (430,174 samples, 0.24%)</title><rect x="80.4516%" y="101" width="0.2389%" height="15" fill="rgb(240,68,47)"/><text x="80.7016%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,012,832 samples, 1.12%)</title><rect x="79.7160%" y="149" width="1.1180%" height="15" fill="rgb(210,16,53)"/><text x="79.9660%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,996,932 samples, 1.11%)</title><rect x="79.7248%" y="133" width="1.1092%" height="15" fill="rgb(235,124,12)"/><text x="79.9748%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,993,622 samples, 1.11%)</title><rect x="79.7266%" y="117" width="1.1073%" height="15" fill="rgb(224,169,11)"/><text x="79.9766%" y="127.50"></text></g><g><title>typeck (258,263 samples, 0.14%)</title><rect x="80.6905%" y="101" width="0.1434%" height="15" fill="rgb(250,166,2)"/><text x="80.9405%" y="111.50"></text></g><g><title>param_env (1,031,728 samples, 0.57%)</title><rect x="80.9328%" y="149" width="0.5731%" height="15" fill="rgb(242,216,29)"/><text x="81.1828%" y="159.50"></text></g><g><title>region_scope_tree (1,365,573 samples, 0.76%)</title><rect x="81.5059%" y="149" width="0.7585%" height="15" fill="rgb(230,116,27)"/><text x="81.7559%" y="159.50"></text></g><g><title>analysis (147,208,676 samples, 81.76%)</title><rect x="0.5220%" y="213" width="81.7647%" height="15" fill="rgb(228,99,48)"/><text x="0.7720%" y="223.50">analysis</text></g><g><title>type_check_crate (110,669,610 samples, 61.47%)</title><rect x="20.8171%" y="197" width="61.4697%" height="15" fill="rgb(253,11,6)"/><text x="21.0671%" y="207.50">type_check_crate</text></g><g><title>wf_checking (6,904,847 samples, 3.84%)</title><rect x="78.4516%" y="181" width="3.8352%" height="15" fill="rgb(247,143,39)"/><text x="78.7016%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (6,648,625 samples, 3.69%)</title><rect x="78.5939%" y="165" width="3.6929%" height="15" fill="rgb(236,97,10)"/><text x="78.8439%" y="175.50">chec..</text></g><g><title>codegen_crate (293,663 samples, 0.16%)</title><rect x="82.2933%" y="213" width="0.1631%" height="15" fill="rgb(233,208,19)"/><text x="82.5433%" y="223.50"></text></g><g><title>AST_validation (258,633 samples, 0.14%)</title><rect x="82.5804%" y="197" width="0.1437%" height="15" fill="rgb(216,164,2)"/><text x="82.8304%" y="207.50"></text></g><g><title>macro_expand_crate (14,019,086 samples, 7.79%)</title><rect x="82.8719%" y="197" width="7.7867%" height="15" fill="rgb(220,129,5)"/><text x="83.1219%" y="207.50">macro_expan..</text></g><g><title>expand_crate (13,994,696 samples, 7.77%)</title><rect x="82.8855%" y="181" width="7.7731%" height="15" fill="rgb(242,17,10)"/><text x="83.1355%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (202,832 samples, 0.11%)</title><rect x="90.5460%" y="165" width="0.1127%" height="15" fill="rgb(242,107,0)"/><text x="90.7960%" y="175.50"></text></g><g><title>finalize_macro_resolutions (323,593 samples, 0.18%)</title><rect x="90.7782%" y="181" width="0.1797%" height="15" fill="rgb(251,28,31)"/><text x="91.0282%" y="191.50"></text></g><g><title>late_resolve_crate (3,270,826 samples, 1.82%)</title><rect x="90.9580%" y="181" width="1.8167%" height="15" fill="rgb(233,223,10)"/><text x="91.2080%" y="191.50">l..</text></g><g><title>configure_and_expand (18,873,849 samples, 10.48%)</title><rect x="82.4564%" y="213" width="10.4832%" height="15" fill="rgb(215,21,27)"/><text x="82.7064%" y="223.50">configure_and_e..</text></g><g><title>resolve_crate (3,930,704 samples, 2.18%)</title><rect x="90.7564%" y="197" width="2.1832%" height="15" fill="rgb(232,23,21)"/><text x="91.0064%" y="207.50">r..</text></g><g><title>drop_ast (379,794 samples, 0.21%)</title><rect x="92.9396%" y="213" width="0.2110%" height="15" fill="rgb(244,5,23)"/><text x="93.1896%" y="223.50"></text></g><g><title>early_lint_checks (1,076,952 samples, 0.60%)</title><rect x="93.1591%" y="213" width="0.5982%" height="15" fill="rgb(226,81,46)"/><text x="93.4091%" y="223.50"></text></g><g><title>free_global_ctxt (2,347,226 samples, 1.30%)</title><rect x="93.7573%" y="213" width="1.3037%" height="15" fill="rgb(247,70,30)"/><text x="94.0073%" y="223.50"></text></g><g><title>generate_crate_metadata (887,150 samples, 0.49%)</title><rect x="95.0610%" y="213" width="0.4928%" height="15" fill="rgb(212,68,19)"/><text x="95.3110%" y="223.50"></text></g><g><title>hir_lowering (5,285,649 samples, 2.94%)</title><rect x="95.5538%" y="213" width="2.9358%" height="15" fill="rgb(240,187,13)"/><text x="95.8038%" y="223.50">hi..</text></g><g><title>parse_crate (1,371,985 samples, 0.76%)</title><rect x="98.5152%" y="213" width="0.7620%" height="15" fill="rgb(223,113,26)"/><text x="98.7652%" y="223.50"></text></g><g><title>prepare_outputs (314,044 samples, 0.17%)</title><rect x="99.2824%" y="213" width="0.1744%" height="15" fill="rgb(206,192,2)"/><text x="99.5324%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (559,916 samples, 0.31%)</title><rect x="99.4568%" y="213" width="0.3110%" height="15" fill="rgb(241,108,4)"/><text x="99.7068%" y="223.50"></text></g><g><title>all (180,039,350 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (180,039,350 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (268,943 samples, 0.15%)</title><rect x="99.8506%" y="213" width="0.1494%" height="15" fill="rgb(245,159,27)"/><text x="100.1006%" y="223.50"></text></g></svg></svg>