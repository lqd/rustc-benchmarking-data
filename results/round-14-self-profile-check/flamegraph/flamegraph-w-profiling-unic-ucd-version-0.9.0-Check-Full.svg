<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (66,210 samples, 0.32%)</title><rect x="7.7438%" y="181" width="0.3177%" height="15" fill="rgb(227,0,7)"/><text x="7.9938%" y="191.50"></text></g><g><title>has_structural_eq_impls (221,493 samples, 1.06%)</title><rect x="9.2404%" y="149" width="1.0627%" height="15" fill="rgb(217,0,24)"/><text x="9.4904%" y="159.50"></text></g><g><title>evaluate_obligation (200,483 samples, 0.96%)</title><rect x="9.3412%" y="133" width="0.9619%" height="15" fill="rgb(221,193,54)"/><text x="9.5912%" y="143.50"></text></g><g><title>trait_impls_of (108,640 samples, 0.52%)</title><rect x="9.7819%" y="117" width="0.5213%" height="15" fill="rgb(248,212,6)"/><text x="10.0319%" y="127.50"></text></g><g><title>is_freeze_raw (63,780 samples, 0.31%)</title><rect x="10.3031%" y="149" width="0.3060%" height="15" fill="rgb(208,68,35)"/><text x="10.5531%" y="159.50"></text></g><g><title>evaluate_obligation (59,280 samples, 0.28%)</title><rect x="10.3247%" y="133" width="0.2844%" height="15" fill="rgb(232,128,0)"/><text x="10.5747%" y="143.50"></text></g><g><title>thir_body (110,552 samples, 0.53%)</title><rect x="12.0696%" y="101" width="0.5304%" height="15" fill="rgb(207,160,47)"/><text x="12.3196%" y="111.50"></text></g><g><title>lit_to_const (47,522 samples, 0.23%)</title><rect x="12.3720%" y="85" width="0.2280%" height="15" fill="rgb(228,23,34)"/><text x="12.6220%" y="95.50"></text></g><g><title>mir_const (424,605 samples, 2.04%)</title><rect x="10.6092%" y="149" width="2.0373%" height="15" fill="rgb(218,30,26)"/><text x="10.8592%" y="159.50">m..</text></g><g><title>unsafety_check_result (316,954 samples, 1.52%)</title><rect x="11.1257%" y="133" width="1.5208%" height="15" fill="rgb(220,122,19)"/><text x="11.3757%" y="143.50"></text></g><g><title>mir_built (252,123 samples, 1.21%)</title><rect x="11.4367%" y="117" width="1.2097%" height="15" fill="rgb(250,228,42)"/><text x="11.6867%" y="127.50"></text></g><g><title>needs_drop_raw (128,841 samples, 0.62%)</title><rect x="12.6464%" y="149" width="0.6182%" height="15" fill="rgb(240,193,28)"/><text x="12.8964%" y="159.50"></text></g><g><title>is_copy_raw (122,591 samples, 0.59%)</title><rect x="12.6764%" y="133" width="0.5882%" height="15" fill="rgb(216,20,37)"/><text x="12.9264%" y="143.50"></text></g><g><title>evaluate_obligation (114,451 samples, 0.55%)</title><rect x="12.7155%" y="117" width="0.5491%" height="15" fill="rgb(206,188,39)"/><text x="12.9655%" y="127.50"></text></g><g><title>trait_impls_of (84,521 samples, 0.41%)</title><rect x="12.8591%" y="101" width="0.4055%" height="15" fill="rgb(217,207,13)"/><text x="13.1091%" y="111.50"></text></g><g><title>MIR_borrow_checking (1,984,492 samples, 9.52%)</title><rect x="3.7500%" y="213" width="9.5218%" height="15" fill="rgb(231,73,38)"/><text x="4.0000%" y="223.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (1,968,372 samples, 9.44%)</title><rect x="3.8274%" y="197" width="9.4444%" height="15" fill="rgb(225,20,46)"/><text x="4.0774%" y="207.50">mir_borrowck</text></g><g><title>mir_promoted (1,070,612 samples, 5.14%)</title><rect x="8.1349%" y="181" width="5.1369%" height="15" fill="rgb(210,31,41)"/><text x="8.3849%" y="191.50">mir_pr..</text></g><g><title>mir_const_qualif (981,880 samples, 4.71%)</title><rect x="8.5606%" y="165" width="4.7111%" height="15" fill="rgb(221,200,47)"/><text x="8.8106%" y="175.50">mir_c..</text></g><g><title>MIR_effect_checking (306,243 samples, 1.47%)</title><rect x="13.2718%" y="213" width="1.4694%" height="15" fill="rgb(226,26,5)"/><text x="13.5218%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (272,033 samples, 1.31%)</title><rect x="13.4359%" y="197" width="1.3052%" height="15" fill="rgb(249,33,26)"/><text x="13.6859%" y="207.50"></text></g><g><title>hir_owner (33,810 samples, 0.16%)</title><rect x="15.1364%" y="197" width="0.1622%" height="15" fill="rgb(235,183,28)"/><text x="15.3864%" y="207.50"></text></g><g><title>hir_module_items (116,961 samples, 0.56%)</title><rect x="14.7412%" y="213" width="0.5612%" height="15" fill="rgb(221,5,38)"/><text x="14.9912%" y="223.50"></text></g><g><title>check_mod_attrs (55,610 samples, 0.27%)</title><rect x="15.4889%" y="197" width="0.2668%" height="15" fill="rgb(247,18,42)"/><text x="15.7389%" y="207.50"></text></g><g><title>lookup_deprecation_entry (54,100 samples, 0.26%)</title><rect x="16.1169%" y="181" width="0.2596%" height="15" fill="rgb(241,131,45)"/><text x="16.3669%" y="191.50"></text></g><g><title>stability_index (32,110 samples, 0.15%)</title><rect x="16.2224%" y="165" width="0.1541%" height="15" fill="rgb(249,31,29)"/><text x="16.4724%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (96,981 samples, 0.47%)</title><rect x="15.9228%" y="197" width="0.4653%" height="15" fill="rgb(225,111,53)"/><text x="16.1728%" y="207.50"></text></g><g><title>looking_for_derive_registrar (45,710 samples, 0.22%)</title><rect x="16.3960%" y="197" width="0.2193%" height="15" fill="rgb(238,160,17)"/><text x="16.6460%" y="207.50"></text></g><g><title>proc_macro_decls_static (22,040 samples, 0.11%)</title><rect x="16.5096%" y="181" width="0.1057%" height="15" fill="rgb(214,148,48)"/><text x="16.7596%" y="191.50"></text></g><g><title>misc_checking_1 (277,973 samples, 1.33%)</title><rect x="15.3049%" y="213" width="1.3337%" height="15" fill="rgb(232,36,49)"/><text x="15.5549%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (49,680 samples, 0.24%)</title><rect x="16.6489%" y="197" width="0.2384%" height="15" fill="rgb(209,103,24)"/><text x="16.8989%" y="207.50"></text></g><g><title>check_mod_liveness (33,470 samples, 0.16%)</title><rect x="16.7266%" y="181" width="0.1606%" height="15" fill="rgb(229,88,8)"/><text x="16.9766%" y="191.50"></text></g><g><title>misc_checking_2 (83,951 samples, 0.40%)</title><rect x="16.6386%" y="213" width="0.4028%" height="15" fill="rgb(213,181,19)"/><text x="16.8886%" y="223.50"></text></g><g><title>match_checking (32,141 samples, 0.15%)</title><rect x="16.8872%" y="197" width="0.1542%" height="15" fill="rgb(254,191,54)"/><text x="17.1372%" y="207.50"></text></g><g><title>check_match (26,401 samples, 0.13%)</title><rect x="16.9148%" y="181" width="0.1267%" height="15" fill="rgb(241,83,37)"/><text x="17.1648%" y="191.50"></text></g><g><title>check_private_in_public (38,660 samples, 0.19%)</title><rect x="17.0981%" y="197" width="0.1855%" height="15" fill="rgb(233,36,39)"/><text x="17.3481%" y="207.50"></text></g><g><title>codegen_fn_attrs (83,330 samples, 0.40%)</title><rect x="17.6533%" y="181" width="0.3998%" height="15" fill="rgb(226,3,54)"/><text x="17.9033%" y="191.50"></text></g><g><title>supported_target_features (34,290 samples, 0.16%)</title><rect x="17.8886%" y="165" width="0.1645%" height="15" fill="rgb(245,192,40)"/><text x="18.1386%" y="175.50"></text></g><g><title>death_checking (208,032 samples, 1.00%)</title><rect x="17.2836%" y="197" width="0.9982%" height="15" fill="rgb(238,167,29)"/><text x="17.5336%" y="207.50"></text></g><g><title>lint_levels (42,211 samples, 0.20%)</title><rect x="18.0792%" y="181" width="0.2025%" height="15" fill="rgb(232,182,51)"/><text x="18.3292%" y="191.50"></text></g><g><title>is_sized_raw (31,490 samples, 0.15%)</title><rect x="20.1568%" y="101" width="0.1511%" height="15" fill="rgb(231,60,39)"/><text x="20.4068%" y="111.50"></text></g><g><title>evaluate_obligation (22,530 samples, 0.11%)</title><rect x="20.1998%" y="85" width="0.1081%" height="15" fill="rgb(208,69,12)"/><text x="20.4498%" y="95.50"></text></g><g><title>layout_of (71,740 samples, 0.34%)</title><rect x="19.9971%" y="117" width="0.3442%" height="15" fill="rgb(235,93,37)"/><text x="20.2471%" y="127.50"></text></g><g><title>eval_to_const_value_raw (419,545 samples, 2.01%)</title><rect x="18.7659%" y="165" width="2.0130%" height="15" fill="rgb(213,116,39)"/><text x="19.0159%" y="175.50">e..</text></g><g><title>eval_to_const_value_raw (410,675 samples, 1.97%)</title><rect x="18.8085%" y="149" width="1.9705%" height="15" fill="rgb(222,207,29)"/><text x="19.0585%" y="159.50">e..</text></g><g><title>eval_to_allocation_raw (392,465 samples, 1.88%)</title><rect x="18.8959%" y="133" width="1.8831%" height="15" fill="rgb(206,96,30)"/><text x="19.1459%" y="143.50">e..</text></g><g><title>mir_for_ctfe (91,211 samples, 0.44%)</title><rect x="20.3413%" y="117" width="0.4376%" height="15" fill="rgb(218,138,4)"/><text x="20.5913%" y="127.50"></text></g><g><title>explicit_predicates_of (50,781 samples, 0.24%)</title><rect x="21.4846%" y="117" width="0.2437%" height="15" fill="rgb(250,191,14)"/><text x="21.7346%" y="127.50"></text></g><g><title>generics_of (31,660 samples, 0.15%)</title><rect x="21.5764%" y="101" width="0.1519%" height="15" fill="rgb(239,60,40)"/><text x="21.8264%" y="111.50"></text></g><g><title>crate_lints (718,458 samples, 3.45%)</title><rect x="18.2966%" y="181" width="3.4472%" height="15" fill="rgb(206,27,48)"/><text x="18.5466%" y="191.50">cra..</text></g><g><title>param_env (201,102 samples, 0.96%)</title><rect x="20.7789%" y="165" width="0.9649%" height="15" fill="rgb(225,35,8)"/><text x="21.0289%" y="175.50"></text></g><g><title>predicates_of (96,141 samples, 0.46%)</title><rect x="21.2826%" y="149" width="0.4613%" height="15" fill="rgb(250,213,24)"/><text x="21.5326%" y="159.50"></text></g><g><title>predicates_defined_on (74,521 samples, 0.36%)</title><rect x="21.3863%" y="133" width="0.3576%" height="15" fill="rgb(247,123,22)"/><text x="21.6363%" y="143.50"></text></g><g><title>lint_checking (759,408 samples, 3.64%)</title><rect x="18.2818%" y="197" width="3.6437%" height="15" fill="rgb(231,138,38)"/><text x="18.5318%" y="207.50">lint..</text></g><g><title>module_lints (37,850 samples, 0.18%)</title><rect x="21.7439%" y="181" width="0.1816%" height="15" fill="rgb(231,145,46)"/><text x="21.9939%" y="191.50"></text></g><g><title>lint_mod (32,750 samples, 0.16%)</title><rect x="21.7683%" y="165" width="0.1571%" height="15" fill="rgb(251,118,11)"/><text x="22.0183%" y="175.50"></text></g><g><title>privacy_access_levels (42,670 samples, 0.20%)</title><rect x="21.9255%" y="197" width="0.2047%" height="15" fill="rgb(217,147,25)"/><text x="22.1755%" y="207.50"></text></g><g><title>privacy_checking_modules (38,601 samples, 0.19%)</title><rect x="22.1302%" y="197" width="0.1852%" height="15" fill="rgb(247,81,37)"/><text x="22.3802%" y="207.50"></text></g><g><title>check_mod_privacy (35,271 samples, 0.17%)</title><rect x="22.1462%" y="181" width="0.1692%" height="15" fill="rgb(209,12,38)"/><text x="22.3962%" y="191.50"></text></g><g><title>misc_checking_3 (1,113,532 samples, 5.34%)</title><rect x="17.0414%" y="213" width="5.3428%" height="15" fill="rgb(227,1,9)"/><text x="17.2914%" y="223.50">misc_ch..</text></g><g><title>coherence_checking (33,450 samples, 0.16%)</title><rect x="22.5599%" y="197" width="0.1605%" height="15" fill="rgb(248,47,43)"/><text x="22.8099%" y="207.50"></text></g><g><title>impl_trait_ref (68,411 samples, 0.33%)</title><rect x="26.2619%" y="53" width="0.3282%" height="15" fill="rgb(221,10,30)"/><text x="26.5119%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (64,291 samples, 0.31%)</title><rect x="26.2816%" y="37" width="0.3085%" height="15" fill="rgb(210,229,1)"/><text x="26.5316%" y="47.50"></text></g><g><title>adt_destructor (152,742 samples, 0.73%)</title><rect x="25.9274%" y="117" width="0.7329%" height="15" fill="rgb(222,148,37)"/><text x="26.1774%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (151,552 samples, 0.73%)</title><rect x="25.9331%" y="101" width="0.7272%" height="15" fill="rgb(234,67,33)"/><text x="26.1831%" y="111.50"></text></g><g><title>coherent_trait (140,202 samples, 0.67%)</title><rect x="25.9876%" y="85" width="0.6727%" height="15" fill="rgb(247,98,35)"/><text x="26.2376%" y="95.50"></text></g><g><title>specialization_graph_of (133,472 samples, 0.64%)</title><rect x="26.0199%" y="69" width="0.6404%" height="15" fill="rgb(247,138,52)"/><text x="26.2699%" y="79.50"></text></g><g><title>dropck_outlives (232,733 samples, 1.12%)</title><rect x="25.5550%" y="149" width="1.1167%" height="15" fill="rgb(213,79,30)"/><text x="25.8050%" y="159.50"></text></g><g><title>adt_dtorck_constraint (170,132 samples, 0.82%)</title><rect x="25.8553%" y="133" width="0.8163%" height="15" fill="rgb(246,177,23)"/><text x="26.1053%" y="143.50"></text></g><g><title>impl_trait_ref (52,610 samples, 0.25%)</title><rect x="26.7714%" y="149" width="0.2524%" height="15" fill="rgb(230,62,27)"/><text x="27.0214%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (50,570 samples, 0.24%)</title><rect x="26.7812%" y="133" width="0.2426%" height="15" fill="rgb(216,154,8)"/><text x="27.0312%" y="143.50"></text></g><g><title>predicates_of (31,300 samples, 0.15%)</title><rect x="27.0950%" y="149" width="0.1502%" height="15" fill="rgb(244,35,45)"/><text x="27.3450%" y="159.50"></text></g><g><title>predicates_defined_on (26,840 samples, 0.13%)</title><rect x="27.1164%" y="133" width="0.1288%" height="15" fill="rgb(251,115,12)"/><text x="27.3664%" y="143.50"></text></g><g><title>trait_impls_of (31,811 samples, 0.15%)</title><rect x="27.2853%" y="149" width="0.1526%" height="15" fill="rgb(240,54,50)"/><text x="27.5353%" y="159.50"></text></g><g><title>item_types_checking (985,701 samples, 4.73%)</title><rect x="22.7749%" y="197" width="4.7295%" height="15" fill="rgb(233,84,52)"/><text x="23.0249%" y="207.50">item_t..</text></g><g><title>check_mod_item_types (979,881 samples, 4.70%)</title><rect x="22.8028%" y="181" width="4.7015%" height="15" fill="rgb(207,117,47)"/><text x="23.0528%" y="191.50">check..</text></g><g><title>typeck (966,351 samples, 4.64%)</title><rect x="22.8677%" y="165" width="4.6366%" height="15" fill="rgb(249,43,39)"/><text x="23.1177%" y="175.50">typeck</text></g><g><title>generics_of (26,580 samples, 0.13%)</title><rect x="28.0100%" y="165" width="0.1275%" height="15" fill="rgb(209,38,44)"/><text x="28.2600%" y="175.50"></text></g><g><title>explicit_predicates_of (28,010 samples, 0.13%)</title><rect x="28.2631%" y="133" width="0.1344%" height="15" fill="rgb(236,212,23)"/><text x="28.5131%" y="143.50"></text></g><g><title>predicates_of (62,181 samples, 0.30%)</title><rect x="28.1376%" y="165" width="0.2983%" height="15" fill="rgb(242,79,21)"/><text x="28.3876%" y="175.50"></text></g><g><title>predicates_defined_on (56,141 samples, 0.27%)</title><rect x="28.1665%" y="149" width="0.2694%" height="15" fill="rgb(211,96,35)"/><text x="28.4165%" y="159.50"></text></g><g><title>named_region_map (52,261 samples, 0.25%)</title><rect x="28.7138%" y="149" width="0.2508%" height="15" fill="rgb(253,215,40)"/><text x="28.9638%" y="159.50"></text></g><g><title>resolve_lifetimes (38,930 samples, 0.19%)</title><rect x="28.7777%" y="133" width="0.1868%" height="15" fill="rgb(211,81,21)"/><text x="29.0277%" y="143.50"></text></g><g><title>type_collecting (313,494 samples, 1.50%)</title><rect x="27.5117%" y="197" width="1.5042%" height="15" fill="rgb(208,190,38)"/><text x="27.7617%" y="207.50"></text></g><g><title>collect_mod_item_types (281,884 samples, 1.35%)</title><rect x="27.6634%" y="181" width="1.3525%" height="15" fill="rgb(235,213,38)"/><text x="27.9134%" y="191.50"></text></g><g><title>type_of (120,872 samples, 0.58%)</title><rect x="28.4359%" y="165" width="0.5800%" height="15" fill="rgb(237,122,38)"/><text x="28.6859%" y="175.50"></text></g><g><title>adt_def (26,310 samples, 0.13%)</title><rect x="31.6050%" y="133" width="0.1262%" height="15" fill="rgb(244,218,35)"/><text x="31.8550%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (24,690 samples, 0.12%)</title><rect x="31.6128%" y="117" width="0.1185%" height="15" fill="rgb(240,68,47)"/><text x="31.8628%" y="127.50"></text></g><g><title>adt_sized_constraint (35,761 samples, 0.17%)</title><rect x="31.5721%" y="149" width="0.1716%" height="15" fill="rgb(210,16,53)"/><text x="31.8221%" y="159.50"></text></g><g><title>evaluate_obligation (143,562 samples, 0.69%)</title><rect x="31.0679%" y="165" width="0.6888%" height="15" fill="rgb(235,124,12)"/><text x="31.3179%" y="175.50"></text></g><g><title>get_lang_items (42,981 samples, 0.21%)</title><rect x="31.7567%" y="165" width="0.2062%" height="15" fill="rgb(224,169,11)"/><text x="32.0067%" y="175.50"></text></g><g><title>param_env (226,822 samples, 1.09%)</title><rect x="31.9629%" y="165" width="1.0883%" height="15" fill="rgb(250,166,2)"/><text x="32.2129%" y="175.50"></text></g><g><title>region_scope_tree (23,390 samples, 0.11%)</title><rect x="33.1032%" y="165" width="0.1122%" height="15" fill="rgb(242,216,29)"/><text x="33.3532%" y="175.50"></text></g><g><title>analysis (6,272,660 samples, 30.10%)</title><rect x="3.1264%" y="229" width="30.0967%" height="15" fill="rgb(230,116,27)"/><text x="3.3764%" y="239.50">analysis</text></g><g><title>type_check_crate (2,259,005 samples, 10.84%)</title><rect x="22.3843%" y="213" width="10.8389%" height="15" fill="rgb(228,99,48)"/><text x="22.6343%" y="223.50">type_check_crate</text></g><g><title>wf_checking (875,860 samples, 4.20%)</title><rect x="29.0207%" y="197" width="4.2024%" height="15" fill="rgb(253,11,6)"/><text x="29.2707%" y="207.50">wf_ch..</text></g><g><title>check_item_well_formed (839,860 samples, 4.03%)</title><rect x="29.1934%" y="181" width="4.0297%" height="15" fill="rgb(247,143,39)"/><text x="29.4434%" y="191.50">chec..</text></g><g><title>codegen_crate (458,435 samples, 2.20%)</title><rect x="33.2697%" y="229" width="2.1996%" height="15" fill="rgb(236,97,10)"/><text x="33.5197%" y="239.50">c..</text></g><g><title>AST_validation (64,581 samples, 0.31%)</title><rect x="36.4892%" y="213" width="0.3099%" height="15" fill="rgb(233,208,19)"/><text x="36.7392%" y="223.50"></text></g><g><title>crate_injection (89,851 samples, 0.43%)</title><rect x="36.8799%" y="213" width="0.4311%" height="15" fill="rgb(216,164,2)"/><text x="37.1299%" y="223.50"></text></g><g><title>metadata_load_macro (99,371 samples, 0.48%)</title><rect x="74.7855%" y="181" width="0.4768%" height="15" fill="rgb(220,129,5)"/><text x="75.0355%" y="191.50"></text></g><g><title>metadata_register_crate (213,092 samples, 1.02%)</title><rect x="75.2623%" y="181" width="1.0224%" height="15" fill="rgb(242,17,10)"/><text x="75.5123%" y="191.50"></text></g><g><title>macro_expand_crate (8,154,110 samples, 39.12%)</title><rect x="37.3111%" y="213" width="39.1241%" height="15" fill="rgb(242,107,0)"/><text x="37.5611%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (8,138,770 samples, 39.05%)</title><rect x="37.3847%" y="197" width="39.0505%" height="15" fill="rgb(251,28,31)"/><text x="37.6347%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (31,351 samples, 0.15%)</title><rect x="76.2847%" y="181" width="0.1504%" height="15" fill="rgb(233,223,10)"/><text x="76.5347%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (129,932 samples, 0.62%)</title><rect x="76.4555%" y="213" width="0.6234%" height="15" fill="rgb(215,21,27)"/><text x="76.7055%" y="223.50"></text></g><g><title>finalize_imports (335,384 samples, 1.61%)</title><rect x="77.1162%" y="197" width="1.6092%" height="15" fill="rgb(232,23,21)"/><text x="77.3662%" y="207.50"></text></g><g><title>late_resolve_crate (45,391 samples, 0.22%)</title><rect x="78.7995%" y="197" width="0.2178%" height="15" fill="rgb(244,5,23)"/><text x="79.0495%" y="207.50"></text></g><g><title>configure_and_expand (9,118,201 samples, 43.75%)</title><rect x="35.4693%" y="229" width="43.7499%" height="15" fill="rgb(226,81,46)"/><text x="35.7193%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (446,065 samples, 2.14%)</title><rect x="77.0789%" y="213" width="2.1403%" height="15" fill="rgb(247,70,30)"/><text x="77.3289%" y="223.50">r..</text></g><g><title>drop_ast (29,521 samples, 0.14%)</title><rect x="79.2192%" y="229" width="0.1416%" height="15" fill="rgb(212,68,19)"/><text x="79.4692%" y="239.50"></text></g><g><title>drop_compiler (32,970 samples, 0.16%)</title><rect x="79.3608%" y="229" width="0.1582%" height="15" fill="rgb(240,187,13)"/><text x="79.6108%" y="239.50"></text></g><g><title>early_lint_checks (79,271 samples, 0.38%)</title><rect x="79.5190%" y="229" width="0.3803%" height="15" fill="rgb(223,113,26)"/><text x="79.7690%" y="239.50"></text></g><g><title>free_global_ctxt (1,262,254 samples, 6.06%)</title><rect x="79.8994%" y="229" width="6.0564%" height="15" fill="rgb(206,192,2)"/><text x="80.1494%" y="239.50">free_glo..</text></g><g><title>crate_hash (154,631 samples, 0.74%)</title><rect x="87.8732%" y="213" width="0.7419%" height="15" fill="rgb(241,108,4)"/><text x="88.1232%" y="223.50"></text></g><g><title>generate_crate_metadata (618,347 samples, 2.97%)</title><rect x="85.9558%" y="229" width="2.9669%" height="15" fill="rgb(247,173,49)"/><text x="86.2058%" y="239.50">gen..</text></g><g><title>hir_lowering (363,484 samples, 1.74%)</title><rect x="88.9226%" y="229" width="1.7440%" height="15" fill="rgb(224,114,35)"/><text x="89.1726%" y="239.50"></text></g><g><title>link (57,271 samples, 0.27%)</title><rect x="90.6667%" y="229" width="0.2748%" height="15" fill="rgb(245,159,27)"/><text x="90.9167%" y="239.50"></text></g><g><title>parse_crate (347,614 samples, 1.67%)</title><rect x="90.9415%" y="229" width="1.6679%" height="15" fill="rgb(245,172,44)"/><text x="91.1915%" y="239.50"></text></g><g><title>prepare_outputs (325,304 samples, 1.56%)</title><rect x="92.6547%" y="229" width="1.5608%" height="15" fill="rgb(236,23,11)"/><text x="92.9047%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (548,486 samples, 2.63%)</title><rect x="94.2155%" y="229" width="2.6317%" height="15" fill="rgb(205,117,38)"/><text x="94.4655%" y="239.50">se..</text></g><g><title>setup_global_ctxt (162,312 samples, 0.78%)</title><rect x="96.9260%" y="229" width="0.7788%" height="15" fill="rgb(237,72,25)"/><text x="97.1760%" y="239.50"></text></g><g><title>all (20,841,661 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (20,841,661 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (478,365 samples, 2.30%)</title><rect x="97.7048%" y="229" width="2.2952%" height="15" fill="rgb(235,36,10)"/><text x="97.9548%" y="239.50">w..</text></g></svg></svg>