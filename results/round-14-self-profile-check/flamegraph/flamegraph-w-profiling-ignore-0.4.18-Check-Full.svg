<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (739,730 samples, 0.14%)</title><rect x="16.4554%" y="261" width="0.1360%" height="15" fill="rgb(227,0,7)"/><text x="16.7054%" y="271.50"></text></g><g><title>param_env (1,469,082 samples, 0.27%)</title><rect x="18.6713%" y="229" width="0.2700%" height="15" fill="rgb(217,0,24)"/><text x="18.9213%" y="239.50"></text></g><g><title>item_attrs (1,387,429 samples, 0.26%)</title><rect x="19.5833%" y="197" width="0.2550%" height="15" fill="rgb(221,193,54)"/><text x="19.8333%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,334,849 samples, 0.25%)</title><rect x="19.5929%" y="181" width="0.2454%" height="15" fill="rgb(248,212,6)"/><text x="19.8429%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,927,048 samples, 0.35%)</title><rect x="19.5062%" y="213" width="0.3542%" height="15" fill="rgb(208,68,35)"/><text x="19.7562%" y="223.50"></text></g><g><title>adt_drop_tys (1,513,508 samples, 0.28%)</title><rect x="23.2689%" y="181" width="0.2782%" height="15" fill="rgb(232,128,0)"/><text x="23.5189%" y="191.50"></text></g><g><title>is_copy_raw (3,931,680 samples, 0.72%)</title><rect x="23.5471%" y="181" width="0.7227%" height="15" fill="rgb(207,160,47)"/><text x="23.7971%" y="191.50"></text></g><g><title>evaluate_obligation (3,134,459 samples, 0.58%)</title><rect x="23.6936%" y="165" width="0.5762%" height="15" fill="rgb(228,23,34)"/><text x="23.9436%" y="175.50"></text></g><g><title>needs_drop_raw (6,139,625 samples, 1.13%)</title><rect x="23.1453%" y="197" width="1.1285%" height="15" fill="rgb(218,30,26)"/><text x="23.3953%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (1,802,025 samples, 0.33%)</title><rect x="24.4826%" y="181" width="0.3312%" height="15" fill="rgb(220,122,19)"/><text x="24.7326%" y="191.50"></text></g><g><title>specialization_graph_of (988,339 samples, 0.18%)</title><rect x="24.8879%" y="181" width="0.1817%" height="15" fill="rgb(250,228,42)"/><text x="25.1379%" y="191.50"></text></g><g><title>resolve_instance (4,692,466 samples, 0.86%)</title><rect x="24.2738%" y="197" width="0.8625%" height="15" fill="rgb(240,193,28)"/><text x="24.5238%" y="207.50"></text></g><g><title>thir_body (8,796,329 samples, 1.62%)</title><rect x="25.1696%" y="197" width="1.6169%" height="15" fill="rgb(216,20,37)"/><text x="25.4196%" y="207.50"></text></g><g><title>mir_const (49,346,411 samples, 9.07%)</title><rect x="17.7395%" y="245" width="9.0705%" height="15" fill="rgb(206,188,39)"/><text x="17.9895%" y="255.50">mir_const</text></g><g><title>unsafety_check_result (42,808,435 samples, 7.87%)</title><rect x="18.9413%" y="229" width="7.8688%" height="15" fill="rgb(217,207,13)"/><text x="19.1913%" y="239.50">unsafety_ch..</text></g><g><title>mir_built (37,808,266 samples, 6.95%)</title><rect x="19.8604%" y="213" width="6.9497%" height="15" fill="rgb(231,73,38)"/><text x="20.1104%" y="223.50">mir_built</text></g><g><title>thir_body (930,421 samples, 0.17%)</title><rect x="27.1539%" y="181" width="0.1710%" height="15" fill="rgb(225,20,46)"/><text x="27.4039%" y="191.50"></text></g><g><title>mir_const (1,791,311 samples, 0.33%)</title><rect x="26.9959%" y="229" width="0.3293%" height="15" fill="rgb(210,31,41)"/><text x="27.2459%" y="239.50"></text></g><g><title>unsafety_check_result (1,698,930 samples, 0.31%)</title><rect x="27.0128%" y="213" width="0.3123%" height="15" fill="rgb(221,200,47)"/><text x="27.2628%" y="223.50"></text></g><g><title>mir_built (1,645,109 samples, 0.30%)</title><rect x="27.0227%" y="197" width="0.3024%" height="15" fill="rgb(226,26,5)"/><text x="27.2727%" y="207.50"></text></g><g><title>mir_const_qualif (2,880,771 samples, 0.53%)</title><rect x="26.8101%" y="245" width="0.5295%" height="15" fill="rgb(249,33,26)"/><text x="27.0601%" y="255.50"></text></g><g><title>mir_promoted (58,027,004 samples, 10.67%)</title><rect x="16.6737%" y="261" width="10.6661%" height="15" fill="rgb(235,183,28)"/><text x="16.9237%" y="271.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,302,121 samples, 0.42%)</title><rect x="27.3408%" y="261" width="0.4232%" height="15" fill="rgb(221,5,38)"/><text x="27.5908%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (3,710,466 samples, 0.68%)</title><rect x="27.7640%" y="261" width="0.6820%" height="15" fill="rgb(247,18,42)"/><text x="28.0140%" y="271.50"></text></g><g><title>normalize_projection_ty (2,488,893 samples, 0.46%)</title><rect x="27.9886%" y="245" width="0.4575%" height="15" fill="rgb(241,131,45)"/><text x="28.2386%" y="255.50"></text></g><g><title>type_op_normalize_predicate (762,622 samples, 0.14%)</title><rect x="28.4460%" y="261" width="0.1402%" height="15" fill="rgb(249,31,29)"/><text x="28.6960%" y="271.50"></text></g><g><title>type_op_prove_predicate (14,769,114 samples, 2.71%)</title><rect x="28.5862%" y="261" width="2.7148%" height="15" fill="rgb(225,111,53)"/><text x="28.8362%" y="271.50">ty..</text></g><g><title>evaluate_obligation (658,339 samples, 0.12%)</title><rect x="31.1800%" y="245" width="0.1210%" height="15" fill="rgb(238,160,17)"/><text x="31.4300%" y="255.50"></text></g><g><title>MIR_borrow_checking (167,841,088 samples, 30.85%)</title><rect x="0.4574%" y="293" width="30.8514%" height="15" fill="rgb(214,148,48)"/><text x="0.7074%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (167,146,692 samples, 30.72%)</title><rect x="0.5850%" y="277" width="30.7238%" height="15" fill="rgb(232,36,49)"/><text x="0.8350%" y="287.50">mir_borrowck</text></g><g><title>hir_module_items (847,981 samples, 0.16%)</title><rect x="31.3910%" y="293" width="0.1559%" height="15" fill="rgb(209,103,24)"/><text x="31.6410%" y="303.50"></text></g><g><title>codegen_fn_attrs (1,012,301 samples, 0.19%)</title><rect x="31.7461%" y="261" width="0.1861%" height="15" fill="rgb(229,88,8)"/><text x="31.9961%" y="271.50"></text></g><g><title>should_inherit_track_caller (821,498 samples, 0.15%)</title><rect x="31.7812%" y="245" width="0.1510%" height="15" fill="rgb(213,181,19)"/><text x="32.0312%" y="255.50"></text></g><g><title>check_mod_attrs (2,062,011 samples, 0.38%)</title><rect x="31.5532%" y="277" width="0.3790%" height="15" fill="rgb(254,191,54)"/><text x="31.8032%" y="287.50"></text></g><g><title>lint_levels (688,068 samples, 0.13%)</title><rect x="32.2044%" y="261" width="0.1265%" height="15" fill="rgb(241,83,37)"/><text x="32.4544%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (1,903,821 samples, 0.35%)</title><rect x="32.0967%" y="277" width="0.3499%" height="15" fill="rgb(233,36,39)"/><text x="32.3467%" y="287.50"></text></g><g><title>misc_checking_1 (5,038,296 samples, 0.93%)</title><rect x="31.5470%" y="293" width="0.9261%" height="15" fill="rgb(226,3,54)"/><text x="31.7970%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (2,775,331 samples, 0.51%)</title><rect x="32.4734%" y="277" width="0.5101%" height="15" fill="rgb(245,192,40)"/><text x="32.7234%" y="287.50"></text></g><g><title>check_mod_liveness (2,275,555 samples, 0.42%)</title><rect x="32.5652%" y="261" width="0.4183%" height="15" fill="rgb(238,167,29)"/><text x="32.8152%" y="271.50"></text></g><g><title>type_uninhabited_from (584,144 samples, 0.11%)</title><rect x="32.8761%" y="245" width="0.1074%" height="15" fill="rgb(232,182,51)"/><text x="33.1261%" y="255.50"></text></g><g><title>misc_checking_2 (6,334,631 samples, 1.16%)</title><rect x="32.4731%" y="293" width="1.1644%" height="15" fill="rgb(231,60,39)"/><text x="32.7231%" y="303.50"></text></g><g><title>match_checking (3,557,550 samples, 0.65%)</title><rect x="32.9835%" y="277" width="0.6539%" height="15" fill="rgb(208,69,12)"/><text x="33.2335%" y="287.50"></text></g><g><title>check_match (3,392,317 samples, 0.62%)</title><rect x="33.0139%" y="261" width="0.6236%" height="15" fill="rgb(235,93,37)"/><text x="33.2639%" y="271.50"></text></g><g><title>check_private_in_public (959,171 samples, 0.18%)</title><rect x="33.6397%" y="277" width="0.1763%" height="15" fill="rgb(213,116,39)"/><text x="33.8897%" y="287.50"></text></g><g><title>death_checking (2,280,995 samples, 0.42%)</title><rect x="33.8160%" y="277" width="0.4193%" height="15" fill="rgb(222,207,29)"/><text x="34.0660%" y="287.50"></text></g><g><title>layout_of (584,526 samples, 0.11%)</title><rect x="34.8305%" y="37" width="0.1074%" height="15" fill="rgb(206,96,30)"/><text x="35.0805%" y="47.50"></text></g><g><title>layout_of (665,918 samples, 0.12%)</title><rect x="34.8224%" y="53" width="0.1224%" height="15" fill="rgb(218,138,4)"/><text x="35.0724%" y="63.50"></text></g><g><title>layout_of (704,239 samples, 0.13%)</title><rect x="34.8163%" y="69" width="0.1294%" height="15" fill="rgb(250,191,14)"/><text x="35.0663%" y="79.50"></text></g><g><title>layout_of (766,449 samples, 0.14%)</title><rect x="34.8082%" y="85" width="0.1409%" height="15" fill="rgb(239,60,40)"/><text x="35.0582%" y="95.50"></text></g><g><title>layout_of (794,029 samples, 0.15%)</title><rect x="34.8040%" y="101" width="0.1460%" height="15" fill="rgb(206,27,48)"/><text x="35.0540%" y="111.50"></text></g><g><title>layout_of (804,219 samples, 0.15%)</title><rect x="34.8031%" y="117" width="0.1478%" height="15" fill="rgb(225,35,8)"/><text x="35.0531%" y="127.50"></text></g><g><title>layout_of (835,089 samples, 0.15%)</title><rect x="34.7978%" y="133" width="0.1535%" height="15" fill="rgb(250,213,24)"/><text x="35.0478%" y="143.50"></text></g><g><title>fn_abi_of_instance (892,750 samples, 0.16%)</title><rect x="34.7901%" y="149" width="0.1641%" height="15" fill="rgb(247,123,22)"/><text x="35.0401%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,329,364 samples, 0.24%)</title><rect x="34.7718%" y="197" width="0.2444%" height="15" fill="rgb(231,138,38)"/><text x="35.0218%" y="207.50"></text></g><g><title>eval_to_const_value_raw (1,326,804 samples, 0.24%)</title><rect x="34.7722%" y="181" width="0.2439%" height="15" fill="rgb(231,145,46)"/><text x="35.0222%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,323,064 samples, 0.24%)</title><rect x="34.7729%" y="165" width="0.2432%" height="15" fill="rgb(251,118,11)"/><text x="35.0229%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,462,356 samples, 0.27%)</title><rect x="34.7476%" y="245" width="0.2688%" height="15" fill="rgb(217,147,25)"/><text x="34.9976%" y="255.50"></text></g><g><title>eval_to_allocation_raw (1,458,306 samples, 0.27%)</title><rect x="34.7483%" y="229" width="0.2681%" height="15" fill="rgb(247,81,37)"/><text x="34.9983%" y="239.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,341,174 samples, 0.25%)</title><rect x="34.7699%" y="213" width="0.2465%" height="15" fill="rgb(209,12,38)"/><text x="35.0199%" y="223.50"></text></g><g><title>eval_to_const_value_raw (2,752,760 samples, 0.51%)</title><rect x="35.2194%" y="181" width="0.5060%" height="15" fill="rgb(227,1,9)"/><text x="35.4694%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,751,980 samples, 0.51%)</title><rect x="35.2195%" y="165" width="0.5059%" height="15" fill="rgb(248,47,43)"/><text x="35.4695%" y="175.50"></text></g><g><title>eval_to_allocation_raw (2,747,410 samples, 0.51%)</title><rect x="35.2204%" y="149" width="0.5050%" height="15" fill="rgb(221,10,30)"/><text x="35.4704%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,867,553 samples, 0.71%)</title><rect x="35.0164%" y="245" width="0.7109%" height="15" fill="rgb(210,229,1)"/><text x="35.2664%" y="255.50"></text></g><g><title>eval_to_const_value_raw (3,865,993 samples, 0.71%)</title><rect x="35.0167%" y="229" width="0.7106%" height="15" fill="rgb(222,148,37)"/><text x="35.2667%" y="239.50"></text></g><g><title>eval_to_allocation_raw (3,863,483 samples, 0.71%)</title><rect x="35.0171%" y="213" width="0.7102%" height="15" fill="rgb(234,67,33)"/><text x="35.2671%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,776,790 samples, 0.51%)</title><rect x="35.2169%" y="197" width="0.5104%" height="15" fill="rgb(247,98,35)"/><text x="35.4669%" y="207.50"></text></g><g><title>param_env (852,448 samples, 0.16%)</title><rect x="35.7273%" y="245" width="0.1567%" height="15" fill="rgb(247,138,52)"/><text x="35.9773%" y="255.50"></text></g><g><title>codegen_fulfill_obligation (607,988 samples, 0.11%)</title><rect x="35.9032%" y="229" width="0.1118%" height="15" fill="rgb(213,79,30)"/><text x="36.1532%" y="239.50"></text></g><g><title>resolve_instance (740,400 samples, 0.14%)</title><rect x="35.8840%" y="245" width="0.1361%" height="15" fill="rgb(246,177,23)"/><text x="36.1340%" y="255.50"></text></g><g><title>crate_lints (11,345,306 samples, 2.09%)</title><rect x="34.2359%" y="261" width="2.0854%" height="15" fill="rgb(230,62,27)"/><text x="34.4859%" y="271.50">c..</text></g><g><title>type_of (1,569,283 samples, 0.29%)</title><rect x="36.0328%" y="245" width="0.2885%" height="15" fill="rgb(216,154,8)"/><text x="36.2828%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (1,260,412 samples, 0.23%)</title><rect x="36.0896%" y="229" width="0.2317%" height="15" fill="rgb(244,35,45)"/><text x="36.3396%" y="239.50"></text></g><g><title>lint_checking (14,616,272 samples, 2.69%)</title><rect x="34.2352%" y="277" width="2.6867%" height="15" fill="rgb(251,115,12)"/><text x="34.4852%" y="287.50">li..</text></g><g><title>module_lints (3,267,576 samples, 0.60%)</title><rect x="36.3213%" y="261" width="0.6006%" height="15" fill="rgb(240,54,50)"/><text x="36.5713%" y="271.50"></text></g><g><title>lint_mod (3,256,476 samples, 0.60%)</title><rect x="36.3233%" y="245" width="0.5986%" height="15" fill="rgb(233,84,52)"/><text x="36.5733%" y="255.50"></text></g><g><title>privacy_access_levels (1,073,392 samples, 0.20%)</title><rect x="36.9219%" y="277" width="0.1973%" height="15" fill="rgb(207,117,47)"/><text x="37.1719%" y="287.50"></text></g><g><title>privacy_checking_modules (5,326,049 samples, 0.98%)</title><rect x="37.1192%" y="277" width="0.9790%" height="15" fill="rgb(249,43,39)"/><text x="37.3692%" y="287.50"></text></g><g><title>check_mod_privacy (5,318,839 samples, 0.98%)</title><rect x="37.1205%" y="261" width="0.9777%" height="15" fill="rgb(209,38,44)"/><text x="37.3705%" y="271.50"></text></g><g><title>misc_checking_3 (24,305,270 samples, 4.47%)</title><rect x="33.6374%" y="293" width="4.4676%" height="15" fill="rgb(236,212,23)"/><text x="33.8874%" y="303.50">misc_..</text></g><g><title>impl_parent (3,415,242 samples, 0.63%)</title><rect x="39.2887%" y="229" width="0.6278%" height="15" fill="rgb(242,79,21)"/><text x="39.5387%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,024,422 samples, 0.37%)</title><rect x="39.5443%" y="213" width="0.3721%" height="15" fill="rgb(211,96,35)"/><text x="39.7943%" y="223.50"></text></g><g><title>impl_trait_ref (7,287,747 samples, 1.34%)</title><rect x="39.9165%" y="229" width="1.3396%" height="15" fill="rgb(253,215,40)"/><text x="40.1665%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,707,210 samples, 1.05%)</title><rect x="40.2070%" y="213" width="1.0491%" height="15" fill="rgb(211,81,21)"/><text x="40.4570%" y="223.50"></text></g><g><title>trait_impls_of (1,185,499 samples, 0.22%)</title><rect x="41.2602%" y="229" width="0.2179%" height="15" fill="rgb(208,190,38)"/><text x="41.5102%" y="239.50"></text></g><g><title>coherent_trait (18,033,200 samples, 3.31%)</title><rect x="38.1635%" y="261" width="3.3147%" height="15" fill="rgb(235,213,38)"/><text x="38.4135%" y="271.50">coh..</text></g><g><title>specialization_graph_of (17,525,414 samples, 3.22%)</title><rect x="38.2568%" y="245" width="3.2214%" height="15" fill="rgb(237,122,38)"/><text x="38.5068%" y="255.50">spe..</text></g><g><title>coherence_checking (18,240,084 samples, 3.35%)</title><rect x="38.1588%" y="277" width="3.3528%" height="15" fill="rgb(244,218,35)"/><text x="38.4088%" y="287.50">coh..</text></g><g><title>associated_items (840,751 samples, 0.15%)</title><rect x="57.3126%" y="229" width="0.1545%" height="15" fill="rgb(240,68,47)"/><text x="57.5626%" y="239.50"></text></g><g><title>adt_dtorck_constraint (729,936 samples, 0.13%)</title><rect x="57.8001%" y="213" width="0.1342%" height="15" fill="rgb(210,16,53)"/><text x="58.0501%" y="223.50"></text></g><g><title>dropck_outlives (2,383,387 samples, 0.44%)</title><rect x="57.5013%" y="229" width="0.4381%" height="15" fill="rgb(235,124,12)"/><text x="57.7513%" y="239.50"></text></g><g><title>predicates_of (573,989 samples, 0.11%)</title><rect x="58.7586%" y="213" width="0.1055%" height="15" fill="rgb(224,169,11)"/><text x="59.0086%" y="223.50"></text></g><g><title>trait_impls_of (758,127 samples, 0.14%)</title><rect x="58.9277%" y="213" width="0.1394%" height="15" fill="rgb(250,166,2)"/><text x="59.1777%" y="223.50"></text></g><g><title>evaluate_obligation (6,137,117 samples, 1.13%)</title><rect x="57.9396%" y="229" width="1.1281%" height="15" fill="rgb(242,216,29)"/><text x="58.1896%" y="239.50"></text></g><g><title>evaluate_obligation (738,338 samples, 0.14%)</title><rect x="59.4811%" y="213" width="0.1357%" height="15" fill="rgb(230,116,27)"/><text x="59.7311%" y="223.50"></text></g><g><title>method_autoderef_steps (1,529,036 samples, 0.28%)</title><rect x="59.3396%" y="229" width="0.2811%" height="15" fill="rgb(228,99,48)"/><text x="59.5896%" y="239.50"></text></g><g><title>predicates_of (640,818 samples, 0.12%)</title><rect x="59.6737%" y="229" width="0.1178%" height="15" fill="rgb(253,11,6)"/><text x="59.9237%" y="239.50"></text></g><g><title>associated_items (657,426 samples, 0.12%)</title><rect x="70.9342%" y="213" width="0.1208%" height="15" fill="rgb(247,143,39)"/><text x="71.1842%" y="223.50"></text></g><g><title>adt_dtorck_constraint (1,079,264 samples, 0.20%)</title><rect x="71.3261%" y="197" width="0.1984%" height="15" fill="rgb(236,97,10)"/><text x="71.5761%" y="207.50"></text></g><g><title>dropck_outlives (2,414,405 samples, 0.44%)</title><rect x="71.0839%" y="213" width="0.4438%" height="15" fill="rgb(233,208,19)"/><text x="71.3339%" y="223.50"></text></g><g><title>evaluate_obligation (7,776,454 samples, 1.43%)</title><rect x="71.5281%" y="213" width="1.4294%" height="15" fill="rgb(216,164,2)"/><text x="71.7781%" y="223.50"></text></g><g><title>is_copy_raw (624,186 samples, 0.11%)</title><rect x="73.2058%" y="213" width="0.1147%" height="15" fill="rgb(220,129,5)"/><text x="73.4558%" y="223.50"></text></g><g><title>evaluate_obligation (923,528 samples, 0.17%)</title><rect x="73.5756%" y="197" width="0.1698%" height="15" fill="rgb(242,17,10)"/><text x="73.8256%" y="207.50"></text></g><g><title>method_autoderef_steps (1,971,520 samples, 0.36%)</title><rect x="73.3874%" y="213" width="0.3624%" height="15" fill="rgb(242,107,0)"/><text x="73.6374%" y="223.50"></text></g><g><title>predicates_of (840,010 samples, 0.15%)</title><rect x="73.7814%" y="213" width="0.1544%" height="15" fill="rgb(251,28,31)"/><text x="74.0314%" y="223.50"></text></g><g><title>predicates_defined_on (603,756 samples, 0.11%)</title><rect x="73.8249%" y="197" width="0.1110%" height="15" fill="rgb(233,223,10)"/><text x="74.0749%" y="207.50"></text></g><g><title>typeck (77,113,240 samples, 14.17%)</title><rect x="59.8457%" y="229" width="14.1744%" height="15" fill="rgb(215,21,27)"/><text x="60.0957%" y="239.50">typeck</text></g><g><title>item_bodies_checking (176,933,119 samples, 32.52%)</title><rect x="41.5296%" y="277" width="32.5227%" height="15" fill="rgb(232,23,21)"/><text x="41.7796%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (176,928,529 samples, 32.52%)</title><rect x="41.5304%" y="261" width="32.5218%" height="15" fill="rgb(244,5,23)"/><text x="41.7804%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (176,503,285 samples, 32.44%)</title><rect x="41.6086%" y="245" width="32.4437%" height="15" fill="rgb(226,81,46)"/><text x="41.8586%" y="255.50">typeck</text></g><g><title>adt_def (921,690 samples, 0.17%)</title><rect x="75.9878%" y="197" width="0.1694%" height="15" fill="rgb(247,70,30)"/><text x="76.2378%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (918,540 samples, 0.17%)</title><rect x="75.9884%" y="181" width="0.1688%" height="15" fill="rgb(212,68,19)"/><text x="76.2384%" y="191.50"></text></g><g><title>adt_dtorck_constraint (578,836 samples, 0.11%)</title><rect x="76.2296%" y="149" width="0.1064%" height="15" fill="rgb(240,187,13)"/><text x="76.4796%" y="159.50"></text></g><g><title>adt_dtorck_constraint (678,798 samples, 0.12%)</title><rect x="76.2122%" y="165" width="0.1248%" height="15" fill="rgb(223,113,26)"/><text x="76.4622%" y="175.50"></text></g><g><title>adt_dtorck_constraint (814,580 samples, 0.15%)</title><rect x="76.1914%" y="181" width="0.1497%" height="15" fill="rgb(206,192,2)"/><text x="76.4414%" y="191.50"></text></g><g><title>adt_dtorck_constraint (994,532 samples, 0.18%)</title><rect x="76.1609%" y="197" width="0.1828%" height="15" fill="rgb(241,108,4)"/><text x="76.4109%" y="207.50"></text></g><g><title>dropck_outlives (2,121,494 samples, 0.39%)</title><rect x="75.9610%" y="229" width="0.3900%" height="15" fill="rgb(247,173,49)"/><text x="76.2110%" y="239.50"></text></g><g><title>adt_dtorck_constraint (2,041,653 samples, 0.38%)</title><rect x="75.9757%" y="213" width="0.3753%" height="15" fill="rgb(224,114,35)"/><text x="76.2257%" y="223.50"></text></g><g><title>item_types_checking (12,595,620 samples, 2.32%)</title><rect x="74.0523%" y="277" width="2.3152%" height="15" fill="rgb(245,159,27)"/><text x="74.3023%" y="287.50">i..</text></g><g><title>check_mod_item_types (12,584,460 samples, 2.31%)</title><rect x="74.0543%" y="261" width="2.3132%" height="15" fill="rgb(245,172,44)"/><text x="74.3043%" y="271.50">c..</text></g><g><title>typeck (9,673,519 samples, 1.78%)</title><rect x="74.5894%" y="245" width="1.7781%" height="15" fill="rgb(236,23,11)"/><text x="74.8394%" y="255.50">t..</text></g><g><title>fn_sig (979,645 samples, 0.18%)</title><rect x="76.5630%" y="245" width="0.1801%" height="15" fill="rgb(205,117,38)"/><text x="76.8130%" y="255.50"></text></g><g><title>named_region_map (878,475 samples, 0.16%)</title><rect x="76.9333%" y="229" width="0.1615%" height="15" fill="rgb(237,72,25)"/><text x="77.1833%" y="239.50"></text></g><g><title>resolve_lifetimes (796,275 samples, 0.15%)</title><rect x="76.9484%" y="213" width="0.1464%" height="15" fill="rgb(244,70,9)"/><text x="77.1984%" y="223.50"></text></g><g><title>generics_of (1,957,666 samples, 0.36%)</title><rect x="76.7431%" y="245" width="0.3598%" height="15" fill="rgb(217,125,39)"/><text x="76.9931%" y="255.50"></text></g><g><title>explicit_predicates_of (762,988 samples, 0.14%)</title><rect x="77.2249%" y="213" width="0.1402%" height="15" fill="rgb(235,36,10)"/><text x="77.4749%" y="223.50"></text></g><g><title>predicates_of (2,768,700 samples, 0.51%)</title><rect x="77.1210%" y="245" width="0.5089%" height="15" fill="rgb(251,123,47)"/><text x="77.3710%" y="255.50"></text></g><g><title>predicates_defined_on (2,543,009 samples, 0.47%)</title><rect x="77.1625%" y="229" width="0.4674%" height="15" fill="rgb(221,13,13)"/><text x="77.4125%" y="239.50"></text></g><g><title>inferred_outlives_of (1,440,567 samples, 0.26%)</title><rect x="77.3651%" y="213" width="0.2648%" height="15" fill="rgb(238,131,9)"/><text x="77.6151%" y="223.50"></text></g><g><title>inferred_outlives_crate (1,365,866 samples, 0.25%)</title><rect x="77.3789%" y="197" width="0.2511%" height="15" fill="rgb(211,50,8)"/><text x="77.6289%" y="207.50"></text></g><g><title>type_of (948,591 samples, 0.17%)</title><rect x="77.4556%" y="181" width="0.1744%" height="15" fill="rgb(245,182,24)"/><text x="77.7056%" y="191.50"></text></g><g><title>type_collecting (7,153,919 samples, 1.31%)</title><rect x="76.3694%" y="277" width="1.3150%" height="15" fill="rgb(242,14,37)"/><text x="76.6194%" y="287.50"></text></g><g><title>collect_mod_item_types (7,140,429 samples, 1.31%)</title><rect x="76.3719%" y="261" width="1.3125%" height="15" fill="rgb(246,228,12)"/><text x="76.6219%" y="271.50"></text></g><g><title>evaluate_obligation (1,757,674 samples, 0.32%)</title><rect x="79.0939%" y="245" width="0.3231%" height="15" fill="rgb(213,55,15)"/><text x="79.3439%" y="255.50"></text></g><g><title>implied_outlives_bounds (716,280 samples, 0.13%)</title><rect x="79.4170%" y="245" width="0.1317%" height="15" fill="rgb(209,9,3)"/><text x="79.6670%" y="255.50"></text></g><g><title>param_env (1,089,028 samples, 0.20%)</title><rect x="79.5594%" y="245" width="0.2002%" height="15" fill="rgb(230,59,30)"/><text x="79.8094%" y="255.50"></text></g><g><title>region_scope_tree (1,905,474 samples, 0.35%)</title><rect x="79.7687%" y="245" width="0.3503%" height="15" fill="rgb(209,121,21)"/><text x="80.0187%" y="255.50"></text></g><g><title>check_impl_item_well_formed (12,494,356 samples, 2.30%)</title><rect x="77.8375%" y="261" width="2.2966%" height="15" fill="rgb(220,109,13)"/><text x="78.0875%" y="271.50">c..</text></g><g><title>evaluate_obligation (3,235,325 samples, 0.59%)</title><rect x="80.8139%" y="245" width="0.5947%" height="15" fill="rgb(232,18,1)"/><text x="81.0639%" y="255.50"></text></g><g><title>param_env (668,803 samples, 0.12%)</title><rect x="81.5180%" y="245" width="0.1229%" height="15" fill="rgb(215,41,42)"/><text x="81.7680%" y="255.50"></text></g><g><title>check_item_well_formed (8,937,444 samples, 1.64%)</title><rect x="80.1341%" y="261" width="1.6428%" height="15" fill="rgb(224,123,36)"/><text x="80.3841%" y="271.50"></text></g><g><title>analysis (444,004,270 samples, 81.61%)</title><rect x="0.2282%" y="309" width="81.6139%" height="15" fill="rgb(240,125,3)"/><text x="0.4782%" y="319.50">analysis</text></g><g><title>type_check_crate (237,942,897 samples, 43.74%)</title><rect x="38.1051%" y="293" width="43.7371%" height="15" fill="rgb(205,98,50)"/><text x="38.3551%" y="303.50">type_check_crate</text></g><g><title>wf_checking (22,590,311 samples, 4.15%)</title><rect x="77.6898%" y="277" width="4.1524%" height="15" fill="rgb(205,185,37)"/><text x="77.9398%" y="287.50">wf_ch..</text></g><g><title>metadata_register_crate (1,717,159 samples, 0.32%)</title><rect x="91.1151%" y="261" width="0.3156%" height="15" fill="rgb(238,207,15)"/><text x="91.3651%" y="271.50"></text></g><g><title>metadata_register_crate (667,826 samples, 0.12%)</title><rect x="91.3079%" y="245" width="0.1228%" height="15" fill="rgb(213,199,42)"/><text x="91.5579%" y="255.50"></text></g><g><title>macro_expand_crate (52,151,930 samples, 9.59%)</title><rect x="82.1348%" y="293" width="9.5862%" height="15" fill="rgb(235,201,11)"/><text x="82.3848%" y="303.50">macro_expand_c..</text></g><g><title>expand_crate (52,130,500 samples, 9.58%)</title><rect x="82.1388%" y="277" width="9.5823%" height="15" fill="rgb(207,46,11)"/><text x="82.3888%" y="287.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,579,657 samples, 0.29%)</title><rect x="91.4307%" y="261" width="0.2904%" height="15" fill="rgb(241,35,35)"/><text x="91.6807%" y="271.50"></text></g><g><title>late_resolve_crate (7,096,759 samples, 1.30%)</title><rect x="91.8758%" y="277" width="1.3045%" height="15" fill="rgb(243,32,47)"/><text x="92.1258%" y="287.50"></text></g><g><title>configure_and_expand (61,781,357 samples, 11.36%)</title><rect x="81.9345%" y="309" width="11.3562%" height="15" fill="rgb(247,202,23)"/><text x="82.1845%" y="319.50">configure_and_exp..</text></g><g><title>resolve_crate (8,239,131 samples, 1.51%)</title><rect x="91.7762%" y="293" width="1.5145%" height="15" fill="rgb(219,102,11)"/><text x="92.0262%" y="303.50"></text></g><g><title>drop_ast (1,013,722 samples, 0.19%)</title><rect x="93.2907%" y="309" width="0.1863%" height="15" fill="rgb(243,110,44)"/><text x="93.5407%" y="319.50"></text></g><g><title>early_lint_checks (1,987,082 samples, 0.37%)</title><rect x="93.4815%" y="309" width="0.3653%" height="15" fill="rgb(222,74,54)"/><text x="93.7315%" y="319.50"></text></g><g><title>free_global_ctxt (7,369,962 samples, 1.35%)</title><rect x="93.8467%" y="309" width="1.3547%" height="15" fill="rgb(216,99,12)"/><text x="94.0967%" y="319.50"></text></g><g><title>generate_crate_metadata (5,092,187 samples, 0.94%)</title><rect x="95.2014%" y="309" width="0.9360%" height="15" fill="rgb(226,22,26)"/><text x="95.4514%" y="319.50"></text></g><g><title>hir_lowering (13,601,611 samples, 2.50%)</title><rect x="96.1374%" y="309" width="2.5002%" height="15" fill="rgb(217,163,10)"/><text x="96.3874%" y="319.50">hi..</text></g><g><title>parse_crate (4,691,742 samples, 0.86%)</title><rect x="98.6513%" y="309" width="0.8624%" height="15" fill="rgb(213,25,53)"/><text x="98.9013%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (1,798,589 samples, 0.33%)</title><rect x="99.5530%" y="309" width="0.3306%" height="15" fill="rgb(252,105,26)"/><text x="99.8030%" y="319.50"></text></g><g><title>all (544,030,064 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (544,030,064 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="335.50">rustc</text></g></svg></svg>