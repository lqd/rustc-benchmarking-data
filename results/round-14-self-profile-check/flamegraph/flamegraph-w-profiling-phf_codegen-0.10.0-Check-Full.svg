<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (97,102 samples, 0.11%)</title><rect x="11.7188%" y="117" width="0.1133%" height="15" fill="rgb(227,0,7)"/><text x="11.9688%" y="127.50"></text></g><g><title>codegen_fn_attrs (136,622 samples, 0.16%)</title><rect x="12.1207%" y="101" width="0.1593%" height="15" fill="rgb(217,0,24)"/><text x="12.3707%" y="111.50"></text></g><g><title>adt_drop_tys (178,112 samples, 0.21%)</title><rect x="14.1910%" y="69" width="0.2077%" height="15" fill="rgb(221,193,54)"/><text x="14.4410%" y="79.50"></text></g><g><title>needs_drop_raw (1,010,462 samples, 1.18%)</title><rect x="14.1005%" y="85" width="1.1785%" height="15" fill="rgb(248,212,6)"/><text x="14.3505%" y="95.50"></text></g><g><title>is_copy_raw (754,738 samples, 0.88%)</title><rect x="14.3987%" y="69" width="0.8803%" height="15" fill="rgb(208,68,35)"/><text x="14.6487%" y="79.50"></text></g><g><title>evaluate_obligation (645,027 samples, 0.75%)</title><rect x="14.5267%" y="53" width="0.7523%" height="15" fill="rgb(232,128,0)"/><text x="14.7767%" y="63.50"></text></g><g><title>trait_impls_of (169,582 samples, 0.20%)</title><rect x="15.0812%" y="37" width="0.1978%" height="15" fill="rgb(207,160,47)"/><text x="15.3312%" y="47.50"></text></g><g><title>impl_parent (442,747 samples, 0.52%)</title><rect x="16.2369%" y="53" width="0.5164%" height="15" fill="rgb(228,23,34)"/><text x="16.4869%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (284,906 samples, 0.33%)</title><rect x="16.4210%" y="37" width="0.3323%" height="15" fill="rgb(218,30,26)"/><text x="16.6710%" y="47.50"></text></g><g><title>specialization_graph_of (2,511,758 samples, 2.93%)</title><rect x="15.5188%" y="69" width="2.9295%" height="15" fill="rgb(220,122,19)"/><text x="15.7688%" y="79.50">sp..</text></g><g><title>impl_trait_ref (1,453,337 samples, 1.70%)</title><rect x="16.7533%" y="53" width="1.6951%" height="15" fill="rgb(250,228,42)"/><text x="17.0033%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,079,112 samples, 1.26%)</title><rect x="17.1898%" y="37" width="1.2586%" height="15" fill="rgb(240,193,28)"/><text x="17.4398%" y="47.50"></text></g><g><title>resolve_instance (2,746,961 samples, 3.20%)</title><rect x="15.2790%" y="85" width="3.2039%" height="15" fill="rgb(216,20,37)"/><text x="15.5290%" y="95.50">res..</text></g><g><title>thir_body (588,745 samples, 0.69%)</title><rect x="18.4956%" y="85" width="0.6867%" height="15" fill="rgb(206,188,39)"/><text x="18.7456%" y="95.50"></text></g><g><title>mir_const (6,830,453 samples, 7.97%)</title><rect x="11.2223%" y="133" width="7.9665%" height="15" fill="rgb(217,207,13)"/><text x="11.4723%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (6,307,699 samples, 7.36%)</title><rect x="11.8320%" y="117" width="7.3568%" height="15" fill="rgb(231,73,38)"/><text x="12.0820%" y="127.50">unsafety_c..</text></g><g><title>mir_built (5,923,553 samples, 6.91%)</title><rect x="12.2801%" y="101" width="6.9088%" height="15" fill="rgb(225,20,46)"/><text x="12.5301%" y="111.50">mir_built</text></g><g><title>mir_promoted (7,308,568 samples, 8.52%)</title><rect x="10.6873%" y="149" width="8.5242%" height="15" fill="rgb(210,31,41)"/><text x="10.9373%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (451,632 samples, 0.53%)</title><rect x="19.2115%" y="149" width="0.5268%" height="15" fill="rgb(221,200,47)"/><text x="19.4615%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (697,848 samples, 0.81%)</title><rect x="19.7382%" y="149" width="0.8139%" height="15" fill="rgb(226,26,5)"/><text x="19.9882%" y="159.50"></text></g><g><title>normalize_projection_ty (516,065 samples, 0.60%)</title><rect x="19.9502%" y="133" width="0.6019%" height="15" fill="rgb(249,33,26)"/><text x="20.2002%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,910,188 samples, 2.23%)</title><rect x="20.5918%" y="149" width="2.2279%" height="15" fill="rgb(235,183,28)"/><text x="20.8418%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (18,448,387 samples, 21.52%)</title><rect x="1.3154%" y="181" width="21.5168%" height="15" fill="rgb(221,5,38)"/><text x="1.5654%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,406,467 samples, 21.47%)</title><rect x="1.3642%" y="165" width="21.4679%" height="15" fill="rgb(247,18,42)"/><text x="1.6142%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (207,343 samples, 0.24%)</title><rect x="22.8451%" y="181" width="0.2418%" height="15" fill="rgb(241,131,45)"/><text x="23.0951%" y="191.50"></text></g><g><title>get_lang_items (140,601 samples, 0.16%)</title><rect x="23.4961%" y="133" width="0.1640%" height="15" fill="rgb(249,31,29)"/><text x="23.7461%" y="143.50"></text></g><g><title>should_inherit_track_caller (119,123 samples, 0.14%)</title><rect x="23.6601%" y="133" width="0.1389%" height="15" fill="rgb(225,111,53)"/><text x="23.9101%" y="143.50"></text></g><g><title>codegen_fn_attrs (380,766 samples, 0.44%)</title><rect x="23.3944%" y="149" width="0.4441%" height="15" fill="rgb(238,160,17)"/><text x="23.6444%" y="159.50"></text></g><g><title>check_mod_attrs (611,537 samples, 0.71%)</title><rect x="23.1254%" y="165" width="0.7133%" height="15" fill="rgb(214,148,48)"/><text x="23.3754%" y="175.50"></text></g><g><title>check_mod_const_bodies (88,651 samples, 0.10%)</title><rect x="23.8387%" y="165" width="0.1034%" height="15" fill="rgb(232,36,49)"/><text x="24.0887%" y="175.50"></text></g><g><title>lookup_deprecation_entry (126,831 samples, 0.15%)</title><rect x="24.1787%" y="149" width="0.1479%" height="15" fill="rgb(209,103,24)"/><text x="24.4287%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (314,143 samples, 0.37%)</title><rect x="24.0341%" y="165" width="0.3664%" height="15" fill="rgb(229,88,8)"/><text x="24.2841%" y="175.50"></text></g><g><title>misc_checking_1 (1,182,023 samples, 1.38%)</title><rect x="23.0874%" y="181" width="1.3786%" height="15" fill="rgb(213,181,19)"/><text x="23.3374%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (312,754 samples, 0.36%)</title><rect x="24.4676%" y="165" width="0.3648%" height="15" fill="rgb(254,191,54)"/><text x="24.7176%" y="175.50"></text></g><g><title>check_mod_liveness (265,643 samples, 0.31%)</title><rect x="24.5225%" y="149" width="0.3098%" height="15" fill="rgb(241,83,37)"/><text x="24.7725%" y="159.50"></text></g><g><title>type_uninhabited_from (100,130 samples, 0.12%)</title><rect x="24.7156%" y="133" width="0.1168%" height="15" fill="rgb(233,36,39)"/><text x="24.9656%" y="143.50"></text></g><g><title>misc_checking_2 (554,066 samples, 0.65%)</title><rect x="24.4661%" y="181" width="0.6462%" height="15" fill="rgb(226,3,54)"/><text x="24.7161%" y="191.50"></text></g><g><title>match_checking (240,012 samples, 0.28%)</title><rect x="24.8323%" y="165" width="0.2799%" height="15" fill="rgb(245,192,40)"/><text x="25.0823%" y="175.50"></text></g><g><title>check_match (227,392 samples, 0.27%)</title><rect x="24.8471%" y="149" width="0.2652%" height="15" fill="rgb(238,167,29)"/><text x="25.0971%" y="159.50"></text></g><g><title>check_private_in_public (93,921 samples, 0.11%)</title><rect x="25.1239%" y="165" width="0.1095%" height="15" fill="rgb(232,182,51)"/><text x="25.3739%" y="175.50"></text></g><g><title>death_checking (257,733 samples, 0.30%)</title><rect x="25.2334%" y="165" width="0.3006%" height="15" fill="rgb(231,60,39)"/><text x="25.4834%" y="175.50"></text></g><g><title>lint_levels (108,832 samples, 0.13%)</title><rect x="25.4071%" y="149" width="0.1269%" height="15" fill="rgb(208,69,12)"/><text x="25.6571%" y="159.50"></text></g><g><title>crate_lints (2,854,802 samples, 3.33%)</title><rect x="25.5356%" y="149" width="3.3296%" height="15" fill="rgb(235,93,37)"/><text x="25.7856%" y="159.50">cra..</text></g><g><title>type_of (2,176,924 samples, 2.54%)</title><rect x="26.3263%" y="133" width="2.5390%" height="15" fill="rgb(213,116,39)"/><text x="26.5763%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,917,251 samples, 2.24%)</title><rect x="26.6291%" y="117" width="2.2361%" height="15" fill="rgb(222,207,29)"/><text x="26.8791%" y="127.50">m..</text></g><g><title>lint_checking (3,078,855 samples, 3.59%)</title><rect x="25.5340%" y="165" width="3.5909%" height="15" fill="rgb(206,96,30)"/><text x="25.7840%" y="175.50">lint..</text></g><g><title>module_lints (222,673 samples, 0.26%)</title><rect x="28.8653%" y="149" width="0.2597%" height="15" fill="rgb(218,138,4)"/><text x="29.1153%" y="159.50"></text></g><g><title>lint_mod (219,933 samples, 0.26%)</title><rect x="28.8685%" y="133" width="0.2565%" height="15" fill="rgb(250,191,14)"/><text x="29.1185%" y="143.50"></text></g><g><title>privacy_access_levels (124,491 samples, 0.15%)</title><rect x="29.1250%" y="165" width="0.1452%" height="15" fill="rgb(239,60,40)"/><text x="29.3750%" y="175.50"></text></g><g><title>privacy_checking_modules (420,184 samples, 0.49%)</title><rect x="29.2702%" y="165" width="0.4901%" height="15" fill="rgb(206,27,48)"/><text x="29.5202%" y="175.50"></text></g><g><title>check_mod_privacy (418,724 samples, 0.49%)</title><rect x="29.2719%" y="149" width="0.4884%" height="15" fill="rgb(225,35,8)"/><text x="29.5219%" y="159.50"></text></g><g><title>misc_checking_3 (3,994,914 samples, 4.66%)</title><rect x="25.1123%" y="181" width="4.6594%" height="15" fill="rgb(250,213,24)"/><text x="25.3623%" y="191.50">misc_..</text></g><g><title>impl_parent (228,150 samples, 0.27%)</title><rect x="30.1928%" y="117" width="0.2661%" height="15" fill="rgb(247,123,22)"/><text x="30.4428%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (168,390 samples, 0.20%)</title><rect x="30.2625%" y="101" width="0.1964%" height="15" fill="rgb(231,138,38)"/><text x="30.5125%" y="111.50"></text></g><g><title>impl_trait_ref (704,780 samples, 0.82%)</title><rect x="30.4589%" y="117" width="0.8220%" height="15" fill="rgb(231,145,46)"/><text x="30.7089%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (643,860 samples, 0.75%)</title><rect x="30.5299%" y="101" width="0.7510%" height="15" fill="rgb(251,118,11)"/><text x="30.7799%" y="111.50"></text></g><g><title>coherent_trait (1,370,026 samples, 1.60%)</title><rect x="29.8250%" y="149" width="1.5979%" height="15" fill="rgb(217,147,25)"/><text x="30.0750%" y="159.50"></text></g><g><title>specialization_graph_of (1,362,776 samples, 1.59%)</title><rect x="29.8334%" y="133" width="1.5894%" height="15" fill="rgb(247,81,37)"/><text x="30.0834%" y="143.50"></text></g><g><title>trait_impls_of (121,742 samples, 0.14%)</title><rect x="31.2809%" y="117" width="0.1420%" height="15" fill="rgb(209,12,38)"/><text x="31.5309%" y="127.50"></text></g><g><title>coherence_checking (1,439,786 samples, 1.68%)</title><rect x="29.8088%" y="165" width="1.6793%" height="15" fill="rgb(227,1,9)"/><text x="30.0588%" y="175.50"></text></g><g><title>adt_def (113,381 samples, 0.13%)</title><rect x="49.9081%" y="85" width="0.1322%" height="15" fill="rgb(248,47,43)"/><text x="50.1581%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (113,131 samples, 0.13%)</title><rect x="49.9084%" y="69" width="0.1319%" height="15" fill="rgb(221,10,30)"/><text x="50.1584%" y="79.50"></text></g><g><title>adt_sized_constraint (173,102 samples, 0.20%)</title><rect x="49.9068%" y="101" width="0.2019%" height="15" fill="rgb(210,229,1)"/><text x="50.1568%" y="111.50"></text></g><g><title>adt_sized_constraint (283,153 samples, 0.33%)</title><rect x="49.7903%" y="117" width="0.3302%" height="15" fill="rgb(222,148,37)"/><text x="50.0403%" y="127.50"></text></g><g><title>associated_item (364,243 samples, 0.42%)</title><rect x="50.2994%" y="101" width="0.4248%" height="15" fill="rgb(234,67,33)"/><text x="50.5494%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (279,572 samples, 0.33%)</title><rect x="50.3981%" y="85" width="0.3261%" height="15" fill="rgb(247,98,35)"/><text x="50.6481%" y="95.50"></text></g><g><title>associated_items (538,386 samples, 0.63%)</title><rect x="50.1303%" y="117" width="0.6279%" height="15" fill="rgb(247,138,52)"/><text x="50.3803%" y="127.50"></text></g><g><title>adt_dtorck_constraint (116,631 samples, 0.14%)</title><rect x="51.2265%" y="53" width="0.1360%" height="15" fill="rgb(213,79,30)"/><text x="51.4765%" y="63.50"></text></g><g><title>adt_dtorck_constraint (151,271 samples, 0.18%)</title><rect x="51.1914%" y="69" width="0.1764%" height="15" fill="rgb(246,177,23)"/><text x="51.4414%" y="79.50"></text></g><g><title>adt_dtorck_constraint (172,381 samples, 0.20%)</title><rect x="51.1725%" y="85" width="0.2011%" height="15" fill="rgb(230,62,27)"/><text x="51.4225%" y="95.50"></text></g><g><title>dropck_outlives (495,076 samples, 0.58%)</title><rect x="50.8189%" y="117" width="0.5774%" height="15" fill="rgb(216,154,8)"/><text x="51.0689%" y="127.50"></text></g><g><title>adt_dtorck_constraint (299,844 samples, 0.35%)</title><rect x="51.0466%" y="101" width="0.3497%" height="15" fill="rgb(244,35,45)"/><text x="51.2966%" y="111.50"></text></g><g><title>predicates_of (86,843 samples, 0.10%)</title><rect x="52.3774%" y="101" width="0.1013%" height="15" fill="rgb(251,115,12)"/><text x="52.6274%" y="111.50"></text></g><g><title>evaluate_obligation (1,530,754 samples, 1.79%)</title><rect x="51.3963%" y="117" width="1.7854%" height="15" fill="rgb(240,54,50)"/><text x="51.6463%" y="127.50">e..</text></g><g><title>trait_impls_of (537,604 samples, 0.63%)</title><rect x="52.5546%" y="101" width="0.6270%" height="15" fill="rgb(233,84,52)"/><text x="52.8046%" y="111.50"></text></g><g><title>implementations_of_trait (169,721 samples, 0.20%)</title><rect x="52.9837%" y="85" width="0.1979%" height="15" fill="rgb(207,117,47)"/><text x="53.2337%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (109,321 samples, 0.13%)</title><rect x="53.0541%" y="69" width="0.1275%" height="15" fill="rgb(249,43,39)"/><text x="53.3041%" y="79.50"></text></g><g><title>generics_of (294,161 samples, 0.34%)</title><rect x="53.2913%" y="117" width="0.3431%" height="15" fill="rgb(209,38,44)"/><text x="53.5413%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (269,651 samples, 0.31%)</title><rect x="53.3199%" y="101" width="0.3145%" height="15" fill="rgb(236,212,23)"/><text x="53.5699%" y="111.50"></text></g><g><title>impl_item_implementor_ids (100,481 samples, 0.12%)</title><rect x="53.6344%" y="117" width="0.1172%" height="15" fill="rgb(242,79,21)"/><text x="53.8844%" y="127.50"></text></g><g><title>associated_items (87,351 samples, 0.10%)</title><rect x="53.6497%" y="101" width="0.1019%" height="15" fill="rgb(211,96,35)"/><text x="53.8997%" y="111.50"></text></g><g><title>evaluate_obligation (153,041 samples, 0.18%)</title><rect x="54.1679%" y="101" width="0.1785%" height="15" fill="rgb(253,215,40)"/><text x="54.4179%" y="111.50"></text></g><g><title>method_autoderef_steps (283,992 samples, 0.33%)</title><rect x="54.0265%" y="117" width="0.3312%" height="15" fill="rgb(211,81,21)"/><text x="54.2765%" y="127.50"></text></g><g><title>explicit_predicates_of (165,401 samples, 0.19%)</title><rect x="54.5666%" y="85" width="0.1929%" height="15" fill="rgb(208,190,38)"/><text x="54.8166%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (145,941 samples, 0.17%)</title><rect x="54.5893%" y="69" width="0.1702%" height="15" fill="rgb(235,213,38)"/><text x="54.8393%" y="79.50"></text></g><g><title>predicates_of (351,854 samples, 0.41%)</title><rect x="54.3902%" y="117" width="0.4104%" height="15" fill="rgb(237,122,38)"/><text x="54.6402%" y="127.50"></text></g><g><title>predicates_defined_on (261,363 samples, 0.30%)</title><rect x="54.4957%" y="101" width="0.3048%" height="15" fill="rgb(244,218,35)"/><text x="54.7457%" y="111.50"></text></g><g><title>type_of (89,211 samples, 0.10%)</title><rect x="54.8424%" y="117" width="0.1040%" height="15" fill="rgb(240,68,47)"/><text x="55.0924%" y="127.50"></text></g><g><title>item_bodies_checking (20,120,885 samples, 23.47%)</title><rect x="31.5215%" y="165" width="23.4675%" height="15" fill="rgb(210,16,53)"/><text x="31.7715%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,118,205 samples, 23.46%)</title><rect x="31.5247%" y="149" width="23.4644%" height="15" fill="rgb(235,124,12)"/><text x="31.7747%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (20,084,265 samples, 23.42%)</title><rect x="31.5642%" y="133" width="23.4248%" height="15" fill="rgb(224,169,11)"/><text x="31.8142%" y="143.50">typeck</text></g><g><title>impl_trait_ref (236,491 samples, 0.28%)</title><rect x="55.5243%" y="85" width="0.2758%" height="15" fill="rgb(250,166,2)"/><text x="55.7743%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (217,181 samples, 0.25%)</title><rect x="55.5468%" y="69" width="0.2533%" height="15" fill="rgb(242,216,29)"/><text x="55.7968%" y="79.50"></text></g><g><title>adt_destructor (417,055 samples, 0.49%)</title><rect x="55.3516%" y="133" width="0.4864%" height="15" fill="rgb(230,116,27)"/><text x="55.6016%" y="143.50"></text></g><g><title>coherent_trait (411,405 samples, 0.48%)</title><rect x="55.3581%" y="117" width="0.4798%" height="15" fill="rgb(228,99,48)"/><text x="55.6081%" y="127.50"></text></g><g><title>specialization_graph_of (410,035 samples, 0.48%)</title><rect x="55.3597%" y="101" width="0.4782%" height="15" fill="rgb(253,11,6)"/><text x="55.6097%" y="111.50"></text></g><g><title>item_types_checking (770,069 samples, 0.90%)</title><rect x="54.9890%" y="165" width="0.8982%" height="15" fill="rgb(247,143,39)"/><text x="55.2390%" y="175.50"></text></g><g><title>check_mod_item_types (768,259 samples, 0.90%)</title><rect x="54.9911%" y="149" width="0.8960%" height="15" fill="rgb(236,97,10)"/><text x="55.2411%" y="159.50"></text></g><g><title>fn_sig (142,702 samples, 0.17%)</title><rect x="56.1442%" y="133" width="0.1664%" height="15" fill="rgb(233,208,19)"/><text x="56.3942%" y="143.50"></text></g><g><title>is_late_bound_map (106,182 samples, 0.12%)</title><rect x="56.4241%" y="117" width="0.1238%" height="15" fill="rgb(216,164,2)"/><text x="56.6741%" y="127.50"></text></g><g><title>resolve_lifetimes (98,702 samples, 0.12%)</title><rect x="56.4328%" y="101" width="0.1151%" height="15" fill="rgb(220,129,5)"/><text x="56.6828%" y="111.50"></text></g><g><title>generics_of (223,192 samples, 0.26%)</title><rect x="56.3106%" y="133" width="0.2603%" height="15" fill="rgb(242,17,10)"/><text x="56.5606%" y="143.50"></text></g><g><title>late_bound_vars_map (177,363 samples, 0.21%)</title><rect x="56.9761%" y="85" width="0.2069%" height="15" fill="rgb(242,107,0)"/><text x="57.2261%" y="95.50"></text></g><g><title>resolve_lifetimes (170,123 samples, 0.20%)</title><rect x="56.9846%" y="69" width="0.1984%" height="15" fill="rgb(251,28,31)"/><text x="57.2346%" y="79.50"></text></g><g><title>explicit_predicates_of (399,555 samples, 0.47%)</title><rect x="56.7301%" y="101" width="0.4660%" height="15" fill="rgb(233,223,10)"/><text x="56.9801%" y="111.50"></text></g><g><title>predicates_of (972,842 samples, 1.13%)</title><rect x="56.5944%" y="133" width="1.1347%" height="15" fill="rgb(215,21,27)"/><text x="56.8444%" y="143.50"></text></g><g><title>predicates_defined_on (931,711 samples, 1.09%)</title><rect x="56.6424%" y="117" width="1.0867%" height="15" fill="rgb(232,23,21)"/><text x="56.8924%" y="127.50"></text></g><g><title>inferred_outlives_of (456,905 samples, 0.53%)</title><rect x="57.1961%" y="101" width="0.5329%" height="15" fill="rgb(244,5,23)"/><text x="57.4461%" y="111.50"></text></g><g><title>inferred_outlives_crate (431,925 samples, 0.50%)</title><rect x="57.2253%" y="85" width="0.5038%" height="15" fill="rgb(226,81,46)"/><text x="57.4753%" y="95.50"></text></g><g><title>type_of (216,353 samples, 0.25%)</title><rect x="57.4767%" y="69" width="0.2523%" height="15" fill="rgb(247,70,30)"/><text x="57.7267%" y="79.50"></text></g><g><title>type_collecting (1,696,339 samples, 1.98%)</title><rect x="55.8886%" y="165" width="1.9785%" height="15" fill="rgb(212,68,19)"/><text x="56.1386%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,686,639 samples, 1.97%)</title><rect x="55.8999%" y="149" width="1.9672%" height="15" fill="rgb(240,187,13)"/><text x="56.1499%" y="159.50">c..</text></g><g><title>type_of (118,371 samples, 0.14%)</title><rect x="57.7290%" y="133" width="0.1381%" height="15" fill="rgb(223,113,26)"/><text x="57.9790%" y="143.50"></text></g><g><title>evaluate_obligation (353,604 samples, 0.41%)</title><rect x="59.0806%" y="133" width="0.4124%" height="15" fill="rgb(206,192,2)"/><text x="59.3306%" y="143.50"></text></g><g><title>implied_outlives_bounds (159,701 samples, 0.19%)</title><rect x="59.4930%" y="133" width="0.1863%" height="15" fill="rgb(241,108,4)"/><text x="59.7430%" y="143.50"></text></g><g><title>param_env (152,970 samples, 0.18%)</title><rect x="59.6793%" y="133" width="0.1784%" height="15" fill="rgb(247,173,49)"/><text x="59.9293%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,788,541 samples, 2.09%)</title><rect x="57.9805%" y="149" width="2.0860%" height="15" fill="rgb(224,114,35)"/><text x="58.2305%" y="159.50">c..</text></g><g><title>region_scope_tree (155,444 samples, 0.18%)</title><rect x="59.8853%" y="133" width="0.1813%" height="15" fill="rgb(245,159,27)"/><text x="60.1353%" y="143.50"></text></g><g><title>evaluate_obligation (124,881 samples, 0.15%)</title><rect x="61.0345%" y="133" width="0.1457%" height="15" fill="rgb(245,172,44)"/><text x="61.2845%" y="143.50"></text></g><g><title>implied_outlives_bounds (103,061 samples, 0.12%)</title><rect x="61.1844%" y="133" width="0.1202%" height="15" fill="rgb(236,23,11)"/><text x="61.4344%" y="143.50"></text></g><g><title>param_env (278,992 samples, 0.33%)</title><rect x="61.3054%" y="133" width="0.3254%" height="15" fill="rgb(205,117,38)"/><text x="61.5554%" y="143.50"></text></g><g><title>trait_impls_of (252,923 samples, 0.29%)</title><rect x="61.6865%" y="133" width="0.2950%" height="15" fill="rgb(237,72,25)"/><text x="61.9365%" y="143.50"></text></g><g><title>analysis (52,437,147 samples, 61.16%)</title><rect x="0.8857%" y="197" width="61.1588%" height="15" fill="rgb(244,70,9)"/><text x="1.1357%" y="207.50">analysis</text></g><g><title>type_check_crate (27,670,530 samples, 32.27%)</title><rect x="29.7716%" y="181" width="32.2729%" height="15" fill="rgb(217,125,39)"/><text x="30.0216%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,579,650 samples, 4.18%)</title><rect x="57.8695%" y="165" width="4.1750%" height="15" fill="rgb(235,36,10)"/><text x="58.1195%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (1,695,878 samples, 1.98%)</title><rect x="60.0666%" y="149" width="1.9779%" height="15" fill="rgb(251,123,47)"/><text x="60.3166%" y="159.50">c..</text></g><g><title>codegen_crate (568,566 samples, 0.66%)</title><rect x="62.0583%" y="197" width="0.6631%" height="15" fill="rgb(221,13,13)"/><text x="62.3083%" y="207.50"></text></g><g><title>AST_validation (165,532 samples, 0.19%)</title><rect x="62.9911%" y="181" width="0.1931%" height="15" fill="rgb(238,131,9)"/><text x="63.2411%" y="191.50"></text></g><g><title>metadata_load_macro (292,811 samples, 0.34%)</title><rect x="79.6301%" y="149" width="0.3415%" height="15" fill="rgb(211,50,8)"/><text x="79.8801%" y="159.50"></text></g><g><title>macro_expand_crate (17,709,759 samples, 20.66%)</title><rect x="63.3536%" y="181" width="20.6554%" height="15" fill="rgb(245,182,24)"/><text x="63.6036%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,683,438 samples, 20.62%)</title><rect x="63.3843%" y="165" width="20.6247%" height="15" fill="rgb(242,14,37)"/><text x="63.6343%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (3,461,600 samples, 4.04%)</title><rect x="79.9716%" y="149" width="4.0374%" height="15" fill="rgb(246,228,12)"/><text x="80.2216%" y="159.50">meta..</text></g><g><title>metadata_register_crate (1,561,519 samples, 1.82%)</title><rect x="82.1878%" y="133" width="1.8212%" height="15" fill="rgb(213,55,15)"/><text x="82.4378%" y="143.50">m..</text></g><g><title>metadata_register_crate (468,624 samples, 0.55%)</title><rect x="83.4624%" y="117" width="0.5466%" height="15" fill="rgb(209,9,3)"/><text x="83.7124%" y="127.50"></text></g><g><title>metadata_register_crate (222,562 samples, 0.26%)</title><rect x="83.7494%" y="101" width="0.2596%" height="15" fill="rgb(230,59,30)"/><text x="83.9994%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (169,232 samples, 0.20%)</title><rect x="84.0147%" y="181" width="0.1974%" height="15" fill="rgb(209,121,21)"/><text x="84.2647%" y="191.50"></text></g><g><title>finalize_imports (300,513 samples, 0.35%)</title><rect x="84.2241%" y="165" width="0.3505%" height="15" fill="rgb(220,109,13)"/><text x="84.4741%" y="175.50"></text></g><g><title>late_resolve_crate (1,925,292 samples, 2.25%)</title><rect x="84.6332%" y="165" width="2.2455%" height="15" fill="rgb(232,18,1)"/><text x="84.8832%" y="175.50">l..</text></g><g><title>configure_and_expand (20,818,794 samples, 24.28%)</title><rect x="62.7215%" y="197" width="24.2815%" height="15" fill="rgb(215,41,42)"/><text x="62.9715%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,392,857 samples, 2.79%)</title><rect x="84.2121%" y="181" width="2.7909%" height="15" fill="rgb(224,123,36)"/><text x="84.4621%" y="191.50">re..</text></g><g><title>drop_ast (160,262 samples, 0.19%)</title><rect x="87.0030%" y="197" width="0.1869%" height="15" fill="rgb(240,125,3)"/><text x="87.2530%" y="207.50"></text></g><g><title>early_lint_checks (338,014 samples, 0.39%)</title><rect x="87.2103%" y="197" width="0.3942%" height="15" fill="rgb(205,98,50)"/><text x="87.4603%" y="207.50"></text></g><g><title>free_global_ctxt (2,868,702 samples, 3.35%)</title><rect x="87.6045%" y="197" width="3.3458%" height="15" fill="rgb(205,185,37)"/><text x="87.8545%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (668,817 samples, 0.78%)</title><rect x="90.9504%" y="197" width="0.7801%" height="15" fill="rgb(238,207,15)"/><text x="91.2004%" y="207.50"></text></g><g><title>hir_lowering (3,012,483 samples, 3.51%)</title><rect x="91.7304%" y="197" width="3.5135%" height="15" fill="rgb(213,199,42)"/><text x="91.9804%" y="207.50">hir..</text></g><g><title>parse_crate (2,732,930 samples, 3.19%)</title><rect x="95.2997%" y="197" width="3.1875%" height="15" fill="rgb(235,201,11)"/><text x="95.5497%" y="207.50">par..</text></g><g><title>prepare_outputs (335,723 samples, 0.39%)</title><rect x="98.4991%" y="197" width="0.3916%" height="15" fill="rgb(207,46,11)"/><text x="98.7491%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (495,315 samples, 0.58%)</title><rect x="98.8907%" y="197" width="0.5777%" height="15" fill="rgb(241,35,35)"/><text x="99.1407%" y="207.50"></text></g><g><title>setup_global_ctxt (139,121 samples, 0.16%)</title><rect x="99.4814%" y="197" width="0.1623%" height="15" fill="rgb(243,32,47)"/><text x="99.7314%" y="207.50"></text></g><g><title>all (85,739,331 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (85,739,331 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (305,523 samples, 0.36%)</title><rect x="99.6437%" y="197" width="0.3563%" height="15" fill="rgb(243,110,44)"/><text x="99.8937%" y="207.50"></text></g></svg></svg>