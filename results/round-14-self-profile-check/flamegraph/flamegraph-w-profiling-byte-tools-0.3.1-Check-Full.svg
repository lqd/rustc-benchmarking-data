<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (40,860 samples, 0.17%)</title><rect x="10.3921%" y="101" width="0.1654%" height="15" fill="rgb(227,0,7)"/><text x="10.6421%" y="111.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (38,510 samples, 0.16%)</title><rect x="10.4016%" y="85" width="0.1559%" height="15" fill="rgb(217,0,24)"/><text x="10.6516%" y="95.50"></text></g><g><title>param_env (78,730 samples, 0.32%)</title><rect x="10.5574%" y="101" width="0.3186%" height="15" fill="rgb(221,193,54)"/><text x="10.8074%" y="111.50"></text></g><g><title>item_attrs (72,161 samples, 0.29%)</title><rect x="11.5118%" y="69" width="0.2920%" height="15" fill="rgb(248,212,6)"/><text x="11.7618%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (69,921 samples, 0.28%)</title><rect x="11.5209%" y="53" width="0.2830%" height="15" fill="rgb(208,68,35)"/><text x="11.7709%" y="63.50"></text></g><g><title>codegen_fn_attrs (109,511 samples, 0.44%)</title><rect x="11.3714%" y="85" width="0.4432%" height="15" fill="rgb(232,128,0)"/><text x="11.6214%" y="95.50"></text></g><g><title>is_copy_raw (166,612 samples, 0.67%)</title><rect x="13.1039%" y="69" width="0.6743%" height="15" fill="rgb(207,160,47)"/><text x="13.3539%" y="79.50"></text></g><g><title>evaluate_obligation (156,092 samples, 0.63%)</title><rect x="13.1465%" y="53" width="0.6317%" height="15" fill="rgb(228,23,34)"/><text x="13.3965%" y="63.50"></text></g><g><title>trait_impls_of (78,760 samples, 0.32%)</title><rect x="13.4595%" y="37" width="0.3188%" height="15" fill="rgb(218,30,26)"/><text x="13.7095%" y="47.50"></text></g><g><title>resolve_instance (56,542 samples, 0.23%)</title><rect x="13.7782%" y="69" width="0.2288%" height="15" fill="rgb(220,122,19)"/><text x="14.0282%" y="79.50"></text></g><g><title>thir_body (146,832 samples, 0.59%)</title><rect x="14.0250%" y="69" width="0.5942%" height="15" fill="rgb(250,228,42)"/><text x="14.2750%" y="79.50"></text></g><g><title>lit_to_const (29,551 samples, 0.12%)</title><rect x="14.4997%" y="53" width="0.1196%" height="15" fill="rgb(240,193,28)"/><text x="14.7497%" y="63.50"></text></g><g><title>mir_const (1,217,403 samples, 4.93%)</title><rect x="9.7028%" y="117" width="4.9270%" height="15" fill="rgb(216,20,37)"/><text x="9.9528%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (927,501 samples, 3.75%)</title><rect x="10.8761%" y="101" width="3.7537%" height="15" fill="rgb(206,188,39)"/><text x="11.1261%" y="111.50">unsa..</text></g><g><title>mir_built (695,598 samples, 2.82%)</title><rect x="11.8146%" y="85" width="2.8152%" height="15" fill="rgb(217,207,13)"/><text x="12.0646%" y="95.50">mi..</text></g><g><title>mir_promoted (1,392,145 samples, 5.63%)</title><rect x="9.0407%" y="133" width="5.6342%" height="15" fill="rgb(231,73,38)"/><text x="9.2907%" y="143.50">mir_pro..</text></g><g><title>MIR_borrow_checking (2,945,262 samples, 11.92%)</title><rect x="3.2121%" y="165" width="11.9198%" height="15" fill="rgb(225,20,46)"/><text x="3.4621%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (2,932,061 samples, 11.87%)</title><rect x="3.2655%" y="149" width="11.8664%" height="15" fill="rgb(210,31,41)"/><text x="3.5155%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (112,931 samples, 0.46%)</title><rect x="14.6748%" y="133" width="0.4570%" height="15" fill="rgb(221,200,47)"/><text x="14.9248%" y="143.50"></text></g><g><title>hir_owner (31,450 samples, 0.13%)</title><rect x="15.5031%" y="149" width="0.1273%" height="15" fill="rgb(226,26,5)"/><text x="15.7531%" y="159.50"></text></g><g><title>hir_module_items (115,971 samples, 0.47%)</title><rect x="15.1638%" y="165" width="0.4693%" height="15" fill="rgb(249,33,26)"/><text x="15.4138%" y="175.50"></text></g><g><title>get_lang_items (52,220 samples, 0.21%)</title><rect x="16.3652%" y="117" width="0.2113%" height="15" fill="rgb(235,183,28)"/><text x="16.6152%" y="127.50"></text></g><g><title>should_inherit_track_caller (34,521 samples, 0.14%)</title><rect x="16.5765%" y="117" width="0.1397%" height="15" fill="rgb(221,5,38)"/><text x="16.8265%" y="127.50"></text></g><g><title>codegen_fn_attrs (214,752 samples, 0.87%)</title><rect x="15.9927%" y="133" width="0.8691%" height="15" fill="rgb(247,18,42)"/><text x="16.2427%" y="143.50"></text></g><g><title>supported_target_features (35,980 samples, 0.15%)</title><rect x="16.7162%" y="117" width="0.1456%" height="15" fill="rgb(241,131,45)"/><text x="16.9662%" y="127.50"></text></g><g><title>check_mod_attrs (275,583 samples, 1.12%)</title><rect x="15.7474%" y="149" width="1.1153%" height="15" fill="rgb(249,31,29)"/><text x="15.9974%" y="159.50"></text></g><g><title>check_mod_const_bodies (30,600 samples, 0.12%)</title><rect x="16.8627%" y="149" width="0.1238%" height="15" fill="rgb(225,111,53)"/><text x="17.1127%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (92,401 samples, 0.37%)</title><rect x="17.0413%" y="149" width="0.3740%" height="15" fill="rgb(238,160,17)"/><text x="17.2913%" y="159.50"></text></g><g><title>looking_for_derive_registrar (26,830 samples, 0.11%)</title><rect x="17.4201%" y="149" width="0.1086%" height="15" fill="rgb(214,148,48)"/><text x="17.6701%" y="159.50"></text></g><g><title>misc_checking_1 (472,315 samples, 1.91%)</title><rect x="15.6367%" y="165" width="1.9115%" height="15" fill="rgb(232,36,49)"/><text x="15.8867%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (95,081 samples, 0.38%)</title><rect x="17.5579%" y="149" width="0.3848%" height="15" fill="rgb(209,103,24)"/><text x="17.8079%" y="159.50"></text></g><g><title>check_mod_liveness (77,331 samples, 0.31%)</title><rect x="17.6298%" y="133" width="0.3130%" height="15" fill="rgb(229,88,8)"/><text x="17.8798%" y="143.50"></text></g><g><title>misc_checking_2 (227,453 samples, 0.92%)</title><rect x="17.5483%" y="165" width="0.9205%" height="15" fill="rgb(213,181,19)"/><text x="17.7983%" y="175.50"></text></g><g><title>match_checking (129,982 samples, 0.53%)</title><rect x="17.9427%" y="149" width="0.5261%" height="15" fill="rgb(254,191,54)"/><text x="18.1927%" y="159.50"></text></g><g><title>check_match (119,372 samples, 0.48%)</title><rect x="17.9857%" y="133" width="0.4831%" height="15" fill="rgb(241,83,37)"/><text x="18.2357%" y="143.50"></text></g><g><title>check_private_in_public (25,930 samples, 0.10%)</title><rect x="18.5195%" y="149" width="0.1049%" height="15" fill="rgb(233,36,39)"/><text x="18.7695%" y="159.50"></text></g><g><title>death_checking (90,651 samples, 0.37%)</title><rect x="18.6244%" y="149" width="0.3669%" height="15" fill="rgb(226,3,54)"/><text x="18.8744%" y="159.50"></text></g><g><title>lint_levels (29,340 samples, 0.12%)</title><rect x="18.8725%" y="133" width="0.1187%" height="15" fill="rgb(245,192,40)"/><text x="19.1225%" y="143.50"></text></g><g><title>param_env (70,451 samples, 0.29%)</title><rect x="19.2832%" y="117" width="0.2851%" height="15" fill="rgb(238,167,29)"/><text x="19.5332%" y="127.50"></text></g><g><title>predicates_of (32,590 samples, 0.13%)</title><rect x="19.4364%" y="101" width="0.1319%" height="15" fill="rgb(232,182,51)"/><text x="19.6864%" y="111.50"></text></g><g><title>predicates_defined_on (28,450 samples, 0.12%)</title><rect x="19.4532%" y="85" width="0.1151%" height="15" fill="rgb(231,60,39)"/><text x="19.7032%" y="95.50"></text></g><g><title>crate_lints (142,822 samples, 0.58%)</title><rect x="19.0026%" y="133" width="0.5780%" height="15" fill="rgb(208,69,12)"/><text x="19.2526%" y="143.50"></text></g><g><title>lint_checking (199,382 samples, 0.81%)</title><rect x="18.9913%" y="149" width="0.8069%" height="15" fill="rgb(235,93,37)"/><text x="19.2413%" y="159.50"></text></g><g><title>module_lints (53,760 samples, 0.22%)</title><rect x="19.5806%" y="133" width="0.2176%" height="15" fill="rgb(213,116,39)"/><text x="19.8306%" y="143.50"></text></g><g><title>lint_mod (50,300 samples, 0.20%)</title><rect x="19.5946%" y="117" width="0.2036%" height="15" fill="rgb(222,207,29)"/><text x="19.8446%" y="127.50"></text></g><g><title>privacy_access_levels (64,941 samples, 0.26%)</title><rect x="19.7982%" y="149" width="0.2628%" height="15" fill="rgb(206,96,30)"/><text x="20.0482%" y="159.50"></text></g><g><title>privacy_checking_modules (65,331 samples, 0.26%)</title><rect x="20.0610%" y="149" width="0.2644%" height="15" fill="rgb(218,138,4)"/><text x="20.3110%" y="159.50"></text></g><g><title>check_mod_privacy (63,081 samples, 0.26%)</title><rect x="20.0701%" y="133" width="0.2553%" height="15" fill="rgb(250,191,14)"/><text x="20.3201%" y="143.50"></text></g><g><title>misc_checking_3 (504,826 samples, 2.04%)</title><rect x="18.4688%" y="165" width="2.0431%" height="15" fill="rgb(239,60,40)"/><text x="18.7188%" y="175.50">m..</text></g><g><title>unused_lib_feature_checking (46,071 samples, 0.19%)</title><rect x="20.3254%" y="149" width="0.1865%" height="15" fill="rgb(206,27,48)"/><text x="20.5754%" y="159.50"></text></g><g><title>coherence_checking (25,640 samples, 0.10%)</title><rect x="20.6155%" y="149" width="0.1038%" height="15" fill="rgb(225,35,8)"/><text x="20.8655%" y="159.50"></text></g><g><title>associated_item (263,103 samples, 1.06%)</title><rect x="31.1638%" y="85" width="1.0648%" height="15" fill="rgb(250,213,24)"/><text x="31.4138%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (205,653 samples, 0.83%)</title><rect x="31.3963%" y="69" width="0.8323%" height="15" fill="rgb(247,123,22)"/><text x="31.6463%" y="79.50"></text></g><g><title>associated_items (359,803 samples, 1.46%)</title><rect x="30.8160%" y="101" width="1.4562%" height="15" fill="rgb(231,138,38)"/><text x="31.0660%" y="111.50"></text></g><g><title>impl_trait_ref (40,860 samples, 0.17%)</title><rect x="33.2851%" y="85" width="0.1654%" height="15" fill="rgb(231,145,46)"/><text x="33.5351%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (32,640 samples, 0.13%)</title><rect x="33.3183%" y="69" width="0.1321%" height="15" fill="rgb(251,118,11)"/><text x="33.5683%" y="79.50"></text></g><g><title>predicates_of (62,110 samples, 0.25%)</title><rect x="33.4607%" y="85" width="0.2514%" height="15" fill="rgb(217,147,25)"/><text x="33.7107%" y="95.50"></text></g><g><title>predicates_defined_on (49,340 samples, 0.20%)</title><rect x="33.5123%" y="69" width="0.1997%" height="15" fill="rgb(247,81,37)"/><text x="33.7623%" y="79.50"></text></g><g><title>evaluate_obligation (458,915 samples, 1.86%)</title><rect x="32.3304%" y="101" width="1.8573%" height="15" fill="rgb(209,12,38)"/><text x="32.5804%" y="111.50">e..</text></g><g><title>trait_impls_of (115,480 samples, 0.47%)</title><rect x="33.7204%" y="85" width="0.4674%" height="15" fill="rgb(227,1,9)"/><text x="33.9704%" y="95.50"></text></g><g><title>implementations_of_trait (34,010 samples, 0.14%)</title><rect x="34.0501%" y="69" width="0.1376%" height="15" fill="rgb(248,47,43)"/><text x="34.3001%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (28,800 samples, 0.12%)</title><rect x="34.0712%" y="53" width="0.1166%" height="15" fill="rgb(221,10,30)"/><text x="34.3212%" y="63.50"></text></g><g><title>fn_sig (87,290 samples, 0.35%)</title><rect x="34.2138%" y="101" width="0.3533%" height="15" fill="rgb(210,229,1)"/><text x="34.4638%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (80,140 samples, 0.32%)</title><rect x="34.2427%" y="85" width="0.3243%" height="15" fill="rgb(222,148,37)"/><text x="34.4927%" y="95.50"></text></g><g><title>generics_of (60,351 samples, 0.24%)</title><rect x="34.5671%" y="101" width="0.2442%" height="15" fill="rgb(234,67,33)"/><text x="34.8171%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (47,190 samples, 0.19%)</title><rect x="34.6203%" y="85" width="0.1910%" height="15" fill="rgb(247,98,35)"/><text x="34.8703%" y="95.50"></text></g><g><title>associated_item (122,772 samples, 0.50%)</title><rect x="34.8372%" y="69" width="0.4969%" height="15" fill="rgb(247,138,52)"/><text x="35.0872%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (121,522 samples, 0.49%)</title><rect x="34.8422%" y="53" width="0.4918%" height="15" fill="rgb(213,79,30)"/><text x="35.0922%" y="63.50"></text></g><g><title>impl_item_implementor_ids (130,402 samples, 0.53%)</title><rect x="34.8113%" y="101" width="0.5278%" height="15" fill="rgb(246,177,23)"/><text x="35.0613%" y="111.50"></text></g><g><title>associated_items (126,632 samples, 0.51%)</title><rect x="34.8266%" y="85" width="0.5125%" height="15" fill="rgb(230,62,27)"/><text x="35.0766%" y="95.50"></text></g><g><title>impl_trait_ref (40,180 samples, 0.16%)</title><rect x="35.3672%" y="101" width="0.1626%" height="15" fill="rgb(216,154,8)"/><text x="35.6172%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (34,840 samples, 0.14%)</title><rect x="35.3888%" y="85" width="0.1410%" height="15" fill="rgb(244,35,45)"/><text x="35.6388%" y="95.50"></text></g><g><title>item_attrs (131,351 samples, 0.53%)</title><rect x="35.5642%" y="101" width="0.5316%" height="15" fill="rgb(251,115,12)"/><text x="35.8142%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (127,051 samples, 0.51%)</title><rect x="35.5816%" y="85" width="0.5142%" height="15" fill="rgb(240,54,50)"/><text x="35.8316%" y="95.50"></text></g><g><title>method_autoderef_steps (129,812 samples, 0.53%)</title><rect x="36.1403%" y="101" width="0.5254%" height="15" fill="rgb(233,84,52)"/><text x="36.3903%" y="111.50"></text></g><g><title>evaluate_obligation (83,211 samples, 0.34%)</title><rect x="36.3289%" y="85" width="0.3368%" height="15" fill="rgb(207,117,47)"/><text x="36.5789%" y="95.50"></text></g><g><title>trait_impls_of (32,120 samples, 0.13%)</title><rect x="36.5357%" y="69" width="0.1300%" height="15" fill="rgb(249,43,39)"/><text x="36.7857%" y="79.50"></text></g><g><title>explicit_predicates_of (46,701 samples, 0.19%)</title><rect x="37.0490%" y="69" width="0.1890%" height="15" fill="rgb(209,38,44)"/><text x="37.2990%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (34,321 samples, 0.14%)</title><rect x="37.0991%" y="53" width="0.1389%" height="15" fill="rgb(236,212,23)"/><text x="37.3491%" y="63.50"></text></g><g><title>predicates_of (137,402 samples, 0.56%)</title><rect x="36.7654%" y="101" width="0.5561%" height="15" fill="rgb(242,79,21)"/><text x="37.0154%" y="111.50"></text></g><g><title>predicates_defined_on (97,312 samples, 0.39%)</title><rect x="36.9277%" y="85" width="0.3938%" height="15" fill="rgb(211,96,35)"/><text x="37.1777%" y="95.50"></text></g><g><title>trait_impls_of (99,952 samples, 0.40%)</title><rect x="37.3995%" y="101" width="0.4045%" height="15" fill="rgb(253,215,40)"/><text x="37.6495%" y="111.50"></text></g><g><title>implementations_of_trait (26,831 samples, 0.11%)</title><rect x="37.6954%" y="85" width="0.1086%" height="15" fill="rgb(211,81,21)"/><text x="37.9454%" y="95.50"></text></g><g><title>type_of (65,312 samples, 0.26%)</title><rect x="37.8040%" y="101" width="0.2643%" height="15" fill="rgb(208,190,38)"/><text x="38.0540%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (60,782 samples, 0.25%)</title><rect x="37.8224%" y="85" width="0.2460%" height="15" fill="rgb(235,213,38)"/><text x="38.0724%" y="95.50"></text></g><g><title>item_bodies_checking (4,288,777 samples, 17.36%)</title><rect x="20.7351%" y="149" width="17.3572%" height="15" fill="rgb(237,122,38)"/><text x="20.9851%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,285,797 samples, 17.35%)</title><rect x="20.7471%" y="133" width="17.3451%" height="15" fill="rgb(244,218,35)"/><text x="20.9971%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (4,275,747 samples, 17.30%)</title><rect x="20.7878%" y="117" width="17.3044%" height="15" fill="rgb(240,68,47)"/><text x="21.0378%" y="127.50">typeck</text></g><g><title>fn_sig (74,201 samples, 0.30%)</title><rect x="38.3854%" y="117" width="0.3003%" height="15" fill="rgb(210,16,53)"/><text x="38.6354%" y="127.50"></text></g><g><title>named_region_map (71,811 samples, 0.29%)</title><rect x="38.7791%" y="101" width="0.2906%" height="15" fill="rgb(235,124,12)"/><text x="39.0291%" y="111.50"></text></g><g><title>resolve_lifetimes (63,191 samples, 0.26%)</title><rect x="38.8140%" y="85" width="0.2557%" height="15" fill="rgb(224,169,11)"/><text x="39.0640%" y="95.50"></text></g><g><title>generics_of (109,481 samples, 0.44%)</title><rect x="38.6857%" y="117" width="0.4431%" height="15" fill="rgb(250,166,2)"/><text x="38.9357%" y="127.50"></text></g><g><title>explicit_predicates_of (25,270 samples, 0.10%)</title><rect x="39.1946%" y="85" width="0.1023%" height="15" fill="rgb(242,216,29)"/><text x="39.4446%" y="95.50"></text></g><g><title>predicates_of (49,230 samples, 0.20%)</title><rect x="39.1287%" y="117" width="0.1992%" height="15" fill="rgb(230,116,27)"/><text x="39.3787%" y="127.50"></text></g><g><title>predicates_defined_on (44,080 samples, 0.18%)</title><rect x="39.1496%" y="101" width="0.1784%" height="15" fill="rgb(228,99,48)"/><text x="39.3996%" y="111.50"></text></g><g><title>type_collecting (316,954 samples, 1.28%)</title><rect x="38.1190%" y="149" width="1.2827%" height="15" fill="rgb(253,11,6)"/><text x="38.3690%" y="159.50"></text></g><g><title>collect_mod_item_types (297,994 samples, 1.21%)</title><rect x="38.1957%" y="133" width="1.2060%" height="15" fill="rgb(247,143,39)"/><text x="38.4457%" y="143.50"></text></g><g><title>evaluate_obligation (67,430 samples, 0.27%)</title><rect x="41.4813%" y="117" width="0.2729%" height="15" fill="rgb(236,97,10)"/><text x="41.7313%" y="127.50"></text></g><g><title>implied_outlives_bounds (131,182 samples, 0.53%)</title><rect x="41.7542%" y="117" width="0.5309%" height="15" fill="rgb(233,208,19)"/><text x="42.0042%" y="127.50"></text></g><g><title>param_env (207,232 samples, 0.84%)</title><rect x="42.2851%" y="117" width="0.8387%" height="15" fill="rgb(216,164,2)"/><text x="42.5351%" y="127.50"></text></g><g><title>analysis (10,036,071 samples, 40.62%)</title><rect x="2.6568%" y="181" width="40.6171%" height="15" fill="rgb(220,129,5)"/><text x="2.9068%" y="191.50">analysis</text></g><g><title>type_check_crate (5,624,272 samples, 22.76%)</title><rect x="20.5119%" y="165" width="22.7621%" height="15" fill="rgb(242,17,10)"/><text x="20.7619%" y="175.50">type_check_crate</text></g><g><title>wf_checking (955,931 samples, 3.87%)</title><rect x="39.4052%" y="149" width="3.8688%" height="15" fill="rgb(242,107,0)"/><text x="39.6552%" y="159.50">wf_c..</text></g><g><title>check_item_well_formed (920,650 samples, 3.73%)</title><rect x="39.5479%" y="133" width="3.7260%" height="15" fill="rgb(251,28,31)"/><text x="39.7979%" y="143.50">chec..</text></g><g><title>region_scope_tree (37,090 samples, 0.15%)</title><rect x="43.1238%" y="117" width="0.1501%" height="15" fill="rgb(233,223,10)"/><text x="43.3738%" y="127.50"></text></g><g><title>codegen_crate (426,685 samples, 1.73%)</title><rect x="43.3207%" y="181" width="1.7268%" height="15" fill="rgb(215,21,27)"/><text x="43.5707%" y="191.50"></text></g><g><title>AST_validation (79,201 samples, 0.32%)</title><rect x="46.0298%" y="165" width="0.3205%" height="15" fill="rgb(232,23,21)"/><text x="46.2798%" y="175.50"></text></g><g><title>crate_injection (99,171 samples, 0.40%)</title><rect x="46.4372%" y="165" width="0.4014%" height="15" fill="rgb(244,5,23)"/><text x="46.6872%" y="175.50"></text></g><g><title>metadata_load_macro (87,881 samples, 0.36%)</title><rect x="72.8488%" y="133" width="0.3557%" height="15" fill="rgb(226,81,46)"/><text x="73.0988%" y="143.50"></text></g><g><title>macro_expand_crate (6,725,484 samples, 27.22%)</title><rect x="46.8386%" y="165" width="27.2188%" height="15" fill="rgb(247,70,30)"/><text x="47.0886%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (6,702,474 samples, 27.13%)</title><rect x="46.9317%" y="149" width="27.1257%" height="15" fill="rgb(212,68,19)"/><text x="47.1817%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (210,742 samples, 0.85%)</title><rect x="73.2045%" y="133" width="0.8529%" height="15" fill="rgb(240,187,13)"/><text x="73.4545%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (77,381 samples, 0.31%)</title><rect x="74.0729%" y="165" width="0.3132%" height="15" fill="rgb(223,113,26)"/><text x="74.3229%" y="175.50"></text></g><g><title>finalize_macro_resolutions (283,363 samples, 1.15%)</title><rect x="74.5039%" y="149" width="1.1468%" height="15" fill="rgb(206,192,2)"/><text x="74.7539%" y="159.50"></text></g><g><title>late_resolve_crate (1,112,672 samples, 4.50%)</title><rect x="75.6507%" y="149" width="4.5031%" height="15" fill="rgb(241,108,4)"/><text x="75.9007%" y="159.50">late_..</text></g><g><title>configure_and_expand (8,713,157 samples, 35.26%)</title><rect x="45.0476%" y="181" width="35.2631%" height="15" fill="rgb(247,173,49)"/><text x="45.2976%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,463,927 samples, 5.92%)</title><rect x="74.3860%" y="165" width="5.9247%" height="15" fill="rgb(224,114,35)"/><text x="74.6360%" y="175.50">resolve_..</text></g><g><title>drop_ast (34,291 samples, 0.14%)</title><rect x="80.3107%" y="181" width="0.1388%" height="15" fill="rgb(245,159,27)"/><text x="80.5607%" y="191.50"></text></g><g><title>drop_compiler (24,890 samples, 0.10%)</title><rect x="80.4495%" y="181" width="0.1007%" height="15" fill="rgb(245,172,44)"/><text x="80.6995%" y="191.50"></text></g><g><title>early_lint_checks (84,491 samples, 0.34%)</title><rect x="80.5502%" y="181" width="0.3419%" height="15" fill="rgb(236,23,11)"/><text x="80.8002%" y="191.50"></text></g><g><title>free_global_ctxt (1,592,678 samples, 6.45%)</title><rect x="80.8922%" y="181" width="6.4457%" height="15" fill="rgb(205,117,38)"/><text x="81.1422%" y="191.50">free_glo..</text></g><g><title>crate_hash (141,401 samples, 0.57%)</title><rect x="88.4775%" y="165" width="0.5723%" height="15" fill="rgb(237,72,25)"/><text x="88.7275%" y="175.50"></text></g><g><title>mir_keys (31,590 samples, 0.13%)</title><rect x="89.1573%" y="165" width="0.1278%" height="15" fill="rgb(244,70,9)"/><text x="89.4073%" y="175.50"></text></g><g><title>generate_crate_metadata (509,946 samples, 2.06%)</title><rect x="87.3379%" y="181" width="2.0638%" height="15" fill="rgb(217,125,39)"/><text x="87.5879%" y="191.50">g..</text></g><g><title>hir_lowering (452,035 samples, 1.83%)</title><rect x="89.4017%" y="181" width="1.8294%" height="15" fill="rgb(235,36,10)"/><text x="89.6517%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (25,840 samples, 0.10%)</title><rect x="91.2989%" y="165" width="0.1046%" height="15" fill="rgb(251,123,47)"/><text x="91.5489%" y="175.50"></text></g><g><title>link (67,471 samples, 0.27%)</title><rect x="91.2311%" y="181" width="0.2731%" height="15" fill="rgb(221,13,13)"/><text x="91.4811%" y="191.50"></text></g><g><title>parse_crate (664,318 samples, 2.69%)</title><rect x="91.5042%" y="181" width="2.6886%" height="15" fill="rgb(238,131,9)"/><text x="91.7542%" y="191.50">pa..</text></g><g><title>prepare_outputs (287,453 samples, 1.16%)</title><rect x="94.2318%" y="181" width="1.1634%" height="15" fill="rgb(211,50,8)"/><text x="94.4818%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (550,506 samples, 2.23%)</title><rect x="95.3952%" y="181" width="2.2280%" height="15" fill="rgb(245,182,24)"/><text x="95.6452%" y="191.50">s..</text></g><g><title>setup_global_ctxt (117,352 samples, 0.47%)</title><rect x="97.6929%" y="181" width="0.4749%" height="15" fill="rgb(242,14,37)"/><text x="97.9429%" y="191.50"></text></g><g><title>all (24,708,984 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (24,708,984 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (452,705 samples, 1.83%)</title><rect x="98.1679%" y="181" width="1.8321%" height="15" fill="rgb(209,9,3)"/><text x="98.4179%" y="191.50">w..</text></g></svg></svg>