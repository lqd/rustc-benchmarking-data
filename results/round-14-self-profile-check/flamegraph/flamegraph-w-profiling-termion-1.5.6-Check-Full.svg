<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (387,105 samples, 0.10%)</title><rect x="13.9459%" y="133" width="0.1009%" height="15" fill="rgb(227,0,7)"/><text x="14.1959%" y="143.50"></text></g><g><title>param_env (509,965 samples, 0.13%)</title><rect x="15.9465%" y="101" width="0.1329%" height="15" fill="rgb(217,0,24)"/><text x="16.1965%" y="111.50"></text></g><g><title>item_attrs (520,985 samples, 0.14%)</title><rect x="16.6220%" y="69" width="0.1358%" height="15" fill="rgb(221,193,54)"/><text x="16.8720%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (506,414 samples, 0.13%)</title><rect x="16.6258%" y="53" width="0.1320%" height="15" fill="rgb(248,212,6)"/><text x="16.8758%" y="63.50"></text></g><g><title>codegen_fn_attrs (717,607 samples, 0.19%)</title><rect x="16.5791%" y="85" width="0.1870%" height="15" fill="rgb(208,68,35)"/><text x="16.8291%" y="95.50"></text></g><g><title>adt_drop_tys (660,455 samples, 0.17%)</title><rect x="19.9724%" y="53" width="0.1721%" height="15" fill="rgb(232,128,0)"/><text x="20.2224%" y="63.50"></text></g><g><title>is_copy_raw (1,591,948 samples, 0.41%)</title><rect x="20.1445%" y="53" width="0.4148%" height="15" fill="rgb(207,160,47)"/><text x="20.3945%" y="63.50"></text></g><g><title>evaluate_obligation (1,306,144 samples, 0.34%)</title><rect x="20.2189%" y="37" width="0.3403%" height="15" fill="rgb(228,23,34)"/><text x="20.4689%" y="47.50"></text></g><g><title>needs_drop_raw (2,558,469 samples, 0.67%)</title><rect x="19.9022%" y="69" width="0.6667%" height="15" fill="rgb(218,30,26)"/><text x="20.1522%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (414,346 samples, 0.11%)</title><rect x="20.6684%" y="53" width="0.1080%" height="15" fill="rgb(220,122,19)"/><text x="20.9184%" y="63.50"></text></g><g><title>resolve_instance (1,313,578 samples, 0.34%)</title><rect x="20.5689%" y="69" width="0.3423%" height="15" fill="rgb(250,228,42)"/><text x="20.8189%" y="79.50"></text></g><g><title>thir_body (4,257,213 samples, 1.11%)</title><rect x="20.9467%" y="69" width="1.1093%" height="15" fill="rgb(240,193,28)"/><text x="21.1967%" y="79.50"></text></g><g><title>mir_const (27,109,795 samples, 7.06%)</title><rect x="15.0149%" y="117" width="7.0641%" height="15" fill="rgb(216,20,37)"/><text x="15.2649%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (23,024,694 samples, 6.00%)</title><rect x="16.0794%" y="101" width="5.9996%" height="15" fill="rgb(206,188,39)"/><text x="16.3294%" y="111.50">unsafety..</text></g><g><title>mir_built (20,386,147 samples, 5.31%)</title><rect x="16.7669%" y="85" width="5.3121%" height="15" fill="rgb(217,207,13)"/><text x="17.0169%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (717,696 samples, 0.19%)</title><rect x="22.0790%" y="117" width="0.1870%" height="15" fill="rgb(231,73,38)"/><text x="22.3290%" y="127.50"></text></g><g><title>mir_promoted (31,521,136 samples, 8.21%)</title><rect x="14.0527%" y="133" width="8.2135%" height="15" fill="rgb(225,20,46)"/><text x="14.3027%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (711,507 samples, 0.19%)</title><rect x="22.2682%" y="133" width="0.1854%" height="15" fill="rgb(210,31,41)"/><text x="22.5182%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (946,950 samples, 0.25%)</title><rect x="22.4536%" y="133" width="0.2467%" height="15" fill="rgb(221,200,47)"/><text x="22.7036%" y="143.50"></text></g><g><title>normalize_projection_ty (605,727 samples, 0.16%)</title><rect x="22.5425%" y="117" width="0.1578%" height="15" fill="rgb(226,26,5)"/><text x="22.7925%" y="127.50"></text></g><g><title>type_op_normalize_predicate (706,679 samples, 0.18%)</title><rect x="22.7004%" y="133" width="0.1841%" height="15" fill="rgb(249,33,26)"/><text x="22.9504%" y="143.50"></text></g><g><title>normalize_projection_ty (463,134 samples, 0.12%)</title><rect x="22.7638%" y="117" width="0.1207%" height="15" fill="rgb(235,183,28)"/><text x="23.0138%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,184,967 samples, 1.35%)</title><rect x="22.8845%" y="133" width="1.3511%" height="15" fill="rgb(221,5,38)"/><text x="23.1345%" y="143.50"></text></g><g><title>MIR_borrow_checking (91,004,503 samples, 23.71%)</title><rect x="0.5245%" y="165" width="23.7133%" height="15" fill="rgb(247,18,42)"/><text x="0.7745%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (90,283,355 samples, 23.53%)</title><rect x="0.7124%" y="149" width="23.5254%" height="15" fill="rgb(241,131,45)"/><text x="0.9624%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (494,605 samples, 0.13%)</title><rect x="24.2378%" y="165" width="0.1289%" height="15" fill="rgb(249,31,29)"/><text x="24.4878%" y="175.50"></text></g><g><title>hir_module_items (844,470 samples, 0.22%)</title><rect x="24.3666%" y="165" width="0.2200%" height="15" fill="rgb(225,111,53)"/><text x="24.6166%" y="175.50"></text></g><g><title>should_inherit_track_caller (657,876 samples, 0.17%)</title><rect x="24.9398%" y="117" width="0.1714%" height="15" fill="rgb(238,160,17)"/><text x="25.1898%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,056,934 samples, 0.28%)</title><rect x="24.8399%" y="133" width="0.2754%" height="15" fill="rgb(214,148,48)"/><text x="25.0899%" y="143.50"></text></g><g><title>check_mod_attrs (1,984,833 samples, 0.52%)</title><rect x="24.5981%" y="149" width="0.5172%" height="15" fill="rgb(232,36,49)"/><text x="24.8481%" y="159.50"></text></g><g><title>check_mod_const_bodies (538,164 samples, 0.14%)</title><rect x="25.1153%" y="149" width="0.1402%" height="15" fill="rgb(209,103,24)"/><text x="25.3653%" y="159.50"></text></g><g><title>lookup_deprecation_entry (546,057 samples, 0.14%)</title><rect x="25.4687%" y="133" width="0.1423%" height="15" fill="rgb(229,88,8)"/><text x="25.7187%" y="143.50"></text></g><g><title>stability_index (457,375 samples, 0.12%)</title><rect x="25.4918%" y="117" width="0.1192%" height="15" fill="rgb(213,181,19)"/><text x="25.7418%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,192,803 samples, 0.31%)</title><rect x="25.3350%" y="149" width="0.3108%" height="15" fill="rgb(254,191,54)"/><text x="25.5850%" y="159.50"></text></g><g><title>misc_checking_1 (4,279,137 samples, 1.12%)</title><rect x="24.5868%" y="165" width="1.1150%" height="15" fill="rgb(241,83,37)"/><text x="24.8368%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,697,829 samples, 0.44%)</title><rect x="25.7023%" y="149" width="0.4424%" height="15" fill="rgb(233,36,39)"/><text x="25.9523%" y="159.50"></text></g><g><title>check_mod_liveness (1,350,055 samples, 0.35%)</title><rect x="25.7929%" y="133" width="0.3518%" height="15" fill="rgb(226,3,54)"/><text x="26.0429%" y="143.50"></text></g><g><title>misc_checking_2 (4,419,340 samples, 1.15%)</title><rect x="25.7019%" y="165" width="1.1516%" height="15" fill="rgb(245,192,40)"/><text x="25.9519%" y="175.50"></text></g><g><title>match_checking (2,719,951 samples, 0.71%)</title><rect x="26.1447%" y="149" width="0.7087%" height="15" fill="rgb(238,167,29)"/><text x="26.3947%" y="159.50"></text></g><g><title>check_match (2,550,989 samples, 0.66%)</title><rect x="26.1887%" y="133" width="0.6647%" height="15" fill="rgb(232,182,51)"/><text x="26.4387%" y="143.50"></text></g><g><title>check_private_in_public (957,411 samples, 0.25%)</title><rect x="26.8558%" y="149" width="0.2495%" height="15" fill="rgb(231,60,39)"/><text x="27.1058%" y="159.50"></text></g><g><title>death_checking (1,805,080 samples, 0.47%)</title><rect x="27.1053%" y="149" width="0.4704%" height="15" fill="rgb(208,69,12)"/><text x="27.3553%" y="159.50"></text></g><g><title>param_env (663,937 samples, 0.17%)</title><rect x="28.2084%" y="117" width="0.1730%" height="15" fill="rgb(235,93,37)"/><text x="28.4584%" y="127.50"></text></g><g><title>crate_lints (4,351,349 samples, 1.13%)</title><rect x="27.5762%" y="133" width="1.1338%" height="15" fill="rgb(213,116,39)"/><text x="27.8262%" y="143.50"></text></g><g><title>type_of (1,151,882 samples, 0.30%)</title><rect x="28.4099%" y="117" width="0.3001%" height="15" fill="rgb(222,207,29)"/><text x="28.6599%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (920,921 samples, 0.24%)</title><rect x="28.4701%" y="101" width="0.2400%" height="15" fill="rgb(206,96,30)"/><text x="28.7201%" y="111.50"></text></g><g><title>lint_checking (6,188,570 samples, 1.61%)</title><rect x="27.5756%" y="149" width="1.6126%" height="15" fill="rgb(218,138,4)"/><text x="27.8256%" y="159.50"></text></g><g><title>module_lints (1,835,151 samples, 0.48%)</title><rect x="28.7100%" y="133" width="0.4782%" height="15" fill="rgb(250,191,14)"/><text x="28.9600%" y="143.50"></text></g><g><title>lint_mod (1,819,991 samples, 0.47%)</title><rect x="28.7140%" y="117" width="0.4742%" height="15" fill="rgb(239,60,40)"/><text x="28.9640%" y="127.50"></text></g><g><title>privacy_access_levels (1,562,197 samples, 0.41%)</title><rect x="29.1882%" y="149" width="0.4071%" height="15" fill="rgb(206,27,48)"/><text x="29.4382%" y="159.50"></text></g><g><title>privacy_checking_modules (3,482,518 samples, 0.91%)</title><rect x="29.5953%" y="149" width="0.9074%" height="15" fill="rgb(225,35,8)"/><text x="29.8453%" y="159.50"></text></g><g><title>check_mod_privacy (3,471,638 samples, 0.90%)</title><rect x="29.5981%" y="133" width="0.9046%" height="15" fill="rgb(250,213,24)"/><text x="29.8481%" y="143.50"></text></g><g><title>misc_checking_3 (14,039,926 samples, 3.66%)</title><rect x="26.8534%" y="165" width="3.6584%" height="15" fill="rgb(247,123,22)"/><text x="27.1034%" y="175.50">misc..</text></g><g><title>impl_parent (3,045,124 samples, 0.79%)</title><rect x="32.2347%" y="101" width="0.7935%" height="15" fill="rgb(231,138,38)"/><text x="32.4847%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,805,695 samples, 0.47%)</title><rect x="32.5577%" y="85" width="0.4705%" height="15" fill="rgb(231,145,46)"/><text x="32.8077%" y="95.50"></text></g><g><title>impl_trait_ref (6,467,426 samples, 1.69%)</title><rect x="33.0289%" y="101" width="1.6852%" height="15" fill="rgb(251,118,11)"/><text x="33.2789%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,012,526 samples, 1.31%)</title><rect x="33.4080%" y="85" width="1.3061%" height="15" fill="rgb(217,147,25)"/><text x="33.6580%" y="95.50"></text></g><g><title>trait_impls_of (1,160,724 samples, 0.30%)</title><rect x="34.7287%" y="101" width="0.3025%" height="15" fill="rgb(247,81,37)"/><text x="34.9787%" y="111.50"></text></g><g><title>coherent_trait (22,074,586 samples, 5.75%)</title><rect x="30.6004%" y="133" width="5.7520%" height="15" fill="rgb(209,12,38)"/><text x="30.8504%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (21,325,907 samples, 5.56%)</title><rect x="30.7955%" y="117" width="5.5569%" height="15" fill="rgb(227,1,9)"/><text x="31.0455%" y="127.50">special..</text></g><g><title>visible_parent_map (5,069,266 samples, 1.32%)</title><rect x="35.0315%" y="101" width="1.3209%" height="15" fill="rgb(248,47,43)"/><text x="35.2815%" y="111.50"></text></g><g><title>module_children (4,573,371 samples, 1.19%)</title><rect x="35.1607%" y="85" width="1.1917%" height="15" fill="rgb(221,10,30)"/><text x="35.4107%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,510,869 samples, 1.18%)</title><rect x="35.1770%" y="69" width="1.1754%" height="15" fill="rgb(210,229,1)"/><text x="35.4270%" y="79.50"></text></g><g><title>coherence_checking (22,369,979 samples, 5.83%)</title><rect x="30.5930%" y="149" width="5.8290%" height="15" fill="rgb(222,148,37)"/><text x="30.8430%" y="159.50">coheren..</text></g><g><title>associated_item (781,449 samples, 0.20%)</title><rect x="55.2489%" y="85" width="0.2036%" height="15" fill="rgb(234,67,33)"/><text x="55.4989%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (609,217 samples, 0.16%)</title><rect x="55.2938%" y="69" width="0.1587%" height="15" fill="rgb(247,98,35)"/><text x="55.5438%" y="79.50"></text></g><g><title>associated_items (1,140,162 samples, 0.30%)</title><rect x="55.1716%" y="101" width="0.2971%" height="15" fill="rgb(247,138,52)"/><text x="55.4216%" y="111.50"></text></g><g><title>adt_dtorck_constraint (388,186 samples, 0.10%)</title><rect x="55.7061%" y="69" width="0.1012%" height="15" fill="rgb(213,79,30)"/><text x="55.9561%" y="79.50"></text></g><g><title>adt_dtorck_constraint (616,486 samples, 0.16%)</title><rect x="55.6557%" y="85" width="0.1606%" height="15" fill="rgb(246,177,23)"/><text x="55.9057%" y="95.50"></text></g><g><title>dropck_outlives (1,259,634 samples, 0.33%)</title><rect x="55.4949%" y="101" width="0.3282%" height="15" fill="rgb(230,62,27)"/><text x="55.7449%" y="111.50"></text></g><g><title>generics_of (897,880 samples, 0.23%)</title><rect x="57.3620%" y="85" width="0.2340%" height="15" fill="rgb(216,154,8)"/><text x="57.6120%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (668,318 samples, 0.17%)</title><rect x="57.4218%" y="69" width="0.1741%" height="15" fill="rgb(244,35,45)"/><text x="57.6718%" y="79.50"></text></g><g><title>impl_trait_ref (1,181,766 samples, 0.31%)</title><rect x="57.6285%" y="85" width="0.3079%" height="15" fill="rgb(251,115,12)"/><text x="57.8785%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (965,891 samples, 0.25%)</title><rect x="57.6848%" y="69" width="0.2517%" height="15" fill="rgb(240,54,50)"/><text x="57.9348%" y="79.50"></text></g><g><title>predicates_of (542,455 samples, 0.14%)</title><rect x="57.9448%" y="85" width="0.1413%" height="15" fill="rgb(233,84,52)"/><text x="58.1948%" y="95.50"></text></g><g><title>specializes (763,609 samples, 0.20%)</title><rect x="58.0862%" y="85" width="0.1990%" height="15" fill="rgb(207,117,47)"/><text x="58.3362%" y="95.50"></text></g><g><title>param_env (435,775 samples, 0.11%)</title><rect x="58.1716%" y="69" width="0.1136%" height="15" fill="rgb(249,43,39)"/><text x="58.4216%" y="79.50"></text></g><g><title>trait_impls_of (510,827 samples, 0.13%)</title><rect x="58.2897%" y="85" width="0.1331%" height="15" fill="rgb(209,38,44)"/><text x="58.5397%" y="95.50"></text></g><g><title>evaluate_obligation (10,000,363 samples, 2.61%)</title><rect x="55.8239%" y="101" width="2.6058%" height="15" fill="rgb(236,212,23)"/><text x="56.0739%" y="111.50">ev..</text></g><g><title>generics_of (706,170 samples, 0.18%)</title><rect x="58.4973%" y="101" width="0.1840%" height="15" fill="rgb(242,79,21)"/><text x="58.7473%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (537,288 samples, 0.14%)</title><rect x="58.5413%" y="85" width="0.1400%" height="15" fill="rgb(211,96,35)"/><text x="58.7913%" y="95.50"></text></g><g><title>evaluate_obligation (444,727 samples, 0.12%)</title><rect x="58.9997%" y="85" width="0.1159%" height="15" fill="rgb(253,215,40)"/><text x="59.2497%" y="95.50"></text></g><g><title>method_autoderef_steps (954,472 samples, 0.25%)</title><rect x="58.8710%" y="101" width="0.2487%" height="15" fill="rgb(211,81,21)"/><text x="59.1210%" y="111.50"></text></g><g><title>predicates_of (538,284 samples, 0.14%)</title><rect x="59.2353%" y="101" width="0.1403%" height="15" fill="rgb(208,190,38)"/><text x="59.4853%" y="111.50"></text></g><g><title>adt_dtorck_constraint (406,006 samples, 0.11%)</title><rect x="62.8075%" y="53" width="0.1058%" height="15" fill="rgb(235,213,38)"/><text x="63.0575%" y="63.50"></text></g><g><title>adt_dtorck_constraint (762,977 samples, 0.20%)</title><rect x="62.7402%" y="69" width="0.1988%" height="15" fill="rgb(237,122,38)"/><text x="62.9902%" y="79.50"></text></g><g><title>dropck_outlives (1,054,952 samples, 0.27%)</title><rect x="62.6679%" y="85" width="0.2749%" height="15" fill="rgb(244,218,35)"/><text x="62.9179%" y="95.50"></text></g><g><title>evaluate_obligation (2,155,950 samples, 0.56%)</title><rect x="62.9428%" y="85" width="0.5618%" height="15" fill="rgb(240,68,47)"/><text x="63.1928%" y="95.50"></text></g><g><title>method_autoderef_steps (441,782 samples, 0.12%)</title><rect x="63.7000%" y="85" width="0.1151%" height="15" fill="rgb(210,16,53)"/><text x="63.9500%" y="95.50"></text></g><g><title>typeck (16,942,218 samples, 4.41%)</title><rect x="59.4844%" y="101" width="4.4147%" height="15" fill="rgb(235,124,12)"/><text x="59.7344%" y="111.50">typeck</text></g><g><title>item_bodies_checking (105,422,352 samples, 27.47%)</title><rect x="36.4742%" y="149" width="27.4702%" height="15" fill="rgb(224,169,11)"/><text x="36.7242%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (105,419,862 samples, 27.47%)</title><rect x="36.4749%" y="133" width="27.4695%" height="15" fill="rgb(250,166,2)"/><text x="36.7249%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (104,930,845 samples, 27.34%)</title><rect x="36.6023%" y="117" width="27.3421%" height="15" fill="rgb(242,216,29)"/><text x="36.8523%" y="127.50">typeck</text></g><g><title>item_types_checking (6,289,450 samples, 1.64%)</title><rect x="63.9444%" y="149" width="1.6389%" height="15" fill="rgb(230,116,27)"/><text x="64.1944%" y="159.50"></text></g><g><title>check_mod_item_types (6,275,450 samples, 1.64%)</title><rect x="63.9480%" y="133" width="1.6352%" height="15" fill="rgb(228,99,48)"/><text x="64.1980%" y="143.50"></text></g><g><title>fn_sig (1,149,262 samples, 0.30%)</title><rect x="65.9606%" y="117" width="0.2995%" height="15" fill="rgb(253,11,6)"/><text x="66.2106%" y="127.50"></text></g><g><title>named_region_map (2,448,212 samples, 0.64%)</title><rect x="66.4205%" y="101" width="0.6379%" height="15" fill="rgb(247,143,39)"/><text x="66.6705%" y="111.50"></text></g><g><title>resolve_lifetimes (2,298,910 samples, 0.60%)</title><rect x="66.4594%" y="85" width="0.5990%" height="15" fill="rgb(236,97,10)"/><text x="66.7094%" y="95.50"></text></g><g><title>lint_levels (690,788 samples, 0.18%)</title><rect x="66.8785%" y="69" width="0.1800%" height="15" fill="rgb(233,208,19)"/><text x="67.1285%" y="79.50"></text></g><g><title>generics_of (3,148,252 samples, 0.82%)</title><rect x="66.2601%" y="117" width="0.8203%" height="15" fill="rgb(216,164,2)"/><text x="66.5101%" y="127.50"></text></g><g><title>explicit_predicates_of (1,018,018 samples, 0.27%)</title><rect x="67.4327%" y="85" width="0.2653%" height="15" fill="rgb(220,129,5)"/><text x="67.6827%" y="95.50"></text></g><g><title>predicates_of (2,559,969 samples, 0.67%)</title><rect x="67.1414%" y="117" width="0.6671%" height="15" fill="rgb(242,17,10)"/><text x="67.3914%" y="127.50"></text></g><g><title>predicates_defined_on (2,227,586 samples, 0.58%)</title><rect x="67.2280%" y="101" width="0.5804%" height="15" fill="rgb(242,107,0)"/><text x="67.4780%" y="111.50"></text></g><g><title>inferred_outlives_of (423,997 samples, 0.11%)</title><rect x="67.6980%" y="85" width="0.1105%" height="15" fill="rgb(251,28,31)"/><text x="67.9480%" y="95.50"></text></g><g><title>type_collecting (9,037,011 samples, 2.35%)</title><rect x="65.5849%" y="149" width="2.3548%" height="15" fill="rgb(233,223,10)"/><text x="65.8349%" y="159.50">t..</text></g><g><title>collect_mod_item_types (9,013,721 samples, 2.35%)</title><rect x="65.5910%" y="133" width="2.3487%" height="15" fill="rgb(215,21,27)"/><text x="65.8410%" y="143.50">c..</text></g><g><title>type_of (444,595 samples, 0.12%)</title><rect x="67.8239%" y="117" width="0.1158%" height="15" fill="rgb(232,23,21)"/><text x="68.0739%" y="127.50"></text></g><g><title>evaluate_obligation (1,668,030 samples, 0.43%)</title><rect x="70.7615%" y="117" width="0.4346%" height="15" fill="rgb(244,5,23)"/><text x="71.0115%" y="127.50"></text></g><g><title>implied_outlives_bounds (565,707 samples, 0.15%)</title><rect x="71.1961%" y="117" width="0.1474%" height="15" fill="rgb(226,81,46)"/><text x="71.4461%" y="127.50"></text></g><g><title>param_env (1,295,063 samples, 0.34%)</title><rect x="71.3435%" y="117" width="0.3375%" height="15" fill="rgb(247,70,30)"/><text x="71.5935%" y="127.50"></text></g><g><title>region_scope_tree (1,589,543 samples, 0.41%)</title><rect x="71.6827%" y="117" width="0.4142%" height="15" fill="rgb(212,68,19)"/><text x="71.9327%" y="127.50"></text></g><g><title>check_impl_item_well_formed (14,816,515 samples, 3.86%)</title><rect x="68.2405%" y="133" width="3.8608%" height="15" fill="rgb(240,187,13)"/><text x="68.4905%" y="143.50">chec..</text></g><g><title>evaluate_obligation (2,920,310 samples, 0.76%)</title><rect x="74.0006%" y="117" width="0.7610%" height="15" fill="rgb(223,113,26)"/><text x="74.2506%" y="127.50"></text></g><g><title>object_safety_violations (656,667 samples, 0.17%)</title><rect x="74.8925%" y="117" width="0.1711%" height="15" fill="rgb(206,192,2)"/><text x="75.1425%" y="127.50"></text></g><g><title>param_env (1,616,988 samples, 0.42%)</title><rect x="75.0636%" y="117" width="0.4213%" height="15" fill="rgb(241,108,4)"/><text x="75.3136%" y="127.50"></text></g><g><title>region_scope_tree (443,097 samples, 0.12%)</title><rect x="75.5139%" y="117" width="0.1155%" height="15" fill="rgb(247,173,49)"/><text x="75.7639%" y="127.50"></text></g><g><title>check_item_well_formed (13,775,956 samples, 3.59%)</title><rect x="72.1012%" y="133" width="3.5896%" height="15" fill="rgb(224,114,35)"/><text x="72.3512%" y="143.50">chec..</text></g><g><title>analysis (290,404,272 samples, 75.67%)</title><rect x="0.2750%" y="181" width="75.6714%" height="15" fill="rgb(245,159,27)"/><text x="0.5250%" y="191.50">analysis</text></g><g><title>type_check_crate (174,364,350 samples, 45.43%)</title><rect x="30.5118%" y="165" width="45.4346%" height="15" fill="rgb(245,172,44)"/><text x="30.7618%" y="175.50">type_check_crate</text></g><g><title>wf_checking (30,694,951 samples, 8.00%)</title><rect x="67.9481%" y="149" width="7.9983%" height="15" fill="rgb(236,23,11)"/><text x="68.1981%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (980,570 samples, 0.26%)</title><rect x="75.6909%" y="133" width="0.2555%" height="15" fill="rgb(205,117,38)"/><text x="75.9409%" y="143.50"></text></g><g><title>codegen_crate (410,824 samples, 0.11%)</title><rect x="75.9487%" y="181" width="0.1070%" height="15" fill="rgb(237,72,25)"/><text x="76.1987%" y="191.50"></text></g><g><title>AST_validation (393,424 samples, 0.10%)</title><rect x="76.1055%" y="165" width="0.1025%" height="15" fill="rgb(244,70,9)"/><text x="76.3555%" y="175.50"></text></g><g><title>metadata_register_crate (2,770,531 samples, 0.72%)</title><rect x="89.4399%" y="133" width="0.7219%" height="15" fill="rgb(217,125,39)"/><text x="89.6899%" y="143.50"></text></g><g><title>metadata_register_crate (986,290 samples, 0.26%)</title><rect x="89.9048%" y="117" width="0.2570%" height="15" fill="rgb(235,36,10)"/><text x="90.1548%" y="127.50"></text></g><g><title>macro_expand_crate (54,181,523 samples, 14.12%)</title><rect x="76.2854%" y="165" width="14.1182%" height="15" fill="rgb(251,123,47)"/><text x="76.5354%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (54,164,113 samples, 14.11%)</title><rect x="76.2899%" y="149" width="14.1137%" height="15" fill="rgb(221,13,13)"/><text x="76.5399%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (927,741 samples, 0.24%)</title><rect x="90.1618%" y="133" width="0.2417%" height="15" fill="rgb(238,131,9)"/><text x="90.4118%" y="143.50"></text></g><g><title>finalize_macro_resolutions (795,159 samples, 0.21%)</title><rect x="90.4626%" y="149" width="0.2072%" height="15" fill="rgb(211,50,8)"/><text x="90.7126%" y="159.50"></text></g><g><title>late_resolve_crate (6,162,908 samples, 1.61%)</title><rect x="90.6698%" y="149" width="1.6059%" height="15" fill="rgb(245,182,24)"/><text x="90.9198%" y="159.50"></text></g><g><title>configure_and_expand (62,712,228 samples, 16.34%)</title><rect x="76.0557%" y="181" width="16.3411%" height="15" fill="rgb(242,14,37)"/><text x="76.3057%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (7,546,824 samples, 1.97%)</title><rect x="90.4303%" y="165" width="1.9665%" height="15" fill="rgb(246,228,12)"/><text x="90.6803%" y="175.50">r..</text></g><g><title>drop_ast (699,958 samples, 0.18%)</title><rect x="92.3968%" y="181" width="0.1824%" height="15" fill="rgb(213,55,15)"/><text x="92.6468%" y="191.50"></text></g><g><title>early_lint_checks (1,477,146 samples, 0.38%)</title><rect x="92.5860%" y="181" width="0.3849%" height="15" fill="rgb(209,9,3)"/><text x="92.8360%" y="191.50"></text></g><g><title>free_global_ctxt (5,965,016 samples, 1.55%)</title><rect x="92.9709%" y="181" width="1.5543%" height="15" fill="rgb(230,59,30)"/><text x="93.2209%" y="191.50"></text></g><g><title>generate_crate_metadata (4,757,573 samples, 1.24%)</title><rect x="94.5252%" y="181" width="1.2397%" height="15" fill="rgb(209,121,21)"/><text x="94.7752%" y="191.50"></text></g><g><title>hir_lowering (12,679,042 samples, 3.30%)</title><rect x="95.7649%" y="181" width="3.3038%" height="15" fill="rgb(220,109,13)"/><text x="96.0149%" y="191.50">hir..</text></g><g><title>parse_crate (727,928 samples, 0.19%)</title><rect x="99.0830%" y="181" width="0.1897%" height="15" fill="rgb(232,18,1)"/><text x="99.3330%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,839,971 samples, 0.48%)</title><rect x="99.3385%" y="181" width="0.4794%" height="15" fill="rgb(215,41,42)"/><text x="99.5885%" y="191.50"></text></g><g><title>all (383,770,390 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (383,770,390 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (592,517 samples, 0.15%)</title><rect x="99.8456%" y="181" width="0.1544%" height="15" fill="rgb(205,98,50)"/><text x="100.0956%" y="191.50"></text></g></svg></svg>