<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (101,851 samples, 0.27%)</title><rect x="7.8099%" y="149" width="0.2742%" height="15" fill="rgb(227,0,7)"/><text x="8.0599%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (99,731 samples, 0.27%)</title><rect x="7.8156%" y="133" width="0.2685%" height="15" fill="rgb(217,0,24)"/><text x="8.0656%" y="143.50"></text></g><g><title>codegen_fn_attrs (145,162 samples, 0.39%)</title><rect x="7.7170%" y="165" width="0.3908%" height="15" fill="rgb(221,193,54)"/><text x="7.9670%" y="175.50"></text></g><g><title>is_copy_raw (37,180 samples, 0.10%)</title><rect x="8.8854%" y="149" width="0.1001%" height="15" fill="rgb(248,212,6)"/><text x="9.1354%" y="159.50"></text></g><g><title>is_copy_raw (139,432 samples, 0.38%)</title><rect x="9.0869%" y="101" width="0.3753%" height="15" fill="rgb(208,68,35)"/><text x="9.3369%" y="111.50"></text></g><g><title>evaluate_obligation (128,992 samples, 0.35%)</title><rect x="9.1150%" y="85" width="0.3472%" height="15" fill="rgb(232,128,0)"/><text x="9.3650%" y="95.50"></text></g><g><title>adt_drop_tys (185,352 samples, 0.50%)</title><rect x="9.0603%" y="117" width="0.4989%" height="15" fill="rgb(207,160,47)"/><text x="9.3103%" y="127.50"></text></g><g><title>adt_drop_tys (296,034 samples, 0.80%)</title><rect x="9.0234%" y="133" width="0.7969%" height="15" fill="rgb(228,23,34)"/><text x="9.2734%" y="143.50"></text></g><g><title>param_env (60,761 samples, 0.16%)</title><rect x="9.6567%" y="117" width="0.1636%" height="15" fill="rgb(218,30,26)"/><text x="9.9067%" y="127.50"></text></g><g><title>explicit_predicates_of (101,791 samples, 0.27%)</title><rect x="10.1208%" y="69" width="0.2740%" height="15" fill="rgb(220,122,19)"/><text x="10.3708%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (100,481 samples, 0.27%)</title><rect x="10.1243%" y="53" width="0.2705%" height="15" fill="rgb(250,228,42)"/><text x="10.3743%" y="63.50"></text></g><g><title>predicates_of (112,831 samples, 0.30%)</title><rect x="10.0964%" y="101" width="0.3037%" height="15" fill="rgb(240,193,28)"/><text x="10.3464%" y="111.50"></text></g><g><title>predicates_defined_on (107,101 samples, 0.29%)</title><rect x="10.1118%" y="85" width="0.2883%" height="15" fill="rgb(216,20,37)"/><text x="10.3618%" y="95.50"></text></g><g><title>needs_drop_raw (828,749 samples, 2.23%)</title><rect x="8.9854%" y="149" width="2.2309%" height="15" fill="rgb(206,188,39)"/><text x="9.2354%" y="159.50">n..</text></g><g><title>is_copy_raw (518,635 samples, 1.40%)</title><rect x="9.8202%" y="133" width="1.3961%" height="15" fill="rgb(217,207,13)"/><text x="10.0702%" y="143.50"></text></g><g><title>evaluate_obligation (502,125 samples, 1.35%)</title><rect x="9.8647%" y="117" width="1.3516%" height="15" fill="rgb(231,73,38)"/><text x="10.1147%" y="127.50"></text></g><g><title>trait_impls_of (299,903 samples, 0.81%)</title><rect x="10.4090%" y="101" width="0.8073%" height="15" fill="rgb(225,20,46)"/><text x="10.6590%" y="111.50"></text></g><g><title>implementations_of_trait (64,840 samples, 0.17%)</title><rect x="11.0418%" y="85" width="0.1745%" height="15" fill="rgb(210,31,41)"/><text x="11.2918%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (55,240 samples, 0.15%)</title><rect x="11.0676%" y="69" width="0.1487%" height="15" fill="rgb(221,200,47)"/><text x="11.3176%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (77,531 samples, 0.21%)</title><rect x="11.3506%" y="133" width="0.2087%" height="15" fill="rgb(226,26,5)"/><text x="11.6006%" y="143.50"></text></g><g><title>impl_parent (390,061 samples, 1.05%)</title><rect x="13.1612%" y="117" width="1.0500%" height="15" fill="rgb(249,33,26)"/><text x="13.4112%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (247,941 samples, 0.67%)</title><rect x="13.5438%" y="101" width="0.6674%" height="15" fill="rgb(235,183,28)"/><text x="13.7938%" y="111.50"></text></g><g><title>specialization_graph_of (2,274,036 samples, 6.12%)</title><rect x="11.5720%" y="133" width="6.1214%" height="15" fill="rgb(221,5,38)"/><text x="11.8220%" y="143.50">speciali..</text></g><g><title>impl_trait_ref (1,293,595 samples, 3.48%)</title><rect x="14.2112%" y="117" width="3.4822%" height="15" fill="rgb(247,18,42)"/><text x="14.4612%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,145,481 samples, 3.08%)</title><rect x="14.6099%" y="101" width="3.0835%" height="15" fill="rgb(241,131,45)"/><text x="14.8599%" y="111.50">met..</text></g><g><title>resolve_instance (2,419,607 samples, 6.51%)</title><rect x="11.2163%" y="149" width="6.5132%" height="15" fill="rgb(249,31,29)"/><text x="11.4663%" y="159.50">resolve_i..</text></g><g><title>thir_body (108,022 samples, 0.29%)</title><rect x="17.7345%" y="149" width="0.2908%" height="15" fill="rgb(225,111,53)"/><text x="17.9845%" y="159.50"></text></g><g><title>mir_const (4,119,235 samples, 11.09%)</title><rect x="6.9400%" y="197" width="11.0884%" height="15" fill="rgb(238,160,17)"/><text x="7.1900%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (3,904,183 samples, 10.51%)</title><rect x="7.5189%" y="181" width="10.5095%" height="15" fill="rgb(214,148,48)"/><text x="7.7689%" y="191.50">unsafety_check_..</text></g><g><title>mir_built (3,685,431 samples, 9.92%)</title><rect x="8.1077%" y="165" width="9.9207%" height="15" fill="rgb(232,36,49)"/><text x="8.3577%" y="175.50">mir_built</text></g><g><title>thir_body (55,850 samples, 0.15%)</title><rect x="18.5449%" y="133" width="0.1503%" height="15" fill="rgb(209,103,24)"/><text x="18.7949%" y="143.50"></text></g><g><title>mir_promoted (4,518,449 samples, 12.16%)</title><rect x="6.5392%" y="213" width="12.1630%" height="15" fill="rgb(229,88,8)"/><text x="6.7892%" y="223.50">mir_promoted</text></g><g><title>mir_const_qualif (250,312 samples, 0.67%)</title><rect x="18.0284%" y="197" width="0.6738%" height="15" fill="rgb(213,181,19)"/><text x="18.2784%" y="207.50"></text></g><g><title>mir_const (196,592 samples, 0.53%)</title><rect x="18.1730%" y="181" width="0.5292%" height="15" fill="rgb(254,191,54)"/><text x="18.4230%" y="191.50"></text></g><g><title>unsafety_check_result (145,002 samples, 0.39%)</title><rect x="18.3119%" y="165" width="0.3903%" height="15" fill="rgb(241,83,37)"/><text x="18.5619%" y="175.50"></text></g><g><title>mir_built (128,281 samples, 0.35%)</title><rect x="18.3569%" y="149" width="0.3453%" height="15" fill="rgb(233,36,39)"/><text x="18.6069%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (161,941 samples, 0.44%)</title><rect x="18.7022%" y="213" width="0.4359%" height="15" fill="rgb(226,3,54)"/><text x="18.9522%" y="223.50"></text></g><g><title>normalize_projection_ty (92,601 samples, 0.25%)</title><rect x="18.8889%" y="197" width="0.2493%" height="15" fill="rgb(245,192,40)"/><text x="19.1389%" y="207.50"></text></g><g><title>MIR_borrow_checking (6,377,920 samples, 17.17%)</title><rect x="2.4104%" y="245" width="17.1685%" height="15" fill="rgb(238,167,29)"/><text x="2.6604%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,359,709 samples, 17.12%)</title><rect x="2.4594%" y="229" width="17.1194%" height="15" fill="rgb(232,182,51)"/><text x="2.7094%" y="239.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (163,742 samples, 0.44%)</title><rect x="19.1381%" y="213" width="0.4408%" height="15" fill="rgb(231,60,39)"/><text x="19.3881%" y="223.50"></text></g><g><title>MIR_effect_checking (249,962 samples, 0.67%)</title><rect x="19.5789%" y="245" width="0.6729%" height="15" fill="rgb(208,69,12)"/><text x="19.8289%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (215,492 samples, 0.58%)</title><rect x="19.6717%" y="229" width="0.5801%" height="15" fill="rgb(235,93,37)"/><text x="19.9217%" y="239.50"></text></g><g><title>hir_module_items (119,081 samples, 0.32%)</title><rect x="20.2518%" y="245" width="0.3205%" height="15" fill="rgb(213,116,39)"/><text x="20.5018%" y="255.50"></text></g><g><title>get_lang_items (77,221 samples, 0.21%)</title><rect x="20.9678%" y="197" width="0.2079%" height="15" fill="rgb(222,207,29)"/><text x="21.2178%" y="207.50"></text></g><g><title>codegen_fn_attrs (166,392 samples, 0.45%)</title><rect x="20.8399%" y="213" width="0.4479%" height="15" fill="rgb(206,96,30)"/><text x="21.0899%" y="223.50"></text></g><g><title>supported_target_features (38,661 samples, 0.10%)</title><rect x="21.1837%" y="197" width="0.1041%" height="15" fill="rgb(218,138,4)"/><text x="21.4337%" y="207.50"></text></g><g><title>check_mod_attrs (239,662 samples, 0.65%)</title><rect x="20.6431%" y="229" width="0.6451%" height="15" fill="rgb(250,191,14)"/><text x="20.8931%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (102,592 samples, 0.28%)</title><rect x="21.4373%" y="229" width="0.2762%" height="15" fill="rgb(239,60,40)"/><text x="21.6873%" y="239.50"></text></g><g><title>looking_for_derive_registrar (40,731 samples, 0.11%)</title><rect x="21.7171%" y="229" width="0.1096%" height="15" fill="rgb(206,27,48)"/><text x="21.9671%" y="239.50"></text></g><g><title>misc_checking_1 (470,135 samples, 1.27%)</title><rect x="20.5745%" y="245" width="1.2655%" height="15" fill="rgb(225,35,8)"/><text x="20.8245%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (126,442 samples, 0.34%)</title><rect x="21.8466%" y="229" width="0.3404%" height="15" fill="rgb(250,213,24)"/><text x="22.0966%" y="239.50"></text></g><g><title>check_mod_liveness (104,792 samples, 0.28%)</title><rect x="21.9049%" y="213" width="0.2821%" height="15" fill="rgb(247,123,22)"/><text x="22.1549%" y="223.50"></text></g><g><title>misc_checking_2 (279,703 samples, 0.75%)</title><rect x="21.8400%" y="245" width="0.7529%" height="15" fill="rgb(231,138,38)"/><text x="22.0900%" y="255.50"></text></g><g><title>match_checking (150,821 samples, 0.41%)</title><rect x="22.1870%" y="229" width="0.4060%" height="15" fill="rgb(231,145,46)"/><text x="22.4370%" y="239.50"></text></g><g><title>check_match (144,001 samples, 0.39%)</title><rect x="22.2053%" y="213" width="0.3876%" height="15" fill="rgb(251,118,11)"/><text x="22.4553%" y="223.50"></text></g><g><title>death_checking (135,091 samples, 0.36%)</title><rect x="22.7081%" y="229" width="0.3636%" height="15" fill="rgb(217,147,25)"/><text x="22.9581%" y="239.50"></text></g><g><title>lint_levels (53,290 samples, 0.14%)</title><rect x="22.9283%" y="213" width="0.1434%" height="15" fill="rgb(247,81,37)"/><text x="23.1783%" y="223.50"></text></g><g><title>layout_of (50,761 samples, 0.14%)</title><rect x="23.9300%" y="149" width="0.1366%" height="15" fill="rgb(209,12,38)"/><text x="24.1800%" y="159.50"></text></g><g><title>eval_to_const_value_raw (357,484 samples, 0.96%)</title><rect x="23.3530%" y="197" width="0.9623%" height="15" fill="rgb(227,1,9)"/><text x="23.6030%" y="207.50"></text></g><g><title>eval_to_const_value_raw (349,364 samples, 0.94%)</title><rect x="23.3749%" y="181" width="0.9404%" height="15" fill="rgb(248,47,43)"/><text x="23.6249%" y="191.50"></text></g><g><title>eval_to_allocation_raw (332,714 samples, 0.90%)</title><rect x="23.4197%" y="165" width="0.8956%" height="15" fill="rgb(221,10,30)"/><text x="23.6697%" y="175.50"></text></g><g><title>mir_for_ctfe (92,392 samples, 0.25%)</title><rect x="24.0666%" y="149" width="0.2487%" height="15" fill="rgb(210,229,1)"/><text x="24.3166%" y="159.50"></text></g><g><title>param_env (71,341 samples, 0.19%)</title><rect x="24.3153%" y="197" width="0.1920%" height="15" fill="rgb(222,148,37)"/><text x="24.5653%" y="207.50"></text></g><g><title>crate_lints (535,055 samples, 1.44%)</title><rect x="23.0800%" y="213" width="1.4403%" height="15" fill="rgb(234,67,33)"/><text x="23.3300%" y="223.50"></text></g><g><title>lint_checking (595,996 samples, 1.60%)</title><rect x="23.0718%" y="229" width="1.6043%" height="15" fill="rgb(247,98,35)"/><text x="23.3218%" y="239.50"></text></g><g><title>module_lints (57,881 samples, 0.16%)</title><rect x="24.5203%" y="213" width="0.1558%" height="15" fill="rgb(247,138,52)"/><text x="24.7703%" y="223.50"></text></g><g><title>lint_mod (52,380 samples, 0.14%)</title><rect x="24.5351%" y="197" width="0.1410%" height="15" fill="rgb(213,79,30)"/><text x="24.7851%" y="207.50"></text></g><g><title>privacy_access_levels (56,990 samples, 0.15%)</title><rect x="24.6761%" y="229" width="0.1534%" height="15" fill="rgb(246,177,23)"/><text x="24.9261%" y="239.50"></text></g><g><title>privacy_checking_modules (90,801 samples, 0.24%)</title><rect x="24.8295%" y="229" width="0.2444%" height="15" fill="rgb(230,62,27)"/><text x="25.0795%" y="239.50"></text></g><g><title>check_mod_privacy (87,281 samples, 0.23%)</title><rect x="24.8390%" y="213" width="0.2349%" height="15" fill="rgb(216,154,8)"/><text x="25.0890%" y="223.50"></text></g><g><title>misc_checking_3 (969,510 samples, 2.61%)</title><rect x="22.5929%" y="245" width="2.6098%" height="15" fill="rgb(244,35,45)"/><text x="22.8429%" y="255.50">mi..</text></g><g><title>unused_lib_feature_checking (47,851 samples, 0.13%)</title><rect x="25.0739%" y="229" width="0.1288%" height="15" fill="rgb(251,115,12)"/><text x="25.3239%" y="239.50"></text></g><g><title>adt_def (62,071 samples, 0.17%)</title><rect x="29.4053%" y="165" width="0.1671%" height="15" fill="rgb(240,54,50)"/><text x="29.6553%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (60,651 samples, 0.16%)</title><rect x="29.4092%" y="149" width="0.1633%" height="15" fill="rgb(233,84,52)"/><text x="29.6592%" y="159.50"></text></g><g><title>adt_sized_constraint (76,581 samples, 0.21%)</title><rect x="29.6743%" y="149" width="0.2061%" height="15" fill="rgb(207,117,47)"/><text x="29.9243%" y="159.50"></text></g><g><title>adt_def (75,231 samples, 0.20%)</title><rect x="29.6779%" y="133" width="0.2025%" height="15" fill="rgb(249,43,39)"/><text x="29.9279%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (74,631 samples, 0.20%)</title><rect x="29.6795%" y="117" width="0.2009%" height="15" fill="rgb(209,38,44)"/><text x="29.9295%" y="127.50"></text></g><g><title>item_attrs (69,491 samples, 0.19%)</title><rect x="29.6934%" y="101" width="0.1871%" height="15" fill="rgb(236,212,23)"/><text x="29.9434%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (68,801 samples, 0.19%)</title><rect x="29.6952%" y="85" width="0.1852%" height="15" fill="rgb(242,79,21)"/><text x="29.9452%" y="95.50"></text></g><g><title>adt_sized_constraint (118,101 samples, 0.32%)</title><rect x="29.5724%" y="165" width="0.3179%" height="15" fill="rgb(211,96,35)"/><text x="29.8224%" y="175.50"></text></g><g><title>adt_sized_constraint (201,282 samples, 0.54%)</title><rect x="29.3846%" y="181" width="0.5418%" height="15" fill="rgb(253,215,40)"/><text x="29.6346%" y="191.50"></text></g><g><title>associated_item (590,206 samples, 1.59%)</title><rect x="30.3397%" y="165" width="1.5888%" height="15" fill="rgb(211,81,21)"/><text x="30.5897%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (512,196 samples, 1.38%)</title><rect x="30.5497%" y="149" width="1.3788%" height="15" fill="rgb(208,190,38)"/><text x="30.7997%" y="159.50"></text></g><g><title>associated_items (764,798 samples, 2.06%)</title><rect x="29.9783%" y="181" width="2.0587%" height="15" fill="rgb(235,213,38)"/><text x="30.2283%" y="191.50">a..</text></g><g><title>associated_item_def_ids (40,350 samples, 0.11%)</title><rect x="31.9284%" y="165" width="0.1086%" height="15" fill="rgb(237,122,38)"/><text x="32.1784%" y="175.50"></text></g><g><title>adt_def (54,631 samples, 0.15%)</title><rect x="32.4442%" y="117" width="0.1471%" height="15" fill="rgb(244,218,35)"/><text x="32.6942%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (53,771 samples, 0.14%)</title><rect x="32.4465%" y="101" width="0.1447%" height="15" fill="rgb(240,68,47)"/><text x="32.6965%" y="111.50"></text></g><g><title>item_attrs (43,491 samples, 0.12%)</title><rect x="32.4742%" y="85" width="0.1171%" height="15" fill="rgb(210,16,53)"/><text x="32.7242%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (42,511 samples, 0.11%)</title><rect x="32.4768%" y="69" width="0.1144%" height="15" fill="rgb(235,124,12)"/><text x="32.7268%" y="79.50"></text></g><g><title>impl_parent (179,082 samples, 0.48%)</title><rect x="33.2413%" y="53" width="0.4821%" height="15" fill="rgb(224,169,11)"/><text x="33.4913%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (128,842 samples, 0.35%)</title><rect x="33.3765%" y="37" width="0.3468%" height="15" fill="rgb(250,166,2)"/><text x="33.6265%" y="47.50"></text></g><g><title>impl_trait_ref (694,297 samples, 1.87%)</title><rect x="33.7234%" y="53" width="1.8689%" height="15" fill="rgb(242,216,29)"/><text x="33.9734%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (644,557 samples, 1.74%)</title><rect x="33.8573%" y="37" width="1.7351%" height="15" fill="rgb(230,116,27)"/><text x="34.1073%" y="47.50"></text></g><g><title>coherent_trait (1,180,063 samples, 3.18%)</title><rect x="32.6170%" y="85" width="3.1766%" height="15" fill="rgb(228,99,48)"/><text x="32.8670%" y="95.50">coh..</text></g><g><title>specialization_graph_of (1,169,693 samples, 3.15%)</title><rect x="32.6449%" y="69" width="3.1486%" height="15" fill="rgb(253,11,6)"/><text x="32.8949%" y="79.50">spe..</text></g><g><title>trait_impls_of (74,751 samples, 0.20%)</title><rect x="35.5923%" y="53" width="0.2012%" height="15" fill="rgb(247,143,39)"/><text x="35.8423%" y="63.50"></text></g><g><title>adt_destructor (1,192,513 samples, 3.21%)</title><rect x="32.5913%" y="117" width="3.2101%" height="15" fill="rgb(236,97,10)"/><text x="32.8413%" y="127.50">adt..</text></g><g><title>metadata_decode_entry_adt_destructor (1,190,523 samples, 3.20%)</title><rect x="32.5966%" y="101" width="3.2047%" height="15" fill="rgb(233,208,19)"/><text x="32.8466%" y="111.50">met..</text></g><g><title>adt_dtorck_constraint (1,268,754 samples, 3.42%)</title><rect x="32.4081%" y="133" width="3.4153%" height="15" fill="rgb(216,164,2)"/><text x="32.6581%" y="143.50">adt..</text></g><g><title>adt_dtorck_constraint (1,310,835 samples, 3.53%)</title><rect x="32.3386%" y="149" width="3.5286%" height="15" fill="rgb(220,129,5)"/><text x="32.5886%" y="159.50">adt..</text></g><g><title>dropck_outlives (1,413,095 samples, 3.80%)</title><rect x="32.0745%" y="181" width="3.8039%" height="15" fill="rgb(242,17,10)"/><text x="32.3245%" y="191.50">drop..</text></g><g><title>adt_dtorck_constraint (1,360,585 samples, 3.66%)</title><rect x="32.2159%" y="165" width="3.6625%" height="15" fill="rgb(242,107,0)"/><text x="32.4659%" y="175.50">adt_..</text></g><g><title>predicates_of (57,032 samples, 0.15%)</title><rect x="36.7015%" y="165" width="0.1535%" height="15" fill="rgb(251,28,31)"/><text x="36.9515%" y="175.50"></text></g><g><title>predicates_defined_on (39,382 samples, 0.11%)</title><rect x="36.7490%" y="149" width="0.1060%" height="15" fill="rgb(233,223,10)"/><text x="36.9990%" y="159.50"></text></g><g><title>specializes (174,552 samples, 0.47%)</title><rect x="36.8550%" y="165" width="0.4699%" height="15" fill="rgb(215,21,27)"/><text x="37.1050%" y="175.50"></text></g><g><title>param_env (156,011 samples, 0.42%)</title><rect x="36.9049%" y="149" width="0.4200%" height="15" fill="rgb(232,23,21)"/><text x="37.1549%" y="159.50"></text></g><g><title>def_span (132,611 samples, 0.36%)</title><rect x="36.9679%" y="133" width="0.3570%" height="15" fill="rgb(244,5,23)"/><text x="37.2179%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (131,271 samples, 0.35%)</title><rect x="36.9715%" y="117" width="0.3534%" height="15" fill="rgb(226,81,46)"/><text x="37.2215%" y="127.50"></text></g><g><title>trait_impls_of (258,402 samples, 0.70%)</title><rect x="37.3429%" y="165" width="0.6956%" height="15" fill="rgb(247,70,30)"/><text x="37.5929%" y="175.50"></text></g><g><title>implementations_of_trait (84,231 samples, 0.23%)</title><rect x="37.8117%" y="149" width="0.2267%" height="15" fill="rgb(212,68,19)"/><text x="38.0617%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (57,220 samples, 0.15%)</title><rect x="37.8844%" y="133" width="0.1540%" height="15" fill="rgb(240,187,13)"/><text x="38.1344%" y="143.50"></text></g><g><title>evaluate_obligation (803,958 samples, 2.16%)</title><rect x="35.8784%" y="181" width="2.1641%" height="15" fill="rgb(223,113,26)"/><text x="36.1284%" y="191.50">e..</text></g><g><title>fn_sig (73,021 samples, 0.20%)</title><rect x="38.0805%" y="181" width="0.1966%" height="15" fill="rgb(206,192,2)"/><text x="38.3305%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (66,761 samples, 0.18%)</title><rect x="38.0974%" y="165" width="0.1797%" height="15" fill="rgb(241,108,4)"/><text x="38.3474%" y="175.50"></text></g><g><title>generics_of (50,933 samples, 0.14%)</title><rect x="38.2771%" y="181" width="0.1371%" height="15" fill="rgb(247,173,49)"/><text x="38.5271%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (39,482 samples, 0.11%)</title><rect x="38.3079%" y="165" width="0.1063%" height="15" fill="rgb(224,114,35)"/><text x="38.5579%" y="175.50"></text></g><g><title>impl_item_implementor_ids (40,051 samples, 0.11%)</title><rect x="38.4142%" y="181" width="0.1078%" height="15" fill="rgb(245,159,27)"/><text x="38.6642%" y="191.50"></text></g><g><title>item_attrs (54,902 samples, 0.15%)</title><rect x="38.6205%" y="181" width="0.1478%" height="15" fill="rgb(245,172,44)"/><text x="38.8705%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (53,002 samples, 0.14%)</title><rect x="38.6256%" y="165" width="0.1427%" height="15" fill="rgb(236,23,11)"/><text x="38.8756%" y="175.50"></text></g><g><title>method_autoderef_steps (102,402 samples, 0.28%)</title><rect x="38.9171%" y="181" width="0.2757%" height="15" fill="rgb(205,117,38)"/><text x="39.1671%" y="191.50"></text></g><g><title>evaluate_obligation (73,621 samples, 0.20%)</title><rect x="38.9946%" y="165" width="0.1982%" height="15" fill="rgb(237,72,25)"/><text x="39.2446%" y="175.50"></text></g><g><title>trait_impls_of (39,050 samples, 0.11%)</title><rect x="39.0876%" y="149" width="0.1051%" height="15" fill="rgb(244,70,9)"/><text x="39.3376%" y="159.50"></text></g><g><title>explicit_predicates_of (63,871 samples, 0.17%)</title><rect x="39.4464%" y="149" width="0.1719%" height="15" fill="rgb(217,125,39)"/><text x="39.6964%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (46,960 samples, 0.13%)</title><rect x="39.4920%" y="133" width="0.1264%" height="15" fill="rgb(235,36,10)"/><text x="39.7420%" y="143.50"></text></g><g><title>predicates_of (195,281 samples, 0.53%)</title><rect x="39.2220%" y="181" width="0.5257%" height="15" fill="rgb(251,123,47)"/><text x="39.4720%" y="191.50"></text></g><g><title>predicates_defined_on (146,411 samples, 0.39%)</title><rect x="39.3535%" y="165" width="0.3941%" height="15" fill="rgb(221,13,13)"/><text x="39.6035%" y="175.50"></text></g><g><title>inferred_outlives_of (48,030 samples, 0.13%)</title><rect x="39.6184%" y="149" width="0.1293%" height="15" fill="rgb(238,131,9)"/><text x="39.8684%" y="159.50"></text></g><g><title>type_of (64,590 samples, 0.17%)</title><rect x="39.7581%" y="181" width="0.1739%" height="15" fill="rgb(211,50,8)"/><text x="40.0081%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (57,810 samples, 0.16%)</title><rect x="39.7763%" y="165" width="0.1556%" height="15" fill="rgb(245,182,24)"/><text x="40.0263%" y="175.50"></text></g><g><title>item_bodies_checking (5,435,160 samples, 14.63%)</title><rect x="25.3856%" y="229" width="14.6307%" height="15" fill="rgb(242,14,37)"/><text x="25.6356%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (5,431,950 samples, 14.62%)</title><rect x="25.3943%" y="213" width="14.6220%" height="15" fill="rgb(246,228,12)"/><text x="25.6443%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (5,427,300 samples, 14.61%)</title><rect x="25.4068%" y="197" width="14.6095%" height="15" fill="rgb(213,55,15)"/><text x="25.6568%" y="207.50">typeck</text></g><g><title>impl_trait_ref (47,020 samples, 0.13%)</title><rect x="41.0127%" y="181" width="0.1266%" height="15" fill="rgb(209,9,3)"/><text x="41.2627%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (44,640 samples, 0.12%)</title><rect x="41.0191%" y="165" width="0.1202%" height="15" fill="rgb(230,59,30)"/><text x="41.2691%" y="175.50"></text></g><g><title>trait_impls_of (61,851 samples, 0.17%)</title><rect x="41.2642%" y="181" width="0.1665%" height="15" fill="rgb(209,121,21)"/><text x="41.5142%" y="191.50"></text></g><g><title>item_types_checking (527,296 samples, 1.42%)</title><rect x="40.0163%" y="229" width="1.4194%" height="15" fill="rgb(220,109,13)"/><text x="40.2663%" y="239.50"></text></g><g><title>check_mod_item_types (521,586 samples, 1.40%)</title><rect x="40.0317%" y="213" width="1.4040%" height="15" fill="rgb(232,18,1)"/><text x="40.2817%" y="223.50"></text></g><g><title>typeck (509,826 samples, 1.37%)</title><rect x="40.0634%" y="197" width="1.3724%" height="15" fill="rgb(215,41,42)"/><text x="40.3134%" y="207.50"></text></g><g><title>fn_sig (41,051 samples, 0.11%)</title><rect x="41.6615%" y="197" width="0.1105%" height="15" fill="rgb(224,123,36)"/><text x="41.9115%" y="207.50"></text></g><g><title>generics_of (75,860 samples, 0.20%)</title><rect x="41.7720%" y="197" width="0.2042%" height="15" fill="rgb(240,125,3)"/><text x="42.0220%" y="207.50"></text></g><g><title>predicates_of (59,570 samples, 0.16%)</title><rect x="41.9762%" y="197" width="0.1604%" height="15" fill="rgb(205,98,50)"/><text x="42.2262%" y="207.50"></text></g><g><title>predicates_defined_on (52,430 samples, 0.14%)</title><rect x="41.9954%" y="181" width="0.1411%" height="15" fill="rgb(205,185,37)"/><text x="42.2454%" y="191.50"></text></g><g><title>type_collecting (339,794 samples, 0.91%)</title><rect x="41.4375%" y="229" width="0.9147%" height="15" fill="rgb(238,207,15)"/><text x="41.6875%" y="239.50"></text></g><g><title>collect_mod_item_types (320,513 samples, 0.86%)</title><rect x="41.4894%" y="213" width="0.8628%" height="15" fill="rgb(213,199,42)"/><text x="41.7394%" y="223.50"></text></g><g><title>type_of (80,121 samples, 0.22%)</title><rect x="42.1365%" y="197" width="0.2157%" height="15" fill="rgb(235,201,11)"/><text x="42.3865%" y="207.50"></text></g><g><title>evaluate_obligation (48,411 samples, 0.13%)</title><rect x="43.7223%" y="197" width="0.1303%" height="15" fill="rgb(207,46,11)"/><text x="43.9723%" y="207.50"></text></g><g><title>implied_outlives_bounds (129,001 samples, 0.35%)</title><rect x="43.8527%" y="197" width="0.3473%" height="15" fill="rgb(241,35,35)"/><text x="44.1027%" y="207.50"></text></g><g><title>param_env (224,392 samples, 0.60%)</title><rect x="44.1999%" y="197" width="0.6040%" height="15" fill="rgb(243,32,47)"/><text x="44.4499%" y="207.50"></text></g><g><title>region_scope_tree (41,630 samples, 0.11%)</title><rect x="44.8039%" y="197" width="0.1121%" height="15" fill="rgb(247,202,23)"/><text x="45.0539%" y="207.50"></text></g><g><title>analysis (15,931,086 samples, 42.88%)</title><rect x="2.0354%" y="261" width="42.8842%" height="15" fill="rgb(219,102,11)"/><text x="2.2854%" y="271.50">analysis</text></g><g><title>type_check_crate (7,324,642 samples, 19.72%)</title><rect x="25.2027%" y="245" width="19.7169%" height="15" fill="rgb(243,110,44)"/><text x="25.4527%" y="255.50">type_check_crate</text></g><g><title>wf_checking (952,480 samples, 2.56%)</title><rect x="42.3557%" y="229" width="2.5639%" height="15" fill="rgb(222,74,54)"/><text x="42.6057%" y="239.50">wf..</text></g><g><title>check_item_well_formed (925,830 samples, 2.49%)</title><rect x="42.4274%" y="213" width="2.4922%" height="15" fill="rgb(216,99,12)"/><text x="42.6774%" y="223.50">ch..</text></g><g><title>native_libraries (48,690 samples, 0.13%)</title><rect x="46.3507%" y="245" width="0.1311%" height="15" fill="rgb(226,22,26)"/><text x="46.6007%" y="255.50"></text></g><g><title>metadata_decode_entry_native_libraries (37,490 samples, 0.10%)</title><rect x="46.3808%" y="229" width="0.1009%" height="15" fill="rgb(217,163,10)"/><text x="46.6308%" y="239.50"></text></g><g><title>codegen_crate (609,866 samples, 1.64%)</title><rect x="44.9447%" y="261" width="1.6417%" height="15" fill="rgb(213,25,53)"/><text x="45.1947%" y="271.50"></text></g><g><title>AST_validation (74,141 samples, 0.20%)</title><rect x="47.1440%" y="245" width="0.1996%" height="15" fill="rgb(252,105,26)"/><text x="47.3940%" y="255.50"></text></g><g><title>crate_injection (87,301 samples, 0.24%)</title><rect x="47.4038%" y="245" width="0.2350%" height="15" fill="rgb(220,39,43)"/><text x="47.6538%" y="255.50"></text></g><g><title>metadata_load_macro (74,380 samples, 0.20%)</title><rect x="72.3057%" y="213" width="0.2002%" height="15" fill="rgb(229,68,48)"/><text x="72.5557%" y="223.50"></text></g><g><title>metadata_register_crate (2,630,179 samples, 7.08%)</title><rect x="72.5059%" y="213" width="7.0801%" height="15" fill="rgb(252,8,32)"/><text x="72.7559%" y="223.50">metadata_r..</text></g><g><title>metadata_register_crate (966,992 samples, 2.60%)</title><rect x="76.9830%" y="197" width="2.6030%" height="15" fill="rgb(223,20,43)"/><text x="77.2330%" y="207.50">me..</text></g><g><title>metadata_register_crate (75,491 samples, 0.20%)</title><rect x="79.3828%" y="181" width="0.2032%" height="15" fill="rgb(229,81,49)"/><text x="79.6328%" y="191.50"></text></g><g><title>macro_expand_crate (11,901,871 samples, 32.04%)</title><rect x="47.6388%" y="245" width="32.0382%" height="15" fill="rgb(236,28,36)"/><text x="47.8888%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (11,879,131 samples, 31.98%)</title><rect x="47.7000%" y="229" width="31.9770%" height="15" fill="rgb(249,185,26)"/><text x="47.9500%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (112,891 samples, 0.30%)</title><rect x="79.6892%" y="245" width="0.3039%" height="15" fill="rgb(249,174,33)"/><text x="79.9392%" y="255.50"></text></g><g><title>finalize_macro_resolutions (360,234 samples, 0.97%)</title><rect x="80.0592%" y="229" width="0.9697%" height="15" fill="rgb(233,201,37)"/><text x="80.3092%" y="239.50"></text></g><g><title>late_resolve_crate (378,114 samples, 1.02%)</title><rect x="81.0289%" y="229" width="1.0178%" height="15" fill="rgb(221,78,26)"/><text x="81.2789%" y="239.50"></text></g><g><title>configure_and_expand (13,204,305 samples, 35.54%)</title><rect x="46.5864%" y="261" width="35.5441%" height="15" fill="rgb(250,127,30)"/><text x="46.8364%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (794,039 samples, 2.14%)</title><rect x="79.9931%" y="245" width="2.1374%" height="15" fill="rgb(230,49,44)"/><text x="80.2431%" y="255.50">r..</text></g><g><title>early_lint_checks (101,161 samples, 0.27%)</title><rect x="82.2995%" y="261" width="0.2723%" height="15" fill="rgb(229,67,23)"/><text x="82.5495%" y="271.50"></text></g><g><title>free_global_ctxt (3,267,606 samples, 8.80%)</title><rect x="82.5718%" y="261" width="8.7959%" height="15" fill="rgb(249,83,47)"/><text x="82.8218%" y="271.50">free_global_..</text></g><g><title>crate_hash (152,192 samples, 0.41%)</title><rect x="92.4581%" y="245" width="0.4097%" height="15" fill="rgb(215,43,3)"/><text x="92.7081%" y="255.50"></text></g><g><title>generate_crate_metadata (670,928 samples, 1.81%)</title><rect x="91.3678%" y="261" width="1.8060%" height="15" fill="rgb(238,154,13)"/><text x="91.6178%" y="271.50">g..</text></g><g><title>hir_lowering (386,054 samples, 1.04%)</title><rect x="93.1738%" y="261" width="1.0392%" height="15" fill="rgb(219,56,2)"/><text x="93.4238%" y="271.50"></text></g><g><title>link (84,171 samples, 0.23%)</title><rect x="94.2130%" y="261" width="0.2266%" height="15" fill="rgb(233,0,4)"/><text x="94.4630%" y="271.50"></text></g><g><title>parse_crate (434,725 samples, 1.17%)</title><rect x="94.4396%" y="261" width="1.1702%" height="15" fill="rgb(235,30,7)"/><text x="94.6896%" y="271.50"></text></g><g><title>prepare_outputs (317,224 samples, 0.85%)</title><rect x="95.6298%" y="261" width="0.8539%" height="15" fill="rgb(250,79,13)"/><text x="95.8798%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (638,857 samples, 1.72%)</title><rect x="96.4837%" y="261" width="1.7197%" height="15" fill="rgb(211,146,34)"/><text x="96.7337%" y="271.50"></text></g><g><title>setup_global_ctxt (136,122 samples, 0.37%)</title><rect x="98.2539%" y="261" width="0.3664%" height="15" fill="rgb(228,22,38)"/><text x="98.5039%" y="271.50"></text></g><g><title>all (37,149,041 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (37,149,041 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (512,536 samples, 1.38%)</title><rect x="98.6203%" y="261" width="1.3797%" height="15" fill="rgb(215,215,53)"/><text x="98.8703%" y="271.50"></text></g></svg></svg>