<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (527,754 samples, 0.12%)</title><rect x="13.5570%" y="149" width="0.1170%" height="15" fill="rgb(227,0,7)"/><text x="13.8070%" y="159.50"></text></g><g><title>param_env (1,510,728 samples, 0.33%)</title><rect x="15.7871%" y="117" width="0.3350%" height="15" fill="rgb(217,0,24)"/><text x="16.0371%" y="127.50"></text></g><g><title>item_attrs (978,220 samples, 0.22%)</title><rect x="16.7584%" y="85" width="0.2169%" height="15" fill="rgb(221,193,54)"/><text x="17.0084%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (930,690 samples, 0.21%)</title><rect x="16.7689%" y="69" width="0.2064%" height="15" fill="rgb(248,212,6)"/><text x="17.0189%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,486,513 samples, 0.33%)</title><rect x="16.6630%" y="101" width="0.3296%" height="15" fill="rgb(208,68,35)"/><text x="16.9130%" y="111.50"></text></g><g><title>adt_drop_tys (837,833 samples, 0.19%)</title><rect x="20.4591%" y="69" width="0.1858%" height="15" fill="rgb(232,128,0)"/><text x="20.7091%" y="79.50"></text></g><g><title>is_copy_raw (5,046,877 samples, 1.12%)</title><rect x="20.6459%" y="69" width="1.1190%" height="15" fill="rgb(207,160,47)"/><text x="20.8959%" y="79.50"></text></g><g><title>evaluate_obligation (4,121,088 samples, 0.91%)</title><rect x="20.8511%" y="53" width="0.9137%" height="15" fill="rgb(228,23,34)"/><text x="21.1011%" y="63.50"></text></g><g><title>needs_drop_raw (6,613,419 samples, 1.47%)</title><rect x="20.3021%" y="85" width="1.4664%" height="15" fill="rgb(218,30,26)"/><text x="20.5521%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,337,042 samples, 0.30%)</title><rect x="22.0034%" y="69" width="0.2965%" height="15" fill="rgb(220,122,19)"/><text x="22.2534%" y="79.50"></text></g><g><title>specialization_graph_of (1,441,336 samples, 0.32%)</title><rect x="22.3733%" y="69" width="0.3196%" height="15" fill="rgb(250,228,42)"/><text x="22.6233%" y="79.50"></text></g><g><title>impl_trait_ref (726,939 samples, 0.16%)</title><rect x="22.5317%" y="53" width="0.1612%" height="15" fill="rgb(240,193,28)"/><text x="22.7817%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (616,878 samples, 0.14%)</title><rect x="22.5561%" y="37" width="0.1368%" height="15" fill="rgb(216,20,37)"/><text x="22.8061%" y="47.50"></text></g><g><title>resolve_instance (4,611,690 samples, 1.02%)</title><rect x="21.7685%" y="85" width="1.0225%" height="15" fill="rgb(206,188,39)"/><text x="22.0185%" y="95.50"></text></g><g><title>thir_body (5,314,749 samples, 1.18%)</title><rect x="22.8241%" y="85" width="1.1784%" height="15" fill="rgb(217,207,13)"/><text x="23.0741%" y="95.50"></text></g><g><title>mir_const (41,692,408 samples, 9.24%)</title><rect x="14.7929%" y="133" width="9.2442%" height="15" fill="rgb(231,73,38)"/><text x="15.0429%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (35,697,889 samples, 7.92%)</title><rect x="16.1220%" y="117" width="7.9151%" height="15" fill="rgb(225,20,46)"/><text x="16.3720%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (31,771,492 samples, 7.04%)</title><rect x="16.9926%" y="101" width="7.0445%" height="15" fill="rgb(210,31,41)"/><text x="17.2426%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (1,309,732 samples, 0.29%)</title><rect x="24.0371%" y="133" width="0.2904%" height="15" fill="rgb(221,200,47)"/><text x="24.2871%" y="143.50"></text></g><g><title>mir_promoted (47,470,579 samples, 10.53%)</title><rect x="13.8024%" y="149" width="10.5254%" height="15" fill="rgb(226,26,5)"/><text x="14.0524%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,688,048 samples, 0.37%)</title><rect x="24.3280%" y="149" width="0.3743%" height="15" fill="rgb(249,33,26)"/><text x="24.5780%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,135,722 samples, 0.47%)</title><rect x="24.7023%" y="149" width="0.4735%" height="15" fill="rgb(235,183,28)"/><text x="24.9523%" y="159.50"></text></g><g><title>normalize_projection_ty (1,389,812 samples, 0.31%)</title><rect x="24.8677%" y="133" width="0.3082%" height="15" fill="rgb(221,5,38)"/><text x="25.1177%" y="143.50"></text></g><g><title>type_op_normalize_predicate (662,599 samples, 0.15%)</title><rect x="25.1759%" y="149" width="0.1469%" height="15" fill="rgb(247,18,42)"/><text x="25.4259%" y="159.50"></text></g><g><title>type_op_prove_predicate (11,201,787 samples, 2.48%)</title><rect x="25.3684%" y="149" width="2.4837%" height="15" fill="rgb(241,131,45)"/><text x="25.6184%" y="159.50">ty..</text></g><g><title>evaluate_obligation (1,421,063 samples, 0.32%)</title><rect x="27.5370%" y="133" width="0.3151%" height="15" fill="rgb(249,31,29)"/><text x="27.7870%" y="143.50"></text></g><g><title>MIR_borrow_checking (123,540,825 samples, 27.39%)</title><rect x="0.4639%" y="181" width="27.3920%" height="15" fill="rgb(225,111,53)"/><text x="0.7139%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (122,926,529 samples, 27.26%)</title><rect x="0.6001%" y="165" width="27.2558%" height="15" fill="rgb(238,160,17)"/><text x="0.8501%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (671,517 samples, 0.15%)</title><rect x="27.8559%" y="181" width="0.1489%" height="15" fill="rgb(214,148,48)"/><text x="28.1059%" y="191.50"></text></g><g><title>hir_module_items (849,212 samples, 0.19%)</title><rect x="28.0048%" y="181" width="0.1883%" height="15" fill="rgb(232,36,49)"/><text x="28.2548%" y="191.50"></text></g><g><title>should_inherit_track_caller (696,606 samples, 0.15%)</title><rect x="28.5073%" y="133" width="0.1545%" height="15" fill="rgb(209,103,24)"/><text x="28.7573%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,173,041 samples, 0.26%)</title><rect x="28.4060%" y="149" width="0.2601%" height="15" fill="rgb(229,88,8)"/><text x="28.6560%" y="159.50"></text></g><g><title>check_mod_attrs (2,073,481 samples, 0.46%)</title><rect x="28.2064%" y="165" width="0.4597%" height="15" fill="rgb(213,181,19)"/><text x="28.4564%" y="175.50"></text></g><g><title>check_mod_const_bodies (512,685 samples, 0.11%)</title><rect x="28.6661%" y="165" width="0.1137%" height="15" fill="rgb(254,191,54)"/><text x="28.9161%" y="175.50"></text></g><g><title>lint_levels (573,816 samples, 0.13%)</title><rect x="29.0029%" y="149" width="0.1272%" height="15" fill="rgb(241,83,37)"/><text x="29.2529%" y="159.50"></text></g><g><title>lookup_deprecation_entry (518,227 samples, 0.11%)</title><rect x="29.1301%" y="149" width="0.1149%" height="15" fill="rgb(233,36,39)"/><text x="29.3801%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,941,746 samples, 0.43%)</title><rect x="28.8550%" y="165" width="0.4305%" height="15" fill="rgb(226,3,54)"/><text x="29.1050%" y="175.50"></text></g><g><title>misc_checking_1 (5,106,247 samples, 1.13%)</title><rect x="28.1932%" y="181" width="1.1322%" height="15" fill="rgb(245,192,40)"/><text x="28.4432%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,662,869 samples, 0.59%)</title><rect x="29.3258%" y="165" width="0.5904%" height="15" fill="rgb(238,167,29)"/><text x="29.5758%" y="175.50"></text></g><g><title>check_mod_liveness (2,244,153 samples, 0.50%)</title><rect x="29.4186%" y="149" width="0.4976%" height="15" fill="rgb(232,182,51)"/><text x="29.6686%" y="159.50"></text></g><g><title>type_uninhabited_from (667,818 samples, 0.15%)</title><rect x="29.7681%" y="133" width="0.1481%" height="15" fill="rgb(231,60,39)"/><text x="30.0181%" y="143.50"></text></g><g><title>type_uninhabited_from (503,586 samples, 0.11%)</title><rect x="29.8045%" y="117" width="0.1117%" height="15" fill="rgb(208,69,12)"/><text x="30.0545%" y="127.50"></text></g><g><title>misc_checking_2 (5,125,197 samples, 1.14%)</title><rect x="29.3253%" y="181" width="1.1364%" height="15" fill="rgb(235,93,37)"/><text x="29.5753%" y="191.50"></text></g><g><title>match_checking (2,460,348 samples, 0.55%)</title><rect x="29.9162%" y="165" width="0.5455%" height="15" fill="rgb(213,116,39)"/><text x="30.1662%" y="175.50"></text></g><g><title>check_match (2,316,207 samples, 0.51%)</title><rect x="29.9482%" y="149" width="0.5136%" height="15" fill="rgb(222,207,29)"/><text x="30.1982%" y="159.50"></text></g><g><title>check_private_in_public (1,020,481 samples, 0.23%)</title><rect x="30.4642%" y="165" width="0.2263%" height="15" fill="rgb(206,96,30)"/><text x="30.7142%" y="175.50"></text></g><g><title>codegen_fn_attrs (549,819 samples, 0.12%)</title><rect x="31.0011%" y="149" width="0.1219%" height="15" fill="rgb(218,138,4)"/><text x="31.2511%" y="159.50"></text></g><g><title>death_checking (2,149,694 samples, 0.48%)</title><rect x="30.6905%" y="165" width="0.4766%" height="15" fill="rgb(250,191,14)"/><text x="30.9405%" y="175.50"></text></g><g><title>eval_to_allocation_raw (714,358 samples, 0.16%)</title><rect x="31.7018%" y="133" width="0.1584%" height="15" fill="rgb(239,60,40)"/><text x="31.9518%" y="143.50"></text></g><g><title>eval_to_allocation_raw (711,068 samples, 0.16%)</title><rect x="31.7025%" y="117" width="0.1577%" height="15" fill="rgb(206,27,48)"/><text x="31.9525%" y="127.50"></text></g><g><title>param_env (1,715,179 samples, 0.38%)</title><rect x="31.9473%" y="133" width="0.3803%" height="15" fill="rgb(225,35,8)"/><text x="32.1973%" y="143.50"></text></g><g><title>predicates_of (808,503 samples, 0.18%)</title><rect x="32.1483%" y="117" width="0.1793%" height="15" fill="rgb(250,213,24)"/><text x="32.3983%" y="127.50"></text></g><g><title>predicates_defined_on (645,961 samples, 0.14%)</title><rect x="32.1844%" y="101" width="0.1432%" height="15" fill="rgb(247,123,22)"/><text x="32.4344%" y="111.50"></text></g><g><title>crate_lints (6,918,217 samples, 1.53%)</title><rect x="31.1678%" y="149" width="1.5339%" height="15" fill="rgb(231,138,38)"/><text x="31.4178%" y="159.50"></text></g><g><title>type_of (1,491,935 samples, 0.33%)</title><rect x="32.3709%" y="133" width="0.3308%" height="15" fill="rgb(231,145,46)"/><text x="32.6209%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,161,173 samples, 0.26%)</title><rect x="32.4443%" y="117" width="0.2575%" height="15" fill="rgb(251,118,11)"/><text x="32.6943%" y="127.50"></text></g><g><title>lint_checking (9,184,273 samples, 2.04%)</title><rect x="31.1671%" y="165" width="2.0364%" height="15" fill="rgb(217,147,25)"/><text x="31.4171%" y="175.50">l..</text></g><g><title>module_lints (2,262,956 samples, 0.50%)</title><rect x="32.7017%" y="149" width="0.5018%" height="15" fill="rgb(247,81,37)"/><text x="32.9517%" y="159.50"></text></g><g><title>lint_mod (2,241,935 samples, 0.50%)</title><rect x="32.7064%" y="133" width="0.4971%" height="15" fill="rgb(209,12,38)"/><text x="32.9564%" y="143.50"></text></g><g><title>privacy_access_levels (1,644,529 samples, 0.36%)</title><rect x="33.2035%" y="165" width="0.3646%" height="15" fill="rgb(227,1,9)"/><text x="33.4535%" y="175.50"></text></g><g><title>privacy_checking_modules (4,396,148 samples, 0.97%)</title><rect x="33.5681%" y="165" width="0.9747%" height="15" fill="rgb(248,47,43)"/><text x="33.8181%" y="175.50"></text></g><g><title>check_mod_privacy (4,378,758 samples, 0.97%)</title><rect x="33.5720%" y="149" width="0.9709%" height="15" fill="rgb(221,10,30)"/><text x="33.8220%" y="159.50"></text></g><g><title>misc_checking_3 (18,444,545 samples, 4.09%)</title><rect x="30.4617%" y="181" width="4.0896%" height="15" fill="rgb(210,229,1)"/><text x="30.7117%" y="191.50">misc..</text></g><g><title>adt_destructor (596,177 samples, 0.13%)</title><rect x="34.6490%" y="133" width="0.1322%" height="15" fill="rgb(222,148,37)"/><text x="34.8990%" y="143.50"></text></g><g><title>coherent_trait (593,737 samples, 0.13%)</title><rect x="34.6496%" y="117" width="0.1316%" height="15" fill="rgb(234,67,33)"/><text x="34.8996%" y="127.50"></text></g><g><title>specialization_graph_of (591,827 samples, 0.13%)</title><rect x="34.6500%" y="101" width="0.1312%" height="15" fill="rgb(247,98,35)"/><text x="34.9000%" y="111.50"></text></g><g><title>impl_parent (3,857,540 samples, 0.86%)</title><rect x="36.3377%" y="117" width="0.8553%" height="15" fill="rgb(247,138,52)"/><text x="36.5877%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,120,399 samples, 0.47%)</title><rect x="36.7229%" y="101" width="0.4701%" height="15" fill="rgb(213,79,30)"/><text x="36.9729%" y="111.50"></text></g><g><title>impl_trait_ref (7,692,222 samples, 1.71%)</title><rect x="37.1931%" y="117" width="1.7056%" height="15" fill="rgb(246,177,23)"/><text x="37.4431%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,992,651 samples, 1.33%)</title><rect x="37.5699%" y="101" width="1.3287%" height="15" fill="rgb(230,62,27)"/><text x="37.8199%" y="111.50"></text></g><g><title>trait_impls_of (1,898,421 samples, 0.42%)</title><rect x="38.9449%" y="117" width="0.4209%" height="15" fill="rgb(216,154,8)"/><text x="39.1949%" y="127.50"></text></g><g><title>implementations_of_trait (741,557 samples, 0.16%)</title><rect x="39.2014%" y="101" width="0.1644%" height="15" fill="rgb(244,35,45)"/><text x="39.4514%" y="111.50"></text></g><g><title>coherent_trait (21,361,998 samples, 4.74%)</title><rect x="34.6352%" y="149" width="4.7365%" height="15" fill="rgb(251,115,12)"/><text x="34.8852%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (20,588,459 samples, 4.56%)</title><rect x="34.8067%" y="133" width="4.5650%" height="15" fill="rgb(240,54,50)"/><text x="35.0567%" y="143.50">speci..</text></g><g><title>coherence_checking (21,572,990 samples, 4.78%)</title><rect x="34.6275%" y="165" width="4.7832%" height="15" fill="rgb(233,84,52)"/><text x="34.8775%" y="175.50">cohere..</text></g><g><title>associated_item (949,654 samples, 0.21%)</title><rect x="60.1995%" y="101" width="0.2106%" height="15" fill="rgb(207,117,47)"/><text x="60.4495%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (768,203 samples, 0.17%)</title><rect x="60.2397%" y="85" width="0.1703%" height="15" fill="rgb(249,43,39)"/><text x="60.4897%" y="95.50"></text></g><g><title>associated_items (1,398,360 samples, 0.31%)</title><rect x="60.1172%" y="117" width="0.3100%" height="15" fill="rgb(209,38,44)"/><text x="60.3672%" y="127.50"></text></g><g><title>adt_dtorck_constraint (605,096 samples, 0.13%)</title><rect x="60.9099%" y="101" width="0.1342%" height="15" fill="rgb(236,212,23)"/><text x="61.1599%" y="111.50"></text></g><g><title>dropck_outlives (2,518,193 samples, 0.56%)</title><rect x="60.5029%" y="117" width="0.5583%" height="15" fill="rgb(242,79,21)"/><text x="60.7529%" y="127.50"></text></g><g><title>predicates_of (503,906 samples, 0.11%)</title><rect x="63.0765%" y="101" width="0.1117%" height="15" fill="rgb(211,96,35)"/><text x="63.3265%" y="111.50"></text></g><g><title>trait_impls_of (1,261,155 samples, 0.28%)</title><rect x="63.2906%" y="101" width="0.2796%" height="15" fill="rgb(253,215,40)"/><text x="63.5406%" y="111.50"></text></g><g><title>implementations_of_trait (459,483 samples, 0.10%)</title><rect x="63.4684%" y="85" width="0.1019%" height="15" fill="rgb(211,81,21)"/><text x="63.7184%" y="95.50"></text></g><g><title>evaluate_obligation (11,323,478 samples, 2.51%)</title><rect x="61.0613%" y="117" width="2.5107%" height="15" fill="rgb(208,190,38)"/><text x="61.3113%" y="127.50">ev..</text></g><g><title>fn_sig (1,060,810 samples, 0.24%)</title><rect x="63.5914%" y="117" width="0.2352%" height="15" fill="rgb(235,213,38)"/><text x="63.8414%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (989,448 samples, 0.22%)</title><rect x="63.6072%" y="101" width="0.2194%" height="15" fill="rgb(237,122,38)"/><text x="63.8572%" y="111.50"></text></g><g><title>item_attrs (474,539 samples, 0.11%)</title><rect x="63.9686%" y="117" width="0.1052%" height="15" fill="rgb(244,218,35)"/><text x="64.2186%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (452,029 samples, 0.10%)</title><rect x="63.9736%" y="101" width="0.1002%" height="15" fill="rgb(240,68,47)"/><text x="64.2236%" y="111.50"></text></g><g><title>evaluate_obligation (1,088,024 samples, 0.24%)</title><rect x="64.3963%" y="101" width="0.2412%" height="15" fill="rgb(210,16,53)"/><text x="64.6463%" y="111.50"></text></g><g><title>method_autoderef_steps (2,327,679 samples, 0.52%)</title><rect x="64.1272%" y="117" width="0.5161%" height="15" fill="rgb(235,124,12)"/><text x="64.3772%" y="127.50"></text></g><g><title>predicates_of (1,099,725 samples, 0.24%)</title><rect x="64.7284%" y="117" width="0.2438%" height="15" fill="rgb(224,169,11)"/><text x="64.9784%" y="127.50"></text></g><g><title>predicates_defined_on (729,379 samples, 0.16%)</title><rect x="64.8105%" y="101" width="0.1617%" height="15" fill="rgb(250,166,2)"/><text x="65.0605%" y="111.50"></text></g><g><title>module_children (4,576,573 samples, 1.01%)</title><rect x="65.2111%" y="101" width="1.0147%" height="15" fill="rgb(242,216,29)"/><text x="65.4611%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (4,492,043 samples, 1.00%)</title><rect x="65.2299%" y="85" width="0.9960%" height="15" fill="rgb(230,116,27)"/><text x="65.4799%" y="95.50"></text></g><g><title>trimmed_def_paths (5,622,323 samples, 1.25%)</title><rect x="64.9809%" y="117" width="1.2466%" height="15" fill="rgb(228,99,48)"/><text x="65.2309%" y="127.50"></text></g><g><title>dropck_outlives (526,577 samples, 0.12%)</title><rect x="69.7771%" y="101" width="0.1168%" height="15" fill="rgb(253,11,6)"/><text x="70.0271%" y="111.50"></text></g><g><title>evaluate_obligation (2,001,290 samples, 0.44%)</title><rect x="69.8939%" y="101" width="0.4437%" height="15" fill="rgb(247,143,39)"/><text x="70.1439%" y="111.50"></text></g><g><title>is_copy_raw (662,537 samples, 0.15%)</title><rect x="70.4247%" y="101" width="0.1469%" height="15" fill="rgb(236,97,10)"/><text x="70.6747%" y="111.50"></text></g><g><title>evaluate_obligation (530,853 samples, 0.12%)</title><rect x="70.4539%" y="85" width="0.1177%" height="15" fill="rgb(233,208,19)"/><text x="70.7039%" y="95.50"></text></g><g><title>method_autoderef_steps (653,922 samples, 0.14%)</title><rect x="70.5976%" y="101" width="0.1450%" height="15" fill="rgb(216,164,2)"/><text x="70.8476%" y="111.50"></text></g><g><title>typeck (20,572,350 samples, 4.56%)</title><rect x="66.2754%" y="117" width="4.5614%" height="15" fill="rgb(220,129,5)"/><text x="66.5254%" y="127.50">typeck</text></g><g><title>item_bodies_checking (142,168,991 samples, 31.52%)</title><rect x="39.4410%" y="165" width="31.5223%" height="15" fill="rgb(242,17,10)"/><text x="39.6910%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (142,164,881 samples, 31.52%)</title><rect x="39.4419%" y="149" width="31.5214%" height="15" fill="rgb(242,107,0)"/><text x="39.6919%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (141,754,288 samples, 31.43%)</title><rect x="39.5330%" y="133" width="31.4303%" height="15" fill="rgb(251,28,31)"/><text x="39.7830%" y="143.50">typeck</text></g><g><title>adt_def (603,697 samples, 0.13%)</title><rect x="72.6558%" y="85" width="0.1339%" height="15" fill="rgb(233,223,10)"/><text x="72.9058%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (588,487 samples, 0.13%)</title><rect x="72.6592%" y="69" width="0.1305%" height="15" fill="rgb(215,21,27)"/><text x="72.9092%" y="79.50"></text></g><g><title>adt_def (475,076 samples, 0.11%)</title><rect x="72.8461%" y="69" width="0.1053%" height="15" fill="rgb(232,23,21)"/><text x="73.0961%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (466,226 samples, 0.10%)</title><rect x="72.8481%" y="53" width="0.1034%" height="15" fill="rgb(244,5,23)"/><text x="73.0981%" y="63.50"></text></g><g><title>adt_dtorck_constraint (454,495 samples, 0.10%)</title><rect x="72.9711%" y="69" width="0.1008%" height="15" fill="rgb(226,81,46)"/><text x="73.2211%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,348,984 samples, 0.30%)</title><rect x="72.8134%" y="85" width="0.2991%" height="15" fill="rgb(247,70,30)"/><text x="73.0634%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,645,420 samples, 0.59%)</title><rect x="72.5981%" y="101" width="0.5866%" height="15" fill="rgb(212,68,19)"/><text x="72.8481%" y="111.50"></text></g><g><title>dropck_outlives (3,078,164 samples, 0.68%)</title><rect x="72.5548%" y="117" width="0.6825%" height="15" fill="rgb(240,187,13)"/><text x="72.8048%" y="127.50"></text></g><g><title>generics_of (656,457 samples, 0.15%)</title><rect x="73.7697%" y="101" width="0.1456%" height="15" fill="rgb(223,113,26)"/><text x="74.0197%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (476,456 samples, 0.11%)</title><rect x="73.8097%" y="85" width="0.1056%" height="15" fill="rgb(206,192,2)"/><text x="74.0597%" y="95.50"></text></g><g><title>impl_trait_ref (1,186,673 samples, 0.26%)</title><rect x="73.9454%" y="101" width="0.2631%" height="15" fill="rgb(241,108,4)"/><text x="74.1954%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,004,862 samples, 0.22%)</title><rect x="73.9858%" y="85" width="0.2228%" height="15" fill="rgb(247,173,49)"/><text x="74.2358%" y="95.50"></text></g><g><title>predicates_of (963,153 samples, 0.21%)</title><rect x="74.2165%" y="101" width="0.2136%" height="15" fill="rgb(224,114,35)"/><text x="74.4665%" y="111.50"></text></g><g><title>specializes (2,052,144 samples, 0.46%)</title><rect x="74.4300%" y="101" width="0.4550%" height="15" fill="rgb(245,159,27)"/><text x="74.6800%" y="111.50"></text></g><g><title>param_env (1,208,789 samples, 0.27%)</title><rect x="74.6170%" y="85" width="0.2680%" height="15" fill="rgb(245,172,44)"/><text x="74.8670%" y="95.50"></text></g><g><title>def_span (567,164 samples, 0.13%)</title><rect x="74.7593%" y="69" width="0.1258%" height="15" fill="rgb(236,23,11)"/><text x="75.0093%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (503,974 samples, 0.11%)</title><rect x="74.7733%" y="53" width="0.1117%" height="15" fill="rgb(205,117,38)"/><text x="75.0233%" y="63.50"></text></g><g><title>evaluate_obligation (7,597,047 samples, 1.68%)</title><rect x="73.2373%" y="117" width="1.6844%" height="15" fill="rgb(237,72,25)"/><text x="73.4873%" y="127.50"></text></g><g><title>item_types_checking (18,248,573 samples, 4.05%)</title><rect x="70.9633%" y="165" width="4.0461%" height="15" fill="rgb(244,70,9)"/><text x="71.2133%" y="175.50">item..</text></g><g><title>check_mod_item_types (18,223,133 samples, 4.04%)</title><rect x="70.9690%" y="149" width="4.0405%" height="15" fill="rgb(217,125,39)"/><text x="71.2190%" y="159.50">chec..</text></g><g><title>typeck (13,118,077 samples, 2.91%)</title><rect x="72.1009%" y="133" width="2.9086%" height="15" fill="rgb(235,36,10)"/><text x="72.3509%" y="143.50">ty..</text></g><g><title>fn_sig (1,447,556 samples, 0.32%)</title><rect x="75.2676%" y="133" width="0.3210%" height="15" fill="rgb(251,123,47)"/><text x="75.5176%" y="143.50"></text></g><g><title>named_region_map (932,001 samples, 0.21%)</title><rect x="75.7422%" y="117" width="0.2066%" height="15" fill="rgb(221,13,13)"/><text x="75.9922%" y="127.50"></text></g><g><title>resolve_lifetimes (846,381 samples, 0.19%)</title><rect x="75.7612%" y="101" width="0.1877%" height="15" fill="rgb(238,131,9)"/><text x="76.0112%" y="111.50"></text></g><g><title>generics_of (1,675,199 samples, 0.37%)</title><rect x="75.5885%" y="133" width="0.3714%" height="15" fill="rgb(211,50,8)"/><text x="75.8385%" y="143.50"></text></g><g><title>late_bound_vars_map (589,579 samples, 0.13%)</title><rect x="76.3299%" y="85" width="0.1307%" height="15" fill="rgb(245,182,24)"/><text x="76.5799%" y="95.50"></text></g><g><title>resolve_lifetimes (553,948 samples, 0.12%)</title><rect x="76.3378%" y="69" width="0.1228%" height="15" fill="rgb(242,14,37)"/><text x="76.5878%" y="79.50"></text></g><g><title>explicit_predicates_of (1,311,335 samples, 0.29%)</title><rect x="76.1880%" y="101" width="0.2908%" height="15" fill="rgb(246,228,12)"/><text x="76.4380%" y="111.50"></text></g><g><title>predicates_of (3,374,964 samples, 0.75%)</title><rect x="76.0101%" y="133" width="0.7483%" height="15" fill="rgb(213,55,15)"/><text x="76.2601%" y="143.50"></text></g><g><title>predicates_defined_on (3,155,111 samples, 0.70%)</title><rect x="76.0589%" y="117" width="0.6996%" height="15" fill="rgb(209,9,3)"/><text x="76.3089%" y="127.50"></text></g><g><title>inferred_outlives_of (1,261,413 samples, 0.28%)</title><rect x="76.4788%" y="101" width="0.2797%" height="15" fill="rgb(230,59,30)"/><text x="76.7288%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,183,833 samples, 0.26%)</title><rect x="76.4960%" y="85" width="0.2625%" height="15" fill="rgb(209,121,21)"/><text x="76.7460%" y="95.50"></text></g><g><title>type_of (818,441 samples, 0.18%)</title><rect x="76.5770%" y="69" width="0.1815%" height="15" fill="rgb(220,109,13)"/><text x="76.8270%" y="79.50"></text></g><g><title>type_collecting (8,413,824 samples, 1.87%)</title><rect x="75.0130%" y="165" width="1.8655%" height="15" fill="rgb(232,18,1)"/><text x="75.2630%" y="175.50">t..</text></g><g><title>collect_mod_item_types (8,383,784 samples, 1.86%)</title><rect x="75.0197%" y="149" width="1.8589%" height="15" fill="rgb(215,41,42)"/><text x="75.2697%" y="159.50">c..</text></g><g><title>type_of (457,353 samples, 0.10%)</title><rect x="76.7772%" y="133" width="0.1014%" height="15" fill="rgb(224,123,36)"/><text x="77.0272%" y="143.50"></text></g><g><title>evaluate_obligation (2,267,941 samples, 0.50%)</title><rect x="79.0270%" y="133" width="0.5029%" height="15" fill="rgb(240,125,3)"/><text x="79.2770%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,168,142 samples, 0.26%)</title><rect x="79.5315%" y="133" width="0.2590%" height="15" fill="rgb(205,98,50)"/><text x="79.7815%" y="143.50"></text></g><g><title>param_env (1,436,669 samples, 0.32%)</title><rect x="79.8648%" y="133" width="0.3185%" height="15" fill="rgb(205,185,37)"/><text x="80.1148%" y="143.50"></text></g><g><title>region_scope_tree (1,658,259 samples, 0.37%)</title><rect x="80.2069%" y="133" width="0.3677%" height="15" fill="rgb(238,207,15)"/><text x="80.4569%" y="143.50"></text></g><g><title>check_impl_item_well_formed (15,688,091 samples, 3.48%)</title><rect x="77.1382%" y="149" width="3.4784%" height="15" fill="rgb(213,199,42)"/><text x="77.3882%" y="159.50">che..</text></g><g><title>evaluate_obligation (1,445,367 samples, 0.32%)</title><rect x="81.8111%" y="133" width="0.3205%" height="15" fill="rgb(235,201,11)"/><text x="82.0611%" y="143.50"></text></g><g><title>param_env (965,384 samples, 0.21%)</title><rect x="82.2451%" y="133" width="0.2140%" height="15" fill="rgb(207,46,11)"/><text x="82.4951%" y="143.50"></text></g><g><title>check_item_well_formed (9,046,227 samples, 2.01%)</title><rect x="80.6166%" y="149" width="2.0058%" height="15" fill="rgb(241,35,35)"/><text x="80.8666%" y="159.50">c..</text></g><g><title>analysis (372,904,618 samples, 82.68%)</title><rect x="0.2311%" y="197" width="82.6819%" height="15" fill="rgb(243,32,47)"/><text x="0.4811%" y="207.50">analysis</text></g><g><title>type_check_crate (218,116,716 samples, 48.36%)</title><rect x="34.5513%" y="181" width="48.3617%" height="15" fill="rgb(247,202,23)"/><text x="34.8013%" y="191.50">type_check_crate</text></g><g><title>wf_checking (27,189,913 samples, 6.03%)</title><rect x="76.8844%" y="165" width="6.0287%" height="15" fill="rgb(219,102,11)"/><text x="77.1344%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (1,310,964 samples, 0.29%)</title><rect x="82.6223%" y="149" width="0.2907%" height="15" fill="rgb(243,110,44)"/><text x="82.8723%" y="159.50"></text></g><g><title>codegen_crate (549,066 samples, 0.12%)</title><rect x="82.9144%" y="197" width="0.1217%" height="15" fill="rgb(222,74,54)"/><text x="83.1644%" y="207.50"></text></g><g><title>metadata_register_crate (2,771,361 samples, 0.61%)</title><rect x="90.8775%" y="149" width="0.6145%" height="15" fill="rgb(216,99,12)"/><text x="91.1275%" y="159.50"></text></g><g><title>metadata_register_crate (1,390,650 samples, 0.31%)</title><rect x="91.1836%" y="133" width="0.3083%" height="15" fill="rgb(226,22,26)"/><text x="91.4336%" y="143.50"></text></g><g><title>metadata_register_crate (537,685 samples, 0.12%)</title><rect x="91.3727%" y="117" width="0.1192%" height="15" fill="rgb(217,163,10)"/><text x="91.6227%" y="127.50"></text></g><g><title>macro_expand_crate (38,011,912 samples, 8.43%)</title><rect x="83.2344%" y="181" width="8.4282%" height="15" fill="rgb(213,25,53)"/><text x="83.4844%" y="191.50">macro_expand..</text></g><g><title>expand_crate (37,995,792 samples, 8.42%)</title><rect x="83.2380%" y="165" width="8.4246%" height="15" fill="rgb(252,105,26)"/><text x="83.4880%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (769,676 samples, 0.17%)</title><rect x="91.4919%" y="149" width="0.1707%" height="15" fill="rgb(220,39,43)"/><text x="91.7419%" y="159.50"></text></g><g><title>late_resolve_crate (6,593,924 samples, 1.46%)</title><rect x="91.7993%" y="165" width="1.4620%" height="15" fill="rgb(229,68,48)"/><text x="92.0493%" y="175.50"></text></g><g><title>configure_and_expand (46,603,689 samples, 10.33%)</title><rect x="83.0361%" y="197" width="10.3332%" height="15" fill="rgb(252,8,32)"/><text x="83.2861%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (7,632,316 samples, 1.69%)</title><rect x="91.6770%" y="181" width="1.6923%" height="15" fill="rgb(223,20,43)"/><text x="91.9270%" y="191.50"></text></g><g><title>drop_ast (789,489 samples, 0.18%)</title><rect x="93.3693%" y="197" width="0.1750%" height="15" fill="rgb(229,81,49)"/><text x="93.6193%" y="207.50"></text></g><g><title>early_lint_checks (1,494,356 samples, 0.33%)</title><rect x="93.5500%" y="197" width="0.3313%" height="15" fill="rgb(236,28,36)"/><text x="93.8000%" y="207.50"></text></g><g><title>free_global_ctxt (6,876,577 samples, 1.52%)</title><rect x="93.8814%" y="197" width="1.5247%" height="15" fill="rgb(249,185,26)"/><text x="94.1314%" y="207.50"></text></g><g><title>generate_crate_metadata (4,569,011 samples, 1.01%)</title><rect x="95.4061%" y="197" width="1.0131%" height="15" fill="rgb(249,174,33)"/><text x="95.6561%" y="207.50"></text></g><g><title>hir_lowering (12,694,501 samples, 2.81%)</title><rect x="96.4191%" y="197" width="2.8147%" height="15" fill="rgb(233,201,37)"/><text x="96.6691%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (2,134,904 samples, 0.47%)</title><rect x="99.3848%" y="197" width="0.4734%" height="15" fill="rgb(221,78,26)"/><text x="99.6348%" y="207.50"></text></g><g><title>all (451,011,197 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (451,011,197 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (520,356 samples, 0.12%)</title><rect x="99.8846%" y="197" width="0.1154%" height="15" fill="rgb(229,67,23)"/><text x="100.1346%" y="207.50"></text></g></svg></svg>