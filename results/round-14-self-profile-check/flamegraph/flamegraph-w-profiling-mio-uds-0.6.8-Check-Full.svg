<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (471,813 samples, 0.48%)</title><rect x="13.7423%" y="117" width="0.4816%" height="15" fill="rgb(227,0,7)"/><text x="13.9923%" y="127.50"></text></g><g><title>item_attrs (338,334 samples, 0.35%)</title><rect x="14.9076%" y="85" width="0.3454%" height="15" fill="rgb(217,0,24)"/><text x="15.1576%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (324,914 samples, 0.33%)</title><rect x="14.9213%" y="69" width="0.3317%" height="15" fill="rgb(221,193,54)"/><text x="15.1713%" y="79.50"></text></g><g><title>codegen_fn_attrs (505,879 samples, 0.52%)</title><rect x="14.7656%" y="101" width="0.5164%" height="15" fill="rgb(248,212,6)"/><text x="15.0156%" y="111.50"></text></g><g><title>eval_to_const_value_raw (101,120 samples, 0.10%)</title><rect x="18.3938%" y="85" width="0.1032%" height="15" fill="rgb(208,68,35)"/><text x="18.6438%" y="95.50"></text></g><g><title>is_copy_raw (116,582 samples, 0.12%)</title><rect x="18.4988%" y="85" width="0.1190%" height="15" fill="rgb(232,128,0)"/><text x="18.7488%" y="95.50"></text></g><g><title>is_copy_raw (124,051 samples, 0.13%)</title><rect x="18.8199%" y="53" width="0.1266%" height="15" fill="rgb(207,160,47)"/><text x="19.0699%" y="63.50"></text></g><g><title>evaluate_obligation (103,961 samples, 0.11%)</title><rect x="18.8404%" y="37" width="0.1061%" height="15" fill="rgb(228,23,34)"/><text x="19.0904%" y="47.50"></text></g><g><title>adt_drop_tys (316,634 samples, 0.32%)</title><rect x="18.7047%" y="69" width="0.3232%" height="15" fill="rgb(218,30,26)"/><text x="18.9547%" y="79.50"></text></g><g><title>needs_drop_raw (1,174,510 samples, 1.20%)</title><rect x="18.6183%" y="85" width="1.1989%" height="15" fill="rgb(220,122,19)"/><text x="18.8683%" y="95.50"></text></g><g><title>is_copy_raw (773,246 samples, 0.79%)</title><rect x="19.0279%" y="69" width="0.7893%" height="15" fill="rgb(250,228,42)"/><text x="19.2779%" y="79.50"></text></g><g><title>evaluate_obligation (675,174 samples, 0.69%)</title><rect x="19.1280%" y="53" width="0.6892%" height="15" fill="rgb(240,193,28)"/><text x="19.3780%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (237,753 samples, 0.24%)</title><rect x="20.1227%" y="69" width="0.2427%" height="15" fill="rgb(216,20,37)"/><text x="20.3727%" y="79.50"></text></g><g><title>impl_item_implementor_ids (115,822 samples, 0.12%)</title><rect x="20.3777%" y="69" width="0.1182%" height="15" fill="rgb(206,188,39)"/><text x="20.6277%" y="79.50"></text></g><g><title>impl_parent (334,982 samples, 0.34%)</title><rect x="21.1866%" y="53" width="0.3419%" height="15" fill="rgb(217,207,13)"/><text x="21.4366%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (231,121 samples, 0.24%)</title><rect x="21.2926%" y="37" width="0.2359%" height="15" fill="rgb(231,73,38)"/><text x="21.5426%" y="47.50"></text></g><g><title>specialization_graph_of (1,653,149 samples, 1.69%)</title><rect x="20.4959%" y="69" width="1.6875%" height="15" fill="rgb(225,20,46)"/><text x="20.7459%" y="79.50"></text></g><g><title>impl_trait_ref (641,569 samples, 0.65%)</title><rect x="21.5285%" y="53" width="0.6549%" height="15" fill="rgb(210,31,41)"/><text x="21.7785%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (532,339 samples, 0.54%)</title><rect x="21.6400%" y="37" width="0.5434%" height="15" fill="rgb(221,200,47)"/><text x="21.8900%" y="47.50"></text></g><g><title>resolve_instance (2,432,360 samples, 2.48%)</title><rect x="19.8431%" y="85" width="2.4829%" height="15" fill="rgb(226,26,5)"/><text x="20.0931%" y="95.50">re..</text></g><g><title>thir_body (1,084,622 samples, 1.11%)</title><rect x="22.3555%" y="85" width="1.1071%" height="15" fill="rgb(249,33,26)"/><text x="22.6055%" y="95.50"></text></g><g><title>mir_const (10,531,626 samples, 10.75%)</title><rect x="12.7333%" y="133" width="10.7503%" height="15" fill="rgb(235,183,28)"/><text x="12.9833%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (9,071,295 samples, 9.26%)</title><rect x="14.2239%" y="117" width="9.2597%" height="15" fill="rgb(221,5,38)"/><text x="14.4739%" y="127.50">unsafety_chec..</text></g><g><title>mir_built (8,034,790 samples, 8.20%)</title><rect x="15.2819%" y="101" width="8.2016%" height="15" fill="rgb(247,18,42)"/><text x="15.5319%" y="111.50">mir_built</text></g><g><title>mir_promoted (11,536,517 samples, 11.78%)</title><rect x="11.7596%" y="149" width="11.7761%" height="15" fill="rgb(241,131,45)"/><text x="12.0096%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (148,652 samples, 0.15%)</title><rect x="23.5357%" y="149" width="0.1517%" height="15" fill="rgb(249,31,29)"/><text x="23.7857%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (198,773 samples, 0.20%)</title><rect x="23.6874%" y="149" width="0.2029%" height="15" fill="rgb(225,111,53)"/><text x="23.9374%" y="159.50"></text></g><g><title>normalize_projection_ty (137,912 samples, 0.14%)</title><rect x="23.7495%" y="133" width="0.1408%" height="15" fill="rgb(238,160,17)"/><text x="23.9995%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,343,018 samples, 1.37%)</title><rect x="23.9288%" y="149" width="1.3709%" height="15" fill="rgb(214,148,48)"/><text x="24.1788%" y="159.50"></text></g><g><title>evaluate_obligation (149,042 samples, 0.15%)</title><rect x="25.1476%" y="133" width="0.1521%" height="15" fill="rgb(232,36,49)"/><text x="25.3976%" y="143.50"></text></g><g><title>MIR_borrow_checking (23,925,466 samples, 24.42%)</title><rect x="0.8819%" y="181" width="24.4223%" height="15" fill="rgb(209,103,24)"/><text x="1.1319%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,793,805 samples, 24.29%)</title><rect x="1.0163%" y="165" width="24.2879%" height="15" fill="rgb(229,88,8)"/><text x="1.2663%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (179,841 samples, 0.18%)</title><rect x="25.3470%" y="181" width="0.1836%" height="15" fill="rgb(213,181,19)"/><text x="25.5970%" y="191.50"></text></g><g><title>codegen_fn_attrs (142,290 samples, 0.15%)</title><rect x="26.0273%" y="117" width="0.1452%" height="15" fill="rgb(254,191,54)"/><text x="26.2773%" y="127.50"></text></g><g><title>should_inherit_track_caller (255,973 samples, 0.26%)</title><rect x="25.9189%" y="133" width="0.2613%" height="15" fill="rgb(241,83,37)"/><text x="26.1689%" y="143.50"></text></g><g><title>codegen_fn_attrs (424,445 samples, 0.43%)</title><rect x="25.7591%" y="149" width="0.4333%" height="15" fill="rgb(233,36,39)"/><text x="26.0091%" y="159.50"></text></g><g><title>check_mod_attrs (624,647 samples, 0.64%)</title><rect x="25.5549%" y="165" width="0.6376%" height="15" fill="rgb(226,3,54)"/><text x="25.8049%" y="175.50"></text></g><g><title>check_mod_const_bodies (133,590 samples, 0.14%)</title><rect x="26.1925%" y="165" width="0.1364%" height="15" fill="rgb(245,192,40)"/><text x="26.4425%" y="175.50"></text></g><g><title>lint_levels (106,521 samples, 0.11%)</title><rect x="26.5737%" y="149" width="0.1087%" height="15" fill="rgb(238,167,29)"/><text x="26.8237%" y="159.50"></text></g><g><title>lookup_deprecation_entry (134,181 samples, 0.14%)</title><rect x="26.6824%" y="149" width="0.1370%" height="15" fill="rgb(232,182,51)"/><text x="26.9324%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (493,767 samples, 0.50%)</title><rect x="26.4034%" y="165" width="0.5040%" height="15" fill="rgb(231,60,39)"/><text x="26.6534%" y="175.50"></text></g><g><title>misc_checking_1 (1,404,306 samples, 1.43%)</title><rect x="25.5310%" y="181" width="1.4335%" height="15" fill="rgb(208,69,12)"/><text x="25.7810%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (451,385 samples, 0.46%)</title><rect x="26.9661%" y="165" width="0.4608%" height="15" fill="rgb(235,93,37)"/><text x="27.2161%" y="175.50"></text></g><g><title>check_mod_liveness (356,585 samples, 0.36%)</title><rect x="27.0629%" y="149" width="0.3640%" height="15" fill="rgb(213,116,39)"/><text x="27.3129%" y="159.50"></text></g><g><title>misc_checking_2 (1,052,321 samples, 1.07%)</title><rect x="26.9645%" y="181" width="1.0742%" height="15" fill="rgb(222,207,29)"/><text x="27.2145%" y="191.50"></text></g><g><title>match_checking (599,356 samples, 0.61%)</title><rect x="27.4269%" y="165" width="0.6118%" height="15" fill="rgb(206,96,30)"/><text x="27.6769%" y="175.50"></text></g><g><title>check_match (568,636 samples, 0.58%)</title><rect x="27.4582%" y="149" width="0.5804%" height="15" fill="rgb(218,138,4)"/><text x="27.7082%" y="159.50"></text></g><g><title>check_private_in_public (211,262 samples, 0.22%)</title><rect x="28.0484%" y="165" width="0.2156%" height="15" fill="rgb(250,191,14)"/><text x="28.2984%" y="175.50"></text></g><g><title>death_checking (400,735 samples, 0.41%)</title><rect x="28.2641%" y="165" width="0.4091%" height="15" fill="rgb(239,60,40)"/><text x="28.5141%" y="175.50"></text></g><g><title>param_env (449,517 samples, 0.46%)</title><rect x="29.4207%" y="133" width="0.4589%" height="15" fill="rgb(206,27,48)"/><text x="29.6707%" y="143.50"></text></g><g><title>predicates_of (221,352 samples, 0.23%)</title><rect x="29.6536%" y="117" width="0.2259%" height="15" fill="rgb(225,35,8)"/><text x="29.9036%" y="127.50"></text></g><g><title>predicates_defined_on (176,441 samples, 0.18%)</title><rect x="29.6994%" y="101" width="0.1801%" height="15" fill="rgb(250,213,24)"/><text x="29.9494%" y="111.50"></text></g><g><title>crate_lints (2,265,705 samples, 2.31%)</title><rect x="28.6745%" y="149" width="2.3128%" height="15" fill="rgb(247,123,22)"/><text x="28.9245%" y="159.50">c..</text></g><g><title>type_of (1,082,115 samples, 1.10%)</title><rect x="29.8827%" y="133" width="1.1046%" height="15" fill="rgb(231,138,38)"/><text x="30.1327%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (839,321 samples, 0.86%)</title><rect x="30.1305%" y="117" width="0.8567%" height="15" fill="rgb(231,145,46)"/><text x="30.3805%" y="127.50"></text></g><g><title>lint_checking (2,635,099 samples, 2.69%)</title><rect x="28.6731%" y="165" width="2.6898%" height="15" fill="rgb(251,118,11)"/><text x="28.9231%" y="175.50">li..</text></g><g><title>module_lints (368,044 samples, 0.38%)</title><rect x="30.9873%" y="149" width="0.3757%" height="15" fill="rgb(217,147,25)"/><text x="31.2373%" y="159.50"></text></g><g><title>lint_mod (362,964 samples, 0.37%)</title><rect x="30.9924%" y="133" width="0.3705%" height="15" fill="rgb(247,81,37)"/><text x="31.2424%" y="143.50"></text></g><g><title>privacy_access_levels (236,403 samples, 0.24%)</title><rect x="31.3629%" y="165" width="0.2413%" height="15" fill="rgb(209,12,38)"/><text x="31.6129%" y="175.50"></text></g><g><title>privacy_checking_modules (724,398 samples, 0.74%)</title><rect x="31.6042%" y="165" width="0.7394%" height="15" fill="rgb(227,1,9)"/><text x="31.8542%" y="175.50"></text></g><g><title>check_mod_privacy (720,838 samples, 0.74%)</title><rect x="31.6079%" y="149" width="0.7358%" height="15" fill="rgb(248,47,43)"/><text x="31.8579%" y="159.50"></text></g><g><title>misc_checking_3 (4,236,547 samples, 4.32%)</title><rect x="28.0387%" y="181" width="4.3245%" height="15" fill="rgb(221,10,30)"/><text x="28.2887%" y="191.50">misc_..</text></g><g><title>impl_parent (962,151 samples, 0.98%)</title><rect x="33.9695%" y="117" width="0.9821%" height="15" fill="rgb(210,229,1)"/><text x="34.2195%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (643,458 samples, 0.66%)</title><rect x="34.2948%" y="101" width="0.6568%" height="15" fill="rgb(222,148,37)"/><text x="34.5448%" y="111.50"></text></g><g><title>impl_trait_ref (2,923,114 samples, 2.98%)</title><rect x="34.9516%" y="117" width="2.9838%" height="15" fill="rgb(234,67,33)"/><text x="35.2016%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,589,152 samples, 2.64%)</title><rect x="35.2925%" y="101" width="2.6429%" height="15" fill="rgb(247,98,35)"/><text x="35.5425%" y="111.50">me..</text></g><g><title>trait_impls_of (330,975 samples, 0.34%)</title><rect x="38.0216%" y="117" width="0.3378%" height="15" fill="rgb(247,138,52)"/><text x="38.2716%" y="127.50"></text></g><g><title>implementations_of_trait (106,562 samples, 0.11%)</title><rect x="38.2507%" y="101" width="0.1088%" height="15" fill="rgb(213,79,30)"/><text x="38.5007%" y="111.50"></text></g><g><title>coherent_trait (5,791,774 samples, 5.91%)</title><rect x="32.4604%" y="149" width="5.9120%" height="15" fill="rgb(246,177,23)"/><text x="32.7104%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (5,777,354 samples, 5.90%)</title><rect x="32.4751%" y="133" width="5.8973%" height="15" fill="rgb(230,62,27)"/><text x="32.7251%" y="143.50">special..</text></g><g><title>coherence_checking (5,864,514 samples, 5.99%)</title><rect x="32.4441%" y="165" width="5.9863%" height="15" fill="rgb(216,154,8)"/><text x="32.6941%" y="175.50">coherenc..</text></g><g><title>associated_item (538,117 samples, 0.55%)</title><rect x="57.1636%" y="101" width="0.5493%" height="15" fill="rgb(244,35,45)"/><text x="57.4136%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (438,806 samples, 0.45%)</title><rect x="57.2650%" y="85" width="0.4479%" height="15" fill="rgb(251,115,12)"/><text x="57.5150%" y="95.50"></text></g><g><title>associated_items (751,379 samples, 0.77%)</title><rect x="56.9789%" y="117" width="0.7670%" height="15" fill="rgb(240,54,50)"/><text x="57.2289%" y="127.50"></text></g><g><title>adt_def (118,061 samples, 0.12%)</title><rect x="58.1762%" y="69" width="0.1205%" height="15" fill="rgb(233,84,52)"/><text x="58.4262%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (117,411 samples, 0.12%)</title><rect x="58.1769%" y="53" width="0.1198%" height="15" fill="rgb(207,117,47)"/><text x="58.4269%" y="63.50"></text></g><g><title>adt_dtorck_constraint (106,471 samples, 0.11%)</title><rect x="58.3038%" y="69" width="0.1087%" height="15" fill="rgb(249,43,39)"/><text x="58.5538%" y="79.50"></text></g><g><title>adt_dtorck_constraint (254,162 samples, 0.26%)</title><rect x="58.1642%" y="85" width="0.2594%" height="15" fill="rgb(209,38,44)"/><text x="58.4142%" y="95.50"></text></g><g><title>dropck_outlives (605,345 samples, 0.62%)</title><rect x="57.8330%" y="117" width="0.6179%" height="15" fill="rgb(236,212,23)"/><text x="58.0830%" y="127.50"></text></g><g><title>adt_dtorck_constraint (400,765 samples, 0.41%)</title><rect x="58.0419%" y="101" width="0.4091%" height="15" fill="rgb(242,79,21)"/><text x="58.2919%" y="111.50"></text></g><g><title>adt_def (140,133 samples, 0.14%)</title><rect x="59.5548%" y="85" width="0.1430%" height="15" fill="rgb(211,96,35)"/><text x="59.8048%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (137,083 samples, 0.14%)</title><rect x="59.5580%" y="69" width="0.1399%" height="15" fill="rgb(253,215,40)"/><text x="59.8080%" y="79.50"></text></g><g><title>item_attrs (100,472 samples, 0.10%)</title><rect x="59.5953%" y="53" width="0.1026%" height="15" fill="rgb(211,81,21)"/><text x="59.8453%" y="63.50"></text></g><g><title>adt_sized_constraint (159,693 samples, 0.16%)</title><rect x="59.5407%" y="101" width="0.1630%" height="15" fill="rgb(208,190,38)"/><text x="59.7907%" y="111.50"></text></g><g><title>predicates_of (203,203 samples, 0.21%)</title><rect x="59.9654%" y="101" width="0.2074%" height="15" fill="rgb(235,213,38)"/><text x="60.2154%" y="111.50"></text></g><g><title>predicates_defined_on (132,943 samples, 0.14%)</title><rect x="60.0371%" y="85" width="0.1357%" height="15" fill="rgb(237,122,38)"/><text x="60.2871%" y="95.50"></text></g><g><title>specializes (191,352 samples, 0.20%)</title><rect x="60.1728%" y="101" width="0.1953%" height="15" fill="rgb(244,218,35)"/><text x="60.4228%" y="111.50"></text></g><g><title>param_env (160,811 samples, 0.16%)</title><rect x="60.2040%" y="85" width="0.1642%" height="15" fill="rgb(240,68,47)"/><text x="60.4540%" y="95.50"></text></g><g><title>def_span (119,611 samples, 0.12%)</title><rect x="60.2461%" y="69" width="0.1221%" height="15" fill="rgb(210,16,53)"/><text x="60.4961%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (116,881 samples, 0.12%)</title><rect x="60.2489%" y="53" width="0.1193%" height="15" fill="rgb(235,124,12)"/><text x="60.4989%" y="63.50"></text></g><g><title>trait_impls_of (800,209 samples, 0.82%)</title><rect x="60.3806%" y="101" width="0.8168%" height="15" fill="rgb(224,169,11)"/><text x="60.6306%" y="111.50"></text></g><g><title>implementations_of_trait (295,562 samples, 0.30%)</title><rect x="60.8958%" y="85" width="0.3017%" height="15" fill="rgb(250,166,2)"/><text x="61.1458%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (188,352 samples, 0.19%)</title><rect x="61.0052%" y="69" width="0.1923%" height="15" fill="rgb(242,216,29)"/><text x="61.2552%" y="79.50"></text></g><g><title>evaluate_obligation (2,693,888 samples, 2.75%)</title><rect x="58.4510%" y="117" width="2.7498%" height="15" fill="rgb(230,116,27)"/><text x="58.7010%" y="127.50">ev..</text></g><g><title>fn_sig (232,892 samples, 0.24%)</title><rect x="61.2309%" y="117" width="0.2377%" height="15" fill="rgb(228,99,48)"/><text x="61.4809%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (209,552 samples, 0.21%)</title><rect x="61.2547%" y="101" width="0.2139%" height="15" fill="rgb(253,11,6)"/><text x="61.5047%" y="111.50"></text></g><g><title>generics_of (185,614 samples, 0.19%)</title><rect x="61.4686%" y="117" width="0.1895%" height="15" fill="rgb(247,143,39)"/><text x="61.7186%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (131,674 samples, 0.13%)</title><rect x="61.5237%" y="101" width="0.1344%" height="15" fill="rgb(236,97,10)"/><text x="61.7737%" y="111.50"></text></g><g><title>item_attrs (259,692 samples, 0.27%)</title><rect x="61.9005%" y="117" width="0.2651%" height="15" fill="rgb(233,208,19)"/><text x="62.1505%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (246,942 samples, 0.25%)</title><rect x="61.9135%" y="101" width="0.2521%" height="15" fill="rgb(216,164,2)"/><text x="62.1635%" y="111.50"></text></g><g><title>method_autoderef_steps (253,093 samples, 0.26%)</title><rect x="62.2641%" y="117" width="0.2583%" height="15" fill="rgb(220,129,5)"/><text x="62.5141%" y="127.50"></text></g><g><title>evaluate_obligation (139,642 samples, 0.14%)</title><rect x="62.3799%" y="101" width="0.1425%" height="15" fill="rgb(242,17,10)"/><text x="62.6299%" y="111.50"></text></g><g><title>object_safety_violations (138,931 samples, 0.14%)</title><rect x="62.5224%" y="117" width="0.1418%" height="15" fill="rgb(242,107,0)"/><text x="62.7724%" y="127.50"></text></g><g><title>explicit_predicates_of (148,630 samples, 0.15%)</title><rect x="63.0159%" y="85" width="0.1517%" height="15" fill="rgb(251,28,31)"/><text x="63.2659%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (111,860 samples, 0.11%)</title><rect x="63.0534%" y="69" width="0.1142%" height="15" fill="rgb(233,223,10)"/><text x="63.3034%" y="79.50"></text></g><g><title>predicates_of (486,173 samples, 0.50%)</title><rect x="62.7439%" y="117" width="0.4963%" height="15" fill="rgb(215,21,27)"/><text x="62.9939%" y="127.50"></text></g><g><title>predicates_defined_on (331,462 samples, 0.34%)</title><rect x="62.9018%" y="101" width="0.3383%" height="15" fill="rgb(232,23,21)"/><text x="63.1518%" y="111.50"></text></g><g><title>type_of (101,451 samples, 0.10%)</title><rect x="63.2795%" y="117" width="0.1036%" height="15" fill="rgb(244,5,23)"/><text x="63.5295%" y="127.50"></text></g><g><title>associated_items (116,012 samples, 0.12%)</title><rect x="64.4989%" y="101" width="0.1184%" height="15" fill="rgb(226,81,46)"/><text x="64.7489%" y="111.50"></text></g><g><title>is_copy_raw (249,614 samples, 0.25%)</title><rect x="64.7311%" y="101" width="0.2548%" height="15" fill="rgb(247,70,30)"/><text x="64.9811%" y="111.50"></text></g><g><title>evaluate_obligation (229,892 samples, 0.23%)</title><rect x="64.7512%" y="85" width="0.2347%" height="15" fill="rgb(212,68,19)"/><text x="65.0012%" y="95.50"></text></g><g><title>trait_impls_of (179,942 samples, 0.18%)</title><rect x="64.8022%" y="69" width="0.1837%" height="15" fill="rgb(240,187,13)"/><text x="65.0522%" y="79.50"></text></g><g><title>typeck (1,677,728 samples, 1.71%)</title><rect x="63.3831%" y="117" width="1.7126%" height="15" fill="rgb(223,113,26)"/><text x="63.6331%" y="127.50"></text></g><g><title>item_bodies_checking (26,184,271 samples, 26.73%)</title><rect x="38.4600%" y="165" width="26.7280%" height="15" fill="rgb(206,192,2)"/><text x="38.7100%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (26,181,421 samples, 26.73%)</title><rect x="38.4630%" y="149" width="26.7251%" height="15" fill="rgb(241,108,4)"/><text x="38.7130%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (26,092,031 samples, 26.63%)</title><rect x="38.5542%" y="133" width="26.6338%" height="15" fill="rgb(247,173,49)"/><text x="38.8042%" y="143.50">typeck</text></g><g><title>item_types_checking (632,627 samples, 0.65%)</title><rect x="65.1880%" y="165" width="0.6458%" height="15" fill="rgb(224,114,35)"/><text x="65.4380%" y="175.50"></text></g><g><title>check_mod_item_types (627,907 samples, 0.64%)</title><rect x="65.1929%" y="149" width="0.6409%" height="15" fill="rgb(245,159,27)"/><text x="65.4429%" y="159.50"></text></g><g><title>fn_sig (405,725 samples, 0.41%)</title><rect x="66.0703%" y="133" width="0.4141%" height="15" fill="rgb(245,172,44)"/><text x="66.3203%" y="143.50"></text></g><g><title>named_region_map (137,072 samples, 0.14%)</title><rect x="66.6229%" y="117" width="0.1399%" height="15" fill="rgb(236,23,11)"/><text x="66.8729%" y="127.50"></text></g><g><title>resolve_lifetimes (121,531 samples, 0.12%)</title><rect x="66.6387%" y="101" width="0.1241%" height="15" fill="rgb(205,117,38)"/><text x="66.8887%" y="111.50"></text></g><g><title>generics_of (289,522 samples, 0.30%)</title><rect x="66.4845%" y="133" width="0.2955%" height="15" fill="rgb(237,72,25)"/><text x="66.7345%" y="143.50"></text></g><g><title>late_bound_vars_map (122,370 samples, 0.12%)</title><rect x="67.0244%" y="85" width="0.1249%" height="15" fill="rgb(244,70,9)"/><text x="67.2744%" y="95.50"></text></g><g><title>resolve_lifetimes (120,030 samples, 0.12%)</title><rect x="67.0267%" y="69" width="0.1225%" height="15" fill="rgb(217,125,39)"/><text x="67.2767%" y="79.50"></text></g><g><title>explicit_predicates_of (231,313 samples, 0.24%)</title><rect x="66.9236%" y="101" width="0.2361%" height="15" fill="rgb(235,36,10)"/><text x="67.1736%" y="111.50"></text></g><g><title>predicates_of (422,556 samples, 0.43%)</title><rect x="66.8159%" y="133" width="0.4313%" height="15" fill="rgb(251,123,47)"/><text x="67.0659%" y="143.50"></text></g><g><title>predicates_defined_on (381,046 samples, 0.39%)</title><rect x="66.8583%" y="117" width="0.3890%" height="15" fill="rgb(221,13,13)"/><text x="67.1083%" y="127.50"></text></g><g><title>type_collecting (1,453,686 samples, 1.48%)</title><rect x="65.8392%" y="165" width="1.4839%" height="15" fill="rgb(238,131,9)"/><text x="66.0892%" y="175.50"></text></g><g><title>collect_mod_item_types (1,442,526 samples, 1.47%)</title><rect x="65.8506%" y="149" width="1.4725%" height="15" fill="rgb(211,50,8)"/><text x="66.1006%" y="159.50"></text></g><g><title>adt_sized_constraint (135,842 samples, 0.14%)</title><rect x="69.8781%" y="101" width="0.1387%" height="15" fill="rgb(245,182,24)"/><text x="70.1281%" y="111.50"></text></g><g><title>adt_sized_constraint (199,803 samples, 0.20%)</title><rect x="69.8148%" y="117" width="0.2040%" height="15" fill="rgb(242,14,37)"/><text x="70.0648%" y="127.50"></text></g><g><title>evaluate_obligation (570,455 samples, 0.58%)</title><rect x="69.4735%" y="133" width="0.5823%" height="15" fill="rgb(246,228,12)"/><text x="69.7235%" y="143.50"></text></g><g><title>implied_outlives_bounds (215,293 samples, 0.22%)</title><rect x="70.0558%" y="133" width="0.2198%" height="15" fill="rgb(213,55,15)"/><text x="70.3058%" y="143.50"></text></g><g><title>param_env (277,573 samples, 0.28%)</title><rect x="70.2755%" y="133" width="0.2833%" height="15" fill="rgb(209,9,3)"/><text x="70.5255%" y="143.50"></text></g><g><title>region_scope_tree (340,454 samples, 0.35%)</title><rect x="70.6311%" y="133" width="0.3475%" height="15" fill="rgb(230,59,30)"/><text x="70.8811%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,199,316 samples, 3.27%)</title><rect x="67.7455%" y="149" width="3.2658%" height="15" fill="rgb(209,121,21)"/><text x="67.9955%" y="159.50">che..</text></g><g><title>evaluate_obligation (186,651 samples, 0.19%)</title><rect x="71.5688%" y="133" width="0.1905%" height="15" fill="rgb(220,109,13)"/><text x="71.8188%" y="143.50"></text></g><g><title>param_env (139,810 samples, 0.14%)</title><rect x="71.8394%" y="133" width="0.1427%" height="15" fill="rgb(232,18,1)"/><text x="72.0894%" y="143.50"></text></g><g><title>analysis (70,075,918 samples, 71.53%)</title><rect x="0.5962%" y="197" width="71.5311%" height="15" fill="rgb(215,41,42)"/><text x="0.8462%" y="207.50">analysis</text></g><g><title>type_check_crate (38,955,113 samples, 39.76%)</title><rect x="32.3632%" y="181" width="39.7640%" height="15" fill="rgb(224,123,36)"/><text x="32.6132%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,700,593 samples, 4.80%)</title><rect x="67.3290%" y="165" width="4.7982%" height="15" fill="rgb(240,125,3)"/><text x="67.5790%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (1,093,263 samples, 1.12%)</title><rect x="71.0113%" y="149" width="1.1160%" height="15" fill="rgb(205,98,50)"/><text x="71.2613%" y="159.50"></text></g><g><title>codegen_crate (398,625 samples, 0.41%)</title><rect x="72.1337%" y="197" width="0.4069%" height="15" fill="rgb(205,185,37)"/><text x="72.3837%" y="207.50"></text></g><g><title>AST_validation (101,951 samples, 0.10%)</title><rect x="72.6704%" y="181" width="0.1041%" height="15" fill="rgb(238,207,15)"/><text x="72.9204%" y="191.50"></text></g><g><title>metadata_register_crate (1,528,277 samples, 1.56%)</title><rect x="86.4319%" y="149" width="1.5600%" height="15" fill="rgb(213,199,42)"/><text x="86.6819%" y="159.50"></text></g><g><title>metadata_register_crate (548,037 samples, 0.56%)</title><rect x="87.4325%" y="133" width="0.5594%" height="15" fill="rgb(235,201,11)"/><text x="87.6825%" y="143.50"></text></g><g><title>macro_expand_crate (14,946,886 samples, 15.26%)</title><rect x="72.8855%" y="181" width="15.2573%" height="15" fill="rgb(207,46,11)"/><text x="73.1355%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,931,316 samples, 15.24%)</title><rect x="72.9014%" y="165" width="15.2414%" height="15" fill="rgb(241,35,35)"/><text x="73.1514%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (147,760 samples, 0.15%)</title><rect x="87.9919%" y="149" width="0.1508%" height="15" fill="rgb(243,32,47)"/><text x="88.2419%" y="159.50"></text></g><g><title>late_resolve_crate (1,992,362 samples, 2.03%)</title><rect x="88.3267%" y="165" width="2.0337%" height="15" fill="rgb(247,202,23)"/><text x="88.5767%" y="175.50">l..</text></g><g><title>configure_and_expand (17,554,076 samples, 17.92%)</title><rect x="72.5406%" y="197" width="17.9186%" height="15" fill="rgb(219,102,11)"/><text x="72.7906%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,211,375 samples, 2.26%)</title><rect x="88.2019%" y="181" width="2.2573%" height="15" fill="rgb(243,110,44)"/><text x="88.4519%" y="191.50">r..</text></g><g><title>drop_ast (173,602 samples, 0.18%)</title><rect x="90.4592%" y="197" width="0.1772%" height="15" fill="rgb(222,74,54)"/><text x="90.7092%" y="207.50"></text></g><g><title>early_lint_checks (324,134 samples, 0.33%)</title><rect x="90.6541%" y="197" width="0.3309%" height="15" fill="rgb(216,99,12)"/><text x="90.9041%" y="207.50"></text></g><g><title>free_global_ctxt (3,603,701 samples, 3.68%)</title><rect x="90.9850%" y="197" width="3.6785%" height="15" fill="rgb(226,22,26)"/><text x="91.2350%" y="207.50">free..</text></g><g><title>generate_crate_metadata (896,039 samples, 0.91%)</title><rect x="94.6635%" y="197" width="0.9146%" height="15" fill="rgb(217,163,10)"/><text x="94.9135%" y="207.50"></text></g><g><title>hir_lowering (2,562,118 samples, 2.62%)</title><rect x="95.5782%" y="197" width="2.6153%" height="15" fill="rgb(213,25,53)"/><text x="95.8282%" y="207.50">hi..</text></g><g><title>parse_crate (307,873 samples, 0.31%)</title><rect x="98.2450%" y="197" width="0.3143%" height="15" fill="rgb(252,105,26)"/><text x="98.4950%" y="207.50"></text></g><g><title>prepare_outputs (200,442 samples, 0.20%)</title><rect x="98.5641%" y="197" width="0.2046%" height="15" fill="rgb(220,39,43)"/><text x="98.8141%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (769,608 samples, 0.79%)</title><rect x="98.7687%" y="197" width="0.7856%" height="15" fill="rgb(229,68,48)"/><text x="99.0187%" y="207.50"></text></g><g><title>all (97,965,727 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (97,965,727 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (350,444 samples, 0.36%)</title><rect x="99.6423%" y="197" width="0.3577%" height="15" fill="rgb(229,81,49)"/><text x="99.8923%" y="207.50"></text></g></svg></svg>