<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (120,313 samples, 0.22%)</title><rect x="7.4698%" y="117" width="0.2178%" height="15" fill="rgb(227,0,7)"/><text x="7.7198%" y="127.50"></text></g><g><title>item_attrs (57,390 samples, 0.10%)</title><rect x="7.9900%" y="85" width="0.1039%" height="15" fill="rgb(217,0,24)"/><text x="8.2400%" y="95.50"></text></g><g><title>codegen_fn_attrs (92,820 samples, 0.17%)</title><rect x="7.9376%" y="101" width="0.1681%" height="15" fill="rgb(221,193,54)"/><text x="8.1876%" y="111.50"></text></g><g><title>is_copy_raw (88,320 samples, 0.16%)</title><rect x="9.5023%" y="53" width="0.1599%" height="15" fill="rgb(248,212,6)"/><text x="9.7523%" y="63.50"></text></g><g><title>evaluate_obligation (77,330 samples, 0.14%)</title><rect x="9.5222%" y="37" width="0.1400%" height="15" fill="rgb(208,68,35)"/><text x="9.7722%" y="47.50"></text></g><g><title>adt_drop_tys (180,851 samples, 0.33%)</title><rect x="9.4182%" y="69" width="0.3274%" height="15" fill="rgb(232,128,0)"/><text x="9.6682%" y="79.50"></text></g><g><title>needs_drop_raw (419,167 samples, 0.76%)</title><rect x="9.3674%" y="85" width="0.7589%" height="15" fill="rgb(207,160,47)"/><text x="9.6174%" y="95.50"></text></g><g><title>is_copy_raw (210,215 samples, 0.38%)</title><rect x="9.7457%" y="69" width="0.3806%" height="15" fill="rgb(228,23,34)"/><text x="9.9957%" y="79.50"></text></g><g><title>evaluate_obligation (177,283 samples, 0.32%)</title><rect x="9.8053%" y="53" width="0.3210%" height="15" fill="rgb(218,30,26)"/><text x="10.0553%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (110,701 samples, 0.20%)</title><rect x="10.2856%" y="69" width="0.2004%" height="15" fill="rgb(220,122,19)"/><text x="10.5356%" y="79.50"></text></g><g><title>impl_parent (610,607 samples, 1.11%)</title><rect x="12.8864%" y="53" width="1.1056%" height="15" fill="rgb(250,228,42)"/><text x="13.1364%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (296,154 samples, 0.54%)</title><rect x="13.4557%" y="37" width="0.5362%" height="15" fill="rgb(240,193,28)"/><text x="13.7057%" y="47.50"></text></g><g><title>specialization_graph_of (3,456,110 samples, 6.26%)</title><rect x="10.5410%" y="69" width="6.2576%" height="15" fill="rgb(216,20,37)"/><text x="10.7910%" y="79.50">speciali..</text></g><g><title>impl_trait_ref (1,550,171 samples, 2.81%)</title><rect x="13.9919%" y="53" width="2.8067%" height="15" fill="rgb(206,188,39)"/><text x="14.2419%" y="63.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,242,654 samples, 2.25%)</title><rect x="14.5487%" y="37" width="2.2499%" height="15" fill="rgb(217,207,13)"/><text x="14.7987%" y="47.50">m..</text></g><g><title>resolve_instance (3,714,592 samples, 6.73%)</title><rect x="10.1263%" y="85" width="6.7256%" height="15" fill="rgb(231,73,38)"/><text x="10.3763%" y="95.50">resolve_i..</text></g><g><title>thir_body (249,294 samples, 0.45%)</title><rect x="16.8620%" y="85" width="0.4514%" height="15" fill="rgb(225,20,46)"/><text x="17.1120%" y="95.50"></text></g><g><title>mir_const (5,699,386 samples, 10.32%)</title><rect x="7.0035%" y="133" width="10.3193%" height="15" fill="rgb(210,31,41)"/><text x="7.2535%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (5,321,529 samples, 9.64%)</title><rect x="7.6876%" y="117" width="9.6351%" height="15" fill="rgb(221,200,47)"/><text x="7.9376%" y="127.50">unsafety_check..</text></g><g><title>mir_built (5,090,637 samples, 9.22%)</title><rect x="8.1057%" y="101" width="9.2171%" height="15" fill="rgb(226,26,5)"/><text x="8.3557%" y="111.50">mir_built</text></g><g><title>mir_promoted (5,989,268 samples, 10.84%)</title><rect x="6.6158%" y="149" width="10.8441%" height="15" fill="rgb(249,33,26)"/><text x="6.8658%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (75,760 samples, 0.14%)</title><rect x="17.3227%" y="133" width="0.1372%" height="15" fill="rgb(235,183,28)"/><text x="17.5727%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (109,911 samples, 0.20%)</title><rect x="17.5095%" y="149" width="0.1990%" height="15" fill="rgb(221,5,38)"/><text x="17.7595%" y="159.50"></text></g><g><title>normalize_projection_ty (72,520 samples, 0.13%)</title><rect x="17.5772%" y="133" width="0.1313%" height="15" fill="rgb(247,18,42)"/><text x="17.8272%" y="143.50"></text></g><g><title>type_op_normalize_predicate (114,900 samples, 0.21%)</title><rect x="17.7085%" y="149" width="0.2080%" height="15" fill="rgb(241,131,45)"/><text x="17.9585%" y="159.50"></text></g><g><title>type_op_prove_predicate (582,079 samples, 1.05%)</title><rect x="17.9501%" y="149" width="1.0539%" height="15" fill="rgb(249,31,29)"/><text x="18.2001%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,710,159 samples, 17.58%)</title><rect x="1.4369%" y="181" width="17.5811%" height="15" fill="rgb(225,111,53)"/><text x="1.6869%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,680,449 samples, 17.53%)</title><rect x="1.4907%" y="165" width="17.5273%" height="15" fill="rgb(238,160,17)"/><text x="1.7407%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (112,551 samples, 0.20%)</title><rect x="19.0181%" y="181" width="0.2038%" height="15" fill="rgb(214,148,48)"/><text x="19.2681%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (89,791 samples, 0.16%)</title><rect x="19.0593%" y="165" width="0.1626%" height="15" fill="rgb(232,36,49)"/><text x="19.3093%" y="175.50"></text></g><g><title>hir_module_items (134,071 samples, 0.24%)</title><rect x="19.2218%" y="181" width="0.2427%" height="15" fill="rgb(209,103,24)"/><text x="19.4718%" y="191.50"></text></g><g><title>associated_item (57,472 samples, 0.10%)</title><rect x="19.9274%" y="117" width="0.1041%" height="15" fill="rgb(229,88,8)"/><text x="20.1774%" y="127.50"></text></g><g><title>item_attrs (98,701 samples, 0.18%)</title><rect x="20.2238%" y="101" width="0.1787%" height="15" fill="rgb(213,181,19)"/><text x="20.4738%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (87,231 samples, 0.16%)</title><rect x="20.2446%" y="85" width="0.1579%" height="15" fill="rgb(254,191,54)"/><text x="20.4946%" y="95.50"></text></g><g><title>codegen_fn_attrs (274,433 samples, 0.50%)</title><rect x="20.0314%" y="117" width="0.4969%" height="15" fill="rgb(241,83,37)"/><text x="20.2814%" y="127.50"></text></g><g><title>codegen_fn_attrs (417,265 samples, 0.76%)</title><rect x="19.7806%" y="149" width="0.7555%" height="15" fill="rgb(233,36,39)"/><text x="20.0306%" y="159.50"></text></g><g><title>should_inherit_track_caller (366,835 samples, 0.66%)</title><rect x="19.8719%" y="133" width="0.6642%" height="15" fill="rgb(226,3,54)"/><text x="20.1219%" y="143.50"></text></g><g><title>check_mod_attrs (567,396 samples, 1.03%)</title><rect x="19.5094%" y="165" width="1.0273%" height="15" fill="rgb(245,192,40)"/><text x="19.7594%" y="175.50"></text></g><g><title>check_mod_const_bodies (66,821 samples, 0.12%)</title><rect x="20.5367%" y="165" width="0.1210%" height="15" fill="rgb(238,167,29)"/><text x="20.7867%" y="175.50"></text></g><g><title>lookup_deprecation_entry (85,091 samples, 0.15%)</title><rect x="20.9165%" y="149" width="0.1541%" height="15" fill="rgb(232,182,51)"/><text x="21.1665%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (248,012 samples, 0.45%)</title><rect x="20.7380%" y="165" width="0.4490%" height="15" fill="rgb(231,60,39)"/><text x="20.9880%" y="175.50"></text></g><g><title>misc_checking_1 (997,861 samples, 1.81%)</title><rect x="19.4652%" y="181" width="1.8067%" height="15" fill="rgb(208,69,12)"/><text x="19.7152%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (125,131 samples, 0.23%)</title><rect x="21.2744%" y="165" width="0.2266%" height="15" fill="rgb(235,93,37)"/><text x="21.5244%" y="175.50"></text></g><g><title>check_mod_liveness (96,221 samples, 0.17%)</title><rect x="21.3267%" y="149" width="0.1742%" height="15" fill="rgb(213,116,39)"/><text x="21.5767%" y="159.50"></text></g><g><title>misc_checking_2 (314,443 samples, 0.57%)</title><rect x="21.2719%" y="181" width="0.5693%" height="15" fill="rgb(222,207,29)"/><text x="21.5219%" y="191.50"></text></g><g><title>match_checking (187,932 samples, 0.34%)</title><rect x="21.5010%" y="165" width="0.3403%" height="15" fill="rgb(206,96,30)"/><text x="21.7510%" y="175.50"></text></g><g><title>check_match (175,602 samples, 0.32%)</title><rect x="21.5233%" y="149" width="0.3179%" height="15" fill="rgb(218,138,4)"/><text x="21.7733%" y="159.50"></text></g><g><title>check_private_in_public (57,371 samples, 0.10%)</title><rect x="21.8576%" y="165" width="0.1039%" height="15" fill="rgb(250,191,14)"/><text x="22.1076%" y="175.50"></text></g><g><title>death_checking (175,732 samples, 0.32%)</title><rect x="21.9615%" y="165" width="0.3182%" height="15" fill="rgb(239,60,40)"/><text x="22.2115%" y="175.50"></text></g><g><title>item_attrs (82,391 samples, 0.15%)</title><rect x="22.1305%" y="149" width="0.1492%" height="15" fill="rgb(206,27,48)"/><text x="22.3805%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (81,401 samples, 0.15%)</title><rect x="22.1323%" y="133" width="0.1474%" height="15" fill="rgb(225,35,8)"/><text x="22.3823%" y="143.50"></text></g><g><title>param_env (67,431 samples, 0.12%)</title><rect x="22.6899%" y="133" width="0.1221%" height="15" fill="rgb(250,213,24)"/><text x="22.9399%" y="143.50"></text></g><g><title>crate_lints (607,657 samples, 1.10%)</title><rect x="22.2819%" y="149" width="1.1002%" height="15" fill="rgb(247,123,22)"/><text x="22.5319%" y="159.50"></text></g><g><title>type_of (314,865 samples, 0.57%)</title><rect x="22.8120%" y="133" width="0.5701%" height="15" fill="rgb(231,138,38)"/><text x="23.0620%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (236,474 samples, 0.43%)</title><rect x="22.9540%" y="117" width="0.4282%" height="15" fill="rgb(231,145,46)"/><text x="23.2040%" y="127.50"></text></g><g><title>lint_checking (730,228 samples, 1.32%)</title><rect x="22.2797%" y="165" width="1.3221%" height="15" fill="rgb(251,118,11)"/><text x="22.5297%" y="175.50"></text></g><g><title>module_lints (121,351 samples, 0.22%)</title><rect x="23.3821%" y="149" width="0.2197%" height="15" fill="rgb(217,147,25)"/><text x="23.6321%" y="159.50"></text></g><g><title>lint_mod (119,611 samples, 0.22%)</title><rect x="23.3853%" y="133" width="0.2166%" height="15" fill="rgb(247,81,37)"/><text x="23.6353%" y="143.50"></text></g><g><title>privacy_access_levels (68,161 samples, 0.12%)</title><rect x="23.6018%" y="165" width="0.1234%" height="15" fill="rgb(209,12,38)"/><text x="23.8518%" y="175.50"></text></g><g><title>privacy_checking_modules (201,932 samples, 0.37%)</title><rect x="23.7252%" y="165" width="0.3656%" height="15" fill="rgb(227,1,9)"/><text x="23.9752%" y="175.50"></text></g><g><title>check_mod_privacy (200,542 samples, 0.36%)</title><rect x="23.7278%" y="149" width="0.3631%" height="15" fill="rgb(248,47,43)"/><text x="23.9778%" y="159.50"></text></g><g><title>misc_checking_3 (1,251,444 samples, 2.27%)</title><rect x="21.8412%" y="181" width="2.2659%" height="15" fill="rgb(221,10,30)"/><text x="22.0912%" y="191.50">m..</text></g><g><title>impl_parent (1,234,324 samples, 2.23%)</title><rect x="28.4464%" y="117" width="2.2349%" height="15" fill="rgb(210,229,1)"/><text x="28.6964%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (609,085 samples, 1.10%)</title><rect x="29.5785%" y="101" width="1.1028%" height="15" fill="rgb(222,148,37)"/><text x="29.8285%" y="111.50"></text></g><g><title>impl_trait_ref (2,670,609 samples, 4.84%)</title><rect x="30.6813%" y="117" width="4.8354%" height="15" fill="rgb(234,67,33)"/><text x="30.9313%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,058,478 samples, 3.73%)</title><rect x="31.7896%" y="101" width="3.7271%" height="15" fill="rgb(247,98,35)"/><text x="32.0396%" y="111.50">meta..</text></g><g><title>coherent_trait (6,755,335 samples, 12.23%)</title><rect x="24.2197%" y="149" width="12.2312%" height="15" fill="rgb(247,138,52)"/><text x="24.4697%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (6,730,565 samples, 12.19%)</title><rect x="24.2646%" y="133" width="12.1863%" height="15" fill="rgb(213,79,30)"/><text x="24.5146%" y="143.50">specialization_gra..</text></g><g><title>trait_impls_of (513,345 samples, 0.93%)</title><rect x="35.5214%" y="117" width="0.9295%" height="15" fill="rgb(246,177,23)"/><text x="35.7714%" y="127.50"></text></g><g><title>implementations_of_trait (122,081 samples, 0.22%)</title><rect x="36.2298%" y="101" width="0.2210%" height="15" fill="rgb(230,62,27)"/><text x="36.4798%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (105,121 samples, 0.19%)</title><rect x="36.2605%" y="85" width="0.1903%" height="15" fill="rgb(216,154,8)"/><text x="36.5105%" y="95.50"></text></g><g><title>coherence_checking (6,842,316 samples, 12.39%)</title><rect x="24.1706%" y="165" width="12.3886%" height="15" fill="rgb(244,35,45)"/><text x="24.4206%" y="175.50">coherence_checking</text></g><g><title>associated_items (58,920 samples, 0.11%)</title><rect x="40.9617%" y="117" width="0.1067%" height="15" fill="rgb(251,115,12)"/><text x="41.2117%" y="127.50"></text></g><g><title>dropck_outlives (99,431 samples, 0.18%)</title><rect x="41.0864%" y="117" width="0.1800%" height="15" fill="rgb(240,54,50)"/><text x="41.3364%" y="127.50"></text></g><g><title>adt_dtorck_constraint (60,261 samples, 0.11%)</title><rect x="41.1574%" y="101" width="0.1091%" height="15" fill="rgb(233,84,52)"/><text x="41.4074%" y="111.50"></text></g><g><title>generics_of (81,570 samples, 0.15%)</title><rect x="41.8999%" y="101" width="0.1477%" height="15" fill="rgb(207,117,47)"/><text x="42.1499%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (64,750 samples, 0.12%)</title><rect x="41.9303%" y="85" width="0.1172%" height="15" fill="rgb(249,43,39)"/><text x="42.1803%" y="95.50"></text></g><g><title>impl_trait_ref (88,232 samples, 0.16%)</title><rect x="42.0614%" y="101" width="0.1598%" height="15" fill="rgb(209,38,44)"/><text x="42.3114%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (73,692 samples, 0.13%)</title><rect x="42.0877%" y="85" width="0.1334%" height="15" fill="rgb(236,212,23)"/><text x="42.3377%" y="95.50"></text></g><g><title>specializes (65,290 samples, 0.12%)</title><rect x="42.3211%" y="101" width="0.1182%" height="15" fill="rgb(242,79,21)"/><text x="42.5711%" y="111.50"></text></g><g><title>evaluate_obligation (784,888 samples, 1.42%)</title><rect x="41.2665%" y="117" width="1.4211%" height="15" fill="rgb(211,96,35)"/><text x="41.5165%" y="127.50"></text></g><g><title>trait_impls_of (133,472 samples, 0.24%)</title><rect x="42.4459%" y="101" width="0.2417%" height="15" fill="rgb(253,215,40)"/><text x="42.6959%" y="111.50"></text></g><g><title>predicates_of (84,121 samples, 0.15%)</title><rect x="43.0793%" y="117" width="0.1523%" height="15" fill="rgb(211,81,21)"/><text x="43.3293%" y="127.50"></text></g><g><title>adt_sized_constraint (57,400 samples, 0.10%)</title><rect x="50.2387%" y="101" width="0.1039%" height="15" fill="rgb(208,190,38)"/><text x="50.4887%" y="111.50"></text></g><g><title>associated_item (294,804 samples, 0.53%)</title><rect x="50.5314%" y="85" width="0.5338%" height="15" fill="rgb(235,213,38)"/><text x="50.7814%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (234,774 samples, 0.43%)</title><rect x="50.6401%" y="69" width="0.4251%" height="15" fill="rgb(237,122,38)"/><text x="50.8901%" y="79.50"></text></g><g><title>associated_items (402,104 samples, 0.73%)</title><rect x="50.3546%" y="101" width="0.7280%" height="15" fill="rgb(244,218,35)"/><text x="50.6046%" y="111.50"></text></g><g><title>dropck_outlives (115,801 samples, 0.21%)</title><rect x="51.1444%" y="101" width="0.2097%" height="15" fill="rgb(240,68,47)"/><text x="51.3944%" y="111.50"></text></g><g><title>adt_dtorck_constraint (84,301 samples, 0.15%)</title><rect x="51.2014%" y="85" width="0.1526%" height="15" fill="rgb(210,16,53)"/><text x="51.4514%" y="95.50"></text></g><g><title>fn_abi_of_instance (79,011 samples, 0.14%)</title><rect x="51.4439%" y="53" width="0.1431%" height="15" fill="rgb(235,124,12)"/><text x="51.6939%" y="63.50"></text></g><g><title>eval_to_const_value_raw (167,262 samples, 0.30%)</title><rect x="51.3540%" y="101" width="0.3028%" height="15" fill="rgb(224,169,11)"/><text x="51.6040%" y="111.50"></text></g><g><title>eval_to_const_value_raw (166,161 samples, 0.30%)</title><rect x="51.3560%" y="85" width="0.3008%" height="15" fill="rgb(250,166,2)"/><text x="51.6060%" y="95.50"></text></g><g><title>eval_to_allocation_raw (164,001 samples, 0.30%)</title><rect x="51.3600%" y="69" width="0.2969%" height="15" fill="rgb(242,216,29)"/><text x="51.6100%" y="79.50"></text></g><g><title>trait_impls_of (100,630 samples, 0.18%)</title><rect x="52.6539%" y="85" width="0.1822%" height="15" fill="rgb(230,116,27)"/><text x="52.9039%" y="95.50"></text></g><g><title>evaluate_obligation (652,680 samples, 1.18%)</title><rect x="51.6569%" y="101" width="1.1817%" height="15" fill="rgb(228,99,48)"/><text x="51.9069%" y="111.50"></text></g><g><title>impl_item_implementor_ids (67,740 samples, 0.12%)</title><rect x="53.0047%" y="101" width="0.1226%" height="15" fill="rgb(253,11,6)"/><text x="53.2547%" y="111.50"></text></g><g><title>associated_items (58,550 samples, 0.11%)</title><rect x="53.0214%" y="85" width="0.1060%" height="15" fill="rgb(247,143,39)"/><text x="53.2714%" y="95.50"></text></g><g><title>is_copy_raw (100,282 samples, 0.18%)</title><rect x="53.2069%" y="101" width="0.1816%" height="15" fill="rgb(236,97,10)"/><text x="53.4569%" y="111.50"></text></g><g><title>evaluate_obligation (89,972 samples, 0.16%)</title><rect x="53.2256%" y="85" width="0.1629%" height="15" fill="rgb(233,208,19)"/><text x="53.4756%" y="95.50"></text></g><g><title>predicates_of (143,490 samples, 0.26%)</title><rect x="53.6166%" y="101" width="0.2598%" height="15" fill="rgb(216,164,2)"/><text x="53.8666%" y="111.50"></text></g><g><title>predicates_defined_on (98,170 samples, 0.18%)</title><rect x="53.6986%" y="85" width="0.1777%" height="15" fill="rgb(220,129,5)"/><text x="53.9486%" y="95.50"></text></g><g><title>typeck (5,897,185 samples, 10.68%)</title><rect x="43.3069%" y="117" width="10.6774%" height="15" fill="rgb(242,17,10)"/><text x="43.5569%" y="127.50">typeck</text></g><g><title>item_bodies_checking (9,611,727 samples, 17.40%)</title><rect x="36.6078%" y="165" width="17.4029%" height="15" fill="rgb(242,107,0)"/><text x="36.8578%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,608,867 samples, 17.40%)</title><rect x="36.6130%" y="149" width="17.3977%" height="15" fill="rgb(251,28,31)"/><text x="36.8630%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (9,590,117 samples, 17.36%)</title><rect x="36.6469%" y="133" width="17.3638%" height="15" fill="rgb(233,223,10)"/><text x="36.8969%" y="143.50">typeck</text></g><g><title>adt_destructor (81,241 samples, 0.15%)</title><rect x="54.9064%" y="133" width="0.1471%" height="15" fill="rgb(215,21,27)"/><text x="55.1564%" y="143.50"></text></g><g><title>coherent_trait (71,711 samples, 0.13%)</title><rect x="54.9237%" y="117" width="0.1298%" height="15" fill="rgb(232,23,21)"/><text x="55.1737%" y="127.50"></text></g><g><title>specialization_graph_of (69,301 samples, 0.13%)</title><rect x="54.9280%" y="101" width="0.1255%" height="15" fill="rgb(244,5,23)"/><text x="55.1780%" y="111.50"></text></g><g><title>def_span (215,214 samples, 0.39%)</title><rect x="57.7432%" y="69" width="0.3897%" height="15" fill="rgb(226,81,46)"/><text x="57.9932%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (204,254 samples, 0.37%)</title><rect x="57.7630%" y="53" width="0.3698%" height="15" fill="rgb(247,70,30)"/><text x="58.0130%" y="63.50"></text></g><g><title>mir_for_ctfe (1,242,376 samples, 2.25%)</title><rect x="58.2052%" y="69" width="2.2494%" height="15" fill="rgb(212,68,19)"/><text x="58.4552%" y="79.50">m..</text></g><g><title>metadata_decode_entry_mir_for_ctfe (1,229,016 samples, 2.23%)</title><rect x="58.2294%" y="53" width="2.2252%" height="15" fill="rgb(240,187,13)"/><text x="58.4794%" y="63.50">m..</text></g><g><title>eval_to_const_value_raw (2,619,133 samples, 4.74%)</title><rect x="55.7857%" y="117" width="4.7422%" height="15" fill="rgb(223,113,26)"/><text x="56.0357%" y="127.50">eval_t..</text></g><g><title>eval_to_const_value_raw (2,569,533 samples, 4.65%)</title><rect x="55.8755%" y="101" width="4.6524%" height="15" fill="rgb(206,192,2)"/><text x="56.1255%" y="111.50">eval_..</text></g><g><title>eval_to_allocation_raw (2,517,523 samples, 4.56%)</title><rect x="55.9696%" y="85" width="4.5582%" height="15" fill="rgb(241,108,4)"/><text x="56.2196%" y="95.50">eval_..</text></g><g><title>impl_trait_ref (67,881 samples, 0.12%)</title><rect x="60.6287%" y="117" width="0.1229%" height="15" fill="rgb(247,173,49)"/><text x="60.8787%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (55,700 samples, 0.10%)</title><rect x="60.6507%" y="101" width="0.1008%" height="15" fill="rgb(224,114,35)"/><text x="60.9007%" y="111.50"></text></g><g><title>resolve_instance (92,951 samples, 0.17%)</title><rect x="60.7965%" y="117" width="0.1683%" height="15" fill="rgb(245,159,27)"/><text x="61.0465%" y="127.50"></text></g><g><title>evaluate_obligation (3,304,307 samples, 5.98%)</title><rect x="55.0769%" y="133" width="5.9828%" height="15" fill="rgb(245,172,44)"/><text x="55.3269%" y="143.50">evaluate..</text></g><g><title>fn_sig (81,470 samples, 0.15%)</title><rect x="61.0733%" y="133" width="0.1475%" height="15" fill="rgb(236,23,11)"/><text x="61.3233%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (75,430 samples, 0.14%)</title><rect x="61.0842%" y="117" width="0.1366%" height="15" fill="rgb(205,117,38)"/><text x="61.3342%" y="127.50"></text></g><g><title>item_types_checking (4,056,936 samples, 7.35%)</title><rect x="54.0107%" y="165" width="7.3455%" height="15" fill="rgb(237,72,25)"/><text x="54.2607%" y="175.50">item_types..</text></g><g><title>check_mod_item_types (4,054,366 samples, 7.34%)</title><rect x="54.0154%" y="149" width="7.3408%" height="15" fill="rgb(244,70,9)"/><text x="54.2654%" y="159.50">check_mod_..</text></g><g><title>fn_sig (337,694 samples, 0.61%)</title><rect x="61.7227%" y="133" width="0.6114%" height="15" fill="rgb(217,125,39)"/><text x="61.9727%" y="143.50"></text></g><g><title>named_region_map (270,452 samples, 0.49%)</title><rect x="62.4601%" y="117" width="0.4897%" height="15" fill="rgb(235,36,10)"/><text x="62.7101%" y="127.50"></text></g><g><title>resolve_lifetimes (251,152 samples, 0.45%)</title><rect x="62.4950%" y="101" width="0.4547%" height="15" fill="rgb(251,123,47)"/><text x="62.7450%" y="111.50"></text></g><g><title>lint_levels (89,161 samples, 0.16%)</title><rect x="62.7883%" y="85" width="0.1614%" height="15" fill="rgb(221,13,13)"/><text x="63.0383%" y="95.50"></text></g><g><title>generics_of (351,172 samples, 0.64%)</title><rect x="62.3341%" y="133" width="0.6358%" height="15" fill="rgb(238,131,9)"/><text x="62.5841%" y="143.50"></text></g><g><title>explicit_predicates_of (72,670 samples, 0.13%)</title><rect x="63.1789%" y="101" width="0.1316%" height="15" fill="rgb(211,50,8)"/><text x="63.4289%" y="111.50"></text></g><g><title>predicates_of (286,383 samples, 0.52%)</title><rect x="63.0697%" y="133" width="0.5185%" height="15" fill="rgb(245,182,24)"/><text x="63.3197%" y="143.50"></text></g><g><title>predicates_defined_on (263,433 samples, 0.48%)</title><rect x="63.1112%" y="117" width="0.4770%" height="15" fill="rgb(242,14,37)"/><text x="63.3612%" y="127.50"></text></g><g><title>inferred_outlives_of (153,372 samples, 0.28%)</title><rect x="63.3105%" y="101" width="0.2777%" height="15" fill="rgb(246,228,12)"/><text x="63.5605%" y="111.50"></text></g><g><title>inferred_outlives_crate (137,411 samples, 0.25%)</title><rect x="63.3394%" y="85" width="0.2488%" height="15" fill="rgb(213,55,15)"/><text x="63.5894%" y="95.50"></text></g><g><title>type_of (78,581 samples, 0.14%)</title><rect x="63.4459%" y="69" width="0.1423%" height="15" fill="rgb(209,9,3)"/><text x="63.6959%" y="79.50"></text></g><g><title>type_collecting (1,374,766 samples, 2.49%)</title><rect x="61.3585%" y="165" width="2.4891%" height="15" fill="rgb(230,59,30)"/><text x="61.6085%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (1,360,196 samples, 2.46%)</title><rect x="61.3848%" y="149" width="2.4628%" height="15" fill="rgb(209,121,21)"/><text x="61.6348%" y="159.50">co..</text></g><g><title>type_of (143,263 samples, 0.26%)</title><rect x="63.5882%" y="133" width="0.2594%" height="15" fill="rgb(220,109,13)"/><text x="63.8382%" y="143.50"></text></g><g><title>adt_def (81,141 samples, 0.15%)</title><rect x="65.9450%" y="85" width="0.1469%" height="15" fill="rgb(232,18,1)"/><text x="66.1950%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (80,641 samples, 0.15%)</title><rect x="65.9459%" y="69" width="0.1460%" height="15" fill="rgb(215,41,42)"/><text x="66.1959%" y="79.50"></text></g><g><title>item_attrs (74,641 samples, 0.14%)</title><rect x="65.9567%" y="53" width="0.1351%" height="15" fill="rgb(224,123,36)"/><text x="66.2067%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (73,861 samples, 0.13%)</title><rect x="65.9581%" y="37" width="0.1337%" height="15" fill="rgb(240,125,3)"/><text x="66.2081%" y="47.50"></text></g><g><title>adt_sized_constraint (85,191 samples, 0.15%)</title><rect x="65.9404%" y="101" width="0.1542%" height="15" fill="rgb(205,98,50)"/><text x="66.1904%" y="111.50"></text></g><g><title>adt_sized_constraint (147,592 samples, 0.27%)</title><rect x="65.8352%" y="117" width="0.2672%" height="15" fill="rgb(205,185,37)"/><text x="66.0852%" y="127.50"></text></g><g><title>evaluate_obligation (417,764 samples, 0.76%)</title><rect x="65.4492%" y="133" width="0.7564%" height="15" fill="rgb(238,207,15)"/><text x="65.6992%" y="143.50"></text></g><g><title>implied_outlives_bounds (126,423 samples, 0.23%)</title><rect x="66.2165%" y="133" width="0.2289%" height="15" fill="rgb(213,199,42)"/><text x="66.4665%" y="143.50"></text></g><g><title>param_env (108,110 samples, 0.20%)</title><rect x="66.4454%" y="133" width="0.1957%" height="15" fill="rgb(235,201,11)"/><text x="66.6954%" y="143.50"></text></g><g><title>predicates_of (76,931 samples, 0.14%)</title><rect x="66.6412%" y="133" width="0.1393%" height="15" fill="rgb(207,46,11)"/><text x="66.8912%" y="143.50"></text></g><g><title>predicates_defined_on (56,541 samples, 0.10%)</title><rect x="66.6781%" y="117" width="0.1024%" height="15" fill="rgb(241,35,35)"/><text x="66.9281%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,738,080 samples, 3.15%)</title><rect x="63.9944%" y="149" width="3.1470%" height="15" fill="rgb(243,32,47)"/><text x="64.2444%" y="159.50">che..</text></g><g><title>region_scope_tree (199,334 samples, 0.36%)</title><rect x="66.7804%" y="133" width="0.3609%" height="15" fill="rgb(247,202,23)"/><text x="67.0304%" y="143.50"></text></g><g><title>evaluate_obligation (275,863 samples, 0.50%)</title><rect x="67.9294%" y="133" width="0.4995%" height="15" fill="rgb(219,102,11)"/><text x="68.1794%" y="143.50"></text></g><g><title>param_env (163,452 samples, 0.30%)</title><rect x="68.5039%" y="133" width="0.2959%" height="15" fill="rgb(243,110,44)"/><text x="68.7539%" y="143.50"></text></g><g><title>predicates_of (85,120 samples, 0.15%)</title><rect x="68.7998%" y="133" width="0.1541%" height="15" fill="rgb(222,74,54)"/><text x="69.0498%" y="143.50"></text></g><g><title>predicates_defined_on (55,740 samples, 0.10%)</title><rect x="68.8530%" y="117" width="0.1009%" height="15" fill="rgb(216,99,12)"/><text x="69.1030%" y="127.50"></text></g><g><title>analysis (37,552,400 samples, 67.99%)</title><rect x="1.0708%" y="197" width="67.9921%" height="15" fill="rgb(226,22,26)"/><text x="1.3208%" y="207.50">analysis</text></g><g><title>type_check_crate (24,829,318 samples, 44.96%)</title><rect x="24.1071%" y="181" width="44.9558%" height="15" fill="rgb(217,163,10)"/><text x="24.3571%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,878,972 samples, 5.21%)</title><rect x="63.8502%" y="165" width="5.2126%" height="15" fill="rgb(213,25,53)"/><text x="64.1002%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (1,061,241 samples, 1.92%)</title><rect x="67.1414%" y="149" width="1.9215%" height="15" fill="rgb(252,105,26)"/><text x="67.3914%" y="159.50">c..</text></g><g><title>codegen_crate (322,444 samples, 0.58%)</title><rect x="69.0824%" y="197" width="0.5838%" height="15" fill="rgb(220,39,43)"/><text x="69.3324%" y="207.50"></text></g><g><title>AST_validation (104,431 samples, 0.19%)</title><rect x="69.9948%" y="181" width="0.1891%" height="15" fill="rgb(229,68,48)"/><text x="70.2448%" y="191.50"></text></g><g><title>crate_injection (90,061 samples, 0.16%)</title><rect x="70.2692%" y="181" width="0.1631%" height="15" fill="rgb(252,8,32)"/><text x="70.5192%" y="191.50"></text></g><g><title>metadata_load_macro (155,284 samples, 0.28%)</title><rect x="83.9472%" y="149" width="0.2812%" height="15" fill="rgb(223,20,43)"/><text x="84.1972%" y="159.50"></text></g><g><title>macro_expand_crate (7,803,168 samples, 14.13%)</title><rect x="70.4323%" y="181" width="14.1284%" height="15" fill="rgb(229,81,49)"/><text x="70.6823%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (7,790,508 samples, 14.11%)</title><rect x="70.4552%" y="165" width="14.1054%" height="15" fill="rgb(236,28,36)"/><text x="70.7052%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (183,492 samples, 0.33%)</title><rect x="84.2284%" y="149" width="0.3322%" height="15" fill="rgb(249,185,26)"/><text x="84.4784%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (146,982 samples, 0.27%)</title><rect x="84.5670%" y="181" width="0.2661%" height="15" fill="rgb(249,174,33)"/><text x="84.8170%" y="191.50"></text></g><g><title>finalize_macro_resolutions (155,032 samples, 0.28%)</title><rect x="84.9426%" y="165" width="0.2807%" height="15" fill="rgb(233,201,37)"/><text x="85.1926%" y="175.50"></text></g><g><title>late_resolve_crate (1,224,363 samples, 2.22%)</title><rect x="85.2233%" y="165" width="2.2168%" height="15" fill="rgb(221,78,26)"/><text x="85.4733%" y="175.50">l..</text></g><g><title>configure_and_expand (9,880,511 samples, 17.89%)</title><rect x="69.6662%" y="197" width="17.8896%" height="15" fill="rgb(250,127,30)"/><text x="69.9162%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,503,757 samples, 2.72%)</title><rect x="84.8331%" y="181" width="2.7227%" height="15" fill="rgb(230,49,44)"/><text x="85.0831%" y="191.50">re..</text></g><g><title>drop_ast (95,041 samples, 0.17%)</title><rect x="87.5558%" y="197" width="0.1721%" height="15" fill="rgb(229,67,23)"/><text x="87.8058%" y="207.50"></text></g><g><title>early_lint_checks (199,283 samples, 0.36%)</title><rect x="87.7629%" y="197" width="0.3608%" height="15" fill="rgb(249,83,47)"/><text x="88.0129%" y="207.50"></text></g><g><title>free_global_ctxt (1,990,692 samples, 3.60%)</title><rect x="88.1237%" y="197" width="3.6043%" height="15" fill="rgb(215,43,3)"/><text x="88.3737%" y="207.50">free..</text></g><g><title>crate_hash (59,060 samples, 0.11%)</title><rect x="92.2863%" y="181" width="0.1069%" height="15" fill="rgb(238,154,13)"/><text x="92.5363%" y="191.50"></text></g><g><title>generate_crate_metadata (457,415 samples, 0.83%)</title><rect x="91.7281%" y="197" width="0.8282%" height="15" fill="rgb(219,56,2)"/><text x="91.9781%" y="207.50"></text></g><g><title>hir_lowering (1,405,325 samples, 2.54%)</title><rect x="92.5563%" y="197" width="2.5445%" height="15" fill="rgb(233,0,4)"/><text x="92.8063%" y="207.50">hi..</text></g><g><title>parse_crate (1,413,066 samples, 2.56%)</title><rect x="95.1681%" y="197" width="2.5585%" height="15" fill="rgb(235,30,7)"/><text x="95.4181%" y="207.50">pa..</text></g><g><title>prepare_outputs (266,243 samples, 0.48%)</title><rect x="97.7397%" y="197" width="0.4821%" height="15" fill="rgb(250,79,13)"/><text x="97.9897%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (493,915 samples, 0.89%)</title><rect x="98.2217%" y="197" width="0.8943%" height="15" fill="rgb(211,146,34)"/><text x="98.4717%" y="207.50"></text></g><g><title>setup_global_ctxt (136,372 samples, 0.25%)</title><rect x="99.1355%" y="197" width="0.2469%" height="15" fill="rgb(228,22,38)"/><text x="99.3855%" y="207.50"></text></g><g><title>all (55,230,568 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (55,230,568 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (341,094 samples, 0.62%)</title><rect x="99.3824%" y="197" width="0.6176%" height="15" fill="rgb(215,215,53)"/><text x="99.6324%" y="207.50"></text></g></svg></svg>