<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (115,072 samples, 0.20%)</title><rect x="6.2498%" y="213" width="0.1981%" height="15" fill="rgb(227,0,7)"/><text x="6.4998%" y="223.50"></text></g><g><title>is_sized_raw (163,652 samples, 0.28%)</title><rect x="6.4891%" y="213" width="0.2817%" height="15" fill="rgb(217,0,24)"/><text x="6.7391%" y="223.50"></text></g><g><title>evaluate_obligation (152,431 samples, 0.26%)</title><rect x="6.5084%" y="197" width="0.2624%" height="15" fill="rgb(221,193,54)"/><text x="6.7584%" y="207.50"></text></g><g><title>param_env (170,760 samples, 0.29%)</title><rect x="7.4626%" y="181" width="0.2940%" height="15" fill="rgb(248,212,6)"/><text x="7.7126%" y="191.50"></text></g><g><title>item_attrs (102,942 samples, 0.18%)</title><rect x="7.9957%" y="149" width="0.1772%" height="15" fill="rgb(208,68,35)"/><text x="8.2457%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,282 samples, 0.17%)</title><rect x="8.0038%" y="133" width="0.1692%" height="15" fill="rgb(232,128,0)"/><text x="8.2538%" y="143.50"></text></g><g><title>codegen_fn_attrs (147,132 samples, 0.25%)</title><rect x="7.9370%" y="165" width="0.2533%" height="15" fill="rgb(207,160,47)"/><text x="8.1870%" y="175.50"></text></g><g><title>is_copy_raw (174,692 samples, 0.30%)</title><rect x="9.1535%" y="149" width="0.3007%" height="15" fill="rgb(228,23,34)"/><text x="9.4035%" y="159.50"></text></g><g><title>evaluate_obligation (167,942 samples, 0.29%)</title><rect x="9.1651%" y="133" width="0.2891%" height="15" fill="rgb(218,30,26)"/><text x="9.4151%" y="143.50"></text></g><g><title>adt_drop_tys (135,392 samples, 0.23%)</title><rect x="9.5133%" y="133" width="0.2331%" height="15" fill="rgb(220,122,19)"/><text x="9.7633%" y="143.50"></text></g><g><title>predicates_of (84,701 samples, 0.15%)</title><rect x="10.7230%" y="101" width="0.1458%" height="15" fill="rgb(250,228,42)"/><text x="10.9730%" y="111.50"></text></g><g><title>predicates_defined_on (65,140 samples, 0.11%)</title><rect x="10.7566%" y="85" width="0.1121%" height="15" fill="rgb(240,193,28)"/><text x="11.0066%" y="95.50"></text></g><g><title>is_copy_raw (655,528 samples, 1.13%)</title><rect x="9.7464%" y="133" width="1.1285%" height="15" fill="rgb(216,20,37)"/><text x="9.9964%" y="143.50"></text></g><g><title>evaluate_obligation (606,628 samples, 1.04%)</title><rect x="9.8306%" y="117" width="1.0443%" height="15" fill="rgb(206,188,39)"/><text x="10.0806%" y="127.50"></text></g><g><title>needs_drop_raw (826,690 samples, 1.42%)</title><rect x="9.4542%" y="149" width="1.4231%" height="15" fill="rgb(217,207,13)"/><text x="9.7042%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (172,773 samples, 0.30%)</title><rect x="11.0114%" y="133" width="0.2974%" height="15" fill="rgb(231,73,38)"/><text x="11.2614%" y="143.50"></text></g><g><title>impl_parent (97,280 samples, 0.17%)</title><rect x="11.6258%" y="117" width="0.1675%" height="15" fill="rgb(225,20,46)"/><text x="11.8758%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (58,480 samples, 0.10%)</title><rect x="11.6926%" y="101" width="0.1007%" height="15" fill="rgb(210,31,41)"/><text x="11.9426%" y="111.50"></text></g><g><title>specialization_graph_of (522,405 samples, 0.90%)</title><rect x="11.3460%" y="133" width="0.8993%" height="15" fill="rgb(221,200,47)"/><text x="11.5960%" y="143.50"></text></g><g><title>impl_trait_ref (262,624 samples, 0.45%)</title><rect x="11.7933%" y="117" width="0.4521%" height="15" fill="rgb(226,26,5)"/><text x="12.0433%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (226,523 samples, 0.39%)</title><rect x="11.8554%" y="101" width="0.3900%" height="15" fill="rgb(249,33,26)"/><text x="12.1054%" y="111.50"></text></g><g><title>resolve_instance (819,969 samples, 1.41%)</title><rect x="10.8774%" y="149" width="1.4116%" height="15" fill="rgb(235,183,28)"/><text x="11.1274%" y="159.50"></text></g><g><title>thir_body (212,134 samples, 0.37%)</title><rect x="12.2964%" y="149" width="0.3652%" height="15" fill="rgb(221,5,38)"/><text x="12.5464%" y="159.50"></text></g><g><title>mir_const (3,239,697 samples, 5.58%)</title><rect x="7.0935%" y="197" width="5.5771%" height="15" fill="rgb(247,18,42)"/><text x="7.3435%" y="207.50">mir_con..</text></g><g><title>unsafety_check_result (2,854,503 samples, 4.91%)</title><rect x="7.7566%" y="181" width="4.9140%" height="15" fill="rgb(241,131,45)"/><text x="8.0066%" y="191.50">unsafe..</text></g><g><title>mir_built (2,602,539 samples, 4.48%)</title><rect x="8.1903%" y="165" width="4.4802%" height="15" fill="rgb(249,31,29)"/><text x="8.4403%" y="175.50">mir_b..</text></g><g><title>mir_promoted (3,609,693 samples, 6.21%)</title><rect x="6.7708%" y="213" width="6.2140%" height="15" fill="rgb(225,111,53)"/><text x="7.0208%" y="223.50">mir_prom..</text></g><g><title>mir_const_qualif (182,554 samples, 0.31%)</title><rect x="12.6705%" y="197" width="0.3143%" height="15" fill="rgb(238,160,17)"/><text x="12.9205%" y="207.50"></text></g><g><title>mir_const (148,962 samples, 0.26%)</title><rect x="12.7284%" y="181" width="0.2564%" height="15" fill="rgb(214,148,48)"/><text x="12.9784%" y="191.50"></text></g><g><title>unsafety_check_result (96,831 samples, 0.17%)</title><rect x="12.8181%" y="165" width="0.1667%" height="15" fill="rgb(232,36,49)"/><text x="13.0681%" y="175.50"></text></g><g><title>mir_built (60,931 samples, 0.10%)</title><rect x="12.8799%" y="149" width="0.1049%" height="15" fill="rgb(209,103,24)"/><text x="13.1299%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (144,092 samples, 0.25%)</title><rect x="12.9848%" y="213" width="0.2481%" height="15" fill="rgb(229,88,8)"/><text x="13.2348%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (238,933 samples, 0.41%)</title><rect x="13.2328%" y="213" width="0.4113%" height="15" fill="rgb(213,181,19)"/><text x="13.4828%" y="223.50"></text></g><g><title>normalize_projection_ty (143,742 samples, 0.25%)</title><rect x="13.3967%" y="197" width="0.2474%" height="15" fill="rgb(254,191,54)"/><text x="13.6467%" y="207.50"></text></g><g><title>MIR_borrow_checking (7,648,944 samples, 13.17%)</title><rect x="1.7129%" y="245" width="13.1675%" height="15" fill="rgb(241,83,37)"/><text x="1.9629%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,626,444 samples, 13.13%)</title><rect x="1.7516%" y="229" width="13.1287%" height="15" fill="rgb(233,36,39)"/><text x="2.0016%" y="239.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (635,117 samples, 1.09%)</title><rect x="13.7870%" y="213" width="1.0933%" height="15" fill="rgb(226,3,54)"/><text x="14.0370%" y="223.50"></text></g><g><title>evaluate_obligation (101,491 samples, 0.17%)</title><rect x="14.7056%" y="197" width="0.1747%" height="15" fill="rgb(245,192,40)"/><text x="14.9556%" y="207.50"></text></g><g><title>MIR_effect_checking (108,791 samples, 0.19%)</title><rect x="14.8803%" y="245" width="0.1873%" height="15" fill="rgb(238,167,29)"/><text x="15.1303%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (87,461 samples, 0.15%)</title><rect x="14.9170%" y="229" width="0.1506%" height="15" fill="rgb(232,182,51)"/><text x="15.1670%" y="239.50"></text></g><g><title>hir_module_items (165,641 samples, 0.29%)</title><rect x="15.0676%" y="245" width="0.2851%" height="15" fill="rgb(231,60,39)"/><text x="15.3176%" y="255.50"></text></g><g><title>get_lang_items (69,281 samples, 0.12%)</title><rect x="15.9033%" y="165" width="0.1193%" height="15" fill="rgb(208,69,12)"/><text x="16.1533%" y="175.50"></text></g><g><title>codegen_fn_attrs (201,843 samples, 0.35%)</title><rect x="15.8392%" y="181" width="0.3475%" height="15" fill="rgb(235,93,37)"/><text x="16.0892%" y="191.50"></text></g><g><title>codegen_fn_attrs (320,734 samples, 0.55%)</title><rect x="15.6402%" y="213" width="0.5521%" height="15" fill="rgb(213,116,39)"/><text x="15.8902%" y="223.50"></text></g><g><title>should_inherit_track_caller (272,853 samples, 0.47%)</title><rect x="15.7226%" y="197" width="0.4697%" height="15" fill="rgb(222,207,29)"/><text x="15.9726%" y="207.50"></text></g><g><title>check_mod_attrs (460,785 samples, 0.79%)</title><rect x="15.3999%" y="229" width="0.7932%" height="15" fill="rgb(206,96,30)"/><text x="15.6499%" y="239.50"></text></g><g><title>check_mod_const_bodies (66,921 samples, 0.12%)</title><rect x="16.1931%" y="229" width="0.1152%" height="15" fill="rgb(218,138,4)"/><text x="16.4431%" y="239.50"></text></g><g><title>lint_levels (86,801 samples, 0.15%)</title><rect x="16.5924%" y="213" width="0.1494%" height="15" fill="rgb(250,191,14)"/><text x="16.8424%" y="223.50"></text></g><g><title>lookup_deprecation_entry (102,391 samples, 0.18%)</title><rect x="16.7418%" y="213" width="0.1763%" height="15" fill="rgb(239,60,40)"/><text x="16.9918%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (349,454 samples, 0.60%)</title><rect x="16.4052%" y="229" width="0.6016%" height="15" fill="rgb(206,27,48)"/><text x="16.6552%" y="239.50"></text></g><g><title>looking_for_derive_registrar (65,170 samples, 0.11%)</title><rect x="17.0111%" y="229" width="0.1122%" height="15" fill="rgb(225,35,8)"/><text x="17.2611%" y="239.50"></text></g><g><title>misc_checking_1 (1,031,841 samples, 1.78%)</title><rect x="15.3534%" y="245" width="1.7763%" height="15" fill="rgb(250,213,24)"/><text x="15.6034%" y="255.50">m..</text></g><g><title>liveness_and_intrinsic_checking (143,741 samples, 0.25%)</title><rect x="17.1323%" y="229" width="0.2474%" height="15" fill="rgb(247,123,22)"/><text x="17.3823%" y="239.50"></text></g><g><title>check_mod_liveness (113,651 samples, 0.20%)</title><rect x="17.1841%" y="213" width="0.1956%" height="15" fill="rgb(231,138,38)"/><text x="17.4341%" y="223.50"></text></g><g><title>misc_checking_2 (310,673 samples, 0.53%)</title><rect x="17.1297%" y="245" width="0.5348%" height="15" fill="rgb(231,145,46)"/><text x="17.3797%" y="255.50"></text></g><g><title>match_checking (165,462 samples, 0.28%)</title><rect x="17.3797%" y="229" width="0.2848%" height="15" fill="rgb(251,118,11)"/><text x="17.6297%" y="239.50"></text></g><g><title>check_match (157,141 samples, 0.27%)</title><rect x="17.3940%" y="213" width="0.2705%" height="15" fill="rgb(217,147,25)"/><text x="17.6440%" y="223.50"></text></g><g><title>check_private_in_public (92,861 samples, 0.16%)</title><rect x="17.6791%" y="229" width="0.1599%" height="15" fill="rgb(247,81,37)"/><text x="17.9291%" y="239.50"></text></g><g><title>death_checking (161,311 samples, 0.28%)</title><rect x="17.8389%" y="229" width="0.2777%" height="15" fill="rgb(209,12,38)"/><text x="18.0889%" y="239.50"></text></g><g><title>eval_to_const_value_raw (261,013 samples, 0.45%)</title><rect x="19.0922%" y="69" width="0.4493%" height="15" fill="rgb(227,1,9)"/><text x="19.3422%" y="79.50"></text></g><g><title>eval_to_const_value_raw (260,413 samples, 0.45%)</title><rect x="19.0932%" y="53" width="0.4483%" height="15" fill="rgb(248,47,43)"/><text x="19.3432%" y="63.50"></text></g><g><title>eval_to_allocation_raw (258,913 samples, 0.45%)</title><rect x="19.0958%" y="37" width="0.4457%" height="15" fill="rgb(221,10,30)"/><text x="19.3458%" y="47.50"></text></g><g><title>eval_to_const_value_raw (298,243 samples, 0.51%)</title><rect x="19.0352%" y="133" width="0.5134%" height="15" fill="rgb(210,229,1)"/><text x="19.2852%" y="143.50"></text></g><g><title>eval_to_const_value_raw (297,213 samples, 0.51%)</title><rect x="19.0370%" y="117" width="0.5116%" height="15" fill="rgb(222,148,37)"/><text x="19.2870%" y="127.50"></text></g><g><title>eval_to_allocation_raw (295,903 samples, 0.51%)</title><rect x="19.0393%" y="101" width="0.5094%" height="15" fill="rgb(234,67,33)"/><text x="19.2893%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (268,383 samples, 0.46%)</title><rect x="19.0866%" y="85" width="0.4620%" height="15" fill="rgb(247,98,35)"/><text x="19.3366%" y="95.50"></text></g><g><title>eval_to_const_value_raw (411,614 samples, 0.71%)</title><rect x="18.8444%" y="197" width="0.7086%" height="15" fill="rgb(247,138,52)"/><text x="19.0944%" y="207.50"></text></g><g><title>eval_to_const_value_raw (409,234 samples, 0.70%)</title><rect x="18.8485%" y="181" width="0.7045%" height="15" fill="rgb(213,79,30)"/><text x="19.0985%" y="191.50"></text></g><g><title>eval_to_allocation_raw (404,824 samples, 0.70%)</title><rect x="18.8561%" y="165" width="0.6969%" height="15" fill="rgb(246,177,23)"/><text x="19.1061%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (305,613 samples, 0.53%)</title><rect x="19.0268%" y="149" width="0.5261%" height="15" fill="rgb(230,62,27)"/><text x="19.2768%" y="159.50"></text></g><g><title>explicit_predicates_of (58,790 samples, 0.10%)</title><rect x="19.8936%" y="149" width="0.1012%" height="15" fill="rgb(216,154,8)"/><text x="20.1436%" y="159.50"></text></g><g><title>param_env (261,972 samples, 0.45%)</title><rect x="19.5529%" y="197" width="0.4510%" height="15" fill="rgb(244,35,45)"/><text x="19.8029%" y="207.50"></text></g><g><title>predicates_of (128,751 samples, 0.22%)</title><rect x="19.7823%" y="181" width="0.2216%" height="15" fill="rgb(251,115,12)"/><text x="20.0323%" y="191.50"></text></g><g><title>predicates_defined_on (105,171 samples, 0.18%)</title><rect x="19.8229%" y="165" width="0.1810%" height="15" fill="rgb(240,54,50)"/><text x="20.0729%" y="175.50"></text></g><g><title>trait_impls_of (113,431 samples, 0.20%)</title><rect x="20.0039%" y="197" width="0.1953%" height="15" fill="rgb(233,84,52)"/><text x="20.2539%" y="207.50"></text></g><g><title>crate_lints (1,784,340 samples, 3.07%)</title><rect x="18.1196%" y="213" width="3.0717%" height="15" fill="rgb(207,117,47)"/><text x="18.3696%" y="223.50">cra..</text></g><g><title>type_of (571,917 samples, 0.98%)</title><rect x="20.2067%" y="197" width="0.9845%" height="15" fill="rgb(249,43,39)"/><text x="20.4567%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (471,495 samples, 0.81%)</title><rect x="20.3796%" y="181" width="0.8117%" height="15" fill="rgb(209,38,44)"/><text x="20.6296%" y="191.50"></text></g><g><title>lint_checking (1,909,271 samples, 3.29%)</title><rect x="18.1166%" y="229" width="3.2868%" height="15" fill="rgb(236,212,23)"/><text x="18.3666%" y="239.50">lin..</text></g><g><title>module_lints (123,211 samples, 0.21%)</title><rect x="21.1913%" y="213" width="0.2121%" height="15" fill="rgb(242,79,21)"/><text x="21.4413%" y="223.50"></text></g><g><title>lint_mod (120,581 samples, 0.21%)</title><rect x="21.1958%" y="197" width="0.2076%" height="15" fill="rgb(211,96,35)"/><text x="21.4458%" y="207.50"></text></g><g><title>privacy_access_levels (98,302 samples, 0.17%)</title><rect x="21.4034%" y="229" width="0.1692%" height="15" fill="rgb(253,215,40)"/><text x="21.6534%" y="239.50"></text></g><g><title>privacy_checking_modules (334,114 samples, 0.58%)</title><rect x="21.5726%" y="229" width="0.5752%" height="15" fill="rgb(211,81,21)"/><text x="21.8226%" y="239.50"></text></g><g><title>check_mod_privacy (331,774 samples, 0.57%)</title><rect x="21.5766%" y="213" width="0.5711%" height="15" fill="rgb(208,190,38)"/><text x="21.8266%" y="223.50"></text></g><g><title>misc_checking_3 (2,617,240 samples, 4.51%)</title><rect x="17.6645%" y="245" width="4.5055%" height="15" fill="rgb(235,213,38)"/><text x="17.9145%" y="255.50">misc_..</text></g><g><title>impl_parent (285,194 samples, 0.49%)</title><rect x="22.9742%" y="181" width="0.4910%" height="15" fill="rgb(237,122,38)"/><text x="23.2242%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (198,092 samples, 0.34%)</title><rect x="23.1242%" y="165" width="0.3410%" height="15" fill="rgb(244,218,35)"/><text x="23.3742%" y="175.50"></text></g><g><title>impl_trait_ref (971,799 samples, 1.67%)</title><rect x="23.4652%" y="181" width="1.6729%" height="15" fill="rgb(240,68,47)"/><text x="23.7152%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (886,497 samples, 1.53%)</title><rect x="23.6120%" y="165" width="1.5261%" height="15" fill="rgb(210,16,53)"/><text x="23.8620%" y="175.50"></text></g><g><title>coherent_trait (1,786,449 samples, 3.08%)</title><rect x="22.2736%" y="213" width="3.0753%" height="15" fill="rgb(235,124,12)"/><text x="22.5236%" y="223.50">coh..</text></g><g><title>specialization_graph_of (1,778,269 samples, 3.06%)</title><rect x="22.2877%" y="197" width="3.0612%" height="15" fill="rgb(224,169,11)"/><text x="22.5377%" y="207.50">spe..</text></g><g><title>trait_impls_of (122,481 samples, 0.21%)</title><rect x="25.1381%" y="181" width="0.2108%" height="15" fill="rgb(250,166,2)"/><text x="25.3881%" y="191.50"></text></g><g><title>coherence_checking (1,841,370 samples, 3.17%)</title><rect x="22.2526%" y="229" width="3.1699%" height="15" fill="rgb(242,216,29)"/><text x="22.5026%" y="239.50">coh..</text></g><g><title>associated_item (200,725 samples, 0.35%)</title><rect x="32.9708%" y="165" width="0.3455%" height="15" fill="rgb(230,116,27)"/><text x="33.2208%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (162,494 samples, 0.28%)</title><rect x="33.0366%" y="149" width="0.2797%" height="15" fill="rgb(228,99,48)"/><text x="33.2866%" y="159.50"></text></g><g><title>associated_items (299,357 samples, 0.52%)</title><rect x="32.8314%" y="181" width="0.5153%" height="15" fill="rgb(253,11,6)"/><text x="33.0814%" y="191.50"></text></g><g><title>adt_dtorck_constraint (116,022 samples, 0.20%)</title><rect x="33.6014%" y="165" width="0.1997%" height="15" fill="rgb(247,143,39)"/><text x="33.8514%" y="175.50"></text></g><g><title>dropck_outlives (884,081 samples, 1.52%)</title><rect x="33.4030%" y="181" width="1.5219%" height="15" fill="rgb(236,97,10)"/><text x="33.6530%" y="191.50"></text></g><g><title>normalize_projection_ty (652,808 samples, 1.12%)</title><rect x="33.8012%" y="165" width="1.1238%" height="15" fill="rgb(233,208,19)"/><text x="34.0512%" y="175.50"></text></g><g><title>evaluate_obligation (265,911 samples, 0.46%)</title><rect x="34.4672%" y="149" width="0.4578%" height="15" fill="rgb(216,164,2)"/><text x="34.7172%" y="159.50"></text></g><g><title>adt_sized_constraint (60,251 samples, 0.10%)</title><rect x="35.8662%" y="165" width="0.1037%" height="15" fill="rgb(220,129,5)"/><text x="36.1162%" y="175.50"></text></g><g><title>predicates_of (77,170 samples, 0.13%)</title><rect x="36.1247%" y="165" width="0.1328%" height="15" fill="rgb(242,17,10)"/><text x="36.3747%" y="175.50"></text></g><g><title>specializes (75,511 samples, 0.13%)</title><rect x="36.2576%" y="165" width="0.1300%" height="15" fill="rgb(242,107,0)"/><text x="36.5076%" y="175.50"></text></g><g><title>param_env (64,481 samples, 0.11%)</title><rect x="36.2765%" y="149" width="0.1110%" height="15" fill="rgb(251,28,31)"/><text x="36.5265%" y="159.50"></text></g><g><title>trait_impls_of (223,131 samples, 0.38%)</title><rect x="36.4000%" y="165" width="0.3841%" height="15" fill="rgb(233,223,10)"/><text x="36.6500%" y="175.50"></text></g><g><title>implementations_of_trait (88,700 samples, 0.15%)</title><rect x="36.6314%" y="149" width="0.1527%" height="15" fill="rgb(215,21,27)"/><text x="36.8814%" y="159.50"></text></g><g><title>evaluate_obligation (1,080,909 samples, 1.86%)</title><rect x="34.9250%" y="181" width="1.8608%" height="15" fill="rgb(232,23,21)"/><text x="35.1750%" y="191.50">e..</text></g><g><title>fn_sig (63,760 samples, 0.11%)</title><rect x="36.8129%" y="181" width="0.1098%" height="15" fill="rgb(244,5,23)"/><text x="37.0629%" y="191.50"></text></g><g><title>method_autoderef_steps (363,764 samples, 0.63%)</title><rect x="37.2339%" y="181" width="0.6262%" height="15" fill="rgb(226,81,46)"/><text x="37.4839%" y="191.50"></text></g><g><title>evaluate_obligation (265,472 samples, 0.46%)</title><rect x="37.4031%" y="165" width="0.4570%" height="15" fill="rgb(247,70,30)"/><text x="37.6531%" y="175.50"></text></g><g><title>predicates_of (199,822 samples, 0.34%)</title><rect x="37.8839%" y="181" width="0.3440%" height="15" fill="rgb(212,68,19)"/><text x="38.1339%" y="191.50"></text></g><g><title>predicates_defined_on (128,491 samples, 0.22%)</title><rect x="38.0067%" y="165" width="0.2212%" height="15" fill="rgb(240,187,13)"/><text x="38.2567%" y="175.50"></text></g><g><title>trait_impls_of (77,050 samples, 0.13%)</title><rect x="38.3214%" y="181" width="0.1326%" height="15" fill="rgb(223,113,26)"/><text x="38.5714%" y="191.50"></text></g><g><title>associated_item (190,702 samples, 0.33%)</title><rect x="42.9145%" y="149" width="0.3283%" height="15" fill="rgb(206,192,2)"/><text x="43.1645%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (153,532 samples, 0.26%)</title><rect x="42.9785%" y="133" width="0.2643%" height="15" fill="rgb(241,108,4)"/><text x="43.2285%" y="143.50"></text></g><g><title>associated_items (258,213 samples, 0.44%)</title><rect x="42.8078%" y="165" width="0.4445%" height="15" fill="rgb(247,173,49)"/><text x="43.0578%" y="175.50"></text></g><g><title>fn_abi_of_instance (85,951 samples, 0.15%)</title><rect x="43.5662%" y="117" width="0.1480%" height="15" fill="rgb(224,114,35)"/><text x="43.8162%" y="127.50"></text></g><g><title>eval_to_const_value_raw (273,243 samples, 0.47%)</title><rect x="43.3250%" y="165" width="0.4704%" height="15" fill="rgb(245,159,27)"/><text x="43.5750%" y="175.50"></text></g><g><title>eval_to_const_value_raw (261,773 samples, 0.45%)</title><rect x="43.3447%" y="149" width="0.4506%" height="15" fill="rgb(245,172,44)"/><text x="43.5947%" y="159.50"></text></g><g><title>eval_to_allocation_raw (256,913 samples, 0.44%)</title><rect x="43.3531%" y="133" width="0.4423%" height="15" fill="rgb(236,23,11)"/><text x="43.6031%" y="143.50"></text></g><g><title>evaluate_obligation (563,888 samples, 0.97%)</title><rect x="43.7954%" y="165" width="0.9707%" height="15" fill="rgb(205,117,38)"/><text x="44.0454%" y="175.50"></text></g><g><title>trait_impls_of (110,161 samples, 0.19%)</title><rect x="44.5764%" y="149" width="0.1896%" height="15" fill="rgb(237,72,25)"/><text x="44.8264%" y="159.50"></text></g><g><title>method_autoderef_steps (74,331 samples, 0.13%)</title><rect x="45.0586%" y="165" width="0.1280%" height="15" fill="rgb(244,70,9)"/><text x="45.3086%" y="175.50"></text></g><g><title>predicates_of (73,640 samples, 0.13%)</title><rect x="45.1971%" y="165" width="0.1268%" height="15" fill="rgb(217,125,39)"/><text x="45.4471%" y="175.50"></text></g><g><title>typeck (3,983,534 samples, 6.86%)</title><rect x="38.5193%" y="181" width="6.8576%" height="15" fill="rgb(235,36,10)"/><text x="38.7693%" y="191.50">typeck</text></g><g><title>item_bodies_checking (11,590,628 samples, 19.95%)</title><rect x="25.4568%" y="229" width="19.9530%" height="15" fill="rgb(251,123,47)"/><text x="25.7068%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (11,588,158 samples, 19.95%)</title><rect x="25.4611%" y="213" width="19.9487%" height="15" fill="rgb(221,13,13)"/><text x="25.7111%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (11,573,398 samples, 19.92%)</title><rect x="25.4865%" y="197" width="19.9233%" height="15" fill="rgb(238,131,9)"/><text x="25.7365%" y="207.50">typeck</text></g><g><title>predicates_of (65,903 samples, 0.11%)</title><rect x="47.2287%" y="181" width="0.1135%" height="15" fill="rgb(211,50,8)"/><text x="47.4787%" y="191.50"></text></g><g><title>evaluate_obligation (538,168 samples, 0.93%)</title><rect x="46.5760%" y="197" width="0.9264%" height="15" fill="rgb(245,182,24)"/><text x="46.8260%" y="207.50"></text></g><g><title>trait_impls_of (93,091 samples, 0.16%)</title><rect x="47.3422%" y="181" width="0.1603%" height="15" fill="rgb(242,14,37)"/><text x="47.5922%" y="191.50"></text></g><g><title>item_types_checking (1,465,406 samples, 2.52%)</title><rect x="45.4098%" y="229" width="2.5227%" height="15" fill="rgb(246,228,12)"/><text x="45.6598%" y="239.50">it..</text></g><g><title>check_mod_item_types (1,460,416 samples, 2.51%)</title><rect x="45.4184%" y="213" width="2.5141%" height="15" fill="rgb(213,55,15)"/><text x="45.6684%" y="223.50">ch..</text></g><g><title>typeck (136,282 samples, 0.23%)</title><rect x="47.6978%" y="197" width="0.2346%" height="15" fill="rgb(209,9,3)"/><text x="47.9478%" y="207.50"></text></g><g><title>fn_sig (65,760 samples, 0.11%)</title><rect x="48.1457%" y="197" width="0.1132%" height="15" fill="rgb(230,59,30)"/><text x="48.3957%" y="207.50"></text></g><g><title>late_bound_vars_map (179,123 samples, 0.31%)</title><rect x="48.7018%" y="149" width="0.3084%" height="15" fill="rgb(209,121,21)"/><text x="48.9518%" y="159.50"></text></g><g><title>resolve_lifetimes (165,653 samples, 0.29%)</title><rect x="48.7249%" y="133" width="0.2852%" height="15" fill="rgb(220,109,13)"/><text x="48.9749%" y="143.50"></text></g><g><title>explicit_predicates_of (339,644 samples, 0.58%)</title><rect x="48.4442%" y="165" width="0.5847%" height="15" fill="rgb(232,18,1)"/><text x="48.6942%" y="175.50"></text></g><g><title>predicates_of (471,955 samples, 0.81%)</title><rect x="48.3784%" y="197" width="0.8125%" height="15" fill="rgb(215,41,42)"/><text x="48.6284%" y="207.50"></text></g><g><title>predicates_defined_on (458,395 samples, 0.79%)</title><rect x="48.4017%" y="181" width="0.7891%" height="15" fill="rgb(224,123,36)"/><text x="48.6517%" y="191.50"></text></g><g><title>inferred_outlives_of (94,081 samples, 0.16%)</title><rect x="49.0289%" y="165" width="0.1620%" height="15" fill="rgb(240,125,3)"/><text x="49.2789%" y="175.50"></text></g><g><title>inferred_outlives_crate (81,551 samples, 0.14%)</title><rect x="49.0505%" y="149" width="0.1404%" height="15" fill="rgb(205,98,50)"/><text x="49.3005%" y="159.50"></text></g><g><title>type_collecting (898,010 samples, 1.55%)</title><rect x="47.9384%" y="229" width="1.5459%" height="15" fill="rgb(205,185,37)"/><text x="48.1884%" y="239.50"></text></g><g><title>collect_mod_item_types (882,380 samples, 1.52%)</title><rect x="47.9653%" y="213" width="1.5190%" height="15" fill="rgb(238,207,15)"/><text x="48.2153%" y="223.50"></text></g><g><title>type_of (170,482 samples, 0.29%)</title><rect x="49.1909%" y="197" width="0.2935%" height="15" fill="rgb(213,199,42)"/><text x="49.4409%" y="207.50"></text></g><g><title>adt_sized_constraint (83,001 samples, 0.14%)</title><rect x="51.7478%" y="181" width="0.1429%" height="15" fill="rgb(235,201,11)"/><text x="51.9978%" y="191.50"></text></g><g><title>evaluate_obligation (622,046 samples, 1.07%)</title><rect x="50.9607%" y="197" width="1.0708%" height="15" fill="rgb(207,46,11)"/><text x="51.2107%" y="207.50"></text></g><g><title>implied_outlives_bounds (153,142 samples, 0.26%)</title><rect x="52.0359%" y="197" width="0.2636%" height="15" fill="rgb(241,35,35)"/><text x="52.2859%" y="207.50"></text></g><g><title>param_env (134,423 samples, 0.23%)</title><rect x="52.2995%" y="197" width="0.2314%" height="15" fill="rgb(243,32,47)"/><text x="52.5495%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,796,120 samples, 3.09%)</title><rect x="49.5881%" y="213" width="3.0920%" height="15" fill="rgb(247,202,23)"/><text x="49.8381%" y="223.50">che..</text></g><g><title>region_scope_tree (66,330 samples, 0.11%)</title><rect x="52.5659%" y="197" width="0.1142%" height="15" fill="rgb(219,102,11)"/><text x="52.8159%" y="207.50"></text></g><g><title>evaluate_obligation (305,692 samples, 0.53%)</title><rect x="54.0868%" y="197" width="0.5262%" height="15" fill="rgb(243,110,44)"/><text x="54.3368%" y="207.50"></text></g><g><title>param_env (244,962 samples, 0.42%)</title><rect x="54.7012%" y="197" width="0.4217%" height="15" fill="rgb(222,74,54)"/><text x="54.9512%" y="207.50"></text></g><g><title>predicates_of (61,042 samples, 0.11%)</title><rect x="55.1229%" y="197" width="0.1051%" height="15" fill="rgb(216,99,12)"/><text x="55.3729%" y="207.50"></text></g><g><title>analysis (31,425,398 samples, 54.10%)</title><rect x="1.3355%" y="261" width="54.0980%" height="15" fill="rgb(226,22,26)"/><text x="1.5855%" y="271.50">analysis</text></g><g><title>type_check_crate (19,322,654 samples, 33.26%)</title><rect x="22.1700%" y="245" width="33.2635%" height="15" fill="rgb(217,163,10)"/><text x="22.4200%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,454,849 samples, 5.95%)</title><rect x="49.4861%" y="229" width="5.9474%" height="15" fill="rgb(213,25,53)"/><text x="49.7361%" y="239.50">wf_check..</text></g><g><title>check_item_well_formed (1,599,469 samples, 2.75%)</title><rect x="52.6801%" y="213" width="2.7534%" height="15" fill="rgb(252,105,26)"/><text x="52.9301%" y="223.50">ch..</text></g><g><title>codegen_crate (355,714 samples, 0.61%)</title><rect x="55.4545%" y="261" width="0.6124%" height="15" fill="rgb(220,39,43)"/><text x="55.7045%" y="271.50"></text></g><g><title>AST_validation (134,301 samples, 0.23%)</title><rect x="56.4505%" y="245" width="0.2312%" height="15" fill="rgb(229,68,48)"/><text x="56.7005%" y="255.50"></text></g><g><title>complete_gated_feature_checking (59,140 samples, 0.10%)</title><rect x="56.6817%" y="245" width="0.1018%" height="15" fill="rgb(252,8,32)"/><text x="56.9317%" y="255.50"></text></g><g><title>crate_injection (97,141 samples, 0.17%)</title><rect x="56.7835%" y="245" width="0.1672%" height="15" fill="rgb(223,20,43)"/><text x="57.0335%" y="255.50"></text></g><g><title>metadata_register_crate (1,166,584 samples, 2.01%)</title><rect x="83.0212%" y="213" width="2.0082%" height="15" fill="rgb(229,81,49)"/><text x="83.2712%" y="223.50">m..</text></g><g><title>metadata_register_crate (299,853 samples, 0.52%)</title><rect x="84.5133%" y="197" width="0.5162%" height="15" fill="rgb(236,28,36)"/><text x="84.7633%" y="207.50"></text></g><g><title>macro_expand_crate (16,370,742 samples, 28.18%)</title><rect x="56.9507%" y="245" width="28.1818%" height="15" fill="rgb(249,185,26)"/><text x="57.2007%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (16,353,891 samples, 28.15%)</title><rect x="56.9798%" y="229" width="28.1528%" height="15" fill="rgb(249,174,33)"/><text x="57.2298%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (59,881 samples, 0.10%)</title><rect x="85.0295%" y="213" width="0.1031%" height="15" fill="rgb(233,201,37)"/><text x="85.2795%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (166,102 samples, 0.29%)</title><rect x="85.1446%" y="245" width="0.2859%" height="15" fill="rgb(221,78,26)"/><text x="85.3946%" y="255.50"></text></g><g><title>finalize_imports (156,601 samples, 0.27%)</title><rect x="85.4449%" y="229" width="0.2696%" height="15" fill="rgb(250,127,30)"/><text x="85.6949%" y="239.50"></text></g><g><title>late_resolve_crate (1,011,131 samples, 1.74%)</title><rect x="85.7371%" y="229" width="1.7406%" height="15" fill="rgb(230,49,44)"/><text x="85.9871%" y="239.50"></text></g><g><title>configure_and_expand (18,347,233 samples, 31.58%)</title><rect x="56.0669%" y="261" width="31.5843%" height="15" fill="rgb(229,67,23)"/><text x="56.3169%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,289,994 samples, 2.22%)</title><rect x="85.4305%" y="245" width="2.2207%" height="15" fill="rgb(249,83,47)"/><text x="85.6805%" y="255.50">r..</text></g><g><title>drop_ast (94,081 samples, 0.16%)</title><rect x="87.6512%" y="261" width="0.1620%" height="15" fill="rgb(215,43,3)"/><text x="87.9012%" y="271.50"></text></g><g><title>early_lint_checks (206,222 samples, 0.36%)</title><rect x="87.8418%" y="261" width="0.3550%" height="15" fill="rgb(238,154,13)"/><text x="88.0918%" y="271.50"></text></g><g><title>free_global_ctxt (1,798,230 samples, 3.10%)</title><rect x="88.1968%" y="261" width="3.0956%" height="15" fill="rgb(219,56,2)"/><text x="88.4468%" y="271.50">fre..</text></g><g><title>crate_hash (66,711 samples, 0.11%)</title><rect x="91.9930%" y="245" width="0.1148%" height="15" fill="rgb(233,0,4)"/><text x="92.2430%" y="255.50"></text></g><g><title>generate_crate_metadata (559,156 samples, 0.96%)</title><rect x="91.2924%" y="261" width="0.9626%" height="15" fill="rgb(235,30,7)"/><text x="91.5424%" y="271.50"></text></g><g><title>hir_lowering (1,521,377 samples, 2.62%)</title><rect x="92.2550%" y="261" width="2.6190%" height="15" fill="rgb(250,79,13)"/><text x="92.5050%" y="271.50">hi..</text></g><g><title>parse_crate (1,746,529 samples, 3.01%)</title><rect x="94.9431%" y="261" width="3.0066%" height="15" fill="rgb(211,146,34)"/><text x="95.1931%" y="271.50">par..</text></g><g><title>prepare_outputs (251,503 samples, 0.43%)</title><rect x="97.9682%" y="261" width="0.4330%" height="15" fill="rgb(228,22,38)"/><text x="98.2182%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (496,966 samples, 0.86%)</title><rect x="98.4012%" y="261" width="0.8555%" height="15" fill="rgb(235,168,5)"/><text x="98.6512%" y="271.50"></text></g><g><title>setup_global_ctxt (134,131 samples, 0.23%)</title><rect x="99.2763%" y="261" width="0.2309%" height="15" fill="rgb(221,155,16)"/><text x="99.5263%" y="271.50"></text></g><g><title>all (58,089,731 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (58,089,731 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (286,293 samples, 0.49%)</title><rect x="99.5072%" y="261" width="0.4928%" height="15" fill="rgb(234,103,6)"/><text x="99.7572%" y="271.50"></text></g></svg></svg>