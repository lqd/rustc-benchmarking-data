<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (356,307 samples, 0.26%)</title><rect x="9.8837%" y="181" width="0.2633%" height="15" fill="rgb(227,0,7)"/><text x="10.1337%" y="191.50"></text></g><g><title>item_attrs (367,314 samples, 0.27%)</title><rect x="10.5527%" y="149" width="0.2714%" height="15" fill="rgb(217,0,24)"/><text x="10.8027%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (357,184 samples, 0.26%)</title><rect x="10.5602%" y="133" width="0.2639%" height="15" fill="rgb(221,193,54)"/><text x="10.8102%" y="143.50"></text></g><g><title>codegen_fn_attrs (524,107 samples, 0.39%)</title><rect x="10.4577%" y="165" width="0.3872%" height="15" fill="rgb(248,212,6)"/><text x="10.7077%" y="175.50"></text></g><g><title>adt_drop_tys (250,053 samples, 0.18%)</title><rect x="12.8698%" y="117" width="0.1848%" height="15" fill="rgb(208,68,35)"/><text x="13.1198%" y="127.50"></text></g><g><title>is_copy_raw (175,971 samples, 0.13%)</title><rect x="13.0546%" y="117" width="0.1300%" height="15" fill="rgb(232,128,0)"/><text x="13.3046%" y="127.50"></text></g><g><title>adt_drop_tys (617,785 samples, 0.46%)</title><rect x="12.8359%" y="133" width="0.4565%" height="15" fill="rgb(207,160,47)"/><text x="13.0859%" y="143.50"></text></g><g><title>param_env (145,811 samples, 0.11%)</title><rect x="13.1846%" y="117" width="0.1077%" height="15" fill="rgb(228,23,34)"/><text x="13.4346%" y="127.50"></text></g><g><title>needs_drop_raw (1,579,406 samples, 1.17%)</title><rect x="12.7411%" y="149" width="1.1669%" height="15" fill="rgb(218,30,26)"/><text x="12.9911%" y="159.50"></text></g><g><title>is_copy_raw (833,297 samples, 0.62%)</title><rect x="13.2923%" y="133" width="0.6157%" height="15" fill="rgb(220,122,19)"/><text x="13.5423%" y="143.50"></text></g><g><title>evaluate_obligation (669,887 samples, 0.49%)</title><rect x="13.4131%" y="117" width="0.4949%" height="15" fill="rgb(250,228,42)"/><text x="13.6631%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (342,404 samples, 0.25%)</title><rect x="14.1290%" y="133" width="0.2530%" height="15" fill="rgb(240,193,28)"/><text x="14.3790%" y="143.50"></text></g><g><title>impl_parent (360,115 samples, 0.27%)</title><rect x="14.9115%" y="117" width="0.2661%" height="15" fill="rgb(216,20,37)"/><text x="15.1615%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (222,564 samples, 0.16%)</title><rect x="15.0131%" y="101" width="0.1644%" height="15" fill="rgb(206,188,39)"/><text x="15.2631%" y="111.50"></text></g><g><title>specialization_graph_of (2,007,582 samples, 1.48%)</title><rect x="14.4682%" y="133" width="1.4833%" height="15" fill="rgb(217,207,13)"/><text x="14.7182%" y="143.50"></text></g><g><title>impl_trait_ref (1,047,440 samples, 0.77%)</title><rect x="15.1776%" y="117" width="0.7739%" height="15" fill="rgb(231,73,38)"/><text x="15.4276%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (912,700 samples, 0.67%)</title><rect x="15.2771%" y="101" width="0.6744%" height="15" fill="rgb(225,20,46)"/><text x="15.5271%" y="111.50"></text></g><g><title>resolve_instance (2,845,861 samples, 2.10%)</title><rect x="13.9268%" y="149" width="2.1027%" height="15" fill="rgb(210,31,41)"/><text x="14.1768%" y="159.50">r..</text></g><g><title>thir_body (830,509 samples, 0.61%)</title><rect x="16.0467%" y="149" width="0.6136%" height="15" fill="rgb(221,200,47)"/><text x="16.2967%" y="159.50"></text></g><g><title>mir_const (9,876,881 samples, 7.30%)</title><rect x="9.3737%" y="197" width="7.2976%" height="15" fill="rgb(226,26,5)"/><text x="9.6237%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (8,830,230 samples, 6.52%)</title><rect x="10.1470%" y="181" width="6.5242%" height="15" fill="rgb(249,33,26)"/><text x="10.3970%" y="191.50">unsafety_..</text></g><g><title>mir_built (7,885,638 samples, 5.83%)</title><rect x="10.8449%" y="165" width="5.8263%" height="15" fill="rgb(235,183,28)"/><text x="11.0949%" y="175.50">mir_bui..</text></g><g><title>is_freeze_raw (152,533 samples, 0.11%)</title><rect x="16.8898%" y="181" width="0.1127%" height="15" fill="rgb(221,5,38)"/><text x="17.1398%" y="191.50"></text></g><g><title>evaluate_obligation (149,433 samples, 0.11%)</title><rect x="16.8921%" y="165" width="0.1104%" height="15" fill="rgb(247,18,42)"/><text x="17.1421%" y="175.50"></text></g><g><title>mir_const (304,714 samples, 0.23%)</title><rect x="17.0033%" y="181" width="0.2251%" height="15" fill="rgb(241,131,45)"/><text x="17.2533%" y="191.50"></text></g><g><title>unsafety_check_result (212,963 samples, 0.16%)</title><rect x="17.0711%" y="165" width="0.1573%" height="15" fill="rgb(249,31,29)"/><text x="17.3211%" y="175.50"></text></g><g><title>mir_built (163,533 samples, 0.12%)</title><rect x="17.1076%" y="149" width="0.1208%" height="15" fill="rgb(225,111,53)"/><text x="17.3576%" y="159.50"></text></g><g><title>mir_const_qualif (779,080 samples, 0.58%)</title><rect x="16.6712%" y="197" width="0.5756%" height="15" fill="rgb(238,160,17)"/><text x="16.9212%" y="207.50"></text></g><g><title>mir_promoted (11,381,154 samples, 8.41%)</title><rect x="8.8424%" y="213" width="8.4090%" height="15" fill="rgb(214,148,48)"/><text x="9.0924%" y="223.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (891,176 samples, 0.66%)</title><rect x="17.2521%" y="213" width="0.6584%" height="15" fill="rgb(232,36,49)"/><text x="17.5021%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (531,389 samples, 0.39%)</title><rect x="17.9106%" y="213" width="0.3926%" height="15" fill="rgb(209,103,24)"/><text x="18.1606%" y="223.50"></text></g><g><title>normalize_projection_ty (338,336 samples, 0.25%)</title><rect x="18.0532%" y="197" width="0.2500%" height="15" fill="rgb(229,88,8)"/><text x="18.3032%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,549,172 samples, 1.88%)</title><rect x="18.3699%" y="213" width="1.8835%" height="15" fill="rgb(213,181,19)"/><text x="18.6199%" y="223.50">t..</text></g><g><title>MIR_borrow_checking (26,087,221 samples, 19.27%)</title><rect x="0.9854%" y="245" width="19.2746%" height="15" fill="rgb(254,191,54)"/><text x="1.2354%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,978,397 samples, 19.19%)</title><rect x="1.0658%" y="229" width="19.1942%" height="15" fill="rgb(241,83,37)"/><text x="1.3158%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (251,093 samples, 0.19%)</title><rect x="20.2600%" y="245" width="0.1855%" height="15" fill="rgb(233,36,39)"/><text x="20.5100%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (189,762 samples, 0.14%)</title><rect x="20.3053%" y="229" width="0.1402%" height="15" fill="rgb(226,3,54)"/><text x="20.5553%" y="239.50"></text></g><g><title>hir_module_items (302,183 samples, 0.22%)</title><rect x="20.4455%" y="245" width="0.2233%" height="15" fill="rgb(245,192,40)"/><text x="20.6955%" y="255.50"></text></g><g><title>codegen_fn_attrs (176,921 samples, 0.13%)</title><rect x="21.2925%" y="181" width="0.1307%" height="15" fill="rgb(238,167,29)"/><text x="21.5425%" y="191.50"></text></g><g><title>should_inherit_track_caller (332,254 samples, 0.25%)</title><rect x="21.1864%" y="197" width="0.2455%" height="15" fill="rgb(232,182,51)"/><text x="21.4364%" y="207.50"></text></g><g><title>codegen_fn_attrs (595,927 samples, 0.44%)</title><rect x="21.0137%" y="213" width="0.4403%" height="15" fill="rgb(231,60,39)"/><text x="21.2637%" y="223.50"></text></g><g><title>check_mod_attrs (1,024,631 samples, 0.76%)</title><rect x="20.6971%" y="229" width="0.7571%" height="15" fill="rgb(208,69,12)"/><text x="20.9471%" y="239.50"></text></g><g><title>check_mod_const_bodies (183,302 samples, 0.14%)</title><rect x="21.4542%" y="229" width="0.1354%" height="15" fill="rgb(235,93,37)"/><text x="21.7042%" y="239.50"></text></g><g><title>lint_levels (493,175 samples, 0.36%)</title><rect x="21.9467%" y="213" width="0.3644%" height="15" fill="rgb(213,116,39)"/><text x="22.1967%" y="223.50"></text></g><g><title>lookup_deprecation_entry (272,053 samples, 0.20%)</title><rect x="22.3110%" y="213" width="0.2010%" height="15" fill="rgb(222,207,29)"/><text x="22.5610%" y="223.50"></text></g><g><title>stability_index (149,332 samples, 0.11%)</title><rect x="22.4017%" y="197" width="0.1103%" height="15" fill="rgb(206,96,30)"/><text x="22.6517%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (1,333,675 samples, 0.99%)</title><rect x="21.6845%" y="229" width="0.9854%" height="15" fill="rgb(218,138,4)"/><text x="21.9345%" y="239.50"></text></g><g><title>misc_checking_1 (2,799,412 samples, 2.07%)</title><rect x="20.6691%" y="245" width="2.0684%" height="15" fill="rgb(250,191,14)"/><text x="20.9191%" y="255.50">m..</text></g><g><title>liveness_and_intrinsic_checking (484,066 samples, 0.36%)</title><rect x="22.7389%" y="229" width="0.3577%" height="15" fill="rgb(239,60,40)"/><text x="22.9889%" y="239.50"></text></g><g><title>check_mod_liveness (393,796 samples, 0.29%)</title><rect x="22.8056%" y="213" width="0.2910%" height="15" fill="rgb(206,27,48)"/><text x="23.0556%" y="223.50"></text></g><g><title>type_uninhabited_from (138,692 samples, 0.10%)</title><rect x="22.9941%" y="197" width="0.1025%" height="15" fill="rgb(225,35,8)"/><text x="23.2441%" y="207.50"></text></g><g><title>misc_checking_2 (999,321 samples, 0.74%)</title><rect x="22.7375%" y="245" width="0.7384%" height="15" fill="rgb(250,213,24)"/><text x="22.9875%" y="255.50"></text></g><g><title>match_checking (513,345 samples, 0.38%)</title><rect x="23.0965%" y="229" width="0.3793%" height="15" fill="rgb(247,123,22)"/><text x="23.3465%" y="239.50"></text></g><g><title>check_match (485,035 samples, 0.36%)</title><rect x="23.1175%" y="213" width="0.3584%" height="15" fill="rgb(231,138,38)"/><text x="23.3675%" y="223.50"></text></g><g><title>check_private_in_public (190,992 samples, 0.14%)</title><rect x="23.4833%" y="229" width="0.1411%" height="15" fill="rgb(231,145,46)"/><text x="23.7333%" y="239.50"></text></g><g><title>death_checking (525,446 samples, 0.39%)</title><rect x="23.6244%" y="229" width="0.3882%" height="15" fill="rgb(251,118,11)"/><text x="23.8744%" y="239.50"></text></g><g><title>item_attrs (206,012 samples, 0.15%)</title><rect x="23.8604%" y="213" width="0.1522%" height="15" fill="rgb(217,147,25)"/><text x="24.1104%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (203,742 samples, 0.15%)</title><rect x="23.8621%" y="197" width="0.1505%" height="15" fill="rgb(247,81,37)"/><text x="24.1121%" y="207.50"></text></g><g><title>eval_to_const_value_raw (244,522 samples, 0.18%)</title><rect x="24.6235%" y="149" width="0.1807%" height="15" fill="rgb(209,12,38)"/><text x="24.8735%" y="159.50"></text></g><g><title>eval_to_const_value_raw (243,822 samples, 0.18%)</title><rect x="24.6240%" y="133" width="0.1801%" height="15" fill="rgb(227,1,9)"/><text x="24.8740%" y="143.50"></text></g><g><title>eval_to_allocation_raw (242,212 samples, 0.18%)</title><rect x="24.6252%" y="117" width="0.1790%" height="15" fill="rgb(248,47,43)"/><text x="24.8752%" y="127.50"></text></g><g><title>eval_to_allocation_raw (330,063 samples, 0.24%)</title><rect x="24.5606%" y="197" width="0.2439%" height="15" fill="rgb(221,10,30)"/><text x="24.8106%" y="207.50"></text></g><g><title>eval_to_allocation_raw (328,383 samples, 0.24%)</title><rect x="24.5618%" y="181" width="0.2426%" height="15" fill="rgb(210,229,1)"/><text x="24.8118%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (249,232 samples, 0.18%)</title><rect x="24.6203%" y="165" width="0.1841%" height="15" fill="rgb(222,148,37)"/><text x="24.8703%" y="175.50"></text></g><g><title>eval_to_const_value_raw (190,843 samples, 0.14%)</title><rect x="25.0136%" y="69" width="0.1410%" height="15" fill="rgb(234,67,33)"/><text x="25.2636%" y="79.50"></text></g><g><title>eval_to_const_value_raw (184,543 samples, 0.14%)</title><rect x="25.0183%" y="53" width="0.1364%" height="15" fill="rgb(247,98,35)"/><text x="25.2683%" y="63.50"></text></g><g><title>eval_to_allocation_raw (177,782 samples, 0.13%)</title><rect x="25.0233%" y="37" width="0.1314%" height="15" fill="rgb(247,138,52)"/><text x="25.2733%" y="47.50"></text></g><g><title>eval_to_const_value_raw (274,273 samples, 0.20%)</title><rect x="24.9592%" y="133" width="0.2026%" height="15" fill="rgb(213,79,30)"/><text x="25.2092%" y="143.50"></text></g><g><title>eval_to_const_value_raw (272,673 samples, 0.20%)</title><rect x="24.9603%" y="117" width="0.2015%" height="15" fill="rgb(246,177,23)"/><text x="25.2103%" y="127.50"></text></g><g><title>eval_to_allocation_raw (271,153 samples, 0.20%)</title><rect x="24.9615%" y="101" width="0.2003%" height="15" fill="rgb(230,62,27)"/><text x="25.2115%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (213,373 samples, 0.16%)</title><rect x="25.0042%" y="85" width="0.1577%" height="15" fill="rgb(216,154,8)"/><text x="25.2542%" y="95.50"></text></g><g><title>eval_to_const_value_raw (490,014 samples, 0.36%)</title><rect x="24.8045%" y="197" width="0.3620%" height="15" fill="rgb(244,35,45)"/><text x="25.0545%" y="207.50"></text></g><g><title>eval_to_const_value_raw (486,484 samples, 0.36%)</title><rect x="24.8071%" y="181" width="0.3594%" height="15" fill="rgb(251,115,12)"/><text x="25.0571%" y="191.50"></text></g><g><title>eval_to_allocation_raw (472,914 samples, 0.35%)</title><rect x="24.8171%" y="165" width="0.3494%" height="15" fill="rgb(240,54,50)"/><text x="25.0671%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (289,223 samples, 0.21%)</title><rect x="24.9528%" y="149" width="0.2137%" height="15" fill="rgb(233,84,52)"/><text x="25.2028%" y="159.50"></text></g><g><title>param_env (221,532 samples, 0.16%)</title><rect x="25.1665%" y="197" width="0.1637%" height="15" fill="rgb(207,117,47)"/><text x="25.4165%" y="207.50"></text></g><g><title>crate_lints (2,869,621 samples, 2.12%)</title><rect x="24.0140%" y="213" width="2.1202%" height="15" fill="rgb(249,43,39)"/><text x="24.2640%" y="223.50">c..</text></g><g><title>type_of (1,078,050 samples, 0.80%)</title><rect x="25.3377%" y="197" width="0.7965%" height="15" fill="rgb(209,38,44)"/><text x="25.5877%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (844,296 samples, 0.62%)</title><rect x="25.5104%" y="181" width="0.6238%" height="15" fill="rgb(236,212,23)"/><text x="25.7604%" y="191.50"></text></g><g><title>lint_checking (3,269,676 samples, 2.42%)</title><rect x="24.0126%" y="229" width="2.4158%" height="15" fill="rgb(242,79,21)"/><text x="24.2626%" y="239.50">li..</text></g><g><title>module_lints (398,175 samples, 0.29%)</title><rect x="26.1343%" y="213" width="0.2942%" height="15" fill="rgb(211,96,35)"/><text x="26.3843%" y="223.50"></text></g><g><title>lint_mod (394,595 samples, 0.29%)</title><rect x="26.1369%" y="197" width="0.2915%" height="15" fill="rgb(253,215,40)"/><text x="26.3869%" y="207.50"></text></g><g><title>privacy_access_levels (172,702 samples, 0.13%)</title><rect x="26.4284%" y="229" width="0.1276%" height="15" fill="rgb(211,81,21)"/><text x="26.6784%" y="239.50"></text></g><g><title>privacy_checking_modules (798,009 samples, 0.59%)</title><rect x="26.5560%" y="229" width="0.5896%" height="15" fill="rgb(208,190,38)"/><text x="26.8060%" y="239.50"></text></g><g><title>check_mod_privacy (795,529 samples, 0.59%)</title><rect x="26.5579%" y="213" width="0.5878%" height="15" fill="rgb(235,213,38)"/><text x="26.8079%" y="223.50"></text></g><g><title>misc_checking_3 (4,980,375 samples, 3.68%)</title><rect x="23.4758%" y="245" width="3.6798%" height="15" fill="rgb(237,122,38)"/><text x="23.7258%" y="255.50">misc..</text></g><g><title>impl_trait_ref (158,142 samples, 0.12%)</title><rect x="27.3429%" y="149" width="0.1168%" height="15" fill="rgb(244,218,35)"/><text x="27.5929%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (139,671 samples, 0.10%)</title><rect x="27.3566%" y="133" width="0.1032%" height="15" fill="rgb(240,68,47)"/><text x="27.6066%" y="143.50"></text></g><g><title>adt_destructor (316,714 samples, 0.23%)</title><rect x="27.2449%" y="197" width="0.2340%" height="15" fill="rgb(210,16,53)"/><text x="27.4949%" y="207.50"></text></g><g><title>coherent_trait (308,543 samples, 0.23%)</title><rect x="27.2510%" y="181" width="0.2280%" height="15" fill="rgb(235,124,12)"/><text x="27.5010%" y="191.50"></text></g><g><title>specialization_graph_of (306,743 samples, 0.23%)</title><rect x="27.2523%" y="165" width="0.2266%" height="15" fill="rgb(224,169,11)"/><text x="27.5023%" y="175.50"></text></g><g><title>is_copy_raw (152,141 samples, 0.11%)</title><rect x="27.4789%" y="197" width="0.1124%" height="15" fill="rgb(250,166,2)"/><text x="27.7289%" y="207.50"></text></g><g><title>impl_parent (2,614,767 samples, 1.93%)</title><rect x="30.8400%" y="181" width="1.9319%" height="15" fill="rgb(242,216,29)"/><text x="31.0900%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,483,690 samples, 1.10%)</title><rect x="31.6757%" y="165" width="1.0962%" height="15" fill="rgb(230,116,27)"/><text x="31.9257%" y="175.50"></text></g><g><title>impl_trait_ref (5,435,873 samples, 4.02%)</title><rect x="32.7719%" y="181" width="4.0163%" height="15" fill="rgb(228,99,48)"/><text x="33.0219%" y="191.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,141,031 samples, 3.06%)</title><rect x="33.7286%" y="165" width="3.0596%" height="15" fill="rgb(253,11,6)"/><text x="33.9786%" y="175.50">met..</text></g><g><title>coherent_trait (13,892,675 samples, 10.26%)</title><rect x="27.2183%" y="213" width="10.2646%" height="15" fill="rgb(247,143,39)"/><text x="27.4683%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (13,314,889 samples, 9.84%)</title><rect x="27.6452%" y="197" width="9.8377%" height="15" fill="rgb(236,97,10)"/><text x="27.8952%" y="207.50">specialization..</text></g><g><title>trait_impls_of (938,201 samples, 0.69%)</title><rect x="36.7898%" y="181" width="0.6932%" height="15" fill="rgb(233,208,19)"/><text x="37.0398%" y="191.50"></text></g><g><title>implementations_of_trait (249,993 samples, 0.18%)</title><rect x="37.2982%" y="165" width="0.1847%" height="15" fill="rgb(216,164,2)"/><text x="37.5482%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (203,283 samples, 0.15%)</title><rect x="37.3327%" y="149" width="0.1502%" height="15" fill="rgb(220,129,5)"/><text x="37.5827%" y="159.50"></text></g><g><title>coherence_checking (13,960,126 samples, 10.31%)</title><rect x="27.2050%" y="229" width="10.3145%" height="15" fill="rgb(242,17,10)"/><text x="27.4550%" y="239.50">coherence_check..</text></g><g><title>adt_def (151,464 samples, 0.11%)</title><rect x="47.9390%" y="165" width="0.1119%" height="15" fill="rgb(242,107,0)"/><text x="48.1890%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (147,884 samples, 0.11%)</title><rect x="47.9416%" y="149" width="0.1093%" height="15" fill="rgb(251,28,31)"/><text x="48.1916%" y="159.50"></text></g><g><title>adt_sized_constraint (204,204 samples, 0.15%)</title><rect x="47.9268%" y="181" width="0.1509%" height="15" fill="rgb(233,223,10)"/><text x="48.1768%" y="191.50"></text></g><g><title>associated_item (484,622 samples, 0.36%)</title><rect x="48.2163%" y="165" width="0.3581%" height="15" fill="rgb(215,21,27)"/><text x="48.4663%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (384,051 samples, 0.28%)</title><rect x="48.2906%" y="149" width="0.2838%" height="15" fill="rgb(232,23,21)"/><text x="48.5406%" y="159.50"></text></g><g><title>associated_items (702,068 samples, 0.52%)</title><rect x="48.0835%" y="181" width="0.5187%" height="15" fill="rgb(244,5,23)"/><text x="48.3335%" y="191.50"></text></g><g><title>dropck_outlives (502,803 samples, 0.37%)</title><rect x="48.6799%" y="181" width="0.3715%" height="15" fill="rgb(226,81,46)"/><text x="48.9299%" y="191.50"></text></g><g><title>adt_dtorck_constraint (261,431 samples, 0.19%)</title><rect x="48.8582%" y="165" width="0.1932%" height="15" fill="rgb(247,70,30)"/><text x="49.1082%" y="175.50"></text></g><g><title>impl_trait_ref (261,382 samples, 0.19%)</title><rect x="50.0720%" y="165" width="0.1931%" height="15" fill="rgb(212,68,19)"/><text x="50.3220%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (251,492 samples, 0.19%)</title><rect x="50.0793%" y="149" width="0.1858%" height="15" fill="rgb(240,187,13)"/><text x="50.3293%" y="159.50"></text></g><g><title>predicates_of (190,642 samples, 0.14%)</title><rect x="50.2781%" y="165" width="0.1409%" height="15" fill="rgb(223,113,26)"/><text x="50.5281%" y="175.50"></text></g><g><title>specializes (209,202 samples, 0.15%)</title><rect x="50.4189%" y="165" width="0.1546%" height="15" fill="rgb(206,192,2)"/><text x="50.6689%" y="175.50"></text></g><g><title>trait_impls_of (380,637 samples, 0.28%)</title><rect x="50.5908%" y="165" width="0.2812%" height="15" fill="rgb(241,108,4)"/><text x="50.8408%" y="175.50"></text></g><g><title>implementations_of_trait (156,102 samples, 0.12%)</title><rect x="50.7567%" y="149" width="0.1153%" height="15" fill="rgb(247,173,49)"/><text x="51.0067%" y="159.50"></text></g><g><title>evaluate_obligation (2,466,397 samples, 1.82%)</title><rect x="49.0514%" y="181" width="1.8223%" height="15" fill="rgb(224,114,35)"/><text x="49.3014%" y="191.50">e..</text></g><g><title>fn_sig (178,352 samples, 0.13%)</title><rect x="50.8980%" y="181" width="0.1318%" height="15" fill="rgb(245,159,27)"/><text x="51.1480%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (155,442 samples, 0.11%)</title><rect x="50.9150%" y="165" width="0.1148%" height="15" fill="rgb(245,172,44)"/><text x="51.1650%" y="175.50"></text></g><g><title>generics_of (193,842 samples, 0.14%)</title><rect x="51.0298%" y="181" width="0.1432%" height="15" fill="rgb(236,23,11)"/><text x="51.2798%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (146,070 samples, 0.11%)</title><rect x="51.0651%" y="165" width="0.1079%" height="15" fill="rgb(205,117,38)"/><text x="51.3151%" y="175.50"></text></g><g><title>impl_item_implementor_ids (135,653 samples, 0.10%)</title><rect x="51.1738%" y="181" width="0.1002%" height="15" fill="rgb(237,72,25)"/><text x="51.4238%" y="191.50"></text></g><g><title>item_attrs (346,766 samples, 0.26%)</title><rect x="51.3674%" y="181" width="0.2562%" height="15" fill="rgb(244,70,9)"/><text x="51.6174%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (335,226 samples, 0.25%)</title><rect x="51.3759%" y="165" width="0.2477%" height="15" fill="rgb(217,125,39)"/><text x="51.6259%" y="175.50"></text></g><g><title>method_autoderef_steps (441,245 samples, 0.33%)</title><rect x="51.6846%" y="181" width="0.3260%" height="15" fill="rgb(235,36,10)"/><text x="51.9346%" y="191.50"></text></g><g><title>evaluate_obligation (208,632 samples, 0.15%)</title><rect x="51.8565%" y="165" width="0.1541%" height="15" fill="rgb(251,123,47)"/><text x="52.1065%" y="175.50"></text></g><g><title>explicit_predicates_of (164,280 samples, 0.12%)</title><rect x="52.3420%" y="149" width="0.1214%" height="15" fill="rgb(221,13,13)"/><text x="52.5920%" y="159.50"></text></g><g><title>predicates_of (512,521 samples, 0.38%)</title><rect x="52.1328%" y="181" width="0.3787%" height="15" fill="rgb(238,131,9)"/><text x="52.3828%" y="191.50"></text></g><g><title>predicates_defined_on (358,645 samples, 0.26%)</title><rect x="52.2465%" y="165" width="0.2650%" height="15" fill="rgb(211,50,8)"/><text x="52.4965%" y="175.50"></text></g><g><title>type_of (145,851 samples, 0.11%)</title><rect x="52.5204%" y="181" width="0.1078%" height="15" fill="rgb(245,182,24)"/><text x="52.7704%" y="191.50"></text></g><g><title>associated_item (182,691 samples, 0.13%)</title><rect x="55.6533%" y="149" width="0.1350%" height="15" fill="rgb(242,14,37)"/><text x="55.9033%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (146,441 samples, 0.11%)</title><rect x="55.6801%" y="133" width="0.1082%" height="15" fill="rgb(246,228,12)"/><text x="55.9301%" y="143.50"></text></g><g><title>associated_items (262,593 samples, 0.19%)</title><rect x="55.6029%" y="165" width="0.1940%" height="15" fill="rgb(213,55,15)"/><text x="55.8529%" y="175.50"></text></g><g><title>dropck_outlives (155,341 samples, 0.11%)</title><rect x="55.8128%" y="165" width="0.1148%" height="15" fill="rgb(209,9,3)"/><text x="56.0628%" y="175.50"></text></g><g><title>evaluate_obligation (597,985 samples, 0.44%)</title><rect x="55.9276%" y="165" width="0.4418%" height="15" fill="rgb(230,59,30)"/><text x="56.1776%" y="175.50"></text></g><g><title>is_copy_raw (166,891 samples, 0.12%)</title><rect x="56.4843%" y="165" width="0.1233%" height="15" fill="rgb(209,121,21)"/><text x="56.7343%" y="175.50"></text></g><g><title>method_autoderef_steps (184,503 samples, 0.14%)</title><rect x="56.6441%" y="165" width="0.1363%" height="15" fill="rgb(220,109,13)"/><text x="56.8941%" y="175.50"></text></g><g><title>typeck (5,800,434 samples, 4.29%)</title><rect x="52.6282%" y="181" width="4.2857%" height="15" fill="rgb(232,18,1)"/><text x="52.8782%" y="191.50">typeck</text></g><g><title>item_bodies_checking (26,286,893 samples, 19.42%)</title><rect x="37.5394%" y="229" width="19.4221%" height="15" fill="rgb(215,41,42)"/><text x="37.7894%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (26,283,253 samples, 19.42%)</title><rect x="37.5420%" y="213" width="19.4195%" height="15" fill="rgb(224,123,36)"/><text x="37.7920%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (26,213,772 samples, 19.37%)</title><rect x="37.5934%" y="197" width="19.3681%" height="15" fill="rgb(240,125,3)"/><text x="37.8434%" y="207.50">typeck</text></g><g><title>layout_of (190,472 samples, 0.14%)</title><rect x="57.5398%" y="181" width="0.1407%" height="15" fill="rgb(205,98,50)"/><text x="57.7898%" y="191.50"></text></g><g><title>layout_of (185,312 samples, 0.14%)</title><rect x="57.5436%" y="165" width="0.1369%" height="15" fill="rgb(205,185,37)"/><text x="57.7936%" y="175.50"></text></g><g><title>layout_of (167,832 samples, 0.12%)</title><rect x="57.5565%" y="149" width="0.1240%" height="15" fill="rgb(238,207,15)"/><text x="57.8065%" y="159.50"></text></g><g><title>layout_of (212,283 samples, 0.16%)</title><rect x="57.5265%" y="197" width="0.1568%" height="15" fill="rgb(213,199,42)"/><text x="57.7765%" y="207.50"></text></g><g><title>adt_dtorck_constraint (161,151 samples, 0.12%)</title><rect x="58.0959%" y="149" width="0.1191%" height="15" fill="rgb(235,201,11)"/><text x="58.3459%" y="159.50"></text></g><g><title>dropck_outlives (310,293 samples, 0.23%)</title><rect x="57.9973%" y="181" width="0.2293%" height="15" fill="rgb(207,46,11)"/><text x="58.2473%" y="191.50"></text></g><g><title>adt_dtorck_constraint (285,832 samples, 0.21%)</title><rect x="58.0153%" y="165" width="0.2112%" height="15" fill="rgb(241,35,35)"/><text x="58.2653%" y="175.50"></text></g><g><title>item_types_checking (1,798,390 samples, 1.33%)</title><rect x="56.9615%" y="229" width="1.3287%" height="15" fill="rgb(243,32,47)"/><text x="57.2115%" y="239.50"></text></g><g><title>check_mod_item_types (1,795,160 samples, 1.33%)</title><rect x="56.9639%" y="213" width="1.3264%" height="15" fill="rgb(247,202,23)"/><text x="57.2139%" y="223.50"></text></g><g><title>typeck (755,098 samples, 0.56%)</title><rect x="57.7323%" y="197" width="0.5579%" height="15" fill="rgb(219,102,11)"/><text x="57.9823%" y="207.50"></text></g><g><title>fn_sig (357,265 samples, 0.26%)</title><rect x="58.5725%" y="197" width="0.2640%" height="15" fill="rgb(243,110,44)"/><text x="58.8225%" y="207.50"></text></g><g><title>named_region_map (246,021 samples, 0.18%)</title><rect x="58.9781%" y="181" width="0.1818%" height="15" fill="rgb(222,74,54)"/><text x="59.2281%" y="191.50"></text></g><g><title>resolve_lifetimes (223,951 samples, 0.17%)</title><rect x="58.9944%" y="165" width="0.1655%" height="15" fill="rgb(216,99,12)"/><text x="59.2444%" y="175.50"></text></g><g><title>generics_of (459,255 samples, 0.34%)</title><rect x="58.8365%" y="197" width="0.3393%" height="15" fill="rgb(226,22,26)"/><text x="59.0865%" y="207.50"></text></g><g><title>late_bound_vars_map (138,400 samples, 0.10%)</title><rect x="59.5901%" y="149" width="0.1023%" height="15" fill="rgb(217,163,10)"/><text x="59.8401%" y="159.50"></text></g><g><title>explicit_predicates_of (458,963 samples, 0.34%)</title><rect x="59.3675%" y="165" width="0.3391%" height="15" fill="rgb(213,25,53)"/><text x="59.6175%" y="175.50"></text></g><g><title>predicates_of (1,786,760 samples, 1.32%)</title><rect x="59.2276%" y="197" width="1.3202%" height="15" fill="rgb(252,105,26)"/><text x="59.4776%" y="207.50"></text></g><g><title>predicates_defined_on (1,715,969 samples, 1.27%)</title><rect x="59.2799%" y="181" width="1.2678%" height="15" fill="rgb(220,39,43)"/><text x="59.5299%" y="191.50"></text></g><g><title>inferred_outlives_of (1,138,343 samples, 0.84%)</title><rect x="59.7066%" y="165" width="0.8411%" height="15" fill="rgb(229,68,48)"/><text x="59.9566%" y="175.50"></text></g><g><title>inferred_outlives_crate (1,111,893 samples, 0.82%)</title><rect x="59.7262%" y="149" width="0.8215%" height="15" fill="rgb(252,8,32)"/><text x="59.9762%" y="159.50"></text></g><g><title>type_of (802,827 samples, 0.59%)</title><rect x="59.9545%" y="133" width="0.5932%" height="15" fill="rgb(223,20,43)"/><text x="60.2045%" y="143.50"></text></g><g><title>type_of (528,726 samples, 0.39%)</title><rect x="60.1571%" y="117" width="0.3907%" height="15" fill="rgb(229,81,49)"/><text x="60.4071%" y="127.50"></text></g><g><title>type_collecting (3,244,726 samples, 2.40%)</title><rect x="58.2924%" y="229" width="2.3974%" height="15" fill="rgb(236,28,36)"/><text x="58.5424%" y="239.50">ty..</text></g><g><title>collect_mod_item_types (3,235,406 samples, 2.39%)</title><rect x="58.2993%" y="213" width="2.3905%" height="15" fill="rgb(249,185,26)"/><text x="58.5493%" y="223.50">co..</text></g><g><title>type_of (192,271 samples, 0.14%)</title><rect x="60.5477%" y="197" width="0.1421%" height="15" fill="rgb(249,174,33)"/><text x="60.7977%" y="207.50"></text></g><g><title>adt_sized_constraint (142,582 samples, 0.11%)</title><rect x="61.8204%" y="165" width="0.1053%" height="15" fill="rgb(233,201,37)"/><text x="62.0704%" y="175.50"></text></g><g><title>adt_sized_constraint (189,153 samples, 0.14%)</title><rect x="61.7864%" y="181" width="0.1398%" height="15" fill="rgb(221,78,26)"/><text x="62.0364%" y="191.50"></text></g><g><title>evaluate_obligation (500,976 samples, 0.37%)</title><rect x="61.5786%" y="197" width="0.3701%" height="15" fill="rgb(250,127,30)"/><text x="61.8286%" y="207.50"></text></g><g><title>implied_outlives_bounds (166,653 samples, 0.12%)</title><rect x="61.9487%" y="197" width="0.1231%" height="15" fill="rgb(230,49,44)"/><text x="62.1987%" y="207.50"></text></g><g><title>param_env (153,243 samples, 0.11%)</title><rect x="62.0719%" y="197" width="0.1132%" height="15" fill="rgb(229,67,23)"/><text x="62.3219%" y="207.50"></text></g><g><title>region_scope_tree (249,962 samples, 0.18%)</title><rect x="62.2044%" y="197" width="0.1847%" height="15" fill="rgb(249,83,47)"/><text x="62.4544%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,145,200 samples, 1.58%)</title><rect x="60.8187%" y="213" width="1.5850%" height="15" fill="rgb(215,43,3)"/><text x="61.0687%" y="223.50"></text></g><g><title>adt_sized_constraint (136,781 samples, 0.10%)</title><rect x="63.3785%" y="197" width="0.1011%" height="15" fill="rgb(238,154,13)"/><text x="63.6285%" y="207.50"></text></g><g><title>adt_def (200,023 samples, 0.15%)</title><rect x="63.6841%" y="165" width="0.1478%" height="15" fill="rgb(219,56,2)"/><text x="63.9341%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (198,262 samples, 0.15%)</title><rect x="63.6854%" y="149" width="0.1465%" height="15" fill="rgb(233,0,4)"/><text x="63.9354%" y="159.50"></text></g><g><title>item_attrs (175,102 samples, 0.13%)</title><rect x="63.7025%" y="133" width="0.1294%" height="15" fill="rgb(235,30,7)"/><text x="63.9525%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (173,071 samples, 0.13%)</title><rect x="63.7041%" y="117" width="0.1279%" height="15" fill="rgb(250,79,13)"/><text x="63.9541%" y="127.50"></text></g><g><title>adt_def (174,133 samples, 0.13%)</title><rect x="63.8353%" y="149" width="0.1287%" height="15" fill="rgb(211,146,34)"/><text x="64.0853%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (173,493 samples, 0.13%)</title><rect x="63.8357%" y="133" width="0.1282%" height="15" fill="rgb(228,22,38)"/><text x="64.0857%" y="143.50"></text></g><g><title>adt_sized_constraint (190,843 samples, 0.14%)</title><rect x="63.8319%" y="165" width="0.1410%" height="15" fill="rgb(235,168,5)"/><text x="64.0819%" y="175.50"></text></g><g><title>adt_sized_constraint (413,447 samples, 0.31%)</title><rect x="63.6764%" y="181" width="0.3055%" height="15" fill="rgb(221,155,16)"/><text x="63.9264%" y="191.50"></text></g><g><title>evaluate_obligation (708,808 samples, 0.52%)</title><rect x="63.4830%" y="197" width="0.5237%" height="15" fill="rgb(215,215,53)"/><text x="63.7330%" y="207.50"></text></g><g><title>object_safety_violations (359,114 samples, 0.27%)</title><rect x="64.1008%" y="197" width="0.2653%" height="15" fill="rgb(223,4,10)"/><text x="64.3508%" y="207.50"></text></g><g><title>param_env (287,043 samples, 0.21%)</title><rect x="64.3665%" y="197" width="0.2121%" height="15" fill="rgb(234,103,6)"/><text x="64.6165%" y="207.50"></text></g><g><title>analysis (86,916,018 samples, 64.22%)</title><rect x="0.6251%" y="261" width="64.2182%" height="15" fill="rgb(227,97,0)"/><text x="0.8751%" y="271.50">analysis</text></g><g><title>type_check_crate (51,008,307 samples, 37.69%)</title><rect x="27.1556%" y="245" width="37.6876%" height="15" fill="rgb(234,150,53)"/><text x="27.4056%" y="255.50">type_check_crate</text></g><g><title>wf_checking (5,616,852 samples, 4.15%)</title><rect x="60.6932%" y="229" width="4.1500%" height="15" fill="rgb(228,201,54)"/><text x="60.9432%" y="239.50">wf_ch..</text></g><g><title>check_item_well_formed (3,301,801 samples, 2.44%)</title><rect x="62.4037%" y="213" width="2.4395%" height="15" fill="rgb(222,22,37)"/><text x="62.6537%" y="223.50">ch..</text></g><g><title>codegen_crate (374,154 samples, 0.28%)</title><rect x="64.8516%" y="261" width="0.2764%" height="15" fill="rgb(237,53,32)"/><text x="65.1016%" y="271.50"></text></g><g><title>AST_validation (320,764 samples, 0.24%)</title><rect x="65.2804%" y="245" width="0.2370%" height="15" fill="rgb(233,25,53)"/><text x="65.5304%" y="255.50"></text></g><g><title>metadata_load_macro (251,395 samples, 0.19%)</title><rect x="81.5789%" y="213" width="0.1857%" height="15" fill="rgb(210,40,34)"/><text x="81.8289%" y="223.50"></text></g><g><title>metadata_register_crate (2,299,395 samples, 1.70%)</title><rect x="81.7646%" y="213" width="1.6989%" height="15" fill="rgb(241,220,44)"/><text x="82.0146%" y="223.50"></text></g><g><title>metadata_register_crate (850,538 samples, 0.63%)</title><rect x="82.8351%" y="197" width="0.6284%" height="15" fill="rgb(235,28,35)"/><text x="83.0851%" y="207.50"></text></g><g><title>macro_expand_crate (24,187,580 samples, 17.87%)</title><rect x="65.6589%" y="245" width="17.8711%" height="15" fill="rgb(210,56,17)"/><text x="65.9089%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (24,165,900 samples, 17.86%)</title><rect x="65.6749%" y="229" width="17.8550%" height="15" fill="rgb(224,130,29)"/><text x="65.9249%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (729,448 samples, 0.54%)</title><rect x="83.5336%" y="245" width="0.5390%" height="15" fill="rgb(235,212,8)"/><text x="83.7836%" y="255.50"></text></g><g><title>finalize_macro_resolutions (256,713 samples, 0.19%)</title><rect x="84.1519%" y="229" width="0.1897%" height="15" fill="rgb(223,33,50)"/><text x="84.4019%" y="239.50"></text></g><g><title>late_resolve_crate (3,436,398 samples, 2.54%)</title><rect x="84.3415%" y="229" width="2.5390%" height="15" fill="rgb(219,149,13)"/><text x="84.5915%" y="239.50">la..</text></g><g><title>configure_and_expand (29,623,159 samples, 21.89%)</title><rect x="65.1281%" y="261" width="21.8872%" height="15" fill="rgb(250,156,29)"/><text x="65.3781%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (3,982,824 samples, 2.94%)</title><rect x="84.0725%" y="245" width="2.9427%" height="15" fill="rgb(216,193,19)"/><text x="84.3225%" y="255.50">re..</text></g><g><title>drop_ast (308,353 samples, 0.23%)</title><rect x="87.0152%" y="261" width="0.2278%" height="15" fill="rgb(216,135,14)"/><text x="87.2652%" y="271.50"></text></g><g><title>early_lint_checks (940,231 samples, 0.69%)</title><rect x="87.2550%" y="261" width="0.6947%" height="15" fill="rgb(241,47,5)"/><text x="87.5050%" y="271.50"></text></g><g><title>free_global_ctxt (3,687,851 samples, 2.72%)</title><rect x="87.9497%" y="261" width="2.7248%" height="15" fill="rgb(233,42,35)"/><text x="88.1997%" y="271.50">fr..</text></g><g><title>generate_crate_metadata (1,018,871 samples, 0.75%)</title><rect x="90.6745%" y="261" width="0.7528%" height="15" fill="rgb(231,13,6)"/><text x="90.9245%" y="271.50"></text></g><g><title>hir_lowering (4,886,084 samples, 3.61%)</title><rect x="91.4273%" y="261" width="3.6101%" height="15" fill="rgb(207,181,40)"/><text x="91.6773%" y="271.50">hir_..</text></g><g><title>parse_crate (5,049,696 samples, 3.73%)</title><rect x="95.0773%" y="261" width="3.7310%" height="15" fill="rgb(254,173,49)"/><text x="95.3273%" y="271.50">pars..</text></g><g><title>prepare_outputs (298,764 samples, 0.22%)</title><rect x="98.8138%" y="261" width="0.2207%" height="15" fill="rgb(221,1,38)"/><text x="99.0638%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (826,850 samples, 0.61%)</title><rect x="99.0346%" y="261" width="0.6109%" height="15" fill="rgb(206,124,46)"/><text x="99.2846%" y="271.50"></text></g><g><title>all (135,344,928 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,21,11)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (135,344,928 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(222,201,40)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (337,474 samples, 0.25%)</title><rect x="99.7507%" y="261" width="0.2493%" height="15" fill="rgb(235,61,29)"/><text x="100.0007%" y="271.50"></text></g></svg></svg>