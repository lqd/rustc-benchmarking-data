<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (165,543 samples, 0.17%)</title><rect x="6.5157%" y="101" width="0.1736%" height="15" fill="rgb(227,0,7)"/><text x="6.7657%" y="111.50"></text></g><g><title>item_attrs (112,661 samples, 0.12%)</title><rect x="6.9704%" y="69" width="0.1182%" height="15" fill="rgb(217,0,24)"/><text x="7.2204%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,181 samples, 0.11%)</title><rect x="6.9740%" y="53" width="0.1145%" height="15" fill="rgb(221,193,54)"/><text x="7.2240%" y="63.50"></text></g><g><title>codegen_fn_attrs (182,463 samples, 0.19%)</title><rect x="6.9099%" y="85" width="0.1914%" height="15" fill="rgb(248,212,6)"/><text x="7.1599%" y="95.50"></text></g><g><title>is_copy_raw (258,361 samples, 0.27%)</title><rect x="8.2158%" y="69" width="0.2710%" height="15" fill="rgb(208,68,35)"/><text x="8.4658%" y="79.50"></text></g><g><title>evaluate_obligation (211,111 samples, 0.22%)</title><rect x="8.2653%" y="53" width="0.2214%" height="15" fill="rgb(232,128,0)"/><text x="8.5153%" y="63.50"></text></g><g><title>adt_drop_tys (111,021 samples, 0.12%)</title><rect x="8.5369%" y="53" width="0.1164%" height="15" fill="rgb(207,160,47)"/><text x="8.7869%" y="63.50"></text></g><g><title>needs_drop_raw (508,916 samples, 0.53%)</title><rect x="8.4919%" y="69" width="0.5338%" height="15" fill="rgb(228,23,34)"/><text x="8.7419%" y="79.50"></text></g><g><title>is_copy_raw (354,962 samples, 0.37%)</title><rect x="8.6534%" y="53" width="0.3723%" height="15" fill="rgb(218,30,26)"/><text x="8.9034%" y="63.50"></text></g><g><title>evaluate_obligation (298,451 samples, 0.31%)</title><rect x="8.7127%" y="37" width="0.3130%" height="15" fill="rgb(220,122,19)"/><text x="8.9627%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (119,082 samples, 0.12%)</title><rect x="9.1491%" y="53" width="0.1249%" height="15" fill="rgb(250,228,42)"/><text x="9.3991%" y="63.50"></text></g><g><title>specialization_graph_of (127,070 samples, 0.13%)</title><rect x="9.2956%" y="53" width="0.1333%" height="15" fill="rgb(240,193,28)"/><text x="9.5456%" y="63.50"></text></g><g><title>resolve_instance (417,063 samples, 0.44%)</title><rect x="9.0263%" y="69" width="0.4374%" height="15" fill="rgb(216,20,37)"/><text x="9.2763%" y="79.50"></text></g><g><title>thir_body (355,664 samples, 0.37%)</title><rect x="9.4764%" y="69" width="0.3730%" height="15" fill="rgb(206,188,39)"/><text x="9.7264%" y="79.50"></text></g><g><title>mir_const (3,614,213 samples, 3.79%)</title><rect x="6.0695%" y="117" width="3.7907%" height="15" fill="rgb(217,207,13)"/><text x="6.3195%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (3,023,223 samples, 3.17%)</title><rect x="6.6894%" y="101" width="3.1708%" height="15" fill="rgb(231,73,38)"/><text x="6.9394%" y="111.50">uns..</text></g><g><title>mir_built (2,630,507 samples, 2.76%)</title><rect x="7.1013%" y="85" width="2.7589%" height="15" fill="rgb(225,20,46)"/><text x="7.3513%" y="95.50">mi..</text></g><g><title>mir_promoted (4,086,770 samples, 4.29%)</title><rect x="5.6953%" y="133" width="4.2863%" height="15" fill="rgb(210,31,41)"/><text x="5.9453%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (115,753 samples, 0.12%)</title><rect x="9.8602%" y="117" width="0.1214%" height="15" fill="rgb(221,200,47)"/><text x="10.1102%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (242,033 samples, 0.25%)</title><rect x="9.9826%" y="133" width="0.2538%" height="15" fill="rgb(226,26,5)"/><text x="10.2326%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (156,232 samples, 0.16%)</title><rect x="10.2365%" y="133" width="0.1639%" height="15" fill="rgb(249,33,26)"/><text x="10.4865%" y="143.50"></text></g><g><title>type_op_prove_predicate (823,470 samples, 0.86%)</title><rect x="10.4476%" y="133" width="0.8637%" height="15" fill="rgb(235,183,28)"/><text x="10.6976%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,687,159 samples, 10.16%)</title><rect x="1.1527%" y="165" width="10.1601%" height="15" fill="rgb(221,5,38)"/><text x="1.4027%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (9,630,519 samples, 10.10%)</title><rect x="1.2121%" y="149" width="10.1007%" height="15" fill="rgb(247,18,42)"/><text x="1.4621%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (132,461 samples, 0.14%)</title><rect x="11.3128%" y="165" width="0.1389%" height="15" fill="rgb(241,131,45)"/><text x="11.5628%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (105,541 samples, 0.11%)</title><rect x="11.3410%" y="149" width="0.1107%" height="15" fill="rgb(249,31,29)"/><text x="11.5910%" y="159.50"></text></g><g><title>hir_module_items (178,762 samples, 0.19%)</title><rect x="11.4517%" y="165" width="0.1875%" height="15" fill="rgb(225,111,53)"/><text x="11.7017%" y="175.50"></text></g><g><title>get_lang_items (111,801 samples, 0.12%)</title><rect x="12.0142%" y="117" width="0.1173%" height="15" fill="rgb(238,160,17)"/><text x="12.2642%" y="127.50"></text></g><g><title>should_inherit_track_caller (160,542 samples, 0.17%)</title><rect x="12.1315%" y="117" width="0.1684%" height="15" fill="rgb(214,148,48)"/><text x="12.3815%" y="127.50"></text></g><g><title>codegen_fn_attrs (426,244 samples, 0.45%)</title><rect x="11.8966%" y="133" width="0.4471%" height="15" fill="rgb(232,36,49)"/><text x="12.1466%" y="143.50"></text></g><g><title>check_mod_attrs (649,837 samples, 0.68%)</title><rect x="11.6624%" y="149" width="0.6816%" height="15" fill="rgb(209,103,24)"/><text x="11.9124%" y="159.50"></text></g><g><title>check_mod_const_bodies (121,311 samples, 0.13%)</title><rect x="12.3439%" y="149" width="0.1272%" height="15" fill="rgb(229,88,8)"/><text x="12.5939%" y="159.50"></text></g><g><title>lookup_stability (137,181 samples, 0.14%)</title><rect x="12.7416%" y="133" width="0.1439%" height="15" fill="rgb(213,181,19)"/><text x="12.9916%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (357,015 samples, 0.37%)</title><rect x="12.5354%" y="149" width="0.3744%" height="15" fill="rgb(254,191,54)"/><text x="12.7854%" y="159.50"></text></g><g><title>misc_checking_1 (1,278,794 samples, 1.34%)</title><rect x="11.6395%" y="165" width="1.3412%" height="15" fill="rgb(241,83,37)"/><text x="11.8895%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (208,342 samples, 0.22%)</title><rect x="12.9825%" y="149" width="0.2185%" height="15" fill="rgb(233,36,39)"/><text x="13.2325%" y="159.50"></text></g><g><title>check_mod_liveness (170,652 samples, 0.18%)</title><rect x="13.0220%" y="133" width="0.1790%" height="15" fill="rgb(226,3,54)"/><text x="13.2720%" y="143.50"></text></g><g><title>misc_checking_2 (528,026 samples, 0.55%)</title><rect x="12.9808%" y="165" width="0.5538%" height="15" fill="rgb(245,192,40)"/><text x="13.2308%" y="175.50"></text></g><g><title>match_checking (318,084 samples, 0.33%)</title><rect x="13.2010%" y="149" width="0.3336%" height="15" fill="rgb(238,167,29)"/><text x="13.4510%" y="159.50"></text></g><g><title>check_match (300,674 samples, 0.32%)</title><rect x="13.2192%" y="133" width="0.3154%" height="15" fill="rgb(232,182,51)"/><text x="13.4692%" y="143.50"></text></g><g><title>death_checking (100,802 samples, 0.11%)</title><rect x="13.6209%" y="149" width="0.1057%" height="15" fill="rgb(231,60,39)"/><text x="13.8709%" y="159.50"></text></g><g><title>trait_impls_of (224,132 samples, 0.24%)</title><rect x="14.2664%" y="117" width="0.2351%" height="15" fill="rgb(208,69,12)"/><text x="14.5164%" y="127.50"></text></g><g><title>crate_lints (2,223,345 samples, 2.33%)</title><rect x="13.7284%" y="133" width="2.3319%" height="15" fill="rgb(235,93,37)"/><text x="13.9784%" y="143.50">c..</text></g><g><title>type_of (1,484,416 samples, 1.56%)</title><rect x="14.5034%" y="117" width="1.5569%" height="15" fill="rgb(213,116,39)"/><text x="14.7534%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,244,832 samples, 1.31%)</title><rect x="14.7546%" y="101" width="1.3056%" height="15" fill="rgb(222,207,29)"/><text x="15.0046%" y="111.50"></text></g><g><title>lint_checking (2,388,416 samples, 2.51%)</title><rect x="13.7267%" y="149" width="2.5050%" height="15" fill="rgb(206,96,30)"/><text x="13.9767%" y="159.50">li..</text></g><g><title>module_lints (163,461 samples, 0.17%)</title><rect x="16.0603%" y="133" width="0.1714%" height="15" fill="rgb(218,138,4)"/><text x="16.3103%" y="143.50"></text></g><g><title>lint_mod (160,551 samples, 0.17%)</title><rect x="16.0633%" y="117" width="0.1684%" height="15" fill="rgb(250,191,14)"/><text x="16.3133%" y="127.50"></text></g><g><title>privacy_access_levels (111,701 samples, 0.12%)</title><rect x="16.2317%" y="149" width="0.1172%" height="15" fill="rgb(239,60,40)"/><text x="16.4817%" y="159.50"></text></g><g><title>privacy_checking_modules (270,203 samples, 0.28%)</title><rect x="16.3488%" y="149" width="0.2834%" height="15" fill="rgb(206,27,48)"/><text x="16.5988%" y="159.50"></text></g><g><title>check_mod_privacy (268,243 samples, 0.28%)</title><rect x="16.3509%" y="133" width="0.2813%" height="15" fill="rgb(225,35,8)"/><text x="16.6009%" y="143.50"></text></g><g><title>misc_checking_3 (2,966,243 samples, 3.11%)</title><rect x="13.5346%" y="165" width="3.1111%" height="15" fill="rgb(250,213,24)"/><text x="13.7846%" y="175.50">mis..</text></g><g><title>coherent_trait (110,932 samples, 0.12%)</title><rect x="16.7296%" y="133" width="0.1163%" height="15" fill="rgb(247,123,22)"/><text x="16.9796%" y="143.50"></text></g><g><title>specialization_graph_of (100,371 samples, 0.11%)</title><rect x="16.7407%" y="117" width="0.1053%" height="15" fill="rgb(231,138,38)"/><text x="16.9907%" y="127.50"></text></g><g><title>coherence_checking (196,462 samples, 0.21%)</title><rect x="16.7035%" y="149" width="0.2061%" height="15" fill="rgb(231,145,46)"/><text x="16.9535%" y="159.50"></text></g><g><title>associated_item (1,270,865 samples, 1.33%)</title><rect x="32.1518%" y="85" width="1.3329%" height="15" fill="rgb(251,118,11)"/><text x="32.4018%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (965,980 samples, 1.01%)</title><rect x="32.4715%" y="69" width="1.0131%" height="15" fill="rgb(217,147,25)"/><text x="32.7215%" y="79.50"></text></g><g><title>associated_items (1,753,370 samples, 1.84%)</title><rect x="31.7161%" y="101" width="1.8390%" height="15" fill="rgb(247,81,37)"/><text x="31.9661%" y="111.50">a..</text></g><g><title>adt_dtorck_constraint (126,201 samples, 0.13%)</title><rect x="34.0598%" y="37" width="0.1324%" height="15" fill="rgb(209,12,38)"/><text x="34.3098%" y="47.50"></text></g><g><title>adt_dtorck_constraint (174,882 samples, 0.18%)</title><rect x="34.0313%" y="53" width="0.1834%" height="15" fill="rgb(227,1,9)"/><text x="34.2813%" y="63.50"></text></g><g><title>adt_dtorck_constraint (224,984 samples, 0.24%)</title><rect x="33.9864%" y="69" width="0.2360%" height="15" fill="rgb(248,47,43)"/><text x="34.2364%" y="79.50"></text></g><g><title>dropck_outlives (591,475 samples, 0.62%)</title><rect x="33.6333%" y="101" width="0.6204%" height="15" fill="rgb(221,10,30)"/><text x="33.8833%" y="111.50"></text></g><g><title>adt_dtorck_constraint (407,735 samples, 0.43%)</title><rect x="33.8260%" y="85" width="0.4276%" height="15" fill="rgb(210,229,1)"/><text x="34.0760%" y="95.50"></text></g><g><title>fn_abi_of_instance (174,872 samples, 0.18%)</title><rect x="34.9648%" y="53" width="0.1834%" height="15" fill="rgb(222,148,37)"/><text x="35.2148%" y="63.50"></text></g><g><title>mir_for_ctfe (155,042 samples, 0.16%)</title><rect x="35.2326%" y="53" width="0.1626%" height="15" fill="rgb(234,67,33)"/><text x="35.4826%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (144,782 samples, 0.15%)</title><rect x="35.2434%" y="37" width="0.1519%" height="15" fill="rgb(247,98,35)"/><text x="35.4934%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,139,293 samples, 1.19%)</title><rect x="34.2537%" y="101" width="1.1949%" height="15" fill="rgb(247,138,52)"/><text x="34.5037%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,101,021 samples, 1.15%)</title><rect x="34.2938%" y="85" width="1.1548%" height="15" fill="rgb(213,79,30)"/><text x="34.5438%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,052,221 samples, 1.10%)</title><rect x="34.3450%" y="69" width="1.1036%" height="15" fill="rgb(246,177,23)"/><text x="34.5950%" y="79.50"></text></g><g><title>adt_def (129,072 samples, 0.14%)</title><rect x="39.8067%" y="69" width="0.1354%" height="15" fill="rgb(230,62,27)"/><text x="40.0567%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (126,272 samples, 0.13%)</title><rect x="39.8096%" y="53" width="0.1324%" height="15" fill="rgb(216,154,8)"/><text x="40.0596%" y="63.50"></text></g><g><title>adt_sized_constraint (152,163 samples, 0.16%)</title><rect x="39.7921%" y="85" width="0.1596%" height="15" fill="rgb(244,35,45)"/><text x="40.0421%" y="95.50"></text></g><g><title>generics_of (1,552,005 samples, 1.63%)</title><rect x="39.9517%" y="85" width="1.6278%" height="15" fill="rgb(251,115,12)"/><text x="40.2017%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,220,700 samples, 1.28%)</title><rect x="40.2992%" y="69" width="1.2803%" height="15" fill="rgb(240,54,50)"/><text x="40.5492%" y="79.50"></text></g><g><title>impl_trait_ref (3,744,779 samples, 3.93%)</title><rect x="41.6152%" y="85" width="3.9276%" height="15" fill="rgb(233,84,52)"/><text x="41.8652%" y="95.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,401,405 samples, 3.57%)</title><rect x="41.9754%" y="69" width="3.5675%" height="15" fill="rgb(207,117,47)"/><text x="42.2254%" y="79.50">meta..</text></g><g><title>predicates_of (229,432 samples, 0.24%)</title><rect x="45.5677%" y="85" width="0.2406%" height="15" fill="rgb(249,43,39)"/><text x="45.8177%" y="95.50"></text></g><g><title>predicates_defined_on (155,552 samples, 0.16%)</title><rect x="45.6452%" y="69" width="0.1631%" height="15" fill="rgb(209,38,44)"/><text x="45.8952%" y="79.50"></text></g><g><title>specializes (253,064 samples, 0.27%)</title><rect x="45.8083%" y="85" width="0.2654%" height="15" fill="rgb(236,212,23)"/><text x="46.0583%" y="95.50"></text></g><g><title>param_env (163,001 samples, 0.17%)</title><rect x="45.9028%" y="69" width="0.1710%" height="15" fill="rgb(242,79,21)"/><text x="46.1528%" y="79.50"></text></g><g><title>trait_impls_of (1,037,445 samples, 1.09%)</title><rect x="46.0973%" y="85" width="1.0881%" height="15" fill="rgb(211,96,35)"/><text x="46.3473%" y="95.50"></text></g><g><title>implementations_of_trait (320,177 samples, 0.34%)</title><rect x="46.8496%" y="69" width="0.3358%" height="15" fill="rgb(253,215,40)"/><text x="47.0996%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (205,865 samples, 0.22%)</title><rect x="46.9695%" y="53" width="0.2159%" height="15" fill="rgb(211,81,21)"/><text x="47.2195%" y="63.50"></text></g><g><title>evaluate_obligation (11,215,732 samples, 11.76%)</title><rect x="35.4486%" y="101" width="11.7633%" height="15" fill="rgb(208,190,38)"/><text x="35.6986%" y="111.50">evaluate_obligati..</text></g><g><title>fn_sig (220,163 samples, 0.23%)</title><rect x="47.2698%" y="101" width="0.2309%" height="15" fill="rgb(235,213,38)"/><text x="47.5198%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (196,503 samples, 0.21%)</title><rect x="47.2946%" y="85" width="0.2061%" height="15" fill="rgb(237,122,38)"/><text x="47.5446%" y="95.50"></text></g><g><title>generics_of (1,036,818 samples, 1.09%)</title><rect x="47.5007%" y="101" width="1.0874%" height="15" fill="rgb(244,218,35)"/><text x="47.7507%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (759,657 samples, 0.80%)</title><rect x="47.7914%" y="85" width="0.7967%" height="15" fill="rgb(240,68,47)"/><text x="48.0414%" y="95.50"></text></g><g><title>impl_item_implementor_ids (101,362 samples, 0.11%)</title><rect x="48.5882%" y="101" width="0.1063%" height="15" fill="rgb(210,16,53)"/><text x="48.8382%" y="111.50"></text></g><g><title>impl_trait_ref (1,879,330 samples, 1.97%)</title><rect x="48.7111%" y="101" width="1.9711%" height="15" fill="rgb(235,124,12)"/><text x="48.9611%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,650,929 samples, 1.73%)</title><rect x="48.9506%" y="85" width="1.7315%" height="15" fill="rgb(224,169,11)"/><text x="49.2006%" y="95.50"></text></g><g><title>item_attrs (517,004 samples, 0.54%)</title><rect x="50.7033%" y="101" width="0.5422%" height="15" fill="rgb(250,166,2)"/><text x="50.9533%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (502,084 samples, 0.53%)</title><rect x="50.7190%" y="85" width="0.5266%" height="15" fill="rgb(242,216,29)"/><text x="50.9690%" y="95.50"></text></g><g><title>method_autoderef_steps (270,591 samples, 0.28%)</title><rect x="51.3854%" y="101" width="0.2838%" height="15" fill="rgb(230,116,27)"/><text x="51.6354%" y="111.50"></text></g><g><title>evaluate_obligation (150,401 samples, 0.16%)</title><rect x="51.5114%" y="85" width="0.1577%" height="15" fill="rgb(228,99,48)"/><text x="51.7614%" y="95.50"></text></g><g><title>param_env (123,061 samples, 0.13%)</title><rect x="51.7289%" y="101" width="0.1291%" height="15" fill="rgb(253,11,6)"/><text x="51.9789%" y="111.50"></text></g><g><title>explicit_predicates_of (142,412 samples, 0.15%)</title><rect x="52.2146%" y="69" width="0.1494%" height="15" fill="rgb(247,143,39)"/><text x="52.4646%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (102,461 samples, 0.11%)</title><rect x="52.2565%" y="53" width="0.1075%" height="15" fill="rgb(236,97,10)"/><text x="52.5065%" y="63.50"></text></g><g><title>predicates_of (549,679 samples, 0.58%)</title><rect x="51.8724%" y="101" width="0.5765%" height="15" fill="rgb(233,208,19)"/><text x="52.1224%" y="111.50"></text></g><g><title>predicates_defined_on (362,275 samples, 0.38%)</title><rect x="52.0690%" y="85" width="0.3800%" height="15" fill="rgb(216,164,2)"/><text x="52.3190%" y="95.50"></text></g><g><title>type_of (105,041 samples, 0.11%)</title><rect x="52.6083%" y="101" width="0.1102%" height="15" fill="rgb(220,129,5)"/><text x="52.8583%" y="111.50"></text></g><g><title>associated_items (119,871 samples, 0.13%)</title><rect x="54.4960%" y="85" width="0.1257%" height="15" fill="rgb(242,17,10)"/><text x="54.7460%" y="95.50"></text></g><g><title>evaluate_obligation (95,501 samples, 0.10%)</title><rect x="54.6626%" y="85" width="0.1002%" height="15" fill="rgb(242,107,0)"/><text x="54.9126%" y="95.50"></text></g><g><title>is_copy_raw (290,455 samples, 0.30%)</title><rect x="54.8172%" y="85" width="0.3046%" height="15" fill="rgb(251,28,31)"/><text x="55.0672%" y="95.50"></text></g><g><title>evaluate_obligation (266,524 samples, 0.28%)</title><rect x="54.8423%" y="69" width="0.2795%" height="15" fill="rgb(233,223,10)"/><text x="55.0923%" y="79.50"></text></g><g><title>trait_impls_of (122,192 samples, 0.13%)</title><rect x="54.9936%" y="53" width="0.1282%" height="15" fill="rgb(215,21,27)"/><text x="55.2436%" y="63.50"></text></g><g><title>typeck (2,512,768 samples, 2.64%)</title><rect x="52.7185%" y="101" width="2.6354%" height="15" fill="rgb(232,23,21)"/><text x="52.9685%" y="111.50">ty..</text></g><g><title>item_bodies_checking (36,700,401 samples, 38.49%)</title><rect x="16.9446%" y="149" width="38.4922%" height="15" fill="rgb(244,5,23)"/><text x="17.1946%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,696,901 samples, 38.49%)</title><rect x="16.9482%" y="133" width="38.4886%" height="15" fill="rgb(226,81,46)"/><text x="17.1982%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (36,626,110 samples, 38.41%)</title><rect x="17.0225%" y="117" width="38.4143%" height="15" fill="rgb(247,70,30)"/><text x="17.2725%" y="127.50">typeck</text></g><g><title>impl_parent (169,510 samples, 0.18%)</title><rect x="56.7073%" y="69" width="0.1778%" height="15" fill="rgb(212,68,19)"/><text x="56.9573%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (122,170 samples, 0.13%)</title><rect x="56.7570%" y="53" width="0.1281%" height="15" fill="rgb(240,187,13)"/><text x="57.0070%" y="63.50"></text></g><g><title>impl_trait_ref (623,636 samples, 0.65%)</title><rect x="56.8851%" y="69" width="0.6541%" height="15" fill="rgb(223,113,26)"/><text x="57.1351%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (572,646 samples, 0.60%)</title><rect x="56.9386%" y="53" width="0.6006%" height="15" fill="rgb(206,192,2)"/><text x="57.1886%" y="63.50"></text></g><g><title>adt_destructor (1,071,061 samples, 1.12%)</title><rect x="56.4870%" y="117" width="1.1234%" height="15" fill="rgb(241,108,4)"/><text x="56.7370%" y="127.50"></text></g><g><title>coherent_trait (1,064,451 samples, 1.12%)</title><rect x="56.4939%" y="101" width="1.1164%" height="15" fill="rgb(247,173,49)"/><text x="56.7439%" y="111.50"></text></g><g><title>specialization_graph_of (1,060,361 samples, 1.11%)</title><rect x="56.4982%" y="85" width="1.1121%" height="15" fill="rgb(224,114,35)"/><text x="56.7482%" y="95.50"></text></g><g><title>item_types_checking (2,099,944 samples, 2.20%)</title><rect x="55.4368%" y="149" width="2.2025%" height="15" fill="rgb(245,159,27)"/><text x="55.6868%" y="159.50">i..</text></g><g><title>check_mod_item_types (2,095,303 samples, 2.20%)</title><rect x="55.4417%" y="133" width="2.1976%" height="15" fill="rgb(245,172,44)"/><text x="55.6917%" y="143.50">c..</text></g><g><title>fn_sig (380,856 samples, 0.40%)</title><rect x="57.9861%" y="117" width="0.3995%" height="15" fill="rgb(236,23,11)"/><text x="58.2361%" y="127.50"></text></g><g><title>named_region_map (188,992 samples, 0.20%)</title><rect x="58.5748%" y="101" width="0.1982%" height="15" fill="rgb(205,117,38)"/><text x="58.8248%" y="111.50"></text></g><g><title>resolve_lifetimes (144,531 samples, 0.15%)</title><rect x="58.6214%" y="85" width="0.1516%" height="15" fill="rgb(237,72,25)"/><text x="58.8714%" y="95.50"></text></g><g><title>generics_of (401,794 samples, 0.42%)</title><rect x="58.3855%" y="117" width="0.4214%" height="15" fill="rgb(244,70,9)"/><text x="58.6355%" y="127.50"></text></g><g><title>late_bound_vars_map (264,333 samples, 0.28%)</title><rect x="59.2751%" y="69" width="0.2772%" height="15" fill="rgb(217,125,39)"/><text x="59.5251%" y="79.50"></text></g><g><title>resolve_lifetimes (239,623 samples, 0.25%)</title><rect x="59.3011%" y="53" width="0.2513%" height="15" fill="rgb(235,36,10)"/><text x="59.5511%" y="63.50"></text></g><g><title>explicit_predicates_of (560,876 samples, 0.59%)</title><rect x="58.9902%" y="85" width="0.5883%" height="15" fill="rgb(251,123,47)"/><text x="59.2402%" y="95.50"></text></g><g><title>predicates_of (782,947 samples, 0.82%)</title><rect x="58.8177%" y="117" width="0.8212%" height="15" fill="rgb(221,13,13)"/><text x="59.0677%" y="127.50"></text></g><g><title>predicates_defined_on (725,117 samples, 0.76%)</title><rect x="58.8784%" y="101" width="0.7605%" height="15" fill="rgb(238,131,9)"/><text x="59.1284%" y="111.50"></text></g><g><title>type_collecting (2,081,863 samples, 2.18%)</title><rect x="57.6404%" y="149" width="2.1835%" height="15" fill="rgb(211,50,8)"/><text x="57.8904%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,070,863 samples, 2.17%)</title><rect x="57.6519%" y="133" width="2.1720%" height="15" fill="rgb(245,182,24)"/><text x="57.9019%" y="143.50">c..</text></g><g><title>type_of (124,001 samples, 0.13%)</title><rect x="59.6938%" y="117" width="0.1301%" height="15" fill="rgb(242,14,37)"/><text x="59.9438%" y="127.50"></text></g><g><title>evaluate_obligation (323,555 samples, 0.34%)</title><rect x="62.2656%" y="117" width="0.3394%" height="15" fill="rgb(246,228,12)"/><text x="62.5156%" y="127.50"></text></g><g><title>implied_outlives_bounds (222,444 samples, 0.23%)</title><rect x="62.6049%" y="117" width="0.2333%" height="15" fill="rgb(213,55,15)"/><text x="62.8549%" y="127.50"></text></g><g><title>param_env (361,095 samples, 0.38%)</title><rect x="62.8382%" y="117" width="0.3787%" height="15" fill="rgb(209,9,3)"/><text x="63.0882%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,283,745 samples, 3.44%)</title><rect x="60.0603%" y="133" width="3.4441%" height="15" fill="rgb(230,59,30)"/><text x="60.3103%" y="143.50">che..</text></g><g><title>region_scope_tree (274,023 samples, 0.29%)</title><rect x="63.2170%" y="117" width="0.2874%" height="15" fill="rgb(209,121,21)"/><text x="63.4670%" y="127.50"></text></g><g><title>param_env (331,594 samples, 0.35%)</title><rect x="64.4304%" y="117" width="0.3478%" height="15" fill="rgb(220,109,13)"/><text x="64.6804%" y="127.50"></text></g><g><title>check_item_well_formed (1,483,138 samples, 1.56%)</title><rect x="63.5044%" y="133" width="1.5555%" height="15" fill="rgb(232,18,1)"/><text x="63.7544%" y="143.50"></text></g><g><title>variances_of (116,372 samples, 0.12%)</title><rect x="64.9379%" y="117" width="0.1221%" height="15" fill="rgb(215,41,42)"/><text x="65.1879%" y="127.50"></text></g><g><title>crate_variances (111,712 samples, 0.12%)</title><rect x="64.9427%" y="101" width="0.1172%" height="15" fill="rgb(224,123,36)"/><text x="65.1927%" y="111.50"></text></g><g><title>adt_def (184,362 samples, 0.19%)</title><rect x="67.7734%" y="85" width="0.1934%" height="15" fill="rgb(240,125,3)"/><text x="68.0234%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (181,142 samples, 0.19%)</title><rect x="67.7768%" y="69" width="0.1900%" height="15" fill="rgb(205,98,50)"/><text x="68.0268%" y="79.50"></text></g><g><title>item_attrs (153,572 samples, 0.16%)</title><rect x="67.8057%" y="53" width="0.1611%" height="15" fill="rgb(205,185,37)"/><text x="68.0557%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,452 samples, 0.16%)</title><rect x="67.8090%" y="37" width="0.1578%" height="15" fill="rgb(238,207,15)"/><text x="68.0590%" y="47.50"></text></g><g><title>adt_sized_constraint (127,941 samples, 0.13%)</title><rect x="67.9668%" y="85" width="0.1342%" height="15" fill="rgb(213,199,42)"/><text x="68.2168%" y="95.50"></text></g><g><title>adt_sized_constraint (343,104 samples, 0.36%)</title><rect x="67.7595%" y="101" width="0.3599%" height="15" fill="rgb(235,201,11)"/><text x="68.0095%" y="111.50"></text></g><g><title>evaluate_obligation (900,731 samples, 0.94%)</title><rect x="67.3421%" y="117" width="0.9447%" height="15" fill="rgb(207,46,11)"/><text x="67.5921%" y="127.50"></text></g><g><title>implied_outlives_bounds (326,934 samples, 0.34%)</title><rect x="68.2868%" y="117" width="0.3429%" height="15" fill="rgb(241,35,35)"/><text x="68.5368%" y="127.50"></text></g><g><title>param_env (351,753 samples, 0.37%)</title><rect x="68.6297%" y="117" width="0.3689%" height="15" fill="rgb(243,32,47)"/><text x="68.8797%" y="127.50"></text></g><g><title>predicates_of (137,331 samples, 0.14%)</title><rect x="68.9986%" y="117" width="0.1440%" height="15" fill="rgb(247,202,23)"/><text x="69.2486%" y="127.50"></text></g><g><title>predicates_defined_on (112,741 samples, 0.12%)</title><rect x="69.0244%" y="101" width="0.1182%" height="15" fill="rgb(219,102,11)"/><text x="69.2744%" y="111.50"></text></g><g><title>analysis (65,164,459 samples, 68.35%)</title><rect x="0.8225%" y="181" width="68.3460%" height="15" fill="rgb(243,110,44)"/><text x="1.0725%" y="191.50">analysis</text></g><g><title>type_check_crate (50,077,880 samples, 52.52%)</title><rect x="16.6456%" y="165" width="52.5228%" height="15" fill="rgb(222,74,54)"/><text x="16.8956%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,906,319 samples, 9.34%)</title><rect x="59.8273%" y="149" width="9.3412%" height="15" fill="rgb(216,99,12)"/><text x="60.0773%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,917,315 samples, 4.11%)</title><rect x="65.0599%" y="133" width="4.1086%" height="15" fill="rgb(226,22,26)"/><text x="65.3099%" y="143.50">chec..</text></g><g><title>codegen_crate (511,886 samples, 0.54%)</title><rect x="69.1815%" y="181" width="0.5369%" height="15" fill="rgb(217,163,10)"/><text x="69.4315%" y="191.50"></text></g><g><title>AST_validation (126,301 samples, 0.13%)</title><rect x="69.9470%" y="165" width="0.1325%" height="15" fill="rgb(213,25,53)"/><text x="70.1970%" y="175.50"></text></g><g><title>crate_injection (99,312 samples, 0.10%)</title><rect x="70.1366%" y="165" width="0.1042%" height="15" fill="rgb(252,105,26)"/><text x="70.3866%" y="175.50"></text></g><g><title>metadata_load_macro (108,311 samples, 0.11%)</title><rect x="80.5625%" y="133" width="0.1136%" height="15" fill="rgb(220,39,43)"/><text x="80.8125%" y="143.50"></text></g><g><title>macro_expand_crate (12,584,871 samples, 13.20%)</title><rect x="70.2407%" y="165" width="13.1993%" height="15" fill="rgb(229,68,48)"/><text x="70.4907%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (12,558,480 samples, 13.17%)</title><rect x="70.2684%" y="149" width="13.1716%" height="15" fill="rgb(252,8,32)"/><text x="70.5184%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,635,299 samples, 2.76%)</title><rect x="80.6761%" y="133" width="2.7640%" height="15" fill="rgb(223,20,43)"/><text x="80.9261%" y="143.50">me..</text></g><g><title>metadata_register_crate (947,439 samples, 0.99%)</title><rect x="82.4463%" y="117" width="0.9937%" height="15" fill="rgb(229,81,49)"/><text x="82.6963%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (234,823 samples, 0.25%)</title><rect x="83.4453%" y="165" width="0.2463%" height="15" fill="rgb(236,28,36)"/><text x="83.6953%" y="175.50"></text></g><g><title>finalize_macro_resolutions (300,183 samples, 0.31%)</title><rect x="83.7362%" y="149" width="0.3148%" height="15" fill="rgb(249,185,26)"/><text x="83.9862%" y="159.50"></text></g><g><title>late_resolve_crate (2,114,004 samples, 2.22%)</title><rect x="84.0511%" y="149" width="2.2172%" height="15" fill="rgb(249,174,33)"/><text x="84.3011%" y="159.50">l..</text></g><g><title>configure_and_expand (15,864,577 samples, 16.64%)</title><rect x="69.7184%" y="181" width="16.6391%" height="15" fill="rgb(233,201,37)"/><text x="69.9684%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,541,829 samples, 2.67%)</title><rect x="83.6916%" y="165" width="2.6659%" height="15" fill="rgb(221,78,26)"/><text x="83.9416%" y="175.50">re..</text></g><g><title>drop_ast (155,222 samples, 0.16%)</title><rect x="86.3575%" y="181" width="0.1628%" height="15" fill="rgb(250,127,30)"/><text x="86.6075%" y="191.50"></text></g><g><title>early_lint_checks (1,909,922 samples, 2.00%)</title><rect x="86.5347%" y="181" width="2.0032%" height="15" fill="rgb(230,49,44)"/><text x="86.7847%" y="191.50">e..</text></g><g><title>free_global_ctxt (3,122,055 samples, 3.27%)</title><rect x="88.5379%" y="181" width="3.2745%" height="15" fill="rgb(229,67,23)"/><text x="88.7879%" y="191.50">fre..</text></g><g><title>generate_crate_metadata (703,407 samples, 0.74%)</title><rect x="91.8124%" y="181" width="0.7377%" height="15" fill="rgb(249,83,47)"/><text x="92.0624%" y="191.50"></text></g><g><title>hir_lowering (2,370,666 samples, 2.49%)</title><rect x="92.5501%" y="181" width="2.4864%" height="15" fill="rgb(215,43,3)"/><text x="92.8001%" y="191.50">hi..</text></g><g><title>parse_crate (3,125,615 samples, 3.28%)</title><rect x="95.0897%" y="181" width="3.2782%" height="15" fill="rgb(238,154,13)"/><text x="95.3397%" y="191.50">par..</text></g><g><title>prepare_outputs (380,915 samples, 0.40%)</title><rect x="98.3779%" y="181" width="0.3995%" height="15" fill="rgb(219,56,2)"/><text x="98.6279%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (674,478 samples, 0.71%)</title><rect x="98.7774%" y="181" width="0.7074%" height="15" fill="rgb(233,0,4)"/><text x="99.0274%" y="191.50"></text></g><g><title>setup_global_ctxt (141,322 samples, 0.15%)</title><rect x="99.4961%" y="181" width="0.1482%" height="15" fill="rgb(235,30,7)"/><text x="99.7461%" y="191.50"></text></g><g><title>all (95,344,977 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (95,344,977 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (339,094 samples, 0.36%)</title><rect x="99.6444%" y="181" width="0.3556%" height="15" fill="rgb(228,22,38)"/><text x="99.8944%" y="191.50"></text></g></svg></svg>