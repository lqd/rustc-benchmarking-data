<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (2,645,678 samples, 0.12%)</title><rect x="14.9338%" y="261" width="0.1250%" height="15" fill="rgb(227,0,7)"/><text x="15.1838%" y="271.50"></text></g><g><title>param_env (2,480,017 samples, 0.12%)</title><rect x="16.9168%" y="229" width="0.1171%" height="15" fill="rgb(217,0,24)"/><text x="17.1668%" y="239.50"></text></g><g><title>codegen_fn_attrs (2,788,814 samples, 0.13%)</title><rect x="17.5813%" y="213" width="0.1317%" height="15" fill="rgb(221,193,54)"/><text x="17.8313%" y="223.50"></text></g><g><title>is_copy_raw (14,767,125 samples, 0.70%)</title><rect x="21.2514%" y="181" width="0.6974%" height="15" fill="rgb(248,212,6)"/><text x="21.5014%" y="191.50"></text></g><g><title>evaluate_obligation (11,920,196 samples, 0.56%)</title><rect x="21.3858%" y="165" width="0.5630%" height="15" fill="rgb(208,68,35)"/><text x="21.6358%" y="175.50"></text></g><g><title>needs_drop_raw (18,531,182 samples, 0.88%)</title><rect x="21.0792%" y="197" width="0.8752%" height="15" fill="rgb(232,128,0)"/><text x="21.3292%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (9,991,887 samples, 0.47%)</title><rect x="22.1266%" y="181" width="0.4719%" height="15" fill="rgb(207,160,47)"/><text x="22.3766%" y="191.50"></text></g><g><title>evaluate_obligation (2,177,706 samples, 0.10%)</title><rect x="22.4957%" y="165" width="0.1029%" height="15" fill="rgb(228,23,34)"/><text x="22.7457%" y="175.50"></text></g><g><title>resolve_instance (15,969,111 samples, 0.75%)</title><rect x="21.9560%" y="197" width="0.7542%" height="15" fill="rgb(218,30,26)"/><text x="22.2060%" y="207.50"></text></g><g><title>thir_body (26,756,196 samples, 1.26%)</title><rect x="22.7421%" y="197" width="1.2637%" height="15" fill="rgb(220,122,19)"/><text x="22.9921%" y="207.50"></text></g><g><title>mir_const (168,850,426 samples, 7.97%)</title><rect x="16.0573%" y="245" width="7.9746%" height="15" fill="rgb(250,228,42)"/><text x="16.3073%" y="255.50">mir_const</text></g><g><title>unsafety_check_result (148,171,034 samples, 7.00%)</title><rect x="17.0339%" y="229" width="6.9980%" height="15" fill="rgb(240,193,28)"/><text x="17.2839%" y="239.50">unsafety_..</text></g><g><title>mir_built (133,791,922 samples, 6.32%)</title><rect x="17.7130%" y="213" width="6.3189%" height="15" fill="rgb(216,20,37)"/><text x="17.9630%" y="223.50">mir_built</text></g><g><title>mir_const_qualif (4,509,437 samples, 0.21%)</title><rect x="24.0319%" y="245" width="0.2130%" height="15" fill="rgb(206,188,39)"/><text x="24.2819%" y="255.50"></text></g><g><title>mir_promoted (192,399,994 samples, 9.09%)</title><rect x="15.1582%" y="261" width="9.0869%" height="15" fill="rgb(217,207,13)"/><text x="15.4082%" y="271.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (9,034,792 samples, 0.43%)</title><rect x="24.2456%" y="261" width="0.4267%" height="15" fill="rgb(231,73,38)"/><text x="24.4956%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (10,558,542 samples, 0.50%)</title><rect x="24.6723%" y="261" width="0.4987%" height="15" fill="rgb(225,20,46)"/><text x="24.9223%" y="271.50"></text></g><g><title>normalize_projection_ty (6,762,215 samples, 0.32%)</title><rect x="24.8516%" y="245" width="0.3194%" height="15" fill="rgb(210,31,41)"/><text x="25.1016%" y="255.50"></text></g><g><title>type_op_normalize_predicate (4,124,777 samples, 0.19%)</title><rect x="25.1709%" y="261" width="0.1948%" height="15" fill="rgb(221,200,47)"/><text x="25.4209%" y="271.50"></text></g><g><title>normalize_projection_ty (2,399,104 samples, 0.11%)</title><rect x="25.2524%" y="245" width="0.1133%" height="15" fill="rgb(226,26,5)"/><text x="25.5024%" y="255.50"></text></g><g><title>type_op_prove_predicate (44,309,787 samples, 2.09%)</title><rect x="25.4221%" y="261" width="2.0927%" height="15" fill="rgb(249,33,26)"/><text x="25.6721%" y="271.50">t..</text></g><g><title>evaluate_obligation (2,318,446 samples, 0.11%)</title><rect x="27.4054%" y="245" width="0.1095%" height="15" fill="rgb(235,183,28)"/><text x="27.6554%" y="255.50"></text></g><g><title>MIR_borrow_checking (571,293,300 samples, 26.98%)</title><rect x="0.5350%" y="293" width="26.9816%" height="15" fill="rgb(221,5,38)"/><text x="0.7850%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (568,209,331 samples, 26.84%)</title><rect x="0.6807%" y="277" width="26.8360%" height="15" fill="rgb(247,18,42)"/><text x="0.9307%" y="287.50">mir_borrowck</text></g><g><title>hir_module_items (3,812,817 samples, 0.18%)</title><rect x="27.5980%" y="293" width="0.1801%" height="15" fill="rgb(241,131,45)"/><text x="27.8480%" y="303.50"></text></g><g><title>should_inherit_track_caller (2,353,656 samples, 0.11%)</title><rect x="28.1352%" y="245" width="0.1112%" height="15" fill="rgb(249,31,29)"/><text x="28.3852%" y="255.50"></text></g><g><title>codegen_fn_attrs (4,482,187 samples, 0.21%)</title><rect x="28.0360%" y="261" width="0.2117%" height="15" fill="rgb(225,111,53)"/><text x="28.2860%" y="271.50"></text></g><g><title>check_mod_attrs (9,794,591 samples, 0.46%)</title><rect x="27.7851%" y="277" width="0.4626%" height="15" fill="rgb(238,160,17)"/><text x="28.0351%" y="287.50"></text></g><g><title>check_mod_const_bodies (2,346,975 samples, 0.11%)</title><rect x="28.2477%" y="277" width="0.1108%" height="15" fill="rgb(214,148,48)"/><text x="28.4977%" y="287.50"></text></g><g><title>check_mod_loops (2,225,283 samples, 0.11%)</title><rect x="28.3586%" y="277" width="0.1051%" height="15" fill="rgb(232,36,49)"/><text x="28.6086%" y="287.50"></text></g><g><title>lint_levels (5,429,590 samples, 0.26%)</title><rect x="28.5830%" y="261" width="0.2564%" height="15" fill="rgb(209,103,24)"/><text x="28.8330%" y="271.50"></text></g><g><title>lookup_deprecation_entry (2,890,793 samples, 0.14%)</title><rect x="28.8394%" y="261" width="0.1365%" height="15" fill="rgb(229,88,8)"/><text x="29.0894%" y="271.50"></text></g><g><title>stability_index (2,673,880 samples, 0.13%)</title><rect x="28.8497%" y="245" width="0.1263%" height="15" fill="rgb(213,181,19)"/><text x="29.0997%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (10,864,142 samples, 0.51%)</title><rect x="28.4771%" y="277" width="0.5131%" height="15" fill="rgb(254,191,54)"/><text x="28.7271%" y="287.50"></text></g><g><title>misc_checking_1 (26,431,713 samples, 1.25%)</title><rect x="27.7781%" y="293" width="1.2483%" height="15" fill="rgb(241,83,37)"/><text x="28.0281%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (11,610,839 samples, 0.55%)</title><rect x="29.0266%" y="277" width="0.5484%" height="15" fill="rgb(233,36,39)"/><text x="29.2766%" y="287.50"></text></g><g><title>check_mod_liveness (9,473,417 samples, 0.45%)</title><rect x="29.1276%" y="261" width="0.4474%" height="15" fill="rgb(226,3,54)"/><text x="29.3776%" y="271.50"></text></g><g><title>misc_checking_2 (31,402,689 samples, 1.48%)</title><rect x="29.0265%" y="293" width="1.4831%" height="15" fill="rgb(245,192,40)"/><text x="29.2765%" y="303.50"></text></g><g><title>match_checking (19,788,010 samples, 0.93%)</title><rect x="29.5750%" y="277" width="0.9346%" height="15" fill="rgb(238,167,29)"/><text x="29.8250%" y="287.50"></text></g><g><title>check_match (18,516,978 samples, 0.87%)</title><rect x="29.6350%" y="261" width="0.8745%" height="15" fill="rgb(232,182,51)"/><text x="29.8850%" y="271.50"></text></g><g><title>check_private_in_public (6,444,192 samples, 0.30%)</title><rect x="30.5106%" y="277" width="0.3044%" height="15" fill="rgb(231,60,39)"/><text x="30.7606%" y="287.50"></text></g><g><title>death_checking (10,083,792 samples, 0.48%)</title><rect x="30.8150%" y="277" width="0.4762%" height="15" fill="rgb(208,69,12)"/><text x="31.0650%" y="287.50"></text></g><g><title>param_env (4,292,294 samples, 0.20%)</title><rect x="31.8814%" y="245" width="0.2027%" height="15" fill="rgb(235,93,37)"/><text x="32.1314%" y="255.50"></text></g><g><title>predicates_of (2,146,177 samples, 0.10%)</title><rect x="31.9828%" y="229" width="0.1014%" height="15" fill="rgb(213,116,39)"/><text x="32.2328%" y="239.50"></text></g><g><title>crate_lints (19,191,223 samples, 0.91%)</title><rect x="31.2914%" y="261" width="0.9064%" height="15" fill="rgb(222,207,29)"/><text x="31.5414%" y="271.50"></text></g><g><title>lint_checking (32,955,575 samples, 1.56%)</title><rect x="31.2912%" y="277" width="1.5565%" height="15" fill="rgb(206,96,30)"/><text x="31.5412%" y="287.50"></text></g><g><title>module_lints (13,760,292 samples, 0.65%)</title><rect x="32.1978%" y="261" width="0.6499%" height="15" fill="rgb(218,138,4)"/><text x="32.4478%" y="271.50"></text></g><g><title>lint_mod (13,710,182 samples, 0.65%)</title><rect x="32.2002%" y="245" width="0.6475%" height="15" fill="rgb(250,191,14)"/><text x="32.4502%" y="255.50"></text></g><g><title>privacy_access_levels (8,168,700 samples, 0.39%)</title><rect x="32.8477%" y="277" width="0.3858%" height="15" fill="rgb(239,60,40)"/><text x="33.0977%" y="287.50"></text></g><g><title>privacy_checking_modules (22,636,081 samples, 1.07%)</title><rect x="33.2335%" y="277" width="1.0691%" height="15" fill="rgb(206,27,48)"/><text x="33.4835%" y="287.50"></text></g><g><title>check_mod_privacy (22,588,531 samples, 1.07%)</title><rect x="33.2357%" y="261" width="1.0668%" height="15" fill="rgb(225,35,8)"/><text x="33.4857%" y="271.50"></text></g><g><title>misc_checking_3 (80,587,024 samples, 3.81%)</title><rect x="30.5096%" y="293" width="3.8060%" height="15" fill="rgb(250,213,24)"/><text x="30.7596%" y="303.50">misc..</text></g><g><title>impl_parent (4,529,859 samples, 0.21%)</title><rect x="34.8941%" y="229" width="0.2139%" height="15" fill="rgb(247,123,22)"/><text x="35.1441%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,673,724 samples, 0.13%)</title><rect x="34.9817%" y="213" width="0.1263%" height="15" fill="rgb(231,138,38)"/><text x="35.2317%" y="223.50"></text></g><g><title>impl_trait_ref (9,881,948 samples, 0.47%)</title><rect x="35.1081%" y="229" width="0.4667%" height="15" fill="rgb(231,145,46)"/><text x="35.3581%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,009,303 samples, 0.38%)</title><rect x="35.1965%" y="213" width="0.3783%" height="15" fill="rgb(251,118,11)"/><text x="35.4465%" y="223.50"></text></g><g><title>trait_impls_of (2,756,114 samples, 0.13%)</title><rect x="35.5938%" y="229" width="0.1302%" height="15" fill="rgb(217,147,25)"/><text x="35.8438%" y="239.50"></text></g><g><title>coherent_trait (27,873,919 samples, 1.32%)</title><rect x="34.4086%" y="261" width="1.3165%" height="15" fill="rgb(247,81,37)"/><text x="34.6586%" y="271.50"></text></g><g><title>specialization_graph_of (26,668,495 samples, 1.26%)</title><rect x="34.4656%" y="245" width="1.2595%" height="15" fill="rgb(209,12,38)"/><text x="34.7156%" y="255.50"></text></g><g><title>coherence_checking (28,798,019 samples, 1.36%)</title><rect x="34.4061%" y="277" width="1.3601%" height="15" fill="rgb(227,1,9)"/><text x="34.6561%" y="287.50"></text></g><g><title>adt_dtorck_constraint (2,855,376 samples, 0.13%)</title><rect x="56.6734%" y="213" width="0.1349%" height="15" fill="rgb(248,47,43)"/><text x="56.9234%" y="223.50"></text></g><g><title>normalize_projection_ty (6,995,482 samples, 0.33%)</title><rect x="56.8121%" y="213" width="0.3304%" height="15" fill="rgb(221,10,30)"/><text x="57.0621%" y="223.50"></text></g><g><title>dropck_outlives (16,505,589 samples, 0.78%)</title><rect x="56.3632%" y="229" width="0.7795%" height="15" fill="rgb(210,229,1)"/><text x="56.6132%" y="239.50"></text></g><g><title>predicates_of (2,487,611 samples, 0.12%)</title><rect x="58.7531%" y="213" width="0.1175%" height="15" fill="rgb(222,148,37)"/><text x="59.0031%" y="223.50"></text></g><g><title>specializes (2,559,310 samples, 0.12%)</title><rect x="58.8739%" y="213" width="0.1209%" height="15" fill="rgb(234,67,33)"/><text x="59.1239%" y="223.50"></text></g><g><title>evaluate_obligation (39,054,145 samples, 1.84%)</title><rect x="57.2340%" y="229" width="1.8445%" height="15" fill="rgb(247,98,35)"/><text x="57.4840%" y="239.50">e..</text></g><g><title>evaluate_obligation (2,852,079 samples, 0.13%)</title><rect x="59.4475%" y="213" width="0.1347%" height="15" fill="rgb(247,138,52)"/><text x="59.6975%" y="223.50"></text></g><g><title>method_autoderef_steps (6,222,473 samples, 0.29%)</title><rect x="59.2893%" y="229" width="0.2939%" height="15" fill="rgb(213,79,30)"/><text x="59.5393%" y="239.50"></text></g><g><title>dropck_outlives (3,160,653 samples, 0.15%)</title><rect x="66.1721%" y="213" width="0.1493%" height="15" fill="rgb(246,177,23)"/><text x="66.4221%" y="223.50"></text></g><g><title>evaluate_obligation (18,848,995 samples, 0.89%)</title><rect x="66.3359%" y="213" width="0.8902%" height="15" fill="rgb(230,62,27)"/><text x="66.5859%" y="223.50"></text></g><g><title>method_autoderef_steps (2,472,804 samples, 0.12%)</title><rect x="67.3994%" y="213" width="0.1168%" height="15" fill="rgb(216,154,8)"/><text x="67.6494%" y="223.50"></text></g><g><title>typeck (166,681,261 samples, 7.87%)</title><rect x="59.7319%" y="229" width="7.8722%" height="15" fill="rgb(244,35,45)"/><text x="59.9819%" y="239.50">typeck</text></g><g><title>item_bodies_checking (673,974,501 samples, 31.83%)</title><rect x="35.8019%" y="277" width="31.8311%" height="15" fill="rgb(251,115,12)"/><text x="36.0519%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (673,970,001 samples, 31.83%)</title><rect x="35.8021%" y="261" width="31.8309%" height="15" fill="rgb(240,54,50)"/><text x="36.0521%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (670,819,572 samples, 31.68%)</title><rect x="35.9509%" y="245" width="31.6821%" height="15" fill="rgb(233,84,52)"/><text x="36.2009%" y="255.50">typeck</text></g><g><title>mir_borrowck (8,229,281 samples, 0.39%)</title><rect x="68.7377%" y="213" width="0.3887%" height="15" fill="rgb(207,117,47)"/><text x="68.9877%" y="223.50"></text></g><g><title>evaluate_obligation (2,511,328 samples, 0.12%)</title><rect x="69.9823%" y="133" width="0.1186%" height="15" fill="rgb(249,43,39)"/><text x="70.2323%" y="143.50"></text></g><g><title>mir_borrowck (3,440,928 samples, 0.16%)</title><rect x="70.1867%" y="101" width="0.1625%" height="15" fill="rgb(209,38,44)"/><text x="70.4367%" y="111.50"></text></g><g><title>mir_built (6,827,615 samples, 0.32%)</title><rect x="70.3517%" y="53" width="0.3225%" height="15" fill="rgb(236,212,23)"/><text x="70.6017%" y="63.50"></text></g><g><title>typeck (6,608,423 samples, 0.31%)</title><rect x="70.3621%" y="37" width="0.3121%" height="15" fill="rgb(242,79,21)"/><text x="70.6121%" y="47.50"></text></g><g><title>mir_const (7,637,654 samples, 0.36%)</title><rect x="70.3499%" y="85" width="0.3607%" height="15" fill="rgb(211,96,35)"/><text x="70.5999%" y="95.50"></text></g><g><title>unsafety_check_result (7,606,234 samples, 0.36%)</title><rect x="70.3513%" y="69" width="0.3592%" height="15" fill="rgb(253,215,40)"/><text x="70.6013%" y="79.50"></text></g><g><title>mir_promoted (7,652,704 samples, 0.36%)</title><rect x="70.3492%" y="101" width="0.3614%" height="15" fill="rgb(211,81,21)"/><text x="70.5992%" y="111.50"></text></g><g><title>mir_borrowck (11,491,638 samples, 0.54%)</title><rect x="70.1734%" y="117" width="0.5427%" height="15" fill="rgb(208,190,38)"/><text x="70.4234%" y="127.50"></text></g><g><title>type_of (11,527,208 samples, 0.54%)</title><rect x="70.1718%" y="133" width="0.5444%" height="15" fill="rgb(235,213,38)"/><text x="70.4218%" y="143.50"></text></g><g><title>mir_built (32,736,434 samples, 1.55%)</title><rect x="69.1784%" y="165" width="1.5461%" height="15" fill="rgb(237,122,38)"/><text x="69.4284%" y="175.50"></text></g><g><title>typeck (31,736,432 samples, 1.50%)</title><rect x="69.2256%" y="149" width="1.4989%" height="15" fill="rgb(244,218,35)"/><text x="69.4756%" y="159.50"></text></g><g><title>mir_const (35,616,515 samples, 1.68%)</title><rect x="69.1330%" y="197" width="1.6821%" height="15" fill="rgb(240,68,47)"/><text x="69.3830%" y="207.50"></text></g><g><title>unsafety_check_result (34,778,506 samples, 1.64%)</title><rect x="69.1725%" y="181" width="1.6426%" height="15" fill="rgb(210,16,53)"/><text x="69.4225%" y="191.50"></text></g><g><title>mir_promoted (35,769,237 samples, 1.69%)</title><rect x="69.1264%" y="213" width="1.6893%" height="15" fill="rgb(235,124,12)"/><text x="69.3764%" y="223.50"></text></g><g><title>type_of (46,984,413 samples, 2.22%)</title><rect x="68.6334%" y="245" width="2.2190%" height="15" fill="rgb(224,169,11)"/><text x="68.8834%" y="255.50">t..</text></g><g><title>mir_borrowck (46,915,412 samples, 2.22%)</title><rect x="68.6367%" y="229" width="2.2158%" height="15" fill="rgb(250,166,2)"/><text x="68.8867%" y="239.50">m..</text></g><g><title>item_types_checking (70,598,123 samples, 3.33%)</title><rect x="67.6330%" y="277" width="3.3343%" height="15" fill="rgb(242,216,29)"/><text x="67.8830%" y="287.50">ite..</text></g><g><title>check_mod_item_types (70,532,332 samples, 3.33%)</title><rect x="67.6361%" y="261" width="3.3312%" height="15" fill="rgb(230,116,27)"/><text x="67.8861%" y="271.50">che..</text></g><g><title>typeck (2,431,046 samples, 0.11%)</title><rect x="70.8525%" y="245" width="0.1148%" height="15" fill="rgb(228,99,48)"/><text x="71.1025%" y="255.50"></text></g><g><title>fn_sig (5,735,259 samples, 0.27%)</title><rect x="71.2357%" y="245" width="0.2709%" height="15" fill="rgb(253,11,6)"/><text x="71.4857%" y="255.50"></text></g><g><title>named_region_map (5,237,748 samples, 0.25%)</title><rect x="71.6525%" y="229" width="0.2474%" height="15" fill="rgb(247,143,39)"/><text x="71.9025%" y="239.50"></text></g><g><title>resolve_lifetimes (4,805,992 samples, 0.23%)</title><rect x="71.6729%" y="213" width="0.2270%" height="15" fill="rgb(236,97,10)"/><text x="71.9229%" y="223.50"></text></g><g><title>generics_of (8,561,630 samples, 0.40%)</title><rect x="71.5066%" y="245" width="0.4044%" height="15" fill="rgb(233,208,19)"/><text x="71.7566%" y="255.50"></text></g><g><title>explicit_predicates_of (3,410,696 samples, 0.16%)</title><rect x="72.0839%" y="213" width="0.1611%" height="15" fill="rgb(216,164,2)"/><text x="72.3339%" y="223.50"></text></g><g><title>predicates_of (9,637,967 samples, 0.46%)</title><rect x="71.9508%" y="245" width="0.4552%" height="15" fill="rgb(220,129,5)"/><text x="72.2008%" y="255.50"></text></g><g><title>predicates_defined_on (8,548,588 samples, 0.40%)</title><rect x="72.0023%" y="229" width="0.4037%" height="15" fill="rgb(242,17,10)"/><text x="72.2523%" y="239.50"></text></g><g><title>inferred_outlives_of (3,409,826 samples, 0.16%)</title><rect x="72.2450%" y="213" width="0.1610%" height="15" fill="rgb(242,107,0)"/><text x="72.4950%" y="223.50"></text></g><g><title>inferred_outlives_crate (3,041,004 samples, 0.14%)</title><rect x="72.2624%" y="197" width="0.1436%" height="15" fill="rgb(251,28,31)"/><text x="72.5124%" y="207.50"></text></g><g><title>type_collecting (31,998,725 samples, 1.51%)</title><rect x="70.9691%" y="277" width="1.5113%" height="15" fill="rgb(233,223,10)"/><text x="71.2191%" y="287.50"></text></g><g><title>collect_mod_item_types (31,936,513 samples, 1.51%)</title><rect x="70.9721%" y="261" width="1.5083%" height="15" fill="rgb(215,21,27)"/><text x="71.2221%" y="271.50"></text></g><g><title>evaluate_obligation (6,058,155 samples, 0.29%)</title><rect x="74.3826%" y="245" width="0.2861%" height="15" fill="rgb(232,23,21)"/><text x="74.6326%" y="255.50"></text></g><g><title>implied_outlives_bounds (3,575,756 samples, 0.17%)</title><rect x="74.6736%" y="245" width="0.1689%" height="15" fill="rgb(244,5,23)"/><text x="74.9236%" y="255.50"></text></g><g><title>param_env (5,555,947 samples, 0.26%)</title><rect x="74.8987%" y="245" width="0.2624%" height="15" fill="rgb(226,81,46)"/><text x="75.1487%" y="255.50"></text></g><g><title>region_scope_tree (8,321,054 samples, 0.39%)</title><rect x="75.1655%" y="245" width="0.3930%" height="15" fill="rgb(247,70,30)"/><text x="75.4155%" y="255.50"></text></g><g><title>check_impl_item_well_formed (61,112,679 samples, 2.89%)</title><rect x="72.6826%" y="261" width="2.8863%" height="15" fill="rgb(212,68,19)"/><text x="72.9326%" y="271.50">ch..</text></g><g><title>evaluate_obligation (10,606,161 samples, 0.50%)</title><rect x="76.5336%" y="245" width="0.5009%" height="15" fill="rgb(240,187,13)"/><text x="76.7836%" y="255.50"></text></g><g><title>param_env (4,150,726 samples, 0.20%)</title><rect x="77.1056%" y="245" width="0.1960%" height="15" fill="rgb(223,113,26)"/><text x="77.3556%" y="255.50"></text></g><g><title>check_item_well_formed (39,301,412 samples, 1.86%)</title><rect x="75.5688%" y="261" width="1.8562%" height="15" fill="rgb(206,192,2)"/><text x="75.8188%" y="271.50">c..</text></g><g><title>analysis (1,636,656,846 samples, 77.30%)</title><rect x="0.2958%" y="309" width="77.2976%" height="15" fill="rgb(241,108,4)"/><text x="0.5458%" y="319.50">analysis</text></g><g><title>type_check_crate (916,339,541 samples, 43.28%)</title><rect x="34.3156%" y="293" width="43.2778%" height="15" fill="rgb(247,173,49)"/><text x="34.5656%" y="303.50">type_check_crate</text></g><g><title>wf_checking (108,039,030 samples, 5.10%)</title><rect x="72.4908%" y="277" width="5.1026%" height="15" fill="rgb(224,114,35)"/><text x="72.7408%" y="287.50">wf_che..</text></g><g><title>check_trait_item_well_formed (3,565,500 samples, 0.17%)</title><rect x="77.4250%" y="261" width="0.1684%" height="15" fill="rgb(245,159,27)"/><text x="77.6750%" y="271.50"></text></g><g><title>AST_validation (3,639,650 samples, 0.17%)</title><rect x="77.6283%" y="293" width="0.1719%" height="15" fill="rgb(245,172,44)"/><text x="77.8783%" y="303.50"></text></g><g><title>complete_gated_feature_checking (2,808,792 samples, 0.13%)</title><rect x="77.8002%" y="293" width="0.1327%" height="15" fill="rgb(236,23,11)"/><text x="78.0502%" y="303.50"></text></g><g><title>metadata_register_crate (15,319,941 samples, 0.72%)</title><rect x="90.8687%" y="261" width="0.7235%" height="15" fill="rgb(205,117,38)"/><text x="91.1187%" y="271.50"></text></g><g><title>metadata_register_crate (6,924,437 samples, 0.33%)</title><rect x="91.2652%" y="245" width="0.3270%" height="15" fill="rgb(237,72,25)"/><text x="91.5152%" y="255.50"></text></g><g><title>macro_expand_crate (292,283,125 samples, 13.80%)</title><rect x="77.9351%" y="293" width="13.8042%" height="15" fill="rgb(244,70,9)"/><text x="78.1851%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (292,266,875 samples, 13.80%)</title><rect x="77.9359%" y="277" width="13.8035%" height="15" fill="rgb(217,125,39)"/><text x="78.1859%" y="287.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (3,115,340 samples, 0.15%)</title><rect x="91.5922%" y="261" width="0.1471%" height="15" fill="rgb(235,36,10)"/><text x="91.8422%" y="271.50"></text></g><g><title>late_resolve_crate (29,117,273 samples, 1.38%)</title><rect x="91.8714%" y="277" width="1.3752%" height="15" fill="rgb(251,123,47)"/><text x="92.1214%" y="287.50"></text></g><g><title>resolve_check_unused (2,426,197 samples, 0.11%)</title><rect x="93.2603%" y="277" width="0.1146%" height="15" fill="rgb(221,13,13)"/><text x="93.5103%" y="287.50"></text></g><g><title>resolve_postprocess (2,218,684 samples, 0.10%)</title><rect x="93.3749%" y="277" width="0.1048%" height="15" fill="rgb(238,131,9)"/><text x="93.6249%" y="287.50"></text></g><g><title>configure_and_expand (335,786,048 samples, 15.86%)</title><rect x="77.6209%" y="309" width="15.8588%" height="15" fill="rgb(211,50,8)"/><text x="77.8709%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (36,704,067 samples, 1.73%)</title><rect x="91.7463%" y="293" width="1.7335%" height="15" fill="rgb(245,182,24)"/><text x="91.9963%" y="303.50"></text></g><g><title>drop_ast (5,686,133 samples, 0.27%)</title><rect x="93.4798%" y="309" width="0.2686%" height="15" fill="rgb(242,14,37)"/><text x="93.7298%" y="319.50"></text></g><g><title>early_lint_checks (9,265,543 samples, 0.44%)</title><rect x="93.7498%" y="309" width="0.4376%" height="15" fill="rgb(246,228,12)"/><text x="93.9998%" y="319.50"></text></g><g><title>free_global_ctxt (17,711,837 samples, 0.84%)</title><rect x="94.1874%" y="309" width="0.8365%" height="15" fill="rgb(213,55,15)"/><text x="94.4374%" y="319.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,384,420 samples, 0.25%)</title><rect x="96.2700%" y="277" width="0.2543%" height="15" fill="rgb(209,9,3)"/><text x="96.5200%" y="287.50"></text></g><g><title>optimized_mir (9,807,360 samples, 0.46%)</title><rect x="96.0613%" y="293" width="0.4632%" height="15" fill="rgb(230,59,30)"/><text x="96.3113%" y="303.50"></text></g><g><title>generate_crate_metadata (32,559,302 samples, 1.54%)</title><rect x="95.0240%" y="309" width="1.5377%" height="15" fill="rgb(209,121,21)"/><text x="95.2740%" y="319.50"></text></g><g><title>hir_lowering (64,761,989 samples, 3.06%)</title><rect x="96.5617%" y="309" width="3.0586%" height="15" fill="rgb(220,109,13)"/><text x="96.8117%" y="319.50">hir..</text></g><g><title>self_profile_alloc_query_strings (4,824,044 samples, 0.23%)</title><rect x="99.6899%" y="309" width="0.2278%" height="15" fill="rgb(232,18,1)"/><text x="99.9399%" y="319.50"></text></g><g><title>all (2,117,343,772 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (2,117,343,772 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="335.50">rustc</text></g></svg></svg>