<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (146,062 samples, 0.17%)</title><rect x="10.0466%" y="165" width="0.1672%" height="15" fill="rgb(227,0,7)"/><text x="10.2966%" y="175.50"></text></g><g><title>param_env (257,083 samples, 0.29%)</title><rect x="11.4430%" y="133" width="0.2943%" height="15" fill="rgb(217,0,24)"/><text x="11.6930%" y="143.50"></text></g><g><title>item_attrs (202,513 samples, 0.23%)</title><rect x="12.1839%" y="101" width="0.2318%" height="15" fill="rgb(221,193,54)"/><text x="12.4339%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (192,513 samples, 0.22%)</title><rect x="12.1954%" y="85" width="0.2204%" height="15" fill="rgb(248,212,6)"/><text x="12.4454%" y="95.50"></text></g><g><title>codegen_fn_attrs (297,743 samples, 0.34%)</title><rect x="12.0938%" y="117" width="0.3409%" height="15" fill="rgb(208,68,35)"/><text x="12.3438%" y="127.50"></text></g><g><title>adt_drop_tys (163,581 samples, 0.19%)</title><rect x="14.4859%" y="37" width="0.1873%" height="15" fill="rgb(232,128,0)"/><text x="14.7359%" y="47.50"></text></g><g><title>adt_drop_tys (241,814 samples, 0.28%)</title><rect x="14.4718%" y="53" width="0.2768%" height="15" fill="rgb(207,160,47)"/><text x="14.7218%" y="63.50"></text></g><g><title>adt_drop_tys (362,966 samples, 0.42%)</title><rect x="14.4550%" y="69" width="0.4155%" height="15" fill="rgb(228,23,34)"/><text x="14.7050%" y="79.50"></text></g><g><title>adt_drop_tys (584,756 samples, 0.67%)</title><rect x="14.4156%" y="85" width="0.6694%" height="15" fill="rgb(218,30,26)"/><text x="14.6656%" y="95.50"></text></g><g><title>param_env (116,490 samples, 0.13%)</title><rect x="14.9517%" y="69" width="0.1334%" height="15" fill="rgb(220,122,19)"/><text x="15.2017%" y="79.50"></text></g><g><title>needs_drop_raw (1,265,724 samples, 1.45%)</title><rect x="14.3073%" y="101" width="1.4490%" height="15" fill="rgb(250,228,42)"/><text x="14.5573%" y="111.50"></text></g><g><title>is_copy_raw (586,368 samples, 0.67%)</title><rect x="15.0850%" y="85" width="0.6713%" height="15" fill="rgb(240,193,28)"/><text x="15.3350%" y="95.50"></text></g><g><title>evaluate_obligation (484,137 samples, 0.55%)</title><rect x="15.2021%" y="69" width="0.5542%" height="15" fill="rgb(216,20,37)"/><text x="15.4521%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (132,981 samples, 0.15%)</title><rect x="15.8611%" y="85" width="0.1522%" height="15" fill="rgb(206,188,39)"/><text x="16.1111%" y="95.50"></text></g><g><title>impl_parent (229,972 samples, 0.26%)</title><rect x="16.3710%" y="69" width="0.2633%" height="15" fill="rgb(217,207,13)"/><text x="16.6210%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (165,442 samples, 0.19%)</title><rect x="16.4449%" y="53" width="0.1894%" height="15" fill="rgb(231,73,38)"/><text x="16.6949%" y="63.50"></text></g><g><title>specialization_graph_of (981,960 samples, 1.12%)</title><rect x="16.0306%" y="85" width="1.1242%" height="15" fill="rgb(225,20,46)"/><text x="16.2806%" y="95.50"></text></g><g><title>impl_trait_ref (454,625 samples, 0.52%)</title><rect x="16.6343%" y="69" width="0.5205%" height="15" fill="rgb(210,31,41)"/><text x="16.8843%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (391,415 samples, 0.45%)</title><rect x="16.7066%" y="53" width="0.4481%" height="15" fill="rgb(221,200,47)"/><text x="16.9566%" y="63.50"></text></g><g><title>resolve_instance (1,258,534 samples, 1.44%)</title><rect x="15.7563%" y="101" width="1.4408%" height="15" fill="rgb(226,26,5)"/><text x="16.0063%" y="111.50"></text></g><g><title>thir_body (599,859 samples, 0.69%)</title><rect x="17.2259%" y="101" width="0.6867%" height="15" fill="rgb(249,33,26)"/><text x="17.4759%" y="111.50"></text></g><g><title>mir_const (6,187,318 samples, 7.08%)</title><rect x="10.8461%" y="149" width="7.0833%" height="15" fill="rgb(235,183,28)"/><text x="11.0961%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (5,408,856 samples, 6.19%)</title><rect x="11.7373%" y="133" width="6.1921%" height="15" fill="rgb(221,5,38)"/><text x="11.9873%" y="143.50">unsafety..</text></g><g><title>mir_built (4,799,729 samples, 5.49%)</title><rect x="12.4347%" y="117" width="5.4948%" height="15" fill="rgb(247,18,42)"/><text x="12.6847%" y="127.50">mir_bui..</text></g><g><title>mir_promoted (6,743,278 samples, 7.72%)</title><rect x="10.2333%" y="165" width="7.7198%" height="15" fill="rgb(241,131,45)"/><text x="10.4833%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (265,212 samples, 0.30%)</title><rect x="17.9531%" y="165" width="0.3036%" height="15" fill="rgb(249,31,29)"/><text x="18.2031%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (168,471 samples, 0.19%)</title><rect x="18.2567%" y="165" width="0.1929%" height="15" fill="rgb(225,111,53)"/><text x="18.5067%" y="175.50"></text></g><g><title>normalize_projection_ty (110,880 samples, 0.13%)</title><rect x="18.3226%" y="149" width="0.1269%" height="15" fill="rgb(238,160,17)"/><text x="18.5726%" y="159.50"></text></g><g><title>type_op_normalize_predicate (432,746 samples, 0.50%)</title><rect x="18.4496%" y="165" width="0.4954%" height="15" fill="rgb(214,148,48)"/><text x="18.6996%" y="175.50"></text></g><g><title>normalize_projection_ty (260,934 samples, 0.30%)</title><rect x="18.6463%" y="149" width="0.2987%" height="15" fill="rgb(232,36,49)"/><text x="18.8963%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,085,204 samples, 2.39%)</title><rect x="18.9450%" y="165" width="2.3872%" height="15" fill="rgb(209,103,24)"/><text x="19.1950%" y="175.50">ty..</text></g><g><title>evaluate_obligation (158,762 samples, 0.18%)</title><rect x="21.1504%" y="149" width="0.1818%" height="15" fill="rgb(229,88,8)"/><text x="21.4004%" y="159.50"></text></g><g><title>MIR_borrow_checking (18,072,523 samples, 20.69%)</title><rect x="0.6532%" y="197" width="20.6897%" height="15" fill="rgb(213,181,19)"/><text x="0.9032%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,013,191 samples, 20.62%)</title><rect x="0.7211%" y="181" width="20.6218%" height="15" fill="rgb(254,191,54)"/><text x="0.9711%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (104,962 samples, 0.12%)</title><rect x="21.3572%" y="197" width="0.1202%" height="15" fill="rgb(241,83,37)"/><text x="21.6072%" y="207.50"></text></g><g><title>should_inherit_track_caller (148,042 samples, 0.17%)</title><rect x="21.7562%" y="149" width="0.1695%" height="15" fill="rgb(233,36,39)"/><text x="22.0062%" y="159.50"></text></g><g><title>codegen_fn_attrs (269,063 samples, 0.31%)</title><rect x="21.6347%" y="165" width="0.3080%" height="15" fill="rgb(226,3,54)"/><text x="21.8847%" y="175.50"></text></g><g><title>check_mod_attrs (389,534 samples, 0.45%)</title><rect x="21.4969%" y="181" width="0.4459%" height="15" fill="rgb(245,192,40)"/><text x="21.7469%" y="191.50"></text></g><g><title>lookup_deprecation_entry (87,422 samples, 0.10%)</title><rect x="22.1590%" y="165" width="0.1001%" height="15" fill="rgb(238,167,29)"/><text x="22.4090%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (273,763 samples, 0.31%)</title><rect x="22.0414%" y="181" width="0.3134%" height="15" fill="rgb(232,182,51)"/><text x="22.2914%" y="191.50"></text></g><g><title>misc_checking_1 (795,279 samples, 0.91%)</title><rect x="21.4778%" y="197" width="0.9104%" height="15" fill="rgb(231,60,39)"/><text x="21.7278%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (285,173 samples, 0.33%)</title><rect x="22.3900%" y="181" width="0.3265%" height="15" fill="rgb(208,69,12)"/><text x="22.6400%" y="191.50"></text></g><g><title>check_mod_liveness (233,323 samples, 0.27%)</title><rect x="22.4494%" y="165" width="0.2671%" height="15" fill="rgb(235,93,37)"/><text x="22.6994%" y="175.50"></text></g><g><title>misc_checking_2 (694,937 samples, 0.80%)</title><rect x="22.3882%" y="197" width="0.7956%" height="15" fill="rgb(213,116,39)"/><text x="22.6382%" y="207.50"></text></g><g><title>match_checking (408,204 samples, 0.47%)</title><rect x="22.7165%" y="181" width="0.4673%" height="15" fill="rgb(222,207,29)"/><text x="22.9665%" y="191.50"></text></g><g><title>check_match (391,134 samples, 0.45%)</title><rect x="22.7360%" y="165" width="0.4478%" height="15" fill="rgb(206,96,30)"/><text x="22.9860%" y="175.50"></text></g><g><title>death_checking (264,263 samples, 0.30%)</title><rect x="23.2908%" y="181" width="0.3025%" height="15" fill="rgb(218,138,4)"/><text x="23.5408%" y="191.50"></text></g><g><title>item_attrs (111,082 samples, 0.13%)</title><rect x="23.4662%" y="165" width="0.1272%" height="15" fill="rgb(250,191,14)"/><text x="23.7162%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,772 samples, 0.13%)</title><rect x="23.4677%" y="149" width="0.1257%" height="15" fill="rgb(239,60,40)"/><text x="23.7177%" y="159.50"></text></g><g><title>param_env (137,452 samples, 0.16%)</title><rect x="24.1879%" y="149" width="0.1574%" height="15" fill="rgb(206,27,48)"/><text x="24.4379%" y="159.50"></text></g><g><title>crate_lints (2,063,713 samples, 2.36%)</title><rect x="23.5958%" y="165" width="2.3626%" height="15" fill="rgb(225,35,8)"/><text x="23.8458%" y="175.50">cr..</text></g><g><title>type_of (1,326,836 samples, 1.52%)</title><rect x="24.4394%" y="149" width="1.5190%" height="15" fill="rgb(250,213,24)"/><text x="24.6894%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (837,071 samples, 0.96%)</title><rect x="25.0001%" y="133" width="0.9583%" height="15" fill="rgb(247,123,22)"/><text x="25.2501%" y="143.50"></text></g><g><title>layout_of (138,912 samples, 0.16%)</title><rect x="26.2405%" y="101" width="0.1590%" height="15" fill="rgb(231,138,38)"/><text x="26.4905%" y="111.50"></text></g><g><title>layout_of (125,111 samples, 0.14%)</title><rect x="26.2563%" y="85" width="0.1432%" height="15" fill="rgb(231,145,46)"/><text x="26.5063%" y="95.50"></text></g><g><title>lint_checking (2,455,207 samples, 2.81%)</title><rect x="23.5933%" y="181" width="2.8108%" height="15" fill="rgb(251,118,11)"/><text x="23.8433%" y="191.50">li..</text></g><g><title>module_lints (389,364 samples, 0.45%)</title><rect x="25.9584%" y="165" width="0.4457%" height="15" fill="rgb(217,147,25)"/><text x="26.2084%" y="175.50"></text></g><g><title>lint_mod (386,694 samples, 0.44%)</title><rect x="25.9614%" y="149" width="0.4427%" height="15" fill="rgb(247,81,37)"/><text x="26.2114%" y="159.50"></text></g><g><title>layout_of (174,602 samples, 0.20%)</title><rect x="26.2042%" y="133" width="0.1999%" height="15" fill="rgb(209,12,38)"/><text x="26.4542%" y="143.50"></text></g><g><title>layout_of (157,552 samples, 0.18%)</title><rect x="26.2237%" y="117" width="0.1804%" height="15" fill="rgb(227,1,9)"/><text x="26.4737%" y="127.50"></text></g><g><title>privacy_access_levels (104,571 samples, 0.12%)</title><rect x="26.4041%" y="181" width="0.1197%" height="15" fill="rgb(248,47,43)"/><text x="26.6541%" y="191.50"></text></g><g><title>privacy_checking_modules (473,615 samples, 0.54%)</title><rect x="26.5238%" y="181" width="0.5422%" height="15" fill="rgb(221,10,30)"/><text x="26.7738%" y="191.50"></text></g><g><title>check_mod_privacy (471,905 samples, 0.54%)</title><rect x="26.5258%" y="165" width="0.5402%" height="15" fill="rgb(210,229,1)"/><text x="26.7758%" y="175.50"></text></g><g><title>misc_checking_3 (3,407,488 samples, 3.90%)</title><rect x="23.1838%" y="197" width="3.9009%" height="15" fill="rgb(222,148,37)"/><text x="23.4338%" y="207.50">misc..</text></g><g><title>impl_parent (2,162,596 samples, 2.48%)</title><rect x="31.4150%" y="133" width="2.4758%" height="15" fill="rgb(234,67,33)"/><text x="31.6650%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,290,722 samples, 1.48%)</title><rect x="32.4131%" y="117" width="1.4776%" height="15" fill="rgb(247,98,35)"/><text x="32.6631%" y="127.50"></text></g><g><title>impl_trait_ref (4,858,604 samples, 5.56%)</title><rect x="33.8907%" y="133" width="5.5622%" height="15" fill="rgb(247,138,52)"/><text x="34.1407%" y="143.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,987,650 samples, 4.57%)</title><rect x="34.8878%" y="117" width="4.5651%" height="15" fill="rgb(213,79,30)"/><text x="35.1378%" y="127.50">metad..</text></g><g><title>coherent_trait (11,476,728 samples, 13.14%)</title><rect x="27.1465%" y="165" width="13.1387%" height="15" fill="rgb(246,177,23)"/><text x="27.3965%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (11,457,568 samples, 13.12%)</title><rect x="27.1684%" y="149" width="13.1168%" height="15" fill="rgb(230,62,27)"/><text x="27.4184%" y="159.50">specialization_graph..</text></g><g><title>trait_impls_of (723,559 samples, 0.83%)</title><rect x="39.4568%" y="133" width="0.8283%" height="15" fill="rgb(216,154,8)"/><text x="39.7068%" y="143.50"></text></g><g><title>implementations_of_trait (199,395 samples, 0.23%)</title><rect x="40.0569%" y="117" width="0.2283%" height="15" fill="rgb(244,35,45)"/><text x="40.3069%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (160,335 samples, 0.18%)</title><rect x="40.1016%" y="101" width="0.1836%" height="15" fill="rgb(251,115,12)"/><text x="40.3516%" y="111.50"></text></g><g><title>coherence_checking (11,525,029 samples, 13.19%)</title><rect x="27.1269%" y="181" width="13.1940%" height="15" fill="rgb(240,54,50)"/><text x="27.3769%" y="191.50">coherence_checking</text></g><g><title>associated_item (132,562 samples, 0.15%)</title><rect x="47.5323%" y="117" width="0.1518%" height="15" fill="rgb(233,84,52)"/><text x="47.7823%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (106,912 samples, 0.12%)</title><rect x="47.5617%" y="101" width="0.1224%" height="15" fill="rgb(207,117,47)"/><text x="47.8117%" y="111.50"></text></g><g><title>associated_items (190,113 samples, 0.22%)</title><rect x="47.4848%" y="133" width="0.2176%" height="15" fill="rgb(249,43,39)"/><text x="47.7348%" y="143.50"></text></g><g><title>evaluate_obligation (372,556 samples, 0.43%)</title><rect x="47.8040%" y="133" width="0.4265%" height="15" fill="rgb(209,38,44)"/><text x="48.0540%" y="143.50"></text></g><g><title>predicates_of (156,951 samples, 0.18%)</title><rect x="48.6586%" y="133" width="0.1797%" height="15" fill="rgb(236,212,23)"/><text x="48.9086%" y="143.50"></text></g><g><title>predicates_defined_on (110,181 samples, 0.13%)</title><rect x="48.7121%" y="117" width="0.1261%" height="15" fill="rgb(242,79,21)"/><text x="48.9621%" y="127.50"></text></g><g><title>associated_item (468,579 samples, 0.54%)</title><rect x="58.6074%" y="101" width="0.5364%" height="15" fill="rgb(211,96,35)"/><text x="58.8574%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (367,569 samples, 0.42%)</title><rect x="58.7231%" y="85" width="0.4208%" height="15" fill="rgb(253,215,40)"/><text x="58.9731%" y="95.50"></text></g><g><title>associated_items (672,251 samples, 0.77%)</title><rect x="58.4087%" y="117" width="0.7696%" height="15" fill="rgb(211,81,21)"/><text x="58.6587%" y="127.50"></text></g><g><title>adt_def (95,030 samples, 0.11%)</title><rect x="59.5241%" y="85" width="0.1088%" height="15" fill="rgb(208,190,38)"/><text x="59.7741%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (91,730 samples, 0.11%)</title><rect x="59.5279%" y="69" width="0.1050%" height="15" fill="rgb(235,213,38)"/><text x="59.7779%" y="79.50"></text></g><g><title>adt_dtorck_constraint (109,920 samples, 0.13%)</title><rect x="59.8658%" y="37" width="0.1258%" height="15" fill="rgb(237,122,38)"/><text x="60.1158%" y="47.50"></text></g><g><title>adt_dtorck_constraint (179,694 samples, 0.21%)</title><rect x="59.8079%" y="53" width="0.2057%" height="15" fill="rgb(244,218,35)"/><text x="60.0579%" y="63.50"></text></g><g><title>adt_dtorck_constraint (256,215 samples, 0.29%)</title><rect x="59.7595%" y="69" width="0.2933%" height="15" fill="rgb(240,68,47)"/><text x="60.0095%" y="79.50"></text></g><g><title>adt_dtorck_constraint (375,415 samples, 0.43%)</title><rect x="59.6676%" y="85" width="0.4298%" height="15" fill="rgb(210,16,53)"/><text x="59.9176%" y="95.50"></text></g><g><title>dropck_outlives (801,778 samples, 0.92%)</title><rect x="59.2324%" y="117" width="0.9179%" height="15" fill="rgb(235,124,12)"/><text x="59.4824%" y="127.50"></text></g><g><title>adt_dtorck_constraint (611,975 samples, 0.70%)</title><rect x="59.4497%" y="101" width="0.7006%" height="15" fill="rgb(224,169,11)"/><text x="59.6997%" y="111.50"></text></g><g><title>adt_def (447,865 samples, 0.51%)</title><rect x="61.6175%" y="85" width="0.5127%" height="15" fill="rgb(250,166,2)"/><text x="61.8675%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (446,235 samples, 0.51%)</title><rect x="61.6194%" y="69" width="0.5109%" height="15" fill="rgb(242,216,29)"/><text x="61.8694%" y="79.50"></text></g><g><title>item_attrs (423,675 samples, 0.49%)</title><rect x="61.6452%" y="53" width="0.4850%" height="15" fill="rgb(230,116,27)"/><text x="61.8952%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (421,335 samples, 0.48%)</title><rect x="61.6479%" y="37" width="0.4824%" height="15" fill="rgb(228,99,48)"/><text x="61.8979%" y="47.50"></text></g><g><title>adt_sized_constraint (497,815 samples, 0.57%)</title><rect x="61.6046%" y="101" width="0.5699%" height="15" fill="rgb(253,11,6)"/><text x="61.8546%" y="111.50"></text></g><g><title>predicates_of (180,362 samples, 0.21%)</title><rect x="62.3736%" y="101" width="0.2065%" height="15" fill="rgb(247,143,39)"/><text x="62.6236%" y="111.50"></text></g><g><title>predicates_defined_on (111,122 samples, 0.13%)</title><rect x="62.4529%" y="85" width="0.1272%" height="15" fill="rgb(236,97,10)"/><text x="62.7029%" y="95.50"></text></g><g><title>trait_impls_of (688,698 samples, 0.79%)</title><rect x="62.6785%" y="101" width="0.7884%" height="15" fill="rgb(233,208,19)"/><text x="62.9285%" y="111.50"></text></g><g><title>implementations_of_trait (378,986 samples, 0.43%)</title><rect x="63.0330%" y="85" width="0.4339%" height="15" fill="rgb(216,164,2)"/><text x="63.2830%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (110,672 samples, 0.13%)</title><rect x="63.3402%" y="69" width="0.1267%" height="15" fill="rgb(220,129,5)"/><text x="63.5902%" y="79.50"></text></g><g><title>evaluate_obligation (2,897,929 samples, 3.32%)</title><rect x="60.1503%" y="117" width="3.3176%" height="15" fill="rgb(242,17,10)"/><text x="60.4003%" y="127.50">eva..</text></g><g><title>fn_sig (114,110 samples, 0.13%)</title><rect x="63.4888%" y="117" width="0.1306%" height="15" fill="rgb(242,107,0)"/><text x="63.7388%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (97,430 samples, 0.11%)</title><rect x="63.5079%" y="101" width="0.1115%" height="15" fill="rgb(251,28,31)"/><text x="63.7579%" y="111.50"></text></g><g><title>generics_of (99,891 samples, 0.11%)</title><rect x="63.6194%" y="117" width="0.1144%" height="15" fill="rgb(233,223,10)"/><text x="63.8694%" y="127.50"></text></g><g><title>impl_item_implementor_ids (105,481 samples, 0.12%)</title><rect x="63.7338%" y="117" width="0.1208%" height="15" fill="rgb(215,21,27)"/><text x="63.9838%" y="127.50"></text></g><g><title>associated_items (92,601 samples, 0.11%)</title><rect x="63.7486%" y="101" width="0.1060%" height="15" fill="rgb(232,23,21)"/><text x="63.9986%" y="111.50"></text></g><g><title>is_copy_raw (280,423 samples, 0.32%)</title><rect x="64.0126%" y="117" width="0.3210%" height="15" fill="rgb(244,5,23)"/><text x="64.2626%" y="127.50"></text></g><g><title>evaluate_obligation (252,123 samples, 0.29%)</title><rect x="64.0450%" y="101" width="0.2886%" height="15" fill="rgb(226,81,46)"/><text x="64.2950%" y="111.50"></text></g><g><title>trait_impls_of (128,362 samples, 0.15%)</title><rect x="64.1867%" y="85" width="0.1470%" height="15" fill="rgb(247,70,30)"/><text x="64.4367%" y="95.50"></text></g><g><title>item_attrs (111,903 samples, 0.13%)</title><rect x="64.3356%" y="117" width="0.1281%" height="15" fill="rgb(212,68,19)"/><text x="64.5856%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,773 samples, 0.12%)</title><rect x="64.3415%" y="101" width="0.1222%" height="15" fill="rgb(240,187,13)"/><text x="64.5915%" y="111.50"></text></g><g><title>evaluate_obligation (160,032 samples, 0.18%)</title><rect x="64.7457%" y="101" width="0.1832%" height="15" fill="rgb(223,113,26)"/><text x="64.9957%" y="111.50"></text></g><g><title>method_autoderef_steps (359,535 samples, 0.41%)</title><rect x="64.5287%" y="117" width="0.4116%" height="15" fill="rgb(206,192,2)"/><text x="64.7787%" y="127.50"></text></g><g><title>explicit_predicates_of (144,040 samples, 0.16%)</title><rect x="65.1627%" y="85" width="0.1649%" height="15" fill="rgb(241,108,4)"/><text x="65.4127%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (120,750 samples, 0.14%)</title><rect x="65.1894%" y="69" width="0.1382%" height="15" fill="rgb(247,173,49)"/><text x="65.4394%" y="79.50"></text></g><g><title>predicates_of (359,354 samples, 0.41%)</title><rect x="64.9659%" y="117" width="0.4114%" height="15" fill="rgb(224,114,35)"/><text x="65.2159%" y="127.50"></text></g><g><title>predicates_defined_on (261,621 samples, 0.30%)</title><rect x="65.0777%" y="101" width="0.2995%" height="15" fill="rgb(245,159,27)"/><text x="65.3277%" y="111.50"></text></g><g><title>typeck (14,587,713 samples, 16.70%)</title><rect x="48.9265%" y="133" width="16.7002%" height="15" fill="rgb(245,172,44)"/><text x="49.1765%" y="143.50">typeck</text></g><g><title>item_bodies_checking (22,109,217 samples, 25.31%)</title><rect x="40.3374%" y="181" width="25.3109%" height="15" fill="rgb(236,23,11)"/><text x="40.5874%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,106,247 samples, 25.31%)</title><rect x="40.3408%" y="165" width="25.3075%" height="15" fill="rgb(205,117,38)"/><text x="40.5908%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (22,079,087 samples, 25.28%)</title><rect x="40.3719%" y="149" width="25.2764%" height="15" fill="rgb(237,72,25)"/><text x="40.6219%" y="159.50">typeck</text></g><g><title>impl_trait_ref (185,452 samples, 0.21%)</title><rect x="66.1111%" y="101" width="0.2123%" height="15" fill="rgb(244,70,9)"/><text x="66.3611%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (163,521 samples, 0.19%)</title><rect x="66.1362%" y="85" width="0.1872%" height="15" fill="rgb(217,125,39)"/><text x="66.3862%" y="95.50"></text></g><g><title>adt_destructor (380,024 samples, 0.44%)</title><rect x="65.9256%" y="149" width="0.4351%" height="15" fill="rgb(235,36,10)"/><text x="66.1756%" y="159.50"></text></g><g><title>coherent_trait (376,684 samples, 0.43%)</title><rect x="65.9295%" y="133" width="0.4312%" height="15" fill="rgb(251,123,47)"/><text x="66.1795%" y="143.50"></text></g><g><title>specialization_graph_of (375,144 samples, 0.43%)</title><rect x="65.9312%" y="117" width="0.4295%" height="15" fill="rgb(221,13,13)"/><text x="66.1812%" y="127.50"></text></g><g><title>item_types_checking (684,267 samples, 0.78%)</title><rect x="65.6483%" y="181" width="0.7834%" height="15" fill="rgb(238,131,9)"/><text x="65.8983%" y="191.50"></text></g><g><title>check_mod_item_types (682,147 samples, 0.78%)</title><rect x="65.6507%" y="165" width="0.7809%" height="15" fill="rgb(211,50,8)"/><text x="65.9007%" y="175.50"></text></g><g><title>fn_sig (281,735 samples, 0.32%)</title><rect x="66.5826%" y="149" width="0.3225%" height="15" fill="rgb(245,182,24)"/><text x="66.8326%" y="159.50"></text></g><g><title>named_region_map (278,532 samples, 0.32%)</title><rect x="66.9677%" y="133" width="0.3189%" height="15" fill="rgb(242,14,37)"/><text x="67.2177%" y="143.50"></text></g><g><title>resolve_lifetimes (266,992 samples, 0.31%)</title><rect x="66.9809%" y="117" width="0.3057%" height="15" fill="rgb(246,228,12)"/><text x="67.2309%" y="127.50"></text></g><g><title>lint_levels (94,401 samples, 0.11%)</title><rect x="67.1785%" y="101" width="0.1081%" height="15" fill="rgb(213,55,15)"/><text x="67.4285%" y="111.50"></text></g><g><title>generics_of (345,172 samples, 0.40%)</title><rect x="66.9051%" y="149" width="0.3952%" height="15" fill="rgb(209,9,3)"/><text x="67.1551%" y="159.50"></text></g><g><title>predicates_of (203,372 samples, 0.23%)</title><rect x="67.3456%" y="149" width="0.2328%" height="15" fill="rgb(230,59,30)"/><text x="67.5956%" y="159.50"></text></g><g><title>predicates_defined_on (187,062 samples, 0.21%)</title><rect x="67.3643%" y="133" width="0.2142%" height="15" fill="rgb(209,121,21)"/><text x="67.6143%" y="143.50"></text></g><g><title>inferred_outlives_of (94,461 samples, 0.11%)</title><rect x="67.4703%" y="117" width="0.1081%" height="15" fill="rgb(220,109,13)"/><text x="67.7203%" y="127.50"></text></g><g><title>type_collecting (1,140,013 samples, 1.31%)</title><rect x="66.4343%" y="181" width="1.3051%" height="15" fill="rgb(232,18,1)"/><text x="66.6843%" y="191.50"></text></g><g><title>collect_mod_item_types (1,132,683 samples, 1.30%)</title><rect x="66.4427%" y="165" width="1.2967%" height="15" fill="rgb(215,41,42)"/><text x="66.6927%" y="175.50"></text></g><g><title>type_of (140,632 samples, 0.16%)</title><rect x="67.5784%" y="149" width="0.1610%" height="15" fill="rgb(224,123,36)"/><text x="67.8284%" y="159.50"></text></g><g><title>evaluate_obligation (116,801 samples, 0.13%)</title><rect x="68.1629%" y="149" width="0.1337%" height="15" fill="rgb(240,125,3)"/><text x="68.4129%" y="159.50"></text></g><g><title>evaluate_obligation (123,271 samples, 0.14%)</title><rect x="68.4900%" y="133" width="0.1411%" height="15" fill="rgb(205,98,50)"/><text x="68.7400%" y="143.50"></text></g><g><title>layout_of (93,042 samples, 0.11%)</title><rect x="68.6681%" y="133" width="0.1065%" height="15" fill="rgb(205,185,37)"/><text x="68.9181%" y="143.50"></text></g><g><title>object_safety_violations (457,295 samples, 0.52%)</title><rect x="68.3433%" y="149" width="0.5235%" height="15" fill="rgb(238,207,15)"/><text x="68.5933%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,050,673 samples, 1.20%)</title><rect x="67.8186%" y="165" width="1.2028%" height="15" fill="rgb(213,199,42)"/><text x="68.0686%" y="175.50"></text></g><g><title>region_scope_tree (99,101 samples, 0.11%)</title><rect x="68.9079%" y="149" width="0.1135%" height="15" fill="rgb(235,201,11)"/><text x="69.1579%" y="159.50"></text></g><g><title>adt_def (220,342 samples, 0.25%)</title><rect x="69.8783%" y="101" width="0.2523%" height="15" fill="rgb(207,46,11)"/><text x="70.1283%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (214,972 samples, 0.25%)</title><rect x="69.8844%" y="85" width="0.2461%" height="15" fill="rgb(241,35,35)"/><text x="70.1344%" y="95.50"></text></g><g><title>item_attrs (99,871 samples, 0.11%)</title><rect x="70.0162%" y="69" width="0.1143%" height="15" fill="rgb(243,32,47)"/><text x="70.2662%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (97,771 samples, 0.11%)</title><rect x="70.0186%" y="53" width="0.1119%" height="15" fill="rgb(247,202,23)"/><text x="70.2686%" y="63.50"></text></g><g><title>adt_def (126,592 samples, 0.14%)</title><rect x="70.1408%" y="85" width="0.1449%" height="15" fill="rgb(219,102,11)"/><text x="70.3908%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (125,232 samples, 0.14%)</title><rect x="70.1423%" y="69" width="0.1434%" height="15" fill="rgb(243,110,44)"/><text x="70.3923%" y="79.50"></text></g><g><title>item_attrs (99,702 samples, 0.11%)</title><rect x="70.1715%" y="53" width="0.1141%" height="15" fill="rgb(222,74,54)"/><text x="70.4215%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,112 samples, 0.11%)</title><rect x="70.1734%" y="37" width="0.1123%" height="15" fill="rgb(216,99,12)"/><text x="70.4234%" y="47.50"></text></g><g><title>adt_sized_constraint (225,404 samples, 0.26%)</title><rect x="70.1305%" y="101" width="0.2580%" height="15" fill="rgb(226,22,26)"/><text x="70.3805%" y="111.50"></text></g><g><title>adt_sized_constraint (474,186 samples, 0.54%)</title><rect x="69.8645%" y="117" width="0.5429%" height="15" fill="rgb(217,163,10)"/><text x="70.1145%" y="127.50"></text></g><g><title>adt_sized_constraint (562,757 samples, 0.64%)</title><rect x="69.7708%" y="133" width="0.6443%" height="15" fill="rgb(213,25,53)"/><text x="70.0208%" y="143.50"></text></g><g><title>evaluate_obligation (712,139 samples, 0.82%)</title><rect x="69.6018%" y="149" width="0.8153%" height="15" fill="rgb(252,105,26)"/><text x="69.8518%" y="159.50"></text></g><g><title>implied_outlives_bounds (111,482 samples, 0.13%)</title><rect x="70.4220%" y="149" width="0.1276%" height="15" fill="rgb(220,39,43)"/><text x="70.6720%" y="159.50"></text></g><g><title>param_env (143,002 samples, 0.16%)</title><rect x="70.5496%" y="149" width="0.1637%" height="15" fill="rgb(229,68,48)"/><text x="70.7996%" y="159.50"></text></g><g><title>predicates_of (100,721 samples, 0.12%)</title><rect x="70.7133%" y="149" width="0.1153%" height="15" fill="rgb(252,8,32)"/><text x="70.9633%" y="159.50"></text></g><g><title>region_scope_tree (93,770 samples, 0.11%)</title><rect x="70.8286%" y="149" width="0.1073%" height="15" fill="rgb(223,20,43)"/><text x="71.0786%" y="159.50"></text></g><g><title>analysis (61,602,119 samples, 70.52%)</title><rect x="0.4613%" y="213" width="70.5230%" height="15" fill="rgb(229,81,49)"/><text x="0.7113%" y="223.50">analysis</text></g><g><title>type_check_crate (38,346,439 samples, 43.90%)</title><rect x="27.0847%" y="197" width="43.8995%" height="15" fill="rgb(236,28,36)"/><text x="27.3347%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,831,892 samples, 3.24%)</title><rect x="67.7423%" y="181" width="3.2420%" height="15" fill="rgb(249,185,26)"/><text x="67.9923%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (1,714,589 samples, 1.96%)</title><rect x="69.0214%" y="165" width="1.9629%" height="15" fill="rgb(249,174,33)"/><text x="69.2714%" y="175.50">c..</text></g><g><title>codegen_crate (407,945 samples, 0.47%)</title><rect x="70.9924%" y="213" width="0.4670%" height="15" fill="rgb(233,201,37)"/><text x="71.2424%" y="223.50"></text></g><g><title>metadata_load_macro (114,251 samples, 0.13%)</title><rect x="83.6057%" y="165" width="0.1308%" height="15" fill="rgb(221,78,26)"/><text x="83.8557%" y="175.50"></text></g><g><title>macro_expand_crate (14,798,646 samples, 16.94%)</title><rect x="71.8011%" y="197" width="16.9417%" height="15" fill="rgb(250,127,30)"/><text x="72.0511%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (14,782,386 samples, 16.92%)</title><rect x="71.8197%" y="181" width="16.9231%" height="15" fill="rgb(230,49,44)"/><text x="72.0697%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (4,372,998 samples, 5.01%)</title><rect x="83.7365%" y="165" width="5.0063%" height="15" fill="rgb(229,67,23)"/><text x="83.9865%" y="175.50">metada..</text></g><g><title>metadata_register_crate (3,168,615 samples, 3.63%)</title><rect x="85.1153%" y="149" width="3.6275%" height="15" fill="rgb(249,83,47)"/><text x="85.3653%" y="159.50">meta..</text></g><g><title>finalize_macro_resolutions (117,371 samples, 0.13%)</title><rect x="88.8868%" y="181" width="0.1344%" height="15" fill="rgb(215,43,3)"/><text x="89.1368%" y="191.50"></text></g><g><title>late_resolve_crate (1,504,587 samples, 1.72%)</title><rect x="89.0212%" y="181" width="1.7225%" height="15" fill="rgb(238,154,13)"/><text x="89.2712%" y="191.50"></text></g><g><title>configure_and_expand (16,898,040 samples, 19.35%)</title><rect x="71.4594%" y="213" width="19.3451%" height="15" fill="rgb(219,56,2)"/><text x="71.7094%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,716,289 samples, 1.96%)</title><rect x="88.8397%" y="197" width="1.9648%" height="15" fill="rgb(233,0,4)"/><text x="89.0897%" y="207.50">r..</text></g><g><title>early_lint_checks (210,642 samples, 0.24%)</title><rect x="90.9186%" y="213" width="0.2411%" height="15" fill="rgb(235,30,7)"/><text x="91.1686%" y="223.50"></text></g><g><title>free_global_ctxt (3,382,878 samples, 3.87%)</title><rect x="91.1597%" y="213" width="3.8728%" height="15" fill="rgb(250,79,13)"/><text x="91.4097%" y="223.50">free..</text></g><g><title>generate_crate_metadata (661,697 samples, 0.76%)</title><rect x="95.0325%" y="213" width="0.7575%" height="15" fill="rgb(211,146,34)"/><text x="95.2825%" y="223.50"></text></g><g><title>hir_lowering (1,202,404 samples, 1.38%)</title><rect x="95.7900%" y="213" width="1.3765%" height="15" fill="rgb(228,22,38)"/><text x="96.0400%" y="223.50"></text></g><g><title>parse_crate (1,078,742 samples, 1.23%)</title><rect x="97.2243%" y="213" width="1.2350%" height="15" fill="rgb(235,168,5)"/><text x="97.4743%" y="223.50"></text></g><g><title>prepare_outputs (210,022 samples, 0.24%)</title><rect x="98.4657%" y="213" width="0.2404%" height="15" fill="rgb(221,155,16)"/><text x="98.7157%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (755,828 samples, 0.87%)</title><rect x="98.7061%" y="213" width="0.8653%" height="15" fill="rgb(215,215,53)"/><text x="98.9561%" y="223.50"></text></g><g><title>all (87,350,428 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (87,350,428 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (289,083 samples, 0.33%)</title><rect x="99.6691%" y="213" width="0.3309%" height="15" fill="rgb(227,97,0)"/><text x="99.9191%" y="223.50"></text></g></svg></svg>