<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (869,809 samples, 0.23%)</title><rect x="20.9153%" y="117" width="0.2308%" height="15" fill="rgb(227,0,7)"/><text x="21.1653%" y="127.50"></text></g><g><title>item_attrs (737,267 samples, 0.20%)</title><rect x="21.7775%" y="85" width="0.1957%" height="15" fill="rgb(217,0,24)"/><text x="22.0275%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (706,277 samples, 0.19%)</title><rect x="21.7858%" y="69" width="0.1874%" height="15" fill="rgb(221,193,54)"/><text x="22.0358%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,039,389 samples, 0.28%)</title><rect x="21.7104%" y="101" width="0.2758%" height="15" fill="rgb(248,212,6)"/><text x="21.9604%" y="111.50"></text></g><g><title>adt_drop_tys (470,128 samples, 0.12%)</title><rect x="25.9380%" y="53" width="0.1248%" height="15" fill="rgb(208,68,35)"/><text x="26.1880%" y="63.50"></text></g><g><title>param_env (409,384 samples, 0.11%)</title><rect x="26.1347%" y="53" width="0.1086%" height="15" fill="rgb(232,128,0)"/><text x="26.3847%" y="63.50"></text></g><g><title>adt_drop_tys (1,274,225 samples, 0.34%)</title><rect x="25.9056%" y="69" width="0.3382%" height="15" fill="rgb(207,160,47)"/><text x="26.1556%" y="79.50"></text></g><g><title>is_copy_raw (3,225,316 samples, 0.86%)</title><rect x="26.2438%" y="69" width="0.8560%" height="15" fill="rgb(228,23,34)"/><text x="26.4938%" y="79.50"></text></g><g><title>evaluate_obligation (2,637,710 samples, 0.70%)</title><rect x="26.3997%" y="53" width="0.7000%" height="15" fill="rgb(218,30,26)"/><text x="26.6497%" y="63.50"></text></g><g><title>needs_drop_raw (5,635,452 samples, 1.50%)</title><rect x="25.6985%" y="85" width="1.4956%" height="15" fill="rgb(220,122,19)"/><text x="25.9485%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,800,839 samples, 0.48%)</title><rect x="27.3600%" y="69" width="0.4779%" height="15" fill="rgb(250,228,42)"/><text x="27.6100%" y="79.50"></text></g><g><title>impl_parent (384,386 samples, 0.10%)</title><rect x="28.0404%" y="53" width="0.1020%" height="15" fill="rgb(240,193,28)"/><text x="28.2904%" y="63.50"></text></g><g><title>specialization_graph_of (1,862,751 samples, 0.49%)</title><rect x="27.8681%" y="69" width="0.4944%" height="15" fill="rgb(216,20,37)"/><text x="28.1181%" y="79.50"></text></g><g><title>impl_trait_ref (829,249 samples, 0.22%)</title><rect x="28.1424%" y="53" width="0.2201%" height="15" fill="rgb(206,188,39)"/><text x="28.3924%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (700,358 samples, 0.19%)</title><rect x="28.1766%" y="37" width="0.1859%" height="15" fill="rgb(217,207,13)"/><text x="28.4266%" y="47.50"></text></g><g><title>resolve_instance (4,607,873 samples, 1.22%)</title><rect x="27.1941%" y="85" width="1.2229%" height="15" fill="rgb(231,73,38)"/><text x="27.4441%" y="95.50"></text></g><g><title>thir_body (5,215,406 samples, 1.38%)</title><rect x="28.4444%" y="85" width="1.3841%" height="15" fill="rgb(225,20,46)"/><text x="28.6944%" y="95.50"></text></g><g><title>mir_const (37,143,680 samples, 9.86%)</title><rect x="19.9898%" y="133" width="9.8578%" height="15" fill="rgb(210,31,41)"/><text x="20.2398%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (32,786,685 samples, 8.70%)</title><rect x="21.1461%" y="117" width="8.7014%" height="15" fill="rgb(221,200,47)"/><text x="21.3961%" y="127.50">unsafety_che..</text></g><g><title>mir_built (29,589,712 samples, 7.85%)</title><rect x="21.9946%" y="101" width="7.8530%" height="15" fill="rgb(226,26,5)"/><text x="22.2446%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (1,187,025 samples, 0.32%)</title><rect x="29.8475%" y="133" width="0.3150%" height="15" fill="rgb(249,33,26)"/><text x="30.0975%" y="143.50"></text></g><g><title>mir_const (537,815 samples, 0.14%)</title><rect x="30.0198%" y="117" width="0.1427%" height="15" fill="rgb(235,183,28)"/><text x="30.2698%" y="127.50"></text></g><g><title>unsafety_check_result (424,584 samples, 0.11%)</title><rect x="30.0499%" y="101" width="0.1127%" height="15" fill="rgb(221,5,38)"/><text x="30.2999%" y="111.50"></text></g><g><title>mir_built (381,704 samples, 0.10%)</title><rect x="30.0613%" y="85" width="0.1013%" height="15" fill="rgb(247,18,42)"/><text x="30.3113%" y="95.50"></text></g><g><title>mir_promoted (42,167,023 samples, 11.19%)</title><rect x="18.9738%" y="149" width="11.1909%" height="15" fill="rgb(241,131,45)"/><text x="19.2238%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,175,460 samples, 0.31%)</title><rect x="30.1647%" y="149" width="0.3120%" height="15" fill="rgb(249,31,29)"/><text x="30.4147%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,951,537 samples, 1.05%)</title><rect x="30.4766%" y="149" width="1.0487%" height="15" fill="rgb(225,111,53)"/><text x="30.7266%" y="159.50"></text></g><g><title>normalize_projection_ty (2,771,144 samples, 0.74%)</title><rect x="30.7899%" y="133" width="0.7354%" height="15" fill="rgb(238,160,17)"/><text x="31.0399%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,425,125 samples, 0.38%)</title><rect x="31.5254%" y="149" width="0.3782%" height="15" fill="rgb(214,148,48)"/><text x="31.7754%" y="159.50"></text></g><g><title>normalize_projection_ty (932,653 samples, 0.25%)</title><rect x="31.6561%" y="133" width="0.2475%" height="15" fill="rgb(232,36,49)"/><text x="31.9061%" y="143.50"></text></g><g><title>type_op_prove_predicate (11,654,060 samples, 3.09%)</title><rect x="31.9048%" y="149" width="3.0929%" height="15" fill="rgb(209,103,24)"/><text x="32.1548%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (130,230,122 samples, 34.56%)</title><rect x="0.4399%" y="181" width="34.5624%" height="15" fill="rgb(229,88,8)"/><text x="0.6899%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (129,810,376 samples, 34.45%)</title><rect x="0.5513%" y="165" width="34.4510%" height="15" fill="rgb(213,181,19)"/><text x="0.8013%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (518,166 samples, 0.14%)</title><rect x="35.0024%" y="181" width="0.1375%" height="15" fill="rgb(254,191,54)"/><text x="35.2524%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (378,594 samples, 0.10%)</title><rect x="35.0394%" y="165" width="0.1005%" height="15" fill="rgb(241,83,37)"/><text x="35.2894%" y="175.50"></text></g><g><title>hir_module_items (494,956 samples, 0.13%)</title><rect x="35.1399%" y="181" width="0.1314%" height="15" fill="rgb(233,36,39)"/><text x="35.3899%" y="191.50"></text></g><g><title>codegen_fn_attrs (477,566 samples, 0.13%)</title><rect x="35.4594%" y="149" width="0.1267%" height="15" fill="rgb(226,3,54)"/><text x="35.7094%" y="159.50"></text></g><g><title>check_mod_attrs (1,154,772 samples, 0.31%)</title><rect x="35.2797%" y="165" width="0.3065%" height="15" fill="rgb(245,192,40)"/><text x="35.5297%" y="175.50"></text></g><g><title>lint_levels (546,216 samples, 0.14%)</title><rect x="35.8527%" y="149" width="0.1450%" height="15" fill="rgb(238,167,29)"/><text x="36.1027%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,442,545 samples, 0.38%)</title><rect x="35.7388%" y="165" width="0.3828%" height="15" fill="rgb(232,182,51)"/><text x="35.9888%" y="175.50"></text></g><g><title>misc_checking_1 (3,316,197 samples, 0.88%)</title><rect x="35.2714%" y="181" width="0.8801%" height="15" fill="rgb(231,60,39)"/><text x="35.5214%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,472,438 samples, 0.66%)</title><rect x="36.1519%" y="165" width="0.6562%" height="15" fill="rgb(208,69,12)"/><text x="36.4019%" y="175.50"></text></g><g><title>check_mod_liveness (2,110,514 samples, 0.56%)</title><rect x="36.2480%" y="149" width="0.5601%" height="15" fill="rgb(235,93,37)"/><text x="36.4980%" y="159.50"></text></g><g><title>type_uninhabited_from (569,137 samples, 0.15%)</title><rect x="36.6571%" y="133" width="0.1510%" height="15" fill="rgb(213,116,39)"/><text x="36.9071%" y="143.50"></text></g><g><title>misc_checking_2 (5,625,223 samples, 1.49%)</title><rect x="36.1515%" y="181" width="1.4929%" height="15" fill="rgb(222,207,29)"/><text x="36.4015%" y="191.50"></text></g><g><title>match_checking (3,150,985 samples, 0.84%)</title><rect x="36.8081%" y="165" width="0.8363%" height="15" fill="rgb(206,96,30)"/><text x="37.0581%" y="175.50"></text></g><g><title>check_match (3,056,085 samples, 0.81%)</title><rect x="36.8333%" y="149" width="0.8111%" height="15" fill="rgb(218,138,4)"/><text x="37.0833%" y="159.50"></text></g><g><title>check_private_in_public (580,227 samples, 0.15%)</title><rect x="37.6472%" y="165" width="0.1540%" height="15" fill="rgb(250,191,14)"/><text x="37.8972%" y="175.50"></text></g><g><title>death_checking (1,246,664 samples, 0.33%)</title><rect x="37.8012%" y="165" width="0.3309%" height="15" fill="rgb(239,60,40)"/><text x="38.0512%" y="175.50"></text></g><g><title>eval_to_allocation_raw (449,045 samples, 0.12%)</title><rect x="38.5926%" y="133" width="0.1192%" height="15" fill="rgb(206,27,48)"/><text x="38.8426%" y="143.50"></text></g><g><title>eval_to_allocation_raw (447,365 samples, 0.12%)</title><rect x="38.5931%" y="117" width="0.1187%" height="15" fill="rgb(225,35,8)"/><text x="38.8431%" y="127.50"></text></g><g><title>eval_to_const_value_raw (508,044 samples, 0.13%)</title><rect x="38.7118%" y="133" width="0.1348%" height="15" fill="rgb(250,213,24)"/><text x="38.9618%" y="143.50"></text></g><g><title>eval_to_const_value_raw (480,154 samples, 0.13%)</title><rect x="38.7192%" y="117" width="0.1274%" height="15" fill="rgb(247,123,22)"/><text x="38.9692%" y="127.50"></text></g><g><title>eval_to_allocation_raw (443,304 samples, 0.12%)</title><rect x="38.7290%" y="101" width="0.1177%" height="15" fill="rgb(231,138,38)"/><text x="38.9790%" y="111.50"></text></g><g><title>param_env (637,641 samples, 0.17%)</title><rect x="38.8466%" y="133" width="0.1692%" height="15" fill="rgb(231,145,46)"/><text x="39.0966%" y="143.50"></text></g><g><title>crate_lints (4,907,275 samples, 1.30%)</title><rect x="38.1327%" y="149" width="1.3024%" height="15" fill="rgb(251,118,11)"/><text x="38.3827%" y="159.50"></text></g><g><title>type_of (1,287,647 samples, 0.34%)</title><rect x="39.0933%" y="133" width="0.3417%" height="15" fill="rgb(217,147,25)"/><text x="39.3433%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,030,702 samples, 0.27%)</title><rect x="39.1615%" y="117" width="0.2735%" height="15" fill="rgb(247,81,37)"/><text x="39.4115%" y="127.50"></text></g><g><title>lint_checking (7,166,500 samples, 1.90%)</title><rect x="38.1321%" y="165" width="1.9020%" height="15" fill="rgb(209,12,38)"/><text x="38.3821%" y="175.50">l..</text></g><g><title>module_lints (2,256,795 samples, 0.60%)</title><rect x="39.4351%" y="149" width="0.5989%" height="15" fill="rgb(227,1,9)"/><text x="39.6851%" y="159.50"></text></g><g><title>lint_mod (2,244,925 samples, 0.60%)</title><rect x="39.4382%" y="133" width="0.5958%" height="15" fill="rgb(248,47,43)"/><text x="39.6882%" y="143.50"></text></g><g><title>privacy_access_levels (890,399 samples, 0.24%)</title><rect x="40.0340%" y="165" width="0.2363%" height="15" fill="rgb(221,10,30)"/><text x="40.2840%" y="175.50"></text></g><g><title>privacy_checking_modules (3,908,464 samples, 1.04%)</title><rect x="40.2703%" y="165" width="1.0373%" height="15" fill="rgb(210,229,1)"/><text x="40.5203%" y="175.50"></text></g><g><title>check_mod_privacy (3,900,504 samples, 1.04%)</title><rect x="40.2724%" y="149" width="1.0352%" height="15" fill="rgb(222,148,37)"/><text x="40.5224%" y="159.50"></text></g><g><title>misc_checking_3 (13,822,304 samples, 3.67%)</title><rect x="37.6444%" y="181" width="3.6684%" height="15" fill="rgb(234,67,33)"/><text x="37.8944%" y="191.50">misc..</text></g><g><title>impl_parent (1,873,312 samples, 0.50%)</title><rect x="42.3868%" y="117" width="0.4972%" height="15" fill="rgb(247,98,35)"/><text x="42.6368%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,123,474 samples, 0.30%)</title><rect x="42.5858%" y="101" width="0.2982%" height="15" fill="rgb(247,138,52)"/><text x="42.8358%" y="111.50"></text></g><g><title>impl_trait_ref (4,062,703 samples, 1.08%)</title><rect x="42.8839%" y="117" width="1.0782%" height="15" fill="rgb(213,79,30)"/><text x="43.1339%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,331,646 samples, 0.88%)</title><rect x="43.0780%" y="101" width="0.8842%" height="15" fill="rgb(246,177,23)"/><text x="43.3280%" y="111.50"></text></g><g><title>trait_impls_of (607,630 samples, 0.16%)</title><rect x="43.9701%" y="117" width="0.1613%" height="15" fill="rgb(230,62,27)"/><text x="44.2201%" y="127.50"></text></g><g><title>coherent_trait (10,419,756 samples, 2.77%)</title><rect x="41.3662%" y="149" width="2.7654%" height="15" fill="rgb(216,154,8)"/><text x="41.6162%" y="159.50">co..</text></g><g><title>specialization_graph_of (9,891,950 samples, 2.63%)</title><rect x="41.5063%" y="133" width="2.6253%" height="15" fill="rgb(244,35,45)"/><text x="41.7563%" y="143.50">sp..</text></g><g><title>coherence_checking (10,538,238 samples, 2.80%)</title><rect x="41.3598%" y="165" width="2.7968%" height="15" fill="rgb(251,115,12)"/><text x="41.6098%" y="175.50">co..</text></g><g><title>associated_items (458,660 samples, 0.12%)</title><rect x="60.2733%" y="117" width="0.1217%" height="15" fill="rgb(240,54,50)"/><text x="60.5233%" y="127.50"></text></g><g><title>adt_dtorck_constraint (450,866 samples, 0.12%)</title><rect x="61.0808%" y="37" width="0.1197%" height="15" fill="rgb(233,84,52)"/><text x="61.3308%" y="47.50"></text></g><g><title>adt_dtorck_constraint (652,736 samples, 0.17%)</title><rect x="61.0359%" y="53" width="0.1732%" height="15" fill="rgb(207,117,47)"/><text x="61.2859%" y="63.50"></text></g><g><title>adt_dtorck_constraint (830,190 samples, 0.22%)</title><rect x="60.9937%" y="69" width="0.2203%" height="15" fill="rgb(249,43,39)"/><text x="61.2437%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,144,202 samples, 0.30%)</title><rect x="60.9259%" y="85" width="0.3037%" height="15" fill="rgb(209,38,44)"/><text x="61.1759%" y="95.50"></text></g><g><title>dropck_outlives (3,037,091 samples, 0.81%)</title><rect x="60.4472%" y="117" width="0.8060%" height="15" fill="rgb(236,212,23)"/><text x="60.6972%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,700,717 samples, 0.45%)</title><rect x="60.8019%" y="101" width="0.4514%" height="15" fill="rgb(242,79,21)"/><text x="61.0519%" y="111.50"></text></g><g><title>evaluate_obligation (3,930,553 samples, 1.04%)</title><rect x="61.2532%" y="117" width="1.0431%" height="15" fill="rgb(211,96,35)"/><text x="61.5032%" y="127.50"></text></g><g><title>trait_impls_of (380,512 samples, 0.10%)</title><rect x="62.1954%" y="101" width="0.1010%" height="15" fill="rgb(253,215,40)"/><text x="62.4454%" y="111.50"></text></g><g><title>evaluate_obligation (593,565 samples, 0.16%)</title><rect x="62.8752%" y="101" width="0.1575%" height="15" fill="rgb(211,81,21)"/><text x="63.1252%" y="111.50"></text></g><g><title>method_autoderef_steps (1,195,444 samples, 0.32%)</title><rect x="62.7215%" y="117" width="0.3173%" height="15" fill="rgb(208,190,38)"/><text x="62.9715%" y="127.50"></text></g><g><title>predicates_of (871,661 samples, 0.23%)</title><rect x="63.0687%" y="117" width="0.2313%" height="15" fill="rgb(235,213,38)"/><text x="63.3187%" y="127.50"></text></g><g><title>predicates_defined_on (563,288 samples, 0.15%)</title><rect x="63.1505%" y="101" width="0.1495%" height="15" fill="rgb(237,122,38)"/><text x="63.4005%" y="111.50"></text></g><g><title>type_of (620,685 samples, 0.16%)</title><rect x="63.3094%" y="117" width="0.1647%" height="15" fill="rgb(244,218,35)"/><text x="63.5594%" y="127.50"></text></g><g><title>associated_item (485,406 samples, 0.13%)</title><rect x="77.2826%" y="85" width="0.1288%" height="15" fill="rgb(240,68,47)"/><text x="77.5326%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (389,635 samples, 0.10%)</title><rect x="77.3080%" y="69" width="0.1034%" height="15" fill="rgb(210,16,53)"/><text x="77.5580%" y="79.50"></text></g><g><title>associated_items (941,770 samples, 0.25%)</title><rect x="77.1710%" y="101" width="0.2499%" height="15" fill="rgb(235,124,12)"/><text x="77.4210%" y="111.50"></text></g><g><title>adt_dtorck_constraint (388,386 samples, 0.10%)</title><rect x="77.8531%" y="85" width="0.1031%" height="15" fill="rgb(224,169,11)"/><text x="78.1031%" y="95.50"></text></g><g><title>dropck_outlives (2,300,115 samples, 0.61%)</title><rect x="77.4547%" y="101" width="0.6104%" height="15" fill="rgb(250,166,2)"/><text x="77.7047%" y="111.50"></text></g><g><title>normalize_projection_ty (410,633 samples, 0.11%)</title><rect x="77.9562%" y="85" width="0.1090%" height="15" fill="rgb(242,216,29)"/><text x="78.2062%" y="95.50"></text></g><g><title>trait_impls_of (598,829 samples, 0.16%)</title><rect x="78.9653%" y="85" width="0.1589%" height="15" fill="rgb(230,116,27)"/><text x="79.2153%" y="95.50"></text></g><g><title>evaluate_obligation (3,993,685 samples, 1.06%)</title><rect x="78.0652%" y="101" width="1.0599%" height="15" fill="rgb(228,99,48)"/><text x="78.3152%" y="111.50"></text></g><g><title>evaluate_obligation (481,402 samples, 0.13%)</title><rect x="79.6260%" y="85" width="0.1278%" height="15" fill="rgb(253,11,6)"/><text x="79.8760%" y="95.50"></text></g><g><title>method_autoderef_steps (1,019,828 samples, 0.27%)</title><rect x="79.4861%" y="101" width="0.2707%" height="15" fill="rgb(247,143,39)"/><text x="79.7361%" y="111.50"></text></g><g><title>predicates_of (490,315 samples, 0.13%)</title><rect x="79.7650%" y="101" width="0.1301%" height="15" fill="rgb(236,97,10)"/><text x="80.0150%" y="111.50"></text></g><g><title>typeck (62,241,534 samples, 16.52%)</title><rect x="63.4741%" y="117" width="16.5186%" height="15" fill="rgb(233,208,19)"/><text x="63.7241%" y="127.50">typeck</text></g><g><title>item_bodies_checking (135,101,957 samples, 35.86%)</title><rect x="44.1688%" y="165" width="35.8554%" height="15" fill="rgb(216,164,2)"/><text x="44.4188%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (135,098,337 samples, 35.85%)</title><rect x="44.1697%" y="149" width="35.8544%" height="15" fill="rgb(220,129,5)"/><text x="44.4197%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (134,871,214 samples, 35.79%)</title><rect x="44.2300%" y="133" width="35.7942%" height="15" fill="rgb(242,17,10)"/><text x="44.4800%" y="143.50">typeck</text></g><g><title>typeck (1,659,659 samples, 0.44%)</title><rect x="80.4029%" y="133" width="0.4405%" height="15" fill="rgb(242,107,0)"/><text x="80.6529%" y="143.50"></text></g><g><title>item_types_checking (3,087,534 samples, 0.82%)</title><rect x="80.0242%" y="165" width="0.8194%" height="15" fill="rgb(251,28,31)"/><text x="80.2742%" y="175.50"></text></g><g><title>check_mod_item_types (3,078,554 samples, 0.82%)</title><rect x="80.0266%" y="149" width="0.8170%" height="15" fill="rgb(233,223,10)"/><text x="80.2766%" y="159.50"></text></g><g><title>fn_sig (725,718 samples, 0.19%)</title><rect x="81.0177%" y="133" width="0.1926%" height="15" fill="rgb(215,21,27)"/><text x="81.2677%" y="143.50"></text></g><g><title>is_late_bound_map (418,514 samples, 0.11%)</title><rect x="81.2764%" y="117" width="0.1111%" height="15" fill="rgb(232,23,21)"/><text x="81.5264%" y="127.50"></text></g><g><title>resolve_lifetimes (401,134 samples, 0.11%)</title><rect x="81.2810%" y="101" width="0.1065%" height="15" fill="rgb(244,5,23)"/><text x="81.5310%" y="111.50"></text></g><g><title>named_region_map (653,709 samples, 0.17%)</title><rect x="81.3875%" y="117" width="0.1735%" height="15" fill="rgb(226,81,46)"/><text x="81.6375%" y="127.50"></text></g><g><title>resolve_lifetimes (611,659 samples, 0.16%)</title><rect x="81.3986%" y="101" width="0.1623%" height="15" fill="rgb(247,70,30)"/><text x="81.6486%" y="111.50"></text></g><g><title>generics_of (1,347,754 samples, 0.36%)</title><rect x="81.2103%" y="133" width="0.3577%" height="15" fill="rgb(212,68,19)"/><text x="81.4603%" y="143.50"></text></g><g><title>predicates_of (1,306,106 samples, 0.35%)</title><rect x="81.5803%" y="133" width="0.3466%" height="15" fill="rgb(240,187,13)"/><text x="81.8303%" y="143.50"></text></g><g><title>predicates_defined_on (1,190,293 samples, 0.32%)</title><rect x="81.6111%" y="117" width="0.3159%" height="15" fill="rgb(223,113,26)"/><text x="81.8611%" y="127.50"></text></g><g><title>inferred_outlives_of (701,899 samples, 0.19%)</title><rect x="81.7407%" y="101" width="0.1863%" height="15" fill="rgb(206,192,2)"/><text x="81.9907%" y="111.50"></text></g><g><title>inferred_outlives_crate (658,108 samples, 0.17%)</title><rect x="81.7523%" y="85" width="0.1747%" height="15" fill="rgb(241,108,4)"/><text x="82.0023%" y="95.50"></text></g><g><title>type_of (396,284 samples, 0.11%)</title><rect x="81.8218%" y="69" width="0.1052%" height="15" fill="rgb(247,173,49)"/><text x="82.0718%" y="79.50"></text></g><g><title>type_collecting (4,221,647 samples, 1.12%)</title><rect x="80.8455%" y="165" width="1.1204%" height="15" fill="rgb(224,114,35)"/><text x="81.0955%" y="175.50"></text></g><g><title>collect_mod_item_types (4,202,716 samples, 1.12%)</title><rect x="80.8505%" y="149" width="1.1154%" height="15" fill="rgb(245,159,27)"/><text x="81.1005%" y="159.50"></text></g><g><title>evaluate_obligation (696,904 samples, 0.18%)</title><rect x="82.8618%" y="133" width="0.1850%" height="15" fill="rgb(245,172,44)"/><text x="83.1118%" y="143.50"></text></g><g><title>implied_outlives_bounds (434,206 samples, 0.12%)</title><rect x="83.0468%" y="133" width="0.1152%" height="15" fill="rgb(236,23,11)"/><text x="83.2968%" y="143.50"></text></g><g><title>object_safety_violations (822,489 samples, 0.22%)</title><rect x="83.1620%" y="133" width="0.2183%" height="15" fill="rgb(205,117,38)"/><text x="83.4120%" y="143.50"></text></g><g><title>param_env (426,874 samples, 0.11%)</title><rect x="83.3803%" y="133" width="0.1133%" height="15" fill="rgb(237,72,25)"/><text x="83.6303%" y="143.50"></text></g><g><title>region_scope_tree (983,333 samples, 0.26%)</title><rect x="83.5137%" y="133" width="0.2610%" height="15" fill="rgb(244,70,9)"/><text x="83.7637%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,369,695 samples, 1.69%)</title><rect x="82.0959%" y="149" width="1.6905%" height="15" fill="rgb(217,125,39)"/><text x="82.3459%" y="159.50"></text></g><g><title>adt_def (406,165 samples, 0.11%)</title><rect x="84.4131%" y="101" width="0.1078%" height="15" fill="rgb(235,36,10)"/><text x="84.6631%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (405,905 samples, 0.11%)</title><rect x="84.4131%" y="85" width="0.1077%" height="15" fill="rgb(251,123,47)"/><text x="84.6631%" y="95.50"></text></g><g><title>item_attrs (401,155 samples, 0.11%)</title><rect x="84.4144%" y="69" width="0.1065%" height="15" fill="rgb(221,13,13)"/><text x="84.6644%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (400,625 samples, 0.11%)</title><rect x="84.4145%" y="53" width="0.1063%" height="15" fill="rgb(238,131,9)"/><text x="84.6645%" y="63.50"></text></g><g><title>adt_sized_constraint (411,575 samples, 0.11%)</title><rect x="84.4120%" y="133" width="0.1092%" height="15" fill="rgb(211,50,8)"/><text x="84.6620%" y="143.50"></text></g><g><title>adt_sized_constraint (409,445 samples, 0.11%)</title><rect x="84.4126%" y="117" width="0.1087%" height="15" fill="rgb(245,182,24)"/><text x="84.6626%" y="127.50"></text></g><g><title>adt_sized_constraint (419,526 samples, 0.11%)</title><rect x="84.7494%" y="69" width="0.1113%" height="15" fill="rgb(242,14,37)"/><text x="84.9994%" y="79.50"></text></g><g><title>adt_sized_constraint (548,406 samples, 0.15%)</title><rect x="84.7181%" y="85" width="0.1455%" height="15" fill="rgb(246,228,12)"/><text x="84.9681%" y="95.50"></text></g><g><title>adt_sized_constraint (710,936 samples, 0.19%)</title><rect x="84.6785%" y="101" width="0.1887%" height="15" fill="rgb(213,55,15)"/><text x="84.9285%" y="111.50"></text></g><g><title>adt_sized_constraint (959,159 samples, 0.25%)</title><rect x="84.6197%" y="117" width="0.2546%" height="15" fill="rgb(209,9,3)"/><text x="84.8697%" y="127.50"></text></g><g><title>evaluate_obligation (1,406,222 samples, 0.37%)</title><rect x="84.5221%" y="133" width="0.3732%" height="15" fill="rgb(230,59,30)"/><text x="84.7721%" y="143.50"></text></g><g><title>param_env (461,205 samples, 0.12%)</title><rect x="84.9813%" y="133" width="0.1224%" height="15" fill="rgb(209,121,21)"/><text x="85.2313%" y="143.50"></text></g><g><title>region_scope_tree (657,726 samples, 0.17%)</title><rect x="85.1247%" y="133" width="0.1746%" height="15" fill="rgb(220,109,13)"/><text x="85.3747%" y="143.50"></text></g><g><title>analysis (320,779,367 samples, 85.13%)</title><rect x="0.2051%" y="197" width="85.1333%" height="15" fill="rgb(232,18,1)"/><text x="0.4551%" y="207.50">analysis</text></g><g><title>type_check_crate (165,887,120 samples, 44.03%)</title><rect x="41.3127%" y="181" width="44.0256%" height="15" fill="rgb(215,41,42)"/><text x="41.5627%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,691,972 samples, 3.37%)</title><rect x="81.9700%" y="165" width="3.3684%" height="15" fill="rgb(224,123,36)"/><text x="82.2200%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (5,847,837 samples, 1.55%)</title><rect x="83.7864%" y="149" width="1.5520%" height="15" fill="rgb(240,125,3)"/><text x="84.0364%" y="159.50"></text></g><g><title>codegen_crate (561,036 samples, 0.15%)</title><rect x="85.3400%" y="197" width="0.1489%" height="15" fill="rgb(205,98,50)"/><text x="85.5900%" y="207.50"></text></g><g><title>metadata_load_macro (513,897 samples, 0.14%)</title><rect x="91.9278%" y="149" width="0.1364%" height="15" fill="rgb(205,185,37)"/><text x="92.1778%" y="159.50"></text></g><g><title>metadata_register_crate (1,556,507 samples, 0.41%)</title><rect x="92.0642%" y="149" width="0.4131%" height="15" fill="rgb(238,207,15)"/><text x="92.3142%" y="159.50"></text></g><g><title>metadata_register_crate (645,389 samples, 0.17%)</title><rect x="92.3060%" y="133" width="0.1713%" height="15" fill="rgb(213,199,42)"/><text x="92.5560%" y="143.50"></text></g><g><title>macro_expand_crate (26,284,764 samples, 6.98%)</title><rect x="85.6668%" y="181" width="6.9758%" height="15" fill="rgb(235,201,11)"/><text x="85.9168%" y="191.50">macro_exp..</text></g><g><title>expand_crate (26,268,024 samples, 6.97%)</title><rect x="85.6712%" y="165" width="6.9714%" height="15" fill="rgb(207,46,11)"/><text x="85.9212%" y="175.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (623,145 samples, 0.17%)</title><rect x="92.4773%" y="149" width="0.1654%" height="15" fill="rgb(241,35,35)"/><text x="92.7273%" y="159.50"></text></g><g><title>late_resolve_crate (5,543,072 samples, 1.47%)</title><rect x="92.7555%" y="165" width="1.4711%" height="15" fill="rgb(243,32,47)"/><text x="93.0055%" y="175.50"></text></g><g><title>configure_and_expand (33,281,072 samples, 8.83%)</title><rect x="85.4889%" y="197" width="8.8326%" height="15" fill="rgb(247,202,23)"/><text x="85.7389%" y="207.50">configure_an..</text></g><g><title>resolve_crate (6,177,179 samples, 1.64%)</title><rect x="92.6821%" y="181" width="1.6394%" height="15" fill="rgb(219,102,11)"/><text x="92.9321%" y="191.50"></text></g><g><title>drop_ast (593,367 samples, 0.16%)</title><rect x="94.3215%" y="197" width="0.1575%" height="15" fill="rgb(243,110,44)"/><text x="94.5715%" y="207.50"></text></g><g><title>early_lint_checks (1,255,114 samples, 0.33%)</title><rect x="94.4851%" y="197" width="0.3331%" height="15" fill="rgb(222,74,54)"/><text x="94.7351%" y="207.50"></text></g><g><title>free_global_ctxt (6,014,177 samples, 1.60%)</title><rect x="94.8182%" y="197" width="1.5961%" height="15" fill="rgb(216,99,12)"/><text x="95.0682%" y="207.50"></text></g><g><title>generate_crate_metadata (2,324,556 samples, 0.62%)</title><rect x="96.4143%" y="197" width="0.6169%" height="15" fill="rgb(226,22,26)"/><text x="96.6643%" y="207.50"></text></g><g><title>hir_lowering (8,875,109 samples, 2.36%)</title><rect x="97.0312%" y="197" width="2.3554%" height="15" fill="rgb(217,163,10)"/><text x="97.2812%" y="207.50">h..</text></g><g><title>self_profile_alloc_query_strings (1,294,445 samples, 0.34%)</title><rect x="99.5294%" y="197" width="0.3435%" height="15" fill="rgb(213,25,53)"/><text x="99.7794%" y="207.50"></text></g><g><title>all (376,796,632 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (376,796,632 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>