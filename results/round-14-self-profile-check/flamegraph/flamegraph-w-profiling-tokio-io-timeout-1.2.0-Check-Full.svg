<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (128,670 samples, 0.12%)</title><rect x="11.5275%" y="117" width="0.1186%" height="15" fill="rgb(227,0,7)"/><text x="11.7775%" y="127.50"></text></g><g><title>codegen_fn_attrs (137,311 samples, 0.13%)</title><rect x="12.0198%" y="101" width="0.1266%" height="15" fill="rgb(217,0,24)"/><text x="12.2698%" y="111.50"></text></g><g><title>is_copy_raw (169,140 samples, 0.16%)</title><rect x="14.1610%" y="85" width="0.1559%" height="15" fill="rgb(221,193,54)"/><text x="14.4110%" y="95.50"></text></g><g><title>evaluate_obligation (144,600 samples, 0.13%)</title><rect x="14.1836%" y="69" width="0.1333%" height="15" fill="rgb(248,212,6)"/><text x="14.4336%" y="79.50"></text></g><g><title>adt_drop_tys (197,492 samples, 0.18%)</title><rect x="14.4606%" y="69" width="0.1821%" height="15" fill="rgb(208,68,35)"/><text x="14.7106%" y="79.50"></text></g><g><title>needs_drop_raw (1,788,878 samples, 1.65%)</title><rect x="14.3169%" y="85" width="1.6493%" height="15" fill="rgb(232,128,0)"/><text x="14.5669%" y="95.50"></text></g><g><title>is_copy_raw (1,435,576 samples, 1.32%)</title><rect x="14.6427%" y="69" width="1.3236%" height="15" fill="rgb(207,160,47)"/><text x="14.8927%" y="79.50"></text></g><g><title>evaluate_obligation (1,263,113 samples, 1.16%)</title><rect x="14.8017%" y="53" width="1.1646%" height="15" fill="rgb(228,23,34)"/><text x="15.0517%" y="63.50"></text></g><g><title>trait_impls_of (190,442 samples, 0.18%)</title><rect x="15.7907%" y="37" width="0.1756%" height="15" fill="rgb(218,30,26)"/><text x="16.0407%" y="47.50"></text></g><g><title>resolve_instance (275,548 samples, 0.25%)</title><rect x="15.9663%" y="85" width="0.2541%" height="15" fill="rgb(220,122,19)"/><text x="16.2163%" y="95.50"></text></g><g><title>thir_body (730,522 samples, 0.67%)</title><rect x="16.2459%" y="85" width="0.6735%" height="15" fill="rgb(250,228,42)"/><text x="16.4959%" y="95.50"></text></g><g><title>mir_const (6,634,256 samples, 6.12%)</title><rect x="10.8177%" y="133" width="6.1167%" height="15" fill="rgb(240,193,28)"/><text x="11.0677%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (5,735,775 samples, 5.29%)</title><rect x="11.6461%" y="117" width="5.2883%" height="15" fill="rgb(216,20,37)"/><text x="11.8961%" y="127.50">unsafe..</text></g><g><title>mir_built (5,193,180 samples, 4.79%)</title><rect x="12.1464%" y="101" width="4.7881%" height="15" fill="rgb(206,188,39)"/><text x="12.3964%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (7,499,025 samples, 6.91%)</title><rect x="10.1571%" y="149" width="6.9140%" height="15" fill="rgb(217,207,13)"/><text x="10.4071%" y="159.50">mir_promo..</text></g><g><title>mir_const_qualif (148,242 samples, 0.14%)</title><rect x="16.9345%" y="133" width="0.1367%" height="15" fill="rgb(231,73,38)"/><text x="17.1845%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (671,523 samples, 0.62%)</title><rect x="17.0711%" y="149" width="0.6191%" height="15" fill="rgb(225,20,46)"/><text x="17.3211%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (150,952 samples, 0.14%)</title><rect x="17.6903%" y="149" width="0.1392%" height="15" fill="rgb(210,31,41)"/><text x="17.9403%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,840,847 samples, 1.70%)</title><rect x="17.8786%" y="149" width="1.6972%" height="15" fill="rgb(221,200,47)"/><text x="18.1286%" y="159.50"></text></g><g><title>MIR_borrow_checking (20,358,936 samples, 18.77%)</title><rect x="0.8090%" y="181" width="18.7708%" height="15" fill="rgb(226,26,5)"/><text x="1.0590%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,227,705 samples, 18.65%)</title><rect x="0.9299%" y="165" width="18.6498%" height="15" fill="rgb(249,33,26)"/><text x="1.1799%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (173,532 samples, 0.16%)</title><rect x="19.5797%" y="181" width="0.1600%" height="15" fill="rgb(235,183,28)"/><text x="19.8297%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (127,881 samples, 0.12%)</title><rect x="19.6218%" y="165" width="0.1179%" height="15" fill="rgb(221,5,38)"/><text x="19.8718%" y="175.50"></text></g><g><title>hir_module_items (173,962 samples, 0.16%)</title><rect x="19.7397%" y="181" width="0.1604%" height="15" fill="rgb(247,18,42)"/><text x="19.9897%" y="191.50"></text></g><g><title>should_inherit_track_caller (203,883 samples, 0.19%)</title><rect x="20.2930%" y="133" width="0.1880%" height="15" fill="rgb(241,131,45)"/><text x="20.5430%" y="143.50"></text></g><g><title>codegen_fn_attrs (402,275 samples, 0.37%)</title><rect x="20.1312%" y="149" width="0.3709%" height="15" fill="rgb(249,31,29)"/><text x="20.3812%" y="159.50"></text></g><g><title>check_mod_attrs (629,597 samples, 0.58%)</title><rect x="19.9217%" y="165" width="0.5805%" height="15" fill="rgb(225,111,53)"/><text x="20.1717%" y="175.50"></text></g><g><title>check_mod_const_bodies (115,251 samples, 0.11%)</title><rect x="20.5022%" y="165" width="0.1063%" height="15" fill="rgb(238,160,17)"/><text x="20.7522%" y="175.50"></text></g><g><title>lookup_deprecation_entry (128,861 samples, 0.12%)</title><rect x="20.7762%" y="149" width="0.1188%" height="15" fill="rgb(214,148,48)"/><text x="21.0262%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (318,604 samples, 0.29%)</title><rect x="20.6637%" y="165" width="0.2938%" height="15" fill="rgb(232,36,49)"/><text x="20.9137%" y="175.50"></text></g><g><title>misc_checking_1 (1,191,603 samples, 1.10%)</title><rect x="19.9005%" y="181" width="1.0986%" height="15" fill="rgb(209,103,24)"/><text x="20.1505%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (493,736 samples, 0.46%)</title><rect x="21.0006%" y="165" width="0.4552%" height="15" fill="rgb(229,88,8)"/><text x="21.2506%" y="175.50"></text></g><g><title>check_mod_liveness (425,945 samples, 0.39%)</title><rect x="21.0631%" y="149" width="0.3927%" height="15" fill="rgb(213,181,19)"/><text x="21.3131%" y="159.50"></text></g><g><title>type_uninhabited_from (178,730 samples, 0.16%)</title><rect x="21.2910%" y="133" width="0.1648%" height="15" fill="rgb(254,191,54)"/><text x="21.5410%" y="143.50"></text></g><g><title>type_uninhabited_from (148,210 samples, 0.14%)</title><rect x="21.3192%" y="117" width="0.1366%" height="15" fill="rgb(241,83,37)"/><text x="21.5692%" y="127.50"></text></g><g><title>type_uninhabited_from (128,520 samples, 0.12%)</title><rect x="21.3373%" y="101" width="0.1185%" height="15" fill="rgb(233,36,39)"/><text x="21.5873%" y="111.50"></text></g><g><title>type_uninhabited_from (114,430 samples, 0.11%)</title><rect x="21.3503%" y="85" width="0.1055%" height="15" fill="rgb(226,3,54)"/><text x="21.6003%" y="95.50"></text></g><g><title>misc_checking_2 (923,721 samples, 0.85%)</title><rect x="20.9992%" y="181" width="0.8517%" height="15" fill="rgb(245,192,40)"/><text x="21.2492%" y="191.50"></text></g><g><title>match_checking (428,465 samples, 0.40%)</title><rect x="21.4558%" y="165" width="0.3950%" height="15" fill="rgb(238,167,29)"/><text x="21.7058%" y="175.50"></text></g><g><title>check_match (395,753 samples, 0.36%)</title><rect x="21.4860%" y="149" width="0.3649%" height="15" fill="rgb(232,182,51)"/><text x="21.7360%" y="159.50"></text></g><g><title>check_private_in_public (197,033 samples, 0.18%)</title><rect x="21.8592%" y="165" width="0.1817%" height="15" fill="rgb(231,60,39)"/><text x="22.1092%" y="175.50"></text></g><g><title>death_checking (324,473 samples, 0.30%)</title><rect x="22.0409%" y="165" width="0.2992%" height="15" fill="rgb(208,69,12)"/><text x="22.2909%" y="175.50"></text></g><g><title>eval_to_const_value_raw (206,832 samples, 0.19%)</title><rect x="23.1419%" y="133" width="0.1907%" height="15" fill="rgb(235,93,37)"/><text x="23.3919%" y="143.50"></text></g><g><title>eval_to_const_value_raw (196,612 samples, 0.18%)</title><rect x="23.1514%" y="117" width="0.1813%" height="15" fill="rgb(213,116,39)"/><text x="23.4014%" y="127.50"></text></g><g><title>eval_to_allocation_raw (186,632 samples, 0.17%)</title><rect x="23.1606%" y="101" width="0.1721%" height="15" fill="rgb(222,207,29)"/><text x="23.4106%" y="111.50"></text></g><g><title>crate_lints (2,702,911 samples, 2.49%)</title><rect x="22.3417%" y="149" width="2.4921%" height="15" fill="rgb(206,96,30)"/><text x="22.5917%" y="159.50">cr..</text></g><g><title>type_of (1,521,758 samples, 1.40%)</title><rect x="23.4307%" y="133" width="1.4030%" height="15" fill="rgb(218,138,4)"/><text x="23.6807%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,002,982 samples, 0.92%)</title><rect x="23.9091%" y="117" width="0.9247%" height="15" fill="rgb(250,191,14)"/><text x="24.1591%" y="127.50"></text></g><g><title>lint_checking (2,984,094 samples, 2.75%)</title><rect x="22.3401%" y="165" width="2.7513%" height="15" fill="rgb(239,60,40)"/><text x="22.5901%" y="175.50">li..</text></g><g><title>module_lints (279,373 samples, 0.26%)</title><rect x="24.8338%" y="149" width="0.2576%" height="15" fill="rgb(206,27,48)"/><text x="25.0838%" y="159.50"></text></g><g><title>lint_mod (276,203 samples, 0.25%)</title><rect x="24.8367%" y="133" width="0.2547%" height="15" fill="rgb(225,35,8)"/><text x="25.0867%" y="143.50"></text></g><g><title>privacy_access_levels (223,642 samples, 0.21%)</title><rect x="25.0914%" y="165" width="0.2062%" height="15" fill="rgb(250,213,24)"/><text x="25.3414%" y="175.50"></text></g><g><title>privacy_checking_modules (775,829 samples, 0.72%)</title><rect x="25.2976%" y="165" width="0.7153%" height="15" fill="rgb(247,123,22)"/><text x="25.5476%" y="175.50"></text></g><g><title>check_mod_privacy (774,178 samples, 0.71%)</title><rect x="25.2991%" y="149" width="0.7138%" height="15" fill="rgb(231,138,38)"/><text x="25.5491%" y="159.50"></text></g><g><title>misc_checking_3 (4,526,481 samples, 4.17%)</title><rect x="21.8508%" y="181" width="4.1734%" height="15" fill="rgb(231,145,46)"/><text x="22.1008%" y="191.50">misc_..</text></g><g><title>impl_parent (1,087,188 samples, 1.00%)</title><rect x="27.9154%" y="117" width="1.0024%" height="15" fill="rgb(251,118,11)"/><text x="28.1654%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (728,172 samples, 0.67%)</title><rect x="28.2464%" y="101" width="0.6714%" height="15" fill="rgb(217,147,25)"/><text x="28.4964%" y="111.50"></text></g><g><title>impl_trait_ref (3,540,183 samples, 3.26%)</title><rect x="28.9178%" y="117" width="3.2640%" height="15" fill="rgb(247,81,37)"/><text x="29.1678%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,179,649 samples, 2.93%)</title><rect x="29.2502%" y="101" width="2.9316%" height="15" fill="rgb(209,12,38)"/><text x="29.5002%" y="111.50">me..</text></g><g><title>coherent_trait (7,027,607 samples, 6.48%)</title><rect x="26.0984%" y="149" width="6.4794%" height="15" fill="rgb(227,1,9)"/><text x="26.3484%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (7,012,267 samples, 6.47%)</title><rect x="26.1126%" y="133" width="6.4652%" height="15" fill="rgb(248,47,43)"/><text x="26.3626%" y="143.50">speciali..</text></g><g><title>trait_impls_of (388,235 samples, 0.36%)</title><rect x="32.2199%" y="117" width="0.3579%" height="15" fill="rgb(221,10,30)"/><text x="32.4699%" y="127.50"></text></g><g><title>implementations_of_trait (123,061 samples, 0.11%)</title><rect x="32.4643%" y="101" width="0.1135%" height="15" fill="rgb(210,229,1)"/><text x="32.7143%" y="111.50"></text></g><g><title>orphan_check_crate (184,882 samples, 0.17%)</title><rect x="32.6136%" y="149" width="0.1705%" height="15" fill="rgb(222,148,37)"/><text x="32.8636%" y="159.50"></text></g><g><title>coherence_checking (7,277,921 samples, 6.71%)</title><rect x="26.0831%" y="165" width="6.7102%" height="15" fill="rgb(234,67,33)"/><text x="26.3331%" y="175.50">coherence..</text></g><g><title>associated_items (139,871 samples, 0.13%)</title><rect x="48.3943%" y="117" width="0.1290%" height="15" fill="rgb(247,98,35)"/><text x="48.6443%" y="127.50"></text></g><g><title>adt_def (332,544 samples, 0.31%)</title><rect x="49.0160%" y="85" width="0.3066%" height="15" fill="rgb(247,138,52)"/><text x="49.2660%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (327,834 samples, 0.30%)</title><rect x="49.0204%" y="69" width="0.3023%" height="15" fill="rgb(213,79,30)"/><text x="49.2704%" y="79.50"></text></g><g><title>item_attrs (126,911 samples, 0.12%)</title><rect x="49.2056%" y="53" width="0.1170%" height="15" fill="rgb(246,177,23)"/><text x="49.4556%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (122,001 samples, 0.11%)</title><rect x="49.2101%" y="37" width="0.1125%" height="15" fill="rgb(230,62,27)"/><text x="49.4601%" y="47.50"></text></g><g><title>adt_def (170,802 samples, 0.16%)</title><rect x="49.4782%" y="53" width="0.1575%" height="15" fill="rgb(216,154,8)"/><text x="49.7282%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (169,332 samples, 0.16%)</title><rect x="49.4796%" y="37" width="0.1561%" height="15" fill="rgb(244,35,45)"/><text x="49.7296%" y="47.50"></text></g><g><title>adt_dtorck_constraint (117,781 samples, 0.11%)</title><rect x="49.7305%" y="37" width="0.1086%" height="15" fill="rgb(251,115,12)"/><text x="49.9805%" y="47.50"></text></g><g><title>adt_dtorck_constraint (217,893 samples, 0.20%)</title><rect x="49.6457%" y="53" width="0.2009%" height="15" fill="rgb(240,54,50)"/><text x="49.8957%" y="63.50"></text></g><g><title>adt_dtorck_constraint (441,345 samples, 0.41%)</title><rect x="49.4593%" y="69" width="0.4069%" height="15" fill="rgb(233,84,52)"/><text x="49.7093%" y="79.50"></text></g><g><title>adt_dtorck_constraint (594,068 samples, 0.55%)</title><rect x="49.3491%" y="85" width="0.5477%" height="15" fill="rgb(207,117,47)"/><text x="49.5991%" y="95.50"></text></g><g><title>dropck_outlives (1,498,642 samples, 1.38%)</title><rect x="48.5618%" y="117" width="1.3817%" height="15" fill="rgb(249,43,39)"/><text x="48.8118%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,087,582 samples, 1.00%)</title><rect x="48.9408%" y="101" width="1.0027%" height="15" fill="rgb(209,38,44)"/><text x="49.1908%" y="111.50"></text></g><g><title>adt_sized_constraint (115,002 samples, 0.11%)</title><rect x="50.5914%" y="101" width="0.1060%" height="15" fill="rgb(236,212,23)"/><text x="50.8414%" y="111.50"></text></g><g><title>evaluate_obligation (1,296,797 samples, 1.20%)</title><rect x="49.9436%" y="117" width="1.1956%" height="15" fill="rgb(242,79,21)"/><text x="50.1936%" y="127.50"></text></g><g><title>trait_impls_of (267,914 samples, 0.25%)</title><rect x="50.8922%" y="101" width="0.2470%" height="15" fill="rgb(211,96,35)"/><text x="51.1422%" y="111.50"></text></g><g><title>implementations_of_trait (116,962 samples, 0.11%)</title><rect x="51.0314%" y="85" width="0.1078%" height="15" fill="rgb(253,215,40)"/><text x="51.2814%" y="95.50"></text></g><g><title>method_autoderef_steps (1,207,686 samples, 1.11%)</title><rect x="51.4905%" y="117" width="1.1135%" height="15" fill="rgb(211,81,21)"/><text x="51.7405%" y="127.50"></text></g><g><title>evaluate_obligation (369,584 samples, 0.34%)</title><rect x="52.2632%" y="101" width="0.3408%" height="15" fill="rgb(208,190,38)"/><text x="52.5132%" y="111.50"></text></g><g><title>object_safety_violations (158,392 samples, 0.15%)</title><rect x="52.6039%" y="117" width="0.1460%" height="15" fill="rgb(235,213,38)"/><text x="52.8539%" y="127.50"></text></g><g><title>predicates_of (203,020 samples, 0.19%)</title><rect x="52.8021%" y="117" width="0.1872%" height="15" fill="rgb(237,122,38)"/><text x="53.0521%" y="127.50"></text></g><g><title>predicates_defined_on (132,650 samples, 0.12%)</title><rect x="52.8669%" y="101" width="0.1223%" height="15" fill="rgb(244,218,35)"/><text x="53.1169%" y="111.50"></text></g><g><title>type_of (245,523 samples, 0.23%)</title><rect x="52.9971%" y="117" width="0.2264%" height="15" fill="rgb(240,68,47)"/><text x="53.2471%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (231,863 samples, 0.21%)</title><rect x="53.0097%" y="101" width="0.2138%" height="15" fill="rgb(210,16,53)"/><text x="53.2597%" y="111.50"></text></g><g><title>item_bodies_checking (22,174,377 samples, 20.44%)</title><rect x="32.8248%" y="165" width="20.4446%" height="15" fill="rgb(235,124,12)"/><text x="33.0748%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,172,007 samples, 20.44%)</title><rect x="32.8270%" y="149" width="20.4424%" height="15" fill="rgb(224,169,11)"/><text x="33.0770%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (22,063,587 samples, 20.34%)</title><rect x="32.9269%" y="133" width="20.3424%" height="15" fill="rgb(250,166,2)"/><text x="33.1769%" y="143.50">typeck</text></g><g><title>adt_destructor (510,705 samples, 0.47%)</title><rect x="54.1691%" y="133" width="0.4709%" height="15" fill="rgb(242,216,29)"/><text x="54.4191%" y="143.50"></text></g><g><title>coherent_trait (502,975 samples, 0.46%)</title><rect x="54.1762%" y="117" width="0.4637%" height="15" fill="rgb(230,116,27)"/><text x="54.4262%" y="127.50"></text></g><g><title>specialization_graph_of (500,675 samples, 0.46%)</title><rect x="54.1783%" y="101" width="0.4616%" height="15" fill="rgb(228,99,48)"/><text x="54.4283%" y="111.50"></text></g><g><title>impl_trait_ref (249,784 samples, 0.23%)</title><rect x="54.4096%" y="85" width="0.2303%" height="15" fill="rgb(253,11,6)"/><text x="54.6596%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (213,534 samples, 0.20%)</title><rect x="54.4431%" y="69" width="0.1969%" height="15" fill="rgb(247,143,39)"/><text x="54.6931%" y="79.50"></text></g><g><title>item_types_checking (1,810,300 samples, 1.67%)</title><rect x="53.2694%" y="165" width="1.6691%" height="15" fill="rgb(236,97,10)"/><text x="53.5194%" y="175.50"></text></g><g><title>check_mod_item_types (1,807,950 samples, 1.67%)</title><rect x="53.2715%" y="149" width="1.6669%" height="15" fill="rgb(233,208,19)"/><text x="53.5215%" y="159.50"></text></g><g><title>typeck (154,302 samples, 0.14%)</title><rect x="54.7962%" y="133" width="0.1423%" height="15" fill="rgb(216,164,2)"/><text x="55.0462%" y="143.50"></text></g><g><title>fn_sig (329,973 samples, 0.30%)</title><rect x="55.2172%" y="133" width="0.3042%" height="15" fill="rgb(220,129,5)"/><text x="55.4672%" y="143.50"></text></g><g><title>is_late_bound_map (446,607 samples, 0.41%)</title><rect x="55.6352%" y="117" width="0.4118%" height="15" fill="rgb(242,17,10)"/><text x="55.8852%" y="127.50"></text></g><g><title>resolve_lifetimes (436,967 samples, 0.40%)</title><rect x="55.6441%" y="101" width="0.4029%" height="15" fill="rgb(242,107,0)"/><text x="55.8941%" y="111.50"></text></g><g><title>lint_levels (332,854 samples, 0.31%)</title><rect x="55.7401%" y="85" width="0.3069%" height="15" fill="rgb(251,28,31)"/><text x="55.9901%" y="95.50"></text></g><g><title>generics_of (637,819 samples, 0.59%)</title><rect x="55.5215%" y="133" width="0.5881%" height="15" fill="rgb(233,223,10)"/><text x="55.7715%" y="143.50"></text></g><g><title>late_bound_vars_map (265,211 samples, 0.24%)</title><rect x="56.4954%" y="85" width="0.2445%" height="15" fill="rgb(215,21,27)"/><text x="56.7454%" y="95.50"></text></g><g><title>resolve_lifetimes (252,141 samples, 0.23%)</title><rect x="56.5075%" y="69" width="0.2325%" height="15" fill="rgb(232,23,21)"/><text x="56.7575%" y="79.50"></text></g><g><title>explicit_predicates_of (492,255 samples, 0.45%)</title><rect x="56.3001%" y="101" width="0.4539%" height="15" fill="rgb(244,5,23)"/><text x="56.5501%" y="111.50"></text></g><g><title>predicates_of (1,176,053 samples, 1.08%)</title><rect x="56.1469%" y="133" width="1.0843%" height="15" fill="rgb(226,81,46)"/><text x="56.3969%" y="143.50"></text></g><g><title>predicates_defined_on (1,117,171 samples, 1.03%)</title><rect x="56.2012%" y="117" width="1.0300%" height="15" fill="rgb(247,70,30)"/><text x="56.4512%" y="127.50"></text></g><g><title>inferred_outlives_of (517,736 samples, 0.48%)</title><rect x="56.7539%" y="101" width="0.4773%" height="15" fill="rgb(212,68,19)"/><text x="57.0039%" y="111.50"></text></g><g><title>inferred_outlives_crate (493,206 samples, 0.45%)</title><rect x="56.7765%" y="85" width="0.4547%" height="15" fill="rgb(240,187,13)"/><text x="57.0265%" y="95.50"></text></g><g><title>type_of (276,673 samples, 0.26%)</title><rect x="56.9762%" y="69" width="0.2551%" height="15" fill="rgb(223,113,26)"/><text x="57.2262%" y="79.50"></text></g><g><title>type_collecting (2,644,400 samples, 2.44%)</title><rect x="54.9400%" y="165" width="2.4381%" height="15" fill="rgb(206,192,2)"/><text x="55.1900%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,636,520 samples, 2.43%)</title><rect x="54.9472%" y="149" width="2.4308%" height="15" fill="rgb(241,108,4)"/><text x="55.1972%" y="159.50">co..</text></g><g><title>type_of (125,882 samples, 0.12%)</title><rect x="57.2620%" y="133" width="0.1161%" height="15" fill="rgb(247,173,49)"/><text x="57.5120%" y="143.50"></text></g><g><title>adt_sized_constraint (128,433 samples, 0.12%)</title><rect x="62.1686%" y="117" width="0.1184%" height="15" fill="rgb(224,114,35)"/><text x="62.4186%" y="127.50"></text></g><g><title>evaluate_obligation (1,339,810 samples, 1.24%)</title><rect x="61.1654%" y="133" width="1.2353%" height="15" fill="rgb(245,159,27)"/><text x="61.4154%" y="143.50"></text></g><g><title>implied_outlives_bounds (493,136 samples, 0.45%)</title><rect x="62.4224%" y="133" width="0.4547%" height="15" fill="rgb(245,172,44)"/><text x="62.6724%" y="143.50"></text></g><g><title>param_env (405,491 samples, 0.37%)</title><rect x="62.8770%" y="133" width="0.3739%" height="15" fill="rgb(236,23,11)"/><text x="63.1270%" y="143.50"></text></g><g><title>region_scope_tree (316,922 samples, 0.29%)</title><rect x="63.2958%" y="133" width="0.2922%" height="15" fill="rgb(205,117,38)"/><text x="63.5458%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,506,933 samples, 6.00%)</title><rect x="57.5923%" y="149" width="5.9993%" height="15" fill="rgb(237,72,25)"/><text x="57.8423%" y="159.50">check_im..</text></g><g><title>evaluate_obligation (166,802 samples, 0.15%)</title><rect x="65.1608%" y="133" width="0.1538%" height="15" fill="rgb(244,70,9)"/><text x="65.4108%" y="143.50"></text></g><g><title>implied_outlives_bounds (144,031 samples, 0.13%)</title><rect x="65.3288%" y="133" width="0.1328%" height="15" fill="rgb(217,125,39)"/><text x="65.5788%" y="143.50"></text></g><g><title>param_env (377,643 samples, 0.35%)</title><rect x="65.4616%" y="133" width="0.3482%" height="15" fill="rgb(235,36,10)"/><text x="65.7116%" y="143.50"></text></g><g><title>analysis (70,994,530 samples, 65.46%)</title><rect x="0.5567%" y="197" width="65.4563%" height="15" fill="rgb(251,123,47)"/><text x="0.8067%" y="207.50">analysis</text></g><g><title>type_check_crate (43,372,172 samples, 39.99%)</title><rect x="26.0242%" y="181" width="39.9888%" height="15" fill="rgb(221,13,13)"/><text x="26.2742%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,359,634 samples, 8.63%)</title><rect x="57.3835%" y="165" width="8.6295%" height="15" fill="rgb(238,131,9)"/><text x="57.6335%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (2,626,261 samples, 2.42%)</title><rect x="63.5916%" y="149" width="2.4214%" height="15" fill="rgb(211,50,8)"/><text x="63.8416%" y="159.50">ch..</text></g><g><title>variances_of (118,891 samples, 0.11%)</title><rect x="65.9034%" y="133" width="0.1096%" height="15" fill="rgb(245,182,24)"/><text x="66.1534%" y="143.50"></text></g><g><title>crate_variances (112,371 samples, 0.10%)</title><rect x="65.9094%" y="117" width="0.1036%" height="15" fill="rgb(242,14,37)"/><text x="66.1594%" y="127.50"></text></g><g><title>codegen_crate (448,565 samples, 0.41%)</title><rect x="66.0202%" y="197" width="0.4136%" height="15" fill="rgb(246,228,12)"/><text x="66.2702%" y="207.50"></text></g><g><title>AST_validation (261,233 samples, 0.24%)</title><rect x="66.5769%" y="181" width="0.2409%" height="15" fill="rgb(213,55,15)"/><text x="66.8269%" y="191.50"></text></g><g><title>metadata_load_macro (634,216 samples, 0.58%)</title><rect x="81.0386%" y="149" width="0.5847%" height="15" fill="rgb(209,9,3)"/><text x="81.2886%" y="159.50"></text></g><g><title>macro_expand_crate (21,507,779 samples, 19.83%)</title><rect x="66.9237%" y="181" width="19.8300%" height="15" fill="rgb(230,59,30)"/><text x="67.1737%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (21,489,909 samples, 19.81%)</title><rect x="66.9402%" y="165" width="19.8135%" height="15" fill="rgb(209,121,21)"/><text x="67.1902%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (5,564,452 samples, 5.13%)</title><rect x="81.6233%" y="149" width="5.1304%" height="15" fill="rgb(220,109,13)"/><text x="81.8733%" y="159.50">metada..</text></g><g><title>metadata_register_crate (4,237,837 samples, 3.91%)</title><rect x="82.8465%" y="133" width="3.9072%" height="15" fill="rgb(232,18,1)"/><text x="83.0965%" y="143.50">meta..</text></g><g><title>metadata_register_crate (205,542 samples, 0.19%)</title><rect x="86.5642%" y="117" width="0.1895%" height="15" fill="rgb(215,41,42)"/><text x="86.8142%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (166,222 samples, 0.15%)</title><rect x="86.7571%" y="181" width="0.1533%" height="15" fill="rgb(224,123,36)"/><text x="87.0071%" y="191.50"></text></g><g><title>late_resolve_crate (1,408,405 samples, 1.30%)</title><rect x="87.0628%" y="165" width="1.2985%" height="15" fill="rgb(240,125,3)"/><text x="87.3128%" y="175.50"></text></g><g><title>configure_and_expand (23,883,765 samples, 22.02%)</title><rect x="66.4338%" y="197" width="22.0206%" height="15" fill="rgb(205,98,50)"/><text x="66.6838%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,674,698 samples, 1.54%)</title><rect x="86.9104%" y="181" width="1.5441%" height="15" fill="rgb(205,185,37)"/><text x="87.1604%" y="191.50"></text></g><g><title>drop_ast (240,282 samples, 0.22%)</title><rect x="88.4544%" y="197" width="0.2215%" height="15" fill="rgb(238,207,15)"/><text x="88.7044%" y="207.50"></text></g><g><title>early_lint_checks (695,858 samples, 0.64%)</title><rect x="88.6945%" y="197" width="0.6416%" height="15" fill="rgb(213,199,42)"/><text x="88.9445%" y="207.50"></text></g><g><title>free_global_ctxt (3,422,338 samples, 3.16%)</title><rect x="89.3361%" y="197" width="3.1554%" height="15" fill="rgb(235,201,11)"/><text x="89.5861%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (1,496,936 samples, 1.38%)</title><rect x="92.4915%" y="197" width="1.3802%" height="15" fill="rgb(207,46,11)"/><text x="92.7415%" y="207.50"></text></g><g><title>hir_lowering (2,827,682 samples, 2.61%)</title><rect x="93.8717%" y="197" width="2.6071%" height="15" fill="rgb(241,35,35)"/><text x="94.1217%" y="207.50">hi..</text></g><g><title>parse_crate (2,399,057 samples, 2.21%)</title><rect x="96.5361%" y="197" width="2.2119%" height="15" fill="rgb(243,32,47)"/><text x="96.7861%" y="207.50">p..</text></g><g><title>prepare_outputs (208,462 samples, 0.19%)</title><rect x="98.7535%" y="197" width="0.1922%" height="15" fill="rgb(247,202,23)"/><text x="99.0035%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (704,078 samples, 0.65%)</title><rect x="98.9457%" y="197" width="0.6492%" height="15" fill="rgb(219,102,11)"/><text x="99.1957%" y="207.50"></text></g><g><title>all (108,460,926 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (108,460,926 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (332,624 samples, 0.31%)</title><rect x="99.6933%" y="197" width="0.3067%" height="15" fill="rgb(216,99,12)"/><text x="99.9433%" y="207.50"></text></g></svg></svg>