<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (729,749 samples, 0.11%)</title><rect x="13.9985%" y="181" width="0.1058%" height="15" fill="rgb(227,0,7)"/><text x="14.2485%" y="191.50"></text></g><g><title>codegen_fn_attrs (782,998 samples, 0.11%)</title><rect x="14.4965%" y="165" width="0.1135%" height="15" fill="rgb(217,0,24)"/><text x="14.7465%" y="175.50"></text></g><g><title>is_copy_raw (2,740,728 samples, 0.40%)</title><rect x="17.2511%" y="133" width="0.3972%" height="15" fill="rgb(221,193,54)"/><text x="17.5011%" y="143.50"></text></g><g><title>evaluate_obligation (2,271,410 samples, 0.33%)</title><rect x="17.3191%" y="117" width="0.3292%" height="15" fill="rgb(248,212,6)"/><text x="17.5691%" y="127.50"></text></g><g><title>needs_drop_raw (3,409,675 samples, 0.49%)</title><rect x="17.1566%" y="149" width="0.4941%" height="15" fill="rgb(208,68,35)"/><text x="17.4066%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (1,319,384 samples, 0.19%)</title><rect x="17.7533%" y="133" width="0.1912%" height="15" fill="rgb(232,128,0)"/><text x="18.0033%" y="143.50"></text></g><g><title>resolve_instance (2,473,377 samples, 0.36%)</title><rect x="17.6507%" y="149" width="0.3584%" height="15" fill="rgb(207,160,47)"/><text x="17.9007%" y="159.50"></text></g><g><title>thir_body (6,941,085 samples, 1.01%)</title><rect x="18.0278%" y="149" width="1.0059%" height="15" fill="rgb(228,23,34)"/><text x="18.2778%" y="159.50"></text></g><g><title>mir_const (39,212,033 samples, 5.68%)</title><rect x="13.3690%" y="197" width="5.6826%" height="15" fill="rgb(218,30,26)"/><text x="13.6190%" y="207.50">mir_con..</text></g><g><title>unsafety_check_result (34,137,986 samples, 4.95%)</title><rect x="14.1043%" y="181" width="4.9472%" height="15" fill="rgb(220,122,19)"/><text x="14.3543%" y="191.50">unsafe..</text></g><g><title>mir_built (30,648,437 samples, 4.44%)</title><rect x="14.6100%" y="165" width="4.4415%" height="15" fill="rgb(250,228,42)"/><text x="14.8600%" y="175.50">mir_b..</text></g><g><title>mir_promoted (44,582,291 samples, 6.46%)</title><rect x="12.7275%" y="213" width="6.4608%" height="15" fill="rgb(240,193,28)"/><text x="12.9775%" y="223.50">mir_prom..</text></g><g><title>mir_const_qualif (943,840 samples, 0.14%)</title><rect x="19.0515%" y="197" width="0.1368%" height="15" fill="rgb(216,20,37)"/><text x="19.3015%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (1,381,586 samples, 0.20%)</title><rect x="19.1887%" y="213" width="0.2002%" height="15" fill="rgb(206,188,39)"/><text x="19.4387%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (3,103,440 samples, 0.45%)</title><rect x="19.3889%" y="213" width="0.4497%" height="15" fill="rgb(217,207,13)"/><text x="19.6389%" y="223.50"></text></g><g><title>normalize_projection_ty (1,807,918 samples, 0.26%)</title><rect x="19.5766%" y="197" width="0.2620%" height="15" fill="rgb(231,73,38)"/><text x="19.8266%" y="207.50"></text></g><g><title>type_op_normalize_predicate (2,093,871 samples, 0.30%)</title><rect x="19.8386%" y="213" width="0.3034%" height="15" fill="rgb(225,20,46)"/><text x="20.0886%" y="223.50"></text></g><g><title>normalize_projection_ty (1,004,928 samples, 0.15%)</title><rect x="19.9964%" y="197" width="0.1456%" height="15" fill="rgb(210,31,41)"/><text x="20.2464%" y="207.50"></text></g><g><title>type_op_prove_predicate (10,967,278 samples, 1.59%)</title><rect x="20.1991%" y="213" width="1.5894%" height="15" fill="rgb(221,200,47)"/><text x="20.4491%" y="223.50"></text></g><g><title>MIR_borrow_checking (147,639,358 samples, 21.40%)</title><rect x="0.3964%" y="245" width="21.3957%" height="15" fill="rgb(226,26,5)"/><text x="0.6464%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (147,008,431 samples, 21.30%)</title><rect x="0.4879%" y="229" width="21.3043%" height="15" fill="rgb(249,33,26)"/><text x="0.7379%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (1,036,802 samples, 0.15%)</title><rect x="21.8793%" y="245" width="0.1503%" height="15" fill="rgb(235,183,28)"/><text x="22.1293%" y="255.50"></text></g><g><title>codegen_fn_attrs (893,209 samples, 0.13%)</title><rect x="22.2359%" y="213" width="0.1294%" height="15" fill="rgb(221,5,38)"/><text x="22.4859%" y="223.50"></text></g><g><title>should_inherit_track_caller (702,399 samples, 0.10%)</title><rect x="22.2635%" y="197" width="0.1018%" height="15" fill="rgb(247,18,42)"/><text x="22.5135%" y="207.50"></text></g><g><title>check_mod_attrs (2,271,206 samples, 0.33%)</title><rect x="22.0362%" y="229" width="0.3291%" height="15" fill="rgb(241,131,45)"/><text x="22.2862%" y="239.50"></text></g><g><title>lint_levels (1,190,243 samples, 0.17%)</title><rect x="22.6089%" y="213" width="0.1725%" height="15" fill="rgb(249,31,29)"/><text x="22.8589%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (2,603,869 samples, 0.38%)</title><rect x="22.5112%" y="229" width="0.3773%" height="15" fill="rgb(225,111,53)"/><text x="22.7612%" y="239.50"></text></g><g><title>misc_checking_1 (6,145,839 samples, 0.89%)</title><rect x="22.0296%" y="245" width="0.8906%" height="15" fill="rgb(238,160,17)"/><text x="22.2796%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (3,175,855 samples, 0.46%)</title><rect x="22.9207%" y="229" width="0.4602%" height="15" fill="rgb(214,148,48)"/><text x="23.1707%" y="239.50"></text></g><g><title>check_mod_liveness (2,571,955 samples, 0.37%)</title><rect x="23.0082%" y="213" width="0.3727%" height="15" fill="rgb(232,36,49)"/><text x="23.2582%" y="223.50"></text></g><g><title>mir_borrowck (1,316,635 samples, 0.19%)</title><rect x="24.4321%" y="117" width="0.1908%" height="15" fill="rgb(209,103,24)"/><text x="24.6821%" y="127.50"></text></g><g><title>mir_for_ctfe (2,402,636 samples, 0.35%)</title><rect x="24.2759%" y="149" width="0.3482%" height="15" fill="rgb(229,88,8)"/><text x="24.5259%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,872,930 samples, 0.27%)</title><rect x="24.3526%" y="133" width="0.2714%" height="15" fill="rgb(213,181,19)"/><text x="24.6026%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,890,295 samples, 0.42%)</title><rect x="24.2059%" y="197" width="0.4189%" height="15" fill="rgb(254,191,54)"/><text x="24.4559%" y="207.50"></text></g><g><title>eval_to_const_value_raw (2,864,765 samples, 0.42%)</title><rect x="24.2096%" y="181" width="0.4152%" height="15" fill="rgb(241,83,37)"/><text x="24.4596%" y="191.50"></text></g><g><title>eval_to_allocation_raw (2,813,213 samples, 0.41%)</title><rect x="24.2171%" y="165" width="0.4077%" height="15" fill="rgb(233,36,39)"/><text x="24.4671%" y="175.50"></text></g><g><title>misc_checking_2 (12,750,792 samples, 1.85%)</title><rect x="22.9203%" y="245" width="1.8478%" height="15" fill="rgb(226,3,54)"/><text x="23.1703%" y="255.50">m..</text></g><g><title>match_checking (9,572,187 samples, 1.39%)</title><rect x="23.3809%" y="229" width="1.3872%" height="15" fill="rgb(245,192,40)"/><text x="23.6309%" y="239.50"></text></g><g><title>check_match (9,120,432 samples, 1.32%)</title><rect x="23.4464%" y="213" width="1.3217%" height="15" fill="rgb(238,167,29)"/><text x="23.6964%" y="223.50"></text></g><g><title>check_private_in_public (964,361 samples, 0.14%)</title><rect x="24.7701%" y="229" width="0.1398%" height="15" fill="rgb(232,182,51)"/><text x="25.0201%" y="239.50"></text></g><g><title>death_checking (1,929,112 samples, 0.28%)</title><rect x="24.9098%" y="229" width="0.2796%" height="15" fill="rgb(231,60,39)"/><text x="25.1598%" y="239.50"></text></g><g><title>param_env (1,076,122 samples, 0.16%)</title><rect x="25.6705%" y="197" width="0.1560%" height="15" fill="rgb(208,69,12)"/><text x="25.9205%" y="207.50"></text></g><g><title>crate_lints (6,010,587 samples, 0.87%)</title><rect x="25.1899%" y="213" width="0.8710%" height="15" fill="rgb(235,93,37)"/><text x="25.4399%" y="223.50"></text></g><g><title>type_of (1,488,587 samples, 0.22%)</title><rect x="25.8452%" y="197" width="0.2157%" height="15" fill="rgb(213,116,39)"/><text x="26.0952%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (1,016,112 samples, 0.15%)</title><rect x="25.9137%" y="181" width="0.1473%" height="15" fill="rgb(222,207,29)"/><text x="26.1637%" y="191.50"></text></g><g><title>lint_checking (10,146,163 samples, 1.47%)</title><rect x="25.1894%" y="229" width="1.4704%" height="15" fill="rgb(206,96,30)"/><text x="25.4394%" y="239.50"></text></g><g><title>module_lints (4,132,056 samples, 0.60%)</title><rect x="26.0609%" y="213" width="0.5988%" height="15" fill="rgb(218,138,4)"/><text x="26.3109%" y="223.50"></text></g><g><title>lint_mod (4,115,676 samples, 0.60%)</title><rect x="26.0633%" y="197" width="0.5964%" height="15" fill="rgb(250,191,14)"/><text x="26.3133%" y="207.50"></text></g><g><title>privacy_access_levels (2,648,229 samples, 0.38%)</title><rect x="26.6597%" y="229" width="0.3838%" height="15" fill="rgb(239,60,40)"/><text x="26.9097%" y="239.50"></text></g><g><title>privacy_checking_modules (7,128,969 samples, 1.03%)</title><rect x="27.0435%" y="229" width="1.0331%" height="15" fill="rgb(206,27,48)"/><text x="27.2935%" y="239.50"></text></g><g><title>check_mod_privacy (7,115,689 samples, 1.03%)</title><rect x="27.0455%" y="213" width="1.0312%" height="15" fill="rgb(225,35,8)"/><text x="27.2955%" y="223.50"></text></g><g><title>misc_checking_3 (22,890,085 samples, 3.32%)</title><rect x="24.7681%" y="245" width="3.3172%" height="15" fill="rgb(250,213,24)"/><text x="25.0181%" y="255.50">mis..</text></g><g><title>impl_parent (3,043,232 samples, 0.44%)</title><rect x="28.9565%" y="181" width="0.4410%" height="15" fill="rgb(247,123,22)"/><text x="29.2065%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,773,830 samples, 0.26%)</title><rect x="29.1404%" y="165" width="0.2571%" height="15" fill="rgb(231,138,38)"/><text x="29.3904%" y="175.50"></text></g><g><title>impl_trait_ref (6,801,652 samples, 0.99%)</title><rect x="29.3977%" y="181" width="0.9857%" height="15" fill="rgb(231,145,46)"/><text x="29.6477%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,301,200 samples, 0.77%)</title><rect x="29.6151%" y="165" width="0.7682%" height="15" fill="rgb(251,118,11)"/><text x="29.8651%" y="175.50"></text></g><g><title>trait_impls_of (1,137,024 samples, 0.16%)</title><rect x="30.3976%" y="181" width="0.1648%" height="15" fill="rgb(217,147,25)"/><text x="30.6476%" y="191.50"></text></g><g><title>coherent_trait (16,724,527 samples, 2.42%)</title><rect x="28.1390%" y="213" width="2.4237%" height="15" fill="rgb(247,81,37)"/><text x="28.3890%" y="223.50">co..</text></g><g><title>specialization_graph_of (16,243,870 samples, 2.35%)</title><rect x="28.2086%" y="197" width="2.3540%" height="15" fill="rgb(209,12,38)"/><text x="28.4586%" y="207.50">s..</text></g><g><title>coherence_checking (16,897,229 samples, 2.45%)</title><rect x="28.1346%" y="229" width="2.4487%" height="15" fill="rgb(227,1,9)"/><text x="28.3846%" y="239.50">co..</text></g><g><title>dropck_outlives (1,011,770 samples, 0.15%)</title><rect x="52.6585%" y="181" width="0.1466%" height="15" fill="rgb(248,47,43)"/><text x="52.9085%" y="191.50"></text></g><g><title>predicates_of (776,720 samples, 0.11%)</title><rect x="53.9016%" y="165" width="0.1126%" height="15" fill="rgb(221,10,30)"/><text x="54.1516%" y="175.50"></text></g><g><title>specializes (1,474,749 samples, 0.21%)</title><rect x="54.0141%" y="165" width="0.2137%" height="15" fill="rgb(210,229,1)"/><text x="54.2641%" y="175.50"></text></g><g><title>param_env (703,182 samples, 0.10%)</title><rect x="54.1260%" y="149" width="0.1019%" height="15" fill="rgb(222,148,37)"/><text x="54.3760%" y="159.50"></text></g><g><title>evaluate_obligation (9,817,606 samples, 1.42%)</title><rect x="52.8521%" y="181" width="1.4228%" height="15" fill="rgb(234,67,33)"/><text x="53.1021%" y="191.50"></text></g><g><title>generics_of (787,561 samples, 0.11%)</title><rect x="54.3056%" y="181" width="0.1141%" height="15" fill="rgb(247,98,35)"/><text x="54.5556%" y="191.50"></text></g><g><title>evaluate_obligation (4,633,868 samples, 0.67%)</title><rect x="59.3300%" y="165" width="0.6715%" height="15" fill="rgb(247,138,52)"/><text x="59.5800%" y="175.50"></text></g><g><title>typeck (38,336,509 samples, 5.56%)</title><rect x="54.7488%" y="181" width="5.5557%" height="15" fill="rgb(213,79,30)"/><text x="54.9988%" y="191.50">typeck</text></g><g><title>item_bodies_checking (205,109,730 samples, 29.72%)</title><rect x="30.6016%" y="229" width="29.7243%" height="15" fill="rgb(246,177,23)"/><text x="30.8516%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (205,105,390 samples, 29.72%)</title><rect x="30.6023%" y="213" width="29.7237%" height="15" fill="rgb(230,62,27)"/><text x="30.8523%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (204,652,373 samples, 29.66%)</title><rect x="30.6679%" y="197" width="29.6580%" height="15" fill="rgb(216,154,8)"/><text x="30.9179%" y="207.50">typeck</text></g><g><title>mir_promoted (1,397,899 samples, 0.20%)</title><rect x="65.0876%" y="149" width="0.2026%" height="15" fill="rgb(244,35,45)"/><text x="65.3376%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (776,598 samples, 0.11%)</title><rect x="65.3249%" y="149" width="0.1125%" height="15" fill="rgb(251,115,12)"/><text x="65.5749%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,708,863 samples, 0.39%)</title><rect x="65.4960%" y="149" width="0.3926%" height="15" fill="rgb(240,54,50)"/><text x="65.7460%" y="159.50"></text></g><g><title>mir_borrowck (17,895,421 samples, 2.59%)</title><rect x="63.2958%" y="165" width="2.5934%" height="15" fill="rgb(233,84,52)"/><text x="63.5458%" y="175.50">mi..</text></g><g><title>needs_drop_raw (1,013,684 samples, 0.15%)</title><rect x="66.3109%" y="101" width="0.1469%" height="15" fill="rgb(207,117,47)"/><text x="66.5609%" y="111.50"></text></g><g><title>is_copy_raw (823,683 samples, 0.12%)</title><rect x="66.3385%" y="85" width="0.1194%" height="15" fill="rgb(249,43,39)"/><text x="66.5885%" y="95.50"></text></g><g><title>associated_items (787,708 samples, 0.11%)</title><rect x="72.7261%" y="85" width="0.1142%" height="15" fill="rgb(209,38,44)"/><text x="72.9761%" y="95.50"></text></g><g><title>dropck_outlives (1,697,266 samples, 0.25%)</title><rect x="72.8501%" y="85" width="0.2460%" height="15" fill="rgb(236,212,23)"/><text x="73.1001%" y="95.50"></text></g><g><title>generics_of (1,167,996 samples, 0.17%)</title><rect x="74.2228%" y="69" width="0.1693%" height="15" fill="rgb(242,79,21)"/><text x="74.4728%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (859,683 samples, 0.12%)</title><rect x="74.2675%" y="53" width="0.1246%" height="15" fill="rgb(211,96,35)"/><text x="74.5175%" y="63.50"></text></g><g><title>impl_trait_ref (1,835,987 samples, 0.27%)</title><rect x="74.4217%" y="69" width="0.2661%" height="15" fill="rgb(253,215,40)"/><text x="74.6717%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,533,895 samples, 0.22%)</title><rect x="74.4655%" y="53" width="0.2223%" height="15" fill="rgb(211,81,21)"/><text x="74.7155%" y="63.50"></text></g><g><title>predicates_of (1,082,448 samples, 0.16%)</title><rect x="74.6988%" y="69" width="0.1569%" height="15" fill="rgb(208,190,38)"/><text x="74.9488%" y="79.50"></text></g><g><title>specializes (3,003,304 samples, 0.44%)</title><rect x="74.8557%" y="69" width="0.4352%" height="15" fill="rgb(235,213,38)"/><text x="75.1057%" y="79.50"></text></g><g><title>param_env (1,579,229 samples, 0.23%)</title><rect x="75.0621%" y="53" width="0.2289%" height="15" fill="rgb(237,122,38)"/><text x="75.3121%" y="63.50"></text></g><g><title>def_span (718,811 samples, 0.10%)</title><rect x="75.1868%" y="37" width="0.1042%" height="15" fill="rgb(244,218,35)"/><text x="75.4368%" y="47.50"></text></g><g><title>evaluate_obligation (15,622,980 samples, 2.26%)</title><rect x="73.0961%" y="85" width="2.2641%" height="15" fill="rgb(240,68,47)"/><text x="73.3461%" y="95.50">e..</text></g><g><title>implied_outlives_bounds (1,835,443 samples, 0.27%)</title><rect x="75.4627%" y="85" width="0.2660%" height="15" fill="rgb(210,16,53)"/><text x="75.7127%" y="95.50"></text></g><g><title>is_copy_raw (1,784,510 samples, 0.26%)</title><rect x="75.7353%" y="85" width="0.2586%" height="15" fill="rgb(235,124,12)"/><text x="75.9853%" y="95.50"></text></g><g><title>evaluate_obligation (851,064 samples, 0.12%)</title><rect x="75.8706%" y="69" width="0.1233%" height="15" fill="rgb(224,169,11)"/><text x="76.1206%" y="79.50"></text></g><g><title>mir_built (70,414,339 samples, 10.20%)</title><rect x="66.0919%" y="117" width="10.2044%" height="15" fill="rgb(250,166,2)"/><text x="66.3419%" y="127.50">mir_built</text></g><g><title>typeck (66,886,500 samples, 9.69%)</title><rect x="66.6032%" y="101" width="9.6931%" height="15" fill="rgb(242,216,29)"/><text x="66.8532%" y="111.50">typeck</text></g><g><title>needs_drop_raw (1,567,818 samples, 0.23%)</title><rect x="76.6960%" y="85" width="0.2272%" height="15" fill="rgb(230,116,27)"/><text x="76.9460%" y="95.50"></text></g><g><title>is_copy_raw (1,047,003 samples, 0.15%)</title><rect x="76.7715%" y="69" width="0.1517%" height="15" fill="rgb(228,99,48)"/><text x="77.0215%" y="79.50"></text></g><g><title>thir_body (1,029,637 samples, 0.15%)</title><rect x="76.9331%" y="85" width="0.1492%" height="15" fill="rgb(253,11,6)"/><text x="77.1831%" y="95.50"></text></g><g><title>mir_built (5,012,294 samples, 0.73%)</title><rect x="76.3615%" y="101" width="0.7264%" height="15" fill="rgb(247,143,39)"/><text x="76.6115%" y="111.50"></text></g><g><title>mir_const (77,002,552 samples, 11.16%)</title><rect x="65.9453%" y="149" width="11.1591%" height="15" fill="rgb(236,97,10)"/><text x="66.1953%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (76,286,833 samples, 11.06%)</title><rect x="66.0491%" y="133" width="11.0554%" height="15" fill="rgb(233,208,19)"/><text x="66.2991%" y="143.50">unsafety_check_r..</text></g><g><title>unsafety_check_result (5,576,698 samples, 0.81%)</title><rect x="76.2963%" y="117" width="0.8082%" height="15" fill="rgb(216,164,2)"/><text x="76.5463%" y="127.50"></text></g><g><title>mir_promoted (77,429,014 samples, 11.22%)</title><rect x="65.8892%" y="165" width="11.2209%" height="15" fill="rgb(220,129,5)"/><text x="66.1392%" y="175.50">mir_promoted</text></g><g><title>type_of (117,453,704 samples, 17.02%)</title><rect x="61.1561%" y="197" width="17.0213%" height="15" fill="rgb(242,17,10)"/><text x="61.4061%" y="207.50">type_of</text></g><g><title>mir_borrowck (117,357,472 samples, 17.01%)</title><rect x="61.1701%" y="181" width="17.0073%" height="15" fill="rgb(242,107,0)"/><text x="61.4201%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (5,550,254 samples, 0.80%)</title><rect x="77.3731%" y="165" width="0.8043%" height="15" fill="rgb(251,28,31)"/><text x="77.6231%" y="175.50"></text></g><g><title>item_types_checking (123,220,055 samples, 17.86%)</title><rect x="60.3259%" y="229" width="17.8569%" height="15" fill="rgb(233,223,10)"/><text x="60.5759%" y="239.50">item_types_checking</text></g><g><title>check_mod_item_types (123,192,635 samples, 17.85%)</title><rect x="60.3299%" y="213" width="17.8529%" height="15" fill="rgb(215,21,27)"/><text x="60.5799%" y="223.50">check_mod_item_types</text></g><g><title>mir_for_ctfe (722,439 samples, 0.10%)</title><rect x="78.4898%" y="149" width="0.1047%" height="15" fill="rgb(232,23,21)"/><text x="78.7398%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,662,778 samples, 0.24%)</title><rect x="78.4041%" y="197" width="0.2410%" height="15" fill="rgb(244,5,23)"/><text x="78.6541%" y="207.50"></text></g><g><title>eval_to_const_value_raw (1,645,758 samples, 0.24%)</title><rect x="78.4065%" y="181" width="0.2385%" height="15" fill="rgb(226,81,46)"/><text x="78.6565%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,634,747 samples, 0.24%)</title><rect x="78.4081%" y="165" width="0.2369%" height="15" fill="rgb(247,70,30)"/><text x="78.6581%" y="175.50"></text></g><g><title>fn_sig (1,426,357 samples, 0.21%)</title><rect x="78.6450%" y="197" width="0.2067%" height="15" fill="rgb(212,68,19)"/><text x="78.8950%" y="207.50"></text></g><g><title>is_late_bound_map (1,707,619 samples, 0.25%)</title><rect x="78.9334%" y="181" width="0.2475%" height="15" fill="rgb(240,187,13)"/><text x="79.1834%" y="191.50"></text></g><g><title>resolve_lifetimes (1,624,909 samples, 0.24%)</title><rect x="78.9454%" y="165" width="0.2355%" height="15" fill="rgb(223,113,26)"/><text x="79.1954%" y="175.50"></text></g><g><title>named_region_map (1,149,892 samples, 0.17%)</title><rect x="79.1809%" y="181" width="0.1666%" height="15" fill="rgb(206,192,2)"/><text x="79.4309%" y="191.50"></text></g><g><title>resolve_lifetimes (1,060,521 samples, 0.15%)</title><rect x="79.1939%" y="165" width="0.1537%" height="15" fill="rgb(241,108,4)"/><text x="79.4439%" y="175.50"></text></g><g><title>generics_of (3,478,454 samples, 0.50%)</title><rect x="78.8517%" y="197" width="0.5041%" height="15" fill="rgb(247,173,49)"/><text x="79.1017%" y="207.50"></text></g><g><title>explicit_predicates_of (907,190 samples, 0.13%)</title><rect x="79.4835%" y="165" width="0.1315%" height="15" fill="rgb(224,114,35)"/><text x="79.7335%" y="175.50"></text></g><g><title>predicates_of (2,001,763 samples, 0.29%)</title><rect x="79.3948%" y="197" width="0.2901%" height="15" fill="rgb(245,159,27)"/><text x="79.6448%" y="207.50"></text></g><g><title>predicates_defined_on (1,778,130 samples, 0.26%)</title><rect x="79.4272%" y="181" width="0.2577%" height="15" fill="rgb(245,172,44)"/><text x="79.6772%" y="191.50"></text></g><g><title>type_collecting (10,940,872 samples, 1.59%)</title><rect x="78.1841%" y="229" width="1.5855%" height="15" fill="rgb(236,23,11)"/><text x="78.4341%" y="239.50"></text></g><g><title>collect_mod_item_types (10,912,621 samples, 1.58%)</title><rect x="78.1882%" y="213" width="1.5814%" height="15" fill="rgb(205,117,38)"/><text x="78.4382%" y="223.50"></text></g><g><title>param_env (713,597 samples, 0.10%)</title><rect x="80.7277%" y="197" width="0.1034%" height="15" fill="rgb(237,72,25)"/><text x="80.9777%" y="207.50"></text></g><g><title>region_scope_tree (1,260,586 samples, 0.18%)</title><rect x="80.8376%" y="197" width="0.1827%" height="15" fill="rgb(244,70,9)"/><text x="81.0876%" y="207.50"></text></g><g><title>check_impl_item_well_formed (7,710,698 samples, 1.12%)</title><rect x="79.9053%" y="213" width="1.1174%" height="15" fill="rgb(217,125,39)"/><text x="80.1553%" y="223.50"></text></g><g><title>evaluate_obligation (806,517 samples, 0.12%)</title><rect x="82.3809%" y="197" width="0.1169%" height="15" fill="rgb(235,36,10)"/><text x="82.6309%" y="207.50"></text></g><g><title>param_env (1,306,959 samples, 0.19%)</title><rect x="82.5854%" y="197" width="0.1894%" height="15" fill="rgb(251,123,47)"/><text x="82.8354%" y="207.50"></text></g><g><title>region_scope_tree (1,330,488 samples, 0.19%)</title><rect x="82.8041%" y="197" width="0.1928%" height="15" fill="rgb(221,13,13)"/><text x="83.0541%" y="207.50"></text></g><g><title>analysis (572,615,201 samples, 82.98%)</title><rect x="0.1479%" y="261" width="82.9828%" height="15" fill="rgb(238,131,9)"/><text x="0.3979%" y="271.50">analysis</text></g><g><title>type_check_crate (379,835,360 samples, 55.05%)</title><rect x="28.0853%" y="245" width="55.0453%" height="15" fill="rgb(211,50,8)"/><text x="28.3353%" y="255.50">type_check_crate</text></g><g><title>wf_checking (23,155,578 samples, 3.36%)</title><rect x="79.7750%" y="229" width="3.3557%" height="15" fill="rgb(245,182,24)"/><text x="80.0250%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (14,545,709 samples, 2.11%)</title><rect x="81.0227%" y="213" width="2.1079%" height="15" fill="rgb(242,14,37)"/><text x="81.2727%" y="223.50">c..</text></g><g><title>metadata_register_crate (2,111,022 samples, 0.31%)</title><rect x="92.5584%" y="213" width="0.3059%" height="15" fill="rgb(246,228,12)"/><text x="92.8084%" y="223.50"></text></g><g><title>macro_expand_crate (67,564,544 samples, 9.79%)</title><rect x="83.3729%" y="245" width="9.7914%" height="15" fill="rgb(213,55,15)"/><text x="83.6229%" y="255.50">macro_expand_c..</text></g><g><title>expand_crate (67,549,554 samples, 9.79%)</title><rect x="83.3751%" y="229" width="9.7892%" height="15" fill="rgb(209,9,3)"/><text x="83.6251%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,069,832 samples, 0.30%)</title><rect x="92.8644%" y="213" width="0.3000%" height="15" fill="rgb(230,59,30)"/><text x="93.1144%" y="223.50"></text></g><g><title>late_resolve_crate (7,782,537 samples, 1.13%)</title><rect x="93.2772%" y="229" width="1.1278%" height="15" fill="rgb(209,121,21)"/><text x="93.5272%" y="239.50"></text></g><g><title>configure_and_expand (78,071,221 samples, 11.31%)</title><rect x="83.1950%" y="261" width="11.3140%" height="15" fill="rgb(220,109,13)"/><text x="83.4450%" y="271.50">configure_and_exp..</text></g><g><title>resolve_crate (9,123,621 samples, 1.32%)</title><rect x="93.1869%" y="245" width="1.3222%" height="15" fill="rgb(232,18,1)"/><text x="93.4369%" y="255.50"></text></g><g><title>drop_ast (1,324,564 samples, 0.19%)</title><rect x="94.5090%" y="261" width="0.1920%" height="15" fill="rgb(215,41,42)"/><text x="94.7590%" y="271.50"></text></g><g><title>early_lint_checks (2,369,857 samples, 0.34%)</title><rect x="94.7043%" y="261" width="0.3434%" height="15" fill="rgb(224,123,36)"/><text x="94.9543%" y="271.50"></text></g><g><title>free_global_ctxt (7,685,245 samples, 1.11%)</title><rect x="95.0477%" y="261" width="1.1137%" height="15" fill="rgb(240,125,3)"/><text x="95.2977%" y="271.50"></text></g><g><title>generate_crate_metadata (5,452,842 samples, 0.79%)</title><rect x="96.1614%" y="261" width="0.7902%" height="15" fill="rgb(205,98,50)"/><text x="96.4114%" y="271.50"></text></g><g><title>hir_lowering (17,012,281 samples, 2.47%)</title><rect x="96.9517%" y="261" width="2.4654%" height="15" fill="rgb(205,185,37)"/><text x="97.2017%" y="271.50">hi..</text></g><g><title>parse_crate (863,680 samples, 0.13%)</title><rect x="99.4328%" y="261" width="0.1252%" height="15" fill="rgb(238,207,15)"/><text x="99.6828%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (2,083,574 samples, 0.30%)</title><rect x="99.5912%" y="261" width="0.3019%" height="15" fill="rgb(213,199,42)"/><text x="99.8412%" y="271.50"></text></g><g><title>all (690,040,862 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (690,040,862 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="287.50">rustc</text></g></svg></svg>