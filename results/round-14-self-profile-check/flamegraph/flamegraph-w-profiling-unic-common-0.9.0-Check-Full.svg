<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>eval_to_const_value_raw (155,202 samples, 0.31%)</title><rect x="13.9148%" y="101" width="0.3069%" height="15" fill="rgb(227,0,7)"/><text x="14.1648%" y="111.50"></text></g><g><title>eval_to_const_value_raw (141,252 samples, 0.28%)</title><rect x="13.9424%" y="85" width="0.2793%" height="15" fill="rgb(217,0,24)"/><text x="14.1924%" y="95.50"></text></g><g><title>eval_to_allocation_raw (130,812 samples, 0.26%)</title><rect x="13.9631%" y="69" width="0.2587%" height="15" fill="rgb(221,193,54)"/><text x="14.2131%" y="79.50"></text></g><g><title>is_copy_raw (129,362 samples, 0.26%)</title><rect x="14.3206%" y="69" width="0.2558%" height="15" fill="rgb(248,212,6)"/><text x="14.5706%" y="79.50"></text></g><g><title>evaluate_obligation (121,842 samples, 0.24%)</title><rect x="14.3354%" y="53" width="0.2409%" height="15" fill="rgb(208,68,35)"/><text x="14.5854%" y="63.50"></text></g><g><title>adt_drop_tys (159,612 samples, 0.32%)</title><rect x="14.2997%" y="85" width="0.3156%" height="15" fill="rgb(232,128,0)"/><text x="14.5497%" y="95.50"></text></g><g><title>needs_drop_raw (447,835 samples, 0.89%)</title><rect x="14.2517%" y="101" width="0.8855%" height="15" fill="rgb(207,160,47)"/><text x="14.5017%" y="111.50"></text></g><g><title>is_copy_raw (263,953 samples, 0.52%)</title><rect x="14.6153%" y="85" width="0.5219%" height="15" fill="rgb(228,23,34)"/><text x="14.8653%" y="95.50"></text></g><g><title>evaluate_obligation (229,473 samples, 0.45%)</title><rect x="14.6834%" y="69" width="0.4538%" height="15" fill="rgb(218,30,26)"/><text x="14.9334%" y="79.50"></text></g><g><title>predicates_of (62,111 samples, 0.12%)</title><rect x="15.0144%" y="53" width="0.1228%" height="15" fill="rgb(220,122,19)"/><text x="15.2644%" y="63.50"></text></g><g><title>param_env (51,781 samples, 0.10%)</title><rect x="15.1372%" y="101" width="0.1024%" height="15" fill="rgb(250,228,42)"/><text x="15.3872%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (54,631 samples, 0.11%)</title><rect x="15.4134%" y="85" width="0.1080%" height="15" fill="rgb(240,193,28)"/><text x="15.6634%" y="95.50"></text></g><g><title>associated_item (149,332 samples, 0.30%)</title><rect x="15.5903%" y="53" width="0.2953%" height="15" fill="rgb(216,20,37)"/><text x="15.8403%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (144,812 samples, 0.29%)</title><rect x="15.5992%" y="37" width="0.2863%" height="15" fill="rgb(206,188,39)"/><text x="15.8492%" y="47.50"></text></g><g><title>impl_item_implementor_ids (183,422 samples, 0.36%)</title><rect x="15.5333%" y="85" width="0.3627%" height="15" fill="rgb(217,207,13)"/><text x="15.7833%" y="95.50"></text></g><g><title>associated_items (173,062 samples, 0.34%)</title><rect x="15.5538%" y="69" width="0.3422%" height="15" fill="rgb(231,73,38)"/><text x="15.8038%" y="79.50"></text></g><g><title>resolve_instance (362,205 samples, 0.72%)</title><rect x="15.2396%" y="101" width="0.7162%" height="15" fill="rgb(225,20,46)"/><text x="15.4896%" y="111.50"></text></g><g><title>thir_body (312,041 samples, 0.62%)</title><rect x="15.9701%" y="101" width="0.6170%" height="15" fill="rgb(210,31,41)"/><text x="16.2201%" y="111.50"></text></g><g><title>mir_const (2,823,191 samples, 5.58%)</title><rect x="11.0124%" y="149" width="5.5825%" height="15" fill="rgb(221,200,47)"/><text x="11.2624%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (2,541,898 samples, 5.03%)</title><rect x="11.5687%" y="133" width="5.0263%" height="15" fill="rgb(226,26,5)"/><text x="11.8187%" y="143.50">unsafe..</text></g><g><title>mir_built (2,366,456 samples, 4.68%)</title><rect x="11.9156%" y="117" width="4.6794%" height="15" fill="rgb(249,33,26)"/><text x="12.1656%" y="127.50">mir_b..</text></g><g><title>mir_promoted (3,472,149 samples, 6.87%)</title><rect x="10.3490%" y="165" width="6.8658%" height="15" fill="rgb(235,183,28)"/><text x="10.5990%" y="175.50">mir_promo..</text></g><g><title>mir_const_qualif (313,463 samples, 0.62%)</title><rect x="16.5950%" y="149" width="0.6198%" height="15" fill="rgb(221,5,38)"/><text x="16.8450%" y="159.50"></text></g><g><title>mir_const (234,833 samples, 0.46%)</title><rect x="16.7505%" y="133" width="0.4644%" height="15" fill="rgb(247,18,42)"/><text x="17.0005%" y="143.50"></text></g><g><title>unsafety_check_result (157,822 samples, 0.31%)</title><rect x="16.9027%" y="117" width="0.3121%" height="15" fill="rgb(241,131,45)"/><text x="17.1527%" y="127.50"></text></g><g><title>mir_built (108,362 samples, 0.21%)</title><rect x="17.0005%" y="101" width="0.2143%" height="15" fill="rgb(249,31,29)"/><text x="17.2505%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (186,981 samples, 0.37%)</title><rect x="17.2148%" y="165" width="0.3697%" height="15" fill="rgb(225,111,53)"/><text x="17.4648%" y="175.50"></text></g><g><title>type_op_prove_predicate (517,852 samples, 1.02%)</title><rect x="17.5845%" y="165" width="1.0240%" height="15" fill="rgb(238,160,17)"/><text x="17.8345%" y="175.50"></text></g><g><title>MIR_borrow_checking (8,631,796 samples, 17.07%)</title><rect x="1.5529%" y="197" width="17.0684%" height="15" fill="rgb(214,148,48)"/><text x="1.8029%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,588,646 samples, 16.98%)</title><rect x="1.6382%" y="181" width="16.9831%" height="15" fill="rgb(232,36,49)"/><text x="1.8882%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (180,612 samples, 0.36%)</title><rect x="18.6213%" y="197" width="0.3571%" height="15" fill="rgb(209,103,24)"/><text x="18.8713%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (148,242 samples, 0.29%)</title><rect x="18.6853%" y="181" width="0.2931%" height="15" fill="rgb(229,88,8)"/><text x="18.9353%" y="191.50"></text></g><g><title>hir_module_items (132,341 samples, 0.26%)</title><rect x="18.9784%" y="197" width="0.2617%" height="15" fill="rgb(213,181,19)"/><text x="19.2284%" y="207.50"></text></g><g><title>associated_item (56,822 samples, 0.11%)</title><rect x="19.6867%" y="133" width="0.1124%" height="15" fill="rgb(254,191,54)"/><text x="19.9367%" y="143.50"></text></g><g><title>item_attrs (84,381 samples, 0.17%)</title><rect x="19.9591%" y="117" width="0.1669%" height="15" fill="rgb(241,83,37)"/><text x="20.2091%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,481 samples, 0.16%)</title><rect x="19.9688%" y="101" width="0.1572%" height="15" fill="rgb(233,36,39)"/><text x="20.2188%" y="111.50"></text></g><g><title>codegen_fn_attrs (237,333 samples, 0.47%)</title><rect x="19.7990%" y="133" width="0.4693%" height="15" fill="rgb(226,3,54)"/><text x="20.0490%" y="143.50"></text></g><g><title>codegen_fn_attrs (360,365 samples, 0.71%)</title><rect x="19.5619%" y="165" width="0.7126%" height="15" fill="rgb(245,192,40)"/><text x="19.8119%" y="175.50"></text></g><g><title>should_inherit_track_caller (322,915 samples, 0.64%)</title><rect x="19.6359%" y="149" width="0.6385%" height="15" fill="rgb(238,167,29)"/><text x="19.8859%" y="159.50"></text></g><g><title>check_mod_attrs (495,315 samples, 0.98%)</title><rect x="19.2953%" y="181" width="0.9794%" height="15" fill="rgb(232,182,51)"/><text x="19.5453%" y="191.50"></text></g><g><title>check_mod_const_bodies (60,072 samples, 0.12%)</title><rect x="20.2747%" y="181" width="0.1188%" height="15" fill="rgb(231,60,39)"/><text x="20.5247%" y="191.50"></text></g><g><title>lookup_deprecation_entry (107,370 samples, 0.21%)</title><rect x="20.7210%" y="165" width="0.2123%" height="15" fill="rgb(208,69,12)"/><text x="20.9710%" y="175.50"></text></g><g><title>lookup_stability (52,490 samples, 0.10%)</title><rect x="20.9333%" y="165" width="0.1038%" height="15" fill="rgb(235,93,37)"/><text x="21.1833%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (320,623 samples, 0.63%)</title><rect x="20.4576%" y="181" width="0.6340%" height="15" fill="rgb(213,116,39)"/><text x="20.7076%" y="191.50"></text></g><g><title>misc_checking_1 (973,581 samples, 1.93%)</title><rect x="19.2414%" y="197" width="1.9251%" height="15" fill="rgb(222,207,29)"/><text x="19.4914%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (108,411 samples, 0.21%)</title><rect x="21.1708%" y="181" width="0.2144%" height="15" fill="rgb(206,96,30)"/><text x="21.4208%" y="191.50"></text></g><g><title>check_mod_liveness (64,511 samples, 0.13%)</title><rect x="21.2576%" y="165" width="0.1276%" height="15" fill="rgb(218,138,4)"/><text x="21.5076%" y="175.50"></text></g><g><title>misc_checking_2 (449,335 samples, 0.89%)</title><rect x="21.1666%" y="197" width="0.8885%" height="15" fill="rgb(250,191,14)"/><text x="21.4166%" y="207.50"></text></g><g><title>match_checking (338,794 samples, 0.67%)</title><rect x="21.3852%" y="181" width="0.6699%" height="15" fill="rgb(239,60,40)"/><text x="21.6352%" y="191.50"></text></g><g><title>check_match (324,933 samples, 0.64%)</title><rect x="21.4126%" y="165" width="0.6425%" height="15" fill="rgb(206,27,48)"/><text x="21.6626%" y="175.50"></text></g><g><title>check_private_in_public (88,131 samples, 0.17%)</title><rect x="22.0778%" y="181" width="0.1743%" height="15" fill="rgb(225,35,8)"/><text x="22.3278%" y="191.50"></text></g><g><title>death_checking (520,506 samples, 1.03%)</title><rect x="22.2521%" y="181" width="1.0292%" height="15" fill="rgb(250,213,24)"/><text x="22.5021%" y="191.50"></text></g><g><title>item_attrs (339,785 samples, 0.67%)</title><rect x="22.6095%" y="165" width="0.6719%" height="15" fill="rgb(247,123,22)"/><text x="22.8595%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (335,395 samples, 0.66%)</title><rect x="22.6182%" y="149" width="0.6632%" height="15" fill="rgb(231,138,38)"/><text x="22.8682%" y="159.50"></text></g><g><title>eval_to_const_value_raw (201,763 samples, 0.40%)</title><rect x="23.7465%" y="149" width="0.3990%" height="15" fill="rgb(231,145,46)"/><text x="23.9965%" y="159.50"></text></g><g><title>eval_to_const_value_raw (198,303 samples, 0.39%)</title><rect x="23.7533%" y="133" width="0.3921%" height="15" fill="rgb(251,118,11)"/><text x="24.0033%" y="143.50"></text></g><g><title>eval_to_allocation_raw (189,913 samples, 0.38%)</title><rect x="23.7699%" y="117" width="0.3755%" height="15" fill="rgb(217,147,25)"/><text x="24.0199%" y="127.50"></text></g><g><title>mir_for_ctfe (58,610 samples, 0.12%)</title><rect x="24.0295%" y="101" width="0.1159%" height="15" fill="rgb(247,81,37)"/><text x="24.2795%" y="111.50"></text></g><g><title>param_env (97,821 samples, 0.19%)</title><rect x="24.1454%" y="149" width="0.1934%" height="15" fill="rgb(209,12,38)"/><text x="24.3954%" y="159.50"></text></g><g><title>crate_lints (841,510 samples, 1.66%)</title><rect x="23.2849%" y="165" width="1.6640%" height="15" fill="rgb(227,1,9)"/><text x="23.5349%" y="175.50"></text></g><g><title>type_of (308,485 samples, 0.61%)</title><rect x="24.3389%" y="149" width="0.6100%" height="15" fill="rgb(248,47,43)"/><text x="24.5889%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (231,705 samples, 0.46%)</title><rect x="24.4907%" y="133" width="0.4582%" height="15" fill="rgb(221,10,30)"/><text x="24.7407%" y="143.50"></text></g><g><title>lint_checking (928,341 samples, 1.84%)</title><rect x="23.2814%" y="181" width="1.8357%" height="15" fill="rgb(210,229,1)"/><text x="23.5314%" y="191.50">l..</text></g><g><title>module_lints (85,061 samples, 0.17%)</title><rect x="24.9489%" y="165" width="0.1682%" height="15" fill="rgb(222,148,37)"/><text x="25.1989%" y="175.50"></text></g><g><title>lint_mod (82,561 samples, 0.16%)</title><rect x="24.9538%" y="149" width="0.1633%" height="15" fill="rgb(234,67,33)"/><text x="25.2038%" y="159.50"></text></g><g><title>privacy_access_levels (116,921 samples, 0.23%)</title><rect x="25.1171%" y="181" width="0.2312%" height="15" fill="rgb(247,98,35)"/><text x="25.3671%" y="191.50"></text></g><g><title>privacy_checking_modules (158,481 samples, 0.31%)</title><rect x="25.3482%" y="181" width="0.3134%" height="15" fill="rgb(247,138,52)"/><text x="25.5982%" y="191.50"></text></g><g><title>check_mod_privacy (156,711 samples, 0.31%)</title><rect x="25.3517%" y="165" width="0.3099%" height="15" fill="rgb(213,79,30)"/><text x="25.6017%" y="175.50"></text></g><g><title>misc_checking_3 (1,836,460 samples, 3.63%)</title><rect x="22.0551%" y="197" width="3.6314%" height="15" fill="rgb(246,177,23)"/><text x="22.3051%" y="207.50">misc..</text></g><g><title>adt_destructor (72,421 samples, 0.14%)</title><rect x="25.9225%" y="149" width="0.1432%" height="15" fill="rgb(230,62,27)"/><text x="26.1725%" y="159.50"></text></g><g><title>coherent_trait (62,701 samples, 0.12%)</title><rect x="25.9417%" y="133" width="0.1240%" height="15" fill="rgb(216,154,8)"/><text x="26.1917%" y="143.50"></text></g><g><title>specialization_graph_of (60,731 samples, 0.12%)</title><rect x="25.9456%" y="117" width="0.1201%" height="15" fill="rgb(244,35,45)"/><text x="26.1956%" y="127.50"></text></g><g><title>is_copy_raw (173,372 samples, 0.34%)</title><rect x="26.0657%" y="149" width="0.3428%" height="15" fill="rgb(251,115,12)"/><text x="26.3157%" y="159.50"></text></g><g><title>evaluate_obligation (138,471 samples, 0.27%)</title><rect x="26.1347%" y="133" width="0.2738%" height="15" fill="rgb(240,54,50)"/><text x="26.3847%" y="143.50"></text></g><g><title>param_env (135,991 samples, 0.27%)</title><rect x="26.4085%" y="149" width="0.2689%" height="15" fill="rgb(233,84,52)"/><text x="26.6585%" y="159.50"></text></g><g><title>impl_parent (1,582,962 samples, 3.13%)</title><rect x="33.0042%" y="133" width="3.1301%" height="15" fill="rgb(207,117,47)"/><text x="33.2542%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (782,411 samples, 1.55%)</title><rect x="34.5872%" y="117" width="1.5471%" height="15" fill="rgb(249,43,39)"/><text x="34.8372%" y="127.50"></text></g><g><title>impl_trait_ref (3,007,234 samples, 5.95%)</title><rect x="36.1343%" y="133" width="5.9465%" height="15" fill="rgb(209,38,44)"/><text x="36.3843%" y="143.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,168,307 samples, 4.29%)</title><rect x="37.7932%" y="117" width="4.2876%" height="15" fill="rgb(236,212,23)"/><text x="38.0432%" y="127.50">metad..</text></g><g><title>coherent_trait (8,945,350 samples, 17.69%)</title><rect x="25.8266%" y="165" width="17.6884%" height="15" fill="rgb(242,79,21)"/><text x="26.0766%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (8,515,086 samples, 16.84%)</title><rect x="26.6774%" y="149" width="16.8376%" height="15" fill="rgb(211,96,35)"/><text x="26.9274%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (723,121 samples, 1.43%)</title><rect x="42.0852%" y="133" width="1.4299%" height="15" fill="rgb(253,215,40)"/><text x="42.3352%" y="143.50"></text></g><g><title>implementations_of_trait (178,501 samples, 0.35%)</title><rect x="43.1621%" y="117" width="0.3530%" height="15" fill="rgb(211,81,21)"/><text x="43.4121%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (161,051 samples, 0.32%)</title><rect x="43.1966%" y="101" width="0.3185%" height="15" fill="rgb(208,190,38)"/><text x="43.4466%" y="111.50"></text></g><g><title>coherence_checking (9,026,080 samples, 17.85%)</title><rect x="25.7695%" y="181" width="17.8481%" height="15" fill="rgb(235,213,38)"/><text x="26.0195%" y="191.50">coherence_checking</text></g><g><title>adt_def (79,300 samples, 0.16%)</title><rect x="57.2471%" y="117" width="0.1568%" height="15" fill="rgb(237,122,38)"/><text x="57.4971%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (76,960 samples, 0.15%)</title><rect x="57.2517%" y="101" width="0.1522%" height="15" fill="rgb(244,218,35)"/><text x="57.5017%" y="111.50"></text></g><g><title>item_attrs (53,260 samples, 0.11%)</title><rect x="57.2986%" y="85" width="0.1053%" height="15" fill="rgb(240,68,47)"/><text x="57.5486%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (50,790 samples, 0.10%)</title><rect x="57.3035%" y="69" width="0.1004%" height="15" fill="rgb(210,16,53)"/><text x="57.5535%" y="79.50"></text></g><g><title>adt_sized_constraint (92,010 samples, 0.18%)</title><rect x="57.2312%" y="133" width="0.1819%" height="15" fill="rgb(235,124,12)"/><text x="57.4812%" y="143.50"></text></g><g><title>associated_item (59,350 samples, 0.12%)</title><rect x="57.4764%" y="117" width="0.1174%" height="15" fill="rgb(224,169,11)"/><text x="57.7264%" y="127.50"></text></g><g><title>associated_items (100,731 samples, 0.20%)</title><rect x="57.4131%" y="133" width="0.1992%" height="15" fill="rgb(250,166,2)"/><text x="57.6631%" y="143.50"></text></g><g><title>dropck_outlives (164,572 samples, 0.33%)</title><rect x="57.6486%" y="133" width="0.3254%" height="15" fill="rgb(242,216,29)"/><text x="57.8986%" y="143.50"></text></g><g><title>adt_dtorck_constraint (82,931 samples, 0.16%)</title><rect x="57.8101%" y="117" width="0.1640%" height="15" fill="rgb(230,116,27)"/><text x="58.0601%" y="127.50"></text></g><g><title>evaluate_obligation (513,968 samples, 1.02%)</title><rect x="57.9741%" y="133" width="1.0163%" height="15" fill="rgb(228,99,48)"/><text x="58.2241%" y="143.50"></text></g><g><title>predicates_of (95,711 samples, 0.19%)</title><rect x="58.8011%" y="117" width="0.1893%" height="15" fill="rgb(253,11,6)"/><text x="59.0511%" y="127.50"></text></g><g><title>fn_sig (61,610 samples, 0.12%)</title><rect x="59.0066%" y="133" width="0.1218%" height="15" fill="rgb(247,143,39)"/><text x="59.2566%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (56,890 samples, 0.11%)</title><rect x="59.0159%" y="117" width="0.1125%" height="15" fill="rgb(236,97,10)"/><text x="59.2659%" y="127.50"></text></g><g><title>item_attrs (87,093 samples, 0.17%)</title><rect x="59.2508%" y="133" width="0.1722%" height="15" fill="rgb(233,208,19)"/><text x="59.5008%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (82,552 samples, 0.16%)</title><rect x="59.2598%" y="117" width="0.1632%" height="15" fill="rgb(216,164,2)"/><text x="59.5098%" y="127.50"></text></g><g><title>method_autoderef_steps (61,741 samples, 0.12%)</title><rect x="59.5138%" y="133" width="0.1221%" height="15" fill="rgb(220,129,5)"/><text x="59.7638%" y="143.50"></text></g><g><title>evaluate_obligation (77,761 samples, 0.15%)</title><rect x="59.7390%" y="117" width="0.1538%" height="15" fill="rgb(242,17,10)"/><text x="59.9890%" y="127.50"></text></g><g><title>layout_of (50,580 samples, 0.10%)</title><rect x="59.8928%" y="117" width="0.1000%" height="15" fill="rgb(242,107,0)"/><text x="60.1428%" y="127.50"></text></g><g><title>object_safety_violations (197,692 samples, 0.39%)</title><rect x="59.6359%" y="133" width="0.3909%" height="15" fill="rgb(251,28,31)"/><text x="59.8859%" y="143.50"></text></g><g><title>explicit_predicates_of (115,921 samples, 0.23%)</title><rect x="60.8868%" y="101" width="0.2292%" height="15" fill="rgb(233,223,10)"/><text x="61.1368%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (105,361 samples, 0.21%)</title><rect x="60.9076%" y="85" width="0.2083%" height="15" fill="rgb(215,21,27)"/><text x="61.1576%" y="95.50"></text></g><g><title>predicates_of (562,536 samples, 1.11%)</title><rect x="60.0492%" y="133" width="1.1124%" height="15" fill="rgb(232,23,21)"/><text x="60.2992%" y="143.50"></text></g><g><title>predicates_defined_on (533,285 samples, 1.05%)</title><rect x="60.1070%" y="117" width="1.0545%" height="15" fill="rgb(244,5,23)"/><text x="60.3570%" y="127.50"></text></g><g><title>type_of (92,090 samples, 0.18%)</title><rect x="61.1673%" y="133" width="0.1821%" height="15" fill="rgb(226,81,46)"/><text x="61.4173%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (72,620 samples, 0.14%)</title><rect x="61.2058%" y="117" width="0.1436%" height="15" fill="rgb(247,70,30)"/><text x="61.4558%" y="127.50"></text></g><g><title>item_bodies_checking (8,987,950 samples, 17.77%)</title><rect x="43.6697%" y="181" width="17.7727%" height="15" fill="rgb(212,68,19)"/><text x="43.9197%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,984,730 samples, 17.77%)</title><rect x="43.6761%" y="165" width="17.7663%" height="15" fill="rgb(240,187,13)"/><text x="43.9261%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (8,956,490 samples, 17.71%)</title><rect x="43.7319%" y="149" width="17.7105%" height="15" fill="rgb(223,113,26)"/><text x="43.9819%" y="159.50">typeck</text></g><g><title>predicates_of (59,010 samples, 0.12%)</title><rect x="62.6785%" y="149" width="0.1167%" height="15" fill="rgb(206,192,2)"/><text x="62.9285%" y="159.50"></text></g><g><title>item_types_checking (991,261 samples, 1.96%)</title><rect x="61.4424%" y="181" width="1.9601%" height="15" fill="rgb(241,108,4)"/><text x="61.6924%" y="191.50">i..</text></g><g><title>check_mod_item_types (986,321 samples, 1.95%)</title><rect x="61.4521%" y="165" width="1.9503%" height="15" fill="rgb(247,173,49)"/><text x="61.7021%" y="175.50">c..</text></g><g><title>typeck (307,122 samples, 0.61%)</title><rect x="62.7952%" y="149" width="0.6073%" height="15" fill="rgb(224,114,35)"/><text x="63.0452%" y="159.50"></text></g><g><title>fn_sig (170,952 samples, 0.34%)</title><rect x="63.7063%" y="149" width="0.3380%" height="15" fill="rgb(245,159,27)"/><text x="63.9563%" y="159.50"></text></g><g><title>type_of (52,740 samples, 0.10%)</title><rect x="63.9400%" y="133" width="0.1043%" height="15" fill="rgb(245,172,44)"/><text x="64.1900%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (50,660 samples, 0.10%)</title><rect x="63.9441%" y="117" width="0.1002%" height="15" fill="rgb(236,23,11)"/><text x="64.1941%" y="127.50"></text></g><g><title>named_region_map (273,053 samples, 0.54%)</title><rect x="64.1511%" y="133" width="0.5399%" height="15" fill="rgb(205,117,38)"/><text x="64.4011%" y="143.50"></text></g><g><title>resolve_lifetimes (261,592 samples, 0.52%)</title><rect x="64.1737%" y="117" width="0.5173%" height="15" fill="rgb(237,72,25)"/><text x="64.4237%" y="127.50"></text></g><g><title>lint_levels (94,771 samples, 0.19%)</title><rect x="64.5036%" y="101" width="0.1874%" height="15" fill="rgb(244,70,9)"/><text x="64.7536%" y="111.50"></text></g><g><title>generics_of (338,434 samples, 0.67%)</title><rect x="64.0443%" y="149" width="0.6692%" height="15" fill="rgb(217,125,39)"/><text x="64.2943%" y="159.50"></text></g><g><title>impl_trait_ref (91,070 samples, 0.18%)</title><rect x="64.7135%" y="149" width="0.1801%" height="15" fill="rgb(235,36,10)"/><text x="64.9635%" y="159.50"></text></g><g><title>explicit_predicates_of (96,411 samples, 0.19%)</title><rect x="65.0260%" y="117" width="0.1906%" height="15" fill="rgb(251,123,47)"/><text x="65.2760%" y="127.50"></text></g><g><title>predicates_of (206,092 samples, 0.41%)</title><rect x="64.8936%" y="149" width="0.4075%" height="15" fill="rgb(221,13,13)"/><text x="65.1436%" y="159.50"></text></g><g><title>predicates_defined_on (183,052 samples, 0.36%)</title><rect x="64.9392%" y="133" width="0.3620%" height="15" fill="rgb(238,131,9)"/><text x="65.1892%" y="143.50"></text></g><g><title>type_collecting (1,104,813 samples, 2.18%)</title><rect x="63.4049%" y="181" width="2.1846%" height="15" fill="rgb(211,50,8)"/><text x="63.6549%" y="191.50">t..</text></g><g><title>collect_mod_item_types (1,088,493 samples, 2.15%)</title><rect x="63.4371%" y="165" width="2.1524%" height="15" fill="rgb(245,182,24)"/><text x="63.6871%" y="175.50">c..</text></g><g><title>type_of (145,842 samples, 0.29%)</title><rect x="65.3011%" y="149" width="0.2884%" height="15" fill="rgb(242,14,37)"/><text x="65.5511%" y="159.50"></text></g><g><title>adt_sized_constraint (77,690 samples, 0.15%)</title><rect x="67.3047%" y="133" width="0.1536%" height="15" fill="rgb(246,228,12)"/><text x="67.5547%" y="143.50"></text></g><g><title>adt_def (71,990 samples, 0.14%)</title><rect x="67.3160%" y="117" width="0.1424%" height="15" fill="rgb(213,55,15)"/><text x="67.5660%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (65,210 samples, 0.13%)</title><rect x="67.3294%" y="101" width="0.1289%" height="15" fill="rgb(209,9,3)"/><text x="67.5794%" y="111.50"></text></g><g><title>item_attrs (50,850 samples, 0.10%)</title><rect x="67.3578%" y="85" width="0.1006%" height="15" fill="rgb(230,59,30)"/><text x="67.6078%" y="95.50"></text></g><g><title>evaluate_obligation (242,783 samples, 0.48%)</title><rect x="67.0399%" y="149" width="0.4801%" height="15" fill="rgb(209,121,21)"/><text x="67.2899%" y="159.50"></text></g><g><title>implied_outlives_bounds (93,192 samples, 0.18%)</title><rect x="67.5200%" y="149" width="0.1843%" height="15" fill="rgb(220,109,13)"/><text x="67.7700%" y="159.50"></text></g><g><title>param_env (92,160 samples, 0.18%)</title><rect x="67.7042%" y="149" width="0.1822%" height="15" fill="rgb(232,18,1)"/><text x="67.9542%" y="159.50"></text></g><g><title>predicates_of (53,700 samples, 0.11%)</title><rect x="67.8865%" y="149" width="0.1062%" height="15" fill="rgb(215,41,42)"/><text x="68.1365%" y="159.50"></text></g><g><title>region_scope_tree (159,272 samples, 0.31%)</title><rect x="67.9927%" y="149" width="0.3149%" height="15" fill="rgb(224,123,36)"/><text x="68.2427%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,301,824 samples, 2.57%)</title><rect x="65.7508%" y="165" width="2.5742%" height="15" fill="rgb(240,125,3)"/><text x="66.0008%" y="175.50">ch..</text></g><g><title>evaluate_obligation (213,883 samples, 0.42%)</title><rect x="69.5135%" y="149" width="0.4229%" height="15" fill="rgb(205,98,50)"/><text x="69.7635%" y="159.50"></text></g><g><title>param_env (110,760 samples, 0.22%)</title><rect x="70.0286%" y="149" width="0.2190%" height="15" fill="rgb(205,185,37)"/><text x="70.2786%" y="159.50"></text></g><g><title>predicates_of (110,791 samples, 0.22%)</title><rect x="70.2476%" y="149" width="0.2191%" height="15" fill="rgb(238,207,15)"/><text x="70.4976%" y="159.50"></text></g><g><title>predicates_defined_on (79,231 samples, 0.16%)</title><rect x="70.3100%" y="133" width="0.1567%" height="15" fill="rgb(213,199,42)"/><text x="70.5600%" y="143.50"></text></g><g><title>analysis (35,136,769 samples, 69.48%)</title><rect x="1.1633%" y="213" width="69.4790%" height="15" fill="rgb(235,201,11)"/><text x="1.4133%" y="223.50">analysis</text></g><g><title>type_check_crate (22,734,952 samples, 44.96%)</title><rect x="25.6865%" y="197" width="44.9558%" height="15" fill="rgb(207,46,11)"/><text x="25.9365%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,552,848 samples, 5.05%)</title><rect x="65.5944%" y="181" width="5.0480%" height="15" fill="rgb(241,35,35)"/><text x="65.8444%" y="191.50">wf_che..</text></g><g><title>check_item_well_formed (1,171,933 samples, 2.32%)</title><rect x="68.3250%" y="165" width="2.3174%" height="15" fill="rgb(243,32,47)"/><text x="68.5750%" y="175.50">c..</text></g><g><title>codegen_crate (278,583 samples, 0.55%)</title><rect x="70.6586%" y="213" width="0.5509%" height="15" fill="rgb(247,202,23)"/><text x="70.9086%" y="223.50"></text></g><g><title>AST_validation (92,381 samples, 0.18%)</title><rect x="71.5567%" y="197" width="0.1827%" height="15" fill="rgb(219,102,11)"/><text x="71.8067%" y="207.50"></text></g><g><title>crate_injection (85,531 samples, 0.17%)</title><rect x="71.8136%" y="197" width="0.1691%" height="15" fill="rgb(243,110,44)"/><text x="72.0636%" y="207.50"></text></g><g><title>metadata_load_macro (210,261 samples, 0.42%)</title><rect x="86.8208%" y="165" width="0.4158%" height="15" fill="rgb(222,74,54)"/><text x="87.0708%" y="175.50"></text></g><g><title>metadata_register_crate (156,761 samples, 0.31%)</title><rect x="87.2366%" y="165" width="0.3100%" height="15" fill="rgb(216,99,12)"/><text x="87.4866%" y="175.50"></text></g><g><title>macro_expand_crate (7,907,479 samples, 15.64%)</title><rect x="71.9827%" y="197" width="15.6362%" height="15" fill="rgb(226,22,26)"/><text x="72.2327%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (7,894,258 samples, 15.61%)</title><rect x="72.0089%" y="181" width="15.6100%" height="15" fill="rgb(217,163,10)"/><text x="72.2589%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (75,741 samples, 0.15%)</title><rect x="87.6264%" y="197" width="0.1498%" height="15" fill="rgb(213,25,53)"/><text x="87.8764%" y="207.50"></text></g><g><title>finalize_macro_resolutions (287,853 samples, 0.57%)</title><rect x="87.8559%" y="181" width="0.5692%" height="15" fill="rgb(252,105,26)"/><text x="88.1059%" y="191.50"></text></g><g><title>late_resolve_crate (1,117,743 samples, 2.21%)</title><rect x="88.4251%" y="181" width="2.2102%" height="15" fill="rgb(220,39,43)"/><text x="88.6751%" y="191.50">l..</text></g><g><title>configure_and_expand (9,886,680 samples, 19.55%)</title><rect x="71.2095%" y="213" width="19.5498%" height="15" fill="rgb(229,68,48)"/><text x="71.4595%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,508,656 samples, 2.98%)</title><rect x="87.7761%" y="197" width="2.9832%" height="15" fill="rgb(252,8,32)"/><text x="88.0261%" y="207.50">res..</text></g><g><title>drop_ast (76,101 samples, 0.15%)</title><rect x="90.7593%" y="213" width="0.1505%" height="15" fill="rgb(223,20,43)"/><text x="91.0093%" y="223.50"></text></g><g><title>early_lint_checks (195,262 samples, 0.39%)</title><rect x="90.9373%" y="213" width="0.3861%" height="15" fill="rgb(229,81,49)"/><text x="91.1873%" y="223.50"></text></g><g><title>free_global_ctxt (1,432,096 samples, 2.83%)</title><rect x="91.3235%" y="213" width="2.8318%" height="15" fill="rgb(236,28,36)"/><text x="91.5735%" y="223.50">fr..</text></g><g><title>crate_hash (59,771 samples, 0.12%)</title><rect x="94.7275%" y="197" width="0.1182%" height="15" fill="rgb(249,185,26)"/><text x="94.9775%" y="207.50"></text></g><g><title>generate_crate_metadata (383,784 samples, 0.76%)</title><rect x="94.1553%" y="213" width="0.7589%" height="15" fill="rgb(249,174,33)"/><text x="94.4053%" y="223.50"></text></g><g><title>hir_lowering (1,308,985 samples, 2.59%)</title><rect x="94.9142%" y="213" width="2.5884%" height="15" fill="rgb(233,201,37)"/><text x="95.1642%" y="223.50">hi..</text></g><g><title>parse_crate (205,122 samples, 0.41%)</title><rect x="97.5761%" y="213" width="0.4056%" height="15" fill="rgb(221,78,26)"/><text x="97.8261%" y="223.50"></text></g><g><title>prepare_outputs (215,262 samples, 0.43%)</title><rect x="97.9955%" y="213" width="0.4257%" height="15" fill="rgb(250,127,30)"/><text x="98.2455%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (412,565 samples, 0.82%)</title><rect x="98.4211%" y="213" width="0.8158%" height="15" fill="rgb(230,49,44)"/><text x="98.6711%" y="223.50"></text></g><g><title>setup_global_ctxt (113,101 samples, 0.22%)</title><rect x="99.2588%" y="213" width="0.2236%" height="15" fill="rgb(229,67,23)"/><text x="99.5088%" y="223.50"></text></g><g><title>all (50,571,751 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (50,571,751 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (261,743 samples, 0.52%)</title><rect x="99.4824%" y="213" width="0.5176%" height="15" fill="rgb(238,154,13)"/><text x="99.7324%" y="223.50"></text></g></svg></svg>