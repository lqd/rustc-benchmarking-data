<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (65,361 samples, 0.12%)</title><rect x="6.9763%" y="133" width="0.1237%" height="15" fill="rgb(227,0,7)"/><text x="7.2263%" y="143.50"></text></g><g><title>codegen_fn_attrs (71,633 samples, 0.14%)</title><rect x="7.3146%" y="117" width="0.1356%" height="15" fill="rgb(217,0,24)"/><text x="7.5646%" y="127.50"></text></g><g><title>needs_drop_raw (183,090 samples, 0.35%)</title><rect x="8.3792%" y="101" width="0.3466%" height="15" fill="rgb(221,193,54)"/><text x="8.6292%" y="111.50"></text></g><g><title>is_copy_raw (157,680 samples, 0.30%)</title><rect x="8.4273%" y="85" width="0.2985%" height="15" fill="rgb(248,212,6)"/><text x="8.6773%" y="95.50"></text></g><g><title>evaluate_obligation (128,260 samples, 0.24%)</title><rect x="8.4829%" y="69" width="0.2428%" height="15" fill="rgb(208,68,35)"/><text x="8.7329%" y="79.50"></text></g><g><title>resolve_instance (92,051 samples, 0.17%)</title><rect x="8.7257%" y="101" width="0.1742%" height="15" fill="rgb(232,128,0)"/><text x="8.9757%" y="111.50"></text></g><g><title>thir_body (167,462 samples, 0.32%)</title><rect x="8.9171%" y="101" width="0.3170%" height="15" fill="rgb(207,160,47)"/><text x="9.1671%" y="111.50"></text></g><g><title>mir_const (1,462,637 samples, 2.77%)</title><rect x="6.5723%" y="149" width="2.7685%" height="15" fill="rgb(228,23,34)"/><text x="6.8223%" y="159.50">mi..</text></g><g><title>unsafety_check_result (1,183,866 samples, 2.24%)</title><rect x="7.1000%" y="133" width="2.2409%" height="15" fill="rgb(218,30,26)"/><text x="7.3500%" y="143.50">u..</text></g><g><title>mir_built (998,862 samples, 1.89%)</title><rect x="7.4502%" y="117" width="1.8907%" height="15" fill="rgb(220,122,19)"/><text x="7.7002%" y="127.50">m..</text></g><g><title>mir_promoted (1,673,478 samples, 3.17%)</title><rect x="6.1967%" y="165" width="3.1676%" height="15" fill="rgb(250,228,42)"/><text x="6.4467%" y="175.50">mir..</text></g><g><title>type_op_ascribe_user_type (322,915 samples, 0.61%)</title><rect x="9.3643%" y="165" width="0.6112%" height="15" fill="rgb(240,193,28)"/><text x="9.6143%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (88,332 samples, 0.17%)</title><rect x="9.9756%" y="165" width="0.1672%" height="15" fill="rgb(216,20,37)"/><text x="10.2256%" y="175.50"></text></g><g><title>type_op_normalize_ty (164,602 samples, 0.31%)</title><rect x="10.2159%" y="165" width="0.3116%" height="15" fill="rgb(206,188,39)"/><text x="10.4659%" y="175.50"></text></g><g><title>normalize_projection_ty (64,851 samples, 0.12%)</title><rect x="10.4047%" y="149" width="0.1228%" height="15" fill="rgb(217,207,13)"/><text x="10.6547%" y="159.50"></text></g><g><title>type_op_prove_predicate (439,875 samples, 0.83%)</title><rect x="10.5274%" y="165" width="0.8326%" height="15" fill="rgb(231,73,38)"/><text x="10.7774%" y="175.50"></text></g><g><title>MIR_borrow_checking (4,902,285 samples, 9.28%)</title><rect x="2.0831%" y="197" width="9.2793%" height="15" fill="rgb(225,20,46)"/><text x="2.3331%" y="207.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (4,878,684 samples, 9.23%)</title><rect x="2.1277%" y="181" width="9.2346%" height="15" fill="rgb(210,31,41)"/><text x="2.3777%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (190,552 samples, 0.36%)</title><rect x="11.3752%" y="197" width="0.3607%" height="15" fill="rgb(221,200,47)"/><text x="11.6252%" y="207.50"></text></g><g><title>get_lang_items (104,891 samples, 0.20%)</title><rect x="12.3190%" y="149" width="0.1985%" height="15" fill="rgb(226,26,5)"/><text x="12.5690%" y="159.50"></text></g><g><title>associated_item (74,560 samples, 0.14%)</title><rect x="12.5982%" y="133" width="0.1411%" height="15" fill="rgb(249,33,26)"/><text x="12.8482%" y="143.50"></text></g><g><title>item_attrs (63,460 samples, 0.12%)</title><rect x="12.7807%" y="117" width="0.1201%" height="15" fill="rgb(235,183,28)"/><text x="13.0307%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (59,540 samples, 0.11%)</title><rect x="12.7881%" y="101" width="0.1127%" height="15" fill="rgb(221,5,38)"/><text x="13.0381%" y="111.50"></text></g><g><title>codegen_fn_attrs (116,820 samples, 0.22%)</title><rect x="12.7394%" y="133" width="0.2211%" height="15" fill="rgb(247,18,42)"/><text x="12.9894%" y="143.50"></text></g><g><title>should_inherit_track_caller (241,040 samples, 0.46%)</title><rect x="12.5175%" y="149" width="0.4563%" height="15" fill="rgb(241,131,45)"/><text x="12.7675%" y="159.50"></text></g><g><title>codegen_fn_attrs (467,284 samples, 0.88%)</title><rect x="12.1547%" y="165" width="0.8845%" height="15" fill="rgb(249,31,29)"/><text x="12.4047%" y="175.50"></text></g><g><title>check_mod_attrs (654,218 samples, 1.24%)</title><rect x="11.8031%" y="181" width="1.2383%" height="15" fill="rgb(225,111,53)"/><text x="12.0531%" y="191.50"></text></g><g><title>check_mod_const_bodies (76,341 samples, 0.14%)</title><rect x="13.0415%" y="181" width="0.1445%" height="15" fill="rgb(238,160,17)"/><text x="13.2915%" y="191.50"></text></g><g><title>lookup_deprecation_entry (114,352 samples, 0.22%)</title><rect x="13.5290%" y="165" width="0.2165%" height="15" fill="rgb(214,148,48)"/><text x="13.7790%" y="175.50"></text></g><g><title>stability_index (64,391 samples, 0.12%)</title><rect x="13.6236%" y="149" width="0.1219%" height="15" fill="rgb(232,36,49)"/><text x="13.8736%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (313,603 samples, 0.59%)</title><rect x="13.2782%" y="181" width="0.5936%" height="15" fill="rgb(209,103,24)"/><text x="13.5282%" y="191.50"></text></g><g><title>misc_checking_1 (1,183,363 samples, 2.24%)</title><rect x="11.7366%" y="197" width="2.2399%" height="15" fill="rgb(229,88,8)"/><text x="11.9866%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (111,352 samples, 0.21%)</title><rect x="13.9791%" y="181" width="0.2108%" height="15" fill="rgb(213,181,19)"/><text x="14.2291%" y="191.50"></text></g><g><title>check_mod_liveness (86,311 samples, 0.16%)</title><rect x="14.0265%" y="165" width="0.1634%" height="15" fill="rgb(254,191,54)"/><text x="14.2765%" y="175.50"></text></g><g><title>misc_checking_2 (261,713 samples, 0.50%)</title><rect x="13.9765%" y="197" width="0.4954%" height="15" fill="rgb(241,83,37)"/><text x="14.2265%" y="207.50"></text></g><g><title>match_checking (148,981 samples, 0.28%)</title><rect x="14.1899%" y="181" width="0.2820%" height="15" fill="rgb(233,36,39)"/><text x="14.4399%" y="191.50"></text></g><g><title>check_match (140,981 samples, 0.27%)</title><rect x="14.2050%" y="165" width="0.2669%" height="15" fill="rgb(226,3,54)"/><text x="14.4550%" y="175.50"></text></g><g><title>check_private_in_public (70,421 samples, 0.13%)</title><rect x="14.4877%" y="181" width="0.1333%" height="15" fill="rgb(245,192,40)"/><text x="14.7377%" y="191.50"></text></g><g><title>death_checking (488,755 samples, 0.93%)</title><rect x="14.6210%" y="181" width="0.9251%" height="15" fill="rgb(238,167,29)"/><text x="14.8710%" y="191.50"></text></g><g><title>item_attrs (363,734 samples, 0.69%)</title><rect x="14.8576%" y="165" width="0.6885%" height="15" fill="rgb(232,182,51)"/><text x="15.1076%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (129,882 samples, 0.25%)</title><rect x="15.3003%" y="149" width="0.2458%" height="15" fill="rgb(231,60,39)"/><text x="15.5503%" y="159.50"></text></g><g><title>param_env (62,871 samples, 0.12%)</title><rect x="16.0225%" y="149" width="0.1190%" height="15" fill="rgb(208,69,12)"/><text x="16.2725%" y="159.50"></text></g><g><title>crate_lints (647,687 samples, 1.23%)</title><rect x="15.5492%" y="165" width="1.2260%" height="15" fill="rgb(235,93,37)"/><text x="15.7992%" y="175.50"></text></g><g><title>type_of (334,773 samples, 0.63%)</title><rect x="16.1415%" y="149" width="0.6337%" height="15" fill="rgb(213,116,39)"/><text x="16.3915%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (254,053 samples, 0.48%)</title><rect x="16.2943%" y="133" width="0.4809%" height="15" fill="rgb(222,207,29)"/><text x="16.5443%" y="143.50"></text></g><g><title>lint_checking (726,778 samples, 1.38%)</title><rect x="15.5461%" y="181" width="1.3757%" height="15" fill="rgb(206,96,30)"/><text x="15.7961%" y="191.50"></text></g><g><title>module_lints (77,471 samples, 0.15%)</title><rect x="16.7752%" y="165" width="0.1466%" height="15" fill="rgb(218,138,4)"/><text x="17.0252%" y="175.50"></text></g><g><title>lint_mod (75,191 samples, 0.14%)</title><rect x="16.7795%" y="149" width="0.1423%" height="15" fill="rgb(250,191,14)"/><text x="17.0295%" y="159.50"></text></g><g><title>privacy_access_levels (96,591 samples, 0.18%)</title><rect x="16.9218%" y="181" width="0.1828%" height="15" fill="rgb(239,60,40)"/><text x="17.1718%" y="191.50"></text></g><g><title>privacy_checking_modules (234,733 samples, 0.44%)</title><rect x="17.1046%" y="181" width="0.4443%" height="15" fill="rgb(206,27,48)"/><text x="17.3546%" y="191.50"></text></g><g><title>check_mod_privacy (233,463 samples, 0.44%)</title><rect x="17.1070%" y="165" width="0.4419%" height="15" fill="rgb(225,35,8)"/><text x="17.3570%" y="175.50"></text></g><g><title>misc_checking_3 (1,636,758 samples, 3.10%)</title><rect x="14.4719%" y="197" width="3.0981%" height="15" fill="rgb(250,213,24)"/><text x="14.7219%" y="207.50">mis..</text></g><g><title>adt_destructor (81,851 samples, 0.15%)</title><rect x="17.7582%" y="149" width="0.1549%" height="15" fill="rgb(247,123,22)"/><text x="18.0082%" y="159.50"></text></g><g><title>coherent_trait (72,931 samples, 0.14%)</title><rect x="17.7751%" y="133" width="0.1380%" height="15" fill="rgb(231,138,38)"/><text x="18.0251%" y="143.50"></text></g><g><title>specialization_graph_of (71,311 samples, 0.13%)</title><rect x="17.7781%" y="117" width="0.1350%" height="15" fill="rgb(231,145,46)"/><text x="18.0281%" y="127.50"></text></g><g><title>param_env (106,201 samples, 0.20%)</title><rect x="17.9131%" y="149" width="0.2010%" height="15" fill="rgb(251,118,11)"/><text x="18.1631%" y="159.50"></text></g><g><title>impl_parent (1,459,959 samples, 2.76%)</title><rect x="23.0023%" y="133" width="2.7635%" height="15" fill="rgb(217,147,25)"/><text x="23.2523%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (776,228 samples, 1.47%)</title><rect x="24.2965%" y="117" width="1.4693%" height="15" fill="rgb(247,81,37)"/><text x="24.5465%" y="127.50"></text></g><g><title>impl_trait_ref (3,012,474 samples, 5.70%)</title><rect x="25.7658%" y="133" width="5.7022%" height="15" fill="rgb(209,12,38)"/><text x="26.0158%" y="143.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,309,816 samples, 4.37%)</title><rect x="27.0958%" y="117" width="4.3721%" height="15" fill="rgb(227,1,9)"/><text x="27.3458%" y="127.50">metad..</text></g><g><title>coherent_trait (7,915,069 samples, 14.98%)</title><rect x="17.6776%" y="165" width="14.9820%" height="15" fill="rgb(248,47,43)"/><text x="17.9276%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (7,684,447 samples, 14.55%)</title><rect x="18.1141%" y="149" width="14.5455%" height="15" fill="rgb(221,10,30)"/><text x="18.3641%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (627,218 samples, 1.19%)</title><rect x="31.4724%" y="133" width="1.1872%" height="15" fill="rgb(210,229,1)"/><text x="31.7224%" y="143.50"></text></g><g><title>implementations_of_trait (146,850 samples, 0.28%)</title><rect x="32.3816%" y="117" width="0.2780%" height="15" fill="rgb(222,148,37)"/><text x="32.6316%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (126,620 samples, 0.24%)</title><rect x="32.4199%" y="101" width="0.2397%" height="15" fill="rgb(234,67,33)"/><text x="32.6699%" y="111.50"></text></g><g><title>coherence_checking (8,010,600 samples, 15.16%)</title><rect x="17.6227%" y="181" width="15.1628%" height="15" fill="rgb(247,98,35)"/><text x="17.8727%" y="191.50">coherence_checking</text></g><g><title>associated_item (185,112 samples, 0.35%)</title><rect x="38.4021%" y="117" width="0.3504%" height="15" fill="rgb(247,138,52)"/><text x="38.6521%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (144,852 samples, 0.27%)</title><rect x="38.4783%" y="101" width="0.2742%" height="15" fill="rgb(213,79,30)"/><text x="38.7283%" y="111.50"></text></g><g><title>associated_items (245,583 samples, 0.46%)</title><rect x="38.3072%" y="133" width="0.4649%" height="15" fill="rgb(246,177,23)"/><text x="38.5572%" y="143.50"></text></g><g><title>dropck_outlives (74,942 samples, 0.14%)</title><rect x="38.7957%" y="133" width="0.1419%" height="15" fill="rgb(230,62,27)"/><text x="39.0457%" y="143.50"></text></g><g><title>evaluate_obligation (257,552 samples, 0.49%)</title><rect x="38.9375%" y="133" width="0.4875%" height="15" fill="rgb(216,154,8)"/><text x="39.1875%" y="143.50"></text></g><g><title>method_autoderef_steps (65,520 samples, 0.12%)</title><rect x="39.6413%" y="133" width="0.1240%" height="15" fill="rgb(244,35,45)"/><text x="39.8913%" y="143.50"></text></g><g><title>predicates_of (53,170 samples, 0.10%)</title><rect x="39.7927%" y="133" width="0.1006%" height="15" fill="rgb(251,115,12)"/><text x="40.0427%" y="143.50"></text></g><g><title>associated_item (77,721 samples, 0.15%)</title><rect x="41.7287%" y="101" width="0.1471%" height="15" fill="rgb(240,54,50)"/><text x="41.9787%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (55,291 samples, 0.10%)</title><rect x="41.7712%" y="85" width="0.1047%" height="15" fill="rgb(233,84,52)"/><text x="42.0212%" y="95.50"></text></g><g><title>associated_items (112,582 samples, 0.21%)</title><rect x="41.6712%" y="117" width="0.2131%" height="15" fill="rgb(207,117,47)"/><text x="41.9212%" y="127.50"></text></g><g><title>explicit_predicates_of (63,470 samples, 0.12%)</title><rect x="42.2053%" y="53" width="0.1201%" height="15" fill="rgb(249,43,39)"/><text x="42.4553%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (63,170 samples, 0.12%)</title><rect x="42.2059%" y="37" width="0.1196%" height="15" fill="rgb(209,38,44)"/><text x="42.4559%" y="47.50"></text></g><g><title>is_copy_raw (122,222 samples, 0.23%)</title><rect x="42.0950%" y="117" width="0.2313%" height="15" fill="rgb(236,212,23)"/><text x="42.3450%" y="127.50"></text></g><g><title>evaluate_obligation (107,022 samples, 0.20%)</title><rect x="42.1238%" y="101" width="0.2026%" height="15" fill="rgb(242,79,21)"/><text x="42.3738%" y="111.50"></text></g><g><title>predicates_of (66,240 samples, 0.13%)</title><rect x="42.2010%" y="85" width="0.1254%" height="15" fill="rgb(211,96,35)"/><text x="42.4510%" y="95.50"></text></g><g><title>predicates_defined_on (64,880 samples, 0.12%)</title><rect x="42.2035%" y="69" width="0.1228%" height="15" fill="rgb(253,215,40)"/><text x="42.4535%" y="79.50"></text></g><g><title>typeck (1,294,064 samples, 2.45%)</title><rect x="40.0008%" y="133" width="2.4495%" height="15" fill="rgb(211,81,21)"/><text x="40.2508%" y="143.50">ty..</text></g><g><title>item_bodies_checking (5,070,646 samples, 9.60%)</title><rect x="32.8617%" y="181" width="9.5980%" height="15" fill="rgb(208,190,38)"/><text x="33.1117%" y="191.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (5,068,516 samples, 9.59%)</title><rect x="32.8657%" y="165" width="9.5939%" height="15" fill="rgb(235,213,38)"/><text x="33.1157%" y="175.50">typeck_item_bo..</text></g><g><title>typeck (5,052,286 samples, 9.56%)</title><rect x="32.8964%" y="149" width="9.5632%" height="15" fill="rgb(237,122,38)"/><text x="33.1464%" y="159.50">typeck</text></g><g><title>item_types_checking (683,497 samples, 1.29%)</title><rect x="42.4596%" y="181" width="1.2938%" height="15" fill="rgb(244,218,35)"/><text x="42.7096%" y="191.50"></text></g><g><title>check_mod_item_types (681,637 samples, 1.29%)</title><rect x="42.4632%" y="165" width="1.2902%" height="15" fill="rgb(240,68,47)"/><text x="42.7132%" y="175.50"></text></g><g><title>type_of (74,840 samples, 0.14%)</title><rect x="44.6853%" y="133" width="0.1417%" height="15" fill="rgb(210,16,53)"/><text x="44.9353%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (72,000 samples, 0.14%)</title><rect x="44.6906%" y="117" width="0.1363%" height="15" fill="rgb(235,124,12)"/><text x="44.9406%" y="127.50"></text></g><g><title>fn_sig (291,135 samples, 0.55%)</title><rect x="44.2992%" y="149" width="0.5511%" height="15" fill="rgb(224,169,11)"/><text x="44.5492%" y="159.50"></text></g><g><title>is_late_bound_map (68,942 samples, 0.13%)</title><rect x="45.1242%" y="133" width="0.1305%" height="15" fill="rgb(250,166,2)"/><text x="45.3742%" y="143.50"></text></g><g><title>named_region_map (333,353 samples, 0.63%)</title><rect x="45.2547%" y="133" width="0.6310%" height="15" fill="rgb(242,216,29)"/><text x="45.5047%" y="143.50"></text></g><g><title>resolve_lifetimes (312,043 samples, 0.59%)</title><rect x="45.2951%" y="117" width="0.5906%" height="15" fill="rgb(230,116,27)"/><text x="45.5451%" y="127.50"></text></g><g><title>lint_levels (110,591 samples, 0.21%)</title><rect x="45.6764%" y="101" width="0.2093%" height="15" fill="rgb(228,99,48)"/><text x="45.9264%" y="111.50"></text></g><g><title>generics_of (570,385 samples, 1.08%)</title><rect x="44.8503%" y="149" width="1.0797%" height="15" fill="rgb(253,11,6)"/><text x="45.1003%" y="159.50"></text></g><g><title>impl_trait_ref (70,990 samples, 0.13%)</title><rect x="45.9299%" y="149" width="0.1344%" height="15" fill="rgb(247,143,39)"/><text x="46.1799%" y="159.50"></text></g><g><title>late_bound_vars_map (54,150 samples, 0.10%)</title><rect x="46.4551%" y="117" width="0.1025%" height="15" fill="rgb(236,97,10)"/><text x="46.7051%" y="127.50"></text></g><g><title>explicit_item_bounds (106,160 samples, 0.20%)</title><rect x="46.3648%" y="133" width="0.2009%" height="15" fill="rgb(233,208,19)"/><text x="46.6148%" y="143.50"></text></g><g><title>item_bounds (286,723 samples, 0.54%)</title><rect x="46.0643%" y="149" width="0.5427%" height="15" fill="rgb(216,164,2)"/><text x="46.3143%" y="159.50"></text></g><g><title>late_bound_vars_map (110,621 samples, 0.21%)</title><rect x="47.4252%" y="101" width="0.2094%" height="15" fill="rgb(220,129,5)"/><text x="47.6752%" y="111.50"></text></g><g><title>resolve_lifetimes (104,351 samples, 0.20%)</title><rect x="47.4371%" y="85" width="0.1975%" height="15" fill="rgb(242,17,10)"/><text x="47.6871%" y="95.50"></text></g><g><title>explicit_predicates_of (518,737 samples, 0.98%)</title><rect x="46.9213%" y="117" width="0.9819%" height="15" fill="rgb(242,107,0)"/><text x="47.1713%" y="127.50"></text></g><g><title>type_param_predicates (99,000 samples, 0.19%)</title><rect x="47.7158%" y="101" width="0.1874%" height="15" fill="rgb(251,28,31)"/><text x="47.9658%" y="111.50"></text></g><g><title>predicates_of (718,959 samples, 1.36%)</title><rect x="46.6070%" y="149" width="1.3609%" height="15" fill="rgb(233,223,10)"/><text x="46.8570%" y="159.50"></text></g><g><title>predicates_defined_on (655,788 samples, 1.24%)</title><rect x="46.7266%" y="133" width="1.2413%" height="15" fill="rgb(215,21,27)"/><text x="46.9766%" y="143.50"></text></g><g><title>super_predicates_of (136,561 samples, 0.26%)</title><rect x="47.9679%" y="149" width="0.2585%" height="15" fill="rgb(232,23,21)"/><text x="48.2179%" y="159.50"></text></g><g><title>super_predicates_that_define_assoc_type (111,011 samples, 0.21%)</title><rect x="48.0162%" y="133" width="0.2101%" height="15" fill="rgb(244,5,23)"/><text x="48.2662%" y="143.50"></text></g><g><title>type_collecting (2,669,020 samples, 5.05%)</title><rect x="43.7550%" y="181" width="5.0520%" height="15" fill="rgb(226,81,46)"/><text x="44.0050%" y="191.50">type_c..</text></g><g><title>collect_mod_item_types (2,656,740 samples, 5.03%)</title><rect x="43.7782%" y="165" width="5.0288%" height="15" fill="rgb(247,70,30)"/><text x="44.0282%" y="175.50">collec..</text></g><g><title>type_of (301,762 samples, 0.57%)</title><rect x="48.2358%" y="149" width="0.5712%" height="15" fill="rgb(212,68,19)"/><text x="48.4858%" y="159.50"></text></g><g><title>evaluate_obligation (58,911 samples, 0.11%)</title><rect x="49.9883%" y="149" width="0.1115%" height="15" fill="rgb(240,187,13)"/><text x="50.2383%" y="159.50"></text></g><g><title>implied_outlives_bounds (82,081 samples, 0.16%)</title><rect x="50.1080%" y="149" width="0.1554%" height="15" fill="rgb(223,113,26)"/><text x="50.3580%" y="159.50"></text></g><g><title>param_env (109,640 samples, 0.21%)</title><rect x="50.2634%" y="149" width="0.2075%" height="15" fill="rgb(206,192,2)"/><text x="50.5134%" y="159.50"></text></g><g><title>check_impl_item_well_formed (828,679 samples, 1.57%)</title><rect x="48.9749%" y="165" width="1.5686%" height="15" fill="rgb(241,108,4)"/><text x="49.2249%" y="175.50"></text></g><g><title>evaluate_obligation (73,350 samples, 0.14%)</title><rect x="52.5646%" y="149" width="0.1388%" height="15" fill="rgb(247,173,49)"/><text x="52.8146%" y="159.50"></text></g><g><title>implied_outlives_bounds (102,751 samples, 0.19%)</title><rect x="52.7134%" y="149" width="0.1945%" height="15" fill="rgb(224,114,35)"/><text x="52.9634%" y="159.50"></text></g><g><title>param_env (190,883 samples, 0.36%)</title><rect x="52.9079%" y="149" width="0.3613%" height="15" fill="rgb(245,159,27)"/><text x="53.1579%" y="159.50"></text></g><g><title>check_item_well_formed (1,539,918 samples, 2.91%)</title><rect x="50.5435%" y="165" width="2.9148%" height="15" fill="rgb(245,172,44)"/><text x="50.7935%" y="175.50">ch..</text></g><g><title>evaluate_obligation (168,121 samples, 0.32%)</title><rect x="54.8457%" y="149" width="0.3182%" height="15" fill="rgb(236,23,11)"/><text x="55.0957%" y="159.50"></text></g><g><title>implied_outlives_bounds (105,191 samples, 0.20%)</title><rect x="55.1639%" y="149" width="0.1991%" height="15" fill="rgb(205,117,38)"/><text x="55.4139%" y="159.50"></text></g><g><title>param_env (85,321 samples, 0.16%)</title><rect x="55.3652%" y="149" width="0.1615%" height="15" fill="rgb(237,72,25)"/><text x="55.6152%" y="159.50"></text></g><g><title>predicates_of (76,661 samples, 0.15%)</title><rect x="55.5267%" y="149" width="0.1451%" height="15" fill="rgb(244,70,9)"/><text x="55.7767%" y="159.50"></text></g><g><title>predicates_defined_on (62,811 samples, 0.12%)</title><rect x="55.5529%" y="133" width="0.1189%" height="15" fill="rgb(217,125,39)"/><text x="55.8029%" y="143.50"></text></g><g><title>analysis (28,619,230 samples, 54.17%)</title><rect x="1.6107%" y="213" width="54.1718%" height="15" fill="rgb(235,36,10)"/><text x="1.8607%" y="223.50">analysis</text></g><g><title>type_check_crate (20,187,856 samples, 38.21%)</title><rect x="17.5700%" y="197" width="38.2125%" height="15" fill="rgb(251,123,47)"/><text x="17.8200%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,684,151 samples, 6.97%)</title><rect x="48.8090%" y="181" width="6.9735%" height="15" fill="rgb(221,13,13)"/><text x="49.0590%" y="191.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (1,227,902 samples, 2.32%)</title><rect x="53.4583%" y="165" width="2.3242%" height="15" fill="rgb(238,131,9)"/><text x="53.7083%" y="175.50">c..</text></g><g><title>codegen_crate (474,705 samples, 0.90%)</title><rect x="55.8042%" y="213" width="0.8985%" height="15" fill="rgb(211,50,8)"/><text x="56.0542%" y="223.50"></text></g><g><title>AST_validation (124,871 samples, 0.24%)</title><rect x="57.1293%" y="197" width="0.2364%" height="15" fill="rgb(245,182,24)"/><text x="57.3793%" y="207.50"></text></g><g><title>crate_injection (82,951 samples, 0.16%)</title><rect x="57.4604%" y="197" width="0.1570%" height="15" fill="rgb(242,14,37)"/><text x="57.7104%" y="207.50"></text></g><g><title>metadata_load_macro (115,220 samples, 0.22%)</title><rect x="81.0060%" y="165" width="0.2181%" height="15" fill="rgb(246,228,12)"/><text x="81.2560%" y="175.50"></text></g><g><title>macro_expand_crate (12,840,233 samples, 24.30%)</title><rect x="57.6174%" y="197" width="24.3046%" height="15" fill="rgb(213,55,15)"/><text x="57.8674%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (12,813,933 samples, 24.25%)</title><rect x="57.6672%" y="181" width="24.2548%" height="15" fill="rgb(209,9,3)"/><text x="57.9172%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (368,664 samples, 0.70%)</title><rect x="81.2241%" y="165" width="0.6978%" height="15" fill="rgb(230,59,30)"/><text x="81.4741%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (179,382 samples, 0.34%)</title><rect x="81.9319%" y="197" width="0.3395%" height="15" fill="rgb(209,121,21)"/><text x="82.1819%" y="207.50"></text></g><g><title>finalize_macro_resolutions (231,863 samples, 0.44%)</title><rect x="82.3740%" y="181" width="0.4389%" height="15" fill="rgb(220,109,13)"/><text x="82.6240%" y="191.50"></text></g><g><title>late_resolve_crate (1,150,842 samples, 2.18%)</title><rect x="82.8129%" y="181" width="2.1784%" height="15" fill="rgb(232,18,1)"/><text x="83.0629%" y="191.50">l..</text></g><g><title>configure_and_expand (15,036,058 samples, 28.46%)</title><rect x="56.7027%" y="213" width="28.4609%" height="15" fill="rgb(215,41,42)"/><text x="56.9527%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,527,987 samples, 2.89%)</title><rect x="82.2714%" y="197" width="2.8922%" height="15" fill="rgb(224,123,36)"/><text x="82.5214%" y="207.50">re..</text></g><g><title>drop_ast (128,591 samples, 0.24%)</title><rect x="85.1637%" y="213" width="0.2434%" height="15" fill="rgb(240,125,3)"/><text x="85.4137%" y="223.50"></text></g><g><title>early_lint_checks (268,833 samples, 0.51%)</title><rect x="85.4378%" y="213" width="0.5089%" height="15" fill="rgb(205,98,50)"/><text x="85.6878%" y="223.50"></text></g><g><title>free_global_ctxt (1,455,376 samples, 2.75%)</title><rect x="85.9467%" y="213" width="2.7548%" height="15" fill="rgb(205,185,37)"/><text x="86.1967%" y="223.50">fr..</text></g><g><title>crate_hash (61,221 samples, 0.12%)</title><rect x="89.4083%" y="197" width="0.1159%" height="15" fill="rgb(238,207,15)"/><text x="89.6583%" y="207.50"></text></g><g><title>generate_crate_metadata (507,836 samples, 0.96%)</title><rect x="88.7015%" y="213" width="0.9613%" height="15" fill="rgb(213,199,42)"/><text x="88.9515%" y="223.50"></text></g><g><title>hir_lowering (1,653,079 samples, 3.13%)</title><rect x="89.6628%" y="213" width="3.1290%" height="15" fill="rgb(235,201,11)"/><text x="89.9128%" y="223.50">hir..</text></g><g><title>parse_crate (2,606,159 samples, 4.93%)</title><rect x="92.8736%" y="213" width="4.9331%" height="15" fill="rgb(207,46,11)"/><text x="93.1236%" y="223.50">parse_..</text></g><g><title>prepare_outputs (303,833 samples, 0.58%)</title><rect x="97.8231%" y="213" width="0.5751%" height="15" fill="rgb(241,35,35)"/><text x="98.0731%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (442,965 samples, 0.84%)</title><rect x="98.3982%" y="213" width="0.8385%" height="15" fill="rgb(243,32,47)"/><text x="98.6482%" y="223.50"></text></g><g><title>setup_global_ctxt (129,122 samples, 0.24%)</title><rect x="99.2565%" y="213" width="0.2444%" height="15" fill="rgb(247,202,23)"/><text x="99.5065%" y="223.50"></text></g><g><title>all (52,830,490 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (52,830,490 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (263,693 samples, 0.50%)</title><rect x="99.5009%" y="213" width="0.4991%" height="15" fill="rgb(222,74,54)"/><text x="99.7509%" y="223.50"></text></g></svg></svg>