<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (596,606 samples, 0.15%)</title><rect x="9.1868%" y="149" width="0.1515%" height="15" fill="rgb(227,0,7)"/><text x="9.4368%" y="159.50"></text></g><g><title>is_sized_raw (1,860,174 samples, 0.47%)</title><rect x="9.4357%" y="149" width="0.4723%" height="15" fill="rgb(217,0,24)"/><text x="9.6857%" y="159.50"></text></g><g><title>evaluate_obligation (1,544,579 samples, 0.39%)</title><rect x="9.5159%" y="133" width="0.3922%" height="15" fill="rgb(221,193,54)"/><text x="9.7659%" y="143.50"></text></g><g><title>param_env (1,972,264 samples, 0.50%)</title><rect x="11.3984%" y="117" width="0.5008%" height="15" fill="rgb(248,212,6)"/><text x="11.6484%" y="127.50"></text></g><g><title>is_copy_raw (1,005,299 samples, 0.26%)</title><rect x="14.6582%" y="85" width="0.2553%" height="15" fill="rgb(208,68,35)"/><text x="14.9082%" y="95.50"></text></g><g><title>evaluate_obligation (818,047 samples, 0.21%)</title><rect x="14.7057%" y="69" width="0.2077%" height="15" fill="rgb(232,128,0)"/><text x="14.9557%" y="79.50"></text></g><g><title>is_copy_raw (2,270,269 samples, 0.58%)</title><rect x="15.0107%" y="69" width="0.5764%" height="15" fill="rgb(207,160,47)"/><text x="15.2607%" y="79.50"></text></g><g><title>evaluate_obligation (1,733,513 samples, 0.44%)</title><rect x="15.1470%" y="53" width="0.4402%" height="15" fill="rgb(228,23,34)"/><text x="15.3970%" y="63.50"></text></g><g><title>needs_drop_raw (2,654,792 samples, 0.67%)</title><rect x="14.9144%" y="85" width="0.6741%" height="15" fill="rgb(218,30,26)"/><text x="15.1644%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,987,090 samples, 0.50%)</title><rect x="15.7952%" y="69" width="0.5045%" height="15" fill="rgb(220,122,19)"/><text x="16.0452%" y="79.50"></text></g><g><title>specialization_graph_of (882,200 samples, 0.22%)</title><rect x="16.3443%" y="69" width="0.2240%" height="15" fill="rgb(250,228,42)"/><text x="16.5943%" y="79.50"></text></g><g><title>impl_trait_ref (485,746 samples, 0.12%)</title><rect x="16.4449%" y="53" width="0.1233%" height="15" fill="rgb(240,193,28)"/><text x="16.6949%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (431,395 samples, 0.11%)</title><rect x="16.4587%" y="37" width="0.1095%" height="15" fill="rgb(216,20,37)"/><text x="16.7087%" y="47.50"></text></g><g><title>resolve_instance (4,026,237 samples, 1.02%)</title><rect x="15.5990%" y="85" width="1.0223%" height="15" fill="rgb(206,188,39)"/><text x="15.8490%" y="95.50"></text></g><g><title>thir_body (2,802,132 samples, 0.71%)</title><rect x="16.6563%" y="85" width="0.7115%" height="15" fill="rgb(217,207,13)"/><text x="16.9063%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,153,033 samples, 0.29%)</title><rect x="17.3894%" y="85" width="0.2928%" height="15" fill="rgb(231,73,38)"/><text x="17.6394%" y="95.50"></text></g><g><title>normalize_projection_ty (909,910 samples, 0.23%)</title><rect x="17.4511%" y="69" width="0.2310%" height="15" fill="rgb(225,20,46)"/><text x="17.7011%" y="79.50"></text></g><g><title>mir_const (27,931,138 samples, 7.09%)</title><rect x="10.5930%" y="133" width="7.0921%" height="15" fill="rgb(210,31,41)"/><text x="10.8430%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (22,787,025 samples, 5.79%)</title><rect x="11.8991%" y="117" width="5.7859%" height="15" fill="rgb(221,200,47)"/><text x="12.1491%" y="127.50">unsafet..</text></g><g><title>mir_built (20,882,217 samples, 5.30%)</title><rect x="12.3828%" y="101" width="5.3023%" height="15" fill="rgb(226,26,5)"/><text x="12.6328%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (31,386,367 samples, 7.97%)</title><rect x="9.9081%" y="149" width="7.9694%" height="15" fill="rgb(249,33,26)"/><text x="10.1581%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (757,715 samples, 0.19%)</title><rect x="17.6850%" y="133" width="0.1924%" height="15" fill="rgb(235,183,28)"/><text x="17.9350%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (575,899 samples, 0.15%)</title><rect x="17.8774%" y="149" width="0.1462%" height="15" fill="rgb(221,5,38)"/><text x="18.1274%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,317,632 samples, 0.33%)</title><rect x="18.0237%" y="149" width="0.3346%" height="15" fill="rgb(247,18,42)"/><text x="18.2737%" y="159.50"></text></g><g><title>normalize_projection_ty (929,838 samples, 0.24%)</title><rect x="18.1221%" y="133" width="0.2361%" height="15" fill="rgb(241,131,45)"/><text x="18.3721%" y="143.50"></text></g><g><title>type_op_normalize_predicate (734,739 samples, 0.19%)</title><rect x="18.3582%" y="149" width="0.1866%" height="15" fill="rgb(249,31,29)"/><text x="18.6082%" y="159.50"></text></g><g><title>normalize_projection_ty (428,025 samples, 0.11%)</title><rect x="18.4361%" y="133" width="0.1087%" height="15" fill="rgb(225,111,53)"/><text x="18.6861%" y="143.50"></text></g><g><title>type_op_normalize_ty (8,892,748 samples, 2.26%)</title><rect x="18.5448%" y="149" width="2.2580%" height="15" fill="rgb(238,160,17)"/><text x="18.7948%" y="159.50">t..</text></g><g><title>normalize_projection_ty (7,520,321 samples, 1.91%)</title><rect x="18.8933%" y="133" width="1.9095%" height="15" fill="rgb(214,148,48)"/><text x="19.1433%" y="143.50">n..</text></g><g><title>type_op_prove_predicate (8,659,489 samples, 2.20%)</title><rect x="20.8028%" y="149" width="2.1988%" height="15" fill="rgb(232,36,49)"/><text x="21.0528%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (89,164,099 samples, 22.64%)</title><rect x="0.3634%" y="181" width="22.6399%" height="15" fill="rgb(209,103,24)"/><text x="0.6134%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (88,494,480 samples, 22.47%)</title><rect x="0.5334%" y="165" width="22.4699%" height="15" fill="rgb(229,88,8)"/><text x="0.7834%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (417,485 samples, 0.11%)</title><rect x="23.0033%" y="181" width="0.1060%" height="15" fill="rgb(213,181,19)"/><text x="23.2533%" y="191.50"></text></g><g><title>hir_module_items (613,357 samples, 0.16%)</title><rect x="23.1093%" y="181" width="0.1557%" height="15" fill="rgb(254,191,54)"/><text x="23.3593%" y="191.50"></text></g><g><title>item_attrs (425,358 samples, 0.11%)</title><rect x="23.7051%" y="101" width="0.1080%" height="15" fill="rgb(241,83,37)"/><text x="23.9551%" y="111.50"></text></g><g><title>codegen_fn_attrs (806,952 samples, 0.20%)</title><rect x="23.6695%" y="117" width="0.2049%" height="15" fill="rgb(233,36,39)"/><text x="23.9195%" y="127.50"></text></g><g><title>should_inherit_track_caller (1,307,037 samples, 0.33%)</title><rect x="23.5513%" y="133" width="0.3319%" height="15" fill="rgb(226,3,54)"/><text x="23.8013%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,807,542 samples, 0.46%)</title><rect x="23.4294%" y="149" width="0.4590%" height="15" fill="rgb(245,192,40)"/><text x="23.6794%" y="159.50"></text></g><g><title>check_mod_attrs (2,439,637 samples, 0.62%)</title><rect x="23.2689%" y="165" width="0.6195%" height="15" fill="rgb(238,167,29)"/><text x="23.5189%" y="175.50"></text></g><g><title>check_mod_const_bodies (446,965 samples, 0.11%)</title><rect x="23.8884%" y="165" width="0.1135%" height="15" fill="rgb(232,182,51)"/><text x="24.1384%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (934,960 samples, 0.24%)</title><rect x="24.0508%" y="165" width="0.2374%" height="15" fill="rgb(231,60,39)"/><text x="24.3008%" y="175.50"></text></g><g><title>misc_checking_1 (4,146,226 samples, 1.05%)</title><rect x="23.2652%" y="181" width="1.0528%" height="15" fill="rgb(208,69,12)"/><text x="23.5152%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,135,363 samples, 0.29%)</title><rect x="24.3185%" y="165" width="0.2883%" height="15" fill="rgb(235,93,37)"/><text x="24.5685%" y="175.50"></text></g><g><title>check_mod_liveness (928,380 samples, 0.24%)</title><rect x="24.3710%" y="149" width="0.2357%" height="15" fill="rgb(213,116,39)"/><text x="24.6210%" y="159.50"></text></g><g><title>param_env (409,414 samples, 0.10%)</title><rect x="24.9770%" y="133" width="0.1040%" height="15" fill="rgb(222,207,29)"/><text x="25.2270%" y="143.50"></text></g><g><title>misc_checking_2 (3,010,744 samples, 0.76%)</title><rect x="24.3180%" y="181" width="0.7645%" height="15" fill="rgb(206,96,30)"/><text x="24.5680%" y="191.50"></text></g><g><title>match_checking (1,873,501 samples, 0.48%)</title><rect x="24.6067%" y="165" width="0.4757%" height="15" fill="rgb(218,138,4)"/><text x="24.8567%" y="175.50"></text></g><g><title>check_match (1,718,519 samples, 0.44%)</title><rect x="24.6461%" y="149" width="0.4364%" height="15" fill="rgb(250,191,14)"/><text x="24.8961%" y="159.50"></text></g><g><title>check_private_in_public (797,729 samples, 0.20%)</title><rect x="25.0852%" y="165" width="0.2026%" height="15" fill="rgb(239,60,40)"/><text x="25.3352%" y="175.50"></text></g><g><title>death_checking (1,457,216 samples, 0.37%)</title><rect x="25.2878%" y="165" width="0.3700%" height="15" fill="rgb(206,27,48)"/><text x="25.5378%" y="175.50"></text></g><g><title>crate_lints (2,845,422 samples, 0.72%)</title><rect x="25.6582%" y="149" width="0.7225%" height="15" fill="rgb(225,35,8)"/><text x="25.9082%" y="159.50"></text></g><g><title>type_of (1,161,102 samples, 0.29%)</title><rect x="26.0859%" y="133" width="0.2948%" height="15" fill="rgb(250,213,24)"/><text x="26.3359%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (925,060 samples, 0.23%)</title><rect x="26.1458%" y="117" width="0.2349%" height="15" fill="rgb(247,123,22)"/><text x="26.3958%" y="127.50"></text></g><g><title>lint_checking (3,694,572 samples, 0.94%)</title><rect x="25.6578%" y="165" width="0.9381%" height="15" fill="rgb(231,138,38)"/><text x="25.9078%" y="175.50"></text></g><g><title>module_lints (847,530 samples, 0.22%)</title><rect x="26.3807%" y="149" width="0.2152%" height="15" fill="rgb(231,145,46)"/><text x="26.6307%" y="159.50"></text></g><g><title>lint_mod (843,640 samples, 0.21%)</title><rect x="26.3817%" y="133" width="0.2142%" height="15" fill="rgb(251,118,11)"/><text x="26.6317%" y="143.50"></text></g><g><title>privacy_access_levels (1,308,305 samples, 0.33%)</title><rect x="26.5959%" y="165" width="0.3322%" height="15" fill="rgb(217,147,25)"/><text x="26.8459%" y="175.50"></text></g><g><title>privacy_checking_modules (2,901,272 samples, 0.74%)</title><rect x="26.9281%" y="165" width="0.7367%" height="15" fill="rgb(247,81,37)"/><text x="27.1781%" y="175.50"></text></g><g><title>check_mod_privacy (2,899,152 samples, 0.74%)</title><rect x="26.9286%" y="149" width="0.7361%" height="15" fill="rgb(209,12,38)"/><text x="27.1786%" y="159.50"></text></g><g><title>misc_checking_3 (10,195,394 samples, 2.59%)</title><rect x="25.0824%" y="181" width="2.5887%" height="15" fill="rgb(227,1,9)"/><text x="25.3324%" y="191.50">mi..</text></g><g><title>impl_parent (4,027,201 samples, 1.02%)</title><rect x="32.7906%" y="117" width="1.0226%" height="15" fill="rgb(248,47,43)"/><text x="33.0406%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,234,732 samples, 0.57%)</title><rect x="33.2458%" y="101" width="0.5674%" height="15" fill="rgb(221,10,30)"/><text x="33.4958%" y="111.50"></text></g><g><title>impl_trait_ref (7,617,415 samples, 1.93%)</title><rect x="33.8142%" y="117" width="1.9342%" height="15" fill="rgb(210,229,1)"/><text x="34.0642%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,997,887 samples, 1.52%)</title><rect x="34.2255%" y="101" width="1.5229%" height="15" fill="rgb(222,148,37)"/><text x="34.4755%" y="111.50"></text></g><g><title>item_attrs (1,768,369 samples, 0.45%)</title><rect x="35.7484%" y="117" width="0.4490%" height="15" fill="rgb(234,67,33)"/><text x="35.9984%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,646,737 samples, 0.42%)</title><rect x="35.7793%" y="101" width="0.4181%" height="15" fill="rgb(247,98,35)"/><text x="36.0293%" y="111.50"></text></g><g><title>predicates_of (1,443,956 samples, 0.37%)</title><rect x="36.1978%" y="117" width="0.3666%" height="15" fill="rgb(247,138,52)"/><text x="36.4478%" y="127.50"></text></g><g><title>predicates_defined_on (922,126 samples, 0.23%)</title><rect x="36.3303%" y="101" width="0.2341%" height="15" fill="rgb(213,79,30)"/><text x="36.5803%" y="111.50"></text></g><g><title>trait_impls_of (1,585,407 samples, 0.40%)</title><rect x="36.5651%" y="117" width="0.4026%" height="15" fill="rgb(246,177,23)"/><text x="36.8151%" y="127.50"></text></g><g><title>implementations_of_trait (558,957 samples, 0.14%)</title><rect x="36.8257%" y="101" width="0.1419%" height="15" fill="rgb(230,62,27)"/><text x="37.0757%" y="111.50"></text></g><g><title>coherent_trait (41,695,807 samples, 10.59%)</title><rect x="27.7467%" y="149" width="10.5871%" height="15" fill="rgb(216,154,8)"/><text x="27.9967%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (41,182,602 samples, 10.46%)</title><rect x="27.8770%" y="133" width="10.4568%" height="15" fill="rgb(244,35,45)"/><text x="28.1270%" y="143.50">specialization_..</text></g><g><title>visible_parent_map (5,044,037 samples, 1.28%)</title><rect x="37.0531%" y="117" width="1.2807%" height="15" fill="rgb(251,115,12)"/><text x="37.3031%" y="127.50"></text></g><g><title>module_children (4,549,321 samples, 1.16%)</title><rect x="37.1787%" y="101" width="1.1551%" height="15" fill="rgb(240,54,50)"/><text x="37.4287%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (4,435,921 samples, 1.13%)</title><rect x="37.2075%" y="85" width="1.1263%" height="15" fill="rgb(233,84,52)"/><text x="37.4575%" y="95.50"></text></g><g><title>coherence_checking (41,937,760 samples, 10.65%)</title><rect x="27.7325%" y="165" width="10.6485%" height="15" fill="rgb(207,117,47)"/><text x="27.9825%" y="175.50">coherence_checki..</text></g><g><title>associated_items (401,923 samples, 0.10%)</title><rect x="53.4860%" y="117" width="0.1021%" height="15" fill="rgb(249,43,39)"/><text x="53.7360%" y="127.50"></text></g><g><title>dropck_outlives (2,300,588 samples, 0.58%)</title><rect x="53.6522%" y="117" width="0.5841%" height="15" fill="rgb(209,38,44)"/><text x="53.9022%" y="127.50"></text></g><g><title>normalize_projection_ty (1,396,996 samples, 0.35%)</title><rect x="53.8816%" y="101" width="0.3547%" height="15" fill="rgb(236,212,23)"/><text x="54.1316%" y="111.50"></text></g><g><title>evaluate_obligation (5,866,271 samples, 1.49%)</title><rect x="54.2363%" y="117" width="1.4895%" height="15" fill="rgb(242,79,21)"/><text x="54.4863%" y="127.50"></text></g><g><title>method_autoderef_steps (1,225,826 samples, 0.31%)</title><rect x="55.8536%" y="117" width="0.3113%" height="15" fill="rgb(211,96,35)"/><text x="56.1036%" y="127.50"></text></g><g><title>evaluate_obligation (619,335 samples, 0.16%)</title><rect x="56.0076%" y="101" width="0.1573%" height="15" fill="rgb(253,215,40)"/><text x="56.2576%" y="111.50"></text></g><g><title>evaluate_obligation (617,314 samples, 0.16%)</title><rect x="58.6552%" y="101" width="0.1567%" height="15" fill="rgb(211,81,21)"/><text x="58.9052%" y="111.50"></text></g><g><title>typeck (10,827,640 samples, 2.75%)</title><rect x="56.3011%" y="117" width="2.7493%" height="15" fill="rgb(208,190,38)"/><text x="56.5511%" y="127.50">ty..</text></g><g><title>item_bodies_checking (81,368,712 samples, 20.66%)</title><rect x="38.4331%" y="165" width="20.6605%" height="15" fill="rgb(235,213,38)"/><text x="38.6831%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (81,364,141 samples, 20.66%)</title><rect x="38.4342%" y="149" width="20.6594%" height="15" fill="rgb(237,122,38)"/><text x="38.6842%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (80,913,116 samples, 20.54%)</title><rect x="38.5487%" y="133" width="20.5448%" height="15" fill="rgb(244,218,35)"/><text x="38.7987%" y="143.50">typeck</text></g><g><title>item_types_checking (18,626,919 samples, 4.73%)</title><rect x="59.0936%" y="165" width="4.7296%" height="15" fill="rgb(240,68,47)"/><text x="59.3436%" y="175.50">item_t..</text></g><g><title>check_mod_item_types (18,622,549 samples, 4.73%)</title><rect x="59.0947%" y="149" width="4.7285%" height="15" fill="rgb(210,16,53)"/><text x="59.3447%" y="159.50">check_..</text></g><g><title>fn_sig (1,124,786 samples, 0.29%)</title><rect x="64.1744%" y="133" width="0.2856%" height="15" fill="rgb(235,124,12)"/><text x="64.4244%" y="143.50"></text></g><g><title>is_late_bound_map (852,759 samples, 0.22%)</title><rect x="64.6020%" y="117" width="0.2165%" height="15" fill="rgb(224,169,11)"/><text x="64.8520%" y="127.50"></text></g><g><title>resolve_lifetimes (754,127 samples, 0.19%)</title><rect x="64.6270%" y="101" width="0.1915%" height="15" fill="rgb(250,166,2)"/><text x="64.8770%" y="111.50"></text></g><g><title>generics_of (1,575,455 samples, 0.40%)</title><rect x="64.4600%" y="133" width="0.4000%" height="15" fill="rgb(242,216,29)"/><text x="64.7100%" y="143.50"></text></g><g><title>impl_trait_ref (413,545 samples, 0.11%)</title><rect x="64.8600%" y="133" width="0.1050%" height="15" fill="rgb(230,116,27)"/><text x="65.1100%" y="143.50"></text></g><g><title>late_bound_vars_map (1,290,452 samples, 0.33%)</title><rect x="65.3691%" y="85" width="0.3277%" height="15" fill="rgb(228,99,48)"/><text x="65.6191%" y="95.50"></text></g><g><title>resolve_lifetimes (1,207,881 samples, 0.31%)</title><rect x="65.3900%" y="69" width="0.3067%" height="15" fill="rgb(253,11,6)"/><text x="65.6400%" y="79.50"></text></g><g><title>explicit_predicates_of (2,257,601 samples, 0.57%)</title><rect x="65.1340%" y="101" width="0.5732%" height="15" fill="rgb(247,143,39)"/><text x="65.3840%" y="111.50"></text></g><g><title>predicates_of (3,042,975 samples, 0.77%)</title><rect x="64.9650%" y="133" width="0.7726%" height="15" fill="rgb(236,97,10)"/><text x="65.2150%" y="143.50"></text></g><g><title>predicates_defined_on (2,788,722 samples, 0.71%)</title><rect x="65.0296%" y="117" width="0.7081%" height="15" fill="rgb(233,208,19)"/><text x="65.2796%" y="127.50"></text></g><g><title>type_collecting (8,536,436 samples, 2.17%)</title><rect x="63.8240%" y="165" width="2.1675%" height="15" fill="rgb(216,164,2)"/><text x="64.0740%" y="175.50">t..</text></g><g><title>collect_mod_item_types (8,528,955 samples, 2.17%)</title><rect x="63.8259%" y="149" width="2.1656%" height="15" fill="rgb(220,129,5)"/><text x="64.0759%" y="159.50">c..</text></g><g><title>type_of (999,727 samples, 0.25%)</title><rect x="65.7377%" y="133" width="0.2538%" height="15" fill="rgb(242,17,10)"/><text x="65.9877%" y="143.50"></text></g><g><title>evaluate_obligation (1,133,610 samples, 0.29%)</title><rect x="70.8682%" y="133" width="0.2878%" height="15" fill="rgb(242,107,0)"/><text x="71.1182%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,845,619 samples, 0.47%)</title><rect x="71.2086%" y="133" width="0.4686%" height="15" fill="rgb(251,28,31)"/><text x="71.4586%" y="143.50"></text></g><g><title>object_safety_violations (431,255 samples, 0.11%)</title><rect x="71.6911%" y="133" width="0.1095%" height="15" fill="rgb(233,223,10)"/><text x="71.9411%" y="143.50"></text></g><g><title>param_env (5,983,005 samples, 1.52%)</title><rect x="71.8006%" y="133" width="1.5192%" height="15" fill="rgb(215,21,27)"/><text x="72.0506%" y="143.50"></text></g><g><title>region_scope_tree (1,497,645 samples, 0.38%)</title><rect x="73.3342%" y="133" width="0.3803%" height="15" fill="rgb(232,23,21)"/><text x="73.5842%" y="143.50"></text></g><g><title>check_impl_item_well_formed (29,347,740 samples, 7.45%)</title><rect x="66.2825%" y="149" width="7.4518%" height="15" fill="rgb(244,5,23)"/><text x="66.5325%" y="159.50">check_impl..</text></g><g><title>evaluate_obligation (486,200 samples, 0.12%)</title><rect x="78.4414%" y="133" width="0.1235%" height="15" fill="rgb(226,81,46)"/><text x="78.6914%" y="143.50"></text></g><g><title>implied_outlives_bounds (912,992 samples, 0.23%)</title><rect x="78.5992%" y="133" width="0.2318%" height="15" fill="rgb(247,70,30)"/><text x="78.8492%" y="143.50"></text></g><g><title>param_env (2,929,997 samples, 0.74%)</title><rect x="78.8324%" y="133" width="0.7440%" height="15" fill="rgb(212,68,19)"/><text x="79.0824%" y="143.50"></text></g><g><title>analysis (313,521,663 samples, 79.61%)</title><rect x="0.1809%" y="197" width="79.6071%" height="15" fill="rgb(240,187,13)"/><text x="0.4309%" y="207.50">analysis</text></g><g><title>type_check_crate (205,255,070 samples, 52.12%)</title><rect x="27.6712%" y="181" width="52.1168%" height="15" fill="rgb(223,113,26)"/><text x="27.9212%" y="191.50">type_check_crate</text></g><g><title>wf_checking (54,306,369 samples, 13.79%)</title><rect x="65.9989%" y="165" width="13.7891%" height="15" fill="rgb(206,192,2)"/><text x="66.2489%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (23,841,835 samples, 6.05%)</title><rect x="73.7343%" y="149" width="6.0537%" height="15" fill="rgb(241,108,4)"/><text x="73.9843%" y="159.50">check_it..</text></g><g><title>codegen_crate (607,076 samples, 0.15%)</title><rect x="79.7916%" y="197" width="0.1541%" height="15" fill="rgb(247,173,49)"/><text x="80.0416%" y="207.50"></text></g><g><title>macro_expand_crate (31,598,663 samples, 8.02%)</title><rect x="80.1390%" y="181" width="8.0233%" height="15" fill="rgb(224,114,35)"/><text x="80.3890%" y="191.50">macro_expan..</text></g><g><title>expand_crate (31,585,173 samples, 8.02%)</title><rect x="80.1424%" y="165" width="8.0199%" height="15" fill="rgb(245,159,27)"/><text x="80.3924%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,259,214 samples, 0.57%)</title><rect x="87.5886%" y="149" width="0.5736%" height="15" fill="rgb(245,172,44)"/><text x="87.8386%" y="159.50"></text></g><g><title>metadata_register_crate (787,708 samples, 0.20%)</title><rect x="87.9622%" y="133" width="0.2000%" height="15" fill="rgb(236,23,11)"/><text x="88.2122%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (952,940 samples, 0.24%)</title><rect x="88.1631%" y="181" width="0.2420%" height="15" fill="rgb(205,117,38)"/><text x="88.4131%" y="191.50"></text></g><g><title>late_resolve_crate (4,548,441 samples, 1.15%)</title><rect x="88.4798%" y="165" width="1.1549%" height="15" fill="rgb(237,72,25)"/><text x="88.7298%" y="175.50"></text></g><g><title>configure_and_expand (38,397,719 samples, 9.75%)</title><rect x="79.9457%" y="197" width="9.7497%" height="15" fill="rgb(244,70,9)"/><text x="80.1957%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (5,081,727 samples, 1.29%)</title><rect x="88.4051%" y="181" width="1.2903%" height="15" fill="rgb(217,125,39)"/><text x="88.6551%" y="191.50"></text></g><g><title>drop_ast (821,229 samples, 0.21%)</title><rect x="89.6954%" y="197" width="0.2085%" height="15" fill="rgb(235,36,10)"/><text x="89.9454%" y="207.50"></text></g><g><title>early_lint_checks (834,320 samples, 0.21%)</title><rect x="89.9081%" y="197" width="0.2118%" height="15" fill="rgb(251,123,47)"/><text x="90.1581%" y="207.50"></text></g><g><title>free_global_ctxt (5,206,169 samples, 1.32%)</title><rect x="90.1199%" y="197" width="1.3219%" height="15" fill="rgb(221,13,13)"/><text x="90.3699%" y="207.50"></text></g><g><title>generate_crate_metadata (3,858,824 samples, 0.98%)</title><rect x="91.4418%" y="197" width="0.9798%" height="15" fill="rgb(238,131,9)"/><text x="91.6918%" y="207.50"></text></g><g><title>hir_lowering (10,066,242 samples, 2.56%)</title><rect x="92.4216%" y="197" width="2.5559%" height="15" fill="rgb(211,50,8)"/><text x="92.6716%" y="207.50">hi..</text></g><g><title>parse_crate (16,821,078 samples, 4.27%)</title><rect x="94.9996%" y="197" width="4.2711%" height="15" fill="rgb(245,182,24)"/><text x="95.2496%" y="207.50">parse..</text></g><g><title>self_profile_alloc_query_strings (1,839,280 samples, 0.47%)</title><rect x="99.3272%" y="197" width="0.4670%" height="15" fill="rgb(242,14,37)"/><text x="99.5772%" y="207.50"></text></g><g><title>all (393,836,532 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (393,836,532 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (710,828 samples, 0.18%)</title><rect x="99.8195%" y="197" width="0.1805%" height="15" fill="rgb(209,9,3)"/><text x="100.0695%" y="207.50"></text></g></svg></svg>