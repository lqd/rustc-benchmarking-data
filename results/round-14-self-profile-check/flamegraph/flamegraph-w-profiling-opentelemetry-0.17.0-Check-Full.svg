<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,848,100 samples, 0.19%)</title><rect x="14.2527%" y="149" width="0.1875%" height="15" fill="rgb(227,0,7)"/><text x="14.5027%" y="159.50"></text></g><g><title>param_env (1,761,193 samples, 0.18%)</title><rect x="16.2772%" y="117" width="0.1787%" height="15" fill="rgb(217,0,24)"/><text x="16.5272%" y="127.50"></text></g><g><title>item_attrs (2,408,997 samples, 0.24%)</title><rect x="17.0105%" y="85" width="0.2444%" height="15" fill="rgb(221,193,54)"/><text x="17.2605%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,350,037 samples, 0.24%)</title><rect x="17.0165%" y="69" width="0.2384%" height="15" fill="rgb(248,212,6)"/><text x="17.2665%" y="79.50"></text></g><g><title>codegen_fn_attrs (3,013,491 samples, 0.31%)</title><rect x="16.9582%" y="101" width="0.3058%" height="15" fill="rgb(208,68,35)"/><text x="17.2082%" y="111.50"></text></g><g><title>adt_drop_tys (1,900,750 samples, 0.19%)</title><rect x="20.3047%" y="69" width="0.1929%" height="15" fill="rgb(232,128,0)"/><text x="20.5547%" y="79.50"></text></g><g><title>is_copy_raw (6,953,215 samples, 0.71%)</title><rect x="20.4988%" y="69" width="0.7055%" height="15" fill="rgb(207,160,47)"/><text x="20.7488%" y="79.50"></text></g><g><title>evaluate_obligation (5,359,320 samples, 0.54%)</title><rect x="20.6605%" y="53" width="0.5438%" height="15" fill="rgb(228,23,34)"/><text x="20.9105%" y="63.50"></text></g><g><title>needs_drop_raw (10,555,968 samples, 1.07%)</title><rect x="20.1596%" y="85" width="1.0711%" height="15" fill="rgb(218,30,26)"/><text x="20.4096%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,881,266 samples, 0.39%)</title><rect x="21.4680%" y="69" width="0.3938%" height="15" fill="rgb(220,122,19)"/><text x="21.7180%" y="79.50"></text></g><g><title>resolve_instance (8,413,583 samples, 0.85%)</title><rect x="21.2344%" y="85" width="0.8537%" height="15" fill="rgb(250,228,42)"/><text x="21.4844%" y="95.50"></text></g><g><title>thir_body (10,410,656 samples, 1.06%)</title><rect x="22.1212%" y="85" width="1.0563%" height="15" fill="rgb(240,193,28)"/><text x="22.3712%" y="95.50"></text></g><g><title>mir_const (76,161,975 samples, 7.73%)</title><rect x="15.4855%" y="133" width="7.7277%" height="15" fill="rgb(216,20,37)"/><text x="15.7355%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (66,598,765 samples, 6.76%)</title><rect x="16.4558%" y="117" width="6.7574%" height="15" fill="rgb(206,188,39)"/><text x="16.7058%" y="127.50">unsafety_..</text></g><g><title>mir_built (58,634,255 samples, 5.95%)</title><rect x="17.2640%" y="101" width="5.9493%" height="15" fill="rgb(217,207,13)"/><text x="17.5140%" y="111.50">mir_built</text></g><g><title>mir_const (1,780,749 samples, 0.18%)</title><rect x="23.5409%" y="117" width="0.1807%" height="15" fill="rgb(231,73,38)"/><text x="23.7909%" y="127.50"></text></g><g><title>unsafety_check_result (1,319,465 samples, 0.13%)</title><rect x="23.5877%" y="101" width="0.1339%" height="15" fill="rgb(225,20,46)"/><text x="23.8377%" y="111.50"></text></g><g><title>mir_built (1,068,341 samples, 0.11%)</title><rect x="23.6132%" y="85" width="0.1084%" height="15" fill="rgb(210,31,41)"/><text x="23.8632%" y="95.50"></text></g><g><title>mir_const_qualif (5,417,495 samples, 0.55%)</title><rect x="23.2132%" y="133" width="0.5497%" height="15" fill="rgb(221,200,47)"/><text x="23.4632%" y="143.50"></text></g><g><title>mir_promoted (90,443,011 samples, 9.18%)</title><rect x="14.5864%" y="149" width="9.1767%" height="15" fill="rgb(226,26,5)"/><text x="14.8364%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (5,765,278 samples, 0.58%)</title><rect x="23.7641%" y="149" width="0.5850%" height="15" fill="rgb(249,33,26)"/><text x="24.0141%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (4,716,968 samples, 0.48%)</title><rect x="24.3491%" y="149" width="0.4786%" height="15" fill="rgb(235,183,28)"/><text x="24.5991%" y="159.50"></text></g><g><title>normalize_projection_ty (2,962,059 samples, 0.30%)</title><rect x="24.5272%" y="133" width="0.3005%" height="15" fill="rgb(221,5,38)"/><text x="24.7772%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,849,269 samples, 0.19%)</title><rect x="24.8277%" y="149" width="0.1876%" height="15" fill="rgb(247,18,42)"/><text x="25.0777%" y="159.50"></text></g><g><title>type_op_prove_predicate (31,724,510 samples, 3.22%)</title><rect x="25.0962%" y="149" width="3.2189%" height="15" fill="rgb(241,131,45)"/><text x="25.3462%" y="159.50">typ..</text></g><g><title>evaluate_obligation (1,109,219 samples, 0.11%)</title><rect x="28.2025%" y="133" width="0.1125%" height="15" fill="rgb(249,31,29)"/><text x="28.4525%" y="143.50"></text></g><g><title>MIR_borrow_checking (274,787,858 samples, 27.88%)</title><rect x="0.4377%" y="181" width="27.8811%" height="15" fill="rgb(225,111,53)"/><text x="0.6877%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (273,278,155 samples, 27.73%)</title><rect x="0.5909%" y="165" width="27.7279%" height="15" fill="rgb(238,160,17)"/><text x="0.8409%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,735,440 samples, 0.18%)</title><rect x="28.3187%" y="181" width="0.1761%" height="15" fill="rgb(214,148,48)"/><text x="28.5687%" y="191.50"></text></g><g><title>hir_module_items (1,923,490 samples, 0.20%)</title><rect x="28.4948%" y="181" width="0.1952%" height="15" fill="rgb(232,36,49)"/><text x="28.7448%" y="191.50"></text></g><g><title>should_inherit_track_caller (1,212,115 samples, 0.12%)</title><rect x="29.0046%" y="133" width="0.1230%" height="15" fill="rgb(209,103,24)"/><text x="29.2546%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,230,998 samples, 0.23%)</title><rect x="28.9027%" y="149" width="0.2264%" height="15" fill="rgb(229,88,8)"/><text x="29.1527%" y="159.50"></text></g><g><title>check_mod_attrs (4,217,955 samples, 0.43%)</title><rect x="28.7011%" y="165" width="0.4280%" height="15" fill="rgb(213,181,19)"/><text x="28.9511%" y="175.50"></text></g><g><title>check_mod_const_bodies (1,072,684 samples, 0.11%)</title><rect x="29.1291%" y="165" width="0.1088%" height="15" fill="rgb(254,191,54)"/><text x="29.3791%" y="175.50"></text></g><g><title>lookup_deprecation_entry (1,165,731 samples, 0.12%)</title><rect x="29.4386%" y="149" width="0.1183%" height="15" fill="rgb(241,83,37)"/><text x="29.6886%" y="159.50"></text></g><g><title>stability_index (1,020,721 samples, 0.10%)</title><rect x="29.4533%" y="133" width="0.1036%" height="15" fill="rgb(233,36,39)"/><text x="29.7033%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,557,761 samples, 0.26%)</title><rect x="29.3238%" y="165" width="0.2595%" height="15" fill="rgb(226,3,54)"/><text x="29.5738%" y="175.50"></text></g><g><title>misc_checking_1 (9,227,724 samples, 0.94%)</title><rect x="28.6900%" y="181" width="0.9363%" height="15" fill="rgb(245,192,40)"/><text x="28.9400%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (5,227,858 samples, 0.53%)</title><rect x="29.6266%" y="165" width="0.5304%" height="15" fill="rgb(238,167,29)"/><text x="29.8766%" y="175.50"></text></g><g><title>check_mod_liveness (4,360,334 samples, 0.44%)</title><rect x="29.7146%" y="149" width="0.4424%" height="15" fill="rgb(232,182,51)"/><text x="29.9646%" y="159.50"></text></g><g><title>type_uninhabited_from (1,679,725 samples, 0.17%)</title><rect x="29.9866%" y="133" width="0.1704%" height="15" fill="rgb(231,60,39)"/><text x="30.2366%" y="143.50"></text></g><g><title>type_uninhabited_from (1,300,023 samples, 0.13%)</title><rect x="30.0251%" y="117" width="0.1319%" height="15" fill="rgb(208,69,12)"/><text x="30.2751%" y="127.50"></text></g><g><title>misc_checking_2 (11,166,265 samples, 1.13%)</title><rect x="29.6263%" y="181" width="1.1330%" height="15" fill="rgb(235,93,37)"/><text x="29.8763%" y="191.50"></text></g><g><title>match_checking (5,935,897 samples, 0.60%)</title><rect x="30.1570%" y="165" width="0.6023%" height="15" fill="rgb(213,116,39)"/><text x="30.4070%" y="175.50"></text></g><g><title>check_match (5,525,713 samples, 0.56%)</title><rect x="30.1986%" y="149" width="0.5607%" height="15" fill="rgb(222,207,29)"/><text x="30.4486%" y="159.50"></text></g><g><title>check_private_in_public (2,219,585 samples, 0.23%)</title><rect x="30.7609%" y="165" width="0.2252%" height="15" fill="rgb(206,96,30)"/><text x="31.0109%" y="175.50"></text></g><g><title>death_checking (4,080,836 samples, 0.41%)</title><rect x="30.9861%" y="165" width="0.4141%" height="15" fill="rgb(218,138,4)"/><text x="31.2361%" y="175.50"></text></g><g><title>eval_to_allocation_raw (2,108,065 samples, 0.21%)</title><rect x="31.9199%" y="133" width="0.2139%" height="15" fill="rgb(250,191,14)"/><text x="32.1699%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,074,454 samples, 0.21%)</title><rect x="31.9233%" y="117" width="0.2105%" height="15" fill="rgb(239,60,40)"/><text x="32.1733%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (987,801 samples, 0.10%)</title><rect x="32.0336%" y="101" width="0.1002%" height="15" fill="rgb(206,27,48)"/><text x="32.2836%" y="111.50"></text></g><g><title>param_env (2,833,468 samples, 0.29%)</title><rect x="32.2218%" y="133" width="0.2875%" height="15" fill="rgb(225,35,8)"/><text x="32.4718%" y="143.50"></text></g><g><title>predicates_of (1,311,418 samples, 0.13%)</title><rect x="32.3762%" y="117" width="0.1331%" height="15" fill="rgb(250,213,24)"/><text x="32.6262%" y="127.50"></text></g><g><title>predicates_defined_on (1,075,316 samples, 0.11%)</title><rect x="32.4002%" y="101" width="0.1091%" height="15" fill="rgb(247,123,22)"/><text x="32.6502%" y="111.50"></text></g><g><title>crate_lints (12,979,655 samples, 1.32%)</title><rect x="31.4005%" y="149" width="1.3170%" height="15" fill="rgb(231,138,38)"/><text x="31.6505%" y="159.50"></text></g><g><title>type_of (1,737,183 samples, 0.18%)</title><rect x="32.5412%" y="133" width="0.1763%" height="15" fill="rgb(231,145,46)"/><text x="32.7912%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,222,119 samples, 0.12%)</title><rect x="32.5935%" y="117" width="0.1240%" height="15" fill="rgb(251,118,11)"/><text x="32.8435%" y="127.50"></text></g><g><title>lint_checking (18,725,690 samples, 1.90%)</title><rect x="31.4002%" y="165" width="1.9000%" height="15" fill="rgb(217,147,25)"/><text x="31.6502%" y="175.50">l..</text></g><g><title>module_lints (5,742,635 samples, 0.58%)</title><rect x="32.7175%" y="149" width="0.5827%" height="15" fill="rgb(247,81,37)"/><text x="32.9675%" y="159.50"></text></g><g><title>lint_mod (5,704,594 samples, 0.58%)</title><rect x="32.7214%" y="133" width="0.5788%" height="15" fill="rgb(209,12,38)"/><text x="32.9714%" y="143.50"></text></g><g><title>privacy_access_levels (3,936,744 samples, 0.40%)</title><rect x="33.3002%" y="165" width="0.3994%" height="15" fill="rgb(227,1,9)"/><text x="33.5502%" y="175.50"></text></g><g><title>privacy_checking_modules (10,154,154 samples, 1.03%)</title><rect x="33.6996%" y="165" width="1.0303%" height="15" fill="rgb(248,47,43)"/><text x="33.9496%" y="175.50"></text></g><g><title>check_mod_privacy (10,120,404 samples, 1.03%)</title><rect x="33.7030%" y="149" width="1.0269%" height="15" fill="rgb(221,10,30)"/><text x="33.9530%" y="159.50"></text></g><g><title>misc_checking_3 (39,245,970 samples, 3.98%)</title><rect x="30.7593%" y="181" width="3.9821%" height="15" fill="rgb(210,229,1)"/><text x="31.0093%" y="191.50">misc..</text></g><g><title>impl_parent (4,405,800 samples, 0.45%)</title><rect x="35.7616%" y="117" width="0.4470%" height="15" fill="rgb(222,148,37)"/><text x="36.0116%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,634,638 samples, 0.27%)</title><rect x="35.9413%" y="101" width="0.2673%" height="15" fill="rgb(234,67,33)"/><text x="36.1913%" y="111.50"></text></g><g><title>impl_trait_ref (9,027,020 samples, 0.92%)</title><rect x="36.2087%" y="117" width="0.9159%" height="15" fill="rgb(247,98,35)"/><text x="36.4587%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,866,045 samples, 0.70%)</title><rect x="36.4279%" y="101" width="0.6967%" height="15" fill="rgb(247,138,52)"/><text x="36.6779%" y="111.50"></text></g><g><title>trait_impls_of (2,102,935 samples, 0.21%)</title><rect x="37.1508%" y="117" width="0.2134%" height="15" fill="rgb(213,79,30)"/><text x="37.4008%" y="127.50"></text></g><g><title>coherent_trait (25,085,611 samples, 2.55%)</title><rect x="34.8208%" y="149" width="2.5453%" height="15" fill="rgb(246,177,23)"/><text x="35.0708%" y="159.50">co..</text></g><g><title>specialization_graph_of (24,448,193 samples, 2.48%)</title><rect x="34.8855%" y="133" width="2.4806%" height="15" fill="rgb(230,62,27)"/><text x="35.1355%" y="143.50">sp..</text></g><g><title>coherence_checking (25,633,457 samples, 2.60%)</title><rect x="34.8162%" y="165" width="2.6009%" height="15" fill="rgb(216,154,8)"/><text x="35.0662%" y="175.50">co..</text></g><g><title>associated_items (1,057,416 samples, 0.11%)</title><rect x="53.4340%" y="117" width="0.1073%" height="15" fill="rgb(244,35,45)"/><text x="53.6840%" y="127.50"></text></g><g><title>dropck_outlives (3,392,737 samples, 0.34%)</title><rect x="53.5665%" y="117" width="0.3442%" height="15" fill="rgb(251,115,12)"/><text x="53.8165%" y="127.50"></text></g><g><title>predicates_of (1,457,396 samples, 0.15%)</title><rect x="55.1113%" y="101" width="0.1479%" height="15" fill="rgb(240,54,50)"/><text x="55.3613%" y="111.50"></text></g><g><title>predicates_defined_on (1,155,463 samples, 0.12%)</title><rect x="55.1419%" y="85" width="0.1172%" height="15" fill="rgb(233,84,52)"/><text x="55.3919%" y="95.50"></text></g><g><title>evaluate_obligation (13,637,639 samples, 1.38%)</title><rect x="53.9410%" y="117" width="1.3837%" height="15" fill="rgb(207,117,47)"/><text x="54.1910%" y="127.50"></text></g><g><title>evaluate_obligation (1,398,241 samples, 0.14%)</title><rect x="55.6681%" y="101" width="0.1419%" height="15" fill="rgb(249,43,39)"/><text x="55.9181%" y="111.50"></text></g><g><title>method_autoderef_steps (2,995,934 samples, 0.30%)</title><rect x="55.5076%" y="117" width="0.3040%" height="15" fill="rgb(209,38,44)"/><text x="55.7576%" y="127.50"></text></g><g><title>predicates_of (1,294,210 samples, 0.13%)</title><rect x="55.8770%" y="117" width="0.1313%" height="15" fill="rgb(236,212,23)"/><text x="56.1270%" y="127.50"></text></g><g><title>associated_items (1,438,806 samples, 0.15%)</title><rect x="63.3875%" y="101" width="0.1460%" height="15" fill="rgb(242,79,21)"/><text x="63.6375%" y="111.50"></text></g><g><title>dropck_outlives (2,758,630 samples, 0.28%)</title><rect x="63.5551%" y="101" width="0.2799%" height="15" fill="rgb(211,96,35)"/><text x="63.8051%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,566,560 samples, 0.16%)</title><rect x="66.3728%" y="85" width="0.1589%" height="15" fill="rgb(253,215,40)"/><text x="66.6228%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,529,289 samples, 0.16%)</title><rect x="66.3766%" y="69" width="0.1552%" height="15" fill="rgb(211,81,21)"/><text x="66.6266%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,492,268 samples, 0.15%)</title><rect x="66.3804%" y="53" width="0.1514%" height="15" fill="rgb(208,190,38)"/><text x="66.6304%" y="63.50"></text></g><g><title>evaluate_obligation (28,855,039 samples, 2.93%)</title><rect x="63.8365%" y="101" width="2.9277%" height="15" fill="rgb(235,213,38)"/><text x="64.0865%" y="111.50">ev..</text></g><g><title>is_copy_raw (1,676,478 samples, 0.17%)</title><rect x="66.9299%" y="101" width="0.1701%" height="15" fill="rgb(237,122,38)"/><text x="67.1799%" y="111.50"></text></g><g><title>evaluate_obligation (1,196,184 samples, 0.12%)</title><rect x="66.9786%" y="85" width="0.1214%" height="15" fill="rgb(244,218,35)"/><text x="67.2286%" y="95.50"></text></g><g><title>evaluate_obligation (1,709,719 samples, 0.17%)</title><rect x="67.3151%" y="85" width="0.1735%" height="15" fill="rgb(240,68,47)"/><text x="67.5651%" y="95.50"></text></g><g><title>method_autoderef_steps (3,448,585 samples, 0.35%)</title><rect x="67.1418%" y="101" width="0.3499%" height="15" fill="rgb(210,16,53)"/><text x="67.3918%" y="111.50"></text></g><g><title>typeck (114,556,641 samples, 11.62%)</title><rect x="56.0486%" y="117" width="11.6234%" height="15" fill="rgb(235,124,12)"/><text x="56.2986%" y="127.50">typeck</text></g><g><title>item_bodies_checking (298,123,441 samples, 30.25%)</title><rect x="37.4523%" y="165" width="30.2488%" height="15" fill="rgb(224,169,11)"/><text x="37.7023%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (298,119,631 samples, 30.25%)</title><rect x="37.4527%" y="149" width="30.2484%" height="15" fill="rgb(250,166,2)"/><text x="37.7027%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (297,185,807 samples, 30.15%)</title><rect x="37.5475%" y="133" width="30.1537%" height="15" fill="rgb(242,216,29)"/><text x="37.7975%" y="143.50">typeck</text></g><g><title>mir_borrowck (3,568,410 samples, 0.36%)</title><rect x="69.0226%" y="101" width="0.3621%" height="15" fill="rgb(230,116,27)"/><text x="69.2726%" y="111.50"></text></g><g><title>mir_built (5,806,825 samples, 0.59%)</title><rect x="69.4016%" y="53" width="0.5892%" height="15" fill="rgb(228,99,48)"/><text x="69.6516%" y="63.50"></text></g><g><title>typeck (5,509,211 samples, 0.56%)</title><rect x="69.4318%" y="37" width="0.5590%" height="15" fill="rgb(253,11,6)"/><text x="69.6818%" y="47.50"></text></g><g><title>mir_const (6,384,882 samples, 0.65%)</title><rect x="69.3902%" y="85" width="0.6478%" height="15" fill="rgb(247,143,39)"/><text x="69.6402%" y="95.50"></text></g><g><title>unsafety_check_result (6,295,541 samples, 0.64%)</title><rect x="69.3993%" y="69" width="0.6388%" height="15" fill="rgb(236,97,10)"/><text x="69.6493%" y="79.50"></text></g><g><title>mir_promoted (6,445,352 samples, 0.65%)</title><rect x="69.3846%" y="101" width="0.6540%" height="15" fill="rgb(233,208,19)"/><text x="69.6346%" y="111.50"></text></g><g><title>type_of (10,979,883 samples, 1.11%)</title><rect x="68.9463%" y="133" width="1.1141%" height="15" fill="rgb(216,164,2)"/><text x="69.1963%" y="143.50"></text></g><g><title>mir_borrowck (10,860,642 samples, 1.10%)</title><rect x="68.9584%" y="117" width="1.1020%" height="15" fill="rgb(220,129,5)"/><text x="69.2084%" y="127.50"></text></g><g><title>dropck_outlives (1,189,744 samples, 0.12%)</title><rect x="70.3214%" y="117" width="0.1207%" height="15" fill="rgb(242,17,10)"/><text x="70.5714%" y="127.50"></text></g><g><title>item_types_checking (27,268,445 samples, 2.77%)</title><rect x="67.7011%" y="165" width="2.7668%" height="15" fill="rgb(242,107,0)"/><text x="67.9511%" y="175.50">it..</text></g><g><title>check_mod_item_types (27,226,485 samples, 2.76%)</title><rect x="67.7054%" y="149" width="2.7625%" height="15" fill="rgb(251,28,31)"/><text x="67.9554%" y="159.50">ch..</text></g><g><title>typeck (4,016,594 samples, 0.41%)</title><rect x="70.0603%" y="133" width="0.4075%" height="15" fill="rgb(233,223,10)"/><text x="70.3103%" y="143.50"></text></g><g><title>fn_sig (3,010,243 samples, 0.31%)</title><rect x="70.7575%" y="133" width="0.3054%" height="15" fill="rgb(215,21,27)"/><text x="71.0075%" y="143.50"></text></g><g><title>lint_levels (1,857,571 samples, 0.19%)</title><rect x="71.2127%" y="85" width="0.1885%" height="15" fill="rgb(232,23,21)"/><text x="71.4627%" y="95.50"></text></g><g><title>is_late_bound_map (2,244,035 samples, 0.23%)</title><rect x="71.1736%" y="117" width="0.2277%" height="15" fill="rgb(244,5,23)"/><text x="71.4236%" y="127.50"></text></g><g><title>resolve_lifetimes (2,216,414 samples, 0.22%)</title><rect x="71.1764%" y="101" width="0.2249%" height="15" fill="rgb(226,81,46)"/><text x="71.4264%" y="111.50"></text></g><g><title>named_region_map (2,336,360 samples, 0.24%)</title><rect x="71.4013%" y="117" width="0.2371%" height="15" fill="rgb(247,70,30)"/><text x="71.6513%" y="127.50"></text></g><g><title>resolve_lifetimes (2,119,959 samples, 0.22%)</title><rect x="71.4232%" y="101" width="0.2151%" height="15" fill="rgb(212,68,19)"/><text x="71.6732%" y="111.50"></text></g><g><title>generics_of (5,800,456 samples, 0.59%)</title><rect x="71.0630%" y="133" width="0.5885%" height="15" fill="rgb(240,187,13)"/><text x="71.3130%" y="143.50"></text></g><g><title>explicit_predicates_of (2,106,750 samples, 0.21%)</title><rect x="71.8517%" y="101" width="0.2138%" height="15" fill="rgb(223,113,26)"/><text x="72.1017%" y="111.50"></text></g><g><title>predicates_of (5,949,894 samples, 0.60%)</title><rect x="71.7153%" y="133" width="0.6037%" height="15" fill="rgb(206,192,2)"/><text x="71.9653%" y="143.50"></text></g><g><title>predicates_defined_on (5,424,148 samples, 0.55%)</title><rect x="71.7687%" y="117" width="0.5504%" height="15" fill="rgb(241,108,4)"/><text x="72.0187%" y="127.50"></text></g><g><title>inferred_outlives_of (2,498,746 samples, 0.25%)</title><rect x="72.0655%" y="101" width="0.2535%" height="15" fill="rgb(247,173,49)"/><text x="72.3155%" y="111.50"></text></g><g><title>inferred_outlives_crate (2,308,896 samples, 0.23%)</title><rect x="72.0847%" y="85" width="0.2343%" height="15" fill="rgb(224,114,35)"/><text x="72.3347%" y="95.50"></text></g><g><title>type_of (1,456,158 samples, 0.15%)</title><rect x="72.1713%" y="69" width="0.1477%" height="15" fill="rgb(245,159,27)"/><text x="72.4213%" y="79.50"></text></g><g><title>type_collecting (19,060,033 samples, 1.93%)</title><rect x="70.4707%" y="165" width="1.9339%" height="15" fill="rgb(245,172,44)"/><text x="70.7207%" y="175.50">t..</text></g><g><title>collect_mod_item_types (19,003,073 samples, 1.93%)</title><rect x="70.4765%" y="149" width="1.9281%" height="15" fill="rgb(236,23,11)"/><text x="70.7265%" y="159.50">c..</text></g><g><title>evaluate_obligation (3,936,898 samples, 0.40%)</title><rect x="74.4227%" y="133" width="0.3995%" height="15" fill="rgb(205,117,38)"/><text x="74.6727%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,802,993 samples, 0.18%)</title><rect x="74.8329%" y="133" width="0.1829%" height="15" fill="rgb(237,72,25)"/><text x="75.0829%" y="143.50"></text></g><g><title>param_env (2,605,077 samples, 0.26%)</title><rect x="75.1093%" y="133" width="0.2643%" height="15" fill="rgb(244,70,9)"/><text x="75.3593%" y="143.50"></text></g><g><title>region_scope_tree (3,398,715 samples, 0.34%)</title><rect x="75.3816%" y="133" width="0.3448%" height="15" fill="rgb(217,125,39)"/><text x="75.6316%" y="143.50"></text></g><g><title>check_impl_item_well_formed (30,421,033 samples, 3.09%)</title><rect x="72.6436%" y="149" width="3.0866%" height="15" fill="rgb(235,36,10)"/><text x="72.8936%" y="159.50">che..</text></g><g><title>evaluate_obligation (4,953,816 samples, 0.50%)</title><rect x="76.8033%" y="133" width="0.5026%" height="15" fill="rgb(251,123,47)"/><text x="77.0533%" y="143.50"></text></g><g><title>object_safety_violations (1,016,311 samples, 0.10%)</title><rect x="77.3764%" y="133" width="0.1031%" height="15" fill="rgb(221,13,13)"/><text x="77.6264%" y="143.50"></text></g><g><title>param_env (2,361,073 samples, 0.24%)</title><rect x="77.4795%" y="133" width="0.2396%" height="15" fill="rgb(238,131,9)"/><text x="77.7295%" y="143.50"></text></g><g><title>check_item_well_formed (21,083,110 samples, 2.14%)</title><rect x="75.7303%" y="149" width="2.1392%" height="15" fill="rgb(211,50,8)"/><text x="75.9803%" y="159.50">c..</text></g><g><title>analysis (770,636,135 samples, 78.19%)</title><rect x="0.2233%" y="197" width="78.1918%" height="15" fill="rgb(245,182,24)"/><text x="0.4733%" y="207.50">analysis</text></g><g><title>type_check_crate (430,435,863 samples, 43.67%)</title><rect x="34.7414%" y="181" width="43.6737%" height="15" fill="rgb(242,14,37)"/><text x="34.9914%" y="191.50">type_check_crate</text></g><g><title>wf_checking (59,169,094 samples, 6.00%)</title><rect x="72.4116%" y="165" width="6.0035%" height="15" fill="rgb(246,228,12)"/><text x="72.6616%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (5,377,719 samples, 0.55%)</title><rect x="77.8694%" y="149" width="0.5456%" height="15" fill="rgb(213,55,15)"/><text x="78.1194%" y="159.50"></text></g><g><title>AST_validation (1,148,763 samples, 0.12%)</title><rect x="78.4905%" y="181" width="0.1166%" height="15" fill="rgb(209,9,3)"/><text x="78.7405%" y="191.50"></text></g><g><title>metadata_register_crate (13,185,866 samples, 1.34%)</title><rect x="89.9004%" y="149" width="1.3379%" height="15" fill="rgb(230,59,30)"/><text x="90.1504%" y="159.50"></text></g><g><title>metadata_register_crate (7,664,385 samples, 0.78%)</title><rect x="90.4606%" y="133" width="0.7777%" height="15" fill="rgb(209,121,21)"/><text x="90.7106%" y="143.50"></text></g><g><title>macro_expand_crate (126,145,613 samples, 12.80%)</title><rect x="78.6745%" y="181" width="12.7992%" height="15" fill="rgb(220,109,13)"/><text x="78.9245%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (126,128,762 samples, 12.80%)</title><rect x="78.6762%" y="165" width="12.7975%" height="15" fill="rgb(232,18,1)"/><text x="78.9262%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,320,845 samples, 0.24%)</title><rect x="91.2382%" y="149" width="0.2355%" height="15" fill="rgb(215,41,42)"/><text x="91.4882%" y="159.50"></text></g><g><title>late_resolve_crate (13,114,157 samples, 1.33%)</title><rect x="91.6246%" y="165" width="1.3306%" height="15" fill="rgb(224,123,36)"/><text x="91.8746%" y="175.50"></text></g><g><title>configure_and_expand (144,374,747 samples, 14.65%)</title><rect x="78.4683%" y="197" width="14.6488%" height="15" fill="rgb(240,125,3)"/><text x="78.7183%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (16,025,580 samples, 1.63%)</title><rect x="91.4912%" y="181" width="1.6260%" height="15" fill="rgb(205,98,50)"/><text x="91.7412%" y="191.50"></text></g><g><title>drop_ast (2,108,464 samples, 0.21%)</title><rect x="93.1172%" y="197" width="0.2139%" height="15" fill="rgb(205,185,37)"/><text x="93.3672%" y="207.50"></text></g><g><title>early_lint_checks (3,958,695 samples, 0.40%)</title><rect x="93.3339%" y="197" width="0.4017%" height="15" fill="rgb(238,207,15)"/><text x="93.5839%" y="207.50"></text></g><g><title>free_global_ctxt (9,914,392 samples, 1.01%)</title><rect x="93.7356%" y="197" width="1.0060%" height="15" fill="rgb(213,199,42)"/><text x="93.9856%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,546,890 samples, 0.36%)</title><rect x="96.1988%" y="165" width="0.3599%" height="15" fill="rgb(235,201,11)"/><text x="96.4488%" y="175.50"></text></g><g><title>optimized_mir (6,242,160 samples, 0.63%)</title><rect x="95.9261%" y="181" width="0.6334%" height="15" fill="rgb(207,46,11)"/><text x="96.1761%" y="191.50"></text></g><g><title>generate_crate_metadata (18,287,145 samples, 1.86%)</title><rect x="94.7416%" y="197" width="1.8555%" height="15" fill="rgb(241,35,35)"/><text x="94.9916%" y="207.50">g..</text></g><g><title>hir_lowering (28,070,104 samples, 2.85%)</title><rect x="96.5970%" y="197" width="2.8481%" height="15" fill="rgb(243,32,47)"/><text x="96.8470%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (3,094,824 samples, 0.31%)</title><rect x="99.5745%" y="197" width="0.3140%" height="15" fill="rgb(247,202,23)"/><text x="99.8245%" y="207.50"></text></g><g><title>all (985,571,442 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (985,571,442 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>