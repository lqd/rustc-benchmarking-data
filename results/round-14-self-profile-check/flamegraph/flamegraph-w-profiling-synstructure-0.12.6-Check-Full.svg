<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (605,158 samples, 0.21%)</title><rect x="14.1188%" y="117" width="0.2085%" height="15" fill="rgb(227,0,7)"/><text x="14.3688%" y="127.50"></text></g><g><title>item_attrs (514,914 samples, 0.18%)</title><rect x="14.8035%" y="85" width="0.1774%" height="15" fill="rgb(217,0,24)"/><text x="15.0535%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (497,074 samples, 0.17%)</title><rect x="14.8096%" y="69" width="0.1713%" height="15" fill="rgb(221,193,54)"/><text x="15.0596%" y="79.50"></text></g><g><title>codegen_fn_attrs (741,846 samples, 0.26%)</title><rect x="14.7408%" y="101" width="0.2556%" height="15" fill="rgb(248,212,6)"/><text x="14.9908%" y="111.50"></text></g><g><title>adt_drop_tys (780,107 samples, 0.27%)</title><rect x="17.9581%" y="69" width="0.2688%" height="15" fill="rgb(208,68,35)"/><text x="18.2081%" y="79.50"></text></g><g><title>needs_drop_raw (3,106,925 samples, 1.07%)</title><rect x="17.8411%" y="85" width="1.0706%" height="15" fill="rgb(232,128,0)"/><text x="18.0911%" y="95.50"></text></g><g><title>is_copy_raw (1,987,125 samples, 0.68%)</title><rect x="18.2269%" y="69" width="0.6847%" height="15" fill="rgb(207,160,47)"/><text x="18.4769%" y="79.50"></text></g><g><title>evaluate_obligation (1,658,779 samples, 0.57%)</title><rect x="18.3401%" y="53" width="0.5716%" height="15" fill="rgb(228,23,34)"/><text x="18.5901%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,754,862 samples, 0.60%)</title><rect x="19.1575%" y="69" width="0.6047%" height="15" fill="rgb(218,30,26)"/><text x="19.4075%" y="79.50"></text></g><g><title>impl_parent (333,167 samples, 0.11%)</title><rect x="20.0756%" y="53" width="0.1148%" height="15" fill="rgb(220,122,19)"/><text x="20.3256%" y="63.50"></text></g><g><title>specialization_graph_of (1,753,901 samples, 0.60%)</title><rect x="19.8444%" y="69" width="0.6044%" height="15" fill="rgb(250,228,42)"/><text x="20.0944%" y="79.50"></text></g><g><title>impl_trait_ref (749,899 samples, 0.26%)</title><rect x="20.1904%" y="53" width="0.2584%" height="15" fill="rgb(240,193,28)"/><text x="20.4404%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (654,718 samples, 0.23%)</title><rect x="20.2232%" y="37" width="0.2256%" height="15" fill="rgb(216,20,37)"/><text x="20.4732%" y="47.50"></text></g><g><title>resolve_instance (4,662,869 samples, 1.61%)</title><rect x="18.9117%" y="85" width="1.6067%" height="15" fill="rgb(206,188,39)"/><text x="19.1617%" y="95.50"></text></g><g><title>thir_body (2,914,470 samples, 1.00%)</title><rect x="20.5423%" y="85" width="1.0043%" height="15" fill="rgb(217,207,13)"/><text x="20.7923%" y="95.50"></text></g><g><title>mir_const (23,587,418 samples, 8.13%)</title><rect x="13.4332%" y="133" width="8.1278%" height="15" fill="rgb(231,73,38)"/><text x="13.6832%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (20,992,380 samples, 7.23%)</title><rect x="14.3274%" y="117" width="7.2336%" height="15" fill="rgb(225,20,46)"/><text x="14.5774%" y="127.50">unsafety_c..</text></g><g><title>mir_built (19,021,433 samples, 6.55%)</title><rect x="15.0065%" y="101" width="6.5545%" height="15" fill="rgb(210,31,41)"/><text x="15.2565%" y="111.50">mir_built</text></g><g><title>evaluate_obligation (429,713 samples, 0.15%)</title><rect x="21.7185%" y="117" width="0.1481%" height="15" fill="rgb(221,200,47)"/><text x="21.9685%" y="127.50"></text></g><g><title>is_freeze_raw (657,588 samples, 0.23%)</title><rect x="21.8850%" y="117" width="0.2266%" height="15" fill="rgb(226,26,5)"/><text x="22.1350%" y="127.50"></text></g><g><title>evaluate_obligation (655,718 samples, 0.23%)</title><rect x="21.8857%" y="101" width="0.2259%" height="15" fill="rgb(249,33,26)"/><text x="22.1357%" y="111.50"></text></g><g><title>mir_promoted (27,235,704 samples, 9.38%)</title><rect x="12.7661%" y="149" width="9.3850%" height="15" fill="rgb(235,183,28)"/><text x="13.0161%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (1,712,351 samples, 0.59%)</title><rect x="21.5610%" y="133" width="0.5900%" height="15" fill="rgb(221,5,38)"/><text x="21.8110%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (965,290 samples, 0.33%)</title><rect x="22.1533%" y="149" width="0.3326%" height="15" fill="rgb(247,18,42)"/><text x="22.4033%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,722,678 samples, 0.94%)</title><rect x="22.4859%" y="149" width="0.9382%" height="15" fill="rgb(241,131,45)"/><text x="22.7359%" y="159.50"></text></g><g><title>normalize_projection_ty (1,770,900 samples, 0.61%)</title><rect x="22.8139%" y="133" width="0.6102%" height="15" fill="rgb(249,31,29)"/><text x="23.0639%" y="143.50"></text></g><g><title>type_op_normalize_predicate (392,866 samples, 0.14%)</title><rect x="23.4241%" y="149" width="0.1354%" height="15" fill="rgb(225,111,53)"/><text x="23.6741%" y="159.50"></text></g><g><title>type_op_prove_predicate (8,040,357 samples, 2.77%)</title><rect x="23.5595%" y="149" width="2.7706%" height="15" fill="rgb(238,160,17)"/><text x="23.8095%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (75,127,337 samples, 25.89%)</title><rect x="0.4516%" y="181" width="25.8876%" height="15" fill="rgb(214,148,48)"/><text x="0.7016%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (74,900,025 samples, 25.81%)</title><rect x="0.5299%" y="165" width="25.8093%" height="15" fill="rgb(232,36,49)"/><text x="0.7799%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (291,803 samples, 0.10%)</title><rect x="26.4221%" y="181" width="0.1006%" height="15" fill="rgb(209,103,24)"/><text x="26.6721%" y="191.50"></text></g><g><title>codegen_fn_attrs (467,427 samples, 0.16%)</title><rect x="26.6975%" y="149" width="0.1611%" height="15" fill="rgb(229,88,8)"/><text x="26.9475%" y="159.50"></text></g><g><title>check_mod_attrs (955,591 samples, 0.33%)</title><rect x="26.5294%" y="165" width="0.3293%" height="15" fill="rgb(213,181,19)"/><text x="26.7794%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (580,806 samples, 0.20%)</title><rect x="26.9793%" y="165" width="0.2001%" height="15" fill="rgb(254,191,54)"/><text x="27.2293%" y="175.50"></text></g><g><title>misc_checking_1 (1,966,932 samples, 0.68%)</title><rect x="26.5228%" y="181" width="0.6778%" height="15" fill="rgb(241,83,37)"/><text x="26.7728%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,320,184 samples, 0.45%)</title><rect x="27.2012%" y="165" width="0.4549%" height="15" fill="rgb(233,36,39)"/><text x="27.4512%" y="175.50"></text></g><g><title>check_mod_liveness (1,108,282 samples, 0.38%)</title><rect x="27.2742%" y="149" width="0.3819%" height="15" fill="rgb(226,3,54)"/><text x="27.5242%" y="159.50"></text></g><g><title>type_uninhabited_from (381,235 samples, 0.13%)</title><rect x="27.5248%" y="133" width="0.1314%" height="15" fill="rgb(245,192,40)"/><text x="27.7748%" y="143.50"></text></g><g><title>misc_checking_2 (2,977,653 samples, 1.03%)</title><rect x="27.2006%" y="181" width="1.0260%" height="15" fill="rgb(238,167,29)"/><text x="27.4506%" y="191.50"></text></g><g><title>match_checking (1,655,639 samples, 0.57%)</title><rect x="27.6561%" y="165" width="0.5705%" height="15" fill="rgb(232,182,51)"/><text x="27.9061%" y="175.50"></text></g><g><title>check_match (1,600,159 samples, 0.55%)</title><rect x="27.6753%" y="149" width="0.5514%" height="15" fill="rgb(231,60,39)"/><text x="27.9253%" y="159.50"></text></g><g><title>check_private_in_public (375,495 samples, 0.13%)</title><rect x="28.2302%" y="165" width="0.1294%" height="15" fill="rgb(208,69,12)"/><text x="28.4802%" y="175.50"></text></g><g><title>death_checking (770,858 samples, 0.27%)</title><rect x="28.3596%" y="165" width="0.2656%" height="15" fill="rgb(235,93,37)"/><text x="28.6096%" y="175.50"></text></g><g><title>param_env (298,424 samples, 0.10%)</title><rect x="29.1428%" y="133" width="0.1028%" height="15" fill="rgb(213,116,39)"/><text x="29.3928%" y="143.50"></text></g><g><title>crate_lints (3,207,226 samples, 1.11%)</title><rect x="28.6258%" y="149" width="1.1052%" height="15" fill="rgb(222,207,29)"/><text x="28.8758%" y="159.50"></text></g><g><title>type_of (1,233,976 samples, 0.43%)</title><rect x="29.3057%" y="133" width="0.4252%" height="15" fill="rgb(206,96,30)"/><text x="29.5557%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (952,701 samples, 0.33%)</title><rect x="29.4027%" y="117" width="0.3283%" height="15" fill="rgb(218,138,4)"/><text x="29.6527%" y="127.50"></text></g><g><title>lint_checking (4,283,968 samples, 1.48%)</title><rect x="28.6252%" y="165" width="1.4762%" height="15" fill="rgb(250,191,14)"/><text x="28.8752%" y="175.50"></text></g><g><title>module_lints (1,075,022 samples, 0.37%)</title><rect x="29.7309%" y="149" width="0.3704%" height="15" fill="rgb(239,60,40)"/><text x="29.9809%" y="159.50"></text></g><g><title>lint_mod (1,070,382 samples, 0.37%)</title><rect x="29.7325%" y="133" width="0.3688%" height="15" fill="rgb(206,27,48)"/><text x="29.9825%" y="143.50"></text></g><g><title>privacy_access_levels (506,795 samples, 0.17%)</title><rect x="30.1014%" y="165" width="0.1746%" height="15" fill="rgb(225,35,8)"/><text x="30.3514%" y="175.50"></text></g><g><title>privacy_checking_modules (2,089,154 samples, 0.72%)</title><rect x="30.2760%" y="165" width="0.7199%" height="15" fill="rgb(250,213,24)"/><text x="30.5260%" y="175.50"></text></g><g><title>check_mod_privacy (2,086,854 samples, 0.72%)</title><rect x="30.2768%" y="149" width="0.7191%" height="15" fill="rgb(247,123,22)"/><text x="30.5268%" y="159.50"></text></g><g><title>misc_checking_3 (8,060,610 samples, 2.78%)</title><rect x="28.2266%" y="181" width="2.7776%" height="15" fill="rgb(231,138,38)"/><text x="28.4766%" y="191.50">mi..</text></g><g><title>impl_trait_ref (503,466 samples, 0.17%)</title><rect x="31.1180%" y="85" width="0.1735%" height="15" fill="rgb(231,145,46)"/><text x="31.3680%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (482,235 samples, 0.17%)</title><rect x="31.1253%" y="69" width="0.1662%" height="15" fill="rgb(251,118,11)"/><text x="31.3753%" y="79.50"></text></g><g><title>adt_destructor (686,638 samples, 0.24%)</title><rect x="31.0653%" y="133" width="0.2366%" height="15" fill="rgb(217,147,25)"/><text x="31.3153%" y="143.50"></text></g><g><title>coherent_trait (681,918 samples, 0.23%)</title><rect x="31.0670%" y="117" width="0.2350%" height="15" fill="rgb(247,81,37)"/><text x="31.3170%" y="127.50"></text></g><g><title>specialization_graph_of (680,628 samples, 0.23%)</title><rect x="31.0674%" y="101" width="0.2345%" height="15" fill="rgb(209,12,38)"/><text x="31.3174%" y="111.50"></text></g><g><title>impl_parent (3,040,118 samples, 1.05%)</title><rect x="33.0245%" y="117" width="1.0476%" height="15" fill="rgb(227,1,9)"/><text x="33.2745%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,607,738 samples, 0.55%)</title><rect x="33.5181%" y="101" width="0.5540%" height="15" fill="rgb(248,47,43)"/><text x="33.7681%" y="111.50"></text></g><g><title>impl_trait_ref (5,736,011 samples, 1.98%)</title><rect x="34.0721%" y="117" width="1.9765%" height="15" fill="rgb(221,10,30)"/><text x="34.3221%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,478,187 samples, 1.54%)</title><rect x="34.5055%" y="101" width="1.5431%" height="15" fill="rgb(210,229,1)"/><text x="34.7555%" y="111.50"></text></g><g><title>coherent_trait (15,526,222 samples, 5.35%)</title><rect x="31.0489%" y="149" width="5.3501%" height="15" fill="rgb(222,148,37)"/><text x="31.2989%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (14,482,690 samples, 4.99%)</title><rect x="31.4085%" y="133" width="4.9905%" height="15" fill="rgb(234,67,33)"/><text x="31.6585%" y="143.50">specia..</text></g><g><title>trait_impls_of (1,014,400 samples, 0.35%)</title><rect x="36.0495%" y="117" width="0.3495%" height="15" fill="rgb(247,98,35)"/><text x="36.2995%" y="127.50"></text></g><g><title>coherence_checking (15,617,614 samples, 5.38%)</title><rect x="31.0416%" y="165" width="5.3816%" height="15" fill="rgb(247,138,52)"/><text x="31.2916%" y="175.50">coheren..</text></g><g><title>associated_item (537,407 samples, 0.19%)</title><rect x="53.4023%" y="101" width="0.1852%" height="15" fill="rgb(213,79,30)"/><text x="53.6523%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (424,356 samples, 0.15%)</title><rect x="53.4413%" y="85" width="0.1462%" height="15" fill="rgb(246,177,23)"/><text x="53.6913%" y="95.50"></text></g><g><title>associated_items (801,579 samples, 0.28%)</title><rect x="53.3276%" y="117" width="0.2762%" height="15" fill="rgb(230,62,27)"/><text x="53.5776%" y="127.50"></text></g><g><title>dropck_outlives (1,166,660 samples, 0.40%)</title><rect x="53.6516%" y="117" width="0.4020%" height="15" fill="rgb(216,154,8)"/><text x="53.9016%" y="127.50"></text></g><g><title>adt_dtorck_constraint (386,393 samples, 0.13%)</title><rect x="53.9205%" y="101" width="0.1331%" height="15" fill="rgb(244,35,45)"/><text x="54.1705%" y="111.50"></text></g><g><title>generics_of (343,583 samples, 0.12%)</title><rect x="55.6477%" y="101" width="0.1184%" height="15" fill="rgb(251,115,12)"/><text x="55.8977%" y="111.50"></text></g><g><title>impl_trait_ref (336,335 samples, 0.12%)</title><rect x="55.8111%" y="101" width="0.1159%" height="15" fill="rgb(240,54,50)"/><text x="56.0611%" y="111.50"></text></g><g><title>predicates_of (857,881 samples, 0.30%)</title><rect x="55.9356%" y="101" width="0.2956%" height="15" fill="rgb(233,84,52)"/><text x="56.1856%" y="111.50"></text></g><g><title>predicates_defined_on (548,416 samples, 0.19%)</title><rect x="56.0423%" y="85" width="0.1890%" height="15" fill="rgb(207,117,47)"/><text x="56.2923%" y="95.50"></text></g><g><title>specializes (569,757 samples, 0.20%)</title><rect x="56.2312%" y="101" width="0.1963%" height="15" fill="rgb(249,43,39)"/><text x="56.4812%" y="111.50"></text></g><g><title>param_env (333,053 samples, 0.11%)</title><rect x="56.3128%" y="85" width="0.1148%" height="15" fill="rgb(209,38,44)"/><text x="56.5628%" y="95.50"></text></g><g><title>trait_impls_of (922,799 samples, 0.32%)</title><rect x="56.4371%" y="101" width="0.3180%" height="15" fill="rgb(236,212,23)"/><text x="56.6871%" y="111.50"></text></g><g><title>implementations_of_trait (291,893 samples, 0.10%)</title><rect x="56.6545%" y="85" width="0.1006%" height="15" fill="rgb(242,79,21)"/><text x="56.9045%" y="95.50"></text></g><g><title>evaluate_obligation (7,841,967 samples, 2.70%)</title><rect x="54.0536%" y="117" width="2.7022%" height="15" fill="rgb(211,96,35)"/><text x="54.3036%" y="127.50">ev..</text></g><g><title>generics_of (338,546 samples, 0.12%)</title><rect x="56.8642%" y="117" width="0.1167%" height="15" fill="rgb(253,215,40)"/><text x="57.1142%" y="127.50"></text></g><g><title>evaluate_obligation (531,352 samples, 0.18%)</title><rect x="57.4355%" y="101" width="0.1831%" height="15" fill="rgb(211,81,21)"/><text x="57.6855%" y="111.50"></text></g><g><title>method_autoderef_steps (1,006,426 samples, 0.35%)</title><rect x="57.2774%" y="117" width="0.3468%" height="15" fill="rgb(208,190,38)"/><text x="57.5274%" y="127.50"></text></g><g><title>explicit_predicates_of (462,830 samples, 0.16%)</title><rect x="57.8539%" y="85" width="0.1595%" height="15" fill="rgb(235,213,38)"/><text x="58.1039%" y="95.50"></text></g><g><title>predicates_of (991,817 samples, 0.34%)</title><rect x="57.7065%" y="117" width="0.3418%" height="15" fill="rgb(237,122,38)"/><text x="57.9565%" y="127.50"></text></g><g><title>predicates_defined_on (736,685 samples, 0.25%)</title><rect x="57.7944%" y="101" width="0.2538%" height="15" fill="rgb(244,218,35)"/><text x="58.0444%" y="111.50"></text></g><g><title>dropck_outlives (694,199 samples, 0.24%)</title><rect x="64.1169%" y="101" width="0.2392%" height="15" fill="rgb(240,68,47)"/><text x="64.3669%" y="111.50"></text></g><g><title>generics_of (474,922 samples, 0.16%)</title><rect x="65.2812%" y="85" width="0.1637%" height="15" fill="rgb(210,16,53)"/><text x="65.5312%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (404,242 samples, 0.14%)</title><rect x="65.3055%" y="69" width="0.1393%" height="15" fill="rgb(235,124,12)"/><text x="65.5555%" y="79.50"></text></g><g><title>impl_trait_ref (298,286 samples, 0.10%)</title><rect x="65.4549%" y="85" width="0.1028%" height="15" fill="rgb(224,169,11)"/><text x="65.7049%" y="95.50"></text></g><g><title>trait_impls_of (308,785 samples, 0.11%)</title><rect x="65.6548%" y="85" width="0.1064%" height="15" fill="rgb(250,166,2)"/><text x="65.9048%" y="95.50"></text></g><g><title>evaluate_obligation (4,080,785 samples, 1.41%)</title><rect x="64.3561%" y="101" width="1.4062%" height="15" fill="rgb(242,216,29)"/><text x="64.6061%" y="111.50"></text></g><g><title>generics_of (744,198 samples, 0.26%)</title><rect x="65.8007%" y="101" width="0.2564%" height="15" fill="rgb(230,116,27)"/><text x="66.0507%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (547,956 samples, 0.19%)</title><rect x="65.8683%" y="85" width="0.1888%" height="15" fill="rgb(228,99,48)"/><text x="66.1183%" y="95.50"></text></g><g><title>is_copy_raw (418,026 samples, 0.14%)</title><rect x="66.1223%" y="101" width="0.1440%" height="15" fill="rgb(253,11,6)"/><text x="66.3723%" y="111.50"></text></g><g><title>evaluate_obligation (315,215 samples, 0.11%)</title><rect x="66.1577%" y="85" width="0.1086%" height="15" fill="rgb(247,143,39)"/><text x="66.4077%" y="95.50"></text></g><g><title>method_autoderef_steps (519,786 samples, 0.18%)</title><rect x="66.3014%" y="101" width="0.1791%" height="15" fill="rgb(236,97,10)"/><text x="66.5514%" y="111.50"></text></g><g><title>predicates_of (338,998 samples, 0.12%)</title><rect x="66.4839%" y="101" width="0.1168%" height="15" fill="rgb(233,208,19)"/><text x="66.7339%" y="111.50"></text></g><g><title>typeck (24,786,928 samples, 8.54%)</title><rect x="58.1585%" y="117" width="8.5412%" height="15" fill="rgb(216,164,2)"/><text x="58.4085%" y="127.50">typeck</text></g><g><title>item_bodies_checking (87,940,829 samples, 30.30%)</title><rect x="36.4373%" y="165" width="30.3030%" height="15" fill="rgb(220,129,5)"/><text x="36.6873%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (87,936,619 samples, 30.30%)</title><rect x="36.4388%" y="149" width="30.3015%" height="15" fill="rgb(242,17,10)"/><text x="36.6888%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (87,796,488 samples, 30.25%)</title><rect x="36.4871%" y="133" width="30.2532%" height="15" fill="rgb(242,107,0)"/><text x="36.7371%" y="143.50">typeck</text></g><g><title>layout_of (598,329 samples, 0.21%)</title><rect x="67.2907%" y="37" width="0.2062%" height="15" fill="rgb(251,28,31)"/><text x="67.5407%" y="47.50"></text></g><g><title>layout_of (749,049 samples, 0.26%)</title><rect x="67.2546%" y="53" width="0.2581%" height="15" fill="rgb(233,223,10)"/><text x="67.5046%" y="63.50"></text></g><g><title>layout_of (996,321 samples, 0.34%)</title><rect x="67.2246%" y="69" width="0.3433%" height="15" fill="rgb(215,21,27)"/><text x="67.4746%" y="79.50"></text></g><g><title>layout_of (1,061,592 samples, 0.37%)</title><rect x="67.2028%" y="133" width="0.3658%" height="15" fill="rgb(232,23,21)"/><text x="67.4528%" y="143.50"></text></g><g><title>layout_of (1,056,682 samples, 0.36%)</title><rect x="67.2045%" y="117" width="0.3641%" height="15" fill="rgb(244,5,23)"/><text x="67.4545%" y="127.50"></text></g><g><title>layout_of (1,051,252 samples, 0.36%)</title><rect x="67.2063%" y="101" width="0.3622%" height="15" fill="rgb(226,81,46)"/><text x="67.4563%" y="111.50"></text></g><g><title>layout_of (1,048,032 samples, 0.36%)</title><rect x="67.2075%" y="85" width="0.3611%" height="15" fill="rgb(247,70,30)"/><text x="67.4575%" y="95.50"></text></g><g><title>adt_dtorck_constraint (500,224 samples, 0.17%)</title><rect x="67.9486%" y="53" width="0.1724%" height="15" fill="rgb(212,68,19)"/><text x="68.1986%" y="63.50"></text></g><g><title>adt_dtorck_constraint (779,369 samples, 0.27%)</title><rect x="67.8661%" y="69" width="0.2686%" height="15" fill="rgb(240,187,13)"/><text x="68.1161%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,087,693 samples, 0.37%)</title><rect x="67.7806%" y="85" width="0.3748%" height="15" fill="rgb(223,113,26)"/><text x="68.0306%" y="95.50"></text></g><g><title>dropck_outlives (1,452,466 samples, 0.50%)</title><rect x="67.6677%" y="117" width="0.5005%" height="15" fill="rgb(206,192,2)"/><text x="67.9177%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,376,545 samples, 0.47%)</title><rect x="67.6939%" y="101" width="0.4743%" height="15" fill="rgb(241,108,4)"/><text x="67.9439%" y="111.50"></text></g><g><title>item_types_checking (4,183,627 samples, 1.44%)</title><rect x="66.7403%" y="165" width="1.4416%" height="15" fill="rgb(247,173,49)"/><text x="66.9903%" y="175.50"></text></g><g><title>check_mod_item_types (4,179,847 samples, 1.44%)</title><rect x="66.7416%" y="149" width="1.4403%" height="15" fill="rgb(224,114,35)"/><text x="66.9916%" y="159.50"></text></g><g><title>typeck (1,639,598 samples, 0.56%)</title><rect x="67.6169%" y="133" width="0.5650%" height="15" fill="rgb(245,159,27)"/><text x="67.8669%" y="143.50"></text></g><g><title>fn_sig (319,573 samples, 0.11%)</title><rect x="68.3337%" y="133" width="0.1101%" height="15" fill="rgb(245,172,44)"/><text x="68.5837%" y="143.50"></text></g><g><title>is_late_bound_map (914,980 samples, 0.32%)</title><rect x="68.5092%" y="117" width="0.3153%" height="15" fill="rgb(236,23,11)"/><text x="68.7592%" y="127.50"></text></g><g><title>resolve_lifetimes (878,470 samples, 0.30%)</title><rect x="68.5217%" y="101" width="0.3027%" height="15" fill="rgb(205,117,38)"/><text x="68.7717%" y="111.50"></text></g><g><title>lint_levels (327,213 samples, 0.11%)</title><rect x="68.7117%" y="85" width="0.1128%" height="15" fill="rgb(237,72,25)"/><text x="68.9617%" y="95.50"></text></g><g><title>generics_of (1,285,681 samples, 0.44%)</title><rect x="68.4438%" y="133" width="0.4430%" height="15" fill="rgb(244,70,9)"/><text x="68.6938%" y="143.50"></text></g><g><title>explicit_predicates_of (440,598 samples, 0.15%)</title><rect x="68.9761%" y="101" width="0.1518%" height="15" fill="rgb(217,125,39)"/><text x="69.2261%" y="111.50"></text></g><g><title>predicates_of (1,046,815 samples, 0.36%)</title><rect x="68.9101%" y="133" width="0.3607%" height="15" fill="rgb(235,36,10)"/><text x="69.1601%" y="143.50"></text></g><g><title>predicates_defined_on (974,814 samples, 0.34%)</title><rect x="68.9350%" y="117" width="0.3359%" height="15" fill="rgb(251,123,47)"/><text x="69.1850%" y="127.50"></text></g><g><title>inferred_outlives_of (414,914 samples, 0.14%)</title><rect x="69.1279%" y="101" width="0.1430%" height="15" fill="rgb(221,13,13)"/><text x="69.3779%" y="111.50"></text></g><g><title>inferred_outlives_crate (386,194 samples, 0.13%)</title><rect x="69.1378%" y="85" width="0.1331%" height="15" fill="rgb(238,131,9)"/><text x="69.3878%" y="95.50"></text></g><g><title>type_collecting (3,341,717 samples, 1.15%)</title><rect x="68.1831%" y="165" width="1.1515%" height="15" fill="rgb(211,50,8)"/><text x="68.4331%" y="175.50"></text></g><g><title>collect_mod_item_types (3,334,477 samples, 1.15%)</title><rect x="68.1856%" y="149" width="1.1490%" height="15" fill="rgb(245,182,24)"/><text x="68.4356%" y="159.50"></text></g><g><title>evaluate_obligation (648,002 samples, 0.22%)</title><rect x="70.4902%" y="133" width="0.2233%" height="15" fill="rgb(242,14,37)"/><text x="70.7402%" y="143.50"></text></g><g><title>implied_outlives_bounds (394,325 samples, 0.14%)</title><rect x="70.7135%" y="133" width="0.1359%" height="15" fill="rgb(246,228,12)"/><text x="70.9635%" y="143.50"></text></g><g><title>param_env (474,472 samples, 0.16%)</title><rect x="70.8493%" y="133" width="0.1635%" height="15" fill="rgb(213,55,15)"/><text x="71.0993%" y="143.50"></text></g><g><title>region_scope_tree (906,731 samples, 0.31%)</title><rect x="71.0249%" y="133" width="0.3124%" height="15" fill="rgb(209,9,3)"/><text x="71.2749%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,470,415 samples, 1.89%)</title><rect x="69.4577%" y="149" width="1.8850%" height="15" fill="rgb(230,59,30)"/><text x="69.7077%" y="159.50">c..</text></g><g><title>adt_sized_constraint (331,315 samples, 0.11%)</title><rect x="72.3110%" y="85" width="0.1142%" height="15" fill="rgb(209,121,21)"/><text x="72.5610%" y="95.50"></text></g><g><title>adt_sized_constraint (668,407 samples, 0.23%)</title><rect x="72.2040%" y="101" width="0.2303%" height="15" fill="rgb(220,109,13)"/><text x="72.4540%" y="111.50"></text></g><g><title>adt_sized_constraint (951,291 samples, 0.33%)</title><rect x="72.1153%" y="117" width="0.3278%" height="15" fill="rgb(232,18,1)"/><text x="72.3653%" y="127.50"></text></g><g><title>evaluate_obligation (1,407,209 samples, 0.48%)</title><rect x="71.9656%" y="133" width="0.4849%" height="15" fill="rgb(215,41,42)"/><text x="72.2156%" y="143.50"></text></g><g><title>param_env (312,434 samples, 0.11%)</title><rect x="72.5019%" y="133" width="0.1077%" height="15" fill="rgb(224,123,36)"/><text x="72.7519%" y="143.50"></text></g><g><title>check_item_well_formed (4,119,921 samples, 1.42%)</title><rect x="71.3427%" y="149" width="1.4197%" height="15" fill="rgb(240,125,3)"/><text x="71.5927%" y="159.50"></text></g><g><title>analysis (210,526,514 samples, 72.54%)</title><rect x="0.2465%" y="197" width="72.5439%" height="15" fill="rgb(205,98,50)"/><text x="0.4965%" y="207.50">analysis</text></g><g><title>type_check_crate (121,266,059 samples, 41.79%)</title><rect x="31.0042%" y="181" width="41.7863%" height="15" fill="rgb(205,185,37)"/><text x="31.2542%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,020,281 samples, 3.45%)</title><rect x="69.3377%" y="165" width="3.4528%" height="15" fill="rgb(238,207,15)"/><text x="69.5877%" y="175.50">wf_..</text></g><g><title>codegen_crate (452,355 samples, 0.16%)</title><rect x="72.7945%" y="197" width="0.1559%" height="15" fill="rgb(213,199,42)"/><text x="73.0445%" y="207.50"></text></g><g><title>metadata_load_macro (1,059,620 samples, 0.37%)</title><rect x="86.9406%" y="149" width="0.3651%" height="15" fill="rgb(235,201,11)"/><text x="87.1906%" y="159.50"></text></g><g><title>metadata_register_crate (3,075,923 samples, 1.06%)</title><rect x="87.3057%" y="149" width="1.0599%" height="15" fill="rgb(207,46,11)"/><text x="87.5557%" y="159.50"></text></g><g><title>metadata_register_crate (1,112,411 samples, 0.38%)</title><rect x="87.9823%" y="133" width="0.3833%" height="15" fill="rgb(241,35,35)"/><text x="88.2323%" y="143.50"></text></g><g><title>macro_expand_crate (44,076,641 samples, 15.19%)</title><rect x="73.1970%" y="181" width="15.1881%" height="15" fill="rgb(243,32,47)"/><text x="73.4470%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (44,062,711 samples, 15.18%)</title><rect x="73.2018%" y="165" width="15.1833%" height="15" fill="rgb(247,202,23)"/><text x="73.4518%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (579,366 samples, 0.20%)</title><rect x="88.3866%" y="181" width="0.1996%" height="15" fill="rgb(219,102,11)"/><text x="88.6366%" y="191.50"></text></g><g><title>finalize_macro_resolutions (498,306 samples, 0.17%)</title><rect x="88.6237%" y="165" width="0.1717%" height="15" fill="rgb(243,110,44)"/><text x="88.8737%" y="175.50"></text></g><g><title>late_resolve_crate (4,042,335 samples, 1.39%)</title><rect x="88.7954%" y="165" width="1.3929%" height="15" fill="rgb(222,74,54)"/><text x="89.0454%" y="175.50"></text></g><g><title>configure_and_expand (50,257,590 samples, 17.32%)</title><rect x="72.9504%" y="197" width="17.3179%" height="15" fill="rgb(216,99,12)"/><text x="73.2004%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,881,594 samples, 1.68%)</title><rect x="88.5862%" y="181" width="1.6821%" height="15" fill="rgb(226,22,26)"/><text x="88.8362%" y="191.50"></text></g><g><title>drop_ast (522,986 samples, 0.18%)</title><rect x="90.2683%" y="197" width="0.1802%" height="15" fill="rgb(217,163,10)"/><text x="90.5183%" y="207.50"></text></g><g><title>early_lint_checks (866,880 samples, 0.30%)</title><rect x="90.4545%" y="197" width="0.2987%" height="15" fill="rgb(213,25,53)"/><text x="90.7045%" y="207.50"></text></g><g><title>free_global_ctxt (5,512,961 samples, 1.90%)</title><rect x="90.7532%" y="197" width="1.8997%" height="15" fill="rgb(252,105,26)"/><text x="91.0032%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,744,879 samples, 0.60%)</title><rect x="92.6529%" y="197" width="0.6013%" height="15" fill="rgb(220,39,43)"/><text x="92.9029%" y="207.50"></text></g><g><title>hir_lowering (6,256,720 samples, 2.16%)</title><rect x="93.2542%" y="197" width="2.1560%" height="15" fill="rgb(229,68,48)"/><text x="93.5042%" y="207.50">h..</text></g><g><title>parse_crate (11,206,564 samples, 3.86%)</title><rect x="95.4314%" y="197" width="3.8616%" height="15" fill="rgb(252,8,32)"/><text x="95.6814%" y="207.50">pars..</text></g><g><title>self_profile_alloc_query_strings (1,315,215 samples, 0.45%)</title><rect x="99.3709%" y="197" width="0.4532%" height="15" fill="rgb(223,20,43)"/><text x="99.6209%" y="207.50"></text></g><g><title>all (290,205,481 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (290,205,481 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (391,505 samples, 0.13%)</title><rect x="99.8651%" y="197" width="0.1349%" height="15" fill="rgb(249,185,26)"/><text x="100.1151%" y="207.50"></text></g></svg></svg>