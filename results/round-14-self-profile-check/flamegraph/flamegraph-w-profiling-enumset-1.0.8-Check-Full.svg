<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (185,600 samples, 0.10%)</title><rect x="12.7487%" y="133" width="0.1003%" height="15" fill="rgb(227,0,7)"/><text x="12.9987%" y="143.50"></text></g><g><title>is_late_bound_map (236,354 samples, 0.13%)</title><rect x="12.8490%" y="133" width="0.1277%" height="15" fill="rgb(217,0,24)"/><text x="13.0990%" y="143.50"></text></g><g><title>item_attrs (433,736 samples, 0.23%)</title><rect x="16.0194%" y="69" width="0.2344%" height="15" fill="rgb(221,193,54)"/><text x="16.2694%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (421,586 samples, 0.23%)</title><rect x="16.0259%" y="53" width="0.2278%" height="15" fill="rgb(248,212,6)"/><text x="16.2759%" y="63.50"></text></g><g><title>codegen_fn_attrs (579,018 samples, 0.31%)</title><rect x="15.9499%" y="85" width="0.3129%" height="15" fill="rgb(208,68,35)"/><text x="16.1999%" y="95.50"></text></g><g><title>is_copy_raw (202,050 samples, 0.11%)</title><rect x="19.3868%" y="69" width="0.1092%" height="15" fill="rgb(232,128,0)"/><text x="19.6368%" y="79.50"></text></g><g><title>needs_drop_raw (1,166,340 samples, 0.63%)</title><rect x="19.4960%" y="69" width="0.6303%" height="15" fill="rgb(207,160,47)"/><text x="19.7460%" y="79.50"></text></g><g><title>is_copy_raw (1,018,208 samples, 0.55%)</title><rect x="19.5760%" y="53" width="0.5503%" height="15" fill="rgb(228,23,34)"/><text x="19.8260%" y="63.50"></text></g><g><title>evaluate_obligation (855,108 samples, 0.46%)</title><rect x="19.6642%" y="37" width="0.4621%" height="15" fill="rgb(218,30,26)"/><text x="19.9142%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (993,367 samples, 0.54%)</title><rect x="20.4399%" y="53" width="0.5368%" height="15" fill="rgb(220,122,19)"/><text x="20.6899%" y="63.50"></text></g><g><title>resolve_instance (1,835,025 samples, 0.99%)</title><rect x="20.1263%" y="69" width="0.9917%" height="15" fill="rgb(250,228,42)"/><text x="20.3763%" y="79.50"></text></g><g><title>thir_body (2,059,443 samples, 1.11%)</title><rect x="21.1767%" y="69" width="1.1130%" height="15" fill="rgb(240,193,28)"/><text x="21.4267%" y="79.50"></text></g><g><title>mir_const (15,250,292 samples, 8.24%)</title><rect x="14.1139%" y="117" width="8.2418%" height="15" fill="rgb(216,20,37)"/><text x="14.3639%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (12,972,390 samples, 7.01%)</title><rect x="15.3449%" y="101" width="7.0107%" height="15" fill="rgb(206,188,39)"/><text x="15.5949%" y="111.50">unsafety_..</text></g><g><title>mir_built (11,273,830 samples, 6.09%)</title><rect x="16.2629%" y="85" width="6.0928%" height="15" fill="rgb(217,207,13)"/><text x="16.5129%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (291,244 samples, 0.16%)</title><rect x="22.3556%" y="117" width="0.1574%" height="15" fill="rgb(231,73,38)"/><text x="22.6056%" y="127.50"></text></g><g><title>mir_promoted (17,475,831 samples, 9.44%)</title><rect x="13.0686%" y="133" width="9.4445%" height="15" fill="rgb(225,20,46)"/><text x="13.3186%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,729,111 samples, 0.93%)</title><rect x="22.5138%" y="133" width="0.9345%" height="15" fill="rgb(210,31,41)"/><text x="22.7638%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,617,881 samples, 0.87%)</title><rect x="23.4482%" y="133" width="0.8744%" height="15" fill="rgb(221,200,47)"/><text x="23.6982%" y="143.50"></text></g><g><title>normalize_projection_ty (1,023,239 samples, 0.55%)</title><rect x="23.7696%" y="117" width="0.5530%" height="15" fill="rgb(226,26,5)"/><text x="24.0196%" y="127.50"></text></g><g><title>type_op_normalize_predicate (397,328 samples, 0.21%)</title><rect x="24.3226%" y="133" width="0.2147%" height="15" fill="rgb(249,33,26)"/><text x="24.5726%" y="143.50"></text></g><g><title>type_op_normalize_ty (381,335 samples, 0.21%)</title><rect x="24.5373%" y="133" width="0.2061%" height="15" fill="rgb(235,183,28)"/><text x="24.7873%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,164,755 samples, 1.71%)</title><rect x="24.7434%" y="133" width="1.7103%" height="15" fill="rgb(221,5,38)"/><text x="24.9934%" y="143.50"></text></g><g><title>evaluate_obligation (412,228 samples, 0.22%)</title><rect x="26.2310%" y="117" width="0.2228%" height="15" fill="rgb(247,18,42)"/><text x="26.4810%" y="127.50"></text></g><g><title>MIR_borrow_checking (47,912,094 samples, 25.89%)</title><rect x="0.5620%" y="165" width="25.8933%" height="15" fill="rgb(241,131,45)"/><text x="0.8120%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,436,562 samples, 25.64%)</title><rect x="0.8190%" y="149" width="25.6363%" height="15" fill="rgb(249,31,29)"/><text x="1.0690%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (271,443 samples, 0.15%)</title><rect x="26.4553%" y="165" width="0.1467%" height="15" fill="rgb(225,111,53)"/><text x="26.7053%" y="175.50"></text></g><g><title>hir_module_items (356,465 samples, 0.19%)</title><rect x="26.6020%" y="165" width="0.1926%" height="15" fill="rgb(238,160,17)"/><text x="26.8520%" y="175.50"></text></g><g><title>associated_item (188,930 samples, 0.10%)</title><rect x="27.3304%" y="101" width="0.1021%" height="15" fill="rgb(214,148,48)"/><text x="27.5804%" y="111.50"></text></g><g><title>codegen_fn_attrs (420,323 samples, 0.23%)</title><rect x="27.4326%" y="101" width="0.2272%" height="15" fill="rgb(232,36,49)"/><text x="27.6826%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,081,651 samples, 0.58%)</title><rect x="27.0901%" y="133" width="0.5846%" height="15" fill="rgb(209,103,24)"/><text x="27.3401%" y="143.50"></text></g><g><title>should_inherit_track_caller (832,438 samples, 0.45%)</title><rect x="27.2247%" y="117" width="0.4499%" height="15" fill="rgb(229,88,8)"/><text x="27.4747%" y="127.50"></text></g><g><title>check_mod_attrs (1,605,848 samples, 0.87%)</title><rect x="26.8069%" y="149" width="0.8679%" height="15" fill="rgb(213,181,19)"/><text x="27.0569%" y="159.50"></text></g><g><title>check_mod_const_bodies (302,364 samples, 0.16%)</title><rect x="27.6748%" y="149" width="0.1634%" height="15" fill="rgb(254,191,54)"/><text x="27.9248%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (459,664 samples, 0.25%)</title><rect x="27.8994%" y="149" width="0.2484%" height="15" fill="rgb(241,83,37)"/><text x="28.1494%" y="159.50"></text></g><g><title>misc_checking_1 (2,553,668 samples, 1.38%)</title><rect x="26.7949%" y="165" width="1.3801%" height="15" fill="rgb(233,36,39)"/><text x="27.0449%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (700,418 samples, 0.38%)</title><rect x="28.1759%" y="149" width="0.3785%" height="15" fill="rgb(226,3,54)"/><text x="28.4259%" y="159.50"></text></g><g><title>check_mod_liveness (574,456 samples, 0.31%)</title><rect x="28.2440%" y="133" width="0.3105%" height="15" fill="rgb(245,192,40)"/><text x="28.4940%" y="143.50"></text></g><g><title>misc_checking_2 (1,949,272 samples, 1.05%)</title><rect x="28.1750%" y="165" width="1.0535%" height="15" fill="rgb(238,167,29)"/><text x="28.4250%" y="175.50"></text></g><g><title>match_checking (1,247,194 samples, 0.67%)</title><rect x="28.5544%" y="149" width="0.6740%" height="15" fill="rgb(232,182,51)"/><text x="28.8044%" y="159.50"></text></g><g><title>check_match (1,140,574 samples, 0.62%)</title><rect x="28.6120%" y="133" width="0.6164%" height="15" fill="rgb(231,60,39)"/><text x="28.8620%" y="143.50"></text></g><g><title>check_private_in_public (376,154 samples, 0.20%)</title><rect x="29.2345%" y="149" width="0.2033%" height="15" fill="rgb(208,69,12)"/><text x="29.4845%" y="159.50"></text></g><g><title>death_checking (796,399 samples, 0.43%)</title><rect x="29.4378%" y="149" width="0.4304%" height="15" fill="rgb(235,93,37)"/><text x="29.6878%" y="159.50"></text></g><g><title>item_attrs (312,384 samples, 0.17%)</title><rect x="29.6994%" y="133" width="0.1688%" height="15" fill="rgb(213,116,39)"/><text x="29.9494%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (310,894 samples, 0.17%)</title><rect x="29.7002%" y="117" width="0.1680%" height="15" fill="rgb(222,207,29)"/><text x="29.9502%" y="127.50"></text></g><g><title>param_env (188,932 samples, 0.10%)</title><rect x="30.3613%" y="117" width="0.1021%" height="15" fill="rgb(206,96,30)"/><text x="30.6113%" y="127.50"></text></g><g><title>crate_lints (1,449,986 samples, 0.78%)</title><rect x="29.8691%" y="133" width="0.7836%" height="15" fill="rgb(218,138,4)"/><text x="30.1191%" y="143.50"></text></g><g><title>type_of (348,154 samples, 0.19%)</title><rect x="30.4646%" y="117" width="0.1882%" height="15" fill="rgb(250,191,14)"/><text x="30.7146%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (268,843 samples, 0.15%)</title><rect x="30.5075%" y="101" width="0.1453%" height="15" fill="rgb(239,60,40)"/><text x="30.7575%" y="111.50"></text></g><g><title>lint_checking (1,962,042 samples, 1.06%)</title><rect x="29.8682%" y="149" width="1.0604%" height="15" fill="rgb(206,27,48)"/><text x="30.1182%" y="159.50"></text></g><g><title>module_lints (510,306 samples, 0.28%)</title><rect x="30.6528%" y="133" width="0.2758%" height="15" fill="rgb(225,35,8)"/><text x="30.9028%" y="143.50"></text></g><g><title>lint_mod (506,226 samples, 0.27%)</title><rect x="30.6550%" y="117" width="0.2736%" height="15" fill="rgb(250,213,24)"/><text x="30.9050%" y="127.50"></text></g><g><title>privacy_access_levels (421,415 samples, 0.23%)</title><rect x="30.9286%" y="149" width="0.2277%" height="15" fill="rgb(247,123,22)"/><text x="31.1786%" y="159.50"></text></g><g><title>privacy_checking_modules (1,087,042 samples, 0.59%)</title><rect x="31.1563%" y="149" width="0.5875%" height="15" fill="rgb(231,138,38)"/><text x="31.4063%" y="159.50"></text></g><g><title>check_mod_privacy (1,084,331 samples, 0.59%)</title><rect x="31.1578%" y="133" width="0.5860%" height="15" fill="rgb(231,145,46)"/><text x="31.4078%" y="143.50"></text></g><g><title>misc_checking_3 (4,681,943 samples, 2.53%)</title><rect x="29.2284%" y="165" width="2.5303%" height="15" fill="rgb(251,118,11)"/><text x="29.4784%" y="175.50">mi..</text></g><g><title>impl_parent (1,700,790 samples, 0.92%)</title><rect x="33.6690%" y="101" width="0.9192%" height="15" fill="rgb(217,147,25)"/><text x="33.9190%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (940,160 samples, 0.51%)</title><rect x="34.0801%" y="85" width="0.5081%" height="15" fill="rgb(247,81,37)"/><text x="34.3301%" y="95.50"></text></g><g><title>impl_trait_ref (3,394,953 samples, 1.83%)</title><rect x="34.5882%" y="101" width="1.8347%" height="15" fill="rgb(209,12,38)"/><text x="34.8382%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,237,832 samples, 1.21%)</title><rect x="35.2135%" y="85" width="1.2094%" height="15" fill="rgb(227,1,9)"/><text x="35.4635%" y="95.50"></text></g><g><title>trait_impls_of (534,626 samples, 0.29%)</title><rect x="36.4620%" y="101" width="0.2889%" height="15" fill="rgb(248,47,43)"/><text x="36.7120%" y="111.50"></text></g><g><title>coherent_trait (9,057,700 samples, 4.90%)</title><rect x="31.8567%" y="133" width="4.8951%" height="15" fill="rgb(221,10,30)"/><text x="32.1067%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (8,822,237 samples, 4.77%)</title><rect x="31.9840%" y="117" width="4.7678%" height="15" fill="rgb(210,229,1)"/><text x="32.2340%" y="127.50">specia..</text></g><g><title>coherence_checking (9,163,313 samples, 4.95%)</title><rect x="31.8413%" y="149" width="4.9522%" height="15" fill="rgb(222,148,37)"/><text x="32.0913%" y="159.50">cohere..</text></g><g><title>associated_item (628,707 samples, 0.34%)</title><rect x="56.1920%" y="85" width="0.3398%" height="15" fill="rgb(234,67,33)"/><text x="56.4420%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (486,876 samples, 0.26%)</title><rect x="56.2687%" y="69" width="0.2631%" height="15" fill="rgb(247,98,35)"/><text x="56.5187%" y="79.50"></text></g><g><title>associated_items (913,173 samples, 0.49%)</title><rect x="56.0587%" y="101" width="0.4935%" height="15" fill="rgb(247,138,52)"/><text x="56.3087%" y="111.50"></text></g><g><title>dropck_outlives (306,522 samples, 0.17%)</title><rect x="56.6020%" y="101" width="0.1657%" height="15" fill="rgb(213,79,30)"/><text x="56.8520%" y="111.50"></text></g><g><title>generics_of (766,392 samples, 0.41%)</title><rect x="60.0112%" y="85" width="0.4142%" height="15" fill="rgb(246,177,23)"/><text x="60.2612%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (551,099 samples, 0.30%)</title><rect x="60.1276%" y="69" width="0.2978%" height="15" fill="rgb(230,62,27)"/><text x="60.3776%" y="79.50"></text></g><g><title>impl_polarity (398,407 samples, 0.22%)</title><rect x="60.4561%" y="85" width="0.2153%" height="15" fill="rgb(216,154,8)"/><text x="60.7061%" y="95.50"></text></g><g><title>impl_trait_ref (725,758 samples, 0.39%)</title><rect x="60.6714%" y="85" width="0.3922%" height="15" fill="rgb(244,35,45)"/><text x="60.9214%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (576,345 samples, 0.31%)</title><rect x="60.7522%" y="69" width="0.3115%" height="15" fill="rgb(251,115,12)"/><text x="61.0022%" y="79.50"></text></g><g><title>predicates_of (1,026,421 samples, 0.55%)</title><rect x="61.0865%" y="85" width="0.5547%" height="15" fill="rgb(240,54,50)"/><text x="61.3365%" y="95.50"></text></g><g><title>predicates_defined_on (561,784 samples, 0.30%)</title><rect x="61.3376%" y="69" width="0.3036%" height="15" fill="rgb(233,84,52)"/><text x="61.5876%" y="79.50"></text></g><g><title>specializes (2,437,722 samples, 1.32%)</title><rect x="61.6412%" y="85" width="1.3174%" height="15" fill="rgb(207,117,47)"/><text x="61.8912%" y="95.50"></text></g><g><title>param_env (1,489,968 samples, 0.81%)</title><rect x="62.1534%" y="69" width="0.8052%" height="15" fill="rgb(249,43,39)"/><text x="62.4034%" y="79.50"></text></g><g><title>def_span (688,722 samples, 0.37%)</title><rect x="62.5864%" y="53" width="0.3722%" height="15" fill="rgb(209,38,44)"/><text x="62.8364%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (612,401 samples, 0.33%)</title><rect x="62.6277%" y="37" width="0.3310%" height="15" fill="rgb(236,212,23)"/><text x="62.8777%" y="47.50"></text></g><g><title>evaluate_obligation (11,587,381 samples, 6.26%)</title><rect x="56.7676%" y="101" width="6.2622%" height="15" fill="rgb(242,79,21)"/><text x="57.0176%" y="111.50">evaluate..</text></g><g><title>impl_item_implementor_ids (213,281 samples, 0.12%)</title><rect x="63.1473%" y="101" width="0.1153%" height="15" fill="rgb(211,96,35)"/><text x="63.3973%" y="111.50"></text></g><g><title>method_autoderef_steps (364,502 samples, 0.20%)</title><rect x="63.3721%" y="101" width="0.1970%" height="15" fill="rgb(253,215,40)"/><text x="63.6221%" y="111.50"></text></g><g><title>evaluate_obligation (215,641 samples, 0.12%)</title><rect x="63.4525%" y="85" width="0.1165%" height="15" fill="rgb(211,81,21)"/><text x="63.7025%" y="95.50"></text></g><g><title>predicates_of (240,994 samples, 0.13%)</title><rect x="63.7237%" y="101" width="0.1302%" height="15" fill="rgb(208,190,38)"/><text x="63.9737%" y="111.50"></text></g><g><title>evaluate_obligation (421,354 samples, 0.23%)</title><rect x="67.3557%" y="85" width="0.2277%" height="15" fill="rgb(235,213,38)"/><text x="67.6057%" y="95.50"></text></g><g><title>is_copy_raw (361,083 samples, 0.20%)</title><rect x="67.6062%" y="85" width="0.1951%" height="15" fill="rgb(237,122,38)"/><text x="67.8562%" y="95.50"></text></g><g><title>evaluate_obligation (312,583 samples, 0.17%)</title><rect x="67.6324%" y="69" width="0.1689%" height="15" fill="rgb(244,218,35)"/><text x="67.8824%" y="79.50"></text></g><g><title>typeck (7,326,422 samples, 3.96%)</title><rect x="63.9688%" y="101" width="3.9594%" height="15" fill="rgb(240,68,47)"/><text x="64.2188%" y="111.50">type..</text></g><g><title>item_bodies_checking (57,666,103 samples, 31.16%)</title><rect x="36.8300%" y="149" width="31.1647%" height="15" fill="rgb(210,16,53)"/><text x="37.0800%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,662,503 samples, 31.16%)</title><rect x="36.8320%" y="133" width="31.1627%" height="15" fill="rgb(235,124,12)"/><text x="37.0820%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (57,345,481 samples, 30.99%)</title><rect x="37.0033%" y="117" width="30.9914%" height="15" fill="rgb(224,169,11)"/><text x="37.2533%" y="127.50">typeck</text></g><g><title>item_types_checking (3,117,025 samples, 1.68%)</title><rect x="67.9947%" y="149" width="1.6845%" height="15" fill="rgb(250,166,2)"/><text x="68.2447%" y="159.50"></text></g><g><title>check_mod_item_types (3,113,105 samples, 1.68%)</title><rect x="67.9968%" y="133" width="1.6824%" height="15" fill="rgb(242,216,29)"/><text x="68.2468%" y="143.50"></text></g><g><title>fn_sig (632,929 samples, 0.34%)</title><rect x="70.0100%" y="117" width="0.3421%" height="15" fill="rgb(230,116,27)"/><text x="70.2600%" y="127.50"></text></g><g><title>named_region_map (385,705 samples, 0.21%)</title><rect x="70.5217%" y="101" width="0.2084%" height="15" fill="rgb(228,99,48)"/><text x="70.7717%" y="111.50"></text></g><g><title>resolve_lifetimes (346,244 samples, 0.19%)</title><rect x="70.5431%" y="85" width="0.1871%" height="15" fill="rgb(253,11,6)"/><text x="70.7931%" y="95.50"></text></g><g><title>generics_of (740,602 samples, 0.40%)</title><rect x="70.3520%" y="117" width="0.4002%" height="15" fill="rgb(247,143,39)"/><text x="70.6020%" y="127.50"></text></g><g><title>late_bound_vars_map (679,728 samples, 0.37%)</title><rect x="71.2357%" y="69" width="0.3673%" height="15" fill="rgb(236,97,10)"/><text x="71.4857%" y="79.50"></text></g><g><title>resolve_lifetimes (652,238 samples, 0.35%)</title><rect x="71.2505%" y="53" width="0.3525%" height="15" fill="rgb(233,208,19)"/><text x="71.5005%" y="63.50"></text></g><g><title>lint_levels (196,633 samples, 0.11%)</title><rect x="71.4968%" y="37" width="0.1063%" height="15" fill="rgb(216,164,2)"/><text x="71.7468%" y="47.50"></text></g><g><title>explicit_predicates_of (1,048,813 samples, 0.57%)</title><rect x="71.0601%" y="85" width="0.5668%" height="15" fill="rgb(220,129,5)"/><text x="71.3101%" y="95.50"></text></g><g><title>predicates_of (1,576,538 samples, 0.85%)</title><rect x="70.8703%" y="117" width="0.8520%" height="15" fill="rgb(242,17,10)"/><text x="71.1203%" y="127.50"></text></g><g><title>predicates_defined_on (1,446,077 samples, 0.78%)</title><rect x="70.9408%" y="101" width="0.7815%" height="15" fill="rgb(242,107,0)"/><text x="71.1908%" y="111.50"></text></g><g><title>type_collecting (4,077,076 samples, 2.20%)</title><rect x="69.6806%" y="149" width="2.2034%" height="15" fill="rgb(251,28,31)"/><text x="69.9306%" y="159.50">t..</text></g><g><title>collect_mod_item_types (4,067,296 samples, 2.20%)</title><rect x="69.6858%" y="133" width="2.1981%" height="15" fill="rgb(233,223,10)"/><text x="69.9358%" y="143.50">c..</text></g><g><title>evaluate_obligation (505,396 samples, 0.27%)</title><rect x="75.3218%" y="117" width="0.2731%" height="15" fill="rgb(215,21,27)"/><text x="75.5718%" y="127.50"></text></g><g><title>implied_outlives_bounds (325,731 samples, 0.18%)</title><rect x="75.6047%" y="117" width="0.1760%" height="15" fill="rgb(232,23,21)"/><text x="75.8547%" y="127.50"></text></g><g><title>param_env (1,430,406 samples, 0.77%)</title><rect x="75.7807%" y="117" width="0.7730%" height="15" fill="rgb(244,5,23)"/><text x="76.0307%" y="127.50"></text></g><g><title>region_scope_tree (762,179 samples, 0.41%)</title><rect x="76.5777%" y="117" width="0.4119%" height="15" fill="rgb(226,81,46)"/><text x="76.8277%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,973,534 samples, 4.85%)</title><rect x="72.1429%" y="133" width="4.8496%" height="15" fill="rgb(247,70,30)"/><text x="72.3929%" y="143.50">check_..</text></g><g><title>predicates_of (188,071 samples, 0.10%)</title><rect x="78.7816%" y="101" width="0.1016%" height="15" fill="rgb(212,68,19)"/><text x="79.0316%" y="111.50"></text></g><g><title>evaluate_obligation (957,201 samples, 0.52%)</title><rect x="78.3719%" y="117" width="0.5173%" height="15" fill="rgb(240,187,13)"/><text x="78.6219%" y="127.50"></text></g><g><title>param_env (433,164 samples, 0.23%)</title><rect x="78.9316%" y="117" width="0.2341%" height="15" fill="rgb(223,113,26)"/><text x="79.1816%" y="127.50"></text></g><g><title>check_item_well_formed (4,313,718 samples, 2.33%)</title><rect x="76.9925%" y="133" width="2.3313%" height="15" fill="rgb(206,192,2)"/><text x="77.2425%" y="143.50">c..</text></g><g><title>param_env (463,909 samples, 0.25%)</title><rect x="80.7636%" y="117" width="0.2507%" height="15" fill="rgb(241,108,4)"/><text x="81.0136%" y="127.50"></text></g><g><title>analysis (149,354,656 samples, 80.72%)</title><rect x="0.3257%" y="181" width="80.7162%" height="15" fill="rgb(247,173,49)"/><text x="0.5757%" y="191.50">analysis</text></g><g><title>type_check_crate (91,192,117 samples, 49.28%)</title><rect x="31.7587%" y="165" width="49.2832%" height="15" fill="rgb(224,114,35)"/><text x="32.0087%" y="175.50">type_check_crate</text></g><g><title>wf_checking (16,925,318 samples, 9.15%)</title><rect x="71.8949%" y="149" width="9.1470%" height="15" fill="rgb(245,159,27)"/><text x="72.1449%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,179,315 samples, 1.72%)</title><rect x="79.3237%" y="133" width="1.7182%" height="15" fill="rgb(245,172,44)"/><text x="79.5737%" y="143.50"></text></g><g><title>codegen_crate (325,363 samples, 0.18%)</title><rect x="81.0459%" y="181" width="0.1758%" height="15" fill="rgb(236,23,11)"/><text x="81.2959%" y="191.50"></text></g><g><title>AST_validation (564,846 samples, 0.31%)</title><rect x="81.3074%" y="165" width="0.3053%" height="15" fill="rgb(205,117,38)"/><text x="81.5574%" y="175.50"></text></g><g><title>metadata_register_crate (5,613,823 samples, 3.03%)</title><rect x="87.2145%" y="133" width="3.0339%" height="15" fill="rgb(237,72,25)"/><text x="87.4645%" y="143.50">met..</text></g><g><title>macro_expand_crate (15,863,757 samples, 8.57%)</title><rect x="81.6960%" y="165" width="8.5733%" height="15" fill="rgb(244,70,9)"/><text x="81.9460%" y="175.50">macro_expand..</text></g><g><title>expand_crate (15,846,427 samples, 8.56%)</title><rect x="81.7054%" y="149" width="8.5639%" height="15" fill="rgb(217,125,39)"/><text x="81.9554%" y="159.50">expand_crate</text></g><g><title>finalize_macro_resolutions (198,392 samples, 0.11%)</title><rect x="90.3917%" y="149" width="0.1072%" height="15" fill="rgb(235,36,10)"/><text x="90.6417%" y="159.50"></text></g><g><title>late_resolve_crate (1,957,382 samples, 1.06%)</title><rect x="90.4989%" y="149" width="1.0578%" height="15" fill="rgb(251,123,47)"/><text x="90.7489%" y="159.50"></text></g><g><title>configure_and_expand (19,274,845 samples, 10.42%)</title><rect x="81.2217%" y="181" width="10.4168%" height="15" fill="rgb(221,13,13)"/><text x="81.4717%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (2,368,597 samples, 1.28%)</title><rect x="90.3584%" y="165" width="1.2801%" height="15" fill="rgb(238,131,9)"/><text x="90.6084%" y="175.50"></text></g><g><title>drop_ast (343,954 samples, 0.19%)</title><rect x="91.6385%" y="181" width="0.1859%" height="15" fill="rgb(211,50,8)"/><text x="91.8885%" y="191.50"></text></g><g><title>early_lint_checks (492,166 samples, 0.27%)</title><rect x="91.8337%" y="181" width="0.2660%" height="15" fill="rgb(245,182,24)"/><text x="92.0837%" y="191.50"></text></g><g><title>free_global_ctxt (2,839,042 samples, 1.53%)</title><rect x="92.0997%" y="181" width="1.5343%" height="15" fill="rgb(242,14,37)"/><text x="92.3497%" y="191.50"></text></g><g><title>generate_crate_metadata (2,110,203 samples, 1.14%)</title><rect x="93.6340%" y="181" width="1.1404%" height="15" fill="rgb(246,228,12)"/><text x="93.8840%" y="191.50"></text></g><g><title>hir_lowering (5,440,981 samples, 2.94%)</title><rect x="94.7744%" y="181" width="2.9405%" height="15" fill="rgb(213,55,15)"/><text x="95.0244%" y="191.50">hi..</text></g><g><title>parse_crate (2,325,656 samples, 1.26%)</title><rect x="97.7479%" y="181" width="1.2569%" height="15" fill="rgb(209,9,3)"/><text x="97.9979%" y="191.50"></text></g><g><title>prepare_outputs (204,102 samples, 0.11%)</title><rect x="99.0080%" y="181" width="0.1103%" height="15" fill="rgb(230,59,30)"/><text x="99.2580%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,120,423 samples, 0.61%)</title><rect x="99.1183%" y="181" width="0.6055%" height="15" fill="rgb(209,121,21)"/><text x="99.3683%" y="191.50"></text></g><g><title>all (185,036,764 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (185,036,764 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (415,415 samples, 0.22%)</title><rect x="99.7755%" y="181" width="0.2245%" height="15" fill="rgb(215,41,42)"/><text x="100.0255%" y="191.50"></text></g></svg></svg>