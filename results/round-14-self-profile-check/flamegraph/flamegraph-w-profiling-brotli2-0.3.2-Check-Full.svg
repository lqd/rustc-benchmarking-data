<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (376,016 samples, 0.22%)</title><rect x="11.5707%" y="101" width="0.2246%" height="15" fill="rgb(227,0,7)"/><text x="11.8207%" y="111.50"></text></g><g><title>item_attrs (242,862 samples, 0.15%)</title><rect x="12.2499%" y="69" width="0.1451%" height="15" fill="rgb(217,0,24)"/><text x="12.4999%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (234,412 samples, 0.14%)</title><rect x="12.2549%" y="53" width="0.1400%" height="15" fill="rgb(221,193,54)"/><text x="12.5049%" y="63.50"></text></g><g><title>codegen_fn_attrs (370,704 samples, 0.22%)</title><rect x="12.1834%" y="85" width="0.2214%" height="15" fill="rgb(248,212,6)"/><text x="12.4334%" y="95.50"></text></g><g><title>is_copy_raw (237,432 samples, 0.14%)</title><rect x="14.8281%" y="69" width="0.1418%" height="15" fill="rgb(208,68,35)"/><text x="15.0781%" y="79.50"></text></g><g><title>evaluate_obligation (198,022 samples, 0.12%)</title><rect x="14.8516%" y="53" width="0.1183%" height="15" fill="rgb(232,128,0)"/><text x="15.1016%" y="63.50"></text></g><g><title>needs_drop_raw (1,061,040 samples, 0.63%)</title><rect x="14.9712%" y="69" width="0.6338%" height="15" fill="rgb(207,160,47)"/><text x="15.2212%" y="79.50"></text></g><g><title>is_copy_raw (835,757 samples, 0.50%)</title><rect x="15.1058%" y="53" width="0.4992%" height="15" fill="rgb(228,23,34)"/><text x="15.3558%" y="63.50"></text></g><g><title>evaluate_obligation (691,646 samples, 0.41%)</title><rect x="15.1918%" y="37" width="0.4131%" height="15" fill="rgb(218,30,26)"/><text x="15.4418%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (192,172 samples, 0.11%)</title><rect x="15.7455%" y="53" width="0.1148%" height="15" fill="rgb(220,122,19)"/><text x="15.9955%" y="63.50"></text></g><g><title>resolve_instance (694,328 samples, 0.41%)</title><rect x="15.6050%" y="69" width="0.4147%" height="15" fill="rgb(250,228,42)"/><text x="15.8550%" y="79.50"></text></g><g><title>thir_body (1,668,851 samples, 1.00%)</title><rect x="16.0389%" y="69" width="0.9969%" height="15" fill="rgb(240,193,28)"/><text x="16.2889%" y="79.50"></text></g><g><title>mir_const (10,394,227 samples, 6.21%)</title><rect x="10.8404%" y="117" width="6.2088%" height="15" fill="rgb(216,20,37)"/><text x="11.0904%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (8,795,567 samples, 5.25%)</title><rect x="11.7954%" y="101" width="5.2539%" height="15" fill="rgb(206,188,39)"/><text x="12.0454%" y="111.50">unsafe..</text></g><g><title>mir_built (7,775,313 samples, 4.64%)</title><rect x="12.4048%" y="85" width="4.6445%" height="15" fill="rgb(217,207,13)"/><text x="12.6548%" y="95.50">mir_b..</text></g><g><title>mir_promoted (11,680,052 samples, 6.98%)</title><rect x="10.1293%" y="133" width="6.9769%" height="15" fill="rgb(231,73,38)"/><text x="10.3793%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (495,494 samples, 0.30%)</title><rect x="17.1062%" y="133" width="0.2960%" height="15" fill="rgb(225,20,46)"/><text x="17.3562%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (382,464 samples, 0.23%)</title><rect x="17.4022%" y="133" width="0.2285%" height="15" fill="rgb(210,31,41)"/><text x="17.6522%" y="143.50"></text></g><g><title>normalize_projection_ty (260,523 samples, 0.16%)</title><rect x="17.4750%" y="117" width="0.1556%" height="15" fill="rgb(221,200,47)"/><text x="17.7250%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,688,838 samples, 1.01%)</title><rect x="17.6306%" y="133" width="1.0088%" height="15" fill="rgb(226,26,5)"/><text x="17.8806%" y="143.50"></text></g><g><title>evaluate_obligation (198,332 samples, 0.12%)</title><rect x="18.5210%" y="117" width="0.1185%" height="15" fill="rgb(249,33,26)"/><text x="18.7710%" y="127.50"></text></g><g><title>MIR_borrow_checking (30,065,263 samples, 17.96%)</title><rect x="0.6867%" y="165" width="17.9591%" height="15" fill="rgb(235,183,28)"/><text x="0.9367%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (29,903,982 samples, 17.86%)</title><rect x="0.7830%" y="149" width="17.8627%" height="15" fill="rgb(221,5,38)"/><text x="1.0330%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (229,902 samples, 0.14%)</title><rect x="18.7148%" y="165" width="0.1373%" height="15" fill="rgb(247,18,42)"/><text x="18.9648%" y="175.50"></text></g><g><title>codegen_fn_attrs (276,444 samples, 0.17%)</title><rect x="19.1856%" y="101" width="0.1651%" height="15" fill="rgb(241,131,45)"/><text x="19.4356%" y="111.50"></text></g><g><title>codegen_fn_attrs (510,134 samples, 0.30%)</title><rect x="19.0518%" y="133" width="0.3047%" height="15" fill="rgb(249,31,29)"/><text x="19.3018%" y="143.50"></text></g><g><title>should_inherit_track_caller (438,064 samples, 0.26%)</title><rect x="19.0949%" y="117" width="0.2617%" height="15" fill="rgb(225,111,53)"/><text x="19.3449%" y="127.50"></text></g><g><title>check_mod_attrs (818,150 samples, 0.49%)</title><rect x="18.8680%" y="149" width="0.4887%" height="15" fill="rgb(238,160,17)"/><text x="19.1180%" y="159.50"></text></g><g><title>lint_levels (179,752 samples, 0.11%)</title><rect x="19.6442%" y="133" width="0.1074%" height="15" fill="rgb(214,148,48)"/><text x="19.8942%" y="143.50"></text></g><g><title>lookup_deprecation_entry (179,513 samples, 0.11%)</title><rect x="19.7516%" y="133" width="0.1072%" height="15" fill="rgb(232,36,49)"/><text x="20.0016%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (670,478 samples, 0.40%)</title><rect x="19.5137%" y="149" width="0.4005%" height="15" fill="rgb(209,103,24)"/><text x="19.7637%" y="159.50"></text></g><g><title>misc_checking_1 (1,839,490 samples, 1.10%)</title><rect x="18.8525%" y="165" width="1.0988%" height="15" fill="rgb(229,88,8)"/><text x="19.1025%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (597,796 samples, 0.36%)</title><rect x="19.9523%" y="149" width="0.3571%" height="15" fill="rgb(213,181,19)"/><text x="20.2023%" y="159.50"></text></g><g><title>check_mod_liveness (462,135 samples, 0.28%)</title><rect x="20.0333%" y="133" width="0.2761%" height="15" fill="rgb(254,191,54)"/><text x="20.2833%" y="143.50"></text></g><g><title>misc_checking_2 (1,417,965 samples, 0.85%)</title><rect x="19.9512%" y="165" width="0.8470%" height="15" fill="rgb(241,83,37)"/><text x="20.2012%" y="175.50"></text></g><g><title>match_checking (818,429 samples, 0.49%)</title><rect x="20.3094%" y="149" width="0.4889%" height="15" fill="rgb(233,36,39)"/><text x="20.5594%" y="159.50"></text></g><g><title>check_match (777,487 samples, 0.46%)</title><rect x="20.3338%" y="133" width="0.4644%" height="15" fill="rgb(226,3,54)"/><text x="20.5838%" y="143.50"></text></g><g><title>check_private_in_public (273,913 samples, 0.16%)</title><rect x="20.8047%" y="149" width="0.1636%" height="15" fill="rgb(245,192,40)"/><text x="21.0547%" y="159.50"></text></g><g><title>death_checking (586,647 samples, 0.35%)</title><rect x="20.9683%" y="149" width="0.3504%" height="15" fill="rgb(238,167,29)"/><text x="21.2183%" y="159.50"></text></g><g><title>explicit_predicates_of (280,712 samples, 0.17%)</title><rect x="22.0078%" y="69" width="0.1677%" height="15" fill="rgb(232,182,51)"/><text x="22.2578%" y="79.50"></text></g><g><title>param_env (463,234 samples, 0.28%)</title><rect x="21.9017%" y="117" width="0.2767%" height="15" fill="rgb(231,60,39)"/><text x="22.1517%" y="127.50"></text></g><g><title>predicates_of (330,933 samples, 0.20%)</title><rect x="21.9807%" y="101" width="0.1977%" height="15" fill="rgb(208,69,12)"/><text x="22.2307%" y="111.50"></text></g><g><title>predicates_defined_on (311,293 samples, 0.19%)</title><rect x="21.9925%" y="85" width="0.1859%" height="15" fill="rgb(235,93,37)"/><text x="22.2425%" y="95.50"></text></g><g><title>crate_lints (2,627,709 samples, 1.57%)</title><rect x="21.3198%" y="133" width="1.5696%" height="15" fill="rgb(213,116,39)"/><text x="21.5698%" y="143.50"></text></g><g><title>type_of (1,127,322 samples, 0.67%)</title><rect x="22.2161%" y="117" width="0.6734%" height="15" fill="rgb(222,207,29)"/><text x="22.4661%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (873,490 samples, 0.52%)</title><rect x="22.3677%" y="101" width="0.5218%" height="15" fill="rgb(206,96,30)"/><text x="22.6177%" y="111.50"></text></g><g><title>lint_checking (3,219,925 samples, 1.92%)</title><rect x="21.3188%" y="149" width="1.9234%" height="15" fill="rgb(218,138,4)"/><text x="21.5688%" y="159.50">l..</text></g><g><title>module_lints (590,446 samples, 0.35%)</title><rect x="22.8895%" y="133" width="0.3527%" height="15" fill="rgb(250,191,14)"/><text x="23.1395%" y="143.50"></text></g><g><title>lint_mod (584,466 samples, 0.35%)</title><rect x="22.8930%" y="117" width="0.3491%" height="15" fill="rgb(239,60,40)"/><text x="23.1430%" y="127.50"></text></g><g><title>privacy_access_levels (364,264 samples, 0.22%)</title><rect x="23.2422%" y="149" width="0.2176%" height="15" fill="rgb(206,27,48)"/><text x="23.4922%" y="159.50"></text></g><g><title>privacy_checking_modules (1,051,672 samples, 0.63%)</title><rect x="23.4597%" y="149" width="0.6282%" height="15" fill="rgb(225,35,8)"/><text x="23.7097%" y="159.50"></text></g><g><title>check_mod_privacy (1,046,742 samples, 0.63%)</title><rect x="23.4627%" y="133" width="0.6253%" height="15" fill="rgb(250,213,24)"/><text x="23.7127%" y="143.50"></text></g><g><title>misc_checking_3 (5,530,041 samples, 3.30%)</title><rect x="20.7982%" y="165" width="3.3033%" height="15" fill="rgb(247,123,22)"/><text x="21.0482%" y="175.50">mis..</text></g><g><title>adt_destructor (284,893 samples, 0.17%)</title><rect x="24.1900%" y="117" width="0.1702%" height="15" fill="rgb(231,138,38)"/><text x="24.4400%" y="127.50"></text></g><g><title>coherent_trait (281,593 samples, 0.17%)</title><rect x="24.1920%" y="101" width="0.1682%" height="15" fill="rgb(231,145,46)"/><text x="24.4420%" y="111.50"></text></g><g><title>specialization_graph_of (279,353 samples, 0.17%)</title><rect x="24.1933%" y="85" width="0.1669%" height="15" fill="rgb(251,118,11)"/><text x="24.4433%" y="95.50"></text></g><g><title>impl_parent (2,750,436 samples, 1.64%)</title><rect x="27.1649%" y="101" width="1.6429%" height="15" fill="rgb(217,147,25)"/><text x="27.4149%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,583,457 samples, 0.95%)</title><rect x="27.8620%" y="85" width="0.9459%" height="15" fill="rgb(247,81,37)"/><text x="28.1120%" y="95.50"></text></g><g><title>impl_trait_ref (5,826,199 samples, 3.48%)</title><rect x="28.8079%" y="101" width="3.4802%" height="15" fill="rgb(209,12,38)"/><text x="29.0579%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,703,265 samples, 2.81%)</title><rect x="29.4786%" y="85" width="2.8094%" height="15" fill="rgb(227,1,9)"/><text x="29.7286%" y="95.50">me..</text></g><g><title>trait_impls_of (1,002,061 samples, 0.60%)</title><rect x="32.3064%" y="101" width="0.5986%" height="15" fill="rgb(248,47,43)"/><text x="32.5564%" y="111.50"></text></g><g><title>implementations_of_trait (267,000 samples, 0.16%)</title><rect x="32.7454%" y="85" width="0.1595%" height="15" fill="rgb(221,10,30)"/><text x="32.9954%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (204,120 samples, 0.12%)</title><rect x="32.7830%" y="69" width="0.1219%" height="15" fill="rgb(210,229,1)"/><text x="33.0330%" y="79.50"></text></g><g><title>coherent_trait (14,630,232 samples, 8.74%)</title><rect x="24.1663%" y="133" width="8.7392%" height="15" fill="rgb(222,148,37)"/><text x="24.4163%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (14,274,178 samples, 8.53%)</title><rect x="24.3790%" y="117" width="8.5265%" height="15" fill="rgb(234,67,33)"/><text x="24.6290%" y="127.50">specializati..</text></g><g><title>coherence_checking (14,730,373 samples, 8.80%)</title><rect x="24.1515%" y="149" width="8.7990%" height="15" fill="rgb(247,98,35)"/><text x="24.4015%" y="159.50">coherence_ch..</text></g><g><title>associated_item (756,236 samples, 0.45%)</title><rect x="51.6190%" y="85" width="0.4517%" height="15" fill="rgb(247,138,52)"/><text x="51.8690%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (618,224 samples, 0.37%)</title><rect x="51.7014%" y="69" width="0.3693%" height="15" fill="rgb(213,79,30)"/><text x="51.9514%" y="79.50"></text></g><g><title>associated_items (1,019,271 samples, 0.61%)</title><rect x="51.4871%" y="101" width="0.6088%" height="15" fill="rgb(246,177,23)"/><text x="51.7371%" y="111.50"></text></g><g><title>dropck_outlives (577,105 samples, 0.34%)</title><rect x="52.1486%" y="101" width="0.3447%" height="15" fill="rgb(230,62,27)"/><text x="52.3986%" y="111.50"></text></g><g><title>adt_dtorck_constraint (313,084 samples, 0.19%)</title><rect x="52.3064%" y="85" width="0.1870%" height="15" fill="rgb(216,154,8)"/><text x="52.5564%" y="95.50"></text></g><g><title>predicates_of (240,356 samples, 0.14%)</title><rect x="53.7532%" y="85" width="0.1436%" height="15" fill="rgb(244,35,45)"/><text x="54.0032%" y="95.50"></text></g><g><title>specializes (217,383 samples, 0.13%)</title><rect x="53.8968%" y="85" width="0.1299%" height="15" fill="rgb(251,115,12)"/><text x="54.1468%" y="95.50"></text></g><g><title>trait_impls_of (319,702 samples, 0.19%)</title><rect x="54.0322%" y="85" width="0.1910%" height="15" fill="rgb(240,54,50)"/><text x="54.2822%" y="95.50"></text></g><g><title>evaluate_obligation (2,898,922 samples, 1.73%)</title><rect x="52.4934%" y="101" width="1.7316%" height="15" fill="rgb(233,84,52)"/><text x="52.7434%" y="111.50"></text></g><g><title>fn_sig (179,642 samples, 0.11%)</title><rect x="54.2464%" y="101" width="0.1073%" height="15" fill="rgb(207,117,47)"/><text x="54.4964%" y="111.50"></text></g><g><title>item_attrs (220,647 samples, 0.13%)</title><rect x="54.5225%" y="101" width="0.1318%" height="15" fill="rgb(249,43,39)"/><text x="54.7725%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (208,157 samples, 0.12%)</title><rect x="54.5300%" y="85" width="0.1243%" height="15" fill="rgb(209,38,44)"/><text x="54.7800%" y="95.50"></text></g><g><title>evaluate_obligation (196,270 samples, 0.12%)</title><rect x="54.8409%" y="85" width="0.1172%" height="15" fill="rgb(236,212,23)"/><text x="55.0909%" y="95.50"></text></g><g><title>method_autoderef_steps (431,294 samples, 0.26%)</title><rect x="54.7140%" y="101" width="0.2576%" height="15" fill="rgb(242,79,21)"/><text x="54.9640%" y="111.50"></text></g><g><title>predicates_of (399,491 samples, 0.24%)</title><rect x="55.1016%" y="101" width="0.2386%" height="15" fill="rgb(211,96,35)"/><text x="55.3516%" y="111.50"></text></g><g><title>predicates_defined_on (274,090 samples, 0.16%)</title><rect x="55.1765%" y="85" width="0.1637%" height="15" fill="rgb(253,215,40)"/><text x="55.4265%" y="95.50"></text></g><g><title>item_bodies_checking (37,639,896 samples, 22.48%)</title><rect x="32.9733%" y="149" width="22.4837%" height="15" fill="rgb(211,81,21)"/><text x="33.2233%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,636,726 samples, 22.48%)</title><rect x="32.9752%" y="133" width="22.4818%" height="15" fill="rgb(208,190,38)"/><text x="33.2252%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (37,522,496 samples, 22.41%)</title><rect x="33.0434%" y="117" width="22.4135%" height="15" fill="rgb(235,213,38)"/><text x="33.2934%" y="127.50">typeck</text></g><g><title>generics_of (214,550 samples, 0.13%)</title><rect x="56.5808%" y="85" width="0.1282%" height="15" fill="rgb(237,122,38)"/><text x="56.8308%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (170,490 samples, 0.10%)</title><rect x="56.6072%" y="69" width="0.1018%" height="15" fill="rgb(244,218,35)"/><text x="56.8572%" y="79.50"></text></g><g><title>impl_trait_ref (463,607 samples, 0.28%)</title><rect x="56.7229%" y="85" width="0.2769%" height="15" fill="rgb(240,68,47)"/><text x="56.9729%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (220,394 samples, 0.13%)</title><rect x="56.8682%" y="69" width="0.1316%" height="15" fill="rgb(210,16,53)"/><text x="57.1182%" y="79.50"></text></g><g><title>specializes (210,202 samples, 0.13%)</title><rect x="57.0476%" y="85" width="0.1256%" height="15" fill="rgb(235,124,12)"/><text x="57.2976%" y="95.50"></text></g><g><title>evaluate_obligation (1,509,416 samples, 0.90%)</title><rect x="56.3006%" y="101" width="0.9016%" height="15" fill="rgb(224,169,11)"/><text x="56.5506%" y="111.50"></text></g><g><title>impl_trait_ref (202,703 samples, 0.12%)</title><rect x="57.2061%" y="101" width="0.1211%" height="15" fill="rgb(250,166,2)"/><text x="57.4561%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (198,063 samples, 0.12%)</title><rect x="57.2089%" y="85" width="0.1183%" height="15" fill="rgb(242,216,29)"/><text x="57.4589%" y="95.50"></text></g><g><title>item_types_checking (3,152,675 samples, 1.88%)</title><rect x="55.4570%" y="149" width="1.8832%" height="15" fill="rgb(230,116,27)"/><text x="55.7070%" y="159.50">i..</text></g><g><title>check_mod_item_types (3,146,735 samples, 1.88%)</title><rect x="55.4605%" y="133" width="1.8797%" height="15" fill="rgb(228,99,48)"/><text x="55.7105%" y="143.50">c..</text></g><g><title>typeck (2,071,553 samples, 1.24%)</title><rect x="56.1028%" y="117" width="1.2374%" height="15" fill="rgb(253,11,6)"/><text x="56.3528%" y="127.50"></text></g><g><title>mir_const_qualif (290,354 samples, 0.17%)</title><rect x="57.7444%" y="69" width="0.1734%" height="15" fill="rgb(247,143,39)"/><text x="57.9944%" y="79.50"></text></g><g><title>mir_const (251,373 samples, 0.15%)</title><rect x="57.7677%" y="53" width="0.1502%" height="15" fill="rgb(236,97,10)"/><text x="58.0177%" y="63.50"></text></g><g><title>unsafety_check_result (173,432 samples, 0.10%)</title><rect x="57.8143%" y="37" width="0.1036%" height="15" fill="rgb(233,208,19)"/><text x="58.0643%" y="47.50"></text></g><g><title>mir_borrowck (786,528 samples, 0.47%)</title><rect x="58.1020%" y="37" width="0.4698%" height="15" fill="rgb(216,164,2)"/><text x="58.3520%" y="47.50"></text></g><g><title>mir_for_ctfe (1,097,542 samples, 0.66%)</title><rect x="57.9179%" y="69" width="0.6556%" height="15" fill="rgb(220,129,5)"/><text x="58.1679%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,018,101 samples, 0.61%)</title><rect x="57.9653%" y="53" width="0.6081%" height="15" fill="rgb(242,17,10)"/><text x="58.2153%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (222,282 samples, 0.13%)</title><rect x="58.5744%" y="69" width="0.1328%" height="15" fill="rgb(242,107,0)"/><text x="58.8244%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,454,628 samples, 1.47%)</title><rect x="57.6075%" y="117" width="1.4662%" height="15" fill="rgb(251,28,31)"/><text x="57.8575%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,435,547 samples, 1.45%)</title><rect x="57.6189%" y="101" width="1.4548%" height="15" fill="rgb(233,223,10)"/><text x="57.8689%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,428,077 samples, 1.45%)</title><rect x="57.6234%" y="85" width="1.4504%" height="15" fill="rgb(215,21,27)"/><text x="57.8734%" y="95.50"></text></g><g><title>typeck (613,676 samples, 0.37%)</title><rect x="58.7072%" y="69" width="0.3666%" height="15" fill="rgb(232,23,21)"/><text x="58.9572%" y="79.50"></text></g><g><title>fn_sig (349,624 samples, 0.21%)</title><rect x="59.0737%" y="117" width="0.2088%" height="15" fill="rgb(244,5,23)"/><text x="59.3237%" y="127.50"></text></g><g><title>named_region_map (222,033 samples, 0.13%)</title><rect x="59.3695%" y="101" width="0.1326%" height="15" fill="rgb(226,81,46)"/><text x="59.6195%" y="111.50"></text></g><g><title>resolve_lifetimes (196,873 samples, 0.12%)</title><rect x="59.3845%" y="85" width="0.1176%" height="15" fill="rgb(247,70,30)"/><text x="59.6345%" y="95.50"></text></g><g><title>generics_of (392,364 samples, 0.23%)</title><rect x="59.2826%" y="117" width="0.2344%" height="15" fill="rgb(212,68,19)"/><text x="59.5326%" y="127.50"></text></g><g><title>param_env (206,732 samples, 0.12%)</title><rect x="59.5666%" y="117" width="0.1235%" height="15" fill="rgb(240,187,13)"/><text x="59.8166%" y="127.50"></text></g><g><title>late_bound_vars_map (201,073 samples, 0.12%)</title><rect x="59.9081%" y="69" width="0.1201%" height="15" fill="rgb(223,113,26)"/><text x="60.1581%" y="79.50"></text></g><g><title>resolve_lifetimes (189,922 samples, 0.11%)</title><rect x="59.9147%" y="53" width="0.1134%" height="15" fill="rgb(206,192,2)"/><text x="60.1647%" y="63.50"></text></g><g><title>explicit_predicates_of (372,677 samples, 0.22%)</title><rect x="59.8144%" y="85" width="0.2226%" height="15" fill="rgb(241,108,4)"/><text x="60.0644%" y="95.50"></text></g><g><title>predicates_of (960,184 samples, 0.57%)</title><rect x="59.6901%" y="117" width="0.5736%" height="15" fill="rgb(247,173,49)"/><text x="59.9401%" y="127.50"></text></g><g><title>predicates_defined_on (880,243 samples, 0.53%)</title><rect x="59.7379%" y="101" width="0.5258%" height="15" fill="rgb(224,114,35)"/><text x="59.9879%" y="111.50"></text></g><g><title>inferred_outlives_of (379,383 samples, 0.23%)</title><rect x="60.0371%" y="85" width="0.2266%" height="15" fill="rgb(245,159,27)"/><text x="60.2871%" y="95.50"></text></g><g><title>inferred_outlives_crate (346,553 samples, 0.21%)</title><rect x="60.0567%" y="69" width="0.2070%" height="15" fill="rgb(245,172,44)"/><text x="60.3067%" y="79.50"></text></g><g><title>type_collecting (5,018,906 samples, 3.00%)</title><rect x="57.3420%" y="149" width="2.9980%" height="15" fill="rgb(236,23,11)"/><text x="57.5920%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (5,006,486 samples, 2.99%)</title><rect x="57.3494%" y="133" width="2.9906%" height="15" fill="rgb(205,117,38)"/><text x="57.5994%" y="143.50">col..</text></g><g><title>evaluate_obligation (540,596 samples, 0.32%)</title><rect x="61.9984%" y="117" width="0.3229%" height="15" fill="rgb(237,72,25)"/><text x="62.2484%" y="127.50"></text></g><g><title>implied_outlives_bounds (280,190 samples, 0.17%)</title><rect x="62.3213%" y="117" width="0.1674%" height="15" fill="rgb(244,70,9)"/><text x="62.5713%" y="127.50"></text></g><g><title>param_env (395,421 samples, 0.24%)</title><rect x="62.4887%" y="117" width="0.2362%" height="15" fill="rgb(217,125,39)"/><text x="62.7387%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,364,146 samples, 2.61%)</title><rect x="60.5103%" y="133" width="2.6069%" height="15" fill="rgb(235,36,10)"/><text x="60.7603%" y="143.50">ch..</text></g><g><title>region_scope_tree (645,137 samples, 0.39%)</title><rect x="62.7318%" y="117" width="0.3854%" height="15" fill="rgb(251,123,47)"/><text x="62.9818%" y="127.50"></text></g><g><title>evaluate_obligation (631,340 samples, 0.38%)</title><rect x="64.0596%" y="117" width="0.3771%" height="15" fill="rgb(221,13,13)"/><text x="64.3096%" y="127.50"></text></g><g><title>param_env (336,606 samples, 0.20%)</title><rect x="64.4865%" y="117" width="0.2011%" height="15" fill="rgb(238,131,9)"/><text x="64.7365%" y="127.50"></text></g><g><title>analysis (107,832,592 samples, 64.41%)</title><rect x="0.4558%" y="181" width="64.4123%" height="15" fill="rgb(211,50,8)"/><text x="0.7058%" y="191.50">analysis</text></g><g><title>type_check_crate (68,247,255 samples, 40.77%)</title><rect x="24.1015%" y="165" width="40.7666%" height="15" fill="rgb(245,182,24)"/><text x="24.3515%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,572,834 samples, 4.52%)</title><rect x="60.3446%" y="149" width="4.5235%" height="15" fill="rgb(242,14,37)"/><text x="60.5946%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (2,931,175 samples, 1.75%)</title><rect x="63.1172%" y="133" width="1.7509%" height="15" fill="rgb(246,228,12)"/><text x="63.3672%" y="143.50"></text></g><g><title>codegen_crate (394,144 samples, 0.24%)</title><rect x="64.8743%" y="181" width="0.2354%" height="15" fill="rgb(213,55,15)"/><text x="65.1243%" y="191.50"></text></g><g><title>AST_validation (285,153 samples, 0.17%)</title><rect x="65.2385%" y="165" width="0.1703%" height="15" fill="rgb(209,9,3)"/><text x="65.4885%" y="175.50"></text></g><g><title>complete_gated_feature_checking (184,342 samples, 0.11%)</title><rect x="65.4088%" y="165" width="0.1101%" height="15" fill="rgb(230,59,30)"/><text x="65.6588%" y="175.50"></text></g><g><title>metadata_load_macro (285,916 samples, 0.17%)</title><rect x="84.6766%" y="133" width="0.1708%" height="15" fill="rgb(209,121,21)"/><text x="84.9266%" y="143.50"></text></g><g><title>metadata_register_crate (2,438,657 samples, 1.46%)</title><rect x="84.8474%" y="133" width="1.4567%" height="15" fill="rgb(220,109,13)"/><text x="85.0974%" y="143.50"></text></g><g><title>metadata_register_crate (895,720 samples, 0.54%)</title><rect x="85.7690%" y="117" width="0.5350%" height="15" fill="rgb(232,18,1)"/><text x="86.0190%" y="127.50"></text></g><g><title>macro_expand_crate (35,244,089 samples, 21.05%)</title><rect x="65.5638%" y="165" width="21.0526%" height="15" fill="rgb(215,41,42)"/><text x="65.8138%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (35,220,159 samples, 21.04%)</title><rect x="65.5781%" y="149" width="21.0383%" height="15" fill="rgb(224,123,36)"/><text x="65.8281%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (522,766 samples, 0.31%)</title><rect x="86.3041%" y="133" width="0.3123%" height="15" fill="rgb(240,125,3)"/><text x="86.5541%" y="143.50"></text></g><g><title>finalize_macro_resolutions (441,435 samples, 0.26%)</title><rect x="86.7575%" y="149" width="0.2637%" height="15" fill="rgb(205,98,50)"/><text x="87.0075%" y="159.50"></text></g><g><title>late_resolve_crate (6,043,607 samples, 3.61%)</title><rect x="87.0212%" y="149" width="3.6101%" height="15" fill="rgb(205,185,37)"/><text x="87.2712%" y="159.50">late..</text></g><g><title>configure_and_expand (43,024,376 samples, 25.70%)</title><rect x="65.1097%" y="181" width="25.7000%" height="15" fill="rgb(238,207,15)"/><text x="65.3597%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,887,527 samples, 4.11%)</title><rect x="86.6955%" y="165" width="4.1142%" height="15" fill="rgb(213,199,42)"/><text x="86.9455%" y="175.50">reso..</text></g><g><title>drop_ast (220,972 samples, 0.13%)</title><rect x="90.8097%" y="181" width="0.1320%" height="15" fill="rgb(235,201,11)"/><text x="91.0597%" y="191.50"></text></g><g><title>early_lint_checks (529,896 samples, 0.32%)</title><rect x="90.9522%" y="181" width="0.3165%" height="15" fill="rgb(207,46,11)"/><text x="91.2022%" y="191.50"></text></g><g><title>free_global_ctxt (3,820,963 samples, 2.28%)</title><rect x="91.2688%" y="181" width="2.2824%" height="15" fill="rgb(241,35,35)"/><text x="91.5188%" y="191.50">f..</text></g><g><title>generate_crate_metadata (1,356,265 samples, 0.81%)</title><rect x="93.5512%" y="181" width="0.8101%" height="15" fill="rgb(243,32,47)"/><text x="93.8012%" y="191.50"></text></g><g><title>hir_lowering (6,785,206 samples, 4.05%)</title><rect x="94.3613%" y="181" width="4.0530%" height="15" fill="rgb(247,202,23)"/><text x="94.6113%" y="191.50">hir_..</text></g><g><title>parse_crate (960,581 samples, 0.57%)</title><rect x="98.4490%" y="181" width="0.5738%" height="15" fill="rgb(219,102,11)"/><text x="98.6990%" y="191.50"></text></g><g><title>prepare_outputs (301,383 samples, 0.18%)</title><rect x="99.0270%" y="181" width="0.1800%" height="15" fill="rgb(243,110,44)"/><text x="99.2770%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (897,120 samples, 0.54%)</title><rect x="99.2070%" y="181" width="0.5359%" height="15" fill="rgb(222,74,54)"/><text x="99.4570%" y="191.50"></text></g><g><title>all (167,409,881 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (167,409,881 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (342,024 samples, 0.20%)</title><rect x="99.7957%" y="181" width="0.2043%" height="15" fill="rgb(217,163,10)"/><text x="100.0457%" y="191.50"></text></g></svg></svg>