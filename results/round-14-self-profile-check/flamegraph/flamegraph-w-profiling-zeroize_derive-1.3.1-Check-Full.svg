<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (116,291 samples, 0.10%)</title><rect x="9.9285%" y="197" width="0.1047%" height="15" fill="rgb(227,0,7)"/><text x="10.1785%" y="207.50"></text></g><g><title>param_env (211,642 samples, 0.19%)</title><rect x="11.1124%" y="165" width="0.1906%" height="15" fill="rgb(217,0,24)"/><text x="11.3624%" y="175.50"></text></g><g><title>item_attrs (249,012 samples, 0.22%)</title><rect x="11.6518%" y="133" width="0.2242%" height="15" fill="rgb(221,193,54)"/><text x="11.9018%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (240,522 samples, 0.22%)</title><rect x="11.6594%" y="117" width="0.2166%" height="15" fill="rgb(248,212,6)"/><text x="11.9094%" y="127.50"></text></g><g><title>codegen_fn_attrs (354,312 samples, 0.32%)</title><rect x="11.5749%" y="149" width="0.3190%" height="15" fill="rgb(208,68,35)"/><text x="11.8249%" y="159.50"></text></g><g><title>param_env (117,343 samples, 0.11%)</title><rect x="14.2196%" y="101" width="0.1057%" height="15" fill="rgb(232,128,0)"/><text x="14.4696%" y="111.50"></text></g><g><title>adt_drop_tys (365,056 samples, 0.33%)</title><rect x="13.9974%" y="117" width="0.3287%" height="15" fill="rgb(207,160,47)"/><text x="14.2474%" y="127.50"></text></g><g><title>needs_drop_raw (996,501 samples, 0.90%)</title><rect x="13.9137%" y="133" width="0.8972%" height="15" fill="rgb(228,23,34)"/><text x="14.1637%" y="143.50"></text></g><g><title>is_copy_raw (538,485 samples, 0.48%)</title><rect x="14.3261%" y="117" width="0.4848%" height="15" fill="rgb(218,30,26)"/><text x="14.5761%" y="127.50"></text></g><g><title>evaluate_obligation (454,604 samples, 0.41%)</title><rect x="14.4016%" y="101" width="0.4093%" height="15" fill="rgb(220,122,19)"/><text x="14.6516%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (289,413 samples, 0.26%)</title><rect x="14.9276%" y="117" width="0.2606%" height="15" fill="rgb(250,228,42)"/><text x="15.1776%" y="127.50"></text></g><g><title>impl_parent (347,437 samples, 0.31%)</title><rect x="15.6915%" y="101" width="0.3128%" height="15" fill="rgb(240,193,28)"/><text x="15.9415%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (220,734 samples, 0.20%)</title><rect x="15.8055%" y="85" width="0.1987%" height="15" fill="rgb(216,20,37)"/><text x="16.0555%" y="95.50"></text></g><g><title>specialization_graph_of (1,562,298 samples, 1.41%)</title><rect x="15.2211%" y="117" width="1.4067%" height="15" fill="rgb(206,188,39)"/><text x="15.4711%" y="127.50"></text></g><g><title>impl_trait_ref (692,489 samples, 0.62%)</title><rect x="16.0043%" y="101" width="0.6235%" height="15" fill="rgb(217,207,13)"/><text x="16.2543%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (565,416 samples, 0.51%)</title><rect x="16.1187%" y="85" width="0.5091%" height="15" fill="rgb(231,73,38)"/><text x="16.3687%" y="95.50"></text></g><g><title>resolve_instance (2,077,816 samples, 1.87%)</title><rect x="14.8109%" y="133" width="1.8708%" height="15" fill="rgb(225,20,46)"/><text x="15.0609%" y="143.50">r..</text></g><g><title>thir_body (827,660 samples, 0.75%)</title><rect x="16.6970%" y="133" width="0.7452%" height="15" fill="rgb(210,31,41)"/><text x="16.9470%" y="143.50"></text></g><g><title>mir_const (7,583,905 samples, 6.83%)</title><rect x="10.6252%" y="181" width="6.8283%" height="15" fill="rgb(221,200,47)"/><text x="10.8752%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (6,831,127 samples, 6.15%)</title><rect x="11.3030%" y="165" width="6.1506%" height="15" fill="rgb(226,26,5)"/><text x="11.5530%" y="175.50">unsafety..</text></g><g><title>mir_built (6,174,823 samples, 5.56%)</title><rect x="11.8939%" y="149" width="5.5596%" height="15" fill="rgb(249,33,26)"/><text x="12.1439%" y="159.50">mir_bui..</text></g><g><title>has_structural_eq_impls (136,541 samples, 0.12%)</title><rect x="17.5446%" y="165" width="0.1229%" height="15" fill="rgb(235,183,28)"/><text x="17.7946%" y="175.50"></text></g><g><title>evaluate_obligation (127,221 samples, 0.11%)</title><rect x="17.5529%" y="149" width="0.1145%" height="15" fill="rgb(221,5,38)"/><text x="17.8029%" y="159.50"></text></g><g><title>trait_impls_of (115,951 samples, 0.10%)</title><rect x="17.5631%" y="133" width="0.1044%" height="15" fill="rgb(247,18,42)"/><text x="17.8131%" y="143.50"></text></g><g><title>is_freeze_raw (111,892 samples, 0.10%)</title><rect x="17.6683%" y="165" width="0.1007%" height="15" fill="rgb(241,131,45)"/><text x="17.9183%" y="175.50"></text></g><g><title>mir_const (230,333 samples, 0.21%)</title><rect x="17.7703%" y="165" width="0.2074%" height="15" fill="rgb(249,31,29)"/><text x="18.0203%" y="175.50"></text></g><g><title>unsafety_check_result (176,552 samples, 0.16%)</title><rect x="17.8187%" y="149" width="0.1590%" height="15" fill="rgb(225,111,53)"/><text x="18.0687%" y="159.50"></text></g><g><title>mir_built (134,722 samples, 0.12%)</title><rect x="17.8564%" y="133" width="0.1213%" height="15" fill="rgb(238,160,17)"/><text x="18.1064%" y="143.50"></text></g><g><title>mir_const_qualif (583,508 samples, 0.53%)</title><rect x="17.4536%" y="181" width="0.5254%" height="15" fill="rgb(214,148,48)"/><text x="17.7036%" y="191.50"></text></g><g><title>mir_promoted (8,796,041 samples, 7.92%)</title><rect x="10.0595%" y="197" width="7.9197%" height="15" fill="rgb(232,36,49)"/><text x="10.3095%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (226,221 samples, 0.20%)</title><rect x="17.9833%" y="197" width="0.2037%" height="15" fill="rgb(209,103,24)"/><text x="18.2333%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (621,308 samples, 0.56%)</title><rect x="18.1869%" y="197" width="0.5594%" height="15" fill="rgb(229,88,8)"/><text x="18.4369%" y="207.50"></text></g><g><title>normalize_projection_ty (424,955 samples, 0.38%)</title><rect x="18.3637%" y="181" width="0.3826%" height="15" fill="rgb(213,181,19)"/><text x="18.6137%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,830,422 samples, 1.65%)</title><rect x="18.7969%" y="197" width="1.6481%" height="15" fill="rgb(254,191,54)"/><text x="19.0469%" y="207.50"></text></g><g><title>evaluate_obligation (161,400 samples, 0.15%)</title><rect x="20.2996%" y="181" width="0.1453%" height="15" fill="rgb(241,83,37)"/><text x="20.5496%" y="191.50"></text></g><g><title>MIR_borrow_checking (21,841,446 samples, 19.67%)</title><rect x="0.7851%" y="229" width="19.6654%" height="15" fill="rgb(233,36,39)"/><text x="1.0351%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,789,785 samples, 19.62%)</title><rect x="0.8316%" y="213" width="19.6189%" height="15" fill="rgb(226,3,54)"/><text x="1.0816%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (136,272 samples, 0.12%)</title><rect x="20.4505%" y="229" width="0.1227%" height="15" fill="rgb(245,192,40)"/><text x="20.7005%" y="239.50"></text></g><g><title>codegen_fn_attrs (231,853 samples, 0.21%)</title><rect x="20.8190%" y="197" width="0.2088%" height="15" fill="rgb(238,167,29)"/><text x="21.0690%" y="207.50"></text></g><g><title>check_mod_attrs (376,684 samples, 0.34%)</title><rect x="20.6887%" y="213" width="0.3392%" height="15" fill="rgb(232,182,51)"/><text x="20.9387%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (211,443 samples, 0.19%)</title><rect x="21.1170%" y="213" width="0.1904%" height="15" fill="rgb(231,60,39)"/><text x="21.3670%" y="223.50"></text></g><g><title>misc_checking_1 (741,079 samples, 0.67%)</title><rect x="20.6727%" y="229" width="0.6672%" height="15" fill="rgb(208,69,12)"/><text x="20.9227%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (629,517 samples, 0.57%)</title><rect x="21.3414%" y="213" width="0.5668%" height="15" fill="rgb(235,93,37)"/><text x="21.5914%" y="223.50"></text></g><g><title>check_mod_liveness (560,626 samples, 0.50%)</title><rect x="21.4035%" y="197" width="0.5048%" height="15" fill="rgb(213,116,39)"/><text x="21.6535%" y="207.50"></text></g><g><title>type_uninhabited_from (305,844 samples, 0.28%)</title><rect x="21.6329%" y="181" width="0.2754%" height="15" fill="rgb(222,207,29)"/><text x="21.8829%" y="191.50"></text></g><g><title>type_uninhabited_from (277,524 samples, 0.25%)</title><rect x="21.6584%" y="165" width="0.2499%" height="15" fill="rgb(206,96,30)"/><text x="21.9084%" y="175.50"></text></g><g><title>type_uninhabited_from (254,564 samples, 0.23%)</title><rect x="21.6790%" y="149" width="0.2292%" height="15" fill="rgb(218,138,4)"/><text x="21.9290%" y="159.50"></text></g><g><title>type_uninhabited_from (233,543 samples, 0.21%)</title><rect x="21.6980%" y="133" width="0.2103%" height="15" fill="rgb(250,191,14)"/><text x="21.9480%" y="143.50"></text></g><g><title>misc_checking_2 (1,065,862 samples, 0.96%)</title><rect x="21.3400%" y="229" width="0.9597%" height="15" fill="rgb(239,60,40)"/><text x="21.5900%" y="239.50"></text></g><g><title>match_checking (434,715 samples, 0.39%)</title><rect x="21.9082%" y="213" width="0.3914%" height="15" fill="rgb(206,27,48)"/><text x="22.1582%" y="223.50"></text></g><g><title>check_match (419,495 samples, 0.38%)</title><rect x="21.9220%" y="197" width="0.3777%" height="15" fill="rgb(225,35,8)"/><text x="22.1720%" y="207.50"></text></g><g><title>death_checking (191,492 samples, 0.17%)</title><rect x="22.3894%" y="213" width="0.1724%" height="15" fill="rgb(250,213,24)"/><text x="22.6394%" y="223.50"></text></g><g><title>fn_abi_of_instance (117,651 samples, 0.11%)</title><rect x="22.9602%" y="85" width="0.1059%" height="15" fill="rgb(247,123,22)"/><text x="23.2102%" y="95.50"></text></g><g><title>mir_for_ctfe (403,525 samples, 0.36%)</title><rect x="23.1034%" y="85" width="0.3633%" height="15" fill="rgb(231,138,38)"/><text x="23.3534%" y="95.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (402,375 samples, 0.36%)</title><rect x="23.1044%" y="69" width="0.3623%" height="15" fill="rgb(231,145,46)"/><text x="23.3544%" y="79.50"></text></g><g><title>eval_to_const_value_raw (773,469 samples, 0.70%)</title><rect x="22.8261%" y="133" width="0.6964%" height="15" fill="rgb(251,118,11)"/><text x="23.0761%" y="143.50"></text></g><g><title>eval_to_const_value_raw (772,829 samples, 0.70%)</title><rect x="22.8267%" y="117" width="0.6958%" height="15" fill="rgb(217,147,25)"/><text x="23.0767%" y="127.50"></text></g><g><title>eval_to_allocation_raw (771,149 samples, 0.69%)</title><rect x="22.8282%" y="101" width="0.6943%" height="15" fill="rgb(247,81,37)"/><text x="23.0782%" y="111.50"></text></g><g><title>eval_to_allocation_raw (817,989 samples, 0.74%)</title><rect x="22.7870%" y="181" width="0.7365%" height="15" fill="rgb(209,12,38)"/><text x="23.0370%" y="191.50"></text></g><g><title>eval_to_allocation_raw (817,079 samples, 0.74%)</title><rect x="22.7878%" y="165" width="0.7357%" height="15" fill="rgb(227,1,9)"/><text x="23.0378%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (782,009 samples, 0.70%)</title><rect x="22.8194%" y="149" width="0.7041%" height="15" fill="rgb(248,47,43)"/><text x="23.0694%" y="159.50"></text></g><g><title>eval_to_const_value_raw (161,832 samples, 0.15%)</title><rect x="23.5235%" y="181" width="0.1457%" height="15" fill="rgb(221,10,30)"/><text x="23.7735%" y="191.50"></text></g><g><title>eval_to_const_value_raw (158,912 samples, 0.14%)</title><rect x="23.5262%" y="165" width="0.1431%" height="15" fill="rgb(210,229,1)"/><text x="23.7762%" y="175.50"></text></g><g><title>eval_to_allocation_raw (152,812 samples, 0.14%)</title><rect x="23.5316%" y="149" width="0.1376%" height="15" fill="rgb(222,148,37)"/><text x="23.7816%" y="159.50"></text></g><g><title>param_env (144,002 samples, 0.13%)</title><rect x="23.6692%" y="181" width="0.1297%" height="15" fill="rgb(234,67,33)"/><text x="23.9192%" y="191.50"></text></g><g><title>crate_lints (1,383,046 samples, 1.25%)</title><rect x="22.5634%" y="197" width="1.2453%" height="15" fill="rgb(247,98,35)"/><text x="22.8134%" y="207.50"></text></g><g><title>lint_checking (1,693,669 samples, 1.52%)</title><rect x="22.5618%" y="213" width="1.5249%" height="15" fill="rgb(247,138,52)"/><text x="22.8118%" y="223.50"></text></g><g><title>module_lints (308,833 samples, 0.28%)</title><rect x="23.8087%" y="197" width="0.2781%" height="15" fill="rgb(213,79,30)"/><text x="24.0587%" y="207.50"></text></g><g><title>lint_mod (306,303 samples, 0.28%)</title><rect x="23.8109%" y="181" width="0.2758%" height="15" fill="rgb(246,177,23)"/><text x="24.0609%" y="191.50"></text></g><g><title>privacy_checking_modules (557,336 samples, 0.50%)</title><rect x="24.1492%" y="213" width="0.5018%" height="15" fill="rgb(230,62,27)"/><text x="24.3992%" y="223.50"></text></g><g><title>check_mod_privacy (555,756 samples, 0.50%)</title><rect x="24.1506%" y="197" width="0.5004%" height="15" fill="rgb(216,154,8)"/><text x="24.4006%" y="207.50"></text></g><g><title>misc_checking_3 (2,627,749 samples, 2.37%)</title><rect x="22.2997%" y="229" width="2.3660%" height="15" fill="rgb(244,35,45)"/><text x="22.5497%" y="239.50">mi..</text></g><g><title>impl_parent (369,093 samples, 0.33%)</title><rect x="25.0898%" y="165" width="0.3323%" height="15" fill="rgb(251,115,12)"/><text x="25.3398%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (269,492 samples, 0.24%)</title><rect x="25.1795%" y="149" width="0.2426%" height="15" fill="rgb(240,54,50)"/><text x="25.4295%" y="159.50"></text></g><g><title>impl_trait_ref (860,862 samples, 0.78%)</title><rect x="25.4221%" y="165" width="0.7751%" height="15" fill="rgb(233,84,52)"/><text x="25.6721%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (761,279 samples, 0.69%)</title><rect x="25.5118%" y="149" width="0.6854%" height="15" fill="rgb(207,117,47)"/><text x="25.7618%" y="159.50"></text></g><g><title>coherent_trait (1,772,830 samples, 1.60%)</title><rect x="24.7107%" y="197" width="1.5962%" height="15" fill="rgb(249,43,39)"/><text x="24.9607%" y="207.50"></text></g><g><title>specialization_graph_of (1,766,370 samples, 1.59%)</title><rect x="24.7165%" y="181" width="1.5904%" height="15" fill="rgb(209,38,44)"/><text x="24.9665%" y="191.50"></text></g><g><title>trait_impls_of (121,801 samples, 0.11%)</title><rect x="26.1972%" y="165" width="0.1097%" height="15" fill="rgb(236,212,23)"/><text x="26.4472%" y="175.50"></text></g><g><title>coherence_checking (1,814,631 samples, 1.63%)</title><rect x="24.7010%" y="213" width="1.6338%" height="15" fill="rgb(242,79,21)"/><text x="24.9510%" y="223.50"></text></g><g><title>associated_item (254,423 samples, 0.23%)</title><rect x="34.2410%" y="149" width="0.2291%" height="15" fill="rgb(211,96,35)"/><text x="34.4910%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (195,203 samples, 0.18%)</title><rect x="34.2943%" y="133" width="0.1758%" height="15" fill="rgb(253,215,40)"/><text x="34.5443%" y="143.50"></text></g><g><title>associated_items (370,435 samples, 0.33%)</title><rect x="34.1522%" y="165" width="0.3335%" height="15" fill="rgb(211,81,21)"/><text x="34.4022%" y="175.50"></text></g><g><title>adt_def (176,572 samples, 0.16%)</title><rect x="35.0059%" y="133" width="0.1590%" height="15" fill="rgb(208,190,38)"/><text x="35.2559%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (170,132 samples, 0.15%)</title><rect x="35.0117%" y="117" width="0.1532%" height="15" fill="rgb(235,213,38)"/><text x="35.2617%" y="127.50"></text></g><g><title>adt_def (138,272 samples, 0.12%)</title><rect x="35.3022%" y="117" width="0.1245%" height="15" fill="rgb(237,122,38)"/><text x="35.5522%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (133,772 samples, 0.12%)</title><rect x="35.3063%" y="101" width="0.1204%" height="15" fill="rgb(244,218,35)"/><text x="35.5563%" y="111.50"></text></g><g><title>adt_def (121,251 samples, 0.11%)</title><rect x="35.5117%" y="101" width="0.1092%" height="15" fill="rgb(240,68,47)"/><text x="35.7617%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (117,371 samples, 0.11%)</title><rect x="35.5151%" y="85" width="0.1057%" height="15" fill="rgb(210,16,53)"/><text x="35.7651%" y="95.50"></text></g><g><title>adt_dtorck_constraint (221,572 samples, 0.20%)</title><rect x="36.2202%" y="37" width="0.1995%" height="15" fill="rgb(235,124,12)"/><text x="36.4702%" y="47.50"></text></g><g><title>adt_dtorck_constraint (334,113 samples, 0.30%)</title><rect x="36.1381%" y="53" width="0.3008%" height="15" fill="rgb(224,169,11)"/><text x="36.3881%" y="63.50"></text></g><g><title>adt_dtorck_constraint (514,774 samples, 0.46%)</title><rect x="36.0068%" y="69" width="0.4635%" height="15" fill="rgb(250,166,2)"/><text x="36.2568%" y="79.50"></text></g><g><title>adt_dtorck_constraint (722,179 samples, 0.65%)</title><rect x="35.8483%" y="85" width="0.6502%" height="15" fill="rgb(242,216,29)"/><text x="36.0983%" y="95.50"></text></g><g><title>adt_dtorck_constraint (970,850 samples, 0.87%)</title><rect x="35.6636%" y="101" width="0.8741%" height="15" fill="rgb(230,116,27)"/><text x="35.9136%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,251,463 samples, 1.13%)</title><rect x="35.4527%" y="117" width="1.1268%" height="15" fill="rgb(228,99,48)"/><text x="35.7027%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,575,200 samples, 1.42%)</title><rect x="35.2137%" y="133" width="1.4183%" height="15" fill="rgb(253,11,6)"/><text x="35.4637%" y="143.50"></text></g><g><title>dropck_outlives (2,441,808 samples, 2.20%)</title><rect x="34.5175%" y="165" width="2.1985%" height="15" fill="rgb(247,143,39)"/><text x="34.7675%" y="175.50">d..</text></g><g><title>adt_dtorck_constraint (2,037,335 samples, 1.83%)</title><rect x="34.8817%" y="149" width="1.8344%" height="15" fill="rgb(236,97,10)"/><text x="35.1317%" y="159.50">a..</text></g><g><title>adt_sized_constraint (133,101 samples, 0.12%)</title><rect x="37.0006%" y="149" width="0.1198%" height="15" fill="rgb(233,208,19)"/><text x="37.2506%" y="159.50"></text></g><g><title>evaluate_obligation (820,608 samples, 0.74%)</title><rect x="36.7160%" y="165" width="0.7389%" height="15" fill="rgb(216,164,2)"/><text x="36.9660%" y="175.50"></text></g><g><title>trait_impls_of (255,293 samples, 0.23%)</title><rect x="37.2250%" y="149" width="0.2299%" height="15" fill="rgb(220,129,5)"/><text x="37.4750%" y="159.50"></text></g><g><title>evaluate_obligation (161,931 samples, 0.15%)</title><rect x="37.9302%" y="149" width="0.1458%" height="15" fill="rgb(242,17,10)"/><text x="38.1802%" y="159.50"></text></g><g><title>method_autoderef_steps (272,534 samples, 0.25%)</title><rect x="37.8399%" y="165" width="0.2454%" height="15" fill="rgb(242,107,0)"/><text x="38.0899%" y="175.50"></text></g><g><title>explicit_predicates_of (125,981 samples, 0.11%)</title><rect x="38.2778%" y="133" width="0.1134%" height="15" fill="rgb(251,28,31)"/><text x="38.5278%" y="143.50"></text></g><g><title>predicates_of (362,984 samples, 0.33%)</title><rect x="38.1010%" y="165" width="0.3268%" height="15" fill="rgb(233,223,10)"/><text x="38.3510%" y="175.50"></text></g><g><title>predicates_defined_on (243,132 samples, 0.22%)</title><rect x="38.2089%" y="149" width="0.2189%" height="15" fill="rgb(215,21,27)"/><text x="38.4589%" y="159.50"></text></g><g><title>associated_item (215,812 samples, 0.19%)</title><rect x="46.8451%" y="133" width="0.1943%" height="15" fill="rgb(232,23,21)"/><text x="47.0951%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (166,311 samples, 0.15%)</title><rect x="46.8897%" y="117" width="0.1497%" height="15" fill="rgb(244,5,23)"/><text x="47.1397%" y="127.50"></text></g><g><title>associated_items (318,554 samples, 0.29%)</title><rect x="46.7654%" y="149" width="0.2868%" height="15" fill="rgb(226,81,46)"/><text x="47.0154%" y="159.50"></text></g><g><title>dropck_outlives (335,576 samples, 0.30%)</title><rect x="47.1009%" y="149" width="0.3021%" height="15" fill="rgb(247,70,30)"/><text x="47.3509%" y="159.50"></text></g><g><title>evaluate_obligation (1,368,276 samples, 1.23%)</title><rect x="47.4030%" y="149" width="1.2320%" height="15" fill="rgb(212,68,19)"/><text x="47.6530%" y="159.50"></text></g><g><title>trait_impls_of (620,527 samples, 0.56%)</title><rect x="48.0763%" y="133" width="0.5587%" height="15" fill="rgb(240,187,13)"/><text x="48.3263%" y="143.50"></text></g><g><title>implementations_of_trait (128,301 samples, 0.12%)</title><rect x="48.5195%" y="117" width="0.1155%" height="15" fill="rgb(223,113,26)"/><text x="48.7695%" y="127.50"></text></g><g><title>generics_of (125,642 samples, 0.11%)</title><rect x="48.7269%" y="149" width="0.1131%" height="15" fill="rgb(206,192,2)"/><text x="48.9769%" y="159.50"></text></g><g><title>is_copy_raw (405,836 samples, 0.37%)</title><rect x="49.0232%" y="149" width="0.3654%" height="15" fill="rgb(241,108,4)"/><text x="49.2732%" y="159.50"></text></g><g><title>evaluate_obligation (360,426 samples, 0.32%)</title><rect x="49.0641%" y="133" width="0.3245%" height="15" fill="rgb(247,173,49)"/><text x="49.3141%" y="143.50"></text></g><g><title>trait_impls_of (174,412 samples, 0.16%)</title><rect x="49.2316%" y="117" width="0.1570%" height="15" fill="rgb(224,114,35)"/><text x="49.4816%" y="127.50"></text></g><g><title>lint_levels (134,941 samples, 0.12%)</title><rect x="49.4176%" y="149" width="0.1215%" height="15" fill="rgb(245,159,27)"/><text x="49.6676%" y="159.50"></text></g><g><title>method_autoderef_steps (185,493 samples, 0.17%)</title><rect x="49.5611%" y="149" width="0.1670%" height="15" fill="rgb(245,172,44)"/><text x="49.8111%" y="159.50"></text></g><g><title>explicit_predicates_of (124,810 samples, 0.11%)</title><rect x="49.8647%" y="117" width="0.1124%" height="15" fill="rgb(236,23,11)"/><text x="50.1147%" y="127.50"></text></g><g><title>predicates_of (302,816 samples, 0.27%)</title><rect x="49.7352%" y="149" width="0.2726%" height="15" fill="rgb(205,117,38)"/><text x="49.9852%" y="159.50"></text></g><g><title>predicates_defined_on (212,632 samples, 0.19%)</title><rect x="49.8164%" y="133" width="0.1914%" height="15" fill="rgb(237,72,25)"/><text x="50.0664%" y="143.50"></text></g><g><title>trait_impls_of (155,672 samples, 0.14%)</title><rect x="50.0725%" y="149" width="0.1402%" height="15" fill="rgb(244,70,9)"/><text x="50.3225%" y="159.50"></text></g><g><title>typeck (13,081,127 samples, 11.78%)</title><rect x="38.5198%" y="165" width="11.7779%" height="15" fill="rgb(217,125,39)"/><text x="38.7698%" y="175.50">typeck</text></g><g><title>item_bodies_checking (26,656,429 samples, 24.00%)</title><rect x="26.3461%" y="213" width="24.0007%" height="15" fill="rgb(235,36,10)"/><text x="26.5961%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (26,653,889 samples, 24.00%)</title><rect x="26.3484%" y="197" width="23.9984%" height="15" fill="rgb(251,123,47)"/><text x="26.5984%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (26,630,199 samples, 23.98%)</title><rect x="26.3697%" y="181" width="23.9771%" height="15" fill="rgb(221,13,13)"/><text x="26.6197%" y="191.50">typeck</text></g><g><title>impl_trait_ref (200,491 samples, 0.18%)</title><rect x="50.5910%" y="133" width="0.1805%" height="15" fill="rgb(238,131,9)"/><text x="50.8410%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (178,671 samples, 0.16%)</title><rect x="50.6107%" y="117" width="0.1609%" height="15" fill="rgb(211,50,8)"/><text x="50.8607%" y="127.50"></text></g><g><title>adt_destructor (386,944 samples, 0.35%)</title><rect x="50.4533%" y="181" width="0.3484%" height="15" fill="rgb(245,182,24)"/><text x="50.7033%" y="191.50"></text></g><g><title>coherent_trait (384,264 samples, 0.35%)</title><rect x="50.4557%" y="165" width="0.3460%" height="15" fill="rgb(242,14,37)"/><text x="50.7057%" y="175.50"></text></g><g><title>specialization_graph_of (382,734 samples, 0.34%)</title><rect x="50.4571%" y="149" width="0.3446%" height="15" fill="rgb(246,228,12)"/><text x="50.7071%" y="159.50"></text></g><g><title>typeck (671,687 samples, 0.60%)</title><rect x="50.8626%" y="181" width="0.6048%" height="15" fill="rgb(213,55,15)"/><text x="51.1126%" y="191.50"></text></g><g><title>item_types_checking (1,245,844 samples, 1.12%)</title><rect x="50.3468%" y="213" width="1.1217%" height="15" fill="rgb(209,9,3)"/><text x="50.5968%" y="223.50"></text></g><g><title>check_mod_item_types (1,243,684 samples, 1.12%)</title><rect x="50.3488%" y="197" width="1.1198%" height="15" fill="rgb(230,59,30)"/><text x="50.5988%" y="207.50"></text></g><g><title>fn_sig (191,823 samples, 0.17%)</title><rect x="51.5688%" y="181" width="0.1727%" height="15" fill="rgb(209,121,21)"/><text x="51.8188%" y="191.50"></text></g><g><title>named_region_map (118,751 samples, 0.11%)</title><rect x="51.7848%" y="165" width="0.1069%" height="15" fill="rgb(220,109,13)"/><text x="52.0348%" y="175.50"></text></g><g><title>resolve_lifetimes (113,021 samples, 0.10%)</title><rect x="51.7900%" y="149" width="0.1018%" height="15" fill="rgb(232,18,1)"/><text x="52.0400%" y="159.50"></text></g><g><title>generics_of (177,631 samples, 0.16%)</title><rect x="51.7416%" y="181" width="0.1599%" height="15" fill="rgb(215,41,42)"/><text x="51.9916%" y="191.50"></text></g><g><title>predicates_of (180,454 samples, 0.16%)</title><rect x="51.9114%" y="181" width="0.1625%" height="15" fill="rgb(224,123,36)"/><text x="52.1614%" y="191.50"></text></g><g><title>predicates_defined_on (166,374 samples, 0.15%)</title><rect x="51.9241%" y="165" width="0.1498%" height="15" fill="rgb(240,125,3)"/><text x="52.1741%" y="175.50"></text></g><g><title>type_collecting (735,248 samples, 0.66%)</title><rect x="51.4709%" y="213" width="0.6620%" height="15" fill="rgb(205,98,50)"/><text x="51.7209%" y="223.50"></text></g><g><title>collect_mod_item_types (728,008 samples, 0.66%)</title><rect x="51.4774%" y="197" width="0.6555%" height="15" fill="rgb(205,185,37)"/><text x="51.7274%" y="207.50"></text></g><g><title>adt_def (212,113 samples, 0.19%)</title><rect x="52.4264%" y="133" width="0.1910%" height="15" fill="rgb(238,207,15)"/><text x="52.6764%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (211,853 samples, 0.19%)</title><rect x="52.4267%" y="117" width="0.1907%" height="15" fill="rgb(213,199,42)"/><text x="52.6767%" y="127.50"></text></g><g><title>item_attrs (209,293 samples, 0.19%)</title><rect x="52.4290%" y="101" width="0.1884%" height="15" fill="rgb(235,201,11)"/><text x="52.6790%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (208,983 samples, 0.19%)</title><rect x="52.4292%" y="85" width="0.1882%" height="15" fill="rgb(207,46,11)"/><text x="52.6792%" y="95.50"></text></g><g><title>adt_sized_constraint (213,833 samples, 0.19%)</title><rect x="52.4255%" y="149" width="0.1925%" height="15" fill="rgb(241,35,35)"/><text x="52.6755%" y="159.50"></text></g><g><title>adt_sized_constraint (233,543 samples, 0.21%)</title><rect x="52.4102%" y="165" width="0.2103%" height="15" fill="rgb(243,32,47)"/><text x="52.6602%" y="175.50"></text></g><g><title>evaluate_obligation (315,374 samples, 0.28%)</title><rect x="52.3718%" y="181" width="0.2840%" height="15" fill="rgb(247,202,23)"/><text x="52.6218%" y="191.50"></text></g><g><title>check_impl_item_well_formed (690,207 samples, 0.62%)</title><rect x="52.1967%" y="197" width="0.6214%" height="15" fill="rgb(219,102,11)"/><text x="52.4467%" y="207.50"></text></g><g><title>adt_def (184,442 samples, 0.17%)</title><rect x="53.7213%" y="69" width="0.1661%" height="15" fill="rgb(243,110,44)"/><text x="53.9713%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (175,662 samples, 0.16%)</title><rect x="53.7292%" y="53" width="0.1582%" height="15" fill="rgb(222,74,54)"/><text x="53.9792%" y="63.50"></text></g><g><title>item_attrs (116,011 samples, 0.10%)</title><rect x="53.7829%" y="37" width="0.1045%" height="15" fill="rgb(216,99,12)"/><text x="54.0329%" y="47.50"></text></g><g><title>adt_sized_constraint (155,151 samples, 0.14%)</title><rect x="53.8874%" y="69" width="0.1397%" height="15" fill="rgb(226,22,26)"/><text x="54.1374%" y="79.50"></text></g><g><title>adt_sized_constraint (386,184 samples, 0.35%)</title><rect x="53.6947%" y="85" width="0.3477%" height="15" fill="rgb(217,163,10)"/><text x="53.9447%" y="95.50"></text></g><g><title>adt_sized_constraint (536,816 samples, 0.48%)</title><rect x="53.5964%" y="101" width="0.4833%" height="15" fill="rgb(213,25,53)"/><text x="53.8464%" y="111.50"></text></g><g><title>adt_sized_constraint (637,987 samples, 0.57%)</title><rect x="53.5115%" y="117" width="0.5744%" height="15" fill="rgb(252,105,26)"/><text x="53.7615%" y="127.50"></text></g><g><title>adt_sized_constraint (680,377 samples, 0.61%)</title><rect x="53.4794%" y="133" width="0.6126%" height="15" fill="rgb(220,39,43)"/><text x="53.7294%" y="143.50"></text></g><g><title>adt_sized_constraint (728,668 samples, 0.66%)</title><rect x="53.4466%" y="149" width="0.6561%" height="15" fill="rgb(229,68,48)"/><text x="53.6966%" y="159.50"></text></g><g><title>adt_sized_constraint (834,069 samples, 0.75%)</title><rect x="53.3567%" y="165" width="0.7510%" height="15" fill="rgb(252,8,32)"/><text x="53.6067%" y="175.50"></text></g><g><title>evaluate_obligation (1,061,132 samples, 0.96%)</title><rect x="53.2083%" y="181" width="0.9554%" height="15" fill="rgb(223,20,43)"/><text x="53.4583%" y="191.50"></text></g><g><title>param_env (153,472 samples, 0.14%)</title><rect x="54.2328%" y="181" width="0.1382%" height="15" fill="rgb(229,81,49)"/><text x="54.4828%" y="191.50"></text></g><g><title>region_scope_tree (148,852 samples, 0.13%)</title><rect x="54.3950%" y="181" width="0.1340%" height="15" fill="rgb(236,28,36)"/><text x="54.6450%" y="191.50"></text></g><g><title>analysis (59,934,585 samples, 53.96%)</title><rect x="0.5861%" y="245" width="53.9635%" height="15" fill="rgb(249,185,26)"/><text x="0.8361%" y="255.50">analysis</text></g><g><title>type_check_crate (33,190,613 samples, 29.88%)</title><rect x="24.6656%" y="229" width="29.8839%" height="15" fill="rgb(249,174,33)"/><text x="24.9156%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,681,240 samples, 2.41%)</title><rect x="52.1354%" y="213" width="2.4141%" height="15" fill="rgb(233,201,37)"/><text x="52.3854%" y="223.50">wf..</text></g><g><title>check_item_well_formed (1,922,973 samples, 1.73%)</title><rect x="52.8181%" y="197" width="1.7314%" height="15" fill="rgb(221,78,26)"/><text x="53.0681%" y="207.50"></text></g><g><title>codegen_crate (559,886 samples, 0.50%)</title><rect x="54.5612%" y="245" width="0.5041%" height="15" fill="rgb(250,127,30)"/><text x="54.8112%" y="255.50"></text></g><g><title>metadata_load_macro (876,392 samples, 0.79%)</title><rect x="84.1174%" y="197" width="0.7891%" height="15" fill="rgb(230,49,44)"/><text x="84.3674%" y="207.50"></text></g><g><title>macro_expand_crate (35,755,773 samples, 32.19%)</title><rect x="55.4634%" y="229" width="32.1935%" height="15" fill="rgb(229,67,23)"/><text x="55.7134%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (35,736,963 samples, 32.18%)</title><rect x="55.4804%" y="213" width="32.1766%" height="15" fill="rgb(249,83,47)"/><text x="55.7304%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (3,054,775 samples, 2.75%)</title><rect x="84.9065%" y="197" width="2.7504%" height="15" fill="rgb(215,43,3)"/><text x="85.1565%" y="207.50">me..</text></g><g><title>metadata_register_crate (1,020,945 samples, 0.92%)</title><rect x="86.7377%" y="181" width="0.9192%" height="15" fill="rgb(238,154,13)"/><text x="86.9877%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (212,012 samples, 0.19%)</title><rect x="87.6579%" y="229" width="0.1909%" height="15" fill="rgb(219,56,2)"/><text x="87.9079%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (348,634 samples, 0.31%)</title><rect x="87.8488%" y="229" width="0.3139%" height="15" fill="rgb(233,0,4)"/><text x="88.0988%" y="239.50"></text></g><g><title>finalize_macro_resolutions (203,902 samples, 0.18%)</title><rect x="88.2102%" y="213" width="0.1836%" height="15" fill="rgb(235,30,7)"/><text x="88.4602%" y="223.50"></text></g><g><title>late_resolve_crate (1,622,278 samples, 1.46%)</title><rect x="88.3938%" y="213" width="1.4607%" height="15" fill="rgb(250,79,13)"/><text x="88.6438%" y="223.50"></text></g><g><title>configure_and_expand (38,714,196 samples, 34.86%)</title><rect x="55.0653%" y="245" width="34.8572%" height="15" fill="rgb(211,146,34)"/><text x="55.3153%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,954,502 samples, 1.76%)</title><rect x="88.1627%" y="229" width="1.7598%" height="15" fill="rgb(228,22,38)"/><text x="88.4127%" y="239.50"></text></g><g><title>drop_ast (145,231 samples, 0.13%)</title><rect x="89.9225%" y="245" width="0.1308%" height="15" fill="rgb(235,168,5)"/><text x="90.1725%" y="255.50"></text></g><g><title>early_lint_checks (278,604 samples, 0.25%)</title><rect x="90.0691%" y="245" width="0.2508%" height="15" fill="rgb(221,155,16)"/><text x="90.3191%" y="255.50"></text></g><g><title>free_global_ctxt (3,053,755 samples, 2.75%)</title><rect x="90.3200%" y="245" width="2.7495%" height="15" fill="rgb(215,215,53)"/><text x="90.5700%" y="255.50">fr..</text></g><g><title>generate_crate_metadata (188,573 samples, 0.17%)</title><rect x="93.0695%" y="245" width="0.1698%" height="15" fill="rgb(223,4,10)"/><text x="93.3195%" y="255.50"></text></g><g><title>hir_lowering (1,627,878 samples, 1.47%)</title><rect x="93.2393%" y="245" width="1.4657%" height="15" fill="rgb(234,103,6)"/><text x="93.4893%" y="255.50"></text></g><g><title>parse_crate (4,724,533 samples, 4.25%)</title><rect x="94.7510%" y="245" width="4.2538%" height="15" fill="rgb(227,97,0)"/><text x="95.0010%" y="255.50">parse..</text></g><g><title>prepare_outputs (174,252 samples, 0.16%)</title><rect x="99.0140%" y="245" width="0.1569%" height="15" fill="rgb(234,150,53)"/><text x="99.2640%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (542,006 samples, 0.49%)</title><rect x="99.1709%" y="245" width="0.4880%" height="15" fill="rgb(228,201,54)"/><text x="99.4209%" y="255.50"></text></g><g><title>all (111,065,091 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (111,065,091 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (293,503 samples, 0.26%)</title><rect x="99.7357%" y="245" width="0.2643%" height="15" fill="rgb(233,25,53)"/><text x="99.9857%" y="255.50"></text></g></svg></svg>