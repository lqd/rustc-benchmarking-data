<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>hir_module_items (104,911 samples, 0.46%)</title><rect x="3.4675%" y="181" width="0.4584%" height="15" fill="rgb(227,0,7)"/><text x="3.7175%" y="191.50"></text></g><g><title>hir_owner (32,571 samples, 0.14%)</title><rect x="3.7836%" y="165" width="0.1423%" height="15" fill="rgb(217,0,24)"/><text x="4.0336%" y="175.50"></text></g><g><title>get_lang_items (56,311 samples, 0.25%)</title><rect x="4.5872%" y="133" width="0.2461%" height="15" fill="rgb(221,193,54)"/><text x="4.8372%" y="143.50"></text></g><g><title>associated_item (34,930 samples, 0.15%)</title><rect x="4.9679%" y="117" width="0.1526%" height="15" fill="rgb(248,212,6)"/><text x="5.2179%" y="127.50"></text></g><g><title>should_inherit_track_caller (67,510 samples, 0.30%)</title><rect x="4.8333%" y="133" width="0.2950%" height="15" fill="rgb(208,68,35)"/><text x="5.0833%" y="143.50"></text></g><g><title>codegen_fn_attrs (216,143 samples, 0.94%)</title><rect x="4.3186%" y="149" width="0.9445%" height="15" fill="rgb(232,128,0)"/><text x="4.5686%" y="159.50"></text></g><g><title>supported_target_features (30,851 samples, 0.13%)</title><rect x="5.1283%" y="133" width="0.1348%" height="15" fill="rgb(207,160,47)"/><text x="5.3783%" y="143.50"></text></g><g><title>check_mod_attrs (278,863 samples, 1.22%)</title><rect x="4.0473%" y="165" width="1.2186%" height="15" fill="rgb(228,23,34)"/><text x="4.2973%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (90,511 samples, 0.40%)</title><rect x="5.3450%" y="165" width="0.3955%" height="15" fill="rgb(218,30,26)"/><text x="5.5950%" y="175.50"></text></g><g><title>looking_for_derive_registrar (39,921 samples, 0.17%)</title><rect x="5.7495%" y="165" width="0.1744%" height="15" fill="rgb(220,122,19)"/><text x="5.9995%" y="175.50"></text></g><g><title>misc_checking_1 (467,805 samples, 2.04%)</title><rect x="3.9293%" y="181" width="2.0442%" height="15" fill="rgb(250,228,42)"/><text x="4.1793%" y="191.50">m..</text></g><g><title>check_private_in_public (37,090 samples, 0.16%)</title><rect x="6.0912%" y="165" width="0.1621%" height="15" fill="rgb(240,193,28)"/><text x="6.3412%" y="175.50"></text></g><g><title>death_checking (111,221 samples, 0.49%)</title><rect x="6.2533%" y="165" width="0.4860%" height="15" fill="rgb(216,20,37)"/><text x="6.5033%" y="175.50"></text></g><g><title>lint_levels (40,701 samples, 0.18%)</title><rect x="6.5615%" y="149" width="0.1779%" height="15" fill="rgb(206,188,39)"/><text x="6.8115%" y="159.50"></text></g><g><title>crate_lints (126,961 samples, 0.55%)</title><rect x="6.7516%" y="149" width="0.5548%" height="15" fill="rgb(217,207,13)"/><text x="7.0016%" y="159.50"></text></g><g><title>param_env (87,341 samples, 0.38%)</title><rect x="6.9248%" y="133" width="0.3817%" height="15" fill="rgb(231,73,38)"/><text x="7.1748%" y="143.50"></text></g><g><title>predicates_of (43,291 samples, 0.19%)</title><rect x="7.1173%" y="117" width="0.1892%" height="15" fill="rgb(225,20,46)"/><text x="7.3673%" y="127.50"></text></g><g><title>predicates_defined_on (37,171 samples, 0.16%)</title><rect x="7.1440%" y="101" width="0.1624%" height="15" fill="rgb(210,31,41)"/><text x="7.3940%" y="111.50"></text></g><g><title>lint_checking (158,971 samples, 0.69%)</title><rect x="6.7393%" y="165" width="0.6947%" height="15" fill="rgb(221,200,47)"/><text x="6.9893%" y="175.50"></text></g><g><title>module_lints (29,190 samples, 0.13%)</title><rect x="7.3064%" y="149" width="0.1276%" height="15" fill="rgb(226,26,5)"/><text x="7.5564%" y="159.50"></text></g><g><title>lint_mod (25,750 samples, 0.11%)</title><rect x="7.3215%" y="133" width="0.1125%" height="15" fill="rgb(249,33,26)"/><text x="7.5715%" y="143.50"></text></g><g><title>privacy_access_levels (57,061 samples, 0.25%)</title><rect x="7.4340%" y="165" width="0.2493%" height="15" fill="rgb(235,183,28)"/><text x="7.6840%" y="175.50"></text></g><g><title>privacy_checking_modules (42,701 samples, 0.19%)</title><rect x="7.6833%" y="165" width="0.1866%" height="15" fill="rgb(221,5,38)"/><text x="7.9333%" y="175.50"></text></g><g><title>check_mod_privacy (40,571 samples, 0.18%)</title><rect x="7.6926%" y="149" width="0.1773%" height="15" fill="rgb(247,18,42)"/><text x="7.9426%" y="159.50"></text></g><g><title>misc_checking_3 (435,695 samples, 1.90%)</title><rect x="6.0460%" y="181" width="1.9039%" height="15" fill="rgb(241,131,45)"/><text x="6.2960%" y="191.50">m..</text></g><g><title>coherence_checking (25,011 samples, 0.11%)</title><rect x="8.0481%" y="165" width="0.1093%" height="15" fill="rgb(249,31,29)"/><text x="8.2981%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (31,170 samples, 0.14%)</title><rect x="8.9060%" y="117" width="0.1362%" height="15" fill="rgb(225,111,53)"/><text x="9.1560%" y="127.50"></text></g><g><title>fn_sig (116,681 samples, 0.51%)</title><rect x="8.5695%" y="133" width="0.5099%" height="15" fill="rgb(238,160,17)"/><text x="8.8195%" y="143.50"></text></g><g><title>generics_of (52,920 samples, 0.23%)</title><rect x="9.0793%" y="133" width="0.2312%" height="15" fill="rgb(214,148,48)"/><text x="9.3293%" y="143.50"></text></g><g><title>associated_item (134,242 samples, 0.59%)</title><rect x="10.6403%" y="53" width="0.5866%" height="15" fill="rgb(232,36,49)"/><text x="10.8903%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (99,371 samples, 0.43%)</title><rect x="10.7927%" y="37" width="0.4342%" height="15" fill="rgb(209,103,24)"/><text x="11.0427%" y="47.50"></text></g><g><title>associated_items (195,362 samples, 0.85%)</title><rect x="10.3877%" y="69" width="0.8537%" height="15" fill="rgb(229,88,8)"/><text x="10.6377%" y="79.50"></text></g><g><title>late_bound_vars_map (257,733 samples, 1.13%)</title><rect x="10.1357%" y="101" width="1.1262%" height="15" fill="rgb(213,181,19)"/><text x="10.3857%" y="111.50"></text></g><g><title>resolve_lifetimes (248,963 samples, 1.09%)</title><rect x="10.1741%" y="85" width="1.0879%" height="15" fill="rgb(254,191,54)"/><text x="10.4241%" y="95.50"></text></g><g><title>explicit_item_bounds (353,524 samples, 1.54%)</title><rect x="9.7684%" y="117" width="1.5448%" height="15" fill="rgb(241,83,37)"/><text x="10.0184%" y="127.50"></text></g><g><title>item_bounds (487,945 samples, 2.13%)</title><rect x="9.3106%" y="133" width="2.1322%" height="15" fill="rgb(233,36,39)"/><text x="9.5606%" y="143.50">i..</text></g><g><title>super_predicates_of (29,650 samples, 0.13%)</title><rect x="11.3132%" y="117" width="0.1296%" height="15" fill="rgb(226,3,54)"/><text x="11.5632%" y="127.50"></text></g><g><title>metadata_decode_entry_super_predicates_of (26,840 samples, 0.12%)</title><rect x="11.3255%" y="101" width="0.1173%" height="15" fill="rgb(245,192,40)"/><text x="11.5755%" y="111.50"></text></g><g><title>explicit_predicates_of (35,680 samples, 0.16%)</title><rect x="11.5277%" y="101" width="0.1559%" height="15" fill="rgb(238,167,29)"/><text x="11.7777%" y="111.50"></text></g><g><title>predicates_of (63,681 samples, 0.28%)</title><rect x="11.4428%" y="133" width="0.2783%" height="15" fill="rgb(232,182,51)"/><text x="11.6928%" y="143.50"></text></g><g><title>predicates_defined_on (55,911 samples, 0.24%)</title><rect x="11.4767%" y="117" width="0.2443%" height="15" fill="rgb(231,60,39)"/><text x="11.7267%" y="127.50"></text></g><g><title>late_bound_vars_map (33,070 samples, 0.14%)</title><rect x="12.2356%" y="101" width="0.1445%" height="15" fill="rgb(208,69,12)"/><text x="12.4856%" y="111.50"></text></g><g><title>resolve_lifetimes_trait_definition (27,680 samples, 0.12%)</title><rect x="12.2592%" y="85" width="0.1210%" height="15" fill="rgb(235,93,37)"/><text x="12.5092%" y="95.50"></text></g><g><title>super_predicates_of (166,352 samples, 0.73%)</title><rect x="11.7210%" y="133" width="0.7269%" height="15" fill="rgb(213,116,39)"/><text x="11.9710%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (152,082 samples, 0.66%)</title><rect x="11.7834%" y="117" width="0.6646%" height="15" fill="rgb(222,207,29)"/><text x="12.0334%" y="127.50"></text></g><g><title>type_collecting (975,541 samples, 4.26%)</title><rect x="8.2440%" y="165" width="4.2628%" height="15" fill="rgb(206,96,30)"/><text x="8.4940%" y="175.50">type_..</text></g><g><title>collect_mod_item_types (964,001 samples, 4.21%)</title><rect x="8.2944%" y="149" width="4.2124%" height="15" fill="rgb(218,138,4)"/><text x="8.5444%" y="159.50">colle..</text></g><g><title>param_env (169,802 samples, 0.74%)</title><rect x="13.8439%" y="133" width="0.7420%" height="15" fill="rgb(250,191,14)"/><text x="14.0939%" y="143.50"></text></g><g><title>check_item_well_formed (471,445 samples, 2.06%)</title><rect x="12.6452%" y="149" width="2.0601%" height="15" fill="rgb(239,60,40)"/><text x="12.8952%" y="159.50">c..</text></g><g><title>implied_outlives_bounds (93,381 samples, 0.41%)</title><rect x="16.2110%" y="133" width="0.4080%" height="15" fill="rgb(206,27,48)"/><text x="16.4610%" y="143.50"></text></g><g><title>param_env (47,150 samples, 0.21%)</title><rect x="16.6263%" y="133" width="0.2060%" height="15" fill="rgb(225,35,8)"/><text x="16.8763%" y="143.50"></text></g><g><title>predicates_of (34,090 samples, 0.15%)</title><rect x="16.8323%" y="133" width="0.1490%" height="15" fill="rgb(250,213,24)"/><text x="17.0823%" y="143.50"></text></g><g><title>predicates_defined_on (24,200 samples, 0.11%)</title><rect x="16.8755%" y="117" width="0.1057%" height="15" fill="rgb(247,123,22)"/><text x="17.1255%" y="127.50"></text></g><g><title>analysis (3,546,860 samples, 15.50%)</title><rect x="2.8256%" y="197" width="15.4988%" height="15" fill="rgb(231,138,38)"/><text x="3.0756%" y="207.50">analysis</text></g><g><title>type_check_crate (2,374,197 samples, 10.37%)</title><rect x="7.9498%" y="181" width="10.3746%" height="15" fill="rgb(231,145,46)"/><text x="8.1998%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,331,344 samples, 5.82%)</title><rect x="12.5068%" y="165" width="5.8176%" height="15" fill="rgb(251,118,11)"/><text x="12.7568%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (828,239 samples, 3.62%)</title><rect x="14.7052%" y="149" width="3.6192%" height="15" fill="rgb(217,147,25)"/><text x="14.9552%" y="159.50">chec..</text></g><g><title>trait_impls_of (304,853 samples, 1.33%)</title><rect x="16.9923%" y="133" width="1.3321%" height="15" fill="rgb(247,81,37)"/><text x="17.2423%" y="143.50"></text></g><g><title>implementations_of_trait (60,281 samples, 0.26%)</title><rect x="18.0610%" y="117" width="0.2634%" height="15" fill="rgb(209,12,38)"/><text x="18.3110%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (48,691 samples, 0.21%)</title><rect x="18.1117%" y="101" width="0.2128%" height="15" fill="rgb(227,1,9)"/><text x="18.3617%" y="111.50"></text></g><g><title>codegen_crate (468,635 samples, 2.05%)</title><rect x="18.3732%" y="197" width="2.0478%" height="15" fill="rgb(248,47,43)"/><text x="18.6232%" y="207.50">c..</text></g><g><title>AST_validation (103,721 samples, 0.45%)</title><rect x="21.4194%" y="181" width="0.4532%" height="15" fill="rgb(221,10,30)"/><text x="21.6694%" y="191.50"></text></g><g><title>crate_injection (105,851 samples, 0.46%)</title><rect x="21.9583%" y="181" width="0.4625%" height="15" fill="rgb(210,229,1)"/><text x="22.2083%" y="191.50"></text></g><g><title>metadata_load_macro (42,980 samples, 0.19%)</title><rect x="51.8714%" y="149" width="0.1878%" height="15" fill="rgb(222,148,37)"/><text x="52.1214%" y="159.50"></text></g><g><title>macro_expand_crate (12,777,223 samples, 55.83%)</title><rect x="22.4209%" y="181" width="55.8330%" height="15" fill="rgb(234,67,33)"/><text x="22.6709%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,752,133 samples, 55.72%)</title><rect x="22.5305%" y="165" width="55.7233%" height="15" fill="rgb(247,98,35)"/><text x="22.7805%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (5,994,566 samples, 26.19%)</title><rect x="52.0592%" y="149" width="26.1946%" height="15" fill="rgb(247,138,52)"/><text x="52.3092%" y="159.50">metadata_register_crate</text></g><g><title>pre_AST_expansion_lint_checks (92,491 samples, 0.40%)</title><rect x="78.2743%" y="181" width="0.4042%" height="15" fill="rgb(213,79,30)"/><text x="78.5243%" y="191.50"></text></g><g><title>finalize_imports (289,254 samples, 1.26%)</title><rect x="78.7189%" y="165" width="1.2640%" height="15" fill="rgb(246,177,23)"/><text x="78.9689%" y="175.50"></text></g><g><title>late_resolve_crate (331,004 samples, 1.45%)</title><rect x="80.0209%" y="165" width="1.4464%" height="15" fill="rgb(230,62,27)"/><text x="80.2709%" y="175.50"></text></g><g><title>configure_and_expand (14,011,506 samples, 61.23%)</title><rect x="20.4210%" y="197" width="61.2265%" height="15" fill="rgb(216,154,8)"/><text x="20.6710%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (679,438 samples, 2.97%)</title><rect x="78.6785%" y="181" width="2.9690%" height="15" fill="rgb(244,35,45)"/><text x="78.9285%" y="191.50">res..</text></g><g><title>drop_ast (31,591 samples, 0.14%)</title><rect x="81.6474%" y="197" width="0.1380%" height="15" fill="rgb(251,115,12)"/><text x="81.8974%" y="207.50"></text></g><g><title>drop_compiler (27,610 samples, 0.12%)</title><rect x="81.7855%" y="197" width="0.1206%" height="15" fill="rgb(240,54,50)"/><text x="82.0355%" y="207.50"></text></g><g><title>early_lint_checks (85,411 samples, 0.37%)</title><rect x="81.9061%" y="197" width="0.3732%" height="15" fill="rgb(233,84,52)"/><text x="82.1561%" y="207.50"></text></g><g><title>free_global_ctxt (1,160,483 samples, 5.07%)</title><rect x="82.2793%" y="197" width="5.0710%" height="15" fill="rgb(207,117,47)"/><text x="82.5293%" y="207.50">free_g..</text></g><g><title>crate_hash (139,211 samples, 0.61%)</title><rect x="88.8394%" y="181" width="0.6083%" height="15" fill="rgb(249,43,39)"/><text x="89.0894%" y="191.50"></text></g><g><title>mir_keys (48,351 samples, 0.21%)</title><rect x="89.5854%" y="181" width="0.2113%" height="15" fill="rgb(209,38,44)"/><text x="89.8354%" y="191.50"></text></g><g><title>variances_of (30,890 samples, 0.13%)</title><rect x="89.8369%" y="181" width="0.1350%" height="15" fill="rgb(236,212,23)"/><text x="90.0869%" y="191.50"></text></g><g><title>crate_variances (27,280 samples, 0.12%)</title><rect x="89.8527%" y="165" width="0.1192%" height="15" fill="rgb(242,79,21)"/><text x="90.1027%" y="175.50"></text></g><g><title>generate_crate_metadata (600,346 samples, 2.62%)</title><rect x="87.3503%" y="197" width="2.6233%" height="15" fill="rgb(211,96,35)"/><text x="87.6003%" y="207.50">ge..</text></g><g><title>hir_lowering (318,803 samples, 1.39%)</title><rect x="89.9737%" y="197" width="1.3931%" height="15" fill="rgb(253,215,40)"/><text x="90.2237%" y="207.50"></text></g><g><title>finish_ongoing_codegen (25,831 samples, 0.11%)</title><rect x="91.4364%" y="181" width="0.1129%" height="15" fill="rgb(211,81,21)"/><text x="91.6864%" y="191.50"></text></g><g><title>link (66,261 samples, 0.29%)</title><rect x="91.3668%" y="197" width="0.2895%" height="15" fill="rgb(208,190,38)"/><text x="91.6168%" y="207.50"></text></g><g><title>parse_crate (502,846 samples, 2.20%)</title><rect x="91.6563%" y="197" width="2.1973%" height="15" fill="rgb(235,213,38)"/><text x="91.9063%" y="207.50">p..</text></g><g><title>prepare_outputs (294,204 samples, 1.29%)</title><rect x="93.8965%" y="197" width="1.2856%" height="15" fill="rgb(237,122,38)"/><text x="94.1465%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (540,886 samples, 2.36%)</title><rect x="95.1821%" y="197" width="2.3635%" height="15" fill="rgb(244,218,35)"/><text x="95.4321%" y="207.50">se..</text></g><g><title>setup_global_ctxt (138,052 samples, 0.60%)</title><rect x="97.6234%" y="197" width="0.6032%" height="15" fill="rgb(240,68,47)"/><text x="97.8734%" y="207.50"></text></g><g><title>all (22,884,725 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (22,884,725 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (405,815 samples, 1.77%)</title><rect x="98.2267%" y="197" width="1.7733%" height="15" fill="rgb(224,169,11)"/><text x="98.4767%" y="207.50">w..</text></g></svg></svg>