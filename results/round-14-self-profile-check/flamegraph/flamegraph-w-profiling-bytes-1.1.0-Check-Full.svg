<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (460,200 samples, 0.11%)</title><rect x="15.0558%" y="229" width="0.1082%" height="15" fill="rgb(227,0,7)"/><text x="15.3058%" y="239.50"></text></g><g><title>param_env (928,617 samples, 0.22%)</title><rect x="17.3350%" y="197" width="0.2184%" height="15" fill="rgb(217,0,24)"/><text x="17.5850%" y="207.50"></text></g><g><title>item_attrs (854,675 samples, 0.20%)</title><rect x="18.2777%" y="165" width="0.2010%" height="15" fill="rgb(221,193,54)"/><text x="18.5277%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (830,815 samples, 0.20%)</title><rect x="18.2833%" y="149" width="0.1954%" height="15" fill="rgb(248,212,6)"/><text x="18.5333%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,240,918 samples, 0.29%)</title><rect x="18.1994%" y="181" width="0.2918%" height="15" fill="rgb(208,68,35)"/><text x="18.4494%" y="191.50"></text></g><g><title>is_copy_raw (805,171 samples, 0.19%)</title><rect x="21.9175%" y="165" width="0.1894%" height="15" fill="rgb(232,128,0)"/><text x="22.1675%" y="175.50"></text></g><g><title>evaluate_obligation (627,587 samples, 0.15%)</title><rect x="21.9593%" y="149" width="0.1476%" height="15" fill="rgb(207,160,47)"/><text x="22.2093%" y="159.50"></text></g><g><title>is_copy_raw (1,827,477 samples, 0.43%)</title><rect x="22.1998%" y="149" width="0.4298%" height="15" fill="rgb(228,23,34)"/><text x="22.4498%" y="159.50"></text></g><g><title>evaluate_obligation (1,464,235 samples, 0.34%)</title><rect x="22.2852%" y="133" width="0.3443%" height="15" fill="rgb(218,30,26)"/><text x="22.5352%" y="143.50"></text></g><g><title>needs_drop_raw (2,222,561 samples, 0.52%)</title><rect x="22.1073%" y="165" width="0.5227%" height="15" fill="rgb(220,122,19)"/><text x="22.3573%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (1,328,814 samples, 0.31%)</title><rect x="22.8837%" y="149" width="0.3125%" height="15" fill="rgb(250,228,42)"/><text x="23.1337%" y="159.50"></text></g><g><title>resolve_instance (2,951,516 samples, 0.69%)</title><rect x="22.6300%" y="165" width="0.6941%" height="15" fill="rgb(240,193,28)"/><text x="22.8800%" y="175.50"></text></g><g><title>thir_body (6,746,915 samples, 1.59%)</title><rect x="23.3641%" y="165" width="1.5867%" height="15" fill="rgb(216,20,37)"/><text x="23.6141%" y="175.50"></text></g><g><title>mir_const (37,138,638 samples, 8.73%)</title><rect x="16.2481%" y="213" width="8.7339%" height="15" fill="rgb(206,188,39)"/><text x="16.4981%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (31,588,253 samples, 7.43%)</title><rect x="17.5534%" y="197" width="7.4286%" height="15" fill="rgb(217,207,13)"/><text x="17.8034%" y="207.50">unsafety_c..</text></g><g><title>mir_built (27,600,044 samples, 6.49%)</title><rect x="18.4913%" y="181" width="6.4907%" height="15" fill="rgb(231,73,38)"/><text x="18.7413%" y="191.50">mir_built</text></g><g><title>mir_const (505,386 samples, 0.12%)</title><rect x="25.1303%" y="197" width="0.1189%" height="15" fill="rgb(225,20,46)"/><text x="25.3803%" y="207.50"></text></g><g><title>mir_const_qualif (1,335,387 samples, 0.31%)</title><rect x="24.9820%" y="213" width="0.3140%" height="15" fill="rgb(210,31,41)"/><text x="25.2320%" y="223.50"></text></g><g><title>mir_promoted (42,976,598 samples, 10.11%)</title><rect x="15.1893%" y="229" width="10.1068%" height="15" fill="rgb(221,200,47)"/><text x="15.4393%" y="239.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,193,681 samples, 0.28%)</title><rect x="25.2961%" y="229" width="0.2807%" height="15" fill="rgb(226,26,5)"/><text x="25.5461%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (1,396,334 samples, 0.33%)</title><rect x="25.5769%" y="229" width="0.3284%" height="15" fill="rgb(249,33,26)"/><text x="25.8269%" y="239.50"></text></g><g><title>normalize_projection_ty (806,286 samples, 0.19%)</title><rect x="25.7156%" y="213" width="0.1896%" height="15" fill="rgb(235,183,28)"/><text x="25.9656%" y="223.50"></text></g><g><title>type_op_prove_predicate (6,891,018 samples, 1.62%)</title><rect x="26.0066%" y="229" width="1.6206%" height="15" fill="rgb(221,5,38)"/><text x="26.2566%" y="239.50"></text></g><g><title>evaluate_obligation (473,009 samples, 0.11%)</title><rect x="27.5159%" y="213" width="0.1112%" height="15" fill="rgb(247,18,42)"/><text x="27.7659%" y="223.50"></text></g><g><title>MIR_borrow_checking (115,476,006 samples, 27.16%)</title><rect x="0.4743%" y="261" width="27.1565%" height="15" fill="rgb(241,131,45)"/><text x="0.7243%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (114,545,045 samples, 26.94%)</title><rect x="0.6932%" y="245" width="26.9375%" height="15" fill="rgb(249,31,29)"/><text x="0.9432%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (657,887 samples, 0.15%)</title><rect x="27.6308%" y="261" width="0.1547%" height="15" fill="rgb(225,111,53)"/><text x="27.8808%" y="271.50"></text></g><g><title>hir_module_items (893,580 samples, 0.21%)</title><rect x="27.7855%" y="261" width="0.2101%" height="15" fill="rgb(238,160,17)"/><text x="28.0355%" y="271.50"></text></g><g><title>should_inherit_track_caller (899,728 samples, 0.21%)</title><rect x="28.3553%" y="213" width="0.2116%" height="15" fill="rgb(214,148,48)"/><text x="28.6053%" y="223.50"></text></g><g><title>codegen_fn_attrs (1,454,192 samples, 0.34%)</title><rect x="28.2305%" y="229" width="0.3420%" height="15" fill="rgb(232,36,49)"/><text x="28.4805%" y="239.50"></text></g><g><title>check_mod_attrs (2,404,544 samples, 0.57%)</title><rect x="28.0071%" y="245" width="0.5655%" height="15" fill="rgb(209,103,24)"/><text x="28.2571%" y="255.50"></text></g><g><title>check_mod_const_bodies (623,866 samples, 0.15%)</title><rect x="28.5725%" y="245" width="0.1467%" height="15" fill="rgb(229,88,8)"/><text x="28.8225%" y="255.50"></text></g><g><title>lint_levels (512,756 samples, 0.12%)</title><rect x="28.9280%" y="229" width="0.1206%" height="15" fill="rgb(213,181,19)"/><text x="29.1780%" y="239.50"></text></g><g><title>lookup_deprecation_entry (425,785 samples, 0.10%)</title><rect x="29.0486%" y="229" width="0.1001%" height="15" fill="rgb(254,191,54)"/><text x="29.2986%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (1,732,480 samples, 0.41%)</title><rect x="28.7946%" y="245" width="0.4074%" height="15" fill="rgb(241,83,37)"/><text x="29.0446%" y="255.50"></text></g><g><title>misc_checking_1 (5,293,228 samples, 1.24%)</title><rect x="27.9958%" y="261" width="1.2448%" height="15" fill="rgb(233,36,39)"/><text x="28.2458%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (2,149,904 samples, 0.51%)</title><rect x="29.2410%" y="245" width="0.5056%" height="15" fill="rgb(226,3,54)"/><text x="29.4910%" y="255.50"></text></g><g><title>check_mod_liveness (1,737,390 samples, 0.41%)</title><rect x="29.3380%" y="229" width="0.4086%" height="15" fill="rgb(245,192,40)"/><text x="29.5880%" y="239.50"></text></g><g><title>misc_checking_2 (4,432,719 samples, 1.04%)</title><rect x="29.2406%" y="261" width="1.0424%" height="15" fill="rgb(238,167,29)"/><text x="29.4906%" y="271.50"></text></g><g><title>match_checking (2,281,125 samples, 0.54%)</title><rect x="29.7466%" y="245" width="0.5365%" height="15" fill="rgb(232,182,51)"/><text x="29.9966%" y="255.50"></text></g><g><title>check_match (2,057,322 samples, 0.48%)</title><rect x="29.7992%" y="229" width="0.4838%" height="15" fill="rgb(231,60,39)"/><text x="30.0492%" y="239.50"></text></g><g><title>check_private_in_public (1,213,084 samples, 0.29%)</title><rect x="30.2858%" y="245" width="0.2853%" height="15" fill="rgb(208,69,12)"/><text x="30.5358%" y="255.50"></text></g><g><title>death_checking (1,652,268 samples, 0.39%)</title><rect x="30.5711%" y="245" width="0.3886%" height="15" fill="rgb(235,93,37)"/><text x="30.8211%" y="255.50"></text></g><g><title>eval_to_const_value_raw (525,066 samples, 0.12%)</title><rect x="31.4923%" y="213" width="0.1235%" height="15" fill="rgb(213,116,39)"/><text x="31.7423%" y="223.50"></text></g><g><title>eval_to_const_value_raw (514,496 samples, 0.12%)</title><rect x="31.4948%" y="197" width="0.1210%" height="15" fill="rgb(222,207,29)"/><text x="31.7448%" y="207.50"></text></g><g><title>eval_to_allocation_raw (497,415 samples, 0.12%)</title><rect x="31.4988%" y="181" width="0.1170%" height="15" fill="rgb(206,96,30)"/><text x="31.7488%" y="191.50"></text></g><g><title>param_env (1,152,410 samples, 0.27%)</title><rect x="31.6158%" y="213" width="0.2710%" height="15" fill="rgb(218,138,4)"/><text x="31.8658%" y="223.50"></text></g><g><title>predicates_of (581,526 samples, 0.14%)</title><rect x="31.7501%" y="197" width="0.1368%" height="15" fill="rgb(250,191,14)"/><text x="32.0001%" y="207.50"></text></g><g><title>predicates_defined_on (450,424 samples, 0.11%)</title><rect x="31.7809%" y="181" width="0.1059%" height="15" fill="rgb(239,60,40)"/><text x="32.0309%" y="191.50"></text></g><g><title>crate_lints (5,170,926 samples, 1.22%)</title><rect x="30.9603%" y="229" width="1.2160%" height="15" fill="rgb(206,27,48)"/><text x="31.2103%" y="239.50"></text></g><g><title>type_of (1,170,512 samples, 0.28%)</title><rect x="31.9011%" y="213" width="0.2753%" height="15" fill="rgb(225,35,8)"/><text x="32.1511%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (938,768 samples, 0.22%)</title><rect x="31.9556%" y="197" width="0.2208%" height="15" fill="rgb(250,213,24)"/><text x="32.2056%" y="207.50"></text></g><g><title>lint_checking (7,251,269 samples, 1.71%)</title><rect x="30.9596%" y="245" width="1.7053%" height="15" fill="rgb(247,123,22)"/><text x="31.2096%" y="255.50"></text></g><g><title>module_lints (2,077,443 samples, 0.49%)</title><rect x="32.1763%" y="229" width="0.4886%" height="15" fill="rgb(231,138,38)"/><text x="32.4263%" y="239.50"></text></g><g><title>lint_mod (2,061,602 samples, 0.48%)</title><rect x="32.1801%" y="213" width="0.4848%" height="15" fill="rgb(231,145,46)"/><text x="32.4301%" y="223.50"></text></g><g><title>privacy_access_levels (1,283,864 samples, 0.30%)</title><rect x="32.6649%" y="245" width="0.3019%" height="15" fill="rgb(251,118,11)"/><text x="32.9149%" y="255.50"></text></g><g><title>privacy_checking_modules (3,480,109 samples, 0.82%)</title><rect x="32.9668%" y="245" width="0.8184%" height="15" fill="rgb(217,147,25)"/><text x="33.2168%" y="255.50"></text></g><g><title>check_mod_privacy (3,466,629 samples, 0.82%)</title><rect x="32.9700%" y="229" width="0.8152%" height="15" fill="rgb(247,81,37)"/><text x="33.2200%" y="239.50"></text></g><g><title>misc_checking_3 (14,930,925 samples, 3.51%)</title><rect x="30.2830%" y="261" width="3.5113%" height="15" fill="rgb(209,12,38)"/><text x="30.5330%" y="271.50">mis..</text></g><g><title>impl_parent (2,772,280 samples, 0.65%)</title><rect x="35.1300%" y="197" width="0.6520%" height="15" fill="rgb(227,1,9)"/><text x="35.3800%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,656,944 samples, 0.39%)</title><rect x="35.3923%" y="181" width="0.3897%" height="15" fill="rgb(248,47,43)"/><text x="35.6423%" y="191.50"></text></g><g><title>impl_trait_ref (6,314,678 samples, 1.49%)</title><rect x="35.7820%" y="197" width="1.4850%" height="15" fill="rgb(221,10,30)"/><text x="36.0320%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,187,868 samples, 1.22%)</title><rect x="36.0469%" y="181" width="1.2200%" height="15" fill="rgb(210,229,1)"/><text x="36.2969%" y="191.50"></text></g><g><title>trait_impls_of (1,111,299 samples, 0.26%)</title><rect x="37.3364%" y="197" width="0.2613%" height="15" fill="rgb(222,148,37)"/><text x="37.5864%" y="207.50"></text></g><g><title>coherent_trait (15,545,291 samples, 3.66%)</title><rect x="33.9458%" y="229" width="3.6558%" height="15" fill="rgb(234,67,33)"/><text x="34.1958%" y="239.50">cohe..</text></g><g><title>specialization_graph_of (15,492,241 samples, 3.64%)</title><rect x="33.9583%" y="213" width="3.6433%" height="15" fill="rgb(247,98,35)"/><text x="34.2083%" y="223.50">spec..</text></g><g><title>coherence_checking (15,756,494 samples, 3.71%)</title><rect x="33.9359%" y="245" width="3.7055%" height="15" fill="rgb(247,138,52)"/><text x="34.1859%" y="255.50">cohe..</text></g><g><title>associated_item (1,124,921 samples, 0.26%)</title><rect x="59.7935%" y="181" width="0.2645%" height="15" fill="rgb(213,79,30)"/><text x="60.0435%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (722,427 samples, 0.17%)</title><rect x="59.8882%" y="165" width="0.1699%" height="15" fill="rgb(246,177,23)"/><text x="60.1382%" y="175.50"></text></g><g><title>associated_items (1,549,973 samples, 0.36%)</title><rect x="59.7060%" y="197" width="0.3645%" height="15" fill="rgb(230,62,27)"/><text x="59.9560%" y="207.50"></text></g><g><title>dropck_outlives (900,991 samples, 0.21%)</title><rect x="60.1261%" y="197" width="0.2119%" height="15" fill="rgb(216,154,8)"/><text x="60.3761%" y="207.50"></text></g><g><title>eval_to_allocation_raw (585,836 samples, 0.14%)</title><rect x="60.3432%" y="181" width="0.1378%" height="15" fill="rgb(244,35,45)"/><text x="60.5932%" y="191.50"></text></g><g><title>eval_to_const_value_raw (993,372 samples, 0.23%)</title><rect x="60.3380%" y="197" width="0.2336%" height="15" fill="rgb(251,115,12)"/><text x="60.5880%" y="207.50"></text></g><g><title>generics_of (921,638 samples, 0.22%)</title><rect x="62.6677%" y="181" width="0.2167%" height="15" fill="rgb(240,54,50)"/><text x="62.9177%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (708,128 samples, 0.17%)</title><rect x="62.7179%" y="165" width="0.1665%" height="15" fill="rgb(233,84,52)"/><text x="62.9679%" y="175.50"></text></g><g><title>impl_trait_ref (711,499 samples, 0.17%)</title><rect x="62.9314%" y="181" width="0.1673%" height="15" fill="rgb(207,117,47)"/><text x="63.1814%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (558,726 samples, 0.13%)</title><rect x="62.9674%" y="165" width="0.1314%" height="15" fill="rgb(249,43,39)"/><text x="63.2174%" y="175.50"></text></g><g><title>predicates_of (1,081,161 samples, 0.25%)</title><rect x="63.1132%" y="181" width="0.2543%" height="15" fill="rgb(209,38,44)"/><text x="63.3632%" y="191.50"></text></g><g><title>predicates_defined_on (642,122 samples, 0.15%)</title><rect x="63.2164%" y="165" width="0.1510%" height="15" fill="rgb(236,212,23)"/><text x="63.4664%" y="175.50"></text></g><g><title>specializes (2,304,164 samples, 0.54%)</title><rect x="63.3674%" y="181" width="0.5419%" height="15" fill="rgb(242,79,21)"/><text x="63.6174%" y="191.50"></text></g><g><title>param_env (1,320,453 samples, 0.31%)</title><rect x="63.5988%" y="165" width="0.3105%" height="15" fill="rgb(211,96,35)"/><text x="63.8488%" y="175.50"></text></g><g><title>def_span (585,484 samples, 0.14%)</title><rect x="63.7716%" y="149" width="0.1377%" height="15" fill="rgb(253,215,40)"/><text x="64.0216%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (517,734 samples, 0.12%)</title><rect x="63.7875%" y="133" width="0.1218%" height="15" fill="rgb(211,81,21)"/><text x="64.0375%" y="143.50"></text></g><g><title>trait_impls_of (475,917 samples, 0.11%)</title><rect x="63.9145%" y="181" width="0.1119%" height="15" fill="rgb(208,190,38)"/><text x="64.1645%" y="191.50"></text></g><g><title>evaluate_obligation (14,706,198 samples, 3.46%)</title><rect x="60.5716%" y="197" width="3.4585%" height="15" fill="rgb(235,213,38)"/><text x="60.8216%" y="207.50">eva..</text></g><g><title>generics_of (804,973 samples, 0.19%)</title><rect x="64.1219%" y="197" width="0.1893%" height="15" fill="rgb(237,122,38)"/><text x="64.3719%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (611,731 samples, 0.14%)</title><rect x="64.1674%" y="181" width="0.1439%" height="15" fill="rgb(244,218,35)"/><text x="64.4174%" y="191.50"></text></g><g><title>item_attrs (615,528 samples, 0.14%)</title><rect x="64.3966%" y="197" width="0.1448%" height="15" fill="rgb(240,68,47)"/><text x="64.6466%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (596,938 samples, 0.14%)</title><rect x="64.4010%" y="181" width="0.1404%" height="15" fill="rgb(210,16,53)"/><text x="64.6510%" y="191.50"></text></g><g><title>evaluate_obligation (598,257 samples, 0.14%)</title><rect x="64.7700%" y="181" width="0.1407%" height="15" fill="rgb(235,124,12)"/><text x="65.0200%" y="191.50"></text></g><g><title>method_autoderef_steps (1,382,704 samples, 0.33%)</title><rect x="64.5912%" y="197" width="0.3252%" height="15" fill="rgb(224,169,11)"/><text x="64.8412%" y="207.50"></text></g><g><title>predicates_of (693,709 samples, 0.16%)</title><rect x="65.1025%" y="197" width="0.1631%" height="15" fill="rgb(250,166,2)"/><text x="65.3525%" y="207.50"></text></g><g><title>predicates_defined_on (483,888 samples, 0.11%)</title><rect x="65.1519%" y="181" width="0.1138%" height="15" fill="rgb(242,216,29)"/><text x="65.4019%" y="191.50"></text></g><g><title>associated_item (790,389 samples, 0.19%)</title><rect x="69.0831%" y="165" width="0.1859%" height="15" fill="rgb(230,116,27)"/><text x="69.3331%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (635,215 samples, 0.15%)</title><rect x="69.1196%" y="149" width="0.1494%" height="15" fill="rgb(228,99,48)"/><text x="69.3696%" y="159.50"></text></g><g><title>associated_items (1,115,991 samples, 0.26%)</title><rect x="69.0136%" y="181" width="0.2624%" height="15" fill="rgb(253,11,6)"/><text x="69.2636%" y="191.50"></text></g><g><title>mir_borrowck (927,233 samples, 0.22%)</title><rect x="69.5795%" y="117" width="0.2181%" height="15" fill="rgb(247,143,39)"/><text x="69.8295%" y="127.50"></text></g><g><title>mir_for_ctfe (1,374,276 samples, 0.32%)</title><rect x="69.4757%" y="149" width="0.3232%" height="15" fill="rgb(236,97,10)"/><text x="69.7257%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,269,725 samples, 0.30%)</title><rect x="69.5003%" y="133" width="0.2986%" height="15" fill="rgb(233,208,19)"/><text x="69.7503%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,837,068 samples, 0.67%)</title><rect x="69.3286%" y="165" width="0.6672%" height="15" fill="rgb(216,164,2)"/><text x="69.5786%" y="175.50"></text></g><g><title>typeck (785,166 samples, 0.18%)</title><rect x="69.8112%" y="149" width="0.1846%" height="15" fill="rgb(220,129,5)"/><text x="70.0612%" y="159.50"></text></g><g><title>mir_const_qualif (459,352 samples, 0.11%)</title><rect x="70.1544%" y="133" width="0.1080%" height="15" fill="rgb(242,17,10)"/><text x="70.4044%" y="143.50"></text></g><g><title>mir_borrowck (1,103,797 samples, 0.26%)</title><rect x="70.4113%" y="101" width="0.2596%" height="15" fill="rgb(242,107,0)"/><text x="70.6613%" y="111.50"></text></g><g><title>mir_for_ctfe (1,742,822 samples, 0.41%)</title><rect x="70.2624%" y="133" width="0.4099%" height="15" fill="rgb(251,28,31)"/><text x="70.5124%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,490,588 samples, 0.35%)</title><rect x="70.3217%" y="117" width="0.3505%" height="15" fill="rgb(233,223,10)"/><text x="70.5717%" y="127.50"></text></g><g><title>mir_const_qualif (433,969 samples, 0.10%)</title><rect x="70.7657%" y="69" width="0.1021%" height="15" fill="rgb(215,21,27)"/><text x="71.0157%" y="79.50"></text></g><g><title>mir_borrowck (859,017 samples, 0.20%)</title><rect x="70.9822%" y="37" width="0.2020%" height="15" fill="rgb(232,23,21)"/><text x="71.2322%" y="47.50"></text></g><g><title>eval_to_const_value_raw (2,072,926 samples, 0.49%)</title><rect x="70.6979%" y="117" width="0.4875%" height="15" fill="rgb(244,5,23)"/><text x="70.9479%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,057,176 samples, 0.48%)</title><rect x="70.7016%" y="101" width="0.4838%" height="15" fill="rgb(226,81,46)"/><text x="70.9516%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,025,716 samples, 0.48%)</title><rect x="70.7090%" y="85" width="0.4764%" height="15" fill="rgb(247,70,30)"/><text x="70.9590%" y="95.50"></text></g><g><title>mir_for_ctfe (1,350,794 samples, 0.32%)</title><rect x="70.8678%" y="69" width="0.3177%" height="15" fill="rgb(212,68,19)"/><text x="71.1178%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,235,750 samples, 0.29%)</title><rect x="70.8948%" y="53" width="0.2906%" height="15" fill="rgb(240,187,13)"/><text x="71.1448%" y="63.50"></text></g><g><title>eval_to_const_value_raw (7,982,368 samples, 1.88%)</title><rect x="69.3127%" y="181" width="1.8772%" height="15" fill="rgb(223,113,26)"/><text x="69.5627%" y="191.50">e..</text></g><g><title>eval_to_const_value_raw (5,077,639 samples, 1.19%)</title><rect x="69.9958%" y="165" width="1.1941%" height="15" fill="rgb(206,192,2)"/><text x="70.2458%" y="175.50"></text></g><g><title>eval_to_allocation_raw (5,034,908 samples, 1.18%)</title><rect x="70.0059%" y="149" width="1.1841%" height="15" fill="rgb(241,108,4)"/><text x="70.2559%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,167,966 samples, 0.51%)</title><rect x="70.6801%" y="133" width="0.5098%" height="15" fill="rgb(247,173,49)"/><text x="70.9301%" y="143.50"></text></g><g><title>evaluate_obligation (499,555 samples, 0.12%)</title><rect x="71.1899%" y="181" width="0.1175%" height="15" fill="rgb(224,114,35)"/><text x="71.4399%" y="191.50"></text></g><g><title>is_copy_raw (531,403 samples, 0.12%)</title><rect x="71.3558%" y="181" width="0.1250%" height="15" fill="rgb(245,159,27)"/><text x="71.6058%" y="191.50"></text></g><g><title>typeck (26,975,868 samples, 6.34%)</title><rect x="65.3642%" y="197" width="6.3439%" height="15" fill="rgb(245,172,44)"/><text x="65.6142%" y="207.50">typeck</text></g><g><title>item_bodies_checking (144,964,982 samples, 34.09%)</title><rect x="37.6741%" y="245" width="34.0914%" height="15" fill="rgb(236,23,11)"/><text x="37.9241%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (144,961,242 samples, 34.09%)</title><rect x="37.6750%" y="229" width="34.0905%" height="15" fill="rgb(205,117,38)"/><text x="37.9250%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (144,337,976 samples, 33.94%)</title><rect x="37.8216%" y="213" width="33.9439%" height="15" fill="rgb(237,72,25)"/><text x="38.0716%" y="223.50">typeck</text></g><g><title>evaluate_obligation (621,937 samples, 0.15%)</title><rect x="73.4546%" y="197" width="0.1463%" height="15" fill="rgb(244,70,9)"/><text x="73.7046%" y="207.50"></text></g><g><title>typeck (1,830,339 samples, 0.43%)</title><rect x="73.1960%" y="213" width="0.4304%" height="15" fill="rgb(217,125,39)"/><text x="73.4460%" y="223.50"></text></g><g><title>item_types_checking (7,914,597 samples, 1.86%)</title><rect x="71.7655%" y="245" width="1.8613%" height="15" fill="rgb(235,36,10)"/><text x="72.0155%" y="255.50">i..</text></g><g><title>check_mod_item_types (7,897,817 samples, 1.86%)</title><rect x="71.7694%" y="229" width="1.8573%" height="15" fill="rgb(251,123,47)"/><text x="72.0194%" y="239.50">c..</text></g><g><title>fn_sig (1,449,253 samples, 0.34%)</title><rect x="73.9049%" y="213" width="0.3408%" height="15" fill="rgb(221,13,13)"/><text x="74.1549%" y="223.50"></text></g><g><title>named_region_map (874,166 samples, 0.21%)</title><rect x="74.5145%" y="197" width="0.2056%" height="15" fill="rgb(238,131,9)"/><text x="74.7645%" y="207.50"></text></g><g><title>resolve_lifetimes (768,366 samples, 0.18%)</title><rect x="74.5394%" y="181" width="0.1807%" height="15" fill="rgb(211,50,8)"/><text x="74.7894%" y="191.50"></text></g><g><title>generics_of (2,079,924 samples, 0.49%)</title><rect x="74.2457%" y="213" width="0.4891%" height="15" fill="rgb(245,182,24)"/><text x="74.4957%" y="223.50"></text></g><g><title>explicit_predicates_of (882,282 samples, 0.21%)</title><rect x="74.9464%" y="181" width="0.2075%" height="15" fill="rgb(242,14,37)"/><text x="75.1964%" y="191.50"></text></g><g><title>predicates_of (1,906,292 samples, 0.45%)</title><rect x="74.8015%" y="213" width="0.4483%" height="15" fill="rgb(246,228,12)"/><text x="75.0515%" y="223.50"></text></g><g><title>predicates_defined_on (1,667,359 samples, 0.39%)</title><rect x="74.8577%" y="197" width="0.3921%" height="15" fill="rgb(213,55,15)"/><text x="75.1077%" y="207.50"></text></g><g><title>type_collecting (7,321,561 samples, 1.72%)</title><rect x="73.6294%" y="245" width="1.7218%" height="15" fill="rgb(209,9,3)"/><text x="73.8794%" y="255.50"></text></g><g><title>collect_mod_item_types (7,293,300 samples, 1.72%)</title><rect x="73.6360%" y="229" width="1.7152%" height="15" fill="rgb(230,59,30)"/><text x="73.8860%" y="239.50"></text></g><g><title>evaluate_obligation (1,566,197 samples, 0.37%)</title><rect x="77.9899%" y="213" width="0.3683%" height="15" fill="rgb(209,121,21)"/><text x="78.2399%" y="223.50"></text></g><g><title>implied_outlives_bounds (864,519 samples, 0.20%)</title><rect x="78.3630%" y="213" width="0.2033%" height="15" fill="rgb(220,109,13)"/><text x="78.6130%" y="223.50"></text></g><g><title>param_env (1,662,860 samples, 0.39%)</title><rect x="78.5663%" y="213" width="0.3911%" height="15" fill="rgb(232,18,1)"/><text x="78.8163%" y="223.50"></text></g><g><title>region_scope_tree (1,628,232 samples, 0.38%)</title><rect x="78.9706%" y="213" width="0.3829%" height="15" fill="rgb(215,41,42)"/><text x="79.2206%" y="223.50"></text></g><g><title>check_impl_item_well_formed (15,994,513 samples, 3.76%)</title><rect x="75.6007%" y="229" width="3.7614%" height="15" fill="rgb(224,123,36)"/><text x="75.8507%" y="239.50">chec..</text></g><g><title>mir_borrowck (530,106 samples, 0.12%)</title><rect x="80.7155%" y="133" width="0.1247%" height="15" fill="rgb(240,125,3)"/><text x="80.9655%" y="143.50"></text></g><g><title>mir_for_ctfe (684,027 samples, 0.16%)</title><rect x="80.6794%" y="165" width="0.1609%" height="15" fill="rgb(205,98,50)"/><text x="80.9294%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (628,777 samples, 0.15%)</title><rect x="80.6924%" y="149" width="0.1479%" height="15" fill="rgb(205,185,37)"/><text x="80.9424%" y="159.50"></text></g><g><title>evaluate_obligation (1,666,737 samples, 0.39%)</title><rect x="80.8961%" y="149" width="0.3920%" height="15" fill="rgb(238,207,15)"/><text x="81.1461%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,540,519 samples, 0.83%)</title><rect x="80.4767%" y="213" width="0.8326%" height="15" fill="rgb(213,199,42)"/><text x="80.7267%" y="223.50"></text></g><g><title>eval_to_const_value_raw (3,529,329 samples, 0.83%)</title><rect x="80.4793%" y="197" width="0.8300%" height="15" fill="rgb(235,201,11)"/><text x="80.7293%" y="207.50"></text></g><g><title>eval_to_allocation_raw (3,523,719 samples, 0.83%)</title><rect x="80.4806%" y="181" width="0.8287%" height="15" fill="rgb(207,46,11)"/><text x="80.7306%" y="191.50"></text></g><g><title>typeck (1,993,053 samples, 0.47%)</title><rect x="80.8406%" y="165" width="0.4687%" height="15" fill="rgb(241,35,35)"/><text x="81.0906%" y="175.50"></text></g><g><title>evaluate_obligation (1,305,606 samples, 0.31%)</title><rect x="81.3093%" y="213" width="0.3070%" height="15" fill="rgb(243,32,47)"/><text x="81.5593%" y="223.50"></text></g><g><title>object_safety_violations (615,127 samples, 0.14%)</title><rect x="81.6856%" y="213" width="0.1447%" height="15" fill="rgb(247,202,23)"/><text x="81.9356%" y="223.50"></text></g><g><title>param_env (971,920 samples, 0.23%)</title><rect x="81.8303%" y="213" width="0.2286%" height="15" fill="rgb(219,102,11)"/><text x="82.0803%" y="223.50"></text></g><g><title>check_item_well_formed (12,255,037 samples, 2.88%)</title><rect x="79.3621%" y="229" width="2.8820%" height="15" fill="rgb(243,110,44)"/><text x="79.6121%" y="239.50">ch..</text></g><g><title>param_env (453,586 samples, 0.11%)</title><rect x="82.8772%" y="213" width="0.1067%" height="15" fill="rgb(222,74,54)"/><text x="83.1272%" y="223.50"></text></g><g><title>analysis (352,384,063 samples, 82.87%)</title><rect x="0.2191%" y="277" width="82.8701%" height="15" fill="rgb(216,99,12)"/><text x="0.4691%" y="287.50">analysis</text></g><g><title>type_check_crate (209,614,056 samples, 49.29%)</title><rect x="33.7943%" y="261" width="49.2949%" height="15" fill="rgb(226,22,26)"/><text x="34.0443%" y="271.50">type_check_crate</text></g><g><title>wf_checking (32,860,823 samples, 7.73%)</title><rect x="75.3614%" y="245" width="7.7279%" height="15" fill="rgb(217,163,10)"/><text x="75.6114%" y="255.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,593,540 samples, 0.85%)</title><rect x="82.2441%" y="229" width="0.8451%" height="15" fill="rgb(213,25,53)"/><text x="82.4941%" y="239.50"></text></g><g><title>AST_validation (438,405 samples, 0.10%)</title><rect x="83.2207%" y="261" width="0.1031%" height="15" fill="rgb(252,105,26)"/><text x="83.4707%" y="271.50"></text></g><g><title>metadata_register_crate (931,171 samples, 0.22%)</title><rect x="90.7218%" y="229" width="0.2190%" height="15" fill="rgb(220,39,43)"/><text x="90.9718%" y="239.50"></text></g><g><title>macro_expand_crate (32,737,762 samples, 7.70%)</title><rect x="83.3983%" y="261" width="7.6989%" height="15" fill="rgb(229,68,48)"/><text x="83.6483%" y="271.50">macro_expan..</text></g><g><title>expand_crate (32,727,802 samples, 7.70%)</title><rect x="83.4007%" y="245" width="7.6966%" height="15" fill="rgb(252,8,32)"/><text x="83.6507%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (665,348 samples, 0.16%)</title><rect x="90.9408%" y="229" width="0.1565%" height="15" fill="rgb(223,20,43)"/><text x="91.1908%" y="239.50"></text></g><g><title>late_resolve_crate (6,740,134 samples, 1.59%)</title><rect x="91.2098%" y="245" width="1.5851%" height="15" fill="rgb(229,81,49)"/><text x="91.4598%" y="255.50"></text></g><g><title>configure_and_expand (41,343,587 samples, 9.72%)</title><rect x="83.1892%" y="277" width="9.7228%" height="15" fill="rgb(236,28,36)"/><text x="83.4392%" y="287.50">configure_and_..</text></g><g><title>resolve_crate (7,634,333 samples, 1.80%)</title><rect x="91.1166%" y="261" width="1.7954%" height="15" fill="rgb(249,185,26)"/><text x="91.3666%" y="271.50">r..</text></g><g><title>drop_ast (768,769 samples, 0.18%)</title><rect x="92.9120%" y="277" width="0.1808%" height="15" fill="rgb(249,174,33)"/><text x="93.1620%" y="287.50"></text></g><g><title>early_lint_checks (1,666,818 samples, 0.39%)</title><rect x="93.0968%" y="277" width="0.3920%" height="15" fill="rgb(233,201,37)"/><text x="93.3468%" y="287.50"></text></g><g><title>free_global_ctxt (6,591,133 samples, 1.55%)</title><rect x="93.4888%" y="277" width="1.5500%" height="15" fill="rgb(221,78,26)"/><text x="93.7388%" y="287.50"></text></g><g><title>generate_crate_metadata (4,313,198 samples, 1.01%)</title><rect x="95.0388%" y="277" width="1.0143%" height="15" fill="rgb(250,127,30)"/><text x="95.2888%" y="287.50"></text></g><g><title>hir_lowering (13,632,411 samples, 3.21%)</title><rect x="96.0532%" y="277" width="3.2059%" height="15" fill="rgb(230,49,44)"/><text x="96.3032%" y="287.50">hir..</text></g><g><title>self_profile_alloc_query_strings (1,893,521 samples, 0.45%)</title><rect x="99.4063%" y="277" width="0.4453%" height="15" fill="rgb(229,67,23)"/><text x="99.6563%" y="287.50"></text></g><g><title>all (425,224,598 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (425,224,598 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (523,075 samples, 0.12%)</title><rect x="99.8770%" y="277" width="0.1230%" height="15" fill="rgb(238,154,13)"/><text x="100.1270%" y="287.50"></text></g></svg></svg>