<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (159,670 samples, 0.30%)</title><rect x="8.3539%" y="229" width="0.3013%" height="15" fill="rgb(227,0,7)"/><text x="8.6039%" y="239.50"></text></g><g><title>mir_promoted (284,551 samples, 0.54%)</title><rect x="9.3863%" y="213" width="0.5369%" height="15" fill="rgb(217,0,24)"/><text x="9.6363%" y="223.50"></text></g><g><title>mir_const_qualif_const_arg (235,551 samples, 0.44%)</title><rect x="9.4788%" y="197" width="0.4444%" height="15" fill="rgb(221,193,54)"/><text x="9.7288%" y="207.50"></text></g><g><title>mir_const (194,791 samples, 0.37%)</title><rect x="9.5557%" y="181" width="0.3675%" height="15" fill="rgb(248,212,6)"/><text x="9.8057%" y="191.50"></text></g><g><title>unsafety_check_result_for_const_arg (116,260 samples, 0.22%)</title><rect x="9.7038%" y="165" width="0.2193%" height="15" fill="rgb(208,68,35)"/><text x="9.9538%" y="175.50"></text></g><g><title>mir_built (100,260 samples, 0.19%)</title><rect x="9.7340%" y="149" width="0.1892%" height="15" fill="rgb(232,128,0)"/><text x="9.9840%" y="159.50"></text></g><g><title>mir_borrowck_const_arg (637,886 samples, 1.20%)</title><rect x="8.7232%" y="229" width="1.2035%" height="15" fill="rgb(207,160,47)"/><text x="8.9732%" y="239.50"></text></g><g><title>param_env (423,213 samples, 0.80%)</title><rect x="10.9629%" y="197" width="0.7985%" height="15" fill="rgb(228,23,34)"/><text x="11.2129%" y="207.50"></text></g><g><title>item_attrs (104,382 samples, 0.20%)</title><rect x="12.1731%" y="165" width="0.1969%" height="15" fill="rgb(218,30,26)"/><text x="12.4231%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (100,962 samples, 0.19%)</title><rect x="12.1795%" y="149" width="0.1905%" height="15" fill="rgb(220,122,19)"/><text x="12.4295%" y="159.50"></text></g><g><title>codegen_fn_attrs (165,242 samples, 0.31%)</title><rect x="12.0714%" y="181" width="0.3118%" height="15" fill="rgb(250,228,42)"/><text x="12.3214%" y="191.50"></text></g><g><title>is_copy_raw (468,255 samples, 0.88%)</title><rect x="13.7289%" y="165" width="0.8835%" height="15" fill="rgb(240,193,28)"/><text x="13.9789%" y="175.50"></text></g><g><title>evaluate_obligation (445,915 samples, 0.84%)</title><rect x="13.7710%" y="149" width="0.8413%" height="15" fill="rgb(216,20,37)"/><text x="14.0210%" y="159.50"></text></g><g><title>trait_impls_of (285,544 samples, 0.54%)</title><rect x="14.0736%" y="133" width="0.5387%" height="15" fill="rgb(206,188,39)"/><text x="14.3236%" y="143.50"></text></g><g><title>implementations_of_trait (68,140 samples, 0.13%)</title><rect x="14.4838%" y="117" width="0.1286%" height="15" fill="rgb(217,207,13)"/><text x="14.7338%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (56,700 samples, 0.11%)</title><rect x="14.5054%" y="101" width="0.1070%" height="15" fill="rgb(231,73,38)"/><text x="14.7554%" y="111.50"></text></g><g><title>lint_levels (67,571 samples, 0.13%)</title><rect x="14.6123%" y="165" width="0.1275%" height="15" fill="rgb(225,20,46)"/><text x="14.8623%" y="175.50"></text></g><g><title>needs_drop_raw (172,441 samples, 0.33%)</title><rect x="14.7398%" y="165" width="0.3253%" height="15" fill="rgb(210,31,41)"/><text x="14.9898%" y="175.50"></text></g><g><title>is_copy_raw (153,621 samples, 0.29%)</title><rect x="14.7753%" y="149" width="0.2898%" height="15" fill="rgb(221,200,47)"/><text x="15.0253%" y="159.50"></text></g><g><title>evaluate_obligation (96,651 samples, 0.18%)</title><rect x="14.8828%" y="133" width="0.1824%" height="15" fill="rgb(226,26,5)"/><text x="15.1328%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (111,290 samples, 0.21%)</title><rect x="15.2104%" y="149" width="0.2100%" height="15" fill="rgb(249,33,26)"/><text x="15.4604%" y="159.50"></text></g><g><title>resolve_instance (225,971 samples, 0.43%)</title><rect x="15.0652%" y="165" width="0.4263%" height="15" fill="rgb(235,183,28)"/><text x="15.3152%" y="175.50"></text></g><g><title>thir_body (179,583 samples, 0.34%)</title><rect x="15.5032%" y="165" width="0.3388%" height="15" fill="rgb(221,5,38)"/><text x="15.7532%" y="175.50"></text></g><g><title>mir_const (2,924,575 samples, 5.52%)</title><rect x="10.4072%" y="213" width="5.5178%" height="15" fill="rgb(247,18,42)"/><text x="10.6572%" y="223.50">mir_con..</text></g><g><title>unsafety_check_result (2,206,795 samples, 4.16%)</title><rect x="11.7614%" y="197" width="4.1636%" height="15" fill="rgb(241,131,45)"/><text x="12.0114%" y="207.50">unsaf..</text></g><g><title>mir_built (1,877,272 samples, 3.54%)</title><rect x="12.3831%" y="181" width="3.5419%" height="15" fill="rgb(249,31,29)"/><text x="12.6331%" y="191.50">mir_..</text></g><g><title>mir_promoted (3,195,806 samples, 6.03%)</title><rect x="9.9267%" y="229" width="6.0296%" height="15" fill="rgb(225,111,53)"/><text x="10.1767%" y="239.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (209,961 samples, 0.40%)</title><rect x="15.9563%" y="229" width="0.3961%" height="15" fill="rgb(238,160,17)"/><text x="16.2063%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (100,550 samples, 0.19%)</title><rect x="16.3524%" y="229" width="0.1897%" height="15" fill="rgb(214,148,48)"/><text x="16.6024%" y="239.50"></text></g><g><title>type_op_normalize_ty (68,632 samples, 0.13%)</title><rect x="16.5421%" y="229" width="0.1295%" height="15" fill="rgb(232,36,49)"/><text x="16.7921%" y="239.50"></text></g><g><title>MIR_borrow_checking (8,219,211 samples, 15.51%)</title><rect x="2.5262%" y="261" width="15.5073%" height="15" fill="rgb(209,103,24)"/><text x="2.7762%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,170,440 samples, 15.42%)</title><rect x="2.6183%" y="245" width="15.4153%" height="15" fill="rgb(229,88,8)"/><text x="2.8683%" y="255.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (721,872 samples, 1.36%)</title><rect x="16.6716%" y="229" width="1.3620%" height="15" fill="rgb(213,181,19)"/><text x="16.9216%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (230,702 samples, 0.44%)</title><rect x="18.1309%" y="245" width="0.4353%" height="15" fill="rgb(254,191,54)"/><text x="18.3809%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (225,732 samples, 0.43%)</title><rect x="18.1403%" y="229" width="0.4259%" height="15" fill="rgb(241,83,37)"/><text x="18.3903%" y="239.50"></text></g><g><title>MIR_effect_checking (284,943 samples, 0.54%)</title><rect x="18.0336%" y="261" width="0.5376%" height="15" fill="rgb(233,36,39)"/><text x="18.2836%" y="271.50"></text></g><g><title>hir_module_items (115,941 samples, 0.22%)</title><rect x="18.5712%" y="261" width="0.2187%" height="15" fill="rgb(226,3,54)"/><text x="18.8212%" y="271.50"></text></g><g><title>get_lang_items (79,741 samples, 0.15%)</title><rect x="19.1704%" y="213" width="0.1504%" height="15" fill="rgb(245,192,40)"/><text x="19.4204%" y="223.50"></text></g><g><title>codegen_fn_attrs (179,012 samples, 0.34%)</title><rect x="19.0599%" y="229" width="0.3377%" height="15" fill="rgb(238,167,29)"/><text x="19.3099%" y="239.50"></text></g><g><title>check_mod_attrs (298,064 samples, 0.56%)</title><rect x="18.8357%" y="245" width="0.5624%" height="15" fill="rgb(232,182,51)"/><text x="19.0857%" y="255.50"></text></g><g><title>lookup_deprecation_entry (90,831 samples, 0.17%)</title><rect x="19.7191%" y="229" width="0.1714%" height="15" fill="rgb(231,60,39)"/><text x="19.9691%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (228,522 samples, 0.43%)</title><rect x="19.5526%" y="245" width="0.4312%" height="15" fill="rgb(208,69,12)"/><text x="19.8026%" y="255.50"></text></g><g><title>misc_checking_1 (690,448 samples, 1.30%)</title><rect x="18.7912%" y="261" width="1.3027%" height="15" fill="rgb(235,93,37)"/><text x="19.0412%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (163,962 samples, 0.31%)</title><rect x="20.0983%" y="245" width="0.3093%" height="15" fill="rgb(213,116,39)"/><text x="20.3483%" y="255.50"></text></g><g><title>check_mod_liveness (133,381 samples, 0.25%)</title><rect x="20.1560%" y="229" width="0.2517%" height="15" fill="rgb(222,207,29)"/><text x="20.4060%" y="239.50"></text></g><g><title>misc_checking_2 (310,364 samples, 0.59%)</title><rect x="20.0939%" y="261" width="0.5856%" height="15" fill="rgb(206,96,30)"/><text x="20.3439%" y="271.50"></text></g><g><title>match_checking (144,052 samples, 0.27%)</title><rect x="20.4077%" y="245" width="0.2718%" height="15" fill="rgb(218,138,4)"/><text x="20.6577%" y="255.50"></text></g><g><title>check_match (125,992 samples, 0.24%)</title><rect x="20.4418%" y="229" width="0.2377%" height="15" fill="rgb(250,191,14)"/><text x="20.6918%" y="239.50"></text></g><g><title>check_private_in_public (78,891 samples, 0.15%)</title><rect x="20.7000%" y="245" width="0.1488%" height="15" fill="rgb(239,60,40)"/><text x="20.9500%" y="255.50"></text></g><g><title>codegen_fn_attrs (65,931 samples, 0.12%)</title><rect x="21.1712%" y="229" width="0.1244%" height="15" fill="rgb(206,27,48)"/><text x="21.4212%" y="239.50"></text></g><g><title>death_checking (250,253 samples, 0.47%)</title><rect x="20.8488%" y="245" width="0.4722%" height="15" fill="rgb(225,35,8)"/><text x="21.0988%" y="255.50"></text></g><g><title>explicit_predicates_of (84,261 samples, 0.16%)</title><rect x="23.3533%" y="165" width="0.1590%" height="15" fill="rgb(250,213,24)"/><text x="23.6033%" y="175.50"></text></g><g><title>crate_lints (1,165,963 samples, 2.20%)</title><rect x="21.3255%" y="229" width="2.1998%" height="15" fill="rgb(247,123,22)"/><text x="21.5755%" y="239.50">c..</text></g><g><title>param_env (362,985 samples, 0.68%)</title><rect x="22.8405%" y="213" width="0.6848%" height="15" fill="rgb(231,138,38)"/><text x="23.0905%" y="223.50"></text></g><g><title>predicates_of (155,202 samples, 0.29%)</title><rect x="23.2325%" y="197" width="0.2928%" height="15" fill="rgb(231,145,46)"/><text x="23.4825%" y="207.50"></text></g><g><title>predicates_defined_on (128,981 samples, 0.24%)</title><rect x="23.2820%" y="181" width="0.2434%" height="15" fill="rgb(251,118,11)"/><text x="23.5320%" y="191.50"></text></g><g><title>lint_checking (1,272,674 samples, 2.40%)</title><rect x="21.3210%" y="245" width="2.4012%" height="15" fill="rgb(217,147,25)"/><text x="21.5710%" y="255.50">li..</text></g><g><title>module_lints (104,311 samples, 0.20%)</title><rect x="23.5253%" y="229" width="0.1968%" height="15" fill="rgb(247,81,37)"/><text x="23.7753%" y="239.50"></text></g><g><title>lint_mod (101,211 samples, 0.19%)</title><rect x="23.5312%" y="213" width="0.1910%" height="15" fill="rgb(209,12,38)"/><text x="23.7812%" y="223.50"></text></g><g><title>privacy_access_levels (70,731 samples, 0.13%)</title><rect x="23.7221%" y="245" width="0.1334%" height="15" fill="rgb(227,1,9)"/><text x="23.9721%" y="255.50"></text></g><g><title>privacy_checking_modules (346,604 samples, 0.65%)</title><rect x="23.8556%" y="245" width="0.6539%" height="15" fill="rgb(248,47,43)"/><text x="24.1056%" y="255.50"></text></g><g><title>check_mod_privacy (344,554 samples, 0.65%)</title><rect x="23.8595%" y="229" width="0.6501%" height="15" fill="rgb(221,10,30)"/><text x="24.1095%" y="239.50"></text></g><g><title>misc_checking_3 (2,052,523 samples, 3.87%)</title><rect x="20.6795%" y="261" width="3.8725%" height="15" fill="rgb(210,229,1)"/><text x="20.9295%" y="271.50">misc..</text></g><g><title>associated_item (378,935 samples, 0.71%)</title><rect x="31.2446%" y="181" width="0.7149%" height="15" fill="rgb(222,148,37)"/><text x="31.4946%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (286,124 samples, 0.54%)</title><rect x="31.4198%" y="165" width="0.5398%" height="15" fill="rgb(234,67,33)"/><text x="31.6698%" y="175.50"></text></g><g><title>associated_items (541,975 samples, 1.02%)</title><rect x="30.9742%" y="197" width="1.0226%" height="15" fill="rgb(247,98,35)"/><text x="31.2242%" y="207.50"></text></g><g><title>impl_parent (147,342 samples, 0.28%)</title><rect x="32.8603%" y="53" width="0.2780%" height="15" fill="rgb(247,138,52)"/><text x="33.1103%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (105,121 samples, 0.20%)</title><rect x="32.9399%" y="37" width="0.1983%" height="15" fill="rgb(213,79,30)"/><text x="33.1899%" y="47.50"></text></g><g><title>impl_trait_ref (528,835 samples, 1.00%)</title><rect x="33.1383%" y="53" width="0.9978%" height="15" fill="rgb(246,177,23)"/><text x="33.3883%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (482,265 samples, 0.91%)</title><rect x="33.2261%" y="37" width="0.9099%" height="15" fill="rgb(230,62,27)"/><text x="33.4761%" y="47.50"></text></g><g><title>coherent_trait (935,870 samples, 1.77%)</title><rect x="32.4859%" y="85" width="1.7657%" height="15" fill="rgb(216,154,8)"/><text x="32.7359%" y="95.50"></text></g><g><title>specialization_graph_of (930,370 samples, 1.76%)</title><rect x="32.4963%" y="69" width="1.7553%" height="15" fill="rgb(244,35,45)"/><text x="32.7463%" y="79.50"></text></g><g><title>trait_impls_of (61,281 samples, 0.12%)</title><rect x="34.1360%" y="53" width="0.1156%" height="15" fill="rgb(251,115,12)"/><text x="34.3860%" y="63.50"></text></g><g><title>adt_destructor (946,400 samples, 1.79%)</title><rect x="32.4713%" y="117" width="1.7856%" height="15" fill="rgb(240,54,50)"/><text x="32.7213%" y="127.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (944,960 samples, 1.78%)</title><rect x="32.4741%" y="101" width="1.7829%" height="15" fill="rgb(233,84,52)"/><text x="32.7241%" y="111.50">m..</text></g><g><title>adt_dtorck_constraint (58,741 samples, 0.11%)</title><rect x="34.2569%" y="117" width="0.1108%" height="15" fill="rgb(207,117,47)"/><text x="34.5069%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,044,691 samples, 1.97%)</title><rect x="32.4055%" y="133" width="1.9710%" height="15" fill="rgb(249,43,39)"/><text x="32.6555%" y="143.50">a..</text></g><g><title>adt_dtorck_constraint (1,114,253 samples, 2.10%)</title><rect x="32.3176%" y="149" width="2.1023%" height="15" fill="rgb(209,38,44)"/><text x="32.5676%" y="159.50">a..</text></g><g><title>adt_dtorck_constraint (1,132,013 samples, 2.14%)</title><rect x="32.2988%" y="165" width="2.1358%" height="15" fill="rgb(236,212,23)"/><text x="32.5488%" y="175.50">a..</text></g><g><title>dropck_outlives (1,266,674 samples, 2.39%)</title><rect x="32.0578%" y="197" width="2.3899%" height="15" fill="rgb(242,79,21)"/><text x="32.3078%" y="207.50">dr..</text></g><g><title>adt_dtorck_constraint (1,176,823 samples, 2.22%)</title><rect x="32.2273%" y="181" width="2.2203%" height="15" fill="rgb(211,96,35)"/><text x="32.4773%" y="191.50">a..</text></g><g><title>adt_def (78,331 samples, 0.15%)</title><rect x="34.7784%" y="165" width="0.1478%" height="15" fill="rgb(253,215,40)"/><text x="35.0284%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (77,531 samples, 0.15%)</title><rect x="34.7799%" y="149" width="0.1463%" height="15" fill="rgb(211,81,21)"/><text x="35.0299%" y="159.50"></text></g><g><title>item_attrs (70,871 samples, 0.13%)</title><rect x="34.7925%" y="133" width="0.1337%" height="15" fill="rgb(208,190,38)"/><text x="35.0425%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (69,831 samples, 0.13%)</title><rect x="34.7944%" y="117" width="0.1318%" height="15" fill="rgb(235,213,38)"/><text x="35.0444%" y="127.50"></text></g><g><title>adt_def (109,932 samples, 0.21%)</title><rect x="34.9316%" y="149" width="0.2074%" height="15" fill="rgb(237,122,38)"/><text x="35.1816%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (109,402 samples, 0.21%)</title><rect x="34.9326%" y="133" width="0.2064%" height="15" fill="rgb(244,218,35)"/><text x="35.1826%" y="143.50"></text></g><g><title>item_attrs (104,592 samples, 0.20%)</title><rect x="34.9417%" y="117" width="0.1973%" height="15" fill="rgb(240,68,47)"/><text x="35.1917%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,052 samples, 0.20%)</title><rect x="34.9427%" y="101" width="0.1963%" height="15" fill="rgb(210,16,53)"/><text x="35.1927%" y="111.50"></text></g><g><title>adt_sized_constraint (113,752 samples, 0.21%)</title><rect x="34.9262%" y="165" width="0.2146%" height="15" fill="rgb(235,124,12)"/><text x="35.1762%" y="175.50"></text></g><g><title>adt_sized_constraint (211,253 samples, 0.40%)</title><rect x="34.7698%" y="181" width="0.3986%" height="15" fill="rgb(224,169,11)"/><text x="35.0198%" y="191.50"></text></g><g><title>evaluate_obligation (468,295 samples, 0.88%)</title><rect x="34.4476%" y="197" width="0.8835%" height="15" fill="rgb(250,166,2)"/><text x="34.6976%" y="207.50"></text></g><g><title>trait_impls_of (64,850 samples, 0.12%)</title><rect x="35.2088%" y="181" width="0.1224%" height="15" fill="rgb(242,216,29)"/><text x="35.4588%" y="191.50"></text></g><g><title>fn_sig (115,081 samples, 0.22%)</title><rect x="35.3520%" y="197" width="0.2171%" height="15" fill="rgb(230,116,27)"/><text x="35.6020%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (105,631 samples, 0.20%)</title><rect x="35.3698%" y="181" width="0.1993%" height="15" fill="rgb(228,99,48)"/><text x="35.6198%" y="191.50"></text></g><g><title>item_attrs (101,070 samples, 0.19%)</title><rect x="35.7745%" y="197" width="0.1907%" height="15" fill="rgb(253,11,6)"/><text x="36.0245%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,100 samples, 0.18%)</title><rect x="35.7839%" y="181" width="0.1813%" height="15" fill="rgb(247,143,39)"/><text x="36.0339%" y="191.50"></text></g><g><title>evaluate_obligation (304,192 samples, 0.57%)</title><rect x="36.4278%" y="181" width="0.5739%" height="15" fill="rgb(236,97,10)"/><text x="36.6778%" y="191.50"></text></g><g><title>trait_impls_of (69,441 samples, 0.13%)</title><rect x="36.8707%" y="165" width="0.1310%" height="15" fill="rgb(233,208,19)"/><text x="37.1207%" y="175.50"></text></g><g><title>method_autoderef_steps (556,056 samples, 1.05%)</title><rect x="36.0146%" y="197" width="1.0491%" height="15" fill="rgb(216,164,2)"/><text x="36.2646%" y="207.50"></text></g><g><title>dropck_outlives (76,912 samples, 0.15%)</title><rect x="42.4631%" y="165" width="0.1451%" height="15" fill="rgb(220,129,5)"/><text x="42.7131%" y="175.50"></text></g><g><title>evaluate_obligation (186,691 samples, 0.35%)</title><rect x="42.6082%" y="165" width="0.3522%" height="15" fill="rgb(242,17,10)"/><text x="42.8582%" y="175.50"></text></g><g><title>item_attrs (78,741 samples, 0.15%)</title><rect x="43.0903%" y="165" width="0.1486%" height="15" fill="rgb(242,107,0)"/><text x="43.3403%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (75,291 samples, 0.14%)</title><rect x="43.0968%" y="149" width="0.1421%" height="15" fill="rgb(251,28,31)"/><text x="43.3468%" y="159.50"></text></g><g><title>method_autoderef_steps (265,383 samples, 0.50%)</title><rect x="43.2454%" y="165" width="0.5007%" height="15" fill="rgb(233,223,10)"/><text x="43.4954%" y="175.50"></text></g><g><title>evaluate_obligation (138,263 samples, 0.26%)</title><rect x="43.4853%" y="149" width="0.2609%" height="15" fill="rgb(215,21,27)"/><text x="43.7353%" y="159.50"></text></g><g><title>trait_impls_of (104,232 samples, 0.20%)</title><rect x="43.8517%" y="165" width="0.1967%" height="15" fill="rgb(232,23,21)"/><text x="44.1017%" y="175.50"></text></g><g><title>opt_const_param_of (3,727,590 samples, 7.03%)</title><rect x="37.0637%" y="197" width="7.0329%" height="15" fill="rgb(244,5,23)"/><text x="37.3137%" y="207.50">opt_const..</text></g><g><title>typeck (3,706,960 samples, 6.99%)</title><rect x="37.1026%" y="181" width="6.9940%" height="15" fill="rgb(226,81,46)"/><text x="37.3526%" y="191.50">typeck</text></g><g><title>predicates_of (138,512 samples, 0.26%)</title><rect x="44.1205%" y="197" width="0.2613%" height="15" fill="rgb(247,70,30)"/><text x="44.3705%" y="207.50"></text></g><g><title>predicates_defined_on (95,621 samples, 0.18%)</title><rect x="44.2014%" y="181" width="0.1804%" height="15" fill="rgb(212,68,19)"/><text x="44.4514%" y="191.50"></text></g><g><title>type_of (54,340 samples, 0.10%)</title><rect x="44.4935%" y="197" width="0.1025%" height="15" fill="rgb(240,187,13)"/><text x="44.7435%" y="207.50"></text></g><g><title>param_env (98,362 samples, 0.19%)</title><rect x="45.0264%" y="181" width="0.1856%" height="15" fill="rgb(223,113,26)"/><text x="45.2764%" y="191.50"></text></g><g><title>typeck_const_arg (358,674 samples, 0.68%)</title><rect x="44.5960%" y="197" width="0.6767%" height="15" fill="rgb(206,192,2)"/><text x="44.8460%" y="207.50"></text></g><g><title>item_bodies_checking (10,923,831 samples, 20.61%)</title><rect x="24.7114%" y="245" width="20.6102%" height="15" fill="rgb(241,108,4)"/><text x="24.9614%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,920,981 samples, 20.60%)</title><rect x="24.7168%" y="229" width="20.6048%" height="15" fill="rgb(247,173,49)"/><text x="24.9668%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (10,896,260 samples, 20.56%)</title><rect x="24.7635%" y="213" width="20.5581%" height="15" fill="rgb(224,114,35)"/><text x="25.0135%" y="223.50">typeck</text></g><g><title>associated_item (72,841 samples, 0.14%)</title><rect x="46.1141%" y="181" width="0.1374%" height="15" fill="rgb(245,159,27)"/><text x="46.3641%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (53,531 samples, 0.10%)</title><rect x="46.1505%" y="165" width="0.1010%" height="15" fill="rgb(245,172,44)"/><text x="46.4005%" y="175.50"></text></g><g><title>associated_items (139,432 samples, 0.26%)</title><rect x="46.0264%" y="197" width="0.2631%" height="15" fill="rgb(236,23,11)"/><text x="46.2764%" y="207.50"></text></g><g><title>super_predicates_that_define_assoc_type (103,050 samples, 0.19%)</title><rect x="46.3063%" y="197" width="0.1944%" height="15" fill="rgb(205,117,38)"/><text x="46.5563%" y="207.50"></text></g><g><title>super_predicates_of (76,620 samples, 0.14%)</title><rect x="46.3561%" y="181" width="0.1446%" height="15" fill="rgb(237,72,25)"/><text x="46.6061%" y="191.50"></text></g><g><title>metadata_decode_entry_super_predicates_of (65,450 samples, 0.12%)</title><rect x="46.3772%" y="165" width="0.1235%" height="15" fill="rgb(244,70,9)"/><text x="46.6272%" y="175.50"></text></g><g><title>type_of (65,810 samples, 0.12%)</title><rect x="46.5007%" y="197" width="0.1242%" height="15" fill="rgb(217,125,39)"/><text x="46.7507%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (62,380 samples, 0.12%)</title><rect x="46.5072%" y="181" width="0.1177%" height="15" fill="rgb(235,36,10)"/><text x="46.7572%" y="191.50"></text></g><g><title>fn_sig (717,437 samples, 1.35%)</title><rect x="45.5066%" y="213" width="1.3536%" height="15" fill="rgb(251,123,47)"/><text x="45.7566%" y="223.50"></text></g><g><title>type_param_predicates (124,722 samples, 0.24%)</title><rect x="46.6249%" y="197" width="0.2353%" height="15" fill="rgb(221,13,13)"/><text x="46.8749%" y="207.50"></text></g><g><title>named_region_map (130,342 samples, 0.25%)</title><rect x="46.9930%" y="197" width="0.2459%" height="15" fill="rgb(238,131,9)"/><text x="47.2430%" y="207.50"></text></g><g><title>resolve_lifetimes (117,272 samples, 0.22%)</title><rect x="47.0176%" y="181" width="0.2213%" height="15" fill="rgb(211,50,8)"/><text x="47.2676%" y="191.50"></text></g><g><title>generics_of (208,813 samples, 0.39%)</title><rect x="46.8602%" y="213" width="0.3940%" height="15" fill="rgb(245,182,24)"/><text x="47.1102%" y="223.50"></text></g><g><title>late_bound_vars_map (57,042 samples, 0.11%)</title><rect x="47.5910%" y="165" width="0.1076%" height="15" fill="rgb(242,14,37)"/><text x="47.8410%" y="175.50"></text></g><g><title>explicit_predicates_of (217,243 samples, 0.41%)</title><rect x="47.3070%" y="181" width="0.4099%" height="15" fill="rgb(246,228,12)"/><text x="47.5570%" y="191.50"></text></g><g><title>predicates_of (248,423 samples, 0.47%)</title><rect x="47.2542%" y="213" width="0.4687%" height="15" fill="rgb(213,55,15)"/><text x="47.5042%" y="223.50"></text></g><g><title>predicates_defined_on (238,683 samples, 0.45%)</title><rect x="47.2725%" y="197" width="0.4503%" height="15" fill="rgb(209,9,3)"/><text x="47.5225%" y="207.50"></text></g><g><title>type_collecting (1,296,864 samples, 2.45%)</title><rect x="45.3394%" y="245" width="2.4468%" height="15" fill="rgb(230,59,30)"/><text x="45.5894%" y="255.50">ty..</text></g><g><title>collect_mod_item_types (1,287,374 samples, 2.43%)</title><rect x="45.3573%" y="229" width="2.4289%" height="15" fill="rgb(209,121,21)"/><text x="45.6073%" y="239.50">co..</text></g><g><title>adt_def (86,431 samples, 0.16%)</title><rect x="50.7922%" y="181" width="0.1631%" height="15" fill="rgb(220,109,13)"/><text x="51.0422%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (84,211 samples, 0.16%)</title><rect x="50.7964%" y="165" width="0.1589%" height="15" fill="rgb(232,18,1)"/><text x="51.0464%" y="175.50"></text></g><g><title>adt_sized_constraint (122,831 samples, 0.23%)</title><rect x="50.7574%" y="197" width="0.2317%" height="15" fill="rgb(215,41,42)"/><text x="51.0074%" y="207.50"></text></g><g><title>evaluate_obligation (346,515 samples, 0.65%)</title><rect x="50.4602%" y="213" width="0.6538%" height="15" fill="rgb(224,123,36)"/><text x="50.7102%" y="223.50"></text></g><g><title>implied_outlives_bounds (302,893 samples, 0.57%)</title><rect x="51.1140%" y="213" width="0.5715%" height="15" fill="rgb(240,125,3)"/><text x="51.3640%" y="223.50"></text></g><g><title>param_env (509,517 samples, 0.96%)</title><rect x="51.7867%" y="213" width="0.9613%" height="15" fill="rgb(205,98,50)"/><text x="52.0367%" y="223.50"></text></g><g><title>explicit_predicates_of (85,192 samples, 0.16%)</title><rect x="52.8683%" y="181" width="0.1607%" height="15" fill="rgb(205,185,37)"/><text x="53.1183%" y="191.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (75,502 samples, 0.14%)</title><rect x="52.8865%" y="165" width="0.1425%" height="15" fill="rgb(238,207,15)"/><text x="53.1365%" y="175.50"></text></g><g><title>predicates_of (175,063 samples, 0.33%)</title><rect x="52.7480%" y="213" width="0.3303%" height="15" fill="rgb(213,199,42)"/><text x="52.9980%" y="223.50"></text></g><g><title>predicates_defined_on (134,793 samples, 0.25%)</title><rect x="52.8240%" y="197" width="0.2543%" height="15" fill="rgb(235,201,11)"/><text x="53.0740%" y="207.50"></text></g><g><title>region_scope_tree (78,760 samples, 0.15%)</title><rect x="53.0783%" y="213" width="0.1486%" height="15" fill="rgb(207,46,11)"/><text x="53.3283%" y="223.50"></text></g><g><title>analysis (27,294,023 samples, 51.50%)</title><rect x="2.2043%" y="277" width="51.4961%" height="15" fill="rgb(241,35,35)"/><text x="2.4543%" y="287.50">analysis</text></g><g><title>type_check_crate (15,449,231 samples, 29.15%)</title><rect x="24.5520%" y="261" width="29.1483%" height="15" fill="rgb(243,32,47)"/><text x="24.8020%" y="271.50">type_check_crate</text></g><g><title>wf_checking (3,132,564 samples, 5.91%)</title><rect x="47.7901%" y="245" width="5.9103%" height="15" fill="rgb(247,202,23)"/><text x="48.0401%" y="255.50">wf_check..</text></g><g><title>check_item_well_formed (3,055,683 samples, 5.77%)</title><rect x="47.9351%" y="229" width="5.7652%" height="15" fill="rgb(219,102,11)"/><text x="48.1851%" y="239.50">check_i..</text></g><g><title>trait_impls_of (250,942 samples, 0.47%)</title><rect x="53.2269%" y="213" width="0.4735%" height="15" fill="rgb(243,110,44)"/><text x="53.4769%" y="223.50"></text></g><g><title>implementations_of_trait (124,250 samples, 0.23%)</title><rect x="53.4659%" y="197" width="0.2344%" height="15" fill="rgb(222,74,54)"/><text x="53.7159%" y="207.50"></text></g><g><title>codegen_crate (592,047 samples, 1.12%)</title><rect x="53.7198%" y="277" width="1.1170%" height="15" fill="rgb(216,99,12)"/><text x="53.9698%" y="287.50"></text></g><g><title>AST_validation (213,022 samples, 0.40%)</title><rect x="55.4924%" y="261" width="0.4019%" height="15" fill="rgb(226,22,26)"/><text x="55.7424%" y="271.50"></text></g><g><title>crate_injection (60,260 samples, 0.11%)</title><rect x="55.9585%" y="261" width="0.1137%" height="15" fill="rgb(217,163,10)"/><text x="56.2085%" y="271.50"></text></g><g><title>macro_expand_crate (12,441,209 samples, 23.47%)</title><rect x="56.0722%" y="261" width="23.4730%" height="15" fill="rgb(213,25,53)"/><text x="56.3222%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (12,426,039 samples, 23.44%)</title><rect x="56.1008%" y="245" width="23.4444%" height="15" fill="rgb(252,105,26)"/><text x="56.3508%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,824,862 samples, 5.33%)</title><rect x="74.2155%" y="229" width="5.3297%" height="15" fill="rgb(220,39,43)"/><text x="74.4655%" y="239.50">metadat..</text></g><g><title>metadata_register_crate (1,220,435 samples, 2.30%)</title><rect x="77.2426%" y="213" width="2.3026%" height="15" fill="rgb(229,68,48)"/><text x="77.4926%" y="223.50">m..</text></g><g><title>metadata_register_crate (189,483 samples, 0.36%)</title><rect x="79.1877%" y="197" width="0.3575%" height="15" fill="rgb(252,8,32)"/><text x="79.4377%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (94,671 samples, 0.18%)</title><rect x="79.5713%" y="261" width="0.1786%" height="15" fill="rgb(223,20,43)"/><text x="79.8213%" y="271.50"></text></g><g><title>finalize_imports (313,194 samples, 0.59%)</title><rect x="79.7669%" y="245" width="0.5909%" height="15" fill="rgb(229,81,49)"/><text x="80.0169%" y="255.50"></text></g><g><title>late_resolve_crate (1,156,393 samples, 2.18%)</title><rect x="80.4209%" y="245" width="2.1818%" height="15" fill="rgb(236,28,36)"/><text x="80.6709%" y="255.50">l..</text></g><g><title>configure_and_expand (14,793,205 samples, 27.91%)</title><rect x="54.8369%" y="277" width="27.9106%" height="15" fill="rgb(249,185,26)"/><text x="55.0869%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (1,588,768 samples, 3.00%)</title><rect x="79.7499%" y="261" width="2.9976%" height="15" fill="rgb(249,174,33)"/><text x="79.9999%" y="271.50">res..</text></g><g><title>drop_ast (90,491 samples, 0.17%)</title><rect x="82.7475%" y="277" width="0.1707%" height="15" fill="rgb(233,201,37)"/><text x="82.9975%" y="287.50"></text></g><g><title>early_lint_checks (199,003 samples, 0.38%)</title><rect x="82.9671%" y="277" width="0.3755%" height="15" fill="rgb(221,78,26)"/><text x="83.2171%" y="287.50"></text></g><g><title>free_global_ctxt (2,905,772 samples, 5.48%)</title><rect x="83.3426%" y="277" width="5.4824%" height="15" fill="rgb(250,127,30)"/><text x="83.5926%" y="287.50">free_gl..</text></g><g><title>crate_hash (133,231 samples, 0.25%)</title><rect x="90.2580%" y="261" width="0.2514%" height="15" fill="rgb(230,49,44)"/><text x="90.5080%" y="271.50"></text></g><g><title>mir_for_ctfe (79,750 samples, 0.15%)</title><rect x="90.7154%" y="261" width="0.1505%" height="15" fill="rgb(229,67,23)"/><text x="90.9654%" y="271.50"></text></g><g><title>mir_for_ctfe_of_const_arg (73,510 samples, 0.14%)</title><rect x="90.7272%" y="245" width="0.1387%" height="15" fill="rgb(249,83,47)"/><text x="90.9772%" y="255.50"></text></g><g><title>generate_crate_metadata (1,175,634 samples, 2.22%)</title><rect x="88.8250%" y="277" width="2.2181%" height="15" fill="rgb(215,43,3)"/><text x="89.0750%" y="287.50">g..</text></g><g><title>hir_lowering (1,148,923 samples, 2.17%)</title><rect x="91.0430%" y="277" width="2.1677%" height="15" fill="rgb(238,154,13)"/><text x="91.2930%" y="287.50">h..</text></g><g><title>link (65,800 samples, 0.12%)</title><rect x="93.2107%" y="277" width="0.1241%" height="15" fill="rgb(219,56,2)"/><text x="93.4607%" y="287.50"></text></g><g><title>parse_crate (2,011,702 samples, 3.80%)</title><rect x="93.3349%" y="277" width="3.7955%" height="15" fill="rgb(233,0,4)"/><text x="93.5849%" y="287.50">pars..</text></g><g><title>prepare_outputs (251,292 samples, 0.47%)</title><rect x="97.1490%" y="277" width="0.4741%" height="15" fill="rgb(235,30,7)"/><text x="97.3990%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (687,177 samples, 1.30%)</title><rect x="97.6232%" y="277" width="1.2965%" height="15" fill="rgb(250,79,13)"/><text x="97.8732%" y="287.50"></text></g><g><title>setup_global_ctxt (127,542 samples, 0.24%)</title><rect x="98.9483%" y="277" width="0.2406%" height="15" fill="rgb(211,146,34)"/><text x="99.1983%" y="287.50"></text></g><g><title>all (53,002,148 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (53,002,148 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (429,904 samples, 0.81%)</title><rect x="99.1889%" y="277" width="0.8111%" height="15" fill="rgb(221,155,16)"/><text x="99.4389%" y="287.50"></text></g></svg></svg>