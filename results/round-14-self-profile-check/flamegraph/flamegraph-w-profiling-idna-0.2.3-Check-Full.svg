<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (582,169 samples, 0.10%)</title><rect x="10.5612%" y="101" width="0.1023%" height="15" fill="rgb(227,0,7)"/><text x="10.8112%" y="111.50"></text></g><g><title>is_copy_raw (830,898 samples, 0.15%)</title><rect x="11.4619%" y="69" width="0.1459%" height="15" fill="rgb(217,0,24)"/><text x="11.7119%" y="79.50"></text></g><g><title>evaluate_obligation (690,547 samples, 0.12%)</title><rect x="11.4865%" y="53" width="0.1213%" height="15" fill="rgb(221,193,54)"/><text x="11.7365%" y="63.50"></text></g><g><title>needs_drop_raw (1,510,588 samples, 0.27%)</title><rect x="11.3454%" y="85" width="0.2653%" height="15" fill="rgb(248,212,6)"/><text x="11.5954%" y="95.50"></text></g><g><title>specialization_graph_of (979,844 samples, 0.17%)</title><rect x="11.7080%" y="69" width="0.1721%" height="15" fill="rgb(208,68,35)"/><text x="11.9580%" y="79.50"></text></g><g><title>resolve_instance (1,644,197 samples, 0.29%)</title><rect x="11.6107%" y="85" width="0.2888%" height="15" fill="rgb(232,128,0)"/><text x="11.8607%" y="95.50"></text></g><g><title>thir_body (1,355,113 samples, 0.24%)</title><rect x="11.9049%" y="85" width="0.2380%" height="15" fill="rgb(207,160,47)"/><text x="12.1549%" y="95.50"></text></g><g><title>mir_const (11,123,401 samples, 1.95%)</title><rect x="10.1926%" y="133" width="1.9538%" height="15" fill="rgb(228,23,34)"/><text x="10.4426%" y="143.50">m..</text></g><g><title>unsafety_check_result (9,562,534 samples, 1.68%)</title><rect x="10.4668%" y="117" width="1.6797%" height="15" fill="rgb(218,30,26)"/><text x="10.7168%" y="127.50"></text></g><g><title>mir_built (8,443,101 samples, 1.48%)</title><rect x="10.6634%" y="101" width="1.4830%" height="15" fill="rgb(220,122,19)"/><text x="10.9134%" y="111.50"></text></g><g><title>is_freeze_raw (782,099 samples, 0.14%)</title><rect x="12.8136%" y="117" width="0.1374%" height="15" fill="rgb(250,228,42)"/><text x="13.0636%" y="127.50"></text></g><g><title>evaluate_obligation (764,819 samples, 0.13%)</title><rect x="12.8166%" y="101" width="0.1343%" height="15" fill="rgb(240,193,28)"/><text x="13.0666%" y="111.50"></text></g><g><title>thir_body (19,456,147 samples, 3.42%)</title><rect x="17.4468%" y="69" width="3.4175%" height="15" fill="rgb(216,20,37)"/><text x="17.6968%" y="79.50">thi..</text></g><g><title>lit_to_const (1,400,733 samples, 0.25%)</title><rect x="20.6182%" y="53" width="0.2460%" height="15" fill="rgb(206,188,39)"/><text x="20.8682%" y="63.50"></text></g><g><title>mir_const_qualif (49,636,791 samples, 8.72%)</title><rect x="12.1464%" y="133" width="8.7187%" height="15" fill="rgb(217,207,13)"/><text x="12.3964%" y="143.50">mir_const_qu..</text></g><g><title>mir_const (45,056,611 samples, 7.91%)</title><rect x="12.9509%" y="117" width="7.9142%" height="15" fill="rgb(231,73,38)"/><text x="13.2009%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (43,355,383 samples, 7.62%)</title><rect x="13.2498%" y="101" width="7.6153%" height="15" fill="rgb(225,20,46)"/><text x="13.4998%" y="111.50">unsafety_c..</text></g><g><title>mir_built (41,737,445 samples, 7.33%)</title><rect x="13.5340%" y="85" width="7.3311%" height="15" fill="rgb(210,31,41)"/><text x="13.7840%" y="95.50">mir_built</text></g><g><title>mir_promoted (72,179,020 samples, 12.68%)</title><rect x="8.1870%" y="149" width="12.6782%" height="15" fill="rgb(221,200,47)"/><text x="8.4370%" y="159.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (622,556 samples, 0.11%)</title><rect x="20.8952%" y="149" width="0.1094%" height="15" fill="rgb(226,26,5)"/><text x="21.1452%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,275,393 samples, 0.40%)</title><rect x="21.0846%" y="149" width="0.3997%" height="15" fill="rgb(249,33,26)"/><text x="21.3346%" y="159.50"></text></g><g><title>MIR_borrow_checking (117,341,666 samples, 20.61%)</title><rect x="0.8745%" y="181" width="20.6110%" height="15" fill="rgb(235,183,28)"/><text x="1.1245%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (117,204,444 samples, 20.59%)</title><rect x="0.8986%" y="165" width="20.5869%" height="15" fill="rgb(221,5,38)"/><text x="1.1486%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (868,890 samples, 0.15%)</title><rect x="21.4854%" y="181" width="0.1526%" height="15" fill="rgb(247,18,42)"/><text x="21.7354%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (798,379 samples, 0.14%)</title><rect x="21.4978%" y="165" width="0.1402%" height="15" fill="rgb(241,131,45)"/><text x="21.7478%" y="175.50"></text></g><g><title>hir_module_items (629,517 samples, 0.11%)</title><rect x="21.6380%" y="181" width="0.1106%" height="15" fill="rgb(249,31,29)"/><text x="21.8880%" y="191.50"></text></g><g><title>check_mod_attrs (2,734,620 samples, 0.48%)</title><rect x="21.7525%" y="165" width="0.4803%" height="15" fill="rgb(225,111,53)"/><text x="22.0025%" y="175.50"></text></g><g><title>lint_levels (1,429,956 samples, 0.25%)</title><rect x="22.5241%" y="149" width="0.2512%" height="15" fill="rgb(238,160,17)"/><text x="22.7741%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,739,421 samples, 0.48%)</title><rect x="22.3798%" y="165" width="0.4812%" height="15" fill="rgb(214,148,48)"/><text x="22.6298%" y="175.50"></text></g><g><title>misc_checking_1 (6,394,412 samples, 1.12%)</title><rect x="21.7487%" y="181" width="1.1232%" height="15" fill="rgb(232,36,49)"/><text x="21.9987%" y="191.50"></text></g><g><title>check_mod_intrinsics (716,958 samples, 0.13%)</title><rect x="22.8737%" y="149" width="0.1259%" height="15" fill="rgb(209,103,24)"/><text x="23.1237%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (2,909,752 samples, 0.51%)</title><rect x="22.8723%" y="165" width="0.5111%" height="15" fill="rgb(229,88,8)"/><text x="23.1223%" y="175.50"></text></g><g><title>check_mod_liveness (2,184,814 samples, 0.38%)</title><rect x="22.9997%" y="149" width="0.3838%" height="15" fill="rgb(213,181,19)"/><text x="23.2497%" y="159.50"></text></g><g><title>misc_checking_2 (4,243,597 samples, 0.75%)</title><rect x="22.8719%" y="181" width="0.7454%" height="15" fill="rgb(254,191,54)"/><text x="23.1219%" y="191.50"></text></g><g><title>match_checking (1,331,245 samples, 0.23%)</title><rect x="23.3834%" y="165" width="0.2338%" height="15" fill="rgb(241,83,37)"/><text x="23.6334%" y="175.50"></text></g><g><title>check_match (1,297,143 samples, 0.23%)</title><rect x="23.3894%" y="149" width="0.2278%" height="15" fill="rgb(233,36,39)"/><text x="23.6394%" y="159.50"></text></g><g><title>death_checking (2,444,007 samples, 0.43%)</title><rect x="23.6977%" y="165" width="0.4293%" height="15" fill="rgb(226,3,54)"/><text x="23.9477%" y="175.50"></text></g><g><title>eval_to_const_value_raw (64,720,821 samples, 11.37%)</title><rect x="27.9145%" y="85" width="11.3682%" height="15" fill="rgb(245,192,40)"/><text x="28.1645%" y="95.50">eval_to_const_val..</text></g><g><title>eval_to_const_value_raw (64,716,541 samples, 11.37%)</title><rect x="27.9152%" y="69" width="11.3674%" height="15" fill="rgb(238,167,29)"/><text x="28.1652%" y="79.50">eval_to_const_val..</text></g><g><title>eval_to_allocation_raw (64,703,811 samples, 11.37%)</title><rect x="27.9175%" y="53" width="11.3652%" height="15" fill="rgb(232,182,51)"/><text x="28.1675%" y="63.50">eval_to_allocatio..</text></g><g><title>promoted_mir (14,940,947 samples, 2.62%)</title><rect x="36.6583%" y="37" width="2.6244%" height="15" fill="rgb(231,60,39)"/><text x="36.9083%" y="47.50">pr..</text></g><g><title>eval_to_allocation_raw (80,993,412 samples, 14.23%)</title><rect x="25.0578%" y="133" width="14.2264%" height="15" fill="rgb(208,69,12)"/><text x="25.3078%" y="143.50">eval_to_allocation_raw</text></g><g><title>eval_to_allocation_raw (80,976,702 samples, 14.22%)</title><rect x="25.0607%" y="117" width="14.2235%" height="15" fill="rgb(235,93,37)"/><text x="25.3107%" y="127.50">eval_to_allocation_raw</text></g><g><title>try_normalize_mir_const_after_erasing_regions (64,760,731 samples, 11.38%)</title><rect x="27.9090%" y="101" width="11.3752%" height="15" fill="rgb(213,116,39)"/><text x="28.1590%" y="111.50">try_normalize_mir..</text></g><g><title>crate_lints (87,859,178 samples, 15.43%)</title><rect x="24.1276%" y="149" width="15.4324%" height="15" fill="rgb(222,207,29)"/><text x="24.3776%" y="159.50">crate_lints</text></g><g><title>type_of (1,256,932 samples, 0.22%)</title><rect x="39.3392%" y="133" width="0.2208%" height="15" fill="rgb(206,96,30)"/><text x="39.5892%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (996,129 samples, 0.17%)</title><rect x="39.3850%" y="117" width="0.1750%" height="15" fill="rgb(218,138,4)"/><text x="39.6350%" y="127.50"></text></g><g><title>lint_checking (94,648,784 samples, 16.62%)</title><rect x="24.1269%" y="165" width="16.6250%" height="15" fill="rgb(250,191,14)"/><text x="24.3769%" y="175.50">lint_checking</text></g><g><title>module_lints (6,785,916 samples, 1.19%)</title><rect x="39.5600%" y="149" width="1.1919%" height="15" fill="rgb(239,60,40)"/><text x="39.8100%" y="159.50"></text></g><g><title>lint_mod (6,779,326 samples, 1.19%)</title><rect x="39.5611%" y="133" width="1.1908%" height="15" fill="rgb(206,27,48)"/><text x="39.8111%" y="143.50"></text></g><g><title>privacy_access_levels (864,989 samples, 0.15%)</title><rect x="40.7519%" y="165" width="0.1519%" height="15" fill="rgb(225,35,8)"/><text x="41.0019%" y="175.50"></text></g><g><title>privacy_checking_modules (8,322,582 samples, 1.46%)</title><rect x="40.9039%" y="165" width="1.4619%" height="15" fill="rgb(250,213,24)"/><text x="41.1539%" y="175.50"></text></g><g><title>check_mod_privacy (8,318,462 samples, 1.46%)</title><rect x="40.9046%" y="149" width="1.4611%" height="15" fill="rgb(247,123,22)"/><text x="41.1546%" y="159.50"></text></g><g><title>misc_checking_3 (106,763,327 samples, 18.75%)</title><rect x="23.6173%" y="181" width="18.7529%" height="15" fill="rgb(231,138,38)"/><text x="23.8673%" y="191.50">misc_checking_3</text></g><g><title>impl_parent (2,154,512 samples, 0.38%)</title><rect x="43.0682%" y="117" width="0.3784%" height="15" fill="rgb(231,145,46)"/><text x="43.3182%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,310,304 samples, 0.23%)</title><rect x="43.2164%" y="101" width="0.2302%" height="15" fill="rgb(251,118,11)"/><text x="43.4664%" y="111.50"></text></g><g><title>impl_trait_ref (5,216,008 samples, 0.92%)</title><rect x="43.4466%" y="117" width="0.9162%" height="15" fill="rgb(217,147,25)"/><text x="43.6966%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,361,446 samples, 0.77%)</title><rect x="43.5967%" y="101" width="0.7661%" height="15" fill="rgb(247,81,37)"/><text x="43.8467%" y="111.50"></text></g><g><title>trait_impls_of (685,636 samples, 0.12%)</title><rect x="44.3680%" y="117" width="0.1204%" height="15" fill="rgb(209,12,38)"/><text x="44.6180%" y="127.50"></text></g><g><title>coherent_trait (11,968,104 samples, 2.10%)</title><rect x="42.3864%" y="149" width="2.1022%" height="15" fill="rgb(227,1,9)"/><text x="42.6364%" y="159.50">c..</text></g><g><title>specialization_graph_of (11,491,478 samples, 2.02%)</title><rect x="42.4701%" y="133" width="2.0185%" height="15" fill="rgb(248,47,43)"/><text x="42.7201%" y="143.50">s..</text></g><g><title>coherence_checking (12,059,014 samples, 2.12%)</title><rect x="42.3826%" y="165" width="2.1182%" height="15" fill="rgb(221,10,30)"/><text x="42.6326%" y="175.50">c..</text></g><g><title>dropck_outlives (731,427 samples, 0.13%)</title><rect x="47.3485%" y="117" width="0.1285%" height="15" fill="rgb(210,229,1)"/><text x="47.5985%" y="127.50"></text></g><g><title>evaluate_obligation (3,931,176 samples, 0.69%)</title><rect x="47.4769%" y="117" width="0.6905%" height="15" fill="rgb(222,148,37)"/><text x="47.7269%" y="127.50"></text></g><g><title>associated_item (612,775 samples, 0.11%)</title><rect x="50.8658%" y="85" width="0.1076%" height="15" fill="rgb(234,67,33)"/><text x="51.1158%" y="95.50"></text></g><g><title>associated_items (764,007 samples, 0.13%)</title><rect x="50.8437%" y="101" width="0.1342%" height="15" fill="rgb(247,98,35)"/><text x="51.0937%" y="111.50"></text></g><g><title>generics_of (590,493 samples, 0.10%)</title><rect x="51.4658%" y="85" width="0.1037%" height="15" fill="rgb(247,138,52)"/><text x="51.7158%" y="95.50"></text></g><g><title>evaluate_obligation (4,620,321 samples, 0.81%)</title><rect x="51.0350%" y="101" width="0.8116%" height="15" fill="rgb(213,79,30)"/><text x="51.2850%" y="111.50"></text></g><g><title>generics_of (712,035 samples, 0.13%)</title><rect x="51.8703%" y="101" width="0.1251%" height="15" fill="rgb(246,177,23)"/><text x="52.1203%" y="111.50"></text></g><g><title>impl_trait_ref (719,763 samples, 0.13%)</title><rect x="52.0319%" y="101" width="0.1264%" height="15" fill="rgb(230,62,27)"/><text x="52.2819%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (592,003 samples, 0.10%)</title><rect x="52.0543%" y="85" width="0.1040%" height="15" fill="rgb(216,154,8)"/><text x="52.3043%" y="95.50"></text></g><g><title>typeck (22,497,821 samples, 3.95%)</title><rect x="48.4305%" y="117" width="3.9517%" height="15" fill="rgb(244,35,45)"/><text x="48.6805%" y="127.50">type..</text></g><g><title>item_bodies_checking (44,882,789 samples, 7.88%)</title><rect x="44.5054%" y="165" width="7.8836%" height="15" fill="rgb(251,115,12)"/><text x="44.7554%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (44,878,349 samples, 7.88%)</title><rect x="44.5062%" y="149" width="7.8828%" height="15" fill="rgb(240,54,50)"/><text x="44.7562%" y="159.50">typeck_item..</text></g><g><title>typeck (44,815,638 samples, 7.87%)</title><rect x="44.5172%" y="133" width="7.8718%" height="15" fill="rgb(233,84,52)"/><text x="44.7672%" y="143.50">typeck</text></g><g><title>impl_trait_ref (900,411 samples, 0.16%)</title><rect x="69.5363%" y="101" width="0.1582%" height="15" fill="rgb(207,117,47)"/><text x="69.7863%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (756,049 samples, 0.13%)</title><rect x="69.5616%" y="85" width="0.1328%" height="15" fill="rgb(249,43,39)"/><text x="69.8116%" y="95.50"></text></g><g><title>predicates_of (601,917 samples, 0.11%)</title><rect x="69.7003%" y="101" width="0.1057%" height="15" fill="rgb(209,38,44)"/><text x="69.9503%" y="111.50"></text></g><g><title>specializes (1,885,932 samples, 0.33%)</title><rect x="69.8061%" y="101" width="0.3313%" height="15" fill="rgb(236,212,23)"/><text x="70.0561%" y="111.50"></text></g><g><title>param_env (1,096,078 samples, 0.19%)</title><rect x="69.9448%" y="85" width="0.1925%" height="15" fill="rgb(242,79,21)"/><text x="70.1948%" y="95.50"></text></g><g><title>evaluate_obligation (5,994,777 samples, 1.05%)</title><rect x="69.0988%" y="117" width="1.0530%" height="15" fill="rgb(211,96,35)"/><text x="69.3488%" y="127.50"></text></g><g><title>item_types_checking (101,473,909 samples, 17.82%)</title><rect x="52.3890%" y="165" width="17.8238%" height="15" fill="rgb(253,215,40)"/><text x="52.6390%" y="175.50">item_types_checking</text></g><g><title>check_mod_item_types (101,467,839 samples, 17.82%)</title><rect x="52.3901%" y="149" width="17.8227%" height="15" fill="rgb(211,81,21)"/><text x="52.6401%" y="159.50">check_mod_item_types</text></g><g><title>typeck (100,568,559 samples, 17.66%)</title><rect x="52.5480%" y="133" width="17.6648%" height="15" fill="rgb(208,190,38)"/><text x="52.7980%" y="143.50">typeck</text></g><g><title>named_region_map (638,527 samples, 0.11%)</title><rect x="70.5944%" y="117" width="0.1122%" height="15" fill="rgb(235,213,38)"/><text x="70.8444%" y="127.50"></text></g><g><title>resolve_lifetimes (632,117 samples, 0.11%)</title><rect x="70.5955%" y="101" width="0.1110%" height="15" fill="rgb(237,122,38)"/><text x="70.8455%" y="111.50"></text></g><g><title>type_collecting (2,809,880 samples, 0.49%)</title><rect x="70.2131%" y="165" width="0.4936%" height="15" fill="rgb(244,218,35)"/><text x="70.4631%" y="175.50"></text></g><g><title>collect_mod_item_types (2,800,090 samples, 0.49%)</title><rect x="70.2148%" y="149" width="0.4918%" height="15" fill="rgb(240,68,47)"/><text x="70.4648%" y="159.50"></text></g><g><title>type_of (702,919 samples, 0.12%)</title><rect x="70.5832%" y="133" width="0.1235%" height="15" fill="rgb(210,16,53)"/><text x="70.8332%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,603,327 samples, 0.28%)</title><rect x="70.7797%" y="149" width="0.2816%" height="15" fill="rgb(235,124,12)"/><text x="71.0297%" y="159.50"></text></g><g><title>region_scope_tree (2,717,592 samples, 0.48%)</title><rect x="71.4234%" y="133" width="0.4773%" height="15" fill="rgb(224,169,11)"/><text x="71.6734%" y="143.50"></text></g><g><title>analysis (407,567,585 samples, 71.59%)</title><rect x="0.3225%" y="197" width="71.5889%" height="15" fill="rgb(250,166,2)"/><text x="0.5725%" y="207.50">analysis</text></g><g><title>type_check_crate (168,183,041 samples, 29.54%)</title><rect x="42.3702%" y="181" width="29.5412%" height="15" fill="rgb(242,216,29)"/><text x="42.6202%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,852,757 samples, 1.20%)</title><rect x="70.7077%" y="165" width="1.2037%" height="15" fill="rgb(230,116,27)"/><text x="70.9577%" y="175.50"></text></g><g><title>check_item_well_formed (4,839,276 samples, 0.85%)</title><rect x="71.0613%" y="149" width="0.8500%" height="15" fill="rgb(228,99,48)"/><text x="71.3113%" y="159.50"></text></g><g><title>AST_validation (957,891 samples, 0.17%)</title><rect x="72.0285%" y="181" width="0.1683%" height="15" fill="rgb(253,11,6)"/><text x="72.2785%" y="191.50"></text></g><g><title>complete_gated_feature_checking (803,409 samples, 0.14%)</title><rect x="72.1967%" y="181" width="0.1411%" height="15" fill="rgb(247,143,39)"/><text x="72.4467%" y="191.50"></text></g><g><title>metadata_register_crate (2,484,268 samples, 0.44%)</title><rect x="88.1882%" y="149" width="0.4364%" height="15" fill="rgb(236,97,10)"/><text x="88.4382%" y="159.50"></text></g><g><title>metadata_register_crate (931,811 samples, 0.16%)</title><rect x="88.4609%" y="133" width="0.1637%" height="15" fill="rgb(233,208,19)"/><text x="88.7109%" y="143.50"></text></g><g><title>macro_expand_crate (93,128,026 samples, 16.36%)</title><rect x="72.3509%" y="181" width="16.3579%" height="15" fill="rgb(216,164,2)"/><text x="72.6009%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (93,102,056 samples, 16.35%)</title><rect x="72.3555%" y="165" width="16.3533%" height="15" fill="rgb(220,129,5)"/><text x="72.6055%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (8,651,636 samples, 1.52%)</title><rect x="88.7598%" y="165" width="1.5197%" height="15" fill="rgb(242,17,10)"/><text x="89.0098%" y="175.50"></text></g><g><title>resolve_check_unused (1,342,155 samples, 0.24%)</title><rect x="90.2820%" y="165" width="0.2357%" height="15" fill="rgb(242,107,0)"/><text x="90.5320%" y="175.50"></text></g><g><title>resolve_postprocess (1,019,971 samples, 0.18%)</title><rect x="90.5178%" y="165" width="0.1792%" height="15" fill="rgb(251,28,31)"/><text x="90.7678%" y="175.50"></text></g><g><title>configure_and_expand (106,474,174 samples, 18.70%)</title><rect x="71.9951%" y="197" width="18.7021%" height="15" fill="rgb(233,223,10)"/><text x="72.2451%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (11,249,655 samples, 1.98%)</title><rect x="88.7212%" y="181" width="1.9760%" height="15" fill="rgb(215,21,27)"/><text x="88.9712%" y="191.50">r..</text></g><g><title>drop_ast (1,700,599 samples, 0.30%)</title><rect x="90.6972%" y="197" width="0.2987%" height="15" fill="rgb(232,23,21)"/><text x="90.9472%" y="207.50"></text></g><g><title>early_lint_checks (6,333,721 samples, 1.11%)</title><rect x="90.9995%" y="197" width="1.1125%" height="15" fill="rgb(244,5,23)"/><text x="91.2495%" y="207.50"></text></g><g><title>free_global_ctxt (7,786,316 samples, 1.37%)</title><rect x="92.1120%" y="197" width="1.3677%" height="15" fill="rgb(226,81,46)"/><text x="92.3620%" y="207.50"></text></g><g><title>generate_crate_metadata (9,835,429 samples, 1.73%)</title><rect x="93.4797%" y="197" width="1.7276%" height="15" fill="rgb(247,70,30)"/><text x="93.7297%" y="207.50"></text></g><g><title>hir_lowering (23,536,422 samples, 4.13%)</title><rect x="95.2073%" y="197" width="4.1342%" height="15" fill="rgb(212,68,19)"/><text x="95.4573%" y="207.50">hir_l..</text></g><g><title>parse_crate (598,237 samples, 0.11%)</title><rect x="99.3560%" y="197" width="0.1051%" height="15" fill="rgb(240,187,13)"/><text x="99.6060%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,288,135 samples, 0.23%)</title><rect x="99.5033%" y="197" width="0.2263%" height="15" fill="rgb(223,113,26)"/><text x="99.7533%" y="207.50"></text></g><g><title>all (569,316,815 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (569,316,815 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,425,576 samples, 0.25%)</title><rect x="99.7496%" y="197" width="0.2504%" height="15" fill="rgb(247,173,49)"/><text x="99.9996%" y="207.50"></text></g></svg></svg>