<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (407,115 samples, 0.18%)</title><rect x="12.2070%" y="149" width="0.1802%" height="15" fill="rgb(227,0,7)"/><text x="12.4570%" y="159.50"></text></g><g><title>param_env (366,175 samples, 0.16%)</title><rect x="13.8190%" y="117" width="0.1621%" height="15" fill="rgb(217,0,24)"/><text x="14.0690%" y="127.50"></text></g><g><title>item_attrs (404,034 samples, 0.18%)</title><rect x="14.4338%" y="85" width="0.1789%" height="15" fill="rgb(221,193,54)"/><text x="14.6838%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (391,894 samples, 0.17%)</title><rect x="14.4391%" y="69" width="0.1735%" height="15" fill="rgb(248,212,6)"/><text x="14.6891%" y="79.50"></text></g><g><title>codegen_fn_attrs (544,666 samples, 0.24%)</title><rect x="14.3837%" y="101" width="0.2411%" height="15" fill="rgb(208,68,35)"/><text x="14.6337%" y="111.50"></text></g><g><title>is_copy_raw (334,775 samples, 0.15%)</title><rect x="17.6362%" y="85" width="0.1482%" height="15" fill="rgb(232,128,0)"/><text x="17.8862%" y="95.50"></text></g><g><title>evaluate_obligation (249,654 samples, 0.11%)</title><rect x="17.6739%" y="69" width="0.1105%" height="15" fill="rgb(207,160,47)"/><text x="17.9239%" y="79.50"></text></g><g><title>is_copy_raw (1,005,778 samples, 0.45%)</title><rect x="17.9490%" y="69" width="0.4453%" height="15" fill="rgb(228,23,34)"/><text x="18.1990%" y="79.50"></text></g><g><title>evaluate_obligation (850,975 samples, 0.38%)</title><rect x="18.0175%" y="53" width="0.3767%" height="15" fill="rgb(218,30,26)"/><text x="18.2675%" y="63.50"></text></g><g><title>needs_drop_raw (1,372,082 samples, 0.61%)</title><rect x="17.7882%" y="85" width="0.6074%" height="15" fill="rgb(220,122,19)"/><text x="18.0382%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (275,264 samples, 0.12%)</title><rect x="18.4914%" y="69" width="0.1219%" height="15" fill="rgb(250,228,42)"/><text x="18.7414%" y="79.50"></text></g><g><title>specialization_graph_of (1,216,173 samples, 0.54%)</title><rect x="18.6554%" y="69" width="0.5384%" height="15" fill="rgb(240,193,28)"/><text x="18.9054%" y="79.50"></text></g><g><title>impl_trait_ref (477,497 samples, 0.21%)</title><rect x="18.9824%" y="53" width="0.2114%" height="15" fill="rgb(216,20,37)"/><text x="19.2324%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (414,696 samples, 0.18%)</title><rect x="19.0102%" y="37" width="0.1836%" height="15" fill="rgb(206,188,39)"/><text x="19.2602%" y="47.50"></text></g><g><title>resolve_instance (1,887,111 samples, 0.84%)</title><rect x="18.3956%" y="85" width="0.8354%" height="15" fill="rgb(217,207,13)"/><text x="18.6456%" y="95.50"></text></g><g><title>thir_body (2,674,139 samples, 1.18%)</title><rect x="19.2605%" y="85" width="1.1838%" height="15" fill="rgb(231,73,38)"/><text x="19.5105%" y="95.50"></text></g><g><title>mir_const (16,714,764 samples, 7.40%)</title><rect x="13.0883%" y="133" width="7.3996%" height="15" fill="rgb(225,20,46)"/><text x="13.3383%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (14,698,032 samples, 6.51%)</title><rect x="13.9811%" y="117" width="6.5068%" height="15" fill="rgb(210,31,41)"/><text x="14.2311%" y="127.50">unsafety_..</text></g><g><title>mir_built (13,243,946 samples, 5.86%)</title><rect x="14.6248%" y="101" width="5.8631%" height="15" fill="rgb(221,200,47)"/><text x="14.8748%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (18,311,420 samples, 8.11%)</title><rect x="12.4202%" y="149" width="8.1064%" height="15" fill="rgb(226,26,5)"/><text x="12.6702%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,103,993 samples, 0.49%)</title><rect x="20.5268%" y="149" width="0.4887%" height="15" fill="rgb(249,33,26)"/><text x="20.7768%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,162,632 samples, 0.51%)</title><rect x="21.0155%" y="149" width="0.5147%" height="15" fill="rgb(235,183,28)"/><text x="21.2655%" y="159.50"></text></g><g><title>normalize_projection_ty (645,015 samples, 0.29%)</title><rect x="21.2447%" y="133" width="0.2855%" height="15" fill="rgb(221,5,38)"/><text x="21.4947%" y="143.50"></text></g><g><title>type_op_normalize_predicate (468,984 samples, 0.21%)</title><rect x="21.5302%" y="149" width="0.2076%" height="15" fill="rgb(247,18,42)"/><text x="21.7802%" y="159.50"></text></g><g><title>normalize_projection_ty (238,342 samples, 0.11%)</title><rect x="21.6323%" y="133" width="0.1055%" height="15" fill="rgb(241,131,45)"/><text x="21.8823%" y="143.50"></text></g><g><title>type_op_normalize_ty (412,978 samples, 0.18%)</title><rect x="21.7378%" y="149" width="0.1828%" height="15" fill="rgb(249,31,29)"/><text x="21.9878%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,057,802 samples, 1.80%)</title><rect x="21.9207%" y="149" width="1.7964%" height="15" fill="rgb(225,111,53)"/><text x="22.1707%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (52,297,405 samples, 23.15%)</title><rect x="0.5756%" y="181" width="23.1520%" height="15" fill="rgb(238,160,17)"/><text x="0.8256%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (52,145,232 samples, 23.08%)</title><rect x="0.6429%" y="165" width="23.0846%" height="15" fill="rgb(214,148,48)"/><text x="0.8929%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (243,432 samples, 0.11%)</title><rect x="23.7893%" y="181" width="0.1078%" height="15" fill="rgb(232,36,49)"/><text x="24.0393%" y="191.50"></text></g><g><title>should_inherit_track_caller (227,791 samples, 0.10%)</title><rect x="24.1770%" y="133" width="0.1008%" height="15" fill="rgb(209,103,24)"/><text x="24.4270%" y="143.50"></text></g><g><title>codegen_fn_attrs (431,115 samples, 0.19%)</title><rect x="24.0976%" y="149" width="0.1909%" height="15" fill="rgb(229,88,8)"/><text x="24.3476%" y="159.50"></text></g><g><title>check_mod_attrs (846,878 samples, 0.37%)</title><rect x="23.9137%" y="165" width="0.3749%" height="15" fill="rgb(213,181,19)"/><text x="24.1637%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (494,306 samples, 0.22%)</title><rect x="24.4294%" y="165" width="0.2188%" height="15" fill="rgb(254,191,54)"/><text x="24.6794%" y="175.50"></text></g><g><title>misc_checking_1 (1,763,150 samples, 0.78%)</title><rect x="23.8973%" y="181" width="0.7805%" height="15" fill="rgb(241,83,37)"/><text x="24.1473%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,121,763 samples, 0.50%)</title><rect x="24.6786%" y="165" width="0.4966%" height="15" fill="rgb(233,36,39)"/><text x="24.9286%" y="175.50"></text></g><g><title>check_mod_liveness (915,140 samples, 0.41%)</title><rect x="24.7701%" y="149" width="0.4051%" height="15" fill="rgb(226,3,54)"/><text x="25.0201%" y="159.50"></text></g><g><title>misc_checking_2 (2,383,697 samples, 1.06%)</title><rect x="24.6779%" y="181" width="1.0553%" height="15" fill="rgb(245,192,40)"/><text x="24.9279%" y="191.50"></text></g><g><title>match_checking (1,260,174 samples, 0.56%)</title><rect x="25.1752%" y="165" width="0.5579%" height="15" fill="rgb(238,167,29)"/><text x="25.4252%" y="175.50"></text></g><g><title>check_match (1,219,334 samples, 0.54%)</title><rect x="25.1933%" y="149" width="0.5398%" height="15" fill="rgb(232,182,51)"/><text x="25.4433%" y="159.50"></text></g><g><title>check_private_in_public (276,503 samples, 0.12%)</title><rect x="25.7377%" y="165" width="0.1224%" height="15" fill="rgb(231,60,39)"/><text x="25.9877%" y="175.50"></text></g><g><title>death_checking (611,007 samples, 0.27%)</title><rect x="25.8602%" y="165" width="0.2705%" height="15" fill="rgb(208,69,12)"/><text x="26.1102%" y="175.50"></text></g><g><title>param_env (312,202 samples, 0.14%)</title><rect x="26.5897%" y="133" width="0.1382%" height="15" fill="rgb(235,93,37)"/><text x="26.8397%" y="143.50"></text></g><g><title>crate_lints (2,541,428 samples, 1.13%)</title><rect x="26.1313%" y="149" width="1.1251%" height="15" fill="rgb(213,116,39)"/><text x="26.3813%" y="159.50"></text></g><g><title>type_of (1,096,692 samples, 0.49%)</title><rect x="26.7709%" y="133" width="0.4855%" height="15" fill="rgb(222,207,29)"/><text x="27.0209%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (868,060 samples, 0.38%)</title><rect x="26.8721%" y="117" width="0.3843%" height="15" fill="rgb(206,96,30)"/><text x="27.1221%" y="127.50"></text></g><g><title>lint_checking (3,596,880 samples, 1.59%)</title><rect x="26.1306%" y="165" width="1.5923%" height="15" fill="rgb(218,138,4)"/><text x="26.3806%" y="175.50"></text></g><g><title>module_lints (1,054,022 samples, 0.47%)</title><rect x="27.2564%" y="149" width="0.4666%" height="15" fill="rgb(250,191,14)"/><text x="27.5064%" y="159.50"></text></g><g><title>lint_mod (1,045,272 samples, 0.46%)</title><rect x="27.2602%" y="133" width="0.4627%" height="15" fill="rgb(239,60,40)"/><text x="27.5102%" y="143.50"></text></g><g><title>privacy_access_levels (388,355 samples, 0.17%)</title><rect x="27.7230%" y="165" width="0.1719%" height="15" fill="rgb(206,27,48)"/><text x="27.9730%" y="175.50"></text></g><g><title>privacy_checking_modules (1,715,819 samples, 0.76%)</title><rect x="27.8949%" y="165" width="0.7596%" height="15" fill="rgb(225,35,8)"/><text x="28.1449%" y="175.50"></text></g><g><title>check_mod_privacy (1,708,469 samples, 0.76%)</title><rect x="27.8982%" y="149" width="0.7563%" height="15" fill="rgb(250,213,24)"/><text x="28.1482%" y="159.50"></text></g><g><title>misc_checking_3 (6,619,734 samples, 2.93%)</title><rect x="25.7331%" y="181" width="2.9305%" height="15" fill="rgb(247,123,22)"/><text x="25.9831%" y="191.50">mi..</text></g><g><title>adt_destructor (305,514 samples, 0.14%)</title><rect x="28.7332%" y="133" width="0.1353%" height="15" fill="rgb(231,138,38)"/><text x="28.9832%" y="143.50"></text></g><g><title>coherent_trait (289,204 samples, 0.13%)</title><rect x="28.7404%" y="117" width="0.1280%" height="15" fill="rgb(231,145,46)"/><text x="28.9904%" y="127.50"></text></g><g><title>specialization_graph_of (288,144 samples, 0.13%)</title><rect x="28.7409%" y="101" width="0.1276%" height="15" fill="rgb(251,118,11)"/><text x="28.9909%" y="111.50"></text></g><g><title>impl_parent (2,837,091 samples, 1.26%)</title><rect x="30.6547%" y="117" width="1.2560%" height="15" fill="rgb(217,147,25)"/><text x="30.9047%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,436,264 samples, 0.64%)</title><rect x="31.2749%" y="101" width="0.6358%" height="15" fill="rgb(247,81,37)"/><text x="31.5249%" y="111.50"></text></g><g><title>impl_trait_ref (5,329,879 samples, 2.36%)</title><rect x="31.9107%" y="117" width="2.3595%" height="15" fill="rgb(209,12,38)"/><text x="32.1607%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,334,049 samples, 1.92%)</title><rect x="32.3516%" y="101" width="1.9187%" height="15" fill="rgb(227,1,9)"/><text x="32.6016%" y="111.50">m..</text></g><g><title>trait_impls_of (760,282 samples, 0.34%)</title><rect x="34.2808%" y="117" width="0.3366%" height="15" fill="rgb(248,47,43)"/><text x="34.5308%" y="127.50"></text></g><g><title>coherent_trait (13,336,659 samples, 5.90%)</title><rect x="28.7136%" y="149" width="5.9041%" height="15" fill="rgb(221,10,30)"/><text x="28.9636%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (12,730,902 samples, 5.64%)</title><rect x="28.9818%" y="133" width="5.6360%" height="15" fill="rgb(210,229,1)"/><text x="29.2318%" y="143.50">special..</text></g><g><title>coherence_checking (13,408,600 samples, 5.94%)</title><rect x="28.7030%" y="165" width="5.9360%" height="15" fill="rgb(222,148,37)"/><text x="28.9530%" y="175.50">coherenc..</text></g><g><title>associated_item (300,043 samples, 0.13%)</title><rect x="46.8773%" y="101" width="0.1328%" height="15" fill="rgb(234,67,33)"/><text x="47.1273%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (243,233 samples, 0.11%)</title><rect x="46.9025%" y="85" width="0.1077%" height="15" fill="rgb(247,98,35)"/><text x="47.1525%" y="95.50"></text></g><g><title>associated_items (433,565 samples, 0.19%)</title><rect x="46.8267%" y="117" width="0.1919%" height="15" fill="rgb(247,138,52)"/><text x="47.0767%" y="127.50"></text></g><g><title>dropck_outlives (371,133 samples, 0.16%)</title><rect x="47.0367%" y="117" width="0.1643%" height="15" fill="rgb(213,79,30)"/><text x="47.2867%" y="127.50"></text></g><g><title>evaluate_obligation (3,561,191 samples, 1.58%)</title><rect x="47.2010%" y="117" width="1.5765%" height="15" fill="rgb(246,177,23)"/><text x="47.4510%" y="127.50"></text></g><g><title>item_attrs (433,574 samples, 0.19%)</title><rect x="48.9014%" y="117" width="0.1919%" height="15" fill="rgb(230,62,27)"/><text x="49.1514%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (429,534 samples, 0.19%)</title><rect x="48.9032%" y="101" width="0.1902%" height="15" fill="rgb(216,154,8)"/><text x="49.1532%" y="111.50"></text></g><g><title>method_autoderef_steps (303,826 samples, 0.13%)</title><rect x="49.1196%" y="117" width="0.1345%" height="15" fill="rgb(244,35,45)"/><text x="49.3696%" y="127.50"></text></g><g><title>predicates_of (371,372 samples, 0.16%)</title><rect x="49.2984%" y="117" width="0.1644%" height="15" fill="rgb(251,115,12)"/><text x="49.5484%" y="127.50"></text></g><g><title>associated_item (549,005 samples, 0.24%)</title><rect x="62.4128%" y="85" width="0.2430%" height="15" fill="rgb(240,54,50)"/><text x="62.6628%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (440,605 samples, 0.20%)</title><rect x="62.4608%" y="69" width="0.1951%" height="15" fill="rgb(233,84,52)"/><text x="62.7108%" y="79.50"></text></g><g><title>associated_items (770,948 samples, 0.34%)</title><rect x="62.3347%" y="101" width="0.3413%" height="15" fill="rgb(207,117,47)"/><text x="62.5847%" y="111.50"></text></g><g><title>dropck_outlives (415,834 samples, 0.18%)</title><rect x="62.7073%" y="101" width="0.1841%" height="15" fill="rgb(249,43,39)"/><text x="62.9573%" y="111.50"></text></g><g><title>generics_of (1,026,659 samples, 0.45%)</title><rect x="64.5577%" y="85" width="0.4545%" height="15" fill="rgb(209,38,44)"/><text x="64.8077%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (822,867 samples, 0.36%)</title><rect x="64.6479%" y="69" width="0.3643%" height="15" fill="rgb(236,212,23)"/><text x="64.8979%" y="79.50"></text></g><g><title>impl_trait_ref (801,702 samples, 0.35%)</title><rect x="65.0681%" y="85" width="0.3549%" height="15" fill="rgb(242,79,21)"/><text x="65.3181%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (659,530 samples, 0.29%)</title><rect x="65.1311%" y="69" width="0.2920%" height="15" fill="rgb(211,96,35)"/><text x="65.3811%" y="79.50"></text></g><g><title>predicates_of (329,233 samples, 0.15%)</title><rect x="65.4373%" y="85" width="0.1458%" height="15" fill="rgb(253,215,40)"/><text x="65.6873%" y="95.50"></text></g><g><title>specializes (611,518 samples, 0.27%)</title><rect x="65.5830%" y="85" width="0.2707%" height="15" fill="rgb(211,81,21)"/><text x="65.8330%" y="95.50"></text></g><g><title>param_env (422,597 samples, 0.19%)</title><rect x="65.6667%" y="69" width="0.1871%" height="15" fill="rgb(208,190,38)"/><text x="65.9167%" y="79.50"></text></g><g><title>trait_impls_of (280,922 samples, 0.12%)</title><rect x="65.8597%" y="85" width="0.1244%" height="15" fill="rgb(235,213,38)"/><text x="66.1097%" y="95.50"></text></g><g><title>evaluate_obligation (7,031,662 samples, 3.11%)</title><rect x="62.8914%" y="101" width="3.1129%" height="15" fill="rgb(237,122,38)"/><text x="63.1414%" y="111.50">eva..</text></g><g><title>generics_of (716,005 samples, 0.32%)</title><rect x="66.0680%" y="101" width="0.3170%" height="15" fill="rgb(244,218,35)"/><text x="66.3180%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (560,542 samples, 0.25%)</title><rect x="66.1368%" y="85" width="0.2482%" height="15" fill="rgb(240,68,47)"/><text x="66.3868%" y="95.50"></text></g><g><title>is_copy_raw (371,835 samples, 0.16%)</title><rect x="66.5604%" y="101" width="0.1646%" height="15" fill="rgb(210,16,53)"/><text x="66.8104%" y="111.50"></text></g><g><title>evaluate_obligation (314,222 samples, 0.14%)</title><rect x="66.5859%" y="85" width="0.1391%" height="15" fill="rgb(235,124,12)"/><text x="66.8359%" y="95.50"></text></g><g><title>evaluate_obligation (275,182 samples, 0.12%)</title><rect x="66.8959%" y="85" width="0.1218%" height="15" fill="rgb(224,169,11)"/><text x="67.1459%" y="95.50"></text></g><g><title>method_autoderef_steps (536,267 samples, 0.24%)</title><rect x="66.7846%" y="101" width="0.2374%" height="15" fill="rgb(250,166,2)"/><text x="67.0346%" y="111.50"></text></g><g><title>predicates_of (461,662 samples, 0.20%)</title><rect x="67.0334%" y="101" width="0.2044%" height="15" fill="rgb(242,216,29)"/><text x="67.2834%" y="111.50"></text></g><g><title>predicates_defined_on (349,892 samples, 0.15%)</title><rect x="67.0829%" y="85" width="0.1549%" height="15" fill="rgb(230,116,27)"/><text x="67.3329%" y="95.50"></text></g><g><title>typeck (40,339,471 samples, 17.86%)</title><rect x="49.5051%" y="117" width="17.8582%" height="15" fill="rgb(228,99,48)"/><text x="49.7551%" y="127.50">typeck</text></g><g><title>item_bodies_checking (73,931,708 samples, 32.73%)</title><rect x="34.6535%" y="165" width="32.7295%" height="15" fill="rgb(253,11,6)"/><text x="34.9035%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (73,928,328 samples, 32.73%)</title><rect x="34.6550%" y="149" width="32.7280%" height="15" fill="rgb(247,143,39)"/><text x="34.9050%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (73,836,238 samples, 32.69%)</title><rect x="34.6957%" y="133" width="32.6872%" height="15" fill="rgb(236,97,10)"/><text x="34.9457%" y="143.50">typeck</text></g><g><title>item_types_checking (465,535 samples, 0.21%)</title><rect x="67.3830%" y="165" width="0.2061%" height="15" fill="rgb(233,208,19)"/><text x="67.6330%" y="175.50"></text></g><g><title>check_mod_item_types (458,725 samples, 0.20%)</title><rect x="67.3860%" y="149" width="0.2031%" height="15" fill="rgb(216,164,2)"/><text x="67.6360%" y="159.50"></text></g><g><title>fn_sig (488,683 samples, 0.22%)</title><rect x="67.7572%" y="133" width="0.2163%" height="15" fill="rgb(220,129,5)"/><text x="68.0072%" y="143.50"></text></g><g><title>named_region_map (283,912 samples, 0.13%)</title><rect x="68.1012%" y="117" width="0.1257%" height="15" fill="rgb(242,17,10)"/><text x="68.3512%" y="127.50"></text></g><g><title>resolve_lifetimes (258,781 samples, 0.11%)</title><rect x="68.1123%" y="101" width="0.1146%" height="15" fill="rgb(242,107,0)"/><text x="68.3623%" y="111.50"></text></g><g><title>generics_of (595,085 samples, 0.26%)</title><rect x="67.9735%" y="133" width="0.2634%" height="15" fill="rgb(251,28,31)"/><text x="68.2235%" y="143.50"></text></g><g><title>late_bound_vars_map (404,195 samples, 0.18%)</title><rect x="68.5330%" y="85" width="0.1789%" height="15" fill="rgb(233,223,10)"/><text x="68.7830%" y="95.50"></text></g><g><title>resolve_lifetimes (394,365 samples, 0.17%)</title><rect x="68.5374%" y="69" width="0.1746%" height="15" fill="rgb(215,21,27)"/><text x="68.7874%" y="79.50"></text></g><g><title>lint_levels (270,963 samples, 0.12%)</title><rect x="68.5920%" y="53" width="0.1200%" height="15" fill="rgb(232,23,21)"/><text x="68.8420%" y="63.50"></text></g><g><title>explicit_predicates_of (745,790 samples, 0.33%)</title><rect x="68.4013%" y="101" width="0.3302%" height="15" fill="rgb(244,5,23)"/><text x="68.6513%" y="111.50"></text></g><g><title>predicates_of (1,251,588 samples, 0.55%)</title><rect x="68.3359%" y="133" width="0.5541%" height="15" fill="rgb(226,81,46)"/><text x="68.5859%" y="143.50"></text></g><g><title>predicates_defined_on (1,197,858 samples, 0.53%)</title><rect x="68.3597%" y="117" width="0.5303%" height="15" fill="rgb(247,70,30)"/><text x="68.6097%" y="127.50"></text></g><g><title>inferred_outlives_of (358,235 samples, 0.16%)</title><rect x="68.7314%" y="101" width="0.1586%" height="15" fill="rgb(212,68,19)"/><text x="68.9814%" y="111.50"></text></g><g><title>inferred_outlives_crate (333,504 samples, 0.15%)</title><rect x="68.7424%" y="85" width="0.1476%" height="15" fill="rgb(240,187,13)"/><text x="68.9924%" y="95.50"></text></g><g><title>type_of (241,343 samples, 0.11%)</title><rect x="68.7832%" y="69" width="0.1068%" height="15" fill="rgb(223,113,26)"/><text x="69.0332%" y="79.50"></text></g><g><title>type_collecting (3,090,534 samples, 1.37%)</title><rect x="67.5906%" y="165" width="1.3682%" height="15" fill="rgb(206,192,2)"/><text x="67.8406%" y="175.50"></text></g><g><title>collect_mod_item_types (3,077,014 samples, 1.36%)</title><rect x="67.5966%" y="149" width="1.3622%" height="15" fill="rgb(241,108,4)"/><text x="67.8466%" y="159.50"></text></g><g><title>evaluate_obligation (275,175 samples, 0.12%)</title><rect x="69.4034%" y="133" width="0.1218%" height="15" fill="rgb(247,173,49)"/><text x="69.6534%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,409,955 samples, 0.62%)</title><rect x="69.0768%" y="149" width="0.6242%" height="15" fill="rgb(224,114,35)"/><text x="69.3268%" y="159.50"></text></g><g><title>evaluate_obligation (293,234 samples, 0.13%)</title><rect x="70.4659%" y="133" width="0.1298%" height="15" fill="rgb(245,159,27)"/><text x="70.7159%" y="143.50"></text></g><g><title>object_safety_violations (447,625 samples, 0.20%)</title><rect x="70.6855%" y="133" width="0.1982%" height="15" fill="rgb(245,172,44)"/><text x="70.9355%" y="143.50"></text></g><g><title>param_env (284,434 samples, 0.13%)</title><rect x="70.8837%" y="133" width="0.1259%" height="15" fill="rgb(236,23,11)"/><text x="71.1337%" y="143.50"></text></g><g><title>region_scope_tree (681,357 samples, 0.30%)</title><rect x="71.0523%" y="133" width="0.3016%" height="15" fill="rgb(205,117,38)"/><text x="71.3023%" y="143.50"></text></g><g><title>check_item_well_formed (3,957,685 samples, 1.75%)</title><rect x="69.7010%" y="149" width="1.7521%" height="15" fill="rgb(237,72,25)"/><text x="69.9510%" y="159.50"></text></g><g><title>analysis (162,716,281 samples, 72.03%)</title><rect x="0.3357%" y="197" width="72.0343%" height="15" fill="rgb(244,70,9)"/><text x="0.5857%" y="207.50">analysis</text></g><g><title>type_check_crate (98,727,015 samples, 43.71%)</title><rect x="28.6637%" y="181" width="43.7063%" height="15" fill="rgb(217,125,39)"/><text x="28.9137%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,699,656 samples, 3.41%)</title><rect x="68.9614%" y="165" width="3.4086%" height="15" fill="rgb(235,36,10)"/><text x="69.2114%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (2,071,224 samples, 0.92%)</title><rect x="71.4531%" y="149" width="0.9169%" height="15" fill="rgb(251,123,47)"/><text x="71.7031%" y="159.50"></text></g><g><title>codegen_crate (411,515 samples, 0.18%)</title><rect x="72.3760%" y="197" width="0.1822%" height="15" fill="rgb(221,13,13)"/><text x="72.6260%" y="207.50"></text></g><g><title>AST_validation (402,175 samples, 0.18%)</title><rect x="72.6703%" y="181" width="0.1780%" height="15" fill="rgb(238,131,9)"/><text x="72.9203%" y="191.50"></text></g><g><title>metadata_load_macro (285,062 samples, 0.13%)</title><rect x="87.6415%" y="149" width="0.1262%" height="15" fill="rgb(211,50,8)"/><text x="87.8915%" y="159.50"></text></g><g><title>metadata_register_crate (2,700,340 samples, 1.20%)</title><rect x="87.7677%" y="149" width="1.1954%" height="15" fill="rgb(245,182,24)"/><text x="88.0177%" y="159.50"></text></g><g><title>metadata_register_crate (973,761 samples, 0.43%)</title><rect x="88.5320%" y="133" width="0.4311%" height="15" fill="rgb(242,14,37)"/><text x="88.7820%" y="143.50"></text></g><g><title>macro_expand_crate (36,799,762 samples, 16.29%)</title><rect x="72.9883%" y="181" width="16.2912%" height="15" fill="rgb(246,228,12)"/><text x="73.2383%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (36,766,682 samples, 16.28%)</title><rect x="73.0029%" y="165" width="16.2766%" height="15" fill="rgb(213,55,15)"/><text x="73.2529%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (714,760 samples, 0.32%)</title><rect x="88.9631%" y="149" width="0.3164%" height="15" fill="rgb(209,9,3)"/><text x="89.2131%" y="159.50"></text></g><g><title>finalize_macro_resolutions (307,243 samples, 0.14%)</title><rect x="89.4288%" y="165" width="0.1360%" height="15" fill="rgb(230,59,30)"/><text x="89.6788%" y="175.50"></text></g><g><title>late_resolve_crate (6,096,539 samples, 2.70%)</title><rect x="89.5648%" y="165" width="2.6989%" height="15" fill="rgb(209,121,21)"/><text x="89.8148%" y="175.50">la..</text></g><g><title>configure_and_expand (44,896,053 samples, 19.88%)</title><rect x="72.5582%" y="197" width="19.8754%" height="15" fill="rgb(220,109,13)"/><text x="72.8082%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (6,930,747 samples, 3.07%)</title><rect x="89.3654%" y="181" width="3.0682%" height="15" fill="rgb(232,18,1)"/><text x="89.6154%" y="191.50">res..</text></g><g><title>drop_ast (321,584 samples, 0.14%)</title><rect x="92.4337%" y="197" width="0.1424%" height="15" fill="rgb(215,41,42)"/><text x="92.6837%" y="207.50"></text></g><g><title>early_lint_checks (699,608 samples, 0.31%)</title><rect x="92.5828%" y="197" width="0.3097%" height="15" fill="rgb(224,123,36)"/><text x="92.8328%" y="207.50"></text></g><g><title>free_global_ctxt (4,358,849 samples, 1.93%)</title><rect x="92.8925%" y="197" width="1.9297%" height="15" fill="rgb(240,125,3)"/><text x="93.1425%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,461,216 samples, 0.65%)</title><rect x="94.8222%" y="197" width="0.6469%" height="15" fill="rgb(205,98,50)"/><text x="95.0722%" y="207.50"></text></g><g><title>hir_lowering (5,345,239 samples, 2.37%)</title><rect x="95.4690%" y="197" width="2.3663%" height="15" fill="rgb(205,185,37)"/><text x="95.7190%" y="207.50">hi..</text></g><g><title>parse_crate (3,023,884 samples, 1.34%)</title><rect x="97.8660%" y="197" width="1.3387%" height="15" fill="rgb(238,207,15)"/><text x="98.1160%" y="207.50"></text></g><g><title>prepare_outputs (287,073 samples, 0.13%)</title><rect x="99.2093%" y="197" width="0.1271%" height="15" fill="rgb(213,199,42)"/><text x="99.4593%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,019,631 samples, 0.45%)</title><rect x="99.3364%" y="197" width="0.4514%" height="15" fill="rgb(235,201,11)"/><text x="99.5864%" y="207.50"></text></g><g><title>all (225,887,138 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (225,887,138 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (365,844 samples, 0.16%)</title><rect x="99.8380%" y="197" width="0.1620%" height="15" fill="rgb(243,32,47)"/><text x="100.0880%" y="207.50"></text></g></svg></svg>