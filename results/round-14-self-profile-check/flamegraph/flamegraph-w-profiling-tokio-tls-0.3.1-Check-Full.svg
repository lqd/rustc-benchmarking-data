<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (216,761 samples, 0.23%)</title><rect x="7.3786%" y="213" width="0.2286%" height="15" fill="rgb(227,0,7)"/><text x="7.6286%" y="223.50"></text></g><g><title>codegen_fn_attrs (138,703 samples, 0.15%)</title><rect x="7.8315%" y="197" width="0.1463%" height="15" fill="rgb(217,0,24)"/><text x="8.0815%" y="207.50"></text></g><g><title>adt_drop_tys (133,700 samples, 0.14%)</title><rect x="9.4006%" y="165" width="0.1410%" height="15" fill="rgb(221,193,54)"/><text x="9.6506%" y="175.50"></text></g><g><title>needs_drop_raw (796,642 samples, 0.84%)</title><rect x="9.3051%" y="181" width="0.8400%" height="15" fill="rgb(248,212,6)"/><text x="9.5551%" y="191.50"></text></g><g><title>is_copy_raw (572,409 samples, 0.60%)</title><rect x="9.5416%" y="165" width="0.6036%" height="15" fill="rgb(208,68,35)"/><text x="9.7916%" y="175.50"></text></g><g><title>evaluate_obligation (466,217 samples, 0.49%)</title><rect x="9.6535%" y="149" width="0.4916%" height="15" fill="rgb(232,128,0)"/><text x="9.9035%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (110,430 samples, 0.12%)</title><rect x="10.2702%" y="165" width="0.1164%" height="15" fill="rgb(207,160,47)"/><text x="10.5202%" y="175.50"></text></g><g><title>specialization_graph_of (183,262 samples, 0.19%)</title><rect x="10.4289%" y="165" width="0.1932%" height="15" fill="rgb(228,23,34)"/><text x="10.6789%" y="175.50"></text></g><g><title>resolve_instance (493,465 samples, 0.52%)</title><rect x="10.1451%" y="181" width="0.5203%" height="15" fill="rgb(218,30,26)"/><text x="10.3951%" y="191.50"></text></g><g><title>thir_body (429,416 samples, 0.45%)</title><rect x="10.6859%" y="181" width="0.4528%" height="15" fill="rgb(220,122,19)"/><text x="10.9359%" y="191.50"></text></g><g><title>mir_const (3,934,414 samples, 4.15%)</title><rect x="7.0016%" y="229" width="4.1485%" height="15" fill="rgb(250,228,42)"/><text x="7.2516%" y="239.50">mir_c..</text></g><g><title>unsafety_check_result (3,360,060 samples, 3.54%)</title><rect x="7.6072%" y="213" width="3.5429%" height="15" fill="rgb(240,193,28)"/><text x="7.8572%" y="223.50">unsa..</text></g><g><title>mir_built (3,008,657 samples, 3.17%)</title><rect x="7.9777%" y="197" width="3.1724%" height="15" fill="rgb(216,20,37)"/><text x="8.2277%" y="207.50">mir..</text></g><g><title>mir_promoted (4,335,803 samples, 4.57%)</title><rect x="6.5963%" y="245" width="4.5717%" height="15" fill="rgb(206,188,39)"/><text x="6.8463%" y="255.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (207,232 samples, 0.22%)</title><rect x="11.1680%" y="245" width="0.2185%" height="15" fill="rgb(217,207,13)"/><text x="11.4180%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (183,390 samples, 0.19%)</title><rect x="11.3865%" y="245" width="0.1934%" height="15" fill="rgb(231,73,38)"/><text x="11.6365%" y="255.50"></text></g><g><title>normalize_projection_ty (108,680 samples, 0.11%)</title><rect x="11.4653%" y="229" width="0.1146%" height="15" fill="rgb(225,20,46)"/><text x="11.7153%" y="239.50"></text></g><g><title>type_op_prove_predicate (1,582,632 samples, 1.67%)</title><rect x="11.6115%" y="245" width="1.6687%" height="15" fill="rgb(210,31,41)"/><text x="11.8615%" y="255.50"></text></g><g><title>MIR_borrow_checking (11,944,042 samples, 12.59%)</title><rect x="0.6925%" y="277" width="12.5940%" height="15" fill="rgb(221,200,47)"/><text x="0.9425%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (11,881,761 samples, 12.53%)</title><rect x="0.7582%" y="261" width="12.5283%" height="15" fill="rgb(226,26,5)"/><text x="1.0082%" y="271.50">mir_borrowck</text></g><g><title>hir_module_items (118,292 samples, 0.12%)</title><rect x="13.3040%" y="277" width="0.1247%" height="15" fill="rgb(249,33,26)"/><text x="13.5540%" y="287.50"></text></g><g><title>item_attrs (97,700 samples, 0.10%)</title><rect x="13.8317%" y="197" width="0.1030%" height="15" fill="rgb(235,183,28)"/><text x="14.0817%" y="207.50"></text></g><g><title>codegen_fn_attrs (160,630 samples, 0.17%)</title><rect x="13.8122%" y="213" width="0.1694%" height="15" fill="rgb(221,5,38)"/><text x="14.0622%" y="223.50"></text></g><g><title>should_inherit_track_caller (235,302 samples, 0.25%)</title><rect x="13.7385%" y="229" width="0.2481%" height="15" fill="rgb(247,18,42)"/><text x="13.9885%" y="239.50"></text></g><g><title>codegen_fn_attrs (387,983 samples, 0.41%)</title><rect x="13.5983%" y="245" width="0.4091%" height="15" fill="rgb(241,131,45)"/><text x="13.8483%" y="255.50"></text></g><g><title>check_mod_attrs (525,816 samples, 0.55%)</title><rect x="13.4531%" y="261" width="0.5544%" height="15" fill="rgb(249,31,29)"/><text x="13.7031%" y="271.50"></text></g><g><title>lookup_deprecation_entry (107,131 samples, 0.11%)</title><rect x="14.2590%" y="245" width="0.1130%" height="15" fill="rgb(225,111,53)"/><text x="14.5090%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (307,404 samples, 0.32%)</title><rect x="14.1282%" y="261" width="0.3241%" height="15" fill="rgb(238,160,17)"/><text x="14.3782%" y="271.50"></text></g><g><title>misc_checking_1 (1,011,781 samples, 1.07%)</title><rect x="13.4291%" y="277" width="1.0668%" height="15" fill="rgb(214,148,48)"/><text x="13.6791%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (363,084 samples, 0.38%)</title><rect x="14.4977%" y="261" width="0.3828%" height="15" fill="rgb(232,36,49)"/><text x="14.7477%" y="271.50"></text></g><g><title>check_mod_liveness (306,343 samples, 0.32%)</title><rect x="14.5575%" y="245" width="0.3230%" height="15" fill="rgb(209,103,24)"/><text x="14.8075%" y="255.50"></text></g><g><title>type_uninhabited_from (105,372 samples, 0.11%)</title><rect x="14.7694%" y="229" width="0.1111%" height="15" fill="rgb(229,88,8)"/><text x="15.0194%" y="239.50"></text></g><g><title>misc_checking_2 (679,848 samples, 0.72%)</title><rect x="14.4959%" y="277" width="0.7168%" height="15" fill="rgb(213,181,19)"/><text x="14.7459%" y="287.50"></text></g><g><title>match_checking (315,114 samples, 0.33%)</title><rect x="14.8805%" y="261" width="0.3323%" height="15" fill="rgb(254,191,54)"/><text x="15.1305%" y="271.50"></text></g><g><title>check_match (293,494 samples, 0.31%)</title><rect x="14.9033%" y="245" width="0.3095%" height="15" fill="rgb(241,83,37)"/><text x="15.1533%" y="255.50"></text></g><g><title>check_private_in_public (137,302 samples, 0.14%)</title><rect x="15.2220%" y="261" width="0.1448%" height="15" fill="rgb(233,36,39)"/><text x="15.4720%" y="271.50"></text></g><g><title>death_checking (259,252 samples, 0.27%)</title><rect x="15.3668%" y="261" width="0.2734%" height="15" fill="rgb(226,3,54)"/><text x="15.6168%" y="271.50"></text></g><g><title>param_env (135,642 samples, 0.14%)</title><rect x="16.7307%" y="229" width="0.1430%" height="15" fill="rgb(245,192,40)"/><text x="16.9807%" y="239.50"></text></g><g><title>crate_lints (2,456,437 samples, 2.59%)</title><rect x="15.6421%" y="245" width="2.5901%" height="15" fill="rgb(238,167,29)"/><text x="15.8921%" y="255.50">cr..</text></g><g><title>type_of (1,280,965 samples, 1.35%)</title><rect x="16.8815%" y="229" width="1.3507%" height="15" fill="rgb(232,182,51)"/><text x="17.1315%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (986,862 samples, 1.04%)</title><rect x="17.1916%" y="213" width="1.0406%" height="15" fill="rgb(231,60,39)"/><text x="17.4416%" y="223.50"></text></g><g><title>adt_sized_constraint (106,431 samples, 0.11%)</title><rect x="18.6512%" y="85" width="0.1122%" height="15" fill="rgb(208,69,12)"/><text x="18.9012%" y="95.50"></text></g><g><title>adt_def (103,631 samples, 0.11%)</title><rect x="18.6541%" y="69" width="0.1093%" height="15" fill="rgb(235,93,37)"/><text x="18.9041%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (103,011 samples, 0.11%)</title><rect x="18.6548%" y="53" width="0.1086%" height="15" fill="rgb(213,116,39)"/><text x="18.9048%" y="63.50"></text></g><g><title>layout_of (146,941 samples, 0.15%)</title><rect x="18.7669%" y="85" width="0.1549%" height="15" fill="rgb(222,207,29)"/><text x="19.0169%" y="95.50"></text></g><g><title>layout_of (116,891 samples, 0.12%)</title><rect x="18.7986%" y="69" width="0.1233%" height="15" fill="rgb(206,96,30)"/><text x="19.0486%" y="79.50"></text></g><g><title>layout_of (281,272 samples, 0.30%)</title><rect x="18.6336%" y="101" width="0.2966%" height="15" fill="rgb(218,138,4)"/><text x="18.8836%" y="111.50"></text></g><g><title>layout_of (344,763 samples, 0.36%)</title><rect x="18.5976%" y="117" width="0.3635%" height="15" fill="rgb(250,191,14)"/><text x="18.8476%" y="127.50"></text></g><g><title>layout_of (379,394 samples, 0.40%)</title><rect x="18.5708%" y="133" width="0.4000%" height="15" fill="rgb(239,60,40)"/><text x="18.8208%" y="143.50"></text></g><g><title>layout_of (410,485 samples, 0.43%)</title><rect x="18.5451%" y="197" width="0.4328%" height="15" fill="rgb(206,27,48)"/><text x="18.7951%" y="207.50"></text></g><g><title>layout_of (404,945 samples, 0.43%)</title><rect x="18.5509%" y="181" width="0.4270%" height="15" fill="rgb(225,35,8)"/><text x="18.8009%" y="191.50"></text></g><g><title>layout_of (400,125 samples, 0.42%)</title><rect x="18.5560%" y="165" width="0.4219%" height="15" fill="rgb(250,213,24)"/><text x="18.8060%" y="175.50"></text></g><g><title>layout_of (395,385 samples, 0.42%)</title><rect x="18.5610%" y="149" width="0.4169%" height="15" fill="rgb(247,123,22)"/><text x="18.8110%" y="159.50"></text></g><g><title>lint_checking (3,166,305 samples, 3.34%)</title><rect x="15.6401%" y="261" width="3.3386%" height="15" fill="rgb(231,138,38)"/><text x="15.8901%" y="271.50">lin..</text></g><g><title>module_lints (708,038 samples, 0.75%)</title><rect x="18.2322%" y="245" width="0.7466%" height="15" fill="rgb(231,145,46)"/><text x="18.4822%" y="255.50"></text></g><g><title>lint_mod (705,458 samples, 0.74%)</title><rect x="18.2349%" y="229" width="0.7438%" height="15" fill="rgb(251,118,11)"/><text x="18.4849%" y="239.50"></text></g><g><title>layout_of (419,655 samples, 0.44%)</title><rect x="18.5363%" y="213" width="0.4425%" height="15" fill="rgb(217,147,25)"/><text x="18.7863%" y="223.50"></text></g><g><title>privacy_access_levels (256,713 samples, 0.27%)</title><rect x="18.9787%" y="261" width="0.2707%" height="15" fill="rgb(247,81,37)"/><text x="19.2287%" y="271.50"></text></g><g><title>privacy_checking_modules (643,827 samples, 0.68%)</title><rect x="19.2494%" y="261" width="0.6789%" height="15" fill="rgb(209,12,38)"/><text x="19.4994%" y="271.50"></text></g><g><title>check_mod_privacy (641,997 samples, 0.68%)</title><rect x="19.2514%" y="245" width="0.6769%" height="15" fill="rgb(227,1,9)"/><text x="19.5014%" y="255.50"></text></g><g><title>misc_checking_3 (4,483,570 samples, 4.73%)</title><rect x="15.2128%" y="277" width="4.7275%" height="15" fill="rgb(248,47,43)"/><text x="15.4628%" y="287.50">misc_c..</text></g><g><title>impl_parent (2,407,640 samples, 2.54%)</title><rect x="23.7536%" y="213" width="2.5386%" height="15" fill="rgb(221,10,30)"/><text x="24.0036%" y="223.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,366,351 samples, 1.44%)</title><rect x="24.8515%" y="197" width="1.4407%" height="15" fill="rgb(210,229,1)"/><text x="25.1015%" y="207.50"></text></g><g><title>impl_trait_ref (5,632,127 samples, 5.94%)</title><rect x="26.2922%" y="213" width="5.9386%" height="15" fill="rgb(222,148,37)"/><text x="26.5422%" y="223.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,787,745 samples, 5.05%)</title><rect x="27.1826%" y="197" width="5.0483%" height="15" fill="rgb(234,67,33)"/><text x="27.4326%" y="207.50">metada..</text></g><g><title>trait_impls_of (837,559 samples, 0.88%)</title><rect x="32.2506%" y="213" width="0.8831%" height="15" fill="rgb(247,98,35)"/><text x="32.5006%" y="223.50"></text></g><g><title>implementations_of_trait (256,633 samples, 0.27%)</title><rect x="32.8632%" y="197" width="0.2706%" height="15" fill="rgb(247,138,52)"/><text x="33.1132%" y="207.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (168,843 samples, 0.18%)</title><rect x="32.9557%" y="181" width="0.1780%" height="15" fill="rgb(213,79,30)"/><text x="33.2057%" y="191.50"></text></g><g><title>coherent_trait (12,444,388 samples, 13.12%)</title><rect x="20.0130%" y="245" width="13.1215%" height="15" fill="rgb(246,177,23)"/><text x="20.2630%" y="255.50">coherent_trait</text></g><g><title>specialization_graph_of (12,425,838 samples, 13.10%)</title><rect x="20.0325%" y="229" width="13.1020%" height="15" fill="rgb(230,62,27)"/><text x="20.2825%" y="239.50">specialization_graph..</text></g><g><title>coherence_checking (12,516,959 samples, 13.20%)</title><rect x="19.9934%" y="261" width="13.1981%" height="15" fill="rgb(216,154,8)"/><text x="20.2434%" y="271.50">coherence_checking</text></g><g><title>associated_item (191,214 samples, 0.20%)</title><rect x="39.6245%" y="197" width="0.2016%" height="15" fill="rgb(244,35,45)"/><text x="39.8745%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (148,382 samples, 0.16%)</title><rect x="39.6696%" y="181" width="0.1565%" height="15" fill="rgb(251,115,12)"/><text x="39.9196%" y="191.50"></text></g><g><title>associated_items (291,974 samples, 0.31%)</title><rect x="39.5382%" y="213" width="0.3079%" height="15" fill="rgb(240,54,50)"/><text x="39.7882%" y="223.50"></text></g><g><title>dropck_outlives (241,111 samples, 0.25%)</title><rect x="39.8805%" y="213" width="0.2542%" height="15" fill="rgb(233,84,52)"/><text x="40.1305%" y="223.50"></text></g><g><title>evaluate_obligation (1,119,592 samples, 1.18%)</title><rect x="40.1347%" y="213" width="1.1805%" height="15" fill="rgb(207,117,47)"/><text x="40.3847%" y="223.50"></text></g><g><title>trait_impls_of (355,183 samples, 0.37%)</title><rect x="40.9407%" y="197" width="0.3745%" height="15" fill="rgb(249,43,39)"/><text x="41.1907%" y="207.50"></text></g><g><title>implementations_of_trait (125,101 samples, 0.13%)</title><rect x="41.1833%" y="181" width="0.1319%" height="15" fill="rgb(209,38,44)"/><text x="41.4333%" y="191.50"></text></g><g><title>item_attrs (103,570 samples, 0.11%)</title><rect x="41.5163%" y="213" width="0.1092%" height="15" fill="rgb(236,212,23)"/><text x="41.7663%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (99,370 samples, 0.10%)</title><rect x="41.5207%" y="197" width="0.1048%" height="15" fill="rgb(242,79,21)"/><text x="41.7707%" y="207.50"></text></g><g><title>method_autoderef_steps (156,721 samples, 0.17%)</title><rect x="41.6536%" y="213" width="0.1652%" height="15" fill="rgb(211,96,35)"/><text x="41.9036%" y="223.50"></text></g><g><title>object_safety_violations (136,731 samples, 0.14%)</title><rect x="41.8188%" y="213" width="0.1442%" height="15" fill="rgb(253,215,40)"/><text x="42.0688%" y="223.50"></text></g><g><title>predicates_of (184,080 samples, 0.19%)</title><rect x="41.9799%" y="213" width="0.1941%" height="15" fill="rgb(211,81,21)"/><text x="42.2299%" y="223.50"></text></g><g><title>predicates_defined_on (126,170 samples, 0.13%)</title><rect x="42.0410%" y="197" width="0.1330%" height="15" fill="rgb(208,190,38)"/><text x="42.2910%" y="207.50"></text></g><g><title>evaluate_obligation (532,145 samples, 0.56%)</title><rect x="46.6039%" y="197" width="0.5611%" height="15" fill="rgb(235,213,38)"/><text x="46.8539%" y="207.50"></text></g><g><title>is_copy_raw (226,943 samples, 0.24%)</title><rect x="47.2625%" y="197" width="0.2393%" height="15" fill="rgb(237,122,38)"/><text x="47.5125%" y="207.50"></text></g><g><title>evaluate_obligation (176,082 samples, 0.19%)</title><rect x="47.3162%" y="181" width="0.1857%" height="15" fill="rgb(244,218,35)"/><text x="47.5662%" y="191.50"></text></g><g><title>method_autoderef_steps (198,461 samples, 0.21%)</title><rect x="47.5085%" y="197" width="0.2093%" height="15" fill="rgb(240,68,47)"/><text x="47.7585%" y="207.50"></text></g><g><title>typeck (5,286,148 samples, 5.57%)</title><rect x="42.2305%" y="213" width="5.5738%" height="15" fill="rgb(210,16,53)"/><text x="42.4805%" y="223.50">typeck</text></g><g><title>item_bodies_checking (13,851,185 samples, 14.60%)</title><rect x="33.2166%" y="261" width="14.6049%" height="15" fill="rgb(235,124,12)"/><text x="33.4666%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,847,525 samples, 14.60%)</title><rect x="33.2205%" y="245" width="14.6010%" height="15" fill="rgb(224,169,11)"/><text x="33.4705%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (13,808,275 samples, 14.56%)</title><rect x="33.2619%" y="229" width="14.5596%" height="15" fill="rgb(250,166,2)"/><text x="33.5119%" y="239.50">typeck</text></g><g><title>mir_borrowck (417,195 samples, 0.44%)</title><rect x="52.5220%" y="181" width="0.4399%" height="15" fill="rgb(242,216,29)"/><text x="52.7720%" y="191.50"></text></g><g><title>mir_const (126,303 samples, 0.13%)</title><rect x="53.0735%" y="165" width="0.1332%" height="15" fill="rgb(230,116,27)"/><text x="53.3235%" y="175.50"></text></g><g><title>mir_promoted (235,573 samples, 0.25%)</title><rect x="52.9619%" y="181" width="0.2484%" height="15" fill="rgb(228,99,48)"/><text x="53.2119%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (326,684 samples, 0.34%)</title><rect x="53.2103%" y="181" width="0.3445%" height="15" fill="rgb(253,11,6)"/><text x="53.4603%" y="191.50"></text></g><g><title>normalize_projection_ty (211,303 samples, 0.22%)</title><rect x="53.3320%" y="165" width="0.2228%" height="15" fill="rgb(247,143,39)"/><text x="53.5820%" y="175.50"></text></g><g><title>mir_borrowck (3,628,270 samples, 3.83%)</title><rect x="50.4181%" y="197" width="3.8257%" height="15" fill="rgb(236,97,10)"/><text x="50.6681%" y="207.50">mir_..</text></g><g><title>type_op_prove_predicate (598,688 samples, 0.63%)</title><rect x="53.6125%" y="181" width="0.6313%" height="15" fill="rgb(233,208,19)"/><text x="53.8625%" y="191.50"></text></g><g><title>needs_drop_raw (138,311 samples, 0.15%)</title><rect x="54.6845%" y="133" width="0.1458%" height="15" fill="rgb(216,164,2)"/><text x="54.9345%" y="143.50"></text></g><g><title>adt_def (444,244 samples, 0.47%)</title><rect x="60.2187%" y="85" width="0.4684%" height="15" fill="rgb(220,129,5)"/><text x="60.4687%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (442,264 samples, 0.47%)</title><rect x="60.2208%" y="69" width="0.4663%" height="15" fill="rgb(242,17,10)"/><text x="60.4708%" y="79.50"></text></g><g><title>item_attrs (416,454 samples, 0.44%)</title><rect x="60.2480%" y="53" width="0.4391%" height="15" fill="rgb(242,107,0)"/><text x="60.4980%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (414,284 samples, 0.44%)</title><rect x="60.2503%" y="37" width="0.4368%" height="15" fill="rgb(251,28,31)"/><text x="60.5003%" y="47.50"></text></g><g><title>adt_dtorck_constraint (106,262 samples, 0.11%)</title><rect x="60.7284%" y="53" width="0.1120%" height="15" fill="rgb(233,223,10)"/><text x="60.9784%" y="63.50"></text></g><g><title>adt_dtorck_constraint (123,392 samples, 0.13%)</title><rect x="60.7139%" y="69" width="0.1301%" height="15" fill="rgb(215,21,27)"/><text x="60.9639%" y="79.50"></text></g><g><title>adt_dtorck_constraint (140,302 samples, 0.15%)</title><rect x="60.7015%" y="85" width="0.1479%" height="15" fill="rgb(232,23,21)"/><text x="60.9515%" y="95.50"></text></g><g><title>adt_dtorck_constraint (655,616 samples, 0.69%)</title><rect x="60.1791%" y="101" width="0.6913%" height="15" fill="rgb(244,5,23)"/><text x="60.4291%" y="111.50"></text></g><g><title>dropck_outlives (925,498 samples, 0.98%)</title><rect x="60.0166%" y="117" width="0.9759%" height="15" fill="rgb(226,81,46)"/><text x="60.2666%" y="127.50"></text></g><g><title>normalize_projection_ty (115,712 samples, 0.12%)</title><rect x="60.8704%" y="101" width="0.1220%" height="15" fill="rgb(247,70,30)"/><text x="61.1204%" y="111.50"></text></g><g><title>evaluate_obligation (474,596 samples, 0.50%)</title><rect x="60.9959%" y="117" width="0.5004%" height="15" fill="rgb(212,68,19)"/><text x="61.2459%" y="127.50"></text></g><g><title>is_copy_raw (523,565 samples, 0.55%)</title><rect x="61.6680%" y="117" width="0.5521%" height="15" fill="rgb(240,187,13)"/><text x="61.9180%" y="127.50"></text></g><g><title>evaluate_obligation (464,135 samples, 0.49%)</title><rect x="61.7307%" y="101" width="0.4894%" height="15" fill="rgb(223,113,26)"/><text x="61.9807%" y="111.50"></text></g><g><title>trait_impls_of (187,412 samples, 0.20%)</title><rect x="62.0225%" y="85" width="0.1976%" height="15" fill="rgb(206,192,2)"/><text x="62.2725%" y="95.50"></text></g><g><title>mir_built (7,825,008 samples, 8.25%)</title><rect x="54.4640%" y="149" width="8.2508%" height="15" fill="rgb(241,108,4)"/><text x="54.7140%" y="159.50">mir_built</text></g><g><title>typeck (7,409,602 samples, 7.81%)</title><rect x="54.9020%" y="133" width="7.8128%" height="15" fill="rgb(247,173,49)"/><text x="55.1520%" y="143.50">typeck</text></g><g><title>adt_drop_tys (138,401 samples, 0.15%)</title><rect x="63.2791%" y="101" width="0.1459%" height="15" fill="rgb(224,114,35)"/><text x="63.5291%" y="111.50"></text></g><g><title>needs_drop_raw (190,093 samples, 0.20%)</title><rect x="63.2494%" y="117" width="0.2004%" height="15" fill="rgb(245,159,27)"/><text x="63.4994%" y="127.50"></text></g><g><title>thir_body (142,222 samples, 0.15%)</title><rect x="63.4587%" y="117" width="0.1500%" height="15" fill="rgb(245,172,44)"/><text x="63.7087%" y="127.50"></text></g><g><title>mir_built (757,679 samples, 0.80%)</title><rect x="62.8156%" y="133" width="0.7989%" height="15" fill="rgb(236,23,11)"/><text x="63.0656%" y="143.50"></text></g><g><title>mir_const (8,937,680 samples, 9.42%)</title><rect x="54.3285%" y="181" width="9.4240%" height="15" fill="rgb(205,117,38)"/><text x="54.5785%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (8,837,590 samples, 9.32%)</title><rect x="54.4341%" y="165" width="9.3185%" height="15" fill="rgb(237,72,25)"/><text x="54.6841%" y="175.50">unsafety_chec..</text></g><g><title>unsafety_check_result (984,221 samples, 1.04%)</title><rect x="62.7148%" y="149" width="1.0378%" height="15" fill="rgb(244,70,9)"/><text x="62.9648%" y="159.50"></text></g><g><title>unsafety_check_result (130,141 samples, 0.14%)</title><rect x="63.6153%" y="133" width="0.1372%" height="15" fill="rgb(217,125,39)"/><text x="63.8653%" y="143.50"></text></g><g><title>mir_promoted (9,025,731 samples, 9.52%)</title><rect x="54.2438%" y="197" width="9.5169%" height="15" fill="rgb(235,36,10)"/><text x="54.4938%" y="207.50">mir_promoted</text></g><g><title>item_types_checking (15,434,651 samples, 16.27%)</title><rect x="47.8215%" y="261" width="16.2745%" height="15" fill="rgb(251,123,47)"/><text x="48.0715%" y="271.50">item_types_checking</text></g><g><title>check_mod_item_types (15,431,261 samples, 16.27%)</title><rect x="47.8251%" y="245" width="16.2709%" height="15" fill="rgb(221,13,13)"/><text x="48.0751%" y="255.50">check_mod_item_types</text></g><g><title>type_of (13,984,745 samples, 14.75%)</title><rect x="49.3503%" y="229" width="14.7457%" height="15" fill="rgb(238,131,9)"/><text x="49.6003%" y="239.50">type_of</text></g><g><title>mir_borrowck (13,950,735 samples, 14.71%)</title><rect x="49.3862%" y="213" width="14.7098%" height="15" fill="rgb(211,50,8)"/><text x="49.6362%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (240,331 samples, 0.25%)</title><rect x="63.8426%" y="197" width="0.2534%" height="15" fill="rgb(245,182,24)"/><text x="64.0926%" y="207.50"></text></g><g><title>fn_sig (256,612 samples, 0.27%)</title><rect x="64.2929%" y="229" width="0.2706%" height="15" fill="rgb(242,14,37)"/><text x="64.5429%" y="239.50"></text></g><g><title>generics_of (208,900 samples, 0.22%)</title><rect x="64.5635%" y="229" width="0.2203%" height="15" fill="rgb(246,228,12)"/><text x="64.8135%" y="239.50"></text></g><g><title>late_bound_vars_map (265,033 samples, 0.28%)</title><rect x="65.1798%" y="181" width="0.2795%" height="15" fill="rgb(213,55,15)"/><text x="65.4298%" y="191.50"></text></g><g><title>resolve_lifetimes (255,313 samples, 0.27%)</title><rect x="65.1900%" y="165" width="0.2692%" height="15" fill="rgb(209,9,3)"/><text x="65.4400%" y="175.50"></text></g><g><title>explicit_predicates_of (547,927 samples, 0.58%)</title><rect x="64.9212%" y="197" width="0.5777%" height="15" fill="rgb(230,59,30)"/><text x="65.1712%" y="207.50"></text></g><g><title>predicates_of (894,181 samples, 0.94%)</title><rect x="64.8285%" y="229" width="0.9428%" height="15" fill="rgb(209,121,21)"/><text x="65.0785%" y="239.50"></text></g><g><title>predicates_defined_on (861,160 samples, 0.91%)</title><rect x="64.8634%" y="213" width="0.9080%" height="15" fill="rgb(220,109,13)"/><text x="65.1134%" y="223.50"></text></g><g><title>inferred_outlives_of (258,353 samples, 0.27%)</title><rect x="65.4990%" y="197" width="0.2724%" height="15" fill="rgb(232,18,1)"/><text x="65.7490%" y="207.50"></text></g><g><title>inferred_outlives_crate (244,523 samples, 0.26%)</title><rect x="65.5136%" y="181" width="0.2578%" height="15" fill="rgb(215,41,42)"/><text x="65.7636%" y="191.50"></text></g><g><title>type_of (124,042 samples, 0.13%)</title><rect x="65.6406%" y="165" width="0.1308%" height="15" fill="rgb(224,123,36)"/><text x="65.8906%" y="175.50"></text></g><g><title>type_collecting (1,672,089 samples, 1.76%)</title><rect x="64.0980%" y="261" width="1.7631%" height="15" fill="rgb(240,125,3)"/><text x="64.3480%" y="271.50"></text></g><g><title>collect_mod_item_types (1,665,308 samples, 1.76%)</title><rect x="64.1052%" y="245" width="1.7559%" height="15" fill="rgb(205,98,50)"/><text x="64.3552%" y="255.50"></text></g><g><title>adt_def (101,251 samples, 0.11%)</title><rect x="68.0961%" y="197" width="0.1068%" height="15" fill="rgb(205,185,37)"/><text x="68.3461%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (100,191 samples, 0.11%)</title><rect x="68.0972%" y="181" width="0.1056%" height="15" fill="rgb(238,207,15)"/><text x="68.3472%" y="191.50"></text></g><g><title>adt_sized_constraint (189,701 samples, 0.20%)</title><rect x="68.0897%" y="213" width="0.2000%" height="15" fill="rgb(213,199,42)"/><text x="68.3397%" y="223.50"></text></g><g><title>evaluate_obligation (783,577 samples, 0.83%)</title><rect x="67.5848%" y="229" width="0.8262%" height="15" fill="rgb(235,201,11)"/><text x="67.8348%" y="239.50"></text></g><g><title>implied_outlives_bounds (230,795 samples, 0.24%)</title><rect x="68.4302%" y="229" width="0.2434%" height="15" fill="rgb(207,46,11)"/><text x="68.6802%" y="239.50"></text></g><g><title>param_env (180,183 samples, 0.19%)</title><rect x="68.6735%" y="229" width="0.1900%" height="15" fill="rgb(241,35,35)"/><text x="68.9235%" y="239.50"></text></g><g><title>region_scope_tree (191,674 samples, 0.20%)</title><rect x="68.9410%" y="229" width="0.2021%" height="15" fill="rgb(243,32,47)"/><text x="69.1910%" y="239.50"></text></g><g><title>check_impl_item_well_formed (2,983,332 samples, 3.15%)</title><rect x="66.0007%" y="245" width="3.1457%" height="15" fill="rgb(247,202,23)"/><text x="66.2507%" y="255.50">che..</text></g><g><title>adt_def (209,943 samples, 0.22%)</title><rect x="70.4759%" y="181" width="0.2214%" height="15" fill="rgb(219,102,11)"/><text x="70.7259%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (209,303 samples, 0.22%)</title><rect x="70.4766%" y="165" width="0.2207%" height="15" fill="rgb(243,110,44)"/><text x="70.7266%" y="175.50"></text></g><g><title>adt_def (119,791 samples, 0.13%)</title><rect x="70.7397%" y="149" width="0.1263%" height="15" fill="rgb(222,74,54)"/><text x="70.9897%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (119,111 samples, 0.13%)</title><rect x="70.7404%" y="133" width="0.1256%" height="15" fill="rgb(216,99,12)"/><text x="70.9904%" y="143.50"></text></g><g><title>item_attrs (109,041 samples, 0.11%)</title><rect x="70.7510%" y="117" width="0.1150%" height="15" fill="rgb(226,22,26)"/><text x="71.0010%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,161 samples, 0.11%)</title><rect x="70.7519%" y="101" width="0.1140%" height="15" fill="rgb(217,163,10)"/><text x="71.0019%" y="111.50"></text></g><g><title>adt_sized_constraint (124,591 samples, 0.13%)</title><rect x="70.7360%" y="165" width="0.1314%" height="15" fill="rgb(213,25,53)"/><text x="70.9860%" y="175.50"></text></g><g><title>adt_sized_constraint (170,492 samples, 0.18%)</title><rect x="70.6973%" y="181" width="0.1798%" height="15" fill="rgb(252,105,26)"/><text x="70.9473%" y="191.50"></text></g><g><title>adt_sized_constraint (389,105 samples, 0.41%)</title><rect x="70.4714%" y="197" width="0.4103%" height="15" fill="rgb(220,39,43)"/><text x="70.7214%" y="207.50"></text></g><g><title>adt_sized_constraint (410,015 samples, 0.43%)</title><rect x="70.4563%" y="213" width="0.4323%" height="15" fill="rgb(229,68,48)"/><text x="70.7063%" y="223.50"></text></g><g><title>adt_sized_constraint (454,985 samples, 0.48%)</title><rect x="70.4116%" y="229" width="0.4797%" height="15" fill="rgb(252,8,32)"/><text x="70.6616%" y="239.50"></text></g><g><title>evaluate_obligation (160,571 samples, 0.17%)</title><rect x="70.8913%" y="229" width="0.1693%" height="15" fill="rgb(223,20,43)"/><text x="71.1413%" y="239.50"></text></g><g><title>implied_outlives_bounds (141,102 samples, 0.15%)</title><rect x="71.0708%" y="229" width="0.1488%" height="15" fill="rgb(229,81,49)"/><text x="71.3208%" y="239.50"></text></g><g><title>param_env (268,734 samples, 0.28%)</title><rect x="71.2215%" y="229" width="0.2834%" height="15" fill="rgb(236,28,36)"/><text x="71.4715%" y="239.50"></text></g><g><title>analysis (67,648,651 samples, 71.33%)</title><rect x="0.4862%" y="293" width="71.3297%" height="15" fill="rgb(249,185,26)"/><text x="0.7362%" y="303.50">analysis</text></g><g><title>type_check_crate (49,198,447 samples, 51.88%)</title><rect x="19.9403%" y="277" width="51.8755%" height="15" fill="rgb(249,174,33)"/><text x="20.1903%" y="287.50">type_check_crate</text></g><g><title>wf_checking (5,643,733 samples, 5.95%)</title><rect x="65.8650%" y="261" width="5.9508%" height="15" fill="rgb(233,201,37)"/><text x="66.1150%" y="271.50">wf_check..</text></g><g><title>check_item_well_formed (2,531,719 samples, 2.67%)</title><rect x="69.1464%" y="245" width="2.6695%" height="15" fill="rgb(221,78,26)"/><text x="69.3964%" y="255.50">ch..</text></g><g><title>codegen_crate (490,256 samples, 0.52%)</title><rect x="71.8227%" y="293" width="0.5169%" height="15" fill="rgb(250,127,30)"/><text x="72.0727%" y="303.50"></text></g><g><title>AST_validation (95,141 samples, 0.10%)</title><rect x="72.4826%" y="277" width="0.1003%" height="15" fill="rgb(230,49,44)"/><text x="72.7326%" y="287.50"></text></g><g><title>macro_expand_crate (12,064,604 samples, 12.72%)</title><rect x="72.6808%" y="277" width="12.7211%" height="15" fill="rgb(229,67,23)"/><text x="72.9308%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (12,053,204 samples, 12.71%)</title><rect x="72.6929%" y="261" width="12.7091%" height="15" fill="rgb(249,83,47)"/><text x="72.9429%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (5,784,804 samples, 6.10%)</title><rect x="79.3024%" y="245" width="6.0996%" height="15" fill="rgb(215,43,3)"/><text x="79.5524%" y="255.50">metadata..</text></g><g><title>metadata_register_crate (4,385,287 samples, 4.62%)</title><rect x="80.7780%" y="229" width="4.6239%" height="15" fill="rgb(238,154,13)"/><text x="81.0280%" y="239.50">metad..</text></g><g><title>metadata_register_crate (215,560 samples, 0.23%)</title><rect x="85.1746%" y="213" width="0.2273%" height="15" fill="rgb(219,56,2)"/><text x="85.4246%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (278,623 samples, 0.29%)</title><rect x="85.4061%" y="277" width="0.2938%" height="15" fill="rgb(233,0,4)"/><text x="85.6561%" y="287.50"></text></g><g><title>late_resolve_crate (1,170,643 samples, 1.23%)</title><rect x="85.7907%" y="261" width="1.2343%" height="15" fill="rgb(235,30,7)"/><text x="86.0407%" y="271.50"></text></g><g><title>configure_and_expand (13,996,136 samples, 14.76%)</title><rect x="72.3396%" y="293" width="14.7577%" height="15" fill="rgb(250,79,13)"/><text x="72.5896%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (1,325,345 samples, 1.40%)</title><rect x="85.6998%" y="277" width="1.3975%" height="15" fill="rgb(211,146,34)"/><text x="85.9498%" y="287.50"></text></g><g><title>drop_ast (103,132 samples, 0.11%)</title><rect x="87.0973%" y="293" width="0.1087%" height="15" fill="rgb(228,22,38)"/><text x="87.3473%" y="303.50"></text></g><g><title>early_lint_checks (185,962 samples, 0.20%)</title><rect x="87.2277%" y="293" width="0.1961%" height="15" fill="rgb(235,168,5)"/><text x="87.4777%" y="303.50"></text></g><g><title>free_global_ctxt (3,574,999 samples, 3.77%)</title><rect x="87.4238%" y="293" width="3.7695%" height="15" fill="rgb(221,155,16)"/><text x="87.6738%" y="303.50">free..</text></g><g><title>layout_of (98,990 samples, 0.10%)</title><rect x="93.3653%" y="261" width="0.1044%" height="15" fill="rgb(215,215,53)"/><text x="93.6153%" y="271.50"></text></g><g><title>is_copy_raw (236,532 samples, 0.25%)</title><rect x="94.7716%" y="229" width="0.2494%" height="15" fill="rgb(223,4,10)"/><text x="95.0216%" y="239.50"></text></g><g><title>evaluate_obligation (193,262 samples, 0.20%)</title><rect x="94.8172%" y="213" width="0.2038%" height="15" fill="rgb(234,103,6)"/><text x="95.0672%" y="223.50"></text></g><g><title>needs_drop_raw (295,753 samples, 0.31%)</title><rect x="94.7095%" y="245" width="0.3118%" height="15" fill="rgb(227,97,0)"/><text x="94.9595%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,494,577 samples, 1.58%)</title><rect x="93.4697%" y="261" width="1.5759%" height="15" fill="rgb(234,150,53)"/><text x="93.7197%" y="271.50"></text></g><g><title>optimized_mir (2,540,469 samples, 2.68%)</title><rect x="92.3711%" y="277" width="2.6787%" height="15" fill="rgb(228,201,54)"/><text x="92.6211%" y="287.50">op..</text></g><g><title>generate_crate_metadata (3,681,692 samples, 3.88%)</title><rect x="91.1933%" y="293" width="3.8820%" height="15" fill="rgb(222,22,37)"/><text x="91.4433%" y="303.50">gene..</text></g><g><title>hir_lowering (1,580,127 samples, 1.67%)</title><rect x="95.0754%" y="293" width="1.6661%" height="15" fill="rgb(237,53,32)"/><text x="95.3254%" y="303.50"></text></g><g><title>parse_crate (1,664,149 samples, 1.75%)</title><rect x="96.7973%" y="293" width="1.7547%" height="15" fill="rgb(233,25,53)"/><text x="97.0473%" y="303.50"></text></g><g><title>prepare_outputs (172,991 samples, 0.18%)</title><rect x="98.5581%" y="293" width="0.1824%" height="15" fill="rgb(210,40,34)"/><text x="98.8081%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (784,178 samples, 0.83%)</title><rect x="98.7405%" y="293" width="0.8268%" height="15" fill="rgb(241,220,44)"/><text x="98.9905%" y="303.50"></text></g><g><title>all (94,839,414 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,28,35)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (94,839,414 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (318,543 samples, 0.34%)</title><rect x="99.6641%" y="293" width="0.3359%" height="15" fill="rgb(224,130,29)"/><text x="99.9141%" y="303.50"></text></g></svg></svg>