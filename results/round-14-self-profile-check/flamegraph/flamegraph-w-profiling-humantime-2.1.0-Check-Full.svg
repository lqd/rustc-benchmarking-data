<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (205,732 samples, 0.11%)</title><rect x="11.8476%" y="117" width="0.1132%" height="15" fill="rgb(227,0,7)"/><text x="12.0976%" y="127.50"></text></g><g><title>item_attrs (242,194 samples, 0.13%)</title><rect x="12.3728%" y="85" width="0.1332%" height="15" fill="rgb(217,0,24)"/><text x="12.6228%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (234,234 samples, 0.13%)</title><rect x="12.3772%" y="69" width="0.1288%" height="15" fill="rgb(221,193,54)"/><text x="12.6272%" y="79.50"></text></g><g><title>codegen_fn_attrs (349,624 samples, 0.19%)</title><rect x="12.3247%" y="101" width="0.1923%" height="15" fill="rgb(248,212,6)"/><text x="12.5747%" y="111.50"></text></g><g><title>adt_drop_tys (259,353 samples, 0.14%)</title><rect x="15.2080%" y="69" width="0.1427%" height="15" fill="rgb(208,68,35)"/><text x="15.4580%" y="79.50"></text></g><g><title>needs_drop_raw (1,036,842 samples, 0.57%)</title><rect x="15.1583%" y="85" width="0.5703%" height="15" fill="rgb(232,128,0)"/><text x="15.4083%" y="95.50"></text></g><g><title>is_copy_raw (687,259 samples, 0.38%)</title><rect x="15.3506%" y="69" width="0.3780%" height="15" fill="rgb(207,160,47)"/><text x="15.6006%" y="79.50"></text></g><g><title>evaluate_obligation (590,978 samples, 0.33%)</title><rect x="15.4036%" y="53" width="0.3251%" height="15" fill="rgb(228,23,34)"/><text x="15.6536%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (206,952 samples, 0.11%)</title><rect x="15.8309%" y="69" width="0.1138%" height="15" fill="rgb(218,30,26)"/><text x="16.0809%" y="79.50"></text></g><g><title>impl_parent (188,113 samples, 0.10%)</title><rect x="16.1616%" y="53" width="0.1035%" height="15" fill="rgb(220,122,19)"/><text x="16.4116%" y="63.50"></text></g><g><title>specialization_graph_of (943,262 samples, 0.52%)</title><rect x="15.9984%" y="69" width="0.5189%" height="15" fill="rgb(250,228,42)"/><text x="16.2484%" y="79.50"></text></g><g><title>impl_trait_ref (458,344 samples, 0.25%)</title><rect x="16.2651%" y="53" width="0.2521%" height="15" fill="rgb(240,193,28)"/><text x="16.5151%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (394,144 samples, 0.22%)</title><rect x="16.3004%" y="37" width="0.2168%" height="15" fill="rgb(216,20,37)"/><text x="16.5504%" y="47.50"></text></g><g><title>resolve_instance (1,500,547 samples, 0.83%)</title><rect x="15.7287%" y="85" width="0.8254%" height="15" fill="rgb(206,188,39)"/><text x="15.9787%" y="95.50"></text></g><g><title>thir_body (1,902,270 samples, 1.05%)</title><rect x="16.5706%" y="85" width="1.0464%" height="15" fill="rgb(217,207,13)"/><text x="16.8206%" y="95.50"></text></g><g><title>mir_const (11,791,641 samples, 6.49%)</title><rect x="11.1419%" y="133" width="6.4863%" height="15" fill="rgb(231,73,38)"/><text x="11.3919%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (10,303,105 samples, 5.67%)</title><rect x="11.9608%" y="117" width="5.6675%" height="15" fill="rgb(225,20,46)"/><text x="12.2108%" y="127.50">unsafet..</text></g><g><title>mir_built (9,291,882 samples, 5.11%)</title><rect x="12.5170%" y="101" width="5.1113%" height="15" fill="rgb(210,31,41)"/><text x="12.7670%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (13,343,486 samples, 7.34%)</title><rect x="10.4338%" y="149" width="7.3400%" height="15" fill="rgb(221,200,47)"/><text x="10.6838%" y="159.50">mir_promot..</text></g><g><title>mir_const_qualif (264,421 samples, 0.15%)</title><rect x="17.6283%" y="133" width="0.1455%" height="15" fill="rgb(226,26,5)"/><text x="17.8783%" y="143.50"></text></g><g><title>mir_const (187,420 samples, 0.10%)</title><rect x="17.6706%" y="117" width="0.1031%" height="15" fill="rgb(249,33,26)"/><text x="17.9206%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (303,513 samples, 0.17%)</title><rect x="17.7739%" y="149" width="0.1670%" height="15" fill="rgb(235,183,28)"/><text x="18.0239%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (480,024 samples, 0.26%)</title><rect x="17.9409%" y="149" width="0.2641%" height="15" fill="rgb(221,5,38)"/><text x="18.1909%" y="159.50"></text></g><g><title>normalize_projection_ty (320,762 samples, 0.18%)</title><rect x="18.0285%" y="133" width="0.1764%" height="15" fill="rgb(247,18,42)"/><text x="18.2785%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,654,400 samples, 0.91%)</title><rect x="18.2915%" y="149" width="0.9100%" height="15" fill="rgb(241,131,45)"/><text x="18.5415%" y="159.50"></text></g><g><title>MIR_borrow_checking (33,842,497 samples, 18.62%)</title><rect x="0.5899%" y="181" width="18.6160%" height="15" fill="rgb(249,31,29)"/><text x="0.8399%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (33,715,543 samples, 18.55%)</title><rect x="0.6597%" y="165" width="18.5462%" height="15" fill="rgb(225,111,53)"/><text x="0.9097%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (226,832 samples, 0.12%)</title><rect x="19.2059%" y="181" width="0.1248%" height="15" fill="rgb(238,160,17)"/><text x="19.4559%" y="191.50"></text></g><g><title>hir_module_items (217,292 samples, 0.12%)</title><rect x="19.3307%" y="181" width="0.1195%" height="15" fill="rgb(214,148,48)"/><text x="19.5807%" y="191.50"></text></g><g><title>should_inherit_track_caller (195,631 samples, 0.11%)</title><rect x="19.7345%" y="133" width="0.1076%" height="15" fill="rgb(232,36,49)"/><text x="19.9845%" y="143.50"></text></g><g><title>codegen_fn_attrs (335,022 samples, 0.18%)</title><rect x="19.6663%" y="149" width="0.1843%" height="15" fill="rgb(209,103,24)"/><text x="19.9163%" y="159.50"></text></g><g><title>check_mod_attrs (702,460 samples, 0.39%)</title><rect x="19.4642%" y="165" width="0.3864%" height="15" fill="rgb(229,88,8)"/><text x="19.7142%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (491,876 samples, 0.27%)</title><rect x="19.9844%" y="165" width="0.2706%" height="15" fill="rgb(213,181,19)"/><text x="20.2344%" y="175.50"></text></g><g><title>misc_checking_1 (1,520,637 samples, 0.84%)</title><rect x="19.4505%" y="181" width="0.8365%" height="15" fill="rgb(254,191,54)"/><text x="19.7005%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (596,046 samples, 0.33%)</title><rect x="20.2878%" y="165" width="0.3279%" height="15" fill="rgb(241,83,37)"/><text x="20.5378%" y="175.50"></text></g><g><title>check_mod_liveness (453,506 samples, 0.25%)</title><rect x="20.3663%" y="149" width="0.2495%" height="15" fill="rgb(233,36,39)"/><text x="20.6163%" y="159.50"></text></g><g><title>misc_checking_2 (1,712,059 samples, 0.94%)</title><rect x="20.2869%" y="181" width="0.9418%" height="15" fill="rgb(226,3,54)"/><text x="20.5369%" y="191.50"></text></g><g><title>match_checking (1,114,373 samples, 0.61%)</title><rect x="20.6157%" y="165" width="0.6130%" height="15" fill="rgb(245,192,40)"/><text x="20.8657%" y="175.50"></text></g><g><title>check_match (1,080,523 samples, 0.59%)</title><rect x="20.6343%" y="149" width="0.5944%" height="15" fill="rgb(238,167,29)"/><text x="20.8843%" y="159.50"></text></g><g><title>check_private_in_public (248,463 samples, 0.14%)</title><rect x="21.2344%" y="165" width="0.1367%" height="15" fill="rgb(232,182,51)"/><text x="21.4844%" y="175.50"></text></g><g><title>death_checking (614,177 samples, 0.34%)</title><rect x="21.3711%" y="165" width="0.3378%" height="15" fill="rgb(231,60,39)"/><text x="21.6211%" y="175.50"></text></g><g><title>eval_to_const_value_raw (292,974 samples, 0.16%)</title><rect x="22.2009%" y="133" width="0.1612%" height="15" fill="rgb(208,69,12)"/><text x="22.4509%" y="143.50"></text></g><g><title>eval_to_const_value_raw (287,834 samples, 0.16%)</title><rect x="22.2037%" y="117" width="0.1583%" height="15" fill="rgb(235,93,37)"/><text x="22.4537%" y="127.50"></text></g><g><title>eval_to_allocation_raw (277,464 samples, 0.15%)</title><rect x="22.2094%" y="101" width="0.1526%" height="15" fill="rgb(213,116,39)"/><text x="22.4594%" y="111.50"></text></g><g><title>param_env (275,963 samples, 0.15%)</title><rect x="22.3620%" y="133" width="0.1518%" height="15" fill="rgb(222,207,29)"/><text x="22.6120%" y="143.50"></text></g><g><title>crate_lints (2,563,218 samples, 1.41%)</title><rect x="21.7099%" y="149" width="1.4100%" height="15" fill="rgb(206,96,30)"/><text x="21.9599%" y="159.50"></text></g><g><title>type_of (1,093,534 samples, 0.60%)</title><rect x="22.5183%" y="133" width="0.6015%" height="15" fill="rgb(218,138,4)"/><text x="22.7683%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (863,669 samples, 0.48%)</title><rect x="22.6448%" y="117" width="0.4751%" height="15" fill="rgb(250,191,14)"/><text x="22.8948%" y="127.50"></text></g><g><title>lint_checking (3,358,157 samples, 1.85%)</title><rect x="21.7089%" y="165" width="1.8472%" height="15" fill="rgb(239,60,40)"/><text x="21.9589%" y="175.50">l..</text></g><g><title>module_lints (793,179 samples, 0.44%)</title><rect x="23.1198%" y="149" width="0.4363%" height="15" fill="rgb(206,27,48)"/><text x="23.3698%" y="159.50"></text></g><g><title>lint_mod (787,069 samples, 0.43%)</title><rect x="23.1232%" y="133" width="0.4329%" height="15" fill="rgb(225,35,8)"/><text x="23.3732%" y="143.50"></text></g><g><title>privacy_access_levels (327,604 samples, 0.18%)</title><rect x="23.5561%" y="165" width="0.1802%" height="15" fill="rgb(250,213,24)"/><text x="23.8061%" y="175.50"></text></g><g><title>privacy_checking_modules (1,300,024 samples, 0.72%)</title><rect x="23.7364%" y="165" width="0.7151%" height="15" fill="rgb(247,123,22)"/><text x="23.9864%" y="175.50"></text></g><g><title>check_mod_privacy (1,295,504 samples, 0.71%)</title><rect x="23.7388%" y="149" width="0.7126%" height="15" fill="rgb(231,138,38)"/><text x="23.9888%" y="159.50"></text></g><g><title>misc_checking_3 (5,881,845 samples, 3.24%)</title><rect x="21.2287%" y="181" width="3.2355%" height="15" fill="rgb(231,145,46)"/><text x="21.4787%" y="191.50">mis..</text></g><g><title>adt_destructor (277,713 samples, 0.15%)</title><rect x="24.5422%" y="133" width="0.1528%" height="15" fill="rgb(251,118,11)"/><text x="24.7922%" y="143.50"></text></g><g><title>coherent_trait (275,053 samples, 0.15%)</title><rect x="24.5436%" y="117" width="0.1513%" height="15" fill="rgb(217,147,25)"/><text x="24.7936%" y="127.50"></text></g><g><title>specialization_graph_of (273,943 samples, 0.15%)</title><rect x="24.5443%" y="101" width="0.1507%" height="15" fill="rgb(247,81,37)"/><text x="24.7943%" y="111.50"></text></g><g><title>impl_parent (3,074,476 samples, 1.69%)</title><rect x="27.1549%" y="117" width="1.6912%" height="15" fill="rgb(209,12,38)"/><text x="27.4049%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,557,751 samples, 0.86%)</title><rect x="27.9892%" y="101" width="0.8569%" height="15" fill="rgb(227,1,9)"/><text x="28.2392%" y="111.50"></text></g><g><title>impl_trait_ref (5,475,983 samples, 3.01%)</title><rect x="28.8461%" y="117" width="3.0122%" height="15" fill="rgb(248,47,43)"/><text x="29.0961%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,395,308 samples, 2.42%)</title><rect x="29.4405%" y="101" width="2.4178%" height="15" fill="rgb(221,10,30)"/><text x="29.6905%" y="111.50">me..</text></g><g><title>trait_impls_of (905,131 samples, 0.50%)</title><rect x="31.9102%" y="117" width="0.4979%" height="15" fill="rgb(210,229,1)"/><text x="32.1602%" y="127.50"></text></g><g><title>implementations_of_trait (263,363 samples, 0.14%)</title><rect x="32.2632%" y="101" width="0.1449%" height="15" fill="rgb(222,148,37)"/><text x="32.5132%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (207,622 samples, 0.11%)</title><rect x="32.2939%" y="85" width="0.1142%" height="15" fill="rgb(234,67,33)"/><text x="32.5439%" y="95.50"></text></g><g><title>coherent_trait (14,346,560 samples, 7.89%)</title><rect x="24.5172%" y="149" width="7.8917%" height="15" fill="rgb(247,98,35)"/><text x="24.7672%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (13,927,766 samples, 7.66%)</title><rect x="24.7475%" y="133" width="7.6614%" height="15" fill="rgb(247,138,52)"/><text x="24.9975%" y="143.50">specializa..</text></g><g><title>coherence_checking (14,436,590 samples, 7.94%)</title><rect x="24.5041%" y="165" width="7.9413%" height="15" fill="rgb(213,79,30)"/><text x="24.7541%" y="175.50">coherence_c..</text></g><g><title>associated_item (515,406 samples, 0.28%)</title><rect x="54.4468%" y="101" width="0.2835%" height="15" fill="rgb(246,177,23)"/><text x="54.6968%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (408,414 samples, 0.22%)</title><rect x="54.5057%" y="85" width="0.2247%" height="15" fill="rgb(230,62,27)"/><text x="54.7557%" y="95.50"></text></g><g><title>associated_items (723,878 samples, 0.40%)</title><rect x="54.3486%" y="117" width="0.3982%" height="15" fill="rgb(216,154,8)"/><text x="54.5986%" y="127.50"></text></g><g><title>adt_def (402,335 samples, 0.22%)</title><rect x="54.9124%" y="85" width="0.2213%" height="15" fill="rgb(244,35,45)"/><text x="55.1624%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (401,615 samples, 0.22%)</title><rect x="54.9128%" y="69" width="0.2209%" height="15" fill="rgb(251,115,12)"/><text x="55.1628%" y="79.50"></text></g><g><title>item_attrs (395,645 samples, 0.22%)</title><rect x="54.9160%" y="53" width="0.2176%" height="15" fill="rgb(240,54,50)"/><text x="55.1660%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (394,805 samples, 0.22%)</title><rect x="54.9165%" y="37" width="0.2172%" height="15" fill="rgb(233,84,52)"/><text x="55.1665%" y="47.50"></text></g><g><title>dropck_outlives (812,938 samples, 0.45%)</title><rect x="54.7846%" y="117" width="0.4472%" height="15" fill="rgb(207,117,47)"/><text x="55.0346%" y="127.50"></text></g><g><title>adt_dtorck_constraint (626,417 samples, 0.34%)</title><rect x="54.8872%" y="101" width="0.3446%" height="15" fill="rgb(249,43,39)"/><text x="55.1372%" y="111.50"></text></g><g><title>generics_of (865,390 samples, 0.48%)</title><rect x="57.5076%" y="101" width="0.4760%" height="15" fill="rgb(209,38,44)"/><text x="57.7576%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (673,586 samples, 0.37%)</title><rect x="57.6131%" y="85" width="0.3705%" height="15" fill="rgb(236,212,23)"/><text x="57.8631%" y="95.50"></text></g><g><title>impl_trait_ref (783,078 samples, 0.43%)</title><rect x="58.0821%" y="101" width="0.4308%" height="15" fill="rgb(242,79,21)"/><text x="58.3321%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (610,177 samples, 0.34%)</title><rect x="58.1772%" y="85" width="0.3356%" height="15" fill="rgb(211,96,35)"/><text x="58.4272%" y="95.50"></text></g><g><title>predicates_of (486,886 samples, 0.27%)</title><rect x="58.5317%" y="101" width="0.2678%" height="15" fill="rgb(253,215,40)"/><text x="58.7817%" y="111.50"></text></g><g><title>predicates_defined_on (277,003 samples, 0.15%)</title><rect x="58.6472%" y="85" width="0.1524%" height="15" fill="rgb(211,81,21)"/><text x="58.8972%" y="95.50"></text></g><g><title>specializes (842,861 samples, 0.46%)</title><rect x="58.7996%" y="101" width="0.4636%" height="15" fill="rgb(208,190,38)"/><text x="59.0496%" y="111.50"></text></g><g><title>param_env (445,517 samples, 0.25%)</title><rect x="59.0181%" y="85" width="0.2451%" height="15" fill="rgb(235,213,38)"/><text x="59.2681%" y="95.50"></text></g><g><title>trait_impls_of (401,434 samples, 0.22%)</title><rect x="59.2719%" y="101" width="0.2208%" height="15" fill="rgb(237,122,38)"/><text x="59.5219%" y="111.50"></text></g><g><title>evaluate_obligation (7,774,767 samples, 4.28%)</title><rect x="55.2318%" y="117" width="4.2767%" height="15" fill="rgb(244,218,35)"/><text x="55.4818%" y="127.50">evalu..</text></g><g><title>generics_of (717,347 samples, 0.39%)</title><rect x="59.6149%" y="117" width="0.3946%" height="15" fill="rgb(240,68,47)"/><text x="59.8649%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (552,046 samples, 0.30%)</title><rect x="59.7058%" y="101" width="0.3037%" height="15" fill="rgb(210,16,53)"/><text x="59.9558%" y="111.50"></text></g><g><title>method_autoderef_steps (188,242 samples, 0.10%)</title><rect x="60.3303%" y="117" width="0.1035%" height="15" fill="rgb(235,124,12)"/><text x="60.5803%" y="127.50"></text></g><g><title>predicates_of (420,812 samples, 0.23%)</title><rect x="60.5553%" y="117" width="0.2315%" height="15" fill="rgb(224,169,11)"/><text x="60.8053%" y="127.50"></text></g><g><title>predicates_defined_on (287,331 samples, 0.16%)</title><rect x="60.6287%" y="101" width="0.1581%" height="15" fill="rgb(250,166,2)"/><text x="60.8787%" y="111.50"></text></g><g><title>typeck (2,332,406 samples, 1.28%)</title><rect x="60.9261%" y="117" width="1.2830%" height="15" fill="rgb(242,216,29)"/><text x="61.1761%" y="127.50"></text></g><g><title>item_bodies_checking (54,147,693 samples, 29.79%)</title><rect x="32.4663%" y="165" width="29.7855%" height="15" fill="rgb(230,116,27)"/><text x="32.7163%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (54,143,783 samples, 29.78%)</title><rect x="32.4684%" y="149" width="29.7833%" height="15" fill="rgb(228,99,48)"/><text x="32.7184%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (54,055,133 samples, 29.73%)</title><rect x="32.5172%" y="133" width="29.7346%" height="15" fill="rgb(253,11,6)"/><text x="32.7672%" y="143.50">typeck</text></g><g><title>generics_of (722,559 samples, 0.40%)</title><rect x="64.1569%" y="101" width="0.3975%" height="15" fill="rgb(247,143,39)"/><text x="64.4069%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (392,365 samples, 0.22%)</title><rect x="64.3385%" y="85" width="0.2158%" height="15" fill="rgb(236,97,10)"/><text x="64.5885%" y="95.50"></text></g><g><title>impl_trait_ref (827,447 samples, 0.46%)</title><rect x="64.5826%" y="101" width="0.4552%" height="15" fill="rgb(233,208,19)"/><text x="64.8326%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (697,036 samples, 0.38%)</title><rect x="64.6543%" y="85" width="0.3834%" height="15" fill="rgb(216,164,2)"/><text x="64.9043%" y="95.50"></text></g><g><title>predicates_of (191,753 samples, 0.11%)</title><rect x="65.0471%" y="101" width="0.1055%" height="15" fill="rgb(220,129,5)"/><text x="65.2971%" y="111.50"></text></g><g><title>specializes (494,545 samples, 0.27%)</title><rect x="65.1526%" y="101" width="0.2720%" height="15" fill="rgb(242,17,10)"/><text x="65.4026%" y="111.50"></text></g><g><title>param_env (293,424 samples, 0.16%)</title><rect x="65.2632%" y="85" width="0.1614%" height="15" fill="rgb(242,107,0)"/><text x="65.5132%" y="95.50"></text></g><g><title>evaluate_obligation (3,704,582 samples, 2.04%)</title><rect x="63.4589%" y="117" width="2.0378%" height="15" fill="rgb(251,28,31)"/><text x="63.7089%" y="127.50">e..</text></g><g><title>item_types_checking (6,045,987 samples, 3.33%)</title><rect x="62.2517%" y="165" width="3.3258%" height="15" fill="rgb(233,223,10)"/><text x="62.5017%" y="175.50">ite..</text></g><g><title>check_mod_item_types (6,040,197 samples, 3.32%)</title><rect x="62.2549%" y="149" width="3.3226%" height="15" fill="rgb(215,21,27)"/><text x="62.5049%" y="159.50">che..</text></g><g><title>typeck (4,891,934 samples, 2.69%)</title><rect x="62.8866%" y="133" width="2.6909%" height="15" fill="rgb(232,23,21)"/><text x="63.1366%" y="143.50">ty..</text></g><g><title>fn_sig (361,802 samples, 0.20%)</title><rect x="65.7652%" y="133" width="0.1990%" height="15" fill="rgb(244,5,23)"/><text x="66.0152%" y="143.50"></text></g><g><title>is_late_bound_map (365,804 samples, 0.20%)</title><rect x="66.0272%" y="117" width="0.2012%" height="15" fill="rgb(226,81,46)"/><text x="66.2772%" y="127.50"></text></g><g><title>resolve_lifetimes (363,894 samples, 0.20%)</title><rect x="66.0283%" y="101" width="0.2002%" height="15" fill="rgb(247,70,30)"/><text x="66.2783%" y="111.50"></text></g><g><title>lint_levels (307,404 samples, 0.17%)</title><rect x="66.0593%" y="85" width="0.1691%" height="15" fill="rgb(212,68,19)"/><text x="66.3093%" y="95.50"></text></g><g><title>named_region_map (339,212 samples, 0.19%)</title><rect x="66.2284%" y="117" width="0.1866%" height="15" fill="rgb(240,187,13)"/><text x="66.4784%" y="127.50"></text></g><g><title>resolve_lifetimes (312,890 samples, 0.17%)</title><rect x="66.2429%" y="101" width="0.1721%" height="15" fill="rgb(223,113,26)"/><text x="66.4929%" y="111.50"></text></g><g><title>generics_of (840,510 samples, 0.46%)</title><rect x="65.9643%" y="133" width="0.4623%" height="15" fill="rgb(206,192,2)"/><text x="66.2143%" y="143.50"></text></g><g><title>predicates_of (522,184 samples, 0.29%)</title><rect x="66.4680%" y="133" width="0.2872%" height="15" fill="rgb(241,108,4)"/><text x="66.7180%" y="143.50"></text></g><g><title>predicates_defined_on (464,644 samples, 0.26%)</title><rect x="66.4997%" y="117" width="0.2556%" height="15" fill="rgb(247,173,49)"/><text x="66.7497%" y="127.50"></text></g><g><title>inferred_outlives_of (249,162 samples, 0.14%)</title><rect x="66.6182%" y="101" width="0.1371%" height="15" fill="rgb(224,114,35)"/><text x="66.8682%" y="111.50"></text></g><g><title>inferred_outlives_crate (225,742 samples, 0.12%)</title><rect x="66.6311%" y="85" width="0.1242%" height="15" fill="rgb(245,159,27)"/><text x="66.8811%" y="95.50"></text></g><g><title>type_collecting (2,289,495 samples, 1.26%)</title><rect x="65.5791%" y="165" width="1.2594%" height="15" fill="rgb(245,172,44)"/><text x="65.8291%" y="175.50"></text></g><g><title>collect_mod_item_types (2,275,235 samples, 1.25%)</title><rect x="65.5870%" y="149" width="1.2516%" height="15" fill="rgb(236,23,11)"/><text x="65.8370%" y="159.50"></text></g><g><title>evaluate_obligation (289,754 samples, 0.16%)</title><rect x="67.7580%" y="133" width="0.1594%" height="15" fill="rgb(205,117,38)"/><text x="68.0080%" y="143.50"></text></g><g><title>param_env (202,071 samples, 0.11%)</title><rect x="67.9895%" y="133" width="0.1112%" height="15" fill="rgb(237,72,25)"/><text x="68.2395%" y="143.50"></text></g><g><title>region_scope_tree (536,557 samples, 0.30%)</title><rect x="68.1116%" y="133" width="0.2951%" height="15" fill="rgb(244,70,9)"/><text x="68.3616%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,639,743 samples, 1.45%)</title><rect x="66.9622%" y="149" width="1.4521%" height="15" fill="rgb(217,125,39)"/><text x="67.2122%" y="159.50"></text></g><g><title>evaluate_obligation (567,556 samples, 0.31%)</title><rect x="69.1266%" y="133" width="0.3122%" height="15" fill="rgb(235,36,10)"/><text x="69.3766%" y="143.50"></text></g><g><title>param_env (274,521 samples, 0.15%)</title><rect x="69.4972%" y="133" width="0.1510%" height="15" fill="rgb(251,123,47)"/><text x="69.7472%" y="143.50"></text></g><g><title>region_scope_tree (192,801 samples, 0.11%)</title><rect x="69.7010%" y="133" width="0.1061%" height="15" fill="rgb(221,13,13)"/><text x="69.9510%" y="143.50"></text></g><g><title>check_item_well_formed (2,596,858 samples, 1.43%)</title><rect x="68.4142%" y="149" width="1.4285%" height="15" fill="rgb(238,131,9)"/><text x="68.6642%" y="159.50"></text></g><g><title>analysis (126,380,366 samples, 69.52%)</title><rect x="0.3662%" y="197" width="69.5191%" height="15" fill="rgb(211,50,8)"/><text x="0.6162%" y="207.50">analysis</text></g><g><title>type_check_crate (82,572,039 samples, 45.42%)</title><rect x="24.4642%" y="181" width="45.4211%" height="15" fill="rgb(245,182,24)"/><text x="24.7142%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,532,872 samples, 3.04%)</title><rect x="66.8418%" y="165" width="3.0435%" height="15" fill="rgb(242,14,37)"/><text x="67.0918%" y="175.50">wf_..</text></g><g><title>codegen_crate (344,924 samples, 0.19%)</title><rect x="69.8910%" y="197" width="0.1897%" height="15" fill="rgb(246,228,12)"/><text x="70.1410%" y="207.50"></text></g><g><title>AST_validation (340,274 samples, 0.19%)</title><rect x="70.2016%" y="181" width="0.1872%" height="15" fill="rgb(213,55,15)"/><text x="70.4516%" y="191.50"></text></g><g><title>complete_gated_feature_checking (211,602 samples, 0.12%)</title><rect x="70.3888%" y="181" width="0.1164%" height="15" fill="rgb(209,9,3)"/><text x="70.6388%" y="191.50"></text></g><g><title>metadata_load_macro (238,640 samples, 0.13%)</title><rect x="86.0599%" y="149" width="0.1313%" height="15" fill="rgb(230,59,30)"/><text x="86.3099%" y="159.50"></text></g><g><title>metadata_register_crate (2,572,268 samples, 1.41%)</title><rect x="86.1911%" y="149" width="1.4149%" height="15" fill="rgb(209,121,21)"/><text x="86.4411%" y="159.50"></text></g><g><title>metadata_register_crate (967,130 samples, 0.53%)</title><rect x="87.0741%" y="133" width="0.5320%" height="15" fill="rgb(220,109,13)"/><text x="87.3241%" y="143.50"></text></g><g><title>macro_expand_crate (31,682,572 samples, 17.43%)</title><rect x="70.5501%" y="181" width="17.4279%" height="15" fill="rgb(232,18,1)"/><text x="70.8001%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (31,655,892 samples, 17.41%)</title><rect x="70.5648%" y="165" width="17.4132%" height="15" fill="rgb(215,41,42)"/><text x="70.8148%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (676,188 samples, 0.37%)</title><rect x="87.6061%" y="149" width="0.3720%" height="15" fill="rgb(224,123,36)"/><text x="87.8561%" y="159.50"></text></g><g><title>finalize_macro_resolutions (378,034 samples, 0.21%)</title><rect x="88.1146%" y="165" width="0.2079%" height="15" fill="rgb(240,125,3)"/><text x="88.3646%" y="175.50"></text></g><g><title>late_resolve_crate (4,476,920 samples, 2.46%)</title><rect x="88.3225%" y="165" width="2.4627%" height="15" fill="rgb(205,98,50)"/><text x="88.5725%" y="175.50">la..</text></g><g><title>configure_and_expand (37,975,313 samples, 20.89%)</title><rect x="70.0807%" y="197" width="20.8894%" height="15" fill="rgb(205,185,37)"/><text x="70.3307%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,340,130 samples, 2.94%)</title><rect x="88.0326%" y="181" width="2.9375%" height="15" fill="rgb(238,207,15)"/><text x="88.2826%" y="191.50">re..</text></g><g><title>drop_ast (257,123 samples, 0.14%)</title><rect x="90.9701%" y="197" width="0.1414%" height="15" fill="rgb(213,199,42)"/><text x="91.2201%" y="207.50"></text></g><g><title>early_lint_checks (525,995 samples, 0.29%)</title><rect x="91.1207%" y="197" width="0.2893%" height="15" fill="rgb(235,201,11)"/><text x="91.3707%" y="207.50"></text></g><g><title>free_global_ctxt (4,479,930 samples, 2.46%)</title><rect x="91.4100%" y="197" width="2.4643%" height="15" fill="rgb(207,46,11)"/><text x="91.6600%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,198,644 samples, 0.66%)</title><rect x="93.8744%" y="197" width="0.6593%" height="15" fill="rgb(241,35,35)"/><text x="94.1244%" y="207.50"></text></g><g><title>hir_lowering (7,520,614 samples, 4.14%)</title><rect x="94.5337%" y="197" width="4.1369%" height="15" fill="rgb(243,32,47)"/><text x="94.7837%" y="207.50">hir_l..</text></g><g><title>parse_crate (432,195 samples, 0.24%)</title><rect x="98.7024%" y="197" width="0.2377%" height="15" fill="rgb(247,202,23)"/><text x="98.9524%" y="207.50"></text></g><g><title>prepare_outputs (339,664 samples, 0.19%)</title><rect x="98.9450%" y="197" width="0.1868%" height="15" fill="rgb(219,102,11)"/><text x="99.1950%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,179,813 samples, 0.65%)</title><rect x="99.1318%" y="197" width="0.6490%" height="15" fill="rgb(243,110,44)"/><text x="99.3818%" y="207.50"></text></g><g><title>all (181,792,264 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (181,792,264 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (305,893 samples, 0.17%)</title><rect x="99.8317%" y="197" width="0.1683%" height="15" fill="rgb(226,22,26)"/><text x="100.0817%" y="207.50"></text></g></svg></svg>