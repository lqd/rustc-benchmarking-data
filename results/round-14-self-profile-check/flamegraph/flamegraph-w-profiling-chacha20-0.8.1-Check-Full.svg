<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (699,676 samples, 0.35%)</title><rect x="11.1442%" y="165" width="0.3500%" height="15" fill="rgb(227,0,7)"/><text x="11.3942%" y="175.50"></text></g><g><title>mir_const_qualif_const_arg (586,335 samples, 0.29%)</title><rect x="11.2009%" y="149" width="0.2933%" height="15" fill="rgb(217,0,24)"/><text x="11.4509%" y="159.50"></text></g><g><title>mir_const (497,544 samples, 0.25%)</title><rect x="11.2453%" y="133" width="0.2489%" height="15" fill="rgb(221,193,54)"/><text x="11.4953%" y="143.50"></text></g><g><title>unsafety_check_result_for_const_arg (315,453 samples, 0.16%)</title><rect x="11.3364%" y="117" width="0.1578%" height="15" fill="rgb(248,212,6)"/><text x="11.5864%" y="127.50"></text></g><g><title>mir_built (273,973 samples, 0.14%)</title><rect x="11.3571%" y="101" width="0.1371%" height="15" fill="rgb(208,68,35)"/><text x="11.6071%" y="111.50"></text></g><g><title>mir_borrowck_const_arg (1,736,889 samples, 0.87%)</title><rect x="10.6275%" y="181" width="0.8688%" height="15" fill="rgb(232,128,0)"/><text x="10.8775%" y="191.50"></text></g><g><title>param_env (546,603 samples, 0.27%)</title><rect x="12.7227%" y="149" width="0.2734%" height="15" fill="rgb(207,160,47)"/><text x="12.9727%" y="159.50"></text></g><g><title>item_attrs (420,550 samples, 0.21%)</title><rect x="13.5279%" y="117" width="0.2104%" height="15" fill="rgb(228,23,34)"/><text x="13.7779%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (407,259 samples, 0.20%)</title><rect x="13.5346%" y="101" width="0.2037%" height="15" fill="rgb(218,30,26)"/><text x="13.7846%" y="111.50"></text></g><g><title>codegen_fn_attrs (642,505 samples, 0.32%)</title><rect x="13.4323%" y="133" width="0.3214%" height="15" fill="rgb(220,122,19)"/><text x="13.6823%" y="143.50"></text></g><g><title>is_copy_raw (339,922 samples, 0.17%)</title><rect x="16.1817%" y="117" width="0.1700%" height="15" fill="rgb(250,228,42)"/><text x="16.4317%" y="127.50"></text></g><g><title>evaluate_obligation (273,112 samples, 0.14%)</title><rect x="16.2152%" y="101" width="0.1366%" height="15" fill="rgb(240,193,28)"/><text x="16.4652%" y="111.50"></text></g><g><title>adt_drop_tys (284,641 samples, 0.14%)</title><rect x="16.4445%" y="101" width="0.1424%" height="15" fill="rgb(216,20,37)"/><text x="16.6945%" y="111.50"></text></g><g><title>is_copy_raw (1,551,637 samples, 0.78%)</title><rect x="16.5869%" y="101" width="0.7762%" height="15" fill="rgb(206,188,39)"/><text x="16.8369%" y="111.50"></text></g><g><title>evaluate_obligation (1,376,095 samples, 0.69%)</title><rect x="16.6747%" y="85" width="0.6884%" height="15" fill="rgb(217,207,13)"/><text x="16.9247%" y="95.50"></text></g><g><title>needs_drop_raw (2,027,039 samples, 1.01%)</title><rect x="16.3518%" y="117" width="1.0140%" height="15" fill="rgb(231,73,38)"/><text x="16.6018%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (735,735 samples, 0.37%)</title><rect x="17.5481%" y="101" width="0.3680%" height="15" fill="rgb(225,20,46)"/><text x="17.7981%" y="111.50"></text></g><g><title>impl_parent (394,465 samples, 0.20%)</title><rect x="18.2920%" y="85" width="0.1973%" height="15" fill="rgb(210,31,41)"/><text x="18.5420%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (222,674 samples, 0.11%)</title><rect x="18.3779%" y="69" width="0.1114%" height="15" fill="rgb(221,200,47)"/><text x="18.6279%" y="79.50"></text></g><g><title>specialization_graph_of (1,873,249 samples, 0.94%)</title><rect x="17.9655%" y="101" width="0.9371%" height="15" fill="rgb(226,26,5)"/><text x="18.2155%" y="111.50"></text></g><g><title>impl_trait_ref (826,157 samples, 0.41%)</title><rect x="18.4893%" y="85" width="0.4133%" height="15" fill="rgb(249,33,26)"/><text x="18.7393%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (690,846 samples, 0.35%)</title><rect x="18.5570%" y="69" width="0.3456%" height="15" fill="rgb(235,183,28)"/><text x="18.8070%" y="79.50"></text></g><g><title>resolve_instance (3,245,671 samples, 1.62%)</title><rect x="17.3658%" y="117" width="1.6236%" height="15" fill="rgb(221,5,38)"/><text x="17.6158%" y="127.50"></text></g><g><title>thir_body (2,076,790 samples, 1.04%)</title><rect x="19.0077%" y="117" width="1.0389%" height="15" fill="rgb(247,18,42)"/><text x="19.2577%" y="127.50"></text></g><g><title>mir_const (15,861,201 samples, 7.93%)</title><rect x="12.1218%" y="165" width="7.9343%" height="15" fill="rgb(241,131,45)"/><text x="12.3718%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (14,113,334 samples, 7.06%)</title><rect x="12.9961%" y="149" width="7.0599%" height="15" fill="rgb(249,31,29)"/><text x="13.2461%" y="159.50">unsafety_..</text></g><g><title>mir_built (12,598,961 samples, 6.30%)</title><rect x="13.7537%" y="133" width="6.3024%" height="15" fill="rgb(225,111,53)"/><text x="14.0037%" y="143.50">mir_built</text></g><g><title>mir_const (397,685 samples, 0.20%)</title><rect x="20.2721%" y="149" width="0.1989%" height="15" fill="rgb(238,160,17)"/><text x="20.5221%" y="159.50"></text></g><g><title>unsafety_check_result (291,574 samples, 0.15%)</title><rect x="20.3252%" y="133" width="0.1459%" height="15" fill="rgb(214,148,48)"/><text x="20.5752%" y="143.50"></text></g><g><title>mir_built (237,403 samples, 0.12%)</title><rect x="20.3523%" y="117" width="0.1188%" height="15" fill="rgb(232,36,49)"/><text x="20.6023%" y="127.50"></text></g><g><title>mir_const_qualif (859,362 samples, 0.43%)</title><rect x="20.0561%" y="165" width="0.4299%" height="15" fill="rgb(209,103,24)"/><text x="20.3061%" y="175.50"></text></g><g><title>mir_promoted (17,971,637 samples, 8.99%)</title><rect x="11.4963%" y="181" width="8.9900%" height="15" fill="rgb(229,88,8)"/><text x="11.7463%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (513,405 samples, 0.26%)</title><rect x="20.4876%" y="181" width="0.2568%" height="15" fill="rgb(213,181,19)"/><text x="20.7376%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (3,060,828 samples, 1.53%)</title><rect x="20.7444%" y="181" width="1.5311%" height="15" fill="rgb(254,191,54)"/><text x="20.9944%" y="191.50"></text></g><g><title>normalize_projection_ty (2,229,940 samples, 1.12%)</title><rect x="21.1600%" y="165" width="1.1155%" height="15" fill="rgb(241,83,37)"/><text x="21.4100%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,541,100 samples, 2.27%)</title><rect x="22.4720%" y="181" width="2.2716%" height="15" fill="rgb(233,36,39)"/><text x="22.7220%" y="191.50">t..</text></g><g><title>evaluate_obligation (276,842 samples, 0.14%)</title><rect x="24.6051%" y="165" width="0.1385%" height="15" fill="rgb(226,3,54)"/><text x="24.8551%" y="175.50"></text></g><g><title>MIR_borrow_checking (48,075,921 samples, 24.05%)</title><rect x="0.6979%" y="213" width="24.0491%" height="15" fill="rgb(245,192,40)"/><text x="0.9479%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,846,087 samples, 23.93%)</title><rect x="0.8129%" y="197" width="23.9341%" height="15" fill="rgb(238,167,29)"/><text x="1.0629%" y="207.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (280,003 samples, 0.14%)</title><rect x="24.9646%" y="181" width="0.1401%" height="15" fill="rgb(232,182,51)"/><text x="25.2146%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (539,496 samples, 0.27%)</title><rect x="24.8359%" y="197" width="0.2699%" height="15" fill="rgb(231,60,39)"/><text x="25.0859%" y="207.50"></text></g><g><title>MIR_effect_checking (724,588 samples, 0.36%)</title><rect x="24.7470%" y="213" width="0.3625%" height="15" fill="rgb(208,69,12)"/><text x="24.9970%" y="223.50"></text></g><g><title>hir_module_items (307,602 samples, 0.15%)</title><rect x="25.1095%" y="213" width="0.1539%" height="15" fill="rgb(235,93,37)"/><text x="25.3595%" y="223.50"></text></g><g><title>fn_sig (287,293 samples, 0.14%)</title><rect x="25.5633%" y="165" width="0.1437%" height="15" fill="rgb(213,116,39)"/><text x="25.8133%" y="175.50"></text></g><g><title>codegen_fn_attrs (661,837 samples, 0.33%)</title><rect x="25.5054%" y="181" width="0.3311%" height="15" fill="rgb(222,207,29)"/><text x="25.7554%" y="191.50"></text></g><g><title>check_mod_attrs (1,100,951 samples, 0.55%)</title><rect x="25.2858%" y="197" width="0.5507%" height="15" fill="rgb(206,96,30)"/><text x="25.5358%" y="207.50"></text></g><g><title>check_mod_const_bodies (202,250 samples, 0.10%)</title><rect x="25.8366%" y="197" width="0.1012%" height="15" fill="rgb(218,138,4)"/><text x="26.0866%" y="207.50"></text></g><g><title>mir_borrowck (435,155 samples, 0.22%)</title><rect x="26.5661%" y="69" width="0.2177%" height="15" fill="rgb(250,191,14)"/><text x="26.8161%" y="79.50"></text></g><g><title>mir_for_ctfe (585,216 samples, 0.29%)</title><rect x="26.4915%" y="101" width="0.2927%" height="15" fill="rgb(239,60,40)"/><text x="26.7415%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (539,886 samples, 0.27%)</title><rect x="26.5142%" y="85" width="0.2701%" height="15" fill="rgb(206,27,48)"/><text x="26.7642%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (206,263 samples, 0.10%)</title><rect x="26.7845%" y="101" width="0.1032%" height="15" fill="rgb(225,35,8)"/><text x="27.0345%" y="111.50"></text></g><g><title>evaluate_obligation (203,451 samples, 0.10%)</title><rect x="27.0377%" y="85" width="0.1018%" height="15" fill="rgb(250,213,24)"/><text x="27.2877%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,770,270 samples, 0.89%)</title><rect x="26.3031%" y="149" width="0.8855%" height="15" fill="rgb(247,123,22)"/><text x="26.5531%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,760,220 samples, 0.88%)</title><rect x="26.3082%" y="133" width="0.8805%" height="15" fill="rgb(231,138,38)"/><text x="26.5582%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,756,360 samples, 0.88%)</title><rect x="26.3101%" y="117" width="0.8786%" height="15" fill="rgb(231,145,46)"/><text x="26.5601%" y="127.50"></text></g><g><title>typeck (601,746 samples, 0.30%)</title><rect x="26.8877%" y="101" width="0.3010%" height="15" fill="rgb(251,118,11)"/><text x="27.1377%" y="111.50"></text></g><g><title>is_copy_raw (2,170,914 samples, 1.09%)</title><rect x="26.1569%" y="181" width="1.0860%" height="15" fill="rgb(217,147,25)"/><text x="26.4069%" y="191.50"></text></g><g><title>evaluate_obligation (2,149,604 samples, 1.08%)</title><rect x="26.1676%" y="165" width="1.0753%" height="15" fill="rgb(247,81,37)"/><text x="26.4176%" y="175.50"></text></g><g><title>lookup_deprecation_entry (223,044 samples, 0.11%)</title><rect x="27.2429%" y="181" width="0.1116%" height="15" fill="rgb(209,12,38)"/><text x="27.4929%" y="191.50"></text></g><g><title>predicates_of (443,194 samples, 0.22%)</title><rect x="27.4843%" y="165" width="0.2217%" height="15" fill="rgb(227,1,9)"/><text x="27.7343%" y="175.50"></text></g><g><title>predicates_defined_on (440,374 samples, 0.22%)</title><rect x="27.4857%" y="149" width="0.2203%" height="15" fill="rgb(248,47,43)"/><text x="27.7357%" y="159.50"></text></g><g><title>inferred_outlives_of (340,713 samples, 0.17%)</title><rect x="27.5355%" y="133" width="0.1704%" height="15" fill="rgb(221,10,30)"/><text x="27.7855%" y="143.50"></text></g><g><title>inferred_outlives_crate (332,513 samples, 0.17%)</title><rect x="27.5396%" y="117" width="0.1663%" height="15" fill="rgb(210,229,1)"/><text x="27.7896%" y="127.50"></text></g><g><title>param_env (656,377 samples, 0.33%)</title><rect x="27.3965%" y="181" width="0.3283%" height="15" fill="rgb(222,148,37)"/><text x="27.6465%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (3,501,942 samples, 1.75%)</title><rect x="26.0174%" y="197" width="1.7518%" height="15" fill="rgb(234,67,33)"/><text x="26.2674%" y="207.50"></text></g><g><title>misc_checking_1 (5,112,186 samples, 2.56%)</title><rect x="25.2639%" y="213" width="2.5573%" height="15" fill="rgb(247,98,35)"/><text x="25.5139%" y="223.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (905,660 samples, 0.45%)</title><rect x="27.8220%" y="197" width="0.4530%" height="15" fill="rgb(247,138,52)"/><text x="28.0720%" y="207.50"></text></g><g><title>check_mod_liveness (724,000 samples, 0.36%)</title><rect x="27.9128%" y="181" width="0.3622%" height="15" fill="rgb(213,79,30)"/><text x="28.1628%" y="191.50"></text></g><g><title>misc_checking_2 (1,745,099 samples, 0.87%)</title><rect x="27.8212%" y="213" width="0.8730%" height="15" fill="rgb(246,177,23)"/><text x="28.0712%" y="223.50"></text></g><g><title>match_checking (837,939 samples, 0.42%)</title><rect x="28.2750%" y="197" width="0.4192%" height="15" fill="rgb(230,62,27)"/><text x="28.5250%" y="207.50"></text></g><g><title>check_match (776,529 samples, 0.39%)</title><rect x="28.3057%" y="181" width="0.3884%" height="15" fill="rgb(216,154,8)"/><text x="28.5557%" y="191.50"></text></g><g><title>check_private_in_public (402,125 samples, 0.20%)</title><rect x="28.6989%" y="197" width="0.2012%" height="15" fill="rgb(244,35,45)"/><text x="28.9489%" y="207.50"></text></g><g><title>death_checking (787,279 samples, 0.39%)</title><rect x="28.9000%" y="197" width="0.3938%" height="15" fill="rgb(251,115,12)"/><text x="29.1500%" y="207.50"></text></g><g><title>eval_to_const_value_raw (275,033 samples, 0.14%)</title><rect x="29.8472%" y="165" width="0.1376%" height="15" fill="rgb(240,54,50)"/><text x="30.0972%" y="175.50"></text></g><g><title>eval_to_const_value_raw (267,973 samples, 0.13%)</title><rect x="29.8507%" y="149" width="0.1340%" height="15" fill="rgb(233,84,52)"/><text x="30.1007%" y="159.50"></text></g><g><title>eval_to_allocation_raw (256,773 samples, 0.13%)</title><rect x="29.8563%" y="133" width="0.1284%" height="15" fill="rgb(207,117,47)"/><text x="30.1063%" y="143.50"></text></g><g><title>param_env (810,237 samples, 0.41%)</title><rect x="29.9847%" y="165" width="0.4053%" height="15" fill="rgb(249,43,39)"/><text x="30.2347%" y="175.50"></text></g><g><title>predicates_of (366,565 samples, 0.18%)</title><rect x="30.2067%" y="149" width="0.1834%" height="15" fill="rgb(209,38,44)"/><text x="30.4567%" y="159.50"></text></g><g><title>predicates_defined_on (301,535 samples, 0.15%)</title><rect x="30.2392%" y="133" width="0.1508%" height="15" fill="rgb(236,212,23)"/><text x="30.4892%" y="143.50"></text></g><g><title>crate_lints (2,903,622 samples, 1.45%)</title><rect x="29.2947%" y="181" width="1.4525%" height="15" fill="rgb(242,79,21)"/><text x="29.5447%" y="191.50"></text></g><g><title>type_of (702,378 samples, 0.35%)</title><rect x="30.3958%" y="165" width="0.3514%" height="15" fill="rgb(211,96,35)"/><text x="30.6458%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (387,894 samples, 0.19%)</title><rect x="30.5531%" y="149" width="0.1940%" height="15" fill="rgb(253,215,40)"/><text x="30.8031%" y="159.50"></text></g><g><title>lint_checking (3,780,822 samples, 1.89%)</title><rect x="29.2939%" y="197" width="1.8913%" height="15" fill="rgb(211,81,21)"/><text x="29.5439%" y="207.50">l..</text></g><g><title>module_lints (875,560 samples, 0.44%)</title><rect x="30.7472%" y="181" width="0.4380%" height="15" fill="rgb(208,190,38)"/><text x="30.9972%" y="191.50"></text></g><g><title>lint_mod (864,580 samples, 0.43%)</title><rect x="30.7527%" y="165" width="0.4325%" height="15" fill="rgb(235,213,38)"/><text x="31.0027%" y="175.50"></text></g><g><title>privacy_access_levels (341,584 samples, 0.17%)</title><rect x="31.1852%" y="197" width="0.1709%" height="15" fill="rgb(237,122,38)"/><text x="31.4352%" y="207.50"></text></g><g><title>privacy_checking_modules (1,317,774 samples, 0.66%)</title><rect x="31.3560%" y="197" width="0.6592%" height="15" fill="rgb(244,218,35)"/><text x="31.6060%" y="207.50"></text></g><g><title>check_mod_privacy (1,309,314 samples, 0.65%)</title><rect x="31.3603%" y="181" width="0.6550%" height="15" fill="rgb(240,68,47)"/><text x="31.6103%" y="191.50"></text></g><g><title>misc_checking_3 (6,658,554 samples, 3.33%)</title><rect x="28.6942%" y="213" width="3.3308%" height="15" fill="rgb(210,16,53)"/><text x="28.9442%" y="223.50">mis..</text></g><g><title>adt_destructor (216,832 samples, 0.11%)</title><rect x="32.2363%" y="165" width="0.1085%" height="15" fill="rgb(235,124,12)"/><text x="32.4863%" y="175.50"></text></g><g><title>coherent_trait (212,202 samples, 0.11%)</title><rect x="32.2386%" y="149" width="0.1062%" height="15" fill="rgb(224,169,11)"/><text x="32.4886%" y="159.50"></text></g><g><title>specialization_graph_of (210,662 samples, 0.11%)</title><rect x="32.2394%" y="133" width="0.1054%" height="15" fill="rgb(250,166,2)"/><text x="32.4894%" y="143.50"></text></g><g><title>impl_parent (577,805 samples, 0.29%)</title><rect x="32.8205%" y="149" width="0.2890%" height="15" fill="rgb(242,216,29)"/><text x="33.0705%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (360,502 samples, 0.18%)</title><rect x="32.9292%" y="133" width="0.1803%" height="15" fill="rgb(230,116,27)"/><text x="33.1792%" y="143.50"></text></g><g><title>impl_trait_ref (1,352,619 samples, 0.68%)</title><rect x="33.1095%" y="149" width="0.6766%" height="15" fill="rgb(228,99,48)"/><text x="33.3595%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,140,487 samples, 0.57%)</title><rect x="33.2156%" y="133" width="0.5705%" height="15" fill="rgb(253,11,6)"/><text x="33.4656%" y="143.50"></text></g><g><title>coherent_trait (3,325,247 samples, 1.66%)</title><rect x="32.2172%" y="181" width="1.6634%" height="15" fill="rgb(247,143,39)"/><text x="32.4672%" y="191.50"></text></g><g><title>specialization_graph_of (2,985,573 samples, 1.49%)</title><rect x="32.3871%" y="165" width="1.4935%" height="15" fill="rgb(236,97,10)"/><text x="32.6371%" y="175.50"></text></g><g><title>coherence_checking (3,404,798 samples, 1.70%)</title><rect x="32.2096%" y="197" width="1.7032%" height="15" fill="rgb(233,208,19)"/><text x="32.4596%" y="207.50"></text></g><g><title>adt_def (202,763 samples, 0.10%)</title><rect x="55.8773%" y="133" width="0.1014%" height="15" fill="rgb(216,164,2)"/><text x="56.1273%" y="143.50"></text></g><g><title>adt_sized_constraint (249,723 samples, 0.12%)</title><rect x="55.8627%" y="149" width="0.1249%" height="15" fill="rgb(220,129,5)"/><text x="56.1127%" y="159.50"></text></g><g><title>associated_item (955,589 samples, 0.48%)</title><rect x="56.1239%" y="133" width="0.4780%" height="15" fill="rgb(242,17,10)"/><text x="56.3739%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (812,978 samples, 0.41%)</title><rect x="56.1952%" y="117" width="0.4067%" height="15" fill="rgb(242,107,0)"/><text x="56.4452%" y="127.50"></text></g><g><title>associated_items (1,283,152 samples, 0.64%)</title><rect x="55.9914%" y="149" width="0.6419%" height="15" fill="rgb(251,28,31)"/><text x="56.2414%" y="159.50"></text></g><g><title>adt_dtorck_constraint (262,793 samples, 0.13%)</title><rect x="56.8668%" y="133" width="0.1315%" height="15" fill="rgb(233,223,10)"/><text x="57.1168%" y="143.50"></text></g><g><title>dropck_outlives (733,577 samples, 0.37%)</title><rect x="56.6901%" y="149" width="0.3670%" height="15" fill="rgb(215,21,27)"/><text x="56.9401%" y="159.50"></text></g><g><title>mir_for_ctfe (254,843 samples, 0.13%)</title><rect x="57.2218%" y="101" width="0.1275%" height="15" fill="rgb(232,23,21)"/><text x="57.4718%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (206,683 samples, 0.10%)</title><rect x="57.2459%" y="85" width="0.1034%" height="15" fill="rgb(244,5,23)"/><text x="57.4959%" y="95.50"></text></g><g><title>eval_to_const_value_raw (597,446 samples, 0.30%)</title><rect x="57.0571%" y="149" width="0.2989%" height="15" fill="rgb(226,81,46)"/><text x="57.3071%" y="159.50"></text></g><g><title>eval_to_const_value_raw (592,116 samples, 0.30%)</title><rect x="57.0597%" y="133" width="0.2962%" height="15" fill="rgb(247,70,30)"/><text x="57.3097%" y="143.50"></text></g><g><title>eval_to_allocation_raw (581,046 samples, 0.29%)</title><rect x="57.0653%" y="117" width="0.2907%" height="15" fill="rgb(212,68,19)"/><text x="57.3153%" y="127.50"></text></g><g><title>generics_of (836,248 samples, 0.42%)</title><rect x="60.4961%" y="133" width="0.4183%" height="15" fill="rgb(240,187,13)"/><text x="60.7461%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (626,445 samples, 0.31%)</title><rect x="60.6011%" y="117" width="0.3134%" height="15" fill="rgb(223,113,26)"/><text x="60.8511%" y="127.50"></text></g><g><title>impl_trait_ref (1,072,114 samples, 0.54%)</title><rect x="61.0329%" y="133" width="0.5363%" height="15" fill="rgb(206,192,2)"/><text x="61.2829%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (866,552 samples, 0.43%)</title><rect x="61.1357%" y="117" width="0.4335%" height="15" fill="rgb(241,108,4)"/><text x="61.3857%" y="127.50"></text></g><g><title>predicates_of (1,153,184 samples, 0.58%)</title><rect x="61.6015%" y="133" width="0.5769%" height="15" fill="rgb(247,173,49)"/><text x="61.8515%" y="143.50"></text></g><g><title>predicates_defined_on (647,391 samples, 0.32%)</title><rect x="61.8545%" y="117" width="0.3238%" height="15" fill="rgb(224,114,35)"/><text x="62.1045%" y="127.50"></text></g><g><title>specializes (2,521,542 samples, 1.26%)</title><rect x="62.1784%" y="133" width="1.2614%" height="15" fill="rgb(245,159,27)"/><text x="62.4284%" y="143.50"></text></g><g><title>param_env (1,468,069 samples, 0.73%)</title><rect x="62.7053%" y="117" width="0.7344%" height="15" fill="rgb(245,172,44)"/><text x="62.9553%" y="127.50"></text></g><g><title>def_span (652,539 samples, 0.33%)</title><rect x="63.1133%" y="101" width="0.3264%" height="15" fill="rgb(236,23,11)"/><text x="63.3633%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (575,378 samples, 0.29%)</title><rect x="63.1519%" y="85" width="0.2878%" height="15" fill="rgb(205,117,38)"/><text x="63.4019%" y="95.50"></text></g><g><title>trait_impls_of (526,307 samples, 0.26%)</title><rect x="63.4491%" y="133" width="0.2633%" height="15" fill="rgb(237,72,25)"/><text x="63.6991%" y="143.50"></text></g><g><title>implementations_of_trait (214,611 samples, 0.11%)</title><rect x="63.6050%" y="117" width="0.1074%" height="15" fill="rgb(244,70,9)"/><text x="63.8550%" y="127.50"></text></g><g><title>evaluate_obligation (12,737,479 samples, 6.37%)</title><rect x="57.3559%" y="149" width="6.3717%" height="15" fill="rgb(217,125,39)"/><text x="57.6059%" y="159.50">evaluate..</text></g><g><title>fn_sig (206,832 samples, 0.10%)</title><rect x="63.7560%" y="149" width="0.1035%" height="15" fill="rgb(235,36,10)"/><text x="64.0060%" y="159.50"></text></g><g><title>generics_of (305,672 samples, 0.15%)</title><rect x="63.8595%" y="149" width="0.1529%" height="15" fill="rgb(251,123,47)"/><text x="64.1095%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (230,342 samples, 0.12%)</title><rect x="63.8972%" y="133" width="0.1152%" height="15" fill="rgb(221,13,13)"/><text x="64.1472%" y="143.50"></text></g><g><title>impl_item_implementor_ids (324,084 samples, 0.16%)</title><rect x="64.0124%" y="149" width="0.1621%" height="15" fill="rgb(238,131,9)"/><text x="64.2624%" y="159.50"></text></g><g><title>associated_items (287,734 samples, 0.14%)</title><rect x="64.0306%" y="133" width="0.1439%" height="15" fill="rgb(211,50,8)"/><text x="64.2806%" y="143.50"></text></g><g><title>impl_trait_ref (323,051 samples, 0.16%)</title><rect x="64.1846%" y="149" width="0.1616%" height="15" fill="rgb(245,182,24)"/><text x="64.4346%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (288,521 samples, 0.14%)</title><rect x="64.2018%" y="133" width="0.1443%" height="15" fill="rgb(242,14,37)"/><text x="64.4518%" y="143.50"></text></g><g><title>item_attrs (208,124 samples, 0.10%)</title><rect x="64.3632%" y="149" width="0.1041%" height="15" fill="rgb(246,228,12)"/><text x="64.6132%" y="159.50"></text></g><g><title>evaluate_obligation (462,415 samples, 0.23%)</title><rect x="64.7304%" y="133" width="0.2313%" height="15" fill="rgb(213,55,15)"/><text x="64.9804%" y="143.50"></text></g><g><title>method_autoderef_steps (887,580 samples, 0.44%)</title><rect x="64.5233%" y="149" width="0.4440%" height="15" fill="rgb(209,9,3)"/><text x="64.7733%" y="159.50"></text></g><g><title>opt_const_param_of (1,989,922 samples, 1.00%)</title><rect x="65.0323%" y="149" width="0.9954%" height="15" fill="rgb(230,59,30)"/><text x="65.2823%" y="159.50"></text></g><g><title>typeck (1,935,852 samples, 0.97%)</title><rect x="65.0593%" y="133" width="0.9684%" height="15" fill="rgb(209,121,21)"/><text x="65.3093%" y="143.50"></text></g><g><title>predicates_of (616,295 samples, 0.31%)</title><rect x="66.1098%" y="149" width="0.3083%" height="15" fill="rgb(220,109,13)"/><text x="66.3598%" y="159.50"></text></g><g><title>predicates_defined_on (424,651 samples, 0.21%)</title><rect x="66.2057%" y="133" width="0.2124%" height="15" fill="rgb(232,18,1)"/><text x="66.4557%" y="143.50"></text></g><g><title>evaluate_obligation (395,685 samples, 0.20%)</title><rect x="68.8752%" y="133" width="0.1979%" height="15" fill="rgb(215,41,42)"/><text x="69.1252%" y="143.50"></text></g><g><title>typeck (5,201,777 samples, 2.60%)</title><rect x="66.6059%" y="149" width="2.6021%" height="15" fill="rgb(224,123,36)"/><text x="66.8559%" y="159.50">ty..</text></g><g><title>param_env (229,293 samples, 0.11%)</title><rect x="69.4222%" y="133" width="0.1147%" height="15" fill="rgb(240,125,3)"/><text x="69.6722%" y="143.50"></text></g><g><title>typeck_const_arg (711,728 samples, 0.36%)</title><rect x="69.2080%" y="149" width="0.3560%" height="15" fill="rgb(205,98,50)"/><text x="69.4580%" y="159.50"></text></g><g><title>item_bodies_checking (71,307,058 samples, 35.67%)</title><rect x="33.9324%" y="197" width="35.6701%" height="15" fill="rgb(205,185,37)"/><text x="34.1824%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (71,302,888 samples, 35.67%)</title><rect x="33.9345%" y="181" width="35.6680%" height="15" fill="rgb(238,207,15)"/><text x="34.1845%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (71,163,298 samples, 35.60%)</title><rect x="34.0044%" y="165" width="35.5981%" height="15" fill="rgb(213,199,42)"/><text x="34.2544%" y="175.50">typeck</text></g><g><title>evaluate_obligation (973,001 samples, 0.49%)</title><rect x="70.2004%" y="165" width="0.4867%" height="15" fill="rgb(235,201,11)"/><text x="70.4504%" y="175.50"></text></g><g><title>item_types_checking (3,199,595 samples, 1.60%)</title><rect x="69.6025%" y="197" width="1.6005%" height="15" fill="rgb(207,46,11)"/><text x="69.8525%" y="207.50"></text></g><g><title>check_mod_item_types (3,187,344 samples, 1.59%)</title><rect x="69.6086%" y="181" width="1.5944%" height="15" fill="rgb(241,35,35)"/><text x="69.8586%" y="191.50"></text></g><g><title>typeck (797,270 samples, 0.40%)</title><rect x="70.8042%" y="165" width="0.3988%" height="15" fill="rgb(243,32,47)"/><text x="71.0542%" y="175.50"></text></g><g><title>fn_sig (218,843 samples, 0.11%)</title><rect x="71.3903%" y="165" width="0.1095%" height="15" fill="rgb(247,202,23)"/><text x="71.6403%" y="175.50"></text></g><g><title>named_region_map (427,804 samples, 0.21%)</title><rect x="71.5570%" y="149" width="0.2140%" height="15" fill="rgb(219,102,11)"/><text x="71.8070%" y="159.50"></text></g><g><title>resolve_lifetimes (413,534 samples, 0.21%)</title><rect x="71.5642%" y="133" width="0.2069%" height="15" fill="rgb(243,110,44)"/><text x="71.8142%" y="143.50"></text></g><g><title>lint_levels (302,093 samples, 0.15%)</title><rect x="71.6199%" y="117" width="0.1511%" height="15" fill="rgb(222,74,54)"/><text x="71.8699%" y="127.50"></text></g><g><title>generics_of (555,694 samples, 0.28%)</title><rect x="71.4997%" y="165" width="0.2780%" height="15" fill="rgb(216,99,12)"/><text x="71.7497%" y="175.50"></text></g><g><title>explicit_predicates_of (361,414 samples, 0.18%)</title><rect x="71.8865%" y="133" width="0.1808%" height="15" fill="rgb(226,22,26)"/><text x="72.1365%" y="143.50"></text></g><g><title>predicates_of (571,577 samples, 0.29%)</title><rect x="71.7947%" y="165" width="0.2859%" height="15" fill="rgb(217,163,10)"/><text x="72.0447%" y="175.50"></text></g><g><title>predicates_defined_on (502,016 samples, 0.25%)</title><rect x="71.8295%" y="149" width="0.2511%" height="15" fill="rgb(213,25,53)"/><text x="72.0795%" y="159.50"></text></g><g><title>type_collecting (1,898,301 samples, 0.95%)</title><rect x="71.2072%" y="197" width="0.9496%" height="15" fill="rgb(252,105,26)"/><text x="71.4572%" y="207.50"></text></g><g><title>collect_mod_item_types (1,887,911 samples, 0.94%)</title><rect x="71.2124%" y="181" width="0.9444%" height="15" fill="rgb(220,39,43)"/><text x="71.4624%" y="191.50"></text></g><g><title>mir_const_qualif (224,471 samples, 0.11%)</title><rect x="74.2006%" y="117" width="0.1123%" height="15" fill="rgb(229,68,48)"/><text x="74.4506%" y="127.50"></text></g><g><title>mir_borrowck (511,416 samples, 0.26%)</title><rect x="74.4457%" y="85" width="0.2558%" height="15" fill="rgb(252,8,32)"/><text x="74.6957%" y="95.50"></text></g><g><title>mir_for_ctfe (779,769 samples, 0.39%)</title><rect x="74.3129%" y="117" width="0.3901%" height="15" fill="rgb(223,20,43)"/><text x="74.5629%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (712,067 samples, 0.36%)</title><rect x="74.3468%" y="101" width="0.3562%" height="15" fill="rgb(229,81,49)"/><text x="74.5968%" y="111.50"></text></g><g><title>mir_for_ctfe (218,592 samples, 0.11%)</title><rect x="74.7783%" y="53" width="0.1093%" height="15" fill="rgb(236,28,36)"/><text x="75.0283%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (200,162 samples, 0.10%)</title><rect x="74.7875%" y="37" width="0.1001%" height="15" fill="rgb(249,185,26)"/><text x="75.0375%" y="47.50"></text></g><g><title>eval_to_const_value_raw (441,345 samples, 0.22%)</title><rect x="74.7126%" y="101" width="0.2208%" height="15" fill="rgb(249,174,33)"/><text x="74.9626%" y="111.50"></text></g><g><title>eval_to_const_value_raw (438,285 samples, 0.22%)</title><rect x="74.7141%" y="85" width="0.2192%" height="15" fill="rgb(233,201,37)"/><text x="74.9641%" y="95.50"></text></g><g><title>eval_to_allocation_raw (429,735 samples, 0.21%)</title><rect x="74.7184%" y="69" width="0.2150%" height="15" fill="rgb(221,78,26)"/><text x="74.9684%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (465,796 samples, 0.23%)</title><rect x="74.7039%" y="117" width="0.2330%" height="15" fill="rgb(250,127,30)"/><text x="74.9539%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,978,804 samples, 0.99%)</title><rect x="74.1197%" y="165" width="0.9899%" height="15" fill="rgb(230,49,44)"/><text x="74.3697%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,970,354 samples, 0.99%)</title><rect x="74.1239%" y="149" width="0.9856%" height="15" fill="rgb(229,67,23)"/><text x="74.3739%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,956,173 samples, 0.98%)</title><rect x="74.1310%" y="133" width="0.9785%" height="15" fill="rgb(249,83,47)"/><text x="74.3810%" y="143.50"></text></g><g><title>typeck (345,125 samples, 0.17%)</title><rect x="74.9369%" y="117" width="0.1726%" height="15" fill="rgb(215,43,3)"/><text x="75.1869%" y="127.50"></text></g><g><title>evaluate_obligation (913,022 samples, 0.46%)</title><rect x="75.1095%" y="165" width="0.4567%" height="15" fill="rgb(238,154,13)"/><text x="75.3595%" y="175.50"></text></g><g><title>implied_outlives_bounds (302,514 samples, 0.15%)</title><rect x="75.6190%" y="165" width="0.1513%" height="15" fill="rgb(219,56,2)"/><text x="75.8690%" y="175.50"></text></g><g><title>param_env (432,952 samples, 0.22%)</title><rect x="75.7731%" y="165" width="0.2166%" height="15" fill="rgb(233,0,4)"/><text x="76.0231%" y="175.50"></text></g><g><title>region_scope_tree (472,343 samples, 0.24%)</title><rect x="76.0275%" y="165" width="0.2363%" height="15" fill="rgb(235,30,7)"/><text x="76.2775%" y="175.50"></text></g><g><title>check_impl_item_well_formed (8,000,918 samples, 4.00%)</title><rect x="72.3191%" y="181" width="4.0023%" height="15" fill="rgb(250,79,13)"/><text x="72.5691%" y="191.50">chec..</text></g><g><title>mir_borrowck (281,163 samples, 0.14%)</title><rect x="77.6210%" y="85" width="0.1406%" height="15" fill="rgb(211,146,34)"/><text x="77.8710%" y="95.50"></text></g><g><title>mir_for_ctfe (426,074 samples, 0.21%)</title><rect x="77.5493%" y="117" width="0.2131%" height="15" fill="rgb(228,22,38)"/><text x="77.7993%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (390,144 samples, 0.20%)</title><rect x="77.5673%" y="101" width="0.1952%" height="15" fill="rgb(235,168,5)"/><text x="77.8173%" y="111.50"></text></g><g><title>eval_to_const_value_raw (610,557 samples, 0.31%)</title><rect x="77.7649%" y="101" width="0.3054%" height="15" fill="rgb(221,155,16)"/><text x="78.0149%" y="111.50"></text></g><g><title>eval_to_const_value_raw (609,947 samples, 0.31%)</title><rect x="77.7652%" y="85" width="0.3051%" height="15" fill="rgb(215,215,53)"/><text x="78.0152%" y="95.50"></text></g><g><title>eval_to_allocation_raw (609,017 samples, 0.30%)</title><rect x="77.7657%" y="69" width="0.3046%" height="15" fill="rgb(223,4,10)"/><text x="78.0157%" y="79.50"></text></g><g><title>typeck (258,573 samples, 0.13%)</title><rect x="77.9410%" y="53" width="0.1293%" height="15" fill="rgb(234,103,6)"/><text x="78.1910%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (616,697 samples, 0.31%)</title><rect x="77.7630%" y="117" width="0.3085%" height="15" fill="rgb(227,97,0)"/><text x="78.0130%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,424,636 samples, 0.71%)</title><rect x="77.4442%" y="165" width="0.7126%" height="15" fill="rgb(234,150,53)"/><text x="77.6942%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,420,806 samples, 0.71%)</title><rect x="77.4461%" y="149" width="0.7107%" height="15" fill="rgb(228,201,54)"/><text x="77.6961%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,412,086 samples, 0.71%)</title><rect x="77.4505%" y="133" width="0.7064%" height="15" fill="rgb(222,22,37)"/><text x="77.7005%" y="143.50"></text></g><g><title>evaluate_obligation (344,703 samples, 0.17%)</title><rect x="78.1569%" y="165" width="0.1724%" height="15" fill="rgb(237,53,32)"/><text x="78.4069%" y="175.50"></text></g><g><title>param_env (391,206 samples, 0.20%)</title><rect x="78.3945%" y="165" width="0.1957%" height="15" fill="rgb(233,25,53)"/><text x="78.6445%" y="175.50"></text></g><g><title>region_scope_tree (232,950 samples, 0.12%)</title><rect x="78.6154%" y="165" width="0.1165%" height="15" fill="rgb(210,40,34)"/><text x="78.8654%" y="175.50"></text></g><g><title>check_item_well_formed (4,947,122 samples, 2.47%)</title><rect x="76.3214%" y="181" width="2.4747%" height="15" fill="rgb(241,220,44)"/><text x="76.5714%" y="191.50">ch..</text></g><g><title>analysis (156,623,300 samples, 78.35%)</title><rect x="0.4693%" y="229" width="78.3480%" height="15" fill="rgb(235,28,35)"/><text x="0.7193%" y="239.50">analysis</text></g><g><title>type_check_crate (93,541,193 samples, 46.79%)</title><rect x="32.0250%" y="213" width="46.7923%" height="15" fill="rgb(210,56,17)"/><text x="32.2750%" y="223.50">type_check_crate</text></g><g><title>wf_checking (13,298,637 samples, 6.65%)</title><rect x="72.1649%" y="197" width="6.6524%" height="15" fill="rgb(224,130,29)"/><text x="72.4149%" y="207.50">wf_checki..</text></g><g><title>codegen_crate (326,463 samples, 0.16%)</title><rect x="78.8204%" y="229" width="0.1633%" height="15" fill="rgb(235,212,8)"/><text x="79.0704%" y="239.50"></text></g><g><title>AST_validation (293,633 samples, 0.15%)</title><rect x="79.0503%" y="213" width="0.1469%" height="15" fill="rgb(223,33,50)"/><text x="79.3003%" y="223.50"></text></g><g><title>metadata_load_macro (259,422 samples, 0.13%)</title><rect x="90.4452%" y="181" width="0.1298%" height="15" fill="rgb(219,149,13)"/><text x="90.6952%" y="191.50"></text></g><g><title>metadata_register_crate (353,724 samples, 0.18%)</title><rect x="90.5750%" y="181" width="0.1769%" height="15" fill="rgb(250,156,29)"/><text x="90.8250%" y="191.50"></text></g><g><title>macro_expand_crate (23,298,327 samples, 11.65%)</title><rect x="79.2799%" y="213" width="11.6546%" height="15" fill="rgb(216,193,19)"/><text x="79.5299%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (23,286,527 samples, 11.65%)</title><rect x="79.2858%" y="197" width="11.6487%" height="15" fill="rgb(216,135,14)"/><text x="79.5358%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (364,883 samples, 0.18%)</title><rect x="90.7519%" y="181" width="0.1825%" height="15" fill="rgb(241,47,5)"/><text x="91.0019%" y="191.50"></text></g><g><title>finalize_imports (448,595 samples, 0.22%)</title><rect x="90.9628%" y="197" width="0.2244%" height="15" fill="rgb(233,42,35)"/><text x="91.2128%" y="207.50"></text></g><g><title>late_resolve_crate (2,102,783 samples, 1.05%)</title><rect x="91.2550%" y="197" width="1.0519%" height="15" fill="rgb(231,13,6)"/><text x="91.5050%" y="207.50"></text></g><g><title>configure_and_expand (26,905,217 samples, 13.46%)</title><rect x="78.9838%" y="229" width="13.4588%" height="15" fill="rgb(207,181,40)"/><text x="79.2338%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,962,692 samples, 1.48%)</title><rect x="90.9606%" y="213" width="1.4820%" height="15" fill="rgb(254,173,49)"/><text x="91.2106%" y="223.50"></text></g><g><title>drop_ast (350,164 samples, 0.18%)</title><rect x="92.4426%" y="229" width="0.1752%" height="15" fill="rgb(221,1,38)"/><text x="92.6926%" y="239.50"></text></g><g><title>early_lint_checks (672,087 samples, 0.34%)</title><rect x="92.6268%" y="229" width="0.3362%" height="15" fill="rgb(206,124,46)"/><text x="92.8768%" y="239.50"></text></g><g><title>free_global_ctxt (3,057,175 samples, 1.53%)</title><rect x="92.9630%" y="229" width="1.5293%" height="15" fill="rgb(249,21,11)"/><text x="93.2130%" y="239.50"></text></g><g><title>mir_for_ctfe (302,012 samples, 0.15%)</title><rect x="96.2289%" y="213" width="0.1511%" height="15" fill="rgb(222,201,40)"/><text x="96.4789%" y="223.50"></text></g><g><title>generate_crate_metadata (3,922,874 samples, 1.96%)</title><rect x="94.4923%" y="229" width="1.9623%" height="15" fill="rgb(235,61,29)"/><text x="94.7423%" y="239.50">g..</text></g><g><title>hir_lowering (4,677,022 samples, 2.34%)</title><rect x="96.4547%" y="229" width="2.3396%" height="15" fill="rgb(219,207,3)"/><text x="96.7047%" y="239.50">h..</text></g><g><title>parse_crate (368,684 samples, 0.18%)</title><rect x="98.8166%" y="229" width="0.1844%" height="15" fill="rgb(222,56,46)"/><text x="99.0666%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,053,152 samples, 0.53%)</title><rect x="99.0958%" y="229" width="0.5268%" height="15" fill="rgb(239,76,54)"/><text x="99.3458%" y="239.50"></text></g><g><title>all (199,907,318 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(231,124,27)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (199,907,318 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,195,6)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (654,277 samples, 0.33%)</title><rect x="99.6727%" y="229" width="0.3273%" height="15" fill="rgb(237,174,47)"/><text x="99.9227%" y="239.50"></text></g></svg></svg>