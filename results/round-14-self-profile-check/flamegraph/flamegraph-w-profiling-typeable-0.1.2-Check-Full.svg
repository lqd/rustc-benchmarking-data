<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (27,321 samples, 0.13%)</title><rect x="5.9976%" y="149" width="0.1271%" height="15" fill="rgb(227,0,7)"/><text x="6.2476%" y="159.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (26,201 samples, 0.12%)</title><rect x="6.0028%" y="133" width="0.1219%" height="15" fill="rgb(217,0,24)"/><text x="6.2528%" y="143.50"></text></g><g><title>param_env (22,020 samples, 0.10%)</title><rect x="6.1247%" y="149" width="0.1024%" height="15" fill="rgb(221,193,54)"/><text x="6.3747%" y="159.50"></text></g><g><title>mir_const (286,893 samples, 1.33%)</title><rect x="5.6980%" y="165" width="1.3344%" height="15" fill="rgb(248,212,6)"/><text x="5.9480%" y="175.50"></text></g><g><title>unsafety_check_result (173,152 samples, 0.81%)</title><rect x="6.2271%" y="149" width="0.8054%" height="15" fill="rgb(208,68,35)"/><text x="6.4771%" y="159.50"></text></g><g><title>mir_built (110,932 samples, 0.52%)</title><rect x="6.5165%" y="133" width="0.5160%" height="15" fill="rgb(232,128,0)"/><text x="6.7665%" y="143.50"></text></g><g><title>mir_promoted (377,554 samples, 1.76%)</title><rect x="5.3064%" y="181" width="1.7561%" height="15" fill="rgb(207,160,47)"/><text x="5.5564%" y="191.50"></text></g><g><title>MIR_borrow_checking (880,110 samples, 4.09%)</title><rect x="3.0487%" y="213" width="4.0936%" height="15" fill="rgb(228,23,34)"/><text x="3.2987%" y="223.50">MIR_..</text></g><g><title>mir_borrowck (876,700 samples, 4.08%)</title><rect x="3.0645%" y="197" width="4.0778%" height="15" fill="rgb(218,30,26)"/><text x="3.3145%" y="207.50">mir_..</text></g><g><title>hir_owner (27,021 samples, 0.13%)</title><rect x="7.4830%" y="197" width="0.1257%" height="15" fill="rgb(220,122,19)"/><text x="7.7330%" y="207.50"></text></g><g><title>hir_module_items (97,071 samples, 0.45%)</title><rect x="7.1595%" y="213" width="0.4515%" height="15" fill="rgb(250,228,42)"/><text x="7.4095%" y="223.50"></text></g><g><title>get_lang_items (66,020 samples, 0.31%)</title><rect x="8.2947%" y="165" width="0.3071%" height="15" fill="rgb(240,193,28)"/><text x="8.5447%" y="175.50"></text></g><g><title>associated_item (24,150 samples, 0.11%)</title><rect x="8.7417%" y="149" width="0.1123%" height="15" fill="rgb(216,20,37)"/><text x="8.9917%" y="159.50"></text></g><g><title>should_inherit_track_caller (55,611 samples, 0.26%)</title><rect x="8.6018%" y="165" width="0.2587%" height="15" fill="rgb(206,188,39)"/><text x="8.8518%" y="175.50"></text></g><g><title>codegen_fn_attrs (218,772 samples, 1.02%)</title><rect x="7.9635%" y="181" width="1.0176%" height="15" fill="rgb(217,207,13)"/><text x="8.2135%" y="191.50"></text></g><g><title>supported_target_features (25,920 samples, 0.12%)</title><rect x="8.8605%" y="165" width="0.1206%" height="15" fill="rgb(231,73,38)"/><text x="9.1105%" y="175.50"></text></g><g><title>check_mod_attrs (271,034 samples, 1.26%)</title><rect x="7.7220%" y="197" width="1.2606%" height="15" fill="rgb(225,20,46)"/><text x="7.9720%" y="207.50"></text></g><g><title>lookup_deprecation_entry (42,840 samples, 0.20%)</title><rect x="9.2738%" y="181" width="0.1993%" height="15" fill="rgb(210,31,41)"/><text x="9.5238%" y="191.50"></text></g><g><title>lookup_stability (31,590 samples, 0.15%)</title><rect x="9.4731%" y="181" width="0.1469%" height="15" fill="rgb(221,200,47)"/><text x="9.7231%" y="191.50"></text></g><g><title>metadata_decode_entry_lookup_stability (28,320 samples, 0.13%)</title><rect x="9.4883%" y="165" width="0.1317%" height="15" fill="rgb(226,26,5)"/><text x="9.7383%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (111,471 samples, 0.52%)</title><rect x="9.1314%" y="197" width="0.5185%" height="15" fill="rgb(249,33,26)"/><text x="9.3814%" y="207.50"></text></g><g><title>looking_for_derive_registrar (23,020 samples, 0.11%)</title><rect x="9.6565%" y="197" width="0.1071%" height="15" fill="rgb(235,183,28)"/><text x="9.9065%" y="207.50"></text></g><g><title>misc_checking_1 (466,015 samples, 2.17%)</title><rect x="7.6133%" y="213" width="2.1676%" height="15" fill="rgb(221,5,38)"/><text x="7.8633%" y="223.50">m..</text></g><g><title>liveness_and_intrinsic_checking (50,551 samples, 0.24%)</title><rect x="9.7886%" y="197" width="0.2351%" height="15" fill="rgb(247,18,42)"/><text x="10.0386%" y="207.50"></text></g><g><title>check_mod_liveness (40,421 samples, 0.19%)</title><rect x="9.8357%" y="181" width="0.1880%" height="15" fill="rgb(241,131,45)"/><text x="10.0857%" y="191.50"></text></g><g><title>misc_checking_2 (131,042 samples, 0.61%)</title><rect x="9.7808%" y="213" width="0.6095%" height="15" fill="rgb(249,31,29)"/><text x="10.0308%" y="223.50"></text></g><g><title>match_checking (78,821 samples, 0.37%)</title><rect x="10.0237%" y="197" width="0.3666%" height="15" fill="rgb(225,111,53)"/><text x="10.2737%" y="207.50"></text></g><g><title>check_match (76,491 samples, 0.36%)</title><rect x="10.0345%" y="181" width="0.3558%" height="15" fill="rgb(238,160,17)"/><text x="10.2845%" y="191.50"></text></g><g><title>check_private_in_public (31,891 samples, 0.15%)</title><rect x="10.4315%" y="197" width="0.1483%" height="15" fill="rgb(214,148,48)"/><text x="10.6815%" y="207.50"></text></g><g><title>death_checking (87,031 samples, 0.40%)</title><rect x="10.5798%" y="197" width="0.4048%" height="15" fill="rgb(232,36,49)"/><text x="10.8298%" y="207.50"></text></g><g><title>lint_levels (29,110 samples, 0.14%)</title><rect x="10.8492%" y="181" width="0.1354%" height="15" fill="rgb(209,103,24)"/><text x="11.0992%" y="191.50"></text></g><g><title>crate_lints (109,391 samples, 0.51%)</title><rect x="10.9943%" y="181" width="0.5088%" height="15" fill="rgb(229,88,8)"/><text x="11.2443%" y="191.50"></text></g><g><title>param_env (72,441 samples, 0.34%)</title><rect x="11.1662%" y="165" width="0.3369%" height="15" fill="rgb(213,181,19)"/><text x="11.4162%" y="175.50"></text></g><g><title>predicates_of (34,780 samples, 0.16%)</title><rect x="11.3413%" y="149" width="0.1618%" height="15" fill="rgb(254,191,54)"/><text x="11.5913%" y="159.50"></text></g><g><title>predicates_defined_on (30,550 samples, 0.14%)</title><rect x="11.3610%" y="133" width="0.1421%" height="15" fill="rgb(241,83,37)"/><text x="11.6110%" y="143.50"></text></g><g><title>lint_checking (135,481 samples, 0.63%)</title><rect x="10.9846%" y="197" width="0.6302%" height="15" fill="rgb(233,36,39)"/><text x="11.2346%" y="207.50"></text></g><g><title>module_lints (24,010 samples, 0.11%)</title><rect x="11.5031%" y="181" width="0.1117%" height="15" fill="rgb(226,3,54)"/><text x="11.7531%" y="191.50"></text></g><g><title>privacy_access_levels (48,980 samples, 0.23%)</title><rect x="11.6148%" y="197" width="0.2278%" height="15" fill="rgb(245,192,40)"/><text x="11.8648%" y="207.50"></text></g><g><title>privacy_checking_modules (28,891 samples, 0.13%)</title><rect x="11.8426%" y="197" width="0.1344%" height="15" fill="rgb(238,167,29)"/><text x="12.0926%" y="207.50"></text></g><g><title>check_mod_privacy (27,041 samples, 0.13%)</title><rect x="11.8512%" y="181" width="0.1258%" height="15" fill="rgb(232,182,51)"/><text x="12.1012%" y="191.50"></text></g><g><title>misc_checking_3 (358,614 samples, 1.67%)</title><rect x="10.3903%" y="213" width="1.6680%" height="15" fill="rgb(231,60,39)"/><text x="10.6403%" y="223.50"></text></g><g><title>coherent_trait (83,901 samples, 0.39%)</title><rect x="12.2254%" y="181" width="0.3902%" height="15" fill="rgb(208,69,12)"/><text x="12.4754%" y="191.50"></text></g><g><title>specialization_graph_of (66,440 samples, 0.31%)</title><rect x="12.3066%" y="165" width="0.3090%" height="15" fill="rgb(235,93,37)"/><text x="12.5566%" y="175.50"></text></g><g><title>orphan_check_crate (28,251 samples, 0.13%)</title><rect x="12.6491%" y="181" width="0.1314%" height="15" fill="rgb(213,116,39)"/><text x="12.8991%" y="191.50"></text></g><g><title>coherence_checking (135,692 samples, 0.63%)</title><rect x="12.1588%" y="197" width="0.6311%" height="15" fill="rgb(222,207,29)"/><text x="12.4088%" y="207.50"></text></g><g><title>associated_items (22,641 samples, 0.11%)</title><rect x="14.4318%" y="149" width="0.1053%" height="15" fill="rgb(206,96,30)"/><text x="14.6818%" y="159.50"></text></g><g><title>impl_parent (142,361 samples, 0.66%)</title><rect x="15.5031%" y="53" width="0.6622%" height="15" fill="rgb(218,138,4)"/><text x="15.7531%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (101,871 samples, 0.47%)</title><rect x="15.6914%" y="37" width="0.4738%" height="15" fill="rgb(250,191,14)"/><text x="15.9414%" y="47.50"></text></g><g><title>impl_trait_ref (694,706 samples, 3.23%)</title><rect x="16.1653%" y="53" width="3.2313%" height="15" fill="rgb(239,60,40)"/><text x="16.4153%" y="63.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (656,035 samples, 3.05%)</title><rect x="16.3451%" y="37" width="3.0514%" height="15" fill="rgb(206,27,48)"/><text x="16.5951%" y="47.50">met..</text></g><g><title>adt_destructor (1,052,721 samples, 4.90%)</title><rect x="14.7306%" y="117" width="4.8965%" height="15" fill="rgb(225,35,8)"/><text x="14.9806%" y="127.50">adt_de..</text></g><g><title>metadata_decode_entry_adt_destructor (1,051,831 samples, 4.89%)</title><rect x="14.7348%" y="101" width="4.8923%" height="15" fill="rgb(250,213,24)"/><text x="14.9848%" y="111.50">metada..</text></g><g><title>coherent_trait (1,048,001 samples, 4.87%)</title><rect x="14.7526%" y="85" width="4.8745%" height="15" fill="rgb(247,123,22)"/><text x="15.0026%" y="95.50">cohere..</text></g><g><title>specialization_graph_of (1,045,491 samples, 4.86%)</title><rect x="14.7643%" y="69" width="4.8628%" height="15" fill="rgb(231,138,38)"/><text x="15.0143%" y="79.50">specia..</text></g><g><title>trait_impls_of (49,580 samples, 0.23%)</title><rect x="19.3965%" y="53" width="0.2306%" height="15" fill="rgb(231,145,46)"/><text x="19.6465%" y="63.50"></text></g><g><title>dropck_outlives (1,095,152 samples, 5.09%)</title><rect x="14.5451%" y="149" width="5.0938%" height="15" fill="rgb(251,118,11)"/><text x="14.7951%" y="159.50">dropck..</text></g><g><title>adt_dtorck_constraint (1,062,971 samples, 4.94%)</title><rect x="14.6948%" y="133" width="4.9442%" height="15" fill="rgb(217,147,25)"/><text x="14.9448%" y="143.50">adt_dt..</text></g><g><title>adt_def (30,390 samples, 0.14%)</title><rect x="19.7194%" y="117" width="0.1414%" height="15" fill="rgb(247,81,37)"/><text x="19.9694%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (29,430 samples, 0.14%)</title><rect x="19.7238%" y="101" width="0.1369%" height="15" fill="rgb(209,12,38)"/><text x="19.9738%" y="111.50"></text></g><g><title>item_attrs (22,520 samples, 0.10%)</title><rect x="19.7560%" y="85" width="0.1047%" height="15" fill="rgb(227,1,9)"/><text x="20.0060%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (21,700 samples, 0.10%)</title><rect x="19.7598%" y="69" width="0.1009%" height="15" fill="rgb(248,47,43)"/><text x="20.0098%" y="79.50"></text></g><g><title>evaluate_obligation (48,941 samples, 0.23%)</title><rect x="19.6389%" y="149" width="0.2276%" height="15" fill="rgb(221,10,30)"/><text x="19.8889%" y="159.50"></text></g><g><title>adt_sized_constraint (36,650 samples, 0.17%)</title><rect x="19.6961%" y="133" width="0.1705%" height="15" fill="rgb(210,229,1)"/><text x="19.9461%" y="143.50"></text></g><g><title>trait_impls_of (31,110 samples, 0.14%)</title><rect x="20.1762%" y="149" width="0.1447%" height="15" fill="rgb(222,148,37)"/><text x="20.4262%" y="159.50"></text></g><g><title>item_bodies_checking (1,631,028 samples, 7.59%)</title><rect x="12.8234%" y="197" width="7.5863%" height="15" fill="rgb(234,67,33)"/><text x="13.0734%" y="207.50">item_bodie..</text></g><g><title>typeck_item_bodies (1,628,408 samples, 7.57%)</title><rect x="12.8356%" y="181" width="7.5741%" height="15" fill="rgb(247,98,35)"/><text x="13.0856%" y="191.50">typeck_ite..</text></g><g><title>typeck (1,624,398 samples, 7.56%)</title><rect x="12.8543%" y="165" width="7.5555%" height="15" fill="rgb(247,138,52)"/><text x="13.1043%" y="175.50">typeck</text></g><g><title>item_types_checking (30,030 samples, 0.14%)</title><rect x="20.4098%" y="197" width="0.1397%" height="15" fill="rgb(213,79,30)"/><text x="20.6598%" y="207.50"></text></g><g><title>check_mod_item_types (27,300 samples, 0.13%)</title><rect x="20.4225%" y="181" width="0.1270%" height="15" fill="rgb(246,177,23)"/><text x="20.6725%" y="191.50"></text></g><g><title>fn_sig (46,320 samples, 0.22%)</title><rect x="20.8567%" y="165" width="0.2154%" height="15" fill="rgb(230,62,27)"/><text x="21.1067%" y="175.50"></text></g><g><title>named_region_map (28,210 samples, 0.13%)</title><rect x="21.1989%" y="149" width="0.1312%" height="15" fill="rgb(216,154,8)"/><text x="21.4489%" y="159.50"></text></g><g><title>resolve_lifetimes (26,150 samples, 0.12%)</title><rect x="21.2085%" y="133" width="0.1216%" height="15" fill="rgb(244,35,45)"/><text x="21.4585%" y="143.50"></text></g><g><title>generics_of (68,032 samples, 0.32%)</title><rect x="21.0722%" y="165" width="0.3164%" height="15" fill="rgb(251,115,12)"/><text x="21.3222%" y="175.50"></text></g><g><title>explicit_predicates_of (73,490 samples, 0.34%)</title><rect x="21.4656%" y="133" width="0.3418%" height="15" fill="rgb(240,54,50)"/><text x="21.7156%" y="143.50"></text></g><g><title>predicates_of (93,930 samples, 0.44%)</title><rect x="21.4044%" y="165" width="0.4369%" height="15" fill="rgb(233,84,52)"/><text x="21.6544%" y="175.50"></text></g><g><title>predicates_defined_on (89,080 samples, 0.41%)</title><rect x="21.4270%" y="149" width="0.4143%" height="15" fill="rgb(207,117,47)"/><text x="21.6770%" y="159.50"></text></g><g><title>late_bound_vars_map (31,550 samples, 0.15%)</title><rect x="22.2378%" y="133" width="0.1467%" height="15" fill="rgb(249,43,39)"/><text x="22.4878%" y="143.50"></text></g><g><title>resolve_lifetimes_trait_definition (21,920 samples, 0.10%)</title><rect x="22.2826%" y="117" width="0.1020%" height="15" fill="rgb(209,38,44)"/><text x="22.5326%" y="127.50"></text></g><g><title>super_predicates_of (34,301 samples, 0.16%)</title><rect x="22.3866%" y="133" width="0.1595%" height="15" fill="rgb(236,212,23)"/><text x="22.6366%" y="143.50"></text></g><g><title>metadata_decode_entry_super_predicates_of (32,671 samples, 0.15%)</title><rect x="22.3942%" y="117" width="0.1520%" height="15" fill="rgb(242,79,21)"/><text x="22.6442%" y="127.50"></text></g><g><title>super_predicates_of (155,412 samples, 0.72%)</title><rect x="21.8413%" y="165" width="0.7229%" height="15" fill="rgb(211,96,35)"/><text x="22.0913%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (144,182 samples, 0.67%)</title><rect x="21.8935%" y="149" width="0.6706%" height="15" fill="rgb(253,215,40)"/><text x="22.1435%" y="159.50"></text></g><g><title>type_collecting (452,295 samples, 2.10%)</title><rect x="20.5558%" y="197" width="2.1037%" height="15" fill="rgb(211,81,21)"/><text x="20.8058%" y="207.50">t..</text></g><g><title>collect_mod_item_types (442,295 samples, 2.06%)</title><rect x="20.6024%" y="181" width="2.0572%" height="15" fill="rgb(208,190,38)"/><text x="20.8524%" y="191.50">c..</text></g><g><title>param_env (191,383 samples, 0.89%)</title><rect x="24.8426%" y="165" width="0.8902%" height="15" fill="rgb(235,213,38)"/><text x="25.0926%" y="175.50"></text></g><g><title>explicit_predicates_of (22,200 samples, 0.10%)</title><rect x="25.8376%" y="133" width="0.1033%" height="15" fill="rgb(237,122,38)"/><text x="26.0876%" y="143.50"></text></g><g><title>predicates_of (54,080 samples, 0.25%)</title><rect x="25.7328%" y="165" width="0.2515%" height="15" fill="rgb(244,218,35)"/><text x="25.9828%" y="175.50"></text></g><g><title>predicates_defined_on (39,630 samples, 0.18%)</title><rect x="25.8000%" y="149" width="0.1843%" height="15" fill="rgb(240,68,47)"/><text x="26.0500%" y="159.50"></text></g><g><title>check_item_well_formed (735,808 samples, 3.42%)</title><rect x="22.7698%" y="181" width="3.4224%" height="15" fill="rgb(210,16,53)"/><text x="23.0198%" y="191.50">che..</text></g><g><title>trait_impls_of (37,470 samples, 0.17%)</title><rect x="26.0179%" y="165" width="0.1743%" height="15" fill="rgb(235,124,12)"/><text x="26.2679%" y="175.50"></text></g><g><title>implementations_of_trait (21,670 samples, 0.10%)</title><rect x="26.0914%" y="149" width="0.1008%" height="15" fill="rgb(224,169,11)"/><text x="26.3414%" y="159.50"></text></g><g><title>evaluate_obligation (159,691 samples, 0.74%)</title><rect x="26.9447%" y="165" width="0.7428%" height="15" fill="rgb(250,166,2)"/><text x="27.1947%" y="175.50"></text></g><g><title>trait_impls_of (25,721 samples, 0.12%)</title><rect x="27.5678%" y="149" width="0.1196%" height="15" fill="rgb(242,216,29)"/><text x="27.8178%" y="159.50"></text></g><g><title>implied_outlives_bounds (68,011 samples, 0.32%)</title><rect x="27.6875%" y="165" width="0.3163%" height="15" fill="rgb(230,116,27)"/><text x="27.9375%" y="175.50"></text></g><g><title>param_env (21,770 samples, 0.10%)</title><rect x="28.0038%" y="165" width="0.1013%" height="15" fill="rgb(228,99,48)"/><text x="28.2538%" y="175.50"></text></g><g><title>analysis (5,518,311 samples, 25.67%)</title><rect x="2.5493%" y="229" width="25.6671%" height="15" fill="rgb(253,11,6)"/><text x="2.7993%" y="239.50">analysis</text></g><g><title>type_check_crate (3,473,918 samples, 16.16%)</title><rect x="12.0583%" y="213" width="16.1581%" height="15" fill="rgb(247,143,39)"/><text x="12.3083%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,193,963 samples, 5.55%)</title><rect x="22.6630%" y="197" width="5.5534%" height="15" fill="rgb(236,97,10)"/><text x="22.9130%" y="207.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (435,194 samples, 2.02%)</title><rect x="26.1922%" y="181" width="2.0242%" height="15" fill="rgb(233,208,19)"/><text x="26.4422%" y="191.50">c..</text></g><g><title>codegen_crate (377,984 samples, 1.76%)</title><rect x="28.2586%" y="229" width="1.7581%" height="15" fill="rgb(216,164,2)"/><text x="28.5086%" y="239.50"></text></g><g><title>AST_validation (73,490 samples, 0.34%)</title><rect x="30.8995%" y="213" width="0.3418%" height="15" fill="rgb(220,129,5)"/><text x="31.1495%" y="223.50"></text></g><g><title>crate_injection (82,451 samples, 0.38%)</title><rect x="31.3212%" y="213" width="0.3835%" height="15" fill="rgb(242,17,10)"/><text x="31.5712%" y="223.50"></text></g><g><title>metadata_load_macro (52,990 samples, 0.25%)</title><rect x="67.8538%" y="181" width="0.2465%" height="15" fill="rgb(242,107,0)"/><text x="68.1038%" y="191.50"></text></g><g><title>macro_expand_crate (10,180,583 samples, 47.35%)</title><rect x="31.7047%" y="213" width="47.3525%" height="15" fill="rgb(251,28,31)"/><text x="31.9547%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (10,160,452 samples, 47.26%)</title><rect x="31.7983%" y="197" width="47.2589%" height="15" fill="rgb(233,223,10)"/><text x="32.0483%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,355,687 samples, 10.96%)</title><rect x="68.1003%" y="181" width="10.9569%" height="15" fill="rgb(215,21,27)"/><text x="68.3503%" y="191.50">metadata_registe..</text></g><g><title>metadata_register_crate (866,089 samples, 4.03%)</title><rect x="75.0288%" y="165" width="4.0284%" height="15" fill="rgb(232,23,21)"/><text x="75.2788%" y="175.50">meta..</text></g><g><title>metadata_register_crate (67,381 samples, 0.31%)</title><rect x="78.7438%" y="149" width="0.3134%" height="15" fill="rgb(244,5,23)"/><text x="78.9938%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (84,461 samples, 0.39%)</title><rect x="79.0768%" y="213" width="0.3928%" height="15" fill="rgb(226,81,46)"/><text x="79.3268%" y="223.50"></text></g><g><title>finalize_macro_resolutions (276,193 samples, 1.28%)</title><rect x="79.5931%" y="197" width="1.2846%" height="15" fill="rgb(247,70,30)"/><text x="79.8431%" y="207.50"></text></g><g><title>late_resolve_crate (304,273 samples, 1.42%)</title><rect x="80.8777%" y="197" width="1.4153%" height="15" fill="rgb(212,68,19)"/><text x="81.1277%" y="207.50"></text></g><g><title>configure_and_expand (11,271,175 samples, 52.43%)</title><rect x="30.0167%" y="229" width="52.4251%" height="15" fill="rgb(240,187,13)"/><text x="30.2667%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (639,018 samples, 2.97%)</title><rect x="79.4696%" y="213" width="2.9722%" height="15" fill="rgb(223,113,26)"/><text x="79.7196%" y="223.50">res..</text></g><g><title>drop_ast (23,630 samples, 0.11%)</title><rect x="82.4419%" y="229" width="0.1099%" height="15" fill="rgb(206,192,2)"/><text x="82.6919%" y="239.50"></text></g><g><title>early_lint_checks (74,141 samples, 0.34%)</title><rect x="82.6175%" y="229" width="0.3448%" height="15" fill="rgb(241,108,4)"/><text x="82.8675%" y="239.50"></text></g><g><title>free_global_ctxt (1,466,476 samples, 6.82%)</title><rect x="82.9624%" y="229" width="6.8210%" height="15" fill="rgb(247,173,49)"/><text x="83.2124%" y="239.50">free_glob..</text></g><g><title>crate_hash (69,551 samples, 0.32%)</title><rect x="90.9584%" y="213" width="0.3235%" height="15" fill="rgb(224,114,35)"/><text x="91.2084%" y="223.50"></text></g><g><title>mir_keys (23,400 samples, 0.11%)</title><rect x="91.5536%" y="213" width="0.1088%" height="15" fill="rgb(245,159,27)"/><text x="91.8036%" y="223.50"></text></g><g><title>variances_of (23,180 samples, 0.11%)</title><rect x="91.7022%" y="213" width="0.1078%" height="15" fill="rgb(245,172,44)"/><text x="91.9522%" y="223.50"></text></g><g><title>generate_crate_metadata (435,995 samples, 2.03%)</title><rect x="89.7833%" y="229" width="2.0279%" height="15" fill="rgb(236,23,11)"/><text x="90.0333%" y="239.50">g..</text></g><g><title>hir_lowering (321,874 samples, 1.50%)</title><rect x="91.8113%" y="229" width="1.4971%" height="15" fill="rgb(205,117,38)"/><text x="92.0613%" y="239.50"></text></g><g><title>link (44,231 samples, 0.21%)</title><rect x="93.3084%" y="229" width="0.2057%" height="15" fill="rgb(237,72,25)"/><text x="93.5584%" y="239.50"></text></g><g><title>parse_crate (417,165 samples, 1.94%)</title><rect x="93.5141%" y="229" width="1.9403%" height="15" fill="rgb(244,70,9)"/><text x="93.7641%" y="239.50">p..</text></g><g><title>prepare_outputs (266,433 samples, 1.24%)</title><rect x="95.4910%" y="229" width="1.2392%" height="15" fill="rgb(217,125,39)"/><text x="95.7410%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (309,693 samples, 1.44%)</title><rect x="96.7303%" y="229" width="1.4405%" height="15" fill="rgb(235,36,10)"/><text x="96.9803%" y="239.50"></text></g><g><title>setup_global_ctxt (111,741 samples, 0.52%)</title><rect x="98.2385%" y="229" width="0.5197%" height="15" fill="rgb(251,123,47)"/><text x="98.4885%" y="239.50"></text></g><g><title>all (21,499,569 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (21,499,569 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (266,983 samples, 1.24%)</title><rect x="98.7582%" y="229" width="1.2418%" height="15" fill="rgb(211,50,8)"/><text x="99.0082%" y="239.50"></text></g></svg></svg>