<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (96,341 samples, 0.11%)</title><rect x="5.5129%" y="149" width="0.1113%" height="15" fill="rgb(227,0,7)"/><text x="5.7629%" y="159.50"></text></g><g><title>param_env (225,873 samples, 0.26%)</title><rect x="6.3994%" y="117" width="0.2610%" height="15" fill="rgb(217,0,24)"/><text x="6.6494%" y="127.50"></text></g><g><title>item_attrs (243,062 samples, 0.28%)</title><rect x="6.9134%" y="85" width="0.2809%" height="15" fill="rgb(221,193,54)"/><text x="7.1634%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (235,462 samples, 0.27%)</title><rect x="6.9222%" y="69" width="0.2721%" height="15" fill="rgb(248,212,6)"/><text x="7.1722%" y="79.50"></text></g><g><title>codegen_fn_attrs (317,954 samples, 0.37%)</title><rect x="6.8374%" y="101" width="0.3674%" height="15" fill="rgb(208,68,35)"/><text x="7.0874%" y="111.50"></text></g><g><title>adt_drop_tys (170,933 samples, 0.20%)</title><rect x="8.1442%" y="69" width="0.1975%" height="15" fill="rgb(232,128,0)"/><text x="8.3942%" y="79.50"></text></g><g><title>is_copy_raw (277,344 samples, 0.32%)</title><rect x="8.3435%" y="69" width="0.3205%" height="15" fill="rgb(207,160,47)"/><text x="8.5935%" y="79.50"></text></g><g><title>evaluate_obligation (230,552 samples, 0.27%)</title><rect x="8.3975%" y="53" width="0.2664%" height="15" fill="rgb(228,23,34)"/><text x="8.6475%" y="63.50"></text></g><g><title>needs_drop_raw (502,157 samples, 0.58%)</title><rect x="8.0903%" y="85" width="0.5803%" height="15" fill="rgb(218,30,26)"/><text x="8.3403%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (119,891 samples, 0.14%)</title><rect x="8.7605%" y="69" width="0.1385%" height="15" fill="rgb(220,122,19)"/><text x="9.0105%" y="79.50"></text></g><g><title>specialization_graph_of (119,522 samples, 0.14%)</title><rect x="8.9203%" y="69" width="0.1381%" height="15" fill="rgb(250,228,42)"/><text x="9.1703%" y="79.50"></text></g><g><title>resolve_instance (388,365 samples, 0.45%)</title><rect x="8.6705%" y="85" width="0.4488%" height="15" fill="rgb(240,193,28)"/><text x="8.9205%" y="95.50"></text></g><g><title>lit_to_const (151,732 samples, 0.18%)</title><rect x="9.9803%" y="69" width="0.1753%" height="15" fill="rgb(216,20,37)"/><text x="10.2303%" y="79.50"></text></g><g><title>thir_body (886,822 samples, 1.02%)</title><rect x="9.1341%" y="85" width="1.0248%" height="15" fill="rgb(206,188,39)"/><text x="9.3841%" y="95.50"></text></g><g><title>mir_const (3,546,680 samples, 4.10%)</title><rect x="6.0695%" y="133" width="4.0984%" height="15" fill="rgb(217,207,13)"/><text x="6.3195%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (3,035,285 samples, 3.51%)</title><rect x="6.6604%" y="117" width="3.5074%" height="15" fill="rgb(231,73,38)"/><text x="6.9104%" y="127.50">uns..</text></g><g><title>mir_built (2,564,221 samples, 2.96%)</title><rect x="7.2048%" y="101" width="2.9631%" height="15" fill="rgb(225,20,46)"/><text x="7.4548%" y="111.50">mir..</text></g><g><title>thir_body (740,089 samples, 0.86%)</title><rect x="10.4442%" y="69" width="0.8552%" height="15" fill="rgb(210,31,41)"/><text x="10.6942%" y="79.50"></text></g><g><title>lit_to_const (301,264 samples, 0.35%)</title><rect x="10.9513%" y="53" width="0.3481%" height="15" fill="rgb(221,200,47)"/><text x="11.2013%" y="63.50"></text></g><g><title>mir_const_qualif (980,570 samples, 1.13%)</title><rect x="10.1679%" y="133" width="1.1331%" height="15" fill="rgb(226,26,5)"/><text x="10.4179%" y="143.50"></text></g><g><title>mir_const (912,270 samples, 1.05%)</title><rect x="10.2468%" y="117" width="1.0542%" height="15" fill="rgb(249,33,26)"/><text x="10.4968%" y="127.50"></text></g><g><title>unsafety_check_result (844,769 samples, 0.98%)</title><rect x="10.3248%" y="101" width="0.9762%" height="15" fill="rgb(235,183,28)"/><text x="10.5748%" y="111.50"></text></g><g><title>mir_built (802,449 samples, 0.93%)</title><rect x="10.3737%" y="85" width="0.9273%" height="15" fill="rgb(221,5,38)"/><text x="10.6237%" y="95.50"></text></g><g><title>mir_promoted (4,856,616 samples, 5.61%)</title><rect x="5.6893%" y="149" width="5.6121%" height="15" fill="rgb(247,18,42)"/><text x="5.9393%" y="159.50">mir_pro..</text></g><g><title>type_op_normalize_fn_sig (201,644 samples, 0.23%)</title><rect x="11.3754%" y="149" width="0.2330%" height="15" fill="rgb(241,131,45)"/><text x="11.6254%" y="159.50"></text></g><g><title>normalize_projection_ty (113,274 samples, 0.13%)</title><rect x="11.4775%" y="133" width="0.1309%" height="15" fill="rgb(249,31,29)"/><text x="11.7275%" y="143.50"></text></g><g><title>type_op_normalize_predicate (105,751 samples, 0.12%)</title><rect x="11.6084%" y="149" width="0.1222%" height="15" fill="rgb(225,111,53)"/><text x="11.8584%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,324,435 samples, 1.53%)</title><rect x="11.7525%" y="149" width="1.5305%" height="15" fill="rgb(238,160,17)"/><text x="12.0025%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,839,901 samples, 12.53%)</title><rect x="0.7579%" y="181" width="12.5261%" height="15" fill="rgb(214,148,48)"/><text x="1.0079%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,798,021 samples, 12.48%)</title><rect x="0.8063%" y="165" width="12.4777%" height="15" fill="rgb(232,36,49)"/><text x="1.0563%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (147,371 samples, 0.17%)</title><rect x="13.2840%" y="181" width="0.1703%" height="15" fill="rgb(209,103,24)"/><text x="13.5340%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (124,621 samples, 0.14%)</title><rect x="13.3103%" y="165" width="0.1440%" height="15" fill="rgb(229,88,8)"/><text x="13.5603%" y="175.50"></text></g><g><title>hir_module_items (98,381 samples, 0.11%)</title><rect x="13.4543%" y="181" width="0.1137%" height="15" fill="rgb(213,181,19)"/><text x="13.7043%" y="191.50"></text></g><g><title>should_inherit_track_caller (131,551 samples, 0.15%)</title><rect x="13.8508%" y="133" width="0.1520%" height="15" fill="rgb(254,191,54)"/><text x="14.1008%" y="143.50"></text></g><g><title>codegen_fn_attrs (281,723 samples, 0.33%)</title><rect x="13.7033%" y="149" width="0.3255%" height="15" fill="rgb(241,83,37)"/><text x="13.9533%" y="159.50"></text></g><g><title>check_mod_attrs (375,994 samples, 0.43%)</title><rect x="13.5946%" y="165" width="0.4345%" height="15" fill="rgb(233,36,39)"/><text x="13.8446%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (186,652 samples, 0.22%)</title><rect x="14.1119%" y="165" width="0.2157%" height="15" fill="rgb(226,3,54)"/><text x="14.3619%" y="175.50"></text></g><g><title>misc_checking_1 (685,428 samples, 0.79%)</title><rect x="13.5684%" y="181" width="0.7921%" height="15" fill="rgb(245,192,40)"/><text x="13.8184%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (155,152 samples, 0.18%)</title><rect x="14.3621%" y="165" width="0.1793%" height="15" fill="rgb(238,167,29)"/><text x="14.6121%" y="175.50"></text></g><g><title>check_mod_liveness (122,571 samples, 0.14%)</title><rect x="14.3998%" y="149" width="0.1416%" height="15" fill="rgb(232,182,51)"/><text x="14.6498%" y="159.50"></text></g><g><title>misc_checking_2 (358,864 samples, 0.41%)</title><rect x="14.3604%" y="181" width="0.4147%" height="15" fill="rgb(231,60,39)"/><text x="14.6104%" y="191.50"></text></g><g><title>match_checking (202,222 samples, 0.23%)</title><rect x="14.5414%" y="165" width="0.2337%" height="15" fill="rgb(208,69,12)"/><text x="14.7914%" y="175.50"></text></g><g><title>check_match (190,672 samples, 0.22%)</title><rect x="14.5548%" y="149" width="0.2203%" height="15" fill="rgb(235,93,37)"/><text x="14.8048%" y="159.50"></text></g><g><title>death_checking (130,061 samples, 0.15%)</title><rect x="14.8483%" y="165" width="0.1503%" height="15" fill="rgb(213,116,39)"/><text x="15.0983%" y="175.50"></text></g><g><title>eval_to_const_value_raw (203,313 samples, 0.23%)</title><rect x="15.5362%" y="133" width="0.2349%" height="15" fill="rgb(222,207,29)"/><text x="15.7862%" y="143.50"></text></g><g><title>eval_to_const_value_raw (194,023 samples, 0.22%)</title><rect x="15.5470%" y="117" width="0.2242%" height="15" fill="rgb(206,96,30)"/><text x="15.7970%" y="127.50"></text></g><g><title>eval_to_allocation_raw (187,303 samples, 0.22%)</title><rect x="15.5547%" y="101" width="0.2164%" height="15" fill="rgb(218,138,4)"/><text x="15.8047%" y="111.50"></text></g><g><title>trait_impls_of (218,132 samples, 0.25%)</title><rect x="15.8174%" y="133" width="0.2521%" height="15" fill="rgb(250,191,14)"/><text x="16.0674%" y="143.50"></text></g><g><title>crate_lints (2,304,626 samples, 2.66%)</title><rect x="15.0004%" y="149" width="2.6631%" height="15" fill="rgb(239,60,40)"/><text x="15.2504%" y="159.50">cr..</text></g><g><title>type_of (1,372,296 samples, 1.59%)</title><rect x="16.0777%" y="133" width="1.5858%" height="15" fill="rgb(206,27,48)"/><text x="16.3277%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,133,241 samples, 1.31%)</title><rect x="16.3540%" y="117" width="1.3095%" height="15" fill="rgb(225,35,8)"/><text x="16.6040%" y="127.50"></text></g><g><title>lint_checking (2,420,078 samples, 2.80%)</title><rect x="14.9986%" y="165" width="2.7965%" height="15" fill="rgb(250,213,24)"/><text x="15.2486%" y="175.50">li..</text></g><g><title>module_lints (113,892 samples, 0.13%)</title><rect x="17.6635%" y="149" width="0.1316%" height="15" fill="rgb(247,123,22)"/><text x="17.9135%" y="159.50"></text></g><g><title>lint_mod (111,612 samples, 0.13%)</title><rect x="17.6661%" y="133" width="0.1290%" height="15" fill="rgb(231,138,38)"/><text x="17.9161%" y="143.50"></text></g><g><title>privacy_checking_modules (244,692 samples, 0.28%)</title><rect x="17.8904%" y="165" width="0.2828%" height="15" fill="rgb(231,145,46)"/><text x="18.1404%" y="175.50"></text></g><g><title>check_mod_privacy (242,792 samples, 0.28%)</title><rect x="17.8926%" y="149" width="0.2806%" height="15" fill="rgb(251,118,11)"/><text x="18.1426%" y="159.50"></text></g><g><title>misc_checking_3 (2,950,143 samples, 3.41%)</title><rect x="14.7751%" y="181" width="3.4091%" height="15" fill="rgb(217,147,25)"/><text x="15.0251%" y="191.50">mis..</text></g><g><title>impl_trait_ref (159,663 samples, 0.18%)</title><rect x="18.4408%" y="85" width="0.1845%" height="15" fill="rgb(247,81,37)"/><text x="18.6908%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (141,473 samples, 0.16%)</title><rect x="18.4619%" y="69" width="0.1635%" height="15" fill="rgb(209,12,38)"/><text x="18.7119%" y="79.50"></text></g><g><title>adt_destructor (323,564 samples, 0.37%)</title><rect x="18.2802%" y="133" width="0.3739%" height="15" fill="rgb(227,1,9)"/><text x="18.5302%" y="143.50"></text></g><g><title>coherent_trait (315,244 samples, 0.36%)</title><rect x="18.2898%" y="117" width="0.3643%" height="15" fill="rgb(248,47,43)"/><text x="18.5398%" y="127.50"></text></g><g><title>specialization_graph_of (313,804 samples, 0.36%)</title><rect x="18.2915%" y="101" width="0.3626%" height="15" fill="rgb(221,10,30)"/><text x="18.5415%" y="111.50"></text></g><g><title>is_copy_raw (205,002 samples, 0.24%)</title><rect x="18.6541%" y="133" width="0.2369%" height="15" fill="rgb(210,229,1)"/><text x="18.9041%" y="143.50"></text></g><g><title>evaluate_obligation (176,942 samples, 0.20%)</title><rect x="18.6865%" y="117" width="0.2045%" height="15" fill="rgb(222,148,37)"/><text x="18.9365%" y="127.50"></text></g><g><title>param_env (87,381 samples, 0.10%)</title><rect x="18.8910%" y="133" width="0.1010%" height="15" fill="rgb(234,67,33)"/><text x="19.1410%" y="143.50"></text></g><g><title>impl_parent (1,195,692 samples, 1.38%)</title><rect x="21.0677%" y="117" width="1.3817%" height="15" fill="rgb(247,98,35)"/><text x="21.3177%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (743,618 samples, 0.86%)</title><rect x="21.5901%" y="101" width="0.8593%" height="15" fill="rgb(247,138,52)"/><text x="21.8401%" y="111.50"></text></g><g><title>impl_trait_ref (3,697,187 samples, 4.27%)</title><rect x="22.4493%" y="117" width="4.2723%" height="15" fill="rgb(213,79,30)"/><text x="22.6993%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,250,923 samples, 3.76%)</title><rect x="22.9650%" y="101" width="3.7566%" height="15" fill="rgb(246,177,23)"/><text x="23.2150%" y="111.50">meta..</text></g><g><title>coherent_trait (7,723,086 samples, 8.92%)</title><rect x="18.2421%" y="149" width="8.9245%" height="15" fill="rgb(230,62,27)"/><text x="18.4921%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (7,074,129 samples, 8.17%)</title><rect x="18.9920%" y="133" width="8.1746%" height="15" fill="rgb(216,154,8)"/><text x="19.2420%" y="143.50">specializat..</text></g><g><title>trait_impls_of (384,985 samples, 0.44%)</title><rect x="26.7217%" y="117" width="0.4449%" height="15" fill="rgb(244,35,45)"/><text x="26.9717%" y="127.50"></text></g><g><title>implementations_of_trait (98,511 samples, 0.11%)</title><rect x="27.0527%" y="101" width="0.1138%" height="15" fill="rgb(251,115,12)"/><text x="27.3027%" y="111.50"></text></g><g><title>coherence_checking (7,788,286 samples, 9.00%)</title><rect x="18.2208%" y="165" width="8.9998%" height="15" fill="rgb(240,54,50)"/><text x="18.4708%" y="175.50">coherence_che..</text></g><g><title>associated_item (221,533 samples, 0.26%)</title><rect x="31.3485%" y="101" width="0.2560%" height="15" fill="rgb(233,84,52)"/><text x="31.5985%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (178,742 samples, 0.21%)</title><rect x="31.3979%" y="85" width="0.2065%" height="15" fill="rgb(207,117,47)"/><text x="31.6479%" y="95.50"></text></g><g><title>associated_items (294,443 samples, 0.34%)</title><rect x="31.2784%" y="117" width="0.3402%" height="15" fill="rgb(249,43,39)"/><text x="31.5284%" y="127.50"></text></g><g><title>adt_dtorck_constraint (89,421 samples, 0.10%)</title><rect x="31.7872%" y="53" width="0.1033%" height="15" fill="rgb(209,38,44)"/><text x="32.0372%" y="63.50"></text></g><g><title>adt_dtorck_constraint (119,501 samples, 0.14%)</title><rect x="31.7600%" y="69" width="0.1381%" height="15" fill="rgb(236,212,23)"/><text x="32.0100%" y="79.50"></text></g><g><title>adt_dtorck_constraint (135,081 samples, 0.16%)</title><rect x="31.7526%" y="85" width="0.1561%" height="15" fill="rgb(242,79,21)"/><text x="32.0026%" y="95.50"></text></g><g><title>adt_dtorck_constraint (165,782 samples, 0.19%)</title><rect x="31.7226%" y="101" width="0.1916%" height="15" fill="rgb(211,96,35)"/><text x="31.9726%" y="111.50"></text></g><g><title>dropck_outlives (237,102 samples, 0.27%)</title><rect x="31.6523%" y="117" width="0.2740%" height="15" fill="rgb(253,215,40)"/><text x="31.9023%" y="127.50"></text></g><g><title>adt_def (106,641 samples, 0.12%)</title><rect x="32.4961%" y="85" width="0.1232%" height="15" fill="rgb(211,81,21)"/><text x="32.7461%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (105,441 samples, 0.12%)</title><rect x="32.4975%" y="69" width="0.1218%" height="15" fill="rgb(208,190,38)"/><text x="32.7475%" y="79.50"></text></g><g><title>item_attrs (90,510 samples, 0.10%)</title><rect x="32.5147%" y="53" width="0.1046%" height="15" fill="rgb(235,213,38)"/><text x="32.7647%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,910 samples, 0.10%)</title><rect x="32.5166%" y="37" width="0.1027%" height="15" fill="rgb(237,122,38)"/><text x="32.7666%" y="47.50"></text></g><g><title>adt_sized_constraint (176,142 samples, 0.20%)</title><rect x="32.4859%" y="101" width="0.2035%" height="15" fill="rgb(244,218,35)"/><text x="32.7359%" y="111.50"></text></g><g><title>predicates_of (100,581 samples, 0.12%)</title><rect x="32.8601%" y="101" width="0.1162%" height="15" fill="rgb(240,68,47)"/><text x="33.1101%" y="111.50"></text></g><g><title>specializes (238,332 samples, 0.28%)</title><rect x="32.9763%" y="101" width="0.2754%" height="15" fill="rgb(210,16,53)"/><text x="33.2263%" y="111.50"></text></g><g><title>param_env (159,682 samples, 0.18%)</title><rect x="33.0672%" y="85" width="0.1845%" height="15" fill="rgb(235,124,12)"/><text x="33.3172%" y="95.50"></text></g><g><title>trait_impls_of (160,892 samples, 0.19%)</title><rect x="33.2591%" y="101" width="0.1859%" height="15" fill="rgb(224,169,11)"/><text x="33.5091%" y="111.50"></text></g><g><title>evaluate_obligation (1,319,175 samples, 1.52%)</title><rect x="31.9262%" y="117" width="1.5244%" height="15" fill="rgb(250,166,2)"/><text x="32.1762%" y="127.50"></text></g><g><title>evaluate_obligation (138,581 samples, 0.16%)</title><rect x="33.9081%" y="101" width="0.1601%" height="15" fill="rgb(242,216,29)"/><text x="34.1581%" y="111.50"></text></g><g><title>method_autoderef_steps (204,692 samples, 0.24%)</title><rect x="33.8427%" y="117" width="0.2365%" height="15" fill="rgb(230,116,27)"/><text x="34.0927%" y="127.50"></text></g><g><title>predicates_of (116,492 samples, 0.13%)</title><rect x="34.1278%" y="117" width="0.1346%" height="15" fill="rgb(228,99,48)"/><text x="34.3778%" y="127.50"></text></g><g><title>adt_sized_constraint (91,771 samples, 0.11%)</title><rect x="38.8438%" y="101" width="0.1060%" height="15" fill="rgb(253,11,6)"/><text x="39.0938%" y="111.50"></text></g><g><title>associated_item (260,683 samples, 0.30%)</title><rect x="39.0516%" y="85" width="0.3012%" height="15" fill="rgb(247,143,39)"/><text x="39.3016%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (209,063 samples, 0.24%)</title><rect x="39.1112%" y="69" width="0.2416%" height="15" fill="rgb(236,97,10)"/><text x="39.3612%" y="79.50"></text></g><g><title>associated_items (366,743 samples, 0.42%)</title><rect x="38.9538%" y="101" width="0.4238%" height="15" fill="rgb(233,208,19)"/><text x="39.2038%" y="111.50"></text></g><g><title>dropck_outlives (88,402 samples, 0.10%)</title><rect x="39.4133%" y="101" width="0.1022%" height="15" fill="rgb(216,164,2)"/><text x="39.6633%" y="111.50"></text></g><g><title>specializes (114,463 samples, 0.13%)</title><rect x="40.4587%" y="85" width="0.1323%" height="15" fill="rgb(220,129,5)"/><text x="40.7087%" y="95.50"></text></g><g><title>evaluate_obligation (1,136,114 samples, 1.31%)</title><rect x="39.5155%" y="101" width="1.3128%" height="15" fill="rgb(242,17,10)"/><text x="39.7655%" y="111.50"></text></g><g><title>trait_impls_of (200,502 samples, 0.23%)</title><rect x="40.5966%" y="85" width="0.2317%" height="15" fill="rgb(242,107,0)"/><text x="40.8466%" y="95.50"></text></g><g><title>is_copy_raw (160,051 samples, 0.18%)</title><rect x="41.1380%" y="101" width="0.1849%" height="15" fill="rgb(251,28,31)"/><text x="41.3880%" y="111.50"></text></g><g><title>evaluate_obligation (139,311 samples, 0.16%)</title><rect x="41.1620%" y="85" width="0.1610%" height="15" fill="rgb(233,223,10)"/><text x="41.4120%" y="95.50"></text></g><g><title>method_autoderef_steps (161,483 samples, 0.19%)</title><rect x="41.4237%" y="101" width="0.1866%" height="15" fill="rgb(215,21,27)"/><text x="41.6737%" y="111.50"></text></g><g><title>predicates_of (195,352 samples, 0.23%)</title><rect x="41.6233%" y="101" width="0.2257%" height="15" fill="rgb(232,23,21)"/><text x="41.8733%" y="111.50"></text></g><g><title>predicates_defined_on (135,102 samples, 0.16%)</title><rect x="41.6929%" y="85" width="0.1561%" height="15" fill="rgb(244,5,23)"/><text x="41.9429%" y="95.50"></text></g><g><title>trait_impls_of (103,261 samples, 0.12%)</title><rect x="41.8578%" y="101" width="0.1193%" height="15" fill="rgb(226,81,46)"/><text x="42.1078%" y="111.50"></text></g><g><title>typeck (6,705,235 samples, 7.75%)</title><rect x="34.2977%" y="117" width="7.7483%" height="15" fill="rgb(247,70,30)"/><text x="34.5477%" y="127.50">typeck</text></g><g><title>item_bodies_checking (12,833,283 samples, 14.83%)</title><rect x="27.2385%" y="165" width="14.8296%" height="15" fill="rgb(212,68,19)"/><text x="27.4885%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,831,073 samples, 14.83%)</title><rect x="27.2411%" y="149" width="14.8270%" height="15" fill="rgb(240,187,13)"/><text x="27.4911%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (12,809,673 samples, 14.80%)</title><rect x="27.2658%" y="133" width="14.8023%" height="15" fill="rgb(223,113,26)"/><text x="27.5158%" y="143.50">typeck</text></g><g><title>item_types_checking (540,346 samples, 0.62%)</title><rect x="42.0681%" y="165" width="0.6244%" height="15" fill="rgb(206,192,2)"/><text x="42.3181%" y="175.50"></text></g><g><title>check_mod_item_types (538,006 samples, 0.62%)</title><rect x="42.0708%" y="149" width="0.6217%" height="15" fill="rgb(241,108,4)"/><text x="42.3208%" y="159.50"></text></g><g><title>typeck (203,782 samples, 0.24%)</title><rect x="42.4570%" y="133" width="0.2355%" height="15" fill="rgb(247,173,49)"/><text x="42.7070%" y="143.50"></text></g><g><title>fn_sig (228,302 samples, 0.26%)</title><rect x="42.8276%" y="133" width="0.2638%" height="15" fill="rgb(224,114,35)"/><text x="43.0776%" y="143.50"></text></g><g><title>is_late_bound_map (114,482 samples, 0.13%)</title><rect x="43.1610%" y="117" width="0.1323%" height="15" fill="rgb(245,159,27)"/><text x="43.4110%" y="127.50"></text></g><g><title>resolve_lifetimes (109,032 samples, 0.13%)</title><rect x="43.1673%" y="101" width="0.1260%" height="15" fill="rgb(245,172,44)"/><text x="43.4173%" y="111.50"></text></g><g><title>generics_of (251,133 samples, 0.29%)</title><rect x="43.0914%" y="133" width="0.2902%" height="15" fill="rgb(236,23,11)"/><text x="43.3414%" y="143.50"></text></g><g><title>predicates_of (295,303 samples, 0.34%)</title><rect x="43.4159%" y="133" width="0.3412%" height="15" fill="rgb(205,117,38)"/><text x="43.6659%" y="143.50"></text></g><g><title>predicates_defined_on (277,453 samples, 0.32%)</title><rect x="43.4366%" y="117" width="0.3206%" height="15" fill="rgb(237,72,25)"/><text x="43.6866%" y="127.50"></text></g><g><title>inferred_outlives_of (197,852 samples, 0.23%)</title><rect x="43.5285%" y="101" width="0.2286%" height="15" fill="rgb(244,70,9)"/><text x="43.7785%" y="111.50"></text></g><g><title>inferred_outlives_crate (190,552 samples, 0.22%)</title><rect x="43.5370%" y="85" width="0.2202%" height="15" fill="rgb(217,125,39)"/><text x="43.7870%" y="95.50"></text></g><g><title>type_of (138,812 samples, 0.16%)</title><rect x="43.5968%" y="69" width="0.1604%" height="15" fill="rgb(235,36,10)"/><text x="43.8468%" y="79.50"></text></g><g><title>type_collecting (1,047,612 samples, 1.21%)</title><rect x="42.6940%" y="165" width="1.2106%" height="15" fill="rgb(251,123,47)"/><text x="42.9440%" y="175.50"></text></g><g><title>collect_mod_item_types (1,039,662 samples, 1.20%)</title><rect x="42.7032%" y="149" width="1.2014%" height="15" fill="rgb(221,13,13)"/><text x="42.9532%" y="159.50"></text></g><g><title>type_of (118,002 samples, 0.14%)</title><rect x="43.7682%" y="133" width="0.1364%" height="15" fill="rgb(238,131,9)"/><text x="44.0182%" y="143.50"></text></g><g><title>evaluate_obligation (117,382 samples, 0.14%)</title><rect x="44.5072%" y="133" width="0.1356%" height="15" fill="rgb(211,50,8)"/><text x="44.7572%" y="143.50"></text></g><g><title>check_impl_item_well_formed (527,666 samples, 0.61%)</title><rect x="44.1989%" y="149" width="0.6097%" height="15" fill="rgb(245,182,24)"/><text x="44.4489%" y="159.50"></text></g><g><title>evaluate_obligation (161,882 samples, 0.19%)</title><rect x="45.3042%" y="133" width="0.1871%" height="15" fill="rgb(242,14,37)"/><text x="45.5542%" y="143.50"></text></g><g><title>check_item_well_formed (889,169 samples, 1.03%)</title><rect x="44.8087%" y="149" width="1.0275%" height="15" fill="rgb(246,228,12)"/><text x="45.0587%" y="159.50"></text></g><g><title>analysis (39,341,929 samples, 45.46%)</title><rect x="0.5837%" y="197" width="45.4618%" height="15" fill="rgb(213,55,15)"/><text x="0.8337%" y="207.50">analysis</text></g><g><title>type_check_crate (24,110,739 samples, 27.86%)</title><rect x="18.1842%" y="181" width="27.8613%" height="15" fill="rgb(209,9,3)"/><text x="18.4342%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,850,431 samples, 2.14%)</title><rect x="43.9072%" y="165" width="2.1383%" height="15" fill="rgb(230,59,30)"/><text x="44.1572%" y="175.50">w..</text></g><g><title>check_trait_item_well_formed (181,132 samples, 0.21%)</title><rect x="45.8362%" y="149" width="0.2093%" height="15" fill="rgb(209,121,21)"/><text x="46.0862%" y="159.50"></text></g><g><title>codegen_crate (398,264 samples, 0.46%)</title><rect x="46.0569%" y="197" width="0.4602%" height="15" fill="rgb(220,109,13)"/><text x="46.3069%" y="207.50"></text></g><g><title>metadata_load_macro (149,083 samples, 0.17%)</title><rect x="72.3673%" y="149" width="0.1723%" height="15" fill="rgb(232,18,1)"/><text x="72.6173%" y="159.50"></text></g><g><title>macro_expand_crate (24,267,681 samples, 28.04%)</title><rect x="46.9396%" y="181" width="28.0427%" height="15" fill="rgb(215,41,42)"/><text x="47.1896%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (24,248,101 samples, 28.02%)</title><rect x="46.9622%" y="165" width="28.0200%" height="15" fill="rgb(224,123,36)"/><text x="47.2122%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,113,843 samples, 2.44%)</title><rect x="72.5396%" y="149" width="2.4427%" height="15" fill="rgb(240,125,3)"/><text x="72.7896%" y="159.50">me..</text></g><g><title>metadata_register_crate (774,278 samples, 0.89%)</title><rect x="74.0875%" y="133" width="0.8947%" height="15" fill="rgb(205,98,50)"/><text x="74.3375%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (119,252 samples, 0.14%)</title><rect x="74.9872%" y="181" width="0.1378%" height="15" fill="rgb(205,185,37)"/><text x="75.2372%" y="191.50"></text></g><g><title>late_resolve_crate (652,417 samples, 0.75%)</title><rect x="75.2540%" y="165" width="0.7539%" height="15" fill="rgb(238,207,15)"/><text x="75.5040%" y="175.50"></text></g><g><title>configure_and_expand (25,561,535 samples, 29.54%)</title><rect x="46.5171%" y="197" width="29.5378%" height="15" fill="rgb(213,199,42)"/><text x="46.7671%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (804,659 samples, 0.93%)</title><rect x="75.1250%" y="181" width="0.9298%" height="15" fill="rgb(235,201,11)"/><text x="75.3750%" y="191.50"></text></g><g><title>early_lint_checks (289,823 samples, 0.33%)</title><rect x="76.1486%" y="197" width="0.3349%" height="15" fill="rgb(207,46,11)"/><text x="76.3986%" y="207.50"></text></g><g><title>free_global_ctxt (2,887,172 samples, 3.34%)</title><rect x="76.4835%" y="197" width="3.3363%" height="15" fill="rgb(241,35,35)"/><text x="76.7335%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (12,075,175 samples, 13.95%)</title><rect x="79.8198%" y="197" width="13.9535%" height="15" fill="rgb(243,32,47)"/><text x="80.0698%" y="207.50">generate_crate_metada..</text></g><g><title>hir_lowering (989,841 samples, 1.14%)</title><rect x="93.7733%" y="197" width="1.1438%" height="15" fill="rgb(247,202,23)"/><text x="94.0233%" y="207.50"></text></g><g><title>link_crate (126,561 samples, 0.15%)</title><rect x="94.9507%" y="181" width="0.1462%" height="15" fill="rgb(219,102,11)"/><text x="95.2007%" y="191.50"></text></g><g><title>link (161,232 samples, 0.19%)</title><rect x="94.9171%" y="197" width="0.1863%" height="15" fill="rgb(243,110,44)"/><text x="95.1671%" y="207.50"></text></g><g><title>parse_crate (1,895,862 samples, 2.19%)</title><rect x="95.1034%" y="197" width="2.1908%" height="15" fill="rgb(222,74,54)"/><text x="95.3534%" y="207.50">p..</text></g><g><title>prepare_outputs (219,683 samples, 0.25%)</title><rect x="97.3045%" y="197" width="0.2539%" height="15" fill="rgb(216,99,12)"/><text x="97.5545%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (564,117 samples, 0.65%)</title><rect x="97.5584%" y="197" width="0.6519%" height="15" fill="rgb(226,22,26)"/><text x="97.8084%" y="207.50"></text></g><g><title>setup_global_ctxt (99,111 samples, 0.11%)</title><rect x="98.2251%" y="197" width="0.1145%" height="15" fill="rgb(217,163,10)"/><text x="98.4751%" y="207.50"></text></g><g><title>all (86,538,426 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (86,538,426 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,436,836 samples, 1.66%)</title><rect x="98.3397%" y="197" width="1.6603%" height="15" fill="rgb(220,39,43)"/><text x="98.5897%" y="207.50"></text></g></svg></svg>