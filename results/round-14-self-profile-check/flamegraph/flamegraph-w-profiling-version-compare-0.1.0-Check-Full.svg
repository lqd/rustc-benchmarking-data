<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (284,714 samples, 0.23%)</title><rect x="11.5902%" y="133" width="0.2319%" height="15" fill="rgb(227,0,7)"/><text x="11.8402%" y="143.50"></text></g><g><title>item_attrs (373,963 samples, 0.30%)</title><rect x="12.2517%" y="101" width="0.3046%" height="15" fill="rgb(217,0,24)"/><text x="12.5017%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (362,583 samples, 0.30%)</title><rect x="12.2610%" y="85" width="0.2954%" height="15" fill="rgb(221,193,54)"/><text x="12.5110%" y="95.50"></text></g><g><title>codegen_fn_attrs (501,526 samples, 0.41%)</title><rect x="12.1671%" y="117" width="0.4086%" height="15" fill="rgb(248,212,6)"/><text x="12.4171%" y="127.50"></text></g><g><title>is_copy_raw (171,440 samples, 0.14%)</title><rect x="14.9264%" y="69" width="0.1397%" height="15" fill="rgb(208,68,35)"/><text x="15.1764%" y="79.50"></text></g><g><title>evaluate_obligation (132,840 samples, 0.11%)</title><rect x="14.9578%" y="53" width="0.1082%" height="15" fill="rgb(232,128,0)"/><text x="15.2078%" y="63.50"></text></g><g><title>adt_drop_tys (377,372 samples, 0.31%)</title><rect x="14.8751%" y="85" width="0.3074%" height="15" fill="rgb(207,160,47)"/><text x="15.1251%" y="95.50"></text></g><g><title>is_copy_raw (672,174 samples, 0.55%)</title><rect x="15.1826%" y="85" width="0.5476%" height="15" fill="rgb(228,23,34)"/><text x="15.4326%" y="95.50"></text></g><g><title>evaluate_obligation (539,518 samples, 0.44%)</title><rect x="15.2906%" y="69" width="0.4395%" height="15" fill="rgb(218,30,26)"/><text x="15.5406%" y="79.50"></text></g><g><title>needs_drop_raw (1,294,839 samples, 1.05%)</title><rect x="14.7843%" y="101" width="1.0548%" height="15" fill="rgb(220,122,19)"/><text x="15.0343%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (133,802 samples, 0.11%)</title><rect x="15.7301%" y="85" width="0.1090%" height="15" fill="rgb(250,228,42)"/><text x="15.9801%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (345,036 samples, 0.28%)</title><rect x="16.0242%" y="85" width="0.2811%" height="15" fill="rgb(240,193,28)"/><text x="16.2742%" y="95.50"></text></g><g><title>impl_parent (196,703 samples, 0.16%)</title><rect x="16.6297%" y="69" width="0.1602%" height="15" fill="rgb(216,20,37)"/><text x="16.8797%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (130,671 samples, 0.11%)</title><rect x="16.6835%" y="53" width="0.1064%" height="15" fill="rgb(206,188,39)"/><text x="16.9335%" y="63.50"></text></g><g><title>specialization_graph_of (972,781 samples, 0.79%)</title><rect x="16.3752%" y="85" width="0.7924%" height="15" fill="rgb(217,207,13)"/><text x="16.6252%" y="95.50"></text></g><g><title>impl_trait_ref (463,637 samples, 0.38%)</title><rect x="16.7899%" y="69" width="0.3777%" height="15" fill="rgb(231,73,38)"/><text x="17.0399%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (399,257 samples, 0.33%)</title><rect x="16.8424%" y="53" width="0.3252%" height="15" fill="rgb(225,20,46)"/><text x="17.0924%" y="63.50"></text></g><g><title>resolve_instance (1,694,153 samples, 1.38%)</title><rect x="15.8589%" y="101" width="1.3801%" height="15" fill="rgb(210,31,41)"/><text x="16.1089%" y="111.50"></text></g><g><title>thir_body (920,789 samples, 0.75%)</title><rect x="17.2574%" y="101" width="0.7501%" height="15" fill="rgb(221,200,47)"/><text x="17.5074%" y="111.50"></text></g><g><title>mir_const (8,674,584 samples, 7.07%)</title><rect x="10.9560%" y="149" width="7.0665%" height="15" fill="rgb(226,26,5)"/><text x="11.2060%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (7,611,374 samples, 6.20%)</title><rect x="11.8221%" y="133" width="6.2004%" height="15" fill="rgb(249,33,26)"/><text x="12.0721%" y="143.50">unsafety..</text></g><g><title>mir_built (6,686,354 samples, 5.45%)</title><rect x="12.5756%" y="117" width="5.4468%" height="15" fill="rgb(235,183,28)"/><text x="12.8256%" y="127.50">mir_bui..</text></g><g><title>mir_promoted (9,501,454 samples, 7.74%)</title><rect x="10.3130%" y="165" width="7.7401%" height="15" fill="rgb(221,5,38)"/><text x="10.5630%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (318,065 samples, 0.26%)</title><rect x="18.0530%" y="165" width="0.2591%" height="15" fill="rgb(247,18,42)"/><text x="18.3030%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (731,498 samples, 0.60%)</title><rect x="18.3121%" y="165" width="0.5959%" height="15" fill="rgb(241,131,45)"/><text x="18.5621%" y="175.50"></text></g><g><title>normalize_projection_ty (507,457 samples, 0.41%)</title><rect x="18.4947%" y="149" width="0.4134%" height="15" fill="rgb(249,31,29)"/><text x="18.7447%" y="159.50"></text></g><g><title>type_op_normalize_predicate (628,326 samples, 0.51%)</title><rect x="18.9080%" y="165" width="0.5118%" height="15" fill="rgb(225,111,53)"/><text x="19.1580%" y="175.50"></text></g><g><title>normalize_projection_ty (424,164 samples, 0.35%)</title><rect x="19.0743%" y="149" width="0.3455%" height="15" fill="rgb(238,160,17)"/><text x="19.3243%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,961,699 samples, 2.41%)</title><rect x="19.4199%" y="165" width="2.4127%" height="15" fill="rgb(214,148,48)"/><text x="19.6699%" y="175.50">ty..</text></g><g><title>evaluate_obligation (167,663 samples, 0.14%)</title><rect x="21.6960%" y="149" width="0.1366%" height="15" fill="rgb(232,36,49)"/><text x="21.9460%" y="159.50"></text></g><g><title>MIR_borrow_checking (26,062,784 samples, 21.23%)</title><rect x="0.6214%" y="197" width="21.2312%" height="15" fill="rgb(209,103,24)"/><text x="0.8714%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,966,634 samples, 21.15%)</title><rect x="0.6997%" y="181" width="21.1529%" height="15" fill="rgb(229,88,8)"/><text x="0.9497%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (140,282 samples, 0.11%)</title><rect x="21.8776%" y="197" width="0.1143%" height="15" fill="rgb(213,181,19)"/><text x="22.1276%" y="207.50"></text></g><g><title>codegen_fn_attrs (165,222 samples, 0.13%)</title><rect x="22.2674%" y="133" width="0.1346%" height="15" fill="rgb(254,191,54)"/><text x="22.5174%" y="143.50"></text></g><g><title>codegen_fn_attrs (286,093 samples, 0.23%)</title><rect x="22.1733%" y="165" width="0.2331%" height="15" fill="rgb(241,83,37)"/><text x="22.4233%" y="175.50"></text></g><g><title>should_inherit_track_caller (243,273 samples, 0.20%)</title><rect x="22.2082%" y="149" width="0.1982%" height="15" fill="rgb(233,36,39)"/><text x="22.4582%" y="159.50"></text></g><g><title>check_mod_attrs (484,336 samples, 0.39%)</title><rect x="22.0119%" y="181" width="0.3945%" height="15" fill="rgb(226,3,54)"/><text x="22.2619%" y="191.50"></text></g><g><title>lookup_deprecation_entry (138,002 samples, 0.11%)</title><rect x="22.6618%" y="165" width="0.1124%" height="15" fill="rgb(245,192,40)"/><text x="22.9118%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (374,695 samples, 0.31%)</title><rect x="22.5375%" y="181" width="0.3052%" height="15" fill="rgb(238,167,29)"/><text x="22.7875%" y="191.50"></text></g><g><title>misc_checking_1 (1,077,752 samples, 0.88%)</title><rect x="21.9923%" y="197" width="0.8780%" height="15" fill="rgb(232,182,51)"/><text x="22.2423%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (358,114 samples, 0.29%)</title><rect x="22.8713%" y="181" width="0.2917%" height="15" fill="rgb(231,60,39)"/><text x="23.1213%" y="191.50"></text></g><g><title>check_mod_liveness (273,083 samples, 0.22%)</title><rect x="22.9406%" y="165" width="0.2225%" height="15" fill="rgb(208,69,12)"/><text x="23.1906%" y="175.50"></text></g><g><title>misc_checking_2 (1,013,241 samples, 0.83%)</title><rect x="22.8702%" y="197" width="0.8254%" height="15" fill="rgb(235,93,37)"/><text x="23.1202%" y="207.50"></text></g><g><title>match_checking (653,827 samples, 0.53%)</title><rect x="23.1630%" y="181" width="0.5326%" height="15" fill="rgb(213,116,39)"/><text x="23.4130%" y="191.50"></text></g><g><title>check_match (628,576 samples, 0.51%)</title><rect x="23.1836%" y="165" width="0.5120%" height="15" fill="rgb(222,207,29)"/><text x="23.4336%" y="175.50"></text></g><g><title>check_private_in_public (158,322 samples, 0.13%)</title><rect x="23.7017%" y="181" width="0.1290%" height="15" fill="rgb(206,96,30)"/><text x="23.9517%" y="191.50"></text></g><g><title>death_checking (444,245 samples, 0.36%)</title><rect x="23.8306%" y="181" width="0.3619%" height="15" fill="rgb(218,138,4)"/><text x="24.0806%" y="191.50"></text></g><g><title>item_attrs (154,512 samples, 0.13%)</title><rect x="24.0667%" y="165" width="0.1259%" height="15" fill="rgb(250,191,14)"/><text x="24.3167%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (152,782 samples, 0.12%)</title><rect x="24.0681%" y="149" width="0.1245%" height="15" fill="rgb(239,60,40)"/><text x="24.3181%" y="159.50"></text></g><g><title>param_env (160,862 samples, 0.13%)</title><rect x="24.7297%" y="149" width="0.1310%" height="15" fill="rgb(206,27,48)"/><text x="24.9797%" y="159.50"></text></g><g><title>crate_lints (1,906,431 samples, 1.55%)</title><rect x="24.1935%" y="165" width="1.5530%" height="15" fill="rgb(225,35,8)"/><text x="24.4435%" y="175.50"></text></g><g><title>type_of (1,077,760 samples, 0.88%)</title><rect x="24.8686%" y="149" width="0.8780%" height="15" fill="rgb(250,213,24)"/><text x="25.1186%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (848,318 samples, 0.69%)</title><rect x="25.0555%" y="133" width="0.6911%" height="15" fill="rgb(247,123,22)"/><text x="25.3055%" y="143.50"></text></g><g><title>lint_checking (2,287,856 samples, 1.86%)</title><rect x="24.1925%" y="181" width="1.8637%" height="15" fill="rgb(231,138,38)"/><text x="24.4425%" y="191.50">l..</text></g><g><title>module_lints (380,205 samples, 0.31%)</title><rect x="25.7465%" y="165" width="0.3097%" height="15" fill="rgb(231,145,46)"/><text x="25.9965%" y="175.50"></text></g><g><title>lint_mod (374,375 samples, 0.30%)</title><rect x="25.7513%" y="149" width="0.3050%" height="15" fill="rgb(251,118,11)"/><text x="26.0013%" y="159.50"></text></g><g><title>privacy_access_levels (213,392 samples, 0.17%)</title><rect x="26.0563%" y="181" width="0.1738%" height="15" fill="rgb(217,147,25)"/><text x="26.3063%" y="191.50"></text></g><g><title>privacy_checking_modules (680,867 samples, 0.55%)</title><rect x="26.2301%" y="181" width="0.5546%" height="15" fill="rgb(247,81,37)"/><text x="26.4801%" y="191.50"></text></g><g><title>check_mod_privacy (676,357 samples, 0.55%)</title><rect x="26.2338%" y="165" width="0.5510%" height="15" fill="rgb(209,12,38)"/><text x="26.4838%" y="175.50"></text></g><g><title>misc_checking_3 (3,804,672 samples, 3.10%)</title><rect x="23.6956%" y="197" width="3.0994%" height="15" fill="rgb(227,1,9)"/><text x="23.9456%" y="207.50">mis..</text></g><g><title>impl_trait_ref (214,053 samples, 0.17%)</title><rect x="26.9812%" y="101" width="0.1744%" height="15" fill="rgb(248,47,43)"/><text x="27.2312%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (195,491 samples, 0.16%)</title><rect x="26.9964%" y="85" width="0.1593%" height="15" fill="rgb(221,10,30)"/><text x="27.2464%" y="95.50"></text></g><g><title>adt_destructor (369,114 samples, 0.30%)</title><rect x="26.8763%" y="149" width="0.3007%" height="15" fill="rgb(210,229,1)"/><text x="27.1263%" y="159.50"></text></g><g><title>coherent_trait (362,514 samples, 0.30%)</title><rect x="26.8816%" y="133" width="0.2953%" height="15" fill="rgb(222,148,37)"/><text x="27.1316%" y="143.50"></text></g><g><title>specialization_graph_of (361,264 samples, 0.29%)</title><rect x="26.8827%" y="117" width="0.2943%" height="15" fill="rgb(234,67,33)"/><text x="27.1327%" y="127.50"></text></g><g><title>is_copy_raw (145,962 samples, 0.12%)</title><rect x="27.1770%" y="149" width="0.1189%" height="15" fill="rgb(247,98,35)"/><text x="27.4270%" y="159.50"></text></g><g><title>impl_parent (2,792,386 samples, 2.27%)</title><rect x="30.8981%" y="133" width="2.2747%" height="15" fill="rgb(247,138,52)"/><text x="31.1481%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,486,560 samples, 1.21%)</title><rect x="31.9619%" y="117" width="1.2110%" height="15" fill="rgb(213,79,30)"/><text x="32.2119%" y="127.50"></text></g><g><title>impl_trait_ref (5,175,190 samples, 4.22%)</title><rect x="33.1728%" y="133" width="4.2158%" height="15" fill="rgb(246,177,23)"/><text x="33.4228%" y="143.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,113,073 samples, 3.35%)</title><rect x="34.0381%" y="117" width="3.3506%" height="15" fill="rgb(230,62,27)"/><text x="34.2881%" y="127.50">met..</text></g><g><title>coherent_trait (13,866,626 samples, 11.30%)</title><rect x="26.8479%" y="165" width="11.2960%" height="15" fill="rgb(216,154,8)"/><text x="27.0979%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (13,232,909 samples, 10.78%)</title><rect x="27.3641%" y="149" width="10.7798%" height="15" fill="rgb(244,35,45)"/><text x="27.6141%" y="159.50">specialization_g..</text></g><g><title>trait_impls_of (925,393 samples, 0.75%)</title><rect x="37.3900%" y="133" width="0.7538%" height="15" fill="rgb(251,115,12)"/><text x="37.6400%" y="143.50"></text></g><g><title>implementations_of_trait (235,843 samples, 0.19%)</title><rect x="37.9518%" y="117" width="0.1921%" height="15" fill="rgb(240,54,50)"/><text x="38.2018%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (194,752 samples, 0.16%)</title><rect x="37.9852%" y="101" width="0.1586%" height="15" fill="rgb(233,84,52)"/><text x="38.2352%" y="111.50"></text></g><g><title>coherence_checking (13,926,437 samples, 11.34%)</title><rect x="26.8345%" y="181" width="11.3447%" height="15" fill="rgb(207,117,47)"/><text x="27.0845%" y="191.50">coherence_checking</text></g><g><title>associated_item (372,553 samples, 0.30%)</title><rect x="50.7651%" y="117" width="0.3035%" height="15" fill="rgb(249,43,39)"/><text x="51.0151%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (285,863 samples, 0.23%)</title><rect x="50.8358%" y="101" width="0.2329%" height="15" fill="rgb(209,38,44)"/><text x="51.0858%" y="111.50"></text></g><g><title>associated_items (554,546 samples, 0.45%)</title><rect x="50.6403%" y="133" width="0.4517%" height="15" fill="rgb(236,212,23)"/><text x="50.8903%" y="143.50"></text></g><g><title>adt_dtorck_constraint (277,072 samples, 0.23%)</title><rect x="51.2730%" y="117" width="0.2257%" height="15" fill="rgb(242,79,21)"/><text x="51.5230%" y="127.50"></text></g><g><title>dropck_outlives (514,483 samples, 0.42%)</title><rect x="51.1340%" y="133" width="0.4191%" height="15" fill="rgb(211,96,35)"/><text x="51.3840%" y="143.50"></text></g><g><title>predicates_of (176,372 samples, 0.14%)</title><rect x="52.3277%" y="117" width="0.1437%" height="15" fill="rgb(253,215,40)"/><text x="52.5777%" y="127.50"></text></g><g><title>evaluate_obligation (1,285,114 samples, 1.05%)</title><rect x="51.5531%" y="133" width="1.0469%" height="15" fill="rgb(211,81,21)"/><text x="51.8031%" y="143.50"></text></g><g><title>item_attrs (147,773 samples, 0.12%)</title><rect x="52.9128%" y="133" width="0.1204%" height="15" fill="rgb(208,190,38)"/><text x="53.1628%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (140,723 samples, 0.11%)</title><rect x="52.9186%" y="117" width="0.1146%" height="15" fill="rgb(235,213,38)"/><text x="53.1686%" y="127.50"></text></g><g><title>evaluate_obligation (239,614 samples, 0.20%)</title><rect x="53.2418%" y="117" width="0.1952%" height="15" fill="rgb(237,122,38)"/><text x="53.4918%" y="127.50"></text></g><g><title>method_autoderef_steps (448,218 samples, 0.37%)</title><rect x="53.0894%" y="133" width="0.3651%" height="15" fill="rgb(244,218,35)"/><text x="53.3394%" y="143.50"></text></g><g><title>predicates_of (383,414 samples, 0.31%)</title><rect x="53.5855%" y="133" width="0.3123%" height="15" fill="rgb(240,68,47)"/><text x="53.8355%" y="143.50"></text></g><g><title>predicates_defined_on (247,973 samples, 0.20%)</title><rect x="53.6958%" y="117" width="0.2020%" height="15" fill="rgb(210,16,53)"/><text x="53.9458%" y="127.50"></text></g><g><title>adt_sized_constraint (359,614 samples, 0.29%)</title><rect x="58.0028%" y="117" width="0.2929%" height="15" fill="rgb(235,124,12)"/><text x="58.2528%" y="127.50"></text></g><g><title>associated_items (137,472 samples, 0.11%)</title><rect x="58.2985%" y="117" width="0.1120%" height="15" fill="rgb(224,169,11)"/><text x="58.5485%" y="127.50"></text></g><g><title>associated_item (373,835 samples, 0.30%)</title><rect x="58.7166%" y="53" width="0.3045%" height="15" fill="rgb(250,166,2)"/><text x="58.9666%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (371,575 samples, 0.30%)</title><rect x="58.7184%" y="37" width="0.3027%" height="15" fill="rgb(242,216,29)"/><text x="58.9684%" y="47.50"></text></g><g><title>impl_item_implementor_ids (392,505 samples, 0.32%)</title><rect x="58.7027%" y="85" width="0.3197%" height="15" fill="rgb(230,116,27)"/><text x="58.9527%" y="95.50"></text></g><g><title>associated_items (389,405 samples, 0.32%)</title><rect x="58.7052%" y="69" width="0.3172%" height="15" fill="rgb(228,99,48)"/><text x="58.9552%" y="79.50"></text></g><g><title>dropck_outlives (750,668 samples, 0.61%)</title><rect x="58.4405%" y="117" width="0.6115%" height="15" fill="rgb(253,11,6)"/><text x="58.6905%" y="127.50"></text></g><g><title>normalize_projection_ty (582,266 samples, 0.47%)</title><rect x="58.5776%" y="101" width="0.4743%" height="15" fill="rgb(247,143,39)"/><text x="58.8276%" y="111.50"></text></g><g><title>predicates_of (137,861 samples, 0.11%)</title><rect x="59.9774%" y="101" width="0.1123%" height="15" fill="rgb(236,97,10)"/><text x="60.2274%" y="111.50"></text></g><g><title>evaluate_obligation (1,473,216 samples, 1.20%)</title><rect x="59.0520%" y="117" width="1.2001%" height="15" fill="rgb(233,208,19)"/><text x="59.3020%" y="127.50"></text></g><g><title>trait_impls_of (142,921 samples, 0.12%)</title><rect x="60.1356%" y="101" width="0.1164%" height="15" fill="rgb(216,164,2)"/><text x="60.3856%" y="111.50"></text></g><g><title>impl_item_implementor_ids (134,854 samples, 0.11%)</title><rect x="60.3534%" y="117" width="0.1099%" height="15" fill="rgb(220,129,5)"/><text x="60.6034%" y="127.50"></text></g><g><title>method_autoderef_steps (246,435 samples, 0.20%)</title><rect x="60.6198%" y="117" width="0.2008%" height="15" fill="rgb(242,17,10)"/><text x="60.8698%" y="127.50"></text></g><g><title>predicates_of (212,294 samples, 0.17%)</title><rect x="60.8364%" y="117" width="0.1729%" height="15" fill="rgb(242,107,0)"/><text x="61.0864%" y="127.50"></text></g><g><title>predicates_defined_on (160,533 samples, 0.13%)</title><rect x="60.8786%" y="101" width="0.1308%" height="15" fill="rgb(251,28,31)"/><text x="61.1286%" y="111.50"></text></g><g><title>typeck (8,708,588 samples, 7.09%)</title><rect x="54.0599%" y="133" width="7.0942%" height="15" fill="rgb(233,223,10)"/><text x="54.3099%" y="143.50">typeck</text></g><g><title>item_bodies_checking (28,226,818 samples, 22.99%)</title><rect x="38.2020%" y="181" width="22.9941%" height="15" fill="rgb(215,21,27)"/><text x="38.4520%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,224,268 samples, 22.99%)</title><rect x="38.2041%" y="165" width="22.9920%" height="15" fill="rgb(232,23,21)"/><text x="38.4541%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (28,157,207 samples, 22.94%)</title><rect x="38.2587%" y="149" width="22.9374%" height="15" fill="rgb(244,5,23)"/><text x="38.5087%" y="159.50">typeck</text></g><g><title>item_types_checking (638,807 samples, 0.52%)</title><rect x="61.1961%" y="181" width="0.5204%" height="15" fill="rgb(226,81,46)"/><text x="61.4461%" y="191.50"></text></g><g><title>check_mod_item_types (634,007 samples, 0.52%)</title><rect x="61.2000%" y="165" width="0.5165%" height="15" fill="rgb(247,70,30)"/><text x="61.4500%" y="175.50"></text></g><g><title>fn_sig (175,621 samples, 0.14%)</title><rect x="61.8987%" y="149" width="0.1431%" height="15" fill="rgb(212,68,19)"/><text x="62.1487%" y="159.50"></text></g><g><title>is_late_bound_map (238,954 samples, 0.19%)</title><rect x="62.1214%" y="133" width="0.1947%" height="15" fill="rgb(240,187,13)"/><text x="62.3714%" y="143.50"></text></g><g><title>resolve_lifetimes (221,574 samples, 0.18%)</title><rect x="62.1356%" y="117" width="0.1805%" height="15" fill="rgb(223,113,26)"/><text x="62.3856%" y="127.50"></text></g><g><title>named_region_map (213,843 samples, 0.17%)</title><rect x="62.3161%" y="133" width="0.1742%" height="15" fill="rgb(206,192,2)"/><text x="62.5661%" y="143.50"></text></g><g><title>resolve_lifetimes (202,793 samples, 0.17%)</title><rect x="62.3251%" y="117" width="0.1652%" height="15" fill="rgb(241,108,4)"/><text x="62.5751%" y="127.50"></text></g><g><title>generics_of (561,278 samples, 0.46%)</title><rect x="62.0418%" y="149" width="0.4572%" height="15" fill="rgb(247,173,49)"/><text x="62.2918%" y="159.50"></text></g><g><title>explicit_predicates_of (159,523 samples, 0.13%)</title><rect x="62.6215%" y="117" width="0.1300%" height="15" fill="rgb(224,114,35)"/><text x="62.8715%" y="127.50"></text></g><g><title>predicates_of (465,286 samples, 0.38%)</title><rect x="62.5408%" y="149" width="0.3790%" height="15" fill="rgb(245,159,27)"/><text x="62.7908%" y="159.50"></text></g><g><title>predicates_defined_on (429,036 samples, 0.35%)</title><rect x="62.5703%" y="133" width="0.3495%" height="15" fill="rgb(245,172,44)"/><text x="62.8203%" y="143.50"></text></g><g><title>inferred_outlives_of (206,622 samples, 0.17%)</title><rect x="62.7515%" y="117" width="0.1683%" height="15" fill="rgb(236,23,11)"/><text x="63.0015%" y="127.50"></text></g><g><title>inferred_outlives_crate (190,022 samples, 0.15%)</title><rect x="62.7650%" y="101" width="0.1548%" height="15" fill="rgb(205,117,38)"/><text x="63.0150%" y="111.50"></text></g><g><title>type_collecting (1,564,937 samples, 1.27%)</title><rect x="61.7176%" y="181" width="1.2748%" height="15" fill="rgb(237,72,25)"/><text x="61.9676%" y="191.50"></text></g><g><title>collect_mod_item_types (1,552,447 samples, 1.26%)</title><rect x="61.7278%" y="165" width="1.2647%" height="15" fill="rgb(244,70,9)"/><text x="61.9778%" y="175.50"></text></g><g><title>evaluate_obligation (293,596 samples, 0.24%)</title><rect x="64.2020%" y="149" width="0.2392%" height="15" fill="rgb(217,125,39)"/><text x="64.4520%" y="159.50"></text></g><g><title>implied_outlives_bounds (135,551 samples, 0.11%)</title><rect x="64.4432%" y="149" width="0.1104%" height="15" fill="rgb(235,36,10)"/><text x="64.6932%" y="159.50"></text></g><g><title>param_env (196,154 samples, 0.16%)</title><rect x="64.5537%" y="149" width="0.1598%" height="15" fill="rgb(251,123,47)"/><text x="64.8037%" y="159.50"></text></g><g><title>region_scope_tree (310,003 samples, 0.25%)</title><rect x="64.7523%" y="149" width="0.2525%" height="15" fill="rgb(221,13,13)"/><text x="65.0023%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,361,868 samples, 1.92%)</title><rect x="63.1240%" y="165" width="1.9240%" height="15" fill="rgb(238,131,9)"/><text x="63.3740%" y="175.50">c..</text></g><g><title>adt_sized_constraint (133,410 samples, 0.11%)</title><rect x="65.8361%" y="149" width="0.1087%" height="15" fill="rgb(211,50,8)"/><text x="66.0861%" y="159.50"></text></g><g><title>evaluate_obligation (156,831 samples, 0.13%)</title><rect x="65.9448%" y="149" width="0.1278%" height="15" fill="rgb(245,182,24)"/><text x="66.1948%" y="159.50"></text></g><g><title>param_env (156,402 samples, 0.13%)</title><rect x="66.1420%" y="149" width="0.1274%" height="15" fill="rgb(242,14,37)"/><text x="66.3920%" y="159.50"></text></g><g><title>predicates_of (168,992 samples, 0.14%)</title><rect x="66.2694%" y="149" width="0.1377%" height="15" fill="rgb(246,228,12)"/><text x="66.5194%" y="159.50"></text></g><g><title>predicates_defined_on (145,461 samples, 0.12%)</title><rect x="66.2885%" y="133" width="0.1185%" height="15" fill="rgb(213,55,15)"/><text x="66.5385%" y="143.50"></text></g><g><title>analysis (81,207,125 samples, 66.15%)</title><rect x="0.4308%" y="213" width="66.1528%" height="15" fill="rgb(209,9,3)"/><text x="0.6808%" y="223.50">analysis</text></g><g><title>type_check_crate (48,843,311 samples, 39.79%)</title><rect x="26.7950%" y="197" width="39.7887%" height="15" fill="rgb(230,59,30)"/><text x="27.0450%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,403,710 samples, 3.59%)</title><rect x="62.9963%" y="181" width="3.5873%" height="15" fill="rgb(209,121,21)"/><text x="63.2463%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (1,885,100 samples, 1.54%)</title><rect x="65.0480%" y="165" width="1.5356%" height="15" fill="rgb(220,109,13)"/><text x="65.2980%" y="175.50"></text></g><g><title>codegen_crate (347,444 samples, 0.28%)</title><rect x="66.5903%" y="213" width="0.2830%" height="15" fill="rgb(232,18,1)"/><text x="66.8403%" y="223.50"></text></g><g><title>AST_validation (245,073 samples, 0.20%)</title><rect x="67.0256%" y="197" width="0.1996%" height="15" fill="rgb(215,41,42)"/><text x="67.2756%" y="207.50"></text></g><g><title>metadata_load_macro (334,084 samples, 0.27%)</title><rect x="86.7071%" y="165" width="0.2722%" height="15" fill="rgb(224,123,36)"/><text x="86.9571%" y="175.50"></text></g><g><title>metadata_register_crate (2,676,900 samples, 2.18%)</title><rect x="86.9792%" y="165" width="2.1807%" height="15" fill="rgb(240,125,3)"/><text x="87.2292%" y="175.50">m..</text></g><g><title>metadata_register_crate (1,005,200 samples, 0.82%)</title><rect x="88.3410%" y="149" width="0.8189%" height="15" fill="rgb(205,98,50)"/><text x="88.5910%" y="159.50"></text></g><g><title>macro_expand_crate (27,204,116 samples, 22.16%)</title><rect x="67.3669%" y="197" width="22.1610%" height="15" fill="rgb(205,185,37)"/><text x="67.6169%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (27,179,946 samples, 22.14%)</title><rect x="67.3866%" y="181" width="22.1413%" height="15" fill="rgb(238,207,15)"/><text x="67.6366%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (451,755 samples, 0.37%)</title><rect x="89.1599%" y="165" width="0.3680%" height="15" fill="rgb(213,199,42)"/><text x="89.4099%" y="175.50"></text></g><g><title>finalize_macro_resolutions (308,343 samples, 0.25%)</title><rect x="89.6449%" y="181" width="0.2512%" height="15" fill="rgb(235,201,11)"/><text x="89.8949%" y="191.50"></text></g><g><title>late_resolve_crate (2,724,691 samples, 2.22%)</title><rect x="89.8961%" y="181" width="2.2196%" height="15" fill="rgb(207,46,11)"/><text x="90.1461%" y="191.50">l..</text></g><g><title>configure_and_expand (31,157,882 samples, 25.38%)</title><rect x="66.8734%" y="213" width="25.3818%" height="15" fill="rgb(241,35,35)"/><text x="67.1234%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (3,294,268 samples, 2.68%)</title><rect x="89.5716%" y="197" width="2.6836%" height="15" fill="rgb(243,32,47)"/><text x="89.8216%" y="207.50">re..</text></g><g><title>drop_ast (165,742 samples, 0.14%)</title><rect x="92.2552%" y="213" width="0.1350%" height="15" fill="rgb(247,202,23)"/><text x="92.5052%" y="223.50"></text></g><g><title>early_lint_checks (307,284 samples, 0.25%)</title><rect x="92.3998%" y="213" width="0.2503%" height="15" fill="rgb(219,102,11)"/><text x="92.6498%" y="223.50"></text></g><g><title>free_global_ctxt (3,365,978 samples, 2.74%)</title><rect x="92.6501%" y="213" width="2.7420%" height="15" fill="rgb(243,110,44)"/><text x="92.9001%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (957,211 samples, 0.78%)</title><rect x="95.3921%" y="213" width="0.7798%" height="15" fill="rgb(222,74,54)"/><text x="95.6421%" y="223.50"></text></g><g><title>hir_lowering (2,619,369 samples, 2.13%)</title><rect x="96.1719%" y="213" width="2.1338%" height="15" fill="rgb(216,99,12)"/><text x="96.4219%" y="223.50">h..</text></g><g><title>parse_crate (493,136 samples, 0.40%)</title><rect x="98.3400%" y="213" width="0.4017%" height="15" fill="rgb(226,22,26)"/><text x="98.5900%" y="223.50"></text></g><g><title>prepare_outputs (299,864 samples, 0.24%)</title><rect x="98.7485%" y="213" width="0.2443%" height="15" fill="rgb(217,163,10)"/><text x="98.9985%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (790,609 samples, 0.64%)</title><rect x="98.9928%" y="213" width="0.6440%" height="15" fill="rgb(213,25,53)"/><text x="99.2428%" y="223.50"></text></g><g><title>all (122,756,835 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (122,756,835 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (369,955 samples, 0.30%)</title><rect x="99.6986%" y="213" width="0.3014%" height="15" fill="rgb(229,68,48)"/><text x="99.9486%" y="223.50"></text></g></svg></svg>