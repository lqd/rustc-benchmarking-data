<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (85,030 samples, 0.13%)</title><rect x="5.0496%" y="181" width="0.1332%" height="15" fill="rgb(227,0,7)"/><text x="5.2996%" y="191.50"></text></g><g><title>item_attrs (74,962 samples, 0.12%)</title><rect x="5.4031%" y="149" width="0.1174%" height="15" fill="rgb(217,0,24)"/><text x="5.6531%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (71,942 samples, 0.11%)</title><rect x="5.4078%" y="133" width="0.1127%" height="15" fill="rgb(221,193,54)"/><text x="5.6578%" y="143.50"></text></g><g><title>codegen_fn_attrs (118,813 samples, 0.19%)</title><rect x="5.3516%" y="165" width="0.1861%" height="15" fill="rgb(248,212,6)"/><text x="5.6016%" y="175.50"></text></g><g><title>adt_drop_tys (129,921 samples, 0.20%)</title><rect x="6.5771%" y="101" width="0.2035%" height="15" fill="rgb(208,68,35)"/><text x="6.8271%" y="111.50"></text></g><g><title>param_env (82,071 samples, 0.13%)</title><rect x="6.6520%" y="85" width="0.1285%" height="15" fill="rgb(232,128,0)"/><text x="6.9020%" y="95.50"></text></g><g><title>adt_drop_tys (165,423 samples, 0.26%)</title><rect x="6.5651%" y="117" width="0.2590%" height="15" fill="rgb(207,160,47)"/><text x="6.8151%" y="127.50"></text></g><g><title>is_copy_raw (137,491 samples, 0.22%)</title><rect x="6.8241%" y="117" width="0.2153%" height="15" fill="rgb(228,23,34)"/><text x="7.0741%" y="127.50"></text></g><g><title>evaluate_obligation (113,051 samples, 0.18%)</title><rect x="6.8624%" y="101" width="0.1770%" height="15" fill="rgb(218,30,26)"/><text x="7.1124%" y="111.50"></text></g><g><title>param_env (118,781 samples, 0.19%)</title><rect x="7.0394%" y="117" width="0.1860%" height="15" fill="rgb(220,122,19)"/><text x="7.2894%" y="127.50"></text></g><g><title>adt_drop_tys (472,885 samples, 0.74%)</title><rect x="6.4945%" y="133" width="0.7405%" height="15" fill="rgb(250,228,42)"/><text x="6.7445%" y="143.50"></text></g><g><title>predicates_of (85,451 samples, 0.13%)</title><rect x="7.8746%" y="101" width="0.1338%" height="15" fill="rgb(240,193,28)"/><text x="8.1246%" y="111.50"></text></g><g><title>predicates_defined_on (70,811 samples, 0.11%)</title><rect x="7.8976%" y="85" width="0.1109%" height="15" fill="rgb(216,20,37)"/><text x="8.1476%" y="95.50"></text></g><g><title>needs_drop_raw (1,265,603 samples, 1.98%)</title><rect x="6.4079%" y="149" width="1.9819%" height="15" fill="rgb(206,188,39)"/><text x="6.6579%" y="159.50">n..</text></g><g><title>is_copy_raw (737,418 samples, 1.15%)</title><rect x="7.2350%" y="133" width="1.1548%" height="15" fill="rgb(217,207,13)"/><text x="7.4850%" y="143.50"></text></g><g><title>evaluate_obligation (675,317 samples, 1.06%)</title><rect x="7.3322%" y="117" width="1.0575%" height="15" fill="rgb(231,73,38)"/><text x="7.5822%" y="127.50"></text></g><g><title>trait_impls_of (239,363 samples, 0.37%)</title><rect x="8.0149%" y="101" width="0.3748%" height="15" fill="rgb(225,20,46)"/><text x="8.2649%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (80,561 samples, 0.13%)</title><rect x="8.4947%" y="133" width="0.1262%" height="15" fill="rgb(210,31,41)"/><text x="8.7447%" y="143.50"></text></g><g><title>impl_parent (234,934 samples, 0.37%)</title><rect x="9.1314%" y="117" width="0.3679%" height="15" fill="rgb(221,200,47)"/><text x="9.3814%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (171,553 samples, 0.27%)</title><rect x="9.2307%" y="101" width="0.2686%" height="15" fill="rgb(226,26,5)"/><text x="9.4807%" y="111.50"></text></g><g><title>specialization_graph_of (1,354,255 samples, 2.12%)</title><rect x="8.6730%" y="133" width="2.1207%" height="15" fill="rgb(249,33,26)"/><text x="8.9230%" y="143.50">s..</text></g><g><title>impl_trait_ref (826,559 samples, 1.29%)</title><rect x="9.4993%" y="117" width="1.2944%" height="15" fill="rgb(235,183,28)"/><text x="9.7493%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (762,788 samples, 1.19%)</title><rect x="9.5992%" y="101" width="1.1945%" height="15" fill="rgb(221,5,38)"/><text x="9.8492%" y="111.50"></text></g><g><title>resolve_instance (1,560,056 samples, 2.44%)</title><rect x="8.3898%" y="149" width="2.4430%" height="15" fill="rgb(247,18,42)"/><text x="8.6398%" y="159.50">re..</text></g><g><title>thir_body (170,794 samples, 0.27%)</title><rect x="10.8408%" y="149" width="0.2675%" height="15" fill="rgb(241,131,45)"/><text x="11.0908%" y="159.50"></text></g><g><title>mir_const (4,089,726 samples, 6.40%)</title><rect x="4.7083%" y="197" width="6.4044%" height="15" fill="rgb(249,31,29)"/><text x="4.9583%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (3,786,752 samples, 5.93%)</title><rect x="5.1827%" y="181" width="5.9300%" height="15" fill="rgb(225,111,53)"/><text x="5.4327%" y="191.50">unsafety..</text></g><g><title>mir_built (3,560,118 samples, 5.58%)</title><rect x="5.5376%" y="165" width="5.5751%" height="15" fill="rgb(238,160,17)"/><text x="5.7876%" y="175.50">mir_bui..</text></g><g><title>mir_promoted (4,282,868 samples, 6.71%)</title><rect x="4.4247%" y="213" width="6.7069%" height="15" fill="rgb(214,148,48)"/><text x="4.6747%" y="223.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (129,212 samples, 0.20%)</title><rect x="11.1316%" y="213" width="0.2023%" height="15" fill="rgb(232,36,49)"/><text x="11.3816%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (110,851 samples, 0.17%)</title><rect x="11.3340%" y="213" width="0.1736%" height="15" fill="rgb(209,103,24)"/><text x="11.5840%" y="223.50"></text></g><g><title>normalize_projection_ty (68,821 samples, 0.11%)</title><rect x="11.3998%" y="197" width="0.1078%" height="15" fill="rgb(229,88,8)"/><text x="11.6498%" y="207.50"></text></g><g><title>type_op_prove_predicate (445,425 samples, 0.70%)</title><rect x="11.5807%" y="213" width="0.6975%" height="15" fill="rgb(213,181,19)"/><text x="11.8307%" y="223.50"></text></g><g><title>MIR_borrow_checking (6,984,078 samples, 10.94%)</title><rect x="1.3440%" y="245" width="10.9369%" height="15" fill="rgb(254,191,54)"/><text x="1.5940%" y="255.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (6,965,167 samples, 10.91%)</title><rect x="1.3737%" y="229" width="10.9073%" height="15" fill="rgb(241,83,37)"/><text x="1.6237%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (146,882 samples, 0.23%)</title><rect x="12.2891%" y="245" width="0.2300%" height="15" fill="rgb(233,36,39)"/><text x="12.5391%" y="255.50"></text></g><g><title>get_lang_items (90,941 samples, 0.14%)</title><rect x="12.8837%" y="197" width="0.1424%" height="15" fill="rgb(226,3,54)"/><text x="13.1337%" y="207.50"></text></g><g><title>codegen_fn_attrs (111,962 samples, 0.18%)</title><rect x="13.1313%" y="181" width="0.1753%" height="15" fill="rgb(245,192,40)"/><text x="13.3813%" y="191.50"></text></g><g><title>should_inherit_track_caller (182,662 samples, 0.29%)</title><rect x="13.0262%" y="197" width="0.2860%" height="15" fill="rgb(238,167,29)"/><text x="13.2762%" y="207.50"></text></g><g><title>codegen_fn_attrs (386,674 samples, 0.61%)</title><rect x="12.7521%" y="213" width="0.6055%" height="15" fill="rgb(232,182,51)"/><text x="13.0021%" y="223.50"></text></g><g><title>check_mod_attrs (506,685 samples, 0.79%)</title><rect x="12.5645%" y="229" width="0.7935%" height="15" fill="rgb(231,60,39)"/><text x="12.8145%" y="239.50"></text></g><g><title>check_mod_const_bodies (66,601 samples, 0.10%)</title><rect x="13.3580%" y="229" width="0.1043%" height="15" fill="rgb(208,69,12)"/><text x="13.6080%" y="239.50"></text></g><g><title>lookup_deprecation_entry (108,433 samples, 0.17%)</title><rect x="13.7163%" y="213" width="0.1698%" height="15" fill="rgb(235,93,37)"/><text x="13.9663%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (310,654 samples, 0.49%)</title><rect x="13.5407%" y="229" width="0.4865%" height="15" fill="rgb(213,116,39)"/><text x="13.7907%" y="239.50"></text></g><g><title>misc_checking_1 (1,017,582 samples, 1.59%)</title><rect x="12.5197%" y="245" width="1.5935%" height="15" fill="rgb(222,207,29)"/><text x="12.7697%" y="255.50"></text></g><g><title>eval_to_const_value_raw (136,881 samples, 0.21%)</title><rect x="14.5026%" y="149" width="0.2144%" height="15" fill="rgb(206,96,30)"/><text x="14.7526%" y="159.50"></text></g><g><title>eval_to_const_value_raw (123,431 samples, 0.19%)</title><rect x="14.5236%" y="133" width="0.1933%" height="15" fill="rgb(218,138,4)"/><text x="14.7736%" y="143.50"></text></g><g><title>eval_to_allocation_raw (120,421 samples, 0.19%)</title><rect x="14.5284%" y="117" width="0.1886%" height="15" fill="rgb(250,191,14)"/><text x="14.7784%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (72,761 samples, 0.11%)</title><rect x="14.6030%" y="101" width="0.1139%" height="15" fill="rgb(239,60,40)"/><text x="14.8530%" y="111.50"></text></g><g><title>liveness_and_intrinsic_checking (486,555 samples, 0.76%)</title><rect x="14.1171%" y="229" width="0.7619%" height="15" fill="rgb(206,27,48)"/><text x="14.3671%" y="239.50"></text></g><g><title>check_mod_liveness (452,075 samples, 0.71%)</title><rect x="14.1711%" y="213" width="0.7079%" height="15" fill="rgb(225,35,8)"/><text x="14.4211%" y="223.50"></text></g><g><title>type_uninhabited_from (334,514 samples, 0.52%)</title><rect x="14.3552%" y="197" width="0.5238%" height="15" fill="rgb(250,213,24)"/><text x="14.6052%" y="207.50"></text></g><g><title>type_uninhabited_from (307,494 samples, 0.48%)</title><rect x="14.3975%" y="181" width="0.4815%" height="15" fill="rgb(247,123,22)"/><text x="14.6475%" y="191.50"></text></g><g><title>type_uninhabited_from (268,914 samples, 0.42%)</title><rect x="14.4579%" y="165" width="0.4211%" height="15" fill="rgb(231,138,38)"/><text x="14.7079%" y="175.50"></text></g><g><title>type_uninhabited_from (93,361 samples, 0.15%)</title><rect x="14.7329%" y="149" width="0.1462%" height="15" fill="rgb(231,145,46)"/><text x="14.9829%" y="159.50"></text></g><g><title>misc_checking_2 (674,327 samples, 1.06%)</title><rect x="14.1132%" y="245" width="1.0560%" height="15" fill="rgb(251,118,11)"/><text x="14.3632%" y="255.50"></text></g><g><title>match_checking (185,282 samples, 0.29%)</title><rect x="14.8791%" y="229" width="0.2901%" height="15" fill="rgb(217,147,25)"/><text x="15.1291%" y="239.50"></text></g><g><title>check_match (175,032 samples, 0.27%)</title><rect x="14.8951%" y="213" width="0.2741%" height="15" fill="rgb(247,81,37)"/><text x="15.1451%" y="223.50"></text></g><g><title>death_checking (131,952 samples, 0.21%)</title><rect x="15.2640%" y="229" width="0.2066%" height="15" fill="rgb(209,12,38)"/><text x="15.5140%" y="239.50"></text></g><g><title>param_env (68,371 samples, 0.11%)</title><rect x="16.1760%" y="197" width="0.1071%" height="15" fill="rgb(227,1,9)"/><text x="16.4260%" y="207.50"></text></g><g><title>trait_impls_of (216,742 samples, 0.34%)</title><rect x="16.2831%" y="197" width="0.3394%" height="15" fill="rgb(248,47,43)"/><text x="16.5331%" y="207.50"></text></g><g><title>crate_lints (3,166,115 samples, 4.96%)</title><rect x="15.4730%" y="213" width="4.9581%" height="15" fill="rgb(221,10,30)"/><text x="15.7230%" y="223.50">crate_..</text></g><g><title>type_of (2,427,466 samples, 3.80%)</title><rect x="16.6297%" y="197" width="3.8014%" height="15" fill="rgb(210,229,1)"/><text x="16.8797%" y="207.50">type..</text></g><g><title>metadata_decode_entry_type_of (2,158,811 samples, 3.38%)</title><rect x="17.0504%" y="181" width="3.3807%" height="15" fill="rgb(222,148,37)"/><text x="17.3004%" y="191.50">met..</text></g><g><title>lint_checking (3,242,226 samples, 5.08%)</title><rect x="15.4707%" y="229" width="5.0773%" height="15" fill="rgb(234,67,33)"/><text x="15.7207%" y="239.50">lint_c..</text></g><g><title>module_lints (74,641 samples, 0.12%)</title><rect x="20.4310%" y="213" width="0.1169%" height="15" fill="rgb(247,98,35)"/><text x="20.6810%" y="223.50"></text></g><g><title>lint_mod (72,201 samples, 0.11%)</title><rect x="20.4349%" y="197" width="0.1131%" height="15" fill="rgb(247,138,52)"/><text x="20.6849%" y="207.50"></text></g><g><title>privacy_checking_modules (172,272 samples, 0.27%)</title><rect x="20.6350%" y="229" width="0.2698%" height="15" fill="rgb(213,79,30)"/><text x="20.8850%" y="239.50"></text></g><g><title>check_mod_privacy (171,032 samples, 0.27%)</title><rect x="20.6370%" y="213" width="0.2678%" height="15" fill="rgb(246,177,23)"/><text x="20.8870%" y="223.50"></text></g><g><title>misc_checking_3 (3,670,731 samples, 5.75%)</title><rect x="15.1692%" y="245" width="5.7483%" height="15" fill="rgb(230,62,27)"/><text x="15.4192%" y="255.50">misc_ch..</text></g><g><title>impl_trait_ref (137,471 samples, 0.22%)</title><rect x="21.3540%" y="181" width="0.2153%" height="15" fill="rgb(216,154,8)"/><text x="21.6040%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (121,621 samples, 0.19%)</title><rect x="21.3788%" y="165" width="0.1905%" height="15" fill="rgb(244,35,45)"/><text x="21.6288%" y="175.50"></text></g><g><title>coherent_trait (452,105 samples, 0.71%)</title><rect x="21.0177%" y="213" width="0.7080%" height="15" fill="rgb(251,115,12)"/><text x="21.2677%" y="223.50"></text></g><g><title>specialization_graph_of (441,985 samples, 0.69%)</title><rect x="21.0335%" y="197" width="0.6921%" height="15" fill="rgb(240,54,50)"/><text x="21.2835%" y="207.50"></text></g><g><title>trait_impls_of (99,861 samples, 0.16%)</title><rect x="21.5693%" y="181" width="0.1564%" height="15" fill="rgb(233,84,52)"/><text x="21.8193%" y="191.50"></text></g><g><title>coherence_checking (535,336 samples, 0.84%)</title><rect x="20.9876%" y="229" width="0.8383%" height="15" fill="rgb(207,117,47)"/><text x="21.2376%" y="239.50"></text></g><g><title>adt_def (153,621 samples, 0.24%)</title><rect x="35.5038%" y="165" width="0.2406%" height="15" fill="rgb(249,43,39)"/><text x="35.7538%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (149,921 samples, 0.23%)</title><rect x="35.5096%" y="149" width="0.2348%" height="15" fill="rgb(209,38,44)"/><text x="35.7596%" y="159.50"></text></g><g><title>item_attrs (99,911 samples, 0.16%)</title><rect x="35.5879%" y="133" width="0.1565%" height="15" fill="rgb(236,212,23)"/><text x="35.8379%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,301 samples, 0.15%)</title><rect x="35.5936%" y="117" width="0.1508%" height="15" fill="rgb(242,79,21)"/><text x="35.8436%" y="127.50"></text></g><g><title>adt_sized_constraint (184,182 samples, 0.29%)</title><rect x="35.4774%" y="181" width="0.2884%" height="15" fill="rgb(211,96,35)"/><text x="35.7274%" y="191.50"></text></g><g><title>associated_item (646,448 samples, 1.01%)</title><rect x="36.2519%" y="165" width="1.0123%" height="15" fill="rgb(253,215,40)"/><text x="36.5019%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (466,237 samples, 0.73%)</title><rect x="36.5341%" y="149" width="0.7301%" height="15" fill="rgb(211,81,21)"/><text x="36.7841%" y="159.50"></text></g><g><title>associated_items (980,503 samples, 1.54%)</title><rect x="35.8042%" y="181" width="1.5354%" height="15" fill="rgb(208,190,38)"/><text x="36.0542%" y="191.50"></text></g><g><title>adt_def (74,950 samples, 0.12%)</title><rect x="38.1689%" y="149" width="0.1174%" height="15" fill="rgb(235,213,38)"/><text x="38.4189%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (73,480 samples, 0.12%)</title><rect x="38.1712%" y="133" width="0.1151%" height="15" fill="rgb(237,122,38)"/><text x="38.4212%" y="143.50"></text></g><g><title>adt_def (74,661 samples, 0.12%)</title><rect x="38.4002%" y="133" width="0.1169%" height="15" fill="rgb(244,218,35)"/><text x="38.6502%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (73,281 samples, 0.11%)</title><rect x="38.4023%" y="117" width="0.1148%" height="15" fill="rgb(240,68,47)"/><text x="38.6523%" y="127.50"></text></g><g><title>adt_def (80,781 samples, 0.13%)</title><rect x="38.6026%" y="117" width="0.1265%" height="15" fill="rgb(210,16,53)"/><text x="38.8526%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (79,081 samples, 0.12%)</title><rect x="38.6053%" y="101" width="0.1238%" height="15" fill="rgb(235,124,12)"/><text x="38.8553%" y="111.50"></text></g><g><title>adt_def (74,241 samples, 0.12%)</title><rect x="38.7949%" y="101" width="0.1163%" height="15" fill="rgb(224,169,11)"/><text x="39.0449%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (73,001 samples, 0.11%)</title><rect x="38.7969%" y="85" width="0.1143%" height="15" fill="rgb(250,166,2)"/><text x="39.0469%" y="95.50"></text></g><g><title>adt_def (229,702 samples, 0.36%)</title><rect x="38.9395%" y="85" width="0.3597%" height="15" fill="rgb(242,216,29)"/><text x="39.1895%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (228,562 samples, 0.36%)</title><rect x="38.9413%" y="69" width="0.3579%" height="15" fill="rgb(230,116,27)"/><text x="39.1913%" y="79.50"></text></g><g><title>item_attrs (218,172 samples, 0.34%)</title><rect x="38.9576%" y="53" width="0.3417%" height="15" fill="rgb(228,99,48)"/><text x="39.2076%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (216,792 samples, 0.34%)</title><rect x="38.9597%" y="37" width="0.3395%" height="15" fill="rgb(253,11,6)"/><text x="39.2097%" y="47.50"></text></g><g><title>adt_dtorck_constraint (244,142 samples, 0.38%)</title><rect x="38.9276%" y="101" width="0.3823%" height="15" fill="rgb(247,143,39)"/><text x="39.1776%" y="111.50"></text></g><g><title>adt_dtorck_constraint (357,263 samples, 0.56%)</title><rect x="38.7666%" y="117" width="0.5595%" height="15" fill="rgb(236,97,10)"/><text x="39.0166%" y="127.50"></text></g><g><title>adt_dtorck_constraint (525,904 samples, 0.82%)</title><rect x="38.5370%" y="133" width="0.8236%" height="15" fill="rgb(233,208,19)"/><text x="38.7870%" y="143.50"></text></g><g><title>adt_dtorck_constraint (660,557 samples, 1.03%)</title><rect x="38.3438%" y="149" width="1.0344%" height="15" fill="rgb(216,164,2)"/><text x="38.5938%" y="159.50"></text></g><g><title>adt_dtorck_constraint (917,510 samples, 1.44%)</title><rect x="38.0321%" y="165" width="1.4368%" height="15" fill="rgb(220,129,5)"/><text x="38.2821%" y="175.50"></text></g><g><title>eval_to_const_value_raw (106,521 samples, 0.17%)</title><rect x="39.7230%" y="101" width="0.1668%" height="15" fill="rgb(242,17,10)"/><text x="39.9730%" y="111.50"></text></g><g><title>eval_to_const_value_raw (103,451 samples, 0.16%)</title><rect x="39.7279%" y="85" width="0.1620%" height="15" fill="rgb(242,107,0)"/><text x="39.9779%" y="95.50"></text></g><g><title>eval_to_allocation_raw (97,091 samples, 0.15%)</title><rect x="39.7378%" y="69" width="0.1520%" height="15" fill="rgb(251,28,31)"/><text x="39.9878%" y="79.50"></text></g><g><title>eval_to_const_value_raw (280,753 samples, 0.44%)</title><rect x="39.4689%" y="165" width="0.4397%" height="15" fill="rgb(233,223,10)"/><text x="39.7189%" y="175.50"></text></g><g><title>eval_to_const_value_raw (264,022 samples, 0.41%)</title><rect x="39.4951%" y="149" width="0.4135%" height="15" fill="rgb(215,21,27)"/><text x="39.7451%" y="159.50"></text></g><g><title>eval_to_allocation_raw (260,402 samples, 0.41%)</title><rect x="39.5008%" y="133" width="0.4078%" height="15" fill="rgb(232,23,21)"/><text x="39.7508%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (128,851 samples, 0.20%)</title><rect x="39.7068%" y="117" width="0.2018%" height="15" fill="rgb(244,5,23)"/><text x="39.9568%" y="127.50"></text></g><g><title>eval_to_const_value_raw (92,171 samples, 0.14%)</title><rect x="40.8196%" y="149" width="0.1443%" height="15" fill="rgb(226,81,46)"/><text x="41.0696%" y="159.50"></text></g><g><title>eval_to_const_value_raw (90,611 samples, 0.14%)</title><rect x="40.8221%" y="133" width="0.1419%" height="15" fill="rgb(247,70,30)"/><text x="41.0721%" y="143.50"></text></g><g><title>eval_to_allocation_raw (87,321 samples, 0.14%)</title><rect x="40.8272%" y="117" width="0.1367%" height="15" fill="rgb(212,68,19)"/><text x="41.0772%" y="127.50"></text></g><g><title>generics_of (86,051 samples, 0.13%)</title><rect x="40.9640%" y="149" width="0.1348%" height="15" fill="rgb(240,187,13)"/><text x="41.2140%" y="159.50"></text></g><g><title>impl_trait_ref (132,620 samples, 0.21%)</title><rect x="41.1345%" y="149" width="0.2077%" height="15" fill="rgb(223,113,26)"/><text x="41.3845%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (97,540 samples, 0.15%)</title><rect x="41.1894%" y="133" width="0.1527%" height="15" fill="rgb(206,192,2)"/><text x="41.4394%" y="143.50"></text></g><g><title>normalize_projection_ty (999,291 samples, 1.56%)</title><rect x="39.9137%" y="165" width="1.5649%" height="15" fill="rgb(241,108,4)"/><text x="40.1637%" y="175.50"></text></g><g><title>dropck_outlives (2,555,996 samples, 4.00%)</title><rect x="37.4903%" y="181" width="4.0026%" height="15" fill="rgb(247,173,49)"/><text x="37.7403%" y="191.50">drop..</text></g><g><title>adt_def (99,721 samples, 0.16%)</title><rect x="42.8837%" y="149" width="0.1562%" height="15" fill="rgb(224,114,35)"/><text x="43.1337%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (97,451 samples, 0.15%)</title><rect x="42.8872%" y="133" width="0.1526%" height="15" fill="rgb(245,159,27)"/><text x="43.1372%" y="143.50"></text></g><g><title>item_attrs (66,971 samples, 0.10%)</title><rect x="42.9350%" y="117" width="0.1049%" height="15" fill="rgb(245,172,44)"/><text x="43.1850%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (64,391 samples, 0.10%)</title><rect x="42.9390%" y="101" width="0.1008%" height="15" fill="rgb(236,23,11)"/><text x="43.1890%" y="111.50"></text></g><g><title>adt_sized_constraint (162,231 samples, 0.25%)</title><rect x="42.8656%" y="165" width="0.2541%" height="15" fill="rgb(205,117,38)"/><text x="43.1156%" y="175.50"></text></g><g><title>predicates_of (68,881 samples, 0.11%)</title><rect x="43.2471%" y="165" width="0.1079%" height="15" fill="rgb(237,72,25)"/><text x="43.4971%" y="175.50"></text></g><g><title>evaluate_obligation (1,910,177 samples, 2.99%)</title><rect x="41.4929%" y="181" width="2.9913%" height="15" fill="rgb(244,70,9)"/><text x="41.7429%" y="191.50">eva..</text></g><g><title>trait_impls_of (712,178 samples, 1.12%)</title><rect x="43.3690%" y="165" width="1.1153%" height="15" fill="rgb(217,125,39)"/><text x="43.6190%" y="175.50"></text></g><g><title>implementations_of_trait (252,741 samples, 0.40%)</title><rect x="44.0884%" y="149" width="0.3958%" height="15" fill="rgb(235,36,10)"/><text x="44.3384%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (177,561 samples, 0.28%)</title><rect x="44.2062%" y="133" width="0.2781%" height="15" fill="rgb(251,123,47)"/><text x="44.4562%" y="143.50"></text></g><g><title>fn_sig (197,241 samples, 0.31%)</title><rect x="44.5401%" y="181" width="0.3089%" height="15" fill="rgb(221,13,13)"/><text x="44.7901%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (175,891 samples, 0.28%)</title><rect x="44.5736%" y="165" width="0.2754%" height="15" fill="rgb(238,131,9)"/><text x="44.8236%" y="175.50"></text></g><g><title>generics_of (140,602 samples, 0.22%)</title><rect x="44.8490%" y="181" width="0.2202%" height="15" fill="rgb(211,50,8)"/><text x="45.0990%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (98,141 samples, 0.15%)</title><rect x="44.9155%" y="165" width="0.1537%" height="15" fill="rgb(245,182,24)"/><text x="45.1655%" y="175.50"></text></g><g><title>impl_item_implementor_ids (99,732 samples, 0.16%)</title><rect x="45.0692%" y="181" width="0.1562%" height="15" fill="rgb(242,14,37)"/><text x="45.3192%" y="191.50"></text></g><g><title>associated_items (87,511 samples, 0.14%)</title><rect x="45.0883%" y="165" width="0.1370%" height="15" fill="rgb(246,228,12)"/><text x="45.3383%" y="175.50"></text></g><g><title>impl_trait_ref (87,750 samples, 0.14%)</title><rect x="45.2412%" y="181" width="0.1374%" height="15" fill="rgb(213,55,15)"/><text x="45.4912%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (77,420 samples, 0.12%)</title><rect x="45.2574%" y="165" width="0.1212%" height="15" fill="rgb(209,9,3)"/><text x="45.5074%" y="175.50"></text></g><g><title>item_attrs (212,030 samples, 0.33%)</title><rect x="45.4735%" y="181" width="0.3320%" height="15" fill="rgb(230,59,30)"/><text x="45.7235%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (202,470 samples, 0.32%)</title><rect x="45.4885%" y="165" width="0.3171%" height="15" fill="rgb(209,121,21)"/><text x="45.7385%" y="175.50"></text></g><g><title>method_autoderef_steps (301,652 samples, 0.47%)</title><rect x="45.9432%" y="181" width="0.4724%" height="15" fill="rgb(220,109,13)"/><text x="46.1932%" y="191.50"></text></g><g><title>evaluate_obligation (213,352 samples, 0.33%)</title><rect x="46.0815%" y="165" width="0.3341%" height="15" fill="rgb(232,18,1)"/><text x="46.3315%" y="175.50"></text></g><g><title>explicit_predicates_of (281,982 samples, 0.44%)</title><rect x="46.9727%" y="149" width="0.4416%" height="15" fill="rgb(215,41,42)"/><text x="47.2227%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (243,161 samples, 0.38%)</title><rect x="47.0335%" y="133" width="0.3808%" height="15" fill="rgb(224,123,36)"/><text x="47.2835%" y="143.50"></text></g><g><title>predicates_of (657,577 samples, 1.03%)</title><rect x="46.5071%" y="181" width="1.0298%" height="15" fill="rgb(240,125,3)"/><text x="46.7571%" y="191.50"></text></g><g><title>predicates_defined_on (486,824 samples, 0.76%)</title><rect x="46.7745%" y="165" width="0.7624%" height="15" fill="rgb(205,98,50)"/><text x="47.0245%" y="175.50"></text></g><g><title>inferred_outlives_of (78,291 samples, 0.12%)</title><rect x="47.4143%" y="149" width="0.1226%" height="15" fill="rgb(205,185,37)"/><text x="47.6643%" y="159.50"></text></g><g><title>trait_impls_of (81,951 samples, 0.13%)</title><rect x="47.5544%" y="181" width="0.1283%" height="15" fill="rgb(238,207,15)"/><text x="47.8044%" y="191.50"></text></g><g><title>type_of (158,273 samples, 0.25%)</title><rect x="47.6828%" y="181" width="0.2479%" height="15" fill="rgb(213,199,42)"/><text x="47.9328%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (132,633 samples, 0.21%)</title><rect x="47.7229%" y="165" width="0.2077%" height="15" fill="rgb(235,201,11)"/><text x="47.9729%" y="175.50"></text></g><g><title>item_bodies_checking (16,719,426 samples, 26.18%)</title><rect x="21.8653%" y="229" width="26.1823%" height="15" fill="rgb(207,46,11)"/><text x="22.1153%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,715,946 samples, 26.18%)</title><rect x="21.8707%" y="213" width="26.1768%" height="15" fill="rgb(241,35,35)"/><text x="22.1207%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (16,683,806 samples, 26.13%)</title><rect x="21.9211%" y="197" width="26.1265%" height="15" fill="rgb(243,32,47)"/><text x="22.1711%" y="207.50">typeck</text></g><g><title>impl_parent (168,090 samples, 0.26%)</title><rect x="49.1014%" y="149" width="0.2632%" height="15" fill="rgb(247,202,23)"/><text x="49.3514%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (115,900 samples, 0.18%)</title><rect x="49.1831%" y="133" width="0.1815%" height="15" fill="rgb(219,102,11)"/><text x="49.4331%" y="143.50"></text></g><g><title>impl_trait_ref (627,918 samples, 0.98%)</title><rect x="49.3646%" y="149" width="0.9833%" height="15" fill="rgb(243,110,44)"/><text x="49.6146%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (575,038 samples, 0.90%)</title><rect x="49.4474%" y="133" width="0.9005%" height="15" fill="rgb(222,74,54)"/><text x="49.6974%" y="143.50"></text></g><g><title>adt_destructor (1,132,772 samples, 1.77%)</title><rect x="48.7018%" y="197" width="1.7739%" height="15" fill="rgb(216,99,12)"/><text x="48.9518%" y="207.50">a..</text></g><g><title>coherent_trait (1,117,042 samples, 1.75%)</title><rect x="48.7264%" y="181" width="1.7493%" height="15" fill="rgb(226,22,26)"/><text x="48.9764%" y="191.50"></text></g><g><title>specialization_graph_of (1,113,502 samples, 1.74%)</title><rect x="48.7319%" y="165" width="1.7437%" height="15" fill="rgb(217,163,10)"/><text x="48.9819%" y="175.50"></text></g><g><title>trait_impls_of (81,560 samples, 0.13%)</title><rect x="50.3479%" y="149" width="0.1277%" height="15" fill="rgb(213,25,53)"/><text x="50.5979%" y="159.50"></text></g><g><title>item_types_checking (1,752,540 samples, 2.74%)</title><rect x="48.0476%" y="229" width="2.7444%" height="15" fill="rgb(252,105,26)"/><text x="48.2976%" y="239.50">it..</text></g><g><title>check_mod_item_types (1,748,400 samples, 2.74%)</title><rect x="48.0540%" y="213" width="2.7380%" height="15" fill="rgb(220,39,43)"/><text x="48.3040%" y="223.50">ch..</text></g><g><title>type_of (87,592 samples, 0.14%)</title><rect x="50.6548%" y="197" width="0.1372%" height="15" fill="rgb(229,68,48)"/><text x="50.9048%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (66,481 samples, 0.10%)</title><rect x="50.6879%" y="181" width="0.1041%" height="15" fill="rgb(252,8,32)"/><text x="50.9379%" y="191.50"></text></g><g><title>fn_sig (154,151 samples, 0.24%)</title><rect x="51.0478%" y="197" width="0.2414%" height="15" fill="rgb(223,20,43)"/><text x="51.2978%" y="207.50"></text></g><g><title>generics_of (106,613 samples, 0.17%)</title><rect x="51.2892%" y="197" width="0.1670%" height="15" fill="rgb(229,81,49)"/><text x="51.5392%" y="207.50"></text></g><g><title>late_bound_vars_map (229,442 samples, 0.36%)</title><rect x="51.8515%" y="149" width="0.3593%" height="15" fill="rgb(236,28,36)"/><text x="52.1015%" y="159.50"></text></g><g><title>resolve_lifetimes (200,482 samples, 0.31%)</title><rect x="51.8969%" y="133" width="0.3140%" height="15" fill="rgb(249,185,26)"/><text x="52.1469%" y="143.50"></text></g><g><title>explicit_predicates_of (426,162 samples, 0.67%)</title><rect x="51.5601%" y="165" width="0.6674%" height="15" fill="rgb(249,174,33)"/><text x="51.8101%" y="175.50"></text></g><g><title>predicates_of (747,526 samples, 1.17%)</title><rect x="51.4740%" y="197" width="1.1706%" height="15" fill="rgb(233,201,37)"/><text x="51.7240%" y="207.50"></text></g><g><title>predicates_defined_on (728,275 samples, 1.14%)</title><rect x="51.5041%" y="181" width="1.1405%" height="15" fill="rgb(221,78,26)"/><text x="51.7541%" y="191.50"></text></g><g><title>inferred_outlives_of (266,343 samples, 0.42%)</title><rect x="52.2275%" y="165" width="0.4171%" height="15" fill="rgb(250,127,30)"/><text x="52.4775%" y="175.50"></text></g><g><title>inferred_outlives_crate (245,322 samples, 0.38%)</title><rect x="52.2604%" y="149" width="0.3842%" height="15" fill="rgb(230,49,44)"/><text x="52.5104%" y="159.50"></text></g><g><title>type_of (114,792 samples, 0.18%)</title><rect x="52.4648%" y="133" width="0.1798%" height="15" fill="rgb(229,67,23)"/><text x="52.7148%" y="143.50"></text></g><g><title>type_of (81,431 samples, 0.13%)</title><rect x="52.5171%" y="117" width="0.1275%" height="15" fill="rgb(249,83,47)"/><text x="52.7671%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (69,331 samples, 0.11%)</title><rect x="52.5360%" y="101" width="0.1086%" height="15" fill="rgb(215,43,3)"/><text x="52.7860%" y="111.50"></text></g><g><title>type_collecting (1,255,374 samples, 1.97%)</title><rect x="50.7955%" y="229" width="1.9659%" height="15" fill="rgb(238,154,13)"/><text x="51.0455%" y="239.50">t..</text></g><g><title>collect_mod_item_types (1,238,334 samples, 1.94%)</title><rect x="50.8221%" y="213" width="1.9392%" height="15" fill="rgb(219,56,2)"/><text x="51.0721%" y="223.50">c..</text></g><g><title>type_of (74,562 samples, 0.12%)</title><rect x="52.6446%" y="197" width="0.1168%" height="15" fill="rgb(233,0,4)"/><text x="52.8946%" y="207.50"></text></g><g><title>evaluate_obligation (239,621 samples, 0.38%)</title><rect x="54.0929%" y="197" width="0.3752%" height="15" fill="rgb(235,30,7)"/><text x="54.3429%" y="207.50"></text></g><g><title>implied_outlives_bounds (117,420 samples, 0.18%)</title><rect x="54.4681%" y="197" width="0.1839%" height="15" fill="rgb(250,79,13)"/><text x="54.7181%" y="207.50"></text></g><g><title>param_env (114,592 samples, 0.18%)</title><rect x="54.6520%" y="197" width="0.1794%" height="15" fill="rgb(211,146,34)"/><text x="54.9020%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,330,603 samples, 2.08%)</title><rect x="52.9033%" y="213" width="2.0837%" height="15" fill="rgb(228,22,38)"/><text x="53.1533%" y="223.50">c..</text></g><g><title>region_scope_tree (88,161 samples, 0.14%)</title><rect x="54.8490%" y="197" width="0.1381%" height="15" fill="rgb(235,168,5)"/><text x="55.0990%" y="207.50"></text></g><g><title>adt_def (70,371 samples, 0.11%)</title><rect x="56.3009%" y="165" width="0.1102%" height="15" fill="rgb(221,155,16)"/><text x="56.5509%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (68,241 samples, 0.11%)</title><rect x="56.3043%" y="149" width="0.1069%" height="15" fill="rgb(215,215,53)"/><text x="56.5543%" y="159.50"></text></g><g><title>adt_sized_constraint (81,541 samples, 0.13%)</title><rect x="56.2878%" y="181" width="0.1277%" height="15" fill="rgb(223,4,10)"/><text x="56.5378%" y="191.50"></text></g><g><title>adt_sized_constraint (133,122 samples, 0.21%)</title><rect x="56.2093%" y="197" width="0.2085%" height="15" fill="rgb(234,103,6)"/><text x="56.4593%" y="207.50"></text></g><g><title>adt_def (146,541 samples, 0.23%)</title><rect x="56.6371%" y="165" width="0.2295%" height="15" fill="rgb(227,97,0)"/><text x="56.8871%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (144,461 samples, 0.23%)</title><rect x="56.6403%" y="149" width="0.2262%" height="15" fill="rgb(234,150,53)"/><text x="56.8903%" y="159.50"></text></g><g><title>item_attrs (124,901 samples, 0.20%)</title><rect x="56.6710%" y="133" width="0.1956%" height="15" fill="rgb(228,201,54)"/><text x="56.9210%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (122,651 samples, 0.19%)</title><rect x="56.6745%" y="117" width="0.1921%" height="15" fill="rgb(222,22,37)"/><text x="56.9245%" y="127.50"></text></g><g><title>adt_sized_constraint (81,522 samples, 0.13%)</title><rect x="56.8955%" y="149" width="0.1277%" height="15" fill="rgb(237,53,32)"/><text x="57.1455%" y="159.50"></text></g><g><title>adt_sized_constraint (132,662 samples, 0.21%)</title><rect x="56.8666%" y="165" width="0.2077%" height="15" fill="rgb(233,25,53)"/><text x="57.1166%" y="175.50"></text></g><g><title>adt_sized_constraint (297,273 samples, 0.47%)</title><rect x="56.6235%" y="181" width="0.4655%" height="15" fill="rgb(210,40,34)"/><text x="56.8735%" y="191.50"></text></g><g><title>evaluate_obligation (479,515 samples, 0.75%)</title><rect x="56.4178%" y="197" width="0.7509%" height="15" fill="rgb(241,220,44)"/><text x="56.6678%" y="207.50"></text></g><g><title>implied_outlives_bounds (80,840 samples, 0.13%)</title><rect x="57.1747%" y="197" width="0.1266%" height="15" fill="rgb(235,28,35)"/><text x="57.4247%" y="207.50"></text></g><g><title>param_env (311,135 samples, 0.49%)</title><rect x="57.3013%" y="197" width="0.4872%" height="15" fill="rgb(210,56,17)"/><text x="57.5513%" y="207.50"></text></g><g><title>predicates_of (94,250 samples, 0.15%)</title><rect x="57.7885%" y="197" width="0.1476%" height="15" fill="rgb(224,130,29)"/><text x="58.0385%" y="207.50"></text></g><g><title>analysis (36,525,866 samples, 57.20%)</title><rect x="1.0327%" y="261" width="57.1988%" height="15" fill="rgb(235,212,8)"/><text x="1.2827%" y="271.50">analysis</text></g><g><title>type_check_crate (23,827,875 samples, 37.31%)</title><rect x="20.9175%" y="245" width="37.3140%" height="15" fill="rgb(223,33,50)"/><text x="21.1675%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,491,568 samples, 5.47%)</title><rect x="52.7638%" y="229" width="5.4677%" height="15" fill="rgb(219,149,13)"/><text x="53.0138%" y="239.50">wf_chec..</text></g><g><title>check_item_well_formed (2,071,835 samples, 3.24%)</title><rect x="54.9870%" y="213" width="3.2445%" height="15" fill="rgb(250,156,29)"/><text x="55.2370%" y="223.50">che..</text></g><g><title>variances_of (94,271 samples, 0.15%)</title><rect x="58.0839%" y="197" width="0.1476%" height="15" fill="rgb(216,193,19)"/><text x="58.3339%" y="207.50"></text></g><g><title>crate_variances (88,701 samples, 0.14%)</title><rect x="58.0926%" y="181" width="0.1389%" height="15" fill="rgb(216,135,14)"/><text x="58.3426%" y="191.50"></text></g><g><title>codegen_crate (389,074 samples, 0.61%)</title><rect x="58.2500%" y="261" width="0.6093%" height="15" fill="rgb(241,47,5)"/><text x="58.5000%" y="271.50"></text></g><g><title>AST_validation (73,361 samples, 0.11%)</title><rect x="59.2007%" y="245" width="0.1149%" height="15" fill="rgb(233,42,35)"/><text x="59.4507%" y="255.50"></text></g><g><title>crate_injection (88,571 samples, 0.14%)</title><rect x="59.3729%" y="245" width="0.1387%" height="15" fill="rgb(231,13,6)"/><text x="59.6229%" y="255.50"></text></g><g><title>metadata_load_macro (156,734 samples, 0.25%)</title><rect x="76.7920%" y="213" width="0.2454%" height="15" fill="rgb(207,181,40)"/><text x="77.0420%" y="223.50"></text></g><g><title>macro_expand_crate (16,507,554 samples, 25.85%)</title><rect x="59.5116%" y="245" width="25.8505%" height="15" fill="rgb(254,173,49)"/><text x="59.7616%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (16,491,014 samples, 25.82%)</title><rect x="59.5375%" y="229" width="25.8246%" height="15" fill="rgb(221,1,38)"/><text x="59.7875%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (5,315,959 samples, 8.32%)</title><rect x="77.0374%" y="213" width="8.3247%" height="15" fill="rgb(206,124,46)"/><text x="77.2874%" y="223.50">metadata_reg..</text></g><g><title>metadata_register_crate (2,925,561 samples, 4.58%)</title><rect x="80.7807%" y="197" width="4.5814%" height="15" fill="rgb(249,21,11)"/><text x="81.0307%" y="207.50">metad..</text></g><g><title>metadata_register_crate (76,380 samples, 0.12%)</title><rect x="85.2425%" y="181" width="0.1196%" height="15" fill="rgb(222,201,40)"/><text x="85.4925%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (123,171 samples, 0.19%)</title><rect x="85.3700%" y="245" width="0.1929%" height="15" fill="rgb(235,61,29)"/><text x="85.6200%" y="255.50"></text></g><g><title>finalize_macro_resolutions (329,894 samples, 0.52%)</title><rect x="85.6738%" y="229" width="0.5166%" height="15" fill="rgb(219,207,3)"/><text x="85.9238%" y="239.50"></text></g><g><title>late_resolve_crate (906,150 samples, 1.42%)</title><rect x="86.1904%" y="229" width="1.4190%" height="15" fill="rgb(222,56,46)"/><text x="86.4404%" y="239.50"></text></g><g><title>configure_and_expand (18,413,916 samples, 28.84%)</title><rect x="58.8593%" y="261" width="28.8358%" height="15" fill="rgb(239,76,54)"/><text x="59.1093%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,361,575 samples, 2.13%)</title><rect x="85.5629%" y="245" width="2.1322%" height="15" fill="rgb(231,124,27)"/><text x="85.8129%" y="255.50">r..</text></g><g><title>drop_ast (70,131 samples, 0.11%)</title><rect x="87.6951%" y="261" width="0.1098%" height="15" fill="rgb(249,195,6)"/><text x="87.9451%" y="271.50"></text></g><g><title>early_lint_checks (164,011 samples, 0.26%)</title><rect x="87.8368%" y="261" width="0.2568%" height="15" fill="rgb(237,174,47)"/><text x="88.0868%" y="271.50"></text></g><g><title>free_global_ctxt (2,477,488 samples, 3.88%)</title><rect x="88.0937%" y="261" width="3.8797%" height="15" fill="rgb(206,201,31)"/><text x="88.3437%" y="271.50">free..</text></g><g><title>crate_hash (71,390 samples, 0.11%)</title><rect x="92.7809%" y="245" width="0.1118%" height="15" fill="rgb(231,57,52)"/><text x="93.0309%" y="255.50"></text></g><g><title>generate_crate_metadata (670,838 samples, 1.05%)</title><rect x="91.9734%" y="261" width="1.0505%" height="15" fill="rgb(248,177,22)"/><text x="92.2234%" y="271.50"></text></g><g><title>hir_lowering (1,228,974 samples, 1.92%)</title><rect x="93.0239%" y="261" width="1.9245%" height="15" fill="rgb(215,211,37)"/><text x="93.2739%" y="271.50">h..</text></g><g><title>parse_crate (1,859,490 samples, 2.91%)</title><rect x="95.0192%" y="261" width="2.9119%" height="15" fill="rgb(241,128,51)"/><text x="95.2692%" y="271.50">pa..</text></g><g><title>prepare_outputs (351,964 samples, 0.55%)</title><rect x="97.9438%" y="261" width="0.5512%" height="15" fill="rgb(227,165,31)"/><text x="98.1938%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (476,136 samples, 0.75%)</title><rect x="98.4950%" y="261" width="0.7456%" height="15" fill="rgb(228,167,24)"/><text x="98.7450%" y="271.50"></text></g><g><title>setup_global_ctxt (176,962 samples, 0.28%)</title><rect x="99.2565%" y="261" width="0.2771%" height="15" fill="rgb(228,143,12)"/><text x="99.5065%" y="271.50"></text></g><g><title>all (63,857,771 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,149,8)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (63,857,771 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(243,35,44)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (297,843 samples, 0.47%)</title><rect x="99.5336%" y="261" width="0.4664%" height="15" fill="rgb(246,89,9)"/><text x="99.7836%" y="271.50"></text></g></svg></svg>