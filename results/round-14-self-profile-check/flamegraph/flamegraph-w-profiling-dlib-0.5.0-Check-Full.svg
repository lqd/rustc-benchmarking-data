<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (64,371 samples, 0.15%)</title><rect x="6.5864%" y="85" width="0.1548%" height="15" fill="rgb(227,0,7)"/><text x="6.8364%" y="95.50"></text></g><g><title>evaluate_obligation (60,551 samples, 0.15%)</title><rect x="6.5955%" y="69" width="0.1456%" height="15" fill="rgb(217,0,24)"/><text x="6.8455%" y="79.50"></text></g><g><title>adt_drop_tys (88,121 samples, 0.21%)</title><rect x="6.5690%" y="101" width="0.2119%" height="15" fill="rgb(221,193,54)"/><text x="6.8190%" y="111.50"></text></g><g><title>needs_drop_raw (328,883 samples, 0.79%)</title><rect x="6.5380%" y="117" width="0.7909%" height="15" fill="rgb(248,212,6)"/><text x="6.7880%" y="127.50"></text></g><g><title>is_copy_raw (227,882 samples, 0.55%)</title><rect x="6.7809%" y="101" width="0.5480%" height="15" fill="rgb(208,68,35)"/><text x="7.0309%" y="111.50"></text></g><g><title>evaluate_obligation (215,912 samples, 0.52%)</title><rect x="6.8097%" y="85" width="0.5193%" height="15" fill="rgb(232,128,0)"/><text x="7.0597%" y="95.50"></text></g><g><title>trait_impls_of (140,171 samples, 0.34%)</title><rect x="6.9919%" y="69" width="0.3371%" height="15" fill="rgb(207,160,47)"/><text x="7.2419%" y="79.50"></text></g><g><title>thir_body (85,602 samples, 0.21%)</title><rect x="7.3351%" y="117" width="0.2059%" height="15" fill="rgb(228,23,34)"/><text x="7.5851%" y="127.50"></text></g><g><title>mir_const (870,219 samples, 2.09%)</title><rect x="5.4511%" y="165" width="2.0928%" height="15" fill="rgb(218,30,26)"/><text x="5.7011%" y="175.50">m..</text></g><g><title>unsafety_check_result (769,079 samples, 1.85%)</title><rect x="5.6943%" y="149" width="1.8496%" height="15" fill="rgb(220,122,19)"/><text x="5.9443%" y="159.50">u..</text></g><g><title>mir_built (677,097 samples, 1.63%)</title><rect x="5.9155%" y="133" width="1.6284%" height="15" fill="rgb(250,228,42)"/><text x="6.1655%" y="143.50"></text></g><g><title>mir_promoted (1,005,291 samples, 2.42%)</title><rect x="5.1410%" y="181" width="2.4177%" height="15" fill="rgb(240,193,28)"/><text x="5.3910%" y="191.50">mi..</text></g><g><title>type_op_ascribe_user_type (113,582 samples, 0.27%)</title><rect x="7.5587%" y="181" width="0.2732%" height="15" fill="rgb(216,20,37)"/><text x="7.8087%" y="191.50"></text></g><g><title>type_op_prove_predicate (317,014 samples, 0.76%)</title><rect x="7.8319%" y="181" width="0.7624%" height="15" fill="rgb(206,188,39)"/><text x="8.0819%" y="191.50"></text></g><g><title>MIR_borrow_checking (2,820,261 samples, 6.78%)</title><rect x="1.8212%" y="213" width="6.7826%" height="15" fill="rgb(217,207,13)"/><text x="2.0712%" y="223.50">MIR_borro..</text></g><g><title>mir_borrowck (2,814,461 samples, 6.77%)</title><rect x="1.8351%" y="197" width="6.7687%" height="15" fill="rgb(231,73,38)"/><text x="2.0851%" y="207.50">mir_borro..</text></g><g><title>hir_module_items (100,912 samples, 0.24%)</title><rect x="8.6111%" y="213" width="0.2427%" height="15" fill="rgb(225,20,46)"/><text x="8.8611%" y="223.50"></text></g><g><title>get_lang_items (64,730 samples, 0.16%)</title><rect x="9.4207%" y="133" width="0.1557%" height="15" fill="rgb(210,31,41)"/><text x="9.6707%" y="143.50"></text></g><g><title>item_attrs (44,840 samples, 0.11%)</title><rect x="9.5764%" y="133" width="0.1078%" height="15" fill="rgb(221,200,47)"/><text x="9.8264%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (42,760 samples, 0.10%)</title><rect x="9.5814%" y="117" width="0.1028%" height="15" fill="rgb(226,26,5)"/><text x="9.8314%" y="127.50"></text></g><g><title>codegen_fn_attrs (181,471 samples, 0.44%)</title><rect x="9.3495%" y="149" width="0.4364%" height="15" fill="rgb(249,33,26)"/><text x="9.5995%" y="159.50"></text></g><g><title>codegen_fn_attrs (278,983 samples, 0.67%)</title><rect x="9.1191%" y="181" width="0.6709%" height="15" fill="rgb(235,183,28)"/><text x="9.3691%" y="191.50"></text></g><g><title>should_inherit_track_caller (252,883 samples, 0.61%)</title><rect x="9.1819%" y="165" width="0.6082%" height="15" fill="rgb(221,5,38)"/><text x="9.4319%" y="175.50"></text></g><g><title>check_mod_attrs (367,614 samples, 0.88%)</title><rect x="8.9070%" y="197" width="0.8841%" height="15" fill="rgb(247,18,42)"/><text x="9.1570%" y="207.50"></text></g><g><title>lookup_deprecation_entry (70,111 samples, 0.17%)</title><rect x="10.0536%" y="181" width="0.1686%" height="15" fill="rgb(241,131,45)"/><text x="10.3036%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (186,983 samples, 0.45%)</title><rect x="9.9009%" y="197" width="0.4497%" height="15" fill="rgb(249,31,29)"/><text x="10.1509%" y="207.50"></text></g><g><title>misc_checking_1 (658,187 samples, 1.58%)</title><rect x="8.8547%" y="213" width="1.5829%" height="15" fill="rgb(225,111,53)"/><text x="9.1047%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (65,171 samples, 0.16%)</title><rect x="10.4413%" y="197" width="0.1567%" height="15" fill="rgb(238,160,17)"/><text x="10.6913%" y="207.50"></text></g><g><title>check_mod_liveness (47,591 samples, 0.11%)</title><rect x="10.4836%" y="181" width="0.1145%" height="15" fill="rgb(214,148,48)"/><text x="10.7336%" y="191.50"></text></g><g><title>misc_checking_2 (189,592 samples, 0.46%)</title><rect x="10.4377%" y="213" width="0.4560%" height="15" fill="rgb(232,36,49)"/><text x="10.6877%" y="223.50"></text></g><g><title>match_checking (122,901 samples, 0.30%)</title><rect x="10.5980%" y="197" width="0.2956%" height="15" fill="rgb(209,103,24)"/><text x="10.8480%" y="207.50"></text></g><g><title>check_match (120,031 samples, 0.29%)</title><rect x="10.6049%" y="181" width="0.2887%" height="15" fill="rgb(229,88,8)"/><text x="10.8549%" y="191.50"></text></g><g><title>death_checking (105,532 samples, 0.25%)</title><rect x="10.9903%" y="197" width="0.2538%" height="15" fill="rgb(213,181,19)"/><text x="11.2403%" y="207.50"></text></g><g><title>param_env (72,461 samples, 0.17%)</title><rect x="12.3766%" y="165" width="0.1743%" height="15" fill="rgb(254,191,54)"/><text x="12.6266%" y="175.50"></text></g><g><title>crate_lints (1,808,350 samples, 4.35%)</title><rect x="11.2481%" y="181" width="4.3490%" height="15" fill="rgb(241,83,37)"/><text x="11.4981%" y="191.50">crate..</text></g><g><title>type_of (1,264,553 samples, 3.04%)</title><rect x="12.5559%" y="165" width="3.0412%" height="15" fill="rgb(233,36,39)"/><text x="12.8059%" y="175.50">typ..</text></g><g><title>metadata_decode_entry_type_of (774,757 samples, 1.86%)</title><rect x="13.7338%" y="149" width="1.8633%" height="15" fill="rgb(226,3,54)"/><text x="13.9838%" y="159.50">m..</text></g><g><title>item_attrs (41,680 samples, 0.10%)</title><rect x="16.3263%" y="37" width="0.1002%" height="15" fill="rgb(245,192,40)"/><text x="16.5763%" y="47.50"></text></g><g><title>layout_of (91,321 samples, 0.22%)</title><rect x="16.2467%" y="53" width="0.2196%" height="15" fill="rgb(238,167,29)"/><text x="16.4967%" y="63.50"></text></g><g><title>layout_of (178,613 samples, 0.43%)</title><rect x="16.0609%" y="69" width="0.4296%" height="15" fill="rgb(232,182,51)"/><text x="16.3109%" y="79.50"></text></g><g><title>layout_of (253,944 samples, 0.61%)</title><rect x="15.9457%" y="85" width="0.6107%" height="15" fill="rgb(231,60,39)"/><text x="16.1957%" y="95.50"></text></g><g><title>layout_of (316,664 samples, 0.76%)</title><rect x="15.8950%" y="101" width="0.7616%" height="15" fill="rgb(208,69,12)"/><text x="16.1450%" y="111.50"></text></g><g><title>param_env (41,650 samples, 0.10%)</title><rect x="16.5564%" y="85" width="0.1002%" height="15" fill="rgb(235,93,37)"/><text x="16.8064%" y="95.50"></text></g><g><title>lint_checking (2,272,795 samples, 5.47%)</title><rect x="11.2441%" y="197" width="5.4660%" height="15" fill="rgb(213,116,39)"/><text x="11.4941%" y="207.50">lint_ch..</text></g><g><title>module_lints (462,795 samples, 1.11%)</title><rect x="15.5971%" y="181" width="1.1130%" height="15" fill="rgb(222,207,29)"/><text x="15.8471%" y="191.50"></text></g><g><title>lint_mod (460,355 samples, 1.11%)</title><rect x="15.6030%" y="165" width="1.1071%" height="15" fill="rgb(206,96,30)"/><text x="15.8530%" y="175.50"></text></g><g><title>layout_of (382,874 samples, 0.92%)</title><rect x="15.7893%" y="149" width="0.9208%" height="15" fill="rgb(218,138,4)"/><text x="16.0393%" y="159.50"></text></g><g><title>layout_of (373,324 samples, 0.90%)</title><rect x="15.8123%" y="133" width="0.8978%" height="15" fill="rgb(250,191,14)"/><text x="16.0623%" y="143.50"></text></g><g><title>layout_of (357,744 samples, 0.86%)</title><rect x="15.8497%" y="117" width="0.8604%" height="15" fill="rgb(239,60,40)"/><text x="16.0997%" y="127.50"></text></g><g><title>privacy_access_levels (51,651 samples, 0.12%)</title><rect x="16.7101%" y="197" width="0.1242%" height="15" fill="rgb(206,27,48)"/><text x="16.9601%" y="207.50"></text></g><g><title>privacy_checking_modules (108,282 samples, 0.26%)</title><rect x="16.8343%" y="197" width="0.2604%" height="15" fill="rgb(225,35,8)"/><text x="17.0843%" y="207.50"></text></g><g><title>check_mod_privacy (106,611 samples, 0.26%)</title><rect x="16.8383%" y="181" width="0.2564%" height="15" fill="rgb(250,213,24)"/><text x="17.0883%" y="191.50"></text></g><g><title>misc_checking_3 (2,593,210 samples, 6.24%)</title><rect x="10.8936%" y="213" width="6.2366%" height="15" fill="rgb(247,123,22)"/><text x="11.1436%" y="223.50">misc_che..</text></g><g><title>impl_parent (889,439 samples, 2.14%)</title><rect x="20.0709%" y="149" width="2.1391%" height="15" fill="rgb(231,138,38)"/><text x="20.3209%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (595,017 samples, 1.43%)</title><rect x="20.7790%" y="133" width="1.4310%" height="15" fill="rgb(231,145,46)"/><text x="21.0290%" y="143.50"></text></g><g><title>impl_trait_ref (3,007,784 samples, 7.23%)</title><rect x="22.2100%" y="149" width="7.2336%" height="15" fill="rgb(251,118,11)"/><text x="22.4600%" y="159.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,708,620 samples, 6.51%)</title><rect x="22.9295%" y="133" width="6.5141%" height="15" fill="rgb(217,147,25)"/><text x="23.1795%" y="143.50">metadata_..</text></g><g><title>coherent_trait (5,351,529 samples, 12.87%)</title><rect x="17.2038%" y="181" width="12.8702%" height="15" fill="rgb(247,81,37)"/><text x="17.4538%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (5,343,319 samples, 12.85%)</title><rect x="17.2236%" y="165" width="12.8504%" height="15" fill="rgb(209,12,38)"/><text x="17.4736%" y="175.50">specialization_grap..</text></g><g><title>trait_impls_of (260,542 samples, 0.63%)</title><rect x="29.4474%" y="149" width="0.6266%" height="15" fill="rgb(227,1,9)"/><text x="29.6974%" y="159.50"></text></g><g><title>implementations_of_trait (68,161 samples, 0.16%)</title><rect x="29.9101%" y="133" width="0.1639%" height="15" fill="rgb(248,47,43)"/><text x="30.1601%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (52,781 samples, 0.13%)</title><rect x="29.9471%" y="117" width="0.1269%" height="15" fill="rgb(221,10,30)"/><text x="30.1971%" y="127.50"></text></g><g><title>coherence_checking (5,386,411 samples, 12.95%)</title><rect x="17.1760%" y="197" width="12.9541%" height="15" fill="rgb(210,229,1)"/><text x="17.4260%" y="207.50">coherence_checking</text></g><g><title>adt_def (54,131 samples, 0.13%)</title><rect x="35.6860%" y="133" width="0.1302%" height="15" fill="rgb(222,148,37)"/><text x="35.9360%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (52,631 samples, 0.13%)</title><rect x="35.6896%" y="117" width="0.1266%" height="15" fill="rgb(234,67,33)"/><text x="35.9396%" y="127.50"></text></g><g><title>adt_sized_constraint (62,691 samples, 0.15%)</title><rect x="35.6717%" y="149" width="0.1508%" height="15" fill="rgb(247,98,35)"/><text x="35.9217%" y="159.50"></text></g><g><title>associated_item (46,010 samples, 0.11%)</title><rect x="35.8604%" y="133" width="0.1107%" height="15" fill="rgb(247,138,52)"/><text x="36.1104%" y="143.50"></text></g><g><title>associated_items (65,790 samples, 0.16%)</title><rect x="35.8224%" y="149" width="0.1582%" height="15" fill="rgb(213,79,30)"/><text x="36.0724%" y="159.50"></text></g><g><title>dropck_outlives (85,671 samples, 0.21%)</title><rect x="35.9925%" y="149" width="0.2060%" height="15" fill="rgb(246,177,23)"/><text x="36.2425%" y="159.50"></text></g><g><title>evaluate_obligation (107,721 samples, 0.26%)</title><rect x="36.1985%" y="149" width="0.2591%" height="15" fill="rgb(230,62,27)"/><text x="36.4485%" y="159.50"></text></g><g><title>item_attrs (41,981 samples, 0.10%)</title><rect x="36.6691%" y="149" width="0.1010%" height="15" fill="rgb(216,154,8)"/><text x="36.9191%" y="159.50"></text></g><g><title>method_autoderef_steps (47,680 samples, 0.11%)</title><rect x="36.8036%" y="149" width="0.1147%" height="15" fill="rgb(244,35,45)"/><text x="37.0536%" y="159.50"></text></g><g><title>explicit_predicates_of (72,161 samples, 0.17%)</title><rect x="37.0518%" y="117" width="0.1735%" height="15" fill="rgb(251,115,12)"/><text x="37.3018%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (67,011 samples, 0.16%)</title><rect x="37.0641%" y="101" width="0.1612%" height="15" fill="rgb(240,54,50)"/><text x="37.3141%" y="111.50"></text></g><g><title>predicates_of (118,251 samples, 0.28%)</title><rect x="36.9716%" y="149" width="0.2844%" height="15" fill="rgb(233,84,52)"/><text x="37.2216%" y="159.50"></text></g><g><title>predicates_defined_on (100,221 samples, 0.24%)</title><rect x="37.0150%" y="133" width="0.2410%" height="15" fill="rgb(207,117,47)"/><text x="37.2650%" y="143.50"></text></g><g><title>item_bodies_checking (3,030,293 samples, 7.29%)</title><rect x="30.1555%" y="197" width="7.2877%" height="15" fill="rgb(249,43,39)"/><text x="30.4055%" y="207.50">item_bodie..</text></g><g><title>typeck_item_bodies (3,028,413 samples, 7.28%)</title><rect x="30.1601%" y="181" width="7.2832%" height="15" fill="rgb(209,38,44)"/><text x="30.4101%" y="191.50">typeck_ite..</text></g><g><title>typeck (3,022,283 samples, 7.27%)</title><rect x="30.1748%" y="165" width="7.2685%" height="15" fill="rgb(236,212,23)"/><text x="30.4248%" y="175.50">typeck</text></g><g><title>impl_parent (56,320 samples, 0.14%)</title><rect x="37.9755%" y="117" width="0.1354%" height="15" fill="rgb(242,79,21)"/><text x="38.2255%" y="127.50"></text></g><g><title>impl_trait_ref (183,852 samples, 0.44%)</title><rect x="38.1110%" y="117" width="0.4422%" height="15" fill="rgb(211,96,35)"/><text x="38.3610%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (164,142 samples, 0.39%)</title><rect x="38.1584%" y="101" width="0.3948%" height="15" fill="rgb(253,215,40)"/><text x="38.4084%" y="111.50"></text></g><g><title>adt_destructor (352,404 samples, 0.85%)</title><rect x="37.7912%" y="165" width="0.8475%" height="15" fill="rgb(211,81,21)"/><text x="38.0412%" y="175.50"></text></g><g><title>coherent_trait (349,414 samples, 0.84%)</title><rect x="37.7984%" y="149" width="0.8403%" height="15" fill="rgb(208,190,38)"/><text x="38.0484%" y="159.50"></text></g><g><title>specialization_graph_of (347,514 samples, 0.84%)</title><rect x="37.8029%" y="133" width="0.8358%" height="15" fill="rgb(235,213,38)"/><text x="38.0529%" y="143.50"></text></g><g><title>item_types_checking (519,976 samples, 1.25%)</title><rect x="37.4433%" y="197" width="1.2505%" height="15" fill="rgb(237,122,38)"/><text x="37.6933%" y="207.50"></text></g><g><title>check_mod_item_types (518,066 samples, 1.25%)</title><rect x="37.4479%" y="181" width="1.2459%" height="15" fill="rgb(244,218,35)"/><text x="37.6979%" y="191.50"></text></g><g><title>fn_sig (266,754 samples, 0.64%)</title><rect x="38.9075%" y="165" width="0.6415%" height="15" fill="rgb(240,68,47)"/><text x="39.1575%" y="175.50"></text></g><g><title>named_region_map (123,761 samples, 0.30%)</title><rect x="39.6101%" y="149" width="0.2976%" height="15" fill="rgb(210,16,53)"/><text x="39.8601%" y="159.50"></text></g><g><title>resolve_lifetimes (119,971 samples, 0.29%)</title><rect x="39.6192%" y="133" width="0.2885%" height="15" fill="rgb(235,124,12)"/><text x="39.8692%" y="143.50"></text></g><g><title>generics_of (161,332 samples, 0.39%)</title><rect x="39.5490%" y="165" width="0.3880%" height="15" fill="rgb(224,169,11)"/><text x="39.7990%" y="175.50"></text></g><g><title>predicates_of (208,172 samples, 0.50%)</title><rect x="39.9924%" y="165" width="0.5006%" height="15" fill="rgb(250,166,2)"/><text x="40.2424%" y="175.50"></text></g><g><title>predicates_defined_on (199,222 samples, 0.48%)</title><rect x="40.0139%" y="149" width="0.4791%" height="15" fill="rgb(242,216,29)"/><text x="40.2639%" y="159.50"></text></g><g><title>inferred_outlives_of (139,781 samples, 0.34%)</title><rect x="40.1569%" y="133" width="0.3362%" height="15" fill="rgb(230,116,27)"/><text x="40.4069%" y="143.50"></text></g><g><title>inferred_outlives_crate (127,741 samples, 0.31%)</title><rect x="40.1858%" y="117" width="0.3072%" height="15" fill="rgb(228,99,48)"/><text x="40.4358%" y="127.50"></text></g><g><title>type_of (80,230 samples, 0.19%)</title><rect x="40.3001%" y="101" width="0.1929%" height="15" fill="rgb(253,11,6)"/><text x="40.5501%" y="111.50"></text></g><g><title>type_collecting (813,079 samples, 1.96%)</title><rect x="38.6959%" y="197" width="1.9554%" height="15" fill="rgb(247,143,39)"/><text x="38.9459%" y="207.50">t..</text></g><g><title>collect_mod_item_types (804,689 samples, 1.94%)</title><rect x="38.7161%" y="181" width="1.9352%" height="15" fill="rgb(236,97,10)"/><text x="38.9661%" y="191.50">c..</text></g><g><title>type_of (65,830 samples, 0.16%)</title><rect x="40.4930%" y="165" width="0.1583%" height="15" fill="rgb(233,208,19)"/><text x="40.7430%" y="175.50"></text></g><g><title>adt_def (43,800 samples, 0.11%)</title><rect x="40.5460%" y="149" width="0.1053%" height="15" fill="rgb(216,164,2)"/><text x="40.7960%" y="159.50"></text></g><g><title>evaluate_obligation (129,612 samples, 0.31%)</title><rect x="41.1553%" y="165" width="0.3117%" height="15" fill="rgb(220,129,5)"/><text x="41.4053%" y="175.50"></text></g><g><title>implied_outlives_bounds (43,350 samples, 0.10%)</title><rect x="41.4670%" y="165" width="0.1043%" height="15" fill="rgb(242,17,10)"/><text x="41.7170%" y="175.50"></text></g><g><title>evaluate_obligation (145,762 samples, 0.35%)</title><rect x="41.8923%" y="149" width="0.3506%" height="15" fill="rgb(242,107,0)"/><text x="42.1423%" y="159.50"></text></g><g><title>layout_of (45,950 samples, 0.11%)</title><rect x="42.4187%" y="133" width="0.1105%" height="15" fill="rgb(251,28,31)"/><text x="42.6687%" y="143.50"></text></g><g><title>layout_of (85,200 samples, 0.20%)</title><rect x="42.3310%" y="149" width="0.2049%" height="15" fill="rgb(233,223,10)"/><text x="42.5810%" y="159.50"></text></g><g><title>param_env (53,530 samples, 0.13%)</title><rect x="42.5359%" y="149" width="0.1287%" height="15" fill="rgb(215,21,27)"/><text x="42.7859%" y="159.50"></text></g><g><title>object_safety_violations (493,116 samples, 1.19%)</title><rect x="41.5712%" y="165" width="1.1859%" height="15" fill="rgb(232,23,21)"/><text x="41.8212%" y="175.50"></text></g><g><title>check_impl_item_well_formed (929,809 samples, 2.24%)</title><rect x="40.7008%" y="181" width="2.2362%" height="15" fill="rgb(244,5,23)"/><text x="40.9508%" y="191.50">c..</text></g><g><title>adt_def (110,151 samples, 0.26%)</title><rect x="43.6983%" y="101" width="0.2649%" height="15" fill="rgb(226,81,46)"/><text x="43.9483%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (109,291 samples, 0.26%)</title><rect x="43.7004%" y="85" width="0.2628%" height="15" fill="rgb(247,70,30)"/><text x="43.9504%" y="95.50"></text></g><g><title>item_attrs (92,611 samples, 0.22%)</title><rect x="43.7405%" y="69" width="0.2227%" height="15" fill="rgb(212,68,19)"/><text x="43.9905%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (91,601 samples, 0.22%)</title><rect x="43.7429%" y="53" width="0.2203%" height="15" fill="rgb(240,187,13)"/><text x="43.9929%" y="63.50"></text></g><g><title>adt_sized_constraint (66,850 samples, 0.16%)</title><rect x="43.9632%" y="101" width="0.1608%" height="15" fill="rgb(223,113,26)"/><text x="44.2132%" y="111.50"></text></g><g><title>adt_sized_constraint (186,351 samples, 0.45%)</title><rect x="43.6859%" y="117" width="0.4482%" height="15" fill="rgb(206,192,2)"/><text x="43.9359%" y="127.50"></text></g><g><title>adt_sized_constraint (215,311 samples, 0.52%)</title><rect x="43.6282%" y="133" width="0.5178%" height="15" fill="rgb(241,108,4)"/><text x="43.8782%" y="143.50"></text></g><g><title>adt_sized_constraint (243,633 samples, 0.59%)</title><rect x="43.5718%" y="149" width="0.5859%" height="15" fill="rgb(247,173,49)"/><text x="43.8218%" y="159.50"></text></g><g><title>evaluate_obligation (320,434 samples, 0.77%)</title><rect x="43.3889%" y="165" width="0.7706%" height="15" fill="rgb(224,114,35)"/><text x="43.6389%" y="175.50"></text></g><g><title>param_env (84,781 samples, 0.20%)</title><rect x="44.2506%" y="165" width="0.2039%" height="15" fill="rgb(245,159,27)"/><text x="44.5006%" y="175.50"></text></g><g><title>analysis (17,885,130 samples, 43.01%)</title><rect x="1.5057%" y="229" width="43.0130%" height="15" fill="rgb(245,172,44)"/><text x="1.7557%" y="239.50">analysis</text></g><g><title>type_check_crate (11,388,357 samples, 27.39%)</title><rect x="17.1302%" y="213" width="27.3885%" height="15" fill="rgb(236,23,11)"/><text x="17.3802%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,607,597 samples, 3.87%)</title><rect x="40.6525%" y="197" width="3.8662%" height="15" fill="rgb(205,117,38)"/><text x="40.9025%" y="207.50">wf_c..</text></g><g><title>check_item_well_formed (657,687 samples, 1.58%)</title><rect x="42.9370%" y="181" width="1.5817%" height="15" fill="rgb(237,72,25)"/><text x="43.1870%" y="191.50"></text></g><g><title>codegen_crate (373,454 samples, 0.90%)</title><rect x="44.5407%" y="229" width="0.8981%" height="15" fill="rgb(244,70,9)"/><text x="44.7907%" y="239.50"></text></g><g><title>AST_validation (79,311 samples, 0.19%)</title><rect x="45.8948%" y="213" width="0.1907%" height="15" fill="rgb(217,125,39)"/><text x="46.1448%" y="223.50"></text></g><g><title>crate_injection (69,101 samples, 0.17%)</title><rect x="46.1629%" y="213" width="0.1662%" height="15" fill="rgb(235,36,10)"/><text x="46.4129%" y="223.50"></text></g><g><title>metadata_load_macro (330,954 samples, 0.80%)</title><rect x="71.2340%" y="181" width="0.7959%" height="15" fill="rgb(251,123,47)"/><text x="71.4840%" y="191.50"></text></g><g><title>macro_expand_crate (13,177,697 samples, 31.69%)</title><rect x="46.3291%" y="213" width="31.6918%" height="15" fill="rgb(221,13,13)"/><text x="46.5791%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (13,153,497 samples, 31.63%)</title><rect x="46.3873%" y="197" width="31.6336%" height="15" fill="rgb(238,131,9)"/><text x="46.6373%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,491,088 samples, 5.99%)</title><rect x="72.0299%" y="181" width="5.9910%" height="15" fill="rgb(211,50,8)"/><text x="72.2799%" y="191.50">metadata..</text></g><g><title>metadata_register_crate (891,389 samples, 2.14%)</title><rect x="75.8771%" y="165" width="2.1438%" height="15" fill="rgb(245,182,24)"/><text x="76.1271%" y="175.50">m..</text></g><g><title>metadata_register_crate (68,341 samples, 0.16%)</title><rect x="77.8565%" y="149" width="0.1644%" height="15" fill="rgb(242,14,37)"/><text x="78.1065%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (205,552 samples, 0.49%)</title><rect x="78.0326%" y="213" width="0.4943%" height="15" fill="rgb(246,228,12)"/><text x="78.2826%" y="223.50"></text></g><g><title>finalize_macro_resolutions (43,120 samples, 0.10%)</title><rect x="78.6012%" y="197" width="0.1037%" height="15" fill="rgb(213,55,15)"/><text x="78.8512%" y="207.50"></text></g><g><title>late_resolve_crate (967,111 samples, 2.33%)</title><rect x="78.7049%" y="197" width="2.3259%" height="15" fill="rgb(209,9,3)"/><text x="78.9549%" y="207.50">l..</text></g><g><title>configure_and_expand (14,848,276 samples, 35.71%)</title><rect x="45.4388%" y="229" width="35.7095%" height="15" fill="rgb(230,59,30)"/><text x="45.6888%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,089,943 samples, 2.62%)</title><rect x="78.5270%" y="213" width="2.6213%" height="15" fill="rgb(209,121,21)"/><text x="78.7770%" y="223.50">re..</text></g><g><title>drop_ast (45,571 samples, 0.11%)</title><rect x="81.1483%" y="229" width="0.1096%" height="15" fill="rgb(220,109,13)"/><text x="81.3983%" y="239.50"></text></g><g><title>early_lint_checks (145,582 samples, 0.35%)</title><rect x="81.2963%" y="229" width="0.3501%" height="15" fill="rgb(232,18,1)"/><text x="81.5463%" y="239.50"></text></g><g><title>free_global_ctxt (2,475,228 samples, 5.95%)</title><rect x="81.6464%" y="229" width="5.9528%" height="15" fill="rgb(215,41,42)"/><text x="81.8964%" y="239.50">free_glo..</text></g><g><title>crate_hash (66,091 samples, 0.16%)</title><rect x="88.5777%" y="213" width="0.1589%" height="15" fill="rgb(224,123,36)"/><text x="88.8277%" y="223.50"></text></g><g><title>mir_for_ctfe (43,801 samples, 0.11%)</title><rect x="88.8298%" y="213" width="0.1053%" height="15" fill="rgb(240,125,3)"/><text x="89.0798%" y="223.50"></text></g><g><title>generate_crate_metadata (584,876 samples, 1.41%)</title><rect x="87.5993%" y="229" width="1.4066%" height="15" fill="rgb(205,98,50)"/><text x="87.8493%" y="239.50"></text></g><g><title>hir_lowering (1,487,656 samples, 3.58%)</title><rect x="89.0059%" y="229" width="3.5777%" height="15" fill="rgb(205,185,37)"/><text x="89.2559%" y="239.50">hir_..</text></g><g><title>link (47,920 samples, 0.12%)</title><rect x="92.5836%" y="229" width="0.1152%" height="15" fill="rgb(238,207,15)"/><text x="92.8336%" y="239.50"></text></g><g><title>parse_crate (2,021,743 samples, 4.86%)</title><rect x="92.6989%" y="229" width="4.8622%" height="15" fill="rgb(213,199,42)"/><text x="92.9489%" y="239.50">parse_..</text></g><g><title>prepare_outputs (242,463 samples, 0.58%)</title><rect x="97.5804%" y="229" width="0.5831%" height="15" fill="rgb(235,201,11)"/><text x="97.8304%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (386,164 samples, 0.93%)</title><rect x="98.1635%" y="229" width="0.9287%" height="15" fill="rgb(207,46,11)"/><text x="98.4135%" y="239.50"></text></g><g><title>setup_global_ctxt (95,751 samples, 0.23%)</title><rect x="99.1171%" y="229" width="0.2303%" height="15" fill="rgb(241,35,35)"/><text x="99.3671%" y="239.50"></text></g><g><title>all (41,580,795 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (41,580,795 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (271,363 samples, 0.65%)</title><rect x="99.3474%" y="229" width="0.6526%" height="15" fill="rgb(219,102,11)"/><text x="99.5974%" y="239.50"></text></g></svg></svg>