<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (588,157 samples, 0.11%)</title><rect x="14.7699%" y="149" width="0.1075%" height="15" fill="rgb(227,0,7)"/><text x="15.0199%" y="159.50"></text></g><g><title>param_env (1,283,164 samples, 0.23%)</title><rect x="16.8121%" y="117" width="0.2346%" height="15" fill="rgb(217,0,24)"/><text x="17.0621%" y="127.50"></text></g><g><title>item_attrs (924,559 samples, 0.17%)</title><rect x="17.6247%" y="85" width="0.1690%" height="15" fill="rgb(221,193,54)"/><text x="17.8747%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (890,939 samples, 0.16%)</title><rect x="17.6309%" y="69" width="0.1629%" height="15" fill="rgb(248,212,6)"/><text x="17.8809%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,262,363 samples, 0.23%)</title><rect x="17.5742%" y="101" width="0.2308%" height="15" fill="rgb(208,68,35)"/><text x="17.8242%" y="111.50"></text></g><g><title>is_copy_raw (842,080 samples, 0.15%)</title><rect x="21.0088%" y="85" width="0.1539%" height="15" fill="rgb(232,128,0)"/><text x="21.2588%" y="95.50"></text></g><g><title>evaluate_obligation (663,578 samples, 0.12%)</title><rect x="21.0414%" y="69" width="0.1213%" height="15" fill="rgb(207,160,47)"/><text x="21.2914%" y="79.50"></text></g><g><title>adt_drop_tys (1,181,384 samples, 0.22%)</title><rect x="21.2877%" y="69" width="0.2160%" height="15" fill="rgb(228,23,34)"/><text x="21.5377%" y="79.50"></text></g><g><title>is_copy_raw (5,567,062 samples, 1.02%)</title><rect x="21.5037%" y="69" width="1.0177%" height="15" fill="rgb(218,30,26)"/><text x="21.7537%" y="79.50"></text></g><g><title>evaluate_obligation (4,608,625 samples, 0.84%)</title><rect x="21.6789%" y="53" width="0.8425%" height="15" fill="rgb(220,122,19)"/><text x="21.9289%" y="63.50"></text></g><g><title>needs_drop_raw (7,441,878 samples, 1.36%)</title><rect x="21.1635%" y="85" width="1.3604%" height="15" fill="rgb(250,228,42)"/><text x="21.4135%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,814,542 samples, 0.33%)</title><rect x="22.7076%" y="69" width="0.3317%" height="15" fill="rgb(240,193,28)"/><text x="22.9576%" y="79.50"></text></g><g><title>specialization_graph_of (1,460,935 samples, 0.27%)</title><rect x="23.0923%" y="69" width="0.2671%" height="15" fill="rgb(216,20,37)"/><text x="23.3423%" y="79.50"></text></g><g><title>impl_trait_ref (568,557 samples, 0.10%)</title><rect x="23.2554%" y="53" width="0.1039%" height="15" fill="rgb(206,188,39)"/><text x="23.5054%" y="63.50"></text></g><g><title>resolve_instance (4,841,131 samples, 0.88%)</title><rect x="22.5239%" y="85" width="0.8850%" height="15" fill="rgb(217,207,13)"/><text x="22.7739%" y="95.50"></text></g><g><title>thir_body (5,969,116 samples, 1.09%)</title><rect x="23.4423%" y="85" width="1.0912%" height="15" fill="rgb(231,73,38)"/><text x="23.6923%" y="95.50"></text></g><g><title>mir_const (47,421,659 samples, 8.67%)</title><rect x="15.9020%" y="133" width="8.6688%" height="15" fill="rgb(225,20,46)"/><text x="16.1520%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (41,159,938 samples, 7.52%)</title><rect x="17.0466%" y="117" width="7.5241%" height="15" fill="rgb(210,31,41)"/><text x="17.2966%" y="127.50">unsafety_c..</text></g><g><title>mir_built (37,011,763 samples, 6.77%)</title><rect x="17.8049%" y="101" width="6.7658%" height="15" fill="rgb(221,200,47)"/><text x="18.0549%" y="111.50">mir_built</text></g><g><title>mir_promoted (53,131,118 samples, 9.71%)</title><rect x="14.9801%" y="149" width="9.7125%" height="15" fill="rgb(226,26,5)"/><text x="15.2301%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (666,588 samples, 0.12%)</title><rect x="24.5707%" y="133" width="0.1219%" height="15" fill="rgb(249,33,26)"/><text x="24.8207%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,758,865 samples, 0.32%)</title><rect x="24.6934%" y="149" width="0.3215%" height="15" fill="rgb(235,183,28)"/><text x="24.9434%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (4,464,768 samples, 0.82%)</title><rect x="25.0149%" y="149" width="0.8162%" height="15" fill="rgb(221,5,38)"/><text x="25.2649%" y="159.50"></text></g><g><title>normalize_projection_ty (2,523,683 samples, 0.46%)</title><rect x="25.3697%" y="133" width="0.4613%" height="15" fill="rgb(247,18,42)"/><text x="25.6197%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,625,336 samples, 0.30%)</title><rect x="25.8311%" y="149" width="0.2971%" height="15" fill="rgb(241,131,45)"/><text x="26.0811%" y="159.50"></text></g><g><title>normalize_projection_ty (807,598 samples, 0.15%)</title><rect x="25.9806%" y="133" width="0.1476%" height="15" fill="rgb(249,31,29)"/><text x="26.2306%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,131,401 samples, 0.21%)</title><rect x="26.1282%" y="149" width="0.2068%" height="15" fill="rgb(225,111,53)"/><text x="26.3782%" y="159.50"></text></g><g><title>type_op_prove_predicate (14,920,520 samples, 2.73%)</title><rect x="26.3350%" y="149" width="2.7275%" height="15" fill="rgb(238,160,17)"/><text x="26.5850%" y="159.50">ty..</text></g><g><title>evaluate_obligation (680,768 samples, 0.12%)</title><rect x="28.9381%" y="133" width="0.1244%" height="15" fill="rgb(214,148,48)"/><text x="29.1881%" y="143.50"></text></g><g><title>MIR_borrow_checking (156,697,930 samples, 28.64%)</title><rect x="0.4246%" y="181" width="28.6446%" height="15" fill="rgb(232,36,49)"/><text x="0.6746%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (155,936,360 samples, 28.51%)</title><rect x="0.5639%" y="165" width="28.5054%" height="15" fill="rgb(209,103,24)"/><text x="0.8139%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (930,288 samples, 0.17%)</title><rect x="29.1314%" y="181" width="0.1701%" height="15" fill="rgb(229,88,8)"/><text x="29.3814%" y="191.50"></text></g><g><title>codegen_fn_attrs (834,138 samples, 0.15%)</title><rect x="29.6204%" y="117" width="0.1525%" height="15" fill="rgb(213,181,19)"/><text x="29.8704%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,502,868 samples, 0.27%)</title><rect x="29.5048%" y="149" width="0.2747%" height="15" fill="rgb(254,191,54)"/><text x="29.7548%" y="159.50"></text></g><g><title>should_inherit_track_caller (1,309,176 samples, 0.24%)</title><rect x="29.5402%" y="133" width="0.2393%" height="15" fill="rgb(241,83,37)"/><text x="29.7902%" y="143.50"></text></g><g><title>check_mod_attrs (2,562,064 samples, 0.47%)</title><rect x="29.3112%" y="165" width="0.4683%" height="15" fill="rgb(233,36,39)"/><text x="29.5612%" y="175.50"></text></g><g><title>check_mod_const_bodies (591,600 samples, 0.11%)</title><rect x="29.7795%" y="165" width="0.1081%" height="15" fill="rgb(226,3,54)"/><text x="30.0295%" y="175.50"></text></g><g><title>lookup_deprecation_entry (593,237 samples, 0.11%)</title><rect x="30.0775%" y="149" width="0.1084%" height="15" fill="rgb(245,192,40)"/><text x="30.3275%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,424,875 samples, 0.26%)</title><rect x="29.9552%" y="165" width="0.2605%" height="15" fill="rgb(238,167,29)"/><text x="30.2052%" y="175.50"></text></g><g><title>misc_checking_1 (5,137,717 samples, 0.94%)</title><rect x="29.3015%" y="181" width="0.9392%" height="15" fill="rgb(232,182,51)"/><text x="29.5515%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,958,043 samples, 0.54%)</title><rect x="30.2411%" y="165" width="0.5407%" height="15" fill="rgb(231,60,39)"/><text x="30.4911%" y="175.50"></text></g><g><title>check_mod_liveness (2,482,700 samples, 0.45%)</title><rect x="30.3280%" y="149" width="0.4538%" height="15" fill="rgb(208,69,12)"/><text x="30.5780%" y="159.50"></text></g><g><title>type_uninhabited_from (657,010 samples, 0.12%)</title><rect x="30.6617%" y="133" width="0.1201%" height="15" fill="rgb(235,93,37)"/><text x="30.9117%" y="143.50"></text></g><g><title>misc_checking_2 (6,757,425 samples, 1.24%)</title><rect x="30.2407%" y="181" width="1.2353%" height="15" fill="rgb(213,116,39)"/><text x="30.4907%" y="191.50"></text></g><g><title>match_checking (3,797,352 samples, 0.69%)</title><rect x="30.7818%" y="165" width="0.6942%" height="15" fill="rgb(222,207,29)"/><text x="31.0318%" y="175.50"></text></g><g><title>check_match (3,611,632 samples, 0.66%)</title><rect x="30.8157%" y="149" width="0.6602%" height="15" fill="rgb(206,96,30)"/><text x="31.0657%" y="159.50"></text></g><g><title>check_private_in_public (1,051,422 samples, 0.19%)</title><rect x="31.4782%" y="165" width="0.1922%" height="15" fill="rgb(218,138,4)"/><text x="31.7282%" y="175.50"></text></g><g><title>death_checking (2,041,692 samples, 0.37%)</title><rect x="31.6704%" y="165" width="0.3732%" height="15" fill="rgb(250,191,14)"/><text x="31.9204%" y="175.50"></text></g><g><title>eval_to_allocation_raw (791,509 samples, 0.14%)</title><rect x="32.4765%" y="133" width="0.1447%" height="15" fill="rgb(239,60,40)"/><text x="32.7265%" y="143.50"></text></g><g><title>eval_to_allocation_raw (779,969 samples, 0.14%)</title><rect x="32.4786%" y="117" width="0.1426%" height="15" fill="rgb(206,27,48)"/><text x="32.7286%" y="127.50"></text></g><g><title>param_env (1,154,311 samples, 0.21%)</title><rect x="32.6212%" y="133" width="0.2110%" height="15" fill="rgb(225,35,8)"/><text x="32.8712%" y="143.50"></text></g><g><title>crate_lints (6,126,367 samples, 1.12%)</title><rect x="32.0440%" y="149" width="1.1199%" height="15" fill="rgb(250,213,24)"/><text x="32.2940%" y="159.50"></text></g><g><title>type_of (1,494,650 samples, 0.27%)</title><rect x="32.8907%" y="133" width="0.2732%" height="15" fill="rgb(247,123,22)"/><text x="33.1407%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,189,326 samples, 0.22%)</title><rect x="32.9465%" y="117" width="0.2174%" height="15" fill="rgb(231,138,38)"/><text x="33.1965%" y="127.50"></text></g><g><title>lint_checking (8,929,319 samples, 1.63%)</title><rect x="32.0436%" y="165" width="1.6323%" height="15" fill="rgb(231,145,46)"/><text x="32.2936%" y="175.50"></text></g><g><title>module_lints (2,800,542 samples, 0.51%)</title><rect x="33.1639%" y="149" width="0.5119%" height="15" fill="rgb(251,118,11)"/><text x="33.4139%" y="159.50"></text></g><g><title>lint_mod (2,780,992 samples, 0.51%)</title><rect x="33.1675%" y="133" width="0.5084%" height="15" fill="rgb(217,147,25)"/><text x="33.4175%" y="143.50"></text></g><g><title>privacy_access_levels (1,733,469 samples, 0.32%)</title><rect x="33.6759%" y="165" width="0.3169%" height="15" fill="rgb(247,81,37)"/><text x="33.9259%" y="175.50"></text></g><g><title>privacy_checking_modules (6,369,289 samples, 1.16%)</title><rect x="33.9928%" y="165" width="1.1643%" height="15" fill="rgb(209,12,38)"/><text x="34.2428%" y="175.50"></text></g><g><title>check_mod_privacy (6,353,279 samples, 1.16%)</title><rect x="33.9957%" y="149" width="1.1614%" height="15" fill="rgb(227,1,9)"/><text x="34.2457%" y="159.50"></text></g><g><title>misc_checking_3 (20,171,192 samples, 3.69%)</title><rect x="31.4760%" y="181" width="3.6873%" height="15" fill="rgb(248,47,43)"/><text x="31.7260%" y="191.50">misc..</text></g><g><title>impl_parent (3,693,264 samples, 0.68%)</title><rect x="36.6155%" y="117" width="0.6751%" height="15" fill="rgb(221,10,30)"/><text x="36.8655%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,165,134 samples, 0.40%)</title><rect x="36.8949%" y="101" width="0.3958%" height="15" fill="rgb(210,229,1)"/><text x="37.1449%" y="111.50"></text></g><g><title>impl_trait_ref (7,862,154 samples, 1.44%)</title><rect x="37.2913%" y="117" width="1.4372%" height="15" fill="rgb(222,148,37)"/><text x="37.5413%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,316,970 samples, 1.15%)</title><rect x="37.5737%" y="101" width="1.1548%" height="15" fill="rgb(234,67,33)"/><text x="37.8237%" y="111.50"></text></g><g><title>trait_impls_of (1,755,363 samples, 0.32%)</title><rect x="38.7575%" y="117" width="0.3209%" height="15" fill="rgb(247,98,35)"/><text x="39.0075%" y="127.50"></text></g><g><title>implementations_of_trait (652,897 samples, 0.12%)</title><rect x="38.9590%" y="101" width="0.1194%" height="15" fill="rgb(247,138,52)"/><text x="39.2090%" y="111.50"></text></g><g><title>coherent_trait (21,076,293 samples, 3.85%)</title><rect x="35.2281%" y="149" width="3.8528%" height="15" fill="rgb(213,79,30)"/><text x="35.4781%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (20,553,417 samples, 3.76%)</title><rect x="35.3237%" y="133" width="3.7572%" height="15" fill="rgb(246,177,23)"/><text x="35.5737%" y="143.50">spec..</text></g><g><title>coherence_checking (21,344,936 samples, 3.90%)</title><rect x="35.2217%" y="165" width="3.9019%" height="15" fill="rgb(230,62,27)"/><text x="35.4717%" y="175.50">cohe..</text></g><g><title>associated_item (1,569,689 samples, 0.29%)</title><rect x="61.9099%" y="101" width="0.2869%" height="15" fill="rgb(216,154,8)"/><text x="62.1599%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,233,274 samples, 0.23%)</title><rect x="61.9714%" y="85" width="0.2254%" height="15" fill="rgb(244,35,45)"/><text x="62.2214%" y="95.50"></text></g><g><title>associated_items (2,223,069 samples, 0.41%)</title><rect x="61.8054%" y="117" width="0.4064%" height="15" fill="rgb(251,115,12)"/><text x="62.0554%" y="127.50"></text></g><g><title>adt_dtorck_constraint (820,597 samples, 0.15%)</title><rect x="62.5394%" y="101" width="0.1500%" height="15" fill="rgb(240,54,50)"/><text x="62.7894%" y="111.50"></text></g><g><title>dropck_outlives (2,523,462 samples, 0.46%)</title><rect x="62.2493%" y="117" width="0.4613%" height="15" fill="rgb(233,84,52)"/><text x="62.4993%" y="127.50"></text></g><g><title>predicates_of (549,153 samples, 0.10%)</title><rect x="64.0669%" y="101" width="0.1004%" height="15" fill="rgb(207,117,47)"/><text x="64.3169%" y="111.50"></text></g><g><title>trait_impls_of (593,546 samples, 0.11%)</title><rect x="64.2211%" y="101" width="0.1085%" height="15" fill="rgb(249,43,39)"/><text x="64.4711%" y="111.50"></text></g><g><title>evaluate_obligation (8,901,686 samples, 1.63%)</title><rect x="62.7106%" y="117" width="1.6272%" height="15" fill="rgb(209,38,44)"/><text x="62.9606%" y="127.50"></text></g><g><title>evaluate_obligation (892,949 samples, 0.16%)</title><rect x="64.8332%" y="101" width="0.1632%" height="15" fill="rgb(236,212,23)"/><text x="65.0832%" y="111.50"></text></g><g><title>method_autoderef_steps (1,871,971 samples, 0.34%)</title><rect x="64.6587%" y="117" width="0.3422%" height="15" fill="rgb(242,79,21)"/><text x="64.9087%" y="127.50"></text></g><g><title>predicates_of (930,966 samples, 0.17%)</title><rect x="65.0438%" y="117" width="0.1702%" height="15" fill="rgb(211,96,35)"/><text x="65.2938%" y="127.50"></text></g><g><title>predicates_defined_on (637,564 samples, 0.12%)</title><rect x="65.0975%" y="101" width="0.1165%" height="15" fill="rgb(253,215,40)"/><text x="65.3475%" y="111.50"></text></g><g><title>dropck_outlives (1,114,093 samples, 0.20%)</title><rect x="69.2346%" y="101" width="0.2037%" height="15" fill="rgb(211,81,21)"/><text x="69.4846%" y="111.50"></text></g><g><title>evaluate_obligation (3,327,728 samples, 0.61%)</title><rect x="69.4383%" y="101" width="0.6083%" height="15" fill="rgb(208,190,38)"/><text x="69.6883%" y="111.50"></text></g><g><title>method_autoderef_steps (676,938 samples, 0.12%)</title><rect x="70.2407%" y="101" width="0.1237%" height="15" fill="rgb(235,213,38)"/><text x="70.4907%" y="111.50"></text></g><g><title>typeck (28,619,099 samples, 5.23%)</title><rect x="65.2730%" y="117" width="5.2316%" height="15" fill="rgb(237,122,38)"/><text x="65.5230%" y="127.50">typeck</text></g><g><title>item_bodies_checking (171,747,247 samples, 31.40%)</title><rect x="39.1492%" y="165" width="31.3957%" height="15" fill="rgb(244,218,35)"/><text x="39.3992%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (171,743,017 samples, 31.39%)</title><rect x="39.1500%" y="149" width="31.3949%" height="15" fill="rgb(240,68,47)"/><text x="39.4000%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (171,244,649 samples, 31.30%)</title><rect x="39.2411%" y="133" width="31.3038%" height="15" fill="rgb(210,16,53)"/><text x="39.4911%" y="143.50">typeck</text></g><g><title>mir_built (4,583,301 samples, 0.84%)</title><rect x="72.9342%" y="53" width="0.8378%" height="15" fill="rgb(235,124,12)"/><text x="73.1842%" y="63.50"></text></g><g><title>typeck (4,236,717 samples, 0.77%)</title><rect x="72.9976%" y="37" width="0.7745%" height="15" fill="rgb(224,169,11)"/><text x="73.2476%" y="47.50"></text></g><g><title>mir_const (4,951,115 samples, 0.91%)</title><rect x="72.8937%" y="85" width="0.9051%" height="15" fill="rgb(250,166,2)"/><text x="73.1437%" y="95.50"></text></g><g><title>unsafety_check_result (4,771,123 samples, 0.87%)</title><rect x="72.9266%" y="69" width="0.8722%" height="15" fill="rgb(242,216,29)"/><text x="73.1766%" y="79.50"></text></g><g><title>mir_promoted (5,033,875 samples, 0.92%)</title><rect x="72.8795%" y="101" width="0.9202%" height="15" fill="rgb(230,116,27)"/><text x="73.1295%" y="111.50"></text></g><g><title>type_of (8,376,954 samples, 1.53%)</title><rect x="72.4866%" y="133" width="1.5313%" height="15" fill="rgb(228,99,48)"/><text x="72.7366%" y="143.50"></text></g><g><title>mir_borrowck (8,231,141 samples, 1.50%)</title><rect x="72.5132%" y="117" width="1.5047%" height="15" fill="rgb(253,11,6)"/><text x="72.7632%" y="127.50"></text></g><g><title>type_op_prove_predicate (883,790 samples, 0.16%)</title><rect x="73.8563%" y="101" width="0.1616%" height="15" fill="rgb(247,143,39)"/><text x="74.1063%" y="111.50"></text></g><g><title>item_types_checking (19,661,327 samples, 3.59%)</title><rect x="70.5449%" y="165" width="3.5941%" height="15" fill="rgb(236,97,10)"/><text x="70.7949%" y="175.50">item..</text></g><g><title>check_mod_item_types (19,641,567 samples, 3.59%)</title><rect x="70.5485%" y="149" width="3.5905%" height="15" fill="rgb(233,208,19)"/><text x="70.7985%" y="159.50">chec..</text></g><g><title>typeck (662,697 samples, 0.12%)</title><rect x="74.0179%" y="133" width="0.1211%" height="15" fill="rgb(216,164,2)"/><text x="74.2679%" y="143.50"></text></g><g><title>fn_sig (2,554,826 samples, 0.47%)</title><rect x="74.4098%" y="133" width="0.4670%" height="15" fill="rgb(220,129,5)"/><text x="74.6598%" y="143.50"></text></g><g><title>is_late_bound_map (711,038 samples, 0.13%)</title><rect x="74.9729%" y="117" width="0.1300%" height="15" fill="rgb(242,17,10)"/><text x="75.2229%" y="127.50"></text></g><g><title>resolve_lifetimes (683,388 samples, 0.12%)</title><rect x="74.9779%" y="101" width="0.1249%" height="15" fill="rgb(242,107,0)"/><text x="75.2279%" y="111.50"></text></g><g><title>named_region_map (1,731,248 samples, 0.32%)</title><rect x="75.1028%" y="117" width="0.3165%" height="15" fill="rgb(251,28,31)"/><text x="75.3528%" y="127.50"></text></g><g><title>resolve_lifetimes (1,658,867 samples, 0.30%)</title><rect x="75.1161%" y="101" width="0.3032%" height="15" fill="rgb(233,223,10)"/><text x="75.3661%" y="111.50"></text></g><g><title>lint_levels (776,019 samples, 0.14%)</title><rect x="75.2775%" y="85" width="0.1419%" height="15" fill="rgb(215,21,27)"/><text x="75.5275%" y="95.50"></text></g><g><title>generics_of (3,020,992 samples, 0.55%)</title><rect x="74.8768%" y="133" width="0.5522%" height="15" fill="rgb(232,23,21)"/><text x="75.1268%" y="143.50"></text></g><g><title>explicit_predicates_of (917,247 samples, 0.17%)</title><rect x="75.5697%" y="101" width="0.1677%" height="15" fill="rgb(244,5,23)"/><text x="75.8197%" y="111.50"></text></g><g><title>predicates_of (2,364,206 samples, 0.43%)</title><rect x="75.4594%" y="133" width="0.4322%" height="15" fill="rgb(226,81,46)"/><text x="75.7094%" y="143.50"></text></g><g><title>predicates_defined_on (2,133,171 samples, 0.39%)</title><rect x="75.5016%" y="117" width="0.3899%" height="15" fill="rgb(247,70,30)"/><text x="75.7516%" y="127.50"></text></g><g><title>inferred_outlives_of (843,410 samples, 0.15%)</title><rect x="75.7374%" y="101" width="0.1542%" height="15" fill="rgb(212,68,19)"/><text x="75.9874%" y="111.50"></text></g><g><title>inferred_outlives_crate (763,329 samples, 0.14%)</title><rect x="75.7520%" y="85" width="0.1395%" height="15" fill="rgb(240,187,13)"/><text x="76.0020%" y="95.50"></text></g><g><title>type_collecting (9,967,300 samples, 1.82%)</title><rect x="74.1412%" y="165" width="1.8220%" height="15" fill="rgb(223,113,26)"/><text x="74.3912%" y="175.50">t..</text></g><g><title>collect_mod_item_types (9,936,150 samples, 1.82%)</title><rect x="74.1469%" y="149" width="1.8163%" height="15" fill="rgb(206,192,2)"/><text x="74.3969%" y="159.50">c..</text></g><g><title>evaluate_obligation (1,129,735 samples, 0.21%)</title><rect x="78.4077%" y="133" width="0.2065%" height="15" fill="rgb(241,108,4)"/><text x="78.6577%" y="143.50"></text></g><g><title>implied_outlives_bounds (848,690 samples, 0.16%)</title><rect x="78.6277%" y="133" width="0.1551%" height="15" fill="rgb(247,173,49)"/><text x="78.8777%" y="143.50"></text></g><g><title>param_env (1,864,036 samples, 0.34%)</title><rect x="78.8422%" y="133" width="0.3407%" height="15" fill="rgb(224,114,35)"/><text x="79.0922%" y="143.50"></text></g><g><title>region_scope_tree (1,945,153 samples, 0.36%)</title><rect x="79.2095%" y="133" width="0.3556%" height="15" fill="rgb(245,159,27)"/><text x="79.4595%" y="143.50"></text></g><g><title>check_impl_item_well_formed (18,845,307 samples, 3.44%)</title><rect x="76.1517%" y="149" width="3.4450%" height="15" fill="rgb(245,172,44)"/><text x="76.4017%" y="159.50">che..</text></g><g><title>evaluate_obligation (1,082,361 samples, 0.20%)</title><rect x="80.2259%" y="133" width="0.1979%" height="15" fill="rgb(236,23,11)"/><text x="80.4759%" y="143.50"></text></g><g><title>param_env (613,941 samples, 0.11%)</title><rect x="80.5249%" y="133" width="0.1122%" height="15" fill="rgb(205,117,38)"/><text x="80.7749%" y="143.50"></text></g><g><title>check_item_well_formed (6,446,205 samples, 1.18%)</title><rect x="79.5967%" y="149" width="1.1784%" height="15" fill="rgb(237,72,25)"/><text x="79.8467%" y="159.50"></text></g><g><title>analysis (441,109,861 samples, 80.64%)</title><rect x="0.1976%" y="197" width="80.6356%" height="15" fill="rgb(244,70,9)"/><text x="0.4476%" y="207.50">analysis</text></g><g><title>type_check_crate (249,833,379 samples, 45.67%)</title><rect x="35.1633%" y="181" width="45.6700%" height="15" fill="rgb(217,125,39)"/><text x="35.4133%" y="191.50">type_check_crate</text></g><g><title>wf_checking (26,611,054 samples, 4.86%)</title><rect x="75.9687%" y="165" width="4.8645%" height="15" fill="rgb(235,36,10)"/><text x="76.2187%" y="175.50">wf_che..</text></g><g><title>metadata_register_crate (3,386,215 samples, 0.62%)</title><rect x="91.4941%" y="149" width="0.6190%" height="15" fill="rgb(251,123,47)"/><text x="91.7441%" y="159.50"></text></g><g><title>metadata_register_crate (1,403,247 samples, 0.26%)</title><rect x="91.8566%" y="133" width="0.2565%" height="15" fill="rgb(221,13,13)"/><text x="92.1066%" y="143.50"></text></g><g><title>macro_expand_crate (61,737,152 samples, 11.29%)</title><rect x="81.0968%" y="181" width="11.2857%" height="15" fill="rgb(238,131,9)"/><text x="81.3468%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (61,723,742 samples, 11.28%)</title><rect x="81.0993%" y="165" width="11.2832%" height="15" fill="rgb(211,50,8)"/><text x="81.3493%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,473,356 samples, 0.27%)</title><rect x="92.1132%" y="149" width="0.2693%" height="15" fill="rgb(245,182,24)"/><text x="92.3632%" y="159.50"></text></g><g><title>late_resolve_crate (7,859,087 samples, 1.44%)</title><rect x="92.4990%" y="165" width="1.4367%" height="15" fill="rgb(242,14,37)"/><text x="92.7490%" y="175.50"></text></g><g><title>configure_and_expand (71,813,342 samples, 13.13%)</title><rect x="80.9135%" y="197" width="13.1276%" height="15" fill="rgb(246,228,12)"/><text x="81.1635%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (8,986,320 samples, 1.64%)</title><rect x="92.3984%" y="181" width="1.6427%" height="15" fill="rgb(213,55,15)"/><text x="92.6484%" y="191.50"></text></g><g><title>drop_ast (867,530 samples, 0.16%)</title><rect x="94.0411%" y="197" width="0.1586%" height="15" fill="rgb(209,9,3)"/><text x="94.2911%" y="207.50"></text></g><g><title>early_lint_checks (1,688,379 samples, 0.31%)</title><rect x="94.2043%" y="197" width="0.3086%" height="15" fill="rgb(230,59,30)"/><text x="94.4543%" y="207.50"></text></g><g><title>free_global_ctxt (7,108,128 samples, 1.30%)</title><rect x="94.5129%" y="197" width="1.2994%" height="15" fill="rgb(209,121,21)"/><text x="94.7629%" y="207.50"></text></g><g><title>generate_crate_metadata (4,665,261 samples, 0.85%)</title><rect x="95.8123%" y="197" width="0.8528%" height="15" fill="rgb(220,109,13)"/><text x="96.0623%" y="207.50"></text></g><g><title>hir_lowering (15,021,896 samples, 2.75%)</title><rect x="96.6651%" y="197" width="2.7460%" height="15" fill="rgb(232,18,1)"/><text x="96.9151%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,923,811 samples, 0.35%)</title><rect x="99.5396%" y="197" width="0.3517%" height="15" fill="rgb(215,41,42)"/><text x="99.7896%" y="207.50"></text></g><g><title>all (547,041,001 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (547,041,001 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>