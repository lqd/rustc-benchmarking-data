<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (467,134 samples, 0.20%)</title><rect x="12.2616%" y="117" width="0.2031%" height="15" fill="rgb(227,0,7)"/><text x="12.5116%" y="127.50"></text></g><g><title>item_attrs (445,476 samples, 0.19%)</title><rect x="12.9663%" y="85" width="0.1937%" height="15" fill="rgb(217,0,24)"/><text x="13.2163%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (430,726 samples, 0.19%)</title><rect x="12.9727%" y="69" width="0.1872%" height="15" fill="rgb(221,193,54)"/><text x="13.2227%" y="79.50"></text></g><g><title>codegen_fn_attrs (650,227 samples, 0.28%)</title><rect x="12.8898%" y="101" width="0.2827%" height="15" fill="rgb(248,212,6)"/><text x="13.1398%" y="111.50"></text></g><g><title>is_copy_raw (279,652 samples, 0.12%)</title><rect x="15.7900%" y="85" width="0.1216%" height="15" fill="rgb(208,68,35)"/><text x="16.0400%" y="95.50"></text></g><g><title>evaluate_obligation (239,121 samples, 0.10%)</title><rect x="15.8076%" y="69" width="0.1040%" height="15" fill="rgb(232,128,0)"/><text x="16.0576%" y="79.50"></text></g><g><title>adt_drop_tys (235,653 samples, 0.10%)</title><rect x="15.9999%" y="69" width="0.1024%" height="15" fill="rgb(207,160,47)"/><text x="16.2499%" y="79.50"></text></g><g><title>is_copy_raw (1,370,003 samples, 0.60%)</title><rect x="16.1024%" y="69" width="0.5956%" height="15" fill="rgb(228,23,34)"/><text x="16.3524%" y="79.50"></text></g><g><title>evaluate_obligation (1,117,201 samples, 0.49%)</title><rect x="16.2123%" y="53" width="0.4857%" height="15" fill="rgb(218,30,26)"/><text x="16.4623%" y="63.50"></text></g><g><title>needs_drop_raw (1,807,398 samples, 0.79%)</title><rect x="15.9129%" y="85" width="0.7857%" height="15" fill="rgb(220,122,19)"/><text x="16.1629%" y="95.50"></text></g><g><title>impl_defaultness (230,723 samples, 0.10%)</title><rect x="16.8941%" y="69" width="0.1003%" height="15" fill="rgb(250,228,42)"/><text x="17.1441%" y="79.50"></text></g><g><title>resolve_instance (1,058,204 samples, 0.46%)</title><rect x="16.6986%" y="85" width="0.4600%" height="15" fill="rgb(240,193,28)"/><text x="16.9486%" y="95.50"></text></g><g><title>thir_body (2,408,674 samples, 1.05%)</title><rect x="17.1873%" y="85" width="1.0471%" height="15" fill="rgb(216,20,37)"/><text x="17.4373%" y="95.50"></text></g><g><title>mir_const (15,559,619 samples, 6.76%)</title><rect x="11.4905%" y="133" width="6.7642%" height="15" fill="rgb(206,188,39)"/><text x="11.7405%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (13,318,898 samples, 5.79%)</title><rect x="12.4646%" y="117" width="5.7901%" height="15" fill="rgb(217,207,13)"/><text x="12.7146%" y="127.50">unsafet..</text></g><g><title>mir_built (11,690,605 samples, 5.08%)</title><rect x="13.1725%" y="101" width="5.0823%" height="15" fill="rgb(231,73,38)"/><text x="13.4225%" y="111.50">mir_bu..</text></g><g><title>mir_const_qualif (242,383 samples, 0.11%)</title><rect x="18.2548%" y="133" width="0.1054%" height="15" fill="rgb(225,20,46)"/><text x="18.5048%" y="143.50"></text></g><g><title>mir_promoted (17,511,474 samples, 7.61%)</title><rect x="10.7475%" y="149" width="7.6128%" height="15" fill="rgb(210,31,41)"/><text x="10.9975%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (791,970 samples, 0.34%)</title><rect x="18.3602%" y="149" width="0.3443%" height="15" fill="rgb(221,200,47)"/><text x="18.6102%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (283,823 samples, 0.12%)</title><rect x="18.7045%" y="149" width="0.1234%" height="15" fill="rgb(226,26,5)"/><text x="18.9545%" y="159.50"></text></g><g><title>type_op_normalize_ty (297,652 samples, 0.13%)</title><rect x="18.8648%" y="149" width="0.1294%" height="15" fill="rgb(249,33,26)"/><text x="19.1148%" y="159.50"></text></g><g><title>normalize_projection_ty (233,671 samples, 0.10%)</title><rect x="18.8926%" y="133" width="0.1016%" height="15" fill="rgb(235,183,28)"/><text x="19.1426%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,814,374 samples, 1.22%)</title><rect x="18.9942%" y="149" width="1.2235%" height="15" fill="rgb(221,5,38)"/><text x="19.2442%" y="159.50"></text></g><g><title>MIR_borrow_checking (45,153,701 samples, 19.63%)</title><rect x="0.5932%" y="181" width="19.6297%" height="15" fill="rgb(247,18,42)"/><text x="0.8432%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (44,853,938 samples, 19.50%)</title><rect x="0.7235%" y="165" width="19.4994%" height="15" fill="rgb(241,131,45)"/><text x="0.9735%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (371,267 samples, 0.16%)</title><rect x="20.3198%" y="181" width="0.1614%" height="15" fill="rgb(249,31,29)"/><text x="20.5698%" y="191.50"></text></g><g><title>should_inherit_track_caller (326,263 samples, 0.14%)</title><rect x="20.7812%" y="133" width="0.1418%" height="15" fill="rgb(225,111,53)"/><text x="21.0312%" y="143.50"></text></g><g><title>codegen_fn_attrs (556,955 samples, 0.24%)</title><rect x="20.6905%" y="149" width="0.2421%" height="15" fill="rgb(238,160,17)"/><text x="20.9405%" y="159.50"></text></g><g><title>check_mod_attrs (1,002,600 samples, 0.44%)</title><rect x="20.4968%" y="165" width="0.4359%" height="15" fill="rgb(214,148,48)"/><text x="20.7468%" y="175.50"></text></g><g><title>check_mod_const_bodies (257,913 samples, 0.11%)</title><rect x="20.9326%" y="165" width="0.1121%" height="15" fill="rgb(232,36,49)"/><text x="21.1826%" y="175.50"></text></g><g><title>lint_levels (302,723 samples, 0.13%)</title><rect x="21.2786%" y="149" width="0.1316%" height="15" fill="rgb(209,103,24)"/><text x="21.5286%" y="159.50"></text></g><g><title>lookup_deprecation_entry (277,952 samples, 0.12%)</title><rect x="21.4102%" y="149" width="0.1208%" height="15" fill="rgb(229,88,8)"/><text x="21.6602%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,093,312 samples, 0.48%)</title><rect x="21.1146%" y="165" width="0.4753%" height="15" fill="rgb(213,181,19)"/><text x="21.3646%" y="175.50"></text></g><g><title>misc_checking_1 (2,653,319 samples, 1.15%)</title><rect x="20.4814%" y="181" width="1.1535%" height="15" fill="rgb(254,191,54)"/><text x="20.7314%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (945,351 samples, 0.41%)</title><rect x="21.6359%" y="165" width="0.4110%" height="15" fill="rgb(241,83,37)"/><text x="21.8859%" y="175.50"></text></g><g><title>check_mod_liveness (736,219 samples, 0.32%)</title><rect x="21.7268%" y="149" width="0.3201%" height="15" fill="rgb(233,36,39)"/><text x="21.9768%" y="159.50"></text></g><g><title>eval_to_const_value_raw (362,474 samples, 0.16%)</title><rect x="22.5605%" y="133" width="0.1576%" height="15" fill="rgb(226,3,54)"/><text x="22.8105%" y="143.50"></text></g><g><title>eval_to_const_value_raw (359,084 samples, 0.16%)</title><rect x="22.5619%" y="117" width="0.1561%" height="15" fill="rgb(245,192,40)"/><text x="22.8119%" y="127.50"></text></g><g><title>eval_to_allocation_raw (352,054 samples, 0.15%)</title><rect x="22.5650%" y="101" width="0.1530%" height="15" fill="rgb(238,167,29)"/><text x="22.8150%" y="111.50"></text></g><g><title>mir_for_ctfe (298,254 samples, 0.13%)</title><rect x="22.5884%" y="85" width="0.1297%" height="15" fill="rgb(232,182,51)"/><text x="22.8384%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (272,463 samples, 0.12%)</title><rect x="22.5996%" y="69" width="0.1184%" height="15" fill="rgb(231,60,39)"/><text x="22.8496%" y="79.50"></text></g><g><title>misc_checking_2 (2,673,660 samples, 1.16%)</title><rect x="21.6349%" y="181" width="1.1623%" height="15" fill="rgb(208,69,12)"/><text x="21.8849%" y="191.50"></text></g><g><title>match_checking (1,726,079 samples, 0.75%)</title><rect x="22.0469%" y="165" width="0.7504%" height="15" fill="rgb(235,93,37)"/><text x="22.2969%" y="175.50"></text></g><g><title>check_match (1,643,368 samples, 0.71%)</title><rect x="22.0828%" y="149" width="0.7144%" height="15" fill="rgb(213,116,39)"/><text x="22.3328%" y="159.50"></text></g><g><title>check_private_in_public (484,725 samples, 0.21%)</title><rect x="22.8016%" y="165" width="0.2107%" height="15" fill="rgb(222,207,29)"/><text x="23.0516%" y="175.50"></text></g><g><title>death_checking (966,421 samples, 0.42%)</title><rect x="23.0124%" y="165" width="0.4201%" height="15" fill="rgb(206,96,30)"/><text x="23.2624%" y="175.50"></text></g><g><title>eval_to_const_value_raw (278,333 samples, 0.12%)</title><rect x="23.9733%" y="133" width="0.1210%" height="15" fill="rgb(218,138,4)"/><text x="24.2233%" y="143.50"></text></g><g><title>eval_to_const_value_raw (271,423 samples, 0.12%)</title><rect x="23.9763%" y="117" width="0.1180%" height="15" fill="rgb(250,191,14)"/><text x="24.2263%" y="127.50"></text></g><g><title>eval_to_allocation_raw (259,183 samples, 0.11%)</title><rect x="23.9816%" y="101" width="0.1127%" height="15" fill="rgb(239,60,40)"/><text x="24.2316%" y="111.50"></text></g><g><title>param_env (641,187 samples, 0.28%)</title><rect x="24.0943%" y="133" width="0.2787%" height="15" fill="rgb(206,27,48)"/><text x="24.3443%" y="143.50"></text></g><g><title>predicates_of (277,823 samples, 0.12%)</title><rect x="24.2522%" y="117" width="0.1208%" height="15" fill="rgb(225,35,8)"/><text x="24.5022%" y="127.50"></text></g><g><title>crate_lints (3,514,320 samples, 1.53%)</title><rect x="23.4332%" y="149" width="1.5278%" height="15" fill="rgb(250,213,24)"/><text x="23.6832%" y="159.50"></text></g><g><title>type_of (1,256,014 samples, 0.55%)</title><rect x="24.4150%" y="133" width="0.5460%" height="15" fill="rgb(247,123,22)"/><text x="24.6650%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (980,173 samples, 0.43%)</title><rect x="24.5349%" y="117" width="0.4261%" height="15" fill="rgb(231,138,38)"/><text x="24.7849%" y="127.50"></text></g><g><title>lint_checking (4,525,841 samples, 1.97%)</title><rect x="23.4325%" y="165" width="1.9675%" height="15" fill="rgb(231,145,46)"/><text x="23.6825%" y="175.50">l..</text></g><g><title>module_lints (1,009,811 samples, 0.44%)</title><rect x="24.9610%" y="149" width="0.4390%" height="15" fill="rgb(251,118,11)"/><text x="25.2110%" y="159.50"></text></g><g><title>lint_mod (998,171 samples, 0.43%)</title><rect x="24.9661%" y="133" width="0.4339%" height="15" fill="rgb(217,147,25)"/><text x="25.2161%" y="143.50"></text></g><g><title>privacy_access_levels (440,355 samples, 0.19%)</title><rect x="25.4000%" y="165" width="0.1914%" height="15" fill="rgb(247,81,37)"/><text x="25.6500%" y="175.50"></text></g><g><title>privacy_checking_modules (1,655,668 samples, 0.72%)</title><rect x="25.5915%" y="165" width="0.7198%" height="15" fill="rgb(209,12,38)"/><text x="25.8415%" y="175.50"></text></g><g><title>check_mod_privacy (1,647,858 samples, 0.72%)</title><rect x="25.5949%" y="149" width="0.7164%" height="15" fill="rgb(227,1,9)"/><text x="25.8449%" y="159.50"></text></g><g><title>misc_checking_3 (8,110,460 samples, 3.53%)</title><rect x="22.7972%" y="181" width="3.5259%" height="15" fill="rgb(248,47,43)"/><text x="23.0472%" y="191.50">mis..</text></g><g><title>adt_destructor (391,124 samples, 0.17%)</title><rect x="26.4278%" y="133" width="0.1700%" height="15" fill="rgb(221,10,30)"/><text x="26.6778%" y="143.50"></text></g><g><title>coherent_trait (386,634 samples, 0.17%)</title><rect x="26.4297%" y="117" width="0.1681%" height="15" fill="rgb(210,229,1)"/><text x="26.6797%" y="127.50"></text></g><g><title>specialization_graph_of (384,634 samples, 0.17%)</title><rect x="26.4306%" y="101" width="0.1672%" height="15" fill="rgb(222,148,37)"/><text x="26.6806%" y="111.50"></text></g><g><title>impl_parent (2,985,959 samples, 1.30%)</title><rect x="28.7271%" y="117" width="1.2981%" height="15" fill="rgb(234,67,33)"/><text x="28.9771%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,646,537 samples, 0.72%)</title><rect x="29.3094%" y="101" width="0.7158%" height="15" fill="rgb(247,98,35)"/><text x="29.5594%" y="111.50"></text></g><g><title>impl_trait_ref (5,841,063 samples, 2.54%)</title><rect x="30.0252%" y="117" width="2.5393%" height="15" fill="rgb(247,138,52)"/><text x="30.2752%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,720,281 samples, 2.05%)</title><rect x="30.5124%" y="101" width="2.0521%" height="15" fill="rgb(213,79,30)"/><text x="30.7624%" y="111.50">m..</text></g><g><title>coherent_trait (15,325,670 samples, 6.66%)</title><rect x="26.4024%" y="149" width="6.6625%" height="15" fill="rgb(246,177,23)"/><text x="26.6524%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (14,720,654 samples, 6.40%)</title><rect x="26.6655%" y="133" width="6.3995%" height="15" fill="rgb(230,62,27)"/><text x="26.9155%" y="143.50">speciali..</text></g><g><title>trait_impls_of (1,149,003 samples, 0.50%)</title><rect x="32.5655%" y="117" width="0.4995%" height="15" fill="rgb(216,154,8)"/><text x="32.8155%" y="127.50"></text></g><g><title>implementations_of_trait (383,385 samples, 0.17%)</title><rect x="32.8983%" y="101" width="0.1667%" height="15" fill="rgb(244,35,45)"/><text x="33.1483%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (257,813 samples, 0.11%)</title><rect x="32.9529%" y="85" width="0.1121%" height="15" fill="rgb(251,115,12)"/><text x="33.2029%" y="95.50"></text></g><g><title>coherence_checking (15,452,221 samples, 6.72%)</title><rect x="26.3909%" y="165" width="6.7176%" height="15" fill="rgb(240,54,50)"/><text x="26.6409%" y="175.50">coherence..</text></g><g><title>associated_item (392,463 samples, 0.17%)</title><rect x="48.2382%" y="101" width="0.1706%" height="15" fill="rgb(233,84,52)"/><text x="48.4882%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (315,443 samples, 0.14%)</title><rect x="48.2717%" y="85" width="0.1371%" height="15" fill="rgb(207,117,47)"/><text x="48.5217%" y="95.50"></text></g><g><title>associated_items (610,455 samples, 0.27%)</title><rect x="48.1618%" y="117" width="0.2654%" height="15" fill="rgb(249,43,39)"/><text x="48.4118%" y="127.50"></text></g><g><title>adt_dtorck_constraint (232,651 samples, 0.10%)</title><rect x="48.6970%" y="85" width="0.1011%" height="15" fill="rgb(209,38,44)"/><text x="48.9470%" y="95.50"></text></g><g><title>adt_dtorck_constraint (434,575 samples, 0.19%)</title><rect x="48.6300%" y="101" width="0.1889%" height="15" fill="rgb(236,212,23)"/><text x="48.8800%" y="111.50"></text></g><g><title>dropck_outlives (828,819 samples, 0.36%)</title><rect x="48.4684%" y="117" width="0.3603%" height="15" fill="rgb(242,79,21)"/><text x="48.7184%" y="127.50"></text></g><g><title>generics_of (564,982 samples, 0.25%)</title><rect x="50.5341%" y="101" width="0.2456%" height="15" fill="rgb(211,96,35)"/><text x="50.7841%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (404,262 samples, 0.18%)</title><rect x="50.6039%" y="85" width="0.1757%" height="15" fill="rgb(253,215,40)"/><text x="50.8539%" y="95.50"></text></g><g><title>impl_trait_ref (797,846 samples, 0.35%)</title><rect x="50.8563%" y="101" width="0.3468%" height="15" fill="rgb(211,81,21)"/><text x="51.1063%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (655,926 samples, 0.29%)</title><rect x="50.9180%" y="85" width="0.2852%" height="15" fill="rgb(208,190,38)"/><text x="51.1680%" y="95.50"></text></g><g><title>predicates_of (838,803 samples, 0.36%)</title><rect x="51.2249%" y="101" width="0.3647%" height="15" fill="rgb(235,213,38)"/><text x="51.4749%" y="111.50"></text></g><g><title>predicates_defined_on (462,636 samples, 0.20%)</title><rect x="51.3885%" y="85" width="0.2011%" height="15" fill="rgb(237,122,38)"/><text x="51.6385%" y="95.50"></text></g><g><title>specializes (2,076,940 samples, 0.90%)</title><rect x="51.5896%" y="101" width="0.9029%" height="15" fill="rgb(244,218,35)"/><text x="51.8396%" y="111.50"></text></g><g><title>param_env (1,214,054 samples, 0.53%)</title><rect x="51.9647%" y="85" width="0.5278%" height="15" fill="rgb(240,68,47)"/><text x="52.2147%" y="95.50"></text></g><g><title>def_span (576,897 samples, 0.25%)</title><rect x="52.2417%" y="69" width="0.2508%" height="15" fill="rgb(210,16,53)"/><text x="52.4917%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (512,017 samples, 0.22%)</title><rect x="52.2699%" y="53" width="0.2226%" height="15" fill="rgb(235,124,12)"/><text x="52.5199%" y="63.50"></text></g><g><title>trait_impls_of (477,435 samples, 0.21%)</title><rect x="52.4985%" y="101" width="0.2076%" height="15" fill="rgb(224,169,11)"/><text x="52.7485%" y="111.50"></text></g><g><title>evaluate_obligation (8,930,191 samples, 3.88%)</title><rect x="48.8287%" y="117" width="3.8822%" height="15" fill="rgb(250,166,2)"/><text x="49.0787%" y="127.50">eval..</text></g><g><title>item_attrs (266,083 samples, 0.12%)</title><rect x="52.9156%" y="117" width="0.1157%" height="15" fill="rgb(242,216,29)"/><text x="53.1656%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (254,842 samples, 0.11%)</title><rect x="52.9205%" y="101" width="0.1108%" height="15" fill="rgb(230,116,27)"/><text x="53.1705%" y="111.50"></text></g><g><title>method_autoderef_steps (618,148 samples, 0.27%)</title><rect x="53.0762%" y="117" width="0.2687%" height="15" fill="rgb(228,99,48)"/><text x="53.3262%" y="127.50"></text></g><g><title>evaluate_obligation (234,742 samples, 0.10%)</title><rect x="53.2429%" y="101" width="0.1020%" height="15" fill="rgb(253,11,6)"/><text x="53.4929%" y="111.50"></text></g><g><title>predicates_of (549,443 samples, 0.24%)</title><rect x="53.3865%" y="117" width="0.2389%" height="15" fill="rgb(247,143,39)"/><text x="53.6365%" y="127.50"></text></g><g><title>predicates_defined_on (371,242 samples, 0.16%)</title><rect x="53.4640%" y="101" width="0.1614%" height="15" fill="rgb(236,97,10)"/><text x="53.7140%" y="111.50"></text></g><g><title>evaluate_obligation (695,606 samples, 0.30%)</title><rect x="57.2835%" y="101" width="0.3024%" height="15" fill="rgb(233,208,19)"/><text x="57.5335%" y="111.50"></text></g><g><title>typeck (10,020,261 samples, 4.36%)</title><rect x="53.6872%" y="117" width="4.3561%" height="15" fill="rgb(216,164,2)"/><text x="53.9372%" y="127.50">typeck</text></g><g><title>item_bodies_checking (57,381,347 samples, 24.95%)</title><rect x="33.1372%" y="165" width="24.9454%" height="15" fill="rgb(220,129,5)"/><text x="33.3872%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,377,997 samples, 24.94%)</title><rect x="33.1387%" y="149" width="24.9440%" height="15" fill="rgb(242,17,10)"/><text x="33.3887%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (57,192,574 samples, 24.86%)</title><rect x="33.2193%" y="133" width="24.8634%" height="15" fill="rgb(242,107,0)"/><text x="33.4693%" y="143.50">typeck</text></g><g><title>evaluate_obligation (571,726 samples, 0.25%)</title><rect x="59.1701%" y="117" width="0.2485%" height="15" fill="rgb(251,28,31)"/><text x="59.4201%" y="127.50"></text></g><g><title>item_types_checking (3,101,354 samples, 1.35%)</title><rect x="58.0827%" y="165" width="1.3483%" height="15" fill="rgb(233,223,10)"/><text x="58.3327%" y="175.50"></text></g><g><title>check_mod_item_types (3,090,544 samples, 1.34%)</title><rect x="58.0874%" y="149" width="1.3436%" height="15" fill="rgb(215,21,27)"/><text x="58.3374%" y="159.50"></text></g><g><title>typeck (857,941 samples, 0.37%)</title><rect x="59.0579%" y="133" width="0.3730%" height="15" fill="rgb(232,23,21)"/><text x="59.3079%" y="143.50"></text></g><g><title>mir_const_qualif (282,983 samples, 0.12%)</title><rect x="59.8324%" y="85" width="0.1230%" height="15" fill="rgb(244,5,23)"/><text x="60.0824%" y="95.50"></text></g><g><title>mir_const (251,463 samples, 0.11%)</title><rect x="59.8461%" y="69" width="0.1093%" height="15" fill="rgb(226,81,46)"/><text x="60.0961%" y="79.50"></text></g><g><title>mir_borrowck (589,507 samples, 0.26%)</title><rect x="60.0588%" y="53" width="0.2563%" height="15" fill="rgb(247,70,30)"/><text x="60.3088%" y="63.50"></text></g><g><title>mir_for_ctfe (828,989 samples, 0.36%)</title><rect x="59.9554%" y="85" width="0.3604%" height="15" fill="rgb(212,68,19)"/><text x="60.2054%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (759,079 samples, 0.33%)</title><rect x="59.9858%" y="69" width="0.3300%" height="15" fill="rgb(240,187,13)"/><text x="60.2358%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,760,070 samples, 0.77%)</title><rect x="59.7183%" y="133" width="0.7652%" height="15" fill="rgb(223,113,26)"/><text x="59.9683%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,739,370 samples, 0.76%)</title><rect x="59.7273%" y="117" width="0.7562%" height="15" fill="rgb(206,192,2)"/><text x="59.9773%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,726,720 samples, 0.75%)</title><rect x="59.7328%" y="101" width="0.7507%" height="15" fill="rgb(241,108,4)"/><text x="59.9828%" y="111.50"></text></g><g><title>typeck (384,364 samples, 0.17%)</title><rect x="60.3164%" y="85" width="0.1671%" height="15" fill="rgb(247,173,49)"/><text x="60.5664%" y="95.50"></text></g><g><title>late_bound_vars_map (317,162 samples, 0.14%)</title><rect x="60.6752%" y="117" width="0.1379%" height="15" fill="rgb(224,114,35)"/><text x="60.9252%" y="127.50"></text></g><g><title>resolve_lifetimes (282,632 samples, 0.12%)</title><rect x="60.6902%" y="101" width="0.1229%" height="15" fill="rgb(245,159,27)"/><text x="60.9402%" y="111.50"></text></g><g><title>fn_sig (785,536 samples, 0.34%)</title><rect x="60.4835%" y="133" width="0.3415%" height="15" fill="rgb(245,172,44)"/><text x="60.7335%" y="143.50"></text></g><g><title>named_region_map (324,914 samples, 0.14%)</title><rect x="60.9510%" y="117" width="0.1413%" height="15" fill="rgb(236,23,11)"/><text x="61.2010%" y="127.50"></text></g><g><title>resolve_lifetimes (286,734 samples, 0.12%)</title><rect x="60.9676%" y="101" width="0.1247%" height="15" fill="rgb(205,117,38)"/><text x="61.2176%" y="111.50"></text></g><g><title>generics_of (653,936 samples, 0.28%)</title><rect x="60.8250%" y="133" width="0.2843%" height="15" fill="rgb(237,72,25)"/><text x="61.0750%" y="143.50"></text></g><g><title>explicit_predicates_of (494,695 samples, 0.22%)</title><rect x="61.3663%" y="101" width="0.2151%" height="15" fill="rgb(244,70,9)"/><text x="61.6163%" y="111.50"></text></g><g><title>predicates_of (1,393,677 samples, 0.61%)</title><rect x="61.2290%" y="133" width="0.6059%" height="15" fill="rgb(217,125,39)"/><text x="61.4790%" y="143.50"></text></g><g><title>predicates_defined_on (1,280,465 samples, 0.56%)</title><rect x="61.2782%" y="117" width="0.5567%" height="15" fill="rgb(235,36,10)"/><text x="61.5282%" y="127.50"></text></g><g><title>inferred_outlives_of (583,166 samples, 0.25%)</title><rect x="61.5814%" y="101" width="0.2535%" height="15" fill="rgb(251,123,47)"/><text x="61.8314%" y="111.50"></text></g><g><title>inferred_outlives_crate (536,026 samples, 0.23%)</title><rect x="61.6018%" y="85" width="0.2330%" height="15" fill="rgb(221,13,13)"/><text x="61.8518%" y="95.50"></text></g><g><title>type_of (277,363 samples, 0.12%)</title><rect x="61.7143%" y="69" width="0.1206%" height="15" fill="rgb(238,131,9)"/><text x="61.9643%" y="79.50"></text></g><g><title>type_collecting (5,818,135 samples, 2.53%)</title><rect x="59.4338%" y="165" width="2.5293%" height="15" fill="rgb(211,50,8)"/><text x="59.6838%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (5,797,804 samples, 2.52%)</title><rect x="59.4426%" y="149" width="2.5205%" height="15" fill="rgb(245,182,24)"/><text x="59.6926%" y="159.50">co..</text></g><g><title>type_of (291,886 samples, 0.13%)</title><rect x="61.8362%" y="133" width="0.1269%" height="15" fill="rgb(242,14,37)"/><text x="62.0862%" y="143.50"></text></g><g><title>adt_sized_constraint (387,254 samples, 0.17%)</title><rect x="64.4081%" y="101" width="0.1684%" height="15" fill="rgb(246,228,12)"/><text x="64.6581%" y="111.50"></text></g><g><title>adt_def (386,074 samples, 0.17%)</title><rect x="64.4087%" y="85" width="0.1678%" height="15" fill="rgb(213,55,15)"/><text x="64.6587%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (385,794 samples, 0.17%)</title><rect x="64.4088%" y="69" width="0.1677%" height="15" fill="rgb(209,9,3)"/><text x="64.6588%" y="79.50"></text></g><g><title>item_attrs (383,434 samples, 0.17%)</title><rect x="64.4098%" y="53" width="0.1667%" height="15" fill="rgb(230,59,30)"/><text x="64.6598%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (383,014 samples, 0.17%)</title><rect x="64.4100%" y="37" width="0.1665%" height="15" fill="rgb(209,121,21)"/><text x="64.6600%" y="47.50"></text></g><g><title>adt_sized_constraint (470,205 samples, 0.20%)</title><rect x="64.3731%" y="117" width="0.2044%" height="15" fill="rgb(220,109,13)"/><text x="64.6231%" y="127.50"></text></g><g><title>evaluate_obligation (1,517,045 samples, 0.66%)</title><rect x="63.9653%" y="133" width="0.6595%" height="15" fill="rgb(232,18,1)"/><text x="64.2153%" y="143.50"></text></g><g><title>implied_outlives_bounds (441,530 samples, 0.19%)</title><rect x="64.6484%" y="133" width="0.1919%" height="15" fill="rgb(215,41,42)"/><text x="64.8984%" y="143.50"></text></g><g><title>param_env (604,876 samples, 0.26%)</title><rect x="64.8466%" y="133" width="0.2630%" height="15" fill="rgb(224,123,36)"/><text x="65.0966%" y="143.50"></text></g><g><title>region_scope_tree (948,267 samples, 0.41%)</title><rect x="65.1299%" y="133" width="0.4122%" height="15" fill="rgb(240,125,3)"/><text x="65.3799%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,804,001 samples, 3.39%)</title><rect x="62.1606%" y="149" width="3.3926%" height="15" fill="rgb(205,98,50)"/><text x="62.4106%" y="159.50">che..</text></g><g><title>adt_sized_constraint (293,935 samples, 0.13%)</title><rect x="66.6644%" y="117" width="0.1278%" height="15" fill="rgb(205,185,37)"/><text x="66.9144%" y="127.50"></text></g><g><title>evaluate_obligation (748,779 samples, 0.33%)</title><rect x="66.4848%" y="133" width="0.3255%" height="15" fill="rgb(238,207,15)"/><text x="66.7348%" y="143.50"></text></g><g><title>param_env (490,594 samples, 0.21%)</title><rect x="66.8768%" y="133" width="0.2133%" height="15" fill="rgb(213,199,42)"/><text x="67.1268%" y="143.50"></text></g><g><title>check_item_well_formed (3,877,847 samples, 1.69%)</title><rect x="65.5532%" y="149" width="1.6858%" height="15" fill="rgb(235,201,11)"/><text x="65.8032%" y="159.50"></text></g><g><title>analysis (153,908,759 samples, 66.91%)</title><rect x="0.3537%" y="197" width="66.9088%" height="15" fill="rgb(207,46,11)"/><text x="0.6037%" y="207.50">analysis</text></g><g><title>type_check_crate (94,171,906 samples, 40.94%)</title><rect x="26.3231%" y="181" width="40.9394%" height="15" fill="rgb(241,35,35)"/><text x="26.5731%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,178,486 samples, 5.29%)</title><rect x="61.9681%" y="165" width="5.2944%" height="15" fill="rgb(243,32,47)"/><text x="62.2181%" y="175.50">wf_che..</text></g><g><title>codegen_crate (623,637 samples, 0.27%)</title><rect x="67.2671%" y="197" width="0.2711%" height="15" fill="rgb(247,202,23)"/><text x="67.5171%" y="207.50"></text></g><g><title>AST_validation (235,813 samples, 0.10%)</title><rect x="67.6416%" y="181" width="0.1025%" height="15" fill="rgb(219,102,11)"/><text x="67.8916%" y="191.50"></text></g><g><title>metadata_load_macro (420,235 samples, 0.18%)</title><rect x="84.7328%" y="149" width="0.1827%" height="15" fill="rgb(243,110,44)"/><text x="84.9828%" y="159.50"></text></g><g><title>metadata_register_crate (12,211,854 samples, 5.31%)</title><rect x="84.9155%" y="149" width="5.3089%" height="15" fill="rgb(222,74,54)"/><text x="85.1655%" y="159.50">metada..</text></g><g><title>metadata_register_crate (9,324,414 samples, 4.05%)</title><rect x="86.1707%" y="133" width="4.0536%" height="15" fill="rgb(216,99,12)"/><text x="86.4207%" y="143.50">meta..</text></g><g><title>macro_expand_crate (52,226,310 samples, 22.70%)</title><rect x="67.8466%" y="181" width="22.7044%" height="15" fill="rgb(226,22,26)"/><text x="68.0966%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (52,203,830 samples, 22.69%)</title><rect x="67.8564%" y="165" width="22.6946%" height="15" fill="rgb(217,163,10)"/><text x="68.1064%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (751,408 samples, 0.33%)</title><rect x="90.2243%" y="149" width="0.3267%" height="15" fill="rgb(213,25,53)"/><text x="90.4743%" y="159.50"></text></g><g><title>late_resolve_crate (3,298,187 samples, 1.43%)</title><rect x="90.7711%" y="165" width="1.4338%" height="15" fill="rgb(252,105,26)"/><text x="91.0211%" y="175.50"></text></g><g><title>configure_and_expand (56,951,933 samples, 24.76%)</title><rect x="67.5383%" y="197" width="24.7587%" height="15" fill="rgb(220,39,43)"/><text x="67.7883%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,880,323 samples, 1.69%)</title><rect x="90.6101%" y="181" width="1.6869%" height="15" fill="rgb(229,68,48)"/><text x="90.8601%" y="191.50"></text></g><g><title>drop_ast (343,184 samples, 0.15%)</title><rect x="92.2970%" y="197" width="0.1492%" height="15" fill="rgb(252,8,32)"/><text x="92.5470%" y="207.50"></text></g><g><title>early_lint_checks (770,938 samples, 0.34%)</title><rect x="92.4549%" y="197" width="0.3352%" height="15" fill="rgb(223,20,43)"/><text x="92.7049%" y="207.50"></text></g><g><title>free_global_ctxt (5,453,260 samples, 2.37%)</title><rect x="92.7901%" y="197" width="2.3707%" height="15" fill="rgb(229,81,49)"/><text x="93.0401%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (2,201,734 samples, 0.96%)</title><rect x="95.1608%" y="197" width="0.9572%" height="15" fill="rgb(236,28,36)"/><text x="95.4108%" y="207.50"></text></g><g><title>hir_lowering (5,689,064 samples, 2.47%)</title><rect x="96.1179%" y="197" width="2.4732%" height="15" fill="rgb(249,185,26)"/><text x="96.3679%" y="207.50">hi..</text></g><g><title>parse_crate (348,223 samples, 0.15%)</title><rect x="98.6278%" y="197" width="0.1514%" height="15" fill="rgb(249,174,33)"/><text x="98.8778%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,099,734 samples, 0.91%)</title><rect x="98.8659%" y="197" width="0.9128%" height="15" fill="rgb(233,201,37)"/><text x="99.1159%" y="207.50"></text></g><g><title>all (230,027,554 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (230,027,554 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (408,324 samples, 0.18%)</title><rect x="99.8225%" y="197" width="0.1775%" height="15" fill="rgb(230,49,44)"/><text x="100.0725%" y="207.50"></text></g></svg></svg>