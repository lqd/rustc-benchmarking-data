<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (50,681 samples, 0.13%)</title><rect x="5.7525%" y="101" width="0.1309%" height="15" fill="rgb(227,0,7)"/><text x="6.0025%" y="111.50"></text></g><g><title>is_copy_raw (60,620 samples, 0.16%)</title><rect x="6.4354%" y="53" width="0.1566%" height="15" fill="rgb(217,0,24)"/><text x="6.6854%" y="63.50"></text></g><g><title>evaluate_obligation (56,930 samples, 0.15%)</title><rect x="6.4449%" y="37" width="0.1471%" height="15" fill="rgb(221,193,54)"/><text x="6.6949%" y="47.50"></text></g><g><title>adt_drop_tys (75,020 samples, 0.19%)</title><rect x="6.4208%" y="69" width="0.1938%" height="15" fill="rgb(248,212,6)"/><text x="6.6708%" y="79.50"></text></g><g><title>needs_drop_raw (170,083 samples, 0.44%)</title><rect x="6.3880%" y="85" width="0.4394%" height="15" fill="rgb(208,68,35)"/><text x="6.6380%" y="95.50"></text></g><g><title>is_copy_raw (82,372 samples, 0.21%)</title><rect x="6.6146%" y="69" width="0.2128%" height="15" fill="rgb(232,128,0)"/><text x="6.8646%" y="79.50"></text></g><g><title>evaluate_obligation (72,691 samples, 0.19%)</title><rect x="6.6396%" y="53" width="0.1878%" height="15" fill="rgb(207,160,47)"/><text x="6.8896%" y="63.50"></text></g><g><title>resolve_instance (58,801 samples, 0.15%)</title><rect x="6.8274%" y="85" width="0.1519%" height="15" fill="rgb(228,23,34)"/><text x="7.0774%" y="95.50"></text></g><g><title>thir_body (68,201 samples, 0.18%)</title><rect x="6.9860%" y="85" width="0.1762%" height="15" fill="rgb(218,30,26)"/><text x="7.2360%" y="95.50"></text></g><g><title>mir_const (768,289 samples, 1.98%)</title><rect x="5.1918%" y="133" width="1.9848%" height="15" fill="rgb(220,122,19)"/><text x="5.4418%" y="143.50">m..</text></g><g><title>unsafety_check_result (617,787 samples, 1.60%)</title><rect x="5.5806%" y="117" width="1.5960%" height="15" fill="rgb(250,228,42)"/><text x="5.8306%" y="127.50"></text></g><g><title>mir_built (500,576 samples, 1.29%)</title><rect x="5.8834%" y="101" width="1.2932%" height="15" fill="rgb(240,193,28)"/><text x="6.1334%" y="111.50"></text></g><g><title>mir_promoted (909,280 samples, 2.35%)</title><rect x="4.8468%" y="149" width="2.3491%" height="15" fill="rgb(216,20,37)"/><text x="5.0968%" y="159.50">m..</text></g><g><title>type_op_ascribe_user_type (89,151 samples, 0.23%)</title><rect x="7.1959%" y="149" width="0.2303%" height="15" fill="rgb(206,188,39)"/><text x="7.4459%" y="159.50"></text></g><g><title>type_op_prove_predicate (297,974 samples, 0.77%)</title><rect x="7.5825%" y="149" width="0.7698%" height="15" fill="rgb(217,207,13)"/><text x="7.8325%" y="159.50"></text></g><g><title>MIR_borrow_checking (2,637,280 samples, 6.81%)</title><rect x="1.5467%" y="181" width="6.8133%" height="15" fill="rgb(231,73,38)"/><text x="1.7967%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (2,628,910 samples, 6.79%)</title><rect x="1.5683%" y="165" width="6.7917%" height="15" fill="rgb(225,20,46)"/><text x="1.8183%" y="175.50">mir_borro..</text></g><g><title>hir_module_items (82,991 samples, 0.21%)</title><rect x="8.3684%" y="181" width="0.2144%" height="15" fill="rgb(210,31,41)"/><text x="8.6184%" y="191.50"></text></g><g><title>get_lang_items (53,981 samples, 0.14%)</title><rect x="8.8824%" y="133" width="0.1395%" height="15" fill="rgb(221,200,47)"/><text x="9.1324%" y="143.50"></text></g><g><title>codegen_fn_attrs (47,980 samples, 0.12%)</title><rect x="9.1593%" y="117" width="0.1240%" height="15" fill="rgb(226,26,5)"/><text x="9.4093%" y="127.50"></text></g><g><title>should_inherit_track_caller (102,861 samples, 0.27%)</title><rect x="9.0219%" y="133" width="0.2657%" height="15" fill="rgb(249,33,26)"/><text x="9.2719%" y="143.50"></text></g><g><title>codegen_fn_attrs (218,402 samples, 0.56%)</title><rect x="8.7668%" y="149" width="0.5642%" height="15" fill="rgb(235,183,28)"/><text x="9.0168%" y="159.50"></text></g><g><title>check_mod_attrs (272,594 samples, 0.70%)</title><rect x="8.6275%" y="165" width="0.7042%" height="15" fill="rgb(221,5,38)"/><text x="8.8775%" y="175.50"></text></g><g><title>lookup_deprecation_entry (49,090 samples, 0.13%)</title><rect x="9.5422%" y="149" width="0.1268%" height="15" fill="rgb(247,18,42)"/><text x="9.7922%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (134,291 samples, 0.35%)</title><rect x="9.4208%" y="165" width="0.3469%" height="15" fill="rgb(241,131,45)"/><text x="9.6708%" y="175.50"></text></g><g><title>misc_checking_1 (481,835 samples, 1.24%)</title><rect x="8.5841%" y="181" width="1.2448%" height="15" fill="rgb(249,31,29)"/><text x="8.8341%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (61,461 samples, 0.16%)</title><rect x="9.8324%" y="165" width="0.1588%" height="15" fill="rgb(225,111,53)"/><text x="10.0824%" y="175.50"></text></g><g><title>check_mod_liveness (47,121 samples, 0.12%)</title><rect x="9.8694%" y="149" width="0.1217%" height="15" fill="rgb(238,160,17)"/><text x="10.1194%" y="159.50"></text></g><g><title>misc_checking_2 (137,911 samples, 0.36%)</title><rect x="9.8289%" y="181" width="0.3563%" height="15" fill="rgb(214,148,48)"/><text x="10.0789%" y="191.50"></text></g><g><title>match_checking (75,100 samples, 0.19%)</title><rect x="9.9912%" y="165" width="0.1940%" height="15" fill="rgb(232,36,49)"/><text x="10.2412%" y="175.50"></text></g><g><title>check_match (71,690 samples, 0.19%)</title><rect x="10.0000%" y="149" width="0.1852%" height="15" fill="rgb(209,103,24)"/><text x="10.2500%" y="159.50"></text></g><g><title>check_private_in_public (41,351 samples, 0.11%)</title><rect x="10.2036%" y="165" width="0.1068%" height="15" fill="rgb(229,88,8)"/><text x="10.4536%" y="175.50"></text></g><g><title>death_checking (67,081 samples, 0.17%)</title><rect x="10.3104%" y="165" width="0.1733%" height="15" fill="rgb(213,181,19)"/><text x="10.5604%" y="175.50"></text></g><g><title>param_env (49,651 samples, 0.13%)</title><rect x="12.1781%" y="133" width="0.1283%" height="15" fill="rgb(254,191,54)"/><text x="12.4281%" y="143.50"></text></g><g><title>crate_lints (1,746,369 samples, 4.51%)</title><rect x="10.4874%" y="149" width="4.5117%" height="15" fill="rgb(241,83,37)"/><text x="10.7374%" y="159.50">crate..</text></g><g><title>type_of (1,042,272 samples, 2.69%)</title><rect x="12.3064%" y="133" width="2.6927%" height="15" fill="rgb(233,36,39)"/><text x="12.5564%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (808,400 samples, 2.09%)</title><rect x="12.9106%" y="117" width="2.0885%" height="15" fill="rgb(226,3,54)"/><text x="13.1606%" y="127.50">m..</text></g><g><title>lint_checking (1,786,820 samples, 4.62%)</title><rect x="10.4837%" y="165" width="4.6162%" height="15" fill="rgb(245,192,40)"/><text x="10.7337%" y="175.50">lint_..</text></g><g><title>module_lints (39,041 samples, 0.10%)</title><rect x="14.9990%" y="149" width="0.1009%" height="15" fill="rgb(238,167,29)"/><text x="15.2490%" y="159.50"></text></g><g><title>privacy_access_levels (61,860 samples, 0.16%)</title><rect x="15.0999%" y="165" width="0.1598%" height="15" fill="rgb(232,182,51)"/><text x="15.3499%" y="175.50"></text></g><g><title>privacy_checking_modules (101,931 samples, 0.26%)</title><rect x="15.2597%" y="165" width="0.2633%" height="15" fill="rgb(231,60,39)"/><text x="15.5097%" y="175.50"></text></g><g><title>check_mod_privacy (100,401 samples, 0.26%)</title><rect x="15.2637%" y="149" width="0.2594%" height="15" fill="rgb(208,69,12)"/><text x="15.5137%" y="159.50"></text></g><g><title>misc_checking_3 (2,078,913 samples, 5.37%)</title><rect x="10.1852%" y="181" width="5.3708%" height="15" fill="rgb(235,93,37)"/><text x="10.4352%" y="191.50">misc_ch..</text></g><g><title>impl_parent (56,260 samples, 0.15%)</title><rect x="16.0820%" y="85" width="0.1453%" height="15" fill="rgb(213,116,39)"/><text x="16.3320%" y="95.50"></text></g><g><title>impl_trait_ref (147,041 samples, 0.38%)</title><rect x="16.2273%" y="85" width="0.3799%" height="15" fill="rgb(222,207,29)"/><text x="16.4773%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (127,850 samples, 0.33%)</title><rect x="16.2769%" y="69" width="0.3303%" height="15" fill="rgb(206,96,30)"/><text x="16.5269%" y="79.50"></text></g><g><title>adt_destructor (321,813 samples, 0.83%)</title><rect x="15.8577%" y="133" width="0.8314%" height="15" fill="rgb(218,138,4)"/><text x="16.1077%" y="143.50"></text></g><g><title>coherent_trait (314,013 samples, 0.81%)</title><rect x="15.8779%" y="117" width="0.8112%" height="15" fill="rgb(250,191,14)"/><text x="16.1279%" y="127.50"></text></g><g><title>specialization_graph_of (312,703 samples, 0.81%)</title><rect x="15.8813%" y="101" width="0.8079%" height="15" fill="rgb(239,60,40)"/><text x="16.1313%" y="111.50"></text></g><g><title>is_copy_raw (69,551 samples, 0.18%)</title><rect x="16.6891%" y="133" width="0.1797%" height="15" fill="rgb(206,27,48)"/><text x="16.9391%" y="143.50"></text></g><g><title>evaluate_obligation (51,481 samples, 0.13%)</title><rect x="16.7358%" y="117" width="0.1330%" height="15" fill="rgb(225,35,8)"/><text x="16.9858%" y="127.50"></text></g><g><title>param_env (105,891 samples, 0.27%)</title><rect x="16.8688%" y="133" width="0.2736%" height="15" fill="rgb(250,213,24)"/><text x="17.1188%" y="143.50"></text></g><g><title>impl_parent (2,086,574 samples, 5.39%)</title><rect x="26.7174%" y="117" width="5.3906%" height="15" fill="rgb(247,123,22)"/><text x="26.9674%" y="127.50">impl_pa..</text></g><g><title>metadata_decode_entry_impl_parent (1,257,035 samples, 3.25%)</title><rect x="28.8605%" y="101" width="3.2475%" height="15" fill="rgb(231,138,38)"/><text x="29.1105%" y="111.50">met..</text></g><g><title>impl_trait_ref (4,732,213 samples, 12.23%)</title><rect x="32.1080%" y="117" width="12.2254%" height="15" fill="rgb(231,145,46)"/><text x="32.3580%" y="127.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,890,660 samples, 10.05%)</title><rect x="34.2821%" y="101" width="10.0513%" height="15" fill="rgb(251,118,11)"/><text x="34.5321%" y="111.50">metadata_decode..</text></g><g><title>specialization_graph_of (11,238,257 samples, 29.03%)</title><rect x="17.1423%" y="133" width="29.0334%" height="15" fill="rgb(217,147,25)"/><text x="17.3923%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (711,470 samples, 1.84%)</title><rect x="44.3378%" y="117" width="1.8380%" height="15" fill="rgb(247,81,37)"/><text x="44.5878%" y="127.50">t..</text></g><g><title>implementations_of_trait (172,681 samples, 0.45%)</title><rect x="45.7297%" y="101" width="0.4461%" height="15" fill="rgb(209,12,38)"/><text x="45.9797%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (144,311 samples, 0.37%)</title><rect x="45.8030%" y="85" width="0.3728%" height="15" fill="rgb(227,1,9)"/><text x="46.0530%" y="95.50"></text></g><g><title>coherent_trait (11,818,033 samples, 30.53%)</title><rect x="15.6453%" y="149" width="30.5313%" height="15" fill="rgb(248,47,43)"/><text x="15.8953%" y="159.50">coherent_trait</text></g><g><title>coherence_checking (11,863,123 samples, 30.65%)</title><rect x="15.6048%" y="165" width="30.6478%" height="15" fill="rgb(221,10,30)"/><text x="15.8548%" y="175.50">coherence_checking</text></g><g><title>associated_items (56,640 samples, 0.15%)</title><rect x="50.5220%" y="117" width="0.1463%" height="15" fill="rgb(210,229,1)"/><text x="50.7720%" y="127.50"></text></g><g><title>adt_dtorck_constraint (73,710 samples, 0.19%)</title><rect x="50.8127%" y="101" width="0.1904%" height="15" fill="rgb(222,148,37)"/><text x="51.0627%" y="111.50"></text></g><g><title>dropck_outlives (133,701 samples, 0.35%)</title><rect x="50.6883%" y="117" width="0.3454%" height="15" fill="rgb(234,67,33)"/><text x="50.9383%" y="127.50"></text></g><g><title>evaluate_obligation (109,122 samples, 0.28%)</title><rect x="51.0337%" y="117" width="0.2819%" height="15" fill="rgb(247,98,35)"/><text x="51.2837%" y="127.50"></text></g><g><title>method_autoderef_steps (73,922 samples, 0.19%)</title><rect x="51.5615%" y="117" width="0.1910%" height="15" fill="rgb(247,138,52)"/><text x="51.8115%" y="127.50"></text></g><g><title>evaluate_obligation (45,312 samples, 0.12%)</title><rect x="51.6354%" y="101" width="0.1171%" height="15" fill="rgb(213,79,30)"/><text x="51.8854%" y="111.50"></text></g><g><title>evaluate_obligation (64,350 samples, 0.17%)</title><rect x="51.8419%" y="101" width="0.1662%" height="15" fill="rgb(246,177,23)"/><text x="52.0919%" y="111.50"></text></g><g><title>object_safety_violations (147,512 samples, 0.38%)</title><rect x="51.7525%" y="117" width="0.3811%" height="15" fill="rgb(230,62,27)"/><text x="52.0025%" y="127.50"></text></g><g><title>explicit_predicates_of (69,801 samples, 0.18%)</title><rect x="52.2356%" y="85" width="0.1803%" height="15" fill="rgb(216,154,8)"/><text x="52.4856%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (65,701 samples, 0.17%)</title><rect x="52.2462%" y="69" width="0.1697%" height="15" fill="rgb(244,35,45)"/><text x="52.4962%" y="79.50"></text></g><g><title>predicates_of (105,601 samples, 0.27%)</title><rect x="52.1663%" y="117" width="0.2728%" height="15" fill="rgb(251,115,12)"/><text x="52.4163%" y="127.50"></text></g><g><title>predicates_defined_on (90,511 samples, 0.23%)</title><rect x="52.2053%" y="101" width="0.2338%" height="15" fill="rgb(240,54,50)"/><text x="52.4553%" y="111.50"></text></g><g><title>type_of (49,020 samples, 0.13%)</title><rect x="52.4906%" y="117" width="0.1266%" height="15" fill="rgb(233,84,52)"/><text x="52.7406%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (45,030 samples, 0.12%)</title><rect x="52.5009%" y="101" width="0.1163%" height="15" fill="rgb(207,117,47)"/><text x="52.7509%" y="111.50"></text></g><g><title>item_bodies_checking (2,461,627 samples, 6.36%)</title><rect x="46.2754%" y="165" width="6.3595%" height="15" fill="rgb(249,43,39)"/><text x="46.5254%" y="175.50">item_bod..</text></g><g><title>typeck_item_bodies (2,459,827 samples, 6.35%)</title><rect x="46.2801%" y="149" width="6.3548%" height="15" fill="rgb(209,38,44)"/><text x="46.5301%" y="159.50">typeck_i..</text></g><g><title>typeck (2,451,427 samples, 6.33%)</title><rect x="46.3018%" y="133" width="6.3331%" height="15" fill="rgb(236,212,23)"/><text x="46.5518%" y="143.50">typeck</text></g><g><title>item_types_checking (208,503 samples, 0.54%)</title><rect x="52.6349%" y="165" width="0.5387%" height="15" fill="rgb(242,79,21)"/><text x="52.8849%" y="175.50"></text></g><g><title>check_mod_item_types (206,383 samples, 0.53%)</title><rect x="52.6404%" y="149" width="0.5332%" height="15" fill="rgb(211,96,35)"/><text x="52.8904%" y="159.50"></text></g><g><title>fn_sig (79,851 samples, 0.21%)</title><rect x="53.3954%" y="133" width="0.2063%" height="15" fill="rgb(253,215,40)"/><text x="53.6454%" y="143.50"></text></g><g><title>generics_of (48,800 samples, 0.13%)</title><rect x="53.6017%" y="133" width="0.1261%" height="15" fill="rgb(211,81,21)"/><text x="53.8517%" y="143.50"></text></g><g><title>item_bounds (113,642 samples, 0.29%)</title><rect x="53.8070%" y="133" width="0.2936%" height="15" fill="rgb(208,190,38)"/><text x="54.0570%" y="143.50"></text></g><g><title>late_bound_vars_map (90,832 samples, 0.23%)</title><rect x="54.3374%" y="85" width="0.2347%" height="15" fill="rgb(235,213,38)"/><text x="54.5874%" y="95.50"></text></g><g><title>resolve_lifetimes (84,132 samples, 0.22%)</title><rect x="54.3547%" y="69" width="0.2174%" height="15" fill="rgb(237,122,38)"/><text x="54.6047%" y="79.50"></text></g><g><title>explicit_predicates_of (171,803 samples, 0.44%)</title><rect x="54.1766%" y="101" width="0.4438%" height="15" fill="rgb(244,218,35)"/><text x="54.4266%" y="111.50"></text></g><g><title>predicates_of (314,635 samples, 0.81%)</title><rect x="54.1006%" y="133" width="0.8128%" height="15" fill="rgb(240,68,47)"/><text x="54.3506%" y="143.50"></text></g><g><title>predicates_defined_on (304,485 samples, 0.79%)</title><rect x="54.1268%" y="117" width="0.7866%" height="15" fill="rgb(210,16,53)"/><text x="54.3768%" y="127.50"></text></g><g><title>inferred_outlives_of (113,412 samples, 0.29%)</title><rect x="54.6204%" y="101" width="0.2930%" height="15" fill="rgb(235,124,12)"/><text x="54.8704%" y="111.50"></text></g><g><title>inferred_outlives_crate (102,632 samples, 0.27%)</title><rect x="54.6483%" y="85" width="0.2651%" height="15" fill="rgb(224,169,11)"/><text x="54.8983%" y="95.50"></text></g><g><title>type_of (69,580 samples, 0.18%)</title><rect x="54.7336%" y="69" width="0.1798%" height="15" fill="rgb(250,166,2)"/><text x="54.9836%" y="79.50"></text></g><g><title>super_predicates_of (110,231 samples, 0.28%)</title><rect x="54.9134%" y="133" width="0.2848%" height="15" fill="rgb(242,216,29)"/><text x="55.1634%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (100,871 samples, 0.26%)</title><rect x="54.9376%" y="117" width="0.2606%" height="15" fill="rgb(230,116,27)"/><text x="55.1876%" y="127.50"></text></g><g><title>type_collecting (848,240 samples, 2.19%)</title><rect x="53.1760%" y="165" width="2.1914%" height="15" fill="rgb(228,99,48)"/><text x="53.4260%" y="175.50">t..</text></g><g><title>collect_mod_item_types (841,560 samples, 2.17%)</title><rect x="53.1932%" y="149" width="2.1741%" height="15" fill="rgb(253,11,6)"/><text x="53.4432%" y="159.50">c..</text></g><g><title>type_of (59,300 samples, 0.15%)</title><rect x="55.2142%" y="133" width="0.1532%" height="15" fill="rgb(247,143,39)"/><text x="55.4642%" y="143.50"></text></g><g><title>evaluate_obligation (107,552 samples, 0.28%)</title><rect x="56.0254%" y="133" width="0.2779%" height="15" fill="rgb(236,97,10)"/><text x="56.2754%" y="143.50"></text></g><g><title>check_impl_item_well_formed (418,294 samples, 1.08%)</title><rect x="55.4667%" y="149" width="1.0806%" height="15" fill="rgb(233,208,19)"/><text x="55.7167%" y="159.50"></text></g><g><title>param_env (65,100 samples, 0.17%)</title><rect x="57.6645%" y="133" width="0.1682%" height="15" fill="rgb(216,164,2)"/><text x="57.9145%" y="143.50"></text></g><g><title>predicates_of (45,091 samples, 0.12%)</title><rect x="57.8327%" y="133" width="0.1165%" height="15" fill="rgb(220,129,5)"/><text x="58.0827%" y="143.50"></text></g><g><title>check_item_well_formed (590,508 samples, 1.53%)</title><rect x="56.5473%" y="149" width="1.5255%" height="15" fill="rgb(242,17,10)"/><text x="56.7973%" y="159.50"></text></g><g><title>implied_outlives_bounds (56,220 samples, 0.15%)</title><rect x="58.6311%" y="133" width="0.1452%" height="15" fill="rgb(242,107,0)"/><text x="58.8811%" y="143.50"></text></g><g><title>analysis (22,319,180 samples, 57.66%)</title><rect x="1.2792%" y="197" width="57.6604%" height="15" fill="rgb(251,28,31)"/><text x="1.5292%" y="207.50">analysis</text></g><g><title>type_check_crate (16,792,929 samples, 43.38%)</title><rect x="15.5560%" y="181" width="43.3837%" height="15" fill="rgb(233,223,10)"/><text x="15.8060%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,382,225 samples, 3.57%)</title><rect x="55.3687%" y="165" width="3.5709%" height="15" fill="rgb(215,21,27)"/><text x="55.6187%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (335,493 samples, 0.87%)</title><rect x="58.0729%" y="149" width="0.8667%" height="15" fill="rgb(232,23,21)"/><text x="58.3229%" y="159.50"></text></g><g><title>codegen_crate (391,175 samples, 1.01%)</title><rect x="58.9580%" y="197" width="1.0106%" height="15" fill="rgb(244,5,23)"/><text x="59.2080%" y="207.50"></text></g><g><title>AST_validation (41,010 samples, 0.11%)</title><rect x="60.3183%" y="181" width="0.1059%" height="15" fill="rgb(226,81,46)"/><text x="60.5683%" y="191.50"></text></g><g><title>crate_injection (51,160 samples, 0.13%)</title><rect x="60.4657%" y="181" width="0.1322%" height="15" fill="rgb(247,70,30)"/><text x="60.7157%" y="191.50"></text></g><g><title>metadata_load_macro (57,670 samples, 0.15%)</title><rect x="72.3430%" y="149" width="0.1490%" height="15" fill="rgb(212,68,19)"/><text x="72.5930%" y="159.50"></text></g><g><title>macro_expand_crate (9,396,116 samples, 24.27%)</title><rect x="60.5979%" y="181" width="24.2744%" height="15" fill="rgb(240,187,13)"/><text x="60.8479%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (9,385,446 samples, 24.25%)</title><rect x="60.6254%" y="165" width="24.2468%" height="15" fill="rgb(223,113,26)"/><text x="60.8754%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (4,792,164 samples, 12.38%)</title><rect x="72.4919%" y="149" width="12.3803%" height="15" fill="rgb(206,192,2)"/><text x="72.7419%" y="159.50">metadata_register_..</text></g><g><title>metadata_register_crate (469,607 samples, 1.21%)</title><rect x="83.6590%" y="133" width="1.2132%" height="15" fill="rgb(241,108,4)"/><text x="83.9090%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (54,431 samples, 0.14%)</title><rect x="84.8808%" y="181" width="0.1406%" height="15" fill="rgb(247,173,49)"/><text x="85.1308%" y="191.50"></text></g><g><title>finalize_macro_resolutions (160,872 samples, 0.42%)</title><rect x="85.0861%" y="165" width="0.4156%" height="15" fill="rgb(224,114,35)"/><text x="85.3361%" y="175.50"></text></g><g><title>late_resolve_crate (565,077 samples, 1.46%)</title><rect x="85.5017%" y="165" width="1.4598%" height="15" fill="rgb(245,159,27)"/><text x="85.7517%" y="175.50"></text></g><g><title>configure_and_expand (10,474,747 samples, 27.06%)</title><rect x="59.9686%" y="197" width="27.0610%" height="15" fill="rgb(245,172,44)"/><text x="60.2186%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (777,299 samples, 2.01%)</title><rect x="85.0214%" y="181" width="2.0081%" height="15" fill="rgb(236,23,11)"/><text x="85.2714%" y="191.50">r..</text></g><g><title>early_lint_checks (70,551 samples, 0.18%)</title><rect x="87.1513%" y="197" width="0.1823%" height="15" fill="rgb(205,117,38)"/><text x="87.4013%" y="207.50"></text></g><g><title>free_global_ctxt (2,540,499 samples, 6.56%)</title><rect x="87.3336%" y="197" width="6.5632%" height="15" fill="rgb(237,72,25)"/><text x="87.5836%" y="207.50">free_glob..</text></g><g><title>crate_hash (66,331 samples, 0.17%)</title><rect x="94.6762%" y="181" width="0.1714%" height="15" fill="rgb(244,70,9)"/><text x="94.9262%" y="191.50"></text></g><g><title>generate_crate_metadata (436,305 samples, 1.13%)</title><rect x="93.8968%" y="197" width="1.1272%" height="15" fill="rgb(217,125,39)"/><text x="94.1468%" y="207.50"></text></g><g><title>hir_lowering (424,165 samples, 1.10%)</title><rect x="95.0240%" y="197" width="1.0958%" height="15" fill="rgb(235,36,10)"/><text x="95.2740%" y="207.50"></text></g><g><title>link (43,590 samples, 0.11%)</title><rect x="96.1198%" y="197" width="0.1126%" height="15" fill="rgb(251,123,47)"/><text x="96.3698%" y="207.50"></text></g><g><title>parse_crate (435,234 samples, 1.12%)</title><rect x="96.2324%" y="197" width="1.1244%" height="15" fill="rgb(221,13,13)"/><text x="96.4824%" y="207.50"></text></g><g><title>prepare_outputs (168,132 samples, 0.43%)</title><rect x="97.3694%" y="197" width="0.4344%" height="15" fill="rgb(238,131,9)"/><text x="97.6194%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (474,225 samples, 1.23%)</title><rect x="97.8038%" y="197" width="1.2251%" height="15" fill="rgb(211,50,8)"/><text x="98.0538%" y="207.50"></text></g><g><title>setup_global_ctxt (85,151 samples, 0.22%)</title><rect x="99.0613%" y="197" width="0.2200%" height="15" fill="rgb(245,182,24)"/><text x="99.3113%" y="207.50"></text></g><g><title>all (38,707,963 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (38,707,963 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (278,213 samples, 0.72%)</title><rect x="99.2813%" y="197" width="0.7187%" height="15" fill="rgb(213,55,15)"/><text x="99.5313%" y="207.50"></text></g></svg></svg>