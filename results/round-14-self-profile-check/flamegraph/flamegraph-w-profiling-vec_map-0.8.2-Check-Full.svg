<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (508,067 samples, 0.37%)</title><rect x="11.9696%" y="101" width="0.3686%" height="15" fill="rgb(227,0,7)"/><text x="12.2196%" y="111.50"></text></g><g><title>item_attrs (303,674 samples, 0.22%)</title><rect x="13.0593%" y="69" width="0.2203%" height="15" fill="rgb(217,0,24)"/><text x="13.3093%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (293,024 samples, 0.21%)</title><rect x="13.0670%" y="53" width="0.2126%" height="15" fill="rgb(221,193,54)"/><text x="13.3170%" y="63.50"></text></g><g><title>codegen_fn_attrs (395,624 samples, 0.29%)</title><rect x="13.0014%" y="85" width="0.2870%" height="15" fill="rgb(248,212,6)"/><text x="13.2514%" y="95.50"></text></g><g><title>is_copy_raw (153,341 samples, 0.11%)</title><rect x="15.7072%" y="37" width="0.1113%" height="15" fill="rgb(208,68,35)"/><text x="15.9572%" y="47.50"></text></g><g><title>adt_drop_tys (347,944 samples, 0.25%)</title><rect x="15.6342%" y="53" width="0.2524%" height="15" fill="rgb(232,128,0)"/><text x="15.8842%" y="63.50"></text></g><g><title>needs_drop_raw (1,700,922 samples, 1.23%)</title><rect x="15.5044%" y="69" width="1.2341%" height="15" fill="rgb(207,160,47)"/><text x="15.7544%" y="79.50"></text></g><g><title>is_copy_raw (1,174,058 samples, 0.85%)</title><rect x="15.8867%" y="53" width="0.8518%" height="15" fill="rgb(228,23,34)"/><text x="16.1367%" y="63.50"></text></g><g><title>evaluate_obligation (974,197 samples, 0.71%)</title><rect x="16.0317%" y="37" width="0.7068%" height="15" fill="rgb(218,30,26)"/><text x="16.2817%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (843,148 samples, 0.61%)</title><rect x="17.0084%" y="53" width="0.6117%" height="15" fill="rgb(220,122,19)"/><text x="17.2584%" y="63.50"></text></g><g><title>specialization_graph_of (148,902 samples, 0.11%)</title><rect x="17.6973%" y="53" width="0.1080%" height="15" fill="rgb(250,228,42)"/><text x="17.9473%" y="63.50"></text></g><g><title>resolve_instance (1,587,576 samples, 1.15%)</title><rect x="16.7385%" y="69" width="1.1518%" height="15" fill="rgb(240,193,28)"/><text x="16.9885%" y="79.50"></text></g><g><title>thir_body (1,042,417 samples, 0.76%)</title><rect x="17.9173%" y="69" width="0.7563%" height="15" fill="rgb(216,20,37)"/><text x="18.1673%" y="79.50"></text></g><g><title>mir_const (10,334,980 samples, 7.50%)</title><rect x="11.2065%" y="117" width="7.4983%" height="15" fill="rgb(206,188,39)"/><text x="11.4565%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (8,775,149 samples, 6.37%)</title><rect x="12.3382%" y="101" width="6.3666%" height="15" fill="rgb(217,207,13)"/><text x="12.5882%" y="111.50">unsafety..</text></g><g><title>mir_built (7,465,473 samples, 5.42%)</title><rect x="13.2884%" y="85" width="5.4164%" height="15" fill="rgb(231,73,38)"/><text x="13.5384%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (11,299,635 samples, 8.20%)</title><rect x="10.5510%" y="133" width="8.1982%" height="15" fill="rgb(225,20,46)"/><text x="10.8010%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (149,050 samples, 0.11%)</title><rect x="18.7492%" y="133" width="0.1081%" height="15" fill="rgb(210,31,41)"/><text x="18.9992%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (699,622 samples, 0.51%)</title><rect x="18.8573%" y="133" width="0.5076%" height="15" fill="rgb(221,200,47)"/><text x="19.1073%" y="143.50"></text></g><g><title>normalize_projection_ty (430,760 samples, 0.31%)</title><rect x="19.0524%" y="117" width="0.3125%" height="15" fill="rgb(226,26,5)"/><text x="19.3024%" y="127.50"></text></g><g><title>type_op_normalize_predicate (761,997 samples, 0.55%)</title><rect x="19.3649%" y="133" width="0.5529%" height="15" fill="rgb(249,33,26)"/><text x="19.6149%" y="143.50"></text></g><g><title>normalize_projection_ty (211,993 samples, 0.15%)</title><rect x="19.7640%" y="117" width="0.1538%" height="15" fill="rgb(235,183,28)"/><text x="20.0140%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,117,289 samples, 2.99%)</title><rect x="19.9342%" y="133" width="2.9872%" height="15" fill="rgb(221,5,38)"/><text x="20.1842%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (30,585,515 samples, 22.19%)</title><rect x="0.7319%" y="165" width="22.1907%" height="15" fill="rgb(247,18,42)"/><text x="0.9819%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (30,411,244 samples, 22.06%)</title><rect x="0.8583%" y="149" width="22.0642%" height="15" fill="rgb(241,131,45)"/><text x="1.1083%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (207,503 samples, 0.15%)</title><rect x="22.9543%" y="165" width="0.1505%" height="15" fill="rgb(249,31,29)"/><text x="23.2043%" y="175.50"></text></g><g><title>codegen_fn_attrs (199,701 samples, 0.14%)</title><rect x="23.5156%" y="101" width="0.1449%" height="15" fill="rgb(225,111,53)"/><text x="23.7656%" y="111.50"></text></g><g><title>should_inherit_track_caller (338,012 samples, 0.25%)</title><rect x="23.4216%" y="117" width="0.2452%" height="15" fill="rgb(238,160,17)"/><text x="23.6716%" y="127.50"></text></g><g><title>codegen_fn_attrs (562,206 samples, 0.41%)</title><rect x="23.2758%" y="133" width="0.4079%" height="15" fill="rgb(214,148,48)"/><text x="23.5258%" y="143.50"></text></g><g><title>check_mod_attrs (784,159 samples, 0.57%)</title><rect x="23.1148%" y="149" width="0.5689%" height="15" fill="rgb(232,36,49)"/><text x="23.3648%" y="159.50"></text></g><g><title>lookup_deprecation_entry (149,981 samples, 0.11%)</title><rect x="23.9511%" y="133" width="0.1088%" height="15" fill="rgb(209,103,24)"/><text x="24.2011%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (405,915 samples, 0.29%)</title><rect x="23.8282%" y="149" width="0.2945%" height="15" fill="rgb(229,88,8)"/><text x="24.0782%" y="159.50"></text></g><g><title>misc_checking_1 (1,466,796 samples, 1.06%)</title><rect x="23.1051%" y="165" width="1.0642%" height="15" fill="rgb(213,181,19)"/><text x="23.3551%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (505,146 samples, 0.37%)</title><rect x="24.1706%" y="149" width="0.3665%" height="15" fill="rgb(254,191,54)"/><text x="24.4206%" y="159.50"></text></g><g><title>check_mod_liveness (423,615 samples, 0.31%)</title><rect x="24.2298%" y="133" width="0.3073%" height="15" fill="rgb(241,83,37)"/><text x="24.4798%" y="143.50"></text></g><g><title>misc_checking_2 (1,038,072 samples, 0.75%)</title><rect x="24.1693%" y="165" width="0.7532%" height="15" fill="rgb(233,36,39)"/><text x="24.4193%" y="175.50"></text></g><g><title>match_checking (531,076 samples, 0.39%)</title><rect x="24.5371%" y="149" width="0.3853%" height="15" fill="rgb(226,3,54)"/><text x="24.7871%" y="159.50"></text></g><g><title>check_match (493,265 samples, 0.36%)</title><rect x="24.5646%" y="133" width="0.3579%" height="15" fill="rgb(245,192,40)"/><text x="24.8146%" y="143.50"></text></g><g><title>check_private_in_public (229,822 samples, 0.17%)</title><rect x="24.9295%" y="149" width="0.1667%" height="15" fill="rgb(238,167,29)"/><text x="25.1795%" y="159.50"></text></g><g><title>death_checking (345,274 samples, 0.25%)</title><rect x="25.0962%" y="149" width="0.2505%" height="15" fill="rgb(232,182,51)"/><text x="25.3462%" y="159.50"></text></g><g><title>param_env (184,863 samples, 0.13%)</title><rect x="25.8154%" y="117" width="0.1341%" height="15" fill="rgb(231,60,39)"/><text x="26.0654%" y="127.50"></text></g><g><title>crate_lints (1,921,132 samples, 1.39%)</title><rect x="25.3479%" y="133" width="1.3938%" height="15" fill="rgb(208,69,12)"/><text x="25.5979%" y="143.50"></text></g><g><title>type_of (1,087,630 samples, 0.79%)</title><rect x="25.9527%" y="117" width="0.7891%" height="15" fill="rgb(235,93,37)"/><text x="26.2027%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (854,218 samples, 0.62%)</title><rect x="26.1220%" y="101" width="0.6198%" height="15" fill="rgb(213,116,39)"/><text x="26.3720%" y="111.50"></text></g><g><title>lint_checking (2,321,796 samples, 1.68%)</title><rect x="25.3467%" y="149" width="1.6845%" height="15" fill="rgb(222,207,29)"/><text x="25.5967%" y="159.50"></text></g><g><title>module_lints (399,014 samples, 0.29%)</title><rect x="26.7418%" y="133" width="0.2895%" height="15" fill="rgb(206,96,30)"/><text x="26.9918%" y="143.50"></text></g><g><title>lint_mod (396,274 samples, 0.29%)</title><rect x="26.7438%" y="117" width="0.2875%" height="15" fill="rgb(218,138,4)"/><text x="26.9938%" y="127.50"></text></g><g><title>privacy_access_levels (319,394 samples, 0.23%)</title><rect x="27.0313%" y="149" width="0.2317%" height="15" fill="rgb(250,191,14)"/><text x="27.2813%" y="159.50"></text></g><g><title>privacy_checking_modules (836,540 samples, 0.61%)</title><rect x="27.2630%" y="149" width="0.6069%" height="15" fill="rgb(239,60,40)"/><text x="27.5130%" y="159.50"></text></g><g><title>check_mod_privacy (835,020 samples, 0.61%)</title><rect x="27.2641%" y="133" width="0.6058%" height="15" fill="rgb(206,27,48)"/><text x="27.5141%" y="143.50"></text></g><g><title>misc_checking_3 (4,084,596 samples, 2.96%)</title><rect x="24.9224%" y="165" width="2.9635%" height="15" fill="rgb(225,35,8)"/><text x="25.1724%" y="175.50">mis..</text></g><g><title>impl_parent (2,510,679 samples, 1.82%)</title><rect x="31.3200%" y="101" width="1.8216%" height="15" fill="rgb(250,213,24)"/><text x="31.5700%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,518,069 samples, 1.10%)</title><rect x="32.0402%" y="85" width="1.1014%" height="15" fill="rgb(247,123,22)"/><text x="32.2902%" y="95.50"></text></g><g><title>impl_trait_ref (5,437,730 samples, 3.95%)</title><rect x="33.1425%" y="101" width="3.9452%" height="15" fill="rgb(231,138,38)"/><text x="33.3925%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,491,071 samples, 3.26%)</title><rect x="33.8293%" y="85" width="3.2584%" height="15" fill="rgb(231,145,46)"/><text x="34.0793%" y="95.50">met..</text></g><g><title>predicates_of (214,333 samples, 0.16%)</title><rect x="37.1865%" y="101" width="0.1555%" height="15" fill="rgb(251,118,11)"/><text x="37.4365%" y="111.50"></text></g><g><title>predicates_defined_on (180,663 samples, 0.13%)</title><rect x="37.2109%" y="85" width="0.1311%" height="15" fill="rgb(217,147,25)"/><text x="37.4609%" y="95.50"></text></g><g><title>trait_impls_of (872,571 samples, 0.63%)</title><rect x="37.3446%" y="101" width="0.6331%" height="15" fill="rgb(247,81,37)"/><text x="37.5946%" y="111.50"></text></g><g><title>implementations_of_trait (235,804 samples, 0.17%)</title><rect x="37.8066%" y="85" width="0.1711%" height="15" fill="rgb(209,12,38)"/><text x="38.0566%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (176,503 samples, 0.13%)</title><rect x="37.8496%" y="69" width="0.1281%" height="15" fill="rgb(227,1,9)"/><text x="38.0996%" y="79.50"></text></g><g><title>coherent_trait (13,838,646 samples, 10.04%)</title><rect x="27.9554%" y="133" width="10.0403%" height="15" fill="rgb(248,47,43)"/><text x="28.2054%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (13,812,536 samples, 10.02%)</title><rect x="27.9744%" y="117" width="10.0214%" height="15" fill="rgb(221,10,30)"/><text x="28.2244%" y="127.50">specialization..</text></g><g><title>coherence_checking (13,938,937 samples, 10.11%)</title><rect x="27.9384%" y="149" width="10.1131%" height="15" fill="rgb(210,229,1)"/><text x="28.1884%" y="159.50">coherence_check..</text></g><g><title>associated_item (462,166 samples, 0.34%)</title><rect x="50.8261%" y="85" width="0.3353%" height="15" fill="rgb(222,148,37)"/><text x="51.0761%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (388,275 samples, 0.28%)</title><rect x="50.8797%" y="69" width="0.2817%" height="15" fill="rgb(234,67,33)"/><text x="51.1297%" y="79.50"></text></g><g><title>associated_items (626,228 samples, 0.45%)</title><rect x="50.7243%" y="101" width="0.4543%" height="15" fill="rgb(247,98,35)"/><text x="50.9743%" y="111.50"></text></g><g><title>adt_dtorck_constraint (204,453 samples, 0.15%)</title><rect x="51.5014%" y="85" width="0.1483%" height="15" fill="rgb(247,138,52)"/><text x="51.7514%" y="95.50"></text></g><g><title>dropck_outlives (564,398 samples, 0.41%)</title><rect x="51.2503%" y="101" width="0.4095%" height="15" fill="rgb(213,79,30)"/><text x="51.5003%" y="111.50"></text></g><g><title>predicates_of (444,988 samples, 0.32%)</title><rect x="52.8213%" y="85" width="0.3229%" height="15" fill="rgb(246,177,23)"/><text x="53.0713%" y="95.50"></text></g><g><title>predicates_defined_on (376,517 samples, 0.27%)</title><rect x="52.8710%" y="69" width="0.2732%" height="15" fill="rgb(230,62,27)"/><text x="53.1210%" y="79.50"></text></g><g><title>trait_impls_of (163,252 samples, 0.12%)</title><rect x="53.2327%" y="85" width="0.1184%" height="15" fill="rgb(216,154,8)"/><text x="53.4827%" y="95.50"></text></g><g><title>evaluate_obligation (2,332,208 samples, 1.69%)</title><rect x="51.6597%" y="101" width="1.6921%" height="15" fill="rgb(244,35,45)"/><text x="51.9097%" y="111.50"></text></g><g><title>evaluate_obligation (367,982 samples, 0.27%)</title><rect x="53.9561%" y="85" width="0.2670%" height="15" fill="rgb(251,115,12)"/><text x="54.2061%" y="95.50"></text></g><g><title>method_autoderef_steps (714,475 samples, 0.52%)</title><rect x="53.7120%" y="101" width="0.5184%" height="15" fill="rgb(240,54,50)"/><text x="53.9620%" y="111.50"></text></g><g><title>predicates_of (278,121 samples, 0.20%)</title><rect x="54.2794%" y="101" width="0.2018%" height="15" fill="rgb(233,84,52)"/><text x="54.5294%" y="111.50"></text></g><g><title>predicates_defined_on (205,181 samples, 0.15%)</title><rect x="54.3323%" y="85" width="0.1489%" height="15" fill="rgb(207,117,47)"/><text x="54.5823%" y="95.50"></text></g><g><title>generics_of (141,142 samples, 0.10%)</title><rect x="59.5634%" y="69" width="0.1024%" height="15" fill="rgb(249,43,39)"/><text x="59.8134%" y="79.50"></text></g><g><title>impl_trait_ref (158,322 samples, 0.11%)</title><rect x="59.6786%" y="69" width="0.1149%" height="15" fill="rgb(209,38,44)"/><text x="59.9286%" y="79.50"></text></g><g><title>specializes (186,590 samples, 0.14%)</title><rect x="59.8757%" y="69" width="0.1354%" height="15" fill="rgb(236,212,23)"/><text x="60.1257%" y="79.50"></text></g><g><title>evaluate_obligation (1,462,793 samples, 1.06%)</title><rect x="58.9879%" y="85" width="1.0613%" height="15" fill="rgb(242,79,21)"/><text x="59.2379%" y="95.50"></text></g><g><title>method_autoderef_steps (140,541 samples, 0.10%)</title><rect x="60.3235%" y="85" width="0.1020%" height="15" fill="rgb(211,96,35)"/><text x="60.5735%" y="95.50"></text></g><g><title>typeck (8,303,883 samples, 6.02%)</title><rect x="54.5210%" y="101" width="6.0247%" height="15" fill="rgb(253,215,40)"/><text x="54.7710%" y="111.50">typeck</text></g><g><title>item_bodies_checking (31,006,959 samples, 22.50%)</title><rect x="38.0853%" y="149" width="22.4964%" height="15" fill="rgb(211,81,21)"/><text x="38.3353%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,003,119 samples, 22.49%)</title><rect x="38.0880%" y="133" width="22.4936%" height="15" fill="rgb(208,190,38)"/><text x="38.3380%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (30,893,358 samples, 22.41%)</title><rect x="38.1677%" y="117" width="22.4140%" height="15" fill="rgb(235,213,38)"/><text x="38.4177%" y="127.50">typeck</text></g><g><title>impl_trait_ref (145,782 samples, 0.11%)</title><rect x="62.4700%" y="69" width="0.1058%" height="15" fill="rgb(237,122,38)"/><text x="62.7200%" y="79.50"></text></g><g><title>adt_destructor (327,194 samples, 0.24%)</title><rect x="62.3640%" y="117" width="0.2374%" height="15" fill="rgb(244,218,35)"/><text x="62.6140%" y="127.50"></text></g><g><title>coherent_trait (320,584 samples, 0.23%)</title><rect x="62.3688%" y="101" width="0.2326%" height="15" fill="rgb(240,68,47)"/><text x="62.6188%" y="111.50"></text></g><g><title>specialization_graph_of (318,324 samples, 0.23%)</title><rect x="62.3705%" y="85" width="0.2310%" height="15" fill="rgb(210,16,53)"/><text x="62.6205%" y="95.50"></text></g><g><title>item_types_checking (3,113,355 samples, 2.26%)</title><rect x="60.5817%" y="149" width="2.2588%" height="15" fill="rgb(235,124,12)"/><text x="60.8317%" y="159.50">i..</text></g><g><title>check_mod_item_types (3,110,965 samples, 2.26%)</title><rect x="60.5834%" y="133" width="2.2571%" height="15" fill="rgb(224,169,11)"/><text x="60.8334%" y="143.50">c..</text></g><g><title>fn_sig (325,923 samples, 0.24%)</title><rect x="63.0828%" y="117" width="0.2365%" height="15" fill="rgb(250,166,2)"/><text x="63.3328%" y="127.50"></text></g><g><title>is_late_bound_map (324,573 samples, 0.24%)</title><rect x="63.4403%" y="101" width="0.2355%" height="15" fill="rgb(242,216,29)"/><text x="63.6903%" y="111.50"></text></g><g><title>resolve_lifetimes (297,893 samples, 0.22%)</title><rect x="63.4596%" y="85" width="0.2161%" height="15" fill="rgb(230,116,27)"/><text x="63.7096%" y="95.50"></text></g><g><title>generics_of (574,756 samples, 0.42%)</title><rect x="63.3193%" y="117" width="0.4170%" height="15" fill="rgb(228,99,48)"/><text x="63.5693%" y="127.50"></text></g><g><title>late_bound_vars_map (177,713 samples, 0.13%)</title><rect x="64.1742%" y="69" width="0.1289%" height="15" fill="rgb(253,11,6)"/><text x="64.4242%" y="79.50"></text></g><g><title>resolve_lifetimes (171,553 samples, 0.12%)</title><rect x="64.1786%" y="53" width="0.1245%" height="15" fill="rgb(247,143,39)"/><text x="64.4286%" y="63.50"></text></g><g><title>explicit_predicates_of (558,098 samples, 0.40%)</title><rect x="63.9210%" y="85" width="0.4049%" height="15" fill="rgb(236,97,10)"/><text x="64.1710%" y="95.50"></text></g><g><title>predicates_of (1,247,016 samples, 0.90%)</title><rect x="63.7919%" y="117" width="0.9047%" height="15" fill="rgb(233,208,19)"/><text x="64.0419%" y="127.50"></text></g><g><title>predicates_defined_on (1,179,086 samples, 0.86%)</title><rect x="63.8411%" y="101" width="0.8555%" height="15" fill="rgb(216,164,2)"/><text x="64.0911%" y="111.50"></text></g><g><title>inferred_outlives_of (510,887 samples, 0.37%)</title><rect x="64.3259%" y="85" width="0.3707%" height="15" fill="rgb(220,129,5)"/><text x="64.5759%" y="95.50"></text></g><g><title>inferred_outlives_crate (482,276 samples, 0.35%)</title><rect x="64.3467%" y="69" width="0.3499%" height="15" fill="rgb(242,17,10)"/><text x="64.5967%" y="79.50"></text></g><g><title>type_of (262,991 samples, 0.19%)</title><rect x="64.5058%" y="53" width="0.1908%" height="15" fill="rgb(242,107,0)"/><text x="64.7558%" y="63.50"></text></g><g><title>type_collecting (2,740,822 samples, 1.99%)</title><rect x="62.8419%" y="149" width="1.9885%" height="15" fill="rgb(251,28,31)"/><text x="63.0919%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,733,171 samples, 1.98%)</title><rect x="62.8475%" y="133" width="1.9830%" height="15" fill="rgb(233,223,10)"/><text x="63.0975%" y="143.50">c..</text></g><g><title>type_of (184,535 samples, 0.13%)</title><rect x="64.6966%" y="117" width="0.1339%" height="15" fill="rgb(215,21,27)"/><text x="64.9466%" y="127.50"></text></g><g><title>evaluate_obligation (726,036 samples, 0.53%)</title><rect x="67.1685%" y="117" width="0.5268%" height="15" fill="rgb(232,23,21)"/><text x="67.4185%" y="127.50"></text></g><g><title>implied_outlives_bounds (443,527 samples, 0.32%)</title><rect x="67.6960%" y="117" width="0.3218%" height="15" fill="rgb(244,5,23)"/><text x="67.9460%" y="127.50"></text></g><g><title>param_env (514,251 samples, 0.37%)</title><rect x="68.0178%" y="117" width="0.3731%" height="15" fill="rgb(226,81,46)"/><text x="68.2678%" y="127.50"></text></g><g><title>region_scope_tree (427,334 samples, 0.31%)</title><rect x="68.4241%" y="117" width="0.3100%" height="15" fill="rgb(247,70,30)"/><text x="68.6741%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,152,335 samples, 3.74%)</title><rect x="65.0185%" y="133" width="3.7382%" height="15" fill="rgb(212,68,19)"/><text x="65.2685%" y="143.50">chec..</text></g><g><title>adt_sized_constraint (153,032 samples, 0.11%)</title><rect x="70.6678%" y="117" width="0.1110%" height="15" fill="rgb(240,187,13)"/><text x="70.9178%" y="127.50"></text></g><g><title>implied_outlives_bounds (237,114 samples, 0.17%)</title><rect x="70.8778%" y="117" width="0.1720%" height="15" fill="rgb(223,113,26)"/><text x="71.1278%" y="127.50"></text></g><g><title>param_env (460,212 samples, 0.33%)</title><rect x="71.0498%" y="117" width="0.3339%" height="15" fill="rgb(206,192,2)"/><text x="71.2998%" y="127.50"></text></g><g><title>analysis (98,097,367 samples, 71.17%)</title><rect x="0.5147%" y="181" width="71.1724%" height="15" fill="rgb(241,108,4)"/><text x="0.7647%" y="191.50">analysis</text></g><g><title>type_check_crate (60,371,411 samples, 43.80%)</title><rect x="27.8859%" y="165" width="43.8012%" height="15" fill="rgb(247,173,49)"/><text x="28.1359%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,444,117 samples, 6.85%)</title><rect x="64.8351%" y="149" width="6.8520%" height="15" fill="rgb(224,114,35)"/><text x="65.0851%" y="159.50">wf_checki..</text></g><g><title>check_item_well_formed (4,039,081 samples, 2.93%)</title><rect x="68.7566%" y="133" width="2.9305%" height="15" fill="rgb(245,159,27)"/><text x="69.0066%" y="143.50">ch..</text></g><g><title>variances_of (147,261 samples, 0.11%)</title><rect x="71.5803%" y="117" width="0.1068%" height="15" fill="rgb(245,172,44)"/><text x="71.8303%" y="127.50"></text></g><g><title>crate_variances (142,121 samples, 0.10%)</title><rect x="71.5840%" y="101" width="0.1031%" height="15" fill="rgb(236,23,11)"/><text x="71.8340%" y="111.50"></text></g><g><title>codegen_crate (565,186 samples, 0.41%)</title><rect x="71.6978%" y="181" width="0.4101%" height="15" fill="rgb(205,117,38)"/><text x="71.9478%" y="191.50"></text></g><g><title>macro_expand_crate (13,303,380 samples, 9.65%)</title><rect x="72.4787%" y="165" width="9.6520%" height="15" fill="rgb(237,72,25)"/><text x="72.7287%" y="175.50">macro_expand_c..</text></g><g><title>expand_crate (13,283,420 samples, 9.64%)</title><rect x="72.4932%" y="149" width="9.6375%" height="15" fill="rgb(244,70,9)"/><text x="72.7432%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,722,490 samples, 1.98%)</title><rect x="80.1554%" y="133" width="1.9752%" height="15" fill="rgb(217,125,39)"/><text x="80.4054%" y="143.50">m..</text></g><g><title>metadata_register_crate (986,152 samples, 0.72%)</title><rect x="81.4152%" y="117" width="0.7155%" height="15" fill="rgb(235,36,10)"/><text x="81.6652%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (734,098 samples, 0.53%)</title><rect x="82.1327%" y="165" width="0.5326%" height="15" fill="rgb(251,123,47)"/><text x="82.3827%" y="175.50"></text></g><g><title>late_resolve_crate (1,364,435 samples, 0.99%)</title><rect x="82.7603%" y="149" width="0.9899%" height="15" fill="rgb(221,13,13)"/><text x="83.0103%" y="159.50"></text></g><g><title>configure_and_expand (16,145,092 samples, 11.71%)</title><rect x="72.1079%" y="181" width="11.7137%" height="15" fill="rgb(238,131,9)"/><text x="72.3579%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (1,593,708 samples, 1.16%)</title><rect x="82.6653%" y="165" width="1.1563%" height="15" fill="rgb(211,50,8)"/><text x="82.9153%" y="175.50"></text></g><g><title>drop_ast (232,443 samples, 0.17%)</title><rect x="83.8216%" y="181" width="0.1686%" height="15" fill="rgb(245,182,24)"/><text x="84.0716%" y="191.50"></text></g><g><title>early_lint_checks (616,017 samples, 0.45%)</title><rect x="83.9997%" y="181" width="0.4469%" height="15" fill="rgb(242,14,37)"/><text x="84.2497%" y="191.50"></text></g><g><title>free_global_ctxt (3,665,812 samples, 2.66%)</title><rect x="84.4467%" y="181" width="2.6597%" height="15" fill="rgb(246,228,12)"/><text x="84.6967%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,402,096 samples, 1.02%)</title><rect x="87.1063%" y="181" width="1.0173%" height="15" fill="rgb(213,55,15)"/><text x="87.3563%" y="191.50"></text></g><g><title>hir_lowering (2,689,180 samples, 1.95%)</title><rect x="88.1236%" y="181" width="1.9511%" height="15" fill="rgb(209,9,3)"/><text x="88.3736%" y="191.50">h..</text></g><g><title>parse_crate (12,136,057 samples, 8.81%)</title><rect x="90.1153%" y="181" width="8.8051%" height="15" fill="rgb(230,59,30)"/><text x="90.3653%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (192,742 samples, 0.14%)</title><rect x="98.9276%" y="181" width="0.1398%" height="15" fill="rgb(209,121,21)"/><text x="99.1776%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (828,680 samples, 0.60%)</title><rect x="99.0674%" y="181" width="0.6012%" height="15" fill="rgb(220,109,13)"/><text x="99.3174%" y="191.50"></text></g><g><title>all (137,830,605 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (137,830,605 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (356,114 samples, 0.26%)</title><rect x="99.7416%" y="181" width="0.2584%" height="15" fill="rgb(224,123,36)"/><text x="99.9916%" y="191.50"></text></g></svg></svg>