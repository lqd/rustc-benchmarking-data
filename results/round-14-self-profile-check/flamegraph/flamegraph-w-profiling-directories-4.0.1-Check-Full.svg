<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (211,083 samples, 0.21%)</title><rect x="12.0426%" y="165" width="0.2106%" height="15" fill="rgb(227,0,7)"/><text x="12.2926%" y="175.50"></text></g><g><title>param_env (144,593 samples, 0.14%)</title><rect x="13.7749%" y="133" width="0.1443%" height="15" fill="rgb(217,0,24)"/><text x="14.0249%" y="143.50"></text></g><g><title>item_attrs (149,772 samples, 0.15%)</title><rect x="14.3759%" y="101" width="0.1494%" height="15" fill="rgb(221,193,54)"/><text x="14.6259%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (144,702 samples, 0.14%)</title><rect x="14.3810%" y="85" width="0.1444%" height="15" fill="rgb(248,212,6)"/><text x="14.6310%" y="95.50"></text></g><g><title>codegen_fn_attrs (202,982 samples, 0.20%)</title><rect x="14.3299%" y="117" width="0.2025%" height="15" fill="rgb(208,68,35)"/><text x="14.5799%" y="127.50"></text></g><g><title>adt_drop_tys (122,082 samples, 0.12%)</title><rect x="16.8898%" y="53" width="0.1218%" height="15" fill="rgb(232,128,0)"/><text x="17.1398%" y="63.50"></text></g><g><title>adt_drop_tys (159,532 samples, 0.16%)</title><rect x="16.8853%" y="69" width="0.1592%" height="15" fill="rgb(207,160,47)"/><text x="17.1353%" y="79.50"></text></g><g><title>is_copy_raw (127,392 samples, 0.13%)</title><rect x="17.0459%" y="69" width="0.1271%" height="15" fill="rgb(228,23,34)"/><text x="17.2959%" y="79.50"></text></g><g><title>evaluate_obligation (108,002 samples, 0.11%)</title><rect x="17.0652%" y="53" width="0.1078%" height="15" fill="rgb(218,30,26)"/><text x="17.3152%" y="63.50"></text></g><g><title>adt_drop_tys (444,777 samples, 0.44%)</title><rect x="16.8560%" y="85" width="0.4438%" height="15" fill="rgb(220,122,19)"/><text x="17.1060%" y="95.50"></text></g><g><title>generics_of (228,172 samples, 0.23%)</title><rect x="17.7311%" y="53" width="0.2277%" height="15" fill="rgb(250,228,42)"/><text x="17.9811%" y="63.50"></text></g><g><title>is_copy_raw (721,667 samples, 0.72%)</title><rect x="17.2998%" y="85" width="0.7200%" height="15" fill="rgb(240,193,28)"/><text x="17.5498%" y="95.50"></text></g><g><title>evaluate_obligation (599,896 samples, 0.60%)</title><rect x="17.4213%" y="69" width="0.5986%" height="15" fill="rgb(216,20,37)"/><text x="17.6713%" y="79.50"></text></g><g><title>needs_drop_raw (1,304,115 samples, 1.30%)</title><rect x="16.7722%" y="101" width="1.3012%" height="15" fill="rgb(206,188,39)"/><text x="17.0222%" y="111.50"></text></g><g><title>impl_parent (345,953 samples, 0.35%)</title><rect x="18.8270%" y="69" width="0.3452%" height="15" fill="rgb(217,207,13)"/><text x="19.0770%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (211,822 samples, 0.21%)</title><rect x="18.9608%" y="53" width="0.2113%" height="15" fill="rgb(231,73,38)"/><text x="19.2108%" y="63.50"></text></g><g><title>specialization_graph_of (1,646,920 samples, 1.64%)</title><rect x="18.2803%" y="85" width="1.6432%" height="15" fill="rgb(225,20,46)"/><text x="18.5303%" y="95.50"></text></g><g><title>impl_trait_ref (752,999 samples, 0.75%)</title><rect x="19.1722%" y="69" width="0.7513%" height="15" fill="rgb(210,31,41)"/><text x="19.4222%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (604,299 samples, 0.60%)</title><rect x="19.3205%" y="53" width="0.6029%" height="15" fill="rgb(221,200,47)"/><text x="19.5705%" y="63.50"></text></g><g><title>resolve_instance (1,890,761 samples, 1.89%)</title><rect x="18.0734%" y="101" width="1.8865%" height="15" fill="rgb(226,26,5)"/><text x="18.3234%" y="111.50">r..</text></g><g><title>thir_body (823,417 samples, 0.82%)</title><rect x="20.0011%" y="101" width="0.8216%" height="15" fill="rgb(249,33,26)"/><text x="20.2511%" y="111.50"></text></g><g><title>mir_const (7,841,955 samples, 7.82%)</title><rect x="13.0264%" y="149" width="7.8244%" height="15" fill="rgb(235,183,28)"/><text x="13.2764%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (6,947,126 samples, 6.93%)</title><rect x="13.9192%" y="133" width="6.9315%" height="15" fill="rgb(221,5,38)"/><text x="14.1692%" y="143.50">unsafety_..</text></g><g><title>mir_built (6,332,522 samples, 6.32%)</title><rect x="14.5324%" y="117" width="6.3183%" height="15" fill="rgb(247,18,42)"/><text x="14.7824%" y="127.50">mir_built</text></g><g><title>mir_promoted (8,615,469 samples, 8.60%)</title><rect x="12.2942%" y="165" width="8.5961%" height="15" fill="rgb(241,131,45)"/><text x="12.5442%" y="175.50">mir_promoted</text></g><g><title>type_op_prove_predicate (1,516,023 samples, 1.51%)</title><rect x="21.0580%" y="165" width="1.5126%" height="15" fill="rgb(249,31,29)"/><text x="21.3080%" y="175.50"></text></g><g><title>MIR_borrow_checking (21,462,230 samples, 21.41%)</title><rect x="1.1661%" y="197" width="21.4141%" height="15" fill="rgb(225,111,53)"/><text x="1.4161%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,344,248 samples, 21.30%)</title><rect x="1.2838%" y="181" width="21.2964%" height="15" fill="rgb(238,160,17)"/><text x="1.5338%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (255,712 samples, 0.26%)</title><rect x="22.6042%" y="197" width="0.2551%" height="15" fill="rgb(214,148,48)"/><text x="22.8542%" y="207.50"></text></g><g><title>get_lang_items (121,252 samples, 0.12%)</title><rect x="23.5752%" y="117" width="0.1210%" height="15" fill="rgb(232,36,49)"/><text x="23.8252%" y="127.50"></text></g><g><title>codegen_fn_attrs (254,434 samples, 0.25%)</title><rect x="23.5406%" y="133" width="0.2539%" height="15" fill="rgb(209,103,24)"/><text x="23.7906%" y="143.50"></text></g><g><title>codegen_fn_attrs (553,716 samples, 0.55%)</title><rect x="23.2584%" y="165" width="0.5525%" height="15" fill="rgb(229,88,8)"/><text x="23.5084%" y="175.50"></text></g><g><title>should_inherit_track_caller (442,704 samples, 0.44%)</title><rect x="23.3692%" y="149" width="0.4417%" height="15" fill="rgb(213,181,19)"/><text x="23.6192%" y="159.50"></text></g><g><title>check_mod_attrs (913,180 samples, 0.91%)</title><rect x="22.9003%" y="181" width="0.9111%" height="15" fill="rgb(254,191,54)"/><text x="23.1503%" y="191.50"></text></g><g><title>check_mod_const_bodies (170,982 samples, 0.17%)</title><rect x="23.8115%" y="181" width="0.1706%" height="15" fill="rgb(241,83,37)"/><text x="24.0615%" y="191.50"></text></g><g><title>lookup_deprecation_entry (146,252 samples, 0.15%)</title><rect x="24.2357%" y="165" width="0.1459%" height="15" fill="rgb(233,36,39)"/><text x="24.4857%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (399,874 samples, 0.40%)</title><rect x="24.0665%" y="181" width="0.3990%" height="15" fill="rgb(226,3,54)"/><text x="24.3165%" y="191.50"></text></g><g><title>misc_checking_1 (1,668,959 samples, 1.67%)</title><rect x="22.8598%" y="197" width="1.6652%" height="15" fill="rgb(245,192,40)"/><text x="23.1098%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (251,113 samples, 0.25%)</title><rect x="24.5263%" y="181" width="0.2505%" height="15" fill="rgb(238,167,29)"/><text x="24.7763%" y="191.50"></text></g><g><title>check_mod_liveness (195,932 samples, 0.20%)</title><rect x="24.5814%" y="165" width="0.1955%" height="15" fill="rgb(232,182,51)"/><text x="24.8314%" y="175.50"></text></g><g><title>param_env (102,861 samples, 0.10%)</title><rect x="25.1605%" y="149" width="0.1026%" height="15" fill="rgb(231,60,39)"/><text x="25.4105%" y="159.50"></text></g><g><title>misc_checking_2 (741,298 samples, 0.74%)</title><rect x="24.5250%" y="197" width="0.7396%" height="15" fill="rgb(208,69,12)"/><text x="24.7750%" y="207.50"></text></g><g><title>match_checking (488,825 samples, 0.49%)</title><rect x="24.7769%" y="181" width="0.4877%" height="15" fill="rgb(235,93,37)"/><text x="25.0269%" y="191.50"></text></g><g><title>check_match (460,645 samples, 0.46%)</title><rect x="24.8050%" y="165" width="0.4596%" height="15" fill="rgb(213,116,39)"/><text x="25.0550%" y="175.50"></text></g><g><title>death_checking (216,552 samples, 0.22%)</title><rect x="25.3702%" y="181" width="0.2161%" height="15" fill="rgb(222,207,29)"/><text x="25.6202%" y="191.50"></text></g><g><title>crate_lints (1,774,350 samples, 1.77%)</title><rect x="25.5877%" y="165" width="1.7704%" height="15" fill="rgb(206,96,30)"/><text x="25.8377%" y="175.50">c..</text></g><g><title>type_of (1,071,793 samples, 1.07%)</title><rect x="26.2887%" y="149" width="1.0694%" height="15" fill="rgb(218,138,4)"/><text x="26.5387%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (837,039 samples, 0.84%)</title><rect x="26.5229%" y="133" width="0.8352%" height="15" fill="rgb(250,191,14)"/><text x="26.7729%" y="143.50"></text></g><g><title>lint_checking (2,055,663 samples, 2.05%)</title><rect x="25.5862%" y="181" width="2.0511%" height="15" fill="rgb(239,60,40)"/><text x="25.8362%" y="191.50">l..</text></g><g><title>module_lints (279,813 samples, 0.28%)</title><rect x="27.3581%" y="165" width="0.2792%" height="15" fill="rgb(206,27,48)"/><text x="27.6081%" y="175.50"></text></g><g><title>lint_mod (276,303 samples, 0.28%)</title><rect x="27.3616%" y="149" width="0.2757%" height="15" fill="rgb(225,35,8)"/><text x="27.6116%" y="159.50"></text></g><g><title>privacy_access_levels (140,191 samples, 0.14%)</title><rect x="27.6373%" y="181" width="0.1399%" height="15" fill="rgb(250,213,24)"/><text x="27.8873%" y="191.50"></text></g><g><title>privacy_checking_modules (503,916 samples, 0.50%)</title><rect x="27.7771%" y="181" width="0.5028%" height="15" fill="rgb(247,123,22)"/><text x="28.0271%" y="191.50"></text></g><g><title>check_mod_privacy (501,746 samples, 0.50%)</title><rect x="27.7793%" y="165" width="0.5006%" height="15" fill="rgb(231,138,38)"/><text x="28.0293%" y="175.50"></text></g><g><title>misc_checking_3 (3,034,394 samples, 3.03%)</title><rect x="25.2646%" y="197" width="3.0276%" height="15" fill="rgb(231,145,46)"/><text x="25.5146%" y="207.50">mis..</text></g><g><title>impl_parent (1,610,291 samples, 1.61%)</title><rect x="31.0078%" y="133" width="1.6067%" height="15" fill="rgb(251,118,11)"/><text x="31.2578%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,034,716 samples, 1.03%)</title><rect x="31.5821%" y="117" width="1.0324%" height="15" fill="rgb(217,147,25)"/><text x="31.8321%" y="127.50"></text></g><g><title>impl_trait_ref (4,959,126 samples, 4.95%)</title><rect x="32.6145%" y="133" width="4.9480%" height="15" fill="rgb(247,81,37)"/><text x="32.8645%" y="143.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,337,292 samples, 4.33%)</title><rect x="33.2349%" y="117" width="4.3276%" height="15" fill="rgb(209,12,38)"/><text x="33.4849%" y="127.50">metad..</text></g><g><title>coherent_trait (9,855,610 samples, 9.83%)</title><rect x="28.3570%" y="165" width="9.8335%" height="15" fill="rgb(227,1,9)"/><text x="28.6070%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (9,847,539 samples, 9.83%)</title><rect x="28.3650%" y="149" width="9.8254%" height="15" fill="rgb(248,47,43)"/><text x="28.6150%" y="159.50">specialization..</text></g><g><title>trait_impls_of (627,457 samples, 0.63%)</title><rect x="37.5644%" y="133" width="0.6260%" height="15" fill="rgb(221,10,30)"/><text x="37.8144%" y="143.50"></text></g><g><title>implementations_of_trait (124,810 samples, 0.12%)</title><rect x="38.0659%" y="117" width="0.1245%" height="15" fill="rgb(210,229,1)"/><text x="38.3159%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (104,040 samples, 0.10%)</title><rect x="38.0867%" y="101" width="0.1038%" height="15" fill="rgb(222,148,37)"/><text x="38.3367%" y="111.50"></text></g><g><title>coherence_checking (9,927,652 samples, 9.91%)</title><rect x="28.3416%" y="181" width="9.9054%" height="15" fill="rgb(234,67,33)"/><text x="28.5916%" y="191.50">coherence_chec..</text></g><g><title>associated_item (130,111 samples, 0.13%)</title><rect x="47.6831%" y="117" width="0.1298%" height="15" fill="rgb(247,98,35)"/><text x="47.9331%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (102,410 samples, 0.10%)</title><rect x="47.7108%" y="101" width="0.1022%" height="15" fill="rgb(247,138,52)"/><text x="47.9608%" y="111.50"></text></g><g><title>associated_items (183,751 samples, 0.18%)</title><rect x="47.6382%" y="133" width="0.1833%" height="15" fill="rgb(213,79,30)"/><text x="47.8882%" y="143.50"></text></g><g><title>adt_dtorck_constraint (212,403 samples, 0.21%)</title><rect x="47.8959%" y="117" width="0.2119%" height="15" fill="rgb(246,177,23)"/><text x="48.1459%" y="127.50"></text></g><g><title>dropck_outlives (543,206 samples, 0.54%)</title><rect x="47.8378%" y="133" width="0.5420%" height="15" fill="rgb(230,62,27)"/><text x="48.0878%" y="143.50"></text></g><g><title>normalize_projection_ty (272,503 samples, 0.27%)</title><rect x="48.1079%" y="117" width="0.2719%" height="15" fill="rgb(216,154,8)"/><text x="48.3579%" y="127.50"></text></g><g><title>evaluate_obligation (486,025 samples, 0.48%)</title><rect x="48.3798%" y="133" width="0.4849%" height="15" fill="rgb(244,35,45)"/><text x="48.6298%" y="143.50"></text></g><g><title>trait_impls_of (153,501 samples, 0.15%)</title><rect x="48.7115%" y="117" width="0.1532%" height="15" fill="rgb(251,115,12)"/><text x="48.9615%" y="127.50"></text></g><g><title>object_safety_violations (138,881 samples, 0.14%)</title><rect x="49.2204%" y="133" width="0.1386%" height="15" fill="rgb(240,54,50)"/><text x="49.4704%" y="143.50"></text></g><g><title>associated_item (165,393 samples, 0.17%)</title><rect x="58.9913%" y="101" width="0.1650%" height="15" fill="rgb(233,84,52)"/><text x="59.2413%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (123,871 samples, 0.12%)</title><rect x="59.0328%" y="85" width="0.1236%" height="15" fill="rgb(207,117,47)"/><text x="59.2828%" y="95.50"></text></g><g><title>associated_items (246,724 samples, 0.25%)</title><rect x="58.9210%" y="117" width="0.2462%" height="15" fill="rgb(249,43,39)"/><text x="59.1710%" y="127.50"></text></g><g><title>adt_dtorck_constraint (121,892 samples, 0.12%)</title><rect x="59.3076%" y="37" width="0.1216%" height="15" fill="rgb(209,38,44)"/><text x="59.5576%" y="47.50"></text></g><g><title>adt_dtorck_constraint (139,552 samples, 0.14%)</title><rect x="59.2937%" y="53" width="0.1392%" height="15" fill="rgb(236,212,23)"/><text x="59.5437%" y="63.50"></text></g><g><title>adt_dtorck_constraint (163,332 samples, 0.16%)</title><rect x="59.2839%" y="69" width="0.1630%" height="15" fill="rgb(242,79,21)"/><text x="59.5339%" y="79.50"></text></g><g><title>adt_dtorck_constraint (170,612 samples, 0.17%)</title><rect x="59.2786%" y="85" width="0.1702%" height="15" fill="rgb(211,96,35)"/><text x="59.5286%" y="95.50"></text></g><g><title>dropck_outlives (268,943 samples, 0.27%)</title><rect x="59.1858%" y="117" width="0.2683%" height="15" fill="rgb(253,215,40)"/><text x="59.4358%" y="127.50"></text></g><g><title>adt_dtorck_constraint (213,343 samples, 0.21%)</title><rect x="59.2413%" y="101" width="0.2129%" height="15" fill="rgb(211,81,21)"/><text x="59.4913%" y="111.50"></text></g><g><title>adt_def (114,842 samples, 0.11%)</title><rect x="59.6891%" y="85" width="0.1146%" height="15" fill="rgb(208,190,38)"/><text x="59.9391%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (113,872 samples, 0.11%)</title><rect x="59.6901%" y="69" width="0.1136%" height="15" fill="rgb(235,213,38)"/><text x="59.9401%" y="79.50"></text></g><g><title>item_attrs (103,022 samples, 0.10%)</title><rect x="59.7009%" y="53" width="0.1028%" height="15" fill="rgb(237,122,38)"/><text x="59.9509%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (101,912 samples, 0.10%)</title><rect x="59.7020%" y="37" width="0.1017%" height="15" fill="rgb(244,218,35)"/><text x="59.9520%" y="47.50"></text></g><g><title>adt_def (138,601 samples, 0.14%)</title><rect x="59.8048%" y="69" width="0.1383%" height="15" fill="rgb(240,68,47)"/><text x="60.0548%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (138,351 samples, 0.14%)</title><rect x="59.8051%" y="53" width="0.1380%" height="15" fill="rgb(210,16,53)"/><text x="60.0551%" y="63.50"></text></g><g><title>adt_sized_constraint (154,872 samples, 0.15%)</title><rect x="59.8037%" y="85" width="0.1545%" height="15" fill="rgb(235,124,12)"/><text x="60.0537%" y="95.50"></text></g><g><title>adt_sized_constraint (285,204 samples, 0.28%)</title><rect x="59.6839%" y="101" width="0.2846%" height="15" fill="rgb(224,169,11)"/><text x="59.9339%" y="111.50"></text></g><g><title>evaluate_obligation (805,070 samples, 0.80%)</title><rect x="59.4542%" y="117" width="0.8033%" height="15" fill="rgb(250,166,2)"/><text x="59.7042%" y="127.50"></text></g><g><title>trait_impls_of (180,332 samples, 0.18%)</title><rect x="60.0775%" y="101" width="0.1799%" height="15" fill="rgb(242,216,29)"/><text x="60.3275%" y="111.50"></text></g><g><title>is_copy_raw (203,982 samples, 0.20%)</title><rect x="60.3826%" y="117" width="0.2035%" height="15" fill="rgb(230,116,27)"/><text x="60.6326%" y="127.50"></text></g><g><title>evaluate_obligation (197,002 samples, 0.20%)</title><rect x="60.3896%" y="101" width="0.1966%" height="15" fill="rgb(228,99,48)"/><text x="60.6396%" y="111.50"></text></g><g><title>trait_impls_of (179,222 samples, 0.18%)</title><rect x="60.4073%" y="85" width="0.1788%" height="15" fill="rgb(253,11,6)"/><text x="60.6573%" y="95.50"></text></g><g><title>method_autoderef_steps (127,412 samples, 0.13%)</title><rect x="60.6247%" y="117" width="0.1271%" height="15" fill="rgb(247,143,39)"/><text x="60.8747%" y="127.50"></text></g><g><title>predicates_of (115,061 samples, 0.11%)</title><rect x="60.7673%" y="117" width="0.1148%" height="15" fill="rgb(236,97,10)"/><text x="61.0173%" y="127.50"></text></g><g><title>typeck (11,530,459 samples, 11.50%)</title><rect x="49.5184%" y="133" width="11.5046%" height="15" fill="rgb(233,208,19)"/><text x="49.7684%" y="143.50">typeck</text></g><g><title>item_bodies_checking (22,822,944 samples, 22.77%)</title><rect x="38.2848%" y="181" width="22.7717%" height="15" fill="rgb(216,164,2)"/><text x="38.5348%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,815,844 samples, 22.76%)</title><rect x="38.2919%" y="165" width="22.7647%" height="15" fill="rgb(220,129,5)"/><text x="38.5419%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (22,760,684 samples, 22.71%)</title><rect x="38.3469%" y="149" width="22.7096%" height="15" fill="rgb(242,17,10)"/><text x="38.5969%" y="159.50">typeck</text></g><g><title>impl_trait_ref (133,122 samples, 0.13%)</title><rect x="61.3932%" y="101" width="0.1328%" height="15" fill="rgb(242,107,0)"/><text x="61.6432%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (114,181 samples, 0.11%)</title><rect x="61.4121%" y="85" width="0.1139%" height="15" fill="rgb(251,28,31)"/><text x="61.6621%" y="95.50"></text></g><g><title>adt_destructor (286,933 samples, 0.29%)</title><rect x="61.2686%" y="149" width="0.2863%" height="15" fill="rgb(233,223,10)"/><text x="61.5186%" y="159.50"></text></g><g><title>coherent_trait (282,533 samples, 0.28%)</title><rect x="61.2730%" y="133" width="0.2819%" height="15" fill="rgb(215,21,27)"/><text x="61.5230%" y="143.50"></text></g><g><title>specialization_graph_of (280,873 samples, 0.28%)</title><rect x="61.2747%" y="117" width="0.2802%" height="15" fill="rgb(232,23,21)"/><text x="61.5247%" y="127.50"></text></g><g><title>item_types_checking (549,396 samples, 0.55%)</title><rect x="61.0565%" y="181" width="0.5482%" height="15" fill="rgb(244,5,23)"/><text x="61.3065%" y="191.50"></text></g><g><title>check_mod_item_types (546,226 samples, 0.55%)</title><rect x="61.0597%" y="165" width="0.5450%" height="15" fill="rgb(226,81,46)"/><text x="61.3097%" y="175.50"></text></g><g><title>late_bound_vars_map (280,035 samples, 0.28%)</title><rect x="62.2598%" y="133" width="0.2794%" height="15" fill="rgb(247,70,30)"/><text x="62.5098%" y="143.50"></text></g><g><title>resolve_lifetimes (254,904 samples, 0.25%)</title><rect x="62.2848%" y="117" width="0.2543%" height="15" fill="rgb(212,68,19)"/><text x="62.5348%" y="127.50"></text></g><g><title>fn_sig (625,959 samples, 0.62%)</title><rect x="61.9736%" y="149" width="0.6246%" height="15" fill="rgb(240,187,13)"/><text x="62.2236%" y="159.50"></text></g><g><title>named_region_map (426,115 samples, 0.43%)</title><rect x="62.7809%" y="133" width="0.4252%" height="15" fill="rgb(223,113,26)"/><text x="63.0309%" y="143.50"></text></g><g><title>resolve_lifetimes (389,715 samples, 0.39%)</title><rect x="62.8172%" y="117" width="0.3888%" height="15" fill="rgb(206,192,2)"/><text x="63.0672%" y="127.50"></text></g><g><title>lint_levels (189,182 samples, 0.19%)</title><rect x="63.0173%" y="101" width="0.1888%" height="15" fill="rgb(241,108,4)"/><text x="63.2673%" y="111.50"></text></g><g><title>generics_of (629,228 samples, 0.63%)</title><rect x="62.5981%" y="149" width="0.6278%" height="15" fill="rgb(247,173,49)"/><text x="62.8481%" y="159.50"></text></g><g><title>explicit_predicates_of (111,832 samples, 0.11%)</title><rect x="63.4456%" y="117" width="0.1116%" height="15" fill="rgb(224,114,35)"/><text x="63.6956%" y="127.50"></text></g><g><title>predicates_of (653,467 samples, 0.65%)</title><rect x="63.2614%" y="149" width="0.6520%" height="15" fill="rgb(245,159,27)"/><text x="63.5114%" y="159.50"></text></g><g><title>predicates_defined_on (587,595 samples, 0.59%)</title><rect x="63.3271%" y="133" width="0.5863%" height="15" fill="rgb(245,172,44)"/><text x="63.5771%" y="143.50"></text></g><g><title>inferred_outlives_of (357,053 samples, 0.36%)</title><rect x="63.5571%" y="117" width="0.3563%" height="15" fill="rgb(236,23,11)"/><text x="63.8071%" y="127.50"></text></g><g><title>inferred_outlives_crate (324,263 samples, 0.32%)</title><rect x="63.5899%" y="101" width="0.3235%" height="15" fill="rgb(205,117,38)"/><text x="63.8399%" y="111.50"></text></g><g><title>type_of (151,102 samples, 0.15%)</title><rect x="63.7626%" y="85" width="0.1508%" height="15" fill="rgb(237,72,25)"/><text x="64.0126%" y="95.50"></text></g><g><title>type_collecting (2,439,807 samples, 2.43%)</title><rect x="61.6059%" y="181" width="2.4343%" height="15" fill="rgb(244,70,9)"/><text x="61.8559%" y="191.50">ty..</text></g><g><title>collect_mod_item_types (2,424,807 samples, 2.42%)</title><rect x="61.6208%" y="165" width="2.4194%" height="15" fill="rgb(217,125,39)"/><text x="61.8708%" y="175.50">co..</text></g><g><title>type_of (127,081 samples, 0.13%)</title><rect x="63.9134%" y="149" width="0.1268%" height="15" fill="rgb(235,36,10)"/><text x="64.1634%" y="159.50"></text></g><g><title>evaluate_obligation (158,913 samples, 0.16%)</title><rect x="64.9762%" y="149" width="0.1586%" height="15" fill="rgb(251,123,47)"/><text x="65.2262%" y="159.50"></text></g><g><title>param_env (124,942 samples, 0.12%)</title><rect x="65.1757%" y="149" width="0.1247%" height="15" fill="rgb(221,13,13)"/><text x="65.4257%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,342,743 samples, 1.34%)</title><rect x="64.1382%" y="165" width="1.3397%" height="15" fill="rgb(238,131,9)"/><text x="64.3882%" y="175.50"></text></g><g><title>region_scope_tree (162,522 samples, 0.16%)</title><rect x="65.3157%" y="149" width="0.1622%" height="15" fill="rgb(211,50,8)"/><text x="65.5657%" y="159.50"></text></g><g><title>adt_sized_constraint (103,611 samples, 0.10%)</title><rect x="66.1146%" y="101" width="0.1034%" height="15" fill="rgb(245,182,24)"/><text x="66.3646%" y="111.50"></text></g><g><title>adt_sized_constraint (153,363 samples, 0.15%)</title><rect x="66.0663%" y="117" width="0.1530%" height="15" fill="rgb(242,14,37)"/><text x="66.3163%" y="127.50"></text></g><g><title>adt_sized_constraint (189,913 samples, 0.19%)</title><rect x="66.0307%" y="133" width="0.1895%" height="15" fill="rgb(246,228,12)"/><text x="66.2807%" y="143.50"></text></g><g><title>evaluate_obligation (312,354 samples, 0.31%)</title><rect x="65.9098%" y="149" width="0.3117%" height="15" fill="rgb(213,55,15)"/><text x="66.1598%" y="159.50"></text></g><g><title>param_env (156,691 samples, 0.16%)</title><rect x="66.2968%" y="149" width="0.1563%" height="15" fill="rgb(209,9,3)"/><text x="66.5468%" y="159.50"></text></g><g><title>analysis (66,010,807 samples, 65.86%)</title><rect x="0.7186%" y="213" width="65.8627%" height="15" fill="rgb(230,59,30)"/><text x="0.9686%" y="223.50">analysis</text></g><g><title>type_check_crate (38,375,208 samples, 38.29%)</title><rect x="28.2922%" y="197" width="38.2891%" height="15" fill="rgb(209,121,21)"/><text x="28.5422%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,541,818 samples, 2.54%)</title><rect x="64.0452%" y="181" width="2.5361%" height="15" fill="rgb(220,109,13)"/><text x="64.2952%" y="191.50">wf..</text></g><g><title>check_item_well_formed (1,105,905 samples, 1.10%)</title><rect x="65.4779%" y="165" width="1.1034%" height="15" fill="rgb(232,18,1)"/><text x="65.7279%" y="175.50"></text></g><g><title>codegen_crate (579,106 samples, 0.58%)</title><rect x="66.5927%" y="213" width="0.5778%" height="15" fill="rgb(215,41,42)"/><text x="66.8427%" y="223.50"></text></g><g><title>AST_validation (177,492 samples, 0.18%)</title><rect x="67.4037%" y="197" width="0.1771%" height="15" fill="rgb(224,123,36)"/><text x="67.6537%" y="207.50"></text></g><g><title>metadata_load_macro (125,322 samples, 0.13%)</title><rect x="81.2278%" y="165" width="0.1250%" height="15" fill="rgb(240,125,3)"/><text x="81.4778%" y="175.50"></text></g><g><title>metadata_register_crate (2,727,049 samples, 2.72%)</title><rect x="81.3529%" y="165" width="2.7209%" height="15" fill="rgb(205,98,50)"/><text x="81.6029%" y="175.50">me..</text></g><g><title>metadata_register_crate (973,912 samples, 0.97%)</title><rect x="83.1021%" y="149" width="0.9717%" height="15" fill="rgb(205,185,37)"/><text x="83.3521%" y="159.50"></text></g><g><title>macro_expand_crate (16,463,503 samples, 16.43%)</title><rect x="67.7404%" y="197" width="16.4266%" height="15" fill="rgb(238,207,15)"/><text x="67.9904%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (16,436,893 samples, 16.40%)</title><rect x="67.7670%" y="181" width="16.4000%" height="15" fill="rgb(213,199,42)"/><text x="68.0170%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (185,822 samples, 0.19%)</title><rect x="84.1721%" y="197" width="0.1854%" height="15" fill="rgb(235,201,11)"/><text x="84.4221%" y="207.50"></text></g><g><title>finalize_macro_resolutions (107,141 samples, 0.11%)</title><rect x="84.4145%" y="181" width="0.1069%" height="15" fill="rgb(207,46,11)"/><text x="84.6645%" y="191.50"></text></g><g><title>late_resolve_crate (2,919,833 samples, 2.91%)</title><rect x="84.5214%" y="181" width="2.9133%" height="15" fill="rgb(241,35,35)"/><text x="84.7714%" y="191.50">la..</text></g><g><title>configure_and_expand (20,450,748 samples, 20.40%)</title><rect x="67.1705%" y="213" width="20.4049%" height="15" fill="rgb(243,32,47)"/><text x="67.4205%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (3,225,076 samples, 3.22%)</title><rect x="84.3575%" y="197" width="3.2178%" height="15" fill="rgb(247,202,23)"/><text x="84.6075%" y="207.50">res..</text></g><g><title>drop_ast (200,302 samples, 0.20%)</title><rect x="87.5753%" y="213" width="0.1999%" height="15" fill="rgb(219,102,11)"/><text x="87.8253%" y="223.50"></text></g><g><title>early_lint_checks (577,716 samples, 0.58%)</title><rect x="87.7913%" y="213" width="0.5764%" height="15" fill="rgb(243,110,44)"/><text x="88.0413%" y="223.50"></text></g><g><title>free_global_ctxt (3,006,773 samples, 3.00%)</title><rect x="88.3678%" y="213" width="3.0000%" height="15" fill="rgb(222,74,54)"/><text x="88.6178%" y="223.50">fre..</text></g><g><title>generate_crate_metadata (658,107 samples, 0.66%)</title><rect x="91.3678%" y="213" width="0.6566%" height="15" fill="rgb(216,99,12)"/><text x="91.6178%" y="223.50"></text></g><g><title>hir_lowering (3,775,772 samples, 3.77%)</title><rect x="92.0244%" y="213" width="3.7673%" height="15" fill="rgb(226,22,26)"/><text x="92.2744%" y="223.50">hir_..</text></g><g><title>parse_crate (2,824,002 samples, 2.82%)</title><rect x="95.8402%" y="213" width="2.8177%" height="15" fill="rgb(217,163,10)"/><text x="96.0902%" y="223.50">pa..</text></g><g><title>prepare_outputs (317,834 samples, 0.32%)</title><rect x="98.6671%" y="213" width="0.3171%" height="15" fill="rgb(213,25,53)"/><text x="98.9171%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (558,077 samples, 0.56%)</title><rect x="98.9843%" y="213" width="0.5568%" height="15" fill="rgb(252,105,26)"/><text x="99.2343%" y="223.50"></text></g><g><title>setup_global_ctxt (136,811 samples, 0.14%)</title><rect x="99.5519%" y="213" width="0.1365%" height="15" fill="rgb(220,39,43)"/><text x="99.8019%" y="223.50"></text></g><g><title>all (100,224,838 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (100,224,838 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (312,264 samples, 0.31%)</title><rect x="99.6884%" y="213" width="0.3116%" height="15" fill="rgb(223,20,43)"/><text x="99.9384%" y="223.50"></text></g></svg></svg>