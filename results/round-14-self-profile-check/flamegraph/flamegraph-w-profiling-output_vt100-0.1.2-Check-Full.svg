<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>thir_body (14,900 samples, 0.11%)</title><rect x="7.8335%" y="117" width="0.1141%" height="15" fill="rgb(227,0,7)"/><text x="8.0835%" y="127.50"></text></g><g><title>mir_const (171,922 samples, 1.32%)</title><rect x="6.6672%" y="165" width="1.3162%" height="15" fill="rgb(217,0,24)"/><text x="6.9172%" y="175.50"></text></g><g><title>unsafety_check_result (131,682 samples, 1.01%)</title><rect x="6.9753%" y="149" width="1.0081%" height="15" fill="rgb(221,193,54)"/><text x="7.2253%" y="159.50"></text></g><g><title>mir_built (94,511 samples, 0.72%)</title><rect x="7.2598%" y="133" width="0.7235%" height="15" fill="rgb(248,212,6)"/><text x="7.5098%" y="143.50"></text></g><g><title>MIR_borrow_checking (579,376 samples, 4.44%)</title><rect x="3.5903%" y="213" width="4.4354%" height="15" fill="rgb(208,68,35)"/><text x="3.8403%" y="223.50">MIR_b..</text></g><g><title>mir_borrowck (576,396 samples, 4.41%)</title><rect x="3.6132%" y="197" width="4.4126%" height="15" fill="rgb(232,128,0)"/><text x="3.8632%" y="207.50">mir_b..</text></g><g><title>mir_promoted (235,543 samples, 1.80%)</title><rect x="6.2226%" y="181" width="1.8032%" height="15" fill="rgb(207,160,47)"/><text x="6.4726%" y="191.50">m..</text></g><g><title>hir_owner (20,410 samples, 0.16%)</title><rect x="8.4017%" y="197" width="0.1562%" height="15" fill="rgb(228,23,34)"/><text x="8.6517%" y="207.50"></text></g><g><title>hir_module_items (67,420 samples, 0.52%)</title><rect x="8.0446%" y="213" width="0.5161%" height="15" fill="rgb(218,30,26)"/><text x="8.2946%" y="223.50"></text></g><g><title>get_lang_items (44,311 samples, 0.34%)</title><rect x="9.2482%" y="165" width="0.3392%" height="15" fill="rgb(220,122,19)"/><text x="9.4982%" y="175.50"></text></g><g><title>should_inherit_track_caller (22,120 samples, 0.17%)</title><rect x="9.5874%" y="165" width="0.1693%" height="15" fill="rgb(250,228,42)"/><text x="9.8374%" y="175.50"></text></g><g><title>codegen_fn_attrs (125,342 samples, 0.96%)</title><rect x="8.9242%" y="181" width="0.9596%" height="15" fill="rgb(240,193,28)"/><text x="9.1742%" y="191.50"></text></g><g><title>supported_target_features (16,600 samples, 0.13%)</title><rect x="9.7567%" y="165" width="0.1271%" height="15" fill="rgb(216,20,37)"/><text x="10.0067%" y="175.50"></text></g><g><title>check_mod_attrs (155,652 samples, 1.19%)</title><rect x="8.6927%" y="197" width="1.1916%" height="15" fill="rgb(206,188,39)"/><text x="8.9427%" y="207.50"></text></g><g><title>check_mod_const_bodies (15,490 samples, 0.12%)</title><rect x="9.8843%" y="197" width="0.1186%" height="15" fill="rgb(217,207,13)"/><text x="10.1343%" y="207.50"></text></g><g><title>lookup_stability (20,961 samples, 0.16%)</title><rect x="10.3414%" y="181" width="0.1605%" height="15" fill="rgb(231,73,38)"/><text x="10.5914%" y="191.50"></text></g><g><title>metadata_decode_entry_lookup_stability (19,701 samples, 0.15%)</title><rect x="10.3510%" y="165" width="0.1508%" height="15" fill="rgb(225,20,46)"/><text x="10.6010%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (63,221 samples, 0.48%)</title><rect x="10.0472%" y="197" width="0.4840%" height="15" fill="rgb(210,31,41)"/><text x="10.2972%" y="207.50"></text></g><g><title>looking_for_derive_registrar (15,870 samples, 0.12%)</title><rect x="10.5362%" y="197" width="0.1215%" height="15" fill="rgb(221,200,47)"/><text x="10.7862%" y="207.50"></text></g><g><title>misc_checking_1 (276,233 samples, 2.11%)</title><rect x="8.5633%" y="213" width="2.1147%" height="15" fill="rgb(226,26,5)"/><text x="8.8133%" y="223.50">m..</text></g><g><title>liveness_and_intrinsic_checking (36,000 samples, 0.28%)</title><rect x="10.6870%" y="197" width="0.2756%" height="15" fill="rgb(249,33,26)"/><text x="10.9370%" y="207.50"></text></g><g><title>check_mod_liveness (29,660 samples, 0.23%)</title><rect x="10.7356%" y="181" width="0.2271%" height="15" fill="rgb(235,183,28)"/><text x="10.9856%" y="191.50"></text></g><g><title>type_uninhabited_from (13,140 samples, 0.10%)</title><rect x="10.8620%" y="165" width="0.1006%" height="15" fill="rgb(221,5,38)"/><text x="11.1120%" y="175.50"></text></g><g><title>misc_checking_2 (54,251 samples, 0.42%)</title><rect x="10.6780%" y="213" width="0.4153%" height="15" fill="rgb(247,18,42)"/><text x="10.9280%" y="223.50"></text></g><g><title>match_checking (17,071 samples, 0.13%)</title><rect x="10.9626%" y="197" width="0.1307%" height="15" fill="rgb(241,131,45)"/><text x="11.2126%" y="207.50"></text></g><g><title>check_match (15,651 samples, 0.12%)</title><rect x="10.9735%" y="181" width="0.1198%" height="15" fill="rgb(249,31,29)"/><text x="11.2235%" y="191.50"></text></g><g><title>check_private_in_public (14,440 samples, 0.11%)</title><rect x="11.1330%" y="197" width="0.1105%" height="15" fill="rgb(225,111,53)"/><text x="11.3830%" y="207.50"></text></g><g><title>death_checking (34,861 samples, 0.27%)</title><rect x="11.2436%" y="197" width="0.2669%" height="15" fill="rgb(238,160,17)"/><text x="11.4936%" y="207.50"></text></g><g><title>diagnostic_items (14,030 samples, 0.11%)</title><rect x="11.7649%" y="165" width="0.1074%" height="15" fill="rgb(214,148,48)"/><text x="12.0149%" y="175.50"></text></g><g><title>crate_lints (63,930 samples, 0.49%)</title><rect x="11.5194%" y="181" width="0.4894%" height="15" fill="rgb(232,36,49)"/><text x="11.7694%" y="191.50"></text></g><g><title>param_env (17,820 samples, 0.14%)</title><rect x="11.8723%" y="165" width="0.1364%" height="15" fill="rgb(209,103,24)"/><text x="12.1223%" y="175.50"></text></g><g><title>lint_checking (80,541 samples, 0.62%)</title><rect x="11.5105%" y="197" width="0.6166%" height="15" fill="rgb(229,88,8)"/><text x="11.7605%" y="207.50"></text></g><g><title>module_lints (15,451 samples, 0.12%)</title><rect x="12.0088%" y="181" width="0.1183%" height="15" fill="rgb(213,181,19)"/><text x="12.2588%" y="191.50"></text></g><g><title>lint_mod (14,261 samples, 0.11%)</title><rect x="12.0179%" y="165" width="0.1092%" height="15" fill="rgb(254,191,54)"/><text x="12.2679%" y="175.50"></text></g><g><title>privacy_access_levels (35,870 samples, 0.27%)</title><rect x="12.1271%" y="197" width="0.2746%" height="15" fill="rgb(241,83,37)"/><text x="12.3771%" y="207.50"></text></g><g><title>privacy_checking_modules (13,950 samples, 0.11%)</title><rect x="12.4017%" y="197" width="0.1068%" height="15" fill="rgb(233,36,39)"/><text x="12.6517%" y="207.50"></text></g><g><title>misc_checking_3 (205,562 samples, 1.57%)</title><rect x="11.0933%" y="213" width="1.5737%" height="15" fill="rgb(226,3,54)"/><text x="11.3433%" y="223.50"></text></g><g><title>unused_lib_feature_checking (20,710 samples, 0.16%)</title><rect x="12.5085%" y="197" width="0.1585%" height="15" fill="rgb(245,192,40)"/><text x="12.7585%" y="207.50"></text></g><g><title>coherence_checking (19,311 samples, 0.15%)</title><rect x="12.7521%" y="197" width="0.1478%" height="15" fill="rgb(238,167,29)"/><text x="13.0021%" y="207.50"></text></g><g><title>impl_parent (106,681 samples, 0.82%)</title><rect x="16.2538%" y="53" width="0.8167%" height="15" fill="rgb(232,182,51)"/><text x="16.5038%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (85,761 samples, 0.66%)</title><rect x="16.4140%" y="37" width="0.6565%" height="15" fill="rgb(231,60,39)"/><text x="16.6640%" y="47.50"></text></g><g><title>impl_trait_ref (442,386 samples, 3.39%)</title><rect x="17.0705%" y="53" width="3.3867%" height="15" fill="rgb(208,69,12)"/><text x="17.3205%" y="63.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (421,406 samples, 3.23%)</title><rect x="17.2311%" y="37" width="3.2261%" height="15" fill="rgb(235,93,37)"/><text x="17.4811%" y="47.50">met..</text></g><g><title>adt_destructor (682,957 samples, 5.23%)</title><rect x="15.4333%" y="117" width="5.2284%" height="15" fill="rgb(213,116,39)"/><text x="15.6833%" y="127.50">adt_de..</text></g><g><title>metadata_decode_entry_adt_destructor (682,507 samples, 5.22%)</title><rect x="15.4367%" y="101" width="5.2250%" height="15" fill="rgb(222,207,29)"/><text x="15.6867%" y="111.50">metada..</text></g><g><title>coherent_trait (677,417 samples, 5.19%)</title><rect x="15.4757%" y="85" width="5.1860%" height="15" fill="rgb(206,96,30)"/><text x="15.7257%" y="95.50">cohere..</text></g><g><title>specialization_graph_of (668,527 samples, 5.12%)</title><rect x="15.5437%" y="69" width="5.1179%" height="15" fill="rgb(218,138,4)"/><text x="15.7937%" y="79.50">specia..</text></g><g><title>trait_impls_of (26,710 samples, 0.20%)</title><rect x="20.4572%" y="53" width="0.2045%" height="15" fill="rgb(250,191,14)"/><text x="20.7072%" y="63.50"></text></g><g><title>dropck_outlives (720,898 samples, 5.52%)</title><rect x="15.1717%" y="149" width="5.5189%" height="15" fill="rgb(239,60,40)"/><text x="15.4217%" y="159.50">dropck_..</text></g><g><title>adt_dtorck_constraint (698,107 samples, 5.34%)</title><rect x="15.3462%" y="133" width="5.3444%" height="15" fill="rgb(206,27,48)"/><text x="15.5962%" y="143.50">adt_dto..</text></g><g><title>adt_def (29,720 samples, 0.23%)</title><rect x="20.8003%" y="117" width="0.2275%" height="15" fill="rgb(225,35,8)"/><text x="21.0503%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (29,000 samples, 0.22%)</title><rect x="20.8058%" y="101" width="0.2220%" height="15" fill="rgb(250,213,24)"/><text x="21.0558%" y="111.50"></text></g><g><title>evaluate_obligation (44,751 samples, 0.34%)</title><rect x="20.6905%" y="149" width="0.3426%" height="15" fill="rgb(247,123,22)"/><text x="20.9405%" y="159.50"></text></g><g><title>adt_sized_constraint (35,770 samples, 0.27%)</title><rect x="20.7593%" y="133" width="0.2738%" height="15" fill="rgb(231,138,38)"/><text x="21.0093%" y="143.50"></text></g><g><title>trait_impls_of (32,621 samples, 0.25%)</title><rect x="21.2093%" y="149" width="0.2497%" height="15" fill="rgb(231,145,46)"/><text x="21.4593%" y="159.50"></text></g><g><title>implementations_of_trait (14,061 samples, 0.11%)</title><rect x="21.3514%" y="133" width="0.1076%" height="15" fill="rgb(251,118,11)"/><text x="21.6014%" y="143.50"></text></g><g><title>item_bodies_checking (1,126,582 samples, 8.62%)</title><rect x="12.9281%" y="197" width="8.6246%" height="15" fill="rgb(217,147,25)"/><text x="13.1781%" y="207.50">item_bodies_..</text></g><g><title>typeck_item_bodies (1,125,302 samples, 8.61%)</title><rect x="12.9379%" y="181" width="8.6148%" height="15" fill="rgb(247,81,37)"/><text x="13.1879%" y="191.50">typeck_item_..</text></g><g><title>typeck (1,122,122 samples, 8.59%)</title><rect x="12.9622%" y="165" width="8.5904%" height="15" fill="rgb(209,12,38)"/><text x="13.2122%" y="175.50">typeck</text></g><g><title>late_bound_vars_map (38,110 samples, 0.29%)</title><rect x="22.3024%" y="149" width="0.2918%" height="15" fill="rgb(227,1,9)"/><text x="22.5524%" y="159.50"></text></g><g><title>resolve_lifetimes (33,870 samples, 0.26%)</title><rect x="22.3348%" y="133" width="0.2593%" height="15" fill="rgb(248,47,43)"/><text x="22.5848%" y="143.50"></text></g><g><title>fn_sig (114,961 samples, 0.88%)</title><rect x="21.8709%" y="165" width="0.8801%" height="15" fill="rgb(221,10,30)"/><text x="22.1209%" y="175.50"></text></g><g><title>type_of (20,490 samples, 0.16%)</title><rect x="22.5941%" y="149" width="0.1569%" height="15" fill="rgb(210,229,1)"/><text x="22.8441%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (19,700 samples, 0.15%)</title><rect x="22.6002%" y="133" width="0.1508%" height="15" fill="rgb(222,148,37)"/><text x="22.8502%" y="143.50"></text></g><g><title>generics_of (24,300 samples, 0.19%)</title><rect x="22.7510%" y="165" width="0.1860%" height="15" fill="rgb(234,67,33)"/><text x="23.0010%" y="175.50"></text></g><g><title>explicit_predicates_of (15,170 samples, 0.12%)</title><rect x="22.9980%" y="133" width="0.1161%" height="15" fill="rgb(247,98,35)"/><text x="23.2480%" y="143.50"></text></g><g><title>predicates_of (27,430 samples, 0.21%)</title><rect x="22.9370%" y="165" width="0.2100%" height="15" fill="rgb(247,138,52)"/><text x="23.1870%" y="175.50"></text></g><g><title>predicates_defined_on (25,230 samples, 0.19%)</title><rect x="22.9539%" y="149" width="0.1931%" height="15" fill="rgb(213,79,30)"/><text x="23.2039%" y="159.50"></text></g><g><title>type_collecting (210,872 samples, 1.61%)</title><rect x="21.6124%" y="197" width="1.6143%" height="15" fill="rgb(246,177,23)"/><text x="21.8624%" y="207.50"></text></g><g><title>collect_mod_item_types (203,382 samples, 1.56%)</title><rect x="21.6697%" y="181" width="1.5570%" height="15" fill="rgb(230,62,27)"/><text x="21.9197%" y="191.50"></text></g><g><title>evaluate_obligation (41,660 samples, 0.32%)</title><rect x="24.8168%" y="165" width="0.3189%" height="15" fill="rgb(216,154,8)"/><text x="25.0668%" y="175.50"></text></g><g><title>implied_outlives_bounds (49,101 samples, 0.38%)</title><rect x="25.1357%" y="165" width="0.3759%" height="15" fill="rgb(244,35,45)"/><text x="25.3857%" y="175.50"></text></g><g><title>param_env (118,921 samples, 0.91%)</title><rect x="25.5116%" y="165" width="0.9104%" height="15" fill="rgb(251,115,12)"/><text x="25.7616%" y="175.50"></text></g><g><title>predicates_of (19,160 samples, 0.15%)</title><rect x="26.4220%" y="165" width="0.1467%" height="15" fill="rgb(240,54,50)"/><text x="26.6720%" y="175.50"></text></g><g><title>predicates_defined_on (18,630 samples, 0.14%)</title><rect x="26.4261%" y="149" width="0.1426%" height="15" fill="rgb(233,84,52)"/><text x="26.6761%" y="159.50"></text></g><g><title>analysis (3,091,765 samples, 23.67%)</title><rect x="2.9817%" y="229" width="23.6691%" height="15" fill="rgb(207,117,47)"/><text x="3.2317%" y="239.50">analysis</text></g><g><title>type_check_crate (1,826,630 samples, 13.98%)</title><rect x="12.6670%" y="213" width="13.9838%" height="15" fill="rgb(249,43,39)"/><text x="12.9170%" y="223.50">type_check_crate</text></g><g><title>wf_checking (446,845 samples, 3.42%)</title><rect x="23.2300%" y="197" width="3.4208%" height="15" fill="rgb(209,38,44)"/><text x="23.4800%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (433,025 samples, 3.32%)</title><rect x="23.3358%" y="181" width="3.3150%" height="15" fill="rgb(236,212,23)"/><text x="23.5858%" y="191.50">che..</text></g><g><title>native_libraries (20,531 samples, 0.16%)</title><rect x="29.3279%" y="213" width="0.1572%" height="15" fill="rgb(242,79,21)"/><text x="29.5779%" y="223.50"></text></g><g><title>metadata_decode_entry_native_libraries (15,800 samples, 0.12%)</title><rect x="29.3641%" y="197" width="0.1210%" height="15" fill="rgb(211,96,35)"/><text x="29.6141%" y="207.50"></text></g><g><title>codegen_crate (377,004 samples, 2.89%)</title><rect x="26.6979%" y="229" width="2.8862%" height="15" fill="rgb(253,215,40)"/><text x="26.9479%" y="239.50">co..</text></g><g><title>AST_validation (39,531 samples, 0.30%)</title><rect x="30.6366%" y="213" width="0.3026%" height="15" fill="rgb(211,81,21)"/><text x="30.8866%" y="223.50"></text></g><g><title>crate_injection (48,530 samples, 0.37%)</title><rect x="31.0184%" y="213" width="0.3715%" height="15" fill="rgb(208,190,38)"/><text x="31.2684%" y="223.50"></text></g><g><title>metadata_load_macro (31,321 samples, 0.24%)</title><rect x="61.5498%" y="181" width="0.2398%" height="15" fill="rgb(235,213,38)"/><text x="61.7998%" y="191.50"></text></g><g><title>macro_expand_crate (5,254,339 samples, 40.22%)</title><rect x="31.3899%" y="213" width="40.2248%" height="15" fill="rgb(237,122,38)"/><text x="31.6399%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (5,241,269 samples, 40.12%)</title><rect x="31.4900%" y="197" width="40.1247%" height="15" fill="rgb(244,218,35)"/><text x="31.7400%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (1,283,404 samples, 9.83%)</title><rect x="61.7896%" y="181" width="9.8252%" height="15" fill="rgb(240,68,47)"/><text x="62.0396%" y="191.50">metadata_regis..</text></g><g><title>metadata_register_crate (467,677 samples, 3.58%)</title><rect x="68.0344%" y="165" width="3.5803%" height="15" fill="rgb(210,16,53)"/><text x="68.2844%" y="175.50">meta..</text></g><g><title>metadata_register_crate (39,841 samples, 0.31%)</title><rect x="71.3097%" y="149" width="0.3050%" height="15" fill="rgb(235,124,12)"/><text x="71.5597%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (48,001 samples, 0.37%)</title><rect x="71.6348%" y="213" width="0.3675%" height="15" fill="rgb(224,169,11)"/><text x="71.8848%" y="223.50"></text></g><g><title>finalize_macro_resolutions (180,032 samples, 1.38%)</title><rect x="72.1001%" y="197" width="1.3782%" height="15" fill="rgb(250,166,2)"/><text x="72.3501%" y="207.50"></text></g><g><title>late_resolve_crate (22,310 samples, 0.17%)</title><rect x="73.4783%" y="197" width="0.1708%" height="15" fill="rgb(242,216,29)"/><text x="73.7283%" y="207.50"></text></g><g><title>resolve_postprocess (15,950 samples, 0.12%)</title><rect x="73.7411%" y="197" width="0.1221%" height="15" fill="rgb(230,116,27)"/><text x="73.9911%" y="207.50"></text></g><g><title>configure_and_expand (5,785,005 samples, 44.29%)</title><rect x="29.5841%" y="229" width="44.2873%" height="15" fill="rgb(228,99,48)"/><text x="29.8341%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (244,162 samples, 1.87%)</title><rect x="72.0022%" y="213" width="1.8692%" height="15" fill="rgb(253,11,6)"/><text x="72.2522%" y="223.50">r..</text></g><g><title>drop_ast (16,670 samples, 0.13%)</title><rect x="73.8714%" y="229" width="0.1276%" height="15" fill="rgb(247,143,39)"/><text x="74.1214%" y="239.50"></text></g><g><title>early_lint_checks (169,292 samples, 1.30%)</title><rect x="74.0944%" y="229" width="1.2960%" height="15" fill="rgb(236,97,10)"/><text x="74.3444%" y="239.50"></text></g><g><title>free_global_ctxt (1,521,077 samples, 11.64%)</title><rect x="75.3905%" y="229" width="11.6447%" height="15" fill="rgb(233,208,19)"/><text x="75.6405%" y="239.50">free_global_ctxt</text></g><g><title>crate_hash (69,241 samples, 0.53%)</title><rect x="88.1592%" y="213" width="0.5301%" height="15" fill="rgb(216,164,2)"/><text x="88.4092%" y="223.50"></text></g><g><title>mir_keys (19,430 samples, 0.15%)</title><rect x="88.9362%" y="213" width="0.1487%" height="15" fill="rgb(220,129,5)"/><text x="89.1862%" y="223.50"></text></g><g><title>generate_crate_metadata (278,943 samples, 2.14%)</title><rect x="87.0351%" y="229" width="2.1355%" height="15" fill="rgb(242,17,10)"/><text x="87.2851%" y="239.50">g..</text></g><g><title>hir_lowering (176,982 samples, 1.35%)</title><rect x="89.1706%" y="229" width="1.3549%" height="15" fill="rgb(242,107,0)"/><text x="89.4206%" y="239.50"></text></g><g><title>link (35,321 samples, 0.27%)</title><rect x="90.5255%" y="229" width="0.2704%" height="15" fill="rgb(251,28,31)"/><text x="90.7755%" y="239.50"></text></g><g><title>parse_crate (449,225 samples, 3.44%)</title><rect x="90.7959%" y="229" width="3.4391%" height="15" fill="rgb(233,223,10)"/><text x="91.0459%" y="239.50">par..</text></g><g><title>prepare_outputs (143,271 samples, 1.10%)</title><rect x="94.2737%" y="229" width="1.0968%" height="15" fill="rgb(215,21,27)"/><text x="94.5237%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (290,443 samples, 2.22%)</title><rect x="95.3706%" y="229" width="2.2235%" height="15" fill="rgb(232,23,21)"/><text x="95.6206%" y="239.50">s..</text></g><g><title>setup_global_ctxt (77,431 samples, 0.59%)</title><rect x="97.6718%" y="229" width="0.5928%" height="15" fill="rgb(244,5,23)"/><text x="97.9218%" y="239.50"></text></g><g><title>all (13,062,436 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (13,062,436 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (226,683 samples, 1.74%)</title><rect x="98.2646%" y="229" width="1.7354%" height="15" fill="rgb(212,68,19)"/><text x="98.5146%" y="239.50"></text></g></svg></svg>