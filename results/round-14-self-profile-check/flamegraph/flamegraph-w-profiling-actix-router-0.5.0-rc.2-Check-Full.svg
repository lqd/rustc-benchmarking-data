<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,062,549 samples, 0.21%)</title><rect x="14.7349%" y="165" width="0.2129%" height="15" fill="rgb(227,0,7)"/><text x="14.9849%" y="175.50"></text></g><g><title>param_env (903,454 samples, 0.18%)</title><rect x="16.6912%" y="133" width="0.1811%" height="15" fill="rgb(217,0,24)"/><text x="16.9412%" y="143.50"></text></g><g><title>item_attrs (744,619 samples, 0.15%)</title><rect x="17.4472%" y="101" width="0.1492%" height="15" fill="rgb(221,193,54)"/><text x="17.6972%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (710,639 samples, 0.14%)</title><rect x="17.4540%" y="85" width="0.1424%" height="15" fill="rgb(248,212,6)"/><text x="17.7040%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,079,172 samples, 0.22%)</title><rect x="17.3904%" y="117" width="0.2163%" height="15" fill="rgb(208,68,35)"/><text x="17.6404%" y="127.50"></text></g><g><title>adt_drop_tys (726,905 samples, 0.15%)</title><rect x="20.5522%" y="85" width="0.1457%" height="15" fill="rgb(232,128,0)"/><text x="20.8022%" y="95.50"></text></g><g><title>is_copy_raw (5,032,767 samples, 1.01%)</title><rect x="20.6983%" y="85" width="1.0086%" height="15" fill="rgb(207,160,47)"/><text x="20.9483%" y="95.50"></text></g><g><title>evaluate_obligation (4,044,076 samples, 0.81%)</title><rect x="20.8964%" y="69" width="0.8104%" height="15" fill="rgb(228,23,34)"/><text x="21.1464%" y="79.50"></text></g><g><title>needs_drop_raw (6,556,381 samples, 1.31%)</title><rect x="20.4208%" y="101" width="1.3139%" height="15" fill="rgb(218,30,26)"/><text x="20.6708%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,040,258 samples, 0.81%)</title><rect x="21.9607%" y="85" width="0.8097%" height="15" fill="rgb(220,122,19)"/><text x="22.2107%" y="95.50"></text></g><g><title>specialization_graph_of (892,250 samples, 0.18%)</title><rect x="22.8162%" y="85" width="0.1788%" height="15" fill="rgb(250,228,42)"/><text x="23.0662%" y="95.50"></text></g><g><title>resolve_instance (6,542,476 samples, 1.31%)</title><rect x="21.7349%" y="101" width="1.3111%" height="15" fill="rgb(240,193,28)"/><text x="21.9849%" y="111.50"></text></g><g><title>thir_body (4,915,105 samples, 0.99%)</title><rect x="23.0807%" y="101" width="0.9850%" height="15" fill="rgb(216,20,37)"/><text x="23.3307%" y="111.50"></text></g><g><title>mir_const (40,790,765 samples, 8.17%)</title><rect x="15.9269%" y="149" width="8.1746%" height="15" fill="rgb(206,188,39)"/><text x="16.1769%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (36,073,170 samples, 7.23%)</title><rect x="16.8723%" y="133" width="7.2292%" height="15" fill="rgb(217,207,13)"/><text x="17.1223%" y="143.50">unsafety_c..</text></g><g><title>mir_built (32,408,710 samples, 6.49%)</title><rect x="17.6067%" y="117" width="6.4948%" height="15" fill="rgb(231,73,38)"/><text x="17.8567%" y="127.50">mir_built</text></g><g><title>mir_const (968,286 samples, 0.19%)</title><rect x="24.2346%" y="133" width="0.1940%" height="15" fill="rgb(225,20,46)"/><text x="24.4846%" y="143.50"></text></g><g><title>unsafety_check_result (695,522 samples, 0.14%)</title><rect x="24.2893%" y="117" width="0.1394%" height="15" fill="rgb(210,31,41)"/><text x="24.5393%" y="127.50"></text></g><g><title>mir_built (592,349 samples, 0.12%)</title><rect x="24.3099%" y="101" width="0.1187%" height="15" fill="rgb(221,200,47)"/><text x="24.5599%" y="111.50"></text></g><g><title>mir_const_qualif (1,686,832 samples, 0.34%)</title><rect x="24.1015%" y="149" width="0.3380%" height="15" fill="rgb(226,26,5)"/><text x="24.3515%" y="159.50"></text></g><g><title>mir_promoted (46,734,876 samples, 9.37%)</title><rect x="15.0743%" y="165" width="9.3659%" height="15" fill="rgb(249,33,26)"/><text x="15.3243%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,789,235 samples, 0.36%)</title><rect x="24.4429%" y="165" width="0.3586%" height="15" fill="rgb(235,183,28)"/><text x="24.6929%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (3,906,292 samples, 0.78%)</title><rect x="24.8015%" y="165" width="0.7828%" height="15" fill="rgb(221,5,38)"/><text x="25.0515%" y="175.50"></text></g><g><title>normalize_projection_ty (2,321,938 samples, 0.47%)</title><rect x="25.1190%" y="149" width="0.4653%" height="15" fill="rgb(247,18,42)"/><text x="25.3690%" y="159.50"></text></g><g><title>type_op_normalize_predicate (5,305,238 samples, 1.06%)</title><rect x="25.5843%" y="165" width="1.0632%" height="15" fill="rgb(241,131,45)"/><text x="25.8343%" y="175.50"></text></g><g><title>normalize_projection_ty (2,603,362 samples, 0.52%)</title><rect x="26.1258%" y="149" width="0.5217%" height="15" fill="rgb(249,31,29)"/><text x="26.3758%" y="159.50"></text></g><g><title>type_op_normalize_ty (805,017 samples, 0.16%)</title><rect x="26.6475%" y="165" width="0.1613%" height="15" fill="rgb(225,111,53)"/><text x="26.8975%" y="175.50"></text></g><g><title>type_op_prove_predicate (17,504,858 samples, 3.51%)</title><rect x="26.8089%" y="165" width="3.5080%" height="15" fill="rgb(238,160,17)"/><text x="27.0589%" y="175.50">typ..</text></g><g><title>evaluate_obligation (763,097 samples, 0.15%)</title><rect x="30.1640%" y="149" width="0.1529%" height="15" fill="rgb(214,148,48)"/><text x="30.4140%" y="159.50"></text></g><g><title>MIR_borrow_checking (149,354,982 samples, 29.93%)</title><rect x="0.3890%" y="197" width="29.9313%" height="15" fill="rgb(232,36,49)"/><text x="0.6390%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (148,659,615 samples, 29.79%)</title><rect x="0.5283%" y="181" width="29.7920%" height="15" fill="rgb(209,103,24)"/><text x="0.7783%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (880,220 samples, 0.18%)</title><rect x="30.3203%" y="197" width="0.1764%" height="15" fill="rgb(229,88,8)"/><text x="30.5703%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (514,496 samples, 0.10%)</title><rect x="30.3936%" y="181" width="0.1031%" height="15" fill="rgb(213,181,19)"/><text x="30.6436%" y="191.50"></text></g><g><title>hir_module_items (634,888 samples, 0.13%)</title><rect x="30.4967%" y="197" width="0.1272%" height="15" fill="rgb(254,191,54)"/><text x="30.7467%" y="207.50"></text></g><g><title>should_inherit_track_caller (674,979 samples, 0.14%)</title><rect x="30.8482%" y="149" width="0.1353%" height="15" fill="rgb(241,83,37)"/><text x="31.0982%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,000,852 samples, 0.20%)</title><rect x="30.7868%" y="165" width="0.2006%" height="15" fill="rgb(233,36,39)"/><text x="31.0368%" y="175.50"></text></g><g><title>check_mod_attrs (1,773,040 samples, 0.36%)</title><rect x="30.6320%" y="181" width="0.3553%" height="15" fill="rgb(226,3,54)"/><text x="30.8820%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (994,911 samples, 0.20%)</title><rect x="31.1254%" y="181" width="0.1994%" height="15" fill="rgb(245,192,40)"/><text x="31.3754%" y="191.50"></text></g><g><title>misc_checking_1 (3,592,539 samples, 0.72%)</title><rect x="30.6240%" y="197" width="0.7200%" height="15" fill="rgb(238,167,29)"/><text x="30.8740%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,985,972 samples, 0.40%)</title><rect x="31.3444%" y="181" width="0.3980%" height="15" fill="rgb(232,182,51)"/><text x="31.5944%" y="191.50"></text></g><g><title>check_mod_liveness (1,643,799 samples, 0.33%)</title><rect x="31.4129%" y="165" width="0.3294%" height="15" fill="rgb(231,60,39)"/><text x="31.6629%" y="175.50"></text></g><g><title>misc_checking_2 (4,686,702 samples, 0.94%)</title><rect x="31.3440%" y="197" width="0.9392%" height="15" fill="rgb(208,69,12)"/><text x="31.5940%" y="207.50"></text></g><g><title>match_checking (2,698,890 samples, 0.54%)</title><rect x="31.7424%" y="181" width="0.5409%" height="15" fill="rgb(235,93,37)"/><text x="31.9924%" y="191.50"></text></g><g><title>check_match (2,529,738 samples, 0.51%)</title><rect x="31.7762%" y="165" width="0.5070%" height="15" fill="rgb(213,116,39)"/><text x="32.0262%" y="175.50"></text></g><g><title>check_private_in_public (712,578 samples, 0.14%)</title><rect x="32.2856%" y="181" width="0.1428%" height="15" fill="rgb(222,207,29)"/><text x="32.5356%" y="191.50"></text></g><g><title>death_checking (1,343,815 samples, 0.27%)</title><rect x="32.4284%" y="181" width="0.2693%" height="15" fill="rgb(206,96,30)"/><text x="32.6784%" y="191.50"></text></g><g><title>eval_to_const_value_raw (544,837 samples, 0.11%)</title><rect x="33.1650%" y="149" width="0.1092%" height="15" fill="rgb(218,138,4)"/><text x="33.4150%" y="159.50"></text></g><g><title>eval_to_const_value_raw (535,687 samples, 0.11%)</title><rect x="33.1668%" y="133" width="0.1074%" height="15" fill="rgb(250,191,14)"/><text x="33.4168%" y="143.50"></text></g><g><title>eval_to_allocation_raw (517,077 samples, 0.10%)</title><rect x="33.1705%" y="117" width="0.1036%" height="15" fill="rgb(239,60,40)"/><text x="33.4205%" y="127.50"></text></g><g><title>crate_lints (5,172,547 samples, 1.04%)</title><rect x="32.6983%" y="165" width="1.0366%" height="15" fill="rgb(206,27,48)"/><text x="32.9483%" y="175.50"></text></g><g><title>type_of (1,690,068 samples, 0.34%)</title><rect x="33.3962%" y="149" width="0.3387%" height="15" fill="rgb(225,35,8)"/><text x="33.6462%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,157,783 samples, 0.23%)</title><rect x="33.5028%" y="133" width="0.2320%" height="15" fill="rgb(250,213,24)"/><text x="33.7528%" y="143.50"></text></g><g><title>lint_checking (7,284,751 samples, 1.46%)</title><rect x="32.6977%" y="181" width="1.4599%" height="15" fill="rgb(247,123,22)"/><text x="32.9477%" y="191.50"></text></g><g><title>module_lints (2,109,464 samples, 0.42%)</title><rect x="33.7349%" y="165" width="0.4227%" height="15" fill="rgb(231,138,38)"/><text x="33.9849%" y="175.50"></text></g><g><title>lint_mod (2,096,284 samples, 0.42%)</title><rect x="33.7375%" y="149" width="0.4201%" height="15" fill="rgb(231,145,46)"/><text x="33.9875%" y="159.50"></text></g><g><title>privacy_access_levels (1,230,154 samples, 0.25%)</title><rect x="34.1576%" y="181" width="0.2465%" height="15" fill="rgb(251,118,11)"/><text x="34.4076%" y="191.50"></text></g><g><title>privacy_checking_modules (4,331,658 samples, 0.87%)</title><rect x="34.4041%" y="181" width="0.8681%" height="15" fill="rgb(217,147,25)"/><text x="34.6541%" y="191.50"></text></g><g><title>check_mod_privacy (4,323,678 samples, 0.87%)</title><rect x="34.4057%" y="165" width="0.8665%" height="15" fill="rgb(247,81,37)"/><text x="34.6557%" y="175.50"></text></g><g><title>misc_checking_3 (14,941,826 samples, 2.99%)</title><rect x="32.2832%" y="197" width="2.9944%" height="15" fill="rgb(209,12,38)"/><text x="32.5332%" y="207.50">mis..</text></g><g><title>adt_destructor (509,616 samples, 0.10%)</title><rect x="35.3427%" y="149" width="0.1021%" height="15" fill="rgb(227,1,9)"/><text x="35.5927%" y="159.50"></text></g><g><title>coherent_trait (506,556 samples, 0.10%)</title><rect x="35.3433%" y="133" width="0.1015%" height="15" fill="rgb(248,47,43)"/><text x="35.5933%" y="143.50"></text></g><g><title>specialization_graph_of (505,256 samples, 0.10%)</title><rect x="35.3436%" y="117" width="0.1013%" height="15" fill="rgb(221,10,30)"/><text x="35.5936%" y="127.50"></text></g><g><title>impl_parent (3,424,305 samples, 0.69%)</title><rect x="36.7851%" y="133" width="0.6862%" height="15" fill="rgb(210,229,1)"/><text x="37.0351%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,982,351 samples, 0.40%)</title><rect x="37.0740%" y="117" width="0.3973%" height="15" fill="rgb(222,148,37)"/><text x="37.3240%" y="127.50"></text></g><g><title>impl_trait_ref (7,866,817 samples, 1.58%)</title><rect x="37.4713%" y="133" width="1.5765%" height="15" fill="rgb(234,67,33)"/><text x="37.7213%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,015,660 samples, 1.21%)</title><rect x="37.8423%" y="117" width="1.2056%" height="15" fill="rgb(247,98,35)"/><text x="38.0923%" y="127.50"></text></g><g><title>trait_impls_of (1,307,364 samples, 0.26%)</title><rect x="39.0580%" y="133" width="0.2620%" height="15" fill="rgb(247,138,52)"/><text x="39.3080%" y="143.50"></text></g><g><title>coherent_trait (19,898,190 samples, 3.99%)</title><rect x="35.3325%" y="165" width="3.9877%" height="15" fill="rgb(213,79,30)"/><text x="35.5825%" y="175.50">cohe..</text></g><g><title>specialization_graph_of (19,214,542 samples, 3.85%)</title><rect x="35.4695%" y="149" width="3.8507%" height="15" fill="rgb(246,177,23)"/><text x="35.7195%" y="159.50">spec..</text></g><g><title>coherence_checking (20,047,172 samples, 4.02%)</title><rect x="35.3271%" y="181" width="4.0175%" height="15" fill="rgb(230,62,27)"/><text x="35.5771%" y="191.50">cohe..</text></g><g><title>associated_item (564,719 samples, 0.11%)</title><rect x="54.5280%" y="117" width="0.1132%" height="15" fill="rgb(216,154,8)"/><text x="54.7780%" y="127.50"></text></g><g><title>associated_items (840,422 samples, 0.17%)</title><rect x="54.4822%" y="133" width="0.1684%" height="15" fill="rgb(244,35,45)"/><text x="54.7322%" y="143.50"></text></g><g><title>adt_def (1,028,161 samples, 0.21%)</title><rect x="54.9474%" y="101" width="0.2060%" height="15" fill="rgb(251,115,12)"/><text x="55.1974%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (1,023,751 samples, 0.21%)</title><rect x="54.9483%" y="85" width="0.2052%" height="15" fill="rgb(240,54,50)"/><text x="55.1983%" y="95.50"></text></g><g><title>adt_dtorck_constraint (683,677 samples, 0.14%)</title><rect x="55.3220%" y="37" width="0.1370%" height="15" fill="rgb(233,84,52)"/><text x="55.5720%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,008,451 samples, 0.20%)</title><rect x="55.2600%" y="53" width="0.2021%" height="15" fill="rgb(207,117,47)"/><text x="55.5100%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,135,812 samples, 0.23%)</title><rect x="55.2394%" y="69" width="0.2276%" height="15" fill="rgb(249,43,39)"/><text x="55.4894%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,287,892 samples, 0.26%)</title><rect x="55.2139%" y="85" width="0.2581%" height="15" fill="rgb(209,38,44)"/><text x="55.4639%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,585,977 samples, 0.32%)</title><rect x="55.1644%" y="101" width="0.3178%" height="15" fill="rgb(236,212,23)"/><text x="55.4144%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,933,661 samples, 0.59%)</title><rect x="54.9174%" y="117" width="0.5879%" height="15" fill="rgb(242,79,21)"/><text x="55.1674%" y="127.50"></text></g><g><title>dropck_outlives (4,216,055 samples, 0.84%)</title><rect x="54.6946%" y="133" width="0.8449%" height="15" fill="rgb(211,96,35)"/><text x="54.9446%" y="143.50"></text></g><g><title>eval_to_const_value_raw (872,119 samples, 0.17%)</title><rect x="55.5399%" y="133" width="0.1748%" height="15" fill="rgb(253,215,40)"/><text x="55.7899%" y="143.50"></text></g><g><title>eval_to_const_value_raw (859,799 samples, 0.17%)</title><rect x="55.5424%" y="117" width="0.1723%" height="15" fill="rgb(211,81,21)"/><text x="55.7924%" y="127.50"></text></g><g><title>eval_to_allocation_raw (857,209 samples, 0.17%)</title><rect x="55.5429%" y="101" width="0.1718%" height="15" fill="rgb(208,190,38)"/><text x="55.7929%" y="111.50"></text></g><g><title>mir_for_ctfe (931,625 samples, 0.19%)</title><rect x="57.2184%" y="69" width="0.1867%" height="15" fill="rgb(235,213,38)"/><text x="57.4684%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (921,075 samples, 0.18%)</title><rect x="57.2205%" y="53" width="0.1846%" height="15" fill="rgb(237,122,38)"/><text x="57.4705%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,750,110 samples, 0.35%)</title><rect x="57.0624%" y="117" width="0.3507%" height="15" fill="rgb(244,218,35)"/><text x="57.3124%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,723,500 samples, 0.35%)</title><rect x="57.0678%" y="101" width="0.3454%" height="15" fill="rgb(240,68,47)"/><text x="57.3178%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,682,400 samples, 0.34%)</title><rect x="57.0760%" y="85" width="0.3372%" height="15" fill="rgb(210,16,53)"/><text x="57.3260%" y="95.50"></text></g><g><title>generics_of (652,758 samples, 0.13%)</title><rect x="57.4132%" y="117" width="0.1308%" height="15" fill="rgb(235,124,12)"/><text x="57.6632%" y="127.50"></text></g><g><title>impl_trait_ref (879,437 samples, 0.18%)</title><rect x="57.5940%" y="117" width="0.1762%" height="15" fill="rgb(224,169,11)"/><text x="57.8440%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (726,424 samples, 0.15%)</title><rect x="57.6246%" y="101" width="0.1456%" height="15" fill="rgb(250,166,2)"/><text x="57.8746%" y="111.50"></text></g><g><title>predicates_of (1,454,660 samples, 0.29%)</title><rect x="57.7826%" y="117" width="0.2915%" height="15" fill="rgb(242,216,29)"/><text x="58.0326%" y="127.50"></text></g><g><title>predicates_defined_on (967,896 samples, 0.19%)</title><rect x="57.8801%" y="101" width="0.1940%" height="15" fill="rgb(230,116,27)"/><text x="58.1301%" y="111.50"></text></g><g><title>specializes (2,655,589 samples, 0.53%)</title><rect x="58.0893%" y="117" width="0.5322%" height="15" fill="rgb(228,99,48)"/><text x="58.3393%" y="127.50"></text></g><g><title>param_env (1,518,720 samples, 0.30%)</title><rect x="58.3171%" y="101" width="0.3044%" height="15" fill="rgb(253,11,6)"/><text x="58.5671%" y="111.50"></text></g><g><title>def_span (668,668 samples, 0.13%)</title><rect x="58.4875%" y="85" width="0.1340%" height="15" fill="rgb(247,143,39)"/><text x="58.7375%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (593,107 samples, 0.12%)</title><rect x="58.5026%" y="69" width="0.1189%" height="15" fill="rgb(236,97,10)"/><text x="58.7526%" y="79.50"></text></g><g><title>trait_impls_of (787,258 samples, 0.16%)</title><rect x="58.6258%" y="117" width="0.1578%" height="15" fill="rgb(233,208,19)"/><text x="58.8758%" y="127.50"></text></g><g><title>evaluate_obligation (15,325,111 samples, 3.07%)</title><rect x="55.7147%" y="133" width="3.0712%" height="15" fill="rgb(216,164,2)"/><text x="55.9647%" y="143.50">eva..</text></g><g><title>evaluate_obligation (828,257 samples, 0.17%)</title><rect x="59.2257%" y="117" width="0.1660%" height="15" fill="rgb(220,129,5)"/><text x="59.4757%" y="127.50"></text></g><g><title>method_autoderef_steps (1,568,357 samples, 0.31%)</title><rect x="59.0821%" y="133" width="0.3143%" height="15" fill="rgb(242,17,10)"/><text x="59.3321%" y="143.50"></text></g><g><title>predicates_of (698,501 samples, 0.14%)</title><rect x="59.5373%" y="133" width="0.1400%" height="15" fill="rgb(242,107,0)"/><text x="59.7873%" y="143.50"></text></g><g><title>dropck_outlives (1,144,051 samples, 0.23%)</title><rect x="71.3467%" y="117" width="0.2293%" height="15" fill="rgb(251,28,31)"/><text x="71.5967%" y="127.50"></text></g><g><title>generics_of (589,327 samples, 0.12%)</title><rect x="72.6936%" y="101" width="0.1181%" height="15" fill="rgb(233,223,10)"/><text x="72.9436%" y="111.50"></text></g><g><title>impl_trait_ref (854,818 samples, 0.17%)</title><rect x="72.8203%" y="101" width="0.1713%" height="15" fill="rgb(215,21,27)"/><text x="73.0703%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (755,948 samples, 0.15%)</title><rect x="72.8401%" y="85" width="0.1515%" height="15" fill="rgb(232,23,21)"/><text x="73.0901%" y="95.50"></text></g><g><title>evaluate_obligation (7,882,205 samples, 1.58%)</title><rect x="71.5759%" y="117" width="1.5796%" height="15" fill="rgb(244,5,23)"/><text x="71.8259%" y="127.50"></text></g><g><title>generics_of (762,754 samples, 0.15%)</title><rect x="73.1877%" y="117" width="0.1529%" height="15" fill="rgb(226,81,46)"/><text x="73.4377%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (575,253 samples, 0.12%)</title><rect x="73.2253%" y="101" width="0.1153%" height="15" fill="rgb(247,70,30)"/><text x="73.4753%" y="111.50"></text></g><g><title>method_autoderef_steps (2,035,078 samples, 0.41%)</title><rect x="73.5596%" y="117" width="0.4078%" height="15" fill="rgb(212,68,19)"/><text x="73.8096%" y="127.50"></text></g><g><title>evaluate_obligation (918,579 samples, 0.18%)</title><rect x="73.7833%" y="101" width="0.1841%" height="15" fill="rgb(240,187,13)"/><text x="74.0333%" y="111.50"></text></g><g><title>predicates_of (523,475 samples, 0.10%)</title><rect x="73.9778%" y="117" width="0.1049%" height="15" fill="rgb(223,113,26)"/><text x="74.2278%" y="127.50"></text></g><g><title>typeck (71,835,492 samples, 14.40%)</title><rect x="59.7744%" y="133" width="14.3961%" height="15" fill="rgb(206,192,2)"/><text x="60.0244%" y="143.50">typeck</text></g><g><title>item_bodies_checking (173,819,533 samples, 34.83%)</title><rect x="39.3636%" y="181" width="34.8341%" height="15" fill="rgb(241,108,4)"/><text x="39.6136%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (173,815,033 samples, 34.83%)</title><rect x="39.3645%" y="165" width="34.8332%" height="15" fill="rgb(247,173,49)"/><text x="39.6145%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (173,405,848 samples, 34.75%)</title><rect x="39.4465%" y="149" width="34.7512%" height="15" fill="rgb(224,114,35)"/><text x="39.6965%" y="159.50">typeck</text></g><g><title>type_of (958,541 samples, 0.19%)</title><rect x="75.5459%" y="149" width="0.1921%" height="15" fill="rgb(245,159,27)"/><text x="75.7959%" y="159.50"></text></g><g><title>mir_borrowck (919,300 samples, 0.18%)</title><rect x="75.5538%" y="133" width="0.1842%" height="15" fill="rgb(245,172,44)"/><text x="75.8038%" y="143.50"></text></g><g><title>item_types_checking (8,913,709 samples, 1.79%)</title><rect x="74.1977%" y="181" width="1.7863%" height="15" fill="rgb(236,23,11)"/><text x="74.4477%" y="191.50">i..</text></g><g><title>check_mod_item_types (8,902,239 samples, 1.78%)</title><rect x="74.2000%" y="165" width="1.7840%" height="15" fill="rgb(205,117,38)"/><text x="74.4500%" y="175.50">c..</text></g><g><title>typeck (1,227,726 samples, 0.25%)</title><rect x="75.7380%" y="149" width="0.2460%" height="15" fill="rgb(237,72,25)"/><text x="75.9880%" y="159.50"></text></g><g><title>fn_sig (1,719,193 samples, 0.34%)</title><rect x="76.1706%" y="149" width="0.3445%" height="15" fill="rgb(244,70,9)"/><text x="76.4206%" y="159.50"></text></g><g><title>is_late_bound_map (712,151 samples, 0.14%)</title><rect x="76.6085%" y="133" width="0.1427%" height="15" fill="rgb(217,125,39)"/><text x="76.8585%" y="143.50"></text></g><g><title>resolve_lifetimes (675,350 samples, 0.14%)</title><rect x="76.6159%" y="117" width="0.1353%" height="15" fill="rgb(235,36,10)"/><text x="76.8659%" y="127.50"></text></g><g><title>generics_of (1,626,495 samples, 0.33%)</title><rect x="76.5152%" y="149" width="0.3260%" height="15" fill="rgb(251,123,47)"/><text x="76.7652%" y="159.50"></text></g><g><title>lint_levels (533,606 samples, 0.11%)</title><rect x="77.1861%" y="69" width="0.1069%" height="15" fill="rgb(221,13,13)"/><text x="77.4361%" y="79.50"></text></g><g><title>late_bound_vars_map (940,140 samples, 0.19%)</title><rect x="77.1059%" y="101" width="0.1884%" height="15" fill="rgb(238,131,9)"/><text x="77.3559%" y="111.50"></text></g><g><title>resolve_lifetimes (901,289 samples, 0.18%)</title><rect x="77.1137%" y="85" width="0.1806%" height="15" fill="rgb(211,50,8)"/><text x="77.3637%" y="95.50"></text></g><g><title>explicit_predicates_of (1,756,537 samples, 0.35%)</title><rect x="76.9579%" y="117" width="0.3520%" height="15" fill="rgb(245,182,24)"/><text x="77.2079%" y="127.50"></text></g><g><title>predicates_of (2,719,707 samples, 0.55%)</title><rect x="76.8659%" y="149" width="0.5450%" height="15" fill="rgb(242,14,37)"/><text x="77.1159%" y="159.50"></text></g><g><title>predicates_defined_on (2,545,855 samples, 0.51%)</title><rect x="76.9007%" y="133" width="0.5102%" height="15" fill="rgb(246,228,12)"/><text x="77.1507%" y="143.50"></text></g><g><title>inferred_outlives_of (504,056 samples, 0.10%)</title><rect x="77.3099%" y="117" width="0.1010%" height="15" fill="rgb(213,55,15)"/><text x="77.5599%" y="127.50"></text></g><g><title>type_collecting (7,552,834 samples, 1.51%)</title><rect x="75.9850%" y="181" width="1.5136%" height="15" fill="rgb(209,9,3)"/><text x="76.2350%" y="191.50"></text></g><g><title>collect_mod_item_types (7,528,892 samples, 1.51%)</title><rect x="75.9898%" y="165" width="1.5088%" height="15" fill="rgb(230,59,30)"/><text x="76.2398%" y="175.50"></text></g><g><title>evaluate_obligation (1,654,183 samples, 0.33%)</title><rect x="79.8282%" y="149" width="0.3315%" height="15" fill="rgb(209,121,21)"/><text x="80.0782%" y="159.50"></text></g><g><title>implied_outlives_bounds (934,760 samples, 0.19%)</title><rect x="80.1697%" y="149" width="0.1873%" height="15" fill="rgb(220,109,13)"/><text x="80.4197%" y="159.50"></text></g><g><title>param_env (1,577,468 samples, 0.32%)</title><rect x="80.3632%" y="149" width="0.3161%" height="15" fill="rgb(232,18,1)"/><text x="80.6132%" y="159.50"></text></g><g><title>region_scope_tree (1,644,851 samples, 0.33%)</title><rect x="80.7041%" y="149" width="0.3296%" height="15" fill="rgb(215,41,42)"/><text x="80.9541%" y="159.50"></text></g><g><title>check_impl_item_well_formed (16,989,984 samples, 3.40%)</title><rect x="77.6632%" y="165" width="3.4049%" height="15" fill="rgb(224,123,36)"/><text x="77.9132%" y="175.50">che..</text></g><g><title>evaluate_obligation (1,583,557 samples, 0.32%)</title><rect x="81.8226%" y="149" width="0.3174%" height="15" fill="rgb(240,125,3)"/><text x="82.0726%" y="159.50"></text></g><g><title>param_env (681,954 samples, 0.14%)</title><rect x="82.2130%" y="149" width="0.1367%" height="15" fill="rgb(205,98,50)"/><text x="82.4630%" y="159.50"></text></g><g><title>check_item_well_formed (6,977,200 samples, 1.40%)</title><rect x="81.0680%" y="165" width="1.3983%" height="15" fill="rgb(205,185,37)"/><text x="81.3180%" y="175.50"></text></g><g><title>analysis (410,702,494 samples, 82.31%)</title><rect x="0.2073%" y="213" width="82.3065%" height="15" fill="rgb(238,207,15)"/><text x="0.4573%" y="223.50">analysis</text></g><g><title>type_check_crate (235,704,488 samples, 47.24%)</title><rect x="35.2776%" y="197" width="47.2361%" height="15" fill="rgb(213,199,42)"/><text x="35.5276%" y="207.50">type_check_crate</text></g><g><title>wf_checking (24,996,886 samples, 5.01%)</title><rect x="77.5043%" y="181" width="5.0095%" height="15" fill="rgb(235,201,11)"/><text x="77.7543%" y="191.50">wf_che..</text></g><g><title>metadata_load_macro (558,367 samples, 0.11%)</title><rect x="92.3616%" y="165" width="0.1119%" height="15" fill="rgb(207,46,11)"/><text x="92.6116%" y="175.50"></text></g><g><title>metadata_register_crate (1,535,487 samples, 0.31%)</title><rect x="92.4735%" y="165" width="0.3077%" height="15" fill="rgb(241,35,35)"/><text x="92.7235%" y="175.50"></text></g><g><title>metadata_register_crate (542,935 samples, 0.11%)</title><rect x="92.6724%" y="149" width="0.1088%" height="15" fill="rgb(243,32,47)"/><text x="92.9224%" y="159.50"></text></g><g><title>macro_expand_crate (51,365,658 samples, 10.29%)</title><rect x="82.7860%" y="197" width="10.2939%" height="15" fill="rgb(247,202,23)"/><text x="83.0360%" y="207.50">macro_expand_cr..</text></g><g><title>expand_crate (51,351,568 samples, 10.29%)</title><rect x="82.7888%" y="181" width="10.2911%" height="15" fill="rgb(219,102,11)"/><text x="83.0388%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,490,357 samples, 0.30%)</title><rect x="92.7812%" y="165" width="0.2987%" height="15" fill="rgb(243,110,44)"/><text x="93.0312%" y="175.50"></text></g><g><title>late_resolve_crate (6,564,933 samples, 1.32%)</title><rect x="93.1966%" y="181" width="1.3156%" height="15" fill="rgb(222,74,54)"/><text x="93.4466%" y="191.50"></text></g><g><title>configure_and_expand (59,809,711 samples, 11.99%)</title><rect x="82.6042%" y="213" width="11.9861%" height="15" fill="rgb(216,99,12)"/><text x="82.8542%" y="223.50">configure_and_expa..</text></g><g><title>resolve_crate (7,416,082 samples, 1.49%)</title><rect x="93.1041%" y="197" width="1.4862%" height="15" fill="rgb(226,22,26)"/><text x="93.3541%" y="207.50"></text></g><g><title>drop_ast (665,717 samples, 0.13%)</title><rect x="94.5903%" y="213" width="0.1334%" height="15" fill="rgb(217,163,10)"/><text x="94.8403%" y="223.50"></text></g><g><title>early_lint_checks (1,274,274 samples, 0.26%)</title><rect x="94.7279%" y="213" width="0.2554%" height="15" fill="rgb(213,25,53)"/><text x="94.9779%" y="223.50"></text></g><g><title>free_global_ctxt (6,912,997 samples, 1.39%)</title><rect x="94.9833%" y="213" width="1.3854%" height="15" fill="rgb(252,105,26)"/><text x="95.2333%" y="223.50"></text></g><g><title>generate_crate_metadata (3,857,932 samples, 0.77%)</title><rect x="96.3687%" y="213" width="0.7731%" height="15" fill="rgb(220,39,43)"/><text x="96.6187%" y="223.50"></text></g><g><title>hir_lowering (11,140,934 samples, 2.23%)</title><rect x="97.1418%" y="213" width="2.2327%" height="15" fill="rgb(229,68,48)"/><text x="97.3918%" y="223.50">h..</text></g><g><title>self_profile_alloc_query_strings (1,908,732 samples, 0.38%)</title><rect x="99.4994%" y="213" width="0.3825%" height="15" fill="rgb(252,8,32)"/><text x="99.7494%" y="223.50"></text></g><g><title>all (498,991,821 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (498,991,821 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>