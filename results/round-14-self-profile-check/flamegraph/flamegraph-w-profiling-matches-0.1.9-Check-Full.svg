<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>hir_module_items (93,411 samples, 0.70%)</title><rect x="5.3177%" y="149" width="0.6998%" height="15" fill="rgb(227,0,7)"/><text x="5.5677%" y="159.50"></text></g><g><title>hir_owner (29,390 samples, 0.22%)</title><rect x="5.7974%" y="133" width="0.2202%" height="15" fill="rgb(217,0,24)"/><text x="6.0474%" y="143.50"></text></g><g><title>check_mod_attrs (44,011 samples, 0.33%)</title><rect x="6.2031%" y="133" width="0.3297%" height="15" fill="rgb(221,193,54)"/><text x="6.4531%" y="143.50"></text></g><g><title>looking_for_derive_registrar (38,090 samples, 0.29%)</title><rect x="6.7511%" y="133" width="0.2854%" height="15" fill="rgb(248,212,6)"/><text x="7.0011%" y="143.50"></text></g><g><title>proc_macro_decls_static (15,400 samples, 0.12%)</title><rect x="6.9211%" y="117" width="0.1154%" height="15" fill="rgb(208,68,35)"/><text x="7.1711%" y="127.50"></text></g><g><title>misc_checking_1 (139,562 samples, 1.05%)</title><rect x="6.0228%" y="149" width="1.0456%" height="15" fill="rgb(232,128,0)"/><text x="6.2728%" y="159.50"></text></g><g><title>check_private_in_public (20,490 samples, 0.15%)</title><rect x="7.2127%" y="133" width="0.1535%" height="15" fill="rgb(207,160,47)"/><text x="7.4627%" y="143.50"></text></g><g><title>get_lang_items (42,200 samples, 0.32%)</title><rect x="7.8756%" y="101" width="0.3162%" height="15" fill="rgb(228,23,34)"/><text x="8.1256%" y="111.50"></text></g><g><title>codegen_fn_attrs (124,711 samples, 0.93%)</title><rect x="7.6455%" y="117" width="0.9343%" height="15" fill="rgb(218,30,26)"/><text x="7.8955%" y="127.50"></text></g><g><title>supported_target_features (40,251 samples, 0.30%)</title><rect x="8.2782%" y="101" width="0.3016%" height="15" fill="rgb(220,122,19)"/><text x="8.5282%" y="111.50"></text></g><g><title>death_checking (175,322 samples, 1.31%)</title><rect x="7.3662%" y="133" width="1.3135%" height="15" fill="rgb(250,228,42)"/><text x="7.6162%" y="143.50"></text></g><g><title>explicit_predicates_of (50,320 samples, 0.38%)</title><rect x="11.1508%" y="53" width="0.3770%" height="15" fill="rgb(240,193,28)"/><text x="11.4008%" y="63.50"></text></g><g><title>generics_of (31,060 samples, 0.23%)</title><rect x="11.2951%" y="37" width="0.2327%" height="15" fill="rgb(216,20,37)"/><text x="11.5451%" y="47.50"></text></g><g><title>crate_lints (380,134 samples, 2.85%)</title><rect x="8.6958%" y="117" width="2.8479%" height="15" fill="rgb(206,188,39)"/><text x="8.9458%" y="127.50">cr..</text></g><g><title>param_env (316,082 samples, 2.37%)</title><rect x="9.1757%" y="101" width="2.3680%" height="15" fill="rgb(217,207,13)"/><text x="9.4257%" y="111.50">pa..</text></g><g><title>predicates_of (74,340 samples, 0.56%)</title><rect x="10.9868%" y="85" width="0.5569%" height="15" fill="rgb(231,73,38)"/><text x="11.2368%" y="95.50"></text></g><g><title>predicates_defined_on (66,920 samples, 0.50%)</title><rect x="11.0424%" y="69" width="0.5014%" height="15" fill="rgb(225,20,46)"/><text x="11.2924%" y="79.50"></text></g><g><title>lint_checking (395,735 samples, 2.96%)</title><rect x="8.6796%" y="133" width="2.9648%" height="15" fill="rgb(210,31,41)"/><text x="8.9296%" y="143.50">lin..</text></g><g><title>module_lints (13,441 samples, 0.10%)</title><rect x="11.5437%" y="117" width="0.1007%" height="15" fill="rgb(221,200,47)"/><text x="11.7937%" y="127.50"></text></g><g><title>privacy_access_levels (33,051 samples, 0.25%)</title><rect x="11.6444%" y="133" width="0.2476%" height="15" fill="rgb(226,26,5)"/><text x="11.8944%" y="143.50"></text></g><g><title>misc_checking_3 (674,658 samples, 5.05%)</title><rect x="7.1458%" y="149" width="5.0544%" height="15" fill="rgb(249,33,26)"/><text x="7.3958%" y="159.50">misc_c..</text></g><g><title>unused_lib_feature_checking (36,720 samples, 0.28%)</title><rect x="11.9251%" y="133" width="0.2751%" height="15" fill="rgb(235,183,28)"/><text x="12.1751%" y="143.50"></text></g><g><title>coherence_checking (52,740 samples, 0.40%)</title><rect x="12.5058%" y="133" width="0.3951%" height="15" fill="rgb(221,5,38)"/><text x="12.7558%" y="143.50"></text></g><g><title>type_collecting (44,311 samples, 0.33%)</title><rect x="13.1184%" y="133" width="0.3320%" height="15" fill="rgb(247,18,42)"/><text x="13.3684%" y="143.50"></text></g><g><title>collect_mod_item_types (22,530 samples, 0.17%)</title><rect x="13.2816%" y="117" width="0.1688%" height="15" fill="rgb(241,131,45)"/><text x="13.5316%" y="127.50"></text></g><g><title>analysis (1,215,634 samples, 9.11%)</title><rect x="4.5492%" y="165" width="9.1073%" height="15" fill="rgb(249,31,29)"/><text x="4.7992%" y="175.50">analysis</text></g><g><title>type_check_crate (194,392 samples, 1.46%)</title><rect x="12.2002%" y="149" width="1.4563%" height="15" fill="rgb(225,111,53)"/><text x="12.4502%" y="159.50"></text></g><g><title>wf_checking (27,511 samples, 0.21%)</title><rect x="13.4504%" y="133" width="0.2061%" height="15" fill="rgb(238,160,17)"/><text x="13.7004%" y="143.50"></text></g><g><title>codegen_crate (393,445 samples, 2.95%)</title><rect x="13.7313%" y="165" width="2.9476%" height="15" fill="rgb(214,148,48)"/><text x="13.9813%" y="175.50">co..</text></g><g><title>AST_validation (13,360 samples, 0.10%)</title><rect x="18.1991%" y="149" width="0.1001%" height="15" fill="rgb(232,36,49)"/><text x="18.4491%" y="159.50"></text></g><g><title>complete_gated_feature_checking (13,880 samples, 0.10%)</title><rect x="18.2992%" y="149" width="0.1040%" height="15" fill="rgb(209,103,24)"/><text x="18.5492%" y="159.50"></text></g><g><title>crate_injection (85,641 samples, 0.64%)</title><rect x="18.4032%" y="149" width="0.6416%" height="15" fill="rgb(229,88,8)"/><text x="18.6532%" y="159.50"></text></g><g><title>metadata_load_macro (41,780 samples, 0.31%)</title><rect x="67.8102%" y="117" width="0.3130%" height="15" fill="rgb(213,181,19)"/><text x="68.0602%" y="127.50"></text></g><g><title>macro_expand_crate (6,750,975 samples, 50.58%)</title><rect x="19.0448%" y="149" width="50.5770%" height="15" fill="rgb(254,191,54)"/><text x="19.2948%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (6,730,225 samples, 50.42%)</title><rect x="19.2003%" y="133" width="50.4215%" height="15" fill="rgb(241,83,37)"/><text x="19.4503%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (200,032 samples, 1.50%)</title><rect x="68.1232%" y="117" width="1.4986%" height="15" fill="rgb(233,36,39)"/><text x="68.3732%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (91,421 samples, 0.68%)</title><rect x="69.6513%" y="149" width="0.6849%" height="15" fill="rgb(226,3,54)"/><text x="69.9013%" y="159.50"></text></g><g><title>finalize_macro_resolutions (28,170 samples, 0.21%)</title><rect x="70.4877%" y="133" width="0.2110%" height="15" fill="rgb(245,192,40)"/><text x="70.7377%" y="143.50"></text></g><g><title>configure_and_expand (7,241,710 samples, 54.25%)</title><rect x="16.6789%" y="165" width="54.2534%" height="15" fill="rgb(238,167,29)"/><text x="16.9289%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (79,571 samples, 0.60%)</title><rect x="70.3362%" y="149" width="0.5961%" height="15" fill="rgb(232,182,51)"/><text x="70.5862%" y="159.50"></text></g><g><title>drop_ast (20,760 samples, 0.16%)</title><rect x="70.9323%" y="165" width="0.1555%" height="15" fill="rgb(231,60,39)"/><text x="71.1823%" y="175.50"></text></g><g><title>drop_compiler (27,741 samples, 0.21%)</title><rect x="71.0878%" y="165" width="0.2078%" height="15" fill="rgb(208,69,12)"/><text x="71.3378%" y="175.50"></text></g><g><title>early_lint_checks (57,631 samples, 0.43%)</title><rect x="71.2957%" y="165" width="0.4318%" height="15" fill="rgb(235,93,37)"/><text x="71.5457%" y="175.50"></text></g><g><title>free_global_ctxt (919,421 samples, 6.89%)</title><rect x="71.7274%" y="165" width="6.8881%" height="15" fill="rgb(213,116,39)"/><text x="71.9774%" y="175.50">free_glob..</text></g><g><title>crate_hash (128,821 samples, 0.97%)</title><rect x="80.3014%" y="149" width="0.9651%" height="15" fill="rgb(222,207,29)"/><text x="80.5514%" y="159.50"></text></g><g><title>mir_keys (27,860 samples, 0.21%)</title><rect x="81.5032%" y="149" width="0.2087%" height="15" fill="rgb(206,96,30)"/><text x="81.7532%" y="159.50"></text></g><g><title>generate_crate_metadata (418,184 samples, 3.13%)</title><rect x="78.6156%" y="165" width="3.1330%" height="15" fill="rgb(218,138,4)"/><text x="78.8656%" y="175.50">gen..</text></g><g><title>hir_lowering (311,283 samples, 2.33%)</title><rect x="81.7485%" y="165" width="2.3321%" height="15" fill="rgb(250,191,14)"/><text x="81.9985%" y="175.50">h..</text></g><g><title>finish_ongoing_codegen (23,280 samples, 0.17%)</title><rect x="84.1984%" y="149" width="0.1744%" height="15" fill="rgb(239,60,40)"/><text x="84.4484%" y="159.50"></text></g><g><title>link_crate (22,450 samples, 0.17%)</title><rect x="84.3728%" y="149" width="0.1682%" height="15" fill="rgb(206,27,48)"/><text x="84.6228%" y="159.50"></text></g><g><title>link (68,600 samples, 0.51%)</title><rect x="84.0806%" y="165" width="0.5139%" height="15" fill="rgb(225,35,8)"/><text x="84.3306%" y="175.50"></text></g><g><title>parse_crate (791,669 samples, 5.93%)</title><rect x="84.5945%" y="165" width="5.9310%" height="15" fill="rgb(250,213,24)"/><text x="84.8445%" y="175.50">parse_cr..</text></g><g><title>prepare_outputs (280,493 samples, 2.10%)</title><rect x="90.5894%" y="165" width="2.1014%" height="15" fill="rgb(247,123,22)"/><text x="90.8394%" y="175.50">p..</text></g><g><title>self_profile_alloc_query_strings (473,235 samples, 3.55%)</title><rect x="92.6908%" y="165" width="3.5454%" height="15" fill="rgb(231,138,38)"/><text x="92.9408%" y="175.50">self..</text></g><g><title>serialize_dep_graph (15,610 samples, 0.12%)</title><rect x="96.2362%" y="165" width="0.1169%" height="15" fill="rgb(231,145,46)"/><text x="96.4862%" y="175.50"></text></g><g><title>setup_global_ctxt (129,462 samples, 0.97%)</title><rect x="96.3532%" y="165" width="0.9699%" height="15" fill="rgb(251,118,11)"/><text x="96.6032%" y="175.50"></text></g><g><title>all (13,347,928 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,147,25)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (13,347,928 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,81,37)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (357,314 samples, 2.68%)</title><rect x="97.3231%" y="165" width="2.6769%" height="15" fill="rgb(209,12,38)"/><text x="97.5731%" y="175.50">wr..</text></g></svg></svg>