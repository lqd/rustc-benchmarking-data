<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (125,870 samples, 0.14%)</title><rect x="8.4277%" y="117" width="0.1388%" height="15" fill="rgb(227,0,7)"/><text x="8.6777%" y="127.50"></text></g><g><title>codegen_fn_attrs (132,894 samples, 0.15%)</title><rect x="8.8027%" y="101" width="0.1466%" height="15" fill="rgb(217,0,24)"/><text x="9.0527%" y="111.50"></text></g><g><title>adt_drop_tys (92,971 samples, 0.10%)</title><rect x="10.5076%" y="37" width="0.1025%" height="15" fill="rgb(221,193,54)"/><text x="10.7576%" y="47.50"></text></g><g><title>adt_drop_tys (304,203 samples, 0.34%)</title><rect x="10.4794%" y="53" width="0.3355%" height="15" fill="rgb(248,212,6)"/><text x="10.7294%" y="63.50"></text></g><g><title>param_env (108,082 samples, 0.12%)</title><rect x="10.6957%" y="37" width="0.1192%" height="15" fill="rgb(208,68,35)"/><text x="10.9457%" y="47.50"></text></g><g><title>is_copy_raw (118,131 samples, 0.13%)</title><rect x="10.8149%" y="53" width="0.1303%" height="15" fill="rgb(232,128,0)"/><text x="11.0649%" y="63.50"></text></g><g><title>evaluate_obligation (97,411 samples, 0.11%)</title><rect x="10.8378%" y="37" width="0.1074%" height="15" fill="rgb(207,160,47)"/><text x="11.0878%" y="47.50"></text></g><g><title>adt_drop_tys (601,757 samples, 0.66%)</title><rect x="10.4454%" y="69" width="0.6637%" height="15" fill="rgb(228,23,34)"/><text x="10.6954%" y="79.50"></text></g><g><title>param_env (148,553 samples, 0.16%)</title><rect x="10.9452%" y="53" width="0.1639%" height="15" fill="rgb(218,30,26)"/><text x="11.1952%" y="63.50"></text></g><g><title>is_copy_raw (698,006 samples, 0.77%)</title><rect x="11.1091%" y="69" width="0.7699%" height="15" fill="rgb(220,122,19)"/><text x="11.3591%" y="79.50"></text></g><g><title>evaluate_obligation (583,044 samples, 0.64%)</title><rect x="11.2359%" y="53" width="0.6431%" height="15" fill="rgb(250,228,42)"/><text x="11.4859%" y="63.50"></text></g><g><title>needs_drop_raw (1,408,364 samples, 1.55%)</title><rect x="10.3311%" y="85" width="1.5534%" height="15" fill="rgb(240,193,28)"/><text x="10.5811%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (231,490 samples, 0.26%)</title><rect x="12.0517%" y="69" width="0.2553%" height="15" fill="rgb(216,20,37)"/><text x="12.3017%" y="79.50"></text></g><g><title>impl_parent (192,650 samples, 0.21%)</title><rect x="12.6656%" y="53" width="0.2125%" height="15" fill="rgb(206,188,39)"/><text x="12.9156%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (131,580 samples, 0.15%)</title><rect x="12.7330%" y="37" width="0.1451%" height="15" fill="rgb(217,207,13)"/><text x="12.9830%" y="47.50"></text></g><g><title>specialization_graph_of (892,140 samples, 0.98%)</title><rect x="12.3480%" y="69" width="0.9840%" height="15" fill="rgb(231,73,38)"/><text x="12.5980%" y="79.50"></text></g><g><title>impl_trait_ref (411,543 samples, 0.45%)</title><rect x="12.8781%" y="53" width="0.4539%" height="15" fill="rgb(225,20,46)"/><text x="13.1281%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (352,943 samples, 0.39%)</title><rect x="12.9427%" y="37" width="0.3893%" height="15" fill="rgb(210,31,41)"/><text x="13.1927%" y="47.50"></text></g><g><title>resolve_instance (1,390,004 samples, 1.53%)</title><rect x="11.8845%" y="85" width="1.5332%" height="15" fill="rgb(221,200,47)"/><text x="12.1345%" y="95.50"></text></g><g><title>thir_body (348,823 samples, 0.38%)</title><rect x="13.4286%" y="85" width="0.3847%" height="15" fill="rgb(226,26,5)"/><text x="13.6786%" y="95.50"></text></g><g><title>mir_const (5,585,691 samples, 6.16%)</title><rect x="7.7355%" y="133" width="6.1609%" height="15" fill="rgb(249,33,26)"/><text x="7.9855%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,832,224 samples, 5.33%)</title><rect x="8.5666%" y="117" width="5.3299%" height="15" fill="rgb(235,183,28)"/><text x="8.8166%" y="127.50">unsafet..</text></g><g><title>mir_built (4,485,199 samples, 4.95%)</title><rect x="8.9493%" y="101" width="4.9471%" height="15" fill="rgb(221,5,38)"/><text x="9.1993%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (5,978,605 samples, 6.59%)</title><rect x="7.3236%" y="149" width="6.5943%" height="15" fill="rgb(247,18,42)"/><text x="7.5736%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (475,036 samples, 0.52%)</title><rect x="13.9180%" y="149" width="0.5240%" height="15" fill="rgb(241,131,45)"/><text x="14.1680%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (363,425 samples, 0.40%)</title><rect x="14.4419%" y="149" width="0.4009%" height="15" fill="rgb(249,31,29)"/><text x="14.6919%" y="159.50"></text></g><g><title>normalize_projection_ty (148,092 samples, 0.16%)</title><rect x="14.6794%" y="133" width="0.1633%" height="15" fill="rgb(225,111,53)"/><text x="14.9294%" y="143.50"></text></g><g><title>type_op_normalize_predicate (146,481 samples, 0.16%)</title><rect x="14.8428%" y="149" width="0.1616%" height="15" fill="rgb(238,160,17)"/><text x="15.0928%" y="159.50"></text></g><g><title>type_op_normalize_ty (169,733 samples, 0.19%)</title><rect x="15.0043%" y="149" width="0.1872%" height="15" fill="rgb(214,148,48)"/><text x="15.2543%" y="159.50"></text></g><g><title>normalize_projection_ty (104,082 samples, 0.11%)</title><rect x="15.0768%" y="133" width="0.1148%" height="15" fill="rgb(232,36,49)"/><text x="15.3268%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,508,401 samples, 2.77%)</title><rect x="15.1916%" y="149" width="2.7667%" height="15" fill="rgb(209,103,24)"/><text x="15.4416%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (15,301,949 samples, 16.88%)</title><rect x="1.0863%" y="181" width="16.8778%" height="15" fill="rgb(229,88,8)"/><text x="1.3363%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,257,768 samples, 16.83%)</title><rect x="1.1351%" y="165" width="16.8291%" height="15" fill="rgb(213,181,19)"/><text x="1.3851%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (185,552 samples, 0.20%)</title><rect x="17.9817%" y="181" width="0.2047%" height="15" fill="rgb(254,191,54)"/><text x="18.2317%" y="191.50"></text></g><g><title>get_lang_items (109,511 samples, 0.12%)</title><rect x="18.5498%" y="133" width="0.1208%" height="15" fill="rgb(241,83,37)"/><text x="18.7998%" y="143.50"></text></g><g><title>item_attrs (115,301 samples, 0.13%)</title><rect x="18.8268%" y="101" width="0.1272%" height="15" fill="rgb(233,36,39)"/><text x="19.0768%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,431 samples, 0.12%)</title><rect x="18.8388%" y="85" width="0.1152%" height="15" fill="rgb(226,3,54)"/><text x="19.0888%" y="95.50"></text></g><g><title>codegen_fn_attrs (175,181 samples, 0.19%)</title><rect x="18.8040%" y="117" width="0.1932%" height="15" fill="rgb(245,192,40)"/><text x="19.0540%" y="127.50"></text></g><g><title>should_inherit_track_caller (302,151 samples, 0.33%)</title><rect x="18.6706%" y="133" width="0.3333%" height="15" fill="rgb(238,167,29)"/><text x="18.9206%" y="143.50"></text></g><g><title>codegen_fn_attrs (518,243 samples, 0.57%)</title><rect x="18.4668%" y="149" width="0.5716%" height="15" fill="rgb(232,182,51)"/><text x="18.7168%" y="159.50"></text></g><g><title>check_mod_attrs (744,198 samples, 0.82%)</title><rect x="18.2183%" y="165" width="0.8208%" height="15" fill="rgb(231,60,39)"/><text x="18.4683%" y="175.50"></text></g><g><title>check_mod_const_bodies (109,041 samples, 0.12%)</title><rect x="19.0392%" y="165" width="0.1203%" height="15" fill="rgb(208,69,12)"/><text x="19.2892%" y="175.50"></text></g><g><title>lookup_deprecation_entry (163,922 samples, 0.18%)</title><rect x="19.4515%" y="149" width="0.1808%" height="15" fill="rgb(235,93,37)"/><text x="19.7015%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (441,665 samples, 0.49%)</title><rect x="19.2556%" y="165" width="0.4872%" height="15" fill="rgb(213,116,39)"/><text x="19.5056%" y="175.50"></text></g><g><title>misc_checking_1 (1,470,847 samples, 1.62%)</title><rect x="18.1872%" y="181" width="1.6223%" height="15" fill="rgb(222,207,29)"/><text x="18.4372%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (248,352 samples, 0.27%)</title><rect x="19.8111%" y="165" width="0.2739%" height="15" fill="rgb(206,96,30)"/><text x="20.0611%" y="175.50"></text></g><g><title>check_mod_liveness (206,792 samples, 0.23%)</title><rect x="19.8569%" y="149" width="0.2281%" height="15" fill="rgb(218,138,4)"/><text x="20.1069%" y="159.50"></text></g><g><title>misc_checking_2 (462,846 samples, 0.51%)</title><rect x="19.8095%" y="181" width="0.5105%" height="15" fill="rgb(250,191,14)"/><text x="20.0595%" y="191.50"></text></g><g><title>match_checking (213,053 samples, 0.23%)</title><rect x="20.0850%" y="165" width="0.2350%" height="15" fill="rgb(239,60,40)"/><text x="20.3350%" y="175.50"></text></g><g><title>check_match (201,443 samples, 0.22%)</title><rect x="20.0978%" y="149" width="0.2222%" height="15" fill="rgb(206,27,48)"/><text x="20.3478%" y="159.50"></text></g><g><title>check_private_in_public (117,761 samples, 0.13%)</title><rect x="20.3303%" y="165" width="0.1299%" height="15" fill="rgb(225,35,8)"/><text x="20.5803%" y="175.50"></text></g><g><title>death_checking (581,947 samples, 0.64%)</title><rect x="20.4602%" y="165" width="0.6419%" height="15" fill="rgb(250,213,24)"/><text x="20.7102%" y="175.50"></text></g><g><title>item_attrs (419,954 samples, 0.46%)</title><rect x="20.6389%" y="149" width="0.4632%" height="15" fill="rgb(247,123,22)"/><text x="20.8889%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (418,974 samples, 0.46%)</title><rect x="20.6400%" y="133" width="0.4621%" height="15" fill="rgb(231,138,38)"/><text x="20.8900%" y="143.50"></text></g><g><title>param_env (100,421 samples, 0.11%)</title><rect x="21.7307%" y="133" width="0.1108%" height="15" fill="rgb(231,145,46)"/><text x="21.9807%" y="143.50"></text></g><g><title>crate_lints (1,784,400 samples, 1.97%)</title><rect x="21.1036%" y="149" width="1.9682%" height="15" fill="rgb(251,118,11)"/><text x="21.3536%" y="159.50">c..</text></g><g><title>type_of (1,113,585 samples, 1.23%)</title><rect x="21.8435%" y="133" width="1.2283%" height="15" fill="rgb(217,147,25)"/><text x="22.0935%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (852,112 samples, 0.94%)</title><rect x="22.1319%" y="117" width="0.9399%" height="15" fill="rgb(247,81,37)"/><text x="22.3819%" y="127.50"></text></g><g><title>lint_checking (1,944,151 samples, 2.14%)</title><rect x="21.1021%" y="165" width="2.1444%" height="15" fill="rgb(209,12,38)"/><text x="21.3521%" y="175.50">l..</text></g><g><title>module_lints (158,351 samples, 0.17%)</title><rect x="23.0718%" y="149" width="0.1747%" height="15" fill="rgb(227,1,9)"/><text x="23.3218%" y="159.50"></text></g><g><title>lint_mod (155,201 samples, 0.17%)</title><rect x="23.0753%" y="133" width="0.1712%" height="15" fill="rgb(248,47,43)"/><text x="23.3253%" y="143.50"></text></g><g><title>privacy_access_levels (143,672 samples, 0.16%)</title><rect x="23.2465%" y="165" width="0.1585%" height="15" fill="rgb(221,10,30)"/><text x="23.4965%" y="175.50"></text></g><g><title>privacy_checking_modules (427,645 samples, 0.47%)</title><rect x="23.4049%" y="165" width="0.4717%" height="15" fill="rgb(210,229,1)"/><text x="23.6549%" y="175.50"></text></g><g><title>check_mod_privacy (425,195 samples, 0.47%)</title><rect x="23.4076%" y="149" width="0.4690%" height="15" fill="rgb(222,148,37)"/><text x="23.6576%" y="159.50"></text></g><g><title>misc_checking_3 (3,235,676 samples, 3.57%)</title><rect x="20.3200%" y="181" width="3.5689%" height="15" fill="rgb(234,67,33)"/><text x="20.5700%" y="191.50">misc..</text></g><g><title>impl_parent (1,830,566 samples, 2.02%)</title><rect x="26.8646%" y="117" width="2.0191%" height="15" fill="rgb(247,98,35)"/><text x="27.1146%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (982,311 samples, 1.08%)</title><rect x="27.8002%" y="101" width="1.0835%" height="15" fill="rgb(247,138,52)"/><text x="28.0502%" y="111.50"></text></g><g><title>impl_trait_ref (4,950,963 samples, 5.46%)</title><rect x="28.8837%" y="117" width="5.4608%" height="15" fill="rgb(213,79,30)"/><text x="29.1337%" y="127.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,320,294 samples, 4.77%)</title><rect x="29.5793%" y="101" width="4.7652%" height="15" fill="rgb(246,177,23)"/><text x="29.8293%" y="111.50">metada..</text></g><g><title>coherent_trait (10,050,801 samples, 11.09%)</title><rect x="23.9542%" y="149" width="11.0859%" height="15" fill="rgb(230,62,27)"/><text x="24.2042%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (10,035,841 samples, 11.07%)</title><rect x="23.9707%" y="133" width="11.0694%" height="15" fill="rgb(216,154,8)"/><text x="24.2207%" y="143.50">specialization_g..</text></g><g><title>trait_impls_of (628,966 samples, 0.69%)</title><rect x="34.3463%" y="117" width="0.6937%" height="15" fill="rgb(244,35,45)"/><text x="34.5963%" y="127.50"></text></g><g><title>implementations_of_trait (141,420 samples, 0.16%)</title><rect x="34.8841%" y="101" width="0.1560%" height="15" fill="rgb(251,115,12)"/><text x="35.1341%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (113,900 samples, 0.13%)</title><rect x="34.9144%" y="85" width="0.1256%" height="15" fill="rgb(240,54,50)"/><text x="35.1644%" y="95.50"></text></g><g><title>coherence_checking (10,132,273 samples, 11.18%)</title><rect x="23.9337%" y="165" width="11.1758%" height="15" fill="rgb(233,84,52)"/><text x="24.1837%" y="175.50">coherence_checki..</text></g><g><title>adt_sized_constraint (91,921 samples, 0.10%)</title><rect x="46.8359%" y="117" width="0.1014%" height="15" fill="rgb(207,117,47)"/><text x="47.0859%" y="127.50"></text></g><g><title>associated_item (197,371 samples, 0.22%)</title><rect x="47.0354%" y="101" width="0.2177%" height="15" fill="rgb(249,43,39)"/><text x="47.2854%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (156,431 samples, 0.17%)</title><rect x="47.0805%" y="85" width="0.1725%" height="15" fill="rgb(209,38,44)"/><text x="47.3305%" y="95.50"></text></g><g><title>associated_items (295,144 samples, 0.33%)</title><rect x="46.9469%" y="117" width="0.3255%" height="15" fill="rgb(236,212,23)"/><text x="47.1969%" y="127.50"></text></g><g><title>adt_dtorck_constraint (104,771 samples, 0.12%)</title><rect x="47.8972%" y="53" width="0.1156%" height="15" fill="rgb(242,79,21)"/><text x="48.1472%" y="63.50"></text></g><g><title>adt_dtorck_constraint (171,852 samples, 0.19%)</title><rect x="47.8414%" y="69" width="0.1896%" height="15" fill="rgb(211,96,35)"/><text x="48.0914%" y="79.50"></text></g><g><title>adt_dtorck_constraint (258,144 samples, 0.28%)</title><rect x="47.7547%" y="85" width="0.2847%" height="15" fill="rgb(253,215,40)"/><text x="48.0047%" y="95.50"></text></g><g><title>adt_dtorck_constraint (398,694 samples, 0.44%)</title><rect x="47.6369%" y="101" width="0.4398%" height="15" fill="rgb(211,81,21)"/><text x="47.8869%" y="111.50"></text></g><g><title>dropck_outlives (731,376 samples, 0.81%)</title><rect x="47.3280%" y="117" width="0.8067%" height="15" fill="rgb(208,190,38)"/><text x="47.5780%" y="127.50"></text></g><g><title>generics_of (144,852 samples, 0.16%)</title><rect x="49.5456%" y="101" width="0.1598%" height="15" fill="rgb(235,213,38)"/><text x="49.7956%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (121,091 samples, 0.13%)</title><rect x="49.5718%" y="85" width="0.1336%" height="15" fill="rgb(237,122,38)"/><text x="49.8218%" y="95.50"></text></g><g><title>impl_trait_ref (271,461 samples, 0.30%)</title><rect x="49.7193%" y="101" width="0.2994%" height="15" fill="rgb(244,218,35)"/><text x="49.9693%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (247,911 samples, 0.27%)</title><rect x="49.7453%" y="85" width="0.2734%" height="15" fill="rgb(240,68,47)"/><text x="49.9953%" y="95.50"></text></g><g><title>specializes (195,701 samples, 0.22%)</title><rect x="50.1044%" y="101" width="0.2159%" height="15" fill="rgb(210,16,53)"/><text x="50.3544%" y="111.50"></text></g><g><title>param_env (124,181 samples, 0.14%)</title><rect x="50.1832%" y="85" width="0.1370%" height="15" fill="rgb(235,124,12)"/><text x="50.4332%" y="95.50"></text></g><g><title>trait_impls_of (177,611 samples, 0.20%)</title><rect x="50.3261%" y="101" width="0.1959%" height="15" fill="rgb(224,169,11)"/><text x="50.5761%" y="111.50"></text></g><g><title>evaluate_obligation (2,165,333 samples, 2.39%)</title><rect x="48.1347%" y="117" width="2.3883%" height="15" fill="rgb(250,166,2)"/><text x="48.3847%" y="127.50">ev..</text></g><g><title>generics_of (144,450 samples, 0.16%)</title><rect x="50.6337%" y="117" width="0.1593%" height="15" fill="rgb(242,216,29)"/><text x="50.8837%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (118,840 samples, 0.13%)</title><rect x="50.6620%" y="101" width="0.1311%" height="15" fill="rgb(230,116,27)"/><text x="50.9120%" y="111.50"></text></g><g><title>impl_trait_ref (104,542 samples, 0.12%)</title><rect x="50.8715%" y="117" width="0.1153%" height="15" fill="rgb(228,99,48)"/><text x="51.1215%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (91,662 samples, 0.10%)</title><rect x="50.8857%" y="101" width="0.1011%" height="15" fill="rgb(253,11,6)"/><text x="51.1357%" y="111.50"></text></g><g><title>item_attrs (102,371 samples, 0.11%)</title><rect x="51.0132%" y="117" width="0.1129%" height="15" fill="rgb(247,143,39)"/><text x="51.2632%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,461 samples, 0.11%)</title><rect x="51.0175%" y="101" width="0.1086%" height="15" fill="rgb(236,97,10)"/><text x="51.2675%" y="111.50"></text></g><g><title>method_autoderef_steps (376,337 samples, 0.42%)</title><rect x="51.1817%" y="117" width="0.4151%" height="15" fill="rgb(233,208,19)"/><text x="51.4317%" y="127.50"></text></g><g><title>evaluate_obligation (184,031 samples, 0.20%)</title><rect x="51.3938%" y="101" width="0.2030%" height="15" fill="rgb(216,164,2)"/><text x="51.6438%" y="111.50"></text></g><g><title>object_safety_violations (130,431 samples, 0.14%)</title><rect x="51.5968%" y="117" width="0.1439%" height="15" fill="rgb(220,129,5)"/><text x="51.8468%" y="127.50"></text></g><g><title>explicit_predicates_of (104,001 samples, 0.11%)</title><rect x="51.9418%" y="85" width="0.1147%" height="15" fill="rgb(242,17,10)"/><text x="52.1918%" y="95.50"></text></g><g><title>predicates_of (291,812 samples, 0.32%)</title><rect x="51.7740%" y="117" width="0.3219%" height="15" fill="rgb(242,107,0)"/><text x="52.0240%" y="127.50"></text></g><g><title>predicates_defined_on (205,341 samples, 0.23%)</title><rect x="51.8694%" y="101" width="0.2265%" height="15" fill="rgb(251,28,31)"/><text x="52.1194%" y="111.50"></text></g><g><title>type_of (230,802 samples, 0.25%)</title><rect x="52.1498%" y="117" width="0.2546%" height="15" fill="rgb(233,223,10)"/><text x="52.3998%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (215,612 samples, 0.24%)</title><rect x="52.1665%" y="101" width="0.2378%" height="15" fill="rgb(215,21,27)"/><text x="52.4165%" y="111.50"></text></g><g><title>item_bodies_checking (15,665,635 samples, 17.28%)</title><rect x="35.1711%" y="165" width="17.2790%" height="15" fill="rgb(232,23,21)"/><text x="35.4211%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,662,465 samples, 17.28%)</title><rect x="35.1746%" y="149" width="17.2755%" height="15" fill="rgb(244,5,23)"/><text x="35.4246%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (15,627,405 samples, 17.24%)</title><rect x="35.2133%" y="133" width="17.2368%" height="15" fill="rgb(226,81,46)"/><text x="35.4633%" y="143.50">typeck</text></g><g><title>impl_trait_ref (156,572 samples, 0.17%)</title><rect x="53.2690%" y="85" width="0.1727%" height="15" fill="rgb(247,70,30)"/><text x="53.5190%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (137,292 samples, 0.15%)</title><rect x="53.2902%" y="69" width="0.1514%" height="15" fill="rgb(212,68,19)"/><text x="53.5402%" y="79.50"></text></g><g><title>adt_destructor (327,994 samples, 0.36%)</title><rect x="53.1090%" y="133" width="0.3618%" height="15" fill="rgb(240,187,13)"/><text x="53.3590%" y="143.50"></text></g><g><title>coherent_trait (323,924 samples, 0.36%)</title><rect x="53.1135%" y="117" width="0.3573%" height="15" fill="rgb(223,113,26)"/><text x="53.3635%" y="127.50"></text></g><g><title>specialization_graph_of (321,704 samples, 0.35%)</title><rect x="53.1159%" y="101" width="0.3548%" height="15" fill="rgb(206,192,2)"/><text x="53.3659%" y="111.50"></text></g><g><title>item_types_checking (1,009,071 samples, 1.11%)</title><rect x="52.4501%" y="165" width="1.1130%" height="15" fill="rgb(241,108,4)"/><text x="52.7001%" y="175.50"></text></g><g><title>check_mod_item_types (1,006,101 samples, 1.11%)</title><rect x="52.4534%" y="149" width="1.1097%" height="15" fill="rgb(247,173,49)"/><text x="52.7034%" y="159.50"></text></g><g><title>fn_sig (503,354 samples, 0.56%)</title><rect x="53.9005%" y="133" width="0.5552%" height="15" fill="rgb(224,114,35)"/><text x="54.1505%" y="143.50"></text></g><g><title>type_param_predicates (141,051 samples, 0.16%)</title><rect x="54.3001%" y="117" width="0.1556%" height="15" fill="rgb(245,159,27)"/><text x="54.5501%" y="127.50"></text></g><g><title>type_param_predicates (136,511 samples, 0.15%)</title><rect x="54.3051%" y="101" width="0.1506%" height="15" fill="rgb(245,172,44)"/><text x="54.5551%" y="111.50"></text></g><g><title>is_late_bound_map (318,893 samples, 0.35%)</title><rect x="54.6149%" y="117" width="0.3517%" height="15" fill="rgb(236,23,11)"/><text x="54.8649%" y="127.50"></text></g><g><title>resolve_lifetimes (301,493 samples, 0.33%)</title><rect x="54.6341%" y="101" width="0.3325%" height="15" fill="rgb(205,117,38)"/><text x="54.8841%" y="111.50"></text></g><g><title>generics_of (543,535 samples, 0.60%)</title><rect x="54.4557%" y="133" width="0.5995%" height="15" fill="rgb(237,72,25)"/><text x="54.7057%" y="143.50"></text></g><g><title>item_bounds (155,151 samples, 0.17%)</title><rect x="55.1257%" y="133" width="0.1711%" height="15" fill="rgb(244,70,9)"/><text x="55.3757%" y="143.50"></text></g><g><title>lint_levels (136,431 samples, 0.15%)</title><rect x="56.3072%" y="53" width="0.1505%" height="15" fill="rgb(217,125,39)"/><text x="56.5572%" y="63.50"></text></g><g><title>late_bound_vars_map (439,636 samples, 0.48%)</title><rect x="55.9766%" y="85" width="0.4849%" height="15" fill="rgb(235,36,10)"/><text x="56.2266%" y="95.50"></text></g><g><title>resolve_lifetimes (414,466 samples, 0.46%)</title><rect x="56.0043%" y="69" width="0.4572%" height="15" fill="rgb(251,123,47)"/><text x="56.2543%" y="79.50"></text></g><g><title>explicit_predicates_of (973,021 samples, 1.07%)</title><rect x="55.4363%" y="101" width="1.0732%" height="15" fill="rgb(221,13,13)"/><text x="55.6863%" y="111.50"></text></g><g><title>predicates_of (1,277,434 samples, 1.41%)</title><rect x="55.2968%" y="133" width="1.4090%" height="15" fill="rgb(238,131,9)"/><text x="55.5468%" y="143.50"></text></g><g><title>predicates_defined_on (1,229,714 samples, 1.36%)</title><rect x="55.3495%" y="117" width="1.3564%" height="15" fill="rgb(211,50,8)"/><text x="55.5995%" y="127.50"></text></g><g><title>inferred_outlives_of (177,912 samples, 0.20%)</title><rect x="56.5096%" y="101" width="0.1962%" height="15" fill="rgb(245,182,24)"/><text x="56.7596%" y="111.50"></text></g><g><title>inferred_outlives_crate (158,981 samples, 0.18%)</title><rect x="56.5305%" y="85" width="0.1754%" height="15" fill="rgb(242,14,37)"/><text x="56.7805%" y="95.50"></text></g><g><title>type_collecting (3,132,974 samples, 3.46%)</title><rect x="53.5648%" y="165" width="3.4556%" height="15" fill="rgb(246,228,12)"/><text x="53.8148%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (3,122,324 samples, 3.44%)</title><rect x="53.5766%" y="149" width="3.4439%" height="15" fill="rgb(213,55,15)"/><text x="53.8266%" y="159.50">col..</text></g><g><title>type_of (237,803 samples, 0.26%)</title><rect x="56.7581%" y="133" width="0.2623%" height="15" fill="rgb(209,9,3)"/><text x="57.0081%" y="143.50"></text></g><g><title>adt_sized_constraint (93,832 samples, 0.10%)</title><rect x="59.8884%" y="85" width="0.1035%" height="15" fill="rgb(230,59,30)"/><text x="60.1384%" y="95.50"></text></g><g><title>adt_sized_constraint (121,012 samples, 0.13%)</title><rect x="59.8671%" y="101" width="0.1335%" height="15" fill="rgb(209,121,21)"/><text x="60.1171%" y="111.50"></text></g><g><title>adt_sized_constraint (167,882 samples, 0.19%)</title><rect x="59.8169%" y="117" width="0.1852%" height="15" fill="rgb(220,109,13)"/><text x="60.0669%" y="127.50"></text></g><g><title>evaluate_obligation (548,347 samples, 0.60%)</title><rect x="59.4301%" y="133" width="0.6048%" height="15" fill="rgb(232,18,1)"/><text x="59.6801%" y="143.50"></text></g><g><title>implied_outlives_bounds (336,533 samples, 0.37%)</title><rect x="60.0569%" y="133" width="0.3712%" height="15" fill="rgb(215,41,42)"/><text x="60.3069%" y="143.50"></text></g><g><title>param_env (338,284 samples, 0.37%)</title><rect x="60.4281%" y="133" width="0.3731%" height="15" fill="rgb(224,123,36)"/><text x="60.6781%" y="143.50"></text></g><g><title>region_scope_tree (165,602 samples, 0.18%)</title><rect x="60.8691%" y="133" width="0.1827%" height="15" fill="rgb(240,125,3)"/><text x="61.1191%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,604,732 samples, 3.98%)</title><rect x="57.1445%" y="149" width="3.9760%" height="15" fill="rgb(205,98,50)"/><text x="57.3945%" y="159.50">chec..</text></g><g><title>adt_sized_constraint (102,921 samples, 0.11%)</title><rect x="62.8567%" y="133" width="0.1135%" height="15" fill="rgb(205,185,37)"/><text x="63.1067%" y="143.50"></text></g><g><title>adt_def (94,891 samples, 0.10%)</title><rect x="63.2802%" y="101" width="0.1047%" height="15" fill="rgb(238,207,15)"/><text x="63.5302%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (93,591 samples, 0.10%)</title><rect x="63.2816%" y="85" width="0.1032%" height="15" fill="rgb(213,199,42)"/><text x="63.5316%" y="95.50"></text></g><g><title>adt_sized_constraint (150,342 samples, 0.17%)</title><rect x="63.2715%" y="117" width="0.1658%" height="15" fill="rgb(235,201,11)"/><text x="63.5215%" y="127.50"></text></g><g><title>evaluate_obligation (528,247 samples, 0.58%)</title><rect x="62.9706%" y="133" width="0.5826%" height="15" fill="rgb(207,46,11)"/><text x="63.2206%" y="143.50"></text></g><g><title>implied_outlives_bounds (119,800 samples, 0.13%)</title><rect x="63.5814%" y="133" width="0.1321%" height="15" fill="rgb(241,35,35)"/><text x="63.8314%" y="143.50"></text></g><g><title>param_env (248,631 samples, 0.27%)</title><rect x="63.7175%" y="133" width="0.2742%" height="15" fill="rgb(243,32,47)"/><text x="63.9675%" y="143.50"></text></g><g><title>trait_impls_of (455,315 samples, 0.50%)</title><rect x="64.1022%" y="133" width="0.5022%" height="15" fill="rgb(247,202,23)"/><text x="64.3522%" y="143.50"></text></g><g><title>implementations_of_trait (121,532 samples, 0.13%)</title><rect x="64.4704%" y="117" width="0.1340%" height="15" fill="rgb(219,102,11)"/><text x="64.7204%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (97,501 samples, 0.11%)</title><rect x="64.4969%" y="101" width="0.1075%" height="15" fill="rgb(243,110,44)"/><text x="64.7469%" y="111.50"></text></g><g><title>check_item_well_formed (3,224,503 samples, 3.56%)</title><rect x="61.1205%" y="149" width="3.5566%" height="15" fill="rgb(222,74,54)"/><text x="61.3705%" y="159.50">chec..</text></g><g><title>analysis (58,209,486 samples, 64.20%)</title><rect x="0.7313%" y="197" width="64.2042%" height="15" fill="rgb(216,99,12)"/><text x="0.9813%" y="207.50">analysis</text></g><g><title>type_check_crate (37,214,073 samples, 41.05%)</title><rect x="23.8889%" y="181" width="41.0466%" height="15" fill="rgb(226,22,26)"/><text x="24.1389%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,174,169 samples, 7.91%)</title><rect x="57.0225%" y="165" width="7.9130%" height="15" fill="rgb(217,163,10)"/><text x="57.2725%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (234,333 samples, 0.26%)</title><rect x="64.6770%" y="149" width="0.2585%" height="15" fill="rgb(213,25,53)"/><text x="64.9270%" y="159.50"></text></g><g><title>codegen_crate (380,594 samples, 0.42%)</title><rect x="64.9478%" y="197" width="0.4198%" height="15" fill="rgb(252,105,26)"/><text x="65.1978%" y="207.50"></text></g><g><title>AST_validation (112,101 samples, 0.12%)</title><rect x="65.5810%" y="181" width="0.1236%" height="15" fill="rgb(220,39,43)"/><text x="65.8310%" y="191.50"></text></g><g><title>metadata_load_macro (345,383 samples, 0.38%)</title><rect x="80.2018%" y="149" width="0.3810%" height="15" fill="rgb(229,68,48)"/><text x="80.4518%" y="159.50"></text></g><g><title>macro_expand_crate (15,850,776 samples, 17.48%)</title><rect x="65.8489%" y="181" width="17.4832%" height="15" fill="rgb(252,8,32)"/><text x="66.0989%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (15,828,206 samples, 17.46%)</title><rect x="65.8738%" y="165" width="17.4583%" height="15" fill="rgb(223,20,43)"/><text x="66.1238%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,492,668 samples, 2.75%)</title><rect x="80.5827%" y="149" width="2.7494%" height="15" fill="rgb(229,81,49)"/><text x="80.8327%" y="159.50">me..</text></g><g><title>metadata_register_crate (912,723 samples, 1.01%)</title><rect x="82.3254%" y="133" width="1.0067%" height="15" fill="rgb(236,28,36)"/><text x="82.5754%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (222,032 samples, 0.24%)</title><rect x="83.3430%" y="181" width="0.2449%" height="15" fill="rgb(249,185,26)"/><text x="83.5930%" y="191.50"></text></g><g><title>late_resolve_crate (1,714,418 samples, 1.89%)</title><rect x="83.7487%" y="165" width="1.8910%" height="15" fill="rgb(249,174,33)"/><text x="83.9987%" y="175.50">l..</text></g><g><title>configure_and_expand (18,482,215 samples, 20.39%)</title><rect x="65.3676%" y="197" width="20.3856%" height="15" fill="rgb(233,201,37)"/><text x="65.6176%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,963,101 samples, 2.17%)</title><rect x="83.5879%" y="181" width="2.1653%" height="15" fill="rgb(221,78,26)"/><text x="83.8379%" y="191.50">r..</text></g><g><title>drop_ast (186,813 samples, 0.21%)</title><rect x="85.7532%" y="197" width="0.2061%" height="15" fill="rgb(250,127,30)"/><text x="86.0032%" y="207.50"></text></g><g><title>early_lint_checks (312,753 samples, 0.34%)</title><rect x="85.9767%" y="197" width="0.3450%" height="15" fill="rgb(230,49,44)"/><text x="86.2267%" y="207.50"></text></g><g><title>free_global_ctxt (3,185,115 samples, 3.51%)</title><rect x="86.3216%" y="197" width="3.5131%" height="15" fill="rgb(229,67,23)"/><text x="86.5716%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (687,068 samples, 0.76%)</title><rect x="89.8347%" y="197" width="0.7578%" height="15" fill="rgb(249,83,47)"/><text x="90.0847%" y="207.50"></text></g><g><title>hir_lowering (2,872,392 samples, 3.17%)</title><rect x="90.5926%" y="197" width="3.1682%" height="15" fill="rgb(215,43,3)"/><text x="90.8426%" y="207.50">hir..</text></g><g><title>parse_crate (4,277,807 samples, 4.72%)</title><rect x="93.8199%" y="197" width="4.7184%" height="15" fill="rgb(238,154,13)"/><text x="94.0699%" y="207.50">parse..</text></g><g><title>prepare_outputs (289,473 samples, 0.32%)</title><rect x="98.5473%" y="197" width="0.3193%" height="15" fill="rgb(219,56,2)"/><text x="98.7973%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (566,977 samples, 0.63%)</title><rect x="98.8666%" y="197" width="0.6254%" height="15" fill="rgb(233,0,4)"/><text x="99.1166%" y="207.50"></text></g><g><title>setup_global_ctxt (143,501 samples, 0.16%)</title><rect x="99.5035%" y="197" width="0.1583%" height="15" fill="rgb(235,30,7)"/><text x="99.7535%" y="207.50"></text></g><g><title>all (90,663,006 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (90,663,006 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (306,673 samples, 0.34%)</title><rect x="99.6617%" y="197" width="0.3383%" height="15" fill="rgb(228,22,38)"/><text x="99.9117%" y="207.50"></text></g></svg></svg>