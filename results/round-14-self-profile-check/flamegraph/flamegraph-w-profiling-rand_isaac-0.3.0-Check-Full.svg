<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (275,823 samples, 0.18%)</title><rect x="10.8850%" y="213" width="0.1833%" height="15" fill="rgb(227,0,7)"/><text x="11.1350%" y="223.50"></text></g><g><title>item_attrs (185,895 samples, 0.12%)</title><rect x="11.4445%" y="181" width="0.1235%" height="15" fill="rgb(217,0,24)"/><text x="11.6945%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,245 samples, 0.12%)</title><rect x="11.4489%" y="165" width="0.1191%" height="15" fill="rgb(221,193,54)"/><text x="11.6989%" y="175.50"></text></g><g><title>codegen_fn_attrs (274,286 samples, 0.18%)</title><rect x="11.3968%" y="197" width="0.1823%" height="15" fill="rgb(248,212,6)"/><text x="11.6468%" y="207.50"></text></g><g><title>is_copy_raw (198,592 samples, 0.13%)</title><rect x="13.6874%" y="181" width="0.1320%" height="15" fill="rgb(208,68,35)"/><text x="13.9374%" y="191.50"></text></g><g><title>evaluate_obligation (168,892 samples, 0.11%)</title><rect x="13.7071%" y="165" width="0.1122%" height="15" fill="rgb(232,128,0)"/><text x="13.9571%" y="175.50"></text></g><g><title>is_copy_raw (151,962 samples, 0.10%)</title><rect x="13.9803%" y="149" width="0.1010%" height="15" fill="rgb(207,160,47)"/><text x="14.2303%" y="159.50"></text></g><g><title>adt_drop_tys (349,013 samples, 0.23%)</title><rect x="13.9124%" y="165" width="0.2319%" height="15" fill="rgb(228,23,34)"/><text x="14.1624%" y="175.50"></text></g><g><title>is_copy_raw (693,239 samples, 0.46%)</title><rect x="14.1444%" y="165" width="0.4606%" height="15" fill="rgb(218,30,26)"/><text x="14.3944%" y="175.50"></text></g><g><title>evaluate_obligation (575,957 samples, 0.38%)</title><rect x="14.2223%" y="149" width="0.3827%" height="15" fill="rgb(220,122,19)"/><text x="14.4723%" y="159.50"></text></g><g><title>needs_drop_raw (1,206,373 samples, 0.80%)</title><rect x="13.8194%" y="181" width="0.8016%" height="15" fill="rgb(250,228,42)"/><text x="14.0694%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (1,045,318 samples, 0.69%)</title><rect x="14.8512%" y="165" width="0.6946%" height="15" fill="rgb(240,193,28)"/><text x="15.1012%" y="175.50"></text></g><g><title>evaluate_obligation (226,818 samples, 0.15%)</title><rect x="15.3950%" y="149" width="0.1507%" height="15" fill="rgb(216,20,37)"/><text x="15.6450%" y="159.50"></text></g><g><title>impl_parent (734,868 samples, 0.49%)</title><rect x="16.5821%" y="149" width="0.4883%" height="15" fill="rgb(206,188,39)"/><text x="16.8321%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (350,673 samples, 0.23%)</title><rect x="16.8374%" y="133" width="0.2330%" height="15" fill="rgb(217,207,13)"/><text x="17.0874%" y="143.50"></text></g><g><title>specialization_graph_of (3,042,014 samples, 2.02%)</title><rect x="15.6310%" y="165" width="2.0213%" height="15" fill="rgb(231,73,38)"/><text x="15.8810%" y="175.50">s..</text></g><g><title>impl_trait_ref (875,652 samples, 0.58%)</title><rect x="17.0704%" y="149" width="0.5818%" height="15" fill="rgb(225,20,46)"/><text x="17.3204%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (680,149 samples, 0.45%)</title><rect x="17.2003%" y="133" width="0.4519%" height="15" fill="rgb(210,31,41)"/><text x="17.4503%" y="143.50"></text></g><g><title>resolve_instance (4,651,294 samples, 3.09%)</title><rect x="14.6209%" y="181" width="3.0906%" height="15" fill="rgb(221,200,47)"/><text x="14.8709%" y="191.50">res..</text></g><g><title>thir_body (1,249,491 samples, 0.83%)</title><rect x="17.7253%" y="181" width="0.8302%" height="15" fill="rgb(226,26,5)"/><text x="17.9753%" y="191.50"></text></g><g><title>mir_const (12,392,390 samples, 8.23%)</title><rect x="10.3355%" y="229" width="8.2342%" height="15" fill="rgb(249,33,26)"/><text x="10.5855%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (11,289,695 samples, 7.50%)</title><rect x="11.0682%" y="213" width="7.5015%" height="15" fill="rgb(235,183,28)"/><text x="11.3182%" y="223.50">unsafety_c..</text></g><g><title>mir_built (10,520,935 samples, 6.99%)</title><rect x="11.5790%" y="197" width="6.9907%" height="15" fill="rgb(221,5,38)"/><text x="11.8290%" y="207.50">mir_built</text></g><g><title>mir_promoted (13,325,725 samples, 8.85%)</title><rect x="9.8382%" y="245" width="8.8543%" height="15" fill="rgb(247,18,42)"/><text x="10.0882%" y="255.50">mir_promoted</text></g><g><title>mir_const_qualif (184,774 samples, 0.12%)</title><rect x="18.5697%" y="229" width="0.1228%" height="15" fill="rgb(241,131,45)"/><text x="18.8197%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (1,687,975 samples, 1.12%)</title><rect x="18.7853%" y="245" width="1.1216%" height="15" fill="rgb(249,31,29)"/><text x="19.0353%" y="255.50"></text></g><g><title>normalize_projection_ty (1,329,341 samples, 0.88%)</title><rect x="19.0236%" y="229" width="0.8833%" height="15" fill="rgb(225,111,53)"/><text x="19.2736%" y="239.50"></text></g><g><title>type_op_normalize_ty (254,243 samples, 0.17%)</title><rect x="19.9638%" y="245" width="0.1689%" height="15" fill="rgb(238,160,17)"/><text x="20.2138%" y="255.50"></text></g><g><title>type_op_prove_predicate (2,289,363 samples, 1.52%)</title><rect x="20.1327%" y="245" width="1.5212%" height="15" fill="rgb(214,148,48)"/><text x="20.3827%" y="255.50"></text></g><g><title>evaluate_obligation (404,857 samples, 0.27%)</title><rect x="21.3849%" y="229" width="0.2690%" height="15" fill="rgb(232,36,49)"/><text x="21.6349%" y="239.50"></text></g><g><title>MIR_borrow_checking (30,941,217 samples, 20.56%)</title><rect x="1.0980%" y="277" width="20.5590%" height="15" fill="rgb(209,103,24)"/><text x="1.3480%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (30,822,815 samples, 20.48%)</title><rect x="1.1766%" y="261" width="20.4803%" height="15" fill="rgb(229,88,8)"/><text x="1.4266%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (166,801 samples, 0.11%)</title><rect x="21.6569%" y="277" width="0.1108%" height="15" fill="rgb(213,181,19)"/><text x="21.9069%" y="287.50"></text></g><g><title>hir_module_items (358,533 samples, 0.24%)</title><rect x="21.7678%" y="277" width="0.2382%" height="15" fill="rgb(254,191,54)"/><text x="22.0178%" y="287.50"></text></g><g><title>codegen_fn_attrs (256,286 samples, 0.17%)</title><rect x="22.7081%" y="213" width="0.1703%" height="15" fill="rgb(241,83,37)"/><text x="22.9581%" y="223.50"></text></g><g><title>should_inherit_track_caller (469,988 samples, 0.31%)</title><rect x="22.5754%" y="229" width="0.3123%" height="15" fill="rgb(233,36,39)"/><text x="22.8254%" y="239.50"></text></g><g><title>codegen_fn_attrs (734,150 samples, 0.49%)</title><rect x="22.4220%" y="245" width="0.4878%" height="15" fill="rgb(226,3,54)"/><text x="22.6720%" y="255.50"></text></g><g><title>check_mod_attrs (1,316,825 samples, 0.87%)</title><rect x="22.0351%" y="261" width="0.8750%" height="15" fill="rgb(245,192,40)"/><text x="22.2851%" y="271.50"></text></g><g><title>check_mod_const_bodies (260,443 samples, 0.17%)</title><rect x="22.9100%" y="261" width="0.1731%" height="15" fill="rgb(238,167,29)"/><text x="23.1600%" y="271.50"></text></g><g><title>lookup_deprecation_entry (280,176 samples, 0.19%)</title><rect x="23.3970%" y="245" width="0.1862%" height="15" fill="rgb(232,182,51)"/><text x="23.6470%" y="255.50"></text></g><g><title>stability_index (199,373 samples, 0.13%)</title><rect x="23.4507%" y="229" width="0.1325%" height="15" fill="rgb(231,60,39)"/><text x="23.7007%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (672,048 samples, 0.45%)</title><rect x="23.1974%" y="261" width="0.4465%" height="15" fill="rgb(208,69,12)"/><text x="23.4474%" y="271.50"></text></g><g><title>misc_checking_1 (2,555,639 samples, 1.70%)</title><rect x="22.0063%" y="277" width="1.6981%" height="15" fill="rgb(235,93,37)"/><text x="22.2563%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (537,026 samples, 0.36%)</title><rect x="23.7055%" y="261" width="0.3568%" height="15" fill="rgb(213,116,39)"/><text x="23.9555%" y="271.50"></text></g><g><title>check_mod_liveness (434,184 samples, 0.29%)</title><rect x="23.7738%" y="245" width="0.2885%" height="15" fill="rgb(222,207,29)"/><text x="24.0238%" y="255.50"></text></g><g><title>misc_checking_2 (1,041,052 samples, 0.69%)</title><rect x="23.7044%" y="277" width="0.6917%" height="15" fill="rgb(206,96,30)"/><text x="23.9544%" y="287.50"></text></g><g><title>match_checking (502,476 samples, 0.33%)</title><rect x="24.0623%" y="261" width="0.3339%" height="15" fill="rgb(218,138,4)"/><text x="24.3123%" y="271.50"></text></g><g><title>check_match (466,156 samples, 0.31%)</title><rect x="24.0864%" y="245" width="0.3097%" height="15" fill="rgb(250,191,14)"/><text x="24.3364%" y="255.50"></text></g><g><title>check_private_in_public (190,742 samples, 0.13%)</title><rect x="24.4030%" y="261" width="0.1267%" height="15" fill="rgb(239,60,40)"/><text x="24.6530%" y="271.50"></text></g><g><title>death_checking (364,984 samples, 0.24%)</title><rect x="24.5297%" y="261" width="0.2425%" height="15" fill="rgb(206,27,48)"/><text x="24.7797%" y="271.50"></text></g><g><title>param_env (201,373 samples, 0.13%)</title><rect x="25.1764%" y="229" width="0.1338%" height="15" fill="rgb(225,35,8)"/><text x="25.4264%" y="239.50"></text></g><g><title>crate_lints (1,150,192 samples, 0.76%)</title><rect x="24.7733%" y="245" width="0.7642%" height="15" fill="rgb(250,213,24)"/><text x="25.0233%" y="255.50"></text></g><g><title>type_of (339,763 samples, 0.23%)</title><rect x="25.3118%" y="229" width="0.2258%" height="15" fill="rgb(247,123,22)"/><text x="25.5618%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (262,693 samples, 0.17%)</title><rect x="25.3630%" y="213" width="0.1745%" height="15" fill="rgb(231,138,38)"/><text x="25.6130%" y="223.50"></text></g><g><title>lint_checking (1,666,748 samples, 1.11%)</title><rect x="24.7722%" y="261" width="1.1075%" height="15" fill="rgb(231,145,46)"/><text x="25.0222%" y="271.50"></text></g><g><title>module_lints (514,926 samples, 0.34%)</title><rect x="25.5376%" y="245" width="0.3421%" height="15" fill="rgb(251,118,11)"/><text x="25.7876%" y="255.50"></text></g><g><title>lint_mod (510,026 samples, 0.34%)</title><rect x="25.5408%" y="229" width="0.3389%" height="15" fill="rgb(217,147,25)"/><text x="25.7908%" y="239.50"></text></g><g><title>privacy_access_levels (233,493 samples, 0.16%)</title><rect x="25.8797%" y="261" width="0.1551%" height="15" fill="rgb(247,81,37)"/><text x="26.1297%" y="271.50"></text></g><g><title>privacy_checking_modules (842,950 samples, 0.56%)</title><rect x="26.0348%" y="261" width="0.5601%" height="15" fill="rgb(209,12,38)"/><text x="26.2848%" y="271.50"></text></g><g><title>check_mod_privacy (839,840 samples, 0.56%)</title><rect x="26.0369%" y="245" width="0.5580%" height="15" fill="rgb(227,1,9)"/><text x="26.2869%" y="255.50"></text></g><g><title>misc_checking_3 (3,321,618 samples, 2.21%)</title><rect x="24.3962%" y="277" width="2.2071%" height="15" fill="rgb(248,47,43)"/><text x="24.6462%" y="287.50">m..</text></g><g><title>mir_const_qualif (151,372 samples, 0.10%)</title><rect x="26.8403%" y="181" width="0.1006%" height="15" fill="rgb(221,10,30)"/><text x="27.0903%" y="191.50"></text></g><g><title>mir_borrowck (395,205 samples, 0.26%)</title><rect x="27.0229%" y="149" width="0.2626%" height="15" fill="rgb(210,229,1)"/><text x="27.2729%" y="159.50"></text></g><g><title>mir_for_ctfe (520,196 samples, 0.35%)</title><rect x="26.9408%" y="181" width="0.3456%" height="15" fill="rgb(222,148,37)"/><text x="27.1908%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (480,806 samples, 0.32%)</title><rect x="26.9670%" y="165" width="0.3195%" height="15" fill="rgb(234,67,33)"/><text x="27.2170%" y="175.50"></text></g><g><title>mir_for_ctfe (154,162 samples, 0.10%)</title><rect x="27.3530%" y="117" width="0.1024%" height="15" fill="rgb(247,98,35)"/><text x="27.6030%" y="127.50"></text></g><g><title>eval_to_const_value_raw (179,242 samples, 0.12%)</title><rect x="27.4598%" y="101" width="0.1191%" height="15" fill="rgb(247,138,52)"/><text x="27.7098%" y="111.50"></text></g><g><title>eval_to_const_value_raw (177,852 samples, 0.12%)</title><rect x="27.4607%" y="85" width="0.1182%" height="15" fill="rgb(213,79,30)"/><text x="27.7107%" y="95.50"></text></g><g><title>eval_to_allocation_raw (173,432 samples, 0.12%)</title><rect x="27.4636%" y="69" width="0.1152%" height="15" fill="rgb(246,177,23)"/><text x="27.7136%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (188,572 samples, 0.13%)</title><rect x="27.4556%" y="117" width="0.1253%" height="15" fill="rgb(230,62,27)"/><text x="27.7056%" y="127.50"></text></g><g><title>generics_of (467,627 samples, 0.31%)</title><rect x="29.0833%" y="85" width="0.3107%" height="15" fill="rgb(216,154,8)"/><text x="29.3333%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (328,784 samples, 0.22%)</title><rect x="29.1755%" y="69" width="0.2185%" height="15" fill="rgb(244,35,45)"/><text x="29.4255%" y="79.50"></text></g><g><title>impl_trait_ref (686,227 samples, 0.46%)</title><rect x="29.4744%" y="85" width="0.4560%" height="15" fill="rgb(251,115,12)"/><text x="29.7244%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (548,827 samples, 0.36%)</title><rect x="29.5657%" y="69" width="0.3647%" height="15" fill="rgb(240,54,50)"/><text x="29.8157%" y="79.50"></text></g><g><title>predicates_of (833,429 samples, 0.55%)</title><rect x="29.9511%" y="85" width="0.5538%" height="15" fill="rgb(233,84,52)"/><text x="30.2011%" y="95.50"></text></g><g><title>predicates_defined_on (563,295 samples, 0.37%)</title><rect x="30.1306%" y="69" width="0.3743%" height="15" fill="rgb(207,117,47)"/><text x="30.3806%" y="79.50"></text></g><g><title>inferred_outlives_of (328,095 samples, 0.22%)</title><rect x="30.2869%" y="53" width="0.2180%" height="15" fill="rgb(249,43,39)"/><text x="30.5369%" y="63.50"></text></g><g><title>specializes (1,960,031 samples, 1.30%)</title><rect x="30.5049%" y="85" width="1.3023%" height="15" fill="rgb(209,38,44)"/><text x="30.7549%" y="95.50"></text></g><g><title>param_env (1,172,470 samples, 0.78%)</title><rect x="31.0282%" y="69" width="0.7791%" height="15" fill="rgb(236,212,23)"/><text x="31.2782%" y="79.50"></text></g><g><title>def_span (582,715 samples, 0.39%)</title><rect x="31.4200%" y="53" width="0.3872%" height="15" fill="rgb(242,79,21)"/><text x="31.6700%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (525,345 samples, 0.35%)</title><rect x="31.4582%" y="37" width="0.3491%" height="15" fill="rgb(211,96,35)"/><text x="31.7082%" y="47.50"></text></g><g><title>evaluate_obligation (6,148,128 samples, 4.09%)</title><rect x="27.7629%" y="101" width="4.0851%" height="15" fill="rgb(253,215,40)"/><text x="28.0129%" y="111.50">eval..</text></g><g><title>eval_to_const_value_raw (6,959,878 samples, 4.62%)</title><rect x="27.2915%" y="165" width="4.6245%" height="15" fill="rgb(211,81,21)"/><text x="27.5415%" y="175.50">eval_..</text></g><g><title>eval_to_const_value_raw (6,958,948 samples, 4.62%)</title><rect x="27.2921%" y="149" width="4.6239%" height="15" fill="rgb(208,190,38)"/><text x="27.5421%" y="159.50">eval_..</text></g><g><title>eval_to_allocation_raw (6,957,848 samples, 4.62%)</title><rect x="27.2928%" y="133" width="4.6232%" height="15" fill="rgb(235,213,38)"/><text x="27.5428%" y="143.50">eval_..</text></g><g><title>typeck (6,524,264 samples, 4.34%)</title><rect x="27.5809%" y="117" width="4.3351%" height="15" fill="rgb(237,122,38)"/><text x="27.8309%" y="127.50">typeck</text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,969,568 samples, 4.63%)</title><rect x="27.2867%" y="181" width="4.6309%" height="15" fill="rgb(244,218,35)"/><text x="27.5367%" y="191.50">try_n..</text></g><g><title>eval_to_const_value_raw (7,999,139 samples, 5.32%)</title><rect x="26.7506%" y="229" width="5.3150%" height="15" fill="rgb(240,68,47)"/><text x="27.0006%" y="239.50">eval_to..</text></g><g><title>eval_to_const_value_raw (7,984,899 samples, 5.31%)</title><rect x="26.7600%" y="213" width="5.3056%" height="15" fill="rgb(210,16,53)"/><text x="27.0100%" y="223.50">eval_t..</text></g><g><title>eval_to_allocation_raw (7,982,939 samples, 5.30%)</title><rect x="26.7613%" y="197" width="5.3043%" height="15" fill="rgb(235,124,12)"/><text x="27.0113%" y="207.50">eval_t..</text></g><g><title>typeck (222,642 samples, 0.15%)</title><rect x="31.9177%" y="181" width="0.1479%" height="15" fill="rgb(224,169,11)"/><text x="32.1677%" y="191.50"></text></g><g><title>impl_parent (925,099 samples, 0.61%)</title><rect x="33.2003%" y="213" width="0.6147%" height="15" fill="rgb(250,166,2)"/><text x="33.4503%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (533,846 samples, 0.35%)</title><rect x="33.4603%" y="197" width="0.3547%" height="15" fill="rgb(242,216,29)"/><text x="33.7103%" y="207.50"></text></g><g><title>impl_trait_ref (2,053,832 samples, 1.36%)</title><rect x="33.8150%" y="213" width="1.3647%" height="15" fill="rgb(230,116,27)"/><text x="34.0650%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,649,646 samples, 1.10%)</title><rect x="34.0836%" y="197" width="1.0961%" height="15" fill="rgb(228,99,48)"/><text x="34.3336%" y="207.50"></text></g><g><title>coherent_trait (13,161,708 samples, 8.75%)</title><rect x="26.6734%" y="245" width="8.7453%" height="15" fill="rgb(253,11,6)"/><text x="26.9234%" y="255.50">coherent_tra..</text></g><g><title>specialization_graph_of (4,899,335 samples, 3.26%)</title><rect x="32.1634%" y="229" width="3.2554%" height="15" fill="rgb(247,143,39)"/><text x="32.4134%" y="239.50">spe..</text></g><g><title>trait_impls_of (358,595 samples, 0.24%)</title><rect x="35.1805%" y="213" width="0.2383%" height="15" fill="rgb(236,97,10)"/><text x="35.4305%" y="223.50"></text></g><g><title>coherence_checking (13,265,909 samples, 8.81%)</title><rect x="26.6585%" y="261" width="8.8146%" height="15" fill="rgb(233,208,19)"/><text x="26.9085%" y="271.50">coherence_ch..</text></g><g><title>associated_item (394,526 samples, 0.26%)</title><rect x="46.1653%" y="197" width="0.2621%" height="15" fill="rgb(216,164,2)"/><text x="46.4153%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (322,764 samples, 0.21%)</title><rect x="46.2130%" y="181" width="0.2145%" height="15" fill="rgb(220,129,5)"/><text x="46.4630%" y="191.50"></text></g><g><title>associated_items (542,117 samples, 0.36%)</title><rect x="46.0834%" y="213" width="0.3602%" height="15" fill="rgb(242,17,10)"/><text x="46.3334%" y="223.50"></text></g><g><title>adt_def (217,552 samples, 0.14%)</title><rect x="46.6196%" y="181" width="0.1446%" height="15" fill="rgb(242,107,0)"/><text x="46.8696%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (216,992 samples, 0.14%)</title><rect x="46.6200%" y="165" width="0.1442%" height="15" fill="rgb(251,28,31)"/><text x="46.8700%" y="175.50"></text></g><g><title>item_attrs (211,712 samples, 0.14%)</title><rect x="46.6235%" y="149" width="0.1407%" height="15" fill="rgb(233,223,10)"/><text x="46.8735%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (211,272 samples, 0.14%)</title><rect x="46.6238%" y="133" width="0.1404%" height="15" fill="rgb(215,21,27)"/><text x="46.8738%" y="143.50"></text></g><g><title>adt_dtorck_constraint (362,854 samples, 0.24%)</title><rect x="46.5929%" y="197" width="0.2411%" height="15" fill="rgb(232,23,21)"/><text x="46.8429%" y="207.50"></text></g><g><title>dropck_outlives (572,824 samples, 0.38%)</title><rect x="46.4690%" y="213" width="0.3806%" height="15" fill="rgb(244,5,23)"/><text x="46.7190%" y="223.50"></text></g><g><title>mir_const_qualif (240,523 samples, 0.16%)</title><rect x="46.9790%" y="181" width="0.1598%" height="15" fill="rgb(226,81,46)"/><text x="47.2290%" y="191.50"></text></g><g><title>mir_const (200,562 samples, 0.13%)</title><rect x="47.0056%" y="165" width="0.1333%" height="15" fill="rgb(247,70,30)"/><text x="47.2556%" y="175.50"></text></g><g><title>mir_borrowck (567,157 samples, 0.38%)</title><rect x="47.3127%" y="149" width="0.3768%" height="15" fill="rgb(212,68,19)"/><text x="47.5627%" y="159.50"></text></g><g><title>mir_for_ctfe (835,599 samples, 0.56%)</title><rect x="47.1388%" y="181" width="0.5552%" height="15" fill="rgb(240,187,13)"/><text x="47.3888%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (764,449 samples, 0.51%)</title><rect x="47.1861%" y="165" width="0.5079%" height="15" fill="rgb(223,113,26)"/><text x="47.4361%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,285,715 samples, 0.85%)</title><rect x="46.8496%" y="213" width="0.8543%" height="15" fill="rgb(206,192,2)"/><text x="47.0996%" y="223.50"></text></g><g><title>eval_to_allocation_raw (1,262,615 samples, 0.84%)</title><rect x="46.8650%" y="197" width="0.8389%" height="15" fill="rgb(241,108,4)"/><text x="47.1150%" y="207.50"></text></g><g><title>generics_of (275,175 samples, 0.18%)</title><rect x="49.4174%" y="197" width="0.1828%" height="15" fill="rgb(247,173,49)"/><text x="49.6674%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (205,823 samples, 0.14%)</title><rect x="49.4635%" y="181" width="0.1368%" height="15" fill="rgb(224,114,35)"/><text x="49.7135%" y="191.50"></text></g><g><title>impl_trait_ref (544,658 samples, 0.36%)</title><rect x="49.6451%" y="197" width="0.3619%" height="15" fill="rgb(245,159,27)"/><text x="49.8951%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (261,705 samples, 0.17%)</title><rect x="49.8331%" y="181" width="0.1739%" height="15" fill="rgb(245,172,44)"/><text x="50.0831%" y="191.50"></text></g><g><title>predicates_of (306,351 samples, 0.20%)</title><rect x="50.0193%" y="197" width="0.2036%" height="15" fill="rgb(236,23,11)"/><text x="50.2693%" y="207.50"></text></g><g><title>predicates_defined_on (195,351 samples, 0.13%)</title><rect x="50.0930%" y="181" width="0.1298%" height="15" fill="rgb(205,117,38)"/><text x="50.3430%" y="191.50"></text></g><g><title>specializes (418,064 samples, 0.28%)</title><rect x="50.2228%" y="197" width="0.2778%" height="15" fill="rgb(237,72,25)"/><text x="50.4728%" y="207.50"></text></g><g><title>param_env (260,282 samples, 0.17%)</title><rect x="50.3277%" y="181" width="0.1729%" height="15" fill="rgb(244,70,9)"/><text x="50.5777%" y="191.50"></text></g><g><title>evaluate_obligation (4,366,602 samples, 2.90%)</title><rect x="47.7039%" y="213" width="2.9014%" height="15" fill="rgb(217,125,39)"/><text x="47.9539%" y="223.50">ev..</text></g><g><title>predicates_of (234,364 samples, 0.16%)</title><rect x="51.1865%" y="213" width="0.1557%" height="15" fill="rgb(235,36,10)"/><text x="51.4365%" y="223.50"></text></g><g><title>predicates_defined_on (156,724 samples, 0.10%)</title><rect x="51.2381%" y="197" width="0.1041%" height="15" fill="rgb(251,123,47)"/><text x="51.4881%" y="207.50"></text></g><g><title>associated_items (154,702 samples, 0.10%)</title><rect x="60.6573%" y="197" width="0.1028%" height="15" fill="rgb(221,13,13)"/><text x="60.9073%" y="207.50"></text></g><g><title>predicates_of (156,764 samples, 0.10%)</title><rect x="61.6381%" y="181" width="0.1042%" height="15" fill="rgb(238,131,9)"/><text x="61.8881%" y="191.50"></text></g><g><title>specializes (382,475 samples, 0.25%)</title><rect x="61.7422%" y="181" width="0.2541%" height="15" fill="rgb(211,50,8)"/><text x="61.9922%" y="191.50"></text></g><g><title>param_env (235,541 samples, 0.16%)</title><rect x="61.8399%" y="165" width="0.1565%" height="15" fill="rgb(245,182,24)"/><text x="62.0899%" y="175.50"></text></g><g><title>evaluate_obligation (1,968,436 samples, 1.31%)</title><rect x="60.8371%" y="197" width="1.3079%" height="15" fill="rgb(242,14,37)"/><text x="61.0871%" y="207.50"></text></g><g><title>trait_impls_of (214,213 samples, 0.14%)</title><rect x="62.0027%" y="181" width="0.1423%" height="15" fill="rgb(246,228,12)"/><text x="62.2527%" y="191.50"></text></g><g><title>typeck (16,639,357 samples, 11.06%)</title><rect x="51.4281%" y="213" width="11.0561%" height="15" fill="rgb(213,55,15)"/><text x="51.6781%" y="223.50">typeck</text></g><g><title>item_bodies_checking (40,650,563 samples, 27.01%)</title><rect x="35.5097%" y="261" width="27.0104%" height="15" fill="rgb(209,9,3)"/><text x="35.7597%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,646,823 samples, 27.01%)</title><rect x="35.5122%" y="245" width="27.0079%" height="15" fill="rgb(230,59,30)"/><text x="35.7622%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (40,561,431 samples, 26.95%)</title><rect x="35.5689%" y="229" width="26.9512%" height="15" fill="rgb(209,121,21)"/><text x="35.8189%" y="239.50">typeck</text></g><g><title>mir_for_ctfe (842,156 samples, 0.56%)</title><rect x="63.9531%" y="165" width="0.5596%" height="15" fill="rgb(220,109,13)"/><text x="64.2031%" y="175.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (832,536 samples, 0.55%)</title><rect x="63.9595%" y="149" width="0.5532%" height="15" fill="rgb(232,18,1)"/><text x="64.2095%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,597,288 samples, 1.06%)</title><rect x="63.4712%" y="213" width="1.0613%" height="15" fill="rgb(215,41,42)"/><text x="63.7212%" y="223.50"></text></g><g><title>eval_to_const_value_raw (1,575,778 samples, 1.05%)</title><rect x="63.4855%" y="197" width="1.0470%" height="15" fill="rgb(224,123,36)"/><text x="63.7355%" y="207.50"></text></g><g><title>eval_to_allocation_raw (1,541,597 samples, 1.02%)</title><rect x="63.5082%" y="181" width="1.0243%" height="15" fill="rgb(240,125,3)"/><text x="63.7582%" y="191.50"></text></g><g><title>evaluate_obligation (2,039,183 samples, 1.35%)</title><rect x="63.2750%" y="229" width="1.3549%" height="15" fill="rgb(205,98,50)"/><text x="63.5250%" y="239.50"></text></g><g><title>item_types_checking (3,751,922 samples, 2.49%)</title><rect x="62.5201%" y="261" width="2.4930%" height="15" fill="rgb(205,185,37)"/><text x="62.7701%" y="271.50">it..</text></g><g><title>check_mod_item_types (3,746,332 samples, 2.49%)</title><rect x="62.5238%" y="245" width="2.4893%" height="15" fill="rgb(238,207,15)"/><text x="62.7738%" y="255.50">ch..</text></g><g><title>typeck (367,454 samples, 0.24%)</title><rect x="64.7689%" y="229" width="0.2442%" height="15" fill="rgb(213,199,42)"/><text x="65.0189%" y="239.50"></text></g><g><title>late_bound_vars_map (191,813 samples, 0.13%)</title><rect x="65.7479%" y="213" width="0.1275%" height="15" fill="rgb(235,201,11)"/><text x="65.9979%" y="223.50"></text></g><g><title>resolve_lifetimes (165,432 samples, 0.11%)</title><rect x="65.7655%" y="197" width="0.1099%" height="15" fill="rgb(207,46,11)"/><text x="66.0155%" y="207.50"></text></g><g><title>fn_sig (858,569 samples, 0.57%)</title><rect x="65.3673%" y="229" width="0.5705%" height="15" fill="rgb(241,35,35)"/><text x="65.6173%" y="239.50"></text></g><g><title>named_region_map (908,023 samples, 0.60%)</title><rect x="66.0722%" y="213" width="0.6033%" height="15" fill="rgb(243,32,47)"/><text x="66.3222%" y="223.50"></text></g><g><title>resolve_lifetimes (860,093 samples, 0.57%)</title><rect x="66.1040%" y="197" width="0.5715%" height="15" fill="rgb(247,202,23)"/><text x="66.3540%" y="207.50"></text></g><g><title>lint_levels (351,434 samples, 0.23%)</title><rect x="66.4420%" y="181" width="0.2335%" height="15" fill="rgb(219,102,11)"/><text x="66.6920%" y="191.50"></text></g><g><title>generics_of (1,138,325 samples, 0.76%)</title><rect x="65.9377%" y="229" width="0.7564%" height="15" fill="rgb(243,110,44)"/><text x="66.1877%" y="239.50"></text></g><g><title>explicit_predicates_of (292,162 samples, 0.19%)</title><rect x="66.9548%" y="197" width="0.1941%" height="15" fill="rgb(222,74,54)"/><text x="67.2048%" y="207.50"></text></g><g><title>predicates_of (815,528 samples, 0.54%)</title><rect x="66.7808%" y="229" width="0.5419%" height="15" fill="rgb(216,99,12)"/><text x="67.0308%" y="239.50"></text></g><g><title>predicates_defined_on (713,497 samples, 0.47%)</title><rect x="66.8486%" y="213" width="0.4741%" height="15" fill="rgb(226,22,26)"/><text x="67.0986%" y="223.50"></text></g><g><title>inferred_outlives_of (261,413 samples, 0.17%)</title><rect x="67.1490%" y="197" width="0.1737%" height="15" fill="rgb(217,163,10)"/><text x="67.3990%" y="207.50"></text></g><g><title>inferred_outlives_crate (225,502 samples, 0.15%)</title><rect x="67.1728%" y="181" width="0.1498%" height="15" fill="rgb(213,25,53)"/><text x="67.4228%" y="191.50"></text></g><g><title>type_collecting (3,836,733 samples, 2.55%)</title><rect x="65.0146%" y="261" width="2.5493%" height="15" fill="rgb(252,105,26)"/><text x="65.2646%" y="271.50">ty..</text></g><g><title>collect_mod_item_types (3,815,903 samples, 2.54%)</title><rect x="65.0284%" y="245" width="2.5355%" height="15" fill="rgb(220,39,43)"/><text x="65.2784%" y="255.50">co..</text></g><g><title>type_of (363,035 samples, 0.24%)</title><rect x="67.3227%" y="229" width="0.2412%" height="15" fill="rgb(229,68,48)"/><text x="67.5727%" y="239.50"></text></g><g><title>mir_borrowck (187,011 samples, 0.12%)</title><rect x="68.8259%" y="149" width="0.1243%" height="15" fill="rgb(252,8,32)"/><text x="69.0759%" y="159.50"></text></g><g><title>mir_for_ctfe (298,903 samples, 0.20%)</title><rect x="68.7525%" y="181" width="0.1986%" height="15" fill="rgb(223,20,43)"/><text x="69.0025%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (273,303 samples, 0.18%)</title><rect x="68.7696%" y="165" width="0.1816%" height="15" fill="rgb(229,81,49)"/><text x="69.0196%" y="175.50"></text></g><g><title>eval_to_const_value_raw (594,906 samples, 0.40%)</title><rect x="68.6419%" y="229" width="0.3953%" height="15" fill="rgb(236,28,36)"/><text x="68.8919%" y="239.50"></text></g><g><title>eval_to_const_value_raw (589,266 samples, 0.39%)</title><rect x="68.6457%" y="213" width="0.3915%" height="15" fill="rgb(249,185,26)"/><text x="68.8957%" y="223.50"></text></g><g><title>eval_to_allocation_raw (579,176 samples, 0.38%)</title><rect x="68.6524%" y="197" width="0.3848%" height="15" fill="rgb(249,174,33)"/><text x="68.9024%" y="207.50"></text></g><g><title>evaluate_obligation (408,836 samples, 0.27%)</title><rect x="69.0372%" y="229" width="0.2717%" height="15" fill="rgb(233,201,37)"/><text x="69.2872%" y="239.50"></text></g><g><title>implied_outlives_bounds (173,261 samples, 0.12%)</title><rect x="69.3214%" y="229" width="0.1151%" height="15" fill="rgb(221,78,26)"/><text x="69.5714%" y="239.50"></text></g><g><title>param_env (213,425 samples, 0.14%)</title><rect x="69.4372%" y="229" width="0.1418%" height="15" fill="rgb(250,127,30)"/><text x="69.6872%" y="239.50"></text></g><g><title>region_scope_tree (368,822 samples, 0.25%)</title><rect x="69.6037%" y="229" width="0.2451%" height="15" fill="rgb(230,49,44)"/><text x="69.8537%" y="239.50"></text></g><g><title>check_impl_item_well_formed (3,261,802 samples, 2.17%)</title><rect x="67.6875%" y="245" width="2.1673%" height="15" fill="rgb(229,67,23)"/><text x="67.9375%" y="255.50">c..</text></g><g><title>mir_const_qualif (174,442 samples, 0.12%)</title><rect x="70.7177%" y="181" width="0.1159%" height="15" fill="rgb(249,83,47)"/><text x="70.9677%" y="191.50"></text></g><g><title>mir_borrowck (423,435 samples, 0.28%)</title><rect x="70.9948%" y="149" width="0.2814%" height="15" fill="rgb(215,43,3)"/><text x="71.2448%" y="159.50"></text></g><g><title>mir_for_ctfe (669,058 samples, 0.44%)</title><rect x="70.8336%" y="181" width="0.4446%" height="15" fill="rgb(238,154,13)"/><text x="71.0836%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (610,317 samples, 0.41%)</title><rect x="70.8726%" y="165" width="0.4055%" height="15" fill="rgb(219,56,2)"/><text x="71.1226%" y="175.50"></text></g><g><title>mir_for_ctfe (219,893 samples, 0.15%)</title><rect x="71.3445%" y="117" width="0.1461%" height="15" fill="rgb(233,0,4)"/><text x="71.5945%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (202,762 samples, 0.13%)</title><rect x="71.3559%" y="101" width="0.1347%" height="15" fill="rgb(235,30,7)"/><text x="71.6059%" y="111.50"></text></g><g><title>eval_to_const_value_raw (271,082 samples, 0.18%)</title><rect x="71.4980%" y="101" width="0.1801%" height="15" fill="rgb(250,79,13)"/><text x="71.7480%" y="111.50"></text></g><g><title>eval_to_const_value_raw (269,532 samples, 0.18%)</title><rect x="71.4990%" y="85" width="0.1791%" height="15" fill="rgb(211,146,34)"/><text x="71.7490%" y="95.50"></text></g><g><title>eval_to_allocation_raw (264,842 samples, 0.18%)</title><rect x="71.5022%" y="69" width="0.1760%" height="15" fill="rgb(228,22,38)"/><text x="71.7522%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (286,432 samples, 0.19%)</title><rect x="71.4906%" y="117" width="0.1903%" height="15" fill="rgb(235,168,5)"/><text x="71.7406%" y="127.50"></text></g><g><title>eval_to_const_value_raw (747,549 samples, 0.50%)</title><rect x="71.2844%" y="165" width="0.4967%" height="15" fill="rgb(221,155,16)"/><text x="71.5344%" y="175.50"></text></g><g><title>eval_to_const_value_raw (746,369 samples, 0.50%)</title><rect x="71.2852%" y="149" width="0.4959%" height="15" fill="rgb(215,215,53)"/><text x="71.5352%" y="159.50"></text></g><g><title>eval_to_allocation_raw (744,709 samples, 0.49%)</title><rect x="71.2863%" y="133" width="0.4948%" height="15" fill="rgb(223,4,10)"/><text x="71.5363%" y="143.50"></text></g><g><title>typeck (150,702 samples, 0.10%)</title><rect x="71.6810%" y="117" width="0.1001%" height="15" fill="rgb(234,103,6)"/><text x="71.9310%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (759,709 samples, 0.50%)</title><rect x="71.2792%" y="181" width="0.5048%" height="15" fill="rgb(227,97,0)"/><text x="71.5292%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,036,034 samples, 1.35%)</title><rect x="70.6245%" y="229" width="1.3528%" height="15" fill="rgb(234,150,53)"/><text x="70.8745%" y="239.50"></text></g><g><title>eval_to_const_value_raw (2,023,944 samples, 1.34%)</title><rect x="70.6325%" y="213" width="1.3448%" height="15" fill="rgb(228,201,54)"/><text x="70.8825%" y="223.50"></text></g><g><title>eval_to_allocation_raw (2,010,544 samples, 1.34%)</title><rect x="70.6414%" y="197" width="1.3359%" height="15" fill="rgb(222,22,37)"/><text x="70.8914%" y="207.50"></text></g><g><title>typeck (290,995 samples, 0.19%)</title><rect x="71.7840%" y="181" width="0.1934%" height="15" fill="rgb(237,53,32)"/><text x="72.0340%" y="191.50"></text></g><g><title>evaluate_obligation (254,855 samples, 0.17%)</title><rect x="71.9774%" y="229" width="0.1693%" height="15" fill="rgb(233,25,53)"/><text x="72.2274%" y="239.50"></text></g><g><title>param_env (213,251 samples, 0.14%)</title><rect x="72.2078%" y="229" width="0.1417%" height="15" fill="rgb(210,40,34)"/><text x="72.4578%" y="239.50"></text></g><g><title>analysis (108,157,560 samples, 71.87%)</title><rect x="0.6622%" y="293" width="71.8656%" height="15" fill="rgb(241,220,44)"/><text x="0.9122%" y="303.50">analysis</text></g><g><title>type_check_crate (69,116,312 samples, 45.92%)</title><rect x="26.6032%" y="277" width="45.9245%" height="15" fill="rgb(235,28,35)"/><text x="26.8532%" y="287.50">type_check_crate</text></g><g><title>wf_checking (7,461,444 samples, 4.96%)</title><rect x="67.5700%" y="261" width="4.9578%" height="15" fill="rgb(210,56,17)"/><text x="67.8200%" y="271.50">wf_che..</text></g><g><title>check_item_well_formed (4,022,760 samples, 2.67%)</title><rect x="69.8548%" y="245" width="2.6729%" height="15" fill="rgb(224,130,29)"/><text x="70.1048%" y="255.50">ch..</text></g><g><title>codegen_crate (294,304 samples, 0.20%)</title><rect x="72.5339%" y="293" width="0.1956%" height="15" fill="rgb(235,212,8)"/><text x="72.7839%" y="303.50"></text></g><g><title>AST_validation (280,563 samples, 0.19%)</title><rect x="72.8689%" y="277" width="0.1864%" height="15" fill="rgb(223,33,50)"/><text x="73.1189%" y="287.50"></text></g><g><title>complete_gated_feature_checking (155,122 samples, 0.10%)</title><rect x="73.0554%" y="277" width="0.1031%" height="15" fill="rgb(219,149,13)"/><text x="73.3054%" y="287.50"></text></g><g><title>metadata_load_macro (186,032 samples, 0.12%)</title><rect x="88.0451%" y="245" width="0.1236%" height="15" fill="rgb(250,156,29)"/><text x="88.2951%" y="255.50"></text></g><g><title>metadata_register_crate (216,282 samples, 0.14%)</title><rect x="88.1687%" y="245" width="0.1437%" height="15" fill="rgb(216,193,19)"/><text x="88.4187%" y="255.50"></text></g><g><title>macro_expand_crate (23,394,772 samples, 15.54%)</title><rect x="73.2005%" y="277" width="15.5447%" height="15" fill="rgb(216,135,14)"/><text x="73.4505%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (23,369,002 samples, 15.53%)</title><rect x="73.2176%" y="261" width="15.5276%" height="15" fill="rgb(241,47,5)"/><text x="73.4676%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (651,308 samples, 0.43%)</title><rect x="88.3124%" y="245" width="0.4328%" height="15" fill="rgb(233,42,35)"/><text x="88.5624%" y="255.50"></text></g><g><title>finalize_macro_resolutions (230,162 samples, 0.15%)</title><rect x="88.8709%" y="261" width="0.1529%" height="15" fill="rgb(231,13,6)"/><text x="89.1209%" y="271.50"></text></g><g><title>late_resolve_crate (3,531,930 samples, 2.35%)</title><rect x="89.0238%" y="261" width="2.3468%" height="15" fill="rgb(207,181,40)"/><text x="89.2738%" y="271.50">l..</text></g><g><title>configure_and_expand (28,294,557 samples, 18.80%)</title><rect x="72.7294%" y="293" width="18.8004%" height="15" fill="rgb(254,173,49)"/><text x="72.9794%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (4,128,136 samples, 2.74%)</title><rect x="88.7869%" y="277" width="2.7430%" height="15" fill="rgb(221,1,38)"/><text x="89.0369%" y="287.50">re..</text></g><g><title>drop_ast (440,315 samples, 0.29%)</title><rect x="91.5298%" y="293" width="0.2926%" height="15" fill="rgb(206,124,46)"/><text x="91.7798%" y="303.50"></text></g><g><title>early_lint_checks (844,310 samples, 0.56%)</title><rect x="91.8326%" y="293" width="0.5610%" height="15" fill="rgb(249,21,11)"/><text x="92.0826%" y="303.50"></text></g><g><title>free_global_ctxt (2,566,868 samples, 1.71%)</title><rect x="92.3936%" y="293" width="1.7056%" height="15" fill="rgb(222,201,40)"/><text x="92.6436%" y="303.50"></text></g><g><title>generate_crate_metadata (1,051,342 samples, 0.70%)</title><rect x="94.0991%" y="293" width="0.6986%" height="15" fill="rgb(235,61,29)"/><text x="94.3491%" y="303.50"></text></g><g><title>hir_lowering (5,750,503 samples, 3.82%)</title><rect x="94.7977%" y="293" width="3.8209%" height="15" fill="rgb(219,207,3)"/><text x="95.0477%" y="303.50">hir_..</text></g><g><title>parse_crate (363,394 samples, 0.24%)</title><rect x="98.6494%" y="293" width="0.2415%" height="15" fill="rgb(222,56,46)"/><text x="98.8994%" y="303.50"></text></g><g><title>prepare_outputs (295,453 samples, 0.20%)</title><rect x="98.8969%" y="293" width="0.1963%" height="15" fill="rgb(239,76,54)"/><text x="99.1469%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (862,889 samples, 0.57%)</title><rect x="99.0933%" y="293" width="0.5733%" height="15" fill="rgb(231,124,27)"/><text x="99.3433%" y="303.50"></text></g><g><title>all (150,499,812 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(249,195,6)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (150,499,812 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(237,174,47)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (347,213 samples, 0.23%)</title><rect x="99.7693%" y="293" width="0.2307%" height="15" fill="rgb(206,201,31)"/><text x="100.0193%" y="303.50"></text></g></svg></svg>