<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (145,980 samples, 0.17%)</title><rect x="8.1277%" y="117" width="0.1743%" height="15" fill="rgb(227,0,7)"/><text x="8.3777%" y="127.50"></text></g><g><title>codegen_fn_attrs (132,791 samples, 0.16%)</title><rect x="8.5764%" y="101" width="0.1585%" height="15" fill="rgb(217,0,24)"/><text x="8.8264%" y="111.50"></text></g><g><title>is_copy_raw (121,971 samples, 0.15%)</title><rect x="10.1082%" y="53" width="0.1456%" height="15" fill="rgb(221,193,54)"/><text x="10.3582%" y="63.50"></text></g><g><title>evaluate_obligation (100,740 samples, 0.12%)</title><rect x="10.1335%" y="37" width="0.1203%" height="15" fill="rgb(248,212,6)"/><text x="10.3835%" y="47.50"></text></g><g><title>adt_drop_tys (186,852 samples, 0.22%)</title><rect x="10.0828%" y="69" width="0.2230%" height="15" fill="rgb(208,68,35)"/><text x="10.3328%" y="79.50"></text></g><g><title>needs_drop_raw (666,606 samples, 0.80%)</title><rect x="9.9923%" y="85" width="0.7957%" height="15" fill="rgb(232,128,0)"/><text x="10.2423%" y="95.50"></text></g><g><title>is_copy_raw (403,963 samples, 0.48%)</title><rect x="10.3058%" y="69" width="0.4822%" height="15" fill="rgb(207,160,47)"/><text x="10.5558%" y="79.50"></text></g><g><title>evaluate_obligation (328,203 samples, 0.39%)</title><rect x="10.3963%" y="53" width="0.3918%" height="15" fill="rgb(228,23,34)"/><text x="10.6463%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (107,171 samples, 0.13%)</title><rect x="10.9082%" y="69" width="0.1279%" height="15" fill="rgb(218,30,26)"/><text x="11.1582%" y="79.50"></text></g><g><title>specialization_graph_of (154,502 samples, 0.18%)</title><rect x="11.0779%" y="69" width="0.1844%" height="15" fill="rgb(220,122,19)"/><text x="11.3279%" y="79.50"></text></g><g><title>resolve_instance (436,784 samples, 0.52%)</title><rect x="10.7881%" y="85" width="0.5214%" height="15" fill="rgb(250,228,42)"/><text x="11.0381%" y="95.50"></text></g><g><title>thir_body (380,073 samples, 0.45%)</title><rect x="11.3244%" y="85" width="0.4537%" height="15" fill="rgb(240,193,28)"/><text x="11.5744%" y="95.50"></text></g><g><title>mir_const (3,457,775 samples, 4.13%)</title><rect x="7.6589%" y="133" width="4.1275%" height="15" fill="rgb(216,20,37)"/><text x="7.9089%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (2,919,131 samples, 3.48%)</title><rect x="8.3019%" y="117" width="3.4845%" height="15" fill="rgb(206,188,39)"/><text x="8.5519%" y="127.50">uns..</text></g><g><title>mir_built (2,556,386 samples, 3.05%)</title><rect x="8.7349%" y="101" width="3.0515%" height="15" fill="rgb(217,207,13)"/><text x="8.9849%" y="111.50">mir..</text></g><g><title>mir_promoted (3,874,181 samples, 4.62%)</title><rect x="7.2203%" y="149" width="4.6245%" height="15" fill="rgb(231,73,38)"/><text x="7.4703%" y="159.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (252,533 samples, 0.30%)</title><rect x="11.8448%" y="149" width="0.3014%" height="15" fill="rgb(225,20,46)"/><text x="12.0948%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (172,363 samples, 0.21%)</title><rect x="12.1463%" y="149" width="0.2057%" height="15" fill="rgb(210,31,41)"/><text x="12.3963%" y="159.50"></text></g><g><title>normalize_projection_ty (95,942 samples, 0.11%)</title><rect x="12.2375%" y="133" width="0.1145%" height="15" fill="rgb(221,200,47)"/><text x="12.4875%" y="143.50"></text></g><g><title>type_op_normalize_ty (118,121 samples, 0.14%)</title><rect x="12.3520%" y="149" width="0.1410%" height="15" fill="rgb(226,26,5)"/><text x="12.6020%" y="159.50"></text></g><g><title>normalize_projection_ty (91,251 samples, 0.11%)</title><rect x="12.3841%" y="133" width="0.1089%" height="15" fill="rgb(249,33,26)"/><text x="12.6341%" y="143.50"></text></g><g><title>type_op_prove_predicate (912,529 samples, 1.09%)</title><rect x="12.4930%" y="149" width="1.0893%" height="15" fill="rgb(235,183,28)"/><text x="12.7430%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,542,186 samples, 12.58%)</title><rect x="1.0048%" y="181" width="12.5840%" height="15" fill="rgb(221,5,38)"/><text x="1.2548%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,487,065 samples, 12.52%)</title><rect x="1.0706%" y="165" width="12.5182%" height="15" fill="rgb(247,18,42)"/><text x="1.3206%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (109,351 samples, 0.13%)</title><rect x="13.5889%" y="181" width="0.1305%" height="15" fill="rgb(241,131,45)"/><text x="13.8389%" y="191.50"></text></g><g><title>hir_module_items (123,872 samples, 0.15%)</title><rect x="13.7194%" y="181" width="0.1479%" height="15" fill="rgb(249,31,29)"/><text x="13.9694%" y="191.50"></text></g><g><title>codegen_fn_attrs (169,431 samples, 0.20%)</title><rect x="14.1607%" y="117" width="0.2022%" height="15" fill="rgb(225,111,53)"/><text x="14.4107%" y="127.50"></text></g><g><title>codegen_fn_attrs (261,154 samples, 0.31%)</title><rect x="14.0558%" y="149" width="0.3117%" height="15" fill="rgb(238,160,17)"/><text x="14.3058%" y="159.50"></text></g><g><title>should_inherit_track_caller (227,233 samples, 0.27%)</title><rect x="14.0963%" y="133" width="0.2712%" height="15" fill="rgb(214,148,48)"/><text x="14.3463%" y="143.50"></text></g><g><title>check_mod_attrs (393,655 samples, 0.47%)</title><rect x="13.8979%" y="165" width="0.4699%" height="15" fill="rgb(232,36,49)"/><text x="14.1479%" y="175.50"></text></g><g><title>lookup_deprecation_entry (101,591 samples, 0.12%)</title><rect x="14.6565%" y="149" width="0.1213%" height="15" fill="rgb(209,103,24)"/><text x="14.9065%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (298,214 samples, 0.36%)</title><rect x="14.5009%" y="165" width="0.3560%" height="15" fill="rgb(229,88,8)"/><text x="14.7509%" y="175.50"></text></g><g><title>misc_checking_1 (869,740 samples, 1.04%)</title><rect x="13.8678%" y="181" width="1.0382%" height="15" fill="rgb(213,181,19)"/><text x="14.1178%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (172,562 samples, 0.21%)</title><rect x="14.9076%" y="165" width="0.2060%" height="15" fill="rgb(254,191,54)"/><text x="15.1576%" y="175.50"></text></g><g><title>check_mod_liveness (126,521 samples, 0.15%)</title><rect x="14.9626%" y="149" width="0.1510%" height="15" fill="rgb(241,83,37)"/><text x="15.2126%" y="159.50"></text></g><g><title>misc_checking_2 (376,345 samples, 0.45%)</title><rect x="14.9060%" y="181" width="0.4492%" height="15" fill="rgb(233,36,39)"/><text x="15.1560%" y="191.50"></text></g><g><title>match_checking (202,413 samples, 0.24%)</title><rect x="15.1136%" y="165" width="0.2416%" height="15" fill="rgb(226,3,54)"/><text x="15.3636%" y="175.50"></text></g><g><title>check_match (187,132 samples, 0.22%)</title><rect x="15.1318%" y="149" width="0.2234%" height="15" fill="rgb(245,192,40)"/><text x="15.3818%" y="159.50"></text></g><g><title>check_private_in_public (127,162 samples, 0.15%)</title><rect x="15.3666%" y="165" width="0.1518%" height="15" fill="rgb(238,167,29)"/><text x="15.6166%" y="175.50"></text></g><g><title>death_checking (301,403 samples, 0.36%)</title><rect x="15.5184%" y="165" width="0.3598%" height="15" fill="rgb(232,182,51)"/><text x="15.7684%" y="175.50"></text></g><g><title>eval_to_const_value_raw (134,762 samples, 0.16%)</title><rect x="16.5688%" y="133" width="0.1609%" height="15" fill="rgb(231,60,39)"/><text x="16.8188%" y="143.50"></text></g><g><title>eval_to_const_value_raw (132,292 samples, 0.16%)</title><rect x="16.5717%" y="117" width="0.1579%" height="15" fill="rgb(208,69,12)"/><text x="16.8217%" y="127.50"></text></g><g><title>eval_to_allocation_raw (126,432 samples, 0.15%)</title><rect x="16.5787%" y="101" width="0.1509%" height="15" fill="rgb(235,93,37)"/><text x="16.8287%" y="111.50"></text></g><g><title>param_env (257,613 samples, 0.31%)</title><rect x="16.7297%" y="133" width="0.3075%" height="15" fill="rgb(213,116,39)"/><text x="16.9797%" y="143.50"></text></g><g><title>predicates_of (130,641 samples, 0.16%)</title><rect x="16.8812%" y="117" width="0.1559%" height="15" fill="rgb(222,207,29)"/><text x="17.1312%" y="127.50"></text></g><g><title>predicates_defined_on (105,291 samples, 0.13%)</title><rect x="16.9115%" y="101" width="0.1257%" height="15" fill="rgb(206,96,30)"/><text x="17.1615%" y="111.50"></text></g><g><title>crate_lints (2,024,502 samples, 2.42%)</title><rect x="15.8801%" y="149" width="2.4166%" height="15" fill="rgb(218,138,4)"/><text x="16.1301%" y="159.50">cr..</text></g><g><title>type_of (1,021,170 samples, 1.22%)</title><rect x="17.0778%" y="133" width="1.2190%" height="15" fill="rgb(250,191,14)"/><text x="17.3278%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (790,238 samples, 0.94%)</title><rect x="17.3535%" y="117" width="0.9433%" height="15" fill="rgb(239,60,40)"/><text x="17.6035%" y="127.50"></text></g><g><title>lint_checking (2,269,035 samples, 2.71%)</title><rect x="15.8782%" y="165" width="2.7085%" height="15" fill="rgb(206,27,48)"/><text x="16.1282%" y="175.50">li..</text></g><g><title>module_lints (242,883 samples, 0.29%)</title><rect x="18.2968%" y="149" width="0.2899%" height="15" fill="rgb(225,35,8)"/><text x="18.5468%" y="159.50"></text></g><g><title>lint_mod (237,403 samples, 0.28%)</title><rect x="18.3033%" y="133" width="0.2834%" height="15" fill="rgb(250,213,24)"/><text x="18.5533%" y="143.50"></text></g><g><title>privacy_access_levels (155,422 samples, 0.19%)</title><rect x="18.5867%" y="165" width="0.1855%" height="15" fill="rgb(247,123,22)"/><text x="18.8367%" y="175.50"></text></g><g><title>privacy_checking_modules (394,484 samples, 0.47%)</title><rect x="18.7722%" y="165" width="0.4709%" height="15" fill="rgb(231,138,38)"/><text x="19.0222%" y="175.50"></text></g><g><title>check_mod_privacy (390,224 samples, 0.47%)</title><rect x="18.7773%" y="149" width="0.4658%" height="15" fill="rgb(231,145,46)"/><text x="19.0273%" y="159.50"></text></g><g><title>misc_checking_3 (3,274,516 samples, 3.91%)</title><rect x="15.3552%" y="181" width="3.9087%" height="15" fill="rgb(251,118,11)"/><text x="15.6052%" y="191.50">misc..</text></g><g><title>impl_parent (1,333,192 samples, 1.59%)</title><rect x="21.7990%" y="117" width="1.5914%" height="15" fill="rgb(217,147,25)"/><text x="22.0490%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (865,778 samples, 1.03%)</title><rect x="22.3569%" y="101" width="1.0335%" height="15" fill="rgb(247,81,37)"/><text x="22.6069%" y="111.50"></text></g><g><title>impl_trait_ref (4,042,185 samples, 4.83%)</title><rect x="23.3904%" y="117" width="4.8251%" height="15" fill="rgb(209,12,38)"/><text x="23.6404%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,333,969 samples, 3.98%)</title><rect x="24.2357%" y="101" width="3.9797%" height="15" fill="rgb(227,1,9)"/><text x="24.4857%" y="111.50">meta..</text></g><g><title>coherent_trait (7,916,358 samples, 9.45%)</title><rect x="19.3329%" y="149" width="9.4496%" height="15" fill="rgb(248,47,43)"/><text x="19.5829%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (7,904,168 samples, 9.44%)</title><rect x="19.3475%" y="133" width="9.4351%" height="15" fill="rgb(221,10,30)"/><text x="19.5975%" y="143.50">specializatio..</text></g><g><title>trait_impls_of (434,115 samples, 0.52%)</title><rect x="28.2643%" y="117" width="0.5182%" height="15" fill="rgb(210,229,1)"/><text x="28.5143%" y="127.50"></text></g><g><title>implementations_of_trait (118,252 samples, 0.14%)</title><rect x="28.6414%" y="101" width="0.1412%" height="15" fill="rgb(222,148,37)"/><text x="28.8914%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (94,092 samples, 0.11%)</title><rect x="28.6702%" y="85" width="0.1123%" height="15" fill="rgb(234,67,33)"/><text x="28.9202%" y="95.50"></text></g><g><title>orphan_check_crate (172,012 samples, 0.21%)</title><rect x="28.8109%" y="149" width="0.2053%" height="15" fill="rgb(247,98,35)"/><text x="29.0609%" y="159.50"></text></g><g><title>coherence_checking (8,131,860 samples, 9.71%)</title><rect x="19.3144%" y="165" width="9.7069%" height="15" fill="rgb(247,138,52)"/><text x="19.5644%" y="175.50">coherence_chec..</text></g><g><title>associated_item (193,263 samples, 0.23%)</title><rect x="38.7877%" y="101" width="0.2307%" height="15" fill="rgb(213,79,30)"/><text x="39.0377%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (148,282 samples, 0.18%)</title><rect x="38.8414%" y="85" width="0.1770%" height="15" fill="rgb(246,177,23)"/><text x="39.0914%" y="95.50"></text></g><g><title>associated_items (324,954 samples, 0.39%)</title><rect x="38.6622%" y="117" width="0.3879%" height="15" fill="rgb(230,62,27)"/><text x="38.9122%" y="127.50"></text></g><g><title>adt_dtorck_constraint (147,182 samples, 0.18%)</title><rect x="39.2827%" y="101" width="0.1757%" height="15" fill="rgb(216,154,8)"/><text x="39.5327%" y="111.50"></text></g><g><title>dropck_outlives (317,012 samples, 0.38%)</title><rect x="39.0977%" y="117" width="0.3784%" height="15" fill="rgb(244,35,45)"/><text x="39.3477%" y="127.50"></text></g><g><title>specializes (147,952 samples, 0.18%)</title><rect x="40.1240%" y="101" width="0.1766%" height="15" fill="rgb(251,115,12)"/><text x="40.3740%" y="111.50"></text></g><g><title>param_env (133,002 samples, 0.16%)</title><rect x="40.1419%" y="85" width="0.1588%" height="15" fill="rgb(240,54,50)"/><text x="40.3919%" y="95.50"></text></g><g><title>def_span (115,112 samples, 0.14%)</title><rect x="40.1632%" y="69" width="0.1374%" height="15" fill="rgb(233,84,52)"/><text x="40.4132%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (113,862 samples, 0.14%)</title><rect x="40.1647%" y="53" width="0.1359%" height="15" fill="rgb(207,117,47)"/><text x="40.4147%" y="63.50"></text></g><g><title>evaluate_obligation (1,113,501 samples, 1.33%)</title><rect x="39.4761%" y="117" width="1.3292%" height="15" fill="rgb(249,43,39)"/><text x="39.7261%" y="127.50"></text></g><g><title>trait_impls_of (416,943 samples, 0.50%)</title><rect x="40.3076%" y="101" width="0.4977%" height="15" fill="rgb(209,38,44)"/><text x="40.5576%" y="111.50"></text></g><g><title>implementations_of_trait (128,851 samples, 0.15%)</title><rect x="40.6515%" y="85" width="0.1538%" height="15" fill="rgb(236,212,23)"/><text x="40.9015%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (96,541 samples, 0.12%)</title><rect x="40.6901%" y="69" width="0.1152%" height="15" fill="rgb(242,79,21)"/><text x="40.9401%" y="79.50"></text></g><g><title>item_attrs (116,412 samples, 0.14%)</title><rect x="41.1164%" y="117" width="0.1390%" height="15" fill="rgb(211,96,35)"/><text x="41.3664%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,322 samples, 0.13%)</title><rect x="41.1224%" y="101" width="0.1329%" height="15" fill="rgb(253,215,40)"/><text x="41.3724%" y="111.50"></text></g><g><title>evaluate_obligation (154,690 samples, 0.18%)</title><rect x="41.5316%" y="101" width="0.1847%" height="15" fill="rgb(211,81,21)"/><text x="41.7816%" y="111.50"></text></g><g><title>method_autoderef_steps (359,752 samples, 0.43%)</title><rect x="41.2951%" y="117" width="0.4294%" height="15" fill="rgb(208,190,38)"/><text x="41.5451%" y="127.50"></text></g><g><title>object_safety_violations (148,422 samples, 0.18%)</title><rect x="41.7246%" y="117" width="0.1772%" height="15" fill="rgb(235,213,38)"/><text x="41.9746%" y="127.50"></text></g><g><title>explicit_predicates_of (105,981 samples, 0.13%)</title><rect x="42.0766%" y="85" width="0.1265%" height="15" fill="rgb(237,122,38)"/><text x="42.3266%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (89,871 samples, 0.11%)</title><rect x="42.0958%" y="69" width="0.1073%" height="15" fill="rgb(244,218,35)"/><text x="42.3458%" y="79.50"></text></g><g><title>predicates_of (258,054 samples, 0.31%)</title><rect x="41.9282%" y="117" width="0.3080%" height="15" fill="rgb(240,68,47)"/><text x="42.1782%" y="127.50"></text></g><g><title>predicates_defined_on (178,773 samples, 0.21%)</title><rect x="42.0229%" y="101" width="0.2134%" height="15" fill="rgb(210,16,53)"/><text x="42.2729%" y="111.50"></text></g><g><title>item_bodies_checking (11,137,594 samples, 13.29%)</title><rect x="29.0518%" y="165" width="13.2948%" height="15" fill="rgb(235,124,12)"/><text x="29.3018%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (11,135,164 samples, 13.29%)</title><rect x="29.0547%" y="149" width="13.2919%" height="15" fill="rgb(224,169,11)"/><text x="29.3047%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (11,094,914 samples, 13.24%)</title><rect x="29.1028%" y="133" width="13.2438%" height="15" fill="rgb(250,166,2)"/><text x="29.3528%" y="143.50">typeck</text></g><g><title>item_types_checking (827,139 samples, 0.99%)</title><rect x="42.3466%" y="165" width="0.9873%" height="15" fill="rgb(242,216,29)"/><text x="42.5966%" y="175.50"></text></g><g><title>check_mod_item_types (821,219 samples, 0.98%)</title><rect x="42.3536%" y="149" width="0.9803%" height="15" fill="rgb(230,116,27)"/><text x="42.6036%" y="159.50"></text></g><g><title>typeck (86,921 samples, 0.10%)</title><rect x="43.2302%" y="133" width="0.1038%" height="15" fill="rgb(228,99,48)"/><text x="43.4802%" y="143.50"></text></g><g><title>fn_sig (241,553 samples, 0.29%)</title><rect x="43.5741%" y="133" width="0.2883%" height="15" fill="rgb(253,11,6)"/><text x="43.8241%" y="143.50"></text></g><g><title>named_region_map (189,021 samples, 0.23%)</title><rect x="43.9820%" y="117" width="0.2256%" height="15" fill="rgb(247,143,39)"/><text x="44.2320%" y="127.50"></text></g><g><title>resolve_lifetimes (180,611 samples, 0.22%)</title><rect x="43.9920%" y="101" width="0.2156%" height="15" fill="rgb(236,97,10)"/><text x="44.2420%" y="111.50"></text></g><g><title>lint_levels (103,201 samples, 0.12%)</title><rect x="44.0844%" y="85" width="0.1232%" height="15" fill="rgb(233,208,19)"/><text x="44.3344%" y="95.50"></text></g><g><title>generics_of (303,873 samples, 0.36%)</title><rect x="43.8624%" y="133" width="0.3627%" height="15" fill="rgb(216,164,2)"/><text x="44.1124%" y="143.50"></text></g><g><title>late_bound_vars_map (111,781 samples, 0.13%)</title><rect x="44.6490%" y="85" width="0.1334%" height="15" fill="rgb(220,129,5)"/><text x="44.8990%" y="95.50"></text></g><g><title>resolve_lifetimes (105,741 samples, 0.13%)</title><rect x="44.6562%" y="69" width="0.1262%" height="15" fill="rgb(242,17,10)"/><text x="44.9062%" y="79.50"></text></g><g><title>explicit_predicates_of (388,964 samples, 0.46%)</title><rect x="44.3648%" y="101" width="0.4643%" height="15" fill="rgb(242,107,0)"/><text x="44.6148%" y="111.50"></text></g><g><title>predicates_of (814,842 samples, 0.97%)</title><rect x="44.2609%" y="133" width="0.9727%" height="15" fill="rgb(251,28,31)"/><text x="44.5109%" y="143.50"></text></g><g><title>predicates_defined_on (779,472 samples, 0.93%)</title><rect x="44.3031%" y="117" width="0.9304%" height="15" fill="rgb(233,223,10)"/><text x="44.5531%" y="127.50"></text></g><g><title>inferred_outlives_of (338,834 samples, 0.40%)</title><rect x="44.8291%" y="101" width="0.4045%" height="15" fill="rgb(215,21,27)"/><text x="45.0791%" y="111.50"></text></g><g><title>inferred_outlives_crate (320,604 samples, 0.38%)</title><rect x="44.8509%" y="85" width="0.3827%" height="15" fill="rgb(232,23,21)"/><text x="45.1009%" y="95.50"></text></g><g><title>type_of (177,182 samples, 0.21%)</title><rect x="45.0221%" y="69" width="0.2115%" height="15" fill="rgb(244,5,23)"/><text x="45.2721%" y="79.50"></text></g><g><title>type_collecting (1,713,369 samples, 2.05%)</title><rect x="43.3371%" y="165" width="2.0452%" height="15" fill="rgb(226,81,46)"/><text x="43.5871%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,698,719 samples, 2.03%)</title><rect x="43.3546%" y="149" width="2.0277%" height="15" fill="rgb(247,70,30)"/><text x="43.6046%" y="159.50">c..</text></g><g><title>type_of (99,540 samples, 0.12%)</title><rect x="45.2635%" y="133" width="0.1188%" height="15" fill="rgb(212,68,19)"/><text x="45.5135%" y="143.50"></text></g><g><title>evaluate_obligation (527,647 samples, 0.63%)</title><rect x="46.9292%" y="133" width="0.6298%" height="15" fill="rgb(240,187,13)"/><text x="47.1792%" y="143.50"></text></g><g><title>implied_outlives_bounds (193,691 samples, 0.23%)</title><rect x="47.5798%" y="133" width="0.2312%" height="15" fill="rgb(223,113,26)"/><text x="47.8298%" y="143.50"></text></g><g><title>param_env (163,062 samples, 0.19%)</title><rect x="47.8281%" y="133" width="0.1946%" height="15" fill="rgb(206,192,2)"/><text x="48.0781%" y="143.50"></text></g><g><title>region_scope_tree (141,262 samples, 0.17%)</title><rect x="48.0586%" y="133" width="0.1686%" height="15" fill="rgb(241,108,4)"/><text x="48.3086%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,266,265 samples, 2.71%)</title><rect x="45.5256%" y="149" width="2.7052%" height="15" fill="rgb(247,173,49)"/><text x="45.7756%" y="159.50">ch..</text></g><g><title>evaluate_obligation (218,672 samples, 0.26%)</title><rect x="49.6962%" y="133" width="0.2610%" height="15" fill="rgb(224,114,35)"/><text x="49.9462%" y="143.50"></text></g><g><title>adt_sized_constraint (148,182 samples, 0.18%)</title><rect x="49.7804%" y="117" width="0.1769%" height="15" fill="rgb(245,159,27)"/><text x="50.0304%" y="127.50"></text></g><g><title>implied_outlives_bounds (110,211 samples, 0.13%)</title><rect x="49.9705%" y="133" width="0.1316%" height="15" fill="rgb(245,172,44)"/><text x="50.2205%" y="143.50"></text></g><g><title>param_env (280,774 samples, 0.34%)</title><rect x="50.1021%" y="133" width="0.3352%" height="15" fill="rgb(236,23,11)"/><text x="50.3521%" y="143.50"></text></g><g><title>analysis (41,783,212 samples, 49.88%)</title><rect x="0.7963%" y="197" width="49.8759%" height="15" fill="rgb(205,117,38)"/><text x="1.0463%" y="207.50">analysis</text></g><g><title>type_check_crate (26,312,061 samples, 31.41%)</title><rect x="19.2639%" y="181" width="31.4083%" height="15" fill="rgb(237,72,25)"/><text x="19.5139%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,429,119 samples, 5.29%)</title><rect x="45.3852%" y="165" width="5.2870%" height="15" fill="rgb(244,70,9)"/><text x="45.6352%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (2,045,233 samples, 2.44%)</title><rect x="48.2308%" y="149" width="2.4414%" height="15" fill="rgb(217,125,39)"/><text x="48.4808%" y="159.50">ch..</text></g><g><title>is_no_builtins (210,732 samples, 0.25%)</title><rect x="51.0639%" y="181" width="0.2515%" height="15" fill="rgb(235,36,10)"/><text x="51.3139%" y="191.50"></text></g><g><title>codegen_crate (583,606 samples, 0.70%)</title><rect x="50.6835%" y="197" width="0.6966%" height="15" fill="rgb(251,123,47)"/><text x="50.9335%" y="207.50"></text></g><g><title>AST_validation (111,541 samples, 0.13%)</title><rect x="51.6318%" y="181" width="0.1331%" height="15" fill="rgb(221,13,13)"/><text x="51.8818%" y="191.50"></text></g><g><title>crate_injection (88,341 samples, 0.11%)</title><rect x="51.8135%" y="181" width="0.1055%" height="15" fill="rgb(238,131,9)"/><text x="52.0635%" y="191.50"></text></g><g><title>metadata_load_macro (1,579,127 samples, 1.88%)</title><rect x="84.6848%" y="149" width="1.8850%" height="15" fill="rgb(211,50,8)"/><text x="84.9348%" y="159.50">m..</text></g><g><title>metadata_register_crate (2,713,069 samples, 3.24%)</title><rect x="86.5698%" y="149" width="3.2385%" height="15" fill="rgb(245,182,24)"/><text x="86.8198%" y="159.50">met..</text></g><g><title>metadata_register_crate (973,493 samples, 1.16%)</title><rect x="88.6463%" y="133" width="1.1620%" height="15" fill="rgb(242,14,37)"/><text x="88.8963%" y="143.50"></text></g><g><title>macro_expand_crate (31,938,923 samples, 38.12%)</title><rect x="51.9189%" y="181" width="38.1249%" height="15" fill="rgb(246,228,12)"/><text x="52.1689%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (31,919,153 samples, 38.10%)</title><rect x="51.9425%" y="165" width="38.1013%" height="15" fill="rgb(213,55,15)"/><text x="52.1925%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (197,332 samples, 0.24%)</title><rect x="89.8083%" y="149" width="0.2356%" height="15" fill="rgb(209,9,3)"/><text x="90.0583%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (102,852 samples, 0.12%)</title><rect x="90.0487%" y="181" width="0.1228%" height="15" fill="rgb(230,59,30)"/><text x="90.2987%" y="191.50"></text></g><g><title>late_resolve_crate (737,798 samples, 0.88%)</title><rect x="90.3200%" y="165" width="0.8807%" height="15" fill="rgb(209,121,21)"/><text x="90.5700%" y="175.50"></text></g><g><title>configure_and_expand (33,432,419 samples, 39.91%)</title><rect x="51.3801%" y="197" width="39.9077%" height="15" fill="rgb(220,109,13)"/><text x="51.6301%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (935,251 samples, 1.12%)</title><rect x="90.1715%" y="181" width="1.1164%" height="15" fill="rgb(232,18,1)"/><text x="90.4215%" y="191.50"></text></g><g><title>drop_ast (110,571 samples, 0.13%)</title><rect x="91.2878%" y="197" width="0.1320%" height="15" fill="rgb(215,41,42)"/><text x="91.5378%" y="207.50"></text></g><g><title>early_lint_checks (252,603 samples, 0.30%)</title><rect x="91.4387%" y="197" width="0.3015%" height="15" fill="rgb(224,123,36)"/><text x="91.6887%" y="207.50"></text></g><g><title>free_global_ctxt (2,865,601 samples, 3.42%)</title><rect x="91.7402%" y="197" width="3.4206%" height="15" fill="rgb(240,125,3)"/><text x="91.9902%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (1,020,912 samples, 1.22%)</title><rect x="95.1609%" y="197" width="1.2186%" height="15" fill="rgb(205,98,50)"/><text x="95.4109%" y="207.50"></text></g><g><title>hir_lowering (1,495,096 samples, 1.78%)</title><rect x="96.3795%" y="197" width="1.7847%" height="15" fill="rgb(205,185,37)"/><text x="96.6295%" y="207.50">h..</text></g><g><title>parse_crate (319,644 samples, 0.38%)</title><rect x="98.2309%" y="197" width="0.3816%" height="15" fill="rgb(238,207,15)"/><text x="98.4809%" y="207.50"></text></g><g><title>prepare_outputs (173,482 samples, 0.21%)</title><rect x="98.6233%" y="197" width="0.2071%" height="15" fill="rgb(213,199,42)"/><text x="98.8733%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (548,366 samples, 0.65%)</title><rect x="98.8304%" y="197" width="0.6546%" height="15" fill="rgb(235,201,11)"/><text x="99.0804%" y="207.50"></text></g><g><title>all (83,774,357 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (83,774,357 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (344,094 samples, 0.41%)</title><rect x="99.5893%" y="197" width="0.4107%" height="15" fill="rgb(243,32,47)"/><text x="99.8393%" y="207.50"></text></g></svg></svg>