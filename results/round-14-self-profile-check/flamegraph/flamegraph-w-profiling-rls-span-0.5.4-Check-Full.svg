<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (596,704 samples, 0.46%)</title><rect x="17.1861%" y="69" width="0.4589%" height="15" fill="rgb(227,0,7)"/><text x="17.4361%" y="79.50"></text></g><g><title>evaluate_obligation (497,153 samples, 0.38%)</title><rect x="17.2627%" y="53" width="0.3823%" height="15" fill="rgb(217,0,24)"/><text x="17.5127%" y="63.50"></text></g><g><title>needs_drop_raw (794,406 samples, 0.61%)</title><rect x="17.0389%" y="85" width="0.6109%" height="15" fill="rgb(221,193,54)"/><text x="17.2889%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (326,031 samples, 0.25%)</title><rect x="17.8488%" y="69" width="0.2507%" height="15" fill="rgb(248,212,6)"/><text x="18.0988%" y="79.50"></text></g><g><title>impl_item_implementor_ids (167,972 samples, 0.13%)</title><rect x="18.1090%" y="69" width="0.1292%" height="15" fill="rgb(208,68,35)"/><text x="18.3590%" y="79.50"></text></g><g><title>associated_items (146,972 samples, 0.11%)</title><rect x="18.1252%" y="53" width="0.1130%" height="15" fill="rgb(232,128,0)"/><text x="18.3752%" y="63.50"></text></g><g><title>impl_parent (184,813 samples, 0.14%)</title><rect x="18.4954%" y="53" width="0.1421%" height="15" fill="rgb(207,160,47)"/><text x="18.7454%" y="63.50"></text></g><g><title>specialization_graph_of (904,130 samples, 0.70%)</title><rect x="18.2416%" y="69" width="0.6953%" height="15" fill="rgb(228,23,34)"/><text x="18.4916%" y="79.50"></text></g><g><title>impl_trait_ref (389,285 samples, 0.30%)</title><rect x="18.6375%" y="53" width="0.2994%" height="15" fill="rgb(218,30,26)"/><text x="18.8875%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (307,483 samples, 0.24%)</title><rect x="18.7004%" y="37" width="0.2365%" height="15" fill="rgb(220,122,19)"/><text x="18.9504%" y="47.50"></text></g><g><title>resolve_instance (1,709,738 samples, 1.31%)</title><rect x="17.6697%" y="85" width="1.3149%" height="15" fill="rgb(250,228,42)"/><text x="17.9197%" y="95.50"></text></g><g><title>thir_body (1,270,244 samples, 0.98%)</title><rect x="19.0140%" y="85" width="0.9769%" height="15" fill="rgb(240,193,28)"/><text x="19.2640%" y="95.50"></text></g><g><title>mir_const (9,488,730 samples, 7.30%)</title><rect x="12.7219%" y="133" width="7.2974%" height="15" fill="rgb(216,20,37)"/><text x="12.9719%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,382,910 samples, 6.45%)</title><rect x="13.5724%" y="117" width="6.4469%" height="15" fill="rgb(206,188,39)"/><text x="13.8224%" y="127.50">unsafety..</text></g><g><title>mir_built (7,731,031 samples, 5.95%)</title><rect x="14.0737%" y="101" width="5.9456%" height="15" fill="rgb(217,207,13)"/><text x="14.3237%" y="111.50">mir_built</text></g><g><title>mir_promoted (10,486,759 samples, 8.06%)</title><rect x="12.0012%" y="149" width="8.0649%" height="15" fill="rgb(231,73,38)"/><text x="12.2512%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (391,985 samples, 0.30%)</title><rect x="20.0661%" y="149" width="0.3015%" height="15" fill="rgb(225,20,46)"/><text x="20.3161%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,116,377 samples, 1.63%)</title><rect x="20.4333%" y="149" width="1.6276%" height="15" fill="rgb(210,31,41)"/><text x="20.6833%" y="159.50"></text></g><g><title>MIR_borrow_checking (26,916,880 samples, 20.70%)</title><rect x="1.3704%" y="181" width="20.7005%" height="15" fill="rgb(221,200,47)"/><text x="1.6204%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,748,527 samples, 20.57%)</title><rect x="1.4999%" y="165" width="20.5711%" height="15" fill="rgb(226,26,5)"/><text x="1.7499%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (498,986 samples, 0.38%)</title><rect x="22.0990%" y="181" width="0.3837%" height="15" fill="rgb(249,33,26)"/><text x="22.3490%" y="191.50"></text></g><g><title>associated_item (179,870 samples, 0.14%)</title><rect x="23.2787%" y="117" width="0.1383%" height="15" fill="rgb(235,183,28)"/><text x="23.5287%" y="127.50"></text></g><g><title>get_lang_items (219,682 samples, 0.17%)</title><rect x="23.4582%" y="101" width="0.1689%" height="15" fill="rgb(221,5,38)"/><text x="23.7082%" y="111.50"></text></g><g><title>codegen_fn_attrs (491,365 samples, 0.38%)</title><rect x="23.4171%" y="117" width="0.3779%" height="15" fill="rgb(247,18,42)"/><text x="23.6671%" y="127.50"></text></g><g><title>codegen_fn_attrs (987,530 samples, 0.76%)</title><rect x="23.0513%" y="149" width="0.7595%" height="15" fill="rgb(241,131,45)"/><text x="23.3013%" y="159.50"></text></g><g><title>should_inherit_track_caller (839,428 samples, 0.65%)</title><rect x="23.1652%" y="133" width="0.6456%" height="15" fill="rgb(249,31,29)"/><text x="23.4152%" y="143.50"></text></g><g><title>check_mod_attrs (1,683,658 samples, 1.29%)</title><rect x="22.5163%" y="165" width="1.2948%" height="15" fill="rgb(225,111,53)"/><text x="22.7663%" y="175.50"></text></g><g><title>check_mod_const_bodies (371,105 samples, 0.29%)</title><rect x="23.8111%" y="165" width="0.2854%" height="15" fill="rgb(238,160,17)"/><text x="24.0611%" y="175.50"></text></g><g><title>check_mod_loops (160,401 samples, 0.12%)</title><rect x="24.0965%" y="165" width="0.1234%" height="15" fill="rgb(214,148,48)"/><text x="24.3465%" y="175.50"></text></g><g><title>lookup_deprecation_entry (389,743 samples, 0.30%)</title><rect x="24.6314%" y="149" width="0.2997%" height="15" fill="rgb(232,36,49)"/><text x="24.8814%" y="159.50"></text></g><g><title>stability_index (271,173 samples, 0.21%)</title><rect x="24.7226%" y="133" width="0.2085%" height="15" fill="rgb(209,103,24)"/><text x="24.9726%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,010,260 samples, 0.78%)</title><rect x="24.2601%" y="165" width="0.7769%" height="15" fill="rgb(229,88,8)"/><text x="24.5101%" y="175.50"></text></g><g><title>misc_checking_1 (3,448,529 samples, 2.65%)</title><rect x="22.4832%" y="181" width="2.6521%" height="15" fill="rgb(213,181,19)"/><text x="22.7332%" y="191.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (283,634 samples, 0.22%)</title><rect x="25.1364%" y="165" width="0.2181%" height="15" fill="rgb(254,191,54)"/><text x="25.3864%" y="175.50"></text></g><g><title>check_mod_liveness (182,092 samples, 0.14%)</title><rect x="25.2145%" y="149" width="0.1400%" height="15" fill="rgb(241,83,37)"/><text x="25.4645%" y="159.50"></text></g><g><title>misc_checking_2 (1,106,073 samples, 0.85%)</title><rect x="25.1353%" y="181" width="0.8506%" height="15" fill="rgb(233,36,39)"/><text x="25.3853%" y="191.50"></text></g><g><title>match_checking (820,939 samples, 0.63%)</title><rect x="25.3546%" y="165" width="0.6313%" height="15" fill="rgb(226,3,54)"/><text x="25.6046%" y="175.50"></text></g><g><title>check_match (778,839 samples, 0.60%)</title><rect x="25.3869%" y="149" width="0.5990%" height="15" fill="rgb(245,192,40)"/><text x="25.6369%" y="159.50"></text></g><g><title>check_private_in_public (303,993 samples, 0.23%)</title><rect x="25.9937%" y="165" width="0.2338%" height="15" fill="rgb(238,167,29)"/><text x="26.2437%" y="175.50"></text></g><g><title>death_checking (658,808 samples, 0.51%)</title><rect x="26.2275%" y="165" width="0.5067%" height="15" fill="rgb(232,182,51)"/><text x="26.4775%" y="175.50"></text></g><g><title>item_attrs (206,603 samples, 0.16%)</title><rect x="26.5752%" y="149" width="0.1589%" height="15" fill="rgb(231,60,39)"/><text x="26.8252%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (204,433 samples, 0.16%)</title><rect x="26.5769%" y="133" width="0.1572%" height="15" fill="rgb(208,69,12)"/><text x="26.8269%" y="143.50"></text></g><g><title>crate_lints (2,047,863 samples, 1.57%)</title><rect x="26.7353%" y="149" width="1.5749%" height="15" fill="rgb(235,93,37)"/><text x="26.9853%" y="159.50"></text></g><g><title>type_of (1,077,751 samples, 0.83%)</title><rect x="27.4814%" y="133" width="0.8288%" height="15" fill="rgb(213,116,39)"/><text x="27.7314%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (838,261 samples, 0.64%)</title><rect x="27.6656%" y="117" width="0.6447%" height="15" fill="rgb(222,207,29)"/><text x="27.9156%" y="127.50"></text></g><g><title>lint_checking (2,583,229 samples, 1.99%)</title><rect x="26.7341%" y="165" width="1.9866%" height="15" fill="rgb(206,96,30)"/><text x="26.9841%" y="175.50">l..</text></g><g><title>module_lints (533,806 samples, 0.41%)</title><rect x="28.3103%" y="149" width="0.4105%" height="15" fill="rgb(218,138,4)"/><text x="28.5603%" y="159.50"></text></g><g><title>lint_mod (530,216 samples, 0.41%)</title><rect x="28.3130%" y="133" width="0.4078%" height="15" fill="rgb(250,191,14)"/><text x="28.5630%" y="143.50"></text></g><g><title>privacy_access_levels (445,655 samples, 0.34%)</title><rect x="28.7208%" y="165" width="0.3427%" height="15" fill="rgb(239,60,40)"/><text x="28.9708%" y="175.50"></text></g><g><title>privacy_checking_modules (1,105,602 samples, 0.85%)</title><rect x="29.0635%" y="165" width="0.8503%" height="15" fill="rgb(206,27,48)"/><text x="29.3135%" y="175.50"></text></g><g><title>check_mod_privacy (1,102,962 samples, 0.85%)</title><rect x="29.0655%" y="149" width="0.8482%" height="15" fill="rgb(225,35,8)"/><text x="29.3155%" y="159.50"></text></g><g><title>misc_checking_3 (5,121,077 samples, 3.94%)</title><rect x="25.9859%" y="181" width="3.9384%" height="15" fill="rgb(250,213,24)"/><text x="26.2359%" y="191.50">misc..</text></g><g><title>impl_trait_ref (190,911 samples, 0.15%)</title><rect x="30.1519%" y="85" width="0.1468%" height="15" fill="rgb(247,123,22)"/><text x="30.4019%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (171,751 samples, 0.13%)</title><rect x="30.1667%" y="69" width="0.1321%" height="15" fill="rgb(231,138,38)"/><text x="30.4167%" y="79.50"></text></g><g><title>adt_destructor (351,794 samples, 0.27%)</title><rect x="30.0496%" y="133" width="0.2705%" height="15" fill="rgb(231,145,46)"/><text x="30.2996%" y="143.50"></text></g><g><title>coherent_trait (347,254 samples, 0.27%)</title><rect x="30.0531%" y="117" width="0.2671%" height="15" fill="rgb(251,118,11)"/><text x="30.3031%" y="127.50"></text></g><g><title>specialization_graph_of (345,894 samples, 0.27%)</title><rect x="30.0542%" y="101" width="0.2660%" height="15" fill="rgb(217,147,25)"/><text x="30.3042%" y="111.50"></text></g><g><title>is_copy_raw (198,921 samples, 0.15%)</title><rect x="30.3202%" y="133" width="0.1530%" height="15" fill="rgb(247,81,37)"/><text x="30.5702%" y="143.50"></text></g><g><title>evaluate_obligation (167,761 samples, 0.13%)</title><rect x="30.3442%" y="117" width="0.1290%" height="15" fill="rgb(209,12,38)"/><text x="30.5942%" y="127.50"></text></g><g><title>param_env (143,543 samples, 0.11%)</title><rect x="30.4732%" y="133" width="0.1104%" height="15" fill="rgb(227,1,9)"/><text x="30.7232%" y="143.50"></text></g><g><title>impl_parent (2,687,958 samples, 2.07%)</title><rect x="34.1764%" y="117" width="2.0672%" height="15" fill="rgb(248,47,43)"/><text x="34.4264%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,571,269 samples, 1.21%)</title><rect x="35.0352%" y="101" width="1.2084%" height="15" fill="rgb(221,10,30)"/><text x="35.2852%" y="111.50"></text></g><g><title>impl_trait_ref (5,576,930 samples, 4.29%)</title><rect x="36.2436%" y="117" width="4.2890%" height="15" fill="rgb(210,229,1)"/><text x="36.4936%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,443,960 samples, 3.42%)</title><rect x="37.1149%" y="101" width="3.4176%" height="15" fill="rgb(222,148,37)"/><text x="37.3649%" y="111.50">met..</text></g><g><title>coherent_trait (14,632,494 samples, 11.25%)</title><rect x="30.0003%" y="149" width="11.2532%" height="15" fill="rgb(234,67,33)"/><text x="30.2503%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,874,106 samples, 10.67%)</title><rect x="30.5836%" y="133" width="10.6699%" height="15" fill="rgb(247,98,35)"/><text x="30.8336%" y="143.50">specialization_g..</text></g><g><title>trait_impls_of (935,430 samples, 0.72%)</title><rect x="40.5341%" y="117" width="0.7194%" height="15" fill="rgb(247,138,52)"/><text x="40.7841%" y="127.50"></text></g><g><title>implementations_of_trait (250,323 samples, 0.19%)</title><rect x="41.0610%" y="101" width="0.1925%" height="15" fill="rgb(213,79,30)"/><text x="41.3110%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (200,702 samples, 0.15%)</title><rect x="41.0992%" y="85" width="0.1544%" height="15" fill="rgb(246,177,23)"/><text x="41.3492%" y="95.50"></text></g><g><title>coherence_checking (14,765,735 samples, 11.36%)</title><rect x="29.9837%" y="165" width="11.3557%" height="15" fill="rgb(230,62,27)"/><text x="30.2337%" y="175.50">coherence_checking</text></g><g><title>associated_item (398,173 samples, 0.31%)</title><rect x="60.3974%" y="101" width="0.3062%" height="15" fill="rgb(216,154,8)"/><text x="60.6474%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (143,431 samples, 0.11%)</title><rect x="60.5933%" y="85" width="0.1103%" height="15" fill="rgb(244,35,45)"/><text x="60.8433%" y="95.50"></text></g><g><title>associated_items (484,505 samples, 0.37%)</title><rect x="60.3398%" y="117" width="0.3726%" height="15" fill="rgb(251,115,12)"/><text x="60.5898%" y="127.50"></text></g><g><title>adt_dtorck_constraint (157,112 samples, 0.12%)</title><rect x="60.9210%" y="101" width="0.1208%" height="15" fill="rgb(240,54,50)"/><text x="61.1710%" y="111.50"></text></g><g><title>dropck_outlives (432,325 samples, 0.33%)</title><rect x="60.7354%" y="117" width="0.3325%" height="15" fill="rgb(233,84,52)"/><text x="60.9854%" y="127.50"></text></g><g><title>predicates_of (186,573 samples, 0.14%)</title><rect x="61.9393%" y="101" width="0.1435%" height="15" fill="rgb(207,117,47)"/><text x="62.1893%" y="111.50"></text></g><g><title>specializes (230,413 samples, 0.18%)</title><rect x="62.0828%" y="101" width="0.1772%" height="15" fill="rgb(249,43,39)"/><text x="62.3328%" y="111.50"></text></g><g><title>param_env (161,012 samples, 0.12%)</title><rect x="62.1362%" y="85" width="0.1238%" height="15" fill="rgb(209,38,44)"/><text x="62.3862%" y="95.50"></text></g><g><title>evaluate_obligation (1,654,483 samples, 1.27%)</title><rect x="61.0679%" y="117" width="1.2724%" height="15" fill="rgb(236,212,23)"/><text x="61.3179%" y="127.50"></text></g><g><title>method_autoderef_steps (202,343 samples, 0.16%)</title><rect x="62.5938%" y="117" width="0.1556%" height="15" fill="rgb(242,79,21)"/><text x="62.8438%" y="127.50"></text></g><g><title>object_safety_violations (144,072 samples, 0.11%)</title><rect x="62.7495%" y="117" width="0.1108%" height="15" fill="rgb(211,96,35)"/><text x="62.9995%" y="127.50"></text></g><g><title>predicates_of (200,732 samples, 0.15%)</title><rect x="62.9011%" y="117" width="0.1544%" height="15" fill="rgb(253,215,40)"/><text x="63.1511%" y="127.50"></text></g><g><title>predicates_defined_on (151,552 samples, 0.12%)</title><rect x="62.9389%" y="101" width="0.1166%" height="15" fill="rgb(211,81,21)"/><text x="63.1889%" y="111.50"></text></g><g><title>item_bodies_checking (28,392,267 samples, 21.84%)</title><rect x="41.3857%" y="165" width="21.8352%" height="15" fill="rgb(208,190,38)"/><text x="41.6357%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,389,507 samples, 21.83%)</title><rect x="41.3879%" y="149" width="21.8331%" height="15" fill="rgb(235,213,38)"/><text x="41.6379%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (28,265,294 samples, 21.74%)</title><rect x="41.4834%" y="133" width="21.7376%" height="15" fill="rgb(237,122,38)"/><text x="41.7334%" y="143.50">typeck</text></g><g><title>item_types_checking (1,803,030 samples, 1.39%)</title><rect x="63.2209%" y="165" width="1.3866%" height="15" fill="rgb(244,218,35)"/><text x="63.4709%" y="175.50"></text></g><g><title>check_mod_item_types (1,799,520 samples, 1.38%)</title><rect x="63.2236%" y="149" width="1.3839%" height="15" fill="rgb(240,68,47)"/><text x="63.4736%" y="159.50"></text></g><g><title>fn_sig (751,710 samples, 0.58%)</title><rect x="65.1453%" y="133" width="0.5781%" height="15" fill="rgb(210,16,53)"/><text x="65.3953%" y="143.50"></text></g><g><title>type_param_predicates (181,913 samples, 0.14%)</title><rect x="65.5835%" y="117" width="0.1399%" height="15" fill="rgb(235,124,12)"/><text x="65.8335%" y="127.50"></text></g><g><title>named_region_map (146,200 samples, 0.11%)</title><rect x="65.9977%" y="117" width="0.1124%" height="15" fill="rgb(224,169,11)"/><text x="66.2477%" y="127.50"></text></g><g><title>generics_of (541,805 samples, 0.42%)</title><rect x="65.7234%" y="133" width="0.4167%" height="15" fill="rgb(250,166,2)"/><text x="65.9734%" y="143.50"></text></g><g><title>impl_trait_ref (163,542 samples, 0.13%)</title><rect x="66.1401%" y="133" width="0.1258%" height="15" fill="rgb(242,216,29)"/><text x="66.3901%" y="143.50"></text></g><g><title>late_bound_vars_map (1,300,215 samples, 1.00%)</title><rect x="67.0877%" y="85" width="0.9999%" height="15" fill="rgb(230,116,27)"/><text x="67.3377%" y="95.50"></text></g><g><title>resolve_lifetimes (1,213,014 samples, 0.93%)</title><rect x="67.1548%" y="69" width="0.9329%" height="15" fill="rgb(228,99,48)"/><text x="67.4048%" y="79.50"></text></g><g><title>lint_levels (357,434 samples, 0.27%)</title><rect x="67.8127%" y="53" width="0.2749%" height="15" fill="rgb(253,11,6)"/><text x="68.0627%" y="63.50"></text></g><g><title>explicit_predicates_of (1,999,631 samples, 1.54%)</title><rect x="66.5801%" y="101" width="1.5378%" height="15" fill="rgb(247,143,39)"/><text x="66.8301%" y="111.50"></text></g><g><title>predicates_of (3,023,274 samples, 2.33%)</title><rect x="66.2659%" y="133" width="2.3251%" height="15" fill="rgb(236,97,10)"/><text x="66.5159%" y="143.50">p..</text></g><g><title>predicates_defined_on (2,873,543 samples, 2.21%)</title><rect x="66.3810%" y="117" width="2.2099%" height="15" fill="rgb(233,208,19)"/><text x="66.6310%" y="127.50">p..</text></g><g><title>inferred_outlives_of (614,999 samples, 0.47%)</title><rect x="68.1180%" y="101" width="0.4730%" height="15" fill="rgb(216,164,2)"/><text x="68.3680%" y="111.50"></text></g><g><title>inferred_outlives_crate (561,577 samples, 0.43%)</title><rect x="68.1590%" y="85" width="0.4319%" height="15" fill="rgb(220,129,5)"/><text x="68.4090%" y="95.50"></text></g><g><title>type_of (237,753 samples, 0.18%)</title><rect x="68.4081%" y="69" width="0.1828%" height="15" fill="rgb(242,17,10)"/><text x="68.6581%" y="79.50"></text></g><g><title>type_collecting (5,509,681 samples, 4.24%)</title><rect x="64.6089%" y="165" width="4.2372%" height="15" fill="rgb(242,107,0)"/><text x="64.8589%" y="175.50">type_..</text></g><g><title>collect_mod_item_types (5,498,991 samples, 4.23%)</title><rect x="64.6172%" y="149" width="4.2290%" height="15" fill="rgb(251,28,31)"/><text x="64.8672%" y="159.50">colle..</text></g><g><title>type_of (299,402 samples, 0.23%)</title><rect x="68.6159%" y="133" width="0.2303%" height="15" fill="rgb(233,223,10)"/><text x="68.8659%" y="143.50"></text></g><g><title>adt_sized_constraint (132,331 samples, 0.10%)</title><rect x="72.7782%" y="101" width="0.1018%" height="15" fill="rgb(215,21,27)"/><text x="73.0282%" y="111.50"></text></g><g><title>adt_sized_constraint (198,223 samples, 0.15%)</title><rect x="72.7286%" y="117" width="0.1524%" height="15" fill="rgb(232,23,21)"/><text x="72.9786%" y="127.50"></text></g><g><title>evaluate_obligation (1,266,116 samples, 0.97%)</title><rect x="71.9263%" y="133" width="0.9737%" height="15" fill="rgb(244,5,23)"/><text x="72.1763%" y="143.50"></text></g><g><title>implied_outlives_bounds (544,510 samples, 0.42%)</title><rect x="72.9095%" y="133" width="0.4188%" height="15" fill="rgb(226,81,46)"/><text x="73.1595%" y="143.50"></text></g><g><title>param_env (528,456 samples, 0.41%)</title><rect x="73.3829%" y="133" width="0.4064%" height="15" fill="rgb(247,70,30)"/><text x="73.6329%" y="143.50"></text></g><g><title>region_scope_tree (642,725 samples, 0.49%)</title><rect x="73.8303%" y="133" width="0.4943%" height="15" fill="rgb(212,68,19)"/><text x="74.0803%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,893,149 samples, 5.30%)</title><rect x="69.1224%" y="149" width="5.3012%" height="15" fill="rgb(240,187,13)"/><text x="69.3724%" y="159.50">check_..</text></g><g><title>evaluate_obligation (335,802 samples, 0.26%)</title><rect x="77.1169%" y="133" width="0.2583%" height="15" fill="rgb(223,113,26)"/><text x="77.3669%" y="143.50"></text></g><g><title>implied_outlives_bounds (213,373 samples, 0.16%)</title><rect x="77.4143%" y="133" width="0.1641%" height="15" fill="rgb(206,192,2)"/><text x="77.6643%" y="143.50"></text></g><g><title>param_env (624,374 samples, 0.48%)</title><rect x="77.5784%" y="133" width="0.4802%" height="15" fill="rgb(241,108,4)"/><text x="77.8284%" y="143.50"></text></g><g><title>analysis (100,897,767 samples, 77.60%)</title><rect x="0.6414%" y="197" width="77.5959%" height="15" fill="rgb(247,173,49)"/><text x="0.8914%" y="207.50">analysis</text></g><g><title>type_check_crate (62,821,321 samples, 48.31%)</title><rect x="29.9243%" y="181" width="48.3130%" height="15" fill="rgb(224,114,35)"/><text x="30.1743%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,204,416 samples, 9.39%)</title><rect x="68.8515%" y="165" width="9.3859%" height="15" fill="rgb(245,159,27)"/><text x="69.1015%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (4,958,972 samples, 3.81%)</title><rect x="74.4236%" y="149" width="3.8137%" height="15" fill="rgb(245,172,44)"/><text x="74.6736%" y="159.50">chec..</text></g><g><title>codegen_crate (383,584 samples, 0.29%)</title><rect x="78.2424%" y="197" width="0.2950%" height="15" fill="rgb(236,23,11)"/><text x="78.4924%" y="207.50"></text></g><g><title>AST_validation (150,212 samples, 0.12%)</title><rect x="78.6341%" y="181" width="0.1155%" height="15" fill="rgb(205,117,38)"/><text x="78.8841%" y="191.50"></text></g><g><title>metadata_load_macro (154,333 samples, 0.12%)</title><rect x="85.4783%" y="149" width="0.1187%" height="15" fill="rgb(237,72,25)"/><text x="85.7283%" y="159.50"></text></g><g><title>metadata_register_crate (1,352,746 samples, 1.04%)</title><rect x="85.5970%" y="149" width="1.0403%" height="15" fill="rgb(244,70,9)"/><text x="85.8470%" y="159.50"></text></g><g><title>metadata_register_crate (475,716 samples, 0.37%)</title><rect x="86.2715%" y="133" width="0.3659%" height="15" fill="rgb(217,125,39)"/><text x="86.5215%" y="143.50"></text></g><g><title>macro_expand_crate (10,138,603 samples, 7.80%)</title><rect x="78.8512%" y="181" width="7.7971%" height="15" fill="rgb(235,36,10)"/><text x="79.1012%" y="191.50">macro_expan..</text></g><g><title>expand_crate (10,129,103 samples, 7.79%)</title><rect x="78.8585%" y="165" width="7.7898%" height="15" fill="rgb(251,123,47)"/><text x="79.1085%" y="175.50">expand_crate</text></g><g><title>finalize_macro_resolutions (196,342 samples, 0.15%)</title><rect x="86.7538%" y="165" width="0.1510%" height="15" fill="rgb(221,13,13)"/><text x="87.0038%" y="175.50"></text></g><g><title>late_resolve_crate (2,303,086 samples, 1.77%)</title><rect x="86.9048%" y="165" width="1.7712%" height="15" fill="rgb(238,131,9)"/><text x="87.1548%" y="175.50">l..</text></g><g><title>configure_and_expand (13,325,599 samples, 10.25%)</title><rect x="78.5374%" y="197" width="10.2481%" height="15" fill="rgb(211,50,8)"/><text x="78.7874%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (2,680,420 samples, 2.06%)</title><rect x="86.7241%" y="181" width="2.0614%" height="15" fill="rgb(245,182,24)"/><text x="86.9741%" y="191.50">r..</text></g><g><title>drop_ast (510,076 samples, 0.39%)</title><rect x="88.7855%" y="197" width="0.3923%" height="15" fill="rgb(242,14,37)"/><text x="89.0355%" y="207.50"></text></g><g><title>early_lint_checks (1,031,542 samples, 0.79%)</title><rect x="89.1913%" y="197" width="0.7933%" height="15" fill="rgb(246,228,12)"/><text x="89.4413%" y="207.50"></text></g><g><title>free_global_ctxt (3,655,111 samples, 2.81%)</title><rect x="89.9846%" y="197" width="2.8110%" height="15" fill="rgb(213,55,15)"/><text x="90.2346%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,753,650 samples, 1.35%)</title><rect x="92.7955%" y="197" width="1.3487%" height="15" fill="rgb(209,9,3)"/><text x="93.0455%" y="207.50"></text></g><g><title>hir_lowering (4,362,059 samples, 3.35%)</title><rect x="94.1442%" y="197" width="3.3547%" height="15" fill="rgb(230,59,30)"/><text x="94.3942%" y="207.50">hir..</text></g><g><title>parse_crate (1,716,670 samples, 1.32%)</title><rect x="97.5380%" y="197" width="1.3202%" height="15" fill="rgb(209,121,21)"/><text x="97.7880%" y="207.50"></text></g><g><title>prepare_outputs (183,562 samples, 0.14%)</title><rect x="98.8628%" y="197" width="0.1412%" height="15" fill="rgb(220,109,13)"/><text x="99.1128%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (825,800 samples, 0.64%)</title><rect x="99.0040%" y="197" width="0.6351%" height="15" fill="rgb(232,18,1)"/><text x="99.2540%" y="207.50"></text></g><g><title>setup_global_ctxt (164,182 samples, 0.13%)</title><rect x="99.6475%" y="197" width="0.1263%" height="15" fill="rgb(215,41,42)"/><text x="99.8975%" y="207.50"></text></g><g><title>all (130,029,804 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (130,029,804 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (294,113 samples, 0.23%)</title><rect x="99.7738%" y="197" width="0.2262%" height="15" fill="rgb(205,98,50)"/><text x="100.0238%" y="207.50"></text></g></svg></svg>