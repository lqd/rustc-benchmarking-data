<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (484,492 samples, 0.17%)</title><rect x="12.4679%" y="165" width="0.1723%" height="15" fill="rgb(227,0,7)"/><text x="12.7179%" y="175.50"></text></g><g><title>param_env (426,914 samples, 0.15%)</title><rect x="13.9033%" y="133" width="0.1519%" height="15" fill="rgb(217,0,24)"/><text x="14.1533%" y="143.50"></text></g><g><title>item_attrs (357,893 samples, 0.13%)</title><rect x="14.4767%" y="101" width="0.1273%" height="15" fill="rgb(221,193,54)"/><text x="14.7267%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (341,853 samples, 0.12%)</title><rect x="14.4824%" y="85" width="0.1216%" height="15" fill="rgb(248,212,6)"/><text x="14.7324%" y="95.50"></text></g><g><title>codegen_fn_attrs (551,233 samples, 0.20%)</title><rect x="14.4202%" y="117" width="0.1961%" height="15" fill="rgb(208,68,35)"/><text x="14.6702%" y="127.50"></text></g><g><title>is_copy_raw (339,313 samples, 0.12%)</title><rect x="17.8292%" y="69" width="0.1207%" height="15" fill="rgb(232,128,0)"/><text x="18.0792%" y="79.50"></text></g><g><title>param_env (323,336 samples, 0.12%)</title><rect x="17.9498%" y="69" width="0.1150%" height="15" fill="rgb(207,160,47)"/><text x="18.1998%" y="79.50"></text></g><g><title>adt_drop_tys (960,982 samples, 0.34%)</title><rect x="17.7234%" y="85" width="0.3418%" height="15" fill="rgb(228,23,34)"/><text x="17.9734%" y="95.50"></text></g><g><title>needs_drop_raw (2,802,797 samples, 1.00%)</title><rect x="17.6110%" y="101" width="0.9969%" height="15" fill="rgb(218,30,26)"/><text x="17.8610%" y="111.50"></text></g><g><title>is_copy_raw (1,525,629 samples, 0.54%)</title><rect x="18.0652%" y="85" width="0.5427%" height="15" fill="rgb(220,122,19)"/><text x="18.3152%" y="95.50"></text></g><g><title>evaluate_obligation (1,236,475 samples, 0.44%)</title><rect x="18.1681%" y="69" width="0.4398%" height="15" fill="rgb(250,228,42)"/><text x="18.4181%" y="79.50"></text></g><g><title>impl_parent (1,567,545 samples, 0.56%)</title><rect x="19.7152%" y="69" width="0.5576%" height="15" fill="rgb(240,193,28)"/><text x="19.9652%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (948,831 samples, 0.34%)</title><rect x="19.9353%" y="53" width="0.3375%" height="15" fill="rgb(216,20,37)"/><text x="20.1853%" y="63.50"></text></g><g><title>specialization_graph_of (7,033,709 samples, 2.50%)</title><rect x="18.7878%" y="85" width="2.5019%" height="15" fill="rgb(206,188,39)"/><text x="19.0378%" y="95.50">sp..</text></g><g><title>impl_trait_ref (2,858,696 samples, 1.02%)</title><rect x="20.2728%" y="69" width="1.0168%" height="15" fill="rgb(217,207,13)"/><text x="20.5228%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,981,888 samples, 0.70%)</title><rect x="20.5847%" y="53" width="0.7049%" height="15" fill="rgb(231,73,38)"/><text x="20.8347%" y="63.50"></text></g><g><title>resolve_instance (7,614,483 samples, 2.71%)</title><rect x="18.6079%" y="101" width="2.7084%" height="15" fill="rgb(225,20,46)"/><text x="18.8579%" y="111.50">re..</text></g><g><title>thir_body (3,168,401 samples, 1.13%)</title><rect x="21.3444%" y="101" width="1.1270%" height="15" fill="rgb(210,31,41)"/><text x="21.5944%" y="111.50"></text></g><g><title>mir_const (25,825,675 samples, 9.19%)</title><rect x="13.3028%" y="149" width="9.1861%" height="15" fill="rgb(221,200,47)"/><text x="13.5528%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (23,710,497 samples, 8.43%)</title><rect x="14.0552%" y="133" width="8.4337%" height="15" fill="rgb(226,26,5)"/><text x="14.3052%" y="143.50">unsafety_che..</text></g><g><title>mir_built (22,133,081 samples, 7.87%)</title><rect x="14.6162%" y="117" width="7.8726%" height="15" fill="rgb(249,33,26)"/><text x="14.8662%" y="127.50">mir_built</text></g><g><title>mir_promoted (28,155,718 samples, 10.01%)</title><rect x="12.6652%" y="165" width="10.0149%" height="15" fill="rgb(235,183,28)"/><text x="12.9152%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (537,375 samples, 0.19%)</title><rect x="22.4889%" y="149" width="0.1911%" height="15" fill="rgb(221,5,38)"/><text x="22.7389%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (1,030,251 samples, 0.37%)</title><rect x="22.6800%" y="165" width="0.3665%" height="15" fill="rgb(247,18,42)"/><text x="22.9300%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (537,314 samples, 0.19%)</title><rect x="23.0465%" y="165" width="0.1911%" height="15" fill="rgb(241,131,45)"/><text x="23.2965%" y="175.50"></text></g><g><title>normalize_projection_ty (342,864 samples, 0.12%)</title><rect x="23.1157%" y="149" width="0.1220%" height="15" fill="rgb(249,31,29)"/><text x="23.3657%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,630,837 samples, 0.58%)</title><rect x="23.2376%" y="165" width="0.5801%" height="15" fill="rgb(225,111,53)"/><text x="23.4876%" y="175.50"></text></g><g><title>normalize_projection_ty (931,760 samples, 0.33%)</title><rect x="23.4863%" y="149" width="0.3314%" height="15" fill="rgb(238,160,17)"/><text x="23.7363%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,540,117 samples, 1.97%)</title><rect x="23.8177%" y="165" width="1.9706%" height="15" fill="rgb(214,148,48)"/><text x="24.0677%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (71,203,303 samples, 25.33%)</title><rect x="0.4658%" y="197" width="25.3267%" height="15" fill="rgb(232,36,49)"/><text x="0.7158%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (71,052,301 samples, 25.27%)</title><rect x="0.5195%" y="181" width="25.2730%" height="15" fill="rgb(209,103,24)"/><text x="0.7695%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (330,774 samples, 0.12%)</title><rect x="26.0839%" y="165" width="0.1177%" height="15" fill="rgb(229,88,8)"/><text x="26.3339%" y="175.50"></text></g><g><title>check_mod_attrs (753,379 samples, 0.27%)</title><rect x="25.9337%" y="181" width="0.2680%" height="15" fill="rgb(213,181,19)"/><text x="26.1837%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (451,375 samples, 0.16%)</title><rect x="26.2945%" y="181" width="0.1606%" height="15" fill="rgb(254,191,54)"/><text x="26.5445%" y="191.50"></text></g><g><title>misc_checking_1 (1,537,987 samples, 0.55%)</title><rect x="25.9269%" y="197" width="0.5471%" height="15" fill="rgb(241,83,37)"/><text x="26.1769%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,448,386 samples, 0.52%)</title><rect x="26.4746%" y="181" width="0.5152%" height="15" fill="rgb(233,36,39)"/><text x="26.7246%" y="191.50"></text></g><g><title>check_mod_liveness (1,242,284 samples, 0.44%)</title><rect x="26.5479%" y="165" width="0.4419%" height="15" fill="rgb(226,3,54)"/><text x="26.7979%" y="175.50"></text></g><g><title>type_uninhabited_from (419,985 samples, 0.15%)</title><rect x="26.8403%" y="149" width="0.1494%" height="15" fill="rgb(245,192,40)"/><text x="27.0903%" y="159.50"></text></g><g><title>type_uninhabited_from (354,533 samples, 0.13%)</title><rect x="26.8636%" y="133" width="0.1261%" height="15" fill="rgb(238,167,29)"/><text x="27.1136%" y="143.50"></text></g><g><title>type_uninhabited_from (290,891 samples, 0.10%)</title><rect x="26.8863%" y="117" width="0.1035%" height="15" fill="rgb(232,182,51)"/><text x="27.1363%" y="127.50"></text></g><g><title>param_env (326,943 samples, 0.12%)</title><rect x="27.4310%" y="149" width="0.1163%" height="15" fill="rgb(231,60,39)"/><text x="27.6810%" y="159.50"></text></g><g><title>misc_checking_2 (3,019,254 samples, 1.07%)</title><rect x="26.4739%" y="197" width="1.0739%" height="15" fill="rgb(208,69,12)"/><text x="26.7239%" y="207.50"></text></g><g><title>match_checking (1,569,108 samples, 0.56%)</title><rect x="26.9897%" y="181" width="0.5581%" height="15" fill="rgb(235,93,37)"/><text x="27.2397%" y="191.50"></text></g><g><title>check_match (1,527,308 samples, 0.54%)</title><rect x="27.0046%" y="165" width="0.5433%" height="15" fill="rgb(213,116,39)"/><text x="27.2546%" y="175.50"></text></g><g><title>death_checking (494,215 samples, 0.18%)</title><rect x="27.6273%" y="181" width="0.1758%" height="15" fill="rgb(222,207,29)"/><text x="27.8773%" y="191.50"></text></g><g><title>eval_to_const_value_raw (615,787 samples, 0.22%)</title><rect x="28.1387%" y="101" width="0.2190%" height="15" fill="rgb(206,96,30)"/><text x="28.3887%" y="111.50"></text></g><g><title>eval_to_const_value_raw (615,057 samples, 0.22%)</title><rect x="28.1390%" y="85" width="0.2188%" height="15" fill="rgb(218,138,4)"/><text x="28.3890%" y="95.50"></text></g><g><title>eval_to_allocation_raw (613,347 samples, 0.22%)</title><rect x="28.1396%" y="69" width="0.2182%" height="15" fill="rgb(250,191,14)"/><text x="28.3896%" y="79.50"></text></g><g><title>eval_to_allocation_raw (680,308 samples, 0.24%)</title><rect x="28.1162%" y="149" width="0.2420%" height="15" fill="rgb(239,60,40)"/><text x="28.3662%" y="159.50"></text></g><g><title>eval_to_allocation_raw (679,398 samples, 0.24%)</title><rect x="28.1166%" y="133" width="0.2417%" height="15" fill="rgb(206,27,48)"/><text x="28.3666%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (624,517 samples, 0.22%)</title><rect x="28.1361%" y="117" width="0.2221%" height="15" fill="rgb(225,35,8)"/><text x="28.3861%" y="127.50"></text></g><g><title>crate_lints (2,086,793 samples, 0.74%)</title><rect x="27.8037%" y="165" width="0.7423%" height="15" fill="rgb(250,213,24)"/><text x="28.0537%" y="175.50"></text></g><g><title>lint_checking (3,195,725 samples, 1.14%)</title><rect x="27.8031%" y="181" width="1.1367%" height="15" fill="rgb(247,123,22)"/><text x="28.0531%" y="191.50"></text></g><g><title>module_lints (1,107,212 samples, 0.39%)</title><rect x="28.5460%" y="165" width="0.3938%" height="15" fill="rgb(231,138,38)"/><text x="28.7960%" y="175.50"></text></g><g><title>lint_mod (1,103,302 samples, 0.39%)</title><rect x="28.5474%" y="149" width="0.3924%" height="15" fill="rgb(231,145,46)"/><text x="28.7974%" y="159.50"></text></g><g><title>privacy_checking_modules (1,846,731 samples, 0.66%)</title><rect x="29.0064%" y="181" width="0.6569%" height="15" fill="rgb(251,118,11)"/><text x="29.2564%" y="191.50"></text></g><g><title>check_mod_privacy (1,844,311 samples, 0.66%)</title><rect x="29.0073%" y="165" width="0.6560%" height="15" fill="rgb(217,147,25)"/><text x="29.2573%" y="175.50"></text></g><g><title>misc_checking_3 (5,968,227 samples, 2.12%)</title><rect x="27.5479%" y="197" width="2.1229%" height="15" fill="rgb(247,81,37)"/><text x="27.7979%" y="207.50">m..</text></g><g><title>impl_parent (963,354 samples, 0.34%)</title><rect x="30.1862%" y="133" width="0.3427%" height="15" fill="rgb(209,12,38)"/><text x="30.4362%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (617,900 samples, 0.22%)</title><rect x="30.3091%" y="117" width="0.2198%" height="15" fill="rgb(227,1,9)"/><text x="30.5591%" y="127.50"></text></g><g><title>impl_trait_ref (3,344,506 samples, 1.19%)</title><rect x="30.5289%" y="133" width="1.1896%" height="15" fill="rgb(248,47,43)"/><text x="30.7789%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,988,485 samples, 1.06%)</title><rect x="30.6555%" y="117" width="1.0630%" height="15" fill="rgb(221,10,30)"/><text x="30.9055%" y="127.50"></text></g><g><title>coherent_trait (5,942,056 samples, 2.11%)</title><rect x="29.7066%" y="165" width="2.1136%" height="15" fill="rgb(210,229,1)"/><text x="29.9566%" y="175.50">c..</text></g><g><title>specialization_graph_of (5,932,985 samples, 2.11%)</title><rect x="29.7099%" y="149" width="2.1103%" height="15" fill="rgb(222,148,37)"/><text x="29.9599%" y="159.50">s..</text></g><g><title>trait_impls_of (284,493 samples, 0.10%)</title><rect x="31.7190%" y="133" width="0.1012%" height="15" fill="rgb(234,67,33)"/><text x="31.9690%" y="143.50"></text></g><g><title>coherence_checking (5,992,757 samples, 2.13%)</title><rect x="29.7020%" y="181" width="2.1316%" height="15" fill="rgb(247,98,35)"/><text x="29.9520%" y="191.50">c..</text></g><g><title>adt_def (385,501 samples, 0.14%)</title><rect x="39.2578%" y="101" width="0.1371%" height="15" fill="rgb(247,138,52)"/><text x="39.5078%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (376,571 samples, 0.13%)</title><rect x="39.2610%" y="85" width="0.1339%" height="15" fill="rgb(213,79,30)"/><text x="39.5110%" y="95.50"></text></g><g><title>adt_def (552,468 samples, 0.20%)</title><rect x="39.4820%" y="85" width="0.1965%" height="15" fill="rgb(246,177,23)"/><text x="39.7320%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (544,668 samples, 0.19%)</title><rect x="39.4848%" y="69" width="0.1937%" height="15" fill="rgb(230,62,27)"/><text x="39.7348%" y="79.50"></text></g><g><title>item_attrs (461,217 samples, 0.16%)</title><rect x="39.5145%" y="53" width="0.1641%" height="15" fill="rgb(216,154,8)"/><text x="39.7645%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (453,506 samples, 0.16%)</title><rect x="39.5172%" y="37" width="0.1613%" height="15" fill="rgb(244,35,45)"/><text x="39.7672%" y="47.50"></text></g><g><title>adt_dtorck_constraint (437,866 samples, 0.16%)</title><rect x="40.0146%" y="37" width="0.1557%" height="15" fill="rgb(251,115,12)"/><text x="40.2646%" y="47.50"></text></g><g><title>adt_dtorck_constraint (783,677 samples, 0.28%)</title><rect x="39.9039%" y="53" width="0.2788%" height="15" fill="rgb(240,54,50)"/><text x="40.1539%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,104,762 samples, 0.39%)</title><rect x="39.8047%" y="69" width="0.3930%" height="15" fill="rgb(233,84,52)"/><text x="40.0547%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,480,128 samples, 0.53%)</title><rect x="39.6953%" y="85" width="0.5265%" height="15" fill="rgb(207,117,47)"/><text x="39.9453%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,380,251 samples, 0.85%)</title><rect x="39.4086%" y="101" width="0.8466%" height="15" fill="rgb(249,43,39)"/><text x="39.6586%" y="111.50"></text></g><g><title>dropck_outlives (3,850,272 samples, 1.37%)</title><rect x="38.9123%" y="133" width="1.3695%" height="15" fill="rgb(209,38,44)"/><text x="39.1623%" y="143.50"></text></g><g><title>adt_dtorck_constraint (3,095,045 samples, 1.10%)</title><rect x="39.1810%" y="117" width="1.1009%" height="15" fill="rgb(236,212,23)"/><text x="39.4310%" y="127.50"></text></g><g><title>evaluate_obligation (840,049 samples, 0.30%)</title><rect x="40.2819%" y="133" width="0.2988%" height="15" fill="rgb(242,79,21)"/><text x="40.5319%" y="143.50"></text></g><g><title>associated_item (696,997 samples, 0.25%)</title><rect x="54.5131%" y="101" width="0.2479%" height="15" fill="rgb(211,96,35)"/><text x="54.7631%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (368,014 samples, 0.13%)</title><rect x="54.6301%" y="85" width="0.1309%" height="15" fill="rgb(253,215,40)"/><text x="54.8801%" y="95.50"></text></g><g><title>associated_items (907,208 samples, 0.32%)</title><rect x="54.4514%" y="117" width="0.3227%" height="15" fill="rgb(211,81,21)"/><text x="54.7014%" y="127.50"></text></g><g><title>dropck_outlives (3,862,954 samples, 1.37%)</title><rect x="54.8142%" y="117" width="1.3740%" height="15" fill="rgb(208,190,38)"/><text x="55.0642%" y="127.50"></text></g><g><title>adt_dtorck_constraint (425,335 samples, 0.15%)</title><rect x="56.0370%" y="101" width="0.1513%" height="15" fill="rgb(235,213,38)"/><text x="56.2870%" y="111.50"></text></g><g><title>predicates_of (284,996 samples, 0.10%)</title><rect x="57.5593%" y="101" width="0.1014%" height="15" fill="rgb(237,122,38)"/><text x="57.8093%" y="111.50"></text></g><g><title>trait_impls_of (599,267 samples, 0.21%)</title><rect x="57.6846%" y="101" width="0.2132%" height="15" fill="rgb(244,218,35)"/><text x="57.9346%" y="111.50"></text></g><g><title>evaluate_obligation (4,806,673 samples, 1.71%)</title><rect x="56.1883%" y="117" width="1.7097%" height="15" fill="rgb(240,68,47)"/><text x="56.4383%" y="127.50"></text></g><g><title>is_copy_raw (414,497 samples, 0.15%)</title><rect x="58.1682%" y="117" width="0.1474%" height="15" fill="rgb(210,16,53)"/><text x="58.4182%" y="127.50"></text></g><g><title>evaluate_obligation (338,766 samples, 0.12%)</title><rect x="58.1951%" y="101" width="0.1205%" height="15" fill="rgb(235,124,12)"/><text x="58.4451%" y="111.50"></text></g><g><title>evaluate_obligation (562,508 samples, 0.20%)</title><rect x="58.6426%" y="101" width="0.2001%" height="15" fill="rgb(224,169,11)"/><text x="58.8926%" y="111.50"></text></g><g><title>method_autoderef_steps (1,237,484 samples, 0.44%)</title><rect x="58.4073%" y="117" width="0.4402%" height="15" fill="rgb(250,166,2)"/><text x="58.6573%" y="127.50"></text></g><g><title>predicates_of (719,787 samples, 0.26%)</title><rect x="58.8578%" y="117" width="0.2560%" height="15" fill="rgb(242,216,29)"/><text x="59.1078%" y="127.50"></text></g><g><title>predicates_defined_on (493,805 samples, 0.18%)</title><rect x="58.9382%" y="101" width="0.1756%" height="15" fill="rgb(230,116,27)"/><text x="59.1882%" y="111.50"></text></g><g><title>typeck (51,757,946 samples, 18.41%)</title><rect x="40.8927%" y="133" width="18.4101%" height="15" fill="rgb(228,99,48)"/><text x="41.1427%" y="143.50">typeck</text></g><g><title>item_bodies_checking (77,228,910 samples, 27.47%)</title><rect x="31.8420%" y="181" width="27.4700%" height="15" fill="rgb(253,11,6)"/><text x="32.0920%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (77,224,950 samples, 27.47%)</title><rect x="31.8434%" y="165" width="27.4686%" height="15" fill="rgb(247,143,39)"/><text x="32.0934%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (77,162,330 samples, 27.45%)</title><rect x="31.8657%" y="149" width="27.4463%" height="15" fill="rgb(236,97,10)"/><text x="32.1157%" y="159.50">typeck</text></g><g><title>adt_destructor (468,785 samples, 0.17%)</title><rect x="59.5350%" y="149" width="0.1667%" height="15" fill="rgb(233,208,19)"/><text x="59.7850%" y="159.50"></text></g><g><title>coherent_trait (463,725 samples, 0.16%)</title><rect x="59.5368%" y="133" width="0.1649%" height="15" fill="rgb(216,164,2)"/><text x="59.7868%" y="143.50"></text></g><g><title>specialization_graph_of (461,575 samples, 0.16%)</title><rect x="59.5375%" y="117" width="0.1642%" height="15" fill="rgb(220,129,5)"/><text x="59.7875%" y="127.50"></text></g><g><title>item_types_checking (2,163,865 samples, 0.77%)</title><rect x="59.3120%" y="181" width="0.7697%" height="15" fill="rgb(242,17,10)"/><text x="59.5620%" y="191.50"></text></g><g><title>check_mod_item_types (2,160,015 samples, 0.77%)</title><rect x="59.3134%" y="165" width="0.7683%" height="15" fill="rgb(242,107,0)"/><text x="59.5634%" y="175.50"></text></g><g><title>typeck (743,408 samples, 0.26%)</title><rect x="59.8173%" y="149" width="0.2644%" height="15" fill="rgb(251,28,31)"/><text x="60.0673%" y="159.50"></text></g><g><title>named_region_map (575,650 samples, 0.20%)</title><rect x="60.3027%" y="133" width="0.2048%" height="15" fill="rgb(233,223,10)"/><text x="60.5527%" y="143.50"></text></g><g><title>resolve_lifetimes (563,410 samples, 0.20%)</title><rect x="60.3071%" y="117" width="0.2004%" height="15" fill="rgb(215,21,27)"/><text x="60.5571%" y="127.50"></text></g><g><title>lint_levels (283,923 samples, 0.10%)</title><rect x="60.4065%" y="101" width="0.1010%" height="15" fill="rgb(232,23,21)"/><text x="60.6565%" y="111.50"></text></g><g><title>generics_of (696,511 samples, 0.25%)</title><rect x="60.2655%" y="149" width="0.2477%" height="15" fill="rgb(244,5,23)"/><text x="60.5155%" y="159.50"></text></g><g><title>explicit_predicates_of (551,876 samples, 0.20%)</title><rect x="60.5446%" y="117" width="0.1963%" height="15" fill="rgb(226,81,46)"/><text x="60.7946%" y="127.50"></text></g><g><title>predicates_of (740,237 samples, 0.26%)</title><rect x="60.5192%" y="149" width="0.2633%" height="15" fill="rgb(247,70,30)"/><text x="60.7692%" y="159.50"></text></g><g><title>predicates_defined_on (712,187 samples, 0.25%)</title><rect x="60.5292%" y="133" width="0.2533%" height="15" fill="rgb(212,68,19)"/><text x="60.7792%" y="143.50"></text></g><g><title>type_collecting (2,052,923 samples, 0.73%)</title><rect x="60.0830%" y="181" width="0.7302%" height="15" fill="rgb(240,187,13)"/><text x="60.3330%" y="191.50"></text></g><g><title>collect_mod_item_types (2,043,143 samples, 0.73%)</title><rect x="60.0865%" y="165" width="0.7267%" height="15" fill="rgb(223,113,26)"/><text x="60.3365%" y="175.50"></text></g><g><title>evaluate_obligation (289,453 samples, 0.10%)</title><rect x="61.0094%" y="149" width="0.1030%" height="15" fill="rgb(206,192,2)"/><text x="61.2594%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,032,054 samples, 0.37%)</title><rect x="60.8737%" y="165" width="0.3671%" height="15" fill="rgb(241,108,4)"/><text x="61.1237%" y="175.50"></text></g><g><title>adt_sized_constraint (470,556 samples, 0.17%)</title><rect x="61.7879%" y="85" width="0.1674%" height="15" fill="rgb(247,173,49)"/><text x="62.0379%" y="95.50"></text></g><g><title>adt_sized_constraint (594,738 samples, 0.21%)</title><rect x="61.7489%" y="101" width="0.2115%" height="15" fill="rgb(224,114,35)"/><text x="61.9989%" y="111.50"></text></g><g><title>adt_sized_constraint (720,059 samples, 0.26%)</title><rect x="61.7079%" y="117" width="0.2561%" height="15" fill="rgb(245,159,27)"/><text x="61.9579%" y="127.50"></text></g><g><title>adt_sized_constraint (880,769 samples, 0.31%)</title><rect x="61.6586%" y="133" width="0.3133%" height="15" fill="rgb(245,172,44)"/><text x="61.9086%" y="143.50"></text></g><g><title>evaluate_obligation (1,186,093 samples, 0.42%)</title><rect x="61.5783%" y="149" width="0.4219%" height="15" fill="rgb(236,23,11)"/><text x="61.8283%" y="159.50"></text></g><g><title>predicates_of (306,093 samples, 0.11%)</title><rect x="62.1315%" y="149" width="0.1089%" height="15" fill="rgb(205,117,38)"/><text x="62.3815%" y="159.50"></text></g><g><title>region_scope_tree (585,706 samples, 0.21%)</title><rect x="62.2403%" y="149" width="0.2083%" height="15" fill="rgb(237,72,25)"/><text x="62.4903%" y="159.50"></text></g><g><title>trait_impls_of (392,384 samples, 0.14%)</title><rect x="62.4503%" y="149" width="0.1396%" height="15" fill="rgb(244,70,9)"/><text x="62.7003%" y="159.50"></text></g><g><title>check_item_well_formed (3,827,011 samples, 1.36%)</title><rect x="61.2408%" y="165" width="1.3613%" height="15" fill="rgb(217,125,39)"/><text x="61.4908%" y="175.50"></text></g><g><title>analysis (175,602,017 samples, 62.46%)</title><rect x="0.2545%" y="213" width="62.4609%" height="15" fill="rgb(235,36,10)"/><text x="0.5045%" y="223.50">analysis</text></g><g><title>type_check_crate (92,901,385 samples, 33.04%)</title><rect x="29.6707%" y="197" width="33.0446%" height="15" fill="rgb(251,123,47)"/><text x="29.9207%" y="207.50">type_check_crate</text></g><g><title>wf_checking (5,340,989 samples, 1.90%)</title><rect x="60.8156%" y="181" width="1.8998%" height="15" fill="rgb(221,13,13)"/><text x="61.0656%" y="191.50">w..</text></g><g><title>check_trait_item_well_formed (318,453 samples, 0.11%)</title><rect x="62.6021%" y="165" width="0.1133%" height="15" fill="rgb(238,131,9)"/><text x="62.8521%" y="175.50"></text></g><g><title>codegen_crate (483,236 samples, 0.17%)</title><rect x="62.7180%" y="213" width="0.1719%" height="15" fill="rgb(211,50,8)"/><text x="62.9680%" y="223.50"></text></g><g><title>metadata_load_macro (423,504 samples, 0.15%)</title><rect x="89.6905%" y="165" width="0.1506%" height="15" fill="rgb(245,182,24)"/><text x="89.9405%" y="175.50"></text></g><g><title>metadata_register_crate (7,502,645 samples, 2.67%)</title><rect x="89.8411%" y="165" width="2.6687%" height="15" fill="rgb(242,14,37)"/><text x="90.0911%" y="175.50">me..</text></g><g><title>metadata_register_crate (6,348,330 samples, 2.26%)</title><rect x="90.2517%" y="149" width="2.2581%" height="15" fill="rgb(246,228,12)"/><text x="90.5017%" y="159.50">m..</text></g><g><title>macro_expand_crate (82,705,572 samples, 29.42%)</title><rect x="63.0972%" y="197" width="29.4180%" height="15" fill="rgb(213,55,15)"/><text x="63.3472%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (82,684,962 samples, 29.41%)</title><rect x="63.1045%" y="181" width="29.4107%" height="15" fill="rgb(209,9,3)"/><text x="63.3545%" y="191.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (393,315 samples, 0.14%)</title><rect x="92.5156%" y="197" width="0.1399%" height="15" fill="rgb(230,59,30)"/><text x="92.7656%" y="207.50"></text></g><g><title>finalize_macro_resolutions (812,889 samples, 0.29%)</title><rect x="92.7697%" y="181" width="0.2891%" height="15" fill="rgb(209,121,21)"/><text x="93.0197%" y="191.50"></text></g><g><title>late_resolve_crate (3,544,829 samples, 1.26%)</title><rect x="93.0589%" y="181" width="1.2609%" height="15" fill="rgb(220,109,13)"/><text x="93.3089%" y="191.50"></text></g><g><title>configure_and_expand (88,576,387 samples, 31.51%)</title><rect x="62.8899%" y="213" width="31.5062%" height="15" fill="rgb(232,18,1)"/><text x="63.1399%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (4,674,011 samples, 1.66%)</title><rect x="92.7336%" y="197" width="1.6625%" height="15" fill="rgb(215,41,42)"/><text x="92.9836%" y="207.50"></text></g><g><title>drop_ast (327,073 samples, 0.12%)</title><rect x="94.3961%" y="213" width="0.1163%" height="15" fill="rgb(224,123,36)"/><text x="94.6461%" y="223.50"></text></g><g><title>early_lint_checks (897,330 samples, 0.32%)</title><rect x="94.5196%" y="213" width="0.3192%" height="15" fill="rgb(240,125,3)"/><text x="94.7696%" y="223.50"></text></g><g><title>free_global_ctxt (4,444,659 samples, 1.58%)</title><rect x="94.8388%" y="213" width="1.5809%" height="15" fill="rgb(205,98,50)"/><text x="95.0888%" y="223.50"></text></g><g><title>hir_lowering (5,118,738 samples, 1.82%)</title><rect x="96.4975%" y="213" width="1.8207%" height="15" fill="rgb(205,185,37)"/><text x="96.7475%" y="223.50">h..</text></g><g><title>parse_crate (3,153,635 samples, 1.12%)</title><rect x="98.3417%" y="213" width="1.1217%" height="15" fill="rgb(238,207,15)"/><text x="98.5917%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (877,210 samples, 0.31%)</title><rect x="99.5376%" y="213" width="0.3120%" height="15" fill="rgb(213,199,42)"/><text x="99.7876%" y="223.50"></text></g><g><title>all (281,139,263 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (281,139,263 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (323,243 samples, 0.11%)</title><rect x="99.8850%" y="213" width="0.1150%" height="15" fill="rgb(241,35,35)"/><text x="100.1350%" y="223.50"></text></g></svg></svg>