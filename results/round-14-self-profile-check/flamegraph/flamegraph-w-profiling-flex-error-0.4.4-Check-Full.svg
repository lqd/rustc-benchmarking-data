<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (82,851 samples, 0.11%)</title><rect x="8.3292%" y="133" width="0.1099%" height="15" fill="rgb(227,0,7)"/><text x="8.5792%" y="143.50"></text></g><g><title>codegen_fn_attrs (88,181 samples, 0.12%)</title><rect x="8.6726%" y="117" width="0.1170%" height="15" fill="rgb(217,0,24)"/><text x="8.9226%" y="127.50"></text></g><g><title>needs_drop_raw (598,406 samples, 0.79%)</title><rect x="9.9673%" y="101" width="0.7939%" height="15" fill="rgb(221,193,54)"/><text x="10.2173%" y="111.50"></text></g><g><title>is_copy_raw (516,254 samples, 0.68%)</title><rect x="10.0763%" y="85" width="0.6849%" height="15" fill="rgb(248,212,6)"/><text x="10.3263%" y="95.50"></text></g><g><title>evaluate_obligation (446,774 samples, 0.59%)</title><rect x="10.1685%" y="69" width="0.5927%" height="15" fill="rgb(208,68,35)"/><text x="10.4185%" y="79.50"></text></g><g><title>trait_impls_of (138,931 samples, 0.18%)</title><rect x="10.5769%" y="53" width="0.1843%" height="15" fill="rgb(232,128,0)"/><text x="10.8269%" y="63.50"></text></g><g><title>specialization_graph_of (110,412 samples, 0.15%)</title><rect x="10.8982%" y="85" width="0.1465%" height="15" fill="rgb(207,160,47)"/><text x="11.1482%" y="95.50"></text></g><g><title>resolve_instance (236,114 samples, 0.31%)</title><rect x="10.7612%" y="101" width="0.3133%" height="15" fill="rgb(228,23,34)"/><text x="11.0112%" y="111.50"></text></g><g><title>thir_body (317,614 samples, 0.42%)</title><rect x="11.0888%" y="101" width="0.4214%" height="15" fill="rgb(218,30,26)"/><text x="11.3388%" y="111.50"></text></g><g><title>mir_const (2,734,737 samples, 3.63%)</title><rect x="7.8946%" y="149" width="3.6282%" height="15" fill="rgb(220,122,19)"/><text x="8.1446%" y="159.50">mir_..</text></g><g><title>unsafety_check_result (2,324,294 samples, 3.08%)</title><rect x="8.4391%" y="133" width="3.0836%" height="15" fill="rgb(250,228,42)"/><text x="8.6891%" y="143.50">uns..</text></g><g><title>mir_built (2,060,123 samples, 2.73%)</title><rect x="8.7896%" y="117" width="2.7331%" height="15" fill="rgb(240,193,28)"/><text x="9.0396%" y="127.50">mi..</text></g><g><title>mir_promoted (3,160,346 samples, 4.19%)</title><rect x="7.3552%" y="165" width="4.1928%" height="15" fill="rgb(216,20,37)"/><text x="7.6052%" y="175.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (328,734 samples, 0.44%)</title><rect x="11.5480%" y="165" width="0.4361%" height="15" fill="rgb(206,188,39)"/><text x="11.7980%" y="175.50"></text></g><g><title>type_op_normalize_ty (292,693 samples, 0.39%)</title><rect x="12.0371%" y="165" width="0.3883%" height="15" fill="rgb(217,207,13)"/><text x="12.2871%" y="175.50"></text></g><g><title>normalize_projection_ty (234,062 samples, 0.31%)</title><rect x="12.1149%" y="149" width="0.3105%" height="15" fill="rgb(231,73,38)"/><text x="12.3649%" y="159.50"></text></g><g><title>type_op_prove_predicate (578,519 samples, 0.77%)</title><rect x="12.4254%" y="165" width="0.7675%" height="15" fill="rgb(225,20,46)"/><text x="12.6754%" y="175.50"></text></g><g><title>MIR_borrow_checking (9,164,342 samples, 12.16%)</title><rect x="1.0454%" y="197" width="12.1583%" height="15" fill="rgb(210,31,41)"/><text x="1.2954%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,117,871 samples, 12.10%)</title><rect x="1.1071%" y="181" width="12.0966%" height="15" fill="rgb(221,200,47)"/><text x="1.3571%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (129,872 samples, 0.17%)</title><rect x="13.2168%" y="197" width="0.1723%" height="15" fill="rgb(226,26,5)"/><text x="13.4668%" y="207.50"></text></g><g><title>should_inherit_track_caller (92,951 samples, 0.12%)</title><rect x="13.7206%" y="149" width="0.1233%" height="15" fill="rgb(249,33,26)"/><text x="13.9706%" y="159.50"></text></g><g><title>codegen_fn_attrs (215,192 samples, 0.29%)</title><rect x="13.5843%" y="165" width="0.2855%" height="15" fill="rgb(235,183,28)"/><text x="13.8343%" y="175.50"></text></g><g><title>check_mod_attrs (330,352 samples, 0.44%)</title><rect x="13.4316%" y="181" width="0.4383%" height="15" fill="rgb(221,5,38)"/><text x="13.6816%" y="191.50"></text></g><g><title>lookup_deprecation_entry (116,531 samples, 0.15%)</title><rect x="14.1690%" y="165" width="0.1546%" height="15" fill="rgb(247,18,42)"/><text x="14.4190%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (290,484 samples, 0.39%)</title><rect x="14.0079%" y="181" width="0.3854%" height="15" fill="rgb(241,131,45)"/><text x="14.2579%" y="191.50"></text></g><g><title>misc_checking_1 (801,589 samples, 1.06%)</title><rect x="13.3896%" y="197" width="1.0635%" height="15" fill="rgb(249,31,29)"/><text x="13.6396%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (190,562 samples, 0.25%)</title><rect x="14.4550%" y="181" width="0.2528%" height="15" fill="rgb(225,111,53)"/><text x="14.7050%" y="191.50"></text></g><g><title>check_mod_liveness (147,320 samples, 0.20%)</title><rect x="14.5123%" y="165" width="0.1954%" height="15" fill="rgb(238,160,17)"/><text x="14.7623%" y="175.50"></text></g><g><title>misc_checking_2 (330,004 samples, 0.44%)</title><rect x="14.4530%" y="197" width="0.4378%" height="15" fill="rgb(214,148,48)"/><text x="14.7030%" y="207.50"></text></g><g><title>match_checking (137,982 samples, 0.18%)</title><rect x="14.7078%" y="181" width="0.1831%" height="15" fill="rgb(232,36,49)"/><text x="14.9578%" y="191.50"></text></g><g><title>check_match (125,482 samples, 0.17%)</title><rect x="14.7244%" y="165" width="0.1665%" height="15" fill="rgb(209,103,24)"/><text x="14.9744%" y="175.50"></text></g><g><title>check_private_in_public (121,751 samples, 0.16%)</title><rect x="14.9046%" y="181" width="0.1615%" height="15" fill="rgb(229,88,8)"/><text x="15.1546%" y="191.50"></text></g><g><title>death_checking (312,034 samples, 0.41%)</title><rect x="15.0661%" y="181" width="0.4140%" height="15" fill="rgb(213,181,19)"/><text x="15.3161%" y="191.50"></text></g><g><title>param_env (320,614 samples, 0.43%)</title><rect x="16.3145%" y="149" width="0.4254%" height="15" fill="rgb(254,191,54)"/><text x="16.5645%" y="159.50"></text></g><g><title>predicates_of (135,151 samples, 0.18%)</title><rect x="16.5605%" y="133" width="0.1793%" height="15" fill="rgb(241,83,37)"/><text x="16.8105%" y="143.50"></text></g><g><title>predicates_defined_on (112,141 samples, 0.15%)</title><rect x="16.5911%" y="117" width="0.1488%" height="15" fill="rgb(233,36,39)"/><text x="16.8411%" y="127.50"></text></g><g><title>crate_lints (2,019,552 samples, 2.68%)</title><rect x="15.4823%" y="165" width="2.6793%" height="15" fill="rgb(226,3,54)"/><text x="15.7323%" y="175.50">cr..</text></g><g><title>type_of (1,038,301 samples, 1.38%)</title><rect x="16.7841%" y="149" width="1.3775%" height="15" fill="rgb(245,192,40)"/><text x="17.0341%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (798,808 samples, 1.06%)</title><rect x="17.1018%" y="133" width="1.0598%" height="15" fill="rgb(238,167,29)"/><text x="17.3518%" y="143.50"></text></g><g><title>lint_checking (2,184,694 samples, 2.90%)</title><rect x="15.4801%" y="181" width="2.8984%" height="15" fill="rgb(232,182,51)"/><text x="15.7301%" y="191.50">li..</text></g><g><title>module_lints (163,482 samples, 0.22%)</title><rect x="18.1616%" y="165" width="0.2169%" height="15" fill="rgb(231,60,39)"/><text x="18.4116%" y="175.50"></text></g><g><title>lint_mod (157,132 samples, 0.21%)</title><rect x="18.1700%" y="149" width="0.2085%" height="15" fill="rgb(208,69,12)"/><text x="18.4200%" y="159.50"></text></g><g><title>privacy_access_levels (146,812 samples, 0.19%)</title><rect x="18.3785%" y="181" width="0.1948%" height="15" fill="rgb(235,93,37)"/><text x="18.6285%" y="191.50"></text></g><g><title>privacy_checking_modules (418,605 samples, 0.56%)</title><rect x="18.5733%" y="181" width="0.5554%" height="15" fill="rgb(213,116,39)"/><text x="18.8233%" y="191.50"></text></g><g><title>check_mod_privacy (413,635 samples, 0.55%)</title><rect x="18.5799%" y="165" width="0.5488%" height="15" fill="rgb(222,207,29)"/><text x="18.8299%" y="175.50"></text></g><g><title>misc_checking_3 (3,204,596 samples, 4.25%)</title><rect x="14.8909%" y="197" width="4.2515%" height="15" fill="rgb(206,96,30)"/><text x="15.1409%" y="207.50">misc_..</text></g><g><title>impl_parent (900,039 samples, 1.19%)</title><rect x="20.7902%" y="133" width="1.1941%" height="15" fill="rgb(218,138,4)"/><text x="21.0402%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (598,093 samples, 0.79%)</title><rect x="21.1908%" y="117" width="0.7935%" height="15" fill="rgb(250,191,14)"/><text x="21.4408%" y="127.50"></text></g><g><title>impl_trait_ref (2,914,317 samples, 3.87%)</title><rect x="21.9843%" y="133" width="3.8664%" height="15" fill="rgb(239,60,40)"/><text x="22.2343%" y="143.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,614,134 samples, 3.47%)</title><rect x="22.3826%" y="117" width="3.4681%" height="15" fill="rgb(206,27,48)"/><text x="22.6326%" y="127.50">met..</text></g><g><title>coherent_trait (5,243,699 samples, 6.96%)</title><rect x="19.2257%" y="165" width="6.9568%" height="15" fill="rgb(225,35,8)"/><text x="19.4757%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (5,234,499 samples, 6.94%)</title><rect x="19.2379%" y="149" width="6.9446%" height="15" fill="rgb(250,213,24)"/><text x="19.4879%" y="159.50">specializ..</text></g><g><title>trait_impls_of (248,673 samples, 0.33%)</title><rect x="25.8525%" y="133" width="0.3299%" height="15" fill="rgb(247,123,22)"/><text x="26.1025%" y="143.50"></text></g><g><title>coherence_checking (5,295,759 samples, 7.03%)</title><rect x="19.2075%" y="181" width="7.0258%" height="15" fill="rgb(231,138,38)"/><text x="19.4575%" y="191.50">coherence..</text></g><g><title>associated_item (82,440 samples, 0.11%)</title><rect x="36.3065%" y="117" width="0.1094%" height="15" fill="rgb(231,145,46)"/><text x="36.5565%" y="127.50"></text></g><g><title>associated_items (130,531 samples, 0.17%)</title><rect x="36.2565%" y="133" width="0.1732%" height="15" fill="rgb(251,118,11)"/><text x="36.5065%" y="143.50"></text></g><g><title>adt_dtorck_constraint (98,861 samples, 0.13%)</title><rect x="36.6895%" y="69" width="0.1312%" height="15" fill="rgb(217,147,25)"/><text x="36.9395%" y="79.50"></text></g><g><title>adt_dtorck_constraint (111,821 samples, 0.15%)</title><rect x="36.6769%" y="85" width="0.1484%" height="15" fill="rgb(247,81,37)"/><text x="36.9269%" y="95.50"></text></g><g><title>adt_dtorck_constraint (122,651 samples, 0.16%)</title><rect x="36.6643%" y="101" width="0.1627%" height="15" fill="rgb(209,12,38)"/><text x="36.9143%" y="111.50"></text></g><g><title>dropck_outlives (309,061 samples, 0.41%)</title><rect x="36.4415%" y="133" width="0.4100%" height="15" fill="rgb(227,1,9)"/><text x="36.6915%" y="143.50"></text></g><g><title>adt_dtorck_constraint (186,891 samples, 0.25%)</title><rect x="36.6036%" y="117" width="0.2479%" height="15" fill="rgb(248,47,43)"/><text x="36.8536%" y="127.50"></text></g><g><title>adt_def (79,222 samples, 0.11%)</title><rect x="37.2719%" y="101" width="0.1051%" height="15" fill="rgb(221,10,30)"/><text x="37.5219%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (77,812 samples, 0.10%)</title><rect x="37.2738%" y="85" width="0.1032%" height="15" fill="rgb(210,229,1)"/><text x="37.5238%" y="95.50"></text></g><g><title>adt_def (102,950 samples, 0.14%)</title><rect x="37.3856%" y="85" width="0.1366%" height="15" fill="rgb(222,148,37)"/><text x="37.6356%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (101,820 samples, 0.14%)</title><rect x="37.3871%" y="69" width="0.1351%" height="15" fill="rgb(234,67,33)"/><text x="37.6371%" y="79.50"></text></g><g><title>item_attrs (85,230 samples, 0.11%)</title><rect x="37.4092%" y="53" width="0.1131%" height="15" fill="rgb(247,98,35)"/><text x="37.6592%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (83,880 samples, 0.11%)</title><rect x="37.4109%" y="37" width="0.1113%" height="15" fill="rgb(247,138,52)"/><text x="37.6609%" y="47.50"></text></g><g><title>adt_sized_constraint (204,461 samples, 0.27%)</title><rect x="37.3770%" y="101" width="0.2713%" height="15" fill="rgb(213,79,30)"/><text x="37.6270%" y="111.50"></text></g><g><title>adt_sized_constraint (301,384 samples, 0.40%)</title><rect x="37.2609%" y="117" width="0.3998%" height="15" fill="rgb(246,177,23)"/><text x="37.5109%" y="127.50"></text></g><g><title>evaluate_obligation (638,047 samples, 0.85%)</title><rect x="36.8515%" y="133" width="0.8465%" height="15" fill="rgb(230,62,27)"/><text x="37.1015%" y="143.50"></text></g><g><title>fn_sig (267,483 samples, 0.35%)</title><rect x="37.7086%" y="133" width="0.3549%" height="15" fill="rgb(216,154,8)"/><text x="37.9586%" y="143.50"></text></g><g><title>evaluate_obligation (164,492 samples, 0.22%)</title><rect x="38.3971%" y="117" width="0.2182%" height="15" fill="rgb(244,35,45)"/><text x="38.6471%" y="127.50"></text></g><g><title>method_autoderef_steps (300,665 samples, 0.40%)</title><rect x="38.2526%" y="133" width="0.3989%" height="15" fill="rgb(251,115,12)"/><text x="38.5026%" y="143.50"></text></g><g><title>explicit_predicates_of (81,271 samples, 0.11%)</title><rect x="38.7506%" y="101" width="0.1078%" height="15" fill="rgb(240,54,50)"/><text x="39.0006%" y="111.50"></text></g><g><title>predicates_of (136,883 samples, 0.18%)</title><rect x="38.6925%" y="133" width="0.1816%" height="15" fill="rgb(233,84,52)"/><text x="38.9425%" y="143.50"></text></g><g><title>predicates_defined_on (112,542 samples, 0.15%)</title><rect x="38.7248%" y="117" width="0.1493%" height="15" fill="rgb(207,117,47)"/><text x="38.9748%" y="127.50"></text></g><g><title>item_bodies_checking (9,566,537 samples, 12.69%)</title><rect x="26.2724%" y="181" width="12.6918%" height="15" fill="rgb(249,43,39)"/><text x="26.5224%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,563,877 samples, 12.69%)</title><rect x="26.2759%" y="165" width="12.6883%" height="15" fill="rgb(209,38,44)"/><text x="26.5259%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (9,526,267 samples, 12.64%)</title><rect x="26.3258%" y="149" width="12.6384%" height="15" fill="rgb(236,212,23)"/><text x="26.5758%" y="159.50">typeck</text></g><g><title>impl_trait_ref (203,851 samples, 0.27%)</title><rect x="40.3560%" y="101" width="0.2704%" height="15" fill="rgb(242,79,21)"/><text x="40.6060%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (183,161 samples, 0.24%)</title><rect x="40.3834%" y="85" width="0.2430%" height="15" fill="rgb(211,96,35)"/><text x="40.6334%" y="95.50"></text></g><g><title>adt_destructor (393,714 samples, 0.52%)</title><rect x="40.1494%" y="149" width="0.5223%" height="15" fill="rgb(253,215,40)"/><text x="40.3994%" y="159.50"></text></g><g><title>coherent_trait (389,264 samples, 0.52%)</title><rect x="40.1553%" y="133" width="0.5164%" height="15" fill="rgb(211,81,21)"/><text x="40.4053%" y="143.50"></text></g><g><title>specialization_graph_of (387,784 samples, 0.51%)</title><rect x="40.1573%" y="117" width="0.5145%" height="15" fill="rgb(208,190,38)"/><text x="40.4073%" y="127.50"></text></g><g><title>item_types_checking (1,312,614 samples, 1.74%)</title><rect x="38.9642%" y="181" width="1.7414%" height="15" fill="rgb(235,213,38)"/><text x="39.2142%" y="191.50"></text></g><g><title>check_mod_item_types (1,306,473 samples, 1.73%)</title><rect x="38.9724%" y="165" width="1.7333%" height="15" fill="rgb(237,122,38)"/><text x="39.2224%" y="175.50"></text></g><g><title>fn_sig (372,575 samples, 0.49%)</title><rect x="40.9702%" y="149" width="0.4943%" height="15" fill="rgb(244,218,35)"/><text x="41.2202%" y="159.50"></text></g><g><title>named_region_map (91,801 samples, 0.12%)</title><rect x="41.5749%" y="133" width="0.1218%" height="15" fill="rgb(240,68,47)"/><text x="41.8249%" y="143.50"></text></g><g><title>resolve_lifetimes (84,471 samples, 0.11%)</title><rect x="41.5846%" y="117" width="0.1121%" height="15" fill="rgb(210,16,53)"/><text x="41.8346%" y="127.50"></text></g><g><title>generics_of (187,792 samples, 0.25%)</title><rect x="41.4645%" y="149" width="0.2491%" height="15" fill="rgb(235,124,12)"/><text x="41.7145%" y="159.50"></text></g><g><title>late_bound_vars_map (112,331 samples, 0.15%)</title><rect x="42.1676%" y="101" width="0.1490%" height="15" fill="rgb(224,169,11)"/><text x="42.4176%" y="111.50"></text></g><g><title>resolve_lifetimes (99,101 samples, 0.13%)</title><rect x="42.1851%" y="85" width="0.1315%" height="15" fill="rgb(250,166,2)"/><text x="42.4351%" y="95.50"></text></g><g><title>explicit_predicates_of (306,332 samples, 0.41%)</title><rect x="41.9641%" y="117" width="0.4064%" height="15" fill="rgb(242,216,29)"/><text x="42.2141%" y="127.50"></text></g><g><title>predicates_of (542,656 samples, 0.72%)</title><rect x="41.8251%" y="149" width="0.7199%" height="15" fill="rgb(230,116,27)"/><text x="42.0751%" y="159.50"></text></g><g><title>predicates_defined_on (504,705 samples, 0.67%)</title><rect x="41.8755%" y="133" width="0.6696%" height="15" fill="rgb(228,99,48)"/><text x="42.1255%" y="143.50"></text></g><g><title>inferred_outlives_of (131,552 samples, 0.17%)</title><rect x="42.3705%" y="117" width="0.1745%" height="15" fill="rgb(253,11,6)"/><text x="42.6205%" y="127.50"></text></g><g><title>inferred_outlives_crate (116,402 samples, 0.15%)</title><rect x="42.3906%" y="101" width="0.1544%" height="15" fill="rgb(247,143,39)"/><text x="42.6406%" y="111.50"></text></g><g><title>type_collecting (1,523,477 samples, 2.02%)</title><rect x="40.7092%" y="181" width="2.0212%" height="15" fill="rgb(236,97,10)"/><text x="40.9592%" y="191.50">t..</text></g><g><title>collect_mod_item_types (1,512,207 samples, 2.01%)</title><rect x="40.7241%" y="165" width="2.0062%" height="15" fill="rgb(233,208,19)"/><text x="40.9741%" y="175.50">c..</text></g><g><title>type_of (107,791 samples, 0.14%)</title><rect x="42.5874%" y="149" width="0.1430%" height="15" fill="rgb(216,164,2)"/><text x="42.8374%" y="159.50"></text></g><g><title>evaluate_obligation (126,392 samples, 0.17%)</title><rect x="44.1254%" y="149" width="0.1677%" height="15" fill="rgb(220,129,5)"/><text x="44.3754%" y="159.50"></text></g><g><title>implied_outlives_bounds (77,851 samples, 0.10%)</title><rect x="44.3187%" y="149" width="0.1033%" height="15" fill="rgb(242,17,10)"/><text x="44.5687%" y="159.50"></text></g><g><title>param_env (209,991 samples, 0.28%)</title><rect x="44.4220%" y="149" width="0.2786%" height="15" fill="rgb(242,107,0)"/><text x="44.6720%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,526,520 samples, 2.03%)</title><rect x="42.8852%" y="165" width="2.0252%" height="15" fill="rgb(251,28,31)"/><text x="43.1352%" y="175.50">c..</text></g><g><title>region_scope_tree (128,214 samples, 0.17%)</title><rect x="44.7404%" y="149" width="0.1701%" height="15" fill="rgb(233,223,10)"/><text x="44.9904%" y="159.50"></text></g><g><title>param_env (222,924 samples, 0.30%)</title><rect x="46.1642%" y="149" width="0.2958%" height="15" fill="rgb(215,21,27)"/><text x="46.4142%" y="159.50"></text></g><g><title>trait_impls_of (263,373 samples, 0.35%)</title><rect x="46.5283%" y="149" width="0.3494%" height="15" fill="rgb(232,23,21)"/><text x="46.7783%" y="159.50"></text></g><g><title>check_item_well_formed (1,552,865 samples, 2.06%)</title><rect x="44.9105%" y="165" width="2.0602%" height="15" fill="rgb(244,5,23)"/><text x="45.1605%" y="175.50">c..</text></g><g><title>implied_outlives_bounds (112,360 samples, 0.15%)</title><rect x="47.4596%" y="149" width="0.1491%" height="15" fill="rgb(226,81,46)"/><text x="47.7096%" y="159.50"></text></g><g><title>evaluate_obligation (126,491 samples, 0.17%)</title><rect x="47.7846%" y="133" width="0.1678%" height="15" fill="rgb(247,70,30)"/><text x="48.0346%" y="143.50"></text></g><g><title>layout_of (97,752 samples, 0.13%)</title><rect x="47.9996%" y="133" width="0.1297%" height="15" fill="rgb(212,68,19)"/><text x="48.2496%" y="143.50"></text></g><g><title>object_safety_violations (476,306 samples, 0.63%)</title><rect x="47.6087%" y="149" width="0.6319%" height="15" fill="rgb(240,187,13)"/><text x="47.8587%" y="159.50"></text></g><g><title>analysis (35,808,019 samples, 47.51%)</title><rect x="0.8167%" y="213" width="47.5062%" height="15" fill="rgb(223,113,26)"/><text x="1.0667%" y="223.50">analysis</text></g><g><title>type_check_crate (21,994,935 samples, 29.18%)</title><rect x="19.1424%" y="197" width="29.1805%" height="15" fill="rgb(206,192,2)"/><text x="19.3924%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,213,538 samples, 5.59%)</title><rect x="42.7328%" y="181" width="5.5901%" height="15" fill="rgb(241,108,4)"/><text x="42.9828%" y="191.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,019,241 samples, 1.35%)</title><rect x="46.9706%" y="165" width="1.3522%" height="15" fill="rgb(247,173,49)"/><text x="47.2206%" y="175.50"></text></g><g><title>codegen_crate (548,727 samples, 0.73%)</title><rect x="48.3364%" y="213" width="0.7280%" height="15" fill="rgb(224,114,35)"/><text x="48.5864%" y="223.50"></text></g><g><title>AST_validation (229,132 samples, 0.30%)</title><rect x="49.3925%" y="197" width="0.3040%" height="15" fill="rgb(245,159,27)"/><text x="49.6425%" y="207.50"></text></g><g><title>crate_injection (80,530 samples, 0.11%)</title><rect x="49.7821%" y="197" width="0.1068%" height="15" fill="rgb(245,172,44)"/><text x="50.0321%" y="207.50"></text></g><g><title>metadata_load_macro (163,091 samples, 0.22%)</title><rect x="78.8261%" y="165" width="0.2164%" height="15" fill="rgb(236,23,11)"/><text x="79.0761%" y="175.50"></text></g><g><title>metadata_register_crate (3,009,994 samples, 3.99%)</title><rect x="79.0424%" y="165" width="3.9933%" height="15" fill="rgb(205,117,38)"/><text x="79.2924%" y="175.50">meta..</text></g><g><title>metadata_register_crate (798,488 samples, 1.06%)</title><rect x="81.9764%" y="149" width="1.0593%" height="15" fill="rgb(237,72,25)"/><text x="82.2264%" y="159.50"></text></g><g><title>macro_expand_crate (25,351,833 samples, 33.63%)</title><rect x="49.8890%" y="197" width="33.6340%" height="15" fill="rgb(244,70,9)"/><text x="50.1390%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (25,334,342 samples, 33.61%)</title><rect x="49.9122%" y="181" width="33.6108%" height="15" fill="rgb(217,125,39)"/><text x="50.1622%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (367,284 samples, 0.49%)</title><rect x="83.0358%" y="165" width="0.4873%" height="15" fill="rgb(235,36,10)"/><text x="83.2858%" y="175.50"></text></g><g><title>finalize_imports (266,963 samples, 0.35%)</title><rect x="83.6100%" y="181" width="0.3542%" height="15" fill="rgb(251,123,47)"/><text x="83.8600%" y="191.50"></text></g><g><title>finalize_macro_resolutions (79,471 samples, 0.11%)</title><rect x="83.9641%" y="181" width="0.1054%" height="15" fill="rgb(221,13,13)"/><text x="84.2141%" y="191.50"></text></g><g><title>late_resolve_crate (2,398,287 samples, 3.18%)</title><rect x="84.0696%" y="181" width="3.1818%" height="15" fill="rgb(238,131,9)"/><text x="84.3196%" y="191.50">lat..</text></g><g><title>metadata_register_crate (251,523 samples, 0.33%)</title><rect x="86.9177%" y="165" width="0.3337%" height="15" fill="rgb(211,50,8)"/><text x="87.1677%" y="175.50"></text></g><g><title>configure_and_expand (28,915,802 samples, 38.36%)</title><rect x="49.0644%" y="213" width="38.3623%" height="15" fill="rgb(245,182,24)"/><text x="49.3144%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,885,842 samples, 3.83%)</title><rect x="83.5981%" y="197" width="3.8286%" height="15" fill="rgb(242,14,37)"/><text x="83.8481%" y="207.50">reso..</text></g><g><title>drop_ast (83,701 samples, 0.11%)</title><rect x="87.4267%" y="213" width="0.1110%" height="15" fill="rgb(246,228,12)"/><text x="87.6767%" y="223.50"></text></g><g><title>early_lint_checks (170,052 samples, 0.23%)</title><rect x="87.5607%" y="213" width="0.2256%" height="15" fill="rgb(213,55,15)"/><text x="87.8107%" y="223.50"></text></g><g><title>free_global_ctxt (2,611,979 samples, 3.47%)</title><rect x="87.7863%" y="213" width="3.4653%" height="15" fill="rgb(209,9,3)"/><text x="88.0363%" y="223.50">fre..</text></g><g><title>mir_for_ctfe (77,661 samples, 0.10%)</title><rect x="92.6630%" y="197" width="0.1030%" height="15" fill="rgb(230,59,30)"/><text x="92.9130%" y="207.50"></text></g><g><title>generate_crate_metadata (1,224,343 samples, 1.62%)</title><rect x="91.2516%" y="213" width="1.6243%" height="15" fill="rgb(209,121,21)"/><text x="91.5016%" y="223.50"></text></g><g><title>hir_lowering (3,736,041 samples, 4.96%)</title><rect x="92.8759%" y="213" width="4.9566%" height="15" fill="rgb(220,109,13)"/><text x="93.1259%" y="223.50">hir_lo..</text></g><g><title>parse_crate (389,315 samples, 0.52%)</title><rect x="97.9025%" y="213" width="0.5165%" height="15" fill="rgb(232,18,1)"/><text x="98.1525%" y="223.50"></text></g><g><title>prepare_outputs (256,813 samples, 0.34%)</title><rect x="98.4318%" y="213" width="0.3407%" height="15" fill="rgb(215,41,42)"/><text x="98.6818%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (480,775 samples, 0.64%)</title><rect x="98.7725%" y="213" width="0.6378%" height="15" fill="rgb(224,123,36)"/><text x="99.0225%" y="223.50"></text></g><g><title>setup_global_ctxt (87,231 samples, 0.12%)</title><rect x="99.4242%" y="213" width="0.1157%" height="15" fill="rgb(240,125,3)"/><text x="99.6742%" y="223.50"></text></g><g><title>all (75,375,500 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (75,375,500 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (346,753 samples, 0.46%)</title><rect x="99.5400%" y="213" width="0.4600%" height="15" fill="rgb(238,207,15)"/><text x="99.7900%" y="223.50"></text></g></svg></svg>