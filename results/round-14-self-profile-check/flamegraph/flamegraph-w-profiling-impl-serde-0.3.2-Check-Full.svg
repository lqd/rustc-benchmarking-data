<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (194,661 samples, 0.16%)</title><rect x="9.2634%" y="117" width="0.1600%" height="15" fill="rgb(227,0,7)"/><text x="9.5134%" y="127.50"></text></g><g><title>item_attrs (159,772 samples, 0.13%)</title><rect x="9.7263%" y="85" width="0.1313%" height="15" fill="rgb(217,0,24)"/><text x="9.9763%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (153,922 samples, 0.13%)</title><rect x="9.7311%" y="69" width="0.1265%" height="15" fill="rgb(221,193,54)"/><text x="9.9811%" y="79.50"></text></g><g><title>codegen_fn_attrs (253,924 samples, 0.21%)</title><rect x="9.6634%" y="101" width="0.2087%" height="15" fill="rgb(248,212,6)"/><text x="9.9134%" y="111.50"></text></g><g><title>is_copy_raw (123,200 samples, 0.10%)</title><rect x="11.3514%" y="85" width="0.1012%" height="15" fill="rgb(208,68,35)"/><text x="11.6014%" y="95.50"></text></g><g><title>adt_drop_tys (200,031 samples, 0.16%)</title><rect x="11.5287%" y="69" width="0.1644%" height="15" fill="rgb(232,128,0)"/><text x="11.7787%" y="79.50"></text></g><g><title>needs_drop_raw (814,138 samples, 0.67%)</title><rect x="11.4543%" y="85" width="0.6690%" height="15" fill="rgb(207,160,47)"/><text x="11.7043%" y="95.50"></text></g><g><title>is_copy_raw (523,566 samples, 0.43%)</title><rect x="11.6931%" y="69" width="0.4302%" height="15" fill="rgb(228,23,34)"/><text x="11.9431%" y="79.50"></text></g><g><title>evaluate_obligation (426,835 samples, 0.35%)</title><rect x="11.7726%" y="53" width="0.3507%" height="15" fill="rgb(218,30,26)"/><text x="12.0226%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (411,824 samples, 0.34%)</title><rect x="12.2651%" y="69" width="0.3384%" height="15" fill="rgb(220,122,19)"/><text x="12.5151%" y="79.50"></text></g><g><title>impl_parent (225,943 samples, 0.19%)</title><rect x="12.9928%" y="53" width="0.1857%" height="15" fill="rgb(250,228,42)"/><text x="13.2428%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (150,152 samples, 0.12%)</title><rect x="13.0551%" y="37" width="0.1234%" height="15" fill="rgb(240,193,28)"/><text x="13.3051%" y="47.50"></text></g><g><title>specialization_graph_of (1,198,672 samples, 0.99%)</title><rect x="12.6340%" y="69" width="0.9850%" height="15" fill="rgb(216,20,37)"/><text x="12.8840%" y="79.50"></text></g><g><title>impl_trait_ref (536,165 samples, 0.44%)</title><rect x="13.1784%" y="53" width="0.4406%" height="15" fill="rgb(206,188,39)"/><text x="13.4284%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (461,234 samples, 0.38%)</title><rect x="13.2400%" y="37" width="0.3790%" height="15" fill="rgb(217,207,13)"/><text x="13.4900%" y="47.50"></text></g><g><title>resolve_instance (1,887,031 samples, 1.55%)</title><rect x="12.1233%" y="85" width="1.5507%" height="15" fill="rgb(231,73,38)"/><text x="12.3733%" y="95.50"></text></g><g><title>thir_body (706,976 samples, 0.58%)</title><rect x="13.6833%" y="85" width="0.5810%" height="15" fill="rgb(225,20,46)"/><text x="13.9333%" y="95.50"></text></g><g><title>mir_const (6,604,282 samples, 5.43%)</title><rect x="8.8455%" y="133" width="5.4270%" height="15" fill="rgb(210,31,41)"/><text x="9.0955%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (5,901,078 samples, 4.85%)</title><rect x="9.4233%" y="117" width="4.8492%" height="15" fill="rgb(221,200,47)"/><text x="9.6733%" y="127.50">unsafe..</text></g><g><title>mir_built (5,355,062 samples, 4.40%)</title><rect x="9.8720%" y="101" width="4.4005%" height="15" fill="rgb(226,26,5)"/><text x="10.1220%" y="111.50">mir_b..</text></g><g><title>mir_promoted (7,378,220 samples, 6.06%)</title><rect x="8.3682%" y="149" width="6.0630%" height="15" fill="rgb(249,33,26)"/><text x="8.6182%" y="159.50">mir_prom..</text></g><g><title>mir_const_qualif (193,142 samples, 0.16%)</title><rect x="14.2725%" y="133" width="0.1587%" height="15" fill="rgb(235,183,28)"/><text x="14.5225%" y="143.50"></text></g><g><title>mir_const (134,282 samples, 0.11%)</title><rect x="14.3209%" y="117" width="0.1103%" height="15" fill="rgb(221,5,38)"/><text x="14.5709%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (256,882 samples, 0.21%)</title><rect x="14.4312%" y="149" width="0.2111%" height="15" fill="rgb(247,18,42)"/><text x="14.6812%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (529,757 samples, 0.44%)</title><rect x="14.6423%" y="149" width="0.4353%" height="15" fill="rgb(241,131,45)"/><text x="14.8923%" y="159.50"></text></g><g><title>normalize_projection_ty (295,363 samples, 0.24%)</title><rect x="14.8349%" y="133" width="0.2427%" height="15" fill="rgb(249,31,29)"/><text x="15.0849%" y="143.50"></text></g><g><title>type_op_normalize_predicate (122,721 samples, 0.10%)</title><rect x="15.0777%" y="149" width="0.1008%" height="15" fill="rgb(225,111,53)"/><text x="15.3277%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,860,256 samples, 1.53%)</title><rect x="15.2694%" y="149" width="1.5287%" height="15" fill="rgb(238,160,17)"/><text x="15.5194%" y="159.50"></text></g><g><title>MIR_borrow_checking (19,205,733 samples, 15.78%)</title><rect x="1.0313%" y="181" width="15.7822%" height="15" fill="rgb(214,148,48)"/><text x="1.2813%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,141,602 samples, 15.73%)</title><rect x="1.0840%" y="165" width="15.7295%" height="15" fill="rgb(232,36,49)"/><text x="1.3340%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (232,183 samples, 0.19%)</title><rect x="16.9093%" y="181" width="0.1908%" height="15" fill="rgb(209,103,24)"/><text x="17.1593%" y="191.50"></text></g><g><title>codegen_fn_attrs (166,421 samples, 0.14%)</title><rect x="17.6561%" y="117" width="0.1368%" height="15" fill="rgb(229,88,8)"/><text x="17.9061%" y="127.50"></text></g><g><title>should_inherit_track_caller (273,242 samples, 0.22%)</title><rect x="17.5748%" y="133" width="0.2245%" height="15" fill="rgb(213,181,19)"/><text x="17.8248%" y="143.50"></text></g><g><title>codegen_fn_attrs (515,334 samples, 0.42%)</title><rect x="17.4047%" y="149" width="0.4235%" height="15" fill="rgb(254,191,54)"/><text x="17.6547%" y="159.50"></text></g><g><title>check_mod_attrs (845,000 samples, 0.69%)</title><rect x="17.1339%" y="165" width="0.6944%" height="15" fill="rgb(241,83,37)"/><text x="17.3839%" y="175.50"></text></g><g><title>check_mod_const_bodies (151,962 samples, 0.12%)</title><rect x="17.8283%" y="165" width="0.1249%" height="15" fill="rgb(233,36,39)"/><text x="18.0783%" y="175.50"></text></g><g><title>lint_levels (203,492 samples, 0.17%)</title><rect x="18.2764%" y="149" width="0.1672%" height="15" fill="rgb(226,3,54)"/><text x="18.5264%" y="159.50"></text></g><g><title>lookup_deprecation_entry (223,772 samples, 0.18%)</title><rect x="18.4436%" y="149" width="0.1839%" height="15" fill="rgb(245,192,40)"/><text x="18.6936%" y="159.50"></text></g><g><title>stability_index (133,682 samples, 0.11%)</title><rect x="18.5176%" y="133" width="0.1099%" height="15" fill="rgb(238,167,29)"/><text x="18.7676%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (835,559 samples, 0.69%)</title><rect x="18.0424%" y="165" width="0.6866%" height="15" fill="rgb(232,182,51)"/><text x="18.2924%" y="175.50"></text></g><g><title>misc_checking_1 (2,050,163 samples, 1.68%)</title><rect x="17.1006%" y="181" width="1.6847%" height="15" fill="rgb(231,60,39)"/><text x="17.3506%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (284,603 samples, 0.23%)</title><rect x="18.7870%" y="165" width="0.2339%" height="15" fill="rgb(208,69,12)"/><text x="19.0370%" y="175.50"></text></g><g><title>check_mod_liveness (219,952 samples, 0.18%)</title><rect x="18.8401%" y="149" width="0.1807%" height="15" fill="rgb(235,93,37)"/><text x="19.0901%" y="159.50"></text></g><g><title>misc_checking_2 (770,119 samples, 0.63%)</title><rect x="18.7853%" y="181" width="0.6328%" height="15" fill="rgb(213,116,39)"/><text x="19.0353%" y="191.50"></text></g><g><title>match_checking (483,496 samples, 0.40%)</title><rect x="19.0209%" y="165" width="0.3973%" height="15" fill="rgb(222,207,29)"/><text x="19.2709%" y="175.50"></text></g><g><title>check_match (464,466 samples, 0.38%)</title><rect x="19.0365%" y="149" width="0.3817%" height="15" fill="rgb(206,96,30)"/><text x="19.2865%" y="159.50"></text></g><g><title>check_private_in_public (124,002 samples, 0.10%)</title><rect x="19.4263%" y="165" width="0.1019%" height="15" fill="rgb(218,138,4)"/><text x="19.6763%" y="175.50"></text></g><g><title>death_checking (294,943 samples, 0.24%)</title><rect x="19.5282%" y="165" width="0.2424%" height="15" fill="rgb(250,191,14)"/><text x="19.7782%" y="175.50"></text></g><g><title>eval_to_allocation_raw (141,921 samples, 0.12%)</title><rect x="20.2327%" y="133" width="0.1166%" height="15" fill="rgb(239,60,40)"/><text x="20.4827%" y="143.50"></text></g><g><title>eval_to_allocation_raw (132,811 samples, 0.11%)</title><rect x="20.2402%" y="117" width="0.1091%" height="15" fill="rgb(206,27,48)"/><text x="20.4902%" y="127.50"></text></g><g><title>param_env (126,522 samples, 0.10%)</title><rect x="20.3493%" y="133" width="0.1040%" height="15" fill="rgb(225,35,8)"/><text x="20.5993%" y="143.50"></text></g><g><title>crate_lints (1,937,512 samples, 1.59%)</title><rect x="19.7718%" y="149" width="1.5921%" height="15" fill="rgb(250,213,24)"/><text x="20.0218%" y="159.50"></text></g><g><title>type_of (1,106,519 samples, 0.91%)</title><rect x="20.4547%" y="133" width="0.9093%" height="15" fill="rgb(247,123,22)"/><text x="20.7047%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (870,788 samples, 0.72%)</title><rect x="20.6484%" y="117" width="0.7156%" height="15" fill="rgb(231,138,38)"/><text x="20.8984%" y="127.50"></text></g><g><title>lint_checking (2,242,985 samples, 1.84%)</title><rect x="19.7706%" y="165" width="1.8432%" height="15" fill="rgb(231,145,46)"/><text x="20.0206%" y="175.50">l..</text></g><g><title>module_lints (303,973 samples, 0.25%)</title><rect x="21.3639%" y="149" width="0.2498%" height="15" fill="rgb(251,118,11)"/><text x="21.6139%" y="159.50"></text></g><g><title>lint_mod (301,313 samples, 0.25%)</title><rect x="21.3661%" y="133" width="0.2476%" height="15" fill="rgb(217,147,25)"/><text x="21.6161%" y="143.50"></text></g><g><title>privacy_access_levels (146,741 samples, 0.12%)</title><rect x="21.6137%" y="165" width="0.1206%" height="15" fill="rgb(247,81,37)"/><text x="21.8637%" y="175.50"></text></g><g><title>privacy_checking_modules (535,476 samples, 0.44%)</title><rect x="21.7343%" y="165" width="0.4400%" height="15" fill="rgb(209,12,38)"/><text x="21.9843%" y="175.50"></text></g><g><title>check_mod_privacy (533,556 samples, 0.44%)</title><rect x="21.7359%" y="149" width="0.4384%" height="15" fill="rgb(227,1,9)"/><text x="21.9859%" y="159.50"></text></g><g><title>misc_checking_3 (3,365,387 samples, 2.77%)</title><rect x="19.4182%" y="181" width="2.7655%" height="15" fill="rgb(248,47,43)"/><text x="19.6682%" y="191.50">mi..</text></g><g><title>impl_parent (2,279,153 samples, 1.87%)</title><rect x="25.3669%" y="117" width="1.8729%" height="15" fill="rgb(221,10,30)"/><text x="25.6169%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,331,693 samples, 1.09%)</title><rect x="26.1455%" y="101" width="1.0943%" height="15" fill="rgb(210,229,1)"/><text x="26.3955%" y="111.50"></text></g><g><title>impl_trait_ref (6,201,077 samples, 5.10%)</title><rect x="27.2398%" y="117" width="5.0957%" height="15" fill="rgb(222,148,37)"/><text x="27.4898%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,256,755 samples, 4.32%)</title><rect x="28.0158%" y="101" width="4.3197%" height="15" fill="rgb(234,67,33)"/><text x="28.2658%" y="111.50">metad..</text></g><g><title>coherent_trait (13,123,286 samples, 10.78%)</title><rect x="22.2436%" y="149" width="10.7840%" height="15" fill="rgb(247,98,35)"/><text x="22.4936%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,100,236 samples, 10.77%)</title><rect x="22.2626%" y="133" width="10.7650%" height="15" fill="rgb(247,138,52)"/><text x="22.5126%" y="143.50">specialization_g..</text></g><g><title>trait_impls_of (838,969 samples, 0.69%)</title><rect x="32.3382%" y="117" width="0.6894%" height="15" fill="rgb(213,79,30)"/><text x="32.5882%" y="127.50"></text></g><g><title>implementations_of_trait (230,491 samples, 0.19%)</title><rect x="32.8382%" y="101" width="0.1894%" height="15" fill="rgb(246,177,23)"/><text x="33.0882%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (170,490 samples, 0.14%)</title><rect x="32.8875%" y="85" width="0.1401%" height="15" fill="rgb(230,62,27)"/><text x="33.1375%" y="95.50"></text></g><g><title>coherence_checking (13,217,027 samples, 10.86%)</title><rect x="22.2244%" y="165" width="10.8610%" height="15" fill="rgb(216,154,8)"/><text x="22.4744%" y="175.50">coherence_checki..</text></g><g><title>adt_sized_constraint (124,482 samples, 0.10%)</title><rect x="43.4012%" y="117" width="0.1023%" height="15" fill="rgb(244,35,45)"/><text x="43.6512%" y="127.50"></text></g><g><title>associated_item (152,253 samples, 0.13%)</title><rect x="43.5558%" y="101" width="0.1251%" height="15" fill="rgb(251,115,12)"/><text x="43.8058%" y="111.50"></text></g><g><title>associated_items (224,554 samples, 0.18%)</title><rect x="43.5070%" y="117" width="0.1845%" height="15" fill="rgb(240,54,50)"/><text x="43.7570%" y="127.50"></text></g><g><title>dropck_outlives (218,543 samples, 0.18%)</title><rect x="43.7447%" y="117" width="0.1796%" height="15" fill="rgb(233,84,52)"/><text x="43.9947%" y="127.50"></text></g><g><title>generics_of (616,976 samples, 0.51%)</title><rect x="46.7914%" y="101" width="0.5070%" height="15" fill="rgb(207,117,47)"/><text x="47.0414%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (459,645 samples, 0.38%)</title><rect x="46.9207%" y="85" width="0.3777%" height="15" fill="rgb(249,43,39)"/><text x="47.1707%" y="95.50"></text></g><g><title>impl_polarity (165,983 samples, 0.14%)</title><rect x="47.3131%" y="101" width="0.1364%" height="15" fill="rgb(209,38,44)"/><text x="47.5631%" y="111.50"></text></g><g><title>impl_trait_ref (695,987 samples, 0.57%)</title><rect x="47.4495%" y="101" width="0.5719%" height="15" fill="rgb(236,212,23)"/><text x="47.6995%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (547,023 samples, 0.45%)</title><rect x="47.5719%" y="85" width="0.4495%" height="15" fill="rgb(242,79,21)"/><text x="47.8219%" y="95.50"></text></g><g><title>opt_def_kind (171,611 samples, 0.14%)</title><rect x="48.2657%" y="85" width="0.1410%" height="15" fill="rgb(211,96,35)"/><text x="48.5157%" y="95.50"></text></g><g><title>explicit_predicates_of (165,590 samples, 0.14%)</title><rect x="48.5966%" y="69" width="0.1361%" height="15" fill="rgb(253,215,40)"/><text x="48.8466%" y="79.50"></text></g><g><title>predicates_of (927,297 samples, 0.76%)</title><rect x="48.0700%" y="101" width="0.7620%" height="15" fill="rgb(211,81,21)"/><text x="48.3200%" y="111.50"></text></g><g><title>predicates_defined_on (517,456 samples, 0.43%)</title><rect x="48.4068%" y="85" width="0.4252%" height="15" fill="rgb(208,190,38)"/><text x="48.6568%" y="95.50"></text></g><g><title>specializes (2,595,788 samples, 2.13%)</title><rect x="48.8320%" y="101" width="2.1331%" height="15" fill="rgb(235,213,38)"/><text x="49.0820%" y="111.50">s..</text></g><g><title>param_env (1,516,478 samples, 1.25%)</title><rect x="49.7189%" y="85" width="1.2462%" height="15" fill="rgb(237,122,38)"/><text x="49.9689%" y="95.50"></text></g><g><title>def_span (668,459 samples, 0.55%)</title><rect x="50.4157%" y="69" width="0.5493%" height="15" fill="rgb(244,218,35)"/><text x="50.6657%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (588,487 samples, 0.48%)</title><rect x="50.4815%" y="53" width="0.4836%" height="15" fill="rgb(240,68,47)"/><text x="50.7315%" y="63.50"></text></g><g><title>trait_impls_of (457,158 samples, 0.38%)</title><rect x="50.9755%" y="101" width="0.3757%" height="15" fill="rgb(210,16,53)"/><text x="51.2255%" y="111.50"></text></g><g><title>implementations_of_trait (177,542 samples, 0.15%)</title><rect x="51.2052%" y="85" width="0.1459%" height="15" fill="rgb(235,124,12)"/><text x="51.4552%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (127,540 samples, 0.10%)</title><rect x="51.2463%" y="69" width="0.1048%" height="15" fill="rgb(224,169,11)"/><text x="51.4963%" y="79.50"></text></g><g><title>evaluate_obligation (9,052,455 samples, 7.44%)</title><rect x="43.9243%" y="117" width="7.4388%" height="15" fill="rgb(250,166,2)"/><text x="44.1743%" y="127.50">evaluate_o..</text></g><g><title>fn_sig (278,202 samples, 0.23%)</title><rect x="51.3871%" y="117" width="0.2286%" height="15" fill="rgb(242,216,29)"/><text x="51.6371%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (265,482 samples, 0.22%)</title><rect x="51.3975%" y="101" width="0.2182%" height="15" fill="rgb(230,116,27)"/><text x="51.6475%" y="111.50"></text></g><g><title>impl_item_implementor_ids (144,914 samples, 0.12%)</title><rect x="51.7047%" y="117" width="0.1191%" height="15" fill="rgb(228,99,48)"/><text x="51.9547%" y="127.50"></text></g><g><title>associated_items (131,803 samples, 0.11%)</title><rect x="51.7155%" y="101" width="0.1083%" height="15" fill="rgb(253,11,6)"/><text x="51.9655%" y="111.50"></text></g><g><title>item_attrs (155,182 samples, 0.13%)</title><rect x="51.8693%" y="117" width="0.1275%" height="15" fill="rgb(247,143,39)"/><text x="52.1193%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (148,762 samples, 0.12%)</title><rect x="51.8745%" y="101" width="0.1222%" height="15" fill="rgb(236,97,10)"/><text x="52.1245%" y="111.50"></text></g><g><title>predicates_of (283,732 samples, 0.23%)</title><rect x="52.1853%" y="117" width="0.2332%" height="15" fill="rgb(233,208,19)"/><text x="52.4353%" y="127.50"></text></g><g><title>predicates_defined_on (191,392 samples, 0.16%)</title><rect x="52.2611%" y="101" width="0.1573%" height="15" fill="rgb(216,164,2)"/><text x="52.5111%" y="111.50"></text></g><g><title>specializes (199,492 samples, 0.16%)</title><rect x="52.4184%" y="117" width="0.1639%" height="15" fill="rgb(220,129,5)"/><text x="52.6684%" y="127.50"></text></g><g><title>associated_item (288,113 samples, 0.24%)</title><rect x="56.8049%" y="85" width="0.2368%" height="15" fill="rgb(242,17,10)"/><text x="57.0549%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (226,423 samples, 0.19%)</title><rect x="56.8556%" y="69" width="0.1861%" height="15" fill="rgb(242,107,0)"/><text x="57.1056%" y="79.50"></text></g><g><title>associated_items (405,955 samples, 0.33%)</title><rect x="56.7217%" y="101" width="0.3336%" height="15" fill="rgb(251,28,31)"/><text x="56.9717%" y="111.50"></text></g><g><title>dropck_outlives (225,892 samples, 0.19%)</title><rect x="57.0812%" y="101" width="0.1856%" height="15" fill="rgb(233,223,10)"/><text x="57.3312%" y="111.50"></text></g><g><title>adt_dtorck_constraint (154,872 samples, 0.13%)</title><rect x="57.1396%" y="85" width="0.1273%" height="15" fill="rgb(215,21,27)"/><text x="57.3896%" y="95.50"></text></g><g><title>generics_of (181,200 samples, 0.15%)</title><rect x="58.6216%" y="85" width="0.1489%" height="15" fill="rgb(232,23,21)"/><text x="58.8716%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (132,720 samples, 0.11%)</title><rect x="58.6614%" y="69" width="0.1091%" height="15" fill="rgb(244,5,23)"/><text x="58.9114%" y="79.50"></text></g><g><title>impl_trait_ref (293,214 samples, 0.24%)</title><rect x="58.7899%" y="85" width="0.2409%" height="15" fill="rgb(226,81,46)"/><text x="59.0399%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (245,933 samples, 0.20%)</title><rect x="58.8287%" y="69" width="0.2021%" height="15" fill="rgb(247,70,30)"/><text x="59.0787%" y="79.50"></text></g><g><title>predicates_of (153,132 samples, 0.13%)</title><rect x="59.0440%" y="85" width="0.1258%" height="15" fill="rgb(212,68,19)"/><text x="59.2940%" y="95.50"></text></g><g><title>specializes (241,082 samples, 0.20%)</title><rect x="59.1698%" y="85" width="0.1981%" height="15" fill="rgb(240,187,13)"/><text x="59.4198%" y="95.50"></text></g><g><title>param_env (137,851 samples, 0.11%)</title><rect x="59.2547%" y="69" width="0.1133%" height="15" fill="rgb(223,113,26)"/><text x="59.5047%" y="79.50"></text></g><g><title>trait_impls_of (627,408 samples, 0.52%)</title><rect x="59.3770%" y="85" width="0.5156%" height="15" fill="rgb(206,192,2)"/><text x="59.6270%" y="95.50"></text></g><g><title>implementations_of_trait (195,144 samples, 0.16%)</title><rect x="59.7322%" y="69" width="0.1604%" height="15" fill="rgb(241,108,4)"/><text x="59.9822%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (141,483 samples, 0.12%)</title><rect x="59.7763%" y="53" width="0.1163%" height="15" fill="rgb(247,173,49)"/><text x="60.0263%" y="63.50"></text></g><g><title>evaluate_obligation (3,203,026 samples, 2.63%)</title><rect x="57.2669%" y="101" width="2.6321%" height="15" fill="rgb(224,114,35)"/><text x="57.5169%" y="111.50">ev..</text></g><g><title>method_autoderef_steps (187,302 samples, 0.15%)</title><rect x="60.2369%" y="101" width="0.1539%" height="15" fill="rgb(245,159,27)"/><text x="60.4869%" y="111.50"></text></g><g><title>object_safety_violations (151,592 samples, 0.12%)</title><rect x="60.3908%" y="101" width="0.1246%" height="15" fill="rgb(245,172,44)"/><text x="60.6408%" y="111.50"></text></g><g><title>predicates_of (212,354 samples, 0.17%)</title><rect x="60.5271%" y="101" width="0.1745%" height="15" fill="rgb(236,23,11)"/><text x="60.7771%" y="111.50"></text></g><g><title>predicates_defined_on (147,523 samples, 0.12%)</title><rect x="60.5804%" y="85" width="0.1212%" height="15" fill="rgb(205,117,38)"/><text x="60.8304%" y="95.50"></text></g><g><title>typeck (9,970,841 samples, 8.19%)</title><rect x="52.6540%" y="117" width="8.1935%" height="15" fill="rgb(237,72,25)"/><text x="52.9040%" y="127.50">typeck</text></g><g><title>item_bodies_checking (33,776,936 samples, 27.76%)</title><rect x="33.1201%" y="165" width="27.7560%" height="15" fill="rgb(244,70,9)"/><text x="33.3701%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (33,773,916 samples, 27.75%)</title><rect x="33.1226%" y="149" width="27.7535%" height="15" fill="rgb(217,125,39)"/><text x="33.3726%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (33,734,094 samples, 27.72%)</title><rect x="33.1553%" y="133" width="27.7208%" height="15" fill="rgb(235,36,10)"/><text x="33.4053%" y="143.50">typeck</text></g><g><title>impl_trait_ref (141,572 samples, 0.12%)</title><rect x="61.4309%" y="85" width="0.1163%" height="15" fill="rgb(251,123,47)"/><text x="61.6809%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (122,522 samples, 0.10%)</title><rect x="61.4466%" y="69" width="0.1007%" height="15" fill="rgb(221,13,13)"/><text x="61.6966%" y="79.50"></text></g><g><title>adt_destructor (311,013 samples, 0.26%)</title><rect x="61.3143%" y="133" width="0.2556%" height="15" fill="rgb(238,131,9)"/><text x="61.5643%" y="143.50"></text></g><g><title>coherent_trait (306,503 samples, 0.25%)</title><rect x="61.3180%" y="117" width="0.2519%" height="15" fill="rgb(211,50,8)"/><text x="61.5680%" y="127.50"></text></g><g><title>specialization_graph_of (304,723 samples, 0.25%)</title><rect x="61.3195%" y="101" width="0.2504%" height="15" fill="rgb(245,182,24)"/><text x="61.5695%" y="111.50"></text></g><g><title>item_types_checking (1,125,533 samples, 0.92%)</title><rect x="60.8761%" y="165" width="0.9249%" height="15" fill="rgb(242,14,37)"/><text x="61.1261%" y="175.50"></text></g><g><title>check_mod_item_types (1,123,123 samples, 0.92%)</title><rect x="60.8781%" y="149" width="0.9229%" height="15" fill="rgb(246,228,12)"/><text x="61.1281%" y="159.50"></text></g><g><title>typeck (158,282 samples, 0.13%)</title><rect x="61.6710%" y="133" width="0.1301%" height="15" fill="rgb(213,55,15)"/><text x="61.9210%" y="143.50"></text></g><g><title>associated_items (159,332 samples, 0.13%)</title><rect x="62.8139%" y="101" width="0.1309%" height="15" fill="rgb(209,9,3)"/><text x="63.0639%" y="111.50"></text></g><g><title>fn_sig (1,012,931 samples, 0.83%)</title><rect x="62.1386%" y="133" width="0.8324%" height="15" fill="rgb(230,59,30)"/><text x="62.3886%" y="143.50"></text></g><g><title>type_param_predicates (290,916 samples, 0.24%)</title><rect x="62.7320%" y="117" width="0.2391%" height="15" fill="rgb(209,121,21)"/><text x="62.9820%" y="127.50"></text></g><g><title>is_late_bound_map (439,136 samples, 0.36%)</title><rect x="63.1272%" y="117" width="0.3609%" height="15" fill="rgb(220,109,13)"/><text x="63.3772%" y="127.50"></text></g><g><title>resolve_lifetimes (411,846 samples, 0.34%)</title><rect x="63.1496%" y="101" width="0.3384%" height="15" fill="rgb(232,18,1)"/><text x="63.3996%" y="111.50"></text></g><g><title>named_region_map (285,495 samples, 0.23%)</title><rect x="63.4881%" y="117" width="0.2346%" height="15" fill="rgb(215,41,42)"/><text x="63.7381%" y="127.50"></text></g><g><title>resolve_lifetimes (265,645 samples, 0.22%)</title><rect x="63.5044%" y="101" width="0.2183%" height="15" fill="rgb(224,123,36)"/><text x="63.7544%" y="111.50"></text></g><g><title>generics_of (935,902 samples, 0.77%)</title><rect x="62.9710%" y="133" width="0.7691%" height="15" fill="rgb(240,125,3)"/><text x="63.2210%" y="143.50"></text></g><g><title>explicit_predicates_of (247,245 samples, 0.20%)</title><rect x="63.9528%" y="101" width="0.2032%" height="15" fill="rgb(205,98,50)"/><text x="64.2028%" y="111.50"></text></g><g><title>predicates_of (573,177 samples, 0.47%)</title><rect x="63.8193%" y="133" width="0.4710%" height="15" fill="rgb(205,185,37)"/><text x="64.0693%" y="143.50"></text></g><g><title>predicates_defined_on (509,466 samples, 0.42%)</title><rect x="63.8716%" y="117" width="0.4187%" height="15" fill="rgb(238,207,15)"/><text x="64.1216%" y="127.50"></text></g><g><title>inferred_outlives_of (163,431 samples, 0.13%)</title><rect x="64.1560%" y="101" width="0.1343%" height="15" fill="rgb(213,199,42)"/><text x="64.4060%" y="111.50"></text></g><g><title>inferred_outlives_crate (139,931 samples, 0.11%)</title><rect x="64.1753%" y="85" width="0.1150%" height="15" fill="rgb(235,201,11)"/><text x="64.4253%" y="95.50"></text></g><g><title>type_collecting (3,250,586 samples, 2.67%)</title><rect x="61.8021%" y="165" width="2.6712%" height="15" fill="rgb(207,46,11)"/><text x="62.0521%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (3,231,236 samples, 2.66%)</title><rect x="61.8180%" y="149" width="2.6553%" height="15" fill="rgb(241,35,35)"/><text x="62.0680%" y="159.50">co..</text></g><g><title>type_of (222,611 samples, 0.18%)</title><rect x="64.2903%" y="133" width="0.1829%" height="15" fill="rgb(243,32,47)"/><text x="64.5403%" y="143.50"></text></g><g><title>evaluate_obligation (169,902 samples, 0.14%)</title><rect x="65.1459%" y="133" width="0.1396%" height="15" fill="rgb(247,202,23)"/><text x="65.3959%" y="143.50"></text></g><g><title>region_scope_tree (153,362 samples, 0.13%)</title><rect x="65.4491%" y="133" width="0.1260%" height="15" fill="rgb(219,102,11)"/><text x="65.6991%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,248,112 samples, 1.03%)</title><rect x="64.5582%" y="149" width="1.0256%" height="15" fill="rgb(243,110,44)"/><text x="64.8082%" y="159.50"></text></g><g><title>evaluate_obligation (365,874 samples, 0.30%)</title><rect x="66.3846%" y="133" width="0.3007%" height="15" fill="rgb(222,74,54)"/><text x="66.6346%" y="143.50"></text></g><g><title>implied_outlives_bounds (141,103 samples, 0.12%)</title><rect x="66.6904%" y="133" width="0.1160%" height="15" fill="rgb(216,99,12)"/><text x="66.9404%" y="143.50"></text></g><g><title>param_env (202,703 samples, 0.17%)</title><rect x="66.8518%" y="133" width="0.1666%" height="15" fill="rgb(226,22,26)"/><text x="67.1018%" y="143.50"></text></g><g><title>region_scope_tree (135,760 samples, 0.11%)</title><rect x="67.0953%" y="133" width="0.1116%" height="15" fill="rgb(217,163,10)"/><text x="67.3453%" y="143.50"></text></g><g><title>analysis (81,084,012 samples, 66.63%)</title><rect x="0.6668%" y="197" width="66.6304%" height="15" fill="rgb(213,25,53)"/><text x="0.9168%" y="207.50">analysis</text></g><g><title>type_check_crate (54,899,651 samples, 45.11%)</title><rect x="22.1837%" y="181" width="45.1135%" height="15" fill="rgb(252,105,26)"/><text x="22.4337%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,433,618 samples, 2.82%)</title><rect x="64.4756%" y="165" width="2.8216%" height="15" fill="rgb(220,39,43)"/><text x="64.7256%" y="175.50">wf..</text></g><g><title>check_item_well_formed (2,084,985 samples, 1.71%)</title><rect x="65.5838%" y="149" width="1.7133%" height="15" fill="rgb(229,68,48)"/><text x="65.8338%" y="159.50"></text></g><g><title>codegen_crate (546,766 samples, 0.45%)</title><rect x="67.3057%" y="197" width="0.4493%" height="15" fill="rgb(252,8,32)"/><text x="67.5557%" y="207.50"></text></g><g><title>AST_validation (213,932 samples, 0.18%)</title><rect x="67.9380%" y="181" width="0.1758%" height="15" fill="rgb(223,20,43)"/><text x="68.1880%" y="191.50"></text></g><g><title>metadata_load_macro (308,894 samples, 0.25%)</title><rect x="83.7435%" y="149" width="0.2538%" height="15" fill="rgb(229,81,49)"/><text x="83.9935%" y="159.50"></text></g><g><title>metadata_register_crate (2,072,014 samples, 1.70%)</title><rect x="83.9973%" y="149" width="1.7027%" height="15" fill="rgb(236,28,36)"/><text x="84.2473%" y="159.50"></text></g><g><title>metadata_register_crate (745,959 samples, 0.61%)</title><rect x="85.0870%" y="133" width="0.6130%" height="15" fill="rgb(249,185,26)"/><text x="85.3370%" y="143.50"></text></g><g><title>macro_expand_crate (21,413,208 samples, 17.60%)</title><rect x="68.2903%" y="181" width="17.5962%" height="15" fill="rgb(249,174,33)"/><text x="68.5403%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (21,395,228 samples, 17.58%)</title><rect x="68.3050%" y="165" width="17.5814%" height="15" fill="rgb(233,201,37)"/><text x="68.5550%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (226,952 samples, 0.19%)</title><rect x="85.6999%" y="149" width="0.1865%" height="15" fill="rgb(221,78,26)"/><text x="85.9499%" y="159.50"></text></g><g><title>finalize_macro_resolutions (160,811 samples, 0.13%)</title><rect x="86.0269%" y="165" width="0.1321%" height="15" fill="rgb(250,127,30)"/><text x="86.2769%" y="175.50"></text></g><g><title>late_resolve_crate (5,009,026 samples, 4.12%)</title><rect x="86.1590%" y="165" width="4.1161%" height="15" fill="rgb(230,49,44)"/><text x="86.4090%" y="175.50">late..</text></g><g><title>configure_and_expand (27,583,607 samples, 22.67%)</title><rect x="67.7550%" y="197" width="22.6667%" height="15" fill="rgb(229,67,23)"/><text x="68.0050%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,432,721 samples, 4.46%)</title><rect x="85.9574%" y="181" width="4.4643%" height="15" fill="rgb(249,83,47)"/><text x="86.2074%" y="191.50">resol..</text></g><g><title>drop_ast (279,473 samples, 0.23%)</title><rect x="90.4217%" y="197" width="0.2297%" height="15" fill="rgb(215,43,3)"/><text x="90.6717%" y="207.50"></text></g><g><title>early_lint_checks (535,066 samples, 0.44%)</title><rect x="90.6650%" y="197" width="0.4397%" height="15" fill="rgb(238,154,13)"/><text x="90.9150%" y="207.50"></text></g><g><title>free_global_ctxt (3,688,831 samples, 3.03%)</title><rect x="91.1047%" y="197" width="3.0313%" height="15" fill="rgb(219,56,2)"/><text x="91.3547%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (779,719 samples, 0.64%)</title><rect x="94.1360%" y="197" width="0.6407%" height="15" fill="rgb(233,0,4)"/><text x="94.3860%" y="207.50"></text></g><g><title>hir_lowering (4,032,385 samples, 3.31%)</title><rect x="94.7767%" y="197" width="3.3136%" height="15" fill="rgb(235,30,7)"/><text x="95.0267%" y="207.50">hir..</text></g><g><title>parse_crate (610,416 samples, 0.50%)</title><rect x="98.1292%" y="197" width="0.5016%" height="15" fill="rgb(250,79,13)"/><text x="98.3792%" y="207.50"></text></g><g><title>prepare_outputs (336,564 samples, 0.28%)</title><rect x="98.6389%" y="197" width="0.2766%" height="15" fill="rgb(211,146,34)"/><text x="98.8889%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (850,449 samples, 0.70%)</title><rect x="98.9154%" y="197" width="0.6989%" height="15" fill="rgb(228,22,38)"/><text x="99.1654%" y="207.50"></text></g><g><title>setup_global_ctxt (144,451 samples, 0.12%)</title><rect x="99.6231%" y="197" width="0.1187%" height="15" fill="rgb(235,168,5)"/><text x="99.8731%" y="207.50"></text></g><g><title>all (121,692,304 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (121,692,304 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (314,194 samples, 0.26%)</title><rect x="99.7418%" y="197" width="0.2582%" height="15" fill="rgb(223,4,10)"/><text x="99.9918%" y="207.50"></text></g></svg></svg>