<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (45,991 samples, 0.11%)</title><rect x="4.6172%" y="117" width="0.1093%" height="15" fill="rgb(227,0,7)"/><text x="4.8672%" y="127.50"></text></g><g><title>thir_body (61,270 samples, 0.15%)</title><rect x="5.2248%" y="101" width="0.1456%" height="15" fill="rgb(217,0,24)"/><text x="5.4748%" y="111.50"></text></g><g><title>mir_const (437,105 samples, 1.04%)</title><rect x="4.3356%" y="149" width="1.0388%" height="15" fill="rgb(221,193,54)"/><text x="4.5856%" y="159.50"></text></g><g><title>unsafety_check_result (343,264 samples, 0.82%)</title><rect x="4.5586%" y="133" width="0.8158%" height="15" fill="rgb(248,212,6)"/><text x="4.8086%" y="143.50"></text></g><g><title>mir_built (272,612 samples, 0.65%)</title><rect x="4.7265%" y="117" width="0.6479%" height="15" fill="rgb(208,68,35)"/><text x="4.9765%" y="127.50"></text></g><g><title>has_structural_eq_impls (334,253 samples, 0.79%)</title><rect x="5.9859%" y="133" width="0.7944%" height="15" fill="rgb(232,128,0)"/><text x="6.2359%" y="143.50"></text></g><g><title>trait_impls_of (247,753 samples, 0.59%)</title><rect x="6.1914%" y="117" width="0.5888%" height="15" fill="rgb(207,160,47)"/><text x="6.4414%" y="127.50"></text></g><g><title>implementations_of_trait (45,980 samples, 0.11%)</title><rect x="6.6709%" y="101" width="0.1093%" height="15" fill="rgb(228,23,34)"/><text x="6.9209%" y="111.50"></text></g><g><title>is_freeze_raw (42,080 samples, 0.10%)</title><rect x="6.7838%" y="133" width="0.1000%" height="15" fill="rgb(218,30,26)"/><text x="7.0338%" y="143.50"></text></g><g><title>needs_drop_raw (100,541 samples, 0.24%)</title><rect x="7.5223%" y="85" width="0.2389%" height="15" fill="rgb(220,122,19)"/><text x="7.7723%" y="95.50"></text></g><g><title>is_copy_raw (51,671 samples, 0.12%)</title><rect x="7.6384%" y="69" width="0.1228%" height="15" fill="rgb(250,228,42)"/><text x="7.8884%" y="79.50"></text></g><g><title>evaluate_obligation (42,181 samples, 0.10%)</title><rect x="7.6610%" y="53" width="0.1002%" height="15" fill="rgb(240,193,28)"/><text x="7.9110%" y="63.50"></text></g><g><title>mir_const (385,235 samples, 0.92%)</title><rect x="6.8917%" y="133" width="0.9155%" height="15" fill="rgb(216,20,37)"/><text x="7.1417%" y="143.50"></text></g><g><title>unsafety_check_result (271,133 samples, 0.64%)</title><rect x="7.1629%" y="117" width="0.6444%" height="15" fill="rgb(206,188,39)"/><text x="7.4129%" y="127.50"></text></g><g><title>mir_built (205,553 samples, 0.49%)</title><rect x="7.3187%" y="101" width="0.4885%" height="15" fill="rgb(217,207,13)"/><text x="7.5687%" y="111.50"></text></g><g><title>adt_drop_tys (48,340 samples, 0.11%)</title><rect x="7.8262%" y="101" width="0.1149%" height="15" fill="rgb(231,73,38)"/><text x="8.0762%" y="111.50"></text></g><g><title>adt_drop_tys (65,110 samples, 0.15%)</title><rect x="7.8159%" y="117" width="0.1547%" height="15" fill="rgb(225,20,46)"/><text x="8.0659%" y="127.50"></text></g><g><title>needs_drop_raw (74,650 samples, 0.18%)</title><rect x="7.8072%" y="133" width="0.1774%" height="15" fill="rgb(210,31,41)"/><text x="8.0572%" y="143.50"></text></g><g><title>mir_promoted (1,620,189 samples, 3.85%)</title><rect x="4.1474%" y="165" width="3.8504%" height="15" fill="rgb(221,200,47)"/><text x="4.3974%" y="175.50">mir_..</text></g><g><title>mir_const_qualif (1,103,902 samples, 2.62%)</title><rect x="5.3744%" y="149" width="2.6235%" height="15" fill="rgb(226,26,5)"/><text x="5.6244%" y="159.50">mi..</text></g><g><title>MIR_borrow_checking (2,720,220 samples, 6.46%)</title><rect x="1.9980%" y="197" width="6.4647%" height="15" fill="rgb(249,33,26)"/><text x="2.2480%" y="207.50">MIR_borr..</text></g><g><title>mir_borrowck (2,711,550 samples, 6.44%)</title><rect x="2.0186%" y="181" width="6.4441%" height="15" fill="rgb(235,183,28)"/><text x="2.2686%" y="191.50">mir_borr..</text></g><g><title>type_op_prove_predicate (137,881 samples, 0.33%)</title><rect x="8.1350%" y="165" width="0.3277%" height="15" fill="rgb(221,5,38)"/><text x="8.3850%" y="175.50"></text></g><g><title>MIR_effect_checking (172,882 samples, 0.41%)</title><rect x="8.4627%" y="197" width="0.4109%" height="15" fill="rgb(247,18,42)"/><text x="8.7127%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (151,632 samples, 0.36%)</title><rect x="8.5132%" y="181" width="0.3604%" height="15" fill="rgb(241,131,45)"/><text x="8.7632%" y="191.50"></text></g><g><title>hir_module_items (141,031 samples, 0.34%)</title><rect x="8.8736%" y="197" width="0.3352%" height="15" fill="rgb(249,31,29)"/><text x="9.1236%" y="207.50"></text></g><g><title>get_lang_items (88,401 samples, 0.21%)</title><rect x="9.7999%" y="149" width="0.2101%" height="15" fill="rgb(225,111,53)"/><text x="10.0499%" y="159.50"></text></g><g><title>should_inherit_track_caller (58,440 samples, 0.14%)</title><rect x="10.0100%" y="149" width="0.1389%" height="15" fill="rgb(238,160,17)"/><text x="10.2600%" y="159.50"></text></g><g><title>codegen_fn_attrs (270,164 samples, 0.64%)</title><rect x="9.5805%" y="165" width="0.6421%" height="15" fill="rgb(214,148,48)"/><text x="9.8305%" y="175.50"></text></g><g><title>check_mod_attrs (394,444 samples, 0.94%)</title><rect x="9.2856%" y="181" width="0.9374%" height="15" fill="rgb(232,36,49)"/><text x="9.5356%" y="191.50"></text></g><g><title>lint_levels (51,580 samples, 0.12%)</title><rect x="10.6029%" y="165" width="0.1226%" height="15" fill="rgb(209,103,24)"/><text x="10.8529%" y="175.50"></text></g><g><title>lookup_deprecation_entry (91,742 samples, 0.22%)</title><rect x="10.7254%" y="165" width="0.2180%" height="15" fill="rgb(229,88,8)"/><text x="10.9754%" y="175.50"></text></g><g><title>lookup_stability (56,671 samples, 0.13%)</title><rect x="10.9435%" y="165" width="0.1347%" height="15" fill="rgb(213,181,19)"/><text x="11.1935%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (318,014 samples, 0.76%)</title><rect x="10.3832%" y="181" width="0.7558%" height="15" fill="rgb(254,191,54)"/><text x="10.6332%" y="191.50"></text></g><g><title>misc_checking_1 (861,279 samples, 2.05%)</title><rect x="9.2097%" y="197" width="2.0469%" height="15" fill="rgb(241,83,37)"/><text x="9.4597%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (118,351 samples, 0.28%)</title><rect x="11.2616%" y="181" width="0.2813%" height="15" fill="rgb(233,36,39)"/><text x="11.5116%" y="191.50"></text></g><g><title>check_mod_liveness (95,011 samples, 0.23%)</title><rect x="11.3171%" y="165" width="0.2258%" height="15" fill="rgb(226,3,54)"/><text x="11.5671%" y="175.50"></text></g><g><title>misc_checking_2 (266,603 samples, 0.63%)</title><rect x="11.2565%" y="197" width="0.6336%" height="15" fill="rgb(245,192,40)"/><text x="11.5065%" y="207.50"></text></g><g><title>match_checking (146,111 samples, 0.35%)</title><rect x="11.5429%" y="181" width="0.3472%" height="15" fill="rgb(238,167,29)"/><text x="11.7929%" y="191.50"></text></g><g><title>check_match (139,641 samples, 0.33%)</title><rect x="11.5583%" y="165" width="0.3319%" height="15" fill="rgb(232,182,51)"/><text x="11.8083%" y="175.50"></text></g><g><title>death_checking (69,210 samples, 0.16%)</title><rect x="11.9881%" y="181" width="0.1645%" height="15" fill="rgb(231,60,39)"/><text x="12.2381%" y="191.50"></text></g><g><title>param_env (101,551 samples, 0.24%)</title><rect x="13.1589%" y="149" width="0.2413%" height="15" fill="rgb(208,69,12)"/><text x="13.4089%" y="159.50"></text></g><g><title>predicates_of (50,641 samples, 0.12%)</title><rect x="13.2799%" y="133" width="0.1204%" height="15" fill="rgb(235,93,37)"/><text x="13.5299%" y="143.50"></text></g><g><title>trait_impls_of (207,922 samples, 0.49%)</title><rect x="13.4003%" y="149" width="0.4941%" height="15" fill="rgb(213,116,39)"/><text x="13.6503%" y="159.50"></text></g><g><title>implementations_of_trait (46,710 samples, 0.11%)</title><rect x="13.7834%" y="133" width="0.1110%" height="15" fill="rgb(222,207,29)"/><text x="14.0334%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (42,690 samples, 0.10%)</title><rect x="13.7929%" y="117" width="0.1015%" height="15" fill="rgb(206,96,30)"/><text x="14.0429%" y="127.50"></text></g><g><title>crate_lints (3,492,058 samples, 8.30%)</title><rect x="12.1568%" y="165" width="8.2990%" height="15" fill="rgb(218,138,4)"/><text x="12.4068%" y="175.50">crate_lints</text></g><g><title>type_of (2,759,563 samples, 6.56%)</title><rect x="13.8976%" y="149" width="6.5582%" height="15" fill="rgb(250,191,14)"/><text x="14.1476%" y="159.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,508,929 samples, 5.96%)</title><rect x="14.4933%" y="133" width="5.9626%" height="15" fill="rgb(239,60,40)"/><text x="14.7433%" y="143.50">metadata..</text></g><g><title>lint_checking (3,537,769 samples, 8.41%)</title><rect x="12.1526%" y="181" width="8.4076%" height="15" fill="rgb(206,27,48)"/><text x="12.4026%" y="191.50">lint_checking</text></g><g><title>module_lints (43,921 samples, 0.10%)</title><rect x="20.4558%" y="165" width="0.1044%" height="15" fill="rgb(225,35,8)"/><text x="20.7058%" y="175.50"></text></g><g><title>privacy_access_levels (48,570 samples, 0.12%)</title><rect x="20.5602%" y="181" width="0.1154%" height="15" fill="rgb(250,213,24)"/><text x="20.8102%" y="191.50"></text></g><g><title>privacy_checking_modules (68,241 samples, 0.16%)</title><rect x="20.6757%" y="181" width="0.1622%" height="15" fill="rgb(247,123,22)"/><text x="20.9257%" y="191.50"></text></g><g><title>check_mod_privacy (66,371 samples, 0.16%)</title><rect x="20.6801%" y="165" width="0.1577%" height="15" fill="rgb(231,138,38)"/><text x="20.9301%" y="175.50"></text></g><g><title>misc_checking_3 (3,780,602 samples, 8.98%)</title><rect x="11.8901%" y="197" width="8.9847%" height="15" fill="rgb(231,145,46)"/><text x="12.1401%" y="207.50">misc_checking..</text></g><g><title>impl_parent (146,160 samples, 0.35%)</title><rect x="21.6707%" y="133" width="0.3474%" height="15" fill="rgb(251,118,11)"/><text x="21.9207%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (99,080 samples, 0.24%)</title><rect x="21.7826%" y="117" width="0.2355%" height="15" fill="rgb(217,147,25)"/><text x="22.0326%" y="127.50"></text></g><g><title>impl_trait_ref (558,198 samples, 1.33%)</title><rect x="22.0181%" y="133" width="1.3266%" height="15" fill="rgb(247,81,37)"/><text x="22.2681%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (516,437 samples, 1.23%)</title><rect x="22.1173%" y="117" width="1.2273%" height="15" fill="rgb(209,12,38)"/><text x="22.3673%" y="127.50"></text></g><g><title>coherent_trait (1,065,462 samples, 2.53%)</title><rect x="21.0091%" y="165" width="2.5321%" height="15" fill="rgb(227,1,9)"/><text x="21.2591%" y="175.50">co..</text></g><g><title>specialization_graph_of (1,057,152 samples, 2.51%)</title><rect x="21.0289%" y="149" width="2.5124%" height="15" fill="rgb(248,47,43)"/><text x="21.2789%" y="159.50">sp..</text></g><g><title>trait_impls_of (82,731 samples, 0.20%)</title><rect x="23.3446%" y="133" width="0.1966%" height="15" fill="rgb(221,10,30)"/><text x="23.5946%" y="143.50"></text></g><g><title>coherence_checking (1,131,082 samples, 2.69%)</title><rect x="20.9688%" y="181" width="2.6881%" height="15" fill="rgb(210,229,1)"/><text x="21.2188%" y="191.50">co..</text></g><g><title>adt_sized_constraint (108,211 samples, 0.26%)</title><rect x="25.9070%" y="133" width="0.2572%" height="15" fill="rgb(222,148,37)"/><text x="26.1570%" y="143.50"></text></g><g><title>adt_sized_constraint (106,161 samples, 0.25%)</title><rect x="25.9119%" y="117" width="0.2523%" height="15" fill="rgb(234,67,33)"/><text x="26.1619%" y="127.50"></text></g><g><title>adt_sized_constraint (67,251 samples, 0.16%)</title><rect x="26.0043%" y="101" width="0.1598%" height="15" fill="rgb(247,98,35)"/><text x="26.2543%" y="111.50"></text></g><g><title>adt_def (65,951 samples, 0.16%)</title><rect x="26.0074%" y="85" width="0.1567%" height="15" fill="rgb(247,138,52)"/><text x="26.2574%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (65,391 samples, 0.16%)</title><rect x="26.0088%" y="69" width="0.1554%" height="15" fill="rgb(213,79,30)"/><text x="26.2588%" y="79.50"></text></g><g><title>item_attrs (61,461 samples, 0.15%)</title><rect x="26.0181%" y="53" width="0.1461%" height="15" fill="rgb(246,177,23)"/><text x="26.2681%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,471 samples, 0.14%)</title><rect x="26.0204%" y="37" width="0.1437%" height="15" fill="rgb(230,62,27)"/><text x="26.2704%" y="47.50"></text></g><g><title>associated_items (49,020 samples, 0.12%)</title><rect x="26.1642%" y="133" width="0.1165%" height="15" fill="rgb(216,154,8)"/><text x="26.4142%" y="143.50"></text></g><g><title>adt_def (229,753 samples, 0.55%)</title><rect x="26.4772%" y="69" width="0.5460%" height="15" fill="rgb(244,35,45)"/><text x="26.7272%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (229,053 samples, 0.54%)</title><rect x="26.4789%" y="53" width="0.5444%" height="15" fill="rgb(251,115,12)"/><text x="26.7289%" y="63.50"></text></g><g><title>adt_dtorck_constraint (257,623 samples, 0.61%)</title><rect x="26.4381%" y="85" width="0.6123%" height="15" fill="rgb(240,54,50)"/><text x="26.6881%" y="95.50"></text></g><g><title>adt_dtorck_constraint (275,483 samples, 0.65%)</title><rect x="26.4050%" y="101" width="0.6547%" height="15" fill="rgb(233,84,52)"/><text x="26.6550%" y="111.50"></text></g><g><title>dropck_outlives (325,044 samples, 0.77%)</title><rect x="26.2894%" y="133" width="0.7725%" height="15" fill="rgb(207,117,47)"/><text x="26.5394%" y="143.50"></text></g><g><title>adt_dtorck_constraint (283,933 samples, 0.67%)</title><rect x="26.3871%" y="117" width="0.6748%" height="15" fill="rgb(249,43,39)"/><text x="26.6371%" y="127.50"></text></g><g><title>evaluate_obligation (74,903 samples, 0.18%)</title><rect x="27.0619%" y="133" width="0.1780%" height="15" fill="rgb(209,38,44)"/><text x="27.3119%" y="143.50"></text></g><g><title>predicates_of (49,870 samples, 0.12%)</title><rect x="27.4695%" y="133" width="0.1185%" height="15" fill="rgb(236,212,23)"/><text x="27.7195%" y="143.50"></text></g><g><title>trait_impls_of (42,791 samples, 0.10%)</title><rect x="27.5959%" y="133" width="0.1017%" height="15" fill="rgb(242,79,21)"/><text x="27.8459%" y="143.50"></text></g><g><title>evaluate_obligation (266,863 samples, 0.63%)</title><rect x="30.8172%" y="117" width="0.6342%" height="15" fill="rgb(211,96,35)"/><text x="31.0672%" y="127.50"></text></g><g><title>trait_impls_of (78,701 samples, 0.19%)</title><rect x="31.2644%" y="101" width="0.1870%" height="15" fill="rgb(253,215,40)"/><text x="31.5144%" y="111.50"></text></g><g><title>is_copy_raw (299,523 samples, 0.71%)</title><rect x="31.7770%" y="117" width="0.7118%" height="15" fill="rgb(211,81,21)"/><text x="32.0270%" y="127.50"></text></g><g><title>evaluate_obligation (280,873 samples, 0.67%)</title><rect x="31.8213%" y="101" width="0.6675%" height="15" fill="rgb(208,190,38)"/><text x="32.0713%" y="111.50"></text></g><g><title>trait_impls_of (198,102 samples, 0.47%)</title><rect x="32.0180%" y="85" width="0.4708%" height="15" fill="rgb(235,213,38)"/><text x="32.2680%" y="95.50"></text></g><g><title>implementations_of_trait (44,480 samples, 0.11%)</title><rect x="32.3831%" y="69" width="0.1057%" height="15" fill="rgb(237,122,38)"/><text x="32.6331%" y="79.50"></text></g><g><title>method_autoderef_steps (80,940 samples, 0.19%)</title><rect x="32.6170%" y="117" width="0.1924%" height="15" fill="rgb(244,218,35)"/><text x="32.8670%" y="127.50"></text></g><g><title>evaluate_obligation (66,560 samples, 0.16%)</title><rect x="32.6512%" y="101" width="0.1582%" height="15" fill="rgb(240,68,47)"/><text x="32.9012%" y="111.50"></text></g><g><title>trait_impls_of (43,260 samples, 0.10%)</title><rect x="32.7066%" y="85" width="0.1028%" height="15" fill="rgb(210,16,53)"/><text x="32.9566%" y="95.50"></text></g><g><title>predicates_of (92,251 samples, 0.22%)</title><rect x="32.8186%" y="117" width="0.2192%" height="15" fill="rgb(235,124,12)"/><text x="33.0686%" y="127.50"></text></g><g><title>predicates_defined_on (59,390 samples, 0.14%)</title><rect x="32.8967%" y="101" width="0.1411%" height="15" fill="rgb(224,169,11)"/><text x="33.1467%" y="111.50"></text></g><g><title>typeck (2,277,215 samples, 5.41%)</title><rect x="27.7150%" y="133" width="5.4119%" height="15" fill="rgb(250,166,2)"/><text x="27.9650%" y="143.50">typeck</text></g><g><title>item_bodies_checking (3,968,534 samples, 9.43%)</title><rect x="23.7267%" y="181" width="9.4314%" height="15" fill="rgb(242,216,29)"/><text x="23.9767%" y="191.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (3,965,704 samples, 9.42%)</title><rect x="23.7334%" y="165" width="9.4246%" height="15" fill="rgb(230,116,27)"/><text x="23.9834%" y="175.50">typeck_item_b..</text></g><g><title>typeck (3,955,443 samples, 9.40%)</title><rect x="23.7578%" y="149" width="9.4002%" height="15" fill="rgb(228,99,48)"/><text x="24.0078%" y="159.50">typeck</text></g><g><title>impl_parent (133,552 samples, 0.32%)</title><rect x="33.7253%" y="101" width="0.3174%" height="15" fill="rgb(253,11,6)"/><text x="33.9753%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (84,421 samples, 0.20%)</title><rect x="33.8421%" y="85" width="0.2006%" height="15" fill="rgb(247,143,39)"/><text x="34.0921%" y="95.50"></text></g><g><title>impl_trait_ref (420,665 samples, 1.00%)</title><rect x="34.0427%" y="101" width="0.9997%" height="15" fill="rgb(236,97,10)"/><text x="34.2927%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (369,805 samples, 0.88%)</title><rect x="34.1636%" y="85" width="0.8789%" height="15" fill="rgb(233,208,19)"/><text x="34.4136%" y="95.50"></text></g><g><title>adt_destructor (807,639 samples, 1.92%)</title><rect x="33.2663%" y="149" width="1.9194%" height="15" fill="rgb(216,164,2)"/><text x="33.5163%" y="159.50">a..</text></g><g><title>coherent_trait (802,338 samples, 1.91%)</title><rect x="33.2789%" y="133" width="1.9068%" height="15" fill="rgb(220,129,5)"/><text x="33.5289%" y="143.50">c..</text></g><g><title>specialization_graph_of (799,108 samples, 1.90%)</title><rect x="33.2866%" y="117" width="1.8991%" height="15" fill="rgb(242,17,10)"/><text x="33.5366%" y="127.50">s..</text></g><g><title>trait_impls_of (60,280 samples, 0.14%)</title><rect x="35.0424%" y="101" width="0.1433%" height="15" fill="rgb(242,107,0)"/><text x="35.2924%" y="111.50"></text></g><g><title>item_types_checking (867,469 samples, 2.06%)</title><rect x="33.1580%" y="181" width="2.0616%" height="15" fill="rgb(251,28,31)"/><text x="33.4080%" y="191.50">i..</text></g><g><title>check_mod_item_types (863,409 samples, 2.05%)</title><rect x="33.1677%" y="165" width="2.0519%" height="15" fill="rgb(233,223,10)"/><text x="33.4177%" y="175.50">c..</text></g><g><title>named_region_map (75,300 samples, 0.18%)</title><rect x="35.7386%" y="133" width="0.1790%" height="15" fill="rgb(215,21,27)"/><text x="35.9886%" y="143.50"></text></g><g><title>resolve_lifetimes (59,410 samples, 0.14%)</title><rect x="35.7764%" y="117" width="0.1412%" height="15" fill="rgb(232,23,21)"/><text x="36.0264%" y="127.50"></text></g><g><title>generics_of (163,200 samples, 0.39%)</title><rect x="35.5726%" y="149" width="0.3879%" height="15" fill="rgb(244,5,23)"/><text x="35.8226%" y="159.50"></text></g><g><title>late_bound_vars_map (68,270 samples, 0.16%)</title><rect x="36.5256%" y="101" width="0.1622%" height="15" fill="rgb(226,81,46)"/><text x="36.7756%" y="111.50"></text></g><g><title>resolve_lifetimes (61,150 samples, 0.15%)</title><rect x="36.5425%" y="85" width="0.1453%" height="15" fill="rgb(247,70,30)"/><text x="36.7925%" y="95.50"></text></g><g><title>explicit_predicates_of (311,422 samples, 0.74%)</title><rect x="36.0618%" y="117" width="0.7401%" height="15" fill="rgb(212,68,19)"/><text x="36.3118%" y="127.50"></text></g><g><title>predicates_of (60,851 samples, 0.14%)</title><rect x="36.9605%" y="85" width="0.1446%" height="15" fill="rgb(240,187,13)"/><text x="37.2105%" y="95.50"></text></g><g><title>predicates_defined_on (57,721 samples, 0.14%)</title><rect x="36.9680%" y="69" width="0.1372%" height="15" fill="rgb(223,113,26)"/><text x="37.2180%" y="79.50"></text></g><g><title>predicates_of (564,256 samples, 1.34%)</title><rect x="35.9690%" y="149" width="1.3410%" height="15" fill="rgb(206,192,2)"/><text x="36.2190%" y="159.50"></text></g><g><title>predicates_defined_on (548,456 samples, 1.30%)</title><rect x="36.0066%" y="133" width="1.3034%" height="15" fill="rgb(241,108,4)"/><text x="36.2566%" y="143.50"></text></g><g><title>inferred_outlives_of (213,813 samples, 0.51%)</title><rect x="36.8019%" y="117" width="0.5081%" height="15" fill="rgb(247,173,49)"/><text x="37.0519%" y="127.50"></text></g><g><title>inferred_outlives_crate (196,352 samples, 0.47%)</title><rect x="36.8434%" y="101" width="0.4666%" height="15" fill="rgb(224,114,35)"/><text x="37.0934%" y="111.50"></text></g><g><title>type_of (86,201 samples, 0.20%)</title><rect x="37.1052%" y="85" width="0.2049%" height="15" fill="rgb(245,159,27)"/><text x="37.3552%" y="95.50"></text></g><g><title>type_of (64,281 samples, 0.15%)</title><rect x="37.1572%" y="69" width="0.1528%" height="15" fill="rgb(245,172,44)"/><text x="37.4072%" y="79.50"></text></g><g><title>metadata_decode_entry_type_of (61,441 samples, 0.15%)</title><rect x="37.1640%" y="53" width="0.1460%" height="15" fill="rgb(236,23,11)"/><text x="37.4140%" y="63.50"></text></g><g><title>type_collecting (986,222 samples, 2.34%)</title><rect x="35.2225%" y="181" width="2.3438%" height="15" fill="rgb(205,117,38)"/><text x="35.4725%" y="191.50">t..</text></g><g><title>collect_mod_item_types (972,901 samples, 2.31%)</title><rect x="35.2542%" y="165" width="2.3121%" height="15" fill="rgb(237,72,25)"/><text x="35.5042%" y="175.50">c..</text></g><g><title>type_of (58,281 samples, 0.14%)</title><rect x="37.4278%" y="149" width="0.1385%" height="15" fill="rgb(244,70,9)"/><text x="37.6778%" y="159.50"></text></g><g><title>evaluate_obligation (160,041 samples, 0.38%)</title><rect x="38.2445%" y="149" width="0.3803%" height="15" fill="rgb(217,125,39)"/><text x="38.4945%" y="159.50"></text></g><g><title>implied_outlives_bounds (57,271 samples, 0.14%)</title><rect x="38.6249%" y="149" width="0.1361%" height="15" fill="rgb(235,36,10)"/><text x="38.8749%" y="159.50"></text></g><g><title>check_impl_item_well_formed (579,706 samples, 1.38%)</title><rect x="37.6820%" y="165" width="1.3777%" height="15" fill="rgb(251,123,47)"/><text x="37.9320%" y="175.50"></text></g><g><title>adt_def (61,210 samples, 0.15%)</title><rect x="40.4756%" y="133" width="0.1455%" height="15" fill="rgb(221,13,13)"/><text x="40.7256%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (59,160 samples, 0.14%)</title><rect x="40.4805%" y="117" width="0.1406%" height="15" fill="rgb(238,131,9)"/><text x="40.7305%" y="127.50"></text></g><g><title>adt_def (52,051 samples, 0.12%)</title><rect x="40.6378%" y="117" width="0.1237%" height="15" fill="rgb(211,50,8)"/><text x="40.8878%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (51,471 samples, 0.12%)</title><rect x="40.6392%" y="101" width="0.1223%" height="15" fill="rgb(245,182,24)"/><text x="40.8892%" y="111.50"></text></g><g><title>item_attrs (47,511 samples, 0.11%)</title><rect x="40.6486%" y="85" width="0.1129%" height="15" fill="rgb(242,14,37)"/><text x="40.8986%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,891 samples, 0.11%)</title><rect x="40.6500%" y="69" width="0.1114%" height="15" fill="rgb(246,228,12)"/><text x="40.9000%" y="79.50"></text></g><g><title>adt_sized_constraint (67,941 samples, 0.16%)</title><rect x="40.6211%" y="133" width="0.1615%" height="15" fill="rgb(213,55,15)"/><text x="40.8711%" y="143.50"></text></g><g><title>adt_sized_constraint (144,331 samples, 0.34%)</title><rect x="40.4456%" y="149" width="0.3430%" height="15" fill="rgb(209,9,3)"/><text x="40.6956%" y="159.50"></text></g><g><title>implied_outlives_bounds (107,791 samples, 0.26%)</title><rect x="40.7930%" y="149" width="0.2562%" height="15" fill="rgb(230,59,30)"/><text x="41.0430%" y="159.50"></text></g><g><title>param_env (259,623 samples, 0.62%)</title><rect x="41.0491%" y="149" width="0.6170%" height="15" fill="rgb(209,121,21)"/><text x="41.2991%" y="159.50"></text></g><g><title>check_item_well_formed (1,203,374 samples, 2.86%)</title><rect x="39.0597%" y="165" width="2.8599%" height="15" fill="rgb(220,109,13)"/><text x="39.3097%" y="175.50">ch..</text></g><g><title>variances_of (66,770 samples, 0.16%)</title><rect x="41.7609%" y="149" width="0.1587%" height="15" fill="rgb(232,18,1)"/><text x="42.0109%" y="159.50"></text></g><g><title>crate_variances (61,490 samples, 0.15%)</title><rect x="41.7734%" y="133" width="0.1461%" height="15" fill="rgb(215,41,42)"/><text x="42.0234%" y="143.50"></text></g><g><title>analysis (17,048,419 samples, 40.52%)</title><rect x="1.6288%" y="213" width="40.5162%" height="15" fill="rgb(224,123,36)"/><text x="1.8788%" y="223.50">analysis</text></g><g><title>type_check_crate (8,950,050 samples, 21.27%)</title><rect x="20.8749%" y="197" width="21.2701%" height="15" fill="rgb(240,125,3)"/><text x="21.1249%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,925,692 samples, 4.58%)</title><rect x="37.5685%" y="181" width="4.5765%" height="15" fill="rgb(205,98,50)"/><text x="37.8185%" y="191.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (94,851 samples, 0.23%)</title><rect x="41.9195%" y="165" width="0.2254%" height="15" fill="rgb(205,185,37)"/><text x="42.1695%" y="175.50"></text></g><g><title>codegen_crate (560,156 samples, 1.33%)</title><rect x="42.1715%" y="213" width="1.3312%" height="15" fill="rgb(238,207,15)"/><text x="42.4215%" y="223.50"></text></g><g><title>AST_validation (143,852 samples, 0.34%)</title><rect x="44.0273%" y="197" width="0.3419%" height="15" fill="rgb(213,199,42)"/><text x="44.2773%" y="207.50"></text></g><g><title>crate_injection (97,991 samples, 0.23%)</title><rect x="44.4431%" y="197" width="0.2329%" height="15" fill="rgb(235,201,11)"/><text x="44.6931%" y="207.50"></text></g><g><title>metadata_load_macro (392,303 samples, 0.93%)</title><rect x="74.8314%" y="165" width="0.9323%" height="15" fill="rgb(207,46,11)"/><text x="75.0814%" y="175.50"></text></g><g><title>metadata_register_crate (2,165,583 samples, 5.15%)</title><rect x="75.7637%" y="165" width="5.1466%" height="15" fill="rgb(241,35,35)"/><text x="76.0137%" y="175.50">metada..</text></g><g><title>metadata_register_crate (766,689 samples, 1.82%)</title><rect x="79.0882%" y="149" width="1.8221%" height="15" fill="rgb(243,32,47)"/><text x="79.3382%" y="159.50">m..</text></g><g><title>metadata_register_crate (70,352 samples, 0.17%)</title><rect x="80.7431%" y="133" width="0.1672%" height="15" fill="rgb(247,202,23)"/><text x="80.9931%" y="143.50"></text></g><g><title>macro_expand_crate (15,299,160 samples, 36.36%)</title><rect x="44.6760%" y="197" width="36.3590%" height="15" fill="rgb(219,102,11)"/><text x="44.9260%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (15,273,569 samples, 36.30%)</title><rect x="44.7368%" y="181" width="36.2982%" height="15" fill="rgb(243,110,44)"/><text x="44.9868%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (52,460 samples, 0.12%)</title><rect x="80.9103%" y="165" width="0.1247%" height="15" fill="rgb(222,74,54)"/><text x="81.1603%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (105,111 samples, 0.25%)</title><rect x="81.0467%" y="197" width="0.2498%" height="15" fill="rgb(216,99,12)"/><text x="81.2967%" y="207.50"></text></g><g><title>finalize_imports (44,390 samples, 0.11%)</title><rect x="81.3173%" y="181" width="0.1055%" height="15" fill="rgb(226,22,26)"/><text x="81.5673%" y="191.50"></text></g><g><title>finalize_macro_resolutions (118,462 samples, 0.28%)</title><rect x="81.4228%" y="181" width="0.2815%" height="15" fill="rgb(217,163,10)"/><text x="81.6728%" y="191.50"></text></g><g><title>late_resolve_crate (568,576 samples, 1.35%)</title><rect x="81.7043%" y="181" width="1.3512%" height="15" fill="rgb(213,25,53)"/><text x="81.9543%" y="191.50"></text></g><g><title>configure_and_expand (16,703,835 samples, 39.70%)</title><rect x="43.5027%" y="213" width="39.6972%" height="15" fill="rgb(252,105,26)"/><text x="43.7527%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (800,939 samples, 1.90%)</title><rect x="81.2965%" y="197" width="1.9035%" height="15" fill="rgb(220,39,43)"/><text x="81.5465%" y="207.50">r..</text></g><g><title>drop_ast (62,490 samples, 0.15%)</title><rect x="83.2000%" y="213" width="0.1485%" height="15" fill="rgb(229,68,48)"/><text x="83.4500%" y="223.50"></text></g><g><title>early_lint_checks (148,612 samples, 0.35%)</title><rect x="83.3798%" y="213" width="0.3532%" height="15" fill="rgb(252,8,32)"/><text x="83.6298%" y="223.50"></text></g><g><title>free_global_ctxt (2,335,656 samples, 5.55%)</title><rect x="83.7330%" y="213" width="5.5508%" height="15" fill="rgb(223,20,43)"/><text x="83.9830%" y="223.50">free_gl..</text></g><g><title>crate_hash (67,661 samples, 0.16%)</title><rect x="90.1680%" y="197" width="0.1608%" height="15" fill="rgb(229,81,49)"/><text x="90.4180%" y="207.50"></text></g><g><title>codegen_fn_attrs (58,550 samples, 0.14%)</title><rect x="90.8865%" y="133" width="0.1391%" height="15" fill="rgb(236,28,36)"/><text x="91.1365%" y="143.50"></text></g><g><title>fn_abi_of_instance (134,841 samples, 0.32%)</title><rect x="90.8267%" y="149" width="0.3205%" height="15" fill="rgb(249,185,26)"/><text x="91.0767%" y="159.50"></text></g><g><title>param_env (44,510 samples, 0.11%)</title><rect x="91.0414%" y="133" width="0.1058%" height="15" fill="rgb(249,174,33)"/><text x="91.2914%" y="143.50"></text></g><g><title>layout_of (55,072 samples, 0.13%)</title><rect x="91.2018%" y="149" width="0.1309%" height="15" fill="rgb(233,201,37)"/><text x="91.4518%" y="159.50"></text></g><g><title>layout_of (42,361 samples, 0.10%)</title><rect x="91.2320%" y="133" width="0.1007%" height="15" fill="rgb(221,78,26)"/><text x="91.4820%" y="143.50"></text></g><g><title>eval_to_const_value_raw (43,441 samples, 0.10%)</title><rect x="91.4545%" y="133" width="0.1032%" height="15" fill="rgb(250,127,30)"/><text x="91.7045%" y="143.50"></text></g><g><title>eval_to_allocation_raw (407,895 samples, 0.97%)</title><rect x="90.6002%" y="181" width="0.9694%" height="15" fill="rgb(230,49,44)"/><text x="90.8502%" y="191.50"></text></g><g><title>eval_to_allocation_raw (401,285 samples, 0.95%)</title><rect x="90.6159%" y="165" width="0.9537%" height="15" fill="rgb(229,67,23)"/><text x="90.8659%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (56,381 samples, 0.13%)</title><rect x="91.4356%" y="149" width="0.1340%" height="15" fill="rgb(249,83,47)"/><text x="91.6856%" y="159.50"></text></g><g><title>mir_for_ctfe (506,437 samples, 1.20%)</title><rect x="90.4240%" y="197" width="1.2036%" height="15" fill="rgb(215,43,3)"/><text x="90.6740%" y="207.50"></text></g><g><title>generate_crate_metadata (1,021,131 samples, 2.43%)</title><rect x="89.2838%" y="213" width="2.4268%" height="15" fill="rgb(238,154,13)"/><text x="89.5338%" y="223.50">ge..</text></g><g><title>hir_lowering (1,142,593 samples, 2.72%)</title><rect x="91.7105%" y="213" width="2.7154%" height="15" fill="rgb(219,56,2)"/><text x="91.9605%" y="223.50">hi..</text></g><g><title>link (45,610 samples, 0.11%)</title><rect x="94.4259%" y="213" width="0.1084%" height="15" fill="rgb(233,0,4)"/><text x="94.6759%" y="223.50"></text></g><g><title>parse_crate (1,104,852 samples, 2.63%)</title><rect x="94.5343%" y="213" width="2.6257%" height="15" fill="rgb(235,30,7)"/><text x="94.7843%" y="223.50">pa..</text></g><g><title>prepare_outputs (341,764 samples, 0.81%)</title><rect x="97.1845%" y="213" width="0.8122%" height="15" fill="rgb(250,79,13)"/><text x="97.4345%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (373,904 samples, 0.89%)</title><rect x="97.9967%" y="213" width="0.8886%" height="15" fill="rgb(211,146,34)"/><text x="98.2467%" y="223.50"></text></g><g><title>setup_global_ctxt (131,902 samples, 0.31%)</title><rect x="98.9118%" y="213" width="0.3135%" height="15" fill="rgb(228,22,38)"/><text x="99.1618%" y="223.50"></text></g><g><title>all (42,078,067 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (42,078,067 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (325,984 samples, 0.77%)</title><rect x="99.2253%" y="213" width="0.7747%" height="15" fill="rgb(215,215,53)"/><text x="99.4753%" y="223.50"></text></g></svg></svg>