<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (85,461 samples, 0.12%)</title><rect x="6.3630%" y="149" width="0.1157%" height="15" fill="rgb(227,0,7)"/><text x="6.6130%" y="159.50"></text></g><g><title>is_copy_raw (89,391 samples, 0.12%)</title><rect x="8.8683%" y="85" width="0.1210%" height="15" fill="rgb(217,0,24)"/><text x="9.1183%" y="95.50"></text></g><g><title>evaluate_obligation (80,301 samples, 0.11%)</title><rect x="8.8806%" y="69" width="0.1087%" height="15" fill="rgb(221,193,54)"/><text x="9.1306%" y="79.50"></text></g><g><title>needs_drop_raw (254,512 samples, 0.34%)</title><rect x="8.9893%" y="85" width="0.3445%" height="15" fill="rgb(248,212,6)"/><text x="9.2393%" y="95.50"></text></g><g><title>is_copy_raw (164,361 samples, 0.22%)</title><rect x="9.1113%" y="69" width="0.2225%" height="15" fill="rgb(208,68,35)"/><text x="9.3613%" y="79.50"></text></g><g><title>evaluate_obligation (143,431 samples, 0.19%)</title><rect x="9.1396%" y="53" width="0.1941%" height="15" fill="rgb(232,128,0)"/><text x="9.3896%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (113,900 samples, 0.15%)</title><rect x="9.4866%" y="69" width="0.1542%" height="15" fill="rgb(207,160,47)"/><text x="9.7366%" y="79.50"></text></g><g><title>impl_parent (115,852 samples, 0.16%)</title><rect x="9.9880%" y="53" width="0.1568%" height="15" fill="rgb(228,23,34)"/><text x="10.2380%" y="63.50"></text></g><g><title>specialization_graph_of (448,655 samples, 0.61%)</title><rect x="9.7130%" y="69" width="0.6073%" height="15" fill="rgb(218,30,26)"/><text x="9.9630%" y="79.50"></text></g><g><title>impl_trait_ref (129,650 samples, 0.18%)</title><rect x="10.1448%" y="53" width="0.1755%" height="15" fill="rgb(220,122,19)"/><text x="10.3948%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (100,380 samples, 0.14%)</title><rect x="10.1844%" y="37" width="0.1359%" height="15" fill="rgb(250,228,42)"/><text x="10.4344%" y="47.50"></text></g><g><title>resolve_instance (763,578 samples, 1.03%)</title><rect x="9.3338%" y="85" width="1.0336%" height="15" fill="rgb(240,193,28)"/><text x="9.5838%" y="95.50"></text></g><g><title>thir_body (303,793 samples, 0.41%)</title><rect x="10.3799%" y="85" width="0.4112%" height="15" fill="rgb(216,20,37)"/><text x="10.6299%" y="95.50"></text></g><g><title>mir_const (2,786,041 samples, 3.77%)</title><rect x="7.0277%" y="133" width="3.7711%" height="15" fill="rgb(206,188,39)"/><text x="7.2777%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (2,409,106 samples, 3.26%)</title><rect x="7.5379%" y="117" width="3.2609%" height="15" fill="rgb(217,207,13)"/><text x="7.7879%" y="127.50">uns..</text></g><g><title>mir_built (2,201,642 samples, 2.98%)</title><rect x="7.8188%" y="101" width="2.9801%" height="15" fill="rgb(231,73,38)"/><text x="8.0688%" y="111.50">mir..</text></g><g><title>mir_const_qualif (672,279 samples, 0.91%)</title><rect x="10.7989%" y="133" width="0.9100%" height="15" fill="rgb(225,20,46)"/><text x="11.0489%" y="143.50"></text></g><g><title>mir_const (526,986 samples, 0.71%)</title><rect x="10.9955%" y="117" width="0.7133%" height="15" fill="rgb(210,31,41)"/><text x="11.2455%" y="127.50"></text></g><g><title>unsafety_check_result (365,834 samples, 0.50%)</title><rect x="11.2137%" y="101" width="0.4952%" height="15" fill="rgb(221,200,47)"/><text x="11.4637%" y="111.50"></text></g><g><title>mir_built (296,723 samples, 0.40%)</title><rect x="11.3072%" y="85" width="0.4016%" height="15" fill="rgb(226,26,5)"/><text x="11.5572%" y="95.50"></text></g><g><title>mir_promoted (3,865,574 samples, 5.23%)</title><rect x="6.4787%" y="149" width="5.2323%" height="15" fill="rgb(249,33,26)"/><text x="6.7287%" y="159.50">mir_pr..</text></g><g><title>type_op_normalize_fn_sig (83,950 samples, 0.11%)</title><rect x="11.8101%" y="149" width="0.1136%" height="15" fill="rgb(235,183,28)"/><text x="12.0601%" y="159.50"></text></g><g><title>type_op_prove_predicate (413,654 samples, 0.56%)</title><rect x="11.9237%" y="149" width="0.5599%" height="15" fill="rgb(221,5,38)"/><text x="12.1737%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,660,427 samples, 11.72%)</title><rect x="0.7641%" y="181" width="11.7225%" height="15" fill="rgb(247,18,42)"/><text x="1.0141%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (8,573,936 samples, 11.61%)</title><rect x="0.8811%" y="165" width="11.6055%" height="15" fill="rgb(241,131,45)"/><text x="1.1311%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (339,414 samples, 0.46%)</title><rect x="12.4866%" y="181" width="0.4594%" height="15" fill="rgb(249,31,29)"/><text x="12.7366%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (287,404 samples, 0.39%)</title><rect x="12.5570%" y="165" width="0.3890%" height="15" fill="rgb(225,111,53)"/><text x="12.8070%" y="175.50"></text></g><g><title>hir_module_items (119,522 samples, 0.16%)</title><rect x="12.9460%" y="181" width="0.1618%" height="15" fill="rgb(238,160,17)"/><text x="13.1960%" y="191.50"></text></g><g><title>codegen_fn_attrs (76,262 samples, 0.10%)</title><rect x="13.5204%" y="117" width="0.1032%" height="15" fill="rgb(214,148,48)"/><text x="13.7704%" y="127.50"></text></g><g><title>should_inherit_track_caller (145,252 samples, 0.20%)</title><rect x="13.4316%" y="133" width="0.1966%" height="15" fill="rgb(232,36,49)"/><text x="13.6816%" y="143.50"></text></g><g><title>codegen_fn_attrs (272,353 samples, 0.37%)</title><rect x="13.2882%" y="149" width="0.3687%" height="15" fill="rgb(209,103,24)"/><text x="13.5382%" y="159.50"></text></g><g><title>check_mod_attrs (386,724 samples, 0.52%)</title><rect x="13.1335%" y="165" width="0.5235%" height="15" fill="rgb(229,88,8)"/><text x="13.3835%" y="175.50"></text></g><g><title>lookup_deprecation_entry (80,163 samples, 0.11%)</title><rect x="13.8976%" y="149" width="0.1085%" height="15" fill="rgb(213,181,19)"/><text x="14.1476%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (197,453 samples, 0.27%)</title><rect x="13.7816%" y="165" width="0.2673%" height="15" fill="rgb(254,191,54)"/><text x="14.0316%" y="175.50"></text></g><g><title>misc_checking_1 (735,128 samples, 1.00%)</title><rect x="13.1084%" y="181" width="0.9951%" height="15" fill="rgb(241,83,37)"/><text x="13.3584%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (136,322 samples, 0.18%)</title><rect x="14.1052%" y="165" width="0.1845%" height="15" fill="rgb(233,36,39)"/><text x="14.3552%" y="175.50"></text></g><g><title>check_mod_liveness (101,821 samples, 0.14%)</title><rect x="14.1519%" y="149" width="0.1378%" height="15" fill="rgb(226,3,54)"/><text x="14.4019%" y="159.50"></text></g><g><title>misc_checking_2 (324,104 samples, 0.44%)</title><rect x="14.1034%" y="181" width="0.4387%" height="15" fill="rgb(245,192,40)"/><text x="14.3534%" y="191.50"></text></g><g><title>match_checking (186,472 samples, 0.25%)</title><rect x="14.2897%" y="165" width="0.2524%" height="15" fill="rgb(238,167,29)"/><text x="14.5397%" y="175.50"></text></g><g><title>check_match (164,602 samples, 0.22%)</title><rect x="14.3193%" y="149" width="0.2228%" height="15" fill="rgb(232,182,51)"/><text x="14.5693%" y="159.50"></text></g><g><title>check_private_in_public (101,391 samples, 0.14%)</title><rect x="14.5535%" y="165" width="0.1372%" height="15" fill="rgb(231,60,39)"/><text x="14.8035%" y="175.50"></text></g><g><title>death_checking (303,054 samples, 0.41%)</title><rect x="14.6907%" y="165" width="0.4102%" height="15" fill="rgb(208,69,12)"/><text x="14.9407%" y="175.50"></text></g><g><title>item_attrs (134,082 samples, 0.18%)</title><rect x="14.9194%" y="149" width="0.1815%" height="15" fill="rgb(235,93,37)"/><text x="15.1694%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (132,541 samples, 0.18%)</title><rect x="14.9215%" y="133" width="0.1794%" height="15" fill="rgb(213,116,39)"/><text x="15.1715%" y="143.50"></text></g><g><title>eval_to_const_value_raw (284,863 samples, 0.39%)</title><rect x="16.0847%" y="133" width="0.3856%" height="15" fill="rgb(222,207,29)"/><text x="16.3347%" y="143.50"></text></g><g><title>eval_to_const_value_raw (270,243 samples, 0.37%)</title><rect x="16.1045%" y="117" width="0.3658%" height="15" fill="rgb(206,96,30)"/><text x="16.3545%" y="127.50"></text></g><g><title>eval_to_allocation_raw (255,302 samples, 0.35%)</title><rect x="16.1247%" y="101" width="0.3456%" height="15" fill="rgb(218,138,4)"/><text x="16.3747%" y="111.50"></text></g><g><title>mir_for_ctfe (99,981 samples, 0.14%)</title><rect x="16.3349%" y="85" width="0.1353%" height="15" fill="rgb(250,191,14)"/><text x="16.5849%" y="95.50"></text></g><g><title>param_env (131,621 samples, 0.18%)</title><rect x="16.4703%" y="133" width="0.1782%" height="15" fill="rgb(239,60,40)"/><text x="16.7203%" y="143.50"></text></g><g><title>crate_lints (2,251,615 samples, 3.05%)</title><rect x="15.1032%" y="149" width="3.0477%" height="15" fill="rgb(206,27,48)"/><text x="15.3532%" y="159.50">cra..</text></g><g><title>type_of (1,110,044 samples, 1.50%)</title><rect x="16.6484%" y="133" width="1.5025%" height="15" fill="rgb(225,35,8)"/><text x="16.8984%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (866,331 samples, 1.17%)</title><rect x="16.9783%" y="117" width="1.1726%" height="15" fill="rgb(250,213,24)"/><text x="17.2283%" y="127.50"></text></g><g><title>lint_checking (2,383,396 samples, 3.23%)</title><rect x="15.1009%" y="165" width="3.2261%" height="15" fill="rgb(247,123,22)"/><text x="15.3509%" y="175.50">lin..</text></g><g><title>module_lints (130,081 samples, 0.18%)</title><rect x="18.1510%" y="149" width="0.1761%" height="15" fill="rgb(231,138,38)"/><text x="18.4010%" y="159.50"></text></g><g><title>lint_mod (127,381 samples, 0.17%)</title><rect x="18.1546%" y="133" width="0.1724%" height="15" fill="rgb(231,145,46)"/><text x="18.4046%" y="143.50"></text></g><g><title>privacy_access_levels (118,281 samples, 0.16%)</title><rect x="18.3270%" y="165" width="0.1601%" height="15" fill="rgb(251,118,11)"/><text x="18.5770%" y="175.50"></text></g><g><title>privacy_checking_modules (239,913 samples, 0.32%)</title><rect x="18.4871%" y="165" width="0.3247%" height="15" fill="rgb(217,147,25)"/><text x="18.7371%" y="175.50"></text></g><g><title>check_mod_privacy (238,023 samples, 0.32%)</title><rect x="18.4897%" y="149" width="0.3222%" height="15" fill="rgb(247,81,37)"/><text x="18.7397%" y="159.50"></text></g><g><title>misc_checking_3 (3,167,975 samples, 4.29%)</title><rect x="14.5421%" y="181" width="4.2881%" height="15" fill="rgb(209,12,38)"/><text x="14.7921%" y="191.50">misc_..</text></g><g><title>impl_trait_ref (153,233 samples, 0.21%)</title><rect x="19.4171%" y="85" width="0.2074%" height="15" fill="rgb(227,1,9)"/><text x="19.6671%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (133,003 samples, 0.18%)</title><rect x="19.4445%" y="69" width="0.1800%" height="15" fill="rgb(248,47,43)"/><text x="19.6945%" y="79.50"></text></g><g><title>adt_destructor (499,685 samples, 0.68%)</title><rect x="18.9894%" y="133" width="0.6764%" height="15" fill="rgb(221,10,30)"/><text x="19.2394%" y="143.50"></text></g><g><title>coherent_trait (492,155 samples, 0.67%)</title><rect x="18.9996%" y="117" width="0.6662%" height="15" fill="rgb(210,229,1)"/><text x="19.2496%" y="127.50"></text></g><g><title>specialization_graph_of (490,205 samples, 0.66%)</title><rect x="19.0023%" y="101" width="0.6635%" height="15" fill="rgb(222,148,37)"/><text x="19.2523%" y="111.50"></text></g><g><title>impl_parent (2,896,602 samples, 3.92%)</title><rect x="26.8738%" y="117" width="3.9208%" height="15" fill="rgb(234,67,33)"/><text x="27.1238%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (1,682,226 samples, 2.28%)</title><rect x="28.5175%" y="101" width="2.2770%" height="15" fill="rgb(247,98,35)"/><text x="28.7675%" y="111.50">m..</text></g><g><title>impl_trait_ref (6,170,909 samples, 8.35%)</title><rect x="30.7946%" y="117" width="8.3528%" height="15" fill="rgb(247,138,52)"/><text x="31.0446%" y="127.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,939,154 samples, 6.69%)</title><rect x="32.4618%" y="101" width="6.6855%" height="15" fill="rgb(213,79,30)"/><text x="32.7118%" y="111.50">metadata_..</text></g><g><title>trait_impls_of (1,092,153 samples, 1.48%)</title><rect x="39.2182%" y="117" width="1.4783%" height="15" fill="rgb(246,177,23)"/><text x="39.4682%" y="127.50"></text></g><g><title>implementations_of_trait (307,276 samples, 0.42%)</title><rect x="40.2806%" y="101" width="0.4159%" height="15" fill="rgb(230,62,27)"/><text x="40.5306%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (237,154 samples, 0.32%)</title><rect x="40.3755%" y="85" width="0.3210%" height="15" fill="rgb(216,154,8)"/><text x="40.6255%" y="95.50"></text></g><g><title>coherent_trait (16,075,271 samples, 21.76%)</title><rect x="18.9392%" y="149" width="21.7591%" height="15" fill="rgb(244,35,45)"/><text x="19.1892%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (15,431,014 samples, 20.89%)</title><rect x="19.8113%" y="133" width="20.8871%" height="15" fill="rgb(251,115,12)"/><text x="20.0613%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (16,156,192 samples, 21.87%)</title><rect x="18.9119%" y="165" width="21.8686%" height="15" fill="rgb(240,54,50)"/><text x="19.1619%" y="175.50">coherence_checking</text></g><g><title>associated_item (85,920 samples, 0.12%)</title><rect x="48.0985%" y="101" width="0.1163%" height="15" fill="rgb(233,84,52)"/><text x="48.3485%" y="111.50"></text></g><g><title>associated_items (144,750 samples, 0.20%)</title><rect x="48.0376%" y="117" width="0.1959%" height="15" fill="rgb(207,117,47)"/><text x="48.2876%" y="127.50"></text></g><g><title>dropck_outlives (182,032 samples, 0.25%)</title><rect x="48.2611%" y="117" width="0.2464%" height="15" fill="rgb(249,43,39)"/><text x="48.5111%" y="127.50"></text></g><g><title>adt_dtorck_constraint (133,701 samples, 0.18%)</title><rect x="48.3265%" y="101" width="0.1810%" height="15" fill="rgb(209,38,44)"/><text x="48.5765%" y="111.50"></text></g><g><title>generics_of (195,065 samples, 0.26%)</title><rect x="49.8840%" y="101" width="0.2640%" height="15" fill="rgb(236,212,23)"/><text x="50.1340%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (159,633 samples, 0.22%)</title><rect x="49.9320%" y="85" width="0.2161%" height="15" fill="rgb(242,79,21)"/><text x="50.1820%" y="95.50"></text></g><g><title>impl_trait_ref (213,261 samples, 0.29%)</title><rect x="50.1820%" y="101" width="0.2887%" height="15" fill="rgb(211,96,35)"/><text x="50.4320%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (181,330 samples, 0.25%)</title><rect x="50.2253%" y="85" width="0.2454%" height="15" fill="rgb(253,215,40)"/><text x="50.4753%" y="95.50"></text></g><g><title>predicates_of (140,740 samples, 0.19%)</title><rect x="50.4861%" y="101" width="0.1905%" height="15" fill="rgb(211,81,21)"/><text x="50.7361%" y="111.50"></text></g><g><title>predicates_defined_on (89,060 samples, 0.12%)</title><rect x="50.5561%" y="85" width="0.1205%" height="15" fill="rgb(208,190,38)"/><text x="50.8061%" y="95.50"></text></g><g><title>specializes (289,404 samples, 0.39%)</title><rect x="50.6766%" y="101" width="0.3917%" height="15" fill="rgb(235,213,38)"/><text x="50.9266%" y="111.50"></text></g><g><title>param_env (168,531 samples, 0.23%)</title><rect x="50.8402%" y="85" width="0.2281%" height="15" fill="rgb(237,122,38)"/><text x="51.0902%" y="95.50"></text></g><g><title>def_span (95,530 samples, 0.13%)</title><rect x="50.9391%" y="69" width="0.1293%" height="15" fill="rgb(244,218,35)"/><text x="51.1891%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (88,900 samples, 0.12%)</title><rect x="50.9480%" y="53" width="0.1203%" height="15" fill="rgb(240,68,47)"/><text x="51.1980%" y="63.50"></text></g><g><title>trait_impls_of (261,816 samples, 0.35%)</title><rect x="51.0758%" y="101" width="0.3544%" height="15" fill="rgb(210,16,53)"/><text x="51.3258%" y="111.50"></text></g><g><title>implementations_of_trait (127,232 samples, 0.17%)</title><rect x="51.2580%" y="85" width="0.1722%" height="15" fill="rgb(235,124,12)"/><text x="51.5080%" y="95.50"></text></g><g><title>evaluate_obligation (2,166,024 samples, 2.93%)</title><rect x="48.5075%" y="117" width="2.9319%" height="15" fill="rgb(224,169,11)"/><text x="48.7575%" y="127.50">ev..</text></g><g><title>impl_item_implementor_ids (103,021 samples, 0.14%)</title><rect x="51.5917%" y="117" width="0.1394%" height="15" fill="rgb(250,166,2)"/><text x="51.8417%" y="127.50"></text></g><g><title>associated_items (95,801 samples, 0.13%)</title><rect x="51.6014%" y="101" width="0.1297%" height="15" fill="rgb(242,216,29)"/><text x="51.8514%" y="111.50"></text></g><g><title>method_autoderef_steps (110,191 samples, 0.15%)</title><rect x="51.8658%" y="117" width="0.1492%" height="15" fill="rgb(230,116,27)"/><text x="52.1158%" y="127.50"></text></g><g><title>evaluate_obligation (98,071 samples, 0.13%)</title><rect x="52.0612%" y="101" width="0.1327%" height="15" fill="rgb(228,99,48)"/><text x="52.3112%" y="111.50"></text></g><g><title>object_safety_violations (178,442 samples, 0.24%)</title><rect x="52.0149%" y="117" width="0.2415%" height="15" fill="rgb(253,11,6)"/><text x="52.2649%" y="127.50"></text></g><g><title>param_env (166,701 samples, 0.23%)</title><rect x="52.2739%" y="117" width="0.2256%" height="15" fill="rgb(247,143,39)"/><text x="52.5239%" y="127.50"></text></g><g><title>predicates_of (75,640 samples, 0.10%)</title><rect x="52.3972%" y="101" width="0.1024%" height="15" fill="rgb(236,97,10)"/><text x="52.6472%" y="111.50"></text></g><g><title>predicates_of (158,752 samples, 0.21%)</title><rect x="52.5130%" y="117" width="0.2149%" height="15" fill="rgb(233,208,19)"/><text x="52.7630%" y="127.50"></text></g><g><title>predicates_defined_on (99,532 samples, 0.13%)</title><rect x="52.5932%" y="101" width="0.1347%" height="15" fill="rgb(216,164,2)"/><text x="52.8432%" y="111.50"></text></g><g><title>item_bodies_checking (8,929,221 samples, 12.09%)</title><rect x="40.8193%" y="165" width="12.0864%" height="15" fill="rgb(220,129,5)"/><text x="41.0693%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (8,926,981 samples, 12.08%)</title><rect x="40.8224%" y="149" width="12.0833%" height="15" fill="rgb(242,17,10)"/><text x="41.0724%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (8,872,340 samples, 12.01%)</title><rect x="40.8963%" y="133" width="12.0094%" height="15" fill="rgb(242,107,0)"/><text x="41.1463%" y="143.50">typeck</text></g><g><title>item_types_checking (850,739 samples, 1.15%)</title><rect x="52.9057%" y="165" width="1.1515%" height="15" fill="rgb(251,28,31)"/><text x="53.1557%" y="175.50"></text></g><g><title>check_mod_item_types (848,559 samples, 1.15%)</title><rect x="52.9087%" y="149" width="1.1486%" height="15" fill="rgb(233,223,10)"/><text x="53.1587%" y="159.50"></text></g><g><title>typeck (273,243 samples, 0.37%)</title><rect x="53.6874%" y="133" width="0.3699%" height="15" fill="rgb(215,21,27)"/><text x="53.9374%" y="143.50"></text></g><g><title>fn_sig (135,071 samples, 0.18%)</title><rect x="54.2773%" y="133" width="0.1828%" height="15" fill="rgb(232,23,21)"/><text x="54.5273%" y="143.50"></text></g><g><title>named_region_map (187,962 samples, 0.25%)</title><rect x="54.6380%" y="117" width="0.2544%" height="15" fill="rgb(244,5,23)"/><text x="54.8880%" y="127.50"></text></g><g><title>resolve_lifetimes (176,582 samples, 0.24%)</title><rect x="54.6534%" y="101" width="0.2390%" height="15" fill="rgb(226,81,46)"/><text x="54.9034%" y="111.50"></text></g><g><title>generics_of (331,093 samples, 0.45%)</title><rect x="54.4601%" y="133" width="0.4482%" height="15" fill="rgb(247,70,30)"/><text x="54.7101%" y="143.50"></text></g><g><title>explicit_predicates_of (92,010 samples, 0.12%)</title><rect x="55.1120%" y="101" width="0.1245%" height="15" fill="rgb(212,68,19)"/><text x="55.3620%" y="111.50"></text></g><g><title>predicates_of (316,232 samples, 0.43%)</title><rect x="55.0056%" y="133" width="0.4280%" height="15" fill="rgb(240,187,13)"/><text x="55.2556%" y="143.50"></text></g><g><title>predicates_defined_on (288,492 samples, 0.39%)</title><rect x="55.0431%" y="117" width="0.3905%" height="15" fill="rgb(223,113,26)"/><text x="55.2931%" y="127.50"></text></g><g><title>inferred_outlives_of (145,572 samples, 0.20%)</title><rect x="55.2366%" y="101" width="0.1970%" height="15" fill="rgb(206,192,2)"/><text x="55.4866%" y="111.50"></text></g><g><title>inferred_outlives_crate (130,642 samples, 0.18%)</title><rect x="55.2568%" y="85" width="0.1768%" height="15" fill="rgb(241,108,4)"/><text x="55.5068%" y="95.50"></text></g><g><title>type_of (77,481 samples, 0.10%)</title><rect x="55.3287%" y="69" width="0.1049%" height="15" fill="rgb(247,173,49)"/><text x="55.5787%" y="79.50"></text></g><g><title>type_collecting (1,086,982 samples, 1.47%)</title><rect x="54.0592%" y="165" width="1.4713%" height="15" fill="rgb(224,114,35)"/><text x="54.3092%" y="175.50"></text></g><g><title>collect_mod_item_types (1,076,111 samples, 1.46%)</title><rect x="54.0740%" y="149" width="1.4566%" height="15" fill="rgb(245,159,27)"/><text x="54.3240%" y="159.50"></text></g><g><title>evaluate_obligation (225,502 samples, 0.31%)</title><rect x="56.7000%" y="133" width="0.3052%" height="15" fill="rgb(245,172,44)"/><text x="56.9500%" y="143.50"></text></g><g><title>implied_outlives_bounds (85,180 samples, 0.12%)</title><rect x="57.0053%" y="133" width="0.1153%" height="15" fill="rgb(236,23,11)"/><text x="57.2553%" y="143.50"></text></g><g><title>param_env (124,101 samples, 0.17%)</title><rect x="57.1206%" y="133" width="0.1680%" height="15" fill="rgb(205,117,38)"/><text x="57.3706%" y="143.50"></text></g><g><title>region_scope_tree (124,103 samples, 0.17%)</title><rect x="57.3377%" y="133" width="0.1680%" height="15" fill="rgb(237,72,25)"/><text x="57.5877%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,423,615 samples, 1.93%)</title><rect x="55.6716%" y="149" width="1.9270%" height="15" fill="rgb(244,70,9)"/><text x="55.9216%" y="159.50">c..</text></g><g><title>evaluate_obligation (232,922 samples, 0.32%)</title><rect x="58.4990%" y="133" width="0.3153%" height="15" fill="rgb(217,125,39)"/><text x="58.7490%" y="143.50"></text></g><g><title>param_env (129,292 samples, 0.18%)</title><rect x="58.9062%" y="133" width="0.1750%" height="15" fill="rgb(235,36,10)"/><text x="59.1562%" y="143.50"></text></g><g><title>analysis (43,374,158 samples, 58.71%)</title><rect x="0.5702%" y="197" width="58.7102%" height="15" fill="rgb(251,123,47)"/><text x="0.8202%" y="207.50">analysis</text></g><g><title>type_check_crate (29,883,967 samples, 40.45%)</title><rect x="18.8302%" y="181" width="40.4502%" height="15" fill="rgb(221,13,13)"/><text x="19.0802%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,766,151 samples, 3.74%)</title><rect x="55.5362%" y="165" width="3.7442%" height="15" fill="rgb(238,131,9)"/><text x="55.7862%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (1,242,556 samples, 1.68%)</title><rect x="57.5985%" y="149" width="1.6819%" height="15" fill="rgb(211,50,8)"/><text x="57.8485%" y="159.50"></text></g><g><title>native_libraries (107,711 samples, 0.15%)</title><rect x="59.8191%" y="181" width="0.1458%" height="15" fill="rgb(245,182,24)"/><text x="60.0691%" y="191.50"></text></g><g><title>metadata_decode_entry_native_libraries (100,291 samples, 0.14%)</title><rect x="59.8291%" y="165" width="0.1358%" height="15" fill="rgb(242,14,37)"/><text x="60.0791%" y="175.50"></text></g><g><title>codegen_crate (527,756 samples, 0.71%)</title><rect x="59.2886%" y="197" width="0.7144%" height="15" fill="rgb(246,228,12)"/><text x="59.5386%" y="207.50"></text></g><g><title>AST_validation (90,801 samples, 0.12%)</title><rect x="60.1791%" y="181" width="0.1229%" height="15" fill="rgb(213,55,15)"/><text x="60.4291%" y="191.50"></text></g><g><title>metadata_load_macro (95,410 samples, 0.13%)</title><rect x="80.2539%" y="149" width="0.1291%" height="15" fill="rgb(209,9,3)"/><text x="80.5039%" y="159.50"></text></g><g><title>metadata_register_crate (6,527,402 samples, 8.84%)</title><rect x="80.3830%" y="149" width="8.8353%" height="15" fill="rgb(230,59,30)"/><text x="80.6330%" y="159.50">metadata_reg..</text></g><g><title>metadata_register_crate (5,992,528 samples, 8.11%)</title><rect x="81.1070%" y="133" width="8.1113%" height="15" fill="rgb(209,121,21)"/><text x="81.3570%" y="143.50">metadata_re..</text></g><g><title>metadata_register_crate (5,050,617 samples, 6.84%)</title><rect x="82.3820%" y="117" width="6.8364%" height="15" fill="rgb(220,109,13)"/><text x="82.6320%" y="127.50">metadata_..</text></g><g><title>macro_expand_crate (21,311,850 samples, 28.85%)</title><rect x="60.4224%" y="181" width="28.8472%" height="15" fill="rgb(232,18,1)"/><text x="60.6724%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (21,301,240 samples, 28.83%)</title><rect x="60.4368%" y="165" width="28.8328%" height="15" fill="rgb(215,41,42)"/><text x="60.6868%" y="175.50">expand_crate</text></g><g><title>finalize_macro_resolutions (150,802 samples, 0.20%)</title><rect x="89.3583%" y="165" width="0.2041%" height="15" fill="rgb(224,123,36)"/><text x="89.6083%" y="175.50"></text></g><g><title>late_resolve_crate (604,206 samples, 0.82%)</title><rect x="89.5624%" y="165" width="0.8178%" height="15" fill="rgb(240,125,3)"/><text x="89.8124%" y="175.50"></text></g><g><title>configure_and_expand (22,497,793 samples, 30.45%)</title><rect x="60.0030%" y="197" width="30.4525%" height="15" fill="rgb(205,98,50)"/><text x="60.2530%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (840,970 samples, 1.14%)</title><rect x="89.3171%" y="181" width="1.1383%" height="15" fill="rgb(205,185,37)"/><text x="89.5671%" y="191.50"></text></g><g><title>drop_ast (75,171 samples, 0.10%)</title><rect x="90.4554%" y="197" width="0.1017%" height="15" fill="rgb(238,207,15)"/><text x="90.7054%" y="207.50"></text></g><g><title>early_lint_checks (169,822 samples, 0.23%)</title><rect x="90.5833%" y="197" width="0.2299%" height="15" fill="rgb(213,199,42)"/><text x="90.8333%" y="207.50"></text></g><g><title>free_global_ctxt (3,120,195 samples, 4.22%)</title><rect x="90.8132%" y="197" width="4.2234%" height="15" fill="rgb(235,201,11)"/><text x="91.0632%" y="207.50">free_..</text></g><g><title>mir_for_ctfe (96,211 samples, 0.13%)</title><rect x="96.2354%" y="181" width="0.1302%" height="15" fill="rgb(207,46,11)"/><text x="96.4854%" y="191.50"></text></g><g><title>generate_crate_metadata (1,013,992 samples, 1.37%)</title><rect x="95.0366%" y="197" width="1.3725%" height="15" fill="rgb(241,35,35)"/><text x="95.2866%" y="207.50"></text></g><g><title>hir_lowering (1,011,681 samples, 1.37%)</title><rect x="96.4091%" y="197" width="1.3694%" height="15" fill="rgb(243,32,47)"/><text x="96.6591%" y="207.50"></text></g><g><title>parse_crate (214,962 samples, 0.29%)</title><rect x="97.8447%" y="197" width="0.2910%" height="15" fill="rgb(247,202,23)"/><text x="98.0947%" y="207.50"></text></g><g><title>prepare_outputs (192,403 samples, 0.26%)</title><rect x="98.1431%" y="197" width="0.2604%" height="15" fill="rgb(219,102,11)"/><text x="98.3931%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (766,569 samples, 1.04%)</title><rect x="98.4036%" y="197" width="1.0376%" height="15" fill="rgb(243,110,44)"/><text x="98.6536%" y="207.50"></text></g><g><title>setup_global_ctxt (78,361 samples, 0.11%)</title><rect x="99.4560%" y="197" width="0.1061%" height="15" fill="rgb(222,74,54)"/><text x="99.7060%" y="207.50"></text></g><g><title>all (73,878,372 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (73,878,372 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (323,523 samples, 0.44%)</title><rect x="99.5621%" y="197" width="0.4379%" height="15" fill="rgb(217,163,10)"/><text x="99.8121%" y="207.50"></text></g></svg></svg>