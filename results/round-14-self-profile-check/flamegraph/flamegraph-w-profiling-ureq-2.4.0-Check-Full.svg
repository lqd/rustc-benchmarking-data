<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (652,157 samples, 0.11%)</title><rect x="16.1827%" y="165" width="0.1102%" height="15" fill="rgb(227,0,7)"/><text x="16.4327%" y="175.50"></text></g><g><title>param_env (1,553,278 samples, 0.26%)</title><rect x="18.2155%" y="133" width="0.2626%" height="15" fill="rgb(217,0,24)"/><text x="18.4655%" y="143.50"></text></g><g><title>item_attrs (2,258,055 samples, 0.38%)</title><rect x="19.1382%" y="101" width="0.3817%" height="15" fill="rgb(221,193,54)"/><text x="19.3882%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,206,974 samples, 0.37%)</title><rect x="19.1468%" y="85" width="0.3731%" height="15" fill="rgb(248,212,6)"/><text x="19.3968%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,993,143 samples, 0.51%)</title><rect x="19.0277%" y="117" width="0.5060%" height="15" fill="rgb(208,68,35)"/><text x="19.2777%" y="127.50"></text></g><g><title>adt_drop_tys (1,239,675 samples, 0.21%)</title><rect x="22.8826%" y="85" width="0.2096%" height="15" fill="rgb(232,128,0)"/><text x="23.1326%" y="95.50"></text></g><g><title>is_copy_raw (3,921,992 samples, 0.66%)</title><rect x="23.0930%" y="85" width="0.6630%" height="15" fill="rgb(207,160,47)"/><text x="23.3430%" y="95.50"></text></g><g><title>evaluate_obligation (3,139,254 samples, 0.53%)</title><rect x="23.2253%" y="69" width="0.5307%" height="15" fill="rgb(228,23,34)"/><text x="23.4753%" y="79.50"></text></g><g><title>needs_drop_raw (6,005,915 samples, 1.02%)</title><rect x="22.7603%" y="101" width="1.0152%" height="15" fill="rgb(218,30,26)"/><text x="23.0103%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,688,794 samples, 0.45%)</title><rect x="23.9938%" y="85" width="0.4545%" height="15" fill="rgb(220,122,19)"/><text x="24.2438%" y="95.50"></text></g><g><title>specialization_graph_of (2,183,625 samples, 0.37%)</title><rect x="24.5511%" y="85" width="0.3691%" height="15" fill="rgb(250,228,42)"/><text x="24.8011%" y="95.50"></text></g><g><title>impl_trait_ref (799,606 samples, 0.14%)</title><rect x="24.7851%" y="69" width="0.1352%" height="15" fill="rgb(240,193,28)"/><text x="25.0351%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (653,855 samples, 0.11%)</title><rect x="24.8097%" y="53" width="0.1105%" height="15" fill="rgb(216,20,37)"/><text x="25.0597%" y="63.50"></text></g><g><title>resolve_instance (7,179,202 samples, 1.21%)</title><rect x="23.7758%" y="101" width="1.2136%" height="15" fill="rgb(206,188,39)"/><text x="24.0258%" y="111.50"></text></g><g><title>thir_body (7,483,006 samples, 1.26%)</title><rect x="25.0189%" y="101" width="1.2649%" height="15" fill="rgb(217,207,13)"/><text x="25.2689%" y="111.50"></text></g><g><title>mir_const (53,043,783 samples, 8.97%)</title><rect x="17.3390%" y="149" width="8.9666%" height="15" fill="rgb(231,73,38)"/><text x="17.5890%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (46,305,402 samples, 7.83%)</title><rect x="18.4781%" y="133" width="7.8275%" height="15" fill="rgb(225,20,46)"/><text x="18.7281%" y="143.50">unsafety_ch..</text></g><g><title>mir_built (40,057,664 samples, 6.77%)</title><rect x="19.5342%" y="117" width="6.7714%" height="15" fill="rgb(210,31,41)"/><text x="19.7842%" y="127.50">mir_built</text></g><g><title>mir_const_qualif (1,135,540 samples, 0.19%)</title><rect x="26.3056%" y="149" width="0.1920%" height="15" fill="rgb(221,200,47)"/><text x="26.5556%" y="159.50"></text></g><g><title>mir_promoted (59,939,673 samples, 10.13%)</title><rect x="16.3657%" y="165" width="10.1322%" height="15" fill="rgb(226,26,5)"/><text x="16.6157%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,458,635 samples, 0.58%)</title><rect x="26.4989%" y="165" width="0.5847%" height="15" fill="rgb(249,33,26)"/><text x="26.7489%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (2,626,953 samples, 0.44%)</title><rect x="27.0835%" y="165" width="0.4441%" height="15" fill="rgb(235,183,28)"/><text x="27.3335%" y="175.50"></text></g><g><title>normalize_projection_ty (1,716,513 samples, 0.29%)</title><rect x="27.2374%" y="149" width="0.2902%" height="15" fill="rgb(221,5,38)"/><text x="27.4874%" y="159.50"></text></g><g><title>type_op_normalize_predicate (2,116,743 samples, 0.36%)</title><rect x="27.5276%" y="165" width="0.3578%" height="15" fill="rgb(247,18,42)"/><text x="27.7776%" y="175.50"></text></g><g><title>normalize_projection_ty (1,248,506 samples, 0.21%)</title><rect x="27.6744%" y="149" width="0.2110%" height="15" fill="rgb(241,131,45)"/><text x="27.9244%" y="159.50"></text></g><g><title>type_op_prove_predicate (14,641,216 samples, 2.47%)</title><rect x="27.8933%" y="165" width="2.4750%" height="15" fill="rgb(249,31,29)"/><text x="28.1433%" y="175.50">ty..</text></g><g><title>evaluate_obligation (797,718 samples, 0.13%)</title><rect x="30.2334%" y="149" width="0.1348%" height="15" fill="rgb(225,111,53)"/><text x="30.4834%" y="159.50"></text></g><g><title>MIR_borrow_checking (177,200,396 samples, 29.95%)</title><rect x="0.4208%" y="197" width="29.9541%" height="15" fill="rgb(238,160,17)"/><text x="0.6708%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (176,479,548 samples, 29.83%)</title><rect x="0.5427%" y="181" width="29.8322%" height="15" fill="rgb(214,148,48)"/><text x="0.7927%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (904,611 samples, 0.15%)</title><rect x="30.4671%" y="197" width="0.1529%" height="15" fill="rgb(232,36,49)"/><text x="30.7171%" y="207.50"></text></g><g><title>should_inherit_track_caller (598,809 samples, 0.10%)</title><rect x="30.9072%" y="149" width="0.1012%" height="15" fill="rgb(209,103,24)"/><text x="31.1572%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,070,102 samples, 0.18%)</title><rect x="30.8302%" y="165" width="0.1809%" height="15" fill="rgb(229,88,8)"/><text x="31.0802%" y="175.50"></text></g><g><title>check_mod_attrs (2,266,864 samples, 0.38%)</title><rect x="30.6279%" y="181" width="0.3832%" height="15" fill="rgb(213,181,19)"/><text x="30.8779%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (1,315,603 samples, 0.22%)</title><rect x="31.1786%" y="181" width="0.2224%" height="15" fill="rgb(254,191,54)"/><text x="31.4286%" y="191.50"></text></g><g><title>misc_checking_1 (4,797,963 samples, 0.81%)</title><rect x="30.6201%" y="197" width="0.8111%" height="15" fill="rgb(241,83,37)"/><text x="30.8701%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (3,233,336 samples, 0.55%)</title><rect x="31.4315%" y="181" width="0.5466%" height="15" fill="rgb(233,36,39)"/><text x="31.6815%" y="191.50"></text></g><g><title>check_mod_liveness (2,693,112 samples, 0.46%)</title><rect x="31.5228%" y="165" width="0.4552%" height="15" fill="rgb(226,3,54)"/><text x="31.7728%" y="175.50"></text></g><g><title>type_uninhabited_from (796,926 samples, 0.13%)</title><rect x="31.8433%" y="149" width="0.1347%" height="15" fill="rgb(245,192,40)"/><text x="32.0933%" y="159.50"></text></g><g><title>misc_checking_2 (7,444,593 samples, 1.26%)</title><rect x="31.4312%" y="197" width="1.2584%" height="15" fill="rgb(238,167,29)"/><text x="31.6812%" y="207.50"></text></g><g><title>match_checking (4,209,307 samples, 0.71%)</title><rect x="31.9780%" y="181" width="0.7115%" height="15" fill="rgb(232,182,51)"/><text x="32.2280%" y="191.50"></text></g><g><title>check_match (3,779,544 samples, 0.64%)</title><rect x="32.0507%" y="165" width="0.6389%" height="15" fill="rgb(231,60,39)"/><text x="32.3007%" y="175.50"></text></g><g><title>check_private_in_public (1,036,242 samples, 0.18%)</title><rect x="32.6911%" y="181" width="0.1752%" height="15" fill="rgb(208,69,12)"/><text x="32.9411%" y="191.50"></text></g><g><title>death_checking (1,930,462 samples, 0.33%)</title><rect x="32.8663%" y="181" width="0.3263%" height="15" fill="rgb(235,93,37)"/><text x="33.1163%" y="191.50"></text></g><g><title>eval_to_allocation_raw (695,948 samples, 0.12%)</title><rect x="33.6901%" y="149" width="0.1176%" height="15" fill="rgb(213,116,39)"/><text x="33.9401%" y="159.50"></text></g><g><title>eval_to_allocation_raw (694,188 samples, 0.12%)</title><rect x="33.6904%" y="133" width="0.1173%" height="15" fill="rgb(222,207,29)"/><text x="33.9404%" y="143.50"></text></g><g><title>param_env (1,394,055 samples, 0.24%)</title><rect x="33.8960%" y="149" width="0.2357%" height="15" fill="rgb(206,96,30)"/><text x="34.1460%" y="159.50"></text></g><g><title>predicates_of (668,268 samples, 0.11%)</title><rect x="34.0187%" y="133" width="0.1130%" height="15" fill="rgb(218,138,4)"/><text x="34.2687%" y="143.50"></text></g><g><title>crate_lints (7,257,781 samples, 1.23%)</title><rect x="33.1930%" y="165" width="1.2269%" height="15" fill="rgb(250,191,14)"/><text x="33.4430%" y="175.50"></text></g><g><title>type_of (1,413,728 samples, 0.24%)</title><rect x="34.1809%" y="149" width="0.2390%" height="15" fill="rgb(239,60,40)"/><text x="34.4309%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,131,512 samples, 0.19%)</title><rect x="34.2286%" y="133" width="0.1913%" height="15" fill="rgb(206,27,48)"/><text x="34.4786%" y="143.50"></text></g><g><title>lint_checking (10,626,558 samples, 1.80%)</title><rect x="33.1926%" y="181" width="1.7963%" height="15" fill="rgb(225,35,8)"/><text x="33.4426%" y="191.50">l..</text></g><g><title>module_lints (3,366,607 samples, 0.57%)</title><rect x="34.4198%" y="165" width="0.5691%" height="15" fill="rgb(250,213,24)"/><text x="34.6698%" y="175.50"></text></g><g><title>lint_mod (3,350,457 samples, 0.57%)</title><rect x="34.4226%" y="149" width="0.5664%" height="15" fill="rgb(247,123,22)"/><text x="34.6726%" y="159.50"></text></g><g><title>privacy_access_levels (1,482,906 samples, 0.25%)</title><rect x="34.9889%" y="181" width="0.2507%" height="15" fill="rgb(231,138,38)"/><text x="35.2389%" y="191.50"></text></g><g><title>privacy_checking_modules (5,889,795 samples, 1.00%)</title><rect x="35.2396%" y="181" width="0.9956%" height="15" fill="rgb(231,145,46)"/><text x="35.4896%" y="191.50"></text></g><g><title>check_mod_privacy (5,875,055 samples, 0.99%)</title><rect x="35.2421%" y="165" width="0.9931%" height="15" fill="rgb(251,118,11)"/><text x="35.4921%" y="175.50"></text></g><g><title>misc_checking_3 (21,013,953 samples, 3.55%)</title><rect x="32.6896%" y="197" width="3.5522%" height="15" fill="rgb(217,147,25)"/><text x="32.9396%" y="207.50">misc..</text></g><g><title>impl_parent (3,586,139 samples, 0.61%)</title><rect x="37.5227%" y="133" width="0.6062%" height="15" fill="rgb(247,81,37)"/><text x="37.7727%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,113,642 samples, 0.36%)</title><rect x="37.7716%" y="117" width="0.3573%" height="15" fill="rgb(209,12,38)"/><text x="38.0216%" y="127.50"></text></g><g><title>impl_trait_ref (7,516,955 samples, 1.27%)</title><rect x="38.1291%" y="133" width="1.2707%" height="15" fill="rgb(227,1,9)"/><text x="38.3791%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,054,835 samples, 1.02%)</title><rect x="38.3762%" y="117" width="1.0235%" height="15" fill="rgb(248,47,43)"/><text x="38.6262%" y="127.50"></text></g><g><title>trait_impls_of (1,673,788 samples, 0.28%)</title><rect x="39.4107%" y="133" width="0.2829%" height="15" fill="rgb(221,10,30)"/><text x="39.6607%" y="143.50"></text></g><g><title>coherent_trait (20,066,443 samples, 3.39%)</title><rect x="36.3018%" y="165" width="3.3920%" height="15" fill="rgb(210,229,1)"/><text x="36.5518%" y="175.50">coh..</text></g><g><title>specialization_graph_of (19,553,337 samples, 3.31%)</title><rect x="36.3886%" y="149" width="3.3053%" height="15" fill="rgb(222,148,37)"/><text x="36.6386%" y="159.50">spe..</text></g><g><title>coherence_checking (20,261,285 samples, 3.42%)</title><rect x="36.2976%" y="181" width="3.4250%" height="15" fill="rgb(234,67,33)"/><text x="36.5476%" y="191.50">coh..</text></g><g><title>associated_item (702,979 samples, 0.12%)</title><rect x="58.7518%" y="117" width="0.1188%" height="15" fill="rgb(247,98,35)"/><text x="59.0018%" y="127.50"></text></g><g><title>associated_items (1,028,194 samples, 0.17%)</title><rect x="58.7062%" y="133" width="0.1738%" height="15" fill="rgb(247,138,52)"/><text x="58.9562%" y="143.50"></text></g><g><title>adt_dtorck_constraint (915,759 samples, 0.15%)</title><rect x="59.1570%" y="117" width="0.1548%" height="15" fill="rgb(213,79,30)"/><text x="59.4070%" y="127.50"></text></g><g><title>dropck_outlives (2,397,752 samples, 0.41%)</title><rect x="58.9213%" y="133" width="0.4053%" height="15" fill="rgb(246,177,23)"/><text x="59.1713%" y="143.50"></text></g><g><title>predicates_of (696,817 samples, 0.12%)</title><rect x="60.7055%" y="117" width="0.1178%" height="15" fill="rgb(230,62,27)"/><text x="60.9555%" y="127.50"></text></g><g><title>trait_impls_of (855,592 samples, 0.14%)</title><rect x="60.8829%" y="117" width="0.1446%" height="15" fill="rgb(216,154,8)"/><text x="61.1329%" y="127.50"></text></g><g><title>evaluate_obligation (10,102,268 samples, 1.71%)</title><rect x="59.3275%" y="133" width="1.7077%" height="15" fill="rgb(244,35,45)"/><text x="59.5775%" y="143.50"></text></g><g><title>generics_of (1,590,136 samples, 0.27%)</title><rect x="61.1225%" y="133" width="0.2688%" height="15" fill="rgb(251,115,12)"/><text x="61.3725%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (1,201,200 samples, 0.20%)</title><rect x="61.1883%" y="117" width="0.2031%" height="15" fill="rgb(240,54,50)"/><text x="61.4383%" y="127.50"></text></g><g><title>evaluate_obligation (852,589 samples, 0.14%)</title><rect x="61.7267%" y="117" width="0.1441%" height="15" fill="rgb(233,84,52)"/><text x="61.9767%" y="127.50"></text></g><g><title>method_autoderef_steps (1,814,277 samples, 0.31%)</title><rect x="61.5699%" y="133" width="0.3067%" height="15" fill="rgb(207,117,47)"/><text x="61.8199%" y="143.50"></text></g><g><title>predicates_of (978,062 samples, 0.17%)</title><rect x="61.9419%" y="133" width="0.1653%" height="15" fill="rgb(249,43,39)"/><text x="62.1919%" y="143.50"></text></g><g><title>predicates_defined_on (688,067 samples, 0.12%)</title><rect x="61.9909%" y="117" width="0.1163%" height="15" fill="rgb(209,38,44)"/><text x="62.2409%" y="127.50"></text></g><g><title>adt_dtorck_constraint (665,309 samples, 0.11%)</title><rect x="71.5620%" y="69" width="0.1125%" height="15" fill="rgb(236,212,23)"/><text x="71.8120%" y="79.50"></text></g><g><title>adt_dtorck_constraint (849,313 samples, 0.14%)</title><rect x="71.5344%" y="85" width="0.1436%" height="15" fill="rgb(242,79,21)"/><text x="71.7844%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,288,135 samples, 0.22%)</title><rect x="71.4729%" y="101" width="0.2177%" height="15" fill="rgb(211,96,35)"/><text x="71.7229%" y="111.50"></text></g><g><title>dropck_outlives (2,374,060 samples, 0.40%)</title><rect x="71.3361%" y="117" width="0.4013%" height="15" fill="rgb(253,215,40)"/><text x="71.5861%" y="127.50"></text></g><g><title>evaluate_obligation (6,042,828 samples, 1.02%)</title><rect x="71.7374%" y="117" width="1.0215%" height="15" fill="rgb(211,81,21)"/><text x="71.9874%" y="127.50"></text></g><g><title>evaluate_obligation (787,752 samples, 0.13%)</title><rect x="73.1676%" y="101" width="0.1332%" height="15" fill="rgb(208,190,38)"/><text x="73.4176%" y="111.50"></text></g><g><title>method_autoderef_steps (1,518,211 samples, 0.26%)</title><rect x="73.0466%" y="117" width="0.2566%" height="15" fill="rgb(235,213,38)"/><text x="73.2966%" y="127.50"></text></g><g><title>typeck (66,868,121 samples, 11.30%)</title><rect x="62.1590%" y="133" width="11.3034%" height="15" fill="rgb(237,122,38)"/><text x="62.4090%" y="143.50">typeck</text></g><g><title>item_bodies_checking (199,675,675 samples, 33.75%)</title><rect x="39.7426%" y="181" width="33.7533%" height="15" fill="rgb(244,218,35)"/><text x="39.9926%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (199,673,075 samples, 33.75%)</title><rect x="39.7430%" y="165" width="33.7529%" height="15" fill="rgb(240,68,47)"/><text x="39.9930%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (199,221,269 samples, 33.68%)</title><rect x="39.8194%" y="149" width="33.6765%" height="15" fill="rgb(210,16,53)"/><text x="40.0694%" y="159.50">typeck</text></g><g><title>evaluate_obligation (1,035,062 samples, 0.17%)</title><rect x="75.3426%" y="37" width="0.1750%" height="15" fill="rgb(235,124,12)"/><text x="75.5926%" y="47.50"></text></g><g><title>mir_built (6,152,568 samples, 1.04%)</title><rect x="74.5469%" y="69" width="1.0400%" height="15" fill="rgb(224,169,11)"/><text x="74.7969%" y="79.50"></text></g><g><title>typeck (5,379,520 samples, 0.91%)</title><rect x="74.6776%" y="53" width="0.9094%" height="15" fill="rgb(250,166,2)"/><text x="74.9276%" y="63.50"></text></g><g><title>mir_const (6,716,434 samples, 1.14%)</title><rect x="74.4760%" y="101" width="1.1354%" height="15" fill="rgb(242,216,29)"/><text x="74.7260%" y="111.50"></text></g><g><title>unsafety_check_result (6,401,041 samples, 1.08%)</title><rect x="74.5293%" y="85" width="1.0820%" height="15" fill="rgb(230,116,27)"/><text x="74.7793%" y="95.50"></text></g><g><title>mir_promoted (6,805,695 samples, 1.15%)</title><rect x="74.4617%" y="117" width="1.1504%" height="15" fill="rgb(228,99,48)"/><text x="74.7117%" y="127.50"></text></g><g><title>type_of (9,538,056 samples, 1.61%)</title><rect x="74.1094%" y="149" width="1.6123%" height="15" fill="rgb(253,11,6)"/><text x="74.3594%" y="159.50"></text></g><g><title>mir_borrowck (9,462,515 samples, 1.60%)</title><rect x="74.1222%" y="133" width="1.5996%" height="15" fill="rgb(247,143,39)"/><text x="74.3722%" y="143.50"></text></g><g><title>evaluate_obligation (1,938,974 samples, 0.33%)</title><rect x="76.0639%" y="133" width="0.3278%" height="15" fill="rgb(236,97,10)"/><text x="76.3139%" y="143.50"></text></g><g><title>item_types_checking (17,543,765 samples, 2.97%)</title><rect x="73.4959%" y="181" width="2.9656%" height="15" fill="rgb(233,208,19)"/><text x="73.7459%" y="191.50">ite..</text></g><g><title>check_mod_item_types (17,526,055 samples, 2.96%)</title><rect x="73.4989%" y="165" width="2.9626%" height="15" fill="rgb(216,164,2)"/><text x="73.7489%" y="175.50">che..</text></g><g><title>typeck (4,376,387 samples, 0.74%)</title><rect x="75.7217%" y="149" width="0.7398%" height="15" fill="rgb(220,129,5)"/><text x="75.9717%" y="159.50"></text></g><g><title>fn_sig (1,584,610 samples, 0.27%)</title><rect x="76.6596%" y="149" width="0.2679%" height="15" fill="rgb(242,17,10)"/><text x="76.9096%" y="159.50"></text></g><g><title>named_region_map (2,350,173 samples, 0.40%)</title><rect x="77.0665%" y="133" width="0.3973%" height="15" fill="rgb(242,107,0)"/><text x="77.3165%" y="143.50"></text></g><g><title>resolve_lifetimes (2,243,532 samples, 0.38%)</title><rect x="77.0845%" y="117" width="0.3792%" height="15" fill="rgb(251,28,31)"/><text x="77.3345%" y="127.50"></text></g><g><title>lint_levels (1,048,752 samples, 0.18%)</title><rect x="77.2865%" y="101" width="0.1773%" height="15" fill="rgb(233,223,10)"/><text x="77.5365%" y="111.50"></text></g><g><title>generics_of (3,221,905 samples, 0.54%)</title><rect x="76.9275%" y="149" width="0.5446%" height="15" fill="rgb(215,21,27)"/><text x="77.1775%" y="159.50"></text></g><g><title>explicit_predicates_of (648,385 samples, 0.11%)</title><rect x="77.5945%" y="117" width="0.1096%" height="15" fill="rgb(232,23,21)"/><text x="77.8445%" y="127.50"></text></g><g><title>predicates_of (2,461,174 samples, 0.42%)</title><rect x="77.4943%" y="149" width="0.4160%" height="15" fill="rgb(244,5,23)"/><text x="77.7443%" y="159.50"></text></g><g><title>predicates_defined_on (2,232,972 samples, 0.38%)</title><rect x="77.5329%" y="133" width="0.3775%" height="15" fill="rgb(226,81,46)"/><text x="77.7829%" y="143.50"></text></g><g><title>inferred_outlives_of (1,219,874 samples, 0.21%)</title><rect x="77.7041%" y="117" width="0.2062%" height="15" fill="rgb(247,70,30)"/><text x="77.9541%" y="127.50"></text></g><g><title>inferred_outlives_crate (1,148,293 samples, 0.19%)</title><rect x="77.7162%" y="101" width="0.1941%" height="15" fill="rgb(212,68,19)"/><text x="77.9662%" y="111.50"></text></g><g><title>type_of (751,899 samples, 0.13%)</title><rect x="77.7832%" y="85" width="0.1271%" height="15" fill="rgb(240,187,13)"/><text x="78.0332%" y="95.50"></text></g><g><title>type_collecting (8,853,628 samples, 1.50%)</title><rect x="76.4637%" y="181" width="1.4966%" height="15" fill="rgb(223,113,26)"/><text x="76.7137%" y="191.50"></text></g><g><title>collect_mod_item_types (8,834,467 samples, 1.49%)</title><rect x="76.4669%" y="165" width="1.4934%" height="15" fill="rgb(206,192,2)"/><text x="76.7169%" y="175.50"></text></g><g><title>evaluate_obligation (1,098,138 samples, 0.19%)</title><rect x="79.2457%" y="149" width="0.1856%" height="15" fill="rgb(241,108,4)"/><text x="79.4957%" y="159.50"></text></g><g><title>implied_outlives_bounds (635,748 samples, 0.11%)</title><rect x="79.4335%" y="149" width="0.1075%" height="15" fill="rgb(247,173,49)"/><text x="79.6835%" y="159.50"></text></g><g><title>param_env (1,023,549 samples, 0.17%)</title><rect x="79.6065%" y="149" width="0.1730%" height="15" fill="rgb(224,114,35)"/><text x="79.8565%" y="159.50"></text></g><g><title>region_scope_tree (1,654,108 samples, 0.28%)</title><rect x="79.7850%" y="149" width="0.2796%" height="15" fill="rgb(245,159,27)"/><text x="80.0350%" y="159.50"></text></g><g><title>check_impl_item_well_formed (11,675,846 samples, 1.97%)</title><rect x="78.1205%" y="165" width="1.9737%" height="15" fill="rgb(245,172,44)"/><text x="78.3705%" y="175.50">c..</text></g><g><title>adt_sized_constraint (677,428 samples, 0.11%)</title><rect x="81.5129%" y="133" width="0.1145%" height="15" fill="rgb(236,23,11)"/><text x="81.7629%" y="143.50"></text></g><g><title>evaluate_obligation (5,101,258 samples, 0.86%)</title><rect x="80.9002%" y="149" width="0.8623%" height="15" fill="rgb(205,117,38)"/><text x="81.1502%" y="159.50"></text></g><g><title>object_safety_violations (1,371,486 samples, 0.23%)</title><rect x="81.8223%" y="149" width="0.2318%" height="15" fill="rgb(237,72,25)"/><text x="82.0723%" y="159.50"></text></g><g><title>param_env (993,634 samples, 0.17%)</title><rect x="82.0542%" y="149" width="0.1680%" height="15" fill="rgb(244,70,9)"/><text x="82.3042%" y="159.50"></text></g><g><title>region_scope_tree (671,438 samples, 0.11%)</title><rect x="82.2420%" y="149" width="0.1135%" height="15" fill="rgb(217,125,39)"/><text x="82.4920%" y="159.50"></text></g><g><title>check_item_well_formed (13,593,130 samples, 2.30%)</title><rect x="80.0942%" y="165" width="2.2978%" height="15" fill="rgb(235,36,10)"/><text x="80.3442%" y="175.50">c..</text></g><g><title>analysis (487,194,135 samples, 82.36%)</title><rect x="0.2078%" y="213" width="82.3557%" height="15" fill="rgb(251,123,47)"/><text x="0.4578%" y="223.50">analysis</text></g><g><title>type_check_crate (274,026,640 samples, 46.32%)</title><rect x="36.2418%" y="197" width="46.3217%" height="15" fill="rgb(221,13,13)"/><text x="36.4918%" y="207.50">type_check_crate</text></g><g><title>wf_checking (27,201,382 samples, 4.60%)</title><rect x="77.9653%" y="181" width="4.5981%" height="15" fill="rgb(238,131,9)"/><text x="78.2153%" y="191.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,014,261 samples, 0.17%)</title><rect x="82.3920%" y="165" width="0.1715%" height="15" fill="rgb(211,50,8)"/><text x="82.6420%" y="175.50"></text></g><g><title>metadata_register_crate (1,842,801 samples, 0.31%)</title><rect x="91.7437%" y="165" width="0.3115%" height="15" fill="rgb(245,182,24)"/><text x="91.9937%" y="175.50"></text></g><g><title>metadata_register_crate (755,518 samples, 0.13%)</title><rect x="91.9275%" y="149" width="0.1277%" height="15" fill="rgb(242,14,37)"/><text x="92.1775%" y="159.50"></text></g><g><title>macro_expand_crate (56,135,872 samples, 9.49%)</title><rect x="82.8286%" y="197" width="9.4893%" height="15" fill="rgb(246,228,12)"/><text x="83.0786%" y="207.50">macro_expand_c..</text></g><g><title>expand_crate (56,122,792 samples, 9.49%)</title><rect x="82.8309%" y="181" width="9.4870%" height="15" fill="rgb(213,55,15)"/><text x="83.0809%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,553,888 samples, 0.26%)</title><rect x="92.0552%" y="165" width="0.2627%" height="15" fill="rgb(209,9,3)"/><text x="92.3052%" y="175.50"></text></g><g><title>late_resolve_crate (8,343,653 samples, 1.41%)</title><rect x="92.4697%" y="181" width="1.4104%" height="15" fill="rgb(230,59,30)"/><text x="92.7197%" y="191.50"></text></g><g><title>configure_and_expand (67,105,694 samples, 11.34%)</title><rect x="82.6450%" y="213" width="11.3436%" height="15" fill="rgb(209,121,21)"/><text x="82.8950%" y="223.50">configure_and_exp..</text></g><g><title>resolve_crate (9,689,627 samples, 1.64%)</title><rect x="92.3506%" y="197" width="1.6379%" height="15" fill="rgb(220,109,13)"/><text x="92.6006%" y="207.50"></text></g><g><title>drop_ast (991,691 samples, 0.17%)</title><rect x="93.9886%" y="213" width="0.1676%" height="15" fill="rgb(232,18,1)"/><text x="94.2386%" y="223.50"></text></g><g><title>early_lint_checks (1,947,192 samples, 0.33%)</title><rect x="94.1604%" y="213" width="0.3292%" height="15" fill="rgb(215,41,42)"/><text x="94.4104%" y="223.50"></text></g><g><title>free_global_ctxt (7,953,268 samples, 1.34%)</title><rect x="94.4895%" y="213" width="1.3444%" height="15" fill="rgb(224,123,36)"/><text x="94.7395%" y="223.50"></text></g><g><title>generate_crate_metadata (4,186,656 samples, 0.71%)</title><rect x="95.8339%" y="213" width="0.7077%" height="15" fill="rgb(240,125,3)"/><text x="96.0839%" y="223.50"></text></g><g><title>hir_lowering (14,976,436 samples, 2.53%)</title><rect x="96.5417%" y="213" width="2.5316%" height="15" fill="rgb(205,98,50)"/><text x="96.7917%" y="223.50">hi..</text></g><g><title>parse_crate (2,525,018 samples, 0.43%)</title><rect x="99.0827%" y="213" width="0.4268%" height="15" fill="rgb(205,185,37)"/><text x="99.3327%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (2,025,203 samples, 0.34%)</title><rect x="99.5471%" y="213" width="0.3423%" height="15" fill="rgb(238,207,15)"/><text x="99.7971%" y="223.50"></text></g><g><title>all (591,573,194 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (591,573,194 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>