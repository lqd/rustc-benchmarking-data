<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (194,891 samples, 0.14%)</title><rect x="9.8918%" y="101" width="0.1428%" height="15" fill="rgb(227,0,7)"/><text x="10.1418%" y="111.50"></text></g><g><title>item_attrs (184,112 samples, 0.13%)</title><rect x="10.5452%" y="69" width="0.1349%" height="15" fill="rgb(217,0,24)"/><text x="10.7952%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (177,742 samples, 0.13%)</title><rect x="10.5499%" y="53" width="0.1303%" height="15" fill="rgb(221,193,54)"/><text x="10.7999%" y="63.50"></text></g><g><title>codegen_fn_attrs (502,905 samples, 0.37%)</title><rect x="10.3262%" y="85" width="0.3686%" height="15" fill="rgb(248,212,6)"/><text x="10.5762%" y="95.50"></text></g><g><title>adt_drop_tys (153,910 samples, 0.11%)</title><rect x="12.9721%" y="53" width="0.1128%" height="15" fill="rgb(208,68,35)"/><text x="13.2221%" y="63.50"></text></g><g><title>needs_drop_raw (905,110 samples, 0.66%)</title><rect x="12.9166%" y="69" width="0.6634%" height="15" fill="rgb(232,128,0)"/><text x="13.1666%" y="79.50"></text></g><g><title>is_copy_raw (675,360 samples, 0.50%)</title><rect x="13.0850%" y="53" width="0.4950%" height="15" fill="rgb(207,160,47)"/><text x="13.3350%" y="63.50"></text></g><g><title>evaluate_obligation (584,538 samples, 0.43%)</title><rect x="13.1515%" y="37" width="0.4284%" height="15" fill="rgb(228,23,34)"/><text x="13.4015%" y="47.50"></text></g><g><title>resolve_instance (457,094 samples, 0.34%)</title><rect x="13.5800%" y="69" width="0.3350%" height="15" fill="rgb(218,30,26)"/><text x="13.8300%" y="79.50"></text></g><g><title>thir_body (1,325,554 samples, 0.97%)</title><rect x="13.9350%" y="69" width="0.9716%" height="15" fill="rgb(220,122,19)"/><text x="14.1850%" y="79.50"></text></g><g><title>mir_const (7,664,549 samples, 5.62%)</title><rect x="9.3001%" y="117" width="5.6177%" height="15" fill="rgb(250,228,42)"/><text x="9.5501%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (6,662,290 samples, 4.88%)</title><rect x="10.0347%" y="101" width="4.8831%" height="15" fill="rgb(240,193,28)"/><text x="10.2847%" y="111.50">unsafe..</text></g><g><title>mir_built (5,761,727 samples, 4.22%)</title><rect x="10.6948%" y="85" width="4.2230%" height="15" fill="rgb(216,20,37)"/><text x="10.9448%" y="95.50">mir_b..</text></g><g><title>mir_promoted (8,627,993 samples, 6.32%)</title><rect x="8.7245%" y="133" width="6.3238%" height="15" fill="rgb(206,188,39)"/><text x="8.9745%" y="143.50">mir_prom..</text></g><g><title>mir_const_qualif (178,143 samples, 0.13%)</title><rect x="14.9178%" y="117" width="0.1306%" height="15" fill="rgb(217,207,13)"/><text x="15.1678%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (298,014 samples, 0.22%)</title><rect x="15.0486%" y="133" width="0.2184%" height="15" fill="rgb(231,73,38)"/><text x="15.2986%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (354,583 samples, 0.26%)</title><rect x="15.2670%" y="133" width="0.2599%" height="15" fill="rgb(225,20,46)"/><text x="15.5170%" y="143.50"></text></g><g><title>normalize_projection_ty (252,403 samples, 0.18%)</title><rect x="15.3419%" y="117" width="0.1850%" height="15" fill="rgb(210,31,41)"/><text x="15.5919%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,478,895 samples, 1.08%)</title><rect x="15.6002%" y="133" width="1.0839%" height="15" fill="rgb(221,200,47)"/><text x="15.8502%" y="143.50"></text></g><g><title>evaluate_obligation (155,940 samples, 0.11%)</title><rect x="16.5699%" y="117" width="0.1143%" height="15" fill="rgb(226,26,5)"/><text x="16.8199%" y="127.50"></text></g><g><title>MIR_borrow_checking (21,534,000 samples, 15.78%)</title><rect x="0.9058%" y="165" width="15.7832%" height="15" fill="rgb(249,33,26)"/><text x="1.1558%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,459,990 samples, 15.73%)</title><rect x="0.9601%" y="149" width="15.7290%" height="15" fill="rgb(235,183,28)"/><text x="1.2101%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (198,983 samples, 0.15%)</title><rect x="16.6891%" y="165" width="0.1458%" height="15" fill="rgb(221,5,38)"/><text x="16.9391%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (164,001 samples, 0.12%)</title><rect x="16.7147%" y="149" width="0.1202%" height="15" fill="rgb(247,18,42)"/><text x="16.9647%" y="159.50"></text></g><g><title>hir_module_items (232,843 samples, 0.17%)</title><rect x="16.8349%" y="165" width="0.1707%" height="15" fill="rgb(241,131,45)"/><text x="17.0849%" y="175.50"></text></g><g><title>codegen_fn_attrs (199,442 samples, 0.15%)</title><rect x="17.5863%" y="101" width="0.1462%" height="15" fill="rgb(249,31,29)"/><text x="17.8363%" y="111.50"></text></g><g><title>should_inherit_track_caller (330,112 samples, 0.24%)</title><rect x="17.4972%" y="117" width="0.2420%" height="15" fill="rgb(225,111,53)"/><text x="17.7472%" y="127.50"></text></g><g><title>codegen_fn_attrs (549,325 samples, 0.40%)</title><rect x="17.3608%" y="133" width="0.4026%" height="15" fill="rgb(238,160,17)"/><text x="17.6108%" y="143.50"></text></g><g><title>check_mod_attrs (997,531 samples, 0.73%)</title><rect x="17.0325%" y="149" width="0.7311%" height="15" fill="rgb(214,148,48)"/><text x="17.2825%" y="159.50"></text></g><g><title>check_mod_const_bodies (165,782 samples, 0.12%)</title><rect x="17.7636%" y="149" width="0.1215%" height="15" fill="rgb(232,36,49)"/><text x="18.0136%" y="159.50"></text></g><g><title>lookup_deprecation_entry (193,461 samples, 0.14%)</title><rect x="18.1615%" y="133" width="0.1418%" height="15" fill="rgb(209,103,24)"/><text x="18.4115%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (616,277 samples, 0.45%)</title><rect x="17.9705%" y="149" width="0.4517%" height="15" fill="rgb(229,88,8)"/><text x="18.2205%" y="159.50"></text></g><g><title>misc_checking_1 (1,996,732 samples, 1.46%)</title><rect x="17.0059%" y="165" width="1.4635%" height="15" fill="rgb(213,181,19)"/><text x="17.2559%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (368,604 samples, 0.27%)</title><rect x="18.4707%" y="149" width="0.2702%" height="15" fill="rgb(254,191,54)"/><text x="18.7207%" y="159.50"></text></g><g><title>check_mod_liveness (286,223 samples, 0.21%)</title><rect x="18.5311%" y="133" width="0.2098%" height="15" fill="rgb(241,83,37)"/><text x="18.7811%" y="143.50"></text></g><g><title>misc_checking_2 (1,529,837 samples, 1.12%)</title><rect x="18.4694%" y="165" width="1.1213%" height="15" fill="rgb(233,36,39)"/><text x="18.7194%" y="175.50"></text></g><g><title>match_checking (1,159,483 samples, 0.85%)</title><rect x="18.7409%" y="149" width="0.8498%" height="15" fill="rgb(226,3,54)"/><text x="18.9909%" y="159.50"></text></g><g><title>check_match (1,136,843 samples, 0.83%)</title><rect x="18.7575%" y="133" width="0.8332%" height="15" fill="rgb(245,192,40)"/><text x="19.0075%" y="143.50"></text></g><g><title>death_checking (357,384 samples, 0.26%)</title><rect x="19.6860%" y="149" width="0.2619%" height="15" fill="rgb(238,167,29)"/><text x="19.9360%" y="159.50"></text></g><g><title>eval_to_const_value_raw (176,042 samples, 0.13%)</title><rect x="20.4561%" y="117" width="0.1290%" height="15" fill="rgb(232,182,51)"/><text x="20.7061%" y="127.50"></text></g><g><title>eval_to_const_value_raw (165,992 samples, 0.12%)</title><rect x="20.4635%" y="101" width="0.1217%" height="15" fill="rgb(231,60,39)"/><text x="20.7135%" y="111.50"></text></g><g><title>eval_to_allocation_raw (157,152 samples, 0.12%)</title><rect x="20.4700%" y="85" width="0.1152%" height="15" fill="rgb(208,69,12)"/><text x="20.7200%" y="95.50"></text></g><g><title>crate_lints (2,081,503 samples, 1.53%)</title><rect x="19.9490%" y="133" width="1.5256%" height="15" fill="rgb(235,93,37)"/><text x="20.1990%" y="143.50"></text></g><g><title>type_of (1,092,051 samples, 0.80%)</title><rect x="20.6742%" y="117" width="0.8004%" height="15" fill="rgb(213,116,39)"/><text x="20.9242%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (863,038 samples, 0.63%)</title><rect x="20.8421%" y="101" width="0.6326%" height="15" fill="rgb(222,207,29)"/><text x="21.0921%" y="111.50"></text></g><g><title>lint_checking (2,517,768 samples, 1.85%)</title><rect x="19.9479%" y="149" width="1.8454%" height="15" fill="rgb(206,96,30)"/><text x="20.1979%" y="159.50">l..</text></g><g><title>module_lints (434,835 samples, 0.32%)</title><rect x="21.4746%" y="133" width="0.3187%" height="15" fill="rgb(218,138,4)"/><text x="21.7246%" y="143.50"></text></g><g><title>lint_mod (431,835 samples, 0.32%)</title><rect x="21.4768%" y="117" width="0.3165%" height="15" fill="rgb(250,191,14)"/><text x="21.7268%" y="127.50"></text></g><g><title>privacy_access_levels (162,581 samples, 0.12%)</title><rect x="21.7933%" y="149" width="0.1192%" height="15" fill="rgb(239,60,40)"/><text x="22.0433%" y="159.50"></text></g><g><title>privacy_checking_modules (582,476 samples, 0.43%)</title><rect x="21.9125%" y="149" width="0.4269%" height="15" fill="rgb(206,27,48)"/><text x="22.1625%" y="159.50"></text></g><g><title>check_mod_privacy (579,996 samples, 0.43%)</title><rect x="21.9143%" y="133" width="0.4251%" height="15" fill="rgb(225,35,8)"/><text x="22.1643%" y="143.50"></text></g><g><title>misc_checking_3 (3,761,051 samples, 2.76%)</title><rect x="19.5907%" y="165" width="2.7566%" height="15" fill="rgb(250,213,24)"/><text x="19.8407%" y="175.50">mi..</text></g><g><title>impl_trait_ref (151,774 samples, 0.11%)</title><rect x="22.5521%" y="69" width="0.1112%" height="15" fill="rgb(247,123,22)"/><text x="22.8021%" y="79.50"></text></g><g><title>adt_destructor (310,344 samples, 0.23%)</title><rect x="22.4529%" y="117" width="0.2275%" height="15" fill="rgb(231,138,38)"/><text x="22.7029%" y="127.50"></text></g><g><title>coherent_trait (302,294 samples, 0.22%)</title><rect x="22.4588%" y="101" width="0.2216%" height="15" fill="rgb(231,145,46)"/><text x="22.7088%" y="111.50"></text></g><g><title>specialization_graph_of (301,244 samples, 0.22%)</title><rect x="22.4596%" y="85" width="0.2208%" height="15" fill="rgb(251,118,11)"/><text x="22.7096%" y="95.50"></text></g><g><title>impl_parent (3,781,145 samples, 2.77%)</title><rect x="27.4378%" y="101" width="2.7714%" height="15" fill="rgb(217,147,25)"/><text x="27.6878%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,932,693 samples, 1.42%)</title><rect x="28.7926%" y="85" width="1.4166%" height="15" fill="rgb(247,81,37)"/><text x="29.0426%" y="95.50"></text></g><g><title>impl_trait_ref (8,627,923 samples, 6.32%)</title><rect x="30.2091%" y="101" width="6.3238%" height="15" fill="rgb(209,12,38)"/><text x="30.4591%" y="111.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,786,956 samples, 4.97%)</title><rect x="31.5585%" y="85" width="4.9745%" height="15" fill="rgb(227,1,9)"/><text x="31.8085%" y="95.50">metada..</text></g><g><title>trait_impls_of (1,430,943 samples, 1.05%)</title><rect x="36.5528%" y="101" width="1.0488%" height="15" fill="rgb(248,47,43)"/><text x="36.8028%" y="111.50"></text></g><g><title>implementations_of_trait (353,351 samples, 0.26%)</title><rect x="37.3426%" y="85" width="0.2590%" height="15" fill="rgb(221,10,30)"/><text x="37.5926%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (280,301 samples, 0.21%)</title><rect x="37.3962%" y="69" width="0.2054%" height="15" fill="rgb(210,229,1)"/><text x="37.6462%" y="79.50"></text></g><g><title>coherent_trait (20,720,191 samples, 15.19%)</title><rect x="22.4154%" y="133" width="15.1868%" height="15" fill="rgb(222,148,37)"/><text x="22.6654%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (20,195,163 samples, 14.80%)</title><rect x="22.8002%" y="117" width="14.8019%" height="15" fill="rgb(234,67,33)"/><text x="23.0502%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (20,852,352 samples, 15.28%)</title><rect x="22.3953%" y="149" width="15.2836%" height="15" fill="rgb(247,98,35)"/><text x="22.6453%" y="159.50">coherence_checking</text></g><g><title>adt_def (467,446 samples, 0.34%)</title><rect x="54.2466%" y="85" width="0.3426%" height="15" fill="rgb(247,138,52)"/><text x="54.4966%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (464,276 samples, 0.34%)</title><rect x="54.2489%" y="69" width="0.3403%" height="15" fill="rgb(213,79,30)"/><text x="54.4989%" y="79.50"></text></g><g><title>item_attrs (430,636 samples, 0.32%)</title><rect x="54.2736%" y="53" width="0.3156%" height="15" fill="rgb(246,177,23)"/><text x="54.5236%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (426,706 samples, 0.31%)</title><rect x="54.2765%" y="37" width="0.3128%" height="15" fill="rgb(230,62,27)"/><text x="54.5265%" y="47.50"></text></g><g><title>adt_sized_constraint (531,636 samples, 0.39%)</title><rect x="54.2369%" y="101" width="0.3897%" height="15" fill="rgb(216,154,8)"/><text x="54.4869%" y="111.50"></text></g><g><title>associated_item (508,269 samples, 0.37%)</title><rect x="54.7657%" y="85" width="0.3725%" height="15" fill="rgb(244,35,45)"/><text x="55.0157%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (401,157 samples, 0.29%)</title><rect x="54.8442%" y="69" width="0.2940%" height="15" fill="rgb(251,115,12)"/><text x="55.0942%" y="79.50"></text></g><g><title>associated_items (726,080 samples, 0.53%)</title><rect x="54.6294%" y="101" width="0.5322%" height="15" fill="rgb(240,54,50)"/><text x="54.8794%" y="111.50"></text></g><g><title>adt_dtorck_constraint (157,651 samples, 0.12%)</title><rect x="55.3619%" y="69" width="0.1155%" height="15" fill="rgb(233,84,52)"/><text x="55.6119%" y="79.50"></text></g><g><title>dropck_outlives (413,237 samples, 0.30%)</title><rect x="55.1968%" y="101" width="0.3029%" height="15" fill="rgb(207,117,47)"/><text x="55.4468%" y="111.50"></text></g><g><title>adt_dtorck_constraint (292,155 samples, 0.21%)</title><rect x="55.2856%" y="85" width="0.2141%" height="15" fill="rgb(249,43,39)"/><text x="55.5356%" y="95.50"></text></g><g><title>adt_sized_constraint (211,162 samples, 0.15%)</title><rect x="57.8454%" y="85" width="0.1548%" height="15" fill="rgb(209,38,44)"/><text x="58.0954%" y="95.50"></text></g><g><title>generics_of (717,337 samples, 0.53%)</title><rect x="58.0002%" y="85" width="0.5258%" height="15" fill="rgb(236,212,23)"/><text x="58.2502%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (568,355 samples, 0.42%)</title><rect x="58.1094%" y="69" width="0.4166%" height="15" fill="rgb(242,79,21)"/><text x="58.3594%" y="79.50"></text></g><g><title>impl_trait_ref (402,843 samples, 0.30%)</title><rect x="58.6170%" y="85" width="0.2953%" height="15" fill="rgb(211,96,35)"/><text x="58.8670%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (324,663 samples, 0.24%)</title><rect x="58.6743%" y="69" width="0.2380%" height="15" fill="rgb(253,215,40)"/><text x="58.9243%" y="79.50"></text></g><g><title>predicates_of (369,307 samples, 0.27%)</title><rect x="58.9318%" y="85" width="0.2707%" height="15" fill="rgb(211,81,21)"/><text x="59.1818%" y="95.50"></text></g><g><title>predicates_defined_on (220,923 samples, 0.16%)</title><rect x="59.0406%" y="69" width="0.1619%" height="15" fill="rgb(208,190,38)"/><text x="59.2906%" y="79.50"></text></g><g><title>specializes (933,052 samples, 0.68%)</title><rect x="59.2025%" y="85" width="0.6839%" height="15" fill="rgb(235,213,38)"/><text x="59.4525%" y="95.50"></text></g><g><title>param_env (615,416 samples, 0.45%)</title><rect x="59.4353%" y="69" width="0.4511%" height="15" fill="rgb(237,122,38)"/><text x="59.6853%" y="79.50"></text></g><g><title>def_span (148,252 samples, 0.11%)</title><rect x="59.7777%" y="53" width="0.1087%" height="15" fill="rgb(244,218,35)"/><text x="60.0277%" y="63.50"></text></g><g><title>trait_impls_of (341,223 samples, 0.25%)</title><rect x="59.8936%" y="85" width="0.2501%" height="15" fill="rgb(240,68,47)"/><text x="60.1436%" y="95.50"></text></g><g><title>evaluate_obligation (6,357,301 samples, 4.66%)</title><rect x="55.4997%" y="101" width="4.6596%" height="15" fill="rgb(210,16,53)"/><text x="55.7497%" y="111.50">evalu..</text></g><g><title>generics_of (703,296 samples, 0.52%)</title><rect x="60.2548%" y="101" width="0.5155%" height="15" fill="rgb(235,124,12)"/><text x="60.5048%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (553,086 samples, 0.41%)</title><rect x="60.3649%" y="85" width="0.4054%" height="15" fill="rgb(224,169,11)"/><text x="60.6149%" y="95.50"></text></g><g><title>impl_item_implementor_ids (171,324 samples, 0.13%)</title><rect x="60.7703%" y="101" width="0.1256%" height="15" fill="rgb(250,166,2)"/><text x="61.0203%" y="111.50"></text></g><g><title>associated_items (146,793 samples, 0.11%)</title><rect x="60.7883%" y="85" width="0.1076%" height="15" fill="rgb(242,216,29)"/><text x="61.0383%" y="95.50"></text></g><g><title>item_attrs (171,471 samples, 0.13%)</title><rect x="60.9483%" y="101" width="0.1257%" height="15" fill="rgb(230,116,27)"/><text x="61.1983%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (165,091 samples, 0.12%)</title><rect x="60.9530%" y="85" width="0.1210%" height="15" fill="rgb(228,99,48)"/><text x="61.2030%" y="95.50"></text></g><g><title>object_safety_violations (142,311 samples, 0.10%)</title><rect x="61.2186%" y="101" width="0.1043%" height="15" fill="rgb(253,11,6)"/><text x="61.4686%" y="111.50"></text></g><g><title>predicates_of (358,643 samples, 0.26%)</title><rect x="61.3599%" y="101" width="0.2629%" height="15" fill="rgb(247,143,39)"/><text x="61.6099%" y="111.50"></text></g><g><title>predicates_defined_on (242,223 samples, 0.18%)</title><rect x="61.4453%" y="85" width="0.1775%" height="15" fill="rgb(236,97,10)"/><text x="61.6953%" y="95.50"></text></g><g><title>associated_items (146,493 samples, 0.11%)</title><rect x="65.7857%" y="85" width="0.1074%" height="15" fill="rgb(233,208,19)"/><text x="66.0357%" y="95.50"></text></g><g><title>evaluate_obligation (400,557 samples, 0.29%)</title><rect x="65.9585%" y="85" width="0.2936%" height="15" fill="rgb(216,164,2)"/><text x="66.2085%" y="95.50"></text></g><g><title>typeck (6,529,643 samples, 4.79%)</title><rect x="61.7748%" y="101" width="4.7859%" height="15" fill="rgb(220,129,5)"/><text x="62.0248%" y="111.50">typeck</text></g><g><title>item_bodies_checking (39,421,709 samples, 28.89%)</title><rect x="37.7062%" y="149" width="28.8940%" height="15" fill="rgb(242,17,10)"/><text x="37.9562%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (39,418,579 samples, 28.89%)</title><rect x="37.7085%" y="133" width="28.8917%" height="15" fill="rgb(242,107,0)"/><text x="37.9585%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (39,374,198 samples, 28.86%)</title><rect x="37.7410%" y="117" width="28.8591%" height="15" fill="rgb(251,28,31)"/><text x="37.9910%" y="127.50">typeck</text></g><g><title>generics_of (358,212 samples, 0.26%)</title><rect x="68.2041%" y="85" width="0.2625%" height="15" fill="rgb(233,223,10)"/><text x="68.4541%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (272,092 samples, 0.20%)</title><rect x="68.2672%" y="69" width="0.1994%" height="15" fill="rgb(215,21,27)"/><text x="68.5172%" y="79.50"></text></g><g><title>impl_trait_ref (443,824 samples, 0.33%)</title><rect x="68.4929%" y="85" width="0.3253%" height="15" fill="rgb(232,23,21)"/><text x="68.7429%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (358,894 samples, 0.26%)</title><rect x="68.5551%" y="69" width="0.2630%" height="15" fill="rgb(244,5,23)"/><text x="68.8051%" y="79.50"></text></g><g><title>specializes (336,414 samples, 0.25%)</title><rect x="68.9135%" y="85" width="0.2466%" height="15" fill="rgb(226,81,46)"/><text x="69.1635%" y="95.50"></text></g><g><title>param_env (201,483 samples, 0.15%)</title><rect x="69.0124%" y="69" width="0.1477%" height="15" fill="rgb(247,70,30)"/><text x="69.2624%" y="79.50"></text></g><g><title>evaluate_obligation (2,254,265 samples, 1.65%)</title><rect x="67.5695%" y="101" width="1.6523%" height="15" fill="rgb(212,68,19)"/><text x="67.8195%" y="111.50"></text></g><g><title>item_types_checking (3,683,900 samples, 2.70%)</title><rect x="66.6001%" y="149" width="2.7001%" height="15" fill="rgb(240,187,13)"/><text x="66.8501%" y="159.50">it..</text></g><g><title>check_mod_item_types (3,680,720 samples, 2.70%)</title><rect x="66.6025%" y="133" width="2.6978%" height="15" fill="rgb(223,113,26)"/><text x="66.8525%" y="143.50">ch..</text></g><g><title>typeck (3,109,644 samples, 2.28%)</title><rect x="67.0210%" y="117" width="2.2792%" height="15" fill="rgb(206,192,2)"/><text x="67.2710%" y="127.50">t..</text></g><g><title>fn_sig (455,203 samples, 0.33%)</title><rect x="69.5637%" y="117" width="0.3336%" height="15" fill="rgb(241,108,4)"/><text x="69.8137%" y="127.50"></text></g><g><title>named_region_map (812,108 samples, 0.60%)</title><rect x="70.0287%" y="101" width="0.5952%" height="15" fill="rgb(247,173,49)"/><text x="70.2787%" y="111.50"></text></g><g><title>resolve_lifetimes (777,228 samples, 0.57%)</title><rect x="70.0543%" y="85" width="0.5697%" height="15" fill="rgb(224,114,35)"/><text x="70.3043%" y="95.50"></text></g><g><title>lint_levels (360,604 samples, 0.26%)</title><rect x="70.3596%" y="69" width="0.2643%" height="15" fill="rgb(245,159,27)"/><text x="70.6096%" y="79.50"></text></g><g><title>generics_of (1,011,431 samples, 0.74%)</title><rect x="69.8973%" y="117" width="0.7413%" height="15" fill="rgb(245,172,44)"/><text x="70.1473%" y="127.50"></text></g><g><title>predicates_of (350,463 samples, 0.26%)</title><rect x="70.7263%" y="117" width="0.2569%" height="15" fill="rgb(236,23,11)"/><text x="70.9763%" y="127.50"></text></g><g><title>predicates_defined_on (297,933 samples, 0.22%)</title><rect x="70.7648%" y="101" width="0.2184%" height="15" fill="rgb(205,117,38)"/><text x="71.0148%" y="111.50"></text></g><g><title>type_collecting (2,462,047 samples, 1.80%)</title><rect x="69.3016%" y="149" width="1.8045%" height="15" fill="rgb(237,72,25)"/><text x="69.5516%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,449,477 samples, 1.80%)</title><rect x="69.3108%" y="133" width="1.7953%" height="15" fill="rgb(244,70,9)"/><text x="69.5608%" y="143.50">c..</text></g><g><title>type_of (167,723 samples, 0.12%)</title><rect x="70.9832%" y="117" width="0.1229%" height="15" fill="rgb(217,125,39)"/><text x="71.2332%" y="127.50"></text></g><g><title>evaluate_obligation (178,602 samples, 0.13%)</title><rect x="71.5604%" y="117" width="0.1309%" height="15" fill="rgb(235,36,10)"/><text x="71.8104%" y="127.50"></text></g><g><title>region_scope_tree (250,722 samples, 0.18%)</title><rect x="71.8212%" y="117" width="0.1838%" height="15" fill="rgb(251,123,47)"/><text x="72.0712%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,131,542 samples, 0.83%)</title><rect x="71.1854%" y="133" width="0.8294%" height="15" fill="rgb(221,13,13)"/><text x="71.4354%" y="143.50"></text></g><g><title>adt_sized_constraint (165,502 samples, 0.12%)</title><rect x="72.6127%" y="101" width="0.1213%" height="15" fill="rgb(238,131,9)"/><text x="72.8627%" y="111.50"></text></g><g><title>evaluate_obligation (344,624 samples, 0.25%)</title><rect x="72.4846%" y="117" width="0.2526%" height="15" fill="rgb(211,50,8)"/><text x="72.7346%" y="127.50"></text></g><g><title>region_scope_tree (189,292 samples, 0.14%)</title><rect x="72.9558%" y="117" width="0.1387%" height="15" fill="rgb(245,182,24)"/><text x="73.2058%" y="127.50"></text></g><g><title>analysis (99,068,073 samples, 72.61%)</title><rect x="0.5217%" y="181" width="72.6115%" height="15" fill="rgb(242,14,37)"/><text x="0.7717%" y="191.50">analysis</text></g><g><title>type_check_crate (69,290,101 samples, 50.79%)</title><rect x="22.3473%" y="165" width="50.7858%" height="15" fill="rgb(246,228,12)"/><text x="22.5973%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,761,651 samples, 2.02%)</title><rect x="71.1091%" y="149" width="2.0241%" height="15" fill="rgb(213,55,15)"/><text x="71.3591%" y="159.50">w..</text></g><g><title>check_item_well_formed (1,525,926 samples, 1.12%)</title><rect x="72.0148%" y="133" width="1.1184%" height="15" fill="rgb(209,9,3)"/><text x="72.2648%" y="143.50"></text></g><g><title>codegen_crate (353,664 samples, 0.26%)</title><rect x="73.1402%" y="181" width="0.2592%" height="15" fill="rgb(230,59,30)"/><text x="73.3902%" y="191.50"></text></g><g><title>AST_validation (170,401 samples, 0.12%)</title><rect x="73.5448%" y="165" width="0.1249%" height="15" fill="rgb(209,121,21)"/><text x="73.7948%" y="175.50"></text></g><g><title>metadata_load_macro (341,385 samples, 0.25%)</title><rect x="85.4861%" y="133" width="0.2502%" height="15" fill="rgb(220,109,13)"/><text x="85.7361%" y="143.50"></text></g><g><title>metadata_register_crate (2,373,546 samples, 1.74%)</title><rect x="85.7363%" y="133" width="1.7397%" height="15" fill="rgb(232,18,1)"/><text x="85.9863%" y="143.50"></text></g><g><title>metadata_register_crate (877,029 samples, 0.64%)</title><rect x="86.8332%" y="117" width="0.6428%" height="15" fill="rgb(215,41,42)"/><text x="87.0832%" y="127.50"></text></g><g><title>macro_expand_crate (18,914,880 samples, 13.86%)</title><rect x="73.8030%" y="165" width="13.8636%" height="15" fill="rgb(224,123,36)"/><text x="74.0530%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (18,892,150 samples, 13.85%)</title><rect x="73.8197%" y="149" width="13.8469%" height="15" fill="rgb(240,125,3)"/><text x="74.0697%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (260,083 samples, 0.19%)</title><rect x="87.4760%" y="133" width="0.1906%" height="15" fill="rgb(205,98,50)"/><text x="87.7260%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (139,502 samples, 0.10%)</title><rect x="87.6701%" y="165" width="0.1022%" height="15" fill="rgb(205,185,37)"/><text x="87.9201%" y="175.50"></text></g><g><title>finalize_macro_resolutions (300,743 samples, 0.22%)</title><rect x="87.8432%" y="149" width="0.2204%" height="15" fill="rgb(238,207,15)"/><text x="88.0932%" y="159.50"></text></g><g><title>late_resolve_crate (2,881,462 samples, 2.11%)</title><rect x="88.0636%" y="149" width="2.1120%" height="15" fill="rgb(213,199,42)"/><text x="88.3136%" y="159.50">l..</text></g><g><title>configure_and_expand (23,046,286 samples, 16.89%)</title><rect x="73.3994%" y="181" width="16.8917%" height="15" fill="rgb(235,201,11)"/><text x="73.6494%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,436,388 samples, 2.52%)</title><rect x="87.7724%" y="165" width="2.5187%" height="15" fill="rgb(207,46,11)"/><text x="88.0224%" y="175.50">re..</text></g><g><title>drop_ast (285,013 samples, 0.21%)</title><rect x="90.2910%" y="181" width="0.2089%" height="15" fill="rgb(241,35,35)"/><text x="90.5410%" y="191.50"></text></g><g><title>early_lint_checks (653,437 samples, 0.48%)</title><rect x="90.5109%" y="181" width="0.4789%" height="15" fill="rgb(243,32,47)"/><text x="90.7609%" y="191.50"></text></g><g><title>free_global_ctxt (4,028,955 samples, 2.95%)</title><rect x="90.9898%" y="181" width="2.9530%" height="15" fill="rgb(247,202,23)"/><text x="91.2398%" y="191.50">fre..</text></g><g><title>generate_crate_metadata (705,708 samples, 0.52%)</title><rect x="93.9428%" y="181" width="0.5172%" height="15" fill="rgb(219,102,11)"/><text x="94.1928%" y="191.50"></text></g><g><title>hir_lowering (4,237,988 samples, 3.11%)</title><rect x="94.4600%" y="181" width="3.1062%" height="15" fill="rgb(243,110,44)"/><text x="94.7100%" y="191.50">hir..</text></g><g><title>parse_crate (1,510,467 samples, 1.11%)</title><rect x="97.6064%" y="181" width="1.1071%" height="15" fill="rgb(222,74,54)"/><text x="97.8564%" y="191.50"></text></g><g><title>prepare_outputs (291,963 samples, 0.21%)</title><rect x="98.7201%" y="181" width="0.2140%" height="15" fill="rgb(216,99,12)"/><text x="98.9701%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (973,680 samples, 0.71%)</title><rect x="98.9341%" y="181" width="0.7137%" height="15" fill="rgb(226,22,26)"/><text x="99.1841%" y="191.50"></text></g><g><title>all (136,435,840 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (136,435,840 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (333,864 samples, 0.24%)</title><rect x="99.7553%" y="181" width="0.2447%" height="15" fill="rgb(252,105,26)"/><text x="100.0053%" y="191.50"></text></g></svg></svg>