<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (851,418 samples, 0.22%)</title><rect x="10.3613%" y="149" width="0.2201%" height="15" fill="rgb(227,0,7)"/><text x="10.6113%" y="159.50"></text></g><g><title>item_attrs (788,052 samples, 0.20%)</title><rect x="10.9525%" y="117" width="0.2037%" height="15" fill="rgb(217,0,24)"/><text x="11.2025%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (760,951 samples, 0.20%)</title><rect x="10.9595%" y="101" width="0.1967%" height="15" fill="rgb(221,193,54)"/><text x="11.2095%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,063,317 samples, 0.27%)</title><rect x="10.8942%" y="133" width="0.2748%" height="15" fill="rgb(248,212,6)"/><text x="11.1442%" y="143.50"></text></g><g><title>adt_drop_tys (487,689 samples, 0.13%)</title><rect x="13.2328%" y="101" width="0.1261%" height="15" fill="rgb(208,68,35)"/><text x="13.4828%" y="111.50"></text></g><g><title>needs_drop_raw (3,605,809 samples, 0.93%)</title><rect x="13.1341%" y="117" width="0.9320%" height="15" fill="rgb(232,128,0)"/><text x="13.3841%" y="127.50"></text></g><g><title>is_copy_raw (2,733,195 samples, 0.71%)</title><rect x="13.3596%" y="101" width="0.7065%" height="15" fill="rgb(207,160,47)"/><text x="13.6096%" y="111.50"></text></g><g><title>evaluate_obligation (2,315,002 samples, 0.60%)</title><rect x="13.4677%" y="85" width="0.5984%" height="15" fill="rgb(228,23,34)"/><text x="13.7177%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,044,102 samples, 0.27%)</title><rect x="14.2244%" y="101" width="0.2699%" height="15" fill="rgb(218,30,26)"/><text x="14.4744%" y="111.50"></text></g><g><title>impl_parent (1,130,623 samples, 0.29%)</title><rect x="14.9804%" y="85" width="0.2922%" height="15" fill="rgb(220,122,19)"/><text x="15.2304%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (707,456 samples, 0.18%)</title><rect x="15.0898%" y="69" width="0.1829%" height="15" fill="rgb(250,228,42)"/><text x="15.3398%" y="79.50"></text></g><g><title>specialization_graph_of (5,450,681 samples, 1.41%)</title><rect x="14.5264%" y="101" width="1.4089%" height="15" fill="rgb(240,193,28)"/><text x="14.7764%" y="111.50"></text></g><g><title>impl_trait_ref (2,563,609 samples, 0.66%)</title><rect x="15.2726%" y="85" width="0.6626%" height="15" fill="rgb(216,20,37)"/><text x="15.5226%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,891,619 samples, 0.49%)</title><rect x="15.4463%" y="69" width="0.4889%" height="15" fill="rgb(206,188,39)"/><text x="15.6963%" y="79.50"></text></g><g><title>resolve_instance (7,443,039 samples, 1.92%)</title><rect x="14.0661%" y="117" width="1.9238%" height="15" fill="rgb(217,207,13)"/><text x="14.3161%" y="127.50">r..</text></g><g><title>thir_body (2,733,771 samples, 0.71%)</title><rect x="16.0050%" y="117" width="0.7066%" height="15" fill="rgb(231,73,38)"/><text x="16.2550%" y="127.50"></text></g><g><title>mir_const (26,577,573 samples, 6.87%)</title><rect x="9.8509%" y="165" width="6.8697%" height="15" fill="rgb(225,20,46)"/><text x="10.1009%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (23,751,602 samples, 6.14%)</title><rect x="10.5814%" y="149" width="6.1392%" height="15" fill="rgb(210,31,41)"/><text x="10.8314%" y="159.50">unsafety..</text></g><g><title>mir_built (21,478,101 samples, 5.55%)</title><rect x="11.1690%" y="133" width="5.5516%" height="15" fill="rgb(221,200,47)"/><text x="11.4190%" y="143.50">mir_bui..</text></g><g><title>evaluate_obligation (633,537 samples, 0.16%)</title><rect x="16.8292%" y="149" width="0.1638%" height="15" fill="rgb(226,26,5)"/><text x="17.0792%" y="159.50"></text></g><g><title>mir_const_qualif (1,938,442 samples, 0.50%)</title><rect x="16.7206%" y="165" width="0.5010%" height="15" fill="rgb(249,33,26)"/><text x="16.9706%" y="175.50"></text></g><g><title>mir_promoted (30,756,248 samples, 7.95%)</title><rect x="9.2729%" y="181" width="7.9498%" height="15" fill="rgb(235,183,28)"/><text x="9.5229%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,213,352 samples, 0.31%)</title><rect x="17.2227%" y="181" width="0.3136%" height="15" fill="rgb(221,5,38)"/><text x="17.4727%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (1,884,729 samples, 0.49%)</title><rect x="17.5363%" y="181" width="0.4872%" height="15" fill="rgb(247,18,42)"/><text x="17.7863%" y="191.50"></text></g><g><title>normalize_projection_ty (1,142,401 samples, 0.30%)</title><rect x="17.7282%" y="165" width="0.2953%" height="15" fill="rgb(241,131,45)"/><text x="17.9782%" y="175.50"></text></g><g><title>type_op_normalize_predicate (427,584 samples, 0.11%)</title><rect x="18.0235%" y="181" width="0.1105%" height="15" fill="rgb(249,31,29)"/><text x="18.2735%" y="191.50"></text></g><g><title>type_op_prove_predicate (6,219,549 samples, 1.61%)</title><rect x="18.1783%" y="181" width="1.6076%" height="15" fill="rgb(225,111,53)"/><text x="18.4283%" y="191.50"></text></g><g><title>MIR_borrow_checking (75,072,210 samples, 19.40%)</title><rect x="0.3847%" y="213" width="19.4044%" height="15" fill="rgb(238,160,17)"/><text x="0.6347%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (74,807,038 samples, 19.34%)</title><rect x="0.4532%" y="197" width="19.3358%" height="15" fill="rgb(214,148,48)"/><text x="0.7032%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (435,145 samples, 0.11%)</title><rect x="19.7891%" y="213" width="0.1125%" height="15" fill="rgb(232,36,49)"/><text x="20.0391%" y="223.50"></text></g><g><title>hir_module_items (389,535 samples, 0.10%)</title><rect x="19.9016%" y="213" width="0.1007%" height="15" fill="rgb(209,103,24)"/><text x="20.1516%" y="223.50"></text></g><g><title>codegen_fn_attrs (627,927 samples, 0.16%)</title><rect x="20.1545%" y="181" width="0.1623%" height="15" fill="rgb(229,88,8)"/><text x="20.4045%" y="191.50"></text></g><g><title>check_mod_attrs (1,198,933 samples, 0.31%)</title><rect x="20.0069%" y="197" width="0.3099%" height="15" fill="rgb(213,181,19)"/><text x="20.2569%" y="207.50"></text></g><g><title>lint_levels (420,284 samples, 0.11%)</title><rect x="20.5219%" y="181" width="0.1086%" height="15" fill="rgb(254,191,54)"/><text x="20.7719%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (1,179,883 samples, 0.30%)</title><rect x="20.4339%" y="197" width="0.3050%" height="15" fill="rgb(241,83,37)"/><text x="20.6839%" y="207.50"></text></g><g><title>misc_checking_1 (2,926,912 samples, 0.76%)</title><rect x="20.0023%" y="213" width="0.7565%" height="15" fill="rgb(233,36,39)"/><text x="20.2523%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (1,911,051 samples, 0.49%)</title><rect x="20.7593%" y="197" width="0.4940%" height="15" fill="rgb(226,3,54)"/><text x="21.0093%" y="207.50"></text></g><g><title>check_mod_liveness (1,657,529 samples, 0.43%)</title><rect x="20.8248%" y="181" width="0.4284%" height="15" fill="rgb(245,192,40)"/><text x="21.0748%" y="191.50"></text></g><g><title>type_uninhabited_from (473,519 samples, 0.12%)</title><rect x="21.1308%" y="165" width="0.1224%" height="15" fill="rgb(238,167,29)"/><text x="21.3808%" y="175.50"></text></g><g><title>misc_checking_2 (3,527,719 samples, 0.91%)</title><rect x="20.7589%" y="213" width="0.9118%" height="15" fill="rgb(232,182,51)"/><text x="21.0089%" y="223.50"></text></g><g><title>match_checking (1,615,138 samples, 0.42%)</title><rect x="21.2532%" y="197" width="0.4175%" height="15" fill="rgb(231,60,39)"/><text x="21.5032%" y="207.50"></text></g><g><title>check_match (1,534,237 samples, 0.40%)</title><rect x="21.2741%" y="181" width="0.3966%" height="15" fill="rgb(208,69,12)"/><text x="21.5241%" y="191.50"></text></g><g><title>check_private_in_public (547,806 samples, 0.14%)</title><rect x="21.6728%" y="197" width="0.1416%" height="15" fill="rgb(235,93,37)"/><text x="21.9228%" y="207.50"></text></g><g><title>death_checking (930,350 samples, 0.24%)</title><rect x="21.8144%" y="197" width="0.2405%" height="15" fill="rgb(213,116,39)"/><text x="22.0644%" y="207.50"></text></g><g><title>eval_to_allocation_raw (1,093,244 samples, 0.28%)</title><rect x="22.4672%" y="165" width="0.2826%" height="15" fill="rgb(222,207,29)"/><text x="22.7172%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,088,274 samples, 0.28%)</title><rect x="22.4685%" y="149" width="0.2813%" height="15" fill="rgb(206,96,30)"/><text x="22.7185%" y="159.50"></text></g><g><title>param_env (610,018 samples, 0.16%)</title><rect x="22.7857%" y="165" width="0.1577%" height="15" fill="rgb(218,138,4)"/><text x="23.0357%" y="175.50"></text></g><g><title>crate_lints (4,932,394 samples, 1.27%)</title><rect x="22.0554%" y="181" width="1.2749%" height="15" fill="rgb(250,191,14)"/><text x="22.3054%" y="191.50"></text></g><g><title>type_of (1,396,786 samples, 0.36%)</title><rect x="22.9692%" y="165" width="0.3610%" height="15" fill="rgb(239,60,40)"/><text x="23.2192%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (1,105,104 samples, 0.29%)</title><rect x="23.0446%" y="149" width="0.2856%" height="15" fill="rgb(206,27,48)"/><text x="23.2946%" y="159.50"></text></g><g><title>lint_checking (6,544,132 samples, 1.69%)</title><rect x="22.0549%" y="197" width="1.6915%" height="15" fill="rgb(225,35,8)"/><text x="22.3049%" y="207.50"></text></g><g><title>module_lints (1,609,808 samples, 0.42%)</title><rect x="23.3303%" y="181" width="0.4161%" height="15" fill="rgb(250,213,24)"/><text x="23.5803%" y="191.50"></text></g><g><title>lint_mod (1,604,838 samples, 0.41%)</title><rect x="23.3316%" y="165" width="0.4148%" height="15" fill="rgb(247,123,22)"/><text x="23.5816%" y="175.50"></text></g><g><title>privacy_access_levels (870,290 samples, 0.22%)</title><rect x="23.7464%" y="197" width="0.2249%" height="15" fill="rgb(231,138,38)"/><text x="23.9964%" y="207.50"></text></g><g><title>privacy_checking_modules (3,197,406 samples, 0.83%)</title><rect x="23.9713%" y="197" width="0.8265%" height="15" fill="rgb(231,145,46)"/><text x="24.2213%" y="207.50"></text></g><g><title>check_mod_privacy (3,194,386 samples, 0.83%)</title><rect x="23.9721%" y="181" width="0.8257%" height="15" fill="rgb(251,118,11)"/><text x="24.2221%" y="191.50"></text></g><g><title>misc_checking_3 (12,120,144 samples, 3.13%)</title><rect x="21.6707%" y="213" width="3.1328%" height="15" fill="rgb(217,147,25)"/><text x="21.9207%" y="223.50">mis..</text></g><g><title>impl_parent (1,357,681 samples, 0.35%)</title><rect x="25.4844%" y="149" width="0.3509%" height="15" fill="rgb(247,81,37)"/><text x="25.7344%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (876,954 samples, 0.23%)</title><rect x="25.6087%" y="133" width="0.2267%" height="15" fill="rgb(209,12,38)"/><text x="25.8587%" y="143.50"></text></g><g><title>impl_trait_ref (3,873,586 samples, 1.00%)</title><rect x="25.8356%" y="149" width="1.0012%" height="15" fill="rgb(227,1,9)"/><text x="26.0856%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,396,389 samples, 0.88%)</title><rect x="25.9590%" y="133" width="0.8779%" height="15" fill="rgb(248,47,43)"/><text x="26.2090%" y="143.50"></text></g><g><title>trait_impls_of (638,078 samples, 0.16%)</title><rect x="26.8578%" y="149" width="0.1649%" height="15" fill="rgb(221,10,30)"/><text x="27.1078%" y="159.50"></text></g><g><title>coherent_trait (8,414,753 samples, 2.18%)</title><rect x="24.8481%" y="181" width="2.1750%" height="15" fill="rgb(210,229,1)"/><text x="25.0981%" y="191.50">c..</text></g><g><title>specialization_graph_of (8,395,683 samples, 2.17%)</title><rect x="24.8531%" y="165" width="2.1701%" height="15" fill="rgb(222,148,37)"/><text x="25.1031%" y="175.50">s..</text></g><g><title>coherence_checking (8,554,415 samples, 2.21%)</title><rect x="24.8434%" y="197" width="2.2111%" height="15" fill="rgb(234,67,33)"/><text x="25.0934%" y="207.50">c..</text></g><g><title>associated_item (436,946 samples, 0.11%)</title><rect x="37.5241%" y="133" width="0.1129%" height="15" fill="rgb(247,98,35)"/><text x="37.7741%" y="143.50"></text></g><g><title>associated_items (662,838 samples, 0.17%)</title><rect x="37.4749%" y="149" width="0.1713%" height="15" fill="rgb(247,138,52)"/><text x="37.7249%" y="159.50"></text></g><g><title>adt_def (794,998 samples, 0.21%)</title><rect x="37.8731%" y="117" width="0.2055%" height="15" fill="rgb(213,79,30)"/><text x="38.1231%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (793,548 samples, 0.21%)</title><rect x="37.8734%" y="101" width="0.2051%" height="15" fill="rgb(246,177,23)"/><text x="38.1234%" y="111.50"></text></g><g><title>item_attrs (775,628 samples, 0.20%)</title><rect x="37.8781%" y="85" width="0.2005%" height="15" fill="rgb(230,62,27)"/><text x="38.1281%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (773,718 samples, 0.20%)</title><rect x="37.8786%" y="69" width="0.2000%" height="15" fill="rgb(216,154,8)"/><text x="38.1286%" y="79.50"></text></g><g><title>dropck_outlives (1,629,258 samples, 0.42%)</title><rect x="37.6841%" y="149" width="0.4211%" height="15" fill="rgb(244,35,45)"/><text x="37.9341%" y="159.50"></text></g><g><title>adt_dtorck_constraint (952,129 samples, 0.25%)</title><rect x="37.8591%" y="133" width="0.2461%" height="15" fill="rgb(251,115,12)"/><text x="38.1091%" y="143.50"></text></g><g><title>mir_for_ctfe (845,458 samples, 0.22%)</title><rect x="39.6518%" y="85" width="0.2185%" height="15" fill="rgb(240,54,50)"/><text x="39.9018%" y="95.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (836,237 samples, 0.22%)</title><rect x="39.6542%" y="69" width="0.2161%" height="15" fill="rgb(233,84,52)"/><text x="39.9042%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,603,076 samples, 0.41%)</title><rect x="39.4635%" y="133" width="0.4144%" height="15" fill="rgb(207,117,47)"/><text x="39.7135%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,575,796 samples, 0.41%)</title><rect x="39.4706%" y="117" width="0.4073%" height="15" fill="rgb(249,43,39)"/><text x="39.7206%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,536,726 samples, 0.40%)</title><rect x="39.4807%" y="101" width="0.3972%" height="15" fill="rgb(209,38,44)"/><text x="39.7307%" y="111.50"></text></g><g><title>generics_of (1,115,999 samples, 0.29%)</title><rect x="39.8779%" y="133" width="0.2885%" height="15" fill="rgb(236,212,23)"/><text x="40.1279%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (886,167 samples, 0.23%)</title><rect x="39.9373%" y="117" width="0.2291%" height="15" fill="rgb(242,79,21)"/><text x="40.1873%" y="127.50"></text></g><g><title>impl_trait_ref (996,390 samples, 0.26%)</title><rect x="40.1844%" y="133" width="0.2575%" height="15" fill="rgb(211,96,35)"/><text x="40.4344%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (772,526 samples, 0.20%)</title><rect x="40.2423%" y="117" width="0.1997%" height="15" fill="rgb(253,215,40)"/><text x="40.4923%" y="127.50"></text></g><g><title>evaluate_obligation (10,200,988 samples, 2.64%)</title><rect x="38.1052%" y="149" width="2.6367%" height="15" fill="rgb(211,81,21)"/><text x="38.3552%" y="159.50">ev..</text></g><g><title>evaluate_obligation (433,142 samples, 0.11%)</title><rect x="41.2104%" y="133" width="0.1120%" height="15" fill="rgb(208,190,38)"/><text x="41.4604%" y="143.50"></text></g><g><title>method_autoderef_steps (1,083,042 samples, 0.28%)</title><rect x="41.0445%" y="149" width="0.2799%" height="15" fill="rgb(235,213,38)"/><text x="41.2945%" y="159.50"></text></g><g><title>predicates_of (510,414 samples, 0.13%)</title><rect x="41.3731%" y="149" width="0.1319%" height="15" fill="rgb(237,122,38)"/><text x="41.6231%" y="159.50"></text></g><g><title>dropck_outlives (399,966 samples, 0.10%)</title><rect x="46.5258%" y="133" width="0.1034%" height="15" fill="rgb(244,218,35)"/><text x="46.7758%" y="143.50"></text></g><g><title>trait_impls_of (467,865 samples, 0.12%)</title><rect x="46.9827%" y="117" width="0.1209%" height="15" fill="rgb(240,68,47)"/><text x="47.2327%" y="127.50"></text></g><g><title>evaluate_obligation (1,839,520 samples, 0.48%)</title><rect x="46.6292%" y="133" width="0.4755%" height="15" fill="rgb(210,16,53)"/><text x="46.8792%" y="143.50"></text></g><g><title>method_autoderef_steps (640,886 samples, 0.17%)</title><rect x="47.3100%" y="133" width="0.1657%" height="15" fill="rgb(235,124,12)"/><text x="47.5600%" y="143.50"></text></g><g><title>typeck (23,508,291 samples, 6.08%)</title><rect x="41.5535%" y="149" width="6.0763%" height="15" fill="rgb(224,169,11)"/><text x="41.8035%" y="159.50">typeck</text></g><g><title>item_bodies_checking (79,616,390 samples, 20.58%)</title><rect x="27.0678%" y="197" width="20.5789%" height="15" fill="rgb(250,166,2)"/><text x="27.3178%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (79,613,520 samples, 20.58%)</title><rect x="27.0686%" y="181" width="20.5782%" height="15" fill="rgb(242,216,29)"/><text x="27.3186%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (79,450,259 samples, 20.54%)</title><rect x="27.1108%" y="165" width="20.5360%" height="15" fill="rgb(230,116,27)"/><text x="27.3608%" y="175.50">typeck</text></g><g><title>explicit_item_bounds (397,734 samples, 0.10%)</title><rect x="48.7414%" y="165" width="0.1028%" height="15" fill="rgb(228,99,48)"/><text x="48.9914%" y="175.50"></text></g><g><title>layout_of (403,724 samples, 0.10%)</title><rect x="48.9547%" y="37" width="0.1044%" height="15" fill="rgb(253,11,6)"/><text x="49.2047%" y="47.50"></text></g><g><title>layout_of (461,185 samples, 0.12%)</title><rect x="48.9453%" y="53" width="0.1192%" height="15" fill="rgb(247,143,39)"/><text x="49.1953%" y="63.50"></text></g><g><title>layout_of (490,855 samples, 0.13%)</title><rect x="48.9399%" y="69" width="0.1269%" height="15" fill="rgb(236,97,10)"/><text x="49.1899%" y="79.50"></text></g><g><title>layout_of (558,476 samples, 0.14%)</title><rect x="48.9230%" y="117" width="0.1444%" height="15" fill="rgb(233,208,19)"/><text x="49.1730%" y="127.50"></text></g><g><title>layout_of (525,996 samples, 0.14%)</title><rect x="48.9314%" y="101" width="0.1360%" height="15" fill="rgb(216,164,2)"/><text x="49.1814%" y="111.50"></text></g><g><title>layout_of (505,076 samples, 0.13%)</title><rect x="48.9368%" y="85" width="0.1306%" height="15" fill="rgb(220,129,5)"/><text x="49.1868%" y="95.50"></text></g><g><title>layout_of (601,256 samples, 0.16%)</title><rect x="48.9145%" y="133" width="0.1554%" height="15" fill="rgb(242,17,10)"/><text x="49.1645%" y="143.50"></text></g><g><title>layout_of (681,628 samples, 0.18%)</title><rect x="48.9007%" y="149" width="0.1762%" height="15" fill="rgb(242,107,0)"/><text x="49.1507%" y="159.50"></text></g><g><title>layout_of (742,289 samples, 0.19%)</title><rect x="48.8875%" y="165" width="0.1919%" height="15" fill="rgb(251,28,31)"/><text x="49.1375%" y="175.50"></text></g><g><title>mir_promoted (476,586 samples, 0.12%)</title><rect x="55.3669%" y="101" width="0.1232%" height="15" fill="rgb(233,223,10)"/><text x="55.6169%" y="111.50"></text></g><g><title>mir_borrowck (4,175,727 samples, 1.08%)</title><rect x="54.5690%" y="117" width="1.0793%" height="15" fill="rgb(215,21,27)"/><text x="54.8190%" y="127.50"></text></g><g><title>type_op_prove_predicate (393,924 samples, 0.10%)</title><rect x="55.5466%" y="101" width="0.1018%" height="15" fill="rgb(232,23,21)"/><text x="55.7966%" y="111.50"></text></g><g><title>mir_const (902,501 samples, 0.23%)</title><rect x="55.8885%" y="101" width="0.2333%" height="15" fill="rgb(244,5,23)"/><text x="56.1385%" y="111.50"></text></g><g><title>mir_promoted (1,847,342 samples, 0.48%)</title><rect x="55.6484%" y="117" width="0.4775%" height="15" fill="rgb(226,81,46)"/><text x="55.8984%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (2,006,974 samples, 0.52%)</title><rect x="56.1669%" y="117" width="0.5188%" height="15" fill="rgb(247,70,30)"/><text x="56.4169%" y="127.50"></text></g><g><title>normalize_projection_ty (1,193,894 samples, 0.31%)</title><rect x="56.3770%" y="101" width="0.3086%" height="15" fill="rgb(212,68,19)"/><text x="56.6270%" y="111.50"></text></g><g><title>type_op_normalize_predicate (568,537 samples, 0.15%)</title><rect x="56.6856%" y="117" width="0.1470%" height="15" fill="rgb(240,187,13)"/><text x="56.9356%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,252,498 samples, 1.10%)</title><rect x="56.8848%" y="117" width="1.0992%" height="15" fill="rgb(223,113,26)"/><text x="57.1348%" y="127.50"></text></g><g><title>mir_borrowck (27,650,978 samples, 7.15%)</title><rect x="50.8372%" y="133" width="7.1471%" height="15" fill="rgb(206,192,2)"/><text x="51.0872%" y="143.50">mir_borrow..</text></g><g><title>associated_items (408,417 samples, 0.11%)</title><rect x="67.1421%" y="53" width="0.1056%" height="15" fill="rgb(241,108,4)"/><text x="67.3921%" y="63.50"></text></g><g><title>dropck_outlives (1,324,470 samples, 0.34%)</title><rect x="67.2607%" y="53" width="0.3423%" height="15" fill="rgb(247,173,49)"/><text x="67.5107%" y="63.50"></text></g><g><title>adt_dtorck_constraint (550,955 samples, 0.14%)</title><rect x="67.4607%" y="37" width="0.1424%" height="15" fill="rgb(224,114,35)"/><text x="67.7107%" y="47.50"></text></g><g><title>evaluate_obligation (4,368,347 samples, 1.13%)</title><rect x="67.6115%" y="53" width="1.1291%" height="15" fill="rgb(245,159,27)"/><text x="67.8615%" y="63.50"></text></g><g><title>trait_impls_of (551,997 samples, 0.14%)</title><rect x="68.5980%" y="37" width="0.1427%" height="15" fill="rgb(245,172,44)"/><text x="68.8480%" y="47.50"></text></g><g><title>implied_outlives_bounds (494,664 samples, 0.13%)</title><rect x="68.8261%" y="53" width="0.1279%" height="15" fill="rgb(236,23,11)"/><text x="69.0761%" y="63.50"></text></g><g><title>is_copy_raw (1,562,304 samples, 0.40%)</title><rect x="68.9643%" y="53" width="0.4038%" height="15" fill="rgb(205,117,38)"/><text x="69.2143%" y="63.50"></text></g><g><title>evaluate_obligation (1,286,922 samples, 0.33%)</title><rect x="69.0355%" y="37" width="0.3326%" height="15" fill="rgb(237,72,25)"/><text x="69.2855%" y="47.50"></text></g><g><title>method_autoderef_steps (629,936 samples, 0.16%)</title><rect x="69.4513%" y="53" width="0.1628%" height="15" fill="rgb(244,70,9)"/><text x="69.7013%" y="63.50"></text></g><g><title>evaluate_obligation (449,576 samples, 0.12%)</title><rect x="69.4980%" y="37" width="0.1162%" height="15" fill="rgb(217,125,39)"/><text x="69.7480%" y="47.50"></text></g><g><title>mir_built (45,333,045 samples, 11.72%)</title><rect x="58.1501%" y="85" width="11.7175%" height="15" fill="rgb(235,36,10)"/><text x="58.4001%" y="95.50">mir_built</text></g><g><title>typeck (43,731,056 samples, 11.30%)</title><rect x="58.5642%" y="69" width="11.3034%" height="15" fill="rgb(251,123,47)"/><text x="58.8142%" y="79.50">typeck</text></g><g><title>is_copy_raw (446,907 samples, 0.12%)</title><rect x="70.8513%" y="37" width="0.1155%" height="15" fill="rgb(221,13,13)"/><text x="71.1013%" y="47.50"></text></g><g><title>needs_drop_raw (1,009,171 samples, 0.26%)</title><rect x="70.7072%" y="53" width="0.2608%" height="15" fill="rgb(238,131,9)"/><text x="70.9572%" y="63.50"></text></g><g><title>thir_body (981,172 samples, 0.25%)</title><rect x="70.9814%" y="53" width="0.2536%" height="15" fill="rgb(211,50,8)"/><text x="71.2314%" y="63.50"></text></g><g><title>mir_built (4,843,410 samples, 1.25%)</title><rect x="69.9936%" y="69" width="1.2519%" height="15" fill="rgb(245,182,24)"/><text x="70.2436%" y="79.50"></text></g><g><title>mir_built (792,618 samples, 0.20%)</title><rect x="71.3430%" y="53" width="0.2049%" height="15" fill="rgb(242,14,37)"/><text x="71.5930%" y="63.50"></text></g><g><title>mir_const (52,313,619 samples, 13.52%)</title><rect x="58.0443%" y="117" width="13.5218%" height="15" fill="rgb(246,228,12)"/><text x="58.2943%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (52,013,659 samples, 13.44%)</title><rect x="58.1219%" y="101" width="13.4443%" height="15" fill="rgb(213,55,15)"/><text x="58.3719%" y="111.50">unsafety_check_result</text></g><g><title>unsafety_check_result (6,571,344 samples, 1.70%)</title><rect x="69.8676%" y="85" width="1.6985%" height="15" fill="rgb(209,9,3)"/><text x="70.1176%" y="95.50"></text></g><g><title>unsafety_check_result (1,234,747 samples, 0.32%)</title><rect x="71.2470%" y="69" width="0.3192%" height="15" fill="rgb(230,59,30)"/><text x="71.4970%" y="79.50"></text></g><g><title>mir_promoted (52,574,191 samples, 13.59%)</title><rect x="57.9843%" y="133" width="13.5892%" height="15" fill="rgb(209,121,21)"/><text x="58.2343%" y="143.50">mir_promoted</text></g><g><title>type_of (89,427,347 samples, 23.11%)</title><rect x="49.0903%" y="165" width="23.1148%" height="15" fill="rgb(220,109,13)"/><text x="49.3403%" y="175.50">type_of</text></g><g><title>mir_borrowck (89,344,557 samples, 23.09%)</title><rect x="49.1117%" y="149" width="23.0934%" height="15" fill="rgb(232,18,1)"/><text x="49.3617%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,721,129 samples, 0.44%)</title><rect x="71.7603%" y="133" width="0.4449%" height="15" fill="rgb(215,41,42)"/><text x="72.0103%" y="143.50"></text></g><g><title>adt_dtorck_constraint (600,227 samples, 0.16%)</title><rect x="72.9087%" y="133" width="0.1551%" height="15" fill="rgb(224,123,36)"/><text x="73.1587%" y="143.50"></text></g><g><title>dropck_outlives (996,842 samples, 0.26%)</title><rect x="72.8087%" y="149" width="0.2577%" height="15" fill="rgb(240,125,3)"/><text x="73.0587%" y="159.50"></text></g><g><title>item_types_checking (99,194,527 samples, 25.64%)</title><rect x="47.6468%" y="197" width="25.6394%" height="15" fill="rgb(205,98,50)"/><text x="47.8968%" y="207.50">item_types_checking</text></g><g><title>check_mod_item_types (99,188,207 samples, 25.64%)</title><rect x="47.6484%" y="181" width="25.6378%" height="15" fill="rgb(205,185,37)"/><text x="47.8984%" y="191.50">check_mod_item_types</text></g><g><title>typeck (4,182,405 samples, 1.08%)</title><rect x="72.2051%" y="165" width="1.0811%" height="15" fill="rgb(238,207,15)"/><text x="72.4551%" y="175.50"></text></g><g><title>fn_sig (947,290 samples, 0.24%)</title><rect x="73.4235%" y="165" width="0.2449%" height="15" fill="rgb(213,199,42)"/><text x="73.6735%" y="175.50"></text></g><g><title>generics_of (696,749 samples, 0.18%)</title><rect x="73.6683%" y="165" width="0.1801%" height="15" fill="rgb(235,201,11)"/><text x="73.9183%" y="175.50"></text></g><g><title>late_bound_vars_map (399,406 samples, 0.10%)</title><rect x="74.0121%" y="117" width="0.1032%" height="15" fill="rgb(207,46,11)"/><text x="74.2621%" y="127.50"></text></g><g><title>explicit_predicates_of (800,020 samples, 0.21%)</title><rect x="73.9249%" y="133" width="0.2068%" height="15" fill="rgb(241,35,35)"/><text x="74.1749%" y="143.50"></text></g><g><title>predicates_of (1,612,351 samples, 0.42%)</title><rect x="73.8621%" y="165" width="0.4168%" height="15" fill="rgb(243,32,47)"/><text x="74.1121%" y="175.50"></text></g><g><title>predicates_defined_on (1,522,646 samples, 0.39%)</title><rect x="73.8853%" y="149" width="0.3936%" height="15" fill="rgb(247,202,23)"/><text x="74.1353%" y="159.50"></text></g><g><title>inferred_outlives_of (569,346 samples, 0.15%)</title><rect x="74.1317%" y="133" width="0.1472%" height="15" fill="rgb(219,102,11)"/><text x="74.3817%" y="143.50"></text></g><g><title>inferred_outlives_crate (535,156 samples, 0.14%)</title><rect x="74.1405%" y="117" width="0.1383%" height="15" fill="rgb(243,110,44)"/><text x="74.3905%" y="127.50"></text></g><g><title>type_collecting (4,044,825 samples, 1.05%)</title><rect x="73.2879%" y="197" width="1.0455%" height="15" fill="rgb(222,74,54)"/><text x="73.5379%" y="207.50"></text></g><g><title>collect_mod_item_types (4,037,825 samples, 1.04%)</title><rect x="73.2897%" y="181" width="1.0437%" height="15" fill="rgb(216,99,12)"/><text x="73.5397%" y="191.50"></text></g><g><title>evaluate_obligation (1,441,915 samples, 0.37%)</title><rect x="75.6508%" y="165" width="0.3727%" height="15" fill="rgb(226,22,26)"/><text x="75.9008%" y="175.50"></text></g><g><title>implied_outlives_bounds (660,884 samples, 0.17%)</title><rect x="76.0359%" y="165" width="0.1708%" height="15" fill="rgb(217,163,10)"/><text x="76.2859%" y="175.50"></text></g><g><title>param_env (627,376 samples, 0.16%)</title><rect x="76.2068%" y="165" width="0.1622%" height="15" fill="rgb(213,25,53)"/><text x="76.4568%" y="175.50"></text></g><g><title>region_scope_tree (1,025,496 samples, 0.27%)</title><rect x="76.3847%" y="165" width="0.2651%" height="15" fill="rgb(252,105,26)"/><text x="76.6347%" y="175.50"></text></g><g><title>check_impl_item_well_formed (8,732,785 samples, 2.26%)</title><rect x="74.4494%" y="181" width="2.2572%" height="15" fill="rgb(220,39,43)"/><text x="74.6994%" y="191.50">c..</text></g><g><title>adt_sized_constraint (633,335 samples, 0.16%)</title><rect x="77.5095%" y="149" width="0.1637%" height="15" fill="rgb(229,68,48)"/><text x="77.7595%" y="159.50"></text></g><g><title>evaluate_obligation (1,942,227 samples, 0.50%)</title><rect x="77.2470%" y="165" width="0.5020%" height="15" fill="rgb(252,8,32)"/><text x="77.4970%" y="175.50"></text></g><g><title>param_env (428,955 samples, 0.11%)</title><rect x="77.8057%" y="165" width="0.1109%" height="15" fill="rgb(223,20,43)"/><text x="78.0557%" y="175.50"></text></g><g><title>analysis (301,208,650 samples, 77.86%)</title><rect x="0.2197%" y="229" width="77.8553%" height="15" fill="rgb(229,81,49)"/><text x="0.4697%" y="239.50">analysis</text></g><g><title>type_check_crate (206,098,329 samples, 53.27%)</title><rect x="24.8035%" y="213" width="53.2715%" height="15" fill="rgb(236,28,36)"/><text x="25.0535%" y="223.50">type_check_crate</text></g><g><title>wf_checking (14,459,819 samples, 3.74%)</title><rect x="74.3375%" y="197" width="3.7375%" height="15" fill="rgb(249,185,26)"/><text x="74.5875%" y="207.50">wf_c..</text></g><g><title>check_item_well_formed (5,293,930 samples, 1.37%)</title><rect x="76.7066%" y="181" width="1.3684%" height="15" fill="rgb(249,174,33)"/><text x="76.9566%" y="191.50"></text></g><g><title>codegen_crate (467,985 samples, 0.12%)</title><rect x="78.0780%" y="229" width="0.1210%" height="15" fill="rgb(233,201,37)"/><text x="78.3280%" y="239.50"></text></g><g><title>metadata_register_crate (3,225,716 samples, 0.83%)</title><rect x="84.9925%" y="181" width="0.8338%" height="15" fill="rgb(221,78,26)"/><text x="85.2425%" y="191.50"></text></g><g><title>metadata_register_crate (1,063,082 samples, 0.27%)</title><rect x="85.5515%" y="165" width="0.2748%" height="15" fill="rgb(250,127,30)"/><text x="85.8015%" y="175.50"></text></g><g><title>macro_expand_crate (29,243,813 samples, 7.56%)</title><rect x="78.3678%" y="213" width="7.5588%" height="15" fill="rgb(230,49,44)"/><text x="78.6178%" y="223.50">macro_expa..</text></g><g><title>expand_crate (29,225,903 samples, 7.55%)</title><rect x="78.3724%" y="197" width="7.5542%" height="15" fill="rgb(229,67,23)"/><text x="78.6224%" y="207.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (388,144 samples, 0.10%)</title><rect x="85.8263%" y="181" width="0.1003%" height="15" fill="rgb(249,83,47)"/><text x="86.0763%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (505,206 samples, 0.13%)</title><rect x="85.9273%" y="213" width="0.1306%" height="15" fill="rgb(215,43,3)"/><text x="86.1773%" y="223.50"></text></g><g><title>late_resolve_crate (7,005,367 samples, 1.81%)</title><rect x="86.1456%" y="197" width="1.8107%" height="15" fill="rgb(238,154,13)"/><text x="86.3956%" y="207.50">l..</text></g><g><title>configure_and_expand (38,039,500 samples, 9.83%)</title><rect x="78.1989%" y="229" width="9.8323%" height="15" fill="rgb(219,56,2)"/><text x="78.4489%" y="239.50">configure_and_..</text></g><g><title>resolve_crate (7,634,444 samples, 1.97%)</title><rect x="86.0579%" y="213" width="1.9733%" height="15" fill="rgb(233,0,4)"/><text x="86.3079%" y="223.50">r..</text></g><g><title>drop_ast (412,034 samples, 0.11%)</title><rect x="88.0312%" y="229" width="0.1065%" height="15" fill="rgb(235,30,7)"/><text x="88.2812%" y="239.50"></text></g><g><title>early_lint_checks (769,979 samples, 0.20%)</title><rect x="88.1424%" y="229" width="0.1990%" height="15" fill="rgb(250,79,13)"/><text x="88.3924%" y="239.50"></text></g><g><title>free_global_ctxt (6,254,119 samples, 1.62%)</title><rect x="88.3414%" y="229" width="1.6165%" height="15" fill="rgb(211,146,34)"/><text x="88.5914%" y="239.50"></text></g><g><title>layout_of (490,786 samples, 0.13%)</title><rect x="92.4546%" y="197" width="0.1269%" height="15" fill="rgb(228,22,38)"/><text x="92.7046%" y="207.50"></text></g><g><title>is_copy_raw (1,287,349 samples, 0.33%)</title><rect x="94.4312%" y="165" width="0.3327%" height="15" fill="rgb(235,168,5)"/><text x="94.6812%" y="175.50"></text></g><g><title>evaluate_obligation (1,043,968 samples, 0.27%)</title><rect x="94.4941%" y="149" width="0.2698%" height="15" fill="rgb(221,155,16)"/><text x="94.7441%" y="159.50"></text></g><g><title>needs_drop_raw (1,646,221 samples, 0.43%)</title><rect x="94.3414%" y="181" width="0.4255%" height="15" fill="rgb(215,215,53)"/><text x="94.5914%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,740,667 samples, 2.26%)</title><rect x="92.5815%" y="197" width="2.2593%" height="15" fill="rgb(223,4,10)"/><text x="92.8315%" y="207.50">m..</text></g><g><title>optimized_mir (15,330,474 samples, 3.96%)</title><rect x="90.8848%" y="213" width="3.9626%" height="15" fill="rgb(234,103,6)"/><text x="91.1348%" y="223.50">opti..</text></g><g><title>generate_crate_metadata (19,067,721 samples, 4.93%)</title><rect x="89.9579%" y="229" width="4.9286%" height="15" fill="rgb(227,97,0)"/><text x="90.2079%" y="239.50">genera..</text></g><g><title>hir_lowering (7,114,269 samples, 1.84%)</title><rect x="94.8865%" y="229" width="1.8389%" height="15" fill="rgb(234,150,53)"/><text x="95.1365%" y="239.50">h..</text></g><g><title>parse_crate (10,199,553 samples, 2.64%)</title><rect x="96.7408%" y="229" width="2.6363%" height="15" fill="rgb(228,201,54)"/><text x="96.9908%" y="239.50">pa..</text></g><g><title>self_profile_alloc_query_strings (1,562,057 samples, 0.40%)</title><rect x="99.4383%" y="229" width="0.4038%" height="15" fill="rgb(222,22,37)"/><text x="99.6883%" y="239.50"></text></g><g><title>all (386,882,817 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (386,882,817 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (526,696 samples, 0.14%)</title><rect x="99.8639%" y="229" width="0.1361%" height="15" fill="rgb(210,40,34)"/><text x="100.1139%" y="239.50"></text></g></svg></svg>