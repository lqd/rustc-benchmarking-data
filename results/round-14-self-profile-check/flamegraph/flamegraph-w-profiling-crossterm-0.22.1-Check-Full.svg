<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (663,684 samples, 0.11%)</title><rect x="14.1967%" y="197" width="0.1102%" height="15" fill="rgb(227,0,7)"/><text x="14.4467%" y="207.50"></text></g><g><title>param_env (1,238,171 samples, 0.21%)</title><rect x="16.3465%" y="165" width="0.2056%" height="15" fill="rgb(217,0,24)"/><text x="16.5965%" y="175.50"></text></g><g><title>item_attrs (842,608 samples, 0.14%)</title><rect x="17.1471%" y="133" width="0.1399%" height="15" fill="rgb(221,193,54)"/><text x="17.3971%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (817,338 samples, 0.14%)</title><rect x="17.1513%" y="117" width="0.1357%" height="15" fill="rgb(248,212,6)"/><text x="17.4013%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,148,861 samples, 0.19%)</title><rect x="17.1046%" y="149" width="0.1908%" height="15" fill="rgb(208,68,35)"/><text x="17.3546%" y="159.50"></text></g><g><title>is_copy_raw (889,380 samples, 0.15%)</title><rect x="20.7944%" y="133" width="0.1477%" height="15" fill="rgb(232,128,0)"/><text x="21.0444%" y="143.50"></text></g><g><title>evaluate_obligation (668,556 samples, 0.11%)</title><rect x="20.8311%" y="117" width="0.1110%" height="15" fill="rgb(207,160,47)"/><text x="21.0811%" y="127.50"></text></g><g><title>adt_drop_tys (753,177 samples, 0.13%)</title><rect x="21.0103%" y="117" width="0.1251%" height="15" fill="rgb(228,23,34)"/><text x="21.2603%" y="127.50"></text></g><g><title>is_copy_raw (3,105,043 samples, 0.52%)</title><rect x="21.1360%" y="117" width="0.5156%" height="15" fill="rgb(218,30,26)"/><text x="21.3860%" y="127.50"></text></g><g><title>evaluate_obligation (2,581,340 samples, 0.43%)</title><rect x="21.2229%" y="101" width="0.4286%" height="15" fill="rgb(220,122,19)"/><text x="21.4729%" y="111.50"></text></g><g><title>needs_drop_raw (4,285,415 samples, 0.71%)</title><rect x="20.9430%" y="133" width="0.7116%" height="15" fill="rgb(250,228,42)"/><text x="21.1930%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (983,132 samples, 0.16%)</title><rect x="21.8103%" y="117" width="0.1632%" height="15" fill="rgb(240,193,28)"/><text x="22.0603%" y="127.50"></text></g><g><title>resolve_instance (3,037,720 samples, 0.50%)</title><rect x="21.6605%" y="133" width="0.5044%" height="15" fill="rgb(216,20,37)"/><text x="21.9105%" y="143.50"></text></g><g><title>thir_body (8,129,554 samples, 1.35%)</title><rect x="22.2001%" y="133" width="1.3499%" height="15" fill="rgb(206,188,39)"/><text x="22.4501%" y="143.50"></text></g><g><title>mir_const (49,559,037 samples, 8.23%)</title><rect x="15.3476%" y="181" width="8.2290%" height="15" fill="rgb(217,207,13)"/><text x="15.5976%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (42,304,427 samples, 7.02%)</title><rect x="16.5521%" y="165" width="7.0244%" height="15" fill="rgb(231,73,38)"/><text x="16.8021%" y="175.50">unsafety_..</text></g><g><title>mir_built (37,828,556 samples, 6.28%)</title><rect x="17.2953%" y="149" width="6.2812%" height="15" fill="rgb(225,20,46)"/><text x="17.5453%" y="159.50">mir_built</text></g><g><title>mir_const (1,094,291 samples, 0.18%)</title><rect x="23.7472%" y="165" width="0.1817%" height="15" fill="rgb(210,31,41)"/><text x="23.9972%" y="175.50"></text></g><g><title>unsafety_check_result (877,770 samples, 0.15%)</title><rect x="23.7832%" y="149" width="0.1457%" height="15" fill="rgb(221,200,47)"/><text x="24.0332%" y="159.50"></text></g><g><title>mir_built (788,370 samples, 0.13%)</title><rect x="23.7980%" y="133" width="0.1309%" height="15" fill="rgb(226,26,5)"/><text x="24.0480%" y="143.50"></text></g><g><title>mir_promoted (57,965,491 samples, 9.62%)</title><rect x="14.3146%" y="197" width="9.6248%" height="15" fill="rgb(249,33,26)"/><text x="14.5646%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (2,185,417 samples, 0.36%)</title><rect x="23.5765%" y="181" width="0.3629%" height="15" fill="rgb(235,183,28)"/><text x="23.8265%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (1,598,619 samples, 0.27%)</title><rect x="23.9398%" y="197" width="0.2654%" height="15" fill="rgb(221,5,38)"/><text x="24.1898%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,923,341 samples, 0.32%)</title><rect x="24.2053%" y="197" width="0.3194%" height="15" fill="rgb(247,18,42)"/><text x="24.4553%" y="207.50"></text></g><g><title>normalize_projection_ty (1,220,515 samples, 0.20%)</title><rect x="24.3220%" y="181" width="0.2027%" height="15" fill="rgb(241,131,45)"/><text x="24.5720%" y="191.50"></text></g><g><title>type_op_normalize_predicate (741,261 samples, 0.12%)</title><rect x="24.5246%" y="197" width="0.1231%" height="15" fill="rgb(249,31,29)"/><text x="24.7746%" y="207.50"></text></g><g><title>type_op_prove_predicate (9,442,154 samples, 1.57%)</title><rect x="24.6812%" y="197" width="1.5678%" height="15" fill="rgb(225,111,53)"/><text x="24.9312%" y="207.50"></text></g><g><title>MIR_borrow_checking (154,624,087 samples, 25.67%)</title><rect x="0.5782%" y="229" width="25.6744%" height="15" fill="rgb(238,160,17)"/><text x="0.8282%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (153,530,366 samples, 25.49%)</title><rect x="0.7598%" y="213" width="25.4928%" height="15" fill="rgb(214,148,48)"/><text x="1.0098%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,005,662 samples, 0.17%)</title><rect x="26.2526%" y="229" width="0.1670%" height="15" fill="rgb(232,36,49)"/><text x="26.5026%" y="239.50"></text></g><g><title>hir_module_items (1,498,949 samples, 0.25%)</title><rect x="26.4196%" y="229" width="0.2489%" height="15" fill="rgb(209,103,24)"/><text x="26.6696%" y="239.50"></text></g><g><title>codegen_fn_attrs (624,396 samples, 0.10%)</title><rect x="27.1222%" y="165" width="0.1037%" height="15" fill="rgb(229,88,8)"/><text x="27.3722%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,577,916 samples, 0.26%)</title><rect x="26.9719%" y="197" width="0.2620%" height="15" fill="rgb(213,181,19)"/><text x="27.2219%" y="207.50"></text></g><g><title>should_inherit_track_caller (1,268,174 samples, 0.21%)</title><rect x="27.0234%" y="181" width="0.2106%" height="15" fill="rgb(254,191,54)"/><text x="27.2734%" y="191.50"></text></g><g><title>check_mod_attrs (3,334,625 samples, 0.55%)</title><rect x="26.6802%" y="213" width="0.5537%" height="15" fill="rgb(241,83,37)"/><text x="26.9302%" y="223.50"></text></g><g><title>check_mod_const_bodies (884,448 samples, 0.15%)</title><rect x="27.2339%" y="213" width="0.1469%" height="15" fill="rgb(233,36,39)"/><text x="27.4839%" y="223.50"></text></g><g><title>lookup_deprecation_entry (845,829 samples, 0.14%)</title><rect x="27.6245%" y="197" width="0.1404%" height="15" fill="rgb(226,3,54)"/><text x="27.8745%" y="207.50"></text></g><g><title>stability_index (712,318 samples, 0.12%)</title><rect x="27.6467%" y="181" width="0.1183%" height="15" fill="rgb(245,192,40)"/><text x="27.8967%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (1,955,596 samples, 0.32%)</title><rect x="27.4730%" y="213" width="0.3247%" height="15" fill="rgb(238,167,29)"/><text x="27.7230%" y="223.50"></text></g><g><title>misc_checking_1 (7,164,680 samples, 1.19%)</title><rect x="26.6686%" y="229" width="1.1897%" height="15" fill="rgb(232,182,51)"/><text x="26.9186%" y="239.50"></text></g><g><title>check_mod_intrinsics (632,137 samples, 0.10%)</title><rect x="27.8638%" y="197" width="0.1050%" height="15" fill="rgb(231,60,39)"/><text x="28.1138%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (2,701,780 samples, 0.45%)</title><rect x="27.8587%" y="213" width="0.4486%" height="15" fill="rgb(208,69,12)"/><text x="28.1087%" y="223.50"></text></g><g><title>check_mod_liveness (2,039,083 samples, 0.34%)</title><rect x="27.9688%" y="197" width="0.3386%" height="15" fill="rgb(235,93,37)"/><text x="28.2188%" y="207.50"></text></g><g><title>misc_checking_2 (9,474,176 samples, 1.57%)</title><rect x="27.8582%" y="229" width="1.5731%" height="15" fill="rgb(213,116,39)"/><text x="28.1082%" y="239.50"></text></g><g><title>match_checking (6,769,406 samples, 1.12%)</title><rect x="28.3074%" y="213" width="1.1240%" height="15" fill="rgb(222,207,29)"/><text x="28.5574%" y="223.50"></text></g><g><title>check_match (6,421,580 samples, 1.07%)</title><rect x="28.3651%" y="197" width="1.0663%" height="15" fill="rgb(206,96,30)"/><text x="28.6151%" y="207.50"></text></g><g><title>check_private_in_public (1,551,767 samples, 0.26%)</title><rect x="29.4335%" y="213" width="0.2577%" height="15" fill="rgb(218,138,4)"/><text x="29.6835%" y="223.50"></text></g><g><title>death_checking (3,044,754 samples, 0.51%)</title><rect x="29.6912%" y="213" width="0.5056%" height="15" fill="rgb(250,191,14)"/><text x="29.9412%" y="223.50"></text></g><g><title>eval_to_allocation_raw (799,309 samples, 0.13%)</title><rect x="30.7634%" y="181" width="0.1327%" height="15" fill="rgb(239,60,40)"/><text x="31.0134%" y="191.50"></text></g><g><title>eval_to_allocation_raw (793,728 samples, 0.13%)</title><rect x="30.7644%" y="165" width="0.1318%" height="15" fill="rgb(206,27,48)"/><text x="31.0144%" y="175.50"></text></g><g><title>param_env (1,573,197 samples, 0.26%)</title><rect x="30.8961%" y="181" width="0.2612%" height="15" fill="rgb(225,35,8)"/><text x="31.1461%" y="191.50"></text></g><g><title>predicates_of (826,137 samples, 0.14%)</title><rect x="31.0202%" y="165" width="0.1372%" height="15" fill="rgb(250,213,24)"/><text x="31.2702%" y="175.50"></text></g><g><title>predicates_defined_on (710,187 samples, 0.12%)</title><rect x="31.0394%" y="149" width="0.1179%" height="15" fill="rgb(247,123,22)"/><text x="31.2894%" y="159.50"></text></g><g><title>crate_lints (7,085,968 samples, 1.18%)</title><rect x="30.1973%" y="197" width="1.1766%" height="15" fill="rgb(231,138,38)"/><text x="30.4473%" y="207.50"></text></g><g><title>type_of (1,270,743 samples, 0.21%)</title><rect x="31.1629%" y="181" width="0.2110%" height="15" fill="rgb(231,145,46)"/><text x="31.4129%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,022,878 samples, 0.17%)</title><rect x="31.2040%" y="165" width="0.1698%" height="15" fill="rgb(251,118,11)"/><text x="31.4540%" y="175.50"></text></g><g><title>lint_checking (10,669,549 samples, 1.77%)</title><rect x="30.1967%" y="213" width="1.7716%" height="15" fill="rgb(217,147,25)"/><text x="30.4467%" y="223.50">l..</text></g><g><title>module_lints (3,580,211 samples, 0.59%)</title><rect x="31.3739%" y="197" width="0.5945%" height="15" fill="rgb(247,81,37)"/><text x="31.6239%" y="207.50"></text></g><g><title>lint_mod (3,557,011 samples, 0.59%)</title><rect x="31.3777%" y="181" width="0.5906%" height="15" fill="rgb(209,12,38)"/><text x="31.6277%" y="191.50"></text></g><g><title>privacy_access_levels (2,484,847 samples, 0.41%)</title><rect x="31.9684%" y="213" width="0.4126%" height="15" fill="rgb(227,1,9)"/><text x="32.2184%" y="223.50"></text></g><g><title>privacy_checking_modules (6,545,603 samples, 1.09%)</title><rect x="32.3810%" y="213" width="1.0869%" height="15" fill="rgb(248,47,43)"/><text x="32.6310%" y="223.50"></text></g><g><title>check_mod_privacy (6,525,333 samples, 1.08%)</title><rect x="32.3843%" y="197" width="1.0835%" height="15" fill="rgb(221,10,30)"/><text x="32.6343%" y="207.50"></text></g><g><title>misc_checking_3 (24,389,132 samples, 4.05%)</title><rect x="29.4314%" y="229" width="4.0497%" height="15" fill="rgb(210,229,1)"/><text x="29.6814%" y="239.50">misc..</text></g><g><title>impl_parent (4,057,981 samples, 0.67%)</title><rect x="35.0059%" y="165" width="0.6738%" height="15" fill="rgb(222,148,37)"/><text x="35.2559%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,327,039 samples, 0.39%)</title><rect x="35.2933%" y="149" width="0.3864%" height="15" fill="rgb(234,67,33)"/><text x="35.5433%" y="159.50"></text></g><g><title>impl_trait_ref (8,219,923 samples, 1.36%)</title><rect x="35.6799%" y="165" width="1.3649%" height="15" fill="rgb(247,98,35)"/><text x="35.9299%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,493,522 samples, 1.08%)</title><rect x="35.9666%" y="149" width="1.0782%" height="15" fill="rgb(247,138,52)"/><text x="36.2166%" y="159.50"></text></g><g><title>trait_impls_of (1,947,003 samples, 0.32%)</title><rect x="37.0607%" y="165" width="0.3233%" height="15" fill="rgb(213,79,30)"/><text x="37.3107%" y="175.50"></text></g><g><title>implementations_of_trait (781,400 samples, 0.13%)</title><rect x="37.2543%" y="149" width="0.1297%" height="15" fill="rgb(246,177,23)"/><text x="37.5043%" y="159.50"></text></g><g><title>coherent_trait (22,948,987 samples, 3.81%)</title><rect x="33.5738%" y="197" width="3.8105%" height="15" fill="rgb(230,62,27)"/><text x="33.8238%" y="207.50">cohe..</text></g><g><title>specialization_graph_of (21,837,594 samples, 3.63%)</title><rect x="33.7583%" y="181" width="3.6260%" height="15" fill="rgb(216,154,8)"/><text x="34.0083%" y="191.50">spec..</text></g><g><title>coherence_checking (23,573,334 samples, 3.91%)</title><rect x="33.5657%" y="213" width="3.9142%" height="15" fill="rgb(244,35,45)"/><text x="33.8157%" y="223.50">cohe..</text></g><g><title>associated_items (772,092 samples, 0.13%)</title><rect x="58.3970%" y="165" width="0.1282%" height="15" fill="rgb(251,115,12)"/><text x="58.6470%" y="175.50"></text></g><g><title>dropck_outlives (1,113,592 samples, 0.18%)</title><rect x="58.5515%" y="165" width="0.1849%" height="15" fill="rgb(240,54,50)"/><text x="58.8015%" y="175.50"></text></g><g><title>generics_of (1,173,364 samples, 0.19%)</title><rect x="59.9733%" y="149" width="0.1948%" height="15" fill="rgb(233,84,52)"/><text x="60.2233%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (890,841 samples, 0.15%)</title><rect x="60.0202%" y="133" width="0.1479%" height="15" fill="rgb(207,117,47)"/><text x="60.2702%" y="143.50"></text></g><g><title>impl_trait_ref (704,208 samples, 0.12%)</title><rect x="60.2138%" y="149" width="0.1169%" height="15" fill="rgb(249,43,39)"/><text x="60.4638%" y="159.50"></text></g><g><title>predicates_of (1,403,755 samples, 0.23%)</title><rect x="60.3411%" y="149" width="0.2331%" height="15" fill="rgb(209,38,44)"/><text x="60.5911%" y="159.50"></text></g><g><title>predicates_defined_on (882,471 samples, 0.15%)</title><rect x="60.4277%" y="133" width="0.1465%" height="15" fill="rgb(236,212,23)"/><text x="60.6777%" y="143.50"></text></g><g><title>specializes (2,661,421 samples, 0.44%)</title><rect x="60.5742%" y="149" width="0.4419%" height="15" fill="rgb(242,79,21)"/><text x="60.8242%" y="159.50"></text></g><g><title>param_env (1,583,707 samples, 0.26%)</title><rect x="60.7531%" y="133" width="0.2630%" height="15" fill="rgb(211,96,35)"/><text x="61.0031%" y="143.50"></text></g><g><title>def_span (670,100 samples, 0.11%)</title><rect x="60.9048%" y="117" width="0.1113%" height="15" fill="rgb(253,215,40)"/><text x="61.1548%" y="127.50"></text></g><g><title>evaluate_obligation (13,929,580 samples, 2.31%)</title><rect x="58.7904%" y="165" width="2.3129%" height="15" fill="rgb(211,81,21)"/><text x="59.0404%" y="175.50">e..</text></g><g><title>generics_of (806,241 samples, 0.13%)</title><rect x="61.1607%" y="165" width="0.1339%" height="15" fill="rgb(208,190,38)"/><text x="61.4107%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (620,969 samples, 0.10%)</title><rect x="61.1915%" y="149" width="0.1031%" height="15" fill="rgb(235,213,38)"/><text x="61.4415%" y="159.50"></text></g><g><title>method_autoderef_steps (1,060,140 samples, 0.18%)</title><rect x="61.4252%" y="165" width="0.1760%" height="15" fill="rgb(237,122,38)"/><text x="61.6752%" y="175.50"></text></g><g><title>predicates_of (631,475 samples, 0.10%)</title><rect x="61.6498%" y="165" width="0.1049%" height="15" fill="rgb(244,218,35)"/><text x="61.8998%" y="175.50"></text></g><g><title>associated_items (684,339 samples, 0.11%)</title><rect x="65.9530%" y="149" width="0.1136%" height="15" fill="rgb(240,68,47)"/><text x="66.2030%" y="159.50"></text></g><g><title>adt_dtorck_constraint (746,060 samples, 0.12%)</title><rect x="66.1402%" y="133" width="0.1239%" height="15" fill="rgb(210,16,53)"/><text x="66.3902%" y="143.50"></text></g><g><title>dropck_outlives (1,203,045 samples, 0.20%)</title><rect x="66.0802%" y="149" width="0.1998%" height="15" fill="rgb(235,124,12)"/><text x="66.3302%" y="159.50"></text></g><g><title>evaluate_obligation (4,751,309 samples, 0.79%)</title><rect x="66.2807%" y="149" width="0.7889%" height="15" fill="rgb(224,169,11)"/><text x="66.5307%" y="159.50"></text></g><g><title>typeck (34,617,268 samples, 5.75%)</title><rect x="61.8115%" y="165" width="5.7480%" height="15" fill="rgb(250,166,2)"/><text x="62.0615%" y="175.50">typeck</text></g><g><title>item_bodies_checking (181,108,363 samples, 30.07%)</title><rect x="37.5304%" y="213" width="30.0720%" height="15" fill="rgb(242,216,29)"/><text x="37.7804%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (181,104,523 samples, 30.07%)</title><rect x="37.5310%" y="197" width="30.0713%" height="15" fill="rgb(230,116,27)"/><text x="37.7810%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (180,376,888 samples, 29.95%)</title><rect x="37.6518%" y="181" width="29.9505%" height="15" fill="rgb(228,99,48)"/><text x="37.9018%" y="191.50">typeck</text></g><g><title>impl_item_implementor_ids (675,669 samples, 0.11%)</title><rect x="69.1023%" y="181" width="0.1122%" height="15" fill="rgb(253,11,6)"/><text x="69.3523%" y="191.50"></text></g><g><title>mir_const (1,252,224 samples, 0.21%)</title><rect x="69.3547%" y="133" width="0.2079%" height="15" fill="rgb(247,143,39)"/><text x="69.6047%" y="143.50"></text></g><g><title>unsafety_check_result (1,201,143 samples, 0.20%)</title><rect x="69.3631%" y="117" width="0.1994%" height="15" fill="rgb(236,97,10)"/><text x="69.6131%" y="127.50"></text></g><g><title>mir_built (1,160,373 samples, 0.19%)</title><rect x="69.3699%" y="101" width="0.1927%" height="15" fill="rgb(233,208,19)"/><text x="69.6199%" y="111.50"></text></g><g><title>typeck (933,870 samples, 0.16%)</title><rect x="69.4075%" y="85" width="0.1551%" height="15" fill="rgb(216,164,2)"/><text x="69.6575%" y="95.50"></text></g><g><title>mir_promoted (1,301,694 samples, 0.22%)</title><rect x="69.3467%" y="149" width="0.2161%" height="15" fill="rgb(220,129,5)"/><text x="69.5967%" y="159.50"></text></g><g><title>type_of (1,839,401 samples, 0.31%)</title><rect x="69.2748%" y="181" width="0.3054%" height="15" fill="rgb(242,17,10)"/><text x="69.5248%" y="191.50"></text></g><g><title>mir_borrowck (1,808,590 samples, 0.30%)</title><rect x="69.2799%" y="165" width="0.3003%" height="15" fill="rgb(242,107,0)"/><text x="69.5299%" y="175.50"></text></g><g><title>adt_def (707,358 samples, 0.12%)</title><rect x="69.6716%" y="85" width="0.1175%" height="15" fill="rgb(251,28,31)"/><text x="69.9216%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (706,858 samples, 0.12%)</title><rect x="69.6717%" y="69" width="0.1174%" height="15" fill="rgb(233,223,10)"/><text x="69.9217%" y="79.50"></text></g><g><title>item_attrs (698,588 samples, 0.12%)</title><rect x="69.6730%" y="53" width="0.1160%" height="15" fill="rgb(215,21,27)"/><text x="69.9230%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (698,048 samples, 0.12%)</title><rect x="69.6731%" y="37" width="0.1159%" height="15" fill="rgb(232,23,21)"/><text x="69.9231%" y="47.50"></text></g><g><title>adt_dtorck_constraint (723,858 samples, 0.12%)</title><rect x="69.6702%" y="101" width="0.1202%" height="15" fill="rgb(244,5,23)"/><text x="69.9202%" y="111.50"></text></g><g><title>adt_dtorck_constraint (743,688 samples, 0.12%)</title><rect x="69.6677%" y="117" width="0.1235%" height="15" fill="rgb(226,81,46)"/><text x="69.9177%" y="127.50"></text></g><g><title>adt_dtorck_constraint (778,008 samples, 0.13%)</title><rect x="69.6638%" y="133" width="0.1292%" height="15" fill="rgb(247,70,30)"/><text x="69.9138%" y="143.50"></text></g><g><title>dropck_outlives (865,041 samples, 0.14%)</title><rect x="69.6512%" y="165" width="0.1436%" height="15" fill="rgb(212,68,19)"/><text x="69.9012%" y="175.50"></text></g><g><title>adt_dtorck_constraint (822,189 samples, 0.14%)</title><rect x="69.6583%" y="149" width="0.1365%" height="15" fill="rgb(240,187,13)"/><text x="69.9083%" y="159.50"></text></g><g><title>item_types_checking (13,301,279 samples, 2.21%)</title><rect x="67.6023%" y="213" width="2.2086%" height="15" fill="rgb(223,113,26)"/><text x="67.8523%" y="223.50">i..</text></g><g><title>check_mod_item_types (13,274,319 samples, 2.20%)</title><rect x="67.6068%" y="197" width="2.2041%" height="15" fill="rgb(206,192,2)"/><text x="67.8568%" y="207.50">c..</text></g><g><title>typeck (1,389,685 samples, 0.23%)</title><rect x="69.5802%" y="181" width="0.2307%" height="15" fill="rgb(241,108,4)"/><text x="69.8302%" y="191.50"></text></g><g><title>fn_sig (1,861,666 samples, 0.31%)</title><rect x="70.2441%" y="181" width="0.3091%" height="15" fill="rgb(247,173,49)"/><text x="70.4941%" y="191.50"></text></g><g><title>named_region_map (4,019,366 samples, 0.67%)</title><rect x="70.7222%" y="165" width="0.6674%" height="15" fill="rgb(224,114,35)"/><text x="70.9722%" y="175.50"></text></g><g><title>resolve_lifetimes (3,818,112 samples, 0.63%)</title><rect x="70.7556%" y="149" width="0.6340%" height="15" fill="rgb(245,159,27)"/><text x="71.0056%" y="159.50"></text></g><g><title>lint_levels (1,623,508 samples, 0.27%)</title><rect x="71.1200%" y="133" width="0.2696%" height="15" fill="rgb(245,172,44)"/><text x="71.3700%" y="143.50"></text></g><g><title>generics_of (5,147,053 samples, 0.85%)</title><rect x="70.5532%" y="181" width="0.8546%" height="15" fill="rgb(236,23,11)"/><text x="70.8032%" y="191.50"></text></g><g><title>explicit_predicates_of (1,274,375 samples, 0.21%)</title><rect x="71.6789%" y="149" width="0.2116%" height="15" fill="rgb(205,117,38)"/><text x="71.9289%" y="159.50"></text></g><g><title>predicates_of (3,503,790 samples, 0.58%)</title><rect x="71.4823%" y="181" width="0.5818%" height="15" fill="rgb(237,72,25)"/><text x="71.7323%" y="191.50"></text></g><g><title>predicates_defined_on (3,032,314 samples, 0.50%)</title><rect x="71.5606%" y="165" width="0.5035%" height="15" fill="rgb(244,70,9)"/><text x="71.8106%" y="175.50"></text></g><g><title>inferred_outlives_of (1,045,272 samples, 0.17%)</title><rect x="71.8905%" y="149" width="0.1736%" height="15" fill="rgb(217,125,39)"/><text x="72.1405%" y="159.50"></text></g><g><title>inferred_outlives_crate (895,470 samples, 0.15%)</title><rect x="71.9154%" y="133" width="0.1487%" height="15" fill="rgb(235,36,10)"/><text x="72.1654%" y="143.50"></text></g><g><title>type_collecting (14,181,238 samples, 2.35%)</title><rect x="69.8132%" y="213" width="2.3547%" height="15" fill="rgb(251,123,47)"/><text x="70.0632%" y="223.50">t..</text></g><g><title>collect_mod_item_types (14,136,918 samples, 2.35%)</title><rect x="69.8205%" y="197" width="2.3474%" height="15" fill="rgb(221,13,13)"/><text x="70.0705%" y="207.50">c..</text></g><g><title>evaluate_obligation (2,596,200 samples, 0.43%)</title><rect x="74.6035%" y="181" width="0.4311%" height="15" fill="rgb(238,131,9)"/><text x="74.8535%" y="191.50"></text></g><g><title>implied_outlives_bounds (1,042,456 samples, 0.17%)</title><rect x="75.0395%" y="181" width="0.1731%" height="15" fill="rgb(211,50,8)"/><text x="75.2895%" y="191.50"></text></g><g><title>param_env (1,780,766 samples, 0.30%)</title><rect x="75.2126%" y="181" width="0.2957%" height="15" fill="rgb(245,182,24)"/><text x="75.4626%" y="191.50"></text></g><g><title>region_scope_tree (2,719,096 samples, 0.45%)</title><rect x="75.5190%" y="181" width="0.4515%" height="15" fill="rgb(242,14,37)"/><text x="75.7690%" y="191.50"></text></g><g><title>check_impl_item_well_formed (21,127,445 samples, 3.51%)</title><rect x="72.4719%" y="197" width="3.5081%" height="15" fill="rgb(246,228,12)"/><text x="72.7219%" y="207.50">che..</text></g><g><title>eval_to_const_value_raw (1,495,666 samples, 0.25%)</title><rect x="77.6447%" y="181" width="0.2483%" height="15" fill="rgb(213,55,15)"/><text x="77.8947%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,484,576 samples, 0.25%)</title><rect x="77.6466%" y="165" width="0.2465%" height="15" fill="rgb(209,9,3)"/><text x="77.8966%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,482,256 samples, 0.25%)</title><rect x="77.6469%" y="149" width="0.2461%" height="15" fill="rgb(230,59,30)"/><text x="77.8969%" y="159.50"></text></g><g><title>adt_sized_constraint (723,110 samples, 0.12%)</title><rect x="78.6476%" y="165" width="0.1201%" height="15" fill="rgb(209,121,21)"/><text x="78.8976%" y="175.50"></text></g><g><title>evaluate_obligation (5,753,587 samples, 0.96%)</title><rect x="77.8931%" y="181" width="0.9553%" height="15" fill="rgb(220,109,13)"/><text x="78.1431%" y="191.50"></text></g><g><title>object_safety_violations (1,011,790 samples, 0.17%)</title><rect x="78.9529%" y="181" width="0.1680%" height="15" fill="rgb(232,18,1)"/><text x="79.2029%" y="191.50"></text></g><g><title>param_env (2,252,561 samples, 0.37%)</title><rect x="79.1209%" y="181" width="0.3740%" height="15" fill="rgb(215,41,42)"/><text x="79.3709%" y="191.50"></text></g><g><title>region_scope_tree (692,635 samples, 0.12%)</title><rect x="79.5305%" y="181" width="0.1150%" height="15" fill="rgb(224,123,36)"/><text x="79.7805%" y="191.50"></text></g><g><title>check_item_well_formed (22,531,580 samples, 3.74%)</title><rect x="75.9800%" y="197" width="3.7412%" height="15" fill="rgb(240,125,3)"/><text x="76.2300%" y="207.50">chec..</text></g><g><title>analysis (480,564,549 samples, 79.79%)</title><rect x="0.2774%" y="245" width="79.7949%" height="15" fill="rgb(205,98,50)"/><text x="0.5274%" y="255.50">analysis</text></g><g><title>type_check_crate (280,595,835 samples, 46.59%)</title><rect x="33.4811%" y="229" width="46.5913%" height="15" fill="rgb(205,185,37)"/><text x="33.7311%" y="239.50">type_check_crate</text></g><g><title>wf_checking (47,559,161 samples, 7.90%)</title><rect x="72.1754%" y="213" width="7.8969%" height="15" fill="rgb(238,207,15)"/><text x="72.4254%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,114,603 samples, 0.35%)</title><rect x="79.7212%" y="197" width="0.3511%" height="15" fill="rgb(213,199,42)"/><text x="79.9712%" y="207.50"></text></g><g><title>AST_validation (782,978 samples, 0.13%)</title><rect x="80.1764%" y="229" width="0.1300%" height="15" fill="rgb(235,201,11)"/><text x="80.4264%" y="239.50"></text></g><g><title>metadata_register_crate (1,761,480 samples, 0.29%)</title><rect x="89.3628%" y="197" width="0.2925%" height="15" fill="rgb(207,46,11)"/><text x="89.6128%" y="207.50"></text></g><g><title>metadata_register_crate (728,366 samples, 0.12%)</title><rect x="89.5343%" y="181" width="0.1209%" height="15" fill="rgb(241,35,35)"/><text x="89.7843%" y="191.50"></text></g><g><title>macro_expand_crate (56,724,594 samples, 9.42%)</title><rect x="80.3895%" y="229" width="9.4188%" height="15" fill="rgb(243,32,47)"/><text x="80.6395%" y="239.50">macro_expand_..</text></g><g><title>expand_crate (56,712,403 samples, 9.42%)</title><rect x="80.3915%" y="213" width="9.4168%" height="15" fill="rgb(247,202,23)"/><text x="80.6415%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (921,541 samples, 0.15%)</title><rect x="89.6553%" y="197" width="0.1530%" height="15" fill="rgb(219,102,11)"/><text x="89.9053%" y="207.50"></text></g><g><title>finalize_macro_resolutions (1,059,282 samples, 0.18%)</title><rect x="89.8793%" y="213" width="0.1759%" height="15" fill="rgb(243,110,44)"/><text x="90.1293%" y="223.50"></text></g><g><title>late_resolve_crate (10,294,865 samples, 1.71%)</title><rect x="90.0552%" y="213" width="1.7094%" height="15" fill="rgb(222,74,54)"/><text x="90.3052%" y="223.50"></text></g><g><title>resolve_check_unused (649,787 samples, 0.11%)</title><rect x="91.7799%" y="213" width="0.1079%" height="15" fill="rgb(216,99,12)"/><text x="92.0299%" y="223.50"></text></g><g><title>configure_and_expand (70,992,402 samples, 11.79%)</title><rect x="80.1510%" y="245" width="11.7879%" height="15" fill="rgb(226,22,26)"/><text x="80.4010%" y="255.50">configure_and_exp..</text></g><g><title>resolve_crate (12,747,173 samples, 2.12%)</title><rect x="89.8223%" y="229" width="2.1166%" height="15" fill="rgb(217,163,10)"/><text x="90.0723%" y="239.50">r..</text></g><g><title>drop_ast (1,407,805 samples, 0.23%)</title><rect x="91.9389%" y="245" width="0.2338%" height="15" fill="rgb(213,25,53)"/><text x="92.1889%" y="255.50"></text></g><g><title>early_lint_checks (3,058,904 samples, 0.51%)</title><rect x="92.1764%" y="245" width="0.5079%" height="15" fill="rgb(252,105,26)"/><text x="92.4264%" y="255.50"></text></g><g><title>free_global_ctxt (7,761,307 samples, 1.29%)</title><rect x="92.6843%" y="245" width="1.2887%" height="15" fill="rgb(220,39,43)"/><text x="92.9343%" y="255.50"></text></g><g><title>mir_for_ctfe (613,697 samples, 0.10%)</title><rect x="95.2657%" y="229" width="0.1019%" height="15" fill="rgb(229,68,48)"/><text x="95.5157%" y="239.50"></text></g><g><title>generate_crate_metadata (8,874,899 samples, 1.47%)</title><rect x="93.9730%" y="245" width="1.4736%" height="15" fill="rgb(252,8,32)"/><text x="94.2230%" y="255.50"></text></g><g><title>hir_lowering (23,358,012 samples, 3.88%)</title><rect x="95.4466%" y="245" width="3.8785%" height="15" fill="rgb(223,20,43)"/><text x="95.6966%" y="255.50">hir_..</text></g><g><title>self_profile_alloc_query_strings (2,591,168 samples, 0.43%)</title><rect x="99.4290%" y="245" width="0.4302%" height="15" fill="rgb(229,81,49)"/><text x="99.6790%" y="255.50"></text></g><g><title>all (602,249,447 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (602,249,447 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (707,997 samples, 0.12%)</title><rect x="99.8824%" y="245" width="0.1176%" height="15" fill="rgb(249,174,33)"/><text x="100.1324%" y="255.50"></text></g></svg></svg>