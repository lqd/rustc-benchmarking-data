<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (189,752 samples, 0.24%)</title><rect x="8.9739%" y="101" width="0.2437%" height="15" fill="rgb(227,0,7)"/><text x="9.2239%" y="111.50"></text></g><g><title>item_attrs (247,172 samples, 0.32%)</title><rect x="9.6061%" y="69" width="0.3175%" height="15" fill="rgb(217,0,24)"/><text x="9.8561%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (241,092 samples, 0.31%)</title><rect x="9.6139%" y="53" width="0.3096%" height="15" fill="rgb(221,193,54)"/><text x="9.8639%" y="63.50"></text></g><g><title>codegen_fn_attrs (311,194 samples, 0.40%)</title><rect x="9.5325%" y="85" width="0.3997%" height="15" fill="rgb(248,212,6)"/><text x="9.7825%" y="95.50"></text></g><g><title>adt_drop_tys (184,551 samples, 0.24%)</title><rect x="11.3652%" y="53" width="0.2370%" height="15" fill="rgb(208,68,35)"/><text x="11.6152%" y="63.50"></text></g><g><title>param_env (90,281 samples, 0.12%)</title><rect x="11.4862%" y="37" width="0.1160%" height="15" fill="rgb(232,128,0)"/><text x="11.7362%" y="47.50"></text></g><g><title>needs_drop_raw (775,741 samples, 1.00%)</title><rect x="11.2653%" y="69" width="0.9963%" height="15" fill="rgb(207,160,47)"/><text x="11.5153%" y="79.50"></text></g><g><title>is_copy_raw (513,408 samples, 0.66%)</title><rect x="11.6022%" y="53" width="0.6594%" height="15" fill="rgb(228,23,34)"/><text x="11.8522%" y="63.50"></text></g><g><title>evaluate_obligation (406,335 samples, 0.52%)</title><rect x="11.7397%" y="37" width="0.5219%" height="15" fill="rgb(218,30,26)"/><text x="11.9897%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (107,691 samples, 0.14%)</title><rect x="12.4233%" y="53" width="0.1383%" height="15" fill="rgb(220,122,19)"/><text x="12.6733%" y="63.50"></text></g><g><title>resolve_instance (338,405 samples, 0.43%)</title><rect x="12.2616%" y="69" width="0.4346%" height="15" fill="rgb(250,228,42)"/><text x="12.5116%" y="79.50"></text></g><g><title>thir_body (328,024 samples, 0.42%)</title><rect x="12.7147%" y="69" width="0.4213%" height="15" fill="rgb(240,193,28)"/><text x="12.9647%" y="79.50"></text></g><g><title>mir_const (3,662,361 samples, 4.70%)</title><rect x="8.4499%" y="117" width="4.7038%" height="15" fill="rgb(216,20,37)"/><text x="8.6999%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (3,064,694 samples, 3.94%)</title><rect x="9.2176%" y="101" width="3.9361%" height="15" fill="rgb(206,188,39)"/><text x="9.4676%" y="111.50">unsa..</text></g><g><title>mir_built (2,508,268 samples, 3.22%)</title><rect x="9.9322%" y="85" width="3.2215%" height="15" fill="rgb(217,207,13)"/><text x="10.1822%" y="95.50">mir..</text></g><g><title>mir_promoted (4,073,003 samples, 5.23%)</title><rect x="7.9538%" y="133" width="5.2312%" height="15" fill="rgb(231,73,38)"/><text x="8.2038%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (97,921 samples, 0.13%)</title><rect x="13.1849%" y="133" width="0.1258%" height="15" fill="rgb(225,20,46)"/><text x="13.4349%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (120,062 samples, 0.15%)</title><rect x="13.3107%" y="133" width="0.1542%" height="15" fill="rgb(210,31,41)"/><text x="13.5607%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,146,390 samples, 1.47%)</title><rect x="13.4649%" y="133" width="1.4724%" height="15" fill="rgb(221,200,47)"/><text x="13.7149%" y="143.50"></text></g><g><title>MIR_borrow_checking (10,666,038 samples, 13.70%)</title><rect x="1.2416%" y="165" width="13.6989%" height="15" fill="rgb(226,26,5)"/><text x="1.4916%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,600,056 samples, 13.61%)</title><rect x="1.3263%" y="149" width="13.6142%" height="15" fill="rgb(249,33,26)"/><text x="1.5763%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (223,663 samples, 0.29%)</title><rect x="14.9564%" y="165" width="0.2873%" height="15" fill="rgb(235,183,28)"/><text x="15.2064%" y="175.50"></text></g><g><title>associated_item (88,290 samples, 0.11%)</title><rect x="15.7566%" y="101" width="0.1134%" height="15" fill="rgb(221,5,38)"/><text x="16.0066%" y="111.50"></text></g><g><title>get_lang_items (116,342 samples, 0.15%)</title><rect x="15.9215%" y="85" width="0.1494%" height="15" fill="rgb(247,18,42)"/><text x="16.1715%" y="95.50"></text></g><g><title>codegen_fn_attrs (291,363 samples, 0.37%)</title><rect x="15.8699%" y="101" width="0.3742%" height="15" fill="rgb(241,131,45)"/><text x="16.1199%" y="111.50"></text></g><g><title>codegen_fn_attrs (532,525 samples, 0.68%)</title><rect x="15.5719%" y="133" width="0.6839%" height="15" fill="rgb(249,31,29)"/><text x="15.8219%" y="143.50"></text></g><g><title>should_inherit_track_caller (453,474 samples, 0.58%)</title><rect x="15.6735%" y="117" width="0.5824%" height="15" fill="rgb(225,111,53)"/><text x="15.9235%" y="127.50"></text></g><g><title>check_mod_attrs (759,528 samples, 0.98%)</title><rect x="15.2809%" y="149" width="0.9755%" height="15" fill="rgb(238,160,17)"/><text x="15.5309%" y="159.50"></text></g><g><title>check_mod_const_bodies (112,481 samples, 0.14%)</title><rect x="16.2564%" y="149" width="0.1445%" height="15" fill="rgb(214,148,48)"/><text x="16.5064%" y="159.50"></text></g><g><title>lookup_deprecation_entry (158,884 samples, 0.20%)</title><rect x="16.7097%" y="133" width="0.2041%" height="15" fill="rgb(232,36,49)"/><text x="16.9597%" y="143.50"></text></g><g><title>stability_index (86,691 samples, 0.11%)</title><rect x="16.8024%" y="117" width="0.1113%" height="15" fill="rgb(209,103,24)"/><text x="17.0524%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (451,875 samples, 0.58%)</title><rect x="16.4744%" y="149" width="0.5804%" height="15" fill="rgb(229,88,8)"/><text x="16.7244%" y="159.50"></text></g><g><title>misc_checking_1 (1,469,426 samples, 1.89%)</title><rect x="15.2441%" y="165" width="1.8873%" height="15" fill="rgb(213,181,19)"/><text x="15.4941%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (176,882 samples, 0.23%)</title><rect x="17.1333%" y="149" width="0.2272%" height="15" fill="rgb(254,191,54)"/><text x="17.3833%" y="159.50"></text></g><g><title>check_mod_liveness (144,971 samples, 0.19%)</title><rect x="17.1743%" y="133" width="0.1862%" height="15" fill="rgb(241,83,37)"/><text x="17.4243%" y="143.50"></text></g><g><title>misc_checking_2 (408,005 samples, 0.52%)</title><rect x="17.1314%" y="165" width="0.5240%" height="15" fill="rgb(233,36,39)"/><text x="17.3814%" y="175.50"></text></g><g><title>match_checking (229,613 samples, 0.29%)</title><rect x="17.3605%" y="149" width="0.2949%" height="15" fill="rgb(226,3,54)"/><text x="17.6105%" y="159.50"></text></g><g><title>check_match (212,992 samples, 0.27%)</title><rect x="17.3818%" y="133" width="0.2736%" height="15" fill="rgb(245,192,40)"/><text x="17.6318%" y="143.50"></text></g><g><title>check_private_in_public (87,291 samples, 0.11%)</title><rect x="17.6662%" y="149" width="0.1121%" height="15" fill="rgb(238,167,29)"/><text x="17.9162%" y="159.50"></text></g><g><title>death_checking (165,922 samples, 0.21%)</title><rect x="17.7784%" y="149" width="0.2131%" height="15" fill="rgb(232,182,51)"/><text x="18.0284%" y="159.50"></text></g><g><title>crate_lints (1,538,947 samples, 1.98%)</title><rect x="17.9931%" y="133" width="1.9765%" height="15" fill="rgb(231,60,39)"/><text x="18.2431%" y="143.50">c..</text></g><g><title>type_of (1,001,660 samples, 1.29%)</title><rect x="18.6832%" y="117" width="1.2865%" height="15" fill="rgb(208,69,12)"/><text x="18.9332%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (760,277 samples, 0.98%)</title><rect x="18.9932%" y="101" width="0.9765%" height="15" fill="rgb(235,93,37)"/><text x="19.2432%" y="111.50"></text></g><g><title>lint_checking (1,696,199 samples, 2.18%)</title><rect x="17.9915%" y="149" width="2.1785%" height="15" fill="rgb(213,116,39)"/><text x="18.2415%" y="159.50">l..</text></g><g><title>module_lints (155,962 samples, 0.20%)</title><rect x="19.9697%" y="133" width="0.2003%" height="15" fill="rgb(222,207,29)"/><text x="20.2197%" y="143.50"></text></g><g><title>lint_mod (153,462 samples, 0.20%)</title><rect x="19.9729%" y="117" width="0.1971%" height="15" fill="rgb(206,96,30)"/><text x="20.2229%" y="127.50"></text></g><g><title>privacy_access_levels (113,931 samples, 0.15%)</title><rect x="20.1700%" y="149" width="0.1463%" height="15" fill="rgb(218,138,4)"/><text x="20.4200%" y="159.50"></text></g><g><title>privacy_checking_modules (301,973 samples, 0.39%)</title><rect x="20.3163%" y="149" width="0.3878%" height="15" fill="rgb(250,191,14)"/><text x="20.5663%" y="159.50"></text></g><g><title>check_mod_privacy (300,203 samples, 0.39%)</title><rect x="20.3186%" y="133" width="0.3856%" height="15" fill="rgb(239,60,40)"/><text x="20.5686%" y="143.50"></text></g><g><title>misc_checking_3 (2,383,606 samples, 3.06%)</title><rect x="17.6554%" y="165" width="3.0614%" height="15" fill="rgb(206,27,48)"/><text x="17.9054%" y="175.50">mis..</text></g><g><title>impl_parent (1,868,141 samples, 2.40%)</title><rect x="24.7245%" y="101" width="2.3993%" height="15" fill="rgb(225,35,8)"/><text x="24.9745%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,102,105 samples, 1.42%)</title><rect x="25.7084%" y="85" width="1.4155%" height="15" fill="rgb(250,213,24)"/><text x="25.9584%" y="95.50"></text></g><g><title>impl_trait_ref (6,756,041 samples, 8.68%)</title><rect x="27.1239%" y="101" width="8.6771%" height="15" fill="rgb(247,123,22)"/><text x="27.3739%" y="111.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,988,696 samples, 7.69%)</title><rect x="28.1094%" y="85" width="7.6916%" height="15" fill="rgb(231,138,38)"/><text x="28.3594%" y="95.50">metadata_de..</text></g><g><title>coherent_trait (12,362,127 samples, 15.88%)</title><rect x="20.8101%" y="133" width="15.8773%" height="15" fill="rgb(231,145,46)"/><text x="21.0601%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (12,340,167 samples, 15.85%)</title><rect x="20.8383%" y="117" width="15.8491%" height="15" fill="rgb(251,118,11)"/><text x="21.0883%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (687,177 samples, 0.88%)</title><rect x="35.8048%" y="101" width="0.8826%" height="15" fill="rgb(217,147,25)"/><text x="36.0548%" y="111.50"></text></g><g><title>implementations_of_trait (175,431 samples, 0.23%)</title><rect x="36.4621%" y="85" width="0.2253%" height="15" fill="rgb(247,81,37)"/><text x="36.7121%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (128,911 samples, 0.17%)</title><rect x="36.5218%" y="69" width="0.1656%" height="15" fill="rgb(209,12,38)"/><text x="36.7718%" y="79.50"></text></g><g><title>coherence_checking (12,480,538 samples, 16.03%)</title><rect x="20.7768%" y="149" width="16.0294%" height="15" fill="rgb(227,1,9)"/><text x="21.0268%" y="159.50">coherence_checking</text></g><g><title>adt_def (82,802 samples, 0.11%)</title><rect x="42.4748%" y="69" width="0.1063%" height="15" fill="rgb(248,47,43)"/><text x="42.7248%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (80,682 samples, 0.10%)</title><rect x="42.4775%" y="53" width="0.1036%" height="15" fill="rgb(221,10,30)"/><text x="42.7275%" y="63.50"></text></g><g><title>adt_sized_constraint (122,042 samples, 0.16%)</title><rect x="42.4697%" y="85" width="0.1567%" height="15" fill="rgb(210,229,1)"/><text x="42.7197%" y="95.50"></text></g><g><title>adt_sized_constraint (159,083 samples, 0.20%)</title><rect x="42.4227%" y="101" width="0.2043%" height="15" fill="rgb(222,148,37)"/><text x="42.6727%" y="111.50"></text></g><g><title>associated_items (86,280 samples, 0.11%)</title><rect x="42.6271%" y="101" width="0.1108%" height="15" fill="rgb(234,67,33)"/><text x="42.8771%" y="111.50"></text></g><g><title>adt_def (92,621 samples, 0.12%)</title><rect x="42.9461%" y="69" width="0.1190%" height="15" fill="rgb(247,98,35)"/><text x="43.1961%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (91,111 samples, 0.12%)</title><rect x="42.9481%" y="53" width="0.1170%" height="15" fill="rgb(247,138,52)"/><text x="43.1981%" y="63.50"></text></g><g><title>adt_dtorck_constraint (108,911 samples, 0.14%)</title><rect x="43.1700%" y="37" width="0.1399%" height="15" fill="rgb(213,79,30)"/><text x="43.4200%" y="47.50"></text></g><g><title>adt_dtorck_constraint (162,552 samples, 0.21%)</title><rect x="43.1135%" y="53" width="0.2088%" height="15" fill="rgb(246,177,23)"/><text x="43.3635%" y="63.50"></text></g><g><title>adt_dtorck_constraint (182,134 samples, 0.23%)</title><rect x="43.0975%" y="69" width="0.2339%" height="15" fill="rgb(230,62,27)"/><text x="43.3475%" y="79.50"></text></g><g><title>adt_dtorck_constraint (357,475 samples, 0.46%)</title><rect x="42.9082%" y="85" width="0.4591%" height="15" fill="rgb(216,154,8)"/><text x="43.1582%" y="95.50"></text></g><g><title>dropck_outlives (478,245 samples, 0.61%)</title><rect x="42.7648%" y="101" width="0.6142%" height="15" fill="rgb(244,35,45)"/><text x="43.0148%" y="111.50"></text></g><g><title>adt_def (200,502 samples, 0.26%)</title><rect x="43.5687%" y="53" width="0.2575%" height="15" fill="rgb(251,115,12)"/><text x="43.8187%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (199,952 samples, 0.26%)</title><rect x="43.5694%" y="37" width="0.2568%" height="15" fill="rgb(240,54,50)"/><text x="43.8194%" y="47.50"></text></g><g><title>adt_sized_constraint (209,772 samples, 0.27%)</title><rect x="43.5650%" y="69" width="0.2694%" height="15" fill="rgb(233,84,52)"/><text x="43.8150%" y="79.50"></text></g><g><title>adt_sized_constraint (242,092 samples, 0.31%)</title><rect x="43.5267%" y="85" width="0.3109%" height="15" fill="rgb(207,117,47)"/><text x="43.7767%" y="95.50"></text></g><g><title>evaluate_obligation (406,736 samples, 0.52%)</title><rect x="43.3790%" y="101" width="0.5224%" height="15" fill="rgb(249,43,39)"/><text x="43.6290%" y="111.50"></text></g><g><title>evaluate_obligation (105,320 samples, 0.14%)</title><rect x="44.2847%" y="85" width="0.1353%" height="15" fill="rgb(209,38,44)"/><text x="44.5347%" y="95.50"></text></g><g><title>method_autoderef_steps (218,483 samples, 0.28%)</title><rect x="44.1686%" y="101" width="0.2806%" height="15" fill="rgb(236,212,23)"/><text x="44.4186%" y="111.50"></text></g><g><title>object_safety_violations (142,902 samples, 0.18%)</title><rect x="44.4492%" y="101" width="0.1835%" height="15" fill="rgb(242,79,21)"/><text x="44.6992%" y="111.50"></text></g><g><title>predicates_of (128,803 samples, 0.17%)</title><rect x="44.6608%" y="101" width="0.1654%" height="15" fill="rgb(211,96,35)"/><text x="44.9108%" y="111.50"></text></g><g><title>predicates_defined_on (95,521 samples, 0.12%)</title><rect x="44.7035%" y="85" width="0.1227%" height="15" fill="rgb(253,215,40)"/><text x="44.9535%" y="95.50"></text></g><g><title>dropck_outlives (131,412 samples, 0.17%)</title><rect x="49.3313%" y="85" width="0.1688%" height="15" fill="rgb(211,81,21)"/><text x="49.5813%" y="95.50"></text></g><g><title>evaluate_obligation (215,504 samples, 0.28%)</title><rect x="49.5001%" y="85" width="0.2768%" height="15" fill="rgb(208,190,38)"/><text x="49.7501%" y="95.50"></text></g><g><title>is_copy_raw (174,472 samples, 0.22%)</title><rect x="49.9813%" y="85" width="0.2241%" height="15" fill="rgb(235,213,38)"/><text x="50.2313%" y="95.50"></text></g><g><title>evaluate_obligation (168,162 samples, 0.22%)</title><rect x="49.9894%" y="69" width="0.2160%" height="15" fill="rgb(237,122,38)"/><text x="50.2394%" y="79.50"></text></g><g><title>trait_impls_of (157,182 samples, 0.20%)</title><rect x="50.0035%" y="53" width="0.2019%" height="15" fill="rgb(244,218,35)"/><text x="50.2535%" y="63.50"></text></g><g><title>method_autoderef_steps (220,523 samples, 0.28%)</title><rect x="50.2300%" y="85" width="0.2832%" height="15" fill="rgb(240,68,47)"/><text x="50.4800%" y="95.50"></text></g><g><title>evaluate_obligation (111,453 samples, 0.14%)</title><rect x="50.3701%" y="69" width="0.1431%" height="15" fill="rgb(210,16,53)"/><text x="50.6201%" y="79.50"></text></g><g><title>predicates_of (311,843 samples, 0.40%)</title><rect x="50.5259%" y="85" width="0.4005%" height="15" fill="rgb(235,124,12)"/><text x="50.7759%" y="95.50"></text></g><g><title>typeck (4,737,231 samples, 6.08%)</title><rect x="44.8902%" y="101" width="6.0843%" height="15" fill="rgb(224,169,11)"/><text x="45.1402%" y="111.50">typeck</text></g><g><title>item_bodies_checking (10,997,382 samples, 14.12%)</title><rect x="36.8703%" y="149" width="14.1245%" height="15" fill="rgb(250,166,2)"/><text x="37.1203%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,994,352 samples, 14.12%)</title><rect x="36.8742%" y="133" width="14.1206%" height="15" fill="rgb(242,216,29)"/><text x="37.1242%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (10,956,731 samples, 14.07%)</title><rect x="36.9225%" y="117" width="14.0723%" height="15" fill="rgb(230,116,27)"/><text x="37.1725%" y="127.50">typeck</text></g><g><title>impl_parent (88,401 samples, 0.11%)</title><rect x="52.2129%" y="69" width="0.1135%" height="15" fill="rgb(228,99,48)"/><text x="52.4629%" y="79.50"></text></g><g><title>impl_trait_ref (379,205 samples, 0.49%)</title><rect x="52.3265%" y="69" width="0.4870%" height="15" fill="rgb(253,11,6)"/><text x="52.5765%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (344,154 samples, 0.44%)</title><rect x="52.3715%" y="53" width="0.4420%" height="15" fill="rgb(247,143,39)"/><text x="52.6215%" y="63.50"></text></g><g><title>adt_destructor (702,408 samples, 0.90%)</title><rect x="51.9966%" y="117" width="0.9021%" height="15" fill="rgb(236,97,10)"/><text x="52.2466%" y="127.50"></text></g><g><title>coherent_trait (693,178 samples, 0.89%)</title><rect x="52.0085%" y="101" width="0.8903%" height="15" fill="rgb(233,208,19)"/><text x="52.2585%" y="111.50"></text></g><g><title>specialization_graph_of (690,358 samples, 0.89%)</title><rect x="52.0121%" y="85" width="0.8867%" height="15" fill="rgb(216,164,2)"/><text x="52.2621%" y="95.50"></text></g><g><title>item_types_checking (1,665,088 samples, 2.14%)</title><rect x="50.9948%" y="149" width="2.1386%" height="15" fill="rgb(220,129,5)"/><text x="51.2448%" y="159.50">i..</text></g><g><title>check_mod_item_types (1,661,408 samples, 2.13%)</title><rect x="50.9995%" y="133" width="2.1338%" height="15" fill="rgb(242,17,10)"/><text x="51.2495%" y="143.50">c..</text></g><g><title>late_bound_vars_map (108,271 samples, 0.14%)</title><rect x="53.8721%" y="101" width="0.1391%" height="15" fill="rgb(242,107,0)"/><text x="54.1221%" y="111.50"></text></g><g><title>resolve_lifetimes (92,581 samples, 0.12%)</title><rect x="53.8923%" y="85" width="0.1189%" height="15" fill="rgb(251,28,31)"/><text x="54.1423%" y="95.50"></text></g><g><title>fn_sig (411,644 samples, 0.53%)</title><rect x="53.5536%" y="117" width="0.5287%" height="15" fill="rgb(233,223,10)"/><text x="53.8036%" y="127.50"></text></g><g><title>is_late_bound_map (251,792 samples, 0.32%)</title><rect x="54.3200%" y="101" width="0.3234%" height="15" fill="rgb(215,21,27)"/><text x="54.5700%" y="111.50"></text></g><g><title>resolve_lifetimes (230,692 samples, 0.30%)</title><rect x="54.3471%" y="85" width="0.2963%" height="15" fill="rgb(232,23,21)"/><text x="54.5971%" y="95.50"></text></g><g><title>generics_of (527,883 samples, 0.68%)</title><rect x="54.0823%" y="117" width="0.6780%" height="15" fill="rgb(244,5,23)"/><text x="54.3323%" y="127.50"></text></g><g><title>late_bound_vars_map (198,992 samples, 0.26%)</title><rect x="55.4039%" y="69" width="0.2556%" height="15" fill="rgb(226,81,46)"/><text x="55.6539%" y="79.50"></text></g><g><title>resolve_lifetimes (193,622 samples, 0.25%)</title><rect x="55.4108%" y="53" width="0.2487%" height="15" fill="rgb(247,70,30)"/><text x="55.6608%" y="63.50"></text></g><g><title>lint_levels (94,971 samples, 0.12%)</title><rect x="55.5375%" y="37" width="0.1220%" height="15" fill="rgb(212,68,19)"/><text x="55.7875%" y="47.50"></text></g><g><title>explicit_predicates_of (449,696 samples, 0.58%)</title><rect x="55.0999%" y="85" width="0.5776%" height="15" fill="rgb(240,187,13)"/><text x="55.3499%" y="95.50"></text></g><g><title>named_region_map (81,412 samples, 0.10%)</title><rect x="56.1497%" y="37" width="0.1046%" height="15" fill="rgb(223,113,26)"/><text x="56.3997%" y="47.50"></text></g><g><title>predicates_of (1,144,793 samples, 1.47%)</title><rect x="54.8484%" y="117" width="1.4703%" height="15" fill="rgb(206,192,2)"/><text x="55.0984%" y="127.50"></text></g><g><title>predicates_defined_on (1,083,762 samples, 1.39%)</title><rect x="54.9268%" y="101" width="1.3919%" height="15" fill="rgb(241,108,4)"/><text x="55.1768%" y="111.50"></text></g><g><title>inferred_outlives_of (499,325 samples, 0.64%)</title><rect x="55.6774%" y="85" width="0.6413%" height="15" fill="rgb(247,173,49)"/><text x="55.9274%" y="95.50"></text></g><g><title>inferred_outlives_crate (468,165 samples, 0.60%)</title><rect x="55.7175%" y="69" width="0.6013%" height="15" fill="rgb(224,114,35)"/><text x="55.9675%" y="79.50"></text></g><g><title>type_of (241,573 samples, 0.31%)</title><rect x="56.0085%" y="53" width="0.3103%" height="15" fill="rgb(245,159,27)"/><text x="56.2585%" y="63.50"></text></g><g><title>type_collecting (2,698,470 samples, 3.47%)</title><rect x="53.1349%" y="149" width="3.4658%" height="15" fill="rgb(245,172,44)"/><text x="53.3849%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (2,687,920 samples, 3.45%)</title><rect x="53.1484%" y="133" width="3.4522%" height="15" fill="rgb(236,23,11)"/><text x="53.3984%" y="143.50">col..</text></g><g><title>type_of (219,503 samples, 0.28%)</title><rect x="56.3188%" y="117" width="0.2819%" height="15" fill="rgb(205,117,38)"/><text x="56.5688%" y="127.50"></text></g><g><title>adt_def (105,060 samples, 0.13%)</title><rect x="59.5226%" y="85" width="0.1349%" height="15" fill="rgb(237,72,25)"/><text x="59.7726%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (101,840 samples, 0.13%)</title><rect x="59.5267%" y="69" width="0.1308%" height="15" fill="rgb(244,70,9)"/><text x="59.7767%" y="79.50"></text></g><g><title>adt_sized_constraint (144,831 samples, 0.19%)</title><rect x="59.5002%" y="117" width="0.1860%" height="15" fill="rgb(217,125,39)"/><text x="59.7502%" y="127.50"></text></g><g><title>adt_sized_constraint (137,331 samples, 0.18%)</title><rect x="59.5099%" y="101" width="0.1764%" height="15" fill="rgb(235,36,10)"/><text x="59.7599%" y="111.50"></text></g><g><title>evaluate_obligation (891,998 samples, 1.15%)</title><rect x="59.7012%" y="117" width="1.1456%" height="15" fill="rgb(251,123,47)"/><text x="59.9512%" y="127.50"></text></g><g><title>implied_outlives_bounds (404,959 samples, 0.52%)</title><rect x="60.8469%" y="117" width="0.5201%" height="15" fill="rgb(221,13,13)"/><text x="61.0969%" y="127.50"></text></g><g><title>param_env (280,602 samples, 0.36%)</title><rect x="61.3670%" y="117" width="0.3604%" height="15" fill="rgb(238,131,9)"/><text x="61.6170%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,124,107 samples, 5.30%)</title><rect x="56.8380%" y="133" width="5.2968%" height="15" fill="rgb(211,50,8)"/><text x="57.0880%" y="143.50">check_..</text></g><g><title>region_scope_tree (269,634 samples, 0.35%)</title><rect x="61.7885%" y="117" width="0.3463%" height="15" fill="rgb(245,182,24)"/><text x="62.0385%" y="127.50"></text></g><g><title>implied_outlives_bounds (166,723 samples, 0.21%)</title><rect x="63.7930%" y="117" width="0.2141%" height="15" fill="rgb(242,14,37)"/><text x="64.0430%" y="127.50"></text></g><g><title>param_env (423,192 samples, 0.54%)</title><rect x="64.0071%" y="117" width="0.5435%" height="15" fill="rgb(246,228,12)"/><text x="64.2571%" y="127.50"></text></g><g><title>predicates_of (78,311 samples, 0.10%)</title><rect x="64.5506%" y="117" width="0.1006%" height="15" fill="rgb(213,55,15)"/><text x="64.8006%" y="127.50"></text></g><g><title>analysis (49,827,770 samples, 64.00%)</title><rect x="0.8944%" y="181" width="63.9963%" height="15" fill="rgb(209,9,3)"/><text x="1.1444%" y="191.50">analysis</text></g><g><title>type_check_crate (34,394,020 samples, 44.17%)</title><rect x="20.7168%" y="165" width="44.1740%" height="15" fill="rgb(230,59,30)"/><text x="20.9668%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,451,652 samples, 8.29%)</title><rect x="56.6046%" y="149" width="8.2862%" height="15" fill="rgb(209,121,21)"/><text x="56.8546%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (2,145,784 samples, 2.76%)</title><rect x="62.1348%" y="133" width="2.7559%" height="15" fill="rgb(220,109,13)"/><text x="62.3848%" y="143.50">ch..</text></g><g><title>variances_of (151,052 samples, 0.19%)</title><rect x="64.6967%" y="117" width="0.1940%" height="15" fill="rgb(232,18,1)"/><text x="64.9467%" y="127.50"></text></g><g><title>crate_variances (143,542 samples, 0.18%)</title><rect x="64.7064%" y="101" width="0.1844%" height="15" fill="rgb(215,41,42)"/><text x="64.9564%" y="111.50"></text></g><g><title>codegen_crate (571,376 samples, 0.73%)</title><rect x="64.9056%" y="181" width="0.7338%" height="15" fill="rgb(224,123,36)"/><text x="65.1556%" y="191.50"></text></g><g><title>AST_validation (142,972 samples, 0.18%)</title><rect x="65.9183%" y="165" width="0.1836%" height="15" fill="rgb(240,125,3)"/><text x="66.1683%" y="175.50"></text></g><g><title>crate_injection (82,111 samples, 0.11%)</title><rect x="66.1837%" y="165" width="0.1055%" height="15" fill="rgb(205,98,50)"/><text x="66.4337%" y="175.50"></text></g><g><title>metadata_load_macro (87,791 samples, 0.11%)</title><rect x="80.3875%" y="133" width="0.1128%" height="15" fill="rgb(205,185,37)"/><text x="80.6375%" y="143.50"></text></g><g><title>macro_expand_crate (13,735,701 samples, 17.64%)</title><rect x="66.2892%" y="165" width="17.6414%" height="15" fill="rgb(238,207,15)"/><text x="66.5392%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (13,710,281 samples, 17.61%)</title><rect x="66.3218%" y="149" width="17.6088%" height="15" fill="rgb(213,199,42)"/><text x="66.5718%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,670,859 samples, 3.43%)</title><rect x="80.5003%" y="133" width="3.4303%" height="15" fill="rgb(235,201,11)"/><text x="80.7503%" y="143.50">met..</text></g><g><title>metadata_register_crate (968,940 samples, 1.24%)</title><rect x="82.6861%" y="117" width="1.2445%" height="15" fill="rgb(207,46,11)"/><text x="82.9361%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (232,102 samples, 0.30%)</title><rect x="83.9387%" y="165" width="0.2981%" height="15" fill="rgb(241,35,35)"/><text x="84.1887%" y="175.50"></text></g><g><title>late_resolve_crate (1,940,542 samples, 2.49%)</title><rect x="84.3815%" y="149" width="2.4923%" height="15" fill="rgb(243,32,47)"/><text x="84.6315%" y="159.50">la..</text></g><g><title>configure_and_expand (16,638,234 samples, 21.37%)</title><rect x="65.6395%" y="181" width="21.3693%" height="15" fill="rgb(247,202,23)"/><text x="65.8895%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,158,304 samples, 2.77%)</title><rect x="84.2368%" y="165" width="2.7720%" height="15" fill="rgb(219,102,11)"/><text x="84.4868%" y="175.50">re..</text></g><g><title>drop_ast (158,872 samples, 0.20%)</title><rect x="87.0088%" y="181" width="0.2040%" height="15" fill="rgb(243,110,44)"/><text x="87.2588%" y="191.50"></text></g><g><title>early_lint_checks (273,083 samples, 0.35%)</title><rect x="87.2305%" y="181" width="0.3507%" height="15" fill="rgb(222,74,54)"/><text x="87.4805%" y="191.50"></text></g><g><title>free_global_ctxt (2,638,789 samples, 3.39%)</title><rect x="87.5813%" y="181" width="3.3891%" height="15" fill="rgb(216,99,12)"/><text x="87.8313%" y="191.50">fre..</text></g><g><title>mir_for_ctfe (83,981 samples, 0.11%)</title><rect x="91.8043%" y="165" width="0.1079%" height="15" fill="rgb(226,22,26)"/><text x="92.0543%" y="175.50"></text></g><g><title>generate_crate_metadata (790,259 samples, 1.01%)</title><rect x="90.9704%" y="181" width="1.0150%" height="15" fill="rgb(217,163,10)"/><text x="91.2204%" y="191.50"></text></g><g><title>hir_lowering (2,182,174 samples, 2.80%)</title><rect x="91.9854%" y="181" width="2.8027%" height="15" fill="rgb(213,25,53)"/><text x="92.2354%" y="191.50">hi..</text></g><g><title>parse_crate (2,693,370 samples, 3.46%)</title><rect x="94.8486%" y="181" width="3.4592%" height="15" fill="rgb(252,105,26)"/><text x="95.0986%" y="191.50">par..</text></g><g><title>prepare_outputs (352,434 samples, 0.45%)</title><rect x="98.3206%" y="181" width="0.4526%" height="15" fill="rgb(220,39,43)"/><text x="98.5706%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (460,925 samples, 0.59%)</title><rect x="98.7732%" y="181" width="0.5920%" height="15" fill="rgb(229,68,48)"/><text x="99.0232%" y="191.50"></text></g><g><title>setup_global_ctxt (141,262 samples, 0.18%)</title><rect x="99.3796%" y="181" width="0.1814%" height="15" fill="rgb(252,8,32)"/><text x="99.6296%" y="191.50"></text></g><g><title>all (77,860,412 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (77,860,412 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (341,754 samples, 0.44%)</title><rect x="99.5611%" y="181" width="0.4389%" height="15" fill="rgb(236,28,36)"/><text x="99.8111%" y="191.50"></text></g></svg></svg>