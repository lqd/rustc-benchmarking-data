<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (160,381 samples, 0.16%)</title><rect x="9.7695%" y="101" width="0.1603%" height="15" fill="rgb(227,0,7)"/><text x="10.0195%" y="111.50"></text></g><g><title>codegen_fn_attrs (140,362 samples, 0.14%)</title><rect x="10.2525%" y="85" width="0.1403%" height="15" fill="rgb(217,0,24)"/><text x="10.5025%" y="95.50"></text></g><g><title>is_copy_raw (169,982 samples, 0.17%)</title><rect x="12.0999%" y="69" width="0.1699%" height="15" fill="rgb(221,193,54)"/><text x="12.3499%" y="79.50"></text></g><g><title>evaluate_obligation (137,942 samples, 0.14%)</title><rect x="12.1319%" y="53" width="0.1379%" height="15" fill="rgb(248,212,6)"/><text x="12.3819%" y="63.50"></text></g><g><title>adt_drop_tys (119,651 samples, 0.12%)</title><rect x="12.3396%" y="53" width="0.1196%" height="15" fill="rgb(208,68,35)"/><text x="12.5896%" y="63.50"></text></g><g><title>needs_drop_raw (537,383 samples, 0.54%)</title><rect x="12.2742%" y="69" width="0.5372%" height="15" fill="rgb(232,128,0)"/><text x="12.5242%" y="79.50"></text></g><g><title>is_copy_raw (352,351 samples, 0.35%)</title><rect x="12.4592%" y="53" width="0.3522%" height="15" fill="rgb(207,160,47)"/><text x="12.7092%" y="63.50"></text></g><g><title>evaluate_obligation (275,111 samples, 0.28%)</title><rect x="12.5364%" y="37" width="0.2750%" height="15" fill="rgb(228,23,34)"/><text x="12.7864%" y="47.50"></text></g><g><title>resolve_instance (250,643 samples, 0.25%)</title><rect x="12.8114%" y="69" width="0.2506%" height="15" fill="rgb(218,30,26)"/><text x="13.0614%" y="79.50"></text></g><g><title>thir_body (610,608 samples, 0.61%)</title><rect x="13.0845%" y="69" width="0.6104%" height="15" fill="rgb(220,122,19)"/><text x="13.3345%" y="79.50"></text></g><g><title>mir_const (4,533,701 samples, 4.53%)</title><rect x="9.1795%" y="117" width="4.5320%" height="15" fill="rgb(250,228,42)"/><text x="9.4295%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (3,783,103 samples, 3.78%)</title><rect x="9.9298%" y="101" width="3.7817%" height="15" fill="rgb(240,193,28)"/><text x="10.1798%" y="111.50">unsa..</text></g><g><title>mir_built (3,319,987 samples, 3.32%)</title><rect x="10.3928%" y="85" width="3.3188%" height="15" fill="rgb(216,20,37)"/><text x="10.6428%" y="95.50">mir..</text></g><g><title>mir_promoted (5,233,259 samples, 5.23%)</title><rect x="8.6385%" y="133" width="5.2313%" height="15" fill="rgb(206,188,39)"/><text x="8.8885%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (158,363 samples, 0.16%)</title><rect x="13.7115%" y="117" width="0.1583%" height="15" fill="rgb(217,207,13)"/><text x="13.9615%" y="127.50"></text></g><g><title>mir_const (101,862 samples, 0.10%)</title><rect x="13.7680%" y="101" width="0.1018%" height="15" fill="rgb(231,73,38)"/><text x="14.0180%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (233,713 samples, 0.23%)</title><rect x="13.8698%" y="133" width="0.2336%" height="15" fill="rgb(225,20,46)"/><text x="14.1198%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,258,524 samples, 1.26%)</title><rect x="14.1662%" y="133" width="1.2581%" height="15" fill="rgb(210,31,41)"/><text x="14.4162%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,265,398 samples, 14.26%)</title><rect x="1.1693%" y="165" width="14.2601%" height="15" fill="rgb(221,200,47)"/><text x="1.4193%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,167,586 samples, 14.16%)</title><rect x="1.2671%" y="149" width="14.1624%" height="15" fill="rgb(226,26,5)"/><text x="1.5171%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (152,952 samples, 0.15%)</title><rect x="15.4294%" y="165" width="0.1529%" height="15" fill="rgb(249,33,26)"/><text x="15.6794%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (112,211 samples, 0.11%)</title><rect x="15.4702%" y="149" width="0.1122%" height="15" fill="rgb(235,183,28)"/><text x="15.7202%" y="159.50"></text></g><g><title>hir_module_items (245,101 samples, 0.25%)</title><rect x="15.5823%" y="165" width="0.2450%" height="15" fill="rgb(221,5,38)"/><text x="15.8323%" y="175.50"></text></g><g><title>codegen_fn_attrs (103,831 samples, 0.10%)</title><rect x="16.2077%" y="101" width="0.1038%" height="15" fill="rgb(247,18,42)"/><text x="16.4577%" y="111.50"></text></g><g><title>should_inherit_track_caller (191,612 samples, 0.19%)</title><rect x="16.1254%" y="117" width="0.1915%" height="15" fill="rgb(241,131,45)"/><text x="16.3754%" y="127.50"></text></g><g><title>codegen_fn_attrs (322,653 samples, 0.32%)</title><rect x="16.0180%" y="133" width="0.3225%" height="15" fill="rgb(249,31,29)"/><text x="16.2680%" y="143.50"></text></g><g><title>check_mod_attrs (486,535 samples, 0.49%)</title><rect x="15.8543%" y="149" width="0.4864%" height="15" fill="rgb(225,111,53)"/><text x="16.1043%" y="159.50"></text></g><g><title>lookup_deprecation_entry (136,372 samples, 0.14%)</title><rect x="16.6432%" y="133" width="0.1363%" height="15" fill="rgb(238,160,17)"/><text x="16.8932%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (341,475 samples, 0.34%)</title><rect x="16.4978%" y="149" width="0.3413%" height="15" fill="rgb(214,148,48)"/><text x="16.7478%" y="159.50"></text></g><g><title>misc_checking_1 (1,106,892 samples, 1.11%)</title><rect x="15.8277%" y="165" width="1.1065%" height="15" fill="rgb(232,36,49)"/><text x="16.0777%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (302,863 samples, 0.30%)</title><rect x="16.9356%" y="149" width="0.3028%" height="15" fill="rgb(209,103,24)"/><text x="17.1856%" y="159.50"></text></g><g><title>check_mod_liveness (232,891 samples, 0.23%)</title><rect x="17.0055%" y="133" width="0.2328%" height="15" fill="rgb(229,88,8)"/><text x="17.2555%" y="143.50"></text></g><g><title>misc_checking_2 (710,827 samples, 0.71%)</title><rect x="16.9342%" y="165" width="0.7106%" height="15" fill="rgb(213,181,19)"/><text x="17.1842%" y="175.50"></text></g><g><title>match_checking (406,564 samples, 0.41%)</title><rect x="17.2383%" y="149" width="0.4064%" height="15" fill="rgb(254,191,54)"/><text x="17.4883%" y="159.50"></text></g><g><title>check_match (381,284 samples, 0.38%)</title><rect x="17.2636%" y="133" width="0.3811%" height="15" fill="rgb(241,83,37)"/><text x="17.5136%" y="143.50"></text></g><g><title>check_private_in_public (171,542 samples, 0.17%)</title><rect x="17.6544%" y="149" width="0.1715%" height="15" fill="rgb(233,36,39)"/><text x="17.9044%" y="159.50"></text></g><g><title>death_checking (349,614 samples, 0.35%)</title><rect x="17.8258%" y="149" width="0.3495%" height="15" fill="rgb(226,3,54)"/><text x="18.0758%" y="159.50"></text></g><g><title>eval_to_const_value_raw (197,672 samples, 0.20%)</title><rect x="19.0847%" y="117" width="0.1976%" height="15" fill="rgb(245,192,40)"/><text x="19.3347%" y="127.50"></text></g><g><title>eval_to_const_value_raw (187,452 samples, 0.19%)</title><rect x="19.0949%" y="101" width="0.1874%" height="15" fill="rgb(238,167,29)"/><text x="19.3449%" y="111.50"></text></g><g><title>eval_to_allocation_raw (178,472 samples, 0.18%)</title><rect x="19.1039%" y="85" width="0.1784%" height="15" fill="rgb(232,182,51)"/><text x="19.3539%" y="95.50"></text></g><g><title>param_env (190,824 samples, 0.19%)</title><rect x="19.2823%" y="117" width="0.1908%" height="15" fill="rgb(231,60,39)"/><text x="19.5323%" y="127.50"></text></g><g><title>crate_lints (2,395,187 samples, 2.39%)</title><rect x="18.1772%" y="133" width="2.3943%" height="15" fill="rgb(208,69,12)"/><text x="18.4272%" y="143.50">cr..</text></g><g><title>type_of (1,093,554 samples, 1.09%)</title><rect x="19.4783%" y="117" width="1.0932%" height="15" fill="rgb(235,93,37)"/><text x="19.7283%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (854,819 samples, 0.85%)</title><rect x="19.7170%" y="101" width="0.8545%" height="15" fill="rgb(213,116,39)"/><text x="19.9670%" y="111.50"></text></g><g><title>lint_checking (2,707,810 samples, 2.71%)</title><rect x="18.1753%" y="149" width="2.7068%" height="15" fill="rgb(222,207,29)"/><text x="18.4253%" y="159.50">li..</text></g><g><title>module_lints (310,763 samples, 0.31%)</title><rect x="20.5715%" y="133" width="0.3106%" height="15" fill="rgb(206,96,30)"/><text x="20.8215%" y="143.50"></text></g><g><title>lint_mod (304,473 samples, 0.30%)</title><rect x="20.5778%" y="117" width="0.3044%" height="15" fill="rgb(218,138,4)"/><text x="20.8278%" y="127.50"></text></g><g><title>privacy_access_levels (212,322 samples, 0.21%)</title><rect x="20.8821%" y="149" width="0.2122%" height="15" fill="rgb(250,191,14)"/><text x="21.1321%" y="159.50"></text></g><g><title>privacy_checking_modules (585,107 samples, 0.58%)</title><rect x="21.0944%" y="149" width="0.5849%" height="15" fill="rgb(239,60,40)"/><text x="21.3444%" y="159.50"></text></g><g><title>check_mod_privacy (580,397 samples, 0.58%)</title><rect x="21.0991%" y="133" width="0.5802%" height="15" fill="rgb(206,27,48)"/><text x="21.3491%" y="143.50"></text></g><g><title>misc_checking_3 (4,049,665 samples, 4.05%)</title><rect x="17.6448%" y="165" width="4.0482%" height="15" fill="rgb(225,35,8)"/><text x="17.8948%" y="175.50">misc..</text></g><g><title>impl_trait_ref (147,462 samples, 0.15%)</title><rect x="21.9275%" y="69" width="0.1474%" height="15" fill="rgb(250,213,24)"/><text x="22.1775%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (128,511 samples, 0.13%)</title><rect x="21.9465%" y="53" width="0.1285%" height="15" fill="rgb(247,123,22)"/><text x="22.1965%" y="63.50"></text></g><g><title>adt_destructor (299,473 samples, 0.30%)</title><rect x="21.8041%" y="117" width="0.2994%" height="15" fill="rgb(231,138,38)"/><text x="22.0541%" y="127.50"></text></g><g><title>coherent_trait (292,103 samples, 0.29%)</title><rect x="21.8115%" y="101" width="0.2920%" height="15" fill="rgb(231,145,46)"/><text x="22.0615%" y="111.50"></text></g><g><title>specialization_graph_of (291,083 samples, 0.29%)</title><rect x="21.8125%" y="85" width="0.2910%" height="15" fill="rgb(251,118,11)"/><text x="22.0625%" y="95.50"></text></g><g><title>impl_parent (2,558,306 samples, 2.56%)</title><rect x="26.4937%" y="101" width="2.5574%" height="15" fill="rgb(217,147,25)"/><text x="26.7437%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,532,825 samples, 1.53%)</title><rect x="27.5188%" y="85" width="1.5323%" height="15" fill="rgb(247,81,37)"/><text x="27.7688%" y="95.50"></text></g><g><title>impl_trait_ref (5,773,615 samples, 5.77%)</title><rect x="29.0526%" y="101" width="5.7715%" height="15" fill="rgb(209,12,38)"/><text x="29.3026%" y="111.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,560,785 samples, 4.56%)</title><rect x="30.2650%" y="85" width="4.5591%" height="15" fill="rgb(227,1,9)"/><text x="30.5150%" y="95.50">metad..</text></g><g><title>trait_impls_of (914,369 samples, 0.91%)</title><rect x="34.8865%" y="101" width="0.9140%" height="15" fill="rgb(248,47,43)"/><text x="35.1365%" y="111.50"></text></g><g><title>implementations_of_trait (234,372 samples, 0.23%)</title><rect x="35.5662%" y="85" width="0.2343%" height="15" fill="rgb(221,10,30)"/><text x="35.8162%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (186,822 samples, 0.19%)</title><rect x="35.6138%" y="69" width="0.1868%" height="15" fill="rgb(210,229,1)"/><text x="35.8638%" y="79.50"></text></g><g><title>coherent_trait (14,031,365 samples, 14.03%)</title><rect x="21.7757%" y="133" width="14.0262%" height="15" fill="rgb(222,148,37)"/><text x="22.0257%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (13,669,401 samples, 13.66%)</title><rect x="22.1375%" y="117" width="13.6644%" height="15" fill="rgb(234,67,33)"/><text x="22.3875%" y="127.50">specialization_graph_..</text></g><g><title>coherence_checking (14,108,615 samples, 14.10%)</title><rect x="21.7495%" y="149" width="14.1034%" height="15" fill="rgb(247,98,35)"/><text x="21.9995%" y="159.50">coherence_checking</text></g><g><title>associated_item (159,311 samples, 0.16%)</title><rect x="47.2454%" y="85" width="0.1593%" height="15" fill="rgb(247,138,52)"/><text x="47.4954%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (125,881 samples, 0.13%)</title><rect x="47.2788%" y="69" width="0.1258%" height="15" fill="rgb(213,79,30)"/><text x="47.5288%" y="79.50"></text></g><g><title>associated_items (247,202 samples, 0.25%)</title><rect x="47.1715%" y="101" width="0.2471%" height="15" fill="rgb(246,177,23)"/><text x="47.4215%" y="111.50"></text></g><g><title>dropck_outlives (231,662 samples, 0.23%)</title><rect x="47.4566%" y="101" width="0.2316%" height="15" fill="rgb(230,62,27)"/><text x="47.7066%" y="111.50"></text></g><g><title>predicates_of (237,581 samples, 0.24%)</title><rect x="48.8474%" y="85" width="0.2375%" height="15" fill="rgb(216,154,8)"/><text x="49.0974%" y="95.50"></text></g><g><title>predicates_defined_on (172,911 samples, 0.17%)</title><rect x="48.9120%" y="69" width="0.1728%" height="15" fill="rgb(244,35,45)"/><text x="49.1620%" y="79.50"></text></g><g><title>specializes (246,313 samples, 0.25%)</title><rect x="49.0849%" y="85" width="0.2462%" height="15" fill="rgb(251,115,12)"/><text x="49.3349%" y="95.50"></text></g><g><title>param_env (170,723 samples, 0.17%)</title><rect x="49.1604%" y="69" width="0.1707%" height="15" fill="rgb(240,54,50)"/><text x="49.4104%" y="79.50"></text></g><g><title>trait_impls_of (279,564 samples, 0.28%)</title><rect x="49.3383%" y="85" width="0.2795%" height="15" fill="rgb(233,84,52)"/><text x="49.5883%" y="95.50"></text></g><g><title>implementations_of_trait (117,111 samples, 0.12%)</title><rect x="49.5007%" y="69" width="0.1171%" height="15" fill="rgb(207,117,47)"/><text x="49.7507%" y="79.50"></text></g><g><title>evaluate_obligation (1,938,373 samples, 1.94%)</title><rect x="47.6882%" y="101" width="1.9377%" height="15" fill="rgb(249,43,39)"/><text x="47.9382%" y="111.50">e..</text></g><g><title>item_attrs (122,752 samples, 0.12%)</title><rect x="49.8302%" y="101" width="0.1227%" height="15" fill="rgb(209,38,44)"/><text x="50.0802%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,802 samples, 0.12%)</title><rect x="49.8341%" y="85" width="0.1188%" height="15" fill="rgb(236,212,23)"/><text x="50.0841%" y="95.50"></text></g><g><title>method_autoderef_steps (190,390 samples, 0.19%)</title><rect x="49.9894%" y="101" width="0.1903%" height="15" fill="rgb(242,79,21)"/><text x="50.2394%" y="111.50"></text></g><g><title>evaluate_obligation (102,560 samples, 0.10%)</title><rect x="50.0772%" y="85" width="0.1025%" height="15" fill="rgb(211,96,35)"/><text x="50.3272%" y="95.50"></text></g><g><title>predicates_of (208,481 samples, 0.21%)</title><rect x="50.2260%" y="101" width="0.2084%" height="15" fill="rgb(253,215,40)"/><text x="50.4760%" y="111.50"></text></g><g><title>predicates_defined_on (159,301 samples, 0.16%)</title><rect x="50.2752%" y="85" width="0.1592%" height="15" fill="rgb(211,81,21)"/><text x="50.5252%" y="95.50"></text></g><g><title>typeck (1,249,554 samples, 1.25%)</title><rect x="50.4806%" y="101" width="1.2491%" height="15" fill="rgb(208,190,38)"/><text x="50.7306%" y="111.50"></text></g><g><title>item_bodies_checking (15,876,055 samples, 15.87%)</title><rect x="35.8865%" y="149" width="15.8702%" height="15" fill="rgb(235,213,38)"/><text x="36.1365%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,873,485 samples, 15.87%)</title><rect x="35.8891%" y="133" width="15.8676%" height="15" fill="rgb(237,122,38)"/><text x="36.1391%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (15,809,314 samples, 15.80%)</title><rect x="35.9532%" y="117" width="15.8035%" height="15" fill="rgb(244,218,35)"/><text x="36.2032%" y="127.50">typeck</text></g><g><title>item_types_checking (866,290 samples, 0.87%)</title><rect x="51.7567%" y="149" width="0.8660%" height="15" fill="rgb(240,68,47)"/><text x="52.0067%" y="159.50"></text></g><g><title>check_mod_item_types (859,190 samples, 0.86%)</title><rect x="51.7638%" y="133" width="0.8589%" height="15" fill="rgb(210,16,53)"/><text x="52.0138%" y="143.50"></text></g><g><title>typeck (119,010 samples, 0.12%)</title><rect x="52.5037%" y="117" width="0.1190%" height="15" fill="rgb(235,124,12)"/><text x="52.7537%" y="127.50"></text></g><g><title>fn_sig (377,413 samples, 0.38%)</title><rect x="52.8873%" y="117" width="0.3773%" height="15" fill="rgb(224,169,11)"/><text x="53.1373%" y="127.50"></text></g><g><title>named_region_map (229,582 samples, 0.23%)</title><rect x="53.3620%" y="101" width="0.2295%" height="15" fill="rgb(250,166,2)"/><text x="53.6120%" y="111.50"></text></g><g><title>resolve_lifetimes (208,142 samples, 0.21%)</title><rect x="53.3834%" y="85" width="0.2081%" height="15" fill="rgb(242,216,29)"/><text x="53.6334%" y="95.50"></text></g><g><title>generics_of (342,032 samples, 0.34%)</title><rect x="53.2646%" y="117" width="0.3419%" height="15" fill="rgb(230,116,27)"/><text x="53.5146%" y="127.50"></text></g><g><title>late_bound_vars_map (209,282 samples, 0.21%)</title><rect x="54.0243%" y="69" width="0.2092%" height="15" fill="rgb(228,99,48)"/><text x="54.2743%" y="79.50"></text></g><g><title>resolve_lifetimes (192,582 samples, 0.19%)</title><rect x="54.0410%" y="53" width="0.1925%" height="15" fill="rgb(253,11,6)"/><text x="54.2910%" y="63.50"></text></g><g><title>explicit_predicates_of (470,787 samples, 0.47%)</title><rect x="53.7942%" y="85" width="0.4706%" height="15" fill="rgb(247,143,39)"/><text x="54.0442%" y="95.50"></text></g><g><title>predicates_of (760,321 samples, 0.76%)</title><rect x="53.6551%" y="117" width="0.7600%" height="15" fill="rgb(236,97,10)"/><text x="53.9051%" y="127.50"></text></g><g><title>predicates_defined_on (704,151 samples, 0.70%)</title><rect x="53.7112%" y="101" width="0.7039%" height="15" fill="rgb(233,208,19)"/><text x="53.9612%" y="111.50"></text></g><g><title>inferred_outlives_of (150,381 samples, 0.15%)</title><rect x="54.2648%" y="85" width="0.1503%" height="15" fill="rgb(216,164,2)"/><text x="54.5148%" y="95.50"></text></g><g><title>inferred_outlives_crate (127,901 samples, 0.13%)</title><rect x="54.2872%" y="69" width="0.1279%" height="15" fill="rgb(220,129,5)"/><text x="54.5372%" y="79.50"></text></g><g><title>type_collecting (1,995,942 samples, 2.00%)</title><rect x="52.6244%" y="149" width="1.9952%" height="15" fill="rgb(242,17,10)"/><text x="52.8744%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,985,152 samples, 1.98%)</title><rect x="52.6352%" y="133" width="1.9844%" height="15" fill="rgb(242,107,0)"/><text x="52.8852%" y="143.50">c..</text></g><g><title>type_of (176,024 samples, 0.18%)</title><rect x="54.4436%" y="117" width="0.1760%" height="15" fill="rgb(251,28,31)"/><text x="54.6936%" y="127.50"></text></g><g><title>evaluate_obligation (495,825 samples, 0.50%)</title><rect x="56.3916%" y="117" width="0.4956%" height="15" fill="rgb(233,223,10)"/><text x="56.6416%" y="127.50"></text></g><g><title>implied_outlives_bounds (240,930 samples, 0.24%)</title><rect x="56.8873%" y="117" width="0.2408%" height="15" fill="rgb(215,21,27)"/><text x="57.1373%" y="127.50"></text></g><g><title>evaluate_obligation (136,942 samples, 0.14%)</title><rect x="57.2651%" y="101" width="0.1369%" height="15" fill="rgb(232,23,21)"/><text x="57.5151%" y="111.50"></text></g><g><title>object_safety_violations (474,175 samples, 0.47%)</title><rect x="57.1281%" y="117" width="0.4740%" height="15" fill="rgb(244,5,23)"/><text x="57.3781%" y="127.50"></text></g><g><title>param_env (257,345 samples, 0.26%)</title><rect x="57.6021%" y="117" width="0.2573%" height="15" fill="rgb(226,81,46)"/><text x="57.8521%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,336,419 samples, 3.34%)</title><rect x="54.7990%" y="133" width="3.3352%" height="15" fill="rgb(247,70,30)"/><text x="55.0490%" y="143.50">che..</text></g><g><title>region_scope_tree (263,625 samples, 0.26%)</title><rect x="57.8706%" y="117" width="0.2635%" height="15" fill="rgb(212,68,19)"/><text x="58.1206%" y="127.50"></text></g><g><title>adt_sized_constraint (113,071 samples, 0.11%)</title><rect x="59.7910%" y="101" width="0.1130%" height="15" fill="rgb(240,187,13)"/><text x="60.0410%" y="111.50"></text></g><g><title>evaluate_obligation (304,422 samples, 0.30%)</title><rect x="59.6207%" y="117" width="0.3043%" height="15" fill="rgb(223,113,26)"/><text x="59.8707%" y="127.50"></text></g><g><title>param_env (310,284 samples, 0.31%)</title><rect x="60.0219%" y="117" width="0.3102%" height="15" fill="rgb(206,192,2)"/><text x="60.2719%" y="127.50"></text></g><g><title>check_item_well_formed (2,451,784 samples, 2.45%)</title><rect x="58.1342%" y="133" width="2.4509%" height="15" fill="rgb(241,108,4)"/><text x="58.3842%" y="143.50">ch..</text></g><g><title>evaluate_obligation (209,882 samples, 0.21%)</title><rect x="60.8562%" y="117" width="0.2098%" height="15" fill="rgb(247,173,49)"/><text x="61.1062%" y="127.50"></text></g><g><title>analysis (60,416,818 samples, 60.39%)</title><rect x="0.7803%" y="181" width="60.3945%" height="15" fill="rgb(224,114,35)"/><text x="1.0303%" y="191.50">analysis</text></g><g><title>type_check_crate (39,496,516 samples, 39.48%)</title><rect x="21.6929%" y="165" width="39.4819%" height="15" fill="rgb(245,159,27)"/><text x="21.9429%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,553,712 samples, 6.55%)</title><rect x="54.6236%" y="149" width="6.5513%" height="15" fill="rgb(245,172,44)"/><text x="54.8736%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (590,045 samples, 0.59%)</title><rect x="60.5850%" y="133" width="0.5898%" height="15" fill="rgb(236,23,11)"/><text x="60.8350%" y="143.50"></text></g><g><title>codegen_crate (552,776 samples, 0.55%)</title><rect x="61.1852%" y="181" width="0.5526%" height="15" fill="rgb(205,117,38)"/><text x="61.4352%" y="191.50"></text></g><g><title>AST_validation (184,762 samples, 0.18%)</title><rect x="61.9645%" y="165" width="0.1847%" height="15" fill="rgb(237,72,25)"/><text x="62.2145%" y="175.50"></text></g><g><title>complete_gated_feature_checking (109,971 samples, 0.11%)</title><rect x="62.1492%" y="165" width="0.1099%" height="15" fill="rgb(244,70,9)"/><text x="62.3992%" y="175.50"></text></g><g><title>metadata_load_macro (135,823 samples, 0.14%)</title><rect x="80.5688%" y="133" width="0.1358%" height="15" fill="rgb(217,125,39)"/><text x="80.8188%" y="143.50"></text></g><g><title>metadata_register_crate (2,790,041 samples, 2.79%)</title><rect x="80.7045%" y="133" width="2.7890%" height="15" fill="rgb(235,36,10)"/><text x="80.9545%" y="143.50">me..</text></g><g><title>metadata_register_crate (965,171 samples, 0.96%)</title><rect x="82.5287%" y="117" width="0.9648%" height="15" fill="rgb(251,123,47)"/><text x="82.7787%" y="127.50"></text></g><g><title>macro_expand_crate (21,460,047 samples, 21.45%)</title><rect x="62.3555%" y="165" width="21.4521%" height="15" fill="rgb(221,13,13)"/><text x="62.6055%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (21,443,027 samples, 21.44%)</title><rect x="62.3725%" y="149" width="21.4351%" height="15" fill="rgb(238,131,9)"/><text x="62.6225%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (314,195 samples, 0.31%)</title><rect x="83.4935%" y="133" width="0.3141%" height="15" fill="rgb(211,50,8)"/><text x="83.7435%" y="143.50"></text></g><g><title>finalize_imports (102,872 samples, 0.10%)</title><rect x="83.8968%" y="149" width="0.1028%" height="15" fill="rgb(245,182,24)"/><text x="84.1468%" y="159.50"></text></g><g><title>finalize_macro_resolutions (133,731 samples, 0.13%)</title><rect x="83.9997%" y="149" width="0.1337%" height="15" fill="rgb(242,14,37)"/><text x="84.2497%" y="159.50"></text></g><g><title>late_resolve_crate (4,252,908 samples, 4.25%)</title><rect x="84.1334%" y="149" width="4.2513%" height="15" fill="rgb(246,228,12)"/><text x="84.3834%" y="159.50">late_..</text></g><g><title>metadata_register_crate (525,786 samples, 0.53%)</title><rect x="87.8591%" y="133" width="0.5256%" height="15" fill="rgb(213,55,15)"/><text x="88.1091%" y="143.50"></text></g><g><title>metadata_register_crate (320,543 samples, 0.32%)</title><rect x="88.0643%" y="117" width="0.3204%" height="15" fill="rgb(209,9,3)"/><text x="88.3143%" y="127.50"></text></g><g><title>metadata_register_crate (136,201 samples, 0.14%)</title><rect x="88.2485%" y="101" width="0.1362%" height="15" fill="rgb(230,59,30)"/><text x="88.4985%" y="111.50"></text></g><g><title>configure_and_expand (26,887,987 samples, 26.88%)</title><rect x="61.7377%" y="181" width="26.8781%" height="15" fill="rgb(209,121,21)"/><text x="61.9877%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,730,343 samples, 4.73%)</title><rect x="83.8872%" y="165" width="4.7286%" height="15" fill="rgb(220,109,13)"/><text x="84.1372%" y="175.50">resolv..</text></g><g><title>drop_ast (213,033 samples, 0.21%)</title><rect x="88.6158%" y="181" width="0.2130%" height="15" fill="rgb(232,18,1)"/><text x="88.8658%" y="191.50"></text></g><g><title>early_lint_checks (486,225 samples, 0.49%)</title><rect x="88.8465%" y="181" width="0.4860%" height="15" fill="rgb(215,41,42)"/><text x="89.0965%" y="191.50"></text></g><g><title>free_global_ctxt (3,305,896 samples, 3.30%)</title><rect x="89.3326%" y="181" width="3.3047%" height="15" fill="rgb(224,123,36)"/><text x="89.5826%" y="191.50">fre..</text></g><g><title>generate_crate_metadata (1,029,181 samples, 1.03%)</title><rect x="92.6373%" y="181" width="1.0288%" height="15" fill="rgb(240,125,3)"/><text x="92.8873%" y="191.50"></text></g><g><title>hir_lowering (4,148,655 samples, 4.15%)</title><rect x="93.6661%" y="181" width="4.1471%" height="15" fill="rgb(205,98,50)"/><text x="93.9161%" y="191.50">hir_l..</text></g><g><title>parse_crate (662,787 samples, 0.66%)</title><rect x="97.8672%" y="181" width="0.6625%" height="15" fill="rgb(205,185,37)"/><text x="98.1172%" y="191.50"></text></g><g><title>prepare_outputs (300,073 samples, 0.30%)</title><rect x="98.5398%" y="181" width="0.3000%" height="15" fill="rgb(238,207,15)"/><text x="98.7898%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (762,549 samples, 0.76%)</title><rect x="98.8397%" y="181" width="0.7623%" height="15" fill="rgb(213,199,42)"/><text x="99.0897%" y="191.50"></text></g><g><title>setup_global_ctxt (110,301 samples, 0.11%)</title><rect x="99.6131%" y="181" width="0.1103%" height="15" fill="rgb(235,201,11)"/><text x="99.8631%" y="191.50"></text></g><g><title>all (100,036,905 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (100,036,905 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (276,773 samples, 0.28%)</title><rect x="99.7233%" y="181" width="0.2767%" height="15" fill="rgb(243,32,47)"/><text x="99.9733%" y="191.50"></text></g></svg></svg>