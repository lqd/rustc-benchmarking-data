<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (413,704 samples, 0.23%)</title><rect x="15.3158%" y="117" width="0.2278%" height="15" fill="rgb(227,0,7)"/><text x="15.5658%" y="127.50"></text></g><g><title>item_attrs (272,523 samples, 0.15%)</title><rect x="16.1815%" y="85" width="0.1501%" height="15" fill="rgb(217,0,24)"/><text x="16.4315%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (263,353 samples, 0.15%)</title><rect x="16.1866%" y="69" width="0.1450%" height="15" fill="rgb(221,193,54)"/><text x="16.4366%" y="79.50"></text></g><g><title>codegen_fn_attrs (399,746 samples, 0.22%)</title><rect x="16.1204%" y="101" width="0.2202%" height="15" fill="rgb(248,212,6)"/><text x="16.3704%" y="111.50"></text></g><g><title>is_copy_raw (330,426 samples, 0.18%)</title><rect x="19.3252%" y="85" width="0.1820%" height="15" fill="rgb(208,68,35)"/><text x="19.5752%" y="95.50"></text></g><g><title>evaluate_obligation (278,296 samples, 0.15%)</title><rect x="19.3539%" y="69" width="0.1533%" height="15" fill="rgb(232,128,0)"/><text x="19.6039%" y="79.50"></text></g><g><title>adt_drop_tys (208,152 samples, 0.11%)</title><rect x="19.5955%" y="37" width="0.1146%" height="15" fill="rgb(207,160,47)"/><text x="19.8455%" y="47.50"></text></g><g><title>adt_drop_tys (311,764 samples, 0.17%)</title><rect x="19.5871%" y="53" width="0.1717%" height="15" fill="rgb(228,23,34)"/><text x="19.8371%" y="63.50"></text></g><g><title>adt_drop_tys (583,988 samples, 0.32%)</title><rect x="19.5701%" y="69" width="0.3216%" height="15" fill="rgb(218,30,26)"/><text x="19.8201%" y="79.50"></text></g><g><title>needs_drop_raw (1,347,828 samples, 0.74%)</title><rect x="19.5072%" y="85" width="0.7423%" height="15" fill="rgb(220,122,19)"/><text x="19.7572%" y="95.50"></text></g><g><title>is_copy_raw (649,589 samples, 0.36%)</title><rect x="19.8917%" y="69" width="0.3578%" height="15" fill="rgb(250,228,42)"/><text x="20.1417%" y="79.50"></text></g><g><title>evaluate_obligation (517,226 samples, 0.28%)</title><rect x="19.9646%" y="53" width="0.2849%" height="15" fill="rgb(240,193,28)"/><text x="20.2146%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (505,955 samples, 0.28%)</title><rect x="20.4517%" y="69" width="0.2787%" height="15" fill="rgb(216,20,37)"/><text x="20.7017%" y="79.50"></text></g><g><title>specialization_graph_of (453,595 samples, 0.25%)</title><rect x="20.8358%" y="69" width="0.2498%" height="15" fill="rgb(206,188,39)"/><text x="21.0858%" y="79.50"></text></g><g><title>impl_trait_ref (210,491 samples, 0.12%)</title><rect x="20.9697%" y="53" width="0.1159%" height="15" fill="rgb(217,207,13)"/><text x="21.2197%" y="63.50"></text></g><g><title>resolve_instance (1,630,644 samples, 0.90%)</title><rect x="20.2495%" y="85" width="0.8981%" height="15" fill="rgb(231,73,38)"/><text x="20.4995%" y="95.50"></text></g><g><title>thir_body (2,260,550 samples, 1.24%)</title><rect x="21.1908%" y="85" width="1.2450%" height="15" fill="rgb(225,20,46)"/><text x="21.4408%" y="95.50"></text></g><g><title>mir_const (14,810,736 samples, 8.16%)</title><rect x="14.3111%" y="133" width="8.1570%" height="15" fill="rgb(210,31,41)"/><text x="14.5611%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (12,572,734 samples, 6.92%)</title><rect x="15.5436%" y="117" width="6.9244%" height="15" fill="rgb(221,200,47)"/><text x="15.7936%" y="127.50">unsafety_..</text></g><g><title>mir_built (11,125,730 samples, 6.13%)</title><rect x="16.3406%" y="101" width="6.1275%" height="15" fill="rgb(226,26,5)"/><text x="16.5906%" y="111.50">mir_built</text></g><g><title>mir_promoted (16,597,575 samples, 9.14%)</title><rect x="13.3876%" y="149" width="9.1411%" height="15" fill="rgb(249,33,26)"/><text x="13.6376%" y="159.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (380,166 samples, 0.21%)</title><rect x="22.5814%" y="149" width="0.2094%" height="15" fill="rgb(235,183,28)"/><text x="22.8314%" y="159.50"></text></g><g><title>normalize_projection_ty (211,166 samples, 0.12%)</title><rect x="22.6744%" y="133" width="0.1163%" height="15" fill="rgb(221,5,38)"/><text x="22.9244%" y="143.50"></text></g><g><title>type_op_normalize_predicate (193,421 samples, 0.11%)</title><rect x="22.7907%" y="149" width="0.1065%" height="15" fill="rgb(247,18,42)"/><text x="23.0407%" y="159.50"></text></g><g><title>type_op_normalize_ty (449,444 samples, 0.25%)</title><rect x="22.8973%" y="149" width="0.2475%" height="15" fill="rgb(241,131,45)"/><text x="23.1473%" y="159.50"></text></g><g><title>normalize_projection_ty (282,954 samples, 0.16%)</title><rect x="22.9890%" y="133" width="0.1558%" height="15" fill="rgb(249,31,29)"/><text x="23.2390%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,332,417 samples, 1.28%)</title><rect x="23.1448%" y="149" width="1.2846%" height="15" fill="rgb(225,111,53)"/><text x="23.3948%" y="159.50"></text></g><g><title>MIR_borrow_checking (43,132,992 samples, 23.76%)</title><rect x="0.6758%" y="181" width="23.7553%" height="15" fill="rgb(238,160,17)"/><text x="0.9258%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,790,839 samples, 23.57%)</title><rect x="0.8642%" y="165" width="23.5669%" height="15" fill="rgb(214,148,48)"/><text x="1.1142%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (335,864 samples, 0.18%)</title><rect x="24.4638%" y="181" width="0.1850%" height="15" fill="rgb(232,36,49)"/><text x="24.7138%" y="191.50"></text></g><g><title>should_inherit_track_caller (229,223 samples, 0.13%)</title><rect x="24.9669%" y="133" width="0.1262%" height="15" fill="rgb(209,103,24)"/><text x="25.2169%" y="143.50"></text></g><g><title>codegen_fn_attrs (434,674 samples, 0.24%)</title><rect x="24.8642%" y="149" width="0.2394%" height="15" fill="rgb(229,88,8)"/><text x="25.1142%" y="159.50"></text></g><g><title>check_mod_attrs (793,019 samples, 0.44%)</title><rect x="24.6669%" y="165" width="0.4368%" height="15" fill="rgb(213,181,19)"/><text x="24.9169%" y="175.50"></text></g><g><title>check_mod_const_bodies (244,002 samples, 0.13%)</title><rect x="25.1037%" y="165" width="0.1344%" height="15" fill="rgb(254,191,54)"/><text x="25.3537%" y="175.50"></text></g><g><title>lookup_deprecation_entry (220,023 samples, 0.12%)</title><rect x="25.4311%" y="149" width="0.1212%" height="15" fill="rgb(241,83,37)"/><text x="25.6811%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (548,918 samples, 0.30%)</title><rect x="25.2997%" y="165" width="0.3023%" height="15" fill="rgb(233,36,39)"/><text x="25.5497%" y="175.50"></text></g><g><title>misc_checking_1 (1,830,231 samples, 1.01%)</title><rect x="24.6491%" y="181" width="1.0080%" height="15" fill="rgb(226,3,54)"/><text x="24.8991%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (854,530 samples, 0.47%)</title><rect x="25.6580%" y="165" width="0.4706%" height="15" fill="rgb(245,192,40)"/><text x="25.9080%" y="175.50"></text></g><g><title>check_mod_liveness (710,307 samples, 0.39%)</title><rect x="25.7375%" y="149" width="0.3912%" height="15" fill="rgb(238,167,29)"/><text x="25.9875%" y="159.50"></text></g><g><title>misc_checking_2 (1,760,040 samples, 0.97%)</title><rect x="25.6571%" y="181" width="0.9693%" height="15" fill="rgb(232,182,51)"/><text x="25.9071%" y="191.50"></text></g><g><title>match_checking (903,790 samples, 0.50%)</title><rect x="26.1287%" y="165" width="0.4978%" height="15" fill="rgb(231,60,39)"/><text x="26.3787%" y="175.50"></text></g><g><title>check_match (832,749 samples, 0.46%)</title><rect x="26.1678%" y="149" width="0.4586%" height="15" fill="rgb(208,69,12)"/><text x="26.4178%" y="159.50"></text></g><g><title>check_private_in_public (358,094 samples, 0.20%)</title><rect x="26.6321%" y="165" width="0.1972%" height="15" fill="rgb(235,93,37)"/><text x="26.8821%" y="175.50"></text></g><g><title>death_checking (579,337 samples, 0.32%)</title><rect x="26.8293%" y="165" width="0.3191%" height="15" fill="rgb(213,116,39)"/><text x="27.0793%" y="175.50"></text></g><g><title>param_env (400,031 samples, 0.22%)</title><rect x="27.7626%" y="133" width="0.2203%" height="15" fill="rgb(222,207,29)"/><text x="28.0126%" y="143.50"></text></g><g><title>crate_lints (2,941,543 samples, 1.62%)</title><rect x="27.1493%" y="149" width="1.6200%" height="15" fill="rgb(206,96,30)"/><text x="27.3993%" y="159.50"></text></g><g><title>type_of (1,362,806 samples, 0.75%)</title><rect x="28.0188%" y="133" width="0.7506%" height="15" fill="rgb(218,138,4)"/><text x="28.2688%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,112,423 samples, 0.61%)</title><rect x="28.1567%" y="117" width="0.6127%" height="15" fill="rgb(250,191,14)"/><text x="28.4067%" y="127.50"></text></g><g><title>lint_checking (3,560,090 samples, 1.96%)</title><rect x="27.1484%" y="165" width="1.9607%" height="15" fill="rgb(239,60,40)"/><text x="27.3984%" y="175.50">l..</text></g><g><title>module_lints (616,877 samples, 0.34%)</title><rect x="28.7694%" y="149" width="0.3397%" height="15" fill="rgb(206,27,48)"/><text x="29.0194%" y="159.50"></text></g><g><title>lint_mod (609,127 samples, 0.34%)</title><rect x="28.7736%" y="133" width="0.3355%" height="15" fill="rgb(225,35,8)"/><text x="29.0236%" y="143.50"></text></g><g><title>privacy_access_levels (534,466 samples, 0.29%)</title><rect x="29.1091%" y="165" width="0.2944%" height="15" fill="rgb(250,213,24)"/><text x="29.3591%" y="175.50"></text></g><g><title>privacy_checking_modules (1,318,305 samples, 0.73%)</title><rect x="29.4035%" y="165" width="0.7261%" height="15" fill="rgb(247,123,22)"/><text x="29.6535%" y="175.50"></text></g><g><title>check_mod_privacy (1,312,255 samples, 0.72%)</title><rect x="29.4068%" y="149" width="0.7227%" height="15" fill="rgb(231,138,38)"/><text x="29.6568%" y="159.50"></text></g><g><title>misc_checking_3 (6,377,222 samples, 3.51%)</title><rect x="26.6264%" y="181" width="3.5122%" height="15" fill="rgb(231,145,46)"/><text x="26.8764%" y="191.50">mis..</text></g><g><title>adt_destructor (325,994 samples, 0.18%)</title><rect x="30.2506%" y="133" width="0.1795%" height="15" fill="rgb(251,118,11)"/><text x="30.5006%" y="143.50"></text></g><g><title>coherent_trait (322,653 samples, 0.18%)</title><rect x="30.2524%" y="117" width="0.1777%" height="15" fill="rgb(217,147,25)"/><text x="30.5024%" y="127.50"></text></g><g><title>specialization_graph_of (321,533 samples, 0.18%)</title><rect x="30.2530%" y="101" width="0.1771%" height="15" fill="rgb(247,81,37)"/><text x="30.5030%" y="111.50"></text></g><g><title>impl_parent (1,418,529 samples, 0.78%)</title><rect x="31.6864%" y="117" width="0.7812%" height="15" fill="rgb(209,12,38)"/><text x="31.9364%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (896,996 samples, 0.49%)</title><rect x="31.9736%" y="101" width="0.4940%" height="15" fill="rgb(227,1,9)"/><text x="32.2236%" y="111.50"></text></g><g><title>impl_trait_ref (3,926,943 samples, 2.16%)</title><rect x="32.4676%" y="117" width="2.1627%" height="15" fill="rgb(248,47,43)"/><text x="32.7176%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,193,785 samples, 1.76%)</title><rect x="32.8714%" y="101" width="1.7590%" height="15" fill="rgb(221,10,30)"/><text x="33.1214%" y="111.50"></text></g><g><title>coherent_trait (8,466,775 samples, 4.66%)</title><rect x="30.2284%" y="149" width="4.6630%" height="15" fill="rgb(210,229,1)"/><text x="30.4784%" y="159.50">coher..</text></g><g><title>specialization_graph_of (7,968,590 samples, 4.39%)</title><rect x="30.5028%" y="133" width="4.3887%" height="15" fill="rgb(222,148,37)"/><text x="30.7528%" y="143.50">speci..</text></g><g><title>trait_impls_of (474,048 samples, 0.26%)</title><rect x="34.6304%" y="117" width="0.2611%" height="15" fill="rgb(234,67,33)"/><text x="34.8804%" y="127.50"></text></g><g><title>coherence_checking (8,572,666 samples, 4.72%)</title><rect x="30.2170%" y="165" width="4.7214%" height="15" fill="rgb(247,98,35)"/><text x="30.4670%" y="175.50">cohere..</text></g><g><title>associated_item (465,016 samples, 0.26%)</title><rect x="53.8330%" y="101" width="0.2561%" height="15" fill="rgb(247,138,52)"/><text x="54.0830%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (371,933 samples, 0.20%)</title><rect x="53.8843%" y="85" width="0.2048%" height="15" fill="rgb(213,79,30)"/><text x="54.1343%" y="95.50"></text></g><g><title>associated_items (667,937 samples, 0.37%)</title><rect x="53.7392%" y="117" width="0.3679%" height="15" fill="rgb(246,177,23)"/><text x="53.9892%" y="127.50"></text></g><g><title>adt_dtorck_constraint (290,483 samples, 0.16%)</title><rect x="54.5416%" y="37" width="0.1600%" height="15" fill="rgb(230,62,27)"/><text x="54.7916%" y="47.50"></text></g><g><title>adt_dtorck_constraint (378,263 samples, 0.21%)</title><rect x="54.5006%" y="53" width="0.2083%" height="15" fill="rgb(216,154,8)"/><text x="54.7506%" y="63.50"></text></g><g><title>adt_dtorck_constraint (501,805 samples, 0.28%)</title><rect x="54.4428%" y="69" width="0.2764%" height="15" fill="rgb(244,35,45)"/><text x="54.6928%" y="79.50"></text></g><g><title>adt_dtorck_constraint (634,797 samples, 0.35%)</title><rect x="54.3853%" y="85" width="0.3496%" height="15" fill="rgb(251,115,12)"/><text x="54.6353%" y="95.50"></text></g><g><title>adt_dtorck_constraint (779,400 samples, 0.43%)</title><rect x="54.3280%" y="101" width="0.4293%" height="15" fill="rgb(240,54,50)"/><text x="54.5780%" y="111.50"></text></g><g><title>dropck_outlives (1,173,583 samples, 0.65%)</title><rect x="54.1441%" y="117" width="0.6463%" height="15" fill="rgb(233,84,52)"/><text x="54.3941%" y="127.50"></text></g><g><title>evaluate_obligation (2,044,894 samples, 1.13%)</title><rect x="54.7905%" y="117" width="1.1262%" height="15" fill="rgb(207,117,47)"/><text x="55.0405%" y="127.50"></text></g><g><title>trait_impls_of (431,854 samples, 0.24%)</title><rect x="55.6789%" y="101" width="0.2378%" height="15" fill="rgb(249,43,39)"/><text x="55.9289%" y="111.50"></text></g><g><title>evaluate_obligation (230,153 samples, 0.13%)</title><rect x="56.4174%" y="101" width="0.1268%" height="15" fill="rgb(209,38,44)"/><text x="56.6674%" y="111.50"></text></g><g><title>method_autoderef_steps (468,706 samples, 0.26%)</title><rect x="56.2958%" y="117" width="0.2581%" height="15" fill="rgb(236,212,23)"/><text x="56.5458%" y="127.50"></text></g><g><title>predicates_of (374,294 samples, 0.21%)</title><rect x="56.6146%" y="117" width="0.2061%" height="15" fill="rgb(242,79,21)"/><text x="56.8646%" y="127.50"></text></g><g><title>predicates_defined_on (237,321 samples, 0.13%)</title><rect x="56.6900%" y="101" width="0.1307%" height="15" fill="rgb(211,96,35)"/><text x="56.9400%" y="111.50"></text></g><g><title>adt_def (386,314 samples, 0.21%)</title><rect x="58.5995%" y="85" width="0.2128%" height="15" fill="rgb(253,215,40)"/><text x="58.8495%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (385,334 samples, 0.21%)</title><rect x="58.6001%" y="69" width="0.2122%" height="15" fill="rgb(211,81,21)"/><text x="58.8501%" y="79.50"></text></g><g><title>item_attrs (374,184 samples, 0.21%)</title><rect x="58.6062%" y="53" width="0.2061%" height="15" fill="rgb(208,190,38)"/><text x="58.8562%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (373,074 samples, 0.21%)</title><rect x="58.6068%" y="37" width="0.2055%" height="15" fill="rgb(235,213,38)"/><text x="58.8568%" y="47.50"></text></g><g><title>adt_sized_constraint (393,754 samples, 0.22%)</title><rect x="58.5964%" y="101" width="0.2169%" height="15" fill="rgb(237,122,38)"/><text x="58.8464%" y="111.50"></text></g><g><title>evaluate_obligation (424,874 samples, 0.23%)</title><rect x="58.9004%" y="101" width="0.2340%" height="15" fill="rgb(244,218,35)"/><text x="59.1504%" y="111.50"></text></g><g><title>typeck (4,399,249 samples, 2.42%)</title><rect x="56.9686%" y="117" width="2.4229%" height="15" fill="rgb(240,68,47)"/><text x="57.2186%" y="127.50">ty..</text></g><g><title>item_bodies_checking (44,432,136 samples, 24.47%)</title><rect x="34.9726%" y="165" width="24.4708%" height="15" fill="rgb(210,16,53)"/><text x="35.2226%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (44,428,516 samples, 24.47%)</title><rect x="34.9746%" y="149" width="24.4688%" height="15" fill="rgb(235,124,12)"/><text x="35.2246%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (44,183,684 samples, 24.33%)</title><rect x="35.1095%" y="133" width="24.3340%" height="15" fill="rgb(224,169,11)"/><text x="35.3595%" y="143.50">typeck</text></g><g><title>item_types_checking (2,309,306 samples, 1.27%)</title><rect x="59.4434%" y="165" width="1.2718%" height="15" fill="rgb(250,166,2)"/><text x="59.6934%" y="175.50"></text></g><g><title>check_mod_item_types (2,301,766 samples, 1.27%)</title><rect x="59.4476%" y="149" width="1.2677%" height="15" fill="rgb(242,216,29)"/><text x="59.6976%" y="159.50"></text></g><g><title>fn_sig (573,525 samples, 0.32%)</title><rect x="61.0223%" y="133" width="0.3159%" height="15" fill="rgb(230,116,27)"/><text x="61.2723%" y="143.50"></text></g><g><title>resolve_lifetimes (377,393 samples, 0.21%)</title><rect x="61.4927%" y="101" width="0.2078%" height="15" fill="rgb(228,99,48)"/><text x="61.7427%" y="111.50"></text></g><g><title>lint_levels (198,662 samples, 0.11%)</title><rect x="61.5912%" y="85" width="0.1094%" height="15" fill="rgb(253,11,6)"/><text x="61.8412%" y="95.50"></text></g><g><title>is_late_bound_map (395,723 samples, 0.22%)</title><rect x="61.4839%" y="117" width="0.2179%" height="15" fill="rgb(247,143,39)"/><text x="61.7339%" y="127.50"></text></g><g><title>named_region_map (561,419 samples, 0.31%)</title><rect x="61.7018%" y="117" width="0.3092%" height="15" fill="rgb(236,97,10)"/><text x="61.9518%" y="127.50"></text></g><g><title>resolve_lifetimes (489,898 samples, 0.27%)</title><rect x="61.7412%" y="101" width="0.2698%" height="15" fill="rgb(233,208,19)"/><text x="61.9912%" y="111.50"></text></g><g><title>generics_of (1,252,174 samples, 0.69%)</title><rect x="61.3381%" y="133" width="0.6896%" height="15" fill="rgb(216,164,2)"/><text x="61.5881%" y="143.50"></text></g><g><title>explicit_predicates_of (536,408 samples, 0.30%)</title><rect x="62.2414%" y="101" width="0.2954%" height="15" fill="rgb(220,129,5)"/><text x="62.4914%" y="111.50"></text></g><g><title>predicates_of (927,900 samples, 0.51%)</title><rect x="62.0832%" y="133" width="0.5110%" height="15" fill="rgb(242,17,10)"/><text x="62.3332%" y="143.50"></text></g><g><title>predicates_defined_on (818,950 samples, 0.45%)</title><rect x="62.1432%" y="117" width="0.4510%" height="15" fill="rgb(242,107,0)"/><text x="62.3932%" y="127.50"></text></g><g><title>type_collecting (3,879,203 samples, 2.14%)</title><rect x="60.7177%" y="165" width="2.1365%" height="15" fill="rgb(251,28,31)"/><text x="60.9677%" y="175.50">t..</text></g><g><title>collect_mod_item_types (3,863,283 samples, 2.13%)</title><rect x="60.7264%" y="149" width="2.1277%" height="15" fill="rgb(233,223,10)"/><text x="60.9764%" y="159.50">c..</text></g><g><title>type_of (361,883 samples, 0.20%)</title><rect x="62.6548%" y="133" width="0.1993%" height="15" fill="rgb(215,21,27)"/><text x="62.9048%" y="143.50"></text></g><g><title>evaluate_obligation (987,556 samples, 0.54%)</title><rect x="64.9084%" y="133" width="0.5439%" height="15" fill="rgb(232,23,21)"/><text x="65.1584%" y="143.50"></text></g><g><title>implied_outlives_bounds (495,735 samples, 0.27%)</title><rect x="65.4667%" y="133" width="0.2730%" height="15" fill="rgb(244,5,23)"/><text x="65.7167%" y="143.50"></text></g><g><title>param_env (459,296 samples, 0.25%)</title><rect x="65.7430%" y="133" width="0.2530%" height="15" fill="rgb(226,81,46)"/><text x="65.9930%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,639,571 samples, 3.11%)</title><rect x="63.0978%" y="149" width="3.1060%" height="15" fill="rgb(247,70,30)"/><text x="63.3478%" y="159.50">che..</text></g><g><title>region_scope_tree (344,234 samples, 0.19%)</title><rect x="66.0142%" y="133" width="0.1896%" height="15" fill="rgb(212,68,19)"/><text x="66.2642%" y="143.50"></text></g><g><title>evaluate_obligation (384,822 samples, 0.21%)</title><rect x="68.1272%" y="133" width="0.2119%" height="15" fill="rgb(240,187,13)"/><text x="68.3772%" y="143.50"></text></g><g><title>implied_outlives_bounds (188,760 samples, 0.10%)</title><rect x="68.3579%" y="133" width="0.1040%" height="15" fill="rgb(223,113,26)"/><text x="68.6079%" y="143.50"></text></g><g><title>param_env (747,139 samples, 0.41%)</title><rect x="68.4619%" y="133" width="0.4115%" height="15" fill="rgb(206,192,2)"/><text x="68.7119%" y="143.50"></text></g><g><title>region_scope_tree (499,104 samples, 0.27%)</title><rect x="68.9336%" y="133" width="0.2749%" height="15" fill="rgb(241,108,4)"/><text x="69.1836%" y="143.50"></text></g><g><title>check_item_well_formed (5,582,327 samples, 3.07%)</title><rect x="66.2038%" y="149" width="3.0744%" height="15" fill="rgb(247,173,49)"/><text x="66.4538%" y="159.50">che..</text></g><g><title>adt_sized_constraint (193,262 samples, 0.11%)</title><rect x="69.8046%" y="101" width="0.1064%" height="15" fill="rgb(224,114,35)"/><text x="70.0546%" y="111.50"></text></g><g><title>adt_sized_constraint (230,673 samples, 0.13%)</title><rect x="69.7849%" y="117" width="0.1270%" height="15" fill="rgb(245,159,27)"/><text x="70.0349%" y="127.50"></text></g><g><title>evaluate_obligation (459,457 samples, 0.25%)</title><rect x="69.6800%" y="133" width="0.2530%" height="15" fill="rgb(245,172,44)"/><text x="69.9300%" y="143.50"></text></g><g><title>param_env (183,782 samples, 0.10%)</title><rect x="70.0184%" y="133" width="0.1012%" height="15" fill="rgb(236,23,11)"/><text x="70.2684%" y="143.50"></text></g><g><title>analysis (126,752,098 samples, 69.81%)</title><rect x="0.4016%" y="197" width="69.8082%" height="15" fill="rgb(205,117,38)"/><text x="0.6516%" y="207.50">analysis</text></g><g><title>type_check_crate (72,757,943 samples, 40.07%)</title><rect x="30.1386%" y="181" width="40.0712%" height="15" fill="rgb(237,72,25)"/><text x="30.3886%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,342,489 samples, 7.35%)</title><rect x="62.8615%" y="165" width="7.3483%" height="15" fill="rgb(244,70,9)"/><text x="63.1115%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,691,479 samples, 0.93%)</title><rect x="69.2782%" y="149" width="0.9316%" height="15" fill="rgb(217,125,39)"/><text x="69.5282%" y="159.50"></text></g><g><title>codegen_crate (377,454 samples, 0.21%)</title><rect x="70.2149%" y="197" width="0.2079%" height="15" fill="rgb(235,36,10)"/><text x="70.4649%" y="207.50"></text></g><g><title>AST_validation (182,702 samples, 0.10%)</title><rect x="70.5272%" y="181" width="0.1006%" height="15" fill="rgb(251,123,47)"/><text x="70.7772%" y="191.50"></text></g><g><title>metadata_register_crate (2,516,179 samples, 1.39%)</title><rect x="85.6207%" y="149" width="1.3858%" height="15" fill="rgb(221,13,13)"/><text x="85.8707%" y="159.50"></text></g><g><title>metadata_register_crate (868,649 samples, 0.48%)</title><rect x="86.5281%" y="133" width="0.4784%" height="15" fill="rgb(238,131,9)"/><text x="86.7781%" y="143.50"></text></g><g><title>macro_expand_crate (29,986,265 samples, 16.51%)</title><rect x="70.7185%" y="181" width="16.5148%" height="15" fill="rgb(211,50,8)"/><text x="70.9685%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (29,973,875 samples, 16.51%)</title><rect x="70.7254%" y="165" width="16.5080%" height="15" fill="rgb(245,182,24)"/><text x="70.9754%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (411,904 samples, 0.23%)</title><rect x="87.0065%" y="149" width="0.2269%" height="15" fill="rgb(242,14,37)"/><text x="87.2565%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (406,705 samples, 0.22%)</title><rect x="87.2351%" y="181" width="0.2240%" height="15" fill="rgb(246,228,12)"/><text x="87.4851%" y="191.50"></text></g><g><title>late_resolve_crate (2,738,191 samples, 1.51%)</title><rect x="87.5614%" y="165" width="1.5080%" height="15" fill="rgb(213,55,15)"/><text x="87.8114%" y="175.50"></text></g><g><title>configure_and_expand (34,035,470 samples, 18.74%)</title><rect x="70.4228%" y="197" width="18.7449%" height="15" fill="rgb(209,9,3)"/><text x="70.6728%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,102,345 samples, 1.71%)</title><rect x="87.4591%" y="181" width="1.7086%" height="15" fill="rgb(230,59,30)"/><text x="87.7091%" y="191.50"></text></g><g><title>drop_ast (230,653 samples, 0.13%)</title><rect x="89.1677%" y="197" width="0.1270%" height="15" fill="rgb(209,121,21)"/><text x="89.4177%" y="207.50"></text></g><g><title>early_lint_checks (591,667 samples, 0.33%)</title><rect x="89.3035%" y="197" width="0.3259%" height="15" fill="rgb(220,109,13)"/><text x="89.5535%" y="207.50"></text></g><g><title>free_global_ctxt (4,173,657 samples, 2.30%)</title><rect x="89.6294%" y="197" width="2.2986%" height="15" fill="rgb(232,18,1)"/><text x="89.8794%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,235,545 samples, 1.23%)</title><rect x="91.9280%" y="197" width="1.2312%" height="15" fill="rgb(215,41,42)"/><text x="92.1780%" y="207.50"></text></g><g><title>hir_lowering (6,351,521 samples, 3.50%)</title><rect x="93.1592%" y="197" width="3.4981%" height="15" fill="rgb(224,123,36)"/><text x="93.4092%" y="207.50">hir..</text></g><g><title>parse_crate (4,388,519 samples, 2.42%)</title><rect x="96.6951%" y="197" width="2.4170%" height="15" fill="rgb(240,125,3)"/><text x="96.9451%" y="207.50">pa..</text></g><g><title>self_profile_alloc_query_strings (897,190 samples, 0.49%)</title><rect x="99.2135%" y="197" width="0.4941%" height="15" fill="rgb(205,98,50)"/><text x="99.4635%" y="207.50"></text></g><g><title>all (181,571,861 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (181,571,861 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (437,375 samples, 0.24%)</title><rect x="99.7591%" y="197" width="0.2409%" height="15" fill="rgb(213,199,42)"/><text x="100.0091%" y="207.50"></text></g></svg></svg>