<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (106,010 samples, 0.18%)</title><rect x="8.8783%" y="277" width="0.1809%" height="15" fill="rgb(227,0,7)"/><text x="9.1283%" y="287.50"></text></g><g><title>item_attrs (123,951 samples, 0.21%)</title><rect x="9.3864%" y="245" width="0.2116%" height="15" fill="rgb(217,0,24)"/><text x="9.6364%" y="255.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,441 samples, 0.20%)</title><rect x="9.3959%" y="229" width="0.2022%" height="15" fill="rgb(221,193,54)"/><text x="9.6459%" y="239.50"></text></g><g><title>codegen_fn_attrs (174,272 samples, 0.30%)</title><rect x="9.3105%" y="261" width="0.2975%" height="15" fill="rgb(248,212,6)"/><text x="9.5605%" y="271.50"></text></g><g><title>eval_to_const_value_raw (63,721 samples, 0.11%)</title><rect x="10.7975%" y="245" width="0.1088%" height="15" fill="rgb(208,68,35)"/><text x="11.0475%" y="255.50"></text></g><g><title>eval_to_const_value_raw (61,381 samples, 0.10%)</title><rect x="10.8015%" y="229" width="0.1048%" height="15" fill="rgb(232,128,0)"/><text x="11.0515%" y="239.50"></text></g><g><title>is_copy_raw (142,992 samples, 0.24%)</title><rect x="11.0671%" y="213" width="0.2441%" height="15" fill="rgb(207,160,47)"/><text x="11.3171%" y="223.50"></text></g><g><title>evaluate_obligation (81,552 samples, 0.14%)</title><rect x="11.1720%" y="197" width="0.1392%" height="15" fill="rgb(228,23,34)"/><text x="11.4220%" y="207.50"></text></g><g><title>param_env (70,630 samples, 0.12%)</title><rect x="11.3112%" y="213" width="0.1206%" height="15" fill="rgb(218,30,26)"/><text x="11.5612%" y="223.50"></text></g><g><title>adt_drop_tys (289,422 samples, 0.49%)</title><rect x="10.9905%" y="229" width="0.4940%" height="15" fill="rgb(220,122,19)"/><text x="11.2405%" y="239.50"></text></g><g><title>is_copy_raw (225,806 samples, 0.39%)</title><rect x="11.4845%" y="229" width="0.3854%" height="15" fill="rgb(250,228,42)"/><text x="11.7345%" y="239.50"></text></g><g><title>evaluate_obligation (187,546 samples, 0.32%)</title><rect x="11.5498%" y="213" width="0.3201%" height="15" fill="rgb(240,193,28)"/><text x="11.7998%" y="223.50"></text></g><g><title>needs_drop_raw (563,518 samples, 0.96%)</title><rect x="10.9107%" y="245" width="0.9619%" height="15" fill="rgb(216,20,37)"/><text x="11.1607%" y="255.50"></text></g><g><title>thir_body (324,701 samples, 0.55%)</title><rect x="11.9988%" y="245" width="0.5542%" height="15" fill="rgb(206,188,39)"/><text x="12.2488%" y="255.50"></text></g><g><title>mir_const (2,408,038 samples, 4.11%)</title><rect x="8.4528%" y="293" width="4.1103%" height="15" fill="rgb(217,207,13)"/><text x="8.7028%" y="303.50">mir_..</text></g><g><title>unsafety_check_result (2,052,763 samples, 3.50%)</title><rect x="9.0592%" y="277" width="3.5038%" height="15" fill="rgb(231,73,38)"/><text x="9.3092%" y="287.50">uns..</text></g><g><title>mir_built (1,731,259 samples, 2.96%)</title><rect x="9.6080%" y="261" width="2.9551%" height="15" fill="rgb(225,20,46)"/><text x="9.8580%" y="271.50">mir..</text></g><g><title>has_structural_eq_impls (179,662 samples, 0.31%)</title><rect x="12.7024%" y="277" width="0.3067%" height="15" fill="rgb(210,31,41)"/><text x="12.9524%" y="287.50"></text></g><g><title>evaluate_obligation (169,092 samples, 0.29%)</title><rect x="12.7205%" y="261" width="0.2886%" height="15" fill="rgb(221,200,47)"/><text x="12.9705%" y="271.50"></text></g><g><title>trait_impls_of (152,161 samples, 0.26%)</title><rect x="12.7494%" y="245" width="0.2597%" height="15" fill="rgb(226,26,5)"/><text x="12.9994%" y="255.50"></text></g><g><title>mir_promoted (3,085,233 samples, 5.27%)</title><rect x="7.9424%" y="309" width="5.2662%" height="15" fill="rgb(249,33,26)"/><text x="8.1924%" y="319.50">mir_pr..</text></g><g><title>mir_const_qualif (378,194 samples, 0.65%)</title><rect x="12.5631%" y="293" width="0.6455%" height="15" fill="rgb(235,183,28)"/><text x="12.8131%" y="303.50"></text></g><g><title>type_op_ascribe_user_type (160,693 samples, 0.27%)</title><rect x="13.2086%" y="309" width="0.2743%" height="15" fill="rgb(221,5,38)"/><text x="13.4586%" y="319.50"></text></g><g><title>type_op_prove_predicate (827,902 samples, 1.41%)</title><rect x="13.5253%" y="309" width="1.4131%" height="15" fill="rgb(247,18,42)"/><text x="13.7753%" y="319.50"></text></g><g><title>evaluate_obligation (144,772 samples, 0.25%)</title><rect x="14.6913%" y="293" width="0.2471%" height="15" fill="rgb(241,131,45)"/><text x="14.9413%" y="303.50"></text></g><g><title>MIR_borrow_checking (7,808,808 samples, 13.33%)</title><rect x="1.6173%" y="341" width="13.3288%" height="15" fill="rgb(249,31,29)"/><text x="1.8673%" y="351.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,781,528 samples, 13.28%)</title><rect x="1.6639%" y="325" width="13.2822%" height="15" fill="rgb(225,111,53)"/><text x="1.9139%" y="335.50">mir_borrowck</text></g><g><title>MIR_effect_checking (97,661 samples, 0.17%)</title><rect x="14.9461%" y="341" width="0.1667%" height="15" fill="rgb(238,160,17)"/><text x="15.1961%" y="351.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (77,761 samples, 0.13%)</title><rect x="14.9801%" y="325" width="0.1327%" height="15" fill="rgb(214,148,48)"/><text x="15.2301%" y="335.50"></text></g><g><title>hir_module_items (162,922 samples, 0.28%)</title><rect x="15.1128%" y="341" width="0.2781%" height="15" fill="rgb(232,36,49)"/><text x="15.3628%" y="351.50"></text></g><g><title>get_lang_items (105,561 samples, 0.18%)</title><rect x="15.8325%" y="293" width="0.1802%" height="15" fill="rgb(209,103,24)"/><text x="16.0825%" y="303.50"></text></g><g><title>should_inherit_track_caller (140,321 samples, 0.24%)</title><rect x="16.0127%" y="293" width="0.2395%" height="15" fill="rgb(229,88,8)"/><text x="16.2627%" y="303.50"></text></g><g><title>codegen_fn_attrs (352,533 samples, 0.60%)</title><rect x="15.6997%" y="309" width="0.6017%" height="15" fill="rgb(213,181,19)"/><text x="15.9497%" y="319.50"></text></g><g><title>check_mod_attrs (504,246 samples, 0.86%)</title><rect x="15.4412%" y="325" width="0.8607%" height="15" fill="rgb(254,191,54)"/><text x="15.6912%" y="335.50"></text></g><g><title>check_mod_const_bodies (79,001 samples, 0.13%)</title><rect x="16.3019%" y="325" width="0.1348%" height="15" fill="rgb(241,83,37)"/><text x="16.5519%" y="335.50"></text></g><g><title>lookup_deprecation_entry (125,832 samples, 0.21%)</title><rect x="16.7278%" y="309" width="0.2148%" height="15" fill="rgb(233,36,39)"/><text x="16.9778%" y="319.50"></text></g><g><title>lookup_stability (61,941 samples, 0.11%)</title><rect x="16.9426%" y="309" width="0.1057%" height="15" fill="rgb(226,3,54)"/><text x="17.1926%" y="319.50"></text></g><g><title>check_mod_unstable_api_usage (350,354 samples, 0.60%)</title><rect x="16.5087%" y="325" width="0.5980%" height="15" fill="rgb(245,192,40)"/><text x="16.7587%" y="335.50"></text></g><g><title>misc_checking_1 (1,054,962 samples, 1.80%)</title><rect x="15.3915%" y="341" width="1.8007%" height="15" fill="rgb(238,167,29)"/><text x="15.6415%" y="351.50">m..</text></g><g><title>liveness_and_intrinsic_checking (178,262 samples, 0.30%)</title><rect x="17.1946%" y="325" width="0.3043%" height="15" fill="rgb(232,182,51)"/><text x="17.4446%" y="335.50"></text></g><g><title>check_mod_liveness (150,362 samples, 0.26%)</title><rect x="17.2422%" y="309" width="0.2567%" height="15" fill="rgb(231,60,39)"/><text x="17.4922%" y="319.50"></text></g><g><title>misc_checking_2 (356,104 samples, 0.61%)</title><rect x="17.1922%" y="341" width="0.6078%" height="15" fill="rgb(208,69,12)"/><text x="17.4422%" y="351.50"></text></g><g><title>match_checking (176,452 samples, 0.30%)</title><rect x="17.4988%" y="325" width="0.3012%" height="15" fill="rgb(235,93,37)"/><text x="17.7488%" y="335.50"></text></g><g><title>check_match (165,662 samples, 0.28%)</title><rect x="17.5173%" y="309" width="0.2828%" height="15" fill="rgb(213,116,39)"/><text x="17.7673%" y="319.50"></text></g><g><title>death_checking (89,741 samples, 0.15%)</title><rect x="17.9033%" y="325" width="0.1532%" height="15" fill="rgb(222,207,29)"/><text x="18.1533%" y="335.50"></text></g><g><title>fn_abi_of_instance (60,720 samples, 0.10%)</title><rect x="18.4521%" y="261" width="0.1036%" height="15" fill="rgb(206,96,30)"/><text x="18.7021%" y="271.50"></text></g><g><title>eval_to_allocation_raw (183,562 samples, 0.31%)</title><rect x="18.3635%" y="293" width="0.3133%" height="15" fill="rgb(218,138,4)"/><text x="18.6135%" y="303.50"></text></g><g><title>eval_to_allocation_raw (182,512 samples, 0.31%)</title><rect x="18.3653%" y="277" width="0.3115%" height="15" fill="rgb(250,191,14)"/><text x="18.6153%" y="287.50"></text></g><g><title>param_env (88,571 samples, 0.15%)</title><rect x="18.6768%" y="293" width="0.1512%" height="15" fill="rgb(239,60,40)"/><text x="18.9268%" y="303.50"></text></g><g><title>crate_lints (456,715 samples, 0.78%)</title><rect x="18.0589%" y="309" width="0.7796%" height="15" fill="rgb(206,27,48)"/><text x="18.3089%" y="319.50"></text></g><g><title>lint_checking (561,427 samples, 0.96%)</title><rect x="18.0565%" y="325" width="0.9583%" height="15" fill="rgb(225,35,8)"/><text x="18.3065%" y="335.50"></text></g><g><title>module_lints (103,302 samples, 0.18%)</title><rect x="18.8385%" y="309" width="0.1763%" height="15" fill="rgb(250,213,24)"/><text x="19.0885%" y="319.50"></text></g><g><title>lint_mod (101,142 samples, 0.17%)</title><rect x="18.8422%" y="293" width="0.1726%" height="15" fill="rgb(247,123,22)"/><text x="19.0922%" y="303.50"></text></g><g><title>privacy_checking_modules (185,932 samples, 0.32%)</title><rect x="19.0968%" y="325" width="0.3174%" height="15" fill="rgb(231,138,38)"/><text x="19.3468%" y="335.50"></text></g><g><title>check_mod_privacy (184,652 samples, 0.32%)</title><rect x="19.0990%" y="309" width="0.3152%" height="15" fill="rgb(231,145,46)"/><text x="19.3490%" y="319.50"></text></g><g><title>misc_checking_3 (960,761 samples, 1.64%)</title><rect x="17.8000%" y="341" width="1.6399%" height="15" fill="rgb(251,118,11)"/><text x="18.0500%" y="351.50"></text></g><g><title>impl_parent (328,206 samples, 0.56%)</title><rect x="20.1773%" y="277" width="0.5602%" height="15" fill="rgb(217,147,25)"/><text x="20.4273%" y="287.50"></text></g><g><title>metadata_decode_entry_impl_parent (250,934 samples, 0.43%)</title><rect x="20.3092%" y="261" width="0.4283%" height="15" fill="rgb(247,81,37)"/><text x="20.5592%" y="271.50"></text></g><g><title>impl_trait_ref (856,907 samples, 1.46%)</title><rect x="20.7375%" y="277" width="1.4626%" height="15" fill="rgb(209,12,38)"/><text x="20.9875%" y="287.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (786,897 samples, 1.34%)</title><rect x="20.8570%" y="261" width="1.3431%" height="15" fill="rgb(227,1,9)"/><text x="21.1070%" y="271.50"></text></g><g><title>coherent_trait (1,710,220 samples, 2.92%)</title><rect x="19.5217%" y="309" width="2.9192%" height="15" fill="rgb(248,47,43)"/><text x="19.7717%" y="319.50">co..</text></g><g><title>specialization_graph_of (1,697,419 samples, 2.90%)</title><rect x="19.5435%" y="293" width="2.8973%" height="15" fill="rgb(221,10,30)"/><text x="19.7935%" y="303.50">sp..</text></g><g><title>trait_impls_of (140,981 samples, 0.24%)</title><rect x="22.2002%" y="277" width="0.2406%" height="15" fill="rgb(210,229,1)"/><text x="22.4502%" y="287.50"></text></g><g><title>coherence_checking (1,777,410 samples, 3.03%)</title><rect x="19.4946%" y="325" width="3.0339%" height="15" fill="rgb(222,148,37)"/><text x="19.7446%" y="335.50">coh..</text></g><g><title>associated_item (157,761 samples, 0.27%)</title><rect x="27.5447%" y="261" width="0.2693%" height="15" fill="rgb(234,67,33)"/><text x="27.7947%" y="271.50"></text></g><g><title>metadata_decode_entry_associated_item (117,450 samples, 0.20%)</title><rect x="27.6135%" y="245" width="0.2005%" height="15" fill="rgb(247,98,35)"/><text x="27.8635%" y="255.50"></text></g><g><title>associated_items (219,342 samples, 0.37%)</title><rect x="27.4565%" y="277" width="0.3744%" height="15" fill="rgb(247,138,52)"/><text x="27.7065%" y="287.50"></text></g><g><title>adt_def (1,075,062 samples, 1.84%)</title><rect x="28.1720%" y="245" width="1.8350%" height="15" fill="rgb(213,79,30)"/><text x="28.4220%" y="255.50">a..</text></g><g><title>metadata_decode_entry_adt_def (1,069,452 samples, 1.83%)</title><rect x="28.1816%" y="229" width="1.8254%" height="15" fill="rgb(246,177,23)"/><text x="28.4316%" y="239.50">m..</text></g><g><title>item_attrs (95,581 samples, 0.16%)</title><rect x="29.8439%" y="213" width="0.1631%" height="15" fill="rgb(230,62,27)"/><text x="30.0939%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (89,581 samples, 0.15%)</title><rect x="29.8541%" y="197" width="0.1529%" height="15" fill="rgb(216,154,8)"/><text x="30.1041%" y="207.50"></text></g><g><title>adt_def (422,076 samples, 0.72%)</title><rect x="30.1914%" y="229" width="0.7204%" height="15" fill="rgb(244,35,45)"/><text x="30.4414%" y="239.50"></text></g><g><title>metadata_decode_entry_adt_def (417,976 samples, 0.71%)</title><rect x="30.1984%" y="213" width="0.7134%" height="15" fill="rgb(251,115,12)"/><text x="30.4484%" y="223.50"></text></g><g><title>item_attrs (260,603 samples, 0.44%)</title><rect x="30.4670%" y="197" width="0.4448%" height="15" fill="rgb(240,54,50)"/><text x="30.7170%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (256,073 samples, 0.44%)</title><rect x="30.4748%" y="181" width="0.4371%" height="15" fill="rgb(233,84,52)"/><text x="30.7248%" y="191.50"></text></g><g><title>adt_def (70,601 samples, 0.12%)</title><rect x="31.0126%" y="213" width="0.1205%" height="15" fill="rgb(207,117,47)"/><text x="31.2626%" y="223.50"></text></g><g><title>metadata_decode_entry_adt_def (67,561 samples, 0.12%)</title><rect x="31.0178%" y="197" width="0.1153%" height="15" fill="rgb(249,43,39)"/><text x="31.2678%" y="207.50"></text></g><g><title>adt_def (89,811 samples, 0.15%)</title><rect x="31.2226%" y="197" width="0.1533%" height="15" fill="rgb(209,38,44)"/><text x="31.4726%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (88,151 samples, 0.15%)</title><rect x="31.2254%" y="181" width="0.1505%" height="15" fill="rgb(236,212,23)"/><text x="31.4754%" y="191.50"></text></g><g><title>item_attrs (61,941 samples, 0.11%)</title><rect x="31.2702%" y="165" width="0.1057%" height="15" fill="rgb(242,79,21)"/><text x="31.5202%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,191 samples, 0.10%)</title><rect x="31.2732%" y="149" width="0.1027%" height="15" fill="rgb(211,96,35)"/><text x="31.5232%" y="159.50"></text></g><g><title>adt_def (271,943 samples, 0.46%)</title><rect x="31.4365%" y="181" width="0.4642%" height="15" fill="rgb(253,215,40)"/><text x="31.6865%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (270,463 samples, 0.46%)</title><rect x="31.4391%" y="165" width="0.4617%" height="15" fill="rgb(211,81,21)"/><text x="31.6891%" y="175.50"></text></g><g><title>item_attrs (76,680 samples, 0.13%)</title><rect x="31.7698%" y="149" width="0.1309%" height="15" fill="rgb(208,190,38)"/><text x="32.0198%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (74,930 samples, 0.13%)</title><rect x="31.7728%" y="133" width="0.1279%" height="15" fill="rgb(235,213,38)"/><text x="32.0228%" y="143.50"></text></g><g><title>adt_def (171,062 samples, 0.29%)</title><rect x="31.9585%" y="165" width="0.2920%" height="15" fill="rgb(237,122,38)"/><text x="32.2085%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (169,382 samples, 0.29%)</title><rect x="31.9614%" y="149" width="0.2891%" height="15" fill="rgb(244,218,35)"/><text x="32.2114%" y="159.50"></text></g><g><title>item_attrs (68,431 samples, 0.12%)</title><rect x="32.1337%" y="133" width="0.1168%" height="15" fill="rgb(240,68,47)"/><text x="32.3837%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (66,741 samples, 0.11%)</title><rect x="32.1366%" y="117" width="0.1139%" height="15" fill="rgb(210,16,53)"/><text x="32.3866%" y="127.50"></text></g><g><title>adt_def (67,191 samples, 0.11%)</title><rect x="32.4896%" y="133" width="0.1147%" height="15" fill="rgb(235,124,12)"/><text x="32.7396%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (64,501 samples, 0.11%)</title><rect x="32.4942%" y="117" width="0.1101%" height="15" fill="rgb(224,169,11)"/><text x="32.7442%" y="127.50"></text></g><g><title>adt_def (88,121 samples, 0.15%)</title><rect x="32.8324%" y="85" width="0.1504%" height="15" fill="rgb(250,166,2)"/><text x="33.0824%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (87,691 samples, 0.15%)</title><rect x="32.8332%" y="69" width="0.1497%" height="15" fill="rgb(242,216,29)"/><text x="33.0832%" y="79.50"></text></g><g><title>item_attrs (63,570 samples, 0.11%)</title><rect x="32.8743%" y="53" width="0.1085%" height="15" fill="rgb(230,116,27)"/><text x="33.1243%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (62,880 samples, 0.11%)</title><rect x="32.8755%" y="37" width="0.1073%" height="15" fill="rgb(228,99,48)"/><text x="33.1255%" y="47.50"></text></g><g><title>adt_dtorck_constraint (98,581 samples, 0.17%)</title><rect x="32.8267%" y="101" width="0.1683%" height="15" fill="rgb(253,11,6)"/><text x="33.0767%" y="111.50"></text></g><g><title>adt_dtorck_constraint (136,413 samples, 0.23%)</title><rect x="32.7720%" y="117" width="0.2328%" height="15" fill="rgb(247,143,39)"/><text x="33.0220%" y="127.50"></text></g><g><title>adt_dtorck_constraint (248,444 samples, 0.42%)</title><rect x="32.6279%" y="133" width="0.4241%" height="15" fill="rgb(236,97,10)"/><text x="32.8779%" y="143.50"></text></g><g><title>adt_dtorck_constraint (395,265 samples, 0.67%)</title><rect x="32.4264%" y="149" width="0.6747%" height="15" fill="rgb(233,208,19)"/><text x="32.6764%" y="159.50"></text></g><g><title>adt_dtorck_constraint (530,607 samples, 0.91%)</title><rect x="32.2641%" y="165" width="0.9057%" height="15" fill="rgb(216,164,2)"/><text x="32.5141%" y="175.50"></text></g><g><title>adt_dtorck_constraint (773,459 samples, 1.32%)</title><rect x="31.9199%" y="181" width="1.3202%" height="15" fill="rgb(220,129,5)"/><text x="32.1699%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,108,653 samples, 1.89%)</title><rect x="31.3988%" y="197" width="1.8924%" height="15" fill="rgb(242,17,10)"/><text x="31.6488%" y="207.50">a..</text></g><g><title>adt_dtorck_constraint (1,287,314 samples, 2.20%)</title><rect x="31.1704%" y="213" width="2.1973%" height="15" fill="rgb(242,107,0)"/><text x="31.4204%" y="223.50">a..</text></g><g><title>adt_dtorck_constraint (1,460,165 samples, 2.49%)</title><rect x="30.9476%" y="229" width="2.4923%" height="15" fill="rgb(251,28,31)"/><text x="31.1976%" y="239.50">ad..</text></g><g><title>adt_dtorck_constraint (2,041,872 samples, 3.49%)</title><rect x="30.0829%" y="245" width="3.4853%" height="15" fill="rgb(233,223,10)"/><text x="30.3329%" y="255.50">adt..</text></g><g><title>type_of (65,150 samples, 0.11%)</title><rect x="33.4569%" y="229" width="0.1112%" height="15" fill="rgb(215,21,27)"/><text x="33.7069%" y="239.50"></text></g><g><title>dropck_outlives (3,445,037 samples, 5.88%)</title><rect x="27.8580%" y="277" width="5.8803%" height="15" fill="rgb(232,23,21)"/><text x="28.1080%" y="287.50">dropck_..</text></g><g><title>adt_dtorck_constraint (3,363,657 samples, 5.74%)</title><rect x="27.9969%" y="261" width="5.7414%" height="15" fill="rgb(244,5,23)"/><text x="28.2469%" y="271.50">adt_dto..</text></g><g><title>type_of (76,842 samples, 0.13%)</title><rect x="33.6071%" y="245" width="0.1312%" height="15" fill="rgb(226,81,46)"/><text x="33.8571%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (65,081 samples, 0.11%)</title><rect x="33.6272%" y="229" width="0.1111%" height="15" fill="rgb(247,70,30)"/><text x="33.8772%" y="239.50"></text></g><g><title>adt_def (125,223 samples, 0.21%)</title><rect x="33.9495%" y="245" width="0.2137%" height="15" fill="rgb(212,68,19)"/><text x="34.1995%" y="255.50"></text></g><g><title>metadata_decode_entry_adt_def (123,203 samples, 0.21%)</title><rect x="33.9530%" y="229" width="0.2103%" height="15" fill="rgb(240,187,13)"/><text x="34.2030%" y="239.50"></text></g><g><title>item_attrs (94,482 samples, 0.16%)</title><rect x="34.0020%" y="213" width="0.1613%" height="15" fill="rgb(223,113,26)"/><text x="34.2520%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,592 samples, 0.15%)</title><rect x="34.0120%" y="197" width="0.1512%" height="15" fill="rgb(206,192,2)"/><text x="34.2620%" y="207.50"></text></g><g><title>adt_def (76,271 samples, 0.13%)</title><rect x="34.1679%" y="229" width="0.1302%" height="15" fill="rgb(241,108,4)"/><text x="34.4179%" y="239.50"></text></g><g><title>metadata_decode_entry_adt_def (75,641 samples, 0.13%)</title><rect x="34.1690%" y="213" width="0.1291%" height="15" fill="rgb(247,173,49)"/><text x="34.4190%" y="223.50"></text></g><g><title>item_attrs (67,631 samples, 0.12%)</title><rect x="34.1827%" y="197" width="0.1154%" height="15" fill="rgb(224,114,35)"/><text x="34.4327%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (66,871 samples, 0.11%)</title><rect x="34.1840%" y="181" width="0.1141%" height="15" fill="rgb(245,159,27)"/><text x="34.4340%" y="191.50"></text></g><g><title>adt_sized_constraint (95,031 samples, 0.16%)</title><rect x="34.1633%" y="245" width="0.1622%" height="15" fill="rgb(245,172,44)"/><text x="34.4133%" y="255.50"></text></g><g><title>adt_sized_constraint (243,064 samples, 0.41%)</title><rect x="33.9320%" y="261" width="0.4149%" height="15" fill="rgb(236,23,11)"/><text x="34.1820%" y="271.50"></text></g><g><title>evaluate_obligation (723,188 samples, 1.23%)</title><rect x="33.7383%" y="277" width="1.2344%" height="15" fill="rgb(205,117,38)"/><text x="33.9883%" y="287.50"></text></g><g><title>trait_impls_of (324,594 samples, 0.55%)</title><rect x="34.4186%" y="261" width="0.5540%" height="15" fill="rgb(237,72,25)"/><text x="34.6686%" y="271.50"></text></g><g><title>implementations_of_trait (82,260 samples, 0.14%)</title><rect x="34.8323%" y="245" width="0.1404%" height="15" fill="rgb(244,70,9)"/><text x="35.0823%" y="255.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (62,220 samples, 0.11%)</title><rect x="34.8665%" y="229" width="0.1062%" height="15" fill="rgb(217,125,39)"/><text x="35.1165%" y="239.50"></text></g><g><title>fn_sig (68,070 samples, 0.12%)</title><rect x="34.9904%" y="277" width="0.1162%" height="15" fill="rgb(235,36,10)"/><text x="35.2404%" y="287.50"></text></g><g><title>metadata_decode_entry_fn_sig (62,880 samples, 0.11%)</title><rect x="34.9992%" y="261" width="0.1073%" height="15" fill="rgb(251,123,47)"/><text x="35.2492%" y="271.50"></text></g><g><title>method_autoderef_steps (84,121 samples, 0.14%)</title><rect x="35.3373%" y="277" width="0.1436%" height="15" fill="rgb(221,13,13)"/><text x="35.5873%" y="287.50"></text></g><g><title>predicates_of (166,212 samples, 0.28%)</title><rect x="35.5038%" y="277" width="0.2837%" height="15" fill="rgb(238,131,9)"/><text x="35.7538%" y="287.50"></text></g><g><title>predicates_defined_on (113,830 samples, 0.19%)</title><rect x="35.5932%" y="261" width="0.1943%" height="15" fill="rgb(211,50,8)"/><text x="35.8432%" y="271.50"></text></g><g><title>trait_impls_of (109,832 samples, 0.19%)</title><rect x="35.7901%" y="277" width="0.1875%" height="15" fill="rgb(245,182,24)"/><text x="36.0401%" y="287.50"></text></g><g><title>associated_items (70,961 samples, 0.12%)</title><rect x="42.4116%" y="261" width="0.1211%" height="15" fill="rgb(242,14,37)"/><text x="42.6616%" y="271.50"></text></g><g><title>adt_def (69,710 samples, 0.12%)</title><rect x="42.7736%" y="213" width="0.1190%" height="15" fill="rgb(246,228,12)"/><text x="43.0236%" y="223.50"></text></g><g><title>metadata_decode_entry_adt_def (65,870 samples, 0.11%)</title><rect x="42.7802%" y="197" width="0.1124%" height="15" fill="rgb(213,55,15)"/><text x="43.0302%" y="207.50"></text></g><g><title>adt_dtorck_constraint (78,671 samples, 0.13%)</title><rect x="42.9127%" y="213" width="0.1343%" height="15" fill="rgb(209,9,3)"/><text x="43.1627%" y="223.50"></text></g><g><title>adt_dtorck_constraint (198,402 samples, 0.34%)</title><rect x="42.7456%" y="229" width="0.3387%" height="15" fill="rgb(230,59,30)"/><text x="42.9956%" y="239.50"></text></g><g><title>adt_dtorck_constraint (282,833 samples, 0.48%)</title><rect x="42.6489%" y="245" width="0.4828%" height="15" fill="rgb(209,121,21)"/><text x="42.8989%" y="255.50"></text></g><g><title>evaluate_obligation (261,093 samples, 0.45%)</title><rect x="43.1899%" y="229" width="0.4457%" height="15" fill="rgb(220,109,13)"/><text x="43.4399%" y="239.50"></text></g><g><title>trait_impls_of (244,923 samples, 0.42%)</title><rect x="43.2175%" y="213" width="0.4181%" height="15" fill="rgb(232,18,1)"/><text x="43.4675%" y="223.50"></text></g><g><title>dropck_outlives (670,717 samples, 1.14%)</title><rect x="42.5544%" y="261" width="1.1448%" height="15" fill="rgb(215,41,42)"/><text x="42.8044%" y="271.50"></text></g><g><title>normalize_projection_ty (332,484 samples, 0.57%)</title><rect x="43.1317%" y="245" width="0.5675%" height="15" fill="rgb(224,123,36)"/><text x="43.3817%" y="255.50"></text></g><g><title>adt_sized_constraint (77,581 samples, 0.13%)</title><rect x="44.3606%" y="229" width="0.1324%" height="15" fill="rgb(240,125,3)"/><text x="44.6106%" y="239.50"></text></g><g><title>adt_sized_constraint (136,301 samples, 0.23%)</title><rect x="44.2686%" y="245" width="0.2327%" height="15" fill="rgb(205,98,50)"/><text x="44.5186%" y="255.50"></text></g><g><title>evaluate_obligation (610,126 samples, 1.04%)</title><rect x="43.6992%" y="261" width="1.0414%" height="15" fill="rgb(205,185,37)"/><text x="43.9492%" y="271.50"></text></g><g><title>trait_impls_of (78,290 samples, 0.13%)</title><rect x="44.6070%" y="245" width="0.1336%" height="15" fill="rgb(238,207,15)"/><text x="44.8570%" y="255.50"></text></g><g><title>is_copy_raw (363,833 samples, 0.62%)</title><rect x="44.9431%" y="261" width="0.6210%" height="15" fill="rgb(213,199,42)"/><text x="45.1931%" y="271.50"></text></g><g><title>evaluate_obligation (333,363 samples, 0.57%)</title><rect x="44.9951%" y="245" width="0.5690%" height="15" fill="rgb(235,201,11)"/><text x="45.2451%" y="255.50"></text></g><g><title>trait_impls_of (186,802 samples, 0.32%)</title><rect x="45.2453%" y="229" width="0.3189%" height="15" fill="rgb(207,46,11)"/><text x="45.4953%" y="239.50"></text></g><g><title>predicates_of (132,540 samples, 0.23%)</title><rect x="45.7228%" y="261" width="0.2262%" height="15" fill="rgb(241,35,35)"/><text x="45.9728%" y="271.50"></text></g><g><title>predicates_defined_on (94,040 samples, 0.16%)</title><rect x="45.7886%" y="245" width="0.1605%" height="15" fill="rgb(243,32,47)"/><text x="46.0386%" y="255.50"></text></g><g><title>typeck (5,900,816 samples, 10.07%)</title><rect x="36.0318%" y="277" width="10.0721%" height="15" fill="rgb(247,202,23)"/><text x="36.2818%" y="287.50">typeck</text></g><g><title>item_bodies_checking (13,817,855 samples, 23.59%)</title><rect x="22.5628%" y="325" width="23.5856%" height="15" fill="rgb(219,102,11)"/><text x="22.8128%" y="335.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,815,305 samples, 23.58%)</title><rect x="22.5671%" y="309" width="23.5813%" height="15" fill="rgb(243,110,44)"/><text x="22.8171%" y="319.50">typeck_item_bodies</text></g><g><title>typeck (13,798,155 samples, 23.55%)</title><rect x="22.5964%" y="293" width="23.5520%" height="15" fill="rgb(222,74,54)"/><text x="22.8464%" y="303.50">typeck</text></g><g><title>impl_parent (105,251 samples, 0.18%)</title><rect x="46.6279%" y="245" width="0.1797%" height="15" fill="rgb(216,99,12)"/><text x="46.8779%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_parent (67,101 samples, 0.11%)</title><rect x="46.6931%" y="229" width="0.1145%" height="15" fill="rgb(226,22,26)"/><text x="46.9431%" y="239.50"></text></g><g><title>impl_trait_ref (370,655 samples, 0.63%)</title><rect x="46.8076%" y="245" width="0.6327%" height="15" fill="rgb(217,163,10)"/><text x="47.0576%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (330,325 samples, 0.56%)</title><rect x="46.8764%" y="229" width="0.5638%" height="15" fill="rgb(213,25,53)"/><text x="47.1264%" y="239.50"></text></g><g><title>adt_destructor (691,418 samples, 1.18%)</title><rect x="46.3611%" y="293" width="1.1802%" height="15" fill="rgb(252,105,26)"/><text x="46.6111%" y="303.50"></text></g><g><title>coherent_trait (687,308 samples, 1.17%)</title><rect x="46.3681%" y="277" width="1.1732%" height="15" fill="rgb(220,39,43)"/><text x="46.6181%" y="287.50"></text></g><g><title>specialization_graph_of (684,898 samples, 1.17%)</title><rect x="46.3722%" y="261" width="1.1690%" height="15" fill="rgb(229,68,48)"/><text x="46.6222%" y="271.50"></text></g><g><title>trait_impls_of (59,180 samples, 0.10%)</title><rect x="47.4403%" y="245" width="0.1010%" height="15" fill="rgb(252,8,32)"/><text x="47.6903%" y="255.50"></text></g><g><title>item_types_checking (1,221,154 samples, 2.08%)</title><rect x="46.1484%" y="325" width="2.0844%" height="15" fill="rgb(223,20,43)"/><text x="46.3984%" y="335.50">i..</text></g><g><title>check_mod_item_types (1,218,484 samples, 2.08%)</title><rect x="46.1529%" y="309" width="2.0798%" height="15" fill="rgb(229,81,49)"/><text x="46.4029%" y="319.50">c..</text></g><g><title>typeck (312,663 samples, 0.53%)</title><rect x="47.6991%" y="293" width="0.5337%" height="15" fill="rgb(236,28,36)"/><text x="47.9491%" y="303.50"></text></g><g><title>late_bound_vars_map (136,604 samples, 0.23%)</title><rect x="48.7937%" y="277" width="0.2332%" height="15" fill="rgb(249,185,26)"/><text x="49.0437%" y="287.50"></text></g><g><title>resolve_lifetimes (121,124 samples, 0.21%)</title><rect x="48.8201%" y="261" width="0.2067%" height="15" fill="rgb(249,174,33)"/><text x="49.0701%" y="271.50"></text></g><g><title>fn_sig (404,216 samples, 0.69%)</title><rect x="48.4820%" y="293" width="0.6900%" height="15" fill="rgb(233,201,37)"/><text x="48.7320%" y="303.50"></text></g><g><title>type_of (84,481 samples, 0.14%)</title><rect x="49.0277%" y="277" width="0.1442%" height="15" fill="rgb(221,78,26)"/><text x="49.2777%" y="287.50"></text></g><g><title>metadata_decode_entry_type_of (78,581 samples, 0.13%)</title><rect x="49.0378%" y="261" width="0.1341%" height="15" fill="rgb(250,127,30)"/><text x="49.2878%" y="271.50"></text></g><g><title>named_region_map (63,300 samples, 0.11%)</title><rect x="49.4180%" y="277" width="0.1080%" height="15" fill="rgb(230,49,44)"/><text x="49.6680%" y="287.50"></text></g><g><title>generics_of (226,451 samples, 0.39%)</title><rect x="49.1719%" y="293" width="0.3865%" height="15" fill="rgb(229,67,23)"/><text x="49.4219%" y="303.50"></text></g><g><title>late_bound_vars_map (139,271 samples, 0.24%)</title><rect x="49.8411%" y="245" width="0.2377%" height="15" fill="rgb(249,83,47)"/><text x="50.0911%" y="255.50"></text></g><g><title>resolve_lifetimes (131,051 samples, 0.22%)</title><rect x="49.8551%" y="229" width="0.2237%" height="15" fill="rgb(215,43,3)"/><text x="50.1051%" y="239.50"></text></g><g><title>lint_levels (78,561 samples, 0.13%)</title><rect x="49.9447%" y="213" width="0.1341%" height="15" fill="rgb(238,154,13)"/><text x="50.1947%" y="223.50"></text></g><g><title>explicit_predicates_of (234,752 samples, 0.40%)</title><rect x="49.6813%" y="261" width="0.4007%" height="15" fill="rgb(219,56,2)"/><text x="49.9313%" y="271.50"></text></g><g><title>predicates_of (345,682 samples, 0.59%)</title><rect x="49.5872%" y="293" width="0.5900%" height="15" fill="rgb(233,0,4)"/><text x="49.8372%" y="303.50"></text></g><g><title>predicates_defined_on (326,182 samples, 0.56%)</title><rect x="49.6205%" y="277" width="0.5568%" height="15" fill="rgb(235,30,7)"/><text x="49.8705%" y="287.50"></text></g><g><title>type_collecting (1,231,234 samples, 2.10%)</title><rect x="48.2358%" y="325" width="2.1016%" height="15" fill="rgb(250,79,13)"/><text x="48.4858%" y="335.50">t..</text></g><g><title>collect_mod_item_types (1,218,664 samples, 2.08%)</title><rect x="48.2573%" y="309" width="2.0801%" height="15" fill="rgb(211,146,34)"/><text x="48.5073%" y="319.50">c..</text></g><g><title>type_of (93,842 samples, 0.16%)</title><rect x="50.1772%" y="293" width="0.1602%" height="15" fill="rgb(228,22,38)"/><text x="50.4272%" y="303.50"></text></g><g><title>evaluate_obligation (147,992 samples, 0.25%)</title><rect x="50.6967%" y="293" width="0.2526%" height="15" fill="rgb(235,168,5)"/><text x="50.9467%" y="303.50"></text></g><g><title>check_impl_item_well_formed (356,444 samples, 0.61%)</title><rect x="50.4532%" y="309" width="0.6084%" height="15" fill="rgb(221,155,16)"/><text x="50.7032%" y="319.50"></text></g><g><title>adt_sized_constraint (110,131 samples, 0.19%)</title><rect x="52.3180%" y="277" width="0.1880%" height="15" fill="rgb(215,215,53)"/><text x="52.5680%" y="287.50"></text></g><g><title>evaluate_obligation (254,863 samples, 0.44%)</title><rect x="52.1861%" y="293" width="0.4350%" height="15" fill="rgb(223,4,10)"/><text x="52.4361%" y="303.50"></text></g><g><title>implied_outlives_bounds (161,081 samples, 0.27%)</title><rect x="52.6226%" y="293" width="0.2749%" height="15" fill="rgb(234,103,6)"/><text x="52.8726%" y="303.50"></text></g><g><title>param_env (253,252 samples, 0.43%)</title><rect x="52.8982%" y="293" width="0.4323%" height="15" fill="rgb(227,97,0)"/><text x="53.1482%" y="303.50"></text></g><g><title>predicates_of (102,382 samples, 0.17%)</title><rect x="53.3305%" y="293" width="0.1748%" height="15" fill="rgb(234,150,53)"/><text x="53.5805%" y="303.50"></text></g><g><title>predicates_defined_on (73,241 samples, 0.13%)</title><rect x="53.3803%" y="277" width="0.1250%" height="15" fill="rgb(228,201,54)"/><text x="53.6303%" y="287.50"></text></g><g><title>region_scope_tree (120,323 samples, 0.21%)</title><rect x="53.5053%" y="293" width="0.2054%" height="15" fill="rgb(222,22,37)"/><text x="53.7553%" y="303.50"></text></g><g><title>analysis (30,792,145 samples, 52.56%)</title><rect x="1.2280%" y="357" width="52.5589%" height="15" fill="rgb(237,53,32)"/><text x="1.4780%" y="367.50">analysis</text></g><g><title>type_check_crate (20,122,485 samples, 34.35%)</title><rect x="19.4399%" y="341" width="34.3469%" height="15" fill="rgb(233,25,53)"/><text x="19.6899%" y="351.50">type_check_crate</text></g><g><title>wf_checking (2,019,392 samples, 3.45%)</title><rect x="50.3400%" y="325" width="3.4469%" height="15" fill="rgb(210,40,34)"/><text x="50.5900%" y="335.50">wf_..</text></g><g><title>check_item_well_formed (1,596,627 samples, 2.73%)</title><rect x="51.0616%" y="309" width="2.7253%" height="15" fill="rgb(241,220,44)"/><text x="51.3116%" y="319.50">ch..</text></g><g><title>codegen_crate (414,664 samples, 0.71%)</title><rect x="53.8070%" y="357" width="0.7078%" height="15" fill="rgb(235,28,35)"/><text x="54.0570%" y="367.50"></text></g><g><title>AST_validation (124,631 samples, 0.21%)</title><rect x="54.9020%" y="341" width="0.2127%" height="15" fill="rgb(210,56,17)"/><text x="55.1520%" y="351.50"></text></g><g><title>crate_injection (84,441 samples, 0.14%)</title><rect x="55.2088%" y="341" width="0.1441%" height="15" fill="rgb(224,130,29)"/><text x="55.4588%" y="351.50"></text></g><g><title>metadata_load_macro (202,025 samples, 0.34%)</title><rect x="75.8341%" y="309" width="0.3448%" height="15" fill="rgb(235,212,8)"/><text x="76.0841%" y="319.50"></text></g><g><title>macro_expand_crate (16,016,520 samples, 27.34%)</title><rect x="55.3529%" y="341" width="27.3385%" height="15" fill="rgb(223,33,50)"/><text x="55.6029%" y="351.50">macro_expand_crate</text></g><g><title>expand_crate (15,992,289 samples, 27.30%)</title><rect x="55.3942%" y="325" width="27.2971%" height="15" fill="rgb(219,149,13)"/><text x="55.6442%" y="335.50">expand_crate</text></g><g><title>metadata_register_crate (3,815,392 samples, 6.51%)</title><rect x="76.1789%" y="309" width="6.5125%" height="15" fill="rgb(250,156,29)"/><text x="76.4289%" y="319.50">metadata_..</text></g><g><title>metadata_register_crate (1,664,578 samples, 2.84%)</title><rect x="79.8501%" y="293" width="2.8413%" height="15" fill="rgb(216,193,19)"/><text x="80.1001%" y="303.50">me..</text></g><g><title>metadata_register_crate (281,204 samples, 0.48%)</title><rect x="82.2114%" y="277" width="0.4800%" height="15" fill="rgb(216,135,14)"/><text x="82.4614%" y="287.50"></text></g><g><title>pre_AST_expansion_lint_checks (160,532 samples, 0.27%)</title><rect x="82.6990%" y="341" width="0.2740%" height="15" fill="rgb(241,47,5)"/><text x="82.9490%" y="351.50"></text></g><g><title>finalize_imports (299,194 samples, 0.51%)</title><rect x="82.9906%" y="325" width="0.5107%" height="15" fill="rgb(233,42,35)"/><text x="83.2406%" y="335.50"></text></g><g><title>late_resolve_crate (1,485,517 samples, 2.54%)</title><rect x="83.5333%" y="325" width="2.5356%" height="15" fill="rgb(231,13,6)"/><text x="83.7833%" y="335.50">la..</text></g><g><title>configure_and_expand (18,564,768 samples, 31.69%)</title><rect x="54.5148%" y="357" width="31.6881%" height="15" fill="rgb(207,181,40)"/><text x="54.7648%" y="367.50">configure_and_expand</text></g><g><title>resolve_crate (1,892,232 samples, 3.23%)</title><rect x="82.9730%" y="341" width="3.2298%" height="15" fill="rgb(254,173,49)"/><text x="83.2230%" y="351.50">res..</text></g><g><title>drop_ast (96,931 samples, 0.17%)</title><rect x="86.2029%" y="357" width="0.1655%" height="15" fill="rgb(221,1,38)"/><text x="86.4529%" y="367.50"></text></g><g><title>early_lint_checks (243,452 samples, 0.42%)</title><rect x="86.3980%" y="357" width="0.4155%" height="15" fill="rgb(206,124,46)"/><text x="86.6480%" y="367.50"></text></g><g><title>free_global_ctxt (2,630,399 samples, 4.49%)</title><rect x="86.8135%" y="357" width="4.4898%" height="15" fill="rgb(249,21,11)"/><text x="87.0635%" y="367.50">free_..</text></g><g><title>crate_hash (73,492 samples, 0.13%)</title><rect x="91.8220%" y="341" width="0.1254%" height="15" fill="rgb(222,201,40)"/><text x="92.0720%" y="351.50"></text></g><g><title>generate_crate_metadata (449,895 samples, 0.77%)</title><rect x="91.3034%" y="357" width="0.7679%" height="15" fill="rgb(235,61,29)"/><text x="91.5534%" y="367.50"></text></g><g><title>hir_lowering (1,471,387 samples, 2.51%)</title><rect x="92.0713%" y="357" width="2.5115%" height="15" fill="rgb(219,207,3)"/><text x="92.3213%" y="367.50">hi..</text></g><g><title>parse_crate (1,875,891 samples, 3.20%)</title><rect x="94.6635%" y="357" width="3.2019%" height="15" fill="rgb(222,56,46)"/><text x="94.9135%" y="367.50">par..</text></g><g><title>prepare_outputs (315,424 samples, 0.54%)</title><rect x="97.8815%" y="357" width="0.5384%" height="15" fill="rgb(239,76,54)"/><text x="98.1315%" y="367.50"></text></g><g><title>self_profile_alloc_query_strings (445,985 samples, 0.76%)</title><rect x="98.4199%" y="357" width="0.7612%" height="15" fill="rgb(231,124,27)"/><text x="98.6699%" y="367.50"></text></g><g><title>setup_global_ctxt (125,961 samples, 0.22%)</title><rect x="99.1997%" y="357" width="0.2150%" height="15" fill="rgb(249,195,6)"/><text x="99.4497%" y="367.50"></text></g><g><title>all (58,585,947 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(237,174,47)"/><text x="0.2500%" y="399.50"></text></g><g><title>rustc (58,585,947 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(206,201,31)"/><text x="0.2500%" y="383.50">rustc</text></g><g><title>write_crate_metadata (342,924 samples, 0.59%)</title><rect x="99.4147%" y="357" width="0.5853%" height="15" fill="rgb(231,57,52)"/><text x="99.6647%" y="367.50"></text></g></svg></svg>