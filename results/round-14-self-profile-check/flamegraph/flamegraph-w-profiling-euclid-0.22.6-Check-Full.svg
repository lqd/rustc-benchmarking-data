<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (1,175,333 samples, 0.12%)</title><rect x="13.6037%" y="133" width="0.1245%" height="15" fill="rgb(227,0,7)"/><text x="13.8537%" y="143.50"></text></g><g><title>is_copy_raw (1,081,934 samples, 0.11%)</title><rect x="20.0771%" y="69" width="0.1146%" height="15" fill="rgb(217,0,24)"/><text x="20.3271%" y="79.50"></text></g><g><title>is_copy_raw (11,516,642 samples, 1.22%)</title><rect x="20.3303%" y="53" width="1.2201%" height="15" fill="rgb(221,193,54)"/><text x="20.5803%" y="63.50"></text></g><g><title>evaluate_obligation (9,849,674 samples, 1.04%)</title><rect x="20.5069%" y="37" width="1.0435%" height="15" fill="rgb(248,212,6)"/><text x="20.7569%" y="47.50"></text></g><g><title>needs_drop_raw (12,822,382 samples, 1.36%)</title><rect x="20.1925%" y="69" width="1.3584%" height="15" fill="rgb(208,68,35)"/><text x="20.4425%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,860,329 samples, 0.30%)</title><rect x="21.8150%" y="53" width="0.3030%" height="15" fill="rgb(232,128,0)"/><text x="22.0650%" y="63.50"></text></g><g><title>resolve_instance (6,009,715 samples, 0.64%)</title><rect x="21.5549%" y="69" width="0.6367%" height="15" fill="rgb(207,160,47)"/><text x="21.8049%" y="79.50"></text></g><g><title>thir_body (13,462,158 samples, 1.43%)</title><rect x="22.2324%" y="69" width="1.4262%" height="15" fill="rgb(228,23,34)"/><text x="22.4824%" y="79.50"></text></g><g><title>mir_const (83,412,612 samples, 8.84%)</title><rect x="14.8612%" y="117" width="8.8368%" height="15" fill="rgb(218,30,26)"/><text x="15.1112%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (72,211,237 samples, 7.65%)</title><rect x="16.0479%" y="101" width="7.6501%" height="15" fill="rgb(220,122,19)"/><text x="16.2979%" y="111.50">unsafety_c..</text></g><g><title>mir_built (66,248,412 samples, 7.02%)</title><rect x="16.6796%" y="85" width="7.0184%" height="15" fill="rgb(250,228,42)"/><text x="16.9296%" y="95.50">mir_built</text></g><g><title>mir_const (2,043,305 samples, 0.22%)</title><rect x="23.9850%" y="101" width="0.2165%" height="15" fill="rgb(240,193,28)"/><text x="24.2350%" y="111.50"></text></g><g><title>unsafety_check_result (1,587,150 samples, 0.17%)</title><rect x="24.0333%" y="85" width="0.1681%" height="15" fill="rgb(216,20,37)"/><text x="24.2833%" y="95.50"></text></g><g><title>mir_built (1,415,488 samples, 0.15%)</title><rect x="24.0515%" y="69" width="0.1500%" height="15" fill="rgb(206,188,39)"/><text x="24.3015%" y="79.50"></text></g><g><title>mir_promoted (98,365,122 samples, 10.42%)</title><rect x="13.8163%" y="133" width="10.4209%" height="15" fill="rgb(217,207,13)"/><text x="14.0663%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (5,089,458 samples, 0.54%)</title><rect x="23.6981%" y="117" width="0.5392%" height="15" fill="rgb(231,73,38)"/><text x="23.9481%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (9,026,556 samples, 0.96%)</title><rect x="24.2384%" y="133" width="0.9563%" height="15" fill="rgb(225,20,46)"/><text x="24.4884%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,291,461 samples, 0.35%)</title><rect x="25.1946%" y="133" width="0.3487%" height="15" fill="rgb(210,31,41)"/><text x="25.4446%" y="143.50"></text></g><g><title>normalize_projection_ty (2,114,480 samples, 0.22%)</title><rect x="25.3193%" y="117" width="0.2240%" height="15" fill="rgb(221,200,47)"/><text x="25.5693%" y="127.50"></text></g><g><title>type_op_normalize_ty (2,751,231 samples, 0.29%)</title><rect x="25.5887%" y="133" width="0.2915%" height="15" fill="rgb(226,26,5)"/><text x="25.8387%" y="143.50"></text></g><g><title>normalize_projection_ty (1,994,103 samples, 0.21%)</title><rect x="25.6689%" y="117" width="0.2113%" height="15" fill="rgb(249,33,26)"/><text x="25.9189%" y="127.50"></text></g><g><title>type_op_prove_predicate (17,601,396 samples, 1.86%)</title><rect x="25.8801%" y="133" width="1.8647%" height="15" fill="rgb(235,183,28)"/><text x="26.1301%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (258,276,409 samples, 27.36%)</title><rect x="0.3842%" y="165" width="27.3620%" height="15" fill="rgb(221,5,38)"/><text x="0.6342%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (256,233,556 samples, 27.15%)</title><rect x="0.6007%" y="149" width="27.1456%" height="15" fill="rgb(247,18,42)"/><text x="0.8507%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,767,371 samples, 0.29%)</title><rect x="27.7463%" y="165" width="0.2932%" height="15" fill="rgb(241,131,45)"/><text x="27.9963%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,868,772 samples, 0.20%)</title><rect x="27.8415%" y="149" width="0.1980%" height="15" fill="rgb(249,31,29)"/><text x="28.0915%" y="159.50"></text></g><g><title>hir_module_items (2,532,556 samples, 0.27%)</title><rect x="28.0395%" y="165" width="0.2683%" height="15" fill="rgb(225,111,53)"/><text x="28.2895%" y="175.50"></text></g><g><title>get_lang_items (1,024,211 samples, 0.11%)</title><rect x="28.7990%" y="85" width="0.1085%" height="15" fill="rgb(238,160,17)"/><text x="29.0490%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,291,097 samples, 0.14%)</title><rect x="28.7940%" y="101" width="0.1368%" height="15" fill="rgb(214,148,48)"/><text x="29.0440%" y="111.50"></text></g><g><title>codegen_fn_attrs (3,327,794 samples, 0.35%)</title><rect x="28.5873%" y="133" width="0.3525%" height="15" fill="rgb(232,36,49)"/><text x="28.8373%" y="143.50"></text></g><g><title>should_inherit_track_caller (2,760,757 samples, 0.29%)</title><rect x="28.6474%" y="117" width="0.2925%" height="15" fill="rgb(209,103,24)"/><text x="28.8974%" y="127.50"></text></g><g><title>check_mod_attrs (5,898,786 samples, 0.62%)</title><rect x="28.3149%" y="149" width="0.6249%" height="15" fill="rgb(229,88,8)"/><text x="28.5649%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,517,769 samples, 0.16%)</title><rect x="28.9399%" y="149" width="0.1608%" height="15" fill="rgb(213,181,19)"/><text x="29.1899%" y="159.50"></text></g><g><title>check_mod_loops (1,011,331 samples, 0.11%)</title><rect x="29.1007%" y="149" width="0.1071%" height="15" fill="rgb(254,191,54)"/><text x="29.3507%" y="159.50"></text></g><g><title>lookup_deprecation_entry (1,550,638 samples, 0.16%)</title><rect x="29.3842%" y="133" width="0.1643%" height="15" fill="rgb(241,83,37)"/><text x="29.6342%" y="143.50"></text></g><g><title>stability_index (1,403,766 samples, 0.15%)</title><rect x="29.3998%" y="117" width="0.1487%" height="15" fill="rgb(233,36,39)"/><text x="29.6498%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (3,105,781 samples, 0.33%)</title><rect x="29.2321%" y="149" width="0.3290%" height="15" fill="rgb(226,3,54)"/><text x="29.4821%" y="159.50"></text></g><g><title>misc_checking_1 (12,264,897 samples, 1.30%)</title><rect x="28.3078%" y="165" width="1.2994%" height="15" fill="rgb(245,192,40)"/><text x="28.5578%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (5,418,111 samples, 0.57%)</title><rect x="29.6074%" y="149" width="0.5740%" height="15" fill="rgb(238,167,29)"/><text x="29.8574%" y="159.50"></text></g><g><title>check_mod_liveness (4,511,301 samples, 0.48%)</title><rect x="29.7035%" y="133" width="0.4779%" height="15" fill="rgb(232,182,51)"/><text x="29.9535%" y="143.50"></text></g><g><title>misc_checking_2 (9,829,740 samples, 1.04%)</title><rect x="29.6072%" y="165" width="1.0414%" height="15" fill="rgb(231,60,39)"/><text x="29.8572%" y="175.50"></text></g><g><title>match_checking (4,409,419 samples, 0.47%)</title><rect x="30.1814%" y="149" width="0.4671%" height="15" fill="rgb(208,69,12)"/><text x="30.4314%" y="159.50"></text></g><g><title>check_match (3,883,760 samples, 0.41%)</title><rect x="30.2371%" y="133" width="0.4114%" height="15" fill="rgb(235,93,37)"/><text x="30.4871%" y="143.50"></text></g><g><title>check_private_in_public (3,459,579 samples, 0.37%)</title><rect x="30.6505%" y="149" width="0.3665%" height="15" fill="rgb(213,116,39)"/><text x="30.9005%" y="159.50"></text></g><g><title>death_checking (5,953,976 samples, 0.63%)</title><rect x="31.0170%" y="149" width="0.6308%" height="15" fill="rgb(222,207,29)"/><text x="31.2670%" y="159.50"></text></g><g><title>param_env (2,805,668 samples, 0.30%)</title><rect x="32.2198%" y="117" width="0.2972%" height="15" fill="rgb(206,96,30)"/><text x="32.4698%" y="127.50"></text></g><g><title>predicates_of (1,234,282 samples, 0.13%)</title><rect x="32.3863%" y="101" width="0.1308%" height="15" fill="rgb(218,138,4)"/><text x="32.6363%" y="111.50"></text></g><g><title>predicates_defined_on (993,591 samples, 0.11%)</title><rect x="32.4118%" y="85" width="0.1053%" height="15" fill="rgb(250,191,14)"/><text x="32.6618%" y="95.50"></text></g><g><title>crate_lints (9,455,566 samples, 1.00%)</title><rect x="31.6482%" y="133" width="1.0017%" height="15" fill="rgb(239,60,40)"/><text x="31.8982%" y="143.50"></text></g><g><title>type_of (1,248,064 samples, 0.13%)</title><rect x="32.5177%" y="117" width="0.1322%" height="15" fill="rgb(206,27,48)"/><text x="32.7677%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,013,303 samples, 0.11%)</title><rect x="32.5426%" y="101" width="0.1074%" height="15" fill="rgb(225,35,8)"/><text x="32.7926%" y="111.50"></text></g><g><title>lint_checking (14,471,632 samples, 1.53%)</title><rect x="31.6478%" y="149" width="1.5331%" height="15" fill="rgb(250,213,24)"/><text x="31.8978%" y="159.50"></text></g><g><title>module_lints (5,012,186 samples, 0.53%)</title><rect x="32.6499%" y="133" width="0.5310%" height="15" fill="rgb(247,123,22)"/><text x="32.8999%" y="143.50"></text></g><g><title>lint_mod (4,989,256 samples, 0.53%)</title><rect x="32.6524%" y="117" width="0.5286%" height="15" fill="rgb(231,138,38)"/><text x="32.9024%" y="127.50"></text></g><g><title>privacy_access_levels (4,953,925 samples, 0.52%)</title><rect x="33.1809%" y="149" width="0.5248%" height="15" fill="rgb(231,145,46)"/><text x="33.4309%" y="159.50"></text></g><g><title>privacy_checking_modules (10,975,822 samples, 1.16%)</title><rect x="33.7058%" y="149" width="1.1628%" height="15" fill="rgb(251,118,11)"/><text x="33.9558%" y="159.50"></text></g><g><title>check_mod_privacy (10,953,252 samples, 1.16%)</title><rect x="33.7081%" y="133" width="1.1604%" height="15" fill="rgb(217,147,25)"/><text x="33.9581%" y="143.50"></text></g><g><title>misc_checking_3 (39,983,486 samples, 4.24%)</title><rect x="30.6485%" y="165" width="4.2359%" height="15" fill="rgb(247,81,37)"/><text x="30.8985%" y="175.50">misc_..</text></g><g><title>impl_parent (3,761,956 samples, 0.40%)</title><rect x="35.7878%" y="101" width="0.3985%" height="15" fill="rgb(209,12,38)"/><text x="36.0378%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,952,271 samples, 0.21%)</title><rect x="35.9795%" y="85" width="0.2068%" height="15" fill="rgb(227,1,9)"/><text x="36.2295%" y="95.50"></text></g><g><title>impl_trait_ref (6,602,549 samples, 0.70%)</title><rect x="36.1863%" y="101" width="0.6995%" height="15" fill="rgb(248,47,43)"/><text x="36.4363%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,164,708 samples, 0.55%)</title><rect x="36.3387%" y="85" width="0.5472%" height="15" fill="rgb(221,10,30)"/><text x="36.5887%" y="95.50"></text></g><g><title>trait_impls_of (1,270,679 samples, 0.13%)</title><rect x="36.9219%" y="101" width="0.1346%" height="15" fill="rgb(210,229,1)"/><text x="37.1719%" y="111.50"></text></g><g><title>coherent_trait (19,494,798 samples, 2.07%)</title><rect x="34.9914%" y="133" width="2.0653%" height="15" fill="rgb(222,148,37)"/><text x="35.2414%" y="143.50">c..</text></g><g><title>specialization_graph_of (18,651,679 samples, 1.98%)</title><rect x="35.0808%" y="117" width="1.9760%" height="15" fill="rgb(234,67,33)"/><text x="35.3308%" y="127.50">s..</text></g><g><title>coherence_checking (20,289,187 samples, 2.15%)</title><rect x="34.9873%" y="149" width="2.1495%" height="15" fill="rgb(247,98,35)"/><text x="35.2373%" y="159.50">c..</text></g><g><title>dropck_outlives (3,151,784 samples, 0.33%)</title><rect x="61.1443%" y="101" width="0.3339%" height="15" fill="rgb(247,138,52)"/><text x="61.3943%" y="111.50"></text></g><g><title>evaluate_obligation (11,595,831 samples, 1.23%)</title><rect x="61.4782%" y="101" width="1.2285%" height="15" fill="rgb(213,79,30)"/><text x="61.7282%" y="111.50"></text></g><g><title>method_autoderef_steps (2,738,809 samples, 0.29%)</title><rect x="62.8659%" y="101" width="0.2902%" height="15" fill="rgb(246,177,23)"/><text x="63.1159%" y="111.50"></text></g><g><title>evaluate_obligation (1,475,556 samples, 0.16%)</title><rect x="62.9997%" y="85" width="0.1563%" height="15" fill="rgb(230,62,27)"/><text x="63.2497%" y="95.50"></text></g><g><title>typeck (4,569,721 samples, 0.48%)</title><rect x="63.3777%" y="101" width="0.4841%" height="15" fill="rgb(216,154,8)"/><text x="63.6277%" y="111.50"></text></g><g><title>item_bodies_checking (251,924,388 samples, 26.69%)</title><rect x="37.2159%" y="149" width="26.6891%" height="15" fill="rgb(244,35,45)"/><text x="37.4659%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (251,920,128 samples, 26.69%)</title><rect x="37.2164%" y="133" width="26.6886%" height="15" fill="rgb(251,115,12)"/><text x="37.4664%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (250,514,994 samples, 26.54%)</title><rect x="37.3652%" y="117" width="26.5398%" height="15" fill="rgb(240,54,50)"/><text x="37.6152%" y="127.50">typeck</text></g><g><title>item_types_checking (14,132,457 samples, 1.50%)</title><rect x="63.9050%" y="149" width="1.4972%" height="15" fill="rgb(233,84,52)"/><text x="64.1550%" y="159.50"></text></g><g><title>check_mod_item_types (14,110,916 samples, 1.49%)</title><rect x="63.9073%" y="133" width="1.4949%" height="15" fill="rgb(207,117,47)"/><text x="64.1573%" y="143.50"></text></g><g><title>fn_sig (3,300,293 samples, 0.35%)</title><rect x="65.7717%" y="117" width="0.3496%" height="15" fill="rgb(249,43,39)"/><text x="66.0217%" y="127.50"></text></g><g><title>named_region_map (2,162,552 samples, 0.23%)</title><rect x="66.2977%" y="101" width="0.2291%" height="15" fill="rgb(209,38,44)"/><text x="66.5477%" y="111.50"></text></g><g><title>resolve_lifetimes (2,035,262 samples, 0.22%)</title><rect x="66.3112%" y="85" width="0.2156%" height="15" fill="rgb(236,212,23)"/><text x="66.5612%" y="95.50"></text></g><g><title>lint_levels (1,852,580 samples, 0.20%)</title><rect x="66.3306%" y="69" width="0.1963%" height="15" fill="rgb(242,79,21)"/><text x="66.5806%" y="79.50"></text></g><g><title>generics_of (4,006,273 samples, 0.42%)</title><rect x="66.1214%" y="117" width="0.4244%" height="15" fill="rgb(211,96,35)"/><text x="66.3714%" y="127.50"></text></g><g><title>late_bound_vars_map (5,102,561 samples, 0.54%)</title><rect x="67.2518%" y="69" width="0.5406%" height="15" fill="rgb(253,215,40)"/><text x="67.5018%" y="79.50"></text></g><g><title>resolve_lifetimes (4,772,107 samples, 0.51%)</title><rect x="67.2868%" y="53" width="0.5056%" height="15" fill="rgb(211,81,21)"/><text x="67.5368%" y="63.50"></text></g><g><title>explicit_predicates_of (9,201,806 samples, 0.97%)</title><rect x="66.8400%" y="85" width="0.9748%" height="15" fill="rgb(208,190,38)"/><text x="67.0900%" y="95.50"></text></g><g><title>predicates_of (12,054,284 samples, 1.28%)</title><rect x="66.6121%" y="117" width="1.2770%" height="15" fill="rgb(235,213,38)"/><text x="66.8621%" y="127.50"></text></g><g><title>predicates_defined_on (11,310,497 samples, 1.20%)</title><rect x="66.6909%" y="101" width="1.1982%" height="15" fill="rgb(237,122,38)"/><text x="66.9409%" y="111.50"></text></g><g><title>type_collecting (25,443,793 samples, 2.70%)</title><rect x="65.4056%" y="149" width="2.6955%" height="15" fill="rgb(244,218,35)"/><text x="65.6556%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (25,409,992 samples, 2.69%)</title><rect x="65.4091%" y="133" width="2.6920%" height="15" fill="rgb(240,68,47)"/><text x="65.6591%" y="143.50">co..</text></g><g><title>type_of (1,955,415 samples, 0.21%)</title><rect x="67.8939%" y="117" width="0.2072%" height="15" fill="rgb(210,16,53)"/><text x="68.1439%" y="127.50"></text></g><g><title>evaluate_obligation (5,250,255 samples, 0.56%)</title><rect x="72.8592%" y="117" width="0.5562%" height="15" fill="rgb(235,124,12)"/><text x="73.1092%" y="127.50"></text></g><g><title>implied_outlives_bounds (4,522,288 samples, 0.48%)</title><rect x="73.4373%" y="117" width="0.4791%" height="15" fill="rgb(224,169,11)"/><text x="73.6873%" y="127.50"></text></g><g><title>param_env (8,726,210 samples, 0.92%)</title><rect x="73.9214%" y="117" width="0.9245%" height="15" fill="rgb(250,166,2)"/><text x="74.1714%" y="127.50"></text></g><g><title>region_scope_tree (4,731,797 samples, 0.50%)</title><rect x="74.8519%" y="117" width="0.5013%" height="15" fill="rgb(242,216,29)"/><text x="75.1019%" y="127.50"></text></g><g><title>check_impl_item_well_formed (65,157,948 samples, 6.90%)</title><rect x="68.4585%" y="133" width="6.9029%" height="15" fill="rgb(230,116,27)"/><text x="68.7085%" y="143.50">check_imp..</text></g><g><title>implied_outlives_bounds (1,851,427 samples, 0.20%)</title><rect x="78.3024%" y="117" width="0.1961%" height="15" fill="rgb(228,99,48)"/><text x="78.5524%" y="127.50"></text></g><g><title>param_env (4,580,683 samples, 0.49%)</title><rect x="78.4988%" y="117" width="0.4853%" height="15" fill="rgb(253,11,6)"/><text x="78.7488%" y="127.50"></text></g><g><title>check_item_well_formed (35,995,017 samples, 3.81%)</title><rect x="75.3614%" y="133" width="3.8133%" height="15" fill="rgb(247,143,39)"/><text x="75.6114%" y="143.50">chec..</text></g><g><title>variances_of (1,195,153 samples, 0.13%)</title><rect x="79.0481%" y="117" width="0.1266%" height="15" fill="rgb(236,97,10)"/><text x="79.2981%" y="127.50"></text></g><g><title>crate_variances (1,181,733 samples, 0.13%)</title><rect x="79.0495%" y="101" width="0.1252%" height="15" fill="rgb(233,208,19)"/><text x="79.2995%" y="111.50"></text></g><g><title>analysis (746,871,347 samples, 79.12%)</title><rect x="0.0892%" y="181" width="79.1242%" height="15" fill="rgb(216,164,2)"/><text x="0.3392%" y="191.50">analysis</text></g><g><title>type_check_crate (418,431,764 samples, 44.33%)</title><rect x="34.8844%" y="165" width="44.3290%" height="15" fill="rgb(220,129,5)"/><text x="35.1344%" y="175.50">type_check_crate</text></g><g><title>wf_checking (104,783,638 samples, 11.10%)</title><rect x="68.1126%" y="149" width="11.1009%" height="15" fill="rgb(242,17,10)"/><text x="68.3626%" y="159.50">wf_checking</text></g><g><title>AST_validation (1,833,001 samples, 0.19%)</title><rect x="79.3163%" y="165" width="0.1942%" height="15" fill="rgb(242,107,0)"/><text x="79.5663%" y="175.50"></text></g><g><title>complete_gated_feature_checking (1,135,433 samples, 0.12%)</title><rect x="79.5105%" y="165" width="0.1203%" height="15" fill="rgb(251,28,31)"/><text x="79.7605%" y="175.50"></text></g><g><title>metadata_register_crate (1,189,873 samples, 0.13%)</title><rect x="89.2576%" y="133" width="0.1261%" height="15" fill="rgb(233,223,10)"/><text x="89.5076%" y="143.50"></text></g><g><title>macro_expand_crate (95,587,256 samples, 10.13%)</title><rect x="79.6380%" y="165" width="10.1266%" height="15" fill="rgb(215,21,27)"/><text x="79.8880%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (95,572,496 samples, 10.13%)</title><rect x="79.6395%" y="149" width="10.1250%" height="15" fill="rgb(232,23,21)"/><text x="79.8895%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (3,595,028 samples, 0.38%)</title><rect x="89.3837%" y="133" width="0.3809%" height="15" fill="rgb(244,5,23)"/><text x="89.6337%" y="143.50"></text></g><g><title>late_resolve_crate (17,004,910 samples, 1.80%)</title><rect x="89.8831%" y="149" width="1.8015%" height="15" fill="rgb(226,81,46)"/><text x="90.1331%" y="159.50">l..</text></g><g><title>resolve_check_unused (1,449,836 samples, 0.15%)</title><rect x="91.6943%" y="149" width="0.1536%" height="15" fill="rgb(247,70,30)"/><text x="91.9443%" y="159.50"></text></g><g><title>resolve_postprocess (1,022,461 samples, 0.11%)</title><rect x="91.8480%" y="149" width="0.1083%" height="15" fill="rgb(212,68,19)"/><text x="92.0980%" y="159.50"></text></g><g><title>configure_and_expand (119,505,213 samples, 12.66%)</title><rect x="79.2960%" y="181" width="12.6605%" height="15" fill="rgb(240,187,13)"/><text x="79.5460%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (20,603,539 samples, 2.18%)</title><rect x="89.7737%" y="165" width="2.1828%" height="15" fill="rgb(223,113,26)"/><text x="90.0237%" y="175.50">r..</text></g><g><title>drop_ast (4,518,621 samples, 0.48%)</title><rect x="91.9565%" y="181" width="0.4787%" height="15" fill="rgb(206,192,2)"/><text x="92.2065%" y="191.50"></text></g><g><title>early_lint_checks (4,350,019 samples, 0.46%)</title><rect x="92.4371%" y="181" width="0.4608%" height="15" fill="rgb(241,108,4)"/><text x="92.6871%" y="191.50"></text></g><g><title>free_global_ctxt (8,531,095 samples, 0.90%)</title><rect x="92.8979%" y="181" width="0.9038%" height="15" fill="rgb(247,173,49)"/><text x="93.1479%" y="191.50"></text></g><g><title>generate_crate_metadata (16,418,853 samples, 1.74%)</title><rect x="93.8017%" y="181" width="1.7394%" height="15" fill="rgb(224,114,35)"/><text x="94.0517%" y="191.50"></text></g><g><title>hir_lowering (36,499,967 samples, 3.87%)</title><rect x="95.5411%" y="181" width="3.8668%" height="15" fill="rgb(245,159,27)"/><text x="95.7911%" y="191.50">hir_..</text></g><g><title>self_profile_alloc_query_strings (3,213,286 samples, 0.34%)</title><rect x="99.5386%" y="181" width="0.3404%" height="15" fill="rgb(245,172,44)"/><text x="99.7886%" y="191.50"></text></g><g><title>all (943,922,734 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (943,922,734 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,007,631 samples, 0.11%)</title><rect x="99.8933%" y="181" width="0.1067%" height="15" fill="rgb(237,72,25)"/><text x="100.1433%" y="191.50"></text></g></svg></svg>