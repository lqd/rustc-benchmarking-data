<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (705,265 samples, 0.19%)</title><rect x="16.1666%" y="101" width="0.1872%" height="15" fill="rgb(227,0,7)"/><text x="16.4166%" y="111.50"></text></g><g><title>item_attrs (629,865 samples, 0.17%)</title><rect x="16.8856%" y="69" width="0.1672%" height="15" fill="rgb(217,0,24)"/><text x="17.1356%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (609,275 samples, 0.16%)</title><rect x="16.8911%" y="53" width="0.1617%" height="15" fill="rgb(221,193,54)"/><text x="17.1411%" y="63.50"></text></g><g><title>codegen_fn_attrs (840,207 samples, 0.22%)</title><rect x="16.8388%" y="85" width="0.2230%" height="15" fill="rgb(248,212,6)"/><text x="17.0888%" y="95.50"></text></g><g><title>adt_drop_tys (486,567 samples, 0.13%)</title><rect x="20.4434%" y="37" width="0.1292%" height="15" fill="rgb(208,68,35)"/><text x="20.6934%" y="47.50"></text></g><g><title>adt_drop_tys (1,058,942 samples, 0.28%)</title><rect x="20.4192%" y="53" width="0.2811%" height="15" fill="rgb(232,128,0)"/><text x="20.6692%" y="63.50"></text></g><g><title>is_copy_raw (1,390,233 samples, 0.37%)</title><rect x="20.7003%" y="53" width="0.3690%" height="15" fill="rgb(207,160,47)"/><text x="20.9503%" y="63.50"></text></g><g><title>evaluate_obligation (1,133,100 samples, 0.30%)</title><rect x="20.7685%" y="37" width="0.3008%" height="15" fill="rgb(228,23,34)"/><text x="21.0185%" y="47.50"></text></g><g><title>needs_drop_raw (2,731,857 samples, 0.73%)</title><rect x="20.3454%" y="69" width="0.7252%" height="15" fill="rgb(218,30,26)"/><text x="20.5954%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,051,812 samples, 0.28%)</title><rect x="21.2902%" y="53" width="0.2792%" height="15" fill="rgb(220,122,19)"/><text x="21.5402%" y="63.50"></text></g><g><title>resolve_instance (2,584,828 samples, 0.69%)</title><rect x="21.0832%" y="69" width="0.6861%" height="15" fill="rgb(250,228,42)"/><text x="21.3332%" y="79.50"></text></g><g><title>thir_body (4,899,158 samples, 1.30%)</title><rect x="21.7909%" y="69" width="1.3005%" height="15" fill="rgb(240,193,28)"/><text x="22.0409%" y="79.50"></text></g><g><title>mir_const (29,101,002 samples, 7.72%)</title><rect x="15.3814%" y="117" width="7.7247%" height="15" fill="rgb(216,20,37)"/><text x="15.6314%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (25,437,734 samples, 6.75%)</title><rect x="16.3538%" y="101" width="6.7523%" height="15" fill="rgb(206,188,39)"/><text x="16.6038%" y="111.50">unsafety_..</text></g><g><title>mir_built (22,770,418 samples, 6.04%)</title><rect x="17.0619%" y="85" width="6.0443%" height="15" fill="rgb(217,207,13)"/><text x="17.3119%" y="95.50">mir_built</text></g><g><title>mir_promoted (32,776,952 samples, 8.70%)</title><rect x="14.5685%" y="133" width="8.7005%" height="15" fill="rgb(231,73,38)"/><text x="14.8185%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (613,406 samples, 0.16%)</title><rect x="23.1062%" y="117" width="0.1628%" height="15" fill="rgb(225,20,46)"/><text x="23.3562%" y="127.50"></text></g><g><title>mir_const (431,544 samples, 0.11%)</title><rect x="23.1544%" y="101" width="0.1146%" height="15" fill="rgb(210,31,41)"/><text x="23.4044%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (577,567 samples, 0.15%)</title><rect x="23.2692%" y="133" width="0.1533%" height="15" fill="rgb(221,200,47)"/><text x="23.5192%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,569,010 samples, 0.42%)</title><rect x="23.4225%" y="133" width="0.4165%" height="15" fill="rgb(226,26,5)"/><text x="23.6725%" y="143.50"></text></g><g><title>normalize_projection_ty (1,004,163 samples, 0.27%)</title><rect x="23.5724%" y="117" width="0.2666%" height="15" fill="rgb(249,33,26)"/><text x="23.8224%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,614,321 samples, 0.43%)</title><rect x="23.8390%" y="133" width="0.4285%" height="15" fill="rgb(235,183,28)"/><text x="24.0890%" y="143.50"></text></g><g><title>normalize_projection_ty (535,206 samples, 0.14%)</title><rect x="24.1254%" y="117" width="0.1421%" height="15" fill="rgb(221,5,38)"/><text x="24.3754%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,675,938 samples, 1.77%)</title><rect x="24.3027%" y="133" width="1.7721%" height="15" fill="rgb(247,18,42)"/><text x="24.5527%" y="143.50">t..</text></g><g><title>evaluate_obligation (378,375 samples, 0.10%)</title><rect x="25.9744%" y="117" width="0.1004%" height="15" fill="rgb(241,131,45)"/><text x="26.2244%" y="127.50"></text></g><g><title>MIR_borrow_checking (96,216,738 samples, 25.54%)</title><rect x="0.5419%" y="165" width="25.5403%" height="15" fill="rgb(249,31,29)"/><text x="0.7919%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (95,859,218 samples, 25.45%)</title><rect x="0.6368%" y="149" width="25.4454%" height="15" fill="rgb(225,111,53)"/><text x="0.8868%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (530,735 samples, 0.14%)</title><rect x="26.0822%" y="165" width="0.1409%" height="15" fill="rgb(238,160,17)"/><text x="26.3322%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (394,343 samples, 0.10%)</title><rect x="26.1184%" y="149" width="0.1047%" height="15" fill="rgb(214,148,48)"/><text x="26.3684%" y="159.50"></text></g><g><title>hir_module_items (551,175 samples, 0.15%)</title><rect x="26.2231%" y="165" width="0.1463%" height="15" fill="rgb(232,36,49)"/><text x="26.4731%" y="175.50"></text></g><g><title>should_inherit_track_caller (384,593 samples, 0.10%)</title><rect x="26.6512%" y="117" width="0.1021%" height="15" fill="rgb(209,103,24)"/><text x="26.9012%" y="127.50"></text></g><g><title>codegen_fn_attrs (665,057 samples, 0.18%)</title><rect x="26.5831%" y="133" width="0.1765%" height="15" fill="rgb(229,88,8)"/><text x="26.8331%" y="143.50"></text></g><g><title>check_mod_attrs (1,447,376 samples, 0.38%)</title><rect x="26.3755%" y="149" width="0.3842%" height="15" fill="rgb(213,181,19)"/><text x="26.6255%" y="159.50"></text></g><g><title>lint_levels (566,116 samples, 0.15%)</title><rect x="27.0276%" y="133" width="0.1503%" height="15" fill="rgb(254,191,54)"/><text x="27.2776%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,464,777 samples, 0.39%)</title><rect x="26.9122%" y="149" width="0.3888%" height="15" fill="rgb(241,83,37)"/><text x="27.1622%" y="159.50"></text></g><g><title>misc_checking_1 (3,623,821 samples, 0.96%)</title><rect x="26.3696%" y="165" width="0.9619%" height="15" fill="rgb(233,36,39)"/><text x="26.6196%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,324,505 samples, 0.35%)</title><rect x="27.3321%" y="149" width="0.3516%" height="15" fill="rgb(226,3,54)"/><text x="27.5821%" y="159.50"></text></g><g><title>check_mod_liveness (981,671 samples, 0.26%)</title><rect x="27.4231%" y="133" width="0.2606%" height="15" fill="rgb(245,192,40)"/><text x="27.6731%" y="143.50"></text></g><g><title>misc_checking_2 (5,027,096 samples, 1.33%)</title><rect x="27.3315%" y="165" width="1.3344%" height="15" fill="rgb(238,167,29)"/><text x="27.5815%" y="175.50"></text></g><g><title>match_checking (3,700,371 samples, 0.98%)</title><rect x="27.6837%" y="149" width="0.9822%" height="15" fill="rgb(232,182,51)"/><text x="27.9337%" y="159.50"></text></g><g><title>check_match (3,602,261 samples, 0.96%)</title><rect x="27.7097%" y="133" width="0.9562%" height="15" fill="rgb(231,60,39)"/><text x="27.9597%" y="143.50"></text></g><g><title>check_private_in_public (600,267 samples, 0.16%)</title><rect x="28.6694%" y="149" width="0.1593%" height="15" fill="rgb(208,69,12)"/><text x="28.9194%" y="159.50"></text></g><g><title>death_checking (1,202,713 samples, 0.32%)</title><rect x="28.8288%" y="149" width="0.3193%" height="15" fill="rgb(235,93,37)"/><text x="29.0788%" y="159.50"></text></g><g><title>eval_to_const_value_raw (401,544 samples, 0.11%)</title><rect x="29.6009%" y="117" width="0.1066%" height="15" fill="rgb(213,116,39)"/><text x="29.8509%" y="127.50"></text></g><g><title>eval_to_const_value_raw (398,064 samples, 0.11%)</title><rect x="29.6019%" y="101" width="0.1057%" height="15" fill="rgb(222,207,29)"/><text x="29.8519%" y="111.50"></text></g><g><title>eval_to_allocation_raw (391,064 samples, 0.10%)</title><rect x="29.6037%" y="85" width="0.1038%" height="15" fill="rgb(206,96,30)"/><text x="29.8537%" y="95.50"></text></g><g><title>crate_lints (3,841,313 samples, 1.02%)</title><rect x="29.1485%" y="133" width="1.0197%" height="15" fill="rgb(218,138,4)"/><text x="29.3985%" y="143.50"></text></g><g><title>type_of (1,294,692 samples, 0.34%)</title><rect x="29.8245%" y="117" width="0.3437%" height="15" fill="rgb(250,191,14)"/><text x="30.0745%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,033,341 samples, 0.27%)</title><rect x="29.8939%" y="101" width="0.2743%" height="15" fill="rgb(239,60,40)"/><text x="30.1439%" y="111.50"></text></g><g><title>trimmed_def_paths (4,818,404 samples, 1.28%)</title><rect x="30.8393%" y="101" width="1.2790%" height="15" fill="rgb(206,27,48)"/><text x="31.0893%" y="111.50"></text></g><g><title>module_children (4,010,683 samples, 1.06%)</title><rect x="31.0537%" y="85" width="1.0646%" height="15" fill="rgb(225,35,8)"/><text x="31.3037%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (3,948,273 samples, 1.05%)</title><rect x="31.0703%" y="69" width="1.0480%" height="15" fill="rgb(250,213,24)"/><text x="31.3203%" y="79.50"></text></g><g><title>lint_checking (11,513,329 samples, 3.06%)</title><rect x="29.1480%" y="149" width="3.0562%" height="15" fill="rgb(247,123,22)"/><text x="29.3980%" y="159.50">lin..</text></g><g><title>module_lints (7,670,086 samples, 2.04%)</title><rect x="30.1682%" y="133" width="2.0360%" height="15" fill="rgb(231,138,38)"/><text x="30.4182%" y="143.50">m..</text></g><g><title>lint_mod (7,660,276 samples, 2.03%)</title><rect x="30.1708%" y="117" width="2.0334%" height="15" fill="rgb(231,145,46)"/><text x="30.4208%" y="127.50">l..</text></g><g><title>privacy_access_levels (1,027,841 samples, 0.27%)</title><rect x="32.2042%" y="149" width="0.2728%" height="15" fill="rgb(251,118,11)"/><text x="32.4542%" y="159.50"></text></g><g><title>privacy_checking_modules (3,830,943 samples, 1.02%)</title><rect x="32.4770%" y="149" width="1.0169%" height="15" fill="rgb(217,147,25)"/><text x="32.7270%" y="159.50"></text></g><g><title>check_mod_privacy (3,823,683 samples, 1.01%)</title><rect x="32.4789%" y="133" width="1.0150%" height="15" fill="rgb(247,81,37)"/><text x="32.7289%" y="143.50"></text></g><g><title>misc_checking_3 (18,212,914 samples, 4.83%)</title><rect x="28.6659%" y="165" width="4.8345%" height="15" fill="rgb(209,12,38)"/><text x="28.9159%" y="175.50">misc_c..</text></g><g><title>adt_destructor (403,444 samples, 0.11%)</title><rect x="33.5804%" y="117" width="0.1071%" height="15" fill="rgb(227,1,9)"/><text x="33.8304%" y="127.50"></text></g><g><title>coherent_trait (395,674 samples, 0.11%)</title><rect x="33.5824%" y="101" width="0.1050%" height="15" fill="rgb(248,47,43)"/><text x="33.8324%" y="111.50"></text></g><g><title>specialization_graph_of (394,494 samples, 0.10%)</title><rect x="33.5828%" y="85" width="0.1047%" height="15" fill="rgb(221,10,30)"/><text x="33.8328%" y="95.50"></text></g><g><title>impl_parent (3,701,459 samples, 0.98%)</title><rect x="35.3317%" y="101" width="0.9825%" height="15" fill="rgb(210,229,1)"/><text x="35.5817%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,936,041 samples, 0.51%)</title><rect x="35.8003%" y="85" width="0.5139%" height="15" fill="rgb(222,148,37)"/><text x="36.0503%" y="95.50"></text></g><g><title>impl_trait_ref (6,403,292 samples, 1.70%)</title><rect x="36.3142%" y="101" width="1.6997%" height="15" fill="rgb(234,67,33)"/><text x="36.5642%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,069,532 samples, 1.35%)</title><rect x="36.6683%" y="85" width="1.3457%" height="15" fill="rgb(247,98,35)"/><text x="36.9183%" y="95.50"></text></g><g><title>trait_impls_of (1,123,622 samples, 0.30%)</title><rect x="38.0314%" y="101" width="0.2983%" height="15" fill="rgb(247,138,52)"/><text x="38.2814%" y="111.50"></text></g><g><title>coherent_trait (18,007,291 samples, 4.78%)</title><rect x="33.5501%" y="133" width="4.7799%" height="15" fill="rgb(213,79,30)"/><text x="33.8001%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (17,086,851 samples, 4.54%)</title><rect x="33.7945%" y="117" width="4.5356%" height="15" fill="rgb(246,177,23)"/><text x="34.0445%" y="127.50">speci..</text></g><g><title>coherence_checking (18,175,823 samples, 4.82%)</title><rect x="33.5411%" y="149" width="4.8247%" height="15" fill="rgb(230,62,27)"/><text x="33.7911%" y="159.50">cohere..</text></g><g><title>associated_item (400,176 samples, 0.11%)</title><rect x="60.5687%" y="85" width="0.1062%" height="15" fill="rgb(216,154,8)"/><text x="60.8187%" y="95.50"></text></g><g><title>associated_items (579,250 samples, 0.15%)</title><rect x="60.5302%" y="101" width="0.1538%" height="15" fill="rgb(244,35,45)"/><text x="60.7802%" y="111.50"></text></g><g><title>adt_dtorck_constraint (414,615 samples, 0.11%)</title><rect x="61.0297%" y="53" width="0.1101%" height="15" fill="rgb(251,115,12)"/><text x="61.2797%" y="63.50"></text></g><g><title>adt_dtorck_constraint (717,169 samples, 0.19%)</title><rect x="60.9663%" y="69" width="0.1904%" height="15" fill="rgb(240,54,50)"/><text x="61.2163%" y="79.50"></text></g><g><title>dropck_outlives (1,683,730 samples, 0.45%)</title><rect x="60.7266%" y="101" width="0.4469%" height="15" fill="rgb(233,84,52)"/><text x="60.9766%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,176,215 samples, 0.31%)</title><rect x="60.8613%" y="85" width="0.3122%" height="15" fill="rgb(207,117,47)"/><text x="61.1113%" y="95.50"></text></g><g><title>generics_of (390,483 samples, 0.10%)</title><rect x="62.1693%" y="85" width="0.1037%" height="15" fill="rgb(249,43,39)"/><text x="62.4193%" y="95.50"></text></g><g><title>impl_trait_ref (497,798 samples, 0.13%)</title><rect x="62.2988%" y="85" width="0.1321%" height="15" fill="rgb(209,38,44)"/><text x="62.5488%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (397,858 samples, 0.11%)</title><rect x="62.3253%" y="69" width="0.1056%" height="15" fill="rgb(236,212,23)"/><text x="62.5753%" y="79.50"></text></g><g><title>predicates_of (670,212 samples, 0.18%)</title><rect x="62.4398%" y="85" width="0.1779%" height="15" fill="rgb(242,79,21)"/><text x="62.6898%" y="95.50"></text></g><g><title>predicates_defined_on (441,097 samples, 0.12%)</title><rect x="62.5006%" y="69" width="0.1171%" height="15" fill="rgb(211,96,35)"/><text x="62.7506%" y="79.50"></text></g><g><title>specializes (561,196 samples, 0.15%)</title><rect x="62.6177%" y="85" width="0.1490%" height="15" fill="rgb(253,215,40)"/><text x="62.8677%" y="95.50"></text></g><g><title>trait_impls_of (536,546 samples, 0.14%)</title><rect x="62.7715%" y="85" width="0.1424%" height="15" fill="rgb(211,81,21)"/><text x="63.0215%" y="95.50"></text></g><g><title>evaluate_obligation (6,572,440 samples, 1.74%)</title><rect x="61.1735%" y="101" width="1.7446%" height="15" fill="rgb(208,190,38)"/><text x="61.4235%" y="111.50"></text></g><g><title>method_autoderef_steps (690,347 samples, 0.18%)</title><rect x="63.2133%" y="101" width="0.1832%" height="15" fill="rgb(235,213,38)"/><text x="63.4633%" y="111.50"></text></g><g><title>predicates_of (591,807 samples, 0.16%)</title><rect x="63.4428%" y="101" width="0.1571%" height="15" fill="rgb(237,122,38)"/><text x="63.6928%" y="111.50"></text></g><g><title>predicates_defined_on (421,807 samples, 0.11%)</title><rect x="63.4879%" y="85" width="0.1120%" height="15" fill="rgb(244,218,35)"/><text x="63.7379%" y="95.50"></text></g><g><title>associated_item (621,739 samples, 0.17%)</title><rect x="68.1326%" y="69" width="0.1650%" height="15" fill="rgb(240,68,47)"/><text x="68.3826%" y="79.50"></text></g><g><title>associated_items (812,529 samples, 0.22%)</title><rect x="68.0912%" y="85" width="0.2157%" height="15" fill="rgb(210,16,53)"/><text x="68.3412%" y="95.50"></text></g><g><title>dropck_outlives (433,135 samples, 0.11%)</title><rect x="68.3220%" y="85" width="0.1150%" height="15" fill="rgb(235,124,12)"/><text x="68.5720%" y="95.50"></text></g><g><title>generics_of (530,478 samples, 0.14%)</title><rect x="68.9702%" y="69" width="0.1408%" height="15" fill="rgb(224,169,11)"/><text x="69.2202%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (436,896 samples, 0.12%)</title><rect x="68.9950%" y="53" width="0.1160%" height="15" fill="rgb(250,166,2)"/><text x="69.2450%" y="63.50"></text></g><g><title>evaluate_obligation (3,309,205 samples, 0.88%)</title><rect x="68.4370%" y="85" width="0.8784%" height="15" fill="rgb(242,216,29)"/><text x="68.6870%" y="95.50"></text></g><g><title>generics_of (696,244 samples, 0.18%)</title><rect x="69.3523%" y="85" width="0.1848%" height="15" fill="rgb(230,116,27)"/><text x="69.6023%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (533,433 samples, 0.14%)</title><rect x="69.3956%" y="69" width="0.1416%" height="15" fill="rgb(228,99,48)"/><text x="69.6456%" y="79.50"></text></g><g><title>method_autoderef_steps (518,458 samples, 0.14%)</title><rect x="69.7362%" y="85" width="0.1376%" height="15" fill="rgb(253,11,6)"/><text x="69.9862%" y="95.50"></text></g><g><title>typeck (23,974,719 samples, 6.36%)</title><rect x="63.6864%" y="101" width="6.3640%" height="15" fill="rgb(247,143,39)"/><text x="63.9364%" y="111.50">typeck</text></g><g><title>item_bodies_checking (119,397,668 samples, 31.69%)</title><rect x="38.3891%" y="149" width="31.6935%" height="15" fill="rgb(236,97,10)"/><text x="38.6391%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (119,393,828 samples, 31.69%)</title><rect x="38.3901%" y="133" width="31.6925%" height="15" fill="rgb(233,208,19)"/><text x="38.6401%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (119,145,845 samples, 31.63%)</title><rect x="38.4559%" y="117" width="31.6267%" height="15" fill="rgb(216,164,2)"/><text x="38.7059%" y="127.50">typeck</text></g><g><title>evaluate_obligation (1,491,428 samples, 0.40%)</title><rect x="71.6911%" y="101" width="0.3959%" height="15" fill="rgb(220,129,5)"/><text x="71.9411%" y="111.50"></text></g><g><title>item_types_checking (7,618,035 samples, 2.02%)</title><rect x="70.0826%" y="149" width="2.0222%" height="15" fill="rgb(242,17,10)"/><text x="70.3326%" y="159.50">i..</text></g><g><title>check_mod_item_types (7,611,555 samples, 2.02%)</title><rect x="70.0843%" y="133" width="2.0204%" height="15" fill="rgb(242,107,0)"/><text x="70.3343%" y="143.50">c..</text></g><g><title>typeck (4,673,013 samples, 1.24%)</title><rect x="70.8644%" y="117" width="1.2404%" height="15" fill="rgb(251,28,31)"/><text x="71.1144%" y="127.50"></text></g><g><title>mir_const_qualif (423,594 samples, 0.11%)</title><rect x="72.4592%" y="69" width="0.1124%" height="15" fill="rgb(233,223,10)"/><text x="72.7092%" y="79.50"></text></g><g><title>mir_borrowck (860,752 samples, 0.23%)</title><rect x="72.6807%" y="37" width="0.2285%" height="15" fill="rgb(215,21,27)"/><text x="72.9307%" y="47.50"></text></g><g><title>mir_for_ctfe (1,276,785 samples, 0.34%)</title><rect x="72.5716%" y="69" width="0.3389%" height="15" fill="rgb(232,23,21)"/><text x="72.8216%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,167,404 samples, 0.31%)</title><rect x="72.6006%" y="53" width="0.3099%" height="15" fill="rgb(244,5,23)"/><text x="72.8506%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,679,060 samples, 0.71%)</title><rect x="72.3557%" y="117" width="0.7111%" height="15" fill="rgb(226,81,46)"/><text x="72.6057%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,659,509 samples, 0.71%)</title><rect x="72.3609%" y="101" width="0.7060%" height="15" fill="rgb(247,70,30)"/><text x="72.6109%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,626,458 samples, 0.70%)</title><rect x="72.3697%" y="85" width="0.6972%" height="15" fill="rgb(212,68,19)"/><text x="72.6197%" y="95.50"></text></g><g><title>typeck (586,296 samples, 0.16%)</title><rect x="72.9112%" y="69" width="0.1556%" height="15" fill="rgb(240,187,13)"/><text x="73.1612%" y="79.50"></text></g><g><title>fn_sig (840,118 samples, 0.22%)</title><rect x="73.0669%" y="117" width="0.2230%" height="15" fill="rgb(223,113,26)"/><text x="73.3169%" y="127.50"></text></g><g><title>is_late_bound_map (623,055 samples, 0.17%)</title><rect x="73.3775%" y="101" width="0.1654%" height="15" fill="rgb(206,192,2)"/><text x="73.6275%" y="111.50"></text></g><g><title>resolve_lifetimes (565,865 samples, 0.15%)</title><rect x="73.3927%" y="85" width="0.1502%" height="15" fill="rgb(241,108,4)"/><text x="73.6427%" y="95.50"></text></g><g><title>named_region_map (717,031 samples, 0.19%)</title><rect x="73.5429%" y="101" width="0.1903%" height="15" fill="rgb(247,173,49)"/><text x="73.7929%" y="111.50"></text></g><g><title>resolve_lifetimes (666,050 samples, 0.18%)</title><rect x="73.5565%" y="85" width="0.1768%" height="15" fill="rgb(224,114,35)"/><text x="73.8065%" y="95.50"></text></g><g><title>generics_of (1,705,760 samples, 0.45%)</title><rect x="73.2899%" y="117" width="0.4528%" height="15" fill="rgb(245,159,27)"/><text x="73.5399%" y="127.50"></text></g><g><title>predicates_of (1,478,112 samples, 0.39%)</title><rect x="73.8479%" y="117" width="0.3924%" height="15" fill="rgb(245,172,44)"/><text x="74.0979%" y="127.50"></text></g><g><title>predicates_defined_on (1,283,429 samples, 0.34%)</title><rect x="73.8996%" y="101" width="0.3407%" height="15" fill="rgb(236,23,11)"/><text x="74.1496%" y="111.50"></text></g><g><title>inferred_outlives_of (689,077 samples, 0.18%)</title><rect x="74.0574%" y="85" width="0.1829%" height="15" fill="rgb(205,117,38)"/><text x="74.3074%" y="95.50"></text></g><g><title>inferred_outlives_crate (618,047 samples, 0.16%)</title><rect x="74.0762%" y="69" width="0.1641%" height="15" fill="rgb(237,72,25)"/><text x="74.3262%" y="79.50"></text></g><g><title>type_collecting (8,373,074 samples, 2.22%)</title><rect x="72.1054%" y="149" width="2.2226%" height="15" fill="rgb(244,70,9)"/><text x="72.3554%" y="159.50">t..</text></g><g><title>collect_mod_item_types (8,357,684 samples, 2.22%)</title><rect x="72.1095%" y="133" width="2.2185%" height="15" fill="rgb(217,125,39)"/><text x="72.3595%" y="143.50">c..</text></g><g><title>adt_def (378,995 samples, 0.10%)</title><rect x="75.8924%" y="69" width="0.1006%" height="15" fill="rgb(235,36,10)"/><text x="76.1424%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (378,665 samples, 0.10%)</title><rect x="75.8925%" y="53" width="0.1005%" height="15" fill="rgb(251,123,47)"/><text x="76.1425%" y="63.50"></text></g><g><title>adt_sized_constraint (456,635 samples, 0.12%)</title><rect x="75.8820%" y="101" width="0.1212%" height="15" fill="rgb(221,13,13)"/><text x="76.1320%" y="111.50"></text></g><g><title>adt_sized_constraint (419,545 samples, 0.11%)</title><rect x="75.8918%" y="85" width="0.1114%" height="15" fill="rgb(238,131,9)"/><text x="76.1418%" y="95.50"></text></g><g><title>evaluate_obligation (1,119,391 samples, 0.30%)</title><rect x="75.7151%" y="117" width="0.2971%" height="15" fill="rgb(211,50,8)"/><text x="75.9651%" y="127.50"></text></g><g><title>object_safety_violations (415,424 samples, 0.11%)</title><rect x="76.1095%" y="117" width="0.1103%" height="15" fill="rgb(245,182,24)"/><text x="76.3595%" y="127.50"></text></g><g><title>param_env (566,675 samples, 0.15%)</title><rect x="76.2198%" y="117" width="0.1504%" height="15" fill="rgb(242,14,37)"/><text x="76.4698%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,824,345 samples, 2.34%)</title><rect x="74.4854%" y="133" width="2.3424%" height="15" fill="rgb(246,228,12)"/><text x="74.7354%" y="143.50">c..</text></g><g><title>region_scope_tree (1,692,555 samples, 0.45%)</title><rect x="76.3785%" y="117" width="0.4493%" height="15" fill="rgb(213,55,15)"/><text x="76.6285%" y="127.50"></text></g><g><title>evaluate_obligation (955,955 samples, 0.25%)</title><rect x="77.7523%" y="117" width="0.2538%" height="15" fill="rgb(209,9,3)"/><text x="78.0023%" y="127.50"></text></g><g><title>param_env (627,046 samples, 0.17%)</title><rect x="78.0433%" y="117" width="0.1664%" height="15" fill="rgb(230,59,30)"/><text x="78.2933%" y="127.50"></text></g><g><title>check_item_well_formed (5,623,091 samples, 1.49%)</title><rect x="76.8278%" y="133" width="1.4926%" height="15" fill="rgb(209,121,21)"/><text x="77.0778%" y="143.50"></text></g><g><title>analysis (294,161,985 samples, 78.08%)</title><rect x="0.2780%" y="181" width="78.0839%" height="15" fill="rgb(220,109,13)"/><text x="0.5280%" y="191.50">analysis</text></g><g><title>type_check_crate (169,004,623 samples, 44.86%)</title><rect x="33.5004%" y="165" width="44.8614%" height="15" fill="rgb(232,18,1)"/><text x="33.7504%" y="175.50">type_check_crate</text></g><g><title>wf_checking (15,182,320 samples, 4.03%)</title><rect x="74.3318%" y="149" width="4.0301%" height="15" fill="rgb(215,41,42)"/><text x="74.5818%" y="159.50">wf_c..</text></g><g><title>codegen_crate (398,445 samples, 0.11%)</title><rect x="78.3646%" y="181" width="0.1058%" height="15" fill="rgb(224,123,36)"/><text x="78.6146%" y="191.50"></text></g><g><title>metadata_load_macro (388,876 samples, 0.10%)</title><rect x="90.5354%" y="133" width="0.1032%" height="15" fill="rgb(240,125,3)"/><text x="90.7854%" y="143.50"></text></g><g><title>metadata_register_crate (2,844,592 samples, 0.76%)</title><rect x="90.6386%" y="133" width="0.7551%" height="15" fill="rgb(205,98,50)"/><text x="90.8886%" y="143.50"></text></g><g><title>metadata_register_crate (994,383 samples, 0.26%)</title><rect x="91.1298%" y="117" width="0.2640%" height="15" fill="rgb(205,185,37)"/><text x="91.3798%" y="127.50"></text></g><g><title>macro_expand_crate (48,843,498 samples, 12.97%)</title><rect x="78.6972%" y="165" width="12.9653%" height="15" fill="rgb(238,207,15)"/><text x="78.9472%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (48,824,138 samples, 12.96%)</title><rect x="78.7023%" y="149" width="12.9601%" height="15" fill="rgb(213,199,42)"/><text x="78.9523%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,012,302 samples, 0.27%)</title><rect x="91.3937%" y="133" width="0.2687%" height="15" fill="rgb(235,201,11)"/><text x="91.6437%" y="143.50"></text></g><g><title>late_resolve_crate (5,494,082 samples, 1.46%)</title><rect x="91.7872%" y="149" width="1.4584%" height="15" fill="rgb(207,46,11)"/><text x="92.0372%" y="159.50"></text></g><g><title>configure_and_expand (56,043,828 samples, 14.88%)</title><rect x="78.4704%" y="181" width="14.8766%" height="15" fill="rgb(241,35,35)"/><text x="78.7204%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,289,451 samples, 1.67%)</title><rect x="91.6775%" y="165" width="1.6695%" height="15" fill="rgb(243,32,47)"/><text x="91.9275%" y="175.50"></text></g><g><title>drop_ast (620,417 samples, 0.16%)</title><rect x="93.3470%" y="181" width="0.1647%" height="15" fill="rgb(247,202,23)"/><text x="93.5970%" y="191.50"></text></g><g><title>early_lint_checks (1,452,066 samples, 0.39%)</title><rect x="93.5175%" y="181" width="0.3854%" height="15" fill="rgb(219,102,11)"/><text x="93.7675%" y="191.50"></text></g><g><title>free_global_ctxt (6,036,218 samples, 1.60%)</title><rect x="93.9029%" y="181" width="1.6023%" height="15" fill="rgb(243,110,44)"/><text x="94.1529%" y="191.50"></text></g><g><title>generate_crate_metadata (3,583,700 samples, 0.95%)</title><rect x="95.5052%" y="181" width="0.9513%" height="15" fill="rgb(222,74,54)"/><text x="95.7552%" y="191.50"></text></g><g><title>hir_lowering (10,787,301 samples, 2.86%)</title><rect x="96.4565%" y="181" width="2.8634%" height="15" fill="rgb(216,99,12)"/><text x="96.7065%" y="191.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,507,547 samples, 0.40%)</title><rect x="99.4663%" y="181" width="0.4002%" height="15" fill="rgb(226,22,26)"/><text x="99.7163%" y="191.50"></text></g><g><title>all (376,725,730 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (376,725,730 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (408,744 samples, 0.11%)</title><rect x="99.8915%" y="181" width="0.1085%" height="15" fill="rgb(252,105,26)"/><text x="100.1415%" y="191.50"></text></g></svg></svg>