<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (87,631 samples, 0.14%)</title><rect x="5.3619%" y="197" width="0.1432%" height="15" fill="rgb(227,0,7)"/><text x="5.6119%" y="207.50"></text></g><g><title>codegen_fn_attrs (64,782 samples, 0.11%)</title><rect x="5.6819%" y="181" width="0.1058%" height="15" fill="rgb(217,0,24)"/><text x="5.9319%" y="191.50"></text></g><g><title>adt_drop_tys (97,041 samples, 0.16%)</title><rect x="6.6649%" y="149" width="0.1585%" height="15" fill="rgb(221,193,54)"/><text x="6.9149%" y="159.50"></text></g><g><title>needs_drop_raw (345,242 samples, 0.56%)</title><rect x="6.6301%" y="165" width="0.5640%" height="15" fill="rgb(248,212,6)"/><text x="6.8801%" y="175.50"></text></g><g><title>is_copy_raw (226,871 samples, 0.37%)</title><rect x="6.8234%" y="149" width="0.3706%" height="15" fill="rgb(208,68,35)"/><text x="7.0734%" y="159.50"></text></g><g><title>evaluate_obligation (192,431 samples, 0.31%)</title><rect x="6.8797%" y="133" width="0.3144%" height="15" fill="rgb(232,128,0)"/><text x="7.1297%" y="143.50"></text></g><g><title>resolve_instance (115,940 samples, 0.19%)</title><rect x="7.1941%" y="165" width="0.1894%" height="15" fill="rgb(207,160,47)"/><text x="7.4441%" y="175.50"></text></g><g><title>thir_body (191,112 samples, 0.31%)</title><rect x="7.3922%" y="165" width="0.3122%" height="15" fill="rgb(228,23,34)"/><text x="7.6422%" y="175.50"></text></g><g><title>mir_const (1,680,086 samples, 2.74%)</title><rect x="4.9649%" y="213" width="2.7447%" height="15" fill="rgb(218,30,26)"/><text x="5.2149%" y="223.50">mi..</text></g><g><title>unsafety_check_result (1,349,494 samples, 2.20%)</title><rect x="5.5050%" y="197" width="2.2046%" height="15" fill="rgb(220,122,19)"/><text x="5.7550%" y="207.50">u..</text></g><g><title>mir_built (1,176,452 samples, 1.92%)</title><rect x="5.7877%" y="181" width="1.9219%" height="15" fill="rgb(250,228,42)"/><text x="6.0377%" y="191.50">m..</text></g><g><title>mir_promoted (1,886,249 samples, 3.08%)</title><rect x="4.6474%" y="229" width="3.0815%" height="15" fill="rgb(240,193,28)"/><text x="4.8974%" y="239.50">mir..</text></g><g><title>type_op_ascribe_user_type (68,921 samples, 0.11%)</title><rect x="7.7289%" y="229" width="0.1126%" height="15" fill="rgb(216,20,37)"/><text x="7.9789%" y="239.50"></text></g><g><title>type_op_prove_predicate (263,796 samples, 0.43%)</title><rect x="7.9371%" y="229" width="0.4309%" height="15" fill="rgb(206,188,39)"/><text x="8.1871%" y="239.50"></text></g><g><title>MIR_borrow_checking (4,327,488 samples, 7.07%)</title><rect x="1.3031%" y="261" width="7.0696%" height="15" fill="rgb(217,207,13)"/><text x="1.5531%" y="271.50">MIR_borro..</text></g><g><title>mir_borrowck (4,308,247 samples, 7.04%)</title><rect x="1.3345%" y="245" width="7.0381%" height="15" fill="rgb(231,73,38)"/><text x="1.5845%" y="255.50">mir_borro..</text></g><g><title>hir_module_items (158,112 samples, 0.26%)</title><rect x="8.3814%" y="261" width="0.2583%" height="15" fill="rgb(225,20,46)"/><text x="8.6314%" y="271.50"></text></g><g><title>get_lang_items (87,730 samples, 0.14%)</title><rect x="9.0082%" y="213" width="0.1433%" height="15" fill="rgb(210,31,41)"/><text x="9.2582%" y="223.50"></text></g><g><title>item_attrs (93,021 samples, 0.15%)</title><rect x="9.3202%" y="181" width="0.1520%" height="15" fill="rgb(221,200,47)"/><text x="9.5702%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (82,751 samples, 0.14%)</title><rect x="9.3370%" y="165" width="0.1352%" height="15" fill="rgb(226,26,5)"/><text x="9.5870%" y="175.50"></text></g><g><title>codegen_fn_attrs (156,893 samples, 0.26%)</title><rect x="9.2832%" y="197" width="0.2563%" height="15" fill="rgb(249,33,26)"/><text x="9.5332%" y="207.50"></text></g><g><title>should_inherit_track_caller (241,443 samples, 0.39%)</title><rect x="9.1516%" y="213" width="0.3944%" height="15" fill="rgb(235,183,28)"/><text x="9.4016%" y="223.50"></text></g><g><title>codegen_fn_attrs (419,435 samples, 0.69%)</title><rect x="8.9093%" y="229" width="0.6852%" height="15" fill="rgb(221,5,38)"/><text x="9.1593%" y="239.50"></text></g><g><title>check_mod_attrs (556,566 samples, 0.91%)</title><rect x="8.6856%" y="245" width="0.9092%" height="15" fill="rgb(247,18,42)"/><text x="8.9356%" y="255.50"></text></g><g><title>check_mod_const_bodies (65,660 samples, 0.11%)</title><rect x="9.5948%" y="245" width="0.1073%" height="15" fill="rgb(241,131,45)"/><text x="9.8448%" y="255.50"></text></g><g><title>lookup_deprecation_entry (109,071 samples, 0.18%)</title><rect x="9.9638%" y="229" width="0.1782%" height="15" fill="rgb(249,31,29)"/><text x="10.2138%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (316,424 samples, 0.52%)</title><rect x="9.7715%" y="245" width="0.5169%" height="15" fill="rgb(225,111,53)"/><text x="10.0215%" y="255.50"></text></g><g><title>misc_checking_1 (1,054,362 samples, 1.72%)</title><rect x="8.6402%" y="261" width="1.7225%" height="15" fill="rgb(238,160,17)"/><text x="8.8902%" y="271.50"></text></g><g><title>def_span (92,531 samples, 0.15%)</title><rect x="10.8334%" y="53" width="0.1512%" height="15" fill="rgb(214,148,48)"/><text x="11.0834%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (92,261 samples, 0.15%)</title><rect x="10.8338%" y="37" width="0.1507%" height="15" fill="rgb(232,36,49)"/><text x="11.0838%" y="47.50"></text></g><g><title>eval_to_const_value_raw (168,821 samples, 0.28%)</title><rect x="10.7262%" y="101" width="0.2758%" height="15" fill="rgb(209,103,24)"/><text x="10.9762%" y="111.50"></text></g><g><title>eval_to_const_value_raw (167,431 samples, 0.27%)</title><rect x="10.7285%" y="85" width="0.2735%" height="15" fill="rgb(229,88,8)"/><text x="10.9785%" y="95.50"></text></g><g><title>eval_to_allocation_raw (163,351 samples, 0.27%)</title><rect x="10.7352%" y="69" width="0.2669%" height="15" fill="rgb(213,181,19)"/><text x="10.9852%" y="79.50"></text></g><g><title>eval_to_const_value_raw (269,083 samples, 0.44%)</title><rect x="10.5854%" y="165" width="0.4396%" height="15" fill="rgb(254,191,54)"/><text x="10.8354%" y="175.50"></text></g><g><title>eval_to_const_value_raw (254,933 samples, 0.42%)</title><rect x="10.6085%" y="149" width="0.4165%" height="15" fill="rgb(241,83,37)"/><text x="10.8585%" y="159.50"></text></g><g><title>eval_to_allocation_raw (252,843 samples, 0.41%)</title><rect x="10.6119%" y="133" width="0.4131%" height="15" fill="rgb(233,36,39)"/><text x="10.8619%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (188,582 samples, 0.31%)</title><rect x="10.7169%" y="117" width="0.3081%" height="15" fill="rgb(226,3,54)"/><text x="10.9669%" y="127.50"></text></g><g><title>liveness_and_intrinsic_checking (413,505 samples, 0.68%)</title><rect x="10.3650%" y="245" width="0.6755%" height="15" fill="rgb(245,192,40)"/><text x="10.6150%" y="255.50"></text></g><g><title>check_mod_liveness (386,075 samples, 0.63%)</title><rect x="10.4098%" y="229" width="0.6307%" height="15" fill="rgb(238,167,29)"/><text x="10.6598%" y="239.50"></text></g><g><title>type_uninhabited_from (323,285 samples, 0.53%)</title><rect x="10.5124%" y="213" width="0.5281%" height="15" fill="rgb(232,182,51)"/><text x="10.7624%" y="223.50"></text></g><g><title>type_uninhabited_from (313,745 samples, 0.51%)</title><rect x="10.5280%" y="197" width="0.5125%" height="15" fill="rgb(231,60,39)"/><text x="10.7780%" y="207.50"></text></g><g><title>type_uninhabited_from (307,465 samples, 0.50%)</title><rect x="10.5382%" y="181" width="0.5023%" height="15" fill="rgb(208,69,12)"/><text x="10.7882%" y="191.50"></text></g><g><title>misc_checking_2 (565,436 samples, 0.92%)</title><rect x="10.3627%" y="261" width="0.9237%" height="15" fill="rgb(235,93,37)"/><text x="10.6127%" y="271.50"></text></g><g><title>match_checking (150,521 samples, 0.25%)</title><rect x="11.0405%" y="245" width="0.2459%" height="15" fill="rgb(213,116,39)"/><text x="11.2905%" y="255.50"></text></g><g><title>check_match (143,910 samples, 0.24%)</title><rect x="11.0513%" y="229" width="0.2351%" height="15" fill="rgb(222,207,29)"/><text x="11.3013%" y="239.50"></text></g><g><title>death_checking (228,502 samples, 0.37%)</title><rect x="11.3823%" y="245" width="0.3733%" height="15" fill="rgb(206,96,30)"/><text x="11.6323%" y="255.50"></text></g><g><title>item_attrs (128,661 samples, 0.21%)</title><rect x="11.5454%" y="229" width="0.2102%" height="15" fill="rgb(218,138,4)"/><text x="11.7954%" y="239.50"></text></g><g><title>metadata_decode_entry_item_attrs (127,261 samples, 0.21%)</title><rect x="11.5477%" y="213" width="0.2079%" height="15" fill="rgb(250,191,14)"/><text x="11.7977%" y="223.50"></text></g><g><title>param_env (64,971 samples, 0.11%)</title><rect x="12.5877%" y="213" width="0.1061%" height="15" fill="rgb(239,60,40)"/><text x="12.8377%" y="223.50"></text></g><g><title>crate_lints (1,657,549 samples, 2.71%)</title><rect x="11.7580%" y="229" width="2.7078%" height="15" fill="rgb(206,27,48)"/><text x="12.0080%" y="239.50">cr..</text></g><g><title>type_of (1,083,350 samples, 1.77%)</title><rect x="12.6961%" y="213" width="1.7698%" height="15" fill="rgb(225,35,8)"/><text x="12.9461%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (840,119 samples, 1.37%)</title><rect x="13.0934%" y="197" width="1.3725%" height="15" fill="rgb(250,213,24)"/><text x="13.3434%" y="207.50"></text></g><g><title>lint_checking (1,766,370 samples, 2.89%)</title><rect x="11.7556%" y="245" width="2.8856%" height="15" fill="rgb(247,123,22)"/><text x="12.0056%" y="255.50">li..</text></g><g><title>module_lints (107,311 samples, 0.18%)</title><rect x="14.4659%" y="229" width="0.1753%" height="15" fill="rgb(231,138,38)"/><text x="14.7159%" y="239.50"></text></g><g><title>lint_mod (104,751 samples, 0.17%)</title><rect x="14.4701%" y="213" width="0.1711%" height="15" fill="rgb(231,145,46)"/><text x="14.7201%" y="223.50"></text></g><g><title>privacy_access_levels (65,691 samples, 0.11%)</title><rect x="14.6412%" y="245" width="0.1073%" height="15" fill="rgb(251,118,11)"/><text x="14.8912%" y="255.50"></text></g><g><title>privacy_checking_modules (163,252 samples, 0.27%)</title><rect x="14.7485%" y="245" width="0.2667%" height="15" fill="rgb(217,147,25)"/><text x="14.9985%" y="255.50"></text></g><g><title>check_mod_privacy (161,432 samples, 0.26%)</title><rect x="14.7515%" y="229" width="0.2637%" height="15" fill="rgb(247,81,37)"/><text x="15.0015%" y="239.50"></text></g><g><title>misc_checking_3 (2,291,476 samples, 3.74%)</title><rect x="11.2864%" y="261" width="3.7435%" height="15" fill="rgb(209,12,38)"/><text x="11.5364%" y="271.50">misc..</text></g><g><title>impl_parent (81,792 samples, 0.13%)</title><rect x="15.3600%" y="165" width="0.1336%" height="15" fill="rgb(227,1,9)"/><text x="15.6100%" y="175.50"></text></g><g><title>impl_trait_ref (266,512 samples, 0.44%)</title><rect x="15.4937%" y="165" width="0.4354%" height="15" fill="rgb(248,47,43)"/><text x="15.7437%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (229,922 samples, 0.38%)</title><rect x="15.5534%" y="149" width="0.3756%" height="15" fill="rgb(221,10,30)"/><text x="15.8034%" y="159.50"></text></g><g><title>adt_destructor (494,185 samples, 0.81%)</title><rect x="15.1802%" y="213" width="0.8073%" height="15" fill="rgb(210,229,1)"/><text x="15.4302%" y="223.50"></text></g><g><title>coherent_trait (491,535 samples, 0.80%)</title><rect x="15.1845%" y="197" width="0.8030%" height="15" fill="rgb(222,148,37)"/><text x="15.4345%" y="207.50"></text></g><g><title>specialization_graph_of (490,365 samples, 0.80%)</title><rect x="15.1864%" y="181" width="0.8011%" height="15" fill="rgb(234,67,33)"/><text x="15.4364%" y="191.50"></text></g><g><title>param_env (111,862 samples, 0.18%)</title><rect x="15.9875%" y="213" width="0.1827%" height="15" fill="rgb(247,98,35)"/><text x="16.2375%" y="223.50"></text></g><g><title>impl_parent (2,985,396 samples, 4.88%)</title><rect x="24.6076%" y="197" width="4.8771%" height="15" fill="rgb(247,138,52)"/><text x="24.8576%" y="207.50">impl_p..</text></g><g><title>metadata_decode_entry_impl_parent (1,748,567 samples, 2.86%)</title><rect x="26.6281%" y="181" width="2.8565%" height="15" fill="rgb(213,79,30)"/><text x="26.8781%" y="191.50">me..</text></g><g><title>impl_trait_ref (7,350,658 samples, 12.01%)</title><rect x="29.4847%" y="197" width="12.0084%" height="15" fill="rgb(246,177,23)"/><text x="29.7347%" y="207.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,840,878 samples, 9.54%)</title><rect x="31.9511%" y="181" width="9.5419%" height="15" fill="rgb(230,62,27)"/><text x="32.2011%" y="191.50">metadata_decod..</text></g><g><title>coherent_trait (17,378,493 samples, 28.39%)</title><rect x="15.1231%" y="229" width="28.3903%" height="15" fill="rgb(216,154,8)"/><text x="15.3731%" y="239.50">coherent_trait</text></g><g><title>specialization_graph_of (16,737,465 samples, 27.34%)</title><rect x="16.1703%" y="213" width="27.3431%" height="15" fill="rgb(244,35,45)"/><text x="16.4203%" y="223.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,234,773 samples, 2.02%)</title><rect x="41.4962%" y="197" width="2.0172%" height="15" fill="rgb(251,115,12)"/><text x="41.7462%" y="207.50">t..</text></g><g><title>implementations_of_trait (313,585 samples, 0.51%)</title><rect x="43.0011%" y="181" width="0.5123%" height="15" fill="rgb(240,54,50)"/><text x="43.2511%" y="191.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (246,675 samples, 0.40%)</title><rect x="43.1104%" y="165" width="0.4030%" height="15" fill="rgb(233,84,52)"/><text x="43.3604%" y="175.50"></text></g><g><title>coherence_checking (17,459,295 samples, 28.52%)</title><rect x="15.0825%" y="245" width="28.5223%" height="15" fill="rgb(207,117,47)"/><text x="15.3325%" y="255.50">coherence_checking</text></g><g><title>associated_item (217,531 samples, 0.36%)</title><rect x="49.2268%" y="181" width="0.3554%" height="15" fill="rgb(249,43,39)"/><text x="49.4768%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (175,531 samples, 0.29%)</title><rect x="49.2954%" y="165" width="0.2868%" height="15" fill="rgb(209,38,44)"/><text x="49.5454%" y="175.50"></text></g><g><title>associated_items (311,904 samples, 0.51%)</title><rect x="49.0913%" y="197" width="0.5095%" height="15" fill="rgb(236,212,23)"/><text x="49.3413%" y="207.50"></text></g><g><title>adt_def (89,041 samples, 0.15%)</title><rect x="49.8426%" y="165" width="0.1455%" height="15" fill="rgb(242,79,21)"/><text x="50.0926%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (88,071 samples, 0.14%)</title><rect x="49.8441%" y="149" width="0.1439%" height="15" fill="rgb(211,96,35)"/><text x="50.0941%" y="159.50"></text></g><g><title>item_attrs (75,331 samples, 0.12%)</title><rect x="49.8650%" y="133" width="0.1231%" height="15" fill="rgb(253,215,40)"/><text x="50.1150%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (74,081 samples, 0.12%)</title><rect x="49.8670%" y="117" width="0.1210%" height="15" fill="rgb(211,81,21)"/><text x="50.1170%" y="127.50"></text></g><g><title>adt_dtorck_constraint (67,971 samples, 0.11%)</title><rect x="50.1345%" y="133" width="0.1110%" height="15" fill="rgb(208,190,38)"/><text x="50.3845%" y="143.50"></text></g><g><title>adt_dtorck_constraint (125,581 samples, 0.21%)</title><rect x="50.0611%" y="149" width="0.2052%" height="15" fill="rgb(235,213,38)"/><text x="50.3111%" y="159.50"></text></g><g><title>adt_dtorck_constraint (169,841 samples, 0.28%)</title><rect x="50.0105%" y="165" width="0.2775%" height="15" fill="rgb(237,122,38)"/><text x="50.2605%" y="175.50"></text></g><g><title>adt_dtorck_constraint (334,763 samples, 0.55%)</title><rect x="49.7943%" y="181" width="0.5469%" height="15" fill="rgb(244,218,35)"/><text x="50.0443%" y="191.50"></text></g><g><title>dropck_outlives (514,465 samples, 0.84%)</title><rect x="49.6519%" y="197" width="0.8405%" height="15" fill="rgb(240,68,47)"/><text x="49.9019%" y="207.50"></text></g><g><title>normalize_projection_ty (92,491 samples, 0.15%)</title><rect x="50.3412%" y="181" width="0.1511%" height="15" fill="rgb(210,16,53)"/><text x="50.5912%" y="191.50"></text></g><g><title>adt_def (95,920 samples, 0.16%)</title><rect x="50.8454%" y="149" width="0.1567%" height="15" fill="rgb(235,124,12)"/><text x="51.0954%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (95,350 samples, 0.16%)</title><rect x="50.8463%" y="133" width="0.1558%" height="15" fill="rgb(224,169,11)"/><text x="51.0963%" y="143.50"></text></g><g><title>item_attrs (88,480 samples, 0.14%)</title><rect x="50.8576%" y="117" width="0.1445%" height="15" fill="rgb(250,166,2)"/><text x="51.1076%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (87,800 samples, 0.14%)</title><rect x="50.8587%" y="101" width="0.1434%" height="15" fill="rgb(242,216,29)"/><text x="51.1087%" y="111.50"></text></g><g><title>adt_sized_constraint (103,550 samples, 0.17%)</title><rect x="50.8412%" y="165" width="0.1692%" height="15" fill="rgb(230,116,27)"/><text x="51.0912%" y="175.50"></text></g><g><title>adt_sized_constraint (130,151 samples, 0.21%)</title><rect x="50.8042%" y="181" width="0.2126%" height="15" fill="rgb(228,99,48)"/><text x="51.0542%" y="191.50"></text></g><g><title>evaluate_obligation (481,933 samples, 0.79%)</title><rect x="50.4923%" y="197" width="0.7873%" height="15" fill="rgb(253,11,6)"/><text x="50.7423%" y="207.50"></text></g><g><title>trait_impls_of (87,731 samples, 0.14%)</title><rect x="51.1363%" y="181" width="0.1433%" height="15" fill="rgb(247,143,39)"/><text x="51.3863%" y="191.50"></text></g><g><title>evaluate_obligation (86,161 samples, 0.14%)</title><rect x="51.6802%" y="181" width="0.1408%" height="15" fill="rgb(236,97,10)"/><text x="51.9302%" y="191.50"></text></g><g><title>method_autoderef_steps (126,211 samples, 0.21%)</title><rect x="51.6309%" y="197" width="0.2062%" height="15" fill="rgb(233,208,19)"/><text x="51.8809%" y="207.50"></text></g><g><title>predicates_of (107,262 samples, 0.18%)</title><rect x="51.8670%" y="197" width="0.1752%" height="15" fill="rgb(216,164,2)"/><text x="52.1170%" y="207.50"></text></g><g><title>predicates_defined_on (69,202 samples, 0.11%)</title><rect x="51.9292%" y="181" width="0.1131%" height="15" fill="rgb(220,129,5)"/><text x="52.1792%" y="191.50"></text></g><g><title>item_bodies_checking (5,238,398 samples, 8.56%)</title><rect x="43.6534%" y="245" width="8.5577%" height="15" fill="rgb(242,17,10)"/><text x="43.9034%" y="255.50">item_bodies_..</text></g><g><title>typeck_item_bodies (5,236,008 samples, 8.55%)</title><rect x="43.6573%" y="229" width="8.5538%" height="15" fill="rgb(242,107,0)"/><text x="43.9073%" y="239.50">typeck_item_..</text></g><g><title>typeck (5,220,788 samples, 8.53%)</title><rect x="43.6822%" y="213" width="8.5289%" height="15" fill="rgb(251,28,31)"/><text x="43.9322%" y="223.50">typeck</text></g><g><title>item_types_checking (333,974 samples, 0.55%)</title><rect x="52.2111%" y="245" width="0.5456%" height="15" fill="rgb(233,223,10)"/><text x="52.4611%" y="255.50"></text></g><g><title>check_mod_item_types (330,704 samples, 0.54%)</title><rect x="52.2164%" y="229" width="0.5403%" height="15" fill="rgb(215,21,27)"/><text x="52.4664%" y="239.50"></text></g><g><title>fn_sig (230,322 samples, 0.38%)</title><rect x="53.0512%" y="213" width="0.3763%" height="15" fill="rgb(232,23,21)"/><text x="53.3012%" y="223.50"></text></g><g><title>type_of (74,400 samples, 0.12%)</title><rect x="53.3059%" y="197" width="0.1215%" height="15" fill="rgb(244,5,23)"/><text x="53.5559%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (70,720 samples, 0.12%)</title><rect x="53.3119%" y="181" width="0.1155%" height="15" fill="rgb(226,81,46)"/><text x="53.5619%" y="191.50"></text></g><g><title>named_region_map (279,322 samples, 0.46%)</title><rect x="53.5394%" y="197" width="0.4563%" height="15" fill="rgb(247,70,30)"/><text x="53.7894%" y="207.50"></text></g><g><title>resolve_lifetimes (258,702 samples, 0.42%)</title><rect x="53.5731%" y="181" width="0.4226%" height="15" fill="rgb(212,68,19)"/><text x="53.8231%" y="191.50"></text></g><g><title>lint_levels (89,051 samples, 0.15%)</title><rect x="53.8502%" y="165" width="0.1455%" height="15" fill="rgb(240,187,13)"/><text x="54.1002%" y="175.50"></text></g><g><title>generics_of (360,573 samples, 0.59%)</title><rect x="53.4275%" y="213" width="0.5890%" height="15" fill="rgb(223,113,26)"/><text x="53.6775%" y="223.50"></text></g><g><title>impl_trait_ref (82,210 samples, 0.13%)</title><rect x="54.0165%" y="213" width="0.1343%" height="15" fill="rgb(206,192,2)"/><text x="54.2665%" y="223.50"></text></g><g><title>explicit_predicates_of (97,081 samples, 0.16%)</title><rect x="54.2729%" y="181" width="0.1586%" height="15" fill="rgb(241,108,4)"/><text x="54.5229%" y="191.50"></text></g><g><title>predicates_of (283,574 samples, 0.46%)</title><rect x="54.1508%" y="213" width="0.4633%" height="15" fill="rgb(247,173,49)"/><text x="54.4008%" y="223.50"></text></g><g><title>predicates_defined_on (253,474 samples, 0.41%)</title><rect x="54.2000%" y="197" width="0.4141%" height="15" fill="rgb(224,114,35)"/><text x="54.4500%" y="207.50"></text></g><g><title>inferred_outlives_of (111,782 samples, 0.18%)</title><rect x="54.4315%" y="181" width="0.1826%" height="15" fill="rgb(245,159,27)"/><text x="54.6815%" y="191.50"></text></g><g><title>inferred_outlives_crate (99,442 samples, 0.16%)</title><rect x="54.4516%" y="165" width="0.1625%" height="15" fill="rgb(245,172,44)"/><text x="54.7016%" y="175.50"></text></g><g><title>type_collecting (1,211,634 samples, 1.98%)</title><rect x="52.7582%" y="245" width="1.9794%" height="15" fill="rgb(236,23,11)"/><text x="53.0082%" y="255.50">t..</text></g><g><title>collect_mod_item_types (1,200,394 samples, 1.96%)</title><rect x="52.7766%" y="229" width="1.9610%" height="15" fill="rgb(205,117,38)"/><text x="53.0266%" y="239.50">c..</text></g><g><title>type_of (75,620 samples, 0.12%)</title><rect x="54.6141%" y="213" width="0.1235%" height="15" fill="rgb(237,72,25)"/><text x="54.8641%" y="223.50"></text></g><g><title>adt_sized_constraint (123,552 samples, 0.20%)</title><rect x="55.7328%" y="197" width="0.2018%" height="15" fill="rgb(244,70,9)"/><text x="55.9828%" y="207.50"></text></g><g><title>evaluate_obligation (366,774 samples, 0.60%)</title><rect x="55.4510%" y="213" width="0.5992%" height="15" fill="rgb(217,125,39)"/><text x="55.7010%" y="223.50"></text></g><g><title>implied_outlives_bounds (80,321 samples, 0.13%)</title><rect x="56.0502%" y="213" width="0.1312%" height="15" fill="rgb(235,36,10)"/><text x="56.3002%" y="223.50"></text></g><g><title>region_scope_tree (71,352 samples, 0.12%)</title><rect x="56.3290%" y="213" width="0.1166%" height="15" fill="rgb(251,123,47)"/><text x="56.5790%" y="223.50"></text></g><g><title>check_impl_item_well_formed (1,025,123 samples, 1.67%)</title><rect x="54.8119%" y="229" width="1.6747%" height="15" fill="rgb(221,13,13)"/><text x="55.0619%" y="239.50"></text></g><g><title>evaluate_obligation (76,760 samples, 0.13%)</title><rect x="57.0120%" y="213" width="0.1254%" height="15" fill="rgb(238,131,9)"/><text x="57.2620%" y="223.50"></text></g><g><title>analysis (34,608,377 samples, 56.54%)</title><rect x="0.9958%" y="277" width="56.5378%" height="15" fill="rgb(211,50,8)"/><text x="1.2458%" y="287.50">analysis</text></g><g><title>type_check_crate (26,017,751 samples, 42.50%)</title><rect x="15.0299%" y="261" width="42.5038%" height="15" fill="rgb(245,182,24)"/><text x="15.2799%" y="271.50">type_check_crate</text></g><g><title>wf_checking (1,710,459 samples, 2.79%)</title><rect x="54.7394%" y="245" width="2.7943%" height="15" fill="rgb(242,14,37)"/><text x="54.9894%" y="255.50">wf..</text></g><g><title>check_item_well_formed (640,926 samples, 1.05%)</title><rect x="56.4866%" y="229" width="1.0470%" height="15" fill="rgb(246,228,12)"/><text x="56.7366%" y="239.50"></text></g><g><title>is_no_builtins (210,863 samples, 0.34%)</title><rect x="58.3557%" y="261" width="0.3445%" height="15" fill="rgb(213,55,15)"/><text x="58.6057%" y="271.50"></text></g><g><title>codegen_crate (770,139 samples, 1.26%)</title><rect x="57.5481%" y="277" width="1.2581%" height="15" fill="rgb(209,9,3)"/><text x="57.7981%" y="287.50"></text></g><g><title>AST_validation (122,661 samples, 0.20%)</title><rect x="59.1155%" y="261" width="0.2004%" height="15" fill="rgb(230,59,30)"/><text x="59.3655%" y="271.50"></text></g><g><title>crate_injection (82,830 samples, 0.14%)</title><rect x="59.3861%" y="261" width="0.1353%" height="15" fill="rgb(209,121,21)"/><text x="59.6361%" y="271.50"></text></g><g><title>metadata_load_macro (201,494 samples, 0.33%)</title><rect x="78.9229%" y="229" width="0.3292%" height="15" fill="rgb(220,109,13)"/><text x="79.1729%" y="239.50"></text></g><g><title>metadata_register_crate (2,926,541 samples, 4.78%)</title><rect x="79.2521%" y="229" width="4.7809%" height="15" fill="rgb(232,18,1)"/><text x="79.5021%" y="239.50">metada..</text></g><g><title>metadata_register_crate (1,063,241 samples, 1.74%)</title><rect x="82.2961%" y="213" width="1.7370%" height="15" fill="rgb(215,41,42)"/><text x="82.5461%" y="223.50"></text></g><g><title>metadata_register_crate (101,930 samples, 0.17%)</title><rect x="83.8665%" y="197" width="0.1665%" height="15" fill="rgb(224,123,36)"/><text x="84.1165%" y="207.50"></text></g><g><title>macro_expand_crate (15,074,308 samples, 24.63%)</title><rect x="59.5215%" y="261" width="24.6261%" height="15" fill="rgb(240,125,3)"/><text x="59.7715%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (15,052,447 samples, 24.59%)</title><rect x="59.5572%" y="245" width="24.5904%" height="15" fill="rgb(205,98,50)"/><text x="59.8072%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (70,081 samples, 0.11%)</title><rect x="84.0330%" y="229" width="0.1145%" height="15" fill="rgb(205,185,37)"/><text x="84.2830%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (89,881 samples, 0.15%)</title><rect x="84.1641%" y="261" width="0.1468%" height="15" fill="rgb(238,207,15)"/><text x="84.4141%" y="271.50"></text></g><g><title>finalize_macro_resolutions (294,603 samples, 0.48%)</title><rect x="84.3756%" y="245" width="0.4813%" height="15" fill="rgb(213,199,42)"/><text x="84.6256%" y="255.50"></text></g><g><title>late_resolve_crate (2,020,402 samples, 3.30%)</title><rect x="84.8569%" y="245" width="3.3006%" height="15" fill="rgb(235,201,11)"/><text x="85.1069%" y="255.50">lat..</text></g><g><title>configure_and_expand (18,029,311 samples, 29.45%)</title><rect x="58.8063%" y="277" width="29.4535%" height="15" fill="rgb(207,46,11)"/><text x="59.0563%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (2,417,197 samples, 3.95%)</title><rect x="84.3109%" y="261" width="3.9488%" height="15" fill="rgb(241,35,35)"/><text x="84.5609%" y="271.50">reso..</text></g><g><title>drop_ast (82,431 samples, 0.13%)</title><rect x="88.2598%" y="277" width="0.1347%" height="15" fill="rgb(243,32,47)"/><text x="88.5098%" y="287.50"></text></g><g><title>early_lint_checks (219,073 samples, 0.36%)</title><rect x="88.4241%" y="277" width="0.3579%" height="15" fill="rgb(247,202,23)"/><text x="88.6741%" y="287.50"></text></g><g><title>free_global_ctxt (2,962,592 samples, 4.84%)</title><rect x="88.7820%" y="277" width="4.8398%" height="15" fill="rgb(219,102,11)"/><text x="89.0320%" y="287.50">free_g..</text></g><g><title>crate_hash (72,720 samples, 0.12%)</title><rect x="94.2077%" y="261" width="0.1188%" height="15" fill="rgb(243,110,44)"/><text x="94.4577%" y="271.50"></text></g><g><title>generate_crate_metadata (556,916 samples, 0.91%)</title><rect x="93.6218%" y="277" width="0.9098%" height="15" fill="rgb(222,74,54)"/><text x="93.8718%" y="287.50"></text></g><g><title>hir_lowering (1,192,973 samples, 1.95%)</title><rect x="94.5316%" y="277" width="1.9489%" height="15" fill="rgb(216,99,12)"/><text x="94.7816%" y="287.50">h..</text></g><g><title>parse_crate (761,738 samples, 1.24%)</title><rect x="96.5602%" y="277" width="1.2444%" height="15" fill="rgb(226,22,26)"/><text x="96.8102%" y="287.50"></text></g><g><title>prepare_outputs (261,123 samples, 0.43%)</title><rect x="97.8181%" y="277" width="0.4266%" height="15" fill="rgb(217,163,10)"/><text x="98.0681%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (675,017 samples, 1.10%)</title><rect x="98.2447%" y="277" width="1.1027%" height="15" fill="rgb(213,25,53)"/><text x="98.4947%" y="287.50"></text></g><g><title>setup_global_ctxt (125,992 samples, 0.21%)</title><rect x="99.3644%" y="277" width="0.2058%" height="15" fill="rgb(252,105,26)"/><text x="99.6144%" y="287.50"></text></g><g><title>all (61,212,793 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (61,212,793 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (263,083 samples, 0.43%)</title><rect x="99.5702%" y="277" width="0.4298%" height="15" fill="rgb(252,8,32)"/><text x="99.8202%" y="287.50"></text></g></svg></svg>