<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (649,363 samples, 0.14%)</title><rect x="14.7468%" y="149" width="0.1425%" height="15" fill="rgb(227,0,7)"/><text x="14.9968%" y="159.50"></text></g><g><title>item_attrs (708,248 samples, 0.16%)</title><rect x="15.4355%" y="117" width="0.1554%" height="15" fill="rgb(217,0,24)"/><text x="15.6855%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (688,858 samples, 0.15%)</title><rect x="15.4398%" y="101" width="0.1511%" height="15" fill="rgb(221,193,54)"/><text x="15.6898%" y="111.50"></text></g><g><title>codegen_fn_attrs (988,649 samples, 0.22%)</title><rect x="15.3818%" y="133" width="0.2169%" height="15" fill="rgb(248,212,6)"/><text x="15.6318%" y="143.50"></text></g><g><title>is_copy_raw (862,012 samples, 0.19%)</title><rect x="18.6362%" y="85" width="0.1891%" height="15" fill="rgb(208,68,35)"/><text x="18.8862%" y="95.50"></text></g><g><title>adt_drop_tys (1,216,886 samples, 0.27%)</title><rect x="18.5937%" y="101" width="0.2670%" height="15" fill="rgb(232,128,0)"/><text x="18.8437%" y="111.50"></text></g><g><title>is_copy_raw (2,414,860 samples, 0.53%)</title><rect x="18.8607%" y="101" width="0.5298%" height="15" fill="rgb(207,160,47)"/><text x="19.1107%" y="111.50"></text></g><g><title>evaluate_obligation (1,963,994 samples, 0.43%)</title><rect x="18.9596%" y="85" width="0.4309%" height="15" fill="rgb(228,23,34)"/><text x="19.2096%" y="95.50"></text></g><g><title>needs_drop_raw (4,038,010 samples, 0.89%)</title><rect x="18.5059%" y="117" width="0.8859%" height="15" fill="rgb(218,30,26)"/><text x="18.7559%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (458,346 samples, 0.10%)</title><rect x="19.5882%" y="101" width="0.1006%" height="15" fill="rgb(220,122,19)"/><text x="19.8382%" y="111.50"></text></g><g><title>specialization_graph_of (1,039,241 samples, 0.23%)</title><rect x="19.7080%" y="101" width="0.2280%" height="15" fill="rgb(250,228,42)"/><text x="19.9580%" y="111.50"></text></g><g><title>impl_trait_ref (567,455 samples, 0.12%)</title><rect x="19.8115%" y="85" width="0.1245%" height="15" fill="rgb(240,193,28)"/><text x="20.0615%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (498,705 samples, 0.11%)</title><rect x="19.8266%" y="69" width="0.1094%" height="15" fill="rgb(216,20,37)"/><text x="20.0766%" y="79.50"></text></g><g><title>resolve_instance (2,735,768 samples, 0.60%)</title><rect x="19.3917%" y="117" width="0.6002%" height="15" fill="rgb(206,188,39)"/><text x="19.6417%" y="127.50"></text></g><g><title>thir_body (5,539,520 samples, 1.22%)</title><rect x="20.0246%" y="117" width="1.2153%" height="15" fill="rgb(217,207,13)"/><text x="20.2746%" y="127.50"></text></g><g><title>mir_const (33,362,524 samples, 7.32%)</title><rect x="13.9406%" y="165" width="7.3192%" height="15" fill="rgb(231,73,38)"/><text x="14.1906%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (29,038,670 samples, 6.37%)</title><rect x="14.8892%" y="149" width="6.3706%" height="15" fill="rgb(225,20,46)"/><text x="15.1392%" y="159.50">unsafety..</text></g><g><title>mir_built (25,804,854 samples, 5.66%)</title><rect x="15.5987%" y="133" width="5.6611%" height="15" fill="rgb(210,31,41)"/><text x="15.8487%" y="143.50">mir_bui..</text></g><g><title>mir_const_qualif (554,241 samples, 0.12%)</title><rect x="21.2598%" y="165" width="0.1216%" height="15" fill="rgb(221,200,47)"/><text x="21.5098%" y="175.50"></text></g><g><title>mir_promoted (37,904,959 samples, 8.32%)</title><rect x="13.0658%" y="181" width="8.3157%" height="15" fill="rgb(226,26,5)"/><text x="13.3158%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,570,620 samples, 0.34%)</title><rect x="21.3815%" y="181" width="0.3446%" height="15" fill="rgb(249,33,26)"/><text x="21.6315%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (834,151 samples, 0.18%)</title><rect x="21.7260%" y="181" width="0.1830%" height="15" fill="rgb(235,183,28)"/><text x="21.9760%" y="191.50"></text></g><g><title>normalize_projection_ty (501,608 samples, 0.11%)</title><rect x="21.7990%" y="165" width="0.1100%" height="15" fill="rgb(221,5,38)"/><text x="22.0490%" y="175.50"></text></g><g><title>type_op_prove_predicate (7,704,255 samples, 1.69%)</title><rect x="21.9747%" y="181" width="1.6902%" height="15" fill="rgb(247,18,42)"/><text x="22.2247%" y="191.50"></text></g><g><title>MIR_borrow_checking (105,599,555 samples, 23.17%)</title><rect x="0.5003%" y="213" width="23.1667%" height="15" fill="rgb(241,131,45)"/><text x="0.7503%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (104,976,207 samples, 23.03%)</title><rect x="0.6371%" y="197" width="23.0300%" height="15" fill="rgb(249,31,29)"/><text x="0.8871%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (486,095 samples, 0.11%)</title><rect x="23.6670%" y="213" width="0.1066%" height="15" fill="rgb(225,111,53)"/><text x="23.9170%" y="223.50"></text></g><g><title>hir_module_items (843,066 samples, 0.18%)</title><rect x="23.7737%" y="213" width="0.1850%" height="15" fill="rgb(238,160,17)"/><text x="24.0237%" y="223.50"></text></g><g><title>codegen_fn_attrs (938,501 samples, 0.21%)</title><rect x="24.1755%" y="181" width="0.2059%" height="15" fill="rgb(214,148,48)"/><text x="24.4255%" y="191.50"></text></g><g><title>should_inherit_track_caller (750,090 samples, 0.16%)</title><rect x="24.2169%" y="165" width="0.1646%" height="15" fill="rgb(232,36,49)"/><text x="24.4669%" y="175.50"></text></g><g><title>check_mod_attrs (1,871,143 samples, 0.41%)</title><rect x="23.9709%" y="197" width="0.4105%" height="15" fill="rgb(209,103,24)"/><text x="24.2209%" y="207.50"></text></g><g><title>check_mod_const_bodies (533,263 samples, 0.12%)</title><rect x="24.3814%" y="197" width="0.1170%" height="15" fill="rgb(229,88,8)"/><text x="24.6314%" y="207.50"></text></g><g><title>lint_levels (590,227 samples, 0.13%)</title><rect x="24.7114%" y="181" width="0.1295%" height="15" fill="rgb(213,181,19)"/><text x="24.9614%" y="191.50"></text></g><g><title>lookup_deprecation_entry (544,555 samples, 0.12%)</title><rect x="24.8409%" y="181" width="0.1195%" height="15" fill="rgb(254,191,54)"/><text x="25.0909%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (1,927,872 samples, 0.42%)</title><rect x="24.5747%" y="197" width="0.4229%" height="15" fill="rgb(241,83,37)"/><text x="24.8247%" y="207.50"></text></g><g><title>misc_checking_1 (4,917,365 samples, 1.08%)</title><rect x="23.9588%" y="213" width="1.0788%" height="15" fill="rgb(233,36,39)"/><text x="24.2088%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (2,329,025 samples, 0.51%)</title><rect x="25.0380%" y="197" width="0.5109%" height="15" fill="rgb(226,3,54)"/><text x="25.2880%" y="207.50"></text></g><g><title>check_mod_liveness (1,870,402 samples, 0.41%)</title><rect x="25.1386%" y="181" width="0.4103%" height="15" fill="rgb(245,192,40)"/><text x="25.3886%" y="191.50"></text></g><g><title>misc_checking_2 (5,342,958 samples, 1.17%)</title><rect x="25.0376%" y="213" width="1.1722%" height="15" fill="rgb(238,167,29)"/><text x="25.2876%" y="223.50"></text></g><g><title>match_checking (3,011,863 samples, 0.66%)</title><rect x="25.5490%" y="197" width="0.6608%" height="15" fill="rgb(232,182,51)"/><text x="25.7990%" y="207.50"></text></g><g><title>check_match (2,851,853 samples, 0.63%)</title><rect x="25.5841%" y="181" width="0.6256%" height="15" fill="rgb(231,60,39)"/><text x="25.8341%" y="191.50"></text></g><g><title>check_private_in_public (1,019,601 samples, 0.22%)</title><rect x="26.2124%" y="197" width="0.2237%" height="15" fill="rgb(208,69,12)"/><text x="26.4624%" y="207.50"></text></g><g><title>death_checking (2,280,856 samples, 0.50%)</title><rect x="26.4360%" y="197" width="0.5004%" height="15" fill="rgb(235,93,37)"/><text x="26.6860%" y="207.50"></text></g><g><title>param_env (1,473,180 samples, 0.32%)</title><rect x="27.5505%" y="165" width="0.3232%" height="15" fill="rgb(213,116,39)"/><text x="27.8005%" y="175.50"></text></g><g><title>predicates_of (744,425 samples, 0.16%)</title><rect x="27.7104%" y="149" width="0.1633%" height="15" fill="rgb(222,207,29)"/><text x="27.9604%" y="159.50"></text></g><g><title>crate_lints (5,752,015 samples, 1.26%)</title><rect x="26.9370%" y="181" width="1.2619%" height="15" fill="rgb(206,96,30)"/><text x="27.1870%" y="191.50"></text></g><g><title>type_of (1,296,144 samples, 0.28%)</title><rect x="27.9145%" y="165" width="0.2844%" height="15" fill="rgb(218,138,4)"/><text x="28.1645%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (1,031,222 samples, 0.23%)</title><rect x="27.9726%" y="149" width="0.2262%" height="15" fill="rgb(250,191,14)"/><text x="28.2226%" y="159.50"></text></g><g><title>lint_checking (8,193,321 samples, 1.80%)</title><rect x="26.9364%" y="197" width="1.7975%" height="15" fill="rgb(239,60,40)"/><text x="27.1864%" y="207.50">l..</text></g><g><title>module_lints (2,438,836 samples, 0.54%)</title><rect x="28.1989%" y="181" width="0.5350%" height="15" fill="rgb(206,27,48)"/><text x="28.4489%" y="191.50"></text></g><g><title>lint_mod (2,420,616 samples, 0.53%)</title><rect x="28.2028%" y="165" width="0.5310%" height="15" fill="rgb(225,35,8)"/><text x="28.4528%" y="175.50"></text></g><g><title>privacy_access_levels (1,538,107 samples, 0.34%)</title><rect x="28.7339%" y="197" width="0.3374%" height="15" fill="rgb(250,213,24)"/><text x="28.9839%" y="207.50"></text></g><g><title>privacy_checking_modules (4,141,267 samples, 0.91%)</title><rect x="29.0713%" y="197" width="0.9085%" height="15" fill="rgb(247,123,22)"/><text x="29.3213%" y="207.50"></text></g><g><title>check_mod_privacy (4,128,797 samples, 0.91%)</title><rect x="29.0741%" y="181" width="0.9058%" height="15" fill="rgb(231,138,38)"/><text x="29.3241%" y="191.50"></text></g><g><title>misc_checking_3 (17,220,042 samples, 3.78%)</title><rect x="26.2097%" y="213" width="3.7778%" height="15" fill="rgb(231,145,46)"/><text x="26.4597%" y="223.50">misc..</text></g><g><title>impl_trait_ref (487,705 samples, 0.11%)</title><rect x="30.1083%" y="117" width="0.1070%" height="15" fill="rgb(251,118,11)"/><text x="30.3583%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (466,824 samples, 0.10%)</title><rect x="30.1129%" y="101" width="0.1024%" height="15" fill="rgb(217,147,25)"/><text x="30.3629%" y="111.50"></text></g><g><title>adt_destructor (670,078 samples, 0.15%)</title><rect x="30.0755%" y="165" width="0.1470%" height="15" fill="rgb(247,81,37)"/><text x="30.3255%" y="175.50"></text></g><g><title>coherent_trait (666,498 samples, 0.15%)</title><rect x="30.0763%" y="149" width="0.1462%" height="15" fill="rgb(209,12,38)"/><text x="30.3263%" y="159.50"></text></g><g><title>specialization_graph_of (663,608 samples, 0.15%)</title><rect x="30.0770%" y="133" width="0.1456%" height="15" fill="rgb(227,1,9)"/><text x="30.3270%" y="143.50"></text></g><g><title>impl_parent (2,762,687 samples, 0.61%)</title><rect x="31.2256%" y="149" width="0.6061%" height="15" fill="rgb(248,47,43)"/><text x="31.4756%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,618,607 samples, 0.36%)</title><rect x="31.4766%" y="133" width="0.3551%" height="15" fill="rgb(221,10,30)"/><text x="31.7266%" y="143.50"></text></g><g><title>impl_trait_ref (5,992,475 samples, 1.31%)</title><rect x="31.8320%" y="149" width="1.3146%" height="15" fill="rgb(210,229,1)"/><text x="32.0820%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,655,622 samples, 1.02%)</title><rect x="32.1253%" y="133" width="1.0214%" height="15" fill="rgb(222,148,37)"/><text x="32.3753%" y="143.50"></text></g><g><title>trait_impls_of (1,032,593 samples, 0.23%)</title><rect x="33.1562%" y="149" width="0.2265%" height="15" fill="rgb(234,67,33)"/><text x="33.4062%" y="159.50"></text></g><g><title>coherent_trait (15,130,408 samples, 3.32%)</title><rect x="30.0637%" y="181" width="3.3194%" height="15" fill="rgb(247,98,35)"/><text x="30.3137%" y="191.50">coh..</text></g><g><title>specialization_graph_of (14,323,779 samples, 3.14%)</title><rect x="30.2407%" y="165" width="3.1424%" height="15" fill="rgb(247,138,52)"/><text x="30.4907%" y="175.50">spe..</text></g><g><title>coherence_checking (15,340,401 samples, 3.37%)</title><rect x="30.0576%" y="197" width="3.3654%" height="15" fill="rgb(213,79,30)"/><text x="30.3076%" y="207.50">coh..</text></g><g><title>associated_item (530,924 samples, 0.12%)</title><rect x="50.2302%" y="133" width="0.1165%" height="15" fill="rgb(246,177,23)"/><text x="50.4802%" y="143.50"></text></g><g><title>associated_items (992,319 samples, 0.22%)</title><rect x="50.1406%" y="149" width="0.2177%" height="15" fill="rgb(230,62,27)"/><text x="50.3906%" y="159.50"></text></g><g><title>dropck_outlives (998,773 samples, 0.22%)</title><rect x="50.3916%" y="149" width="0.2191%" height="15" fill="rgb(216,154,8)"/><text x="50.6416%" y="159.50"></text></g><g><title>trait_impls_of (591,494 samples, 0.13%)</title><rect x="51.9132%" y="133" width="0.1298%" height="15" fill="rgb(244,35,45)"/><text x="52.1632%" y="143.50"></text></g><g><title>evaluate_obligation (6,543,194 samples, 1.44%)</title><rect x="50.6107%" y="149" width="1.4355%" height="15" fill="rgb(251,115,12)"/><text x="50.8607%" y="159.50"></text></g><g><title>evaluate_obligation (476,164 samples, 0.10%)</title><rect x="52.5083%" y="133" width="0.1045%" height="15" fill="rgb(240,54,50)"/><text x="52.7583%" y="143.50"></text></g><g><title>method_autoderef_steps (1,106,549 samples, 0.24%)</title><rect x="52.3740%" y="149" width="0.2428%" height="15" fill="rgb(233,84,52)"/><text x="52.6240%" y="159.50"></text></g><g><title>predicates_of (615,368 samples, 0.14%)</title><rect x="52.6857%" y="149" width="0.1350%" height="15" fill="rgb(207,117,47)"/><text x="52.9357%" y="159.50"></text></g><g><title>generics_of (756,121 samples, 0.17%)</title><rect x="58.9031%" y="117" width="0.1659%" height="15" fill="rgb(249,43,39)"/><text x="59.1531%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (633,671 samples, 0.14%)</title><rect x="58.9299%" y="101" width="0.1390%" height="15" fill="rgb(209,38,44)"/><text x="59.1799%" y="111.50"></text></g><g><title>evaluate_obligation (2,807,486 samples, 0.62%)</title><rect x="58.5029%" y="133" width="0.6159%" height="15" fill="rgb(236,212,23)"/><text x="58.7529%" y="143.50"></text></g><g><title>is_copy_raw (497,065 samples, 0.11%)</title><rect x="59.1764%" y="133" width="0.1090%" height="15" fill="rgb(242,79,21)"/><text x="59.4264%" y="143.50"></text></g><g><title>typeck (30,160,286 samples, 6.62%)</title><rect x="52.8721%" y="149" width="6.6167%" height="15" fill="rgb(211,96,35)"/><text x="53.1221%" y="159.50">typeck</text></g><g><title>item_bodies_checking (118,821,992 samples, 26.07%)</title><rect x="33.4533%" y="197" width="26.0675%" height="15" fill="rgb(253,215,40)"/><text x="33.7033%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (118,817,452 samples, 26.07%)</title><rect x="33.4543%" y="181" width="26.0665%" height="15" fill="rgb(211,81,21)"/><text x="33.7043%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (118,393,088 samples, 25.97%)</title><rect x="33.5474%" y="165" width="25.9734%" height="15" fill="rgb(208,190,38)"/><text x="33.7974%" y="175.50">typeck</text></g><g><title>mir_borrowck (1,910,860 samples, 0.42%)</title><rect x="62.2502%" y="117" width="0.4192%" height="15" fill="rgb(235,213,38)"/><text x="62.5002%" y="127.50"></text></g><g><title>mir_const (474,387 samples, 0.10%)</title><rect x="62.7194%" y="101" width="0.1041%" height="15" fill="rgb(237,122,38)"/><text x="62.9694%" y="111.50"></text></g><g><title>mir_promoted (710,470 samples, 0.16%)</title><rect x="62.6694%" y="117" width="0.1559%" height="15" fill="rgb(244,218,35)"/><text x="62.9194%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (1,542,986 samples, 0.34%)</title><rect x="62.8253%" y="117" width="0.3385%" height="15" fill="rgb(240,68,47)"/><text x="63.0753%" y="127.50"></text></g><g><title>normalize_projection_ty (1,000,700 samples, 0.22%)</title><rect x="62.9443%" y="101" width="0.2195%" height="15" fill="rgb(210,16,53)"/><text x="63.1943%" y="111.50"></text></g><g><title>mir_borrowck (12,645,272 samples, 2.77%)</title><rect x="61.0138%" y="133" width="2.7742%" height="15" fill="rgb(235,124,12)"/><text x="61.2638%" y="143.50">mi..</text></g><g><title>type_op_prove_predicate (2,782,078 samples, 0.61%)</title><rect x="63.1777%" y="117" width="0.6103%" height="15" fill="rgb(224,169,11)"/><text x="63.4277%" y="127.50"></text></g><g><title>dropck_outlives (743,577 samples, 0.16%)</title><rect x="67.3328%" y="53" width="0.1631%" height="15" fill="rgb(250,166,2)"/><text x="67.5828%" y="63.50"></text></g><g><title>adt_dtorck_constraint (476,023 samples, 0.10%)</title><rect x="67.3914%" y="37" width="0.1044%" height="15" fill="rgb(242,216,29)"/><text x="67.6414%" y="47.50"></text></g><g><title>evaluate_obligation (1,602,474 samples, 0.35%)</title><rect x="67.5004%" y="53" width="0.3516%" height="15" fill="rgb(230,116,27)"/><text x="67.7504%" y="63.50"></text></g><g><title>is_copy_raw (507,017 samples, 0.11%)</title><rect x="67.9522%" y="53" width="0.1112%" height="15" fill="rgb(228,99,48)"/><text x="68.2022%" y="63.50"></text></g><g><title>mir_built (20,318,758 samples, 4.46%)</title><rect x="63.8544%" y="85" width="4.4576%" height="15" fill="rgb(253,11,6)"/><text x="64.1044%" y="95.50">mir_b..</text></g><g><title>typeck (19,470,397 samples, 4.27%)</title><rect x="64.0405%" y="69" width="4.2715%" height="15" fill="rgb(247,143,39)"/><text x="64.2905%" y="79.50">typeck</text></g><g><title>mir_built (1,736,349 samples, 0.38%)</title><rect x="68.3855%" y="69" width="0.3809%" height="15" fill="rgb(236,97,10)"/><text x="68.6355%" y="79.50"></text></g><g><title>mir_const (23,073,937 samples, 5.06%)</title><rect x="63.8089%" y="117" width="5.0620%" height="15" fill="rgb(233,208,19)"/><text x="64.0589%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (22,915,236 samples, 5.03%)</title><rect x="63.8437%" y="101" width="5.0272%" height="15" fill="rgb(216,164,2)"/><text x="64.0937%" y="111.50">unsafe..</text></g><g><title>unsafety_check_result (2,547,838 samples, 0.56%)</title><rect x="68.3120%" y="85" width="0.5590%" height="15" fill="rgb(220,129,5)"/><text x="68.5620%" y="95.50"></text></g><g><title>unsafety_check_result (473,787 samples, 0.10%)</title><rect x="68.7670%" y="69" width="0.1039%" height="15" fill="rgb(242,17,10)"/><text x="69.0170%" y="79.50"></text></g><g><title>mir_promoted (23,180,369 samples, 5.09%)</title><rect x="63.7880%" y="133" width="5.0854%" height="15" fill="rgb(242,107,0)"/><text x="64.0380%" y="143.50">mir_pr..</text></g><g><title>type_of (38,974,175 samples, 8.55%)</title><rect x="60.4870%" y="165" width="8.5503%" height="15" fill="rgb(251,28,31)"/><text x="60.7370%" y="175.50">type_of</text></g><g><title>mir_borrowck (38,930,694 samples, 8.54%)</title><rect x="60.4965%" y="149" width="8.5407%" height="15" fill="rgb(233,223,10)"/><text x="60.7465%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (566,495 samples, 0.12%)</title><rect x="68.9130%" y="133" width="0.1243%" height="15" fill="rgb(215,21,27)"/><text x="69.1630%" y="143.50"></text></g><g><title>generics_of (497,473 samples, 0.11%)</title><rect x="69.8144%" y="133" width="0.1091%" height="15" fill="rgb(232,23,21)"/><text x="70.0644%" y="143.50"></text></g><g><title>impl_trait_ref (730,380 samples, 0.16%)</title><rect x="69.9558%" y="133" width="0.1602%" height="15" fill="rgb(244,5,23)"/><text x="70.2058%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (580,438 samples, 0.13%)</title><rect x="69.9887%" y="117" width="0.1273%" height="15" fill="rgb(226,81,46)"/><text x="70.2387%" y="127.50"></text></g><g><title>predicates_of (747,957 samples, 0.16%)</title><rect x="70.1258%" y="133" width="0.1641%" height="15" fill="rgb(247,70,30)"/><text x="70.3758%" y="143.50"></text></g><g><title>specializes (2,174,502 samples, 0.48%)</title><rect x="70.2899%" y="133" width="0.4770%" height="15" fill="rgb(212,68,19)"/><text x="70.5399%" y="143.50"></text></g><g><title>param_env (1,284,443 samples, 0.28%)</title><rect x="70.4852%" y="117" width="0.2818%" height="15" fill="rgb(240,187,13)"/><text x="70.7352%" y="127.50"></text></g><g><title>def_span (602,144 samples, 0.13%)</title><rect x="70.6349%" y="101" width="0.1321%" height="15" fill="rgb(223,113,26)"/><text x="70.8849%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (535,324 samples, 0.12%)</title><rect x="70.6495%" y="85" width="0.1174%" height="15" fill="rgb(206,192,2)"/><text x="70.8995%" y="95.50"></text></g><g><title>evaluate_obligation (7,049,208 samples, 1.55%)</title><rect x="69.2680%" y="149" width="1.5465%" height="15" fill="rgb(241,108,4)"/><text x="69.5180%" y="159.50"></text></g><g><title>item_types_checking (51,649,514 samples, 11.33%)</title><rect x="59.5208%" y="197" width="11.3310%" height="15" fill="rgb(247,173,49)"/><text x="59.7708%" y="207.50">item_types_checki..</text></g><g><title>check_mod_item_types (51,624,774 samples, 11.33%)</title><rect x="59.5262%" y="181" width="11.3256%" height="15" fill="rgb(224,114,35)"/><text x="59.7762%" y="191.50">check_mod_item_ty..</text></g><g><title>typeck (8,271,282 samples, 1.81%)</title><rect x="69.0372%" y="165" width="1.8146%" height="15" fill="rgb(245,159,27)"/><text x="69.2872%" y="175.50">t..</text></g><g><title>mir_borrowck (557,516 samples, 0.12%)</title><rect x="71.3058%" y="85" width="0.1223%" height="15" fill="rgb(245,172,44)"/><text x="71.5558%" y="95.50"></text></g><g><title>mir_for_ctfe (792,410 samples, 0.17%)</title><rect x="71.2547%" y="117" width="0.1738%" height="15" fill="rgb(236,23,11)"/><text x="71.5047%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (719,899 samples, 0.16%)</title><rect x="71.2706%" y="101" width="0.1579%" height="15" fill="rgb(205,117,38)"/><text x="71.5206%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,779,809 samples, 0.39%)</title><rect x="71.1197%" y="165" width="0.3905%" height="15" fill="rgb(237,72,25)"/><text x="71.3697%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,761,489 samples, 0.39%)</title><rect x="71.1237%" y="149" width="0.3864%" height="15" fill="rgb(244,70,9)"/><text x="71.3737%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,748,679 samples, 0.38%)</title><rect x="71.1265%" y="133" width="0.3836%" height="15" fill="rgb(217,125,39)"/><text x="71.3765%" y="143.50"></text></g><g><title>late_bound_vars_map (720,702 samples, 0.16%)</title><rect x="71.7114%" y="149" width="0.1581%" height="15" fill="rgb(235,36,10)"/><text x="71.9614%" y="159.50"></text></g><g><title>resolve_lifetimes (651,262 samples, 0.14%)</title><rect x="71.7267%" y="133" width="0.1429%" height="15" fill="rgb(251,123,47)"/><text x="71.9767%" y="143.50"></text></g><g><title>fn_sig (1,704,382 samples, 0.37%)</title><rect x="71.5102%" y="165" width="0.3739%" height="15" fill="rgb(221,13,13)"/><text x="71.7602%" y="175.50"></text></g><g><title>named_region_map (731,549 samples, 0.16%)</title><rect x="72.0154%" y="149" width="0.1605%" height="15" fill="rgb(238,131,9)"/><text x="72.2654%" y="159.50"></text></g><g><title>resolve_lifetimes (658,539 samples, 0.14%)</title><rect x="72.0314%" y="133" width="0.1445%" height="15" fill="rgb(211,50,8)"/><text x="72.2814%" y="143.50"></text></g><g><title>generics_of (1,379,116 samples, 0.30%)</title><rect x="71.8841%" y="165" width="0.3026%" height="15" fill="rgb(245,182,24)"/><text x="72.1341%" y="175.50"></text></g><g><title>explicit_predicates_of (875,780 samples, 0.19%)</title><rect x="72.4381%" y="133" width="0.1921%" height="15" fill="rgb(242,14,37)"/><text x="72.6881%" y="143.50"></text></g><g><title>predicates_of (2,731,779 samples, 0.60%)</title><rect x="72.2534%" y="165" width="0.5993%" height="15" fill="rgb(246,228,12)"/><text x="72.5034%" y="175.50"></text></g><g><title>predicates_defined_on (2,501,416 samples, 0.55%)</title><rect x="72.3040%" y="149" width="0.5488%" height="15" fill="rgb(213,55,15)"/><text x="72.5540%" y="159.50"></text></g><g><title>inferred_outlives_of (1,014,150 samples, 0.22%)</title><rect x="72.6302%" y="133" width="0.2225%" height="15" fill="rgb(209,9,3)"/><text x="72.8802%" y="143.50"></text></g><g><title>inferred_outlives_crate (931,140 samples, 0.20%)</title><rect x="72.6484%" y="117" width="0.2043%" height="15" fill="rgb(230,59,30)"/><text x="72.8984%" y="127.50"></text></g><g><title>type_of (461,144 samples, 0.10%)</title><rect x="72.7516%" y="101" width="0.1012%" height="15" fill="rgb(209,121,21)"/><text x="73.0016%" y="111.50"></text></g><g><title>type_collecting (9,448,645 samples, 2.07%)</title><rect x="70.8546%" y="197" width="2.0729%" height="15" fill="rgb(220,109,13)"/><text x="71.1046%" y="207.50">t..</text></g><g><title>collect_mod_item_types (9,419,105 samples, 2.07%)</title><rect x="70.8611%" y="181" width="2.0664%" height="15" fill="rgb(232,18,1)"/><text x="71.1111%" y="191.50">c..</text></g><g><title>evaluate_obligation (1,970,000 samples, 0.43%)</title><rect x="74.8644%" y="165" width="0.4322%" height="15" fill="rgb(215,41,42)"/><text x="75.1144%" y="175.50"></text></g><g><title>implied_outlives_bounds (833,170 samples, 0.18%)</title><rect x="75.3035%" y="165" width="0.1828%" height="15" fill="rgb(224,123,36)"/><text x="75.5535%" y="175.50"></text></g><g><title>param_env (1,184,960 samples, 0.26%)</title><rect x="75.4863%" y="165" width="0.2600%" height="15" fill="rgb(240,125,3)"/><text x="75.7363%" y="175.50"></text></g><g><title>region_scope_tree (1,991,969 samples, 0.44%)</title><rect x="75.7564%" y="165" width="0.4370%" height="15" fill="rgb(205,98,50)"/><text x="76.0064%" y="175.50"></text></g><g><title>check_impl_item_well_formed (13,943,552 samples, 3.06%)</title><rect x="73.1386%" y="181" width="3.0590%" height="15" fill="rgb(205,185,37)"/><text x="73.3886%" y="191.50">che..</text></g><g><title>eval_to_const_value_raw (621,247 samples, 0.14%)</title><rect x="77.3719%" y="165" width="0.1363%" height="15" fill="rgb(238,207,15)"/><text x="77.6219%" y="175.50"></text></g><g><title>eval_to_const_value_raw (619,747 samples, 0.14%)</title><rect x="77.3722%" y="149" width="0.1360%" height="15" fill="rgb(213,199,42)"/><text x="77.6222%" y="159.50"></text></g><g><title>eval_to_allocation_raw (618,207 samples, 0.14%)</title><rect x="77.3726%" y="133" width="0.1356%" height="15" fill="rgb(235,201,11)"/><text x="77.6226%" y="143.50"></text></g><g><title>evaluate_obligation (1,056,457 samples, 0.23%)</title><rect x="77.5082%" y="165" width="0.2318%" height="15" fill="rgb(207,46,11)"/><text x="77.7582%" y="175.50"></text></g><g><title>param_env (1,101,102 samples, 0.24%)</title><rect x="77.8231%" y="165" width="0.2416%" height="15" fill="rgb(241,35,35)"/><text x="78.0731%" y="175.50"></text></g><g><title>check_item_well_formed (9,152,168 samples, 2.01%)</title><rect x="76.1975%" y="181" width="2.0078%" height="15" fill="rgb(243,32,47)"/><text x="76.4475%" y="191.50">c..</text></g><g><title>analysis (355,753,945 samples, 78.05%)</title><rect x="0.2592%" y="229" width="78.0463%" height="15" fill="rgb(247,202,23)"/><text x="0.5092%" y="239.50">analysis</text></g><g><title>type_check_crate (220,245,188 samples, 48.32%)</title><rect x="29.9875%" y="213" width="48.3180%" height="15" fill="rgb(219,102,11)"/><text x="30.2375%" y="223.50">type_check_crate</text></g><g><title>wf_checking (24,483,332 samples, 5.37%)</title><rect x="72.9343%" y="197" width="5.3712%" height="15" fill="rgb(243,110,44)"/><text x="73.1843%" y="207.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (456,526 samples, 0.10%)</title><rect x="78.2054%" y="181" width="0.1002%" height="15" fill="rgb(222,74,54)"/><text x="78.4554%" y="191.50"></text></g><g><title>metadata_register_crate (1,630,688 samples, 0.36%)</title><rect x="89.9877%" y="181" width="0.3577%" height="15" fill="rgb(216,99,12)"/><text x="90.2377%" y="191.50"></text></g><g><title>metadata_register_crate (542,076 samples, 0.12%)</title><rect x="90.2265%" y="165" width="0.1189%" height="15" fill="rgb(226,22,26)"/><text x="90.4765%" y="175.50"></text></g><g><title>macro_expand_crate (55,044,082 samples, 12.08%)</title><rect x="78.6228%" y="213" width="12.0757%" height="15" fill="rgb(217,163,10)"/><text x="78.8728%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (55,028,472 samples, 12.07%)</title><rect x="78.6262%" y="197" width="12.0723%" height="15" fill="rgb(213,25,53)"/><text x="78.8762%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,609,598 samples, 0.35%)</title><rect x="90.3454%" y="181" width="0.3531%" height="15" fill="rgb(252,105,26)"/><text x="90.5954%" y="191.50"></text></g><g><title>late_resolve_crate (6,384,791 samples, 1.40%)</title><rect x="90.9269%" y="197" width="1.4007%" height="15" fill="rgb(220,39,43)"/><text x="91.1769%" y="207.50"></text></g><g><title>configure_and_expand (63,985,452 samples, 14.04%)</title><rect x="78.3993%" y="229" width="14.0373%" height="15" fill="rgb(229,68,48)"/><text x="78.6493%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (7,543,004 samples, 1.65%)</title><rect x="90.7818%" y="213" width="1.6548%" height="15" fill="rgb(252,8,32)"/><text x="91.0318%" y="223.50"></text></g><g><title>drop_ast (746,169 samples, 0.16%)</title><rect x="92.4366%" y="229" width="0.1637%" height="15" fill="rgb(223,20,43)"/><text x="92.6866%" y="239.50"></text></g><g><title>early_lint_checks (1,584,817 samples, 0.35%)</title><rect x="92.6039%" y="229" width="0.3477%" height="15" fill="rgb(229,81,49)"/><text x="92.8539%" y="239.50"></text></g><g><title>free_global_ctxt (6,395,651 samples, 1.40%)</title><rect x="92.9516%" y="229" width="1.4031%" height="15" fill="rgb(236,28,36)"/><text x="93.2016%" y="239.50"></text></g><g><title>needs_drop_raw (485,144 samples, 0.11%)</title><rect x="96.2989%" y="181" width="0.1064%" height="15" fill="rgb(249,185,26)"/><text x="96.5489%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,273,176 samples, 0.50%)</title><rect x="95.9159%" y="197" width="0.4987%" height="15" fill="rgb(249,174,33)"/><text x="96.1659%" y="207.50"></text></g><g><title>optimized_mir (4,585,780 samples, 1.01%)</title><rect x="95.4095%" y="213" width="1.0060%" height="15" fill="rgb(233,201,37)"/><text x="95.6595%" y="223.50"></text></g><g><title>generate_crate_metadata (9,511,565 samples, 2.09%)</title><rect x="94.3546%" y="229" width="2.0867%" height="15" fill="rgb(221,78,26)"/><text x="94.6046%" y="239.50">g..</text></g><g><title>hir_lowering (12,955,494 samples, 2.84%)</title><rect x="96.4413%" y="229" width="2.8422%" height="15" fill="rgb(250,127,30)"/><text x="96.6913%" y="239.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,862,781 samples, 0.41%)</title><rect x="99.4498%" y="229" width="0.4087%" height="15" fill="rgb(230,49,44)"/><text x="99.6998%" y="239.50"></text></g><g><title>all (455,824,058 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (455,824,058 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (547,627 samples, 0.12%)</title><rect x="99.8799%" y="229" width="0.1201%" height="15" fill="rgb(215,43,3)"/><text x="100.1299%" y="239.50"></text></g></svg></svg>