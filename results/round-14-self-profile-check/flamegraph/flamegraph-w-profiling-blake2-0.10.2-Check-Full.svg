<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (352,554 samples, 0.13%)</title><rect x="10.1581%" y="149" width="0.1296%" height="15" fill="rgb(227,0,7)"/><text x="10.4081%" y="159.50"></text></g><g><title>codegen_fn_attrs (344,253 samples, 0.13%)</title><rect x="11.7641%" y="101" width="0.1266%" height="15" fill="rgb(217,0,24)"/><text x="12.0141%" y="111.50"></text></g><g><title>adt_drop_tys (356,322 samples, 0.13%)</title><rect x="14.0667%" y="69" width="0.1310%" height="15" fill="rgb(221,193,54)"/><text x="14.3167%" y="79.50"></text></g><g><title>is_copy_raw (2,085,226 samples, 0.77%)</title><rect x="14.1977%" y="69" width="0.7666%" height="15" fill="rgb(248,212,6)"/><text x="14.4477%" y="79.50"></text></g><g><title>evaluate_obligation (1,923,586 samples, 0.71%)</title><rect x="14.2571%" y="53" width="0.7072%" height="15" fill="rgb(208,68,35)"/><text x="14.5071%" y="63.50"></text></g><g><title>needs_drop_raw (2,990,077 samples, 1.10%)</title><rect x="14.0184%" y="85" width="1.0993%" height="15" fill="rgb(232,128,0)"/><text x="14.2684%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (417,205 samples, 0.15%)</title><rect x="14.9643%" y="69" width="0.1534%" height="15" fill="rgb(207,160,47)"/><text x="15.2143%" y="79.50"></text></g><g><title>normalize_projection_ty (394,575 samples, 0.15%)</title><rect x="14.9726%" y="53" width="0.1451%" height="15" fill="rgb(228,23,34)"/><text x="15.2226%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (2,713,022 samples, 1.00%)</title><rect x="15.2785%" y="69" width="0.9974%" height="15" fill="rgb(218,30,26)"/><text x="15.5285%" y="79.50"></text></g><g><title>evaluate_obligation (1,264,214 samples, 0.46%)</title><rect x="15.8112%" y="53" width="0.4648%" height="15" fill="rgb(220,122,19)"/><text x="16.0612%" y="63.50"></text></g><g><title>impl_parent (426,632 samples, 0.16%)</title><rect x="16.5414%" y="53" width="0.1569%" height="15" fill="rgb(250,228,42)"/><text x="16.7914%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (280,702 samples, 0.10%)</title><rect x="16.5950%" y="37" width="0.1032%" height="15" fill="rgb(240,193,28)"/><text x="16.8450%" y="47.50"></text></g><g><title>specialization_graph_of (1,968,901 samples, 0.72%)</title><rect x="16.3214%" y="69" width="0.7239%" height="15" fill="rgb(216,20,37)"/><text x="16.5714%" y="79.50"></text></g><g><title>impl_trait_ref (944,044 samples, 0.35%)</title><rect x="16.6982%" y="53" width="0.3471%" height="15" fill="rgb(206,188,39)"/><text x="16.9482%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (808,881 samples, 0.30%)</title><rect x="16.7479%" y="37" width="0.2974%" height="15" fill="rgb(217,207,13)"/><text x="16.9979%" y="47.50"></text></g><g><title>resolve_instance (5,373,330 samples, 1.98%)</title><rect x="15.1177%" y="85" width="1.9755%" height="15" fill="rgb(231,73,38)"/><text x="15.3677%" y="95.50">r..</text></g><g><title>thir_body (2,268,446 samples, 0.83%)</title><rect x="17.1075%" y="85" width="0.8340%" height="15" fill="rgb(225,20,46)"/><text x="17.3575%" y="95.50"></text></g><g><title>mir_const (19,144,530 samples, 7.04%)</title><rect x="10.9123%" y="133" width="7.0385%" height="15" fill="rgb(210,31,41)"/><text x="11.1623%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (17,742,908 samples, 6.52%)</title><rect x="11.4276%" y="117" width="6.5232%" height="15" fill="rgb(221,200,47)"/><text x="11.6776%" y="127.50">unsafety_..</text></g><g><title>mir_built (16,483,414 samples, 6.06%)</title><rect x="11.8906%" y="101" width="6.0601%" height="15" fill="rgb(226,26,5)"/><text x="12.1406%" y="111.50">mir_built</text></g><g><title>mir_const (567,024 samples, 0.21%)</title><rect x="18.1136%" y="117" width="0.2085%" height="15" fill="rgb(249,33,26)"/><text x="18.3636%" y="127.50"></text></g><g><title>unsafety_check_result (430,423 samples, 0.16%)</title><rect x="18.1638%" y="101" width="0.1582%" height="15" fill="rgb(235,183,28)"/><text x="18.4138%" y="111.50"></text></g><g><title>mir_built (386,492 samples, 0.14%)</title><rect x="18.1799%" y="85" width="0.1421%" height="15" fill="rgb(221,5,38)"/><text x="18.4299%" y="95.50"></text></g><g><title>mir_const_qualif (1,031,200 samples, 0.38%)</title><rect x="17.9507%" y="133" width="0.3791%" height="15" fill="rgb(247,18,42)"/><text x="18.2007%" y="143.50"></text></g><g><title>mir_promoted (21,686,865 samples, 7.97%)</title><rect x="10.3571%" y="149" width="7.9732%" height="15" fill="rgb(241,131,45)"/><text x="10.6071%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (888,550 samples, 0.33%)</title><rect x="18.3322%" y="149" width="0.3267%" height="15" fill="rgb(249,31,29)"/><text x="18.5822%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,175,669 samples, 0.43%)</title><rect x="18.6589%" y="149" width="0.4322%" height="15" fill="rgb(225,111,53)"/><text x="18.9089%" y="159.50"></text></g><g><title>normalize_projection_ty (749,988 samples, 0.28%)</title><rect x="18.8154%" y="133" width="0.2757%" height="15" fill="rgb(238,160,17)"/><text x="19.0654%" y="143.50"></text></g><g><title>type_op_normalize_predicate (857,049 samples, 0.32%)</title><rect x="19.0911%" y="149" width="0.3151%" height="15" fill="rgb(214,148,48)"/><text x="19.3411%" y="159.50"></text></g><g><title>normalize_projection_ty (798,098 samples, 0.29%)</title><rect x="19.1128%" y="133" width="0.2934%" height="15" fill="rgb(232,36,49)"/><text x="19.3628%" y="143.50"></text></g><g><title>type_op_normalize_ty (422,663 samples, 0.16%)</title><rect x="19.4062%" y="149" width="0.1554%" height="15" fill="rgb(209,103,24)"/><text x="19.6562%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,384,218 samples, 1.98%)</title><rect x="19.5616%" y="149" width="1.9795%" height="15" fill="rgb(229,88,8)"/><text x="19.8116%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (57,039,970 samples, 20.97%)</title><rect x="0.5724%" y="181" width="20.9707%" height="15" fill="rgb(213,181,19)"/><text x="0.8224%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (56,819,136 samples, 20.89%)</title><rect x="0.6536%" y="165" width="20.8895%" height="15" fill="rgb(254,191,54)"/><text x="0.9036%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (448,345 samples, 0.16%)</title><rect x="21.5431%" y="181" width="0.1648%" height="15" fill="rgb(241,83,37)"/><text x="21.7931%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (331,505 samples, 0.12%)</title><rect x="21.5861%" y="165" width="0.1219%" height="15" fill="rgb(233,36,39)"/><text x="21.8361%" y="175.50"></text></g><g><title>hir_module_items (315,435 samples, 0.12%)</title><rect x="21.7080%" y="181" width="0.1160%" height="15" fill="rgb(226,3,54)"/><text x="21.9580%" y="191.50"></text></g><g><title>codegen_fn_attrs (517,765 samples, 0.19%)</title><rect x="21.9894%" y="149" width="0.1904%" height="15" fill="rgb(245,192,40)"/><text x="22.2394%" y="159.50"></text></g><g><title>check_mod_attrs (935,410 samples, 0.34%)</title><rect x="21.8359%" y="165" width="0.3439%" height="15" fill="rgb(238,167,29)"/><text x="22.0859%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (513,555 samples, 0.19%)</title><rect x="22.2959%" y="165" width="0.1888%" height="15" fill="rgb(232,182,51)"/><text x="22.5459%" y="175.50"></text></g><g><title>misc_checking_1 (1,879,261 samples, 0.69%)</title><rect x="21.8241%" y="181" width="0.6909%" height="15" fill="rgb(231,60,39)"/><text x="22.0741%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (742,149 samples, 0.27%)</title><rect x="22.5157%" y="165" width="0.2729%" height="15" fill="rgb(208,69,12)"/><text x="22.7657%" y="175.50"></text></g><g><title>check_mod_liveness (567,227 samples, 0.21%)</title><rect x="22.5800%" y="149" width="0.2085%" height="15" fill="rgb(235,93,37)"/><text x="22.8300%" y="159.50"></text></g><g><title>misc_checking_2 (1,732,829 samples, 0.64%)</title><rect x="22.5150%" y="181" width="0.6371%" height="15" fill="rgb(213,116,39)"/><text x="22.7650%" y="191.50"></text></g><g><title>match_checking (988,650 samples, 0.36%)</title><rect x="22.7886%" y="165" width="0.3635%" height="15" fill="rgb(222,207,29)"/><text x="23.0386%" y="175.50"></text></g><g><title>check_match (935,170 samples, 0.34%)</title><rect x="22.8082%" y="149" width="0.3438%" height="15" fill="rgb(206,96,30)"/><text x="23.0582%" y="159.50"></text></g><g><title>check_private_in_public (421,255 samples, 0.15%)</title><rect x="23.1557%" y="165" width="0.1549%" height="15" fill="rgb(218,138,4)"/><text x="23.4057%" y="175.50"></text></g><g><title>death_checking (713,938 samples, 0.26%)</title><rect x="23.3106%" y="165" width="0.2625%" height="15" fill="rgb(250,191,14)"/><text x="23.5606%" y="175.50"></text></g><g><title>param_env (544,135 samples, 0.20%)</title><rect x="24.1021%" y="133" width="0.2001%" height="15" fill="rgb(239,60,40)"/><text x="24.3521%" y="143.50"></text></g><g><title>crate_lints (3,417,088 samples, 1.26%)</title><rect x="23.5737%" y="149" width="1.2563%" height="15" fill="rgb(206,27,48)"/><text x="23.8237%" y="159.50"></text></g><g><title>type_of (1,431,646 samples, 0.53%)</title><rect x="24.3036%" y="133" width="0.5263%" height="15" fill="rgb(225,35,8)"/><text x="24.5536%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (962,337 samples, 0.35%)</title><rect x="24.4761%" y="117" width="0.3538%" height="15" fill="rgb(250,213,24)"/><text x="24.7261%" y="127.50"></text></g><g><title>lint_checking (4,420,389 samples, 1.63%)</title><rect x="23.5731%" y="165" width="1.6252%" height="15" fill="rgb(247,123,22)"/><text x="23.8231%" y="175.50"></text></g><g><title>module_lints (1,001,761 samples, 0.37%)</title><rect x="24.8299%" y="149" width="0.3683%" height="15" fill="rgb(231,138,38)"/><text x="25.0799%" y="159.50"></text></g><g><title>lint_mod (993,541 samples, 0.37%)</title><rect x="24.8330%" y="133" width="0.3653%" height="15" fill="rgb(231,145,46)"/><text x="25.0830%" y="143.50"></text></g><g><title>privacy_access_levels (465,435 samples, 0.17%)</title><rect x="25.1982%" y="165" width="0.1711%" height="15" fill="rgb(251,118,11)"/><text x="25.4482%" y="175.50"></text></g><g><title>privacy_checking_modules (1,878,921 samples, 0.69%)</title><rect x="25.3694%" y="165" width="0.6908%" height="15" fill="rgb(217,147,25)"/><text x="25.6194%" y="175.50"></text></g><g><title>check_mod_privacy (1,872,181 samples, 0.69%)</title><rect x="25.3718%" y="149" width="0.6883%" height="15" fill="rgb(247,81,37)"/><text x="25.6218%" y="159.50"></text></g><g><title>misc_checking_3 (7,927,408 samples, 2.91%)</title><rect x="23.1520%" y="181" width="2.9145%" height="15" fill="rgb(209,12,38)"/><text x="23.4020%" y="191.50">mi..</text></g><g><title>adt_destructor (340,964 samples, 0.13%)</title><rect x="26.1501%" y="133" width="0.1254%" height="15" fill="rgb(227,1,9)"/><text x="26.4001%" y="143.50"></text></g><g><title>coherent_trait (331,763 samples, 0.12%)</title><rect x="26.1535%" y="117" width="0.1220%" height="15" fill="rgb(248,47,43)"/><text x="26.4035%" y="127.50"></text></g><g><title>specialization_graph_of (330,553 samples, 0.12%)</title><rect x="26.1540%" y="101" width="0.1215%" height="15" fill="rgb(221,10,30)"/><text x="26.4040%" y="111.50"></text></g><g><title>impl_parent (2,455,915 samples, 0.90%)</title><rect x="27.7421%" y="117" width="0.9029%" height="15" fill="rgb(210,229,1)"/><text x="27.9921%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,283,625 samples, 0.47%)</title><rect x="28.1731%" y="101" width="0.4719%" height="15" fill="rgb(222,148,37)"/><text x="28.4231%" y="111.50"></text></g><g><title>impl_trait_ref (5,792,425 samples, 2.13%)</title><rect x="28.6450%" y="117" width="2.1296%" height="15" fill="rgb(234,67,33)"/><text x="28.8950%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,819,439 samples, 1.77%)</title><rect x="29.0028%" y="101" width="1.7719%" height="15" fill="rgb(247,98,35)"/><text x="29.2528%" y="111.50">m..</text></g><g><title>trait_impls_of (842,388 samples, 0.31%)</title><rect x="30.7899%" y="117" width="0.3097%" height="15" fill="rgb(247,138,52)"/><text x="31.0399%" y="127.50"></text></g><g><title>implementations_of_trait (305,460 samples, 0.11%)</title><rect x="30.9873%" y="101" width="0.1123%" height="15" fill="rgb(213,79,30)"/><text x="31.2373%" y="111.50"></text></g><g><title>coherent_trait (13,529,078 samples, 4.97%)</title><rect x="26.1261%" y="149" width="4.9740%" height="15" fill="rgb(246,177,23)"/><text x="26.3761%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (13,004,302 samples, 4.78%)</title><rect x="26.3190%" y="133" width="4.7810%" height="15" fill="rgb(230,62,27)"/><text x="26.5690%" y="143.50">specia..</text></g><g><title>coherence_checking (13,646,701 samples, 5.02%)</title><rect x="26.1168%" y="165" width="5.0172%" height="15" fill="rgb(216,154,8)"/><text x="26.3668%" y="175.50">cohere..</text></g><g><title>associated_item (759,218 samples, 0.28%)</title><rect x="59.7023%" y="101" width="0.2791%" height="15" fill="rgb(244,35,45)"/><text x="59.9523%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (433,115 samples, 0.16%)</title><rect x="59.8222%" y="85" width="0.1592%" height="15" fill="rgb(251,115,12)"/><text x="60.0722%" y="95.50"></text></g><g><title>associated_items (979,549 samples, 0.36%)</title><rect x="59.6346%" y="117" width="0.3601%" height="15" fill="rgb(240,54,50)"/><text x="59.8846%" y="127.50"></text></g><g><title>dropck_outlives (3,324,175 samples, 1.22%)</title><rect x="60.0293%" y="117" width="1.2221%" height="15" fill="rgb(233,84,52)"/><text x="60.2793%" y="127.50"></text></g><g><title>normalize_projection_ty (2,708,018 samples, 1.00%)</title><rect x="60.2559%" y="101" width="0.9956%" height="15" fill="rgb(207,117,47)"/><text x="60.5059%" y="111.50"></text></g><g><title>evaluate_obligation (1,565,470 samples, 0.58%)</title><rect x="60.6759%" y="85" width="0.5755%" height="15" fill="rgb(249,43,39)"/><text x="60.9259%" y="95.50"></text></g><g><title>eval_to_const_value_raw (309,723 samples, 0.11%)</title><rect x="61.2515%" y="117" width="0.1139%" height="15" fill="rgb(209,38,44)"/><text x="61.5015%" y="127.50"></text></g><g><title>eval_to_const_value_raw (290,123 samples, 0.11%)</title><rect x="61.2587%" y="101" width="0.1067%" height="15" fill="rgb(236,212,23)"/><text x="61.5087%" y="111.50"></text></g><g><title>eval_to_allocation_raw (280,133 samples, 0.10%)</title><rect x="61.2623%" y="85" width="0.1030%" height="15" fill="rgb(242,79,21)"/><text x="61.5123%" y="95.50"></text></g><g><title>mir_for_ctfe (752,690 samples, 0.28%)</title><rect x="65.1995%" y="53" width="0.2767%" height="15" fill="rgb(211,96,35)"/><text x="65.4495%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (743,640 samples, 0.27%)</title><rect x="65.2028%" y="37" width="0.2734%" height="15" fill="rgb(253,215,40)"/><text x="65.4528%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,506,067 samples, 0.55%)</title><rect x="64.9328%" y="101" width="0.5537%" height="15" fill="rgb(211,81,21)"/><text x="65.1828%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,485,677 samples, 0.55%)</title><rect x="64.9403%" y="85" width="0.5462%" height="15" fill="rgb(208,190,38)"/><text x="65.1903%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,452,336 samples, 0.53%)</title><rect x="64.9526%" y="69" width="0.5340%" height="15" fill="rgb(235,213,38)"/><text x="65.2026%" y="79.50"></text></g><g><title>generics_of (467,805 samples, 0.17%)</title><rect x="65.4866%" y="101" width="0.1720%" height="15" fill="rgb(237,122,38)"/><text x="65.7366%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (375,423 samples, 0.14%)</title><rect x="65.5205%" y="85" width="0.1380%" height="15" fill="rgb(244,218,35)"/><text x="65.7705%" y="95.50"></text></g><g><title>predicates_of (486,116 samples, 0.18%)</title><rect x="65.7823%" y="101" width="0.1787%" height="15" fill="rgb(240,68,47)"/><text x="66.0323%" y="111.50"></text></g><g><title>predicates_defined_on (294,924 samples, 0.11%)</title><rect x="65.8526%" y="85" width="0.1084%" height="15" fill="rgb(210,16,53)"/><text x="66.1026%" y="95.50"></text></g><g><title>specializes (1,034,121 samples, 0.38%)</title><rect x="65.9841%" y="101" width="0.3802%" height="15" fill="rgb(235,124,12)"/><text x="66.2341%" y="111.50"></text></g><g><title>param_env (647,307 samples, 0.24%)</title><rect x="66.1263%" y="85" width="0.2380%" height="15" fill="rgb(224,169,11)"/><text x="66.3763%" y="95.50"></text></g><g><title>def_span (336,673 samples, 0.12%)</title><rect x="66.2405%" y="69" width="0.1238%" height="15" fill="rgb(250,166,2)"/><text x="66.4905%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (308,953 samples, 0.11%)</title><rect x="66.2507%" y="53" width="0.1136%" height="15" fill="rgb(242,216,29)"/><text x="66.5007%" y="63.50"></text></g><g><title>trait_impls_of (651,618 samples, 0.24%)</title><rect x="66.3700%" y="101" width="0.2396%" height="15" fill="rgb(230,116,27)"/><text x="66.6200%" y="111.50"></text></g><g><title>evaluate_obligation (14,290,416 samples, 5.25%)</title><rect x="61.3653%" y="117" width="5.2539%" height="15" fill="rgb(228,99,48)"/><text x="61.6153%" y="127.50">evalua..</text></g><g><title>generics_of (272,952 samples, 0.10%)</title><rect x="66.6831%" y="117" width="0.1004%" height="15" fill="rgb(253,11,6)"/><text x="66.9331%" y="127.50"></text></g><g><title>impl_item_implementor_ids (330,902 samples, 0.12%)</title><rect x="66.7842%" y="117" width="0.1217%" height="15" fill="rgb(247,143,39)"/><text x="67.0342%" y="127.50"></text></g><g><title>associated_items (281,341 samples, 0.10%)</title><rect x="66.8025%" y="101" width="0.1034%" height="15" fill="rgb(236,97,10)"/><text x="67.0525%" y="111.50"></text></g><g><title>method_autoderef_steps (909,257 samples, 0.33%)</title><rect x="67.1369%" y="117" width="0.3343%" height="15" fill="rgb(233,208,19)"/><text x="67.3869%" y="127.50"></text></g><g><title>evaluate_obligation (489,605 samples, 0.18%)</title><rect x="67.2912%" y="101" width="0.1800%" height="15" fill="rgb(216,164,2)"/><text x="67.5412%" y="111.50"></text></g><g><title>predicates_of (646,926 samples, 0.24%)</title><rect x="67.6454%" y="117" width="0.2378%" height="15" fill="rgb(220,129,5)"/><text x="67.8954%" y="127.50"></text></g><g><title>predicates_defined_on (461,444 samples, 0.17%)</title><rect x="67.7136%" y="101" width="0.1696%" height="15" fill="rgb(242,17,10)"/><text x="67.9636%" y="111.50"></text></g><g><title>trait_impls_of (286,404 samples, 0.11%)</title><rect x="67.9240%" y="117" width="0.1053%" height="15" fill="rgb(242,107,0)"/><text x="68.1740%" y="127.50"></text></g><g><title>typeck (2,212,764 samples, 0.81%)</title><rect x="68.0849%" y="117" width="0.8135%" height="15" fill="rgb(251,28,31)"/><text x="68.3349%" y="127.50"></text></g><g><title>item_bodies_checking (102,944,958 samples, 37.85%)</title><rect x="31.1574%" y="165" width="37.8476%" height="15" fill="rgb(233,223,10)"/><text x="31.4074%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (102,941,318 samples, 37.85%)</title><rect x="31.1588%" y="149" width="37.8463%" height="15" fill="rgb(215,21,27)"/><text x="31.4088%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (102,787,906 samples, 37.79%)</title><rect x="31.2152%" y="133" width="37.7899%" height="15" fill="rgb(232,23,21)"/><text x="31.4652%" y="143.50">typeck</text></g><g><title>evaluate_obligation (949,291 samples, 0.35%)</title><rect x="69.8150%" y="133" width="0.3490%" height="15" fill="rgb(244,5,23)"/><text x="70.0650%" y="143.50"></text></g><g><title>item_types_checking (3,576,139 samples, 1.31%)</title><rect x="69.0050%" y="165" width="1.3148%" height="15" fill="rgb(226,81,46)"/><text x="69.2550%" y="175.50"></text></g><g><title>check_mod_item_types (3,567,639 samples, 1.31%)</title><rect x="69.0082%" y="149" width="1.3116%" height="15" fill="rgb(247,70,30)"/><text x="69.2582%" y="159.50"></text></g><g><title>fn_sig (573,425 samples, 0.21%)</title><rect x="70.5056%" y="133" width="0.2108%" height="15" fill="rgb(212,68,19)"/><text x="70.7556%" y="143.50"></text></g><g><title>generics_of (407,485 samples, 0.15%)</title><rect x="70.7164%" y="133" width="0.1498%" height="15" fill="rgb(240,187,13)"/><text x="70.9664%" y="143.50"></text></g><g><title>late_bound_vars_map (633,336 samples, 0.23%)</title><rect x="71.1308%" y="85" width="0.2328%" height="15" fill="rgb(223,113,26)"/><text x="71.3808%" y="95.50"></text></g><g><title>resolve_lifetimes (610,536 samples, 0.22%)</title><rect x="71.1392%" y="69" width="0.2245%" height="15" fill="rgb(206,192,2)"/><text x="71.3892%" y="79.50"></text></g><g><title>explicit_predicates_of (994,899 samples, 0.37%)</title><rect x="71.0095%" y="101" width="0.3658%" height="15" fill="rgb(241,108,4)"/><text x="71.2595%" y="111.50"></text></g><g><title>predicates_of (1,669,724 samples, 0.61%)</title><rect x="70.9023%" y="133" width="0.6139%" height="15" fill="rgb(247,173,49)"/><text x="71.1523%" y="143.50"></text></g><g><title>predicates_defined_on (1,555,153 samples, 0.57%)</title><rect x="70.9445%" y="117" width="0.5718%" height="15" fill="rgb(224,114,35)"/><text x="71.1945%" y="127.50"></text></g><g><title>inferred_outlives_of (383,424 samples, 0.14%)</title><rect x="71.3752%" y="101" width="0.1410%" height="15" fill="rgb(245,159,27)"/><text x="71.6252%" y="111.50"></text></g><g><title>inferred_outlives_crate (349,114 samples, 0.13%)</title><rect x="71.3878%" y="85" width="0.1284%" height="15" fill="rgb(245,172,44)"/><text x="71.6378%" y="95.50"></text></g><g><title>type_collecting (3,495,398 samples, 1.29%)</title><rect x="70.3217%" y="165" width="1.2851%" height="15" fill="rgb(236,23,11)"/><text x="70.5717%" y="175.50"></text></g><g><title>collect_mod_item_types (3,483,148 samples, 1.28%)</title><rect x="70.3262%" y="149" width="1.2806%" height="15" fill="rgb(205,117,38)"/><text x="70.5762%" y="159.50"></text></g><g><title>evaluate_obligation (1,144,852 samples, 0.42%)</title><rect x="73.0309%" y="133" width="0.4209%" height="15" fill="rgb(237,72,25)"/><text x="73.2809%" y="143.50"></text></g><g><title>implied_outlives_bounds (998,409 samples, 0.37%)</title><rect x="73.4698%" y="133" width="0.3671%" height="15" fill="rgb(244,70,9)"/><text x="73.7198%" y="143.50"></text></g><g><title>param_env (580,851 samples, 0.21%)</title><rect x="73.8371%" y="133" width="0.2135%" height="15" fill="rgb(217,125,39)"/><text x="74.0871%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,981,685 samples, 2.57%)</title><rect x="71.7435%" y="149" width="2.5668%" height="15" fill="rgb(235,36,10)"/><text x="71.9935%" y="159.50">ch..</text></g><g><title>region_scope_tree (627,349 samples, 0.23%)</title><rect x="74.0796%" y="133" width="0.2306%" height="15" fill="rgb(251,123,47)"/><text x="74.3296%" y="143.50"></text></g><g><title>evaluate_obligation (1,953,763 samples, 0.72%)</title><rect x="76.1501%" y="133" width="0.7183%" height="15" fill="rgb(221,13,13)"/><text x="76.4001%" y="143.50"></text></g><g><title>param_env (820,757 samples, 0.30%)</title><rect x="77.0092%" y="133" width="0.3018%" height="15" fill="rgb(238,131,9)"/><text x="77.2592%" y="143.50"></text></g><g><title>check_item_well_formed (8,658,129 samples, 3.18%)</title><rect x="74.3103%" y="149" width="3.1832%" height="15" fill="rgb(211,50,8)"/><text x="74.5603%" y="159.50">che..</text></g><g><title>analysis (210,382,695 samples, 77.35%)</title><rect x="0.3814%" y="197" width="77.3470%" height="15" fill="rgb(245,182,24)"/><text x="0.6314%" y="207.50">analysis</text></g><g><title>type_check_crate (140,519,613 samples, 51.66%)</title><rect x="26.0665%" y="181" width="51.6619%" height="15" fill="rgb(242,14,37)"/><text x="26.3165%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,640,784 samples, 6.12%)</title><rect x="71.6105%" y="165" width="6.1180%" height="15" fill="rgb(246,228,12)"/><text x="71.8605%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (639,328 samples, 0.24%)</title><rect x="77.4934%" y="149" width="0.2350%" height="15" fill="rgb(213,55,15)"/><text x="77.7434%" y="159.50"></text></g><g><title>codegen_crate (437,874 samples, 0.16%)</title><rect x="77.7325%" y="197" width="0.1610%" height="15" fill="rgb(209,9,3)"/><text x="77.9825%" y="207.50"></text></g><g><title>AST_validation (293,633 samples, 0.11%)</title><rect x="77.9730%" y="181" width="0.1080%" height="15" fill="rgb(230,59,30)"/><text x="78.2230%" y="191.50"></text></g><g><title>metadata_register_crate (2,753,200 samples, 1.01%)</title><rect x="90.7488%" y="149" width="1.0122%" height="15" fill="rgb(209,121,21)"/><text x="90.9988%" y="159.50"></text></g><g><title>metadata_register_crate (975,310 samples, 0.36%)</title><rect x="91.4025%" y="133" width="0.3586%" height="15" fill="rgb(220,109,13)"/><text x="91.6525%" y="143.50"></text></g><g><title>macro_expand_crate (37,524,945 samples, 13.80%)</title><rect x="78.1533%" y="181" width="13.7960%" height="15" fill="rgb(232,18,1)"/><text x="78.4033%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (37,510,875 samples, 13.79%)</title><rect x="78.1585%" y="165" width="13.7908%" height="15" fill="rgb(215,41,42)"/><text x="78.4085%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (512,105 samples, 0.19%)</title><rect x="91.7611%" y="149" width="0.1883%" height="15" fill="rgb(224,123,36)"/><text x="92.0111%" y="159.50"></text></g><g><title>late_resolve_crate (3,555,280 samples, 1.31%)</title><rect x="92.0872%" y="165" width="1.3071%" height="15" fill="rgb(240,125,3)"/><text x="92.3372%" y="175.50"></text></g><g><title>configure_and_expand (42,354,218 samples, 15.57%)</title><rect x="77.8935%" y="197" width="15.5715%" height="15" fill="rgb(205,98,50)"/><text x="78.1435%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,999,735 samples, 1.47%)</title><rect x="91.9944%" y="181" width="1.4705%" height="15" fill="rgb(205,185,37)"/><text x="92.2444%" y="191.50"></text></g><g><title>drop_ast (394,784 samples, 0.15%)</title><rect x="93.4649%" y="197" width="0.1451%" height="15" fill="rgb(238,207,15)"/><text x="93.7149%" y="207.50"></text></g><g><title>early_lint_checks (688,168 samples, 0.25%)</title><rect x="93.6167%" y="197" width="0.2530%" height="15" fill="rgb(213,199,42)"/><text x="93.8667%" y="207.50"></text></g><g><title>free_global_ctxt (4,673,352 samples, 1.72%)</title><rect x="93.8697%" y="197" width="1.7182%" height="15" fill="rgb(235,201,11)"/><text x="94.1197%" y="207.50"></text></g><g><title>generate_crate_metadata (2,387,916 samples, 0.88%)</title><rect x="95.5879%" y="197" width="0.8779%" height="15" fill="rgb(207,46,11)"/><text x="95.8379%" y="207.50"></text></g><g><title>hir_lowering (6,794,145 samples, 2.50%)</title><rect x="96.4658%" y="197" width="2.4979%" height="15" fill="rgb(241,35,35)"/><text x="96.7158%" y="207.50">hi..</text></g><g><title>parse_crate (879,820 samples, 0.32%)</title><rect x="98.9854%" y="197" width="0.3235%" height="15" fill="rgb(243,32,47)"/><text x="99.2354%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,143,952 samples, 0.42%)</title><rect x="99.3915%" y="197" width="0.4206%" height="15" fill="rgb(247,202,23)"/><text x="99.6415%" y="207.50"></text></g><g><title>all (271,998,466 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (271,998,466 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (415,635 samples, 0.15%)</title><rect x="99.8472%" y="197" width="0.1528%" height="15" fill="rgb(222,74,54)"/><text x="100.0972%" y="207.50"></text></g></svg></svg>