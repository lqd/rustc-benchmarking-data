<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (46,740 samples, 0.11%)</title><rect x="6.7390%" y="181" width="0.1063%" height="15" fill="rgb(227,0,7)"/><text x="6.9890%" y="191.50"></text></g><g><title>param_env (51,330 samples, 0.12%)</title><rect x="6.8452%" y="181" width="0.1167%" height="15" fill="rgb(217,0,24)"/><text x="7.0952%" y="191.50"></text></g><g><title>needs_drop_raw (331,984 samples, 0.75%)</title><rect x="8.1530%" y="149" width="0.7547%" height="15" fill="rgb(221,193,54)"/><text x="8.4030%" y="159.50"></text></g><g><title>is_copy_raw (326,674 samples, 0.74%)</title><rect x="8.1651%" y="133" width="0.7426%" height="15" fill="rgb(248,212,6)"/><text x="8.4151%" y="143.50"></text></g><g><title>evaluate_obligation (319,524 samples, 0.73%)</title><rect x="8.1813%" y="117" width="0.7263%" height="15" fill="rgb(208,68,35)"/><text x="8.4313%" y="127.50"></text></g><g><title>trait_impls_of (290,584 samples, 0.66%)</title><rect x="8.2471%" y="101" width="0.6606%" height="15" fill="rgb(232,128,0)"/><text x="8.4971%" y="111.50"></text></g><g><title>implementations_of_trait (60,710 samples, 0.14%)</title><rect x="8.7697%" y="85" width="0.1380%" height="15" fill="rgb(207,160,47)"/><text x="9.0197%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (51,570 samples, 0.12%)</title><rect x="8.7905%" y="69" width="0.1172%" height="15" fill="rgb(228,23,34)"/><text x="9.0405%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (118,172 samples, 0.27%)</title><rect x="9.0943%" y="133" width="0.2686%" height="15" fill="rgb(218,30,26)"/><text x="9.3443%" y="143.50"></text></g><g><title>impl_parent (56,350 samples, 0.13%)</title><rect x="9.5453%" y="117" width="0.1281%" height="15" fill="rgb(220,122,19)"/><text x="9.7953%" y="127.50"></text></g><g><title>specialization_graph_of (274,053 samples, 0.62%)</title><rect x="9.3814%" y="133" width="0.6230%" height="15" fill="rgb(250,228,42)"/><text x="9.6314%" y="143.50"></text></g><g><title>impl_trait_ref (145,571 samples, 0.33%)</title><rect x="9.6734%" y="117" width="0.3309%" height="15" fill="rgb(240,193,28)"/><text x="9.9234%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (129,071 samples, 0.29%)</title><rect x="9.7109%" y="101" width="0.2934%" height="15" fill="rgb(216,20,37)"/><text x="9.9609%" y="111.50"></text></g><g><title>resolve_instance (493,406 samples, 1.12%)</title><rect x="8.9077%" y="149" width="1.1216%" height="15" fill="rgb(206,188,39)"/><text x="9.1577%" y="159.50"></text></g><g><title>thir_body (110,152 samples, 0.25%)</title><rect x="10.0432%" y="149" width="0.2504%" height="15" fill="rgb(217,207,13)"/><text x="10.2932%" y="159.50"></text></g><g><title>mir_const (1,776,671 samples, 4.04%)</title><rect x="6.3502%" y="197" width="4.0388%" height="15" fill="rgb(231,73,38)"/><text x="6.6002%" y="207.50">mir_..</text></g><g><title>unsafety_check_result (1,507,567 samples, 3.43%)</title><rect x="6.9619%" y="181" width="3.4270%" height="15" fill="rgb(225,20,46)"/><text x="7.2119%" y="191.50">uns..</text></g><g><title>mir_built (1,356,186 samples, 3.08%)</title><rect x="7.3060%" y="165" width="3.0829%" height="15" fill="rgb(210,31,41)"/><text x="7.5560%" y="175.50">mir..</text></g><g><title>mir_promoted (1,985,694 samples, 4.51%)</title><rect x="5.9037%" y="213" width="4.5139%" height="15" fill="rgb(221,200,47)"/><text x="6.1537%" y="223.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (210,272 samples, 0.48%)</title><rect x="10.4176%" y="213" width="0.4780%" height="15" fill="rgb(226,26,5)"/><text x="10.6676%" y="223.50"></text></g><g><title>normalize_projection_ty (97,531 samples, 0.22%)</title><rect x="10.6739%" y="197" width="0.2217%" height="15" fill="rgb(249,33,26)"/><text x="10.9239%" y="207.50"></text></g><g><title>MIR_borrow_checking (4,431,430 samples, 10.07%)</title><rect x="1.6582%" y="245" width="10.0736%" height="15" fill="rgb(235,183,28)"/><text x="1.9082%" y="255.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (4,407,430 samples, 10.02%)</title><rect x="1.7128%" y="229" width="10.0190%" height="15" fill="rgb(221,5,38)"/><text x="1.9628%" y="239.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (338,983 samples, 0.77%)</title><rect x="10.9612%" y="213" width="0.7706%" height="15" fill="rgb(247,18,42)"/><text x="11.2112%" y="223.50"></text></g><g><title>hir_module_items (136,921 samples, 0.31%)</title><rect x="11.7486%" y="245" width="0.3113%" height="15" fill="rgb(241,131,45)"/><text x="11.9986%" y="255.50"></text></g><g><title>get_lang_items (100,561 samples, 0.23%)</title><rect x="12.4400%" y="197" width="0.2286%" height="15" fill="rgb(249,31,29)"/><text x="12.6900%" y="207.50"></text></g><g><title>should_inherit_track_caller (84,111 samples, 0.19%)</title><rect x="12.6686%" y="197" width="0.1912%" height="15" fill="rgb(225,111,53)"/><text x="12.9186%" y="207.50"></text></g><g><title>codegen_fn_attrs (267,914 samples, 0.61%)</title><rect x="12.3068%" y="213" width="0.6090%" height="15" fill="rgb(238,160,17)"/><text x="12.5568%" y="223.50"></text></g><g><title>check_mod_attrs (354,134 samples, 0.81%)</title><rect x="12.1127%" y="229" width="0.8050%" height="15" fill="rgb(214,148,48)"/><text x="12.3627%" y="239.50"></text></g><g><title>lookup_stability (80,211 samples, 0.18%)</title><rect x="13.3951%" y="213" width="0.1823%" height="15" fill="rgb(232,36,49)"/><text x="13.6451%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (236,873 samples, 0.54%)</title><rect x="13.0704%" y="229" width="0.5385%" height="15" fill="rgb(209,103,24)"/><text x="13.3204%" y="239.50"></text></g><g><title>misc_checking_1 (716,098 samples, 1.63%)</title><rect x="12.0614%" y="245" width="1.6278%" height="15" fill="rgb(229,88,8)"/><text x="12.3114%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (101,591 samples, 0.23%)</title><rect x="13.6945%" y="229" width="0.2309%" height="15" fill="rgb(213,181,19)"/><text x="13.9445%" y="239.50"></text></g><g><title>check_mod_liveness (79,511 samples, 0.18%)</title><rect x="13.7446%" y="213" width="0.1807%" height="15" fill="rgb(254,191,54)"/><text x="13.9946%" y="223.50"></text></g><g><title>misc_checking_2 (233,672 samples, 0.53%)</title><rect x="13.6892%" y="245" width="0.5312%" height="15" fill="rgb(241,83,37)"/><text x="13.9392%" y="255.50"></text></g><g><title>match_checking (129,781 samples, 0.30%)</title><rect x="13.9254%" y="229" width="0.2950%" height="15" fill="rgb(233,36,39)"/><text x="14.1754%" y="239.50"></text></g><g><title>check_match (121,331 samples, 0.28%)</title><rect x="13.9446%" y="213" width="0.2758%" height="15" fill="rgb(226,3,54)"/><text x="14.1946%" y="223.50"></text></g><g><title>check_private_in_public (111,402 samples, 0.25%)</title><rect x="14.2465%" y="229" width="0.2532%" height="15" fill="rgb(245,192,40)"/><text x="14.4965%" y="239.50"></text></g><g><title>death_checking (185,332 samples, 0.42%)</title><rect x="14.4998%" y="229" width="0.4213%" height="15" fill="rgb(238,167,29)"/><text x="14.7498%" y="239.50"></text></g><g><title>lint_levels (53,301 samples, 0.12%)</title><rect x="14.7999%" y="213" width="0.1212%" height="15" fill="rgb(232,182,51)"/><text x="15.0499%" y="223.50"></text></g><g><title>crate_lints (187,422 samples, 0.43%)</title><rect x="14.9267%" y="213" width="0.4261%" height="15" fill="rgb(231,60,39)"/><text x="15.1767%" y="223.50"></text></g><g><title>param_env (82,371 samples, 0.19%)</title><rect x="15.1655%" y="197" width="0.1872%" height="15" fill="rgb(208,69,12)"/><text x="15.4155%" y="207.50"></text></g><g><title>lint_checking (256,833 samples, 0.58%)</title><rect x="14.9211%" y="229" width="0.5838%" height="15" fill="rgb(235,93,37)"/><text x="15.1711%" y="239.50"></text></g><g><title>module_lints (66,921 samples, 0.15%)</title><rect x="15.3528%" y="213" width="0.1521%" height="15" fill="rgb(213,116,39)"/><text x="15.6028%" y="223.50"></text></g><g><title>lint_mod (63,551 samples, 0.14%)</title><rect x="15.3604%" y="197" width="0.1445%" height="15" fill="rgb(222,207,29)"/><text x="15.6104%" y="207.50"></text></g><g><title>privacy_access_levels (121,031 samples, 0.28%)</title><rect x="15.5049%" y="229" width="0.2751%" height="15" fill="rgb(206,96,30)"/><text x="15.7549%" y="239.50"></text></g><g><title>privacy_checking_modules (300,943 samples, 0.68%)</title><rect x="15.7800%" y="229" width="0.6841%" height="15" fill="rgb(218,138,4)"/><text x="16.0300%" y="239.50"></text></g><g><title>check_mod_privacy (298,763 samples, 0.68%)</title><rect x="15.7850%" y="213" width="0.6792%" height="15" fill="rgb(250,191,14)"/><text x="16.0350%" y="223.50"></text></g><g><title>misc_checking_3 (1,008,701 samples, 2.29%)</title><rect x="14.2204%" y="245" width="2.2930%" height="15" fill="rgb(239,60,40)"/><text x="14.4704%" y="255.50">m..</text></g><g><title>coherent_trait (453,176 samples, 1.03%)</title><rect x="16.6258%" y="213" width="1.0302%" height="15" fill="rgb(206,27,48)"/><text x="16.8758%" y="223.50"></text></g><g><title>specialization_graph_of (436,776 samples, 0.99%)</title><rect x="16.6631%" y="197" width="0.9929%" height="15" fill="rgb(225,35,8)"/><text x="16.9131%" y="207.50"></text></g><g><title>trait_impls_of (54,381 samples, 0.12%)</title><rect x="17.5324%" y="181" width="0.1236%" height="15" fill="rgb(250,213,24)"/><text x="17.7824%" y="191.50"></text></g><g><title>coherence_checking (515,446 samples, 1.17%)</title><rect x="16.5903%" y="229" width="1.1717%" height="15" fill="rgb(247,123,22)"/><text x="16.8403%" y="239.50"></text></g><g><title>impl_parent (191,604 samples, 0.44%)</title><rect x="22.9973%" y="85" width="0.4356%" height="15" fill="rgb(231,138,38)"/><text x="23.2473%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (133,752 samples, 0.30%)</title><rect x="23.1288%" y="69" width="0.3040%" height="15" fill="rgb(231,145,46)"/><text x="23.3788%" y="79.50"></text></g><g><title>impl_trait_ref (615,615 samples, 1.40%)</title><rect x="23.4329%" y="85" width="1.3994%" height="15" fill="rgb(251,118,11)"/><text x="23.6829%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (561,125 samples, 1.28%)</title><rect x="23.5567%" y="69" width="1.2756%" height="15" fill="rgb(217,147,25)"/><text x="23.8067%" y="79.50"></text></g><g><title>coherent_trait (1,142,292 samples, 2.60%)</title><rect x="22.4079%" y="117" width="2.5967%" height="15" fill="rgb(247,81,37)"/><text x="22.6579%" y="127.50">co..</text></g><g><title>specialization_graph_of (1,139,272 samples, 2.59%)</title><rect x="22.4148%" y="101" width="2.5898%" height="15" fill="rgb(209,12,38)"/><text x="22.6648%" y="111.50">sp..</text></g><g><title>trait_impls_of (75,781 samples, 0.17%)</title><rect x="24.8323%" y="85" width="0.1723%" height="15" fill="rgb(227,1,9)"/><text x="25.0823%" y="95.50"></text></g><g><title>adt_destructor (1,160,242 samples, 2.64%)</title><rect x="22.3847%" y="149" width="2.6375%" height="15" fill="rgb(248,47,43)"/><text x="22.6347%" y="159.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (1,157,522 samples, 2.63%)</title><rect x="22.3908%" y="133" width="2.6313%" height="15" fill="rgb(221,10,30)"/><text x="22.6408%" y="143.50">me..</text></g><g><title>adt_def (75,771 samples, 0.17%)</title><rect x="25.2306%" y="85" width="0.1722%" height="15" fill="rgb(210,229,1)"/><text x="25.4806%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (75,241 samples, 0.17%)</title><rect x="25.2318%" y="69" width="0.1710%" height="15" fill="rgb(222,148,37)"/><text x="25.4818%" y="79.50"></text></g><g><title>item_attrs (70,391 samples, 0.16%)</title><rect x="25.2428%" y="53" width="0.1600%" height="15" fill="rgb(234,67,33)"/><text x="25.4928%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (69,771 samples, 0.16%)</title><rect x="25.2442%" y="37" width="0.1586%" height="15" fill="rgb(247,98,35)"/><text x="25.4942%" y="47.50"></text></g><g><title>adt_dtorck_constraint (84,341 samples, 0.19%)</title><rect x="25.2202%" y="101" width="0.1917%" height="15" fill="rgb(247,138,52)"/><text x="25.4702%" y="111.50"></text></g><g><title>adt_dtorck_constraint (152,091 samples, 0.35%)</title><rect x="25.1170%" y="117" width="0.3457%" height="15" fill="rgb(213,79,30)"/><text x="25.3670%" y="127.50"></text></g><g><title>adt_dtorck_constraint (195,762 samples, 0.45%)</title><rect x="25.0423%" y="133" width="0.4450%" height="15" fill="rgb(246,177,23)"/><text x="25.2923%" y="143.50"></text></g><g><title>adt_dtorck_constraint (206,182 samples, 0.47%)</title><rect x="25.0221%" y="149" width="0.4687%" height="15" fill="rgb(230,62,27)"/><text x="25.2721%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,412,764 samples, 3.21%)</title><rect x="22.3159%" y="165" width="3.2115%" height="15" fill="rgb(216,154,8)"/><text x="22.5659%" y="175.50">adt..</text></g><g><title>dropck_outlives (1,502,686 samples, 3.42%)</title><rect x="22.1674%" y="181" width="3.4159%" height="15" fill="rgb(244,35,45)"/><text x="22.4174%" y="191.50">dro..</text></g><g><title>evaluate_obligation (213,553 samples, 0.49%)</title><rect x="25.5833%" y="181" width="0.4855%" height="15" fill="rgb(251,115,12)"/><text x="25.8333%" y="191.50"></text></g><g><title>trait_impls_of (45,900 samples, 0.10%)</title><rect x="25.9644%" y="165" width="0.1043%" height="15" fill="rgb(240,54,50)"/><text x="26.2144%" y="175.50"></text></g><g><title>item_bodies_checking (3,823,522 samples, 8.69%)</title><rect x="17.8572%" y="229" width="8.6917%" height="15" fill="rgb(233,84,52)"/><text x="18.1072%" y="239.50">item_bodies_..</text></g><g><title>typeck_item_bodies (3,820,282 samples, 8.68%)</title><rect x="17.8645%" y="213" width="8.6843%" height="15" fill="rgb(207,117,47)"/><text x="18.1145%" y="223.50">typeck_item_..</text></g><g><title>typeck (3,802,122 samples, 8.64%)</title><rect x="17.9058%" y="197" width="8.6431%" height="15" fill="rgb(249,43,39)"/><text x="18.1558%" y="207.50">typeck</text></g><g><title>item_types_checking (3,263,776 samples, 7.42%)</title><rect x="26.5489%" y="229" width="7.4193%" height="15" fill="rgb(209,38,44)"/><text x="26.7989%" y="239.50">item_types..</text></g><g><title>check_mod_item_types (3,259,566 samples, 7.41%)</title><rect x="26.5584%" y="213" width="7.4097%" height="15" fill="rgb(236,212,23)"/><text x="26.8084%" y="223.50">check_mod_..</text></g><g><title>fn_sig (145,860 samples, 0.33%)</title><rect x="34.4476%" y="197" width="0.3316%" height="15" fill="rgb(242,79,21)"/><text x="34.6976%" y="207.50"></text></g><g><title>generics_of (135,171 samples, 0.31%)</title><rect x="34.7792%" y="197" width="0.3073%" height="15" fill="rgb(211,96,35)"/><text x="35.0292%" y="207.50"></text></g><g><title>associated_items (48,560 samples, 0.11%)</title><rect x="35.6916%" y="133" width="0.1104%" height="15" fill="rgb(253,215,40)"/><text x="35.9416%" y="143.50"></text></g><g><title>late_bound_vars_map (118,931 samples, 0.27%)</title><rect x="35.5433%" y="165" width="0.2704%" height="15" fill="rgb(211,81,21)"/><text x="35.7933%" y="175.50"></text></g><g><title>resolve_lifetimes (111,501 samples, 0.25%)</title><rect x="35.5602%" y="149" width="0.2535%" height="15" fill="rgb(208,190,38)"/><text x="35.8102%" y="159.50"></text></g><g><title>explicit_item_bounds (286,533 samples, 0.65%)</title><rect x="35.2319%" y="181" width="0.6514%" height="15" fill="rgb(235,213,38)"/><text x="35.4819%" y="191.50"></text></g><g><title>item_bounds (341,055 samples, 0.78%)</title><rect x="35.1291%" y="197" width="0.7753%" height="15" fill="rgb(237,122,38)"/><text x="35.3791%" y="207.50"></text></g><g><title>late_bound_vars_map (172,631 samples, 0.39%)</title><rect x="36.8987%" y="149" width="0.3924%" height="15" fill="rgb(244,218,35)"/><text x="37.1487%" y="159.50"></text></g><g><title>resolve_lifetimes (161,031 samples, 0.37%)</title><rect x="36.9250%" y="133" width="0.3661%" height="15" fill="rgb(240,68,47)"/><text x="37.1750%" y="143.50"></text></g><g><title>explicit_predicates_of (579,896 samples, 1.32%)</title><rect x="36.1844%" y="165" width="1.3182%" height="15" fill="rgb(210,16,53)"/><text x="36.4344%" y="175.50"></text></g><g><title>predicates_of (720,658 samples, 1.64%)</title><rect x="35.9044%" y="197" width="1.6382%" height="15" fill="rgb(235,124,12)"/><text x="36.1544%" y="207.50"></text></g><g><title>predicates_defined_on (667,598 samples, 1.52%)</title><rect x="36.0250%" y="181" width="1.5176%" height="15" fill="rgb(224,169,11)"/><text x="36.2750%" y="191.50"></text></g><g><title>super_predicates_of (45,830 samples, 0.10%)</title><rect x="37.5426%" y="197" width="0.1042%" height="15" fill="rgb(250,166,2)"/><text x="37.7926%" y="207.50"></text></g><g><title>type_collecting (2,021,562 samples, 4.60%)</title><rect x="33.9718%" y="229" width="4.5955%" height="15" fill="rgb(242,216,29)"/><text x="34.2218%" y="239.50">type_..</text></g><g><title>collect_mod_item_types (2,011,662 samples, 4.57%)</title><rect x="33.9943%" y="213" width="4.5729%" height="15" fill="rgb(230,116,27)"/><text x="34.2443%" y="223.50">colle..</text></g><g><title>type_of (395,634 samples, 0.90%)</title><rect x="37.6679%" y="197" width="0.8994%" height="15" fill="rgb(228,99,48)"/><text x="37.9179%" y="207.50"></text></g><g><title>type_param_predicates (178,672 samples, 0.41%)</title><rect x="38.1611%" y="181" width="0.4062%" height="15" fill="rgb(253,11,6)"/><text x="38.4111%" y="191.50"></text></g><g><title>type_param_predicates (136,971 samples, 0.31%)</title><rect x="38.2559%" y="165" width="0.3114%" height="15" fill="rgb(247,143,39)"/><text x="38.5059%" y="175.50"></text></g><g><title>evaluate_obligation (244,521 samples, 0.56%)</title><rect x="41.5725%" y="197" width="0.5558%" height="15" fill="rgb(236,97,10)"/><text x="41.8225%" y="207.50"></text></g><g><title>implied_outlives_bounds (116,482 samples, 0.26%)</title><rect x="42.1284%" y="197" width="0.2648%" height="15" fill="rgb(233,208,19)"/><text x="42.3784%" y="207.50"></text></g><g><title>param_env (340,003 samples, 0.77%)</title><rect x="42.3932%" y="197" width="0.7729%" height="15" fill="rgb(216,164,2)"/><text x="42.6432%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,976,292 samples, 4.49%)</title><rect x="38.8240%" y="213" width="4.4925%" height="15" fill="rgb(220,129,5)"/><text x="39.0740%" y="223.50">check..</text></g><g><title>region_scope_tree (66,210 samples, 0.15%)</title><rect x="43.1661%" y="197" width="0.1505%" height="15" fill="rgb(242,17,10)"/><text x="43.4161%" y="207.50"></text></g><g><title>evaluate_obligation (143,942 samples, 0.33%)</title><rect x="45.2945%" y="197" width="0.3272%" height="15" fill="rgb(242,107,0)"/><text x="45.5445%" y="207.50"></text></g><g><title>param_env (150,022 samples, 0.34%)</title><rect x="45.7307%" y="197" width="0.3410%" height="15" fill="rgb(251,28,31)"/><text x="45.9807%" y="207.50"></text></g><g><title>predicates_of (62,450 samples, 0.14%)</title><rect x="46.0717%" y="197" width="0.1420%" height="15" fill="rgb(233,223,10)"/><text x="46.3217%" y="207.50"></text></g><g><title>predicates_defined_on (48,310 samples, 0.11%)</title><rect x="46.1038%" y="181" width="0.1098%" height="15" fill="rgb(215,21,27)"/><text x="46.3538%" y="191.50"></text></g><g><title>check_item_well_formed (1,344,245 samples, 3.06%)</title><rect x="43.3166%" y="213" width="3.0558%" height="15" fill="rgb(232,23,21)"/><text x="43.5666%" y="223.50">che..</text></g><g><title>trait_impls_of (60,200 samples, 0.14%)</title><rect x="46.2355%" y="197" width="0.1368%" height="15" fill="rgb(244,5,23)"/><text x="46.4855%" y="207.50"></text></g><g><title>adt_def (72,111 samples, 0.16%)</title><rect x="48.4745%" y="133" width="0.1639%" height="15" fill="rgb(226,81,46)"/><text x="48.7245%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (71,241 samples, 0.16%)</title><rect x="48.4765%" y="117" width="0.1619%" height="15" fill="rgb(247,70,30)"/><text x="48.7265%" y="127.50"></text></g><g><title>adt_sized_constraint (85,621 samples, 0.19%)</title><rect x="48.4612%" y="149" width="0.1946%" height="15" fill="rgb(212,68,19)"/><text x="48.7112%" y="159.50"></text></g><g><title>adt_sized_constraint (132,232 samples, 0.30%)</title><rect x="48.4233%" y="165" width="0.3006%" height="15" fill="rgb(240,187,13)"/><text x="48.6733%" y="175.50"></text></g><g><title>adt_sized_constraint (188,062 samples, 0.43%)</title><rect x="48.3268%" y="181" width="0.4275%" height="15" fill="rgb(223,113,26)"/><text x="48.5768%" y="191.50"></text></g><g><title>evaluate_obligation (421,425 samples, 0.96%)</title><rect x="47.9396%" y="197" width="0.9580%" height="15" fill="rgb(206,192,2)"/><text x="48.1896%" y="207.50"></text></g><g><title>implied_outlives_bounds (104,911 samples, 0.24%)</title><rect x="48.8976%" y="197" width="0.2385%" height="15" fill="rgb(241,108,4)"/><text x="49.1476%" y="207.50"></text></g><g><title>param_env (102,600 samples, 0.23%)</title><rect x="49.1360%" y="197" width="0.2332%" height="15" fill="rgb(247,173,49)"/><text x="49.3860%" y="207.50"></text></g><g><title>explicit_predicates_of (57,170 samples, 0.13%)</title><rect x="49.4368%" y="165" width="0.1300%" height="15" fill="rgb(224,114,35)"/><text x="49.6868%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (51,780 samples, 0.12%)</title><rect x="49.4491%" y="149" width="0.1177%" height="15" fill="rgb(245,159,27)"/><text x="49.6991%" y="159.50"></text></g><g><title>predicates_of (111,111 samples, 0.25%)</title><rect x="49.3693%" y="197" width="0.2526%" height="15" fill="rgb(245,172,44)"/><text x="49.6193%" y="207.50"></text></g><g><title>predicates_defined_on (91,010 samples, 0.21%)</title><rect x="49.4150%" y="181" width="0.2069%" height="15" fill="rgb(236,23,11)"/><text x="49.6650%" y="191.50"></text></g><g><title>analysis (21,306,227 samples, 48.43%)</title><rect x="1.3038%" y="261" width="48.4337%" height="15" fill="rgb(205,117,38)"/><text x="1.5538%" y="271.50">analysis</text></g><g><title>type_check_crate (14,615,463 samples, 33.22%)</title><rect x="16.5134%" y="245" width="33.2241%" height="15" fill="rgb(237,72,25)"/><text x="16.7634%" y="255.50">type_check_crate</text></g><g><title>wf_checking (4,912,405 samples, 11.17%)</title><rect x="38.5706%" y="229" width="11.1670%" height="15" fill="rgb(244,70,9)"/><text x="38.8206%" y="239.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,480,376 samples, 3.37%)</title><rect x="46.3723%" y="213" width="3.3652%" height="15" fill="rgb(217,125,39)"/><text x="46.6223%" y="223.50">che..</text></g><g><title>codegen_crate (600,177 samples, 1.36%)</title><rect x="49.7595%" y="261" width="1.3643%" height="15" fill="rgb(235,36,10)"/><text x="50.0095%" y="271.50"></text></g><g><title>AST_validation (92,612 samples, 0.21%)</title><rect x="51.5574%" y="245" width="0.2105%" height="15" fill="rgb(251,123,47)"/><text x="51.8074%" y="255.50"></text></g><g><title>crate_injection (67,341 samples, 0.15%)</title><rect x="51.8340%" y="245" width="0.1531%" height="15" fill="rgb(221,13,13)"/><text x="52.0840%" y="255.50"></text></g><g><title>metadata_load_macro (56,090 samples, 0.13%)</title><rect x="73.1261%" y="213" width="0.1275%" height="15" fill="rgb(238,131,9)"/><text x="73.3761%" y="223.50"></text></g><g><title>macro_expand_crate (11,750,750 samples, 26.71%)</title><rect x="51.9871%" y="245" width="26.7120%" height="15" fill="rgb(211,50,8)"/><text x="52.2371%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (11,730,870 samples, 26.67%)</title><rect x="52.0323%" y="229" width="26.6668%" height="15" fill="rgb(245,182,24)"/><text x="52.2823%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,395,527 samples, 5.45%)</title><rect x="73.2536%" y="213" width="5.4456%" height="15" fill="rgb(242,14,37)"/><text x="73.5036%" y="223.50">metadat..</text></g><g><title>metadata_register_crate (862,391 samples, 1.96%)</title><rect x="76.7387%" y="197" width="1.9604%" height="15" fill="rgb(246,228,12)"/><text x="76.9887%" y="207.50">m..</text></g><g><title>metadata_register_crate (67,901 samples, 0.15%)</title><rect x="78.5448%" y="181" width="0.1544%" height="15" fill="rgb(213,55,15)"/><text x="78.7948%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (112,262 samples, 0.26%)</title><rect x="78.7079%" y="245" width="0.2552%" height="15" fill="rgb(209,9,3)"/><text x="78.9579%" y="255.50"></text></g><g><title>finalize_macro_resolutions (195,712 samples, 0.44%)</title><rect x="79.0430%" y="229" width="0.4449%" height="15" fill="rgb(230,59,30)"/><text x="79.2930%" y="239.50"></text></g><g><title>late_resolve_crate (834,980 samples, 1.90%)</title><rect x="79.4879%" y="229" width="1.8981%" height="15" fill="rgb(209,121,21)"/><text x="79.7379%" y="239.50">l..</text></g><g><title>configure_and_expand (13,364,859 samples, 30.38%)</title><rect x="51.1238%" y="261" width="30.3812%" height="15" fill="rgb(220,109,13)"/><text x="51.3738%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,118,222 samples, 2.54%)</title><rect x="78.9631%" y="245" width="2.5420%" height="15" fill="rgb(232,18,1)"/><text x="79.2131%" y="255.50">re..</text></g><g><title>drop_ast (53,300 samples, 0.12%)</title><rect x="81.5051%" y="261" width="0.1212%" height="15" fill="rgb(215,41,42)"/><text x="81.7551%" y="271.50"></text></g><g><title>early_lint_checks (141,152 samples, 0.32%)</title><rect x="81.6903%" y="261" width="0.3209%" height="15" fill="rgb(224,123,36)"/><text x="81.9403%" y="271.50"></text></g><g><title>free_global_ctxt (3,054,983 samples, 6.94%)</title><rect x="82.0112%" y="261" width="6.9446%" height="15" fill="rgb(240,125,3)"/><text x="82.2612%" y="271.50">free_glob..</text></g><g><title>crate_hash (126,232 samples, 0.29%)</title><rect x="90.3104%" y="245" width="0.2870%" height="15" fill="rgb(205,98,50)"/><text x="90.5604%" y="255.50"></text></g><g><title>variances_of (51,880 samples, 0.12%)</title><rect x="90.9469%" y="245" width="0.1179%" height="15" fill="rgb(205,185,37)"/><text x="91.1969%" y="255.50"></text></g><g><title>crate_variances (45,770 samples, 0.10%)</title><rect x="90.9608%" y="229" width="0.1040%" height="15" fill="rgb(238,207,15)"/><text x="91.2108%" y="239.50"></text></g><g><title>generate_crate_metadata (928,080 samples, 2.11%)</title><rect x="88.9558%" y="261" width="2.1097%" height="15" fill="rgb(213,199,42)"/><text x="89.2058%" y="271.50">g..</text></g><g><title>hir_lowering (1,049,891 samples, 2.39%)</title><rect x="91.0656%" y="261" width="2.3866%" height="15" fill="rgb(235,201,11)"/><text x="91.3156%" y="271.50">hi..</text></g><g><title>link (77,661 samples, 0.18%)</title><rect x="93.4522%" y="261" width="0.1765%" height="15" fill="rgb(207,46,11)"/><text x="93.7022%" y="271.50"></text></g><g><title>parse_crate (1,255,054 samples, 2.85%)</title><rect x="93.6287%" y="261" width="2.8530%" height="15" fill="rgb(241,35,35)"/><text x="93.8787%" y="271.50">pa..</text></g><g><title>prepare_outputs (251,072 samples, 0.57%)</title><rect x="96.4967%" y="261" width="0.5707%" height="15" fill="rgb(243,32,47)"/><text x="96.7467%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (622,467 samples, 1.42%)</title><rect x="97.0674%" y="261" width="1.4150%" height="15" fill="rgb(247,202,23)"/><text x="97.3174%" y="271.50"></text></g><g><title>setup_global_ctxt (104,271 samples, 0.24%)</title><rect x="98.5178%" y="261" width="0.2370%" height="15" fill="rgb(219,102,11)"/><text x="98.7678%" y="271.50"></text></g><g><title>all (43,990,499 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (43,990,499 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (547,776 samples, 1.25%)</title><rect x="98.7548%" y="261" width="1.2452%" height="15" fill="rgb(216,99,12)"/><text x="99.0048%" y="271.50"></text></g></svg></svg>