<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (5,982,967 samples, 0.26%)</title><rect x="16.9178%" y="133" width="0.2622%" height="15" fill="rgb(227,0,7)"/><text x="17.1678%" y="143.50"></text></g><g><title>param_env (3,299,384 samples, 0.14%)</title><rect x="18.8429%" y="101" width="0.1446%" height="15" fill="rgb(217,0,24)"/><text x="19.0929%" y="111.50"></text></g><g><title>item_attrs (2,591,032 samples, 0.11%)</title><rect x="19.5470%" y="69" width="0.1135%" height="15" fill="rgb(221,193,54)"/><text x="19.7970%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,490,322 samples, 0.11%)</title><rect x="19.5514%" y="53" width="0.1091%" height="15" fill="rgb(248,212,6)"/><text x="19.8014%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,649,984 samples, 0.16%)</title><rect x="19.5079%" y="85" width="0.1599%" height="15" fill="rgb(208,68,35)"/><text x="19.7579%" y="95.50"></text></g><g><title>adt_drop_tys (2,761,305 samples, 0.12%)</title><rect x="22.8915%" y="53" width="0.1210%" height="15" fill="rgb(232,128,0)"/><text x="23.1415%" y="63.50"></text></g><g><title>is_copy_raw (16,146,496 samples, 0.71%)</title><rect x="23.0139%" y="53" width="0.7076%" height="15" fill="rgb(207,160,47)"/><text x="23.2639%" y="63.50"></text></g><g><title>evaluate_obligation (12,403,740 samples, 0.54%)</title><rect x="23.1779%" y="37" width="0.5435%" height="15" fill="rgb(228,23,34)"/><text x="23.4279%" y="47.50"></text></g><g><title>needs_drop_raw (22,489,905 samples, 0.99%)</title><rect x="22.7532%" y="69" width="0.9855%" height="15" fill="rgb(218,30,26)"/><text x="23.0032%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (11,733,613 samples, 0.51%)</title><rect x="23.9071%" y="53" width="0.5142%" height="15" fill="rgb(220,122,19)"/><text x="24.1571%" y="63.50"></text></g><g><title>resolve_instance (19,673,331 samples, 0.86%)</title><rect x="23.7387%" y="69" width="0.8621%" height="15" fill="rgb(250,228,42)"/><text x="23.9887%" y="79.50"></text></g><g><title>thir_body (28,848,851 samples, 1.26%)</title><rect x="24.6328%" y="69" width="1.2642%" height="15" fill="rgb(240,193,28)"/><text x="24.8828%" y="79.50"></text></g><g><title>mir_const (178,996,947 samples, 7.84%)</title><rect x="18.0975%" y="117" width="7.8438%" height="15" fill="rgb(216,20,37)"/><text x="18.3475%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (158,687,233 samples, 6.95%)</title><rect x="18.9875%" y="101" width="6.9538%" height="15" fill="rgb(206,188,39)"/><text x="19.2375%" y="111.50">unsafety_..</text></g><g><title>mir_built (143,157,906 samples, 6.27%)</title><rect x="19.6680%" y="85" width="6.2733%" height="15" fill="rgb(217,207,13)"/><text x="19.9180%" y="95.50">mir_built</text></g><g><title>mir_const (2,550,303 samples, 0.11%)</title><rect x="26.0756%" y="101" width="0.1118%" height="15" fill="rgb(231,73,38)"/><text x="26.3256%" y="111.50"></text></g><g><title>mir_const_qualif (5,887,027 samples, 0.26%)</title><rect x="25.9413%" y="117" width="0.2580%" height="15" fill="rgb(225,20,46)"/><text x="26.1913%" y="127.50"></text></g><g><title>mir_promoted (203,676,375 samples, 8.93%)</title><rect x="17.2743%" y="133" width="8.9253%" height="15" fill="rgb(210,31,41)"/><text x="17.5243%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (15,610,753 samples, 0.68%)</title><rect x="26.1999%" y="133" width="0.6841%" height="15" fill="rgb(221,200,47)"/><text x="26.4499%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (14,278,864 samples, 0.63%)</title><rect x="26.8840%" y="133" width="0.6257%" height="15" fill="rgb(226,26,5)"/><text x="27.1340%" y="143.50"></text></g><g><title>normalize_projection_ty (7,728,407 samples, 0.34%)</title><rect x="27.1711%" y="117" width="0.3387%" height="15" fill="rgb(249,33,26)"/><text x="27.4211%" y="127.50"></text></g><g><title>type_op_normalize_predicate (17,045,457 samples, 0.75%)</title><rect x="27.5097%" y="133" width="0.7469%" height="15" fill="rgb(235,183,28)"/><text x="27.7597%" y="143.50"></text></g><g><title>normalize_projection_ty (7,847,535 samples, 0.34%)</title><rect x="27.9128%" y="117" width="0.3439%" height="15" fill="rgb(221,5,38)"/><text x="28.1628%" y="127.50"></text></g><g><title>type_op_normalize_ty (3,104,750 samples, 0.14%)</title><rect x="28.2567%" y="133" width="0.1361%" height="15" fill="rgb(247,18,42)"/><text x="28.5067%" y="143.50"></text></g><g><title>type_op_prove_predicate (75,103,201 samples, 3.29%)</title><rect x="28.3927%" y="133" width="3.2911%" height="15" fill="rgb(241,131,45)"/><text x="28.6427%" y="143.50">typ..</text></g><g><title>evaluate_obligation (5,395,014 samples, 0.24%)</title><rect x="31.4474%" y="117" width="0.2364%" height="15" fill="rgb(249,31,29)"/><text x="31.6974%" y="127.50"></text></g><g><title>MIR_borrow_checking (713,106,997 samples, 31.25%)</title><rect x="0.4389%" y="165" width="31.2489%" height="15" fill="rgb(225,111,53)"/><text x="0.6889%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (710,514,896 samples, 31.14%)</title><rect x="0.5525%" y="149" width="31.1353%" height="15" fill="rgb(238,160,17)"/><text x="0.8025%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (2,966,403 samples, 0.13%)</title><rect x="31.7828%" y="165" width="0.1300%" height="15" fill="rgb(214,148,48)"/><text x="32.0328%" y="175.50"></text></g><g><title>codegen_fn_attrs (3,029,924 samples, 0.13%)</title><rect x="32.0850%" y="133" width="0.1328%" height="15" fill="rgb(232,36,49)"/><text x="32.3350%" y="143.50"></text></g><g><title>check_mod_attrs (6,833,326 samples, 0.30%)</title><rect x="31.9183%" y="149" width="0.2994%" height="15" fill="rgb(209,103,24)"/><text x="32.1683%" y="159.50"></text></g><g><title>lint_levels (3,447,318 samples, 0.15%)</title><rect x="32.4782%" y="133" width="0.1511%" height="15" fill="rgb(229,88,8)"/><text x="32.7282%" y="143.50"></text></g><g><title>lookup_deprecation_entry (2,284,135 samples, 0.10%)</title><rect x="32.6292%" y="133" width="0.1001%" height="15" fill="rgb(213,181,19)"/><text x="32.8792%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (8,134,821 samples, 0.36%)</title><rect x="32.3850%" y="149" width="0.3565%" height="15" fill="rgb(254,191,54)"/><text x="32.6350%" y="159.50"></text></g><g><title>misc_checking_1 (19,452,607 samples, 0.85%)</title><rect x="31.9128%" y="165" width="0.8524%" height="15" fill="rgb(241,83,37)"/><text x="32.1628%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (12,481,679 samples, 0.55%)</title><rect x="32.7654%" y="149" width="0.5470%" height="15" fill="rgb(233,36,39)"/><text x="33.0154%" y="159.50"></text></g><g><title>check_mod_liveness (10,287,662 samples, 0.45%)</title><rect x="32.8616%" y="133" width="0.4508%" height="15" fill="rgb(226,3,54)"/><text x="33.1116%" y="143.50"></text></g><g><title>type_uninhabited_from (2,611,942 samples, 0.11%)</title><rect x="33.1979%" y="117" width="0.1145%" height="15" fill="rgb(245,192,40)"/><text x="33.4479%" y="127.50"></text></g><g><title>param_env (3,346,923 samples, 0.15%)</title><rect x="33.8827%" y="117" width="0.1467%" height="15" fill="rgb(238,167,29)"/><text x="34.1327%" y="127.50"></text></g><g><title>misc_checking_2 (29,033,655 samples, 1.27%)</title><rect x="32.7653%" y="165" width="1.2723%" height="15" fill="rgb(232,182,51)"/><text x="33.0153%" y="175.50"></text></g><g><title>match_checking (16,548,506 samples, 0.73%)</title><rect x="33.3124%" y="149" width="0.7252%" height="15" fill="rgb(231,60,39)"/><text x="33.5624%" y="159.50"></text></g><g><title>check_match (15,742,022 samples, 0.69%)</title><rect x="33.3477%" y="133" width="0.6898%" height="15" fill="rgb(208,69,12)"/><text x="33.5977%" y="143.50"></text></g><g><title>check_private_in_public (4,357,279 samples, 0.19%)</title><rect x="34.0386%" y="149" width="0.1909%" height="15" fill="rgb(235,93,37)"/><text x="34.2886%" y="159.50"></text></g><g><title>death_checking (7,867,348 samples, 0.34%)</title><rect x="34.2295%" y="149" width="0.3448%" height="15" fill="rgb(213,116,39)"/><text x="34.4795%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,599,640 samples, 0.11%)</title><rect x="35.0297%" y="117" width="0.1139%" height="15" fill="rgb(222,207,29)"/><text x="35.2797%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,547,209 samples, 0.11%)</title><rect x="35.0320%" y="101" width="0.1116%" height="15" fill="rgb(206,96,30)"/><text x="35.2820%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,466,148 samples, 0.11%)</title><rect x="35.0355%" y="85" width="0.1081%" height="15" fill="rgb(218,138,4)"/><text x="35.2855%" y="95.50"></text></g><g><title>param_env (3,996,303 samples, 0.18%)</title><rect x="35.1436%" y="117" width="0.1751%" height="15" fill="rgb(250,191,14)"/><text x="35.3936%" y="127.50"></text></g><g><title>crate_lints (19,280,465 samples, 0.84%)</title><rect x="34.5744%" y="133" width="0.8449%" height="15" fill="rgb(239,60,40)"/><text x="34.8244%" y="143.50"></text></g><g><title>lint_checking (31,334,899 samples, 1.37%)</title><rect x="34.5743%" y="149" width="1.3731%" height="15" fill="rgb(206,27,48)"/><text x="34.8243%" y="159.50"></text></g><g><title>module_lints (12,050,444 samples, 0.53%)</title><rect x="35.4193%" y="133" width="0.5281%" height="15" fill="rgb(225,35,8)"/><text x="35.6693%" y="143.50"></text></g><g><title>lint_mod (12,006,433 samples, 0.53%)</title><rect x="35.4212%" y="117" width="0.5261%" height="15" fill="rgb(250,213,24)"/><text x="35.6712%" y="127.50"></text></g><g><title>privacy_access_levels (9,553,637 samples, 0.42%)</title><rect x="35.9474%" y="149" width="0.4186%" height="15" fill="rgb(247,123,22)"/><text x="36.1974%" y="159.50"></text></g><g><title>privacy_checking_modules (22,528,122 samples, 0.99%)</title><rect x="36.3660%" y="149" width="0.9872%" height="15" fill="rgb(231,138,38)"/><text x="36.6160%" y="159.50"></text></g><g><title>check_mod_privacy (22,483,762 samples, 0.99%)</title><rect x="36.3680%" y="133" width="0.9853%" height="15" fill="rgb(231,145,46)"/><text x="36.6180%" y="143.50"></text></g><g><title>misc_checking_3 (75,786,977 samples, 3.32%)</title><rect x="34.0376%" y="165" width="3.3210%" height="15" fill="rgb(251,118,11)"/><text x="34.2876%" y="175.50">mis..</text></g><g><title>impl_parent (5,082,164 samples, 0.22%)</title><rect x="37.8889%" y="101" width="0.2227%" height="15" fill="rgb(217,147,25)"/><text x="38.1389%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,781,378 samples, 0.12%)</title><rect x="37.9897%" y="85" width="0.1219%" height="15" fill="rgb(247,81,37)"/><text x="38.2397%" y="95.50"></text></g><g><title>impl_trait_ref (9,959,379 samples, 0.44%)</title><rect x="38.1116%" y="101" width="0.4364%" height="15" fill="rgb(209,12,38)"/><text x="38.3616%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,908,233 samples, 0.35%)</title><rect x="38.2015%" y="85" width="0.3465%" height="15" fill="rgb(227,1,9)"/><text x="38.4515%" y="95.50"></text></g><g><title>trait_impls_of (2,314,673 samples, 0.10%)</title><rect x="38.5688%" y="101" width="0.1014%" height="15" fill="rgb(248,47,43)"/><text x="38.8188%" y="111.50"></text></g><g><title>coherent_trait (28,488,198 samples, 1.25%)</title><rect x="37.4231%" y="133" width="1.2484%" height="15" fill="rgb(221,10,30)"/><text x="37.6731%" y="143.50"></text></g><g><title>specialization_graph_of (27,323,702 samples, 1.20%)</title><rect x="37.4741%" y="117" width="1.1973%" height="15" fill="rgb(210,229,1)"/><text x="37.7241%" y="127.50"></text></g><g><title>coherence_checking (29,107,335 samples, 1.28%)</title><rect x="37.4212%" y="149" width="1.2755%" height="15" fill="rgb(222,148,37)"/><text x="37.6712%" y="159.50"></text></g><g><title>dropck_outlives (4,460,632 samples, 0.20%)</title><rect x="52.1784%" y="101" width="0.1955%" height="15" fill="rgb(234,67,33)"/><text x="52.4284%" y="111.50"></text></g><g><title>evaluate_obligation (18,561,071 samples, 0.81%)</title><rect x="52.4341%" y="101" width="0.8134%" height="15" fill="rgb(247,98,35)"/><text x="52.6841%" y="111.50"></text></g><g><title>method_autoderef_steps (3,711,204 samples, 0.16%)</title><rect x="53.3781%" y="101" width="0.1626%" height="15" fill="rgb(247,138,52)"/><text x="53.6281%" y="111.50"></text></g><g><title>associated_items (2,284,266 samples, 0.10%)</title><rect x="72.0203%" y="85" width="0.1001%" height="15" fill="rgb(213,79,30)"/><text x="72.2703%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,875,060 samples, 0.13%)</title><rect x="72.2867%" y="69" width="0.1260%" height="15" fill="rgb(246,177,23)"/><text x="72.5367%" y="79.50"></text></g><g><title>dropck_outlives (6,714,762 samples, 0.29%)</title><rect x="72.1427%" y="85" width="0.2942%" height="15" fill="rgb(230,62,27)"/><text x="72.3927%" y="95.50"></text></g><g><title>evaluate_obligation (35,389,590 samples, 1.55%)</title><rect x="72.4391%" y="85" width="1.5508%" height="15" fill="rgb(216,154,8)"/><text x="72.6891%" y="95.50"></text></g><g><title>generics_of (2,887,882 samples, 0.13%)</title><rect x="74.0309%" y="85" width="0.1265%" height="15" fill="rgb(244,35,45)"/><text x="74.2809%" y="95.50"></text></g><g><title>is_copy_raw (2,516,713 samples, 0.11%)</title><rect x="74.2489%" y="85" width="0.1103%" height="15" fill="rgb(251,115,12)"/><text x="74.4989%" y="95.50"></text></g><g><title>evaluate_obligation (4,002,949 samples, 0.18%)</title><rect x="74.6035%" y="69" width="0.1754%" height="15" fill="rgb(240,54,50)"/><text x="74.8535%" y="79.50"></text></g><g><title>method_autoderef_steps (8,439,876 samples, 0.37%)</title><rect x="74.4111%" y="85" width="0.3698%" height="15" fill="rgb(233,84,52)"/><text x="74.6611%" y="95.50"></text></g><g><title>predicates_of (2,835,769 samples, 0.12%)</title><rect x="74.7886%" y="85" width="0.1243%" height="15" fill="rgb(207,117,47)"/><text x="75.0386%" y="95.50"></text></g><g><title>typeck (487,225,115 samples, 21.35%)</title><rect x="53.6595%" y="101" width="21.3506%" height="15" fill="rgb(249,43,39)"/><text x="53.9095%" y="111.50">typeck</text></g><g><title>item_bodies_checking (828,571,958 samples, 36.31%)</title><rect x="38.7162%" y="149" width="36.3087%" height="15" fill="rgb(209,38,44)"/><text x="38.9662%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (828,567,778 samples, 36.31%)</title><rect x="38.7164%" y="133" width="36.3085%" height="15" fill="rgb(236,212,23)"/><text x="38.9664%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (826,274,697 samples, 36.21%)</title><rect x="38.8169%" y="117" width="36.2080%" height="15" fill="rgb(242,79,21)"/><text x="39.0669%" y="127.50">typeck</text></g><g><title>item_types_checking (21,669,181 samples, 0.95%)</title><rect x="75.0249%" y="149" width="0.9496%" height="15" fill="rgb(211,96,35)"/><text x="75.2749%" y="159.50"></text></g><g><title>check_mod_item_types (21,632,681 samples, 0.95%)</title><rect x="75.0265%" y="133" width="0.9480%" height="15" fill="rgb(253,215,40)"/><text x="75.2765%" y="143.50"></text></g><g><title>typeck (6,690,263 samples, 0.29%)</title><rect x="75.6813%" y="117" width="0.2932%" height="15" fill="rgb(211,81,21)"/><text x="75.9313%" y="127.50"></text></g><g><title>fn_sig (4,465,873 samples, 0.20%)</title><rect x="76.1612%" y="117" width="0.1957%" height="15" fill="rgb(208,190,38)"/><text x="76.4112%" y="127.50"></text></g><g><title>is_late_bound_map (2,302,484 samples, 0.10%)</title><rect x="76.4290%" y="101" width="0.1009%" height="15" fill="rgb(235,213,38)"/><text x="76.6790%" y="111.50"></text></g><g><title>named_region_map (3,482,312 samples, 0.15%)</title><rect x="76.5299%" y="101" width="0.1526%" height="15" fill="rgb(237,122,38)"/><text x="76.7799%" y="111.50"></text></g><g><title>resolve_lifetimes (3,241,090 samples, 0.14%)</title><rect x="76.5405%" y="85" width="0.1420%" height="15" fill="rgb(244,218,35)"/><text x="76.7905%" y="95.50"></text></g><g><title>generics_of (7,574,667 samples, 0.33%)</title><rect x="76.3568%" y="117" width="0.3319%" height="15" fill="rgb(240,68,47)"/><text x="76.6068%" y="127.50"></text></g><g><title>explicit_predicates_of (3,556,733 samples, 0.16%)</title><rect x="76.7945%" y="85" width="0.1559%" height="15" fill="rgb(210,16,53)"/><text x="77.0445%" y="95.50"></text></g><g><title>predicates_of (8,367,840 samples, 0.37%)</title><rect x="76.7054%" y="117" width="0.3667%" height="15" fill="rgb(235,124,12)"/><text x="76.9554%" y="127.50"></text></g><g><title>predicates_defined_on (7,684,043 samples, 0.34%)</title><rect x="76.7354%" y="101" width="0.3367%" height="15" fill="rgb(224,169,11)"/><text x="76.9854%" y="111.50"></text></g><g><title>inferred_outlives_of (2,778,194 samples, 0.12%)</title><rect x="76.9504%" y="85" width="0.1217%" height="15" fill="rgb(250,166,2)"/><text x="77.2004%" y="95.50"></text></g><g><title>inferred_outlives_crate (2,536,119 samples, 0.11%)</title><rect x="76.9610%" y="69" width="0.1111%" height="15" fill="rgb(242,216,29)"/><text x="77.2110%" y="79.50"></text></g><g><title>type_collecting (26,148,142 samples, 1.15%)</title><rect x="75.9760%" y="149" width="1.1458%" height="15" fill="rgb(230,116,27)"/><text x="76.2260%" y="159.50"></text></g><g><title>collect_mod_item_types (26,092,662 samples, 1.14%)</title><rect x="75.9784%" y="133" width="1.1434%" height="15" fill="rgb(228,99,48)"/><text x="76.2284%" y="143.50"></text></g><g><title>evaluate_obligation (3,886,664 samples, 0.17%)</title><rect x="78.3863%" y="117" width="0.1703%" height="15" fill="rgb(253,11,6)"/><text x="78.6363%" y="127.50"></text></g><g><title>implied_outlives_bounds (3,008,559 samples, 0.13%)</title><rect x="78.5616%" y="117" width="0.1318%" height="15" fill="rgb(247,143,39)"/><text x="78.8116%" y="127.50"></text></g><g><title>param_env (4,615,325 samples, 0.20%)</title><rect x="78.7163%" y="117" width="0.2022%" height="15" fill="rgb(236,97,10)"/><text x="78.9663%" y="127.50"></text></g><g><title>region_scope_tree (5,594,834 samples, 0.25%)</title><rect x="78.9233%" y="117" width="0.2452%" height="15" fill="rgb(233,208,19)"/><text x="79.1733%" y="127.50"></text></g><g><title>check_impl_item_well_formed (43,794,182 samples, 1.92%)</title><rect x="77.2675%" y="133" width="1.9191%" height="15" fill="rgb(216,164,2)"/><text x="77.5175%" y="143.50">c..</text></g><g><title>eval_to_const_value_raw (2,366,326 samples, 0.10%)</title><rect x="79.9328%" y="117" width="0.1037%" height="15" fill="rgb(220,129,5)"/><text x="80.1828%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,351,776 samples, 0.10%)</title><rect x="79.9334%" y="101" width="0.1031%" height="15" fill="rgb(242,17,10)"/><text x="80.1834%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,348,036 samples, 0.10%)</title><rect x="79.9336%" y="85" width="0.1029%" height="15" fill="rgb(242,107,0)"/><text x="80.1836%" y="95.50"></text></g><g><title>evaluate_obligation (4,343,635 samples, 0.19%)</title><rect x="80.0364%" y="117" width="0.1903%" height="15" fill="rgb(251,28,31)"/><text x="80.2864%" y="127.50"></text></g><g><title>param_env (3,557,512 samples, 0.16%)</title><rect x="80.3187%" y="117" width="0.1559%" height="15" fill="rgb(233,223,10)"/><text x="80.5687%" y="127.50"></text></g><g><title>region_scope_tree (2,489,207 samples, 0.11%)</title><rect x="80.4878%" y="117" width="0.1091%" height="15" fill="rgb(215,21,27)"/><text x="80.7378%" y="127.50"></text></g><g><title>check_item_well_formed (33,829,125 samples, 1.48%)</title><rect x="79.1866%" y="133" width="1.4824%" height="15" fill="rgb(232,23,21)"/><text x="79.4366%" y="143.50"></text></g><g><title>analysis (1,838,524,540 samples, 80.57%)</title><rect x="0.2361%" y="181" width="80.5656%" height="15" fill="rgb(244,5,23)"/><text x="0.4861%" y="191.50">analysis</text></g><g><title>type_check_crate (991,379,685 samples, 43.44%)</title><rect x="37.3586%" y="165" width="43.4430%" height="15" fill="rgb(226,81,46)"/><text x="37.6086%" y="175.50">type_check_crate</text></g><g><title>wf_checking (83,820,246 samples, 3.67%)</title><rect x="77.1286%" y="149" width="3.6731%" height="15" fill="rgb(247,70,30)"/><text x="77.3786%" y="159.50">wf_c..</text></g><g><title>check_trait_item_well_formed (3,025,855 samples, 0.13%)</title><rect x="80.6690%" y="133" width="0.1326%" height="15" fill="rgb(212,68,19)"/><text x="80.9190%" y="143.50"></text></g><g><title>AST_validation (3,329,258 samples, 0.15%)</title><rect x="80.8370%" y="165" width="0.1459%" height="15" fill="rgb(240,187,13)"/><text x="81.0870%" y="175.50"></text></g><g><title>complete_gated_feature_checking (2,639,869 samples, 0.12%)</title><rect x="80.9829%" y="165" width="0.1157%" height="15" fill="rgb(223,113,26)"/><text x="81.2329%" y="175.50"></text></g><g><title>metadata_register_crate (6,069,278 samples, 0.27%)</title><rect x="92.3137%" y="133" width="0.2660%" height="15" fill="rgb(206,192,2)"/><text x="92.5637%" y="143.50"></text></g><g><title>macro_expand_crate (264,062,520 samples, 11.57%)</title><rect x="81.1013%" y="165" width="11.5714%" height="15" fill="rgb(241,108,4)"/><text x="81.3513%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (264,026,720 samples, 11.57%)</title><rect x="81.1029%" y="149" width="11.5699%" height="15" fill="rgb(247,173,49)"/><text x="81.3529%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (34,898,570 samples, 1.53%)</title><rect x="92.7693%" y="149" width="1.5293%" height="15" fill="rgb(224,114,35)"/><text x="93.0193%" y="159.50"></text></g><g><title>resolve_check_unused (2,318,706 samples, 0.10%)</title><rect x="94.3052%" y="149" width="0.1016%" height="15" fill="rgb(245,159,27)"/><text x="94.5552%" y="159.50"></text></g><g><title>configure_and_expand (311,887,935 samples, 13.67%)</title><rect x="80.8300%" y="181" width="13.6672%" height="15" fill="rgb(245,172,44)"/><text x="81.0800%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (41,377,193 samples, 1.81%)</title><rect x="92.6840%" y="165" width="1.8132%" height="15" fill="rgb(236,23,11)"/><text x="92.9340%" y="175.50">r..</text></g><g><title>drop_ast (5,119,797 samples, 0.22%)</title><rect x="94.4972%" y="181" width="0.2244%" height="15" fill="rgb(205,117,38)"/><text x="94.7472%" y="191.50"></text></g><g><title>early_lint_checks (9,955,360 samples, 0.44%)</title><rect x="94.7230%" y="181" width="0.4363%" height="15" fill="rgb(237,72,25)"/><text x="94.9730%" y="191.50"></text></g><g><title>free_global_ctxt (17,306,493 samples, 0.76%)</title><rect x="95.1592%" y="181" width="0.7584%" height="15" fill="rgb(244,70,9)"/><text x="95.4092%" y="191.50"></text></g><g><title>generate_crate_metadata (25,476,165 samples, 1.12%)</title><rect x="95.9176%" y="181" width="1.1164%" height="15" fill="rgb(217,125,39)"/><text x="96.1676%" y="191.50"></text></g><g><title>hir_lowering (56,453,891 samples, 2.47%)</title><rect x="97.0340%" y="181" width="2.4739%" height="15" fill="rgb(235,36,10)"/><text x="97.2840%" y="191.50">hi..</text></g><g><title>parse_crate (4,214,446 samples, 0.18%)</title><rect x="99.5158%" y="181" width="0.1847%" height="15" fill="rgb(251,123,47)"/><text x="99.7658%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,512,391 samples, 0.20%)</title><rect x="99.7151%" y="181" width="0.1977%" height="15" fill="rgb(221,13,13)"/><text x="99.9651%" y="191.50"></text></g><g><title>all (2,282,022,645 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,282,022,645 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>