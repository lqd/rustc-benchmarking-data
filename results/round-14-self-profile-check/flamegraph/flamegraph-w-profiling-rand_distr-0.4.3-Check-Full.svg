<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (773,378 samples, 0.14%)</title><rect x="13.4039%" y="117" width="0.1449%" height="15" fill="rgb(227,0,7)"/><text x="13.6539%" y="127.50"></text></g><g><title>codegen_fn_attrs (667,768 samples, 0.13%)</title><rect x="13.9940%" y="101" width="0.1251%" height="15" fill="rgb(217,0,24)"/><text x="14.2440%" y="111.50"></text></g><g><title>is_copy_raw (3,243,862 samples, 0.61%)</title><rect x="17.0851%" y="69" width="0.6077%" height="15" fill="rgb(221,193,54)"/><text x="17.3351%" y="79.50"></text></g><g><title>evaluate_obligation (2,659,628 samples, 0.50%)</title><rect x="17.1946%" y="53" width="0.4983%" height="15" fill="rgb(248,212,6)"/><text x="17.4446%" y="63.50"></text></g><g><title>needs_drop_raw (3,823,770 samples, 0.72%)</title><rect x="16.9786%" y="85" width="0.7164%" height="15" fill="rgb(208,68,35)"/><text x="17.2286%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (878,167 samples, 0.16%)</title><rect x="17.8144%" y="69" width="0.1645%" height="15" fill="rgb(232,128,0)"/><text x="18.0644%" y="79.50"></text></g><g><title>specialization_graph_of (1,914,682 samples, 0.36%)</title><rect x="18.0028%" y="69" width="0.3587%" height="15" fill="rgb(207,160,47)"/><text x="18.2528%" y="79.50"></text></g><g><title>impl_trait_ref (873,510 samples, 0.16%)</title><rect x="18.1978%" y="53" width="0.1637%" height="15" fill="rgb(228,23,34)"/><text x="18.4478%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (762,298 samples, 0.14%)</title><rect x="18.2187%" y="37" width="0.1428%" height="15" fill="rgb(218,30,26)"/><text x="18.4687%" y="47.50"></text></g><g><title>resolve_instance (3,652,750 samples, 0.68%)</title><rect x="17.6997%" y="85" width="0.6843%" height="15" fill="rgb(220,122,19)"/><text x="17.9497%" y="95.50"></text></g><g><title>thir_body (6,579,899 samples, 1.23%)</title><rect x="18.4067%" y="85" width="1.2327%" height="15" fill="rgb(250,228,42)"/><text x="18.6567%" y="95.50"></text></g><g><title>mir_const (37,576,499 samples, 7.04%)</title><rect x="12.6131%" y="133" width="7.0400%" height="15" fill="rgb(240,193,28)"/><text x="12.8631%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (32,581,738 samples, 6.10%)</title><rect x="13.5488%" y="117" width="6.1042%" height="15" fill="rgb(216,20,37)"/><text x="13.7988%" y="127.50">unsafety..</text></g><g><title>mir_built (29,537,910 samples, 5.53%)</title><rect x="14.1191%" y="101" width="5.5339%" height="15" fill="rgb(206,188,39)"/><text x="14.3691%" y="111.50">mir_bui..</text></g><g><title>thir_body (4,002,645 samples, 0.75%)</title><rect x="19.8966%" y="69" width="0.7499%" height="15" fill="rgb(217,207,13)"/><text x="20.1466%" y="79.50"></text></g><g><title>lit_to_const (3,331,938 samples, 0.62%)</title><rect x="20.0222%" y="53" width="0.6242%" height="15" fill="rgb(231,73,38)"/><text x="20.2722%" y="63.50"></text></g><g><title>mir_const_qualif (5,312,006 samples, 1.00%)</title><rect x="19.6530%" y="133" width="0.9952%" height="15" fill="rgb(225,20,46)"/><text x="19.9030%" y="143.50"></text></g><g><title>mir_const (4,884,319 samples, 0.92%)</title><rect x="19.7332%" y="117" width="0.9151%" height="15" fill="rgb(210,31,41)"/><text x="19.9832%" y="127.50"></text></g><g><title>unsafety_check_result (4,633,975 samples, 0.87%)</title><rect x="19.7801%" y="101" width="0.8682%" height="15" fill="rgb(221,200,47)"/><text x="20.0301%" y="111.50"></text></g><g><title>mir_built (4,551,473 samples, 0.85%)</title><rect x="19.7955%" y="85" width="0.8527%" height="15" fill="rgb(226,26,5)"/><text x="20.0455%" y="95.50"></text></g><g><title>mir_promoted (46,796,351 samples, 8.77%)</title><rect x="11.8811%" y="149" width="8.7673%" height="15" fill="rgb(249,33,26)"/><text x="12.1311%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,342,960 samples, 0.44%)</title><rect x="20.6500%" y="149" width="0.4390%" height="15" fill="rgb(235,183,28)"/><text x="20.9000%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,867,259 samples, 0.35%)</title><rect x="21.0890%" y="149" width="0.3498%" height="15" fill="rgb(221,5,38)"/><text x="21.3390%" y="159.50"></text></g><g><title>normalize_projection_ty (1,131,509 samples, 0.21%)</title><rect x="21.2268%" y="133" width="0.2120%" height="15" fill="rgb(247,18,42)"/><text x="21.4768%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,013,618 samples, 1.50%)</title><rect x="21.4921%" y="149" width="1.5014%" height="15" fill="rgb(241,131,45)"/><text x="21.7421%" y="159.50"></text></g><g><title>MIR_borrow_checking (120,234,445 samples, 22.53%)</title><rect x="0.4688%" y="181" width="22.5260%" height="15" fill="rgb(249,31,29)"/><text x="0.7188%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (119,580,664 samples, 22.40%)</title><rect x="0.5913%" y="165" width="22.4035%" height="15" fill="rgb(225,111,53)"/><text x="0.8413%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (813,369 samples, 0.15%)</title><rect x="22.9948%" y="181" width="0.1524%" height="15" fill="rgb(238,160,17)"/><text x="23.2448%" y="191.50"></text></g><g><title>hir_module_items (1,254,675 samples, 0.24%)</title><rect x="23.1472%" y="181" width="0.2351%" height="15" fill="rgb(214,148,48)"/><text x="23.3972%" y="191.50"></text></g><g><title>codegen_fn_attrs (906,069 samples, 0.17%)</title><rect x="23.6442%" y="149" width="0.1698%" height="15" fill="rgb(232,36,49)"/><text x="23.8942%" y="159.50"></text></g><g><title>check_mod_attrs (2,235,187 samples, 0.42%)</title><rect x="23.3953%" y="165" width="0.4188%" height="15" fill="rgb(209,103,24)"/><text x="23.6453%" y="175.50"></text></g><g><title>check_mod_const_bodies (615,018 samples, 0.12%)</title><rect x="23.8140%" y="165" width="0.1152%" height="15" fill="rgb(229,88,8)"/><text x="24.0640%" y="175.50"></text></g><g><title>lint_levels (976,941 samples, 0.18%)</title><rect x="24.1738%" y="149" width="0.1830%" height="15" fill="rgb(213,181,19)"/><text x="24.4238%" y="159.50"></text></g><g><title>lookup_deprecation_entry (720,648 samples, 0.14%)</title><rect x="24.3568%" y="149" width="0.1350%" height="15" fill="rgb(254,191,54)"/><text x="24.6068%" y="159.50"></text></g><g><title>stability_index (616,307 samples, 0.12%)</title><rect x="24.3764%" y="133" width="0.1155%" height="15" fill="rgb(241,83,37)"/><text x="24.6264%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,648,307 samples, 0.50%)</title><rect x="24.0201%" y="165" width="0.4962%" height="15" fill="rgb(233,36,39)"/><text x="24.2701%" y="175.50"></text></g><g><title>misc_checking_1 (6,360,951 samples, 1.19%)</title><rect x="23.3823%" y="181" width="1.1917%" height="15" fill="rgb(226,3,54)"/><text x="23.6323%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,161,794 samples, 0.41%)</title><rect x="24.5744%" y="165" width="0.4050%" height="15" fill="rgb(245,192,40)"/><text x="24.8244%" y="175.50"></text></g><g><title>check_mod_liveness (1,624,796 samples, 0.30%)</title><rect x="24.6751%" y="149" width="0.3044%" height="15" fill="rgb(238,167,29)"/><text x="24.9251%" y="159.50"></text></g><g><title>misc_checking_2 (4,938,865 samples, 0.93%)</title><rect x="24.5741%" y="181" width="0.9253%" height="15" fill="rgb(232,182,51)"/><text x="24.8241%" y="191.50"></text></g><g><title>match_checking (2,775,021 samples, 0.52%)</title><rect x="24.9795%" y="165" width="0.5199%" height="15" fill="rgb(231,60,39)"/><text x="25.2295%" y="175.50"></text></g><g><title>check_match (2,598,107 samples, 0.49%)</title><rect x="25.0126%" y="149" width="0.4868%" height="15" fill="rgb(208,69,12)"/><text x="25.2626%" y="159.50"></text></g><g><title>check_private_in_public (1,300,354 samples, 0.24%)</title><rect x="25.5017%" y="165" width="0.2436%" height="15" fill="rgb(235,93,37)"/><text x="25.7517%" y="175.50"></text></g><g><title>codegen_fn_attrs (734,867 samples, 0.14%)</title><rect x="26.2005%" y="149" width="0.1377%" height="15" fill="rgb(213,116,39)"/><text x="26.4505%" y="159.50"></text></g><g><title>death_checking (3,357,348 samples, 0.63%)</title><rect x="25.7454%" y="165" width="0.6290%" height="15" fill="rgb(222,207,29)"/><text x="25.9954%" y="175.50"></text></g><g><title>param_env (1,708,392 samples, 0.32%)</title><rect x="27.0817%" y="133" width="0.3201%" height="15" fill="rgb(206,96,30)"/><text x="27.3317%" y="143.50"></text></g><g><title>predicates_of (756,747 samples, 0.14%)</title><rect x="27.2600%" y="117" width="0.1418%" height="15" fill="rgb(218,138,4)"/><text x="27.5100%" y="127.50"></text></g><g><title>predicates_defined_on (612,457 samples, 0.11%)</title><rect x="27.2871%" y="101" width="0.1147%" height="15" fill="rgb(250,191,14)"/><text x="27.5371%" y="111.50"></text></g><g><title>crate_lints (6,914,837 samples, 1.30%)</title><rect x="26.3750%" y="149" width="1.2955%" height="15" fill="rgb(239,60,40)"/><text x="26.6250%" y="159.50"></text></g><g><title>type_of (1,256,825 samples, 0.24%)</title><rect x="27.4350%" y="133" width="0.2355%" height="15" fill="rgb(206,27,48)"/><text x="27.6850%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,017,052 samples, 0.19%)</title><rect x="27.4799%" y="117" width="0.1905%" height="15" fill="rgb(225,35,8)"/><text x="27.7299%" y="127.50"></text></g><g><title>lint_checking (9,620,518 samples, 1.80%)</title><rect x="26.3744%" y="165" width="1.8024%" height="15" fill="rgb(250,213,24)"/><text x="26.6244%" y="175.50">l..</text></g><g><title>module_lints (2,702,451 samples, 0.51%)</title><rect x="27.6705%" y="149" width="0.5063%" height="15" fill="rgb(247,123,22)"/><text x="27.9205%" y="159.50"></text></g><g><title>lint_mod (2,680,281 samples, 0.50%)</title><rect x="27.6746%" y="133" width="0.5022%" height="15" fill="rgb(231,138,38)"/><text x="27.9246%" y="143.50"></text></g><g><title>privacy_access_levels (1,931,702 samples, 0.36%)</title><rect x="28.1768%" y="165" width="0.3619%" height="15" fill="rgb(231,145,46)"/><text x="28.4268%" y="175.50"></text></g><g><title>privacy_checking_modules (4,957,384 samples, 0.93%)</title><rect x="28.5387%" y="165" width="0.9288%" height="15" fill="rgb(251,118,11)"/><text x="28.7887%" y="175.50"></text></g><g><title>check_mod_privacy (4,938,612 samples, 0.93%)</title><rect x="28.5422%" y="149" width="0.9253%" height="15" fill="rgb(217,147,25)"/><text x="28.7922%" y="159.50"></text></g><g><title>misc_checking_3 (21,246,747 samples, 3.98%)</title><rect x="25.4994%" y="181" width="3.9806%" height="15" fill="rgb(247,81,37)"/><text x="25.7494%" y="191.50">misc..</text></g><g><title>is_copy_raw (547,235 samples, 0.10%)</title><rect x="29.6530%" y="133" width="0.1025%" height="15" fill="rgb(209,12,38)"/><text x="29.9030%" y="143.50"></text></g><g><title>param_env (647,107 samples, 0.12%)</title><rect x="29.7555%" y="133" width="0.1212%" height="15" fill="rgb(227,1,9)"/><text x="30.0055%" y="143.50"></text></g><g><title>impl_parent (2,803,169 samples, 0.53%)</title><rect x="30.6670%" y="117" width="0.5252%" height="15" fill="rgb(248,47,43)"/><text x="30.9170%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,532,636 samples, 0.29%)</title><rect x="30.9050%" y="101" width="0.2871%" height="15" fill="rgb(221,10,30)"/><text x="31.1550%" y="111.50"></text></g><g><title>impl_trait_ref (5,698,461 samples, 1.07%)</title><rect x="31.1921%" y="117" width="1.0676%" height="15" fill="rgb(210,229,1)"/><text x="31.4421%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,641,099 samples, 0.87%)</title><rect x="31.3902%" y="101" width="0.8695%" height="15" fill="rgb(222,148,37)"/><text x="31.6402%" y="111.50"></text></g><g><title>coherent_trait (15,403,742 samples, 2.89%)</title><rect x="29.5535%" y="149" width="2.8859%" height="15" fill="rgb(234,67,33)"/><text x="29.8035%" y="159.50">co..</text></g><g><title>specialization_graph_of (13,678,214 samples, 2.56%)</title><rect x="29.8768%" y="133" width="2.5626%" height="15" fill="rgb(247,98,35)"/><text x="30.1268%" y="143.50">sp..</text></g><g><title>trait_impls_of (956,802 samples, 0.18%)</title><rect x="32.2601%" y="117" width="0.1793%" height="15" fill="rgb(247,138,52)"/><text x="32.5101%" y="127.50"></text></g><g><title>coherence_checking (15,742,265 samples, 2.95%)</title><rect x="29.5491%" y="165" width="2.9493%" height="15" fill="rgb(213,79,30)"/><text x="29.7991%" y="175.50">co..</text></g><g><title>associated_item (1,339,643 samples, 0.25%)</title><rect x="57.0398%" y="101" width="0.2510%" height="15" fill="rgb(246,177,23)"/><text x="57.2898%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,061,271 samples, 0.20%)</title><rect x="57.0920%" y="85" width="0.1988%" height="15" fill="rgb(230,62,27)"/><text x="57.3420%" y="95.50"></text></g><g><title>associated_items (1,853,240 samples, 0.35%)</title><rect x="56.9562%" y="117" width="0.3472%" height="15" fill="rgb(216,154,8)"/><text x="57.2062%" y="127.50"></text></g><g><title>dropck_outlives (1,200,531 samples, 0.22%)</title><rect x="57.3279%" y="117" width="0.2249%" height="15" fill="rgb(244,35,45)"/><text x="57.5779%" y="127.50"></text></g><g><title>mir_for_ctfe (766,561 samples, 0.14%)</title><rect x="57.7041%" y="69" width="0.1436%" height="15" fill="rgb(251,115,12)"/><text x="57.9541%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (758,821 samples, 0.14%)</title><rect x="57.7056%" y="53" width="0.1422%" height="15" fill="rgb(240,54,50)"/><text x="57.9556%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,601,049 samples, 0.30%)</title><rect x="57.5529%" y="117" width="0.3000%" height="15" fill="rgb(233,84,52)"/><text x="57.8029%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,556,819 samples, 0.29%)</title><rect x="57.5611%" y="101" width="0.2917%" height="15" fill="rgb(207,117,47)"/><text x="57.8111%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,520,268 samples, 0.28%)</title><rect x="57.5680%" y="85" width="0.2848%" height="15" fill="rgb(249,43,39)"/><text x="57.8180%" y="95.50"></text></g><g><title>generics_of (1,266,550 samples, 0.24%)</title><rect x="60.2791%" y="101" width="0.2373%" height="15" fill="rgb(209,38,44)"/><text x="60.5291%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (895,726 samples, 0.17%)</title><rect x="60.3486%" y="85" width="0.1678%" height="15" fill="rgb(236,212,23)"/><text x="60.5986%" y="95.50"></text></g><g><title>impl_trait_ref (1,874,693 samples, 0.35%)</title><rect x="60.5570%" y="101" width="0.3512%" height="15" fill="rgb(242,79,21)"/><text x="60.8070%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,536,656 samples, 0.29%)</title><rect x="60.6203%" y="85" width="0.2879%" height="15" fill="rgb(211,96,35)"/><text x="60.8703%" y="95.50"></text></g><g><title>predicates_of (1,250,822 samples, 0.23%)</title><rect x="60.9207%" y="101" width="0.2343%" height="15" fill="rgb(253,215,40)"/><text x="61.1707%" y="111.50"></text></g><g><title>predicates_defined_on (707,506 samples, 0.13%)</title><rect x="61.0225%" y="85" width="0.1326%" height="15" fill="rgb(211,81,21)"/><text x="61.2725%" y="95.50"></text></g><g><title>specializes (2,949,725 samples, 0.55%)</title><rect x="61.1550%" y="101" width="0.5526%" height="15" fill="rgb(208,190,38)"/><text x="61.4050%" y="111.50"></text></g><g><title>param_env (1,734,633 samples, 0.32%)</title><rect x="61.3827%" y="85" width="0.3250%" height="15" fill="rgb(235,213,38)"/><text x="61.6327%" y="95.50"></text></g><g><title>def_span (741,940 samples, 0.14%)</title><rect x="61.5686%" y="69" width="0.1390%" height="15" fill="rgb(237,122,38)"/><text x="61.8186%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (651,929 samples, 0.12%)</title><rect x="61.5855%" y="53" width="0.1221%" height="15" fill="rgb(244,218,35)"/><text x="61.8355%" y="63.50"></text></g><g><title>evaluate_obligation (21,001,361 samples, 3.93%)</title><rect x="57.8528%" y="117" width="3.9346%" height="15" fill="rgb(240,68,47)"/><text x="58.1028%" y="127.50">eval..</text></g><g><title>generics_of (1,509,333 samples, 0.28%)</title><rect x="61.8215%" y="117" width="0.2828%" height="15" fill="rgb(210,16,53)"/><text x="62.0715%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,171,888 samples, 0.22%)</title><rect x="61.8847%" y="101" width="0.2196%" height="15" fill="rgb(235,124,12)"/><text x="62.1347%" y="111.50"></text></g><g><title>method_autoderef_steps (1,066,506 samples, 0.20%)</title><rect x="62.2065%" y="117" width="0.1998%" height="15" fill="rgb(224,169,11)"/><text x="62.4565%" y="127.50"></text></g><g><title>predicates_of (752,708 samples, 0.14%)</title><rect x="62.5040%" y="117" width="0.1410%" height="15" fill="rgb(250,166,2)"/><text x="62.7540%" y="127.50"></text></g><g><title>associated_items (674,588 samples, 0.13%)</title><rect x="64.5335%" y="101" width="0.1264%" height="15" fill="rgb(242,216,29)"/><text x="64.7835%" y="111.50"></text></g><g><title>evaluate_obligation (1,078,711 samples, 0.20%)</title><rect x="64.7185%" y="101" width="0.2021%" height="15" fill="rgb(230,116,27)"/><text x="64.9685%" y="111.50"></text></g><g><title>typeck (12,744,581 samples, 2.39%)</title><rect x="62.7544%" y="117" width="2.3877%" height="15" fill="rgb(228,99,48)"/><text x="63.0044%" y="127.50">ty..</text></g><g><title>item_bodies_checking (174,148,476 samples, 32.63%)</title><rect x="32.5421%" y="165" width="32.6268%" height="15" fill="rgb(253,11,6)"/><text x="32.7921%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (174,144,546 samples, 32.63%)</title><rect x="32.5429%" y="149" width="32.6260%" height="15" fill="rgb(247,143,39)"/><text x="32.7929%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (173,666,991 samples, 32.54%)</title><rect x="32.6323%" y="133" width="32.5366%" height="15" fill="rgb(236,97,10)"/><text x="32.8823%" y="143.50">typeck</text></g><g><title>item_types_checking (7,360,683 samples, 1.38%)</title><rect x="65.1689%" y="165" width="1.3790%" height="15" fill="rgb(233,208,19)"/><text x="65.4189%" y="175.50"></text></g><g><title>check_mod_item_types (7,336,763 samples, 1.37%)</title><rect x="65.1734%" y="149" width="1.3745%" height="15" fill="rgb(216,164,2)"/><text x="65.4234%" y="159.50"></text></g><g><title>fn_sig (1,072,176 samples, 0.20%)</title><rect x="66.9079%" y="133" width="0.2009%" height="15" fill="rgb(220,129,5)"/><text x="67.1579%" y="143.50"></text></g><g><title>named_region_map (943,093 samples, 0.18%)</title><rect x="67.2292%" y="117" width="0.1767%" height="15" fill="rgb(242,17,10)"/><text x="67.4792%" y="127.50"></text></g><g><title>resolve_lifetimes (840,971 samples, 0.16%)</title><rect x="67.2484%" y="101" width="0.1576%" height="15" fill="rgb(242,107,0)"/><text x="67.4984%" y="111.50"></text></g><g><title>generics_of (1,677,051 samples, 0.31%)</title><rect x="67.1088%" y="133" width="0.3142%" height="15" fill="rgb(251,28,31)"/><text x="67.3588%" y="143.50"></text></g><g><title>late_bound_vars_map (1,592,123 samples, 0.30%)</title><rect x="67.9360%" y="85" width="0.2983%" height="15" fill="rgb(233,223,10)"/><text x="68.1860%" y="95.50"></text></g><g><title>resolve_lifetimes (1,495,523 samples, 0.28%)</title><rect x="67.9541%" y="69" width="0.2802%" height="15" fill="rgb(215,21,27)"/><text x="68.2041%" y="79.50"></text></g><g><title>explicit_predicates_of (3,210,655 samples, 0.60%)</title><rect x="67.6497%" y="101" width="0.6015%" height="15" fill="rgb(232,23,21)"/><text x="67.8997%" y="111.50"></text></g><g><title>predicates_of (4,829,413 samples, 0.90%)</title><rect x="67.4809%" y="133" width="0.9048%" height="15" fill="rgb(244,5,23)"/><text x="67.7309%" y="143.50"></text></g><g><title>predicates_defined_on (4,488,929 samples, 0.84%)</title><rect x="67.5447%" y="117" width="0.8410%" height="15" fill="rgb(226,81,46)"/><text x="67.7947%" y="127.50"></text></g><g><title>inferred_outlives_of (717,759 samples, 0.13%)</title><rect x="68.2512%" y="101" width="0.1345%" height="15" fill="rgb(247,70,30)"/><text x="68.5012%" y="111.50"></text></g><g><title>inferred_outlives_crate (575,557 samples, 0.11%)</title><rect x="68.2778%" y="85" width="0.1078%" height="15" fill="rgb(212,68,19)"/><text x="68.5278%" y="95.50"></text></g><g><title>type_collecting (10,425,016 samples, 1.95%)</title><rect x="66.5507%" y="165" width="1.9531%" height="15" fill="rgb(240,187,13)"/><text x="66.8007%" y="175.50">t..</text></g><g><title>collect_mod_item_types (10,385,375 samples, 1.95%)</title><rect x="66.5582%" y="149" width="1.9457%" height="15" fill="rgb(223,113,26)"/><text x="66.8082%" y="159.50">c..</text></g><g><title>evaluate_obligation (2,795,486 samples, 0.52%)</title><rect x="71.1905%" y="133" width="0.5237%" height="15" fill="rgb(206,192,2)"/><text x="71.4405%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,557,657 samples, 0.29%)</title><rect x="71.7149%" y="133" width="0.2918%" height="15" fill="rgb(241,108,4)"/><text x="71.9649%" y="143.50"></text></g><g><title>param_env (2,927,401 samples, 0.55%)</title><rect x="72.0088%" y="133" width="0.5484%" height="15" fill="rgb(247,173,49)"/><text x="72.2588%" y="143.50"></text></g><g><title>region_scope_tree (2,403,854 samples, 0.45%)</title><rect x="72.5648%" y="133" width="0.4504%" height="15" fill="rgb(224,114,35)"/><text x="72.8148%" y="143.50"></text></g><g><title>check_impl_item_well_formed (22,654,134 samples, 4.24%)</title><rect x="68.7763%" y="149" width="4.2443%" height="15" fill="rgb(245,159,27)"/><text x="69.0263%" y="159.50">check..</text></g><g><title>evaluate_obligation (5,072,084 samples, 0.95%)</title><rect x="76.0771%" y="133" width="0.9503%" height="15" fill="rgb(245,172,44)"/><text x="76.3271%" y="143.50"></text></g><g><title>implied_outlives_bounds (677,887 samples, 0.13%)</title><rect x="77.0649%" y="133" width="0.1270%" height="15" fill="rgb(236,23,11)"/><text x="77.3149%" y="143.50"></text></g><g><title>param_env (3,721,954 samples, 0.70%)</title><rect x="77.1924%" y="133" width="0.6973%" height="15" fill="rgb(205,117,38)"/><text x="77.4424%" y="143.50"></text></g><g><title>check_item_well_formed (27,245,589 samples, 5.10%)</title><rect x="73.0206%" y="149" width="5.1045%" height="15" fill="rgb(237,72,25)"/><text x="73.2706%" y="159.50">check_..</text></g><g><title>analysis (416,269,454 samples, 77.99%)</title><rect x="0.1814%" y="197" width="77.9882%" height="15" fill="rgb(244,70,9)"/><text x="0.4314%" y="207.50">analysis</text></g><g><title>type_check_crate (259,885,775 samples, 48.69%)</title><rect x="29.4799%" y="181" width="48.6897%" height="15" fill="rgb(217,125,39)"/><text x="29.7299%" y="191.50">type_check_crate</text></g><g><title>wf_checking (51,563,847 samples, 9.66%)</title><rect x="68.5091%" y="165" width="9.6605%" height="15" fill="rgb(235,36,10)"/><text x="68.7591%" y="175.50">wf_checking</text></g><g><title>AST_validation (643,837 samples, 0.12%)</title><rect x="78.2992%" y="181" width="0.1206%" height="15" fill="rgb(251,123,47)"/><text x="78.5492%" y="191.50"></text></g><g><title>metadata_register_crate (1,279,044 samples, 0.24%)</title><rect x="89.0787%" y="149" width="0.2396%" height="15" fill="rgb(221,13,13)"/><text x="89.3287%" y="159.50"></text></g><g><title>metadata_register_crate (543,315 samples, 0.10%)</title><rect x="89.2165%" y="133" width="0.1018%" height="15" fill="rgb(238,131,9)"/><text x="89.4665%" y="143.50"></text></g><g><title>macro_expand_crate (59,515,295 samples, 11.15%)</title><rect x="78.5065%" y="181" width="11.1502%" height="15" fill="rgb(211,50,8)"/><text x="78.7565%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (59,498,925 samples, 11.15%)</title><rect x="78.5095%" y="165" width="11.1471%" height="15" fill="rgb(245,182,24)"/><text x="78.7595%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,806,008 samples, 0.34%)</title><rect x="89.3183%" y="149" width="0.3384%" height="15" fill="rgb(242,14,37)"/><text x="89.5683%" y="159.50"></text></g><g><title>finalize_macro_resolutions (679,628 samples, 0.13%)</title><rect x="89.7618%" y="165" width="0.1273%" height="15" fill="rgb(246,228,12)"/><text x="90.0118%" y="175.50"></text></g><g><title>late_resolve_crate (9,446,386 samples, 1.77%)</title><rect x="89.8891%" y="165" width="1.7698%" height="15" fill="rgb(213,55,15)"/><text x="90.1391%" y="175.50"></text></g><g><title>configure_and_expand (72,412,449 samples, 13.57%)</title><rect x="78.2543%" y="197" width="13.5665%" height="15" fill="rgb(209,9,3)"/><text x="78.5043%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (11,330,787 samples, 2.12%)</title><rect x="89.6980%" y="181" width="2.1228%" height="15" fill="rgb(230,59,30)"/><text x="89.9480%" y="191.50">r..</text></g><g><title>drop_ast (1,705,539 samples, 0.32%)</title><rect x="91.8208%" y="197" width="0.3195%" height="15" fill="rgb(209,121,21)"/><text x="92.0708%" y="207.50"></text></g><g><title>early_lint_checks (2,625,679 samples, 0.49%)</title><rect x="92.1440%" y="197" width="0.4919%" height="15" fill="rgb(220,109,13)"/><text x="92.3940%" y="207.50"></text></g><g><title>free_global_ctxt (7,181,780 samples, 1.35%)</title><rect x="92.6359%" y="197" width="1.3455%" height="15" fill="rgb(232,18,1)"/><text x="92.8859%" y="207.50"></text></g><g><title>eval_to_const_value_raw (741,447 samples, 0.14%)</title><rect x="95.3001%" y="149" width="0.1389%" height="15" fill="rgb(215,41,42)"/><text x="95.5501%" y="159.50"></text></g><g><title>eval_to_const_value_raw (733,137 samples, 0.14%)</title><rect x="95.3017%" y="133" width="0.1374%" height="15" fill="rgb(224,123,36)"/><text x="95.5517%" y="143.50"></text></g><g><title>eval_to_allocation_raw (720,897 samples, 0.14%)</title><rect x="95.3040%" y="117" width="0.1351%" height="15" fill="rgb(240,125,3)"/><text x="95.5540%" y="127.50"></text></g><g><title>mir_for_ctfe (1,383,665 samples, 0.26%)</title><rect x="95.1852%" y="181" width="0.2592%" height="15" fill="rgb(205,98,50)"/><text x="95.4352%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (815,037 samples, 0.15%)</title><rect x="95.2917%" y="165" width="0.1527%" height="15" fill="rgb(205,185,37)"/><text x="95.5417%" y="175.50"></text></g><g><title>generate_crate_metadata (8,193,012 samples, 1.53%)</title><rect x="93.9814%" y="197" width="1.5350%" height="15" fill="rgb(238,207,15)"/><text x="94.2314%" y="207.50"></text></g><g><title>hir_lowering (19,300,865 samples, 3.62%)</title><rect x="95.5164%" y="197" width="3.6160%" height="15" fill="rgb(213,199,42)"/><text x="95.7664%" y="207.50">hir_..</text></g><g><title>parse_crate (1,254,484 samples, 0.24%)</title><rect x="99.1452%" y="197" width="0.2350%" height="15" fill="rgb(235,201,11)"/><text x="99.3952%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,342,556 samples, 0.44%)</title><rect x="99.4223%" y="197" width="0.4389%" height="15" fill="rgb(207,46,11)"/><text x="99.6723%" y="207.50"></text></g><g><title>all (533,759,328 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (533,759,328 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (618,947 samples, 0.12%)</title><rect x="99.8840%" y="197" width="0.1160%" height="15" fill="rgb(247,202,23)"/><text x="100.1340%" y="207.50"></text></g></svg></svg>