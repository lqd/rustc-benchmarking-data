<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (121,161 samples, 0.15%)</title><rect x="7.5774%" y="133" width="0.1521%" height="15" fill="rgb(227,0,7)"/><text x="7.8274%" y="143.50"></text></g><g><title>codegen_fn_attrs (112,153 samples, 0.14%)</title><rect x="7.9963%" y="117" width="0.1408%" height="15" fill="rgb(217,0,24)"/><text x="8.2463%" y="127.50"></text></g><g><title>is_copy_raw (105,850 samples, 0.13%)</title><rect x="9.7028%" y="53" width="0.1329%" height="15" fill="rgb(221,193,54)"/><text x="9.9528%" y="63.50"></text></g><g><title>evaluate_obligation (96,770 samples, 0.12%)</title><rect x="9.7142%" y="37" width="0.1215%" height="15" fill="rgb(248,212,6)"/><text x="9.9642%" y="47.50"></text></g><g><title>adt_drop_tys (158,123 samples, 0.20%)</title><rect x="9.6792%" y="69" width="0.1985%" height="15" fill="rgb(208,68,35)"/><text x="9.9292%" y="79.50"></text></g><g><title>adt_drop_tys (303,073 samples, 0.38%)</title><rect x="9.6521%" y="85" width="0.3804%" height="15" fill="rgb(232,128,0)"/><text x="9.9021%" y="95.50"></text></g><g><title>needs_drop_raw (555,529 samples, 0.70%)</title><rect x="9.6090%" y="101" width="0.6973%" height="15" fill="rgb(207,160,47)"/><text x="9.8590%" y="111.50"></text></g><g><title>is_copy_raw (218,135 samples, 0.27%)</title><rect x="10.0325%" y="85" width="0.2738%" height="15" fill="rgb(228,23,34)"/><text x="10.2825%" y="95.50"></text></g><g><title>evaluate_obligation (172,584 samples, 0.22%)</title><rect x="10.0897%" y="69" width="0.2166%" height="15" fill="rgb(218,30,26)"/><text x="10.3397%" y="79.50"></text></g><g><title>resolve_instance (275,731 samples, 0.35%)</title><rect x="10.3064%" y="101" width="0.3461%" height="15" fill="rgb(220,122,19)"/><text x="10.5564%" y="111.50"></text></g><g><title>thir_body (421,422 samples, 0.53%)</title><rect x="10.6698%" y="101" width="0.5290%" height="15" fill="rgb(250,228,42)"/><text x="10.9198%" y="111.50"></text></g><g><title>mir_const (3,337,174 samples, 4.19%)</title><rect x="7.0253%" y="149" width="4.1890%" height="15" fill="rgb(240,193,28)"/><text x="7.2753%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (2,776,161 samples, 3.48%)</title><rect x="7.7295%" y="133" width="3.4848%" height="15" fill="rgb(216,20,37)"/><text x="7.9795%" y="143.50">uns..</text></g><g><title>mir_built (2,451,426 samples, 3.08%)</title><rect x="8.1371%" y="117" width="3.0772%" height="15" fill="rgb(206,188,39)"/><text x="8.3871%" y="127.50">mir..</text></g><g><title>mir_promoted (3,749,710 samples, 4.71%)</title><rect x="6.5402%" y="165" width="4.7069%" height="15" fill="rgb(217,207,13)"/><text x="6.7902%" y="175.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (189,681 samples, 0.24%)</title><rect x="11.2470%" y="165" width="0.2381%" height="15" fill="rgb(231,73,38)"/><text x="11.4970%" y="175.50"></text></g><g><title>type_op_prove_predicate (433,431 samples, 0.54%)</title><rect x="11.5284%" y="165" width="0.5441%" height="15" fill="rgb(225,20,46)"/><text x="11.7784%" y="175.50"></text></g><g><title>MIR_borrow_checking (8,741,167 samples, 10.97%)</title><rect x="1.1051%" y="197" width="10.9725%" height="15" fill="rgb(210,31,41)"/><text x="1.3551%" y="207.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (8,676,696 samples, 10.89%)</title><rect x="1.1860%" y="181" width="10.8916%" height="15" fill="rgb(221,200,47)"/><text x="1.4360%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (105,080 samples, 0.13%)</title><rect x="12.0944%" y="197" width="0.1319%" height="15" fill="rgb(226,26,5)"/><text x="12.3444%" y="207.50"></text></g><g><title>should_inherit_track_caller (138,752 samples, 0.17%)</title><rect x="12.5432%" y="149" width="0.1742%" height="15" fill="rgb(249,33,26)"/><text x="12.7932%" y="159.50"></text></g><g><title>codegen_fn_attrs (277,343 samples, 0.35%)</title><rect x="12.3938%" y="165" width="0.3481%" height="15" fill="rgb(235,183,28)"/><text x="12.6438%" y="175.50"></text></g><g><title>check_mod_attrs (392,795 samples, 0.49%)</title><rect x="12.2490%" y="181" width="0.4931%" height="15" fill="rgb(221,5,38)"/><text x="12.4990%" y="191.50"></text></g><g><title>lookup_deprecation_entry (80,471 samples, 0.10%)</title><rect x="12.9760%" y="165" width="0.1010%" height="15" fill="rgb(247,18,42)"/><text x="13.2260%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (225,542 samples, 0.28%)</title><rect x="12.8619%" y="181" width="0.2831%" height="15" fill="rgb(241,131,45)"/><text x="13.1119%" y="191.50"></text></g><g><title>misc_checking_1 (772,309 samples, 0.97%)</title><rect x="12.2268%" y="197" width="0.9695%" height="15" fill="rgb(249,31,29)"/><text x="12.4768%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (176,042 samples, 0.22%)</title><rect x="13.1980%" y="181" width="0.2210%" height="15" fill="rgb(225,111,53)"/><text x="13.4480%" y="191.50"></text></g><g><title>check_mod_liveness (133,262 samples, 0.17%)</title><rect x="13.2517%" y="165" width="0.1673%" height="15" fill="rgb(238,160,17)"/><text x="13.5017%" y="175.50"></text></g><g><title>misc_checking_2 (449,455 samples, 0.56%)</title><rect x="13.1963%" y="197" width="0.5642%" height="15" fill="rgb(214,148,48)"/><text x="13.4463%" y="207.50"></text></g><g><title>match_checking (272,063 samples, 0.34%)</title><rect x="13.4190%" y="181" width="0.3415%" height="15" fill="rgb(232,36,49)"/><text x="13.6690%" y="191.50"></text></g><g><title>check_match (254,453 samples, 0.32%)</title><rect x="13.4411%" y="165" width="0.3194%" height="15" fill="rgb(209,103,24)"/><text x="13.6911%" y="175.50"></text></g><g><title>check_private_in_public (87,430 samples, 0.11%)</title><rect x="13.7721%" y="181" width="0.1097%" height="15" fill="rgb(229,88,8)"/><text x="14.0221%" y="191.50"></text></g><g><title>death_checking (284,463 samples, 0.36%)</title><rect x="13.8818%" y="181" width="0.3571%" height="15" fill="rgb(213,181,19)"/><text x="14.1318%" y="191.50"></text></g><g><title>item_attrs (144,242 samples, 0.18%)</title><rect x="14.0579%" y="165" width="0.1811%" height="15" fill="rgb(254,191,54)"/><text x="14.3079%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,742 samples, 0.18%)</title><rect x="14.0597%" y="149" width="0.1792%" height="15" fill="rgb(241,83,37)"/><text x="14.3097%" y="159.50"></text></g><g><title>param_env (119,441 samples, 0.15%)</title><rect x="14.9063%" y="149" width="0.1499%" height="15" fill="rgb(233,36,39)"/><text x="15.1563%" y="159.50"></text></g><g><title>crate_lints (1,708,949 samples, 2.15%)</title><rect x="14.2412%" y="165" width="2.1452%" height="15" fill="rgb(226,3,54)"/><text x="14.4912%" y="175.50">c..</text></g><g><title>type_of (1,057,541 samples, 1.33%)</title><rect x="15.0589%" y="149" width="1.3275%" height="15" fill="rgb(245,192,40)"/><text x="15.3089%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (824,778 samples, 1.04%)</title><rect x="15.3511%" y="133" width="1.0353%" height="15" fill="rgb(238,167,29)"/><text x="15.6011%" y="143.50"></text></g><g><title>lint_checking (1,868,221 samples, 2.35%)</title><rect x="14.2389%" y="181" width="2.3451%" height="15" fill="rgb(232,182,51)"/><text x="14.4889%" y="191.50">l..</text></g><g><title>module_lints (157,442 samples, 0.20%)</title><rect x="16.3864%" y="165" width="0.1976%" height="15" fill="rgb(231,60,39)"/><text x="16.6364%" y="175.50"></text></g><g><title>lint_mod (154,592 samples, 0.19%)</title><rect x="16.3900%" y="149" width="0.1941%" height="15" fill="rgb(208,69,12)"/><text x="16.6400%" y="159.50"></text></g><g><title>privacy_access_levels (110,851 samples, 0.14%)</title><rect x="16.5840%" y="181" width="0.1391%" height="15" fill="rgb(235,93,37)"/><text x="16.8340%" y="191.50"></text></g><g><title>privacy_checking_modules (282,203 samples, 0.35%)</title><rect x="16.7232%" y="181" width="0.3542%" height="15" fill="rgb(213,116,39)"/><text x="16.9732%" y="191.50"></text></g><g><title>check_mod_privacy (280,203 samples, 0.35%)</title><rect x="16.7257%" y="165" width="0.3517%" height="15" fill="rgb(222,207,29)"/><text x="16.9757%" y="175.50"></text></g><g><title>misc_checking_3 (2,659,900 samples, 3.34%)</title><rect x="13.7605%" y="197" width="3.3389%" height="15" fill="rgb(206,96,30)"/><text x="14.0105%" y="207.50">mis..</text></g><g><title>impl_parent (2,369,941 samples, 2.97%)</title><rect x="21.2497%" y="133" width="2.9749%" height="15" fill="rgb(218,138,4)"/><text x="21.4997%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,264,028 samples, 1.59%)</title><rect x="22.6379%" y="117" width="1.5867%" height="15" fill="rgb(250,191,14)"/><text x="22.8879%" y="127.50"></text></g><g><title>impl_trait_ref (4,590,282 samples, 5.76%)</title><rect x="24.2246%" y="133" width="5.7620%" height="15" fill="rgb(239,60,40)"/><text x="24.4746%" y="143.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,746,475 samples, 4.70%)</title><rect x="25.2838%" y="117" width="4.7028%" height="15" fill="rgb(206,27,48)"/><text x="25.5338%" y="127.50">metad..</text></g><g><title>coherent_trait (10,890,711 samples, 13.67%)</title><rect x="17.1854%" y="165" width="13.6707%" height="15" fill="rgb(225,35,8)"/><text x="17.4354%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (10,876,141 samples, 13.65%)</title><rect x="17.2037%" y="149" width="13.6524%" height="15" fill="rgb(250,213,24)"/><text x="17.4537%" y="159.50">specialization_graph_..</text></g><g><title>trait_impls_of (690,617 samples, 0.87%)</title><rect x="29.9892%" y="133" width="0.8669%" height="15" fill="rgb(247,123,22)"/><text x="30.2392%" y="143.50"></text></g><g><title>implementations_of_trait (166,613 samples, 0.21%)</title><rect x="30.6470%" y="117" width="0.2091%" height="15" fill="rgb(231,138,38)"/><text x="30.8970%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (138,222 samples, 0.17%)</title><rect x="30.6826%" y="101" width="0.1735%" height="15" fill="rgb(231,145,46)"/><text x="30.9326%" y="111.50"></text></g><g><title>coherence_checking (10,953,922 samples, 13.75%)</title><rect x="17.1553%" y="181" width="13.7501%" height="15" fill="rgb(251,118,11)"/><text x="17.4053%" y="191.50">coherence_checking</text></g><g><title>associated_item (123,500 samples, 0.16%)</title><rect x="38.8062%" y="117" width="0.1550%" height="15" fill="rgb(217,147,25)"/><text x="39.0562%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (95,720 samples, 0.12%)</title><rect x="38.8411%" y="101" width="0.1202%" height="15" fill="rgb(247,81,37)"/><text x="39.0911%" y="111.50"></text></g><g><title>associated_items (183,301 samples, 0.23%)</title><rect x="38.7452%" y="133" width="0.2301%" height="15" fill="rgb(209,12,38)"/><text x="38.9952%" y="143.50"></text></g><g><title>adt_dtorck_constraint (82,061 samples, 0.10%)</title><rect x="39.2108%" y="69" width="0.1030%" height="15" fill="rgb(227,1,9)"/><text x="39.4608%" y="79.50"></text></g><g><title>adt_dtorck_constraint (131,932 samples, 0.17%)</title><rect x="39.1667%" y="85" width="0.1656%" height="15" fill="rgb(248,47,43)"/><text x="39.4167%" y="95.50"></text></g><g><title>adt_dtorck_constraint (146,882 samples, 0.18%)</title><rect x="39.1535%" y="101" width="0.1844%" height="15" fill="rgb(221,10,30)"/><text x="39.4035%" y="111.50"></text></g><g><title>dropck_outlives (282,873 samples, 0.36%)</title><rect x="39.0025%" y="133" width="0.3551%" height="15" fill="rgb(210,229,1)"/><text x="39.2525%" y="143.50"></text></g><g><title>adt_dtorck_constraint (214,492 samples, 0.27%)</title><rect x="39.0884%" y="117" width="0.2692%" height="15" fill="rgb(222,148,37)"/><text x="39.3384%" y="127.50"></text></g><g><title>adt_def (162,682 samples, 0.20%)</title><rect x="39.8782%" y="101" width="0.2042%" height="15" fill="rgb(234,67,33)"/><text x="40.1282%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (160,932 samples, 0.20%)</title><rect x="39.8804%" y="85" width="0.2020%" height="15" fill="rgb(247,98,35)"/><text x="40.1304%" y="95.50"></text></g><g><title>item_attrs (137,712 samples, 0.17%)</title><rect x="39.9096%" y="69" width="0.1729%" height="15" fill="rgb(247,138,52)"/><text x="40.1596%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,642 samples, 0.17%)</title><rect x="39.9122%" y="53" width="0.1703%" height="15" fill="rgb(213,79,30)"/><text x="40.1622%" y="63.50"></text></g><g><title>adt_sized_constraint (182,202 samples, 0.23%)</title><rect x="39.8677%" y="117" width="0.2287%" height="15" fill="rgb(246,177,23)"/><text x="40.1177%" y="127.50"></text></g><g><title>impl_trait_ref (82,710 samples, 0.10%)</title><rect x="40.1891%" y="117" width="0.1038%" height="15" fill="rgb(230,62,27)"/><text x="40.4391%" y="127.50"></text></g><g><title>predicates_of (84,160 samples, 0.11%)</title><rect x="40.3009%" y="117" width="0.1056%" height="15" fill="rgb(216,154,8)"/><text x="40.5509%" y="127.50"></text></g><g><title>specializes (100,501 samples, 0.13%)</title><rect x="40.4065%" y="117" width="0.1262%" height="15" fill="rgb(244,35,45)"/><text x="40.6565%" y="127.50"></text></g><g><title>param_env (87,071 samples, 0.11%)</title><rect x="40.4234%" y="101" width="0.1093%" height="15" fill="rgb(251,115,12)"/><text x="40.6734%" y="111.50"></text></g><g><title>trait_impls_of (240,612 samples, 0.30%)</title><rect x="40.5383%" y="117" width="0.3020%" height="15" fill="rgb(240,54,50)"/><text x="40.7883%" y="127.50"></text></g><g><title>implementations_of_trait (89,362 samples, 0.11%)</title><rect x="40.7282%" y="101" width="0.1122%" height="15" fill="rgb(233,84,52)"/><text x="40.9782%" y="111.50"></text></g><g><title>evaluate_obligation (1,185,502 samples, 1.49%)</title><rect x="39.3576%" y="133" width="1.4881%" height="15" fill="rgb(207,117,47)"/><text x="39.6076%" y="143.50"></text></g><g><title>item_attrs (129,264 samples, 0.16%)</title><rect x="41.0723%" y="133" width="0.1623%" height="15" fill="rgb(249,43,39)"/><text x="41.3223%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (124,044 samples, 0.16%)</title><rect x="41.0789%" y="117" width="0.1557%" height="15" fill="rgb(209,38,44)"/><text x="41.3289%" y="127.50"></text></g><g><title>method_autoderef_steps (128,422 samples, 0.16%)</title><rect x="41.2696%" y="133" width="0.1612%" height="15" fill="rgb(236,212,23)"/><text x="41.5196%" y="143.50"></text></g><g><title>object_safety_violations (143,202 samples, 0.18%)</title><rect x="41.4308%" y="133" width="0.1798%" height="15" fill="rgb(242,79,21)"/><text x="41.6808%" y="143.50"></text></g><g><title>predicates_of (202,311 samples, 0.25%)</title><rect x="41.6402%" y="133" width="0.2540%" height="15" fill="rgb(211,96,35)"/><text x="41.8902%" y="143.50"></text></g><g><title>predicates_defined_on (133,851 samples, 0.17%)</title><rect x="41.7262%" y="117" width="0.1680%" height="15" fill="rgb(253,215,40)"/><text x="41.9762%" y="127.50"></text></g><g><title>associated_item (97,060 samples, 0.12%)</title><rect x="43.6360%" y="101" width="0.1218%" height="15" fill="rgb(211,81,21)"/><text x="43.8860%" y="111.50"></text></g><g><title>associated_items (140,330 samples, 0.18%)</title><rect x="43.5900%" y="117" width="0.1762%" height="15" fill="rgb(208,190,38)"/><text x="43.8400%" y="127.50"></text></g><g><title>adt_dtorck_constraint (88,060 samples, 0.11%)</title><rect x="43.8280%" y="69" width="0.1105%" height="15" fill="rgb(235,213,38)"/><text x="44.0780%" y="79.50"></text></g><g><title>adt_dtorck_constraint (114,792 samples, 0.14%)</title><rect x="43.8050%" y="85" width="0.1441%" height="15" fill="rgb(237,122,38)"/><text x="44.0550%" y="95.50"></text></g><g><title>dropck_outlives (142,292 samples, 0.18%)</title><rect x="43.7749%" y="117" width="0.1786%" height="15" fill="rgb(244,218,35)"/><text x="44.0249%" y="127.50"></text></g><g><title>adt_dtorck_constraint (126,302 samples, 0.16%)</title><rect x="43.7950%" y="101" width="0.1585%" height="15" fill="rgb(240,68,47)"/><text x="44.0450%" y="111.50"></text></g><g><title>evaluate_obligation (257,872 samples, 0.32%)</title><rect x="43.9535%" y="117" width="0.3237%" height="15" fill="rgb(210,16,53)"/><text x="44.2035%" y="127.50"></text></g><g><title>is_copy_raw (219,363 samples, 0.28%)</title><rect x="44.3502%" y="117" width="0.2754%" height="15" fill="rgb(235,124,12)"/><text x="44.6002%" y="127.50"></text></g><g><title>evaluate_obligation (209,282 samples, 0.26%)</title><rect x="44.3629%" y="101" width="0.2627%" height="15" fill="rgb(224,169,11)"/><text x="44.6129%" y="111.50"></text></g><g><title>trait_impls_of (176,122 samples, 0.22%)</title><rect x="44.4045%" y="85" width="0.2211%" height="15" fill="rgb(250,166,2)"/><text x="44.6545%" y="95.50"></text></g><g><title>typeck (2,204,424 samples, 2.77%)</title><rect x="41.9971%" y="133" width="2.7671%" height="15" fill="rgb(242,216,29)"/><text x="42.2471%" y="143.50">ty..</text></g><g><title>item_bodies_checking (11,055,483 samples, 13.88%)</title><rect x="30.9273%" y="181" width="13.8776%" height="15" fill="rgb(230,116,27)"/><text x="31.1773%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (11,052,573 samples, 13.87%)</title><rect x="30.9309%" y="165" width="13.8739%" height="15" fill="rgb(228,99,48)"/><text x="31.1809%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (10,806,000 samples, 13.56%)</title><rect x="31.2404%" y="149" width="13.5644%" height="15" fill="rgb(253,11,6)"/><text x="31.4904%" y="159.50">typeck</text></g><g><title>impl_trait_ref (135,881 samples, 0.17%)</title><rect x="45.3024%" y="101" width="0.1706%" height="15" fill="rgb(247,143,39)"/><text x="45.5524%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (117,011 samples, 0.15%)</title><rect x="45.3261%" y="85" width="0.1469%" height="15" fill="rgb(236,97,10)"/><text x="45.5761%" y="95.50"></text></g><g><title>adt_destructor (294,713 samples, 0.37%)</title><rect x="45.1381%" y="149" width="0.3699%" height="15" fill="rgb(233,208,19)"/><text x="45.3881%" y="159.50"></text></g><g><title>coherent_trait (291,923 samples, 0.37%)</title><rect x="45.1416%" y="133" width="0.3664%" height="15" fill="rgb(216,164,2)"/><text x="45.3916%" y="143.50"></text></g><g><title>specialization_graph_of (290,313 samples, 0.36%)</title><rect x="45.1436%" y="117" width="0.3644%" height="15" fill="rgb(220,129,5)"/><text x="45.3936%" y="127.50"></text></g><g><title>item_types_checking (637,487 samples, 0.80%)</title><rect x="44.8048%" y="181" width="0.8002%" height="15" fill="rgb(242,17,10)"/><text x="45.0548%" y="191.50"></text></g><g><title>check_mod_item_types (634,307 samples, 0.80%)</title><rect x="44.8088%" y="165" width="0.7962%" height="15" fill="rgb(242,107,0)"/><text x="45.0588%" y="175.50"></text></g><g><title>fn_sig (185,844 samples, 0.23%)</title><rect x="45.8014%" y="149" width="0.2333%" height="15" fill="rgb(251,28,31)"/><text x="46.0514%" y="159.50"></text></g><g><title>named_region_map (219,393 samples, 0.28%)</title><rect x="46.1275%" y="133" width="0.2754%" height="15" fill="rgb(233,223,10)"/><text x="46.3775%" y="143.50"></text></g><g><title>resolve_lifetimes (203,893 samples, 0.26%)</title><rect x="46.1469%" y="117" width="0.2559%" height="15" fill="rgb(215,21,27)"/><text x="46.3969%" y="127.50"></text></g><g><title>generics_of (303,224 samples, 0.38%)</title><rect x="46.0347%" y="149" width="0.3806%" height="15" fill="rgb(232,23,21)"/><text x="46.2847%" y="159.50"></text></g><g><title>explicit_predicates_of (143,940 samples, 0.18%)</title><rect x="46.5450%" y="117" width="0.1807%" height="15" fill="rgb(244,5,23)"/><text x="46.7950%" y="127.50"></text></g><g><title>predicates_of (253,380 samples, 0.32%)</title><rect x="46.4525%" y="149" width="0.3181%" height="15" fill="rgb(226,81,46)"/><text x="46.7025%" y="159.50"></text></g><g><title>predicates_defined_on (225,070 samples, 0.28%)</title><rect x="46.4881%" y="133" width="0.2825%" height="15" fill="rgb(247,70,30)"/><text x="46.7381%" y="143.50"></text></g><g><title>type_collecting (1,024,451 samples, 1.29%)</title><rect x="45.6074%" y="181" width="1.2860%" height="15" fill="rgb(212,68,19)"/><text x="45.8574%" y="191.50"></text></g><g><title>collect_mod_item_types (1,017,071 samples, 1.28%)</title><rect x="45.6167%" y="165" width="1.2767%" height="15" fill="rgb(240,187,13)"/><text x="45.8667%" y="175.50"></text></g><g><title>evaluate_obligation (84,542 samples, 0.11%)</title><rect x="47.5670%" y="149" width="0.1061%" height="15" fill="rgb(223,113,26)"/><text x="47.8170%" y="159.50"></text></g><g><title>check_impl_item_well_formed (745,300 samples, 0.94%)</title><rect x="47.0008%" y="165" width="0.9355%" height="15" fill="rgb(206,192,2)"/><text x="47.2508%" y="175.50"></text></g><g><title>adt_sized_constraint (84,470 samples, 0.11%)</title><rect x="48.9888%" y="117" width="0.1060%" height="15" fill="rgb(241,108,4)"/><text x="49.2388%" y="127.50"></text></g><g><title>adt_sized_constraint (124,450 samples, 0.16%)</title><rect x="48.9402%" y="133" width="0.1562%" height="15" fill="rgb(247,173,49)"/><text x="49.1902%" y="143.50"></text></g><g><title>evaluate_obligation (271,684 samples, 0.34%)</title><rect x="48.7564%" y="149" width="0.3410%" height="15" fill="rgb(224,114,35)"/><text x="49.0064%" y="159.50"></text></g><g><title>implied_outlives_bounds (97,882 samples, 0.12%)</title><rect x="49.1023%" y="149" width="0.1229%" height="15" fill="rgb(245,159,27)"/><text x="49.3523%" y="159.50"></text></g><g><title>param_env (242,402 samples, 0.30%)</title><rect x="49.2252%" y="149" width="0.3043%" height="15" fill="rgb(245,172,44)"/><text x="49.4752%" y="159.50"></text></g><g><title>predicates_of (80,471 samples, 0.10%)</title><rect x="49.5294%" y="149" width="0.1010%" height="15" fill="rgb(236,23,11)"/><text x="49.7794%" y="159.50"></text></g><g><title>region_scope_tree (83,890 samples, 0.11%)</title><rect x="49.6305%" y="149" width="0.1053%" height="15" fill="rgb(205,117,38)"/><text x="49.8805%" y="159.50"></text></g><g><title>check_item_well_formed (1,499,425 samples, 1.88%)</title><rect x="47.9363%" y="165" width="1.8822%" height="15" fill="rgb(237,72,25)"/><text x="48.1863%" y="175.50">c..</text></g><g><title>evaluate_obligation (94,761 samples, 0.12%)</title><rect x="50.1482%" y="149" width="0.1190%" height="15" fill="rgb(244,70,9)"/><text x="50.3982%" y="159.50"></text></g><g><title>analysis (39,396,259 samples, 49.45%)</title><rect x="0.9004%" y="213" width="49.4528%" height="15" fill="rgb(217,125,39)"/><text x="1.1504%" y="223.50">analysis</text></g><g><title>type_check_crate (26,491,455 samples, 33.25%)</title><rect x="17.0993%" y="197" width="33.2538%" height="15" fill="rgb(235,36,10)"/><text x="17.3493%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,753,311 samples, 3.46%)</title><rect x="46.8970%" y="181" width="3.4561%" height="15" fill="rgb(251,123,47)"/><text x="47.1470%" y="191.50">wf_..</text></g><g><title>check_trait_item_well_formed (425,945 samples, 0.53%)</title><rect x="49.8185%" y="165" width="0.5347%" height="15" fill="rgb(221,13,13)"/><text x="50.0685%" y="175.50"></text></g><g><title>codegen_crate (365,064 samples, 0.46%)</title><rect x="50.3678%" y="213" width="0.4583%" height="15" fill="rgb(238,131,9)"/><text x="50.6178%" y="223.50"></text></g><g><title>AST_validation (172,662 samples, 0.22%)</title><rect x="51.1068%" y="197" width="0.2167%" height="15" fill="rgb(211,50,8)"/><text x="51.3568%" y="207.50"></text></g><g><title>crate_injection (87,941 samples, 0.11%)</title><rect x="51.3949%" y="197" width="0.1104%" height="15" fill="rgb(245,182,24)"/><text x="51.6449%" y="207.50"></text></g><g><title>metadata_load_macro (114,413 samples, 0.14%)</title><rect x="70.2535%" y="165" width="0.1436%" height="15" fill="rgb(242,14,37)"/><text x="70.5035%" y="175.50"></text></g><g><title>metadata_register_crate (2,623,189 samples, 3.29%)</title><rect x="70.3971%" y="165" width="3.2928%" height="15" fill="rgb(246,228,12)"/><text x="70.6471%" y="175.50">met..</text></g><g><title>metadata_register_crate (968,111 samples, 1.22%)</title><rect x="72.4747%" y="149" width="1.2152%" height="15" fill="rgb(213,55,15)"/><text x="72.7247%" y="159.50"></text></g><g><title>metadata_register_crate (83,802 samples, 0.11%)</title><rect x="73.5847%" y="133" width="0.1052%" height="15" fill="rgb(209,9,3)"/><text x="73.8347%" y="143.50"></text></g><g><title>macro_expand_crate (17,832,759 samples, 22.38%)</title><rect x="51.5053%" y="197" width="22.3848%" height="15" fill="rgb(230,59,30)"/><text x="51.7553%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (17,805,028 samples, 22.35%)</title><rect x="51.5401%" y="181" width="22.3500%" height="15" fill="rgb(209,121,21)"/><text x="51.7901%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (159,532 samples, 0.20%)</title><rect x="73.6899%" y="165" width="0.2003%" height="15" fill="rgb(220,109,13)"/><text x="73.9399%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (235,533 samples, 0.30%)</title><rect x="73.8959%" y="197" width="0.2957%" height="15" fill="rgb(232,18,1)"/><text x="74.1459%" y="207.50"></text></g><g><title>finalize_imports (90,081 samples, 0.11%)</title><rect x="74.2041%" y="181" width="0.1131%" height="15" fill="rgb(215,41,42)"/><text x="74.4541%" y="191.50"></text></g><g><title>finalize_macro_resolutions (230,943 samples, 0.29%)</title><rect x="74.3171%" y="181" width="0.2899%" height="15" fill="rgb(224,123,36)"/><text x="74.5671%" y="191.50"></text></g><g><title>late_resolve_crate (8,954,660 samples, 11.24%)</title><rect x="74.6070%" y="181" width="11.2405%" height="15" fill="rgb(240,125,3)"/><text x="74.8570%" y="191.50">late_resolve_crate</text></g><g><title>configure_and_expand (27,997,142 samples, 35.14%)</title><rect x="50.8261%" y="213" width="35.1438%" height="15" fill="rgb(205,98,50)"/><text x="51.0761%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (9,383,165 samples, 11.78%)</title><rect x="74.1916%" y="197" width="11.7784%" height="15" fill="rgb(205,185,37)"/><text x="74.4416%" y="207.50">resolve_crate</text></g><g><title>drop_ast (111,991 samples, 0.14%)</title><rect x="85.9699%" y="213" width="0.1406%" height="15" fill="rgb(238,207,15)"/><text x="86.2199%" y="223.50"></text></g><g><title>early_lint_checks (180,502 samples, 0.23%)</title><rect x="86.1304%" y="213" width="0.2266%" height="15" fill="rgb(213,199,42)"/><text x="86.3804%" y="223.50"></text></g><g><title>free_global_ctxt (2,909,582 samples, 3.65%)</title><rect x="86.3569%" y="213" width="3.6523%" height="15" fill="rgb(235,201,11)"/><text x="86.6069%" y="223.50">free..</text></g><g><title>generate_crate_metadata (629,247 samples, 0.79%)</title><rect x="90.0092%" y="213" width="0.7899%" height="15" fill="rgb(207,46,11)"/><text x="90.2592%" y="223.50"></text></g><g><title>hir_lowering (1,783,930 samples, 2.24%)</title><rect x="90.7991%" y="213" width="2.2393%" height="15" fill="rgb(241,35,35)"/><text x="91.0491%" y="223.50">h..</text></g><g><title>parse_crate (4,082,896 samples, 5.13%)</title><rect x="93.1052%" y="213" width="5.1251%" height="15" fill="rgb(243,32,47)"/><text x="93.3552%" y="223.50">parse_..</text></g><g><title>prepare_outputs (273,893 samples, 0.34%)</title><rect x="98.2401%" y="213" width="0.3438%" height="15" fill="rgb(247,202,23)"/><text x="98.4901%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (729,908 samples, 0.92%)</title><rect x="98.5839%" y="213" width="0.9162%" height="15" fill="rgb(219,102,11)"/><text x="98.8339%" y="223.50"></text></g><g><title>setup_global_ctxt (81,331 samples, 0.10%)</title><rect x="99.5138%" y="213" width="0.1021%" height="15" fill="rgb(243,110,44)"/><text x="99.7638%" y="223.50"></text></g><g><title>all (79,664,428 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (79,664,428 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (306,013 samples, 0.38%)</title><rect x="99.6159%" y="213" width="0.3841%" height="15" fill="rgb(226,22,26)"/><text x="99.8659%" y="223.50"></text></g></svg></svg>