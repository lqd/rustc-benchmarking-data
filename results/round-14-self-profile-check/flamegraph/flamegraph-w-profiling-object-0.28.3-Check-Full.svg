<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (19,471,200 samples, 0.47%)</title><rect x="16.7930%" y="133" width="0.4714%" height="15" fill="rgb(227,0,7)"/><text x="17.0430%" y="143.50"></text></g><g><title>is_late_bound_map (11,136,174 samples, 0.27%)</title><rect x="17.2644%" y="133" width="0.2696%" height="15" fill="rgb(217,0,24)"/><text x="17.5144%" y="143.50"></text></g><g><title>resolve_lifetimes (5,016,118 samples, 0.12%)</title><rect x="17.4125%" y="117" width="0.1214%" height="15" fill="rgb(221,193,54)"/><text x="17.6625%" y="127.50"></text></g><g><title>is_copy_raw (6,789,566 samples, 0.16%)</title><rect x="22.0304%" y="69" width="0.1644%" height="15" fill="rgb(248,212,6)"/><text x="22.2804%" y="79.50"></text></g><g><title>evaluate_obligation (4,821,617 samples, 0.12%)</title><rect x="22.0780%" y="53" width="0.1167%" height="15" fill="rgb(208,68,35)"/><text x="22.3280%" y="63.50"></text></g><g><title>is_copy_raw (54,037,641 samples, 1.31%)</title><rect x="22.3503%" y="53" width="1.3082%" height="15" fill="rgb(232,128,0)"/><text x="22.6003%" y="63.50"></text></g><g><title>evaluate_obligation (45,909,905 samples, 1.11%)</title><rect x="22.5471%" y="37" width="1.1114%" height="15" fill="rgb(207,160,47)"/><text x="22.7971%" y="47.50"></text></g><g><title>needs_drop_raw (60,641,416 samples, 1.47%)</title><rect x="22.1947%" y="69" width="1.4681%" height="15" fill="rgb(228,23,34)"/><text x="22.4447%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (11,035,113 samples, 0.27%)</title><rect x="23.7821%" y="53" width="0.2672%" height="15" fill="rgb(218,30,26)"/><text x="24.0321%" y="63.50"></text></g><g><title>resolve_instance (18,061,347 samples, 0.44%)</title><rect x="23.6639%" y="69" width="0.4372%" height="15" fill="rgb(220,122,19)"/><text x="23.9139%" y="79.50"></text></g><g><title>thir_body (42,823,523 samples, 1.04%)</title><rect x="24.1222%" y="69" width="1.0367%" height="15" fill="rgb(250,228,42)"/><text x="24.3722%" y="79.50"></text></g><g><title>mir_const (281,123,649 samples, 6.81%)</title><rect x="18.4294%" y="117" width="6.8058%" height="15" fill="rgb(240,193,28)"/><text x="18.6794%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (255,619,582 samples, 6.19%)</title><rect x="19.0468%" y="101" width="6.1883%" height="15" fill="rgb(216,20,37)"/><text x="19.2968%" y="111.50">unsafety..</text></g><g><title>mir_built (236,362,703 samples, 5.72%)</title><rect x="19.5130%" y="85" width="5.7221%" height="15" fill="rgb(206,188,39)"/><text x="19.7630%" y="95.50">mir_bui..</text></g><g><title>thir_body (7,319,772 samples, 0.18%)</title><rect x="26.7250%" y="53" width="0.1772%" height="15" fill="rgb(217,207,13)"/><text x="26.9750%" y="63.50"></text></g><g><title>mir_const (57,288,192 samples, 1.39%)</title><rect x="25.5296%" y="101" width="1.3869%" height="15" fill="rgb(231,73,38)"/><text x="25.7796%" y="111.50"></text></g><g><title>unsafety_check_result (41,147,712 samples, 1.00%)</title><rect x="25.9204%" y="85" width="0.9962%" height="15" fill="rgb(225,20,46)"/><text x="26.1704%" y="95.50"></text></g><g><title>mir_built (36,381,189 samples, 0.88%)</title><rect x="26.0358%" y="69" width="0.8808%" height="15" fill="rgb(210,31,41)"/><text x="26.2858%" y="79.50"></text></g><g><title>mir_const_qualif (69,453,879 samples, 1.68%)</title><rect x="25.2351%" y="117" width="1.6814%" height="15" fill="rgb(221,200,47)"/><text x="25.4851%" y="127.50"></text></g><g><title>mir_promoted (386,042,162 samples, 9.35%)</title><rect x="17.5708%" y="133" width="9.3457%" height="15" fill="rgb(226,26,5)"/><text x="17.8208%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (11,837,354 samples, 0.29%)</title><rect x="26.9173%" y="133" width="0.2866%" height="15" fill="rgb(249,33,26)"/><text x="27.1673%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (33,136,828 samples, 0.80%)</title><rect x="27.2039%" y="133" width="0.8022%" height="15" fill="rgb(235,183,28)"/><text x="27.4539%" y="143.50"></text></g><g><title>normalize_projection_ty (19,861,166 samples, 0.48%)</title><rect x="27.5253%" y="117" width="0.4808%" height="15" fill="rgb(221,5,38)"/><text x="27.7753%" y="127.50"></text></g><g><title>type_op_normalize_predicate (17,267,101 samples, 0.42%)</title><rect x="28.0061%" y="133" width="0.4180%" height="15" fill="rgb(247,18,42)"/><text x="28.2561%" y="143.50"></text></g><g><title>normalize_projection_ty (8,601,192 samples, 0.21%)</title><rect x="28.2159%" y="117" width="0.2082%" height="15" fill="rgb(241,131,45)"/><text x="28.4659%" y="127.50"></text></g><g><title>type_op_normalize_ty (8,999,871 samples, 0.22%)</title><rect x="28.4241%" y="133" width="0.2179%" height="15" fill="rgb(249,31,29)"/><text x="28.6741%" y="143.50"></text></g><g><title>type_op_prove_predicate (145,955,906 samples, 3.53%)</title><rect x="28.6420%" y="133" width="3.5335%" height="15" fill="rgb(225,111,53)"/><text x="28.8920%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (1,311,029,742 samples, 31.74%)</title><rect x="0.4401%" y="165" width="31.7389%" height="15" fill="rgb(238,160,17)"/><text x="0.6901%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,298,258,890 samples, 31.43%)</title><rect x="0.7493%" y="149" width="31.4297%" height="15" fill="rgb(214,148,48)"/><text x="0.9993%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (35,848,081 samples, 0.87%)</title><rect x="32.1790%" y="165" width="0.8679%" height="15" fill="rgb(232,36,49)"/><text x="32.4290%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (30,010,192 samples, 0.73%)</title><rect x="32.3203%" y="149" width="0.7265%" height="15" fill="rgb(209,103,24)"/><text x="32.5703%" y="159.50"></text></g><g><title>hir_module_items (8,803,083 samples, 0.21%)</title><rect x="33.0468%" y="165" width="0.2131%" height="15" fill="rgb(229,88,8)"/><text x="33.2968%" y="175.50"></text></g><g><title>codegen_fn_attrs (7,388,390 samples, 0.18%)</title><rect x="33.5075%" y="133" width="0.1789%" height="15" fill="rgb(213,181,19)"/><text x="33.7575%" y="143.50"></text></g><g><title>should_inherit_track_caller (6,339,067 samples, 0.15%)</title><rect x="33.5329%" y="117" width="0.1535%" height="15" fill="rgb(254,191,54)"/><text x="33.7829%" y="127.50"></text></g><g><title>check_mod_attrs (17,464,860 samples, 0.42%)</title><rect x="33.2636%" y="149" width="0.4228%" height="15" fill="rgb(241,83,37)"/><text x="33.5136%" y="159.50"></text></g><g><title>check_mod_const_bodies (4,149,540 samples, 0.10%)</title><rect x="33.6864%" y="149" width="0.1005%" height="15" fill="rgb(233,36,39)"/><text x="33.9364%" y="159.50"></text></g><g><title>check_mod_loops (4,383,416 samples, 0.11%)</title><rect x="33.7868%" y="149" width="0.1061%" height="15" fill="rgb(226,3,54)"/><text x="34.0368%" y="159.50"></text></g><g><title>lint_levels (10,578,779 samples, 0.26%)</title><rect x="34.0048%" y="133" width="0.2561%" height="15" fill="rgb(245,192,40)"/><text x="34.2548%" y="143.50"></text></g><g><title>lookup_deprecation_entry (7,523,692 samples, 0.18%)</title><rect x="34.2609%" y="133" width="0.1821%" height="15" fill="rgb(238,167,29)"/><text x="34.5109%" y="143.50"></text></g><g><title>stability_index (7,207,801 samples, 0.17%)</title><rect x="34.2685%" y="117" width="0.1745%" height="15" fill="rgb(232,182,51)"/><text x="34.5185%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (22,327,537 samples, 0.54%)</title><rect x="33.9082%" y="149" width="0.5405%" height="15" fill="rgb(231,60,39)"/><text x="34.1582%" y="159.50"></text></g><g><title>misc_checking_1 (51,286,855 samples, 1.24%)</title><rect x="33.2600%" y="165" width="1.2416%" height="15" fill="rgb(208,69,12)"/><text x="33.5100%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (18,467,717 samples, 0.45%)</title><rect x="34.5017%" y="149" width="0.4471%" height="15" fill="rgb(235,93,37)"/><text x="34.7517%" y="159.50"></text></g><g><title>check_mod_liveness (14,551,380 samples, 0.35%)</title><rect x="34.5965%" y="133" width="0.3523%" height="15" fill="rgb(213,116,39)"/><text x="34.8465%" y="143.50"></text></g><g><title>mir_borrowck (12,142,973 samples, 0.29%)</title><rect x="35.8946%" y="37" width="0.2940%" height="15" fill="rgb(222,207,29)"/><text x="36.1446%" y="47.50"></text></g><g><title>mir_for_ctfe (18,898,710 samples, 0.46%)</title><rect x="35.7333%" y="69" width="0.4575%" height="15" fill="rgb(206,96,30)"/><text x="35.9833%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,250,132 samples, 0.42%)</title><rect x="35.7732%" y="53" width="0.4176%" height="15" fill="rgb(218,138,4)"/><text x="36.0232%" y="63.50"></text></g><g><title>eval_to_const_value_raw (22,861,909 samples, 0.55%)</title><rect x="35.6429%" y="117" width="0.5535%" height="15" fill="rgb(250,191,14)"/><text x="35.8929%" y="127.50"></text></g><g><title>eval_to_const_value_raw (22,616,784 samples, 0.55%)</title><rect x="35.6488%" y="101" width="0.5475%" height="15" fill="rgb(239,60,40)"/><text x="35.8988%" y="111.50"></text></g><g><title>eval_to_allocation_raw (22,140,006 samples, 0.54%)</title><rect x="35.6604%" y="85" width="0.5360%" height="15" fill="rgb(206,27,48)"/><text x="35.9104%" y="95.50"></text></g><g><title>mir_const_qualif (5,649,631 samples, 0.14%)</title><rect x="36.1980%" y="117" width="0.1368%" height="15" fill="rgb(225,35,8)"/><text x="36.4480%" y="127.50"></text></g><g><title>mir_const (4,815,136 samples, 0.12%)</title><rect x="36.2182%" y="101" width="0.1166%" height="15" fill="rgb(250,213,24)"/><text x="36.4682%" y="111.50"></text></g><g><title>misc_checking_2 (79,021,106 samples, 1.91%)</title><rect x="34.5016%" y="165" width="1.9130%" height="15" fill="rgb(247,123,22)"/><text x="34.7516%" y="175.50">m..</text></g><g><title>match_checking (60,549,749 samples, 1.47%)</title><rect x="34.9488%" y="149" width="1.4659%" height="15" fill="rgb(231,138,38)"/><text x="35.1988%" y="159.50"></text></g><g><title>check_match (57,737,306 samples, 1.40%)</title><rect x="35.0168%" y="133" width="1.3978%" height="15" fill="rgb(231,145,46)"/><text x="35.2668%" y="143.50"></text></g><g><title>check_private_in_public (16,827,098 samples, 0.41%)</title><rect x="36.4153%" y="149" width="0.4074%" height="15" fill="rgb(251,118,11)"/><text x="36.6653%" y="159.50"></text></g><g><title>death_checking (25,694,548 samples, 0.62%)</title><rect x="36.8226%" y="149" width="0.6220%" height="15" fill="rgb(217,147,25)"/><text x="37.0726%" y="159.50"></text></g><g><title>mir_for_ctfe (10,905,903 samples, 0.26%)</title><rect x="38.6156%" y="69" width="0.2640%" height="15" fill="rgb(247,81,37)"/><text x="38.8656%" y="79.50"></text></g><g><title>eval_to_const_value_raw (33,410,869 samples, 0.81%)</title><rect x="38.0758%" y="117" width="0.8088%" height="15" fill="rgb(209,12,38)"/><text x="38.3258%" y="127.50"></text></g><g><title>eval_to_const_value_raw (30,438,719 samples, 0.74%)</title><rect x="38.1477%" y="101" width="0.7369%" height="15" fill="rgb(227,1,9)"/><text x="38.3977%" y="111.50"></text></g><g><title>eval_to_allocation_raw (27,345,393 samples, 0.66%)</title><rect x="38.2226%" y="85" width="0.6620%" height="15" fill="rgb(248,47,43)"/><text x="38.4726%" y="95.50"></text></g><g><title>param_env (5,936,534 samples, 0.14%)</title><rect x="38.8846%" y="117" width="0.1437%" height="15" fill="rgb(221,10,30)"/><text x="39.1346%" y="127.50"></text></g><g><title>crate_lints (66,866,409 samples, 1.62%)</title><rect x="37.4448%" y="133" width="1.6188%" height="15" fill="rgb(210,229,1)"/><text x="37.6948%" y="143.50"></text></g><g><title>lint_checking (92,125,232 samples, 2.23%)</title><rect x="37.4447%" y="149" width="2.2303%" height="15" fill="rgb(222,148,37)"/><text x="37.6947%" y="159.50">l..</text></g><g><title>module_lints (25,254,173 samples, 0.61%)</title><rect x="39.0636%" y="133" width="0.6114%" height="15" fill="rgb(234,67,33)"/><text x="39.3136%" y="143.50"></text></g><g><title>lint_mod (25,189,953 samples, 0.61%)</title><rect x="39.0651%" y="117" width="0.6098%" height="15" fill="rgb(247,98,35)"/><text x="39.3151%" y="127.50"></text></g><g><title>privacy_access_levels (29,739,724 samples, 0.72%)</title><rect x="39.6749%" y="149" width="0.7200%" height="15" fill="rgb(247,138,52)"/><text x="39.9249%" y="159.50"></text></g><g><title>privacy_checking_modules (42,945,061 samples, 1.04%)</title><rect x="40.3949%" y="149" width="1.0397%" height="15" fill="rgb(213,79,30)"/><text x="40.6449%" y="159.50"></text></g><g><title>check_mod_privacy (42,886,221 samples, 1.04%)</title><rect x="40.3963%" y="133" width="1.0382%" height="15" fill="rgb(246,177,23)"/><text x="40.6463%" y="143.50"></text></g><g><title>misc_checking_3 (207,913,950 samples, 5.03%)</title><rect x="36.4146%" y="165" width="5.0334%" height="15" fill="rgb(230,62,27)"/><text x="36.6646%" y="175.50">misc_c..</text></g><g><title>impl_trait_ref (7,703,345 samples, 0.19%)</title><rect x="41.9491%" y="101" width="0.1865%" height="15" fill="rgb(216,154,8)"/><text x="42.1991%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,376,632 samples, 0.15%)</title><rect x="41.9812%" y="85" width="0.1544%" height="15" fill="rgb(244,35,45)"/><text x="42.2312%" y="95.50"></text></g><g><title>coherent_trait (26,276,635 samples, 0.64%)</title><rect x="41.5416%" y="133" width="0.6361%" height="15" fill="rgb(251,115,12)"/><text x="41.7916%" y="143.50"></text></g><g><title>specialization_graph_of (18,670,901 samples, 0.45%)</title><rect x="41.7258%" y="117" width="0.4520%" height="15" fill="rgb(240,54,50)"/><text x="41.9758%" y="127.50"></text></g><g><title>coherence_checking (27,895,022 samples, 0.68%)</title><rect x="41.5405%" y="149" width="0.6753%" height="15" fill="rgb(233,84,52)"/><text x="41.7905%" y="159.50"></text></g><g><title>dropck_outlives (18,268,373 samples, 0.44%)</title><rect x="67.4997%" y="101" width="0.4423%" height="15" fill="rgb(207,117,47)"/><text x="67.7497%" y="111.50"></text></g><g><title>evaluate_obligation (51,905,240 samples, 1.26%)</title><rect x="68.0022%" y="101" width="1.2566%" height="15" fill="rgb(249,43,39)"/><text x="68.2522%" y="111.50"></text></g><g><title>method_autoderef_steps (11,981,470 samples, 0.29%)</title><rect x="69.3579%" y="101" width="0.2901%" height="15" fill="rgb(209,38,44)"/><text x="69.6079%" y="111.50"></text></g><g><title>evaluate_obligation (5,552,499 samples, 0.13%)</title><rect x="69.5136%" y="85" width="0.1344%" height="15" fill="rgb(236,212,23)"/><text x="69.7636%" y="95.50"></text></g><g><title>evaluate_obligation (15,676,890 samples, 0.38%)</title><rect x="72.4825%" y="85" width="0.3795%" height="15" fill="rgb(242,79,21)"/><text x="72.7325%" y="95.50"></text></g><g><title>method_autoderef_steps (4,610,416 samples, 0.11%)</title><rect x="73.0100%" y="85" width="0.1116%" height="15" fill="rgb(211,96,35)"/><text x="73.2600%" y="95.50"></text></g><g><title>typeck (138,824,709 samples, 3.36%)</title><rect x="69.7882%" y="101" width="3.3608%" height="15" fill="rgb(253,215,40)"/><text x="70.0382%" y="111.50">typ..</text></g><g><title>item_bodies_checking (1,276,622,105 samples, 30.91%)</title><rect x="42.2638%" y="149" width="30.9059%" height="15" fill="rgb(211,81,21)"/><text x="42.5138%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,276,617,795 samples, 30.91%)</title><rect x="42.2639%" y="133" width="30.9058%" height="15" fill="rgb(208,190,38)"/><text x="42.5139%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,272,273,195 samples, 30.80%)</title><rect x="42.3691%" y="117" width="30.8006%" height="15" fill="rgb(235,213,38)"/><text x="42.6191%" y="127.50">typeck</text></g><g><title>mir_built (4,485,990 samples, 0.11%)</title><rect x="74.9282%" y="37" width="0.1086%" height="15" fill="rgb(237,122,38)"/><text x="75.1782%" y="47.50"></text></g><g><title>mir_const (4,937,495 samples, 0.12%)</title><rect x="74.9218%" y="69" width="0.1195%" height="15" fill="rgb(244,218,35)"/><text x="75.1718%" y="79.50"></text></g><g><title>unsafety_check_result (4,824,514 samples, 0.12%)</title><rect x="74.9245%" y="53" width="0.1168%" height="15" fill="rgb(240,68,47)"/><text x="75.1745%" y="63.50"></text></g><g><title>mir_promoted (4,974,315 samples, 0.12%)</title><rect x="74.9210%" y="85" width="0.1204%" height="15" fill="rgb(210,16,53)"/><text x="75.1710%" y="95.50"></text></g><g><title>type_of (10,173,685 samples, 0.25%)</title><rect x="74.8149%" y="117" width="0.2463%" height="15" fill="rgb(235,124,12)"/><text x="75.0649%" y="127.50"></text></g><g><title>mir_borrowck (10,114,414 samples, 0.24%)</title><rect x="74.8163%" y="101" width="0.2449%" height="15" fill="rgb(224,169,11)"/><text x="75.0663%" y="111.50"></text></g><g><title>evaluate_obligation (9,241,471 samples, 0.22%)</title><rect x="76.0140%" y="101" width="0.2237%" height="15" fill="rgb(250,166,2)"/><text x="76.2640%" y="111.50"></text></g><g><title>item_types_checking (127,840,253 samples, 3.09%)</title><rect x="73.1697%" y="149" width="3.0949%" height="15" fill="rgb(242,216,29)"/><text x="73.4197%" y="159.50">ite..</text></g><g><title>check_mod_item_types (127,761,452 samples, 3.09%)</title><rect x="73.1716%" y="133" width="3.0930%" height="15" fill="rgb(230,116,27)"/><text x="73.4216%" y="143.50">che..</text></g><g><title>typeck (49,708,356 samples, 1.20%)</title><rect x="75.0612%" y="117" width="1.2034%" height="15" fill="rgb(228,99,48)"/><text x="75.3112%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,639,542 samples, 0.11%)</title><rect x="76.6336%" y="117" width="0.1123%" height="15" fill="rgb(253,11,6)"/><text x="76.8836%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,621,532 samples, 0.11%)</title><rect x="76.6340%" y="101" width="0.1119%" height="15" fill="rgb(247,143,39)"/><text x="76.8840%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,609,382 samples, 0.11%)</title><rect x="76.6343%" y="85" width="0.1116%" height="15" fill="rgb(236,97,10)"/><text x="76.8843%" y="95.50"></text></g><g><title>fn_sig (8,095,833 samples, 0.20%)</title><rect x="76.7459%" y="117" width="0.1960%" height="15" fill="rgb(233,208,19)"/><text x="76.9959%" y="127.50"></text></g><g><title>is_late_bound_map (8,256,911 samples, 0.20%)</title><rect x="77.0799%" y="101" width="0.1999%" height="15" fill="rgb(216,164,2)"/><text x="77.3299%" y="111.50"></text></g><g><title>resolve_lifetimes (7,792,599 samples, 0.19%)</title><rect x="77.0912%" y="85" width="0.1887%" height="15" fill="rgb(220,129,5)"/><text x="77.3412%" y="95.50"></text></g><g><title>generics_of (18,576,561 samples, 0.45%)</title><rect x="76.9419%" y="117" width="0.4497%" height="15" fill="rgb(242,17,10)"/><text x="77.1919%" y="127.50"></text></g><g><title>explicit_predicates_of (12,007,143 samples, 0.29%)</title><rect x="77.7093%" y="85" width="0.2907%" height="15" fill="rgb(242,107,0)"/><text x="77.9593%" y="95.50"></text></g><g><title>predicates_of (35,023,457 samples, 0.85%)</title><rect x="77.4665%" y="117" width="0.8479%" height="15" fill="rgb(251,28,31)"/><text x="77.7165%" y="127.50"></text></g><g><title>predicates_defined_on (31,344,617 samples, 0.76%)</title><rect x="77.5556%" y="101" width="0.7588%" height="15" fill="rgb(233,223,10)"/><text x="77.8056%" y="111.50"></text></g><g><title>inferred_outlives_of (12,988,190 samples, 0.31%)</title><rect x="78.0000%" y="85" width="0.3144%" height="15" fill="rgb(215,21,27)"/><text x="78.2500%" y="95.50"></text></g><g><title>inferred_outlives_crate (11,805,433 samples, 0.29%)</title><rect x="78.0286%" y="69" width="0.2858%" height="15" fill="rgb(232,23,21)"/><text x="78.2786%" y="79.50"></text></g><g><title>type_of (5,139,580 samples, 0.12%)</title><rect x="78.1900%" y="53" width="0.1244%" height="15" fill="rgb(244,5,23)"/><text x="78.4400%" y="63.50"></text></g><g><title>type_collecting (89,091,798 samples, 2.16%)</title><rect x="76.2660%" y="149" width="2.1568%" height="15" fill="rgb(226,81,46)"/><text x="76.5160%" y="159.50">t..</text></g><g><title>collect_mod_item_types (89,023,777 samples, 2.16%)</title><rect x="76.2677%" y="133" width="2.1552%" height="15" fill="rgb(247,70,30)"/><text x="76.5177%" y="143.50">c..</text></g><g><title>type_of (4,410,120 samples, 0.11%)</title><rect x="78.3161%" y="117" width="0.1068%" height="15" fill="rgb(212,68,19)"/><text x="78.5661%" y="127.50"></text></g><g><title>evaluate_obligation (13,596,150 samples, 0.33%)</title><rect x="81.2971%" y="117" width="0.3292%" height="15" fill="rgb(240,187,13)"/><text x="81.5471%" y="127.50"></text></g><g><title>implied_outlives_bounds (15,311,905 samples, 0.37%)</title><rect x="81.6314%" y="117" width="0.3707%" height="15" fill="rgb(223,113,26)"/><text x="81.8814%" y="127.50"></text></g><g><title>param_env (17,674,392 samples, 0.43%)</title><rect x="82.0021%" y="117" width="0.4279%" height="15" fill="rgb(206,192,2)"/><text x="82.2521%" y="127.50"></text></g><g><title>region_scope_tree (14,235,428 samples, 0.34%)</title><rect x="82.4311%" y="117" width="0.3446%" height="15" fill="rgb(241,108,4)"/><text x="82.6811%" y="127.50"></text></g><g><title>check_impl_item_well_formed (168,192,935 samples, 4.07%)</title><rect x="78.7061%" y="133" width="4.0718%" height="15" fill="rgb(247,173,49)"/><text x="78.9561%" y="143.50">chec..</text></g><g><title>evaluate_obligation (5,972,772 samples, 0.14%)</title><rect x="85.2432%" y="117" width="0.1446%" height="15" fill="rgb(224,114,35)"/><text x="85.4932%" y="127.50"></text></g><g><title>implied_outlives_bounds (7,174,435 samples, 0.17%)</title><rect x="85.4104%" y="117" width="0.1737%" height="15" fill="rgb(245,159,27)"/><text x="85.6604%" y="127.50"></text></g><g><title>param_env (24,390,528 samples, 0.59%)</title><rect x="85.5841%" y="117" width="0.5905%" height="15" fill="rgb(245,172,44)"/><text x="85.8341%" y="127.50"></text></g><g><title>region_scope_tree (5,239,620 samples, 0.13%)</title><rect x="86.1773%" y="117" width="0.1268%" height="15" fill="rgb(236,23,11)"/><text x="86.4273%" y="127.50"></text></g><g><title>check_item_well_formed (149,796,184 samples, 3.63%)</title><rect x="82.7779%" y="133" width="3.6264%" height="15" fill="rgb(205,117,38)"/><text x="83.0279%" y="143.50">chec..</text></g><g><title>analysis (3,587,625,062 samples, 86.85%)</title><rect x="0.2095%" y="181" width="86.8533%" height="15" fill="rgb(237,72,25)"/><text x="0.4595%" y="191.50">analysis</text></g><g><title>type_check_crate (1,884,198,933 samples, 45.61%)</title><rect x="41.4480%" y="165" width="45.6148%" height="15" fill="rgb(244,70,9)"/><text x="41.6980%" y="175.50">type_check_crate</text></g><g><title>wf_checking (356,086,430 samples, 8.62%)</title><rect x="78.4423%" y="149" width="8.6205%" height="15" fill="rgb(217,125,39)"/><text x="78.6923%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (27,201,190 samples, 0.66%)</title><rect x="86.4044%" y="133" width="0.6585%" height="15" fill="rgb(235,36,10)"/><text x="86.6544%" y="143.50"></text></g><g><title>AST_validation (8,552,856 samples, 0.21%)</title><rect x="87.0777%" y="165" width="0.2071%" height="15" fill="rgb(251,123,47)"/><text x="87.3277%" y="175.50"></text></g><g><title>complete_gated_feature_checking (5,218,739 samples, 0.13%)</title><rect x="87.2848%" y="165" width="0.1263%" height="15" fill="rgb(221,13,13)"/><text x="87.5348%" y="175.50"></text></g><g><title>macro_expand_crate (186,495,379 samples, 4.51%)</title><rect x="87.4126%" y="165" width="4.5149%" height="15" fill="rgb(238,131,9)"/><text x="87.6626%" y="175.50">macro..</text></g><g><title>expand_crate (186,480,489 samples, 4.51%)</title><rect x="87.4129%" y="149" width="4.5145%" height="15" fill="rgb(211,50,8)"/><text x="87.6629%" y="159.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (4,339,782 samples, 0.11%)</title><rect x="91.8224%" y="133" width="0.1051%" height="15" fill="rgb(245,182,24)"/><text x="92.0724%" y="143.50"></text></g><g><title>late_resolve_crate (52,742,891 samples, 1.28%)</title><rect x="92.0289%" y="149" width="1.2769%" height="15" fill="rgb(242,14,37)"/><text x="92.2789%" y="159.50"></text></g><g><title>resolve_check_unused (4,454,290 samples, 0.11%)</title><rect x="93.3323%" y="149" width="0.1078%" height="15" fill="rgb(246,228,12)"/><text x="93.5823%" y="159.50"></text></g><g><title>configure_and_expand (266,937,712 samples, 6.46%)</title><rect x="87.0740%" y="181" width="6.4623%" height="15" fill="rgb(213,55,15)"/><text x="87.3240%" y="191.50">configur..</text></g><g><title>resolve_crate (66,356,023 samples, 1.61%)</title><rect x="91.9299%" y="165" width="1.6064%" height="15" fill="rgb(209,9,3)"/><text x="92.1799%" y="175.50"></text></g><g><title>drop_ast (10,699,300 samples, 0.26%)</title><rect x="93.5363%" y="181" width="0.2590%" height="15" fill="rgb(230,59,30)"/><text x="93.7863%" y="191.50"></text></g><g><title>early_lint_checks (17,617,308 samples, 0.43%)</title><rect x="93.7960%" y="181" width="0.4265%" height="15" fill="rgb(209,121,21)"/><text x="94.0460%" y="191.50"></text></g><g><title>free_global_ctxt (29,204,317 samples, 0.71%)</title><rect x="94.2225%" y="181" width="0.7070%" height="15" fill="rgb(220,109,13)"/><text x="94.4725%" y="191.50"></text></g><g><title>param_env (7,164,068 samples, 0.17%)</title><rect x="96.3364%" y="149" width="0.1734%" height="15" fill="rgb(232,18,1)"/><text x="96.5864%" y="159.50"></text></g><g><title>mir_for_ctfe (8,582,505 samples, 0.21%)</title><rect x="96.3035%" y="165" width="0.2078%" height="15" fill="rgb(215,41,42)"/><text x="96.5535%" y="175.50"></text></g><g><title>generate_crate_metadata (69,246,976 samples, 1.68%)</title><rect x="94.9295%" y="181" width="1.6764%" height="15" fill="rgb(224,123,36)"/><text x="95.1795%" y="191.50"></text></g><g><title>hir_lowering (125,142,072 samples, 3.03%)</title><rect x="96.6059%" y="181" width="3.0296%" height="15" fill="rgb(240,125,3)"/><text x="96.8559%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (10,850,092 samples, 0.26%)</title><rect x="99.6516%" y="181" width="0.2627%" height="15" fill="rgb(205,98,50)"/><text x="99.9016%" y="191.50"></text></g><g><title>all (4,130,670,767 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (4,130,670,767 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>