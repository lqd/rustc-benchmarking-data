<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (317,965 samples, 0.18%)</title><rect x="11.4014%" y="149" width="0.1777%" height="15" fill="rgb(227,0,7)"/><text x="11.6514%" y="159.50"></text></g><g><title>param_env (357,465 samples, 0.20%)</title><rect x="12.9209%" y="117" width="0.1997%" height="15" fill="rgb(217,0,24)"/><text x="13.1709%" y="127.50"></text></g><g><title>item_attrs (204,732 samples, 0.11%)</title><rect x="13.5815%" y="85" width="0.1144%" height="15" fill="rgb(221,193,54)"/><text x="13.8315%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (195,821 samples, 0.11%)</title><rect x="13.5864%" y="69" width="0.1094%" height="15" fill="rgb(248,212,6)"/><text x="13.8364%" y="79.50"></text></g><g><title>codegen_fn_attrs (318,634 samples, 0.18%)</title><rect x="13.5304%" y="101" width="0.1780%" height="15" fill="rgb(208,68,35)"/><text x="13.7804%" y="111.50"></text></g><g><title>is_copy_raw (323,182 samples, 0.18%)</title><rect x="15.6943%" y="85" width="0.1806%" height="15" fill="rgb(232,128,0)"/><text x="15.9443%" y="95.50"></text></g><g><title>evaluate_obligation (258,512 samples, 0.14%)</title><rect x="15.7304%" y="69" width="0.1444%" height="15" fill="rgb(207,160,47)"/><text x="15.9804%" y="79.50"></text></g><g><title>is_copy_raw (1,375,470 samples, 0.77%)</title><rect x="16.0461%" y="69" width="0.7686%" height="15" fill="rgb(228,23,34)"/><text x="16.2961%" y="79.50"></text></g><g><title>evaluate_obligation (1,184,578 samples, 0.66%)</title><rect x="16.1528%" y="53" width="0.6619%" height="15" fill="rgb(218,30,26)"/><text x="16.4028%" y="63.50"></text></g><g><title>needs_drop_raw (1,713,275 samples, 0.96%)</title><rect x="15.8760%" y="85" width="0.9573%" height="15" fill="rgb(220,122,19)"/><text x="16.1260%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,088,732 samples, 0.61%)</title><rect x="17.0232%" y="69" width="0.6084%" height="15" fill="rgb(250,228,42)"/><text x="17.2732%" y="79.50"></text></g><g><title>impl_parent (372,344 samples, 0.21%)</title><rect x="17.9989%" y="53" width="0.2081%" height="15" fill="rgb(240,193,28)"/><text x="18.2489%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (248,111 samples, 0.14%)</title><rect x="18.0683%" y="37" width="0.1386%" height="15" fill="rgb(216,20,37)"/><text x="18.3183%" y="47.50"></text></g><g><title>specialization_graph_of (1,658,599 samples, 0.93%)</title><rect x="17.6723%" y="69" width="0.9268%" height="15" fill="rgb(206,188,39)"/><text x="17.9223%" y="79.50"></text></g><g><title>impl_trait_ref (701,814 samples, 0.39%)</title><rect x="18.2069%" y="53" width="0.3922%" height="15" fill="rgb(217,207,13)"/><text x="18.4569%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (588,133 samples, 0.33%)</title><rect x="18.2704%" y="37" width="0.3286%" height="15" fill="rgb(231,73,38)"/><text x="18.5204%" y="47.50"></text></g><g><title>resolve_instance (3,285,928 samples, 1.84%)</title><rect x="16.8333%" y="85" width="1.8361%" height="15" fill="rgb(225,20,46)"/><text x="17.0833%" y="95.50">r..</text></g><g><title>thir_body (1,326,200 samples, 0.74%)</title><rect x="18.6908%" y="85" width="0.7410%" height="15" fill="rgb(210,31,41)"/><text x="18.9408%" y="95.50"></text></g><g><title>mir_const (13,074,248 samples, 7.31%)</title><rect x="12.1959%" y="133" width="7.3055%" height="15" fill="rgb(221,200,47)"/><text x="12.4459%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (11,419,237 samples, 6.38%)</title><rect x="13.1207%" y="117" width="6.3807%" height="15" fill="rgb(226,26,5)"/><text x="13.3707%" y="127.50">unsafety..</text></g><g><title>mir_built (10,367,355 samples, 5.79%)</title><rect x="13.7084%" y="101" width="5.7930%" height="15" fill="rgb(249,33,26)"/><text x="13.9584%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (14,066,180 samples, 7.86%)</title><rect x="11.6687%" y="149" width="7.8598%" height="15" fill="rgb(235,183,28)"/><text x="11.9187%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (418,704 samples, 0.23%)</title><rect x="19.5284%" y="149" width="0.2340%" height="15" fill="rgb(221,5,38)"/><text x="19.7784%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,266,074 samples, 1.27%)</title><rect x="19.7624%" y="149" width="1.2662%" height="15" fill="rgb(247,18,42)"/><text x="20.0124%" y="159.50"></text></g><g><title>normalize_projection_ty (1,271,604 samples, 0.71%)</title><rect x="20.3181%" y="133" width="0.7105%" height="15" fill="rgb(241,131,45)"/><text x="20.5681%" y="143.50"></text></g><g><title>type_op_normalize_predicate (684,025 samples, 0.38%)</title><rect x="21.0286%" y="149" width="0.3822%" height="15" fill="rgb(249,31,29)"/><text x="21.2786%" y="159.50"></text></g><g><title>type_op_normalize_ty (736,897 samples, 0.41%)</title><rect x="21.4108%" y="149" width="0.4118%" height="15" fill="rgb(225,111,53)"/><text x="21.6608%" y="159.50"></text></g><g><title>normalize_projection_ty (203,012 samples, 0.11%)</title><rect x="21.7091%" y="133" width="0.1134%" height="15" fill="rgb(238,160,17)"/><text x="21.9591%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,862,455 samples, 2.72%)</title><rect x="21.8226%" y="149" width="2.7170%" height="15" fill="rgb(214,148,48)"/><text x="22.0726%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (42,237,977 samples, 23.60%)</title><rect x="0.9391%" y="181" width="23.6014%" height="15" fill="rgb(232,36,49)"/><text x="1.1891%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,094,047 samples, 23.52%)</title><rect x="1.0195%" y="165" width="23.5210%" height="15" fill="rgb(209,103,24)"/><text x="1.2695%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (442,367 samples, 0.25%)</title><rect x="24.5633%" y="181" width="0.2472%" height="15" fill="rgb(229,88,8)"/><text x="24.8133%" y="191.50"></text></g><g><title>codegen_fn_attrs (266,463 samples, 0.15%)</title><rect x="25.2599%" y="117" width="0.1489%" height="15" fill="rgb(213,181,19)"/><text x="25.5099%" y="127.50"></text></g><g><title>codegen_fn_attrs (547,234 samples, 0.31%)</title><rect x="25.1112%" y="149" width="0.3058%" height="15" fill="rgb(254,191,54)"/><text x="25.3612%" y="159.50"></text></g><g><title>should_inherit_track_caller (436,904 samples, 0.24%)</title><rect x="25.1728%" y="133" width="0.2441%" height="15" fill="rgb(241,83,37)"/><text x="25.4228%" y="143.50"></text></g><g><title>check_mod_attrs (1,028,860 samples, 0.57%)</title><rect x="24.8422%" y="165" width="0.5749%" height="15" fill="rgb(233,36,39)"/><text x="25.0922%" y="175.50"></text></g><g><title>check_mod_const_bodies (255,622 samples, 0.14%)</title><rect x="25.4171%" y="165" width="0.1428%" height="15" fill="rgb(226,3,54)"/><text x="25.6671%" y="175.50"></text></g><g><title>lookup_deprecation_entry (316,053 samples, 0.18%)</title><rect x="25.8778%" y="149" width="0.1766%" height="15" fill="rgb(245,192,40)"/><text x="26.1278%" y="159.50"></text></g><g><title>stability_index (225,933 samples, 0.13%)</title><rect x="25.9281%" y="133" width="0.1262%" height="15" fill="rgb(238,167,29)"/><text x="26.1781%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (796,888 samples, 0.45%)</title><rect x="25.6697%" y="165" width="0.4453%" height="15" fill="rgb(232,182,51)"/><text x="25.9197%" y="175.50"></text></g><g><title>misc_checking_1 (2,487,777 samples, 1.39%)</title><rect x="24.8107%" y="181" width="1.3901%" height="15" fill="rgb(231,60,39)"/><text x="25.0607%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (609,746 samples, 0.34%)</title><rect x="26.2020%" y="165" width="0.3407%" height="15" fill="rgb(208,69,12)"/><text x="26.4520%" y="175.50"></text></g><g><title>check_mod_liveness (487,536 samples, 0.27%)</title><rect x="26.2702%" y="149" width="0.2724%" height="15" fill="rgb(235,93,37)"/><text x="26.5202%" y="159.50"></text></g><g><title>misc_checking_2 (1,275,014 samples, 0.71%)</title><rect x="26.2008%" y="181" width="0.7124%" height="15" fill="rgb(213,116,39)"/><text x="26.4508%" y="191.50"></text></g><g><title>match_checking (663,248 samples, 0.37%)</title><rect x="26.5427%" y="165" width="0.3706%" height="15" fill="rgb(222,207,29)"/><text x="26.7927%" y="175.50"></text></g><g><title>check_match (627,466 samples, 0.35%)</title><rect x="26.5627%" y="149" width="0.3506%" height="15" fill="rgb(206,96,30)"/><text x="26.8127%" y="159.50"></text></g><g><title>check_private_in_public (323,854 samples, 0.18%)</title><rect x="26.9191%" y="165" width="0.1810%" height="15" fill="rgb(218,138,4)"/><text x="27.1691%" y="175.50"></text></g><g><title>death_checking (670,647 samples, 0.37%)</title><rect x="27.1000%" y="165" width="0.3747%" height="15" fill="rgb(250,191,14)"/><text x="27.3500%" y="175.50"></text></g><g><title>param_env (892,076 samples, 0.50%)</title><rect x="27.9764%" y="133" width="0.4985%" height="15" fill="rgb(239,60,40)"/><text x="28.2264%" y="143.50"></text></g><g><title>predicates_of (392,741 samples, 0.22%)</title><rect x="28.2554%" y="117" width="0.2195%" height="15" fill="rgb(206,27,48)"/><text x="28.5054%" y="127.50"></text></g><g><title>predicates_defined_on (312,571 samples, 0.17%)</title><rect x="28.3002%" y="101" width="0.1747%" height="15" fill="rgb(225,35,8)"/><text x="28.5502%" y="111.50"></text></g><g><title>crate_lints (2,905,592 samples, 1.62%)</title><rect x="27.4756%" y="149" width="1.6236%" height="15" fill="rgb(250,213,24)"/><text x="27.7256%" y="159.50"></text></g><g><title>type_of (1,111,082 samples, 0.62%)</title><rect x="28.4783%" y="133" width="0.6208%" height="15" fill="rgb(247,123,22)"/><text x="28.7283%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (875,019 samples, 0.49%)</title><rect x="28.6102%" y="117" width="0.4889%" height="15" fill="rgb(231,138,38)"/><text x="28.8602%" y="127.50"></text></g><g><title>lint_checking (3,436,188 samples, 1.92%)</title><rect x="27.4748%" y="165" width="1.9200%" height="15" fill="rgb(231,145,46)"/><text x="27.7248%" y="175.50">l..</text></g><g><title>module_lints (529,076 samples, 0.30%)</title><rect x="29.0992%" y="149" width="0.2956%" height="15" fill="rgb(251,118,11)"/><text x="29.3492%" y="159.50"></text></g><g><title>lint_mod (519,376 samples, 0.29%)</title><rect x="29.1046%" y="133" width="0.2902%" height="15" fill="rgb(217,147,25)"/><text x="29.3546%" y="143.50"></text></g><g><title>privacy_access_levels (340,314 samples, 0.19%)</title><rect x="29.3948%" y="165" width="0.1902%" height="15" fill="rgb(247,81,37)"/><text x="29.6448%" y="175.50"></text></g><g><title>privacy_checking_modules (1,339,335 samples, 0.75%)</title><rect x="29.5850%" y="165" width="0.7484%" height="15" fill="rgb(209,12,38)"/><text x="29.8350%" y="175.50"></text></g><g><title>check_mod_privacy (1,330,795 samples, 0.74%)</title><rect x="29.5897%" y="149" width="0.7436%" height="15" fill="rgb(227,1,9)"/><text x="29.8397%" y="159.50"></text></g><g><title>misc_checking_3 (6,142,948 samples, 3.43%)</title><rect x="26.9133%" y="181" width="3.4325%" height="15" fill="rgb(248,47,43)"/><text x="27.1633%" y="191.50">mis..</text></g><g><title>adt_destructor (309,983 samples, 0.17%)</title><rect x="30.4348%" y="133" width="0.1732%" height="15" fill="rgb(221,10,30)"/><text x="30.6848%" y="143.50"></text></g><g><title>coherent_trait (306,393 samples, 0.17%)</title><rect x="30.4368%" y="117" width="0.1712%" height="15" fill="rgb(210,229,1)"/><text x="30.6868%" y="127.50"></text></g><g><title>specialization_graph_of (305,413 samples, 0.17%)</title><rect x="30.4373%" y="101" width="0.1707%" height="15" fill="rgb(222,148,37)"/><text x="30.6873%" y="111.50"></text></g><g><title>impl_parent (1,867,998 samples, 1.04%)</title><rect x="32.0167%" y="117" width="1.0438%" height="15" fill="rgb(234,67,33)"/><text x="32.2667%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (987,955 samples, 0.55%)</title><rect x="32.5084%" y="101" width="0.5520%" height="15" fill="rgb(247,98,35)"/><text x="32.7584%" y="111.50"></text></g><g><title>impl_trait_ref (4,367,225 samples, 2.44%)</title><rect x="33.0605%" y="117" width="2.4403%" height="15" fill="rgb(247,138,52)"/><text x="33.3105%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,710,178 samples, 2.07%)</title><rect x="33.4276%" y="101" width="2.0731%" height="15" fill="rgb(213,79,30)"/><text x="33.6776%" y="111.50">m..</text></g><g><title>coherent_trait (9,612,977 samples, 5.37%)</title><rect x="30.4165%" y="149" width="5.3715%" height="15" fill="rgb(246,177,23)"/><text x="30.6665%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (9,187,572 samples, 5.13%)</title><rect x="30.6542%" y="133" width="5.1338%" height="15" fill="rgb(230,62,27)"/><text x="30.9042%" y="143.50">specia..</text></g><g><title>trait_impls_of (512,157 samples, 0.29%)</title><rect x="35.5018%" y="117" width="0.2862%" height="15" fill="rgb(216,154,8)"/><text x="35.7518%" y="127.50"></text></g><g><title>coherence_checking (9,693,897 samples, 5.42%)</title><rect x="30.4070%" y="165" width="5.4167%" height="15" fill="rgb(244,35,45)"/><text x="30.6570%" y="175.50">coheren..</text></g><g><title>associated_items (261,036 samples, 0.15%)</title><rect x="50.9082%" y="117" width="0.1459%" height="15" fill="rgb(251,115,12)"/><text x="51.1582%" y="127.50"></text></g><g><title>dropck_outlives (611,498 samples, 0.34%)</title><rect x="51.0900%" y="117" width="0.3417%" height="15" fill="rgb(240,54,50)"/><text x="51.3400%" y="127.50"></text></g><g><title>generics_of (279,214 samples, 0.16%)</title><rect x="52.6707%" y="101" width="0.1560%" height="15" fill="rgb(233,84,52)"/><text x="52.9207%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (221,993 samples, 0.12%)</title><rect x="52.7026%" y="85" width="0.1240%" height="15" fill="rgb(207,117,47)"/><text x="52.9526%" y="95.50"></text></g><g><title>impl_trait_ref (328,473 samples, 0.18%)</title><rect x="52.8627%" y="101" width="0.1835%" height="15" fill="rgb(249,43,39)"/><text x="53.1127%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (273,772 samples, 0.15%)</title><rect x="52.8933%" y="85" width="0.1530%" height="15" fill="rgb(209,38,44)"/><text x="53.1433%" y="95.50"></text></g><g><title>specializes (330,663 samples, 0.18%)</title><rect x="53.1539%" y="101" width="0.1848%" height="15" fill="rgb(236,212,23)"/><text x="53.4039%" y="111.50"></text></g><g><title>param_env (220,682 samples, 0.12%)</title><rect x="53.2154%" y="85" width="0.1233%" height="15" fill="rgb(242,79,21)"/><text x="53.4654%" y="95.50"></text></g><g><title>trait_impls_of (377,684 samples, 0.21%)</title><rect x="53.3452%" y="101" width="0.2110%" height="15" fill="rgb(211,96,35)"/><text x="53.5952%" y="111.50"></text></g><g><title>evaluate_obligation (3,814,798 samples, 2.13%)</title><rect x="51.4317%" y="117" width="2.1316%" height="15" fill="rgb(253,215,40)"/><text x="51.6817%" y="127.50">e..</text></g><g><title>generics_of (190,260 samples, 0.11%)</title><rect x="53.6382%" y="117" width="0.1063%" height="15" fill="rgb(211,81,21)"/><text x="53.8882%" y="127.50"></text></g><g><title>impl_item_implementor_ids (197,421 samples, 0.11%)</title><rect x="53.7445%" y="117" width="0.1103%" height="15" fill="rgb(208,190,38)"/><text x="53.9945%" y="127.50"></text></g><g><title>associated_items (182,051 samples, 0.10%)</title><rect x="53.7531%" y="101" width="0.1017%" height="15" fill="rgb(235,213,38)"/><text x="54.0031%" y="111.50"></text></g><g><title>impl_trait_ref (202,703 samples, 0.11%)</title><rect x="53.8614%" y="117" width="0.1133%" height="15" fill="rgb(237,122,38)"/><text x="54.1114%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (190,463 samples, 0.11%)</title><rect x="53.8682%" y="101" width="0.1064%" height="15" fill="rgb(244,218,35)"/><text x="54.1182%" y="111.50"></text></g><g><title>evaluate_obligation (303,322 samples, 0.17%)</title><rect x="54.3556%" y="101" width="0.1695%" height="15" fill="rgb(240,68,47)"/><text x="54.6056%" y="111.50"></text></g><g><title>method_autoderef_steps (807,169 samples, 0.45%)</title><rect x="54.0794%" y="117" width="0.4510%" height="15" fill="rgb(210,16,53)"/><text x="54.3294%" y="127.50"></text></g><g><title>predicates_of (360,217 samples, 0.20%)</title><rect x="54.5552%" y="117" width="0.2013%" height="15" fill="rgb(235,124,12)"/><text x="54.8052%" y="127.50"></text></g><g><title>predicates_defined_on (243,384 samples, 0.14%)</title><rect x="54.6205%" y="101" width="0.1360%" height="15" fill="rgb(224,169,11)"/><text x="54.8705%" y="111.50"></text></g><g><title>associated_items (241,225 samples, 0.13%)</title><rect x="60.8905%" y="101" width="0.1348%" height="15" fill="rgb(250,166,2)"/><text x="61.1405%" y="111.50"></text></g><g><title>trait_impls_of (369,895 samples, 0.21%)</title><rect x="61.7783%" y="85" width="0.2067%" height="15" fill="rgb(242,216,29)"/><text x="62.0283%" y="95.50"></text></g><g><title>evaluate_obligation (1,505,343 samples, 0.84%)</title><rect x="61.1444%" y="101" width="0.8411%" height="15" fill="rgb(230,116,27)"/><text x="61.3944%" y="111.50"></text></g><g><title>method_autoderef_steps (231,863 samples, 0.13%)</title><rect x="62.1867%" y="101" width="0.1296%" height="15" fill="rgb(228,99,48)"/><text x="62.4367%" y="111.50"></text></g><g><title>typeck (13,655,781 samples, 7.63%)</title><rect x="54.8248%" y="117" width="7.6305%" height="15" fill="rgb(253,11,6)"/><text x="55.0748%" y="127.50">typeck</text></g><g><title>item_bodies_checking (47,669,517 samples, 26.64%)</title><rect x="35.8439%" y="165" width="26.6364%" height="15" fill="rgb(247,143,39)"/><text x="36.0939%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,666,627 samples, 26.63%)</title><rect x="35.8455%" y="149" width="26.6348%" height="15" fill="rgb(236,97,10)"/><text x="36.0955%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (47,579,005 samples, 26.59%)</title><rect x="35.8945%" y="133" width="26.5858%" height="15" fill="rgb(233,208,19)"/><text x="36.1445%" y="143.50">typeck</text></g><g><title>item_types_checking (2,101,703 samples, 1.17%)</title><rect x="62.4803%" y="165" width="1.1744%" height="15" fill="rgb(216,164,2)"/><text x="62.7303%" y="175.50"></text></g><g><title>check_mod_item_types (2,090,543 samples, 1.17%)</title><rect x="62.4865%" y="149" width="1.1681%" height="15" fill="rgb(220,129,5)"/><text x="62.7365%" y="159.50"></text></g><g><title>fn_sig (350,014 samples, 0.20%)</title><rect x="63.8670%" y="133" width="0.1956%" height="15" fill="rgb(242,17,10)"/><text x="64.1170%" y="143.50"></text></g><g><title>named_region_map (359,974 samples, 0.20%)</title><rect x="64.1357%" y="117" width="0.2011%" height="15" fill="rgb(242,107,0)"/><text x="64.3857%" y="127.50"></text></g><g><title>resolve_lifetimes (336,264 samples, 0.19%)</title><rect x="64.1490%" y="101" width="0.1879%" height="15" fill="rgb(251,28,31)"/><text x="64.3990%" y="111.50"></text></g><g><title>lint_levels (209,262 samples, 0.12%)</title><rect x="64.2199%" y="85" width="0.1169%" height="15" fill="rgb(233,223,10)"/><text x="64.4699%" y="95.50"></text></g><g><title>generics_of (514,807 samples, 0.29%)</title><rect x="64.0626%" y="133" width="0.2877%" height="15" fill="rgb(215,21,27)"/><text x="64.3126%" y="143.50"></text></g><g><title>late_bound_vars_map (300,064 samples, 0.17%)</title><rect x="64.7194%" y="85" width="0.1677%" height="15" fill="rgb(232,23,21)"/><text x="64.9694%" y="95.50"></text></g><g><title>resolve_lifetimes (281,694 samples, 0.16%)</title><rect x="64.7296%" y="69" width="0.1574%" height="15" fill="rgb(244,5,23)"/><text x="64.9796%" y="79.50"></text></g><g><title>explicit_predicates_of (685,949 samples, 0.38%)</title><rect x="64.5420%" y="101" width="0.3833%" height="15" fill="rgb(226,81,46)"/><text x="64.7920%" y="111.50"></text></g><g><title>predicates_of (1,688,039 samples, 0.94%)</title><rect x="64.4512%" y="133" width="0.9432%" height="15" fill="rgb(247,70,30)"/><text x="64.7012%" y="143.50"></text></g><g><title>predicates_defined_on (1,625,199 samples, 0.91%)</title><rect x="64.4864%" y="117" width="0.9081%" height="15" fill="rgb(212,68,19)"/><text x="64.7364%" y="127.50"></text></g><g><title>inferred_outlives_of (839,740 samples, 0.47%)</title><rect x="64.9253%" y="101" width="0.4692%" height="15" fill="rgb(240,187,13)"/><text x="65.1753%" y="111.50"></text></g><g><title>inferred_outlives_crate (809,058 samples, 0.45%)</title><rect x="64.9424%" y="85" width="0.4521%" height="15" fill="rgb(223,113,26)"/><text x="65.1924%" y="95.50"></text></g><g><title>type_of (613,706 samples, 0.34%)</title><rect x="65.0516%" y="69" width="0.3429%" height="15" fill="rgb(206,192,2)"/><text x="65.3016%" y="79.50"></text></g><g><title>type_param_predicates (387,803 samples, 0.22%)</title><rect x="65.1778%" y="53" width="0.2167%" height="15" fill="rgb(241,108,4)"/><text x="65.4278%" y="63.50"></text></g><g><title>type_param_predicates (363,493 samples, 0.20%)</title><rect x="65.1914%" y="37" width="0.2031%" height="15" fill="rgb(247,173,49)"/><text x="65.4414%" y="47.50"></text></g><g><title>type_collecting (3,311,436 samples, 1.85%)</title><rect x="63.6603%" y="165" width="1.8503%" height="15" fill="rgb(224,114,35)"/><text x="63.9103%" y="175.50">t..</text></g><g><title>collect_mod_item_types (3,281,876 samples, 1.83%)</title><rect x="63.6768%" y="149" width="1.8338%" height="15" fill="rgb(245,159,27)"/><text x="63.9268%" y="159.50">c..</text></g><g><title>type_of (185,052 samples, 0.10%)</title><rect x="65.4073%" y="133" width="0.1034%" height="15" fill="rgb(245,172,44)"/><text x="65.6573%" y="143.50"></text></g><g><title>evaluate_obligation (577,087 samples, 0.32%)</title><rect x="67.3249%" y="133" width="0.3225%" height="15" fill="rgb(236,23,11)"/><text x="67.5749%" y="143.50"></text></g><g><title>implied_outlives_bounds (406,305 samples, 0.23%)</title><rect x="67.6590%" y="133" width="0.2270%" height="15" fill="rgb(205,117,38)"/><text x="67.9090%" y="143.50"></text></g><g><title>param_env (462,685 samples, 0.26%)</title><rect x="67.8860%" y="133" width="0.2585%" height="15" fill="rgb(237,72,25)"/><text x="68.1360%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,808,124 samples, 2.69%)</title><rect x="65.6738%" y="149" width="2.6866%" height="15" fill="rgb(244,70,9)"/><text x="65.9238%" y="159.50">ch..</text></g><g><title>region_scope_tree (362,123 samples, 0.20%)</title><rect x="68.1581%" y="133" width="0.2023%" height="15" fill="rgb(217,125,39)"/><text x="68.4081%" y="143.50"></text></g><g><title>implied_outlives_bounds (210,774 samples, 0.12%)</title><rect x="69.8695%" y="133" width="0.1178%" height="15" fill="rgb(235,36,10)"/><text x="70.1195%" y="143.50"></text></g><g><title>param_env (461,605 samples, 0.26%)</title><rect x="69.9988%" y="133" width="0.2579%" height="15" fill="rgb(251,123,47)"/><text x="70.2488%" y="143.50"></text></g><g><title>check_item_well_formed (3,703,442 samples, 2.07%)</title><rect x="68.3604%" y="149" width="2.0694%" height="15" fill="rgb(221,13,13)"/><text x="68.6104%" y="159.50">c..</text></g><g><title>evaluate_obligation (209,681 samples, 0.12%)</title><rect x="70.8712%" y="133" width="0.1172%" height="15" fill="rgb(238,131,9)"/><text x="71.1212%" y="143.50"></text></g><g><title>analysis (126,469,467 samples, 70.67%)</title><rect x="0.5423%" y="197" width="70.6676%" height="15" fill="rgb(211,50,8)"/><text x="0.7923%" y="207.50">analysis</text></g><g><title>type_check_crate (73,132,028 samples, 40.86%)</title><rect x="30.3458%" y="181" width="40.8641%" height="15" fill="rgb(245,182,24)"/><text x="30.5958%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,194,743 samples, 5.70%)</title><rect x="65.5133%" y="165" width="5.6965%" height="15" fill="rgb(242,14,37)"/><text x="65.7633%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,396,027 samples, 0.78%)</title><rect x="70.4298%" y="149" width="0.7801%" height="15" fill="rgb(246,228,12)"/><text x="70.6798%" y="159.50"></text></g><g><title>codegen_crate (341,884 samples, 0.19%)</title><rect x="71.2146%" y="197" width="0.1910%" height="15" fill="rgb(213,55,15)"/><text x="71.4646%" y="207.50"></text></g><g><title>AST_validation (312,514 samples, 0.17%)</title><rect x="71.5117%" y="181" width="0.1746%" height="15" fill="rgb(209,9,3)"/><text x="71.7617%" y="191.50"></text></g><g><title>metadata_load_macro (207,911 samples, 0.12%)</title><rect x="86.5066%" y="149" width="0.1162%" height="15" fill="rgb(230,59,30)"/><text x="86.7566%" y="159.50"></text></g><g><title>metadata_register_crate (2,008,412 samples, 1.12%)</title><rect x="86.6228%" y="149" width="1.1222%" height="15" fill="rgb(209,121,21)"/><text x="86.8728%" y="159.50"></text></g><g><title>metadata_register_crate (793,440 samples, 0.44%)</title><rect x="87.3017%" y="133" width="0.4434%" height="15" fill="rgb(220,109,13)"/><text x="87.5517%" y="143.50"></text></g><g><title>macro_expand_crate (29,012,810 samples, 16.21%)</title><rect x="71.8164%" y="181" width="16.2115%" height="15" fill="rgb(232,18,1)"/><text x="72.0664%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (28,998,080 samples, 16.20%)</title><rect x="71.8247%" y="165" width="16.2033%" height="15" fill="rgb(215,41,42)"/><text x="72.0747%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (506,344 samples, 0.28%)</title><rect x="87.7450%" y="149" width="0.2829%" height="15" fill="rgb(224,123,36)"/><text x="87.9950%" y="159.50"></text></g><g><title>finalize_imports (350,304 samples, 0.20%)</title><rect x="88.0868%" y="165" width="0.1957%" height="15" fill="rgb(240,125,3)"/><text x="88.3368%" y="175.50"></text></g><g><title>late_resolve_crate (4,107,305 samples, 2.30%)</title><rect x="88.3613%" y="165" width="2.2950%" height="15" fill="rgb(205,98,50)"/><text x="88.6113%" y="175.50">l..</text></g><g><title>configure_and_expand (34,721,304 samples, 19.40%)</title><rect x="71.4056%" y="197" width="19.4013%" height="15" fill="rgb(205,185,37)"/><text x="71.6556%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,877,224 samples, 2.73%)</title><rect x="88.0816%" y="181" width="2.7253%" height="15" fill="rgb(238,207,15)"/><text x="88.3316%" y="191.50">re..</text></g><g><title>drop_ast (395,814 samples, 0.22%)</title><rect x="90.8069%" y="197" width="0.2212%" height="15" fill="rgb(213,199,42)"/><text x="91.0569%" y="207.50"></text></g><g><title>early_lint_checks (781,988 samples, 0.44%)</title><rect x="91.0372%" y="197" width="0.4370%" height="15" fill="rgb(235,201,11)"/><text x="91.2872%" y="207.50"></text></g><g><title>free_global_ctxt (3,997,284 samples, 2.23%)</title><rect x="91.4742%" y="197" width="2.2336%" height="15" fill="rgb(207,46,11)"/><text x="91.7242%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,426,846 samples, 0.80%)</title><rect x="93.7077%" y="197" width="0.7973%" height="15" fill="rgb(241,35,35)"/><text x="93.9577%" y="207.50"></text></g><g><title>hir_lowering (7,779,746 samples, 4.35%)</title><rect x="94.5050%" y="197" width="4.3471%" height="15" fill="rgb(243,32,47)"/><text x="94.7550%" y="207.50">hir_l..</text></g><g><title>parse_crate (410,814 samples, 0.23%)</title><rect x="98.8803%" y="197" width="0.2296%" height="15" fill="rgb(247,202,23)"/><text x="99.1303%" y="207.50"></text></g><g><title>prepare_outputs (278,853 samples, 0.16%)</title><rect x="99.1138%" y="197" width="0.1558%" height="15" fill="rgb(219,102,11)"/><text x="99.3638%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (841,559 samples, 0.47%)</title><rect x="99.2696%" y="197" width="0.4702%" height="15" fill="rgb(243,110,44)"/><text x="99.5196%" y="207.50"></text></g><g><title>all (178,963,987 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (178,963,987 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (342,293 samples, 0.19%)</title><rect x="99.8087%" y="197" width="0.1913%" height="15" fill="rgb(226,22,26)"/><text x="100.0587%" y="207.50"></text></g></svg></svg>