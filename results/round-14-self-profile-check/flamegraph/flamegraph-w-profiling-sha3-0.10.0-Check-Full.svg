<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (292,715 samples, 0.18%)</title><rect x="11.1201%" y="165" width="0.1844%" height="15" fill="rgb(227,0,7)"/><text x="11.3701%" y="175.50"></text></g><g><title>item_attrs (186,512 samples, 0.12%)</title><rect x="13.1564%" y="101" width="0.1175%" height="15" fill="rgb(217,0,24)"/><text x="13.4064%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (180,912 samples, 0.11%)</title><rect x="13.1599%" y="85" width="0.1139%" height="15" fill="rgb(221,193,54)"/><text x="13.4099%" y="95.50"></text></g><g><title>codegen_fn_attrs (252,112 samples, 0.16%)</title><rect x="13.1224%" y="117" width="0.1588%" height="15" fill="rgb(248,212,6)"/><text x="13.3724%" y="127.50"></text></g><g><title>is_copy_raw (247,314 samples, 0.16%)</title><rect x="15.3926%" y="101" width="0.1558%" height="15" fill="rgb(208,68,35)"/><text x="15.6426%" y="111.50"></text></g><g><title>evaluate_obligation (206,863 samples, 0.13%)</title><rect x="15.4181%" y="85" width="0.1303%" height="15" fill="rgb(232,128,0)"/><text x="15.6681%" y="95.50"></text></g><g><title>needs_drop_raw (950,433 samples, 0.60%)</title><rect x="15.5483%" y="101" width="0.5986%" height="15" fill="rgb(207,160,47)"/><text x="15.7983%" y="111.50"></text></g><g><title>is_copy_raw (685,479 samples, 0.43%)</title><rect x="15.7152%" y="85" width="0.4317%" height="15" fill="rgb(228,23,34)"/><text x="15.9652%" y="95.50"></text></g><g><title>evaluate_obligation (575,219 samples, 0.36%)</title><rect x="15.7847%" y="69" width="0.3623%" height="15" fill="rgb(218,30,26)"/><text x="16.0347%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (543,827 samples, 0.34%)</title><rect x="16.3222%" y="85" width="0.3425%" height="15" fill="rgb(220,122,19)"/><text x="16.5722%" y="95.50"></text></g><g><title>impl_parent (219,121 samples, 0.14%)</title><rect x="16.9564%" y="69" width="0.1380%" height="15" fill="rgb(250,228,42)"/><text x="17.2064%" y="79.50"></text></g><g><title>specialization_graph_of (1,111,932 samples, 0.70%)</title><rect x="16.6968%" y="85" width="0.7003%" height="15" fill="rgb(240,193,28)"/><text x="16.9468%" y="95.50"></text></g><g><title>impl_trait_ref (480,594 samples, 0.30%)</title><rect x="17.0944%" y="69" width="0.3027%" height="15" fill="rgb(216,20,37)"/><text x="17.3444%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (418,882 samples, 0.26%)</title><rect x="17.1333%" y="53" width="0.2638%" height="15" fill="rgb(206,188,39)"/><text x="17.3833%" y="63.50"></text></g><g><title>resolve_instance (2,032,414 samples, 1.28%)</title><rect x="16.1469%" y="101" width="1.2800%" height="15" fill="rgb(217,207,13)"/><text x="16.3969%" y="111.50"></text></g><g><title>thir_body (1,277,523 samples, 0.80%)</title><rect x="17.4666%" y="101" width="0.8046%" height="15" fill="rgb(231,73,38)"/><text x="17.7166%" y="111.50"></text></g><g><title>mir_const (10,003,256 samples, 6.30%)</title><rect x="11.9905%" y="149" width="6.3001%" height="15" fill="rgb(225,20,46)"/><text x="12.2405%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (8,865,810 samples, 5.58%)</title><rect x="12.7069%" y="133" width="5.5838%" height="15" fill="rgb(210,31,41)"/><text x="12.9569%" y="143.50">unsafet..</text></g><g><title>mir_built (7,953,898 samples, 5.01%)</title><rect x="13.2812%" y="117" width="5.0094%" height="15" fill="rgb(221,200,47)"/><text x="13.5312%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (11,162,469 samples, 7.03%)</title><rect x="11.3760%" y="165" width="7.0302%" height="15" fill="rgb(226,26,5)"/><text x="11.6260%" y="175.50">mir_promo..</text></g><g><title>mir_const_qualif (183,512 samples, 0.12%)</title><rect x="18.2906%" y="149" width="0.1156%" height="15" fill="rgb(249,33,26)"/><text x="18.5406%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,456,865 samples, 0.92%)</title><rect x="18.4185%" y="165" width="0.9175%" height="15" fill="rgb(235,183,28)"/><text x="18.6685%" y="175.50"></text></g><g><title>normalize_projection_ty (954,212 samples, 0.60%)</title><rect x="18.7351%" y="149" width="0.6010%" height="15" fill="rgb(221,5,38)"/><text x="18.9851%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,160,142 samples, 0.73%)</title><rect x="19.3360%" y="165" width="0.7307%" height="15" fill="rgb(247,18,42)"/><text x="19.5860%" y="175.50"></text></g><g><title>normalize_projection_ty (949,030 samples, 0.60%)</title><rect x="19.4690%" y="149" width="0.5977%" height="15" fill="rgb(241,131,45)"/><text x="19.7190%" y="159.50"></text></g><g><title>type_op_normalize_ty (561,098 samples, 0.35%)</title><rect x="20.0667%" y="165" width="0.3534%" height="15" fill="rgb(249,31,29)"/><text x="20.3167%" y="175.50"></text></g><g><title>normalize_projection_ty (326,464 samples, 0.21%)</title><rect x="20.2145%" y="149" width="0.2056%" height="15" fill="rgb(225,111,53)"/><text x="20.4645%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,086,208 samples, 3.20%)</title><rect x="20.4201%" y="165" width="3.2033%" height="15" fill="rgb(238,160,17)"/><text x="20.6701%" y="175.50">typ..</text></g><g><title>MIR_borrow_checking (36,667,739 samples, 23.09%)</title><rect x="0.5308%" y="197" width="23.0936%" height="15" fill="rgb(214,148,48)"/><text x="0.7808%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (36,476,058 samples, 22.97%)</title><rect x="0.6515%" y="181" width="22.9729%" height="15" fill="rgb(232,36,49)"/><text x="0.9015%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (225,552 samples, 0.14%)</title><rect x="23.7166%" y="197" width="0.1421%" height="15" fill="rgb(209,103,24)"/><text x="23.9666%" y="207.50"></text></g><g><title>codegen_fn_attrs (210,173 samples, 0.13%)</title><rect x="24.1788%" y="133" width="0.1324%" height="15" fill="rgb(229,88,8)"/><text x="24.4288%" y="143.50"></text></g><g><title>codegen_fn_attrs (432,364 samples, 0.27%)</title><rect x="24.0445%" y="165" width="0.2723%" height="15" fill="rgb(213,181,19)"/><text x="24.2945%" y="175.50"></text></g><g><title>should_inherit_track_caller (354,594 samples, 0.22%)</title><rect x="24.0934%" y="149" width="0.2233%" height="15" fill="rgb(254,191,54)"/><text x="24.3434%" y="159.50"></text></g><g><title>check_mod_attrs (702,657 samples, 0.44%)</title><rect x="23.8744%" y="181" width="0.4425%" height="15" fill="rgb(241,83,37)"/><text x="24.1244%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (292,014 samples, 0.18%)</title><rect x="24.4518%" y="181" width="0.1839%" height="15" fill="rgb(233,36,39)"/><text x="24.7018%" y="191.50"></text></g><g><title>misc_checking_1 (1,306,935 samples, 0.82%)</title><rect x="23.8590%" y="197" width="0.8231%" height="15" fill="rgb(226,3,54)"/><text x="24.1090%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (489,615 samples, 0.31%)</title><rect x="24.6831%" y="181" width="0.3084%" height="15" fill="rgb(245,192,40)"/><text x="24.9331%" y="191.50"></text></g><g><title>check_mod_liveness (399,884 samples, 0.25%)</title><rect x="24.7396%" y="165" width="0.2518%" height="15" fill="rgb(238,167,29)"/><text x="24.9896%" y="175.50"></text></g><g><title>misc_checking_2 (1,028,311 samples, 0.65%)</title><rect x="24.6821%" y="197" width="0.6476%" height="15" fill="rgb(232,182,51)"/><text x="24.9321%" y="207.50"></text></g><g><title>match_checking (537,146 samples, 0.34%)</title><rect x="24.9914%" y="181" width="0.3383%" height="15" fill="rgb(231,60,39)"/><text x="25.2414%" y="191.50"></text></g><g><title>check_match (495,196 samples, 0.31%)</title><rect x="25.0178%" y="165" width="0.3119%" height="15" fill="rgb(208,69,12)"/><text x="25.2678%" y="175.50"></text></g><g><title>check_private_in_public (309,443 samples, 0.19%)</title><rect x="25.3361%" y="181" width="0.1949%" height="15" fill="rgb(235,93,37)"/><text x="25.5861%" y="191.50"></text></g><g><title>death_checking (536,866 samples, 0.34%)</title><rect x="25.5310%" y="181" width="0.3381%" height="15" fill="rgb(213,116,39)"/><text x="25.7810%" y="191.50"></text></g><g><title>param_env (293,034 samples, 0.18%)</title><rect x="26.4910%" y="149" width="0.1846%" height="15" fill="rgb(222,207,29)"/><text x="26.7410%" y="159.50"></text></g><g><title>crate_lints (2,455,528 samples, 1.55%)</title><rect x="25.8701%" y="165" width="1.5465%" height="15" fill="rgb(206,96,30)"/><text x="26.1201%" y="175.50"></text></g><g><title>type_of (1,133,722 samples, 0.71%)</title><rect x="26.7026%" y="149" width="0.7140%" height="15" fill="rgb(218,138,4)"/><text x="26.9526%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (900,417 samples, 0.57%)</title><rect x="26.8495%" y="133" width="0.5671%" height="15" fill="rgb(250,191,14)"/><text x="27.0995%" y="143.50"></text></g><g><title>lint_checking (3,085,825 samples, 1.94%)</title><rect x="25.8691%" y="181" width="1.9435%" height="15" fill="rgb(239,60,40)"/><text x="26.1191%" y="191.50">l..</text></g><g><title>module_lints (628,737 samples, 0.40%)</title><rect x="27.4166%" y="165" width="0.3960%" height="15" fill="rgb(206,27,48)"/><text x="27.6666%" y="175.50"></text></g><g><title>lint_mod (624,587 samples, 0.39%)</title><rect x="27.4193%" y="149" width="0.3934%" height="15" fill="rgb(225,35,8)"/><text x="27.6693%" y="159.50"></text></g><g><title>privacy_access_levels (424,485 samples, 0.27%)</title><rect x="27.8126%" y="181" width="0.2673%" height="15" fill="rgb(250,213,24)"/><text x="28.0626%" y="191.50"></text></g><g><title>privacy_checking_modules (1,520,517 samples, 0.96%)</title><rect x="28.0800%" y="181" width="0.9576%" height="15" fill="rgb(247,123,22)"/><text x="28.3300%" y="191.50"></text></g><g><title>check_mod_privacy (1,518,107 samples, 0.96%)</title><rect x="28.0815%" y="165" width="0.9561%" height="15" fill="rgb(231,138,38)"/><text x="28.3315%" y="175.50"></text></g><g><title>misc_checking_3 (5,900,796 samples, 3.72%)</title><rect x="25.3297%" y="197" width="3.7164%" height="15" fill="rgb(231,145,46)"/><text x="25.5797%" y="207.50">misc..</text></g><g><title>impl_parent (1,489,993 samples, 0.94%)</title><rect x="30.4173%" y="133" width="0.9384%" height="15" fill="rgb(251,118,11)"/><text x="30.6673%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (971,559 samples, 0.61%)</title><rect x="30.7438%" y="117" width="0.6119%" height="15" fill="rgb(217,147,25)"/><text x="30.9938%" y="127.50"></text></g><g><title>impl_trait_ref (4,369,633 samples, 2.75%)</title><rect x="31.3557%" y="133" width="2.7520%" height="15" fill="rgb(247,81,37)"/><text x="31.6057%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,642,135 samples, 2.29%)</title><rect x="31.8139%" y="117" width="2.2938%" height="15" fill="rgb(209,12,38)"/><text x="32.0639%" y="127.50">m..</text></g><g><title>coherent_trait (8,489,064 samples, 5.35%)</title><rect x="29.1101%" y="165" width="5.3465%" height="15" fill="rgb(227,1,9)"/><text x="29.3601%" y="175.50">coheren..</text></g><g><title>specialization_graph_of (8,463,704 samples, 5.33%)</title><rect x="29.1260%" y="149" width="5.3305%" height="15" fill="rgb(248,47,43)"/><text x="29.3760%" y="159.50">special..</text></g><g><title>trait_impls_of (552,007 samples, 0.35%)</title><rect x="34.1089%" y="133" width="0.3477%" height="15" fill="rgb(221,10,30)"/><text x="34.3589%" y="143.50"></text></g><g><title>implementations_of_trait (166,421 samples, 0.10%)</title><rect x="34.3517%" y="117" width="0.1048%" height="15" fill="rgb(210,229,1)"/><text x="34.6017%" y="127.50"></text></g><g><title>coherence_checking (8,592,356 samples, 5.41%)</title><rect x="29.0987%" y="181" width="5.4115%" height="15" fill="rgb(222,148,37)"/><text x="29.3487%" y="191.50">coheren..</text></g><g><title>associated_item (424,835 samples, 0.27%)</title><rect x="46.4938%" y="117" width="0.2676%" height="15" fill="rgb(234,67,33)"/><text x="46.7438%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (350,375 samples, 0.22%)</title><rect x="46.5407%" y="101" width="0.2207%" height="15" fill="rgb(247,98,35)"/><text x="46.7907%" y="111.50"></text></g><g><title>associated_items (565,807 samples, 0.36%)</title><rect x="46.4172%" y="133" width="0.3563%" height="15" fill="rgb(247,138,52)"/><text x="46.6672%" y="143.50"></text></g><g><title>dropck_outlives (312,354 samples, 0.20%)</title><rect x="46.8026%" y="133" width="0.1967%" height="15" fill="rgb(213,79,30)"/><text x="47.0526%" y="143.50"></text></g><g><title>eval_to_allocation_raw (179,902 samples, 0.11%)</title><rect x="47.0046%" y="117" width="0.1133%" height="15" fill="rgb(246,177,23)"/><text x="47.2546%" y="127.50"></text></g><g><title>mir_const_qualif (161,012 samples, 0.10%)</title><rect x="47.2868%" y="85" width="0.1014%" height="15" fill="rgb(230,62,27)"/><text x="47.5368%" y="95.50"></text></g><g><title>mir_borrowck (324,564 samples, 0.20%)</title><rect x="47.5033%" y="53" width="0.2044%" height="15" fill="rgb(216,154,8)"/><text x="47.7533%" y="63.50"></text></g><g><title>mir_for_ctfe (508,315 samples, 0.32%)</title><rect x="47.3882%" y="85" width="0.3201%" height="15" fill="rgb(244,35,45)"/><text x="47.6382%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (440,595 samples, 0.28%)</title><rect x="47.4309%" y="69" width="0.2775%" height="15" fill="rgb(251,115,12)"/><text x="47.6809%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,157,823 samples, 0.73%)</title><rect x="46.9993%" y="133" width="0.7292%" height="15" fill="rgb(240,54,50)"/><text x="47.2493%" y="143.50"></text></g><g><title>eval_to_const_value_raw (969,511 samples, 0.61%)</title><rect x="47.1179%" y="117" width="0.6106%" height="15" fill="rgb(233,84,52)"/><text x="47.3679%" y="127.50"></text></g><g><title>eval_to_allocation_raw (954,781 samples, 0.60%)</title><rect x="47.1272%" y="101" width="0.6013%" height="15" fill="rgb(207,117,47)"/><text x="47.3772%" y="111.50"></text></g><g><title>mir_for_ctfe (867,176 samples, 0.55%)</title><rect x="49.0378%" y="69" width="0.5462%" height="15" fill="rgb(249,43,39)"/><text x="49.2878%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (857,625 samples, 0.54%)</title><rect x="49.0438%" y="53" width="0.5401%" height="15" fill="rgb(209,38,44)"/><text x="49.2938%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,633,370 samples, 1.03%)</title><rect x="48.5733%" y="117" width="1.0287%" height="15" fill="rgb(236,212,23)"/><text x="48.8233%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,608,369 samples, 1.01%)</title><rect x="48.5891%" y="101" width="1.0130%" height="15" fill="rgb(242,79,21)"/><text x="48.8391%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,569,519 samples, 0.99%)</title><rect x="48.6136%" y="85" width="0.9885%" height="15" fill="rgb(211,96,35)"/><text x="48.8636%" y="95.50"></text></g><g><title>predicates_of (173,821 samples, 0.11%)</title><rect x="49.7131%" y="117" width="0.1095%" height="15" fill="rgb(253,215,40)"/><text x="49.9631%" y="127.50"></text></g><g><title>trait_impls_of (560,265 samples, 0.35%)</title><rect x="49.9422%" y="117" width="0.3529%" height="15" fill="rgb(211,81,21)"/><text x="50.1922%" y="127.50"></text></g><g><title>implementations_of_trait (210,992 samples, 0.13%)</title><rect x="50.1621%" y="101" width="0.1329%" height="15" fill="rgb(208,190,38)"/><text x="50.4121%" y="111.50"></text></g><g><title>evaluate_obligation (4,077,180 samples, 2.57%)</title><rect x="47.7286%" y="133" width="2.5678%" height="15" fill="rgb(235,213,38)"/><text x="47.9786%" y="143.50">ev..</text></g><g><title>generics_of (198,501 samples, 0.13%)</title><rect x="50.3743%" y="133" width="0.1250%" height="15" fill="rgb(237,122,38)"/><text x="50.6243%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (167,991 samples, 0.11%)</title><rect x="50.3935%" y="117" width="0.1058%" height="15" fill="rgb(244,218,35)"/><text x="50.6435%" y="127.50"></text></g><g><title>impl_item_implementor_ids (159,342 samples, 0.10%)</title><rect x="50.4993%" y="133" width="0.1004%" height="15" fill="rgb(240,68,47)"/><text x="50.7493%" y="143.50"></text></g><g><title>impl_trait_ref (219,084 samples, 0.14%)</title><rect x="50.6062%" y="133" width="0.1380%" height="15" fill="rgb(210,16,53)"/><text x="50.8562%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (196,264 samples, 0.12%)</title><rect x="50.6206%" y="117" width="0.1236%" height="15" fill="rgb(235,124,12)"/><text x="50.8706%" y="127.50"></text></g><g><title>method_autoderef_steps (232,862 samples, 0.15%)</title><rect x="50.8279%" y="133" width="0.1467%" height="15" fill="rgb(224,169,11)"/><text x="51.0779%" y="143.50"></text></g><g><title>predicates_of (295,894 samples, 0.19%)</title><rect x="51.0529%" y="133" width="0.1864%" height="15" fill="rgb(250,166,2)"/><text x="51.3029%" y="143.50"></text></g><g><title>predicates_defined_on (202,193 samples, 0.13%)</title><rect x="51.1119%" y="117" width="0.1273%" height="15" fill="rgb(242,216,29)"/><text x="51.3619%" y="127.50"></text></g><g><title>dropck_outlives (226,592 samples, 0.14%)</title><rect x="61.1691%" y="117" width="0.1427%" height="15" fill="rgb(230,116,27)"/><text x="61.4191%" y="127.50"></text></g><g><title>normalize_projection_ty (180,802 samples, 0.11%)</title><rect x="61.1980%" y="101" width="0.1139%" height="15" fill="rgb(228,99,48)"/><text x="61.4480%" y="111.50"></text></g><g><title>evaluate_obligation (923,748 samples, 0.58%)</title><rect x="61.3118%" y="117" width="0.5818%" height="15" fill="rgb(253,11,6)"/><text x="61.5618%" y="127.50"></text></g><g><title>is_copy_raw (1,162,904 samples, 0.73%)</title><rect x="61.9357%" y="117" width="0.7324%" height="15" fill="rgb(247,143,39)"/><text x="62.1857%" y="127.50"></text></g><g><title>evaluate_obligation (1,104,784 samples, 0.70%)</title><rect x="61.9723%" y="101" width="0.6958%" height="15" fill="rgb(236,97,10)"/><text x="62.2223%" y="111.50"></text></g><g><title>lint_levels (275,063 samples, 0.17%)</title><rect x="62.6681%" y="117" width="0.1732%" height="15" fill="rgb(233,208,19)"/><text x="62.9181%" y="127.50"></text></g><g><title>method_autoderef_steps (364,301 samples, 0.23%)</title><rect x="62.8429%" y="117" width="0.2294%" height="15" fill="rgb(216,164,2)"/><text x="63.0929%" y="127.50"></text></g><g><title>typeck (18,773,998 samples, 11.82%)</title><rect x="51.3142%" y="133" width="11.8240%" height="15" fill="rgb(220,129,5)"/><text x="51.5642%" y="143.50">typeck</text></g><g><title>item_bodies_checking (45,446,806 samples, 28.62%)</title><rect x="34.5514%" y="181" width="28.6227%" height="15" fill="rgb(242,17,10)"/><text x="34.8014%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (45,442,846 samples, 28.62%)</title><rect x="34.5539%" y="165" width="28.6202%" height="15" fill="rgb(242,107,0)"/><text x="34.8039%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (45,324,235 samples, 28.55%)</title><rect x="34.6286%" y="149" width="28.5455%" height="15" fill="rgb(251,28,31)"/><text x="34.8786%" y="159.50">typeck</text></g><g><title>impl_trait_ref (187,472 samples, 0.12%)</title><rect x="65.1575%" y="101" width="0.1181%" height="15" fill="rgb(233,223,10)"/><text x="65.4075%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (168,352 samples, 0.11%)</title><rect x="65.1695%" y="85" width="0.1060%" height="15" fill="rgb(215,21,27)"/><text x="65.4195%" y="95.50"></text></g><g><title>adt_destructor (384,835 samples, 0.24%)</title><rect x="65.0535%" y="149" width="0.2424%" height="15" fill="rgb(232,23,21)"/><text x="65.3035%" y="159.50"></text></g><g><title>coherent_trait (373,125 samples, 0.23%)</title><rect x="65.0609%" y="133" width="0.2350%" height="15" fill="rgb(244,5,23)"/><text x="65.3109%" y="143.50"></text></g><g><title>specialization_graph_of (370,245 samples, 0.23%)</title><rect x="65.0627%" y="117" width="0.2332%" height="15" fill="rgb(226,81,46)"/><text x="65.3127%" y="127.50"></text></g><g><title>evaluate_obligation (1,709,757 samples, 1.08%)</title><rect x="65.3021%" y="149" width="1.0768%" height="15" fill="rgb(247,70,30)"/><text x="65.5521%" y="159.50"></text></g><g><title>predicates_of (240,152 samples, 0.15%)</title><rect x="66.4928%" y="149" width="0.1512%" height="15" fill="rgb(212,68,19)"/><text x="66.7428%" y="159.50"></text></g><g><title>predicates_defined_on (235,202 samples, 0.15%)</title><rect x="66.4960%" y="133" width="0.1481%" height="15" fill="rgb(240,187,13)"/><text x="66.7460%" y="143.50"></text></g><g><title>item_types_checking (5,565,212 samples, 3.51%)</title><rect x="63.1741%" y="181" width="3.5050%" height="15" fill="rgb(223,113,26)"/><text x="63.4241%" y="191.50">ite..</text></g><g><title>check_mod_item_types (5,560,542 samples, 3.50%)</title><rect x="63.1771%" y="165" width="3.5021%" height="15" fill="rgb(206,192,2)"/><text x="63.4271%" y="175.50">che..</text></g><g><title>fn_sig (416,707 samples, 0.26%)</title><rect x="66.9565%" y="149" width="0.2624%" height="15" fill="rgb(241,108,4)"/><text x="67.2065%" y="159.50"></text></g><g><title>named_region_map (426,624 samples, 0.27%)</title><rect x="67.3338%" y="133" width="0.2687%" height="15" fill="rgb(247,173,49)"/><text x="67.5838%" y="143.50"></text></g><g><title>resolve_lifetimes (385,324 samples, 0.24%)</title><rect x="67.3598%" y="117" width="0.2427%" height="15" fill="rgb(224,114,35)"/><text x="67.6098%" y="127.50"></text></g><g><title>generics_of (639,125 samples, 0.40%)</title><rect x="67.2189%" y="149" width="0.4025%" height="15" fill="rgb(245,159,27)"/><text x="67.4689%" y="159.50"></text></g><g><title>explicit_predicates_of (200,942 samples, 0.13%)</title><rect x="67.8449%" y="117" width="0.1266%" height="15" fill="rgb(245,172,44)"/><text x="68.0949%" y="127.50"></text></g><g><title>predicates_of (585,167 samples, 0.37%)</title><rect x="67.6838%" y="149" width="0.3685%" height="15" fill="rgb(236,23,11)"/><text x="67.9338%" y="159.50"></text></g><g><title>predicates_defined_on (489,627 samples, 0.31%)</title><rect x="67.7440%" y="133" width="0.3084%" height="15" fill="rgb(205,117,38)"/><text x="67.9940%" y="143.50"></text></g><g><title>type_collecting (2,399,377 samples, 1.51%)</title><rect x="66.6810%" y="181" width="1.5111%" height="15" fill="rgb(237,72,25)"/><text x="66.9310%" y="191.50"></text></g><g><title>collect_mod_item_types (2,391,377 samples, 1.51%)</title><rect x="66.6861%" y="165" width="1.5061%" height="15" fill="rgb(244,70,9)"/><text x="66.9361%" y="175.50"></text></g><g><title>type_of (222,041 samples, 0.14%)</title><rect x="68.0524%" y="149" width="0.1398%" height="15" fill="rgb(217,125,39)"/><text x="68.3024%" y="159.50"></text></g><g><title>evaluate_obligation (1,902,220 samples, 1.20%)</title><rect x="71.9070%" y="149" width="1.1980%" height="15" fill="rgb(235,36,10)"/><text x="72.1570%" y="159.50"></text></g><g><title>implied_outlives_bounds (1,255,595 samples, 0.79%)</title><rect x="73.1469%" y="149" width="0.7908%" height="15" fill="rgb(251,123,47)"/><text x="73.3969%" y="159.50"></text></g><g><title>mir_const_qualif (190,602 samples, 0.12%)</title><rect x="74.3758%" y="85" width="0.1200%" height="15" fill="rgb(221,13,13)"/><text x="74.6258%" y="95.50"></text></g><g><title>mir_borrowck (377,804 samples, 0.24%)</title><rect x="74.5759%" y="53" width="0.2379%" height="15" fill="rgb(238,131,9)"/><text x="74.8259%" y="63.50"></text></g><g><title>mir_for_ctfe (506,306 samples, 0.32%)</title><rect x="74.4958%" y="85" width="0.3189%" height="15" fill="rgb(211,50,8)"/><text x="74.7458%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (459,585 samples, 0.29%)</title><rect x="74.5253%" y="69" width="0.2895%" height="15" fill="rgb(245,182,24)"/><text x="74.7753%" y="79.50"></text></g><g><title>eval_to_const_value_raw (186,522 samples, 0.12%)</title><rect x="74.8196%" y="69" width="0.1175%" height="15" fill="rgb(242,14,37)"/><text x="75.0696%" y="79.50"></text></g><g><title>eval_to_const_value_raw (184,842 samples, 0.12%)</title><rect x="74.8207%" y="53" width="0.1164%" height="15" fill="rgb(246,228,12)"/><text x="75.0707%" y="63.50"></text></g><g><title>eval_to_allocation_raw (180,432 samples, 0.11%)</title><rect x="74.8235%" y="37" width="0.1136%" height="15" fill="rgb(213,55,15)"/><text x="75.0735%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (198,282 samples, 0.12%)</title><rect x="74.8149%" y="85" width="0.1249%" height="15" fill="rgb(209,9,3)"/><text x="75.0649%" y="95.50"></text></g><g><title>generics_of (221,690 samples, 0.14%)</title><rect x="75.3419%" y="53" width="0.1396%" height="15" fill="rgb(230,59,30)"/><text x="75.5919%" y="63.50"></text></g><g><title>metadata_decode_entry_generics_of (174,660 samples, 0.11%)</title><rect x="75.3715%" y="37" width="0.1100%" height="15" fill="rgb(209,121,21)"/><text x="75.6215%" y="47.50"></text></g><g><title>impl_trait_ref (275,725 samples, 0.17%)</title><rect x="75.4974%" y="53" width="0.1737%" height="15" fill="rgb(220,109,13)"/><text x="75.7474%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (228,835 samples, 0.14%)</title><rect x="75.5269%" y="37" width="0.1441%" height="15" fill="rgb(232,18,1)"/><text x="75.7769%" y="47.50"></text></g><g><title>specializes (276,413 samples, 0.17%)</title><rect x="75.7222%" y="53" width="0.1741%" height="15" fill="rgb(215,41,42)"/><text x="75.9722%" y="63.50"></text></g><g><title>param_env (202,832 samples, 0.13%)</title><rect x="75.7685%" y="37" width="0.1277%" height="15" fill="rgb(224,123,36)"/><text x="76.0185%" y="47.50"></text></g><g><title>evaluate_obligation (1,408,025 samples, 0.89%)</title><rect x="75.0423%" y="69" width="0.8868%" height="15" fill="rgb(240,125,3)"/><text x="75.2923%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,715,681 samples, 1.71%)</title><rect x="74.2604%" y="133" width="1.7104%" height="15" fill="rgb(205,98,50)"/><text x="74.5104%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,701,561 samples, 1.70%)</title><rect x="74.2693%" y="117" width="1.7015%" height="15" fill="rgb(205,185,37)"/><text x="74.5193%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,700,011 samples, 1.70%)</title><rect x="74.2703%" y="101" width="1.7005%" height="15" fill="rgb(238,207,15)"/><text x="74.5203%" y="111.50"></text></g><g><title>typeck (1,637,049 samples, 1.03%)</title><rect x="74.9397%" y="85" width="1.0310%" height="15" fill="rgb(213,199,42)"/><text x="75.1897%" y="95.50"></text></g><g><title>param_env (3,247,945 samples, 2.05%)</title><rect x="73.9381%" y="149" width="2.0456%" height="15" fill="rgb(235,201,11)"/><text x="74.1881%" y="159.50">p..</text></g><g><title>check_impl_item_well_formed (12,650,052 samples, 7.97%)</title><rect x="68.3996%" y="165" width="7.9671%" height="15" fill="rgb(207,46,11)"/><text x="68.6496%" y="175.50">check_impl_..</text></g><g><title>region_scope_tree (515,417 samples, 0.32%)</title><rect x="76.0421%" y="149" width="0.3246%" height="15" fill="rgb(241,35,35)"/><text x="76.2921%" y="159.50"></text></g><g><title>eval_to_const_value_raw (159,612 samples, 0.10%)</title><rect x="79.4044%" y="149" width="0.1005%" height="15" fill="rgb(243,32,47)"/><text x="79.6544%" y="159.50"></text></g><g><title>eval_to_const_value_raw (158,802 samples, 0.10%)</title><rect x="79.4049%" y="133" width="0.1000%" height="15" fill="rgb(247,202,23)"/><text x="79.6549%" y="143.50"></text></g><g><title>evaluate_obligation (2,513,311 samples, 1.58%)</title><rect x="79.5050%" y="149" width="1.5829%" height="15" fill="rgb(219,102,11)"/><text x="79.7550%" y="159.50"></text></g><g><title>param_env (581,678 samples, 0.37%)</title><rect x="81.2136%" y="149" width="0.3663%" height="15" fill="rgb(243,110,44)"/><text x="81.4636%" y="159.50"></text></g><g><title>analysis (129,330,032 samples, 81.45%)</title><rect x="0.3408%" y="213" width="81.4530%" height="15" fill="rgb(222,74,54)"/><text x="0.5908%" y="223.50">analysis</text></g><g><title>type_check_crate (83,752,223 samples, 52.75%)</title><rect x="29.0461%" y="197" width="52.7478%" height="15" fill="rgb(216,99,12)"/><text x="29.2961%" y="207.50">type_check_crate</text></g><g><title>wf_checking (21,588,871 samples, 13.60%)</title><rect x="68.1970%" y="181" width="13.5968%" height="15" fill="rgb(226,22,26)"/><text x="68.4470%" y="191.50">wf_checking</text></g><g><title>check_item_well_formed (8,617,245 samples, 5.43%)</title><rect x="76.3667%" y="165" width="5.4272%" height="15" fill="rgb(217,163,10)"/><text x="76.6167%" y="175.50">check_i..</text></g><g><title>codegen_crate (457,355 samples, 0.29%)</title><rect x="81.7974%" y="213" width="0.2880%" height="15" fill="rgb(213,25,53)"/><text x="82.0474%" y="223.50"></text></g><g><title>AST_validation (159,002 samples, 0.10%)</title><rect x="82.1697%" y="197" width="0.1001%" height="15" fill="rgb(252,105,26)"/><text x="82.4197%" y="207.50"></text></g><g><title>metadata_register_crate (1,385,794 samples, 0.87%)</title><rect x="90.4197%" y="165" width="0.8728%" height="15" fill="rgb(220,39,43)"/><text x="90.6697%" y="175.50"></text></g><g><title>metadata_register_crate (921,199 samples, 0.58%)</title><rect x="90.7123%" y="149" width="0.5802%" height="15" fill="rgb(229,68,48)"/><text x="90.9623%" y="159.50"></text></g><g><title>metadata_register_crate (367,272 samples, 0.23%)</title><rect x="91.0612%" y="133" width="0.2313%" height="15" fill="rgb(252,8,32)"/><text x="91.3112%" y="143.50"></text></g><g><title>macro_expand_crate (14,276,149 samples, 8.99%)</title><rect x="82.3407%" y="197" width="8.9912%" height="15" fill="rgb(223,20,43)"/><text x="82.5907%" y="207.50">macro_expand_..</text></g><g><title>expand_crate (14,266,419 samples, 8.99%)</title><rect x="82.3468%" y="181" width="8.9851%" height="15" fill="rgb(229,81,49)"/><text x="82.5968%" y="191.50">expand_crate</text></g><g><title>late_resolve_crate (1,626,058 samples, 1.02%)</title><rect x="91.5107%" y="181" width="1.0241%" height="15" fill="rgb(236,28,36)"/><text x="91.7607%" y="191.50"></text></g><g><title>configure_and_expand (16,696,916 samples, 10.52%)</title><rect x="82.0855%" y="213" width="10.5158%" height="15" fill="rgb(249,185,26)"/><text x="82.3355%" y="223.50">configure_and_e..</text></g><g><title>resolve_crate (1,941,661 samples, 1.22%)</title><rect x="91.3785%" y="197" width="1.2229%" height="15" fill="rgb(249,174,33)"/><text x="91.6285%" y="207.50"></text></g><g><title>drop_ast (214,243 samples, 0.13%)</title><rect x="92.6013%" y="213" width="0.1349%" height="15" fill="rgb(233,201,37)"/><text x="92.8513%" y="223.50"></text></g><g><title>early_lint_checks (386,264 samples, 0.24%)</title><rect x="92.7465%" y="213" width="0.2433%" height="15" fill="rgb(221,78,26)"/><text x="92.9965%" y="223.50"></text></g><g><title>free_global_ctxt (3,900,953 samples, 2.46%)</title><rect x="92.9898%" y="213" width="2.4568%" height="15" fill="rgb(250,127,30)"/><text x="93.2398%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (1,444,066 samples, 0.91%)</title><rect x="95.4466%" y="213" width="0.9095%" height="15" fill="rgb(230,49,44)"/><text x="95.6966%" y="223.50"></text></g><g><title>hir_lowering (3,904,493 samples, 2.46%)</title><rect x="96.3561%" y="213" width="2.4591%" height="15" fill="rgb(229,67,23)"/><text x="96.6061%" y="223.50">hi..</text></g><g><title>parse_crate (329,524 samples, 0.21%)</title><rect x="98.8470%" y="213" width="0.2075%" height="15" fill="rgb(249,83,47)"/><text x="99.0970%" y="223.50"></text></g><g><title>prepare_outputs (168,932 samples, 0.11%)</title><rect x="99.0582%" y="213" width="0.1064%" height="15" fill="rgb(215,43,3)"/><text x="99.3082%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (892,010 samples, 0.56%)</title><rect x="99.1646%" y="213" width="0.5618%" height="15" fill="rgb(238,154,13)"/><text x="99.4146%" y="223.50"></text></g><g><title>all (158,778,649 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (158,778,649 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (344,374 samples, 0.22%)</title><rect x="99.7831%" y="213" width="0.2169%" height="15" fill="rgb(235,30,7)"/><text x="100.0331%" y="223.50"></text></g></svg></svg>