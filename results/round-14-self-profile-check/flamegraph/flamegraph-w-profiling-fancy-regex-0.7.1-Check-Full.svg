<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (977,511 samples, 0.20%)</title><rect x="18.3789%" y="133" width="0.2010%" height="15" fill="rgb(227,0,7)"/><text x="18.6289%" y="143.50"></text></g><g><title>item_attrs (847,607 samples, 0.17%)</title><rect x="19.1657%" y="101" width="0.1743%" height="15" fill="rgb(217,0,24)"/><text x="19.4157%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (814,667 samples, 0.17%)</title><rect x="19.1725%" y="85" width="0.1675%" height="15" fill="rgb(221,193,54)"/><text x="19.4225%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,184,359 samples, 0.24%)</title><rect x="19.1075%" y="117" width="0.2435%" height="15" fill="rgb(248,212,6)"/><text x="19.3575%" y="127.50"></text></g><g><title>adt_drop_tys (888,767 samples, 0.18%)</title><rect x="23.0881%" y="85" width="0.1828%" height="15" fill="rgb(208,68,35)"/><text x="23.3381%" y="95.50"></text></g><g><title>is_copy_raw (2,558,698 samples, 0.53%)</title><rect x="23.2709%" y="85" width="0.5262%" height="15" fill="rgb(232,128,0)"/><text x="23.5209%" y="95.50"></text></g><g><title>evaluate_obligation (2,083,825 samples, 0.43%)</title><rect x="23.3685%" y="69" width="0.4285%" height="15" fill="rgb(207,160,47)"/><text x="23.6185%" y="79.50"></text></g><g><title>needs_drop_raw (3,965,350 samples, 0.82%)</title><rect x="23.0023%" y="101" width="0.8154%" height="15" fill="rgb(228,23,34)"/><text x="23.2523%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,272,676 samples, 0.26%)</title><rect x="23.9630%" y="85" width="0.2617%" height="15" fill="rgb(218,30,26)"/><text x="24.2130%" y="95.50"></text></g><g><title>specialization_graph_of (597,066 samples, 0.12%)</title><rect x="24.2670%" y="85" width="0.1228%" height="15" fill="rgb(220,122,19)"/><text x="24.5170%" y="95.50"></text></g><g><title>resolve_instance (3,031,432 samples, 0.62%)</title><rect x="23.8178%" y="101" width="0.6234%" height="15" fill="rgb(250,228,42)"/><text x="24.0678%" y="111.50"></text></g><g><title>thir_body (7,093,343 samples, 1.46%)</title><rect x="24.4661%" y="101" width="1.4586%" height="15" fill="rgb(240,193,28)"/><text x="24.7161%" y="111.50"></text></g><g><title>mir_const (41,319,335 samples, 8.50%)</title><rect x="17.4462%" y="149" width="8.4967%" height="15" fill="rgb(216,20,37)"/><text x="17.6962%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (35,805,823 samples, 7.36%)</title><rect x="18.5799%" y="133" width="7.3629%" height="15" fill="rgb(206,188,39)"/><text x="18.8299%" y="143.50">unsafety_c..</text></g><g><title>mir_built (32,052,044 samples, 6.59%)</title><rect x="19.3518%" y="117" width="6.5910%" height="15" fill="rgb(217,207,13)"/><text x="19.6018%" y="127.50">mir_built</text></g><g><title>mir_promoted (46,113,819 samples, 9.48%)</title><rect x="16.5458%" y="165" width="9.4826%" height="15" fill="rgb(231,73,38)"/><text x="16.7958%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,037,098 samples, 0.21%)</title><rect x="26.0292%" y="165" width="0.2133%" height="15" fill="rgb(225,20,46)"/><text x="26.2792%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (2,844,829 samples, 0.58%)</title><rect x="26.2425%" y="165" width="0.5850%" height="15" fill="rgb(210,31,41)"/><text x="26.4925%" y="175.50"></text></g><g><title>normalize_projection_ty (1,910,801 samples, 0.39%)</title><rect x="26.4345%" y="149" width="0.3929%" height="15" fill="rgb(221,200,47)"/><text x="26.6845%" y="159.50"></text></g><g><title>type_op_normalize_predicate (682,647 samples, 0.14%)</title><rect x="26.8275%" y="165" width="0.1404%" height="15" fill="rgb(226,26,5)"/><text x="27.0775%" y="175.50"></text></g><g><title>type_op_prove_predicate (9,206,128 samples, 1.89%)</title><rect x="26.9945%" y="165" width="1.8931%" height="15" fill="rgb(249,33,26)"/><text x="27.2445%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (138,195,210 samples, 28.42%)</title><rect x="0.4768%" y="197" width="28.4177%" height="15" fill="rgb(235,183,28)"/><text x="0.7268%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (137,700,624 samples, 28.32%)</title><rect x="0.5785%" y="181" width="28.3160%" height="15" fill="rgb(221,5,38)"/><text x="0.8285%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (711,255 samples, 0.15%)</title><rect x="28.9652%" y="197" width="0.1463%" height="15" fill="rgb(247,18,42)"/><text x="29.2152%" y="207.50"></text></g><g><title>codegen_fn_attrs (767,400 samples, 0.16%)</title><rect x="29.3367%" y="165" width="0.1578%" height="15" fill="rgb(241,131,45)"/><text x="29.5867%" y="175.50"></text></g><g><title>check_mod_attrs (1,828,870 samples, 0.38%)</title><rect x="29.1184%" y="181" width="0.3761%" height="15" fill="rgb(249,31,29)"/><text x="29.3684%" y="191.50"></text></g><g><title>lint_levels (811,349 samples, 0.17%)</title><rect x="29.7662%" y="165" width="0.1668%" height="15" fill="rgb(225,111,53)"/><text x="30.0162%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,943,200 samples, 0.40%)</title><rect x="29.6532%" y="181" width="0.3996%" height="15" fill="rgb(238,160,17)"/><text x="29.9032%" y="191.50"></text></g><g><title>misc_checking_1 (4,695,413 samples, 0.97%)</title><rect x="29.1116%" y="197" width="0.9655%" height="15" fill="rgb(214,148,48)"/><text x="29.3616%" y="207.50"></text></g><g><title>check_mod_intrinsics (496,766 samples, 0.10%)</title><rect x="30.0806%" y="165" width="0.1022%" height="15" fill="rgb(232,36,49)"/><text x="30.3306%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,471,078 samples, 0.51%)</title><rect x="30.0775%" y="181" width="0.5081%" height="15" fill="rgb(209,103,24)"/><text x="30.3275%" y="191.50"></text></g><g><title>check_mod_liveness (1,959,102 samples, 0.40%)</title><rect x="30.1828%" y="165" width="0.4029%" height="15" fill="rgb(229,88,8)"/><text x="30.4328%" y="175.50"></text></g><g><title>misc_checking_2 (6,625,254 samples, 1.36%)</title><rect x="30.0771%" y="197" width="1.3624%" height="15" fill="rgb(213,181,19)"/><text x="30.3271%" y="207.50"></text></g><g><title>match_checking (4,152,336 samples, 0.85%)</title><rect x="30.5856%" y="181" width="0.8539%" height="15" fill="rgb(254,191,54)"/><text x="30.8356%" y="191.50"></text></g><g><title>check_match (4,030,974 samples, 0.83%)</title><rect x="30.6106%" y="165" width="0.8289%" height="15" fill="rgb(241,83,37)"/><text x="30.8606%" y="175.50"></text></g><g><title>check_private_in_public (774,288 samples, 0.16%)</title><rect x="31.4420%" y="181" width="0.1592%" height="15" fill="rgb(233,36,39)"/><text x="31.6920%" y="191.50"></text></g><g><title>death_checking (1,490,667 samples, 0.31%)</title><rect x="31.6012%" y="181" width="0.3065%" height="15" fill="rgb(226,3,54)"/><text x="31.8512%" y="191.50"></text></g><g><title>param_env (529,634 samples, 0.11%)</title><rect x="32.4267%" y="149" width="0.1089%" height="15" fill="rgb(245,192,40)"/><text x="32.6767%" y="159.50"></text></g><g><title>crate_lints (4,631,901 samples, 0.95%)</title><rect x="31.9082%" y="165" width="0.9525%" height="15" fill="rgb(238,167,29)"/><text x="32.1582%" y="175.50"></text></g><g><title>type_of (1,444,528 samples, 0.30%)</title><rect x="32.5636%" y="149" width="0.2970%" height="15" fill="rgb(232,182,51)"/><text x="32.8136%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,156,353 samples, 0.24%)</title><rect x="32.6229%" y="133" width="0.2378%" height="15" fill="rgb(231,60,39)"/><text x="32.8729%" y="143.50"></text></g><g><title>lint_checking (7,694,236 samples, 1.58%)</title><rect x="31.9077%" y="181" width="1.5822%" height="15" fill="rgb(208,69,12)"/><text x="32.1577%" y="191.50"></text></g><g><title>module_lints (3,060,105 samples, 0.63%)</title><rect x="32.8607%" y="165" width="0.6293%" height="15" fill="rgb(235,93,37)"/><text x="33.1107%" y="175.50"></text></g><g><title>lint_mod (3,047,435 samples, 0.63%)</title><rect x="32.8633%" y="149" width="0.6267%" height="15" fill="rgb(213,116,39)"/><text x="33.1133%" y="159.50"></text></g><g><title>privacy_access_levels (1,415,376 samples, 0.29%)</title><rect x="33.4899%" y="181" width="0.2910%" height="15" fill="rgb(222,207,29)"/><text x="33.7399%" y="191.50"></text></g><g><title>privacy_checking_modules (4,689,042 samples, 0.96%)</title><rect x="33.7810%" y="181" width="0.9642%" height="15" fill="rgb(206,96,30)"/><text x="34.0310%" y="191.50"></text></g><g><title>check_mod_privacy (4,681,502 samples, 0.96%)</title><rect x="33.7825%" y="165" width="0.9627%" height="15" fill="rgb(218,138,4)"/><text x="34.0325%" y="175.50"></text></g><g><title>misc_checking_3 (16,105,990 samples, 3.31%)</title><rect x="31.4395%" y="197" width="3.3119%" height="15" fill="rgb(250,191,14)"/><text x="31.6895%" y="207.50">mis..</text></g><g><title>impl_parent (3,457,121 samples, 0.71%)</title><rect x="36.1470%" y="133" width="0.7109%" height="15" fill="rgb(239,60,40)"/><text x="36.3970%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,935,432 samples, 0.40%)</title><rect x="36.4599%" y="117" width="0.3980%" height="15" fill="rgb(206,27,48)"/><text x="36.7099%" y="127.50"></text></g><g><title>impl_trait_ref (6,941,780 samples, 1.43%)</title><rect x="36.8582%" y="133" width="1.4275%" height="15" fill="rgb(225,35,8)"/><text x="37.1082%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,612,366 samples, 1.15%)</title><rect x="37.1316%" y="117" width="1.1541%" height="15" fill="rgb(250,213,24)"/><text x="37.3816%" y="127.50"></text></g><g><title>trait_impls_of (1,113,863 samples, 0.23%)</title><rect x="38.3050%" y="133" width="0.2290%" height="15" fill="rgb(247,123,22)"/><text x="38.5550%" y="143.50"></text></g><g><title>coherent_trait (18,157,913 samples, 3.73%)</title><rect x="34.8007%" y="165" width="3.7339%" height="15" fill="rgb(231,138,38)"/><text x="35.0507%" y="175.50">cohe..</text></g><g><title>specialization_graph_of (17,615,428 samples, 3.62%)</title><rect x="34.9122%" y="149" width="3.6223%" height="15" fill="rgb(231,145,46)"/><text x="35.1622%" y="159.50">spec..</text></g><g><title>coherence_checking (18,326,474 samples, 3.77%)</title><rect x="34.7938%" y="181" width="3.7686%" height="15" fill="rgb(251,118,11)"/><text x="35.0438%" y="191.50">cohe..</text></g><g><title>associated_item (499,988 samples, 0.10%)</title><rect x="62.7472%" y="117" width="0.1028%" height="15" fill="rgb(217,147,25)"/><text x="62.9972%" y="127.50"></text></g><g><title>associated_items (762,039 samples, 0.16%)</title><rect x="62.7029%" y="133" width="0.1567%" height="15" fill="rgb(247,81,37)"/><text x="62.9529%" y="143.50"></text></g><g><title>adt_def (1,090,825 samples, 0.22%)</title><rect x="63.1312%" y="101" width="0.2243%" height="15" fill="rgb(209,12,38)"/><text x="63.3812%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (1,085,634 samples, 0.22%)</title><rect x="63.1322%" y="85" width="0.2232%" height="15" fill="rgb(227,1,9)"/><text x="63.3822%" y="95.50"></text></g><g><title>adt_dtorck_constraint (551,427 samples, 0.11%)</title><rect x="63.5199%" y="37" width="0.1134%" height="15" fill="rgb(248,47,43)"/><text x="63.7699%" y="47.50"></text></g><g><title>adt_dtorck_constraint (833,429 samples, 0.17%)</title><rect x="63.4649%" y="53" width="0.1714%" height="15" fill="rgb(221,10,30)"/><text x="63.7149%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,054,731 samples, 0.22%)</title><rect x="63.4442%" y="69" width="0.2169%" height="15" fill="rgb(210,229,1)"/><text x="63.6942%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,193,932 samples, 0.25%)</title><rect x="63.4210%" y="85" width="0.2455%" height="15" fill="rgb(222,148,37)"/><text x="63.6710%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,529,387 samples, 0.31%)</title><rect x="63.3671%" y="101" width="0.3145%" height="15" fill="rgb(234,67,33)"/><text x="63.6171%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,952,965 samples, 0.61%)</title><rect x="63.0946%" y="117" width="0.6072%" height="15" fill="rgb(247,98,35)"/><text x="63.3446%" y="127.50"></text></g><g><title>dropck_outlives (4,043,854 samples, 0.83%)</title><rect x="62.8965%" y="133" width="0.8316%" height="15" fill="rgb(247,138,52)"/><text x="63.1465%" y="143.50"></text></g><g><title>generics_of (1,412,290 samples, 0.29%)</title><rect x="65.0002%" y="117" width="0.2904%" height="15" fill="rgb(213,79,30)"/><text x="65.2502%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,135,808 samples, 0.23%)</title><rect x="65.0570%" y="101" width="0.2336%" height="15" fill="rgb(246,177,23)"/><text x="65.3070%" y="111.50"></text></g><g><title>impl_trait_ref (569,634 samples, 0.12%)</title><rect x="65.3269%" y="117" width="0.1171%" height="15" fill="rgb(230,62,27)"/><text x="65.5769%" y="127.50"></text></g><g><title>predicates_of (862,964 samples, 0.18%)</title><rect x="65.4581%" y="117" width="0.1775%" height="15" fill="rgb(216,154,8)"/><text x="65.7081%" y="127.50"></text></g><g><title>predicates_defined_on (539,357 samples, 0.11%)</title><rect x="65.5246%" y="101" width="0.1109%" height="15" fill="rgb(244,35,45)"/><text x="65.7746%" y="111.50"></text></g><g><title>specializes (1,060,212 samples, 0.22%)</title><rect x="65.6355%" y="117" width="0.2180%" height="15" fill="rgb(251,115,12)"/><text x="65.8855%" y="127.50"></text></g><g><title>param_env (644,577 samples, 0.13%)</title><rect x="65.7210%" y="101" width="0.1325%" height="15" fill="rgb(240,54,50)"/><text x="65.9710%" y="111.50"></text></g><g><title>trait_impls_of (889,866 samples, 0.18%)</title><rect x="65.8597%" y="117" width="0.1830%" height="15" fill="rgb(233,84,52)"/><text x="66.1097%" y="127.50"></text></g><g><title>evaluate_obligation (11,273,756 samples, 2.32%)</title><rect x="63.7281%" y="133" width="2.3183%" height="15" fill="rgb(207,117,47)"/><text x="63.9781%" y="143.50">e..</text></g><g><title>generics_of (498,776 samples, 0.10%)</title><rect x="66.1268%" y="133" width="0.1026%" height="15" fill="rgb(249,43,39)"/><text x="66.3768%" y="143.50"></text></g><g><title>evaluate_obligation (608,435 samples, 0.13%)</title><rect x="66.5682%" y="117" width="0.1251%" height="15" fill="rgb(209,38,44)"/><text x="66.8182%" y="127.50"></text></g><g><title>method_autoderef_steps (1,319,167 samples, 0.27%)</title><rect x="66.4254%" y="133" width="0.2713%" height="15" fill="rgb(236,212,23)"/><text x="66.6754%" y="143.50"></text></g><g><title>predicates_of (1,041,903 samples, 0.21%)</title><rect x="66.7612%" y="133" width="0.2143%" height="15" fill="rgb(242,79,21)"/><text x="67.0112%" y="143.50"></text></g><g><title>predicates_defined_on (779,598 samples, 0.16%)</title><rect x="66.8151%" y="117" width="0.1603%" height="15" fill="rgb(211,96,35)"/><text x="67.0651%" y="127.50"></text></g><g><title>associated_item (730,589 samples, 0.15%)</title><rect x="73.8877%" y="101" width="0.1502%" height="15" fill="rgb(253,215,40)"/><text x="74.1377%" y="111.50"></text></g><g><title>associated_items (918,891 samples, 0.19%)</title><rect x="73.8553%" y="117" width="0.1890%" height="15" fill="rgb(211,81,21)"/><text x="74.1053%" y="127.50"></text></g><g><title>evaluate_obligation (2,888,582 samples, 0.59%)</title><rect x="74.1409%" y="117" width="0.5940%" height="15" fill="rgb(208,190,38)"/><text x="74.3909%" y="127.50"></text></g><g><title>method_autoderef_steps (768,599 samples, 0.16%)</title><rect x="74.9518%" y="117" width="0.1581%" height="15" fill="rgb(235,213,38)"/><text x="75.2018%" y="127.50"></text></g><g><title>typeck (39,752,398 samples, 8.17%)</title><rect x="67.0518%" y="133" width="8.1745%" height="15" fill="rgb(237,122,38)"/><text x="67.3018%" y="143.50">typeck</text></g><g><title>item_bodies_checking (178,350,318 samples, 36.67%)</title><rect x="38.5780%" y="181" width="36.6749%" height="15" fill="rgb(244,218,35)"/><text x="38.8280%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (178,346,548 samples, 36.67%)</title><rect x="38.5788%" y="165" width="36.6742%" height="15" fill="rgb(240,68,47)"/><text x="38.8288%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (178,041,536 samples, 36.61%)</title><rect x="38.6415%" y="149" width="36.6114%" height="15" fill="rgb(210,16,53)"/><text x="38.8915%" y="159.50">typeck</text></g><g><title>impl_trait_ref (706,908 samples, 0.15%)</title><rect x="76.5441%" y="117" width="0.1454%" height="15" fill="rgb(235,124,12)"/><text x="76.7941%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (564,756 samples, 0.12%)</title><rect x="76.5733%" y="101" width="0.1161%" height="15" fill="rgb(224,169,11)"/><text x="76.8233%" y="111.50"></text></g><g><title>predicates_of (655,757 samples, 0.13%)</title><rect x="76.6972%" y="117" width="0.1348%" height="15" fill="rgb(250,166,2)"/><text x="76.9472%" y="127.50"></text></g><g><title>specializes (1,973,174 samples, 0.41%)</title><rect x="76.8320%" y="117" width="0.4058%" height="15" fill="rgb(242,216,29)"/><text x="77.0820%" y="127.50"></text></g><g><title>param_env (1,154,374 samples, 0.24%)</title><rect x="77.0004%" y="101" width="0.2374%" height="15" fill="rgb(230,116,27)"/><text x="77.2504%" y="111.50"></text></g><g><title>def_span (554,507 samples, 0.11%)</title><rect x="77.1238%" y="85" width="0.1140%" height="15" fill="rgb(228,99,48)"/><text x="77.3738%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (495,767 samples, 0.10%)</title><rect x="77.1358%" y="69" width="0.1019%" height="15" fill="rgb(253,11,6)"/><text x="77.3858%" y="79.50"></text></g><g><title>evaluate_obligation (6,267,861 samples, 1.29%)</title><rect x="75.9638%" y="133" width="1.2889%" height="15" fill="rgb(247,143,39)"/><text x="76.2138%" y="143.50"></text></g><g><title>item_types_checking (9,951,371 samples, 2.05%)</title><rect x="75.2530%" y="181" width="2.0463%" height="15" fill="rgb(236,97,10)"/><text x="75.5030%" y="191.50">i..</text></g><g><title>check_mod_item_types (9,940,071 samples, 2.04%)</title><rect x="75.2553%" y="165" width="2.0440%" height="15" fill="rgb(233,208,19)"/><text x="75.5053%" y="175.50">c..</text></g><g><title>typeck (7,689,356 samples, 1.58%)</title><rect x="75.7181%" y="149" width="1.5812%" height="15" fill="rgb(216,164,2)"/><text x="75.9681%" y="159.50"></text></g><g><title>fn_sig (1,002,803 samples, 0.21%)</title><rect x="77.4879%" y="149" width="0.2062%" height="15" fill="rgb(220,129,5)"/><text x="77.7379%" y="159.50"></text></g><g><title>is_late_bound_map (678,483 samples, 0.14%)</title><rect x="77.7656%" y="133" width="0.1395%" height="15" fill="rgb(242,17,10)"/><text x="78.0156%" y="143.50"></text></g><g><title>resolve_lifetimes (632,743 samples, 0.13%)</title><rect x="77.7750%" y="117" width="0.1301%" height="15" fill="rgb(242,107,0)"/><text x="78.0250%" y="127.50"></text></g><g><title>named_region_map (585,724 samples, 0.12%)</title><rect x="77.9051%" y="133" width="0.1204%" height="15" fill="rgb(251,28,31)"/><text x="78.1551%" y="143.50"></text></g><g><title>resolve_lifetimes (535,584 samples, 0.11%)</title><rect x="77.9154%" y="117" width="0.1101%" height="15" fill="rgb(233,223,10)"/><text x="78.1654%" y="127.50"></text></g><g><title>generics_of (1,645,174 samples, 0.34%)</title><rect x="77.6941%" y="149" width="0.3383%" height="15" fill="rgb(215,21,27)"/><text x="77.9441%" y="159.50"></text></g><g><title>predicates_of (1,670,076 samples, 0.34%)</title><rect x="78.0507%" y="149" width="0.3434%" height="15" fill="rgb(232,23,21)"/><text x="78.3007%" y="159.50"></text></g><g><title>predicates_defined_on (1,493,625 samples, 0.31%)</title><rect x="78.0870%" y="133" width="0.3071%" height="15" fill="rgb(244,5,23)"/><text x="78.3370%" y="143.50"></text></g><g><title>inferred_outlives_of (781,799 samples, 0.16%)</title><rect x="78.2334%" y="117" width="0.1608%" height="15" fill="rgb(226,81,46)"/><text x="78.4834%" y="127.50"></text></g><g><title>inferred_outlives_crate (720,958 samples, 0.15%)</title><rect x="78.2459%" y="101" width="0.1483%" height="15" fill="rgb(247,70,30)"/><text x="78.4959%" y="111.50"></text></g><g><title>type_collecting (5,615,052 samples, 1.15%)</title><rect x="77.3004%" y="181" width="1.1546%" height="15" fill="rgb(212,68,19)"/><text x="77.5504%" y="191.50"></text></g><g><title>collect_mod_item_types (5,600,482 samples, 1.15%)</title><rect x="77.3034%" y="165" width="1.1517%" height="15" fill="rgb(240,187,13)"/><text x="77.5534%" y="175.50"></text></g><g><title>evaluate_obligation (1,368,265 samples, 0.28%)</title><rect x="79.6843%" y="149" width="0.2814%" height="15" fill="rgb(223,113,26)"/><text x="79.9343%" y="159.50"></text></g><g><title>implied_outlives_bounds (509,009 samples, 0.10%)</title><rect x="79.9674%" y="149" width="0.1047%" height="15" fill="rgb(206,192,2)"/><text x="80.2174%" y="159.50"></text></g><g><title>param_env (695,439 samples, 0.14%)</title><rect x="80.0721%" y="149" width="0.1430%" height="15" fill="rgb(241,108,4)"/><text x="80.3221%" y="159.50"></text></g><g><title>region_scope_tree (1,980,736 samples, 0.41%)</title><rect x="80.2251%" y="149" width="0.4073%" height="15" fill="rgb(247,173,49)"/><text x="80.4751%" y="159.50"></text></g><g><title>check_impl_item_well_formed (9,974,856 samples, 2.05%)</title><rect x="78.5889%" y="165" width="2.0512%" height="15" fill="rgb(224,114,35)"/><text x="78.8389%" y="175.50">c..</text></g><g><title>evaluate_obligation (691,779 samples, 0.14%)</title><rect x="81.3073%" y="149" width="0.1423%" height="15" fill="rgb(245,159,27)"/><text x="81.5573%" y="159.50"></text></g><g><title>param_env (544,485 samples, 0.11%)</title><rect x="81.4981%" y="149" width="0.1120%" height="15" fill="rgb(245,172,44)"/><text x="81.7481%" y="159.50"></text></g><g><title>check_item_well_formed (5,353,828 samples, 1.10%)</title><rect x="80.6401%" y="165" width="1.1009%" height="15" fill="rgb(236,23,11)"/><text x="80.8901%" y="175.50"></text></g><g><title>analysis (396,744,883 samples, 81.58%)</title><rect x="0.2186%" y="213" width="81.5843%" height="15" fill="rgb(205,117,38)"/><text x="0.4686%" y="223.50">analysis</text></g><g><title>type_check_crate (228,811,351 samples, 47.05%)</title><rect x="34.7514%" y="197" width="47.0515%" height="15" fill="rgb(237,72,25)"/><text x="35.0014%" y="207.50">type_check_crate</text></g><g><title>wf_checking (16,263,752 samples, 3.34%)</title><rect x="78.4585%" y="181" width="3.3444%" height="15" fill="rgb(244,70,9)"/><text x="78.7085%" y="191.50">wf_..</text></g><g><title>metadata_register_crate (1,472,877 samples, 0.30%)</title><rect x="89.9434%" y="165" width="0.3029%" height="15" fill="rgb(217,125,39)"/><text x="90.1934%" y="175.50"></text></g><g><title>metadata_register_crate (549,925 samples, 0.11%)</title><rect x="90.1332%" y="149" width="0.1131%" height="15" fill="rgb(235,36,10)"/><text x="90.3832%" y="159.50"></text></g><g><title>macro_expand_crate (40,607,683 samples, 8.35%)</title><rect x="82.1093%" y="197" width="8.3503%" height="15" fill="rgb(251,123,47)"/><text x="82.3593%" y="207.50">macro_expand..</text></g><g><title>expand_crate (40,585,533 samples, 8.35%)</title><rect x="82.1138%" y="181" width="8.3458%" height="15" fill="rgb(221,13,13)"/><text x="82.3638%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,037,372 samples, 0.21%)</title><rect x="90.2463%" y="165" width="0.2133%" height="15" fill="rgb(238,131,9)"/><text x="90.4963%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (554,556 samples, 0.11%)</title><rect x="90.4604%" y="197" width="0.1140%" height="15" fill="rgb(211,50,8)"/><text x="90.7104%" y="207.50"></text></g><g><title>late_resolve_crate (6,656,084 samples, 1.37%)</title><rect x="90.6444%" y="181" width="1.3687%" height="15" fill="rgb(245,182,24)"/><text x="90.8944%" y="191.50"></text></g><g><title>configure_and_expand (49,767,325 samples, 10.23%)</title><rect x="81.8929%" y="213" width="10.2339%" height="15" fill="rgb(242,14,37)"/><text x="82.1429%" y="223.50">configure_and_e..</text></g><g><title>resolve_crate (7,548,725 samples, 1.55%)</title><rect x="90.5745%" y="197" width="1.5523%" height="15" fill="rgb(246,228,12)"/><text x="90.8245%" y="207.50"></text></g><g><title>drop_ast (869,199 samples, 0.18%)</title><rect x="92.1268%" y="213" width="0.1787%" height="15" fill="rgb(213,55,15)"/><text x="92.3768%" y="223.50"></text></g><g><title>early_lint_checks (1,869,001 samples, 0.38%)</title><rect x="92.3093%" y="213" width="0.3843%" height="15" fill="rgb(209,9,3)"/><text x="92.5593%" y="223.50"></text></g><g><title>free_global_ctxt (6,788,536 samples, 1.40%)</title><rect x="92.6937%" y="213" width="1.3960%" height="15" fill="rgb(230,59,30)"/><text x="92.9437%" y="223.50"></text></g><g><title>generate_crate_metadata (3,433,528 samples, 0.71%)</title><rect x="94.0896%" y="213" width="0.7061%" height="15" fill="rgb(209,121,21)"/><text x="94.3396%" y="223.50"></text></g><g><title>hir_lowering (12,969,755 samples, 2.67%)</title><rect x="94.7957%" y="213" width="2.6670%" height="15" fill="rgb(220,109,13)"/><text x="95.0457%" y="223.50">hi..</text></g><g><title>parse_crate (9,808,719 samples, 2.02%)</title><rect x="97.4900%" y="213" width="2.0170%" height="15" fill="rgb(232,18,1)"/><text x="97.7400%" y="223.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,596,908 samples, 0.33%)</title><rect x="99.5540%" y="213" width="0.3284%" height="15" fill="rgb(215,41,42)"/><text x="99.8040%" y="223.50"></text></g><g><title>all (486,300,252 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (486,300,252 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>