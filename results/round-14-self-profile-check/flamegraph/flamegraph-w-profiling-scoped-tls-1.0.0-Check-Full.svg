<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (48,781 samples, 0.11%)</title><rect x="6.2057%" y="117" width="0.1116%" height="15" fill="rgb(227,0,7)"/><text x="6.4557%" y="127.50"></text></g><g><title>codegen_fn_attrs (58,260 samples, 0.13%)</title><rect x="6.5641%" y="101" width="0.1333%" height="15" fill="rgb(217,0,24)"/><text x="6.8141%" y="111.50"></text></g><g><title>needs_drop_raw (147,512 samples, 0.34%)</title><rect x="7.5749%" y="85" width="0.3376%" height="15" fill="rgb(221,193,54)"/><text x="7.8249%" y="95.50"></text></g><g><title>is_copy_raw (134,992 samples, 0.31%)</title><rect x="7.6036%" y="69" width="0.3089%" height="15" fill="rgb(248,212,6)"/><text x="7.8536%" y="79.50"></text></g><g><title>evaluate_obligation (90,952 samples, 0.21%)</title><rect x="7.7044%" y="53" width="0.2081%" height="15" fill="rgb(208,68,35)"/><text x="7.9544%" y="63.50"></text></g><g><title>thir_body (123,901 samples, 0.28%)</title><rect x="8.0210%" y="85" width="0.2836%" height="15" fill="rgb(232,128,0)"/><text x="8.2710%" y="95.50"></text></g><g><title>mir_const (1,126,252 samples, 2.58%)</title><rect x="5.7496%" y="133" width="2.5775%" height="15" fill="rgb(207,160,47)"/><text x="5.9996%" y="143.50">mi..</text></g><g><title>unsafety_check_result (878,160 samples, 2.01%)</title><rect x="6.3174%" y="117" width="2.0097%" height="15" fill="rgb(228,23,34)"/><text x="6.5674%" y="127.50">u..</text></g><g><title>mir_built (712,108 samples, 1.63%)</title><rect x="6.6974%" y="101" width="1.6297%" height="15" fill="rgb(218,30,26)"/><text x="6.9474%" y="111.50"></text></g><g><title>mir_promoted (1,288,214 samples, 2.95%)</title><rect x="5.4036%" y="149" width="2.9481%" height="15" fill="rgb(220,122,19)"/><text x="5.6536%" y="159.50">mi..</text></g><g><title>type_op_normalize_fn_sig (58,120 samples, 0.13%)</title><rect x="8.3517%" y="149" width="0.1330%" height="15" fill="rgb(250,228,42)"/><text x="8.6017%" y="159.50"></text></g><g><title>MIR_borrow_checking (3,303,677 samples, 7.56%)</title><rect x="1.9113%" y="181" width="7.5606%" height="15" fill="rgb(240,193,28)"/><text x="2.1613%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (3,286,097 samples, 7.52%)</title><rect x="1.9516%" y="165" width="7.5204%" height="15" fill="rgb(216,20,37)"/><text x="2.2016%" y="175.50">mir_borrow..</text></g><g><title>type_op_prove_predicate (431,385 samples, 0.99%)</title><rect x="8.4847%" y="149" width="0.9872%" height="15" fill="rgb(206,188,39)"/><text x="8.7347%" y="159.50"></text></g><g><title>hir_module_items (125,402 samples, 0.29%)</title><rect x="9.4824%" y="181" width="0.2870%" height="15" fill="rgb(217,207,13)"/><text x="9.7324%" y="191.50"></text></g><g><title>get_lang_items (73,251 samples, 0.17%)</title><rect x="10.2559%" y="133" width="0.1676%" height="15" fill="rgb(231,73,38)"/><text x="10.5059%" y="143.50"></text></g><g><title>codegen_fn_attrs (67,691 samples, 0.15%)</title><rect x="10.5680%" y="117" width="0.1549%" height="15" fill="rgb(225,20,46)"/><text x="10.8180%" y="127.50"></text></g><g><title>should_inherit_track_caller (134,641 samples, 0.31%)</title><rect x="10.4235%" y="133" width="0.3081%" height="15" fill="rgb(210,31,41)"/><text x="10.6735%" y="143.50"></text></g><g><title>codegen_fn_attrs (306,643 samples, 0.70%)</title><rect x="10.0961%" y="149" width="0.7018%" height="15" fill="rgb(221,200,47)"/><text x="10.3461%" y="159.50"></text></g><g><title>check_mod_attrs (421,065 samples, 0.96%)</title><rect x="9.8353%" y="165" width="0.9636%" height="15" fill="rgb(226,26,5)"/><text x="10.0853%" y="175.50"></text></g><g><title>check_mod_const_bodies (50,000 samples, 0.11%)</title><rect x="10.7989%" y="165" width="0.1144%" height="15" fill="rgb(249,33,26)"/><text x="11.0489%" y="175.50"></text></g><g><title>lookup_deprecation_entry (69,380 samples, 0.16%)</title><rect x="11.1582%" y="149" width="0.1588%" height="15" fill="rgb(235,183,28)"/><text x="11.4082%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (182,632 samples, 0.42%)</title><rect x="11.0042%" y="165" width="0.4180%" height="15" fill="rgb(221,5,38)"/><text x="11.2542%" y="175.50"></text></g><g><title>misc_checking_1 (771,798 samples, 1.77%)</title><rect x="9.7703%" y="181" width="1.7663%" height="15" fill="rgb(247,18,42)"/><text x="10.0203%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (102,421 samples, 0.23%)</title><rect x="11.5419%" y="165" width="0.2344%" height="15" fill="rgb(241,131,45)"/><text x="11.7919%" y="175.50"></text></g><g><title>check_mod_liveness (79,901 samples, 0.18%)</title><rect x="11.5934%" y="149" width="0.1829%" height="15" fill="rgb(249,31,29)"/><text x="11.8434%" y="159.50"></text></g><g><title>misc_checking_2 (293,123 samples, 0.67%)</title><rect x="11.5366%" y="181" width="0.6708%" height="15" fill="rgb(225,111,53)"/><text x="11.7866%" y="191.50"></text></g><g><title>match_checking (188,402 samples, 0.43%)</title><rect x="11.7763%" y="165" width="0.4312%" height="15" fill="rgb(238,160,17)"/><text x="12.0263%" y="175.50"></text></g><g><title>check_match (178,932 samples, 0.41%)</title><rect x="11.7979%" y="149" width="0.4095%" height="15" fill="rgb(214,148,48)"/><text x="12.0479%" y="159.50"></text></g><g><title>param_env (62,821 samples, 0.14%)</title><rect x="12.0636%" y="133" width="0.1438%" height="15" fill="rgb(232,36,49)"/><text x="12.3136%" y="143.50"></text></g><g><title>death_checking (50,741 samples, 0.12%)</title><rect x="12.3130%" y="165" width="0.1161%" height="15" fill="rgb(209,103,24)"/><text x="12.5630%" y="175.50"></text></g><g><title>param_env (51,331 samples, 0.12%)</title><rect x="13.4209%" y="133" width="0.1175%" height="15" fill="rgb(229,88,8)"/><text x="13.6709%" y="143.50"></text></g><g><title>trait_impls_of (215,703 samples, 0.49%)</title><rect x="13.5383%" y="133" width="0.4936%" height="15" fill="rgb(213,181,19)"/><text x="13.7883%" y="143.50"></text></g><g><title>crate_lints (3,525,100 samples, 8.07%)</title><rect x="12.4410%" y="149" width="8.0674%" height="15" fill="rgb(254,191,54)"/><text x="12.6910%" y="159.50">crate_lints</text></g><g><title>type_of (2,827,601 samples, 6.47%)</title><rect x="14.0372%" y="133" width="6.4711%" height="15" fill="rgb(241,83,37)"/><text x="14.2872%" y="143.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,568,999 samples, 5.88%)</title><rect x="14.6291%" y="117" width="5.8793%" height="15" fill="rgb(233,36,39)"/><text x="14.8791%" y="127.50">metadat..</text></g><g><title>lint_checking (3,581,930 samples, 8.20%)</title><rect x="12.4292%" y="165" width="8.1974%" height="15" fill="rgb(226,3,54)"/><text x="12.6792%" y="175.50">lint_checki..</text></g><g><title>module_lints (51,670 samples, 0.12%)</title><rect x="20.5083%" y="149" width="0.1182%" height="15" fill="rgb(245,192,40)"/><text x="20.7583%" y="159.50"></text></g><g><title>lint_mod (49,280 samples, 0.11%)</title><rect x="20.5138%" y="133" width="0.1128%" height="15" fill="rgb(238,167,29)"/><text x="20.7638%" y="143.50"></text></g><g><title>privacy_access_levels (50,201 samples, 0.11%)</title><rect x="20.6266%" y="165" width="0.1149%" height="15" fill="rgb(232,182,51)"/><text x="20.8766%" y="175.50"></text></g><g><title>privacy_checking_modules (110,892 samples, 0.25%)</title><rect x="20.7415%" y="165" width="0.2538%" height="15" fill="rgb(231,60,39)"/><text x="20.9915%" y="175.50"></text></g><g><title>check_mod_privacy (109,222 samples, 0.25%)</title><rect x="20.7453%" y="149" width="0.2500%" height="15" fill="rgb(208,69,12)"/><text x="20.9953%" y="159.50"></text></g><g><title>misc_checking_3 (3,851,064 samples, 8.81%)</title><rect x="12.2074%" y="181" width="8.8134%" height="15" fill="rgb(235,93,37)"/><text x="12.4574%" y="191.50">misc_checkin..</text></g><g><title>impl_parent (265,903 samples, 0.61%)</title><rect x="22.2447%" y="117" width="0.6085%" height="15" fill="rgb(213,116,39)"/><text x="22.4947%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (175,702 samples, 0.40%)</title><rect x="22.4512%" y="101" width="0.4021%" height="15" fill="rgb(222,207,29)"/><text x="22.7012%" y="111.50"></text></g><g><title>impl_trait_ref (909,062 samples, 2.08%)</title><rect x="22.8533%" y="117" width="2.0804%" height="15" fill="rgb(206,96,30)"/><text x="23.1033%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (819,981 samples, 1.88%)</title><rect x="23.0571%" y="101" width="1.8766%" height="15" fill="rgb(218,138,4)"/><text x="23.3071%" y="111.50">m..</text></g><g><title>coherent_trait (1,792,430 samples, 4.10%)</title><rect x="21.1781%" y="149" width="4.1021%" height="15" fill="rgb(250,191,14)"/><text x="21.4281%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (1,780,459 samples, 4.07%)</title><rect x="21.2055%" y="133" width="4.0747%" height="15" fill="rgb(239,60,40)"/><text x="21.4555%" y="143.50">spec..</text></g><g><title>trait_impls_of (151,381 samples, 0.35%)</title><rect x="24.9337%" y="117" width="0.3464%" height="15" fill="rgb(206,27,48)"/><text x="25.1837%" y="127.50"></text></g><g><title>implementations_of_trait (45,201 samples, 0.10%)</title><rect x="25.1767%" y="101" width="0.1034%" height="15" fill="rgb(225,35,8)"/><text x="25.4267%" y="111.50"></text></g><g><title>coherence_checking (1,876,791 samples, 4.30%)</title><rect x="21.1319%" y="165" width="4.2951%" height="15" fill="rgb(250,213,24)"/><text x="21.3819%" y="175.50">coher..</text></g><g><title>associated_item (46,651 samples, 0.11%)</title><rect x="35.2285%" y="85" width="0.1068%" height="15" fill="rgb(247,123,22)"/><text x="35.4785%" y="95.50"></text></g><g><title>associated_items (83,791 samples, 0.19%)</title><rect x="35.1662%" y="101" width="0.1918%" height="15" fill="rgb(231,138,38)"/><text x="35.4162%" y="111.50"></text></g><g><title>dropck_outlives (71,662 samples, 0.16%)</title><rect x="35.3972%" y="101" width="0.1640%" height="15" fill="rgb(231,145,46)"/><text x="35.6472%" y="111.50"></text></g><g><title>predicates_of (58,950 samples, 0.13%)</title><rect x="36.6921%" y="85" width="0.1349%" height="15" fill="rgb(251,118,11)"/><text x="36.9421%" y="95.50"></text></g><g><title>evaluate_obligation (1,250,116 samples, 2.86%)</title><rect x="35.5612%" y="101" width="2.8610%" height="15" fill="rgb(217,147,25)"/><text x="35.8112%" y="111.50">ev..</text></g><g><title>trait_impls_of (690,620 samples, 1.58%)</title><rect x="36.8417%" y="85" width="1.5805%" height="15" fill="rgb(247,81,37)"/><text x="37.0917%" y="95.50"></text></g><g><title>implementations_of_trait (196,212 samples, 0.45%)</title><rect x="37.9731%" y="69" width="0.4490%" height="15" fill="rgb(209,12,38)"/><text x="38.2231%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (141,282 samples, 0.32%)</title><rect x="38.0988%" y="53" width="0.3233%" height="15" fill="rgb(227,1,9)"/><text x="38.3488%" y="63.50"></text></g><g><title>associated_item (91,111 samples, 0.21%)</title><rect x="38.6445%" y="69" width="0.2085%" height="15" fill="rgb(248,47,43)"/><text x="38.8945%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (90,201 samples, 0.21%)</title><rect x="38.6466%" y="53" width="0.2064%" height="15" fill="rgb(221,10,30)"/><text x="38.8966%" y="63.50"></text></g><g><title>impl_item_implementor_ids (97,781 samples, 0.22%)</title><rect x="38.6314%" y="101" width="0.2238%" height="15" fill="rgb(210,229,1)"/><text x="38.8814%" y="111.50"></text></g><g><title>associated_items (95,881 samples, 0.22%)</title><rect x="38.6357%" y="85" width="0.2194%" height="15" fill="rgb(222,148,37)"/><text x="38.8857%" y="95.50"></text></g><g><title>impl_trait_ref (58,891 samples, 0.13%)</title><rect x="38.8673%" y="101" width="0.1348%" height="15" fill="rgb(234,67,33)"/><text x="39.1173%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (52,490 samples, 0.12%)</title><rect x="38.8819%" y="85" width="0.1201%" height="15" fill="rgb(247,98,35)"/><text x="39.1319%" y="95.50"></text></g><g><title>implied_outlives_bounds (65,270 samples, 0.15%)</title><rect x="39.0020%" y="101" width="0.1494%" height="15" fill="rgb(247,138,52)"/><text x="39.2520%" y="111.50"></text></g><g><title>is_copy_raw (329,274 samples, 0.75%)</title><rect x="39.2198%" y="101" width="0.7536%" height="15" fill="rgb(213,79,30)"/><text x="39.4698%" y="111.50"></text></g><g><title>evaluate_obligation (261,914 samples, 0.60%)</title><rect x="39.3740%" y="85" width="0.5994%" height="15" fill="rgb(246,177,23)"/><text x="39.6240%" y="95.50"></text></g><g><title>lint_levels (60,131 samples, 0.14%)</title><rect x="40.0016%" y="101" width="0.1376%" height="15" fill="rgb(230,62,27)"/><text x="40.2516%" y="111.50"></text></g><g><title>method_autoderef_steps (267,262 samples, 0.61%)</title><rect x="40.1690%" y="101" width="0.6116%" height="15" fill="rgb(216,154,8)"/><text x="40.4190%" y="111.50"></text></g><g><title>evaluate_obligation (158,761 samples, 0.36%)</title><rect x="40.4173%" y="85" width="0.3633%" height="15" fill="rgb(244,35,45)"/><text x="40.6673%" y="95.50"></text></g><g><title>explicit_predicates_of (58,380 samples, 0.13%)</title><rect x="40.9477%" y="69" width="0.1336%" height="15" fill="rgb(251,115,12)"/><text x="41.1977%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (48,990 samples, 0.11%)</title><rect x="40.9692%" y="53" width="0.1121%" height="15" fill="rgb(240,54,50)"/><text x="41.2192%" y="63.50"></text></g><g><title>predicates_of (141,911 samples, 0.32%)</title><rect x="40.7990%" y="101" width="0.3248%" height="15" fill="rgb(233,84,52)"/><text x="41.0490%" y="111.50"></text></g><g><title>predicates_defined_on (102,381 samples, 0.23%)</title><rect x="40.8894%" y="85" width="0.2343%" height="15" fill="rgb(207,117,47)"/><text x="41.1394%" y="95.50"></text></g><g><title>type_of (55,081 samples, 0.13%)</title><rect x="41.2389%" y="101" width="0.1261%" height="15" fill="rgb(249,43,39)"/><text x="41.4889%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (50,791 samples, 0.12%)</title><rect x="41.2488%" y="85" width="0.1162%" height="15" fill="rgb(209,38,44)"/><text x="41.4988%" y="95.50"></text></g><g><title>item_bodies_checking (6,985,119 samples, 15.99%)</title><rect x="25.4799%" y="165" width="15.9858%" height="15" fill="rgb(236,212,23)"/><text x="25.7299%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (6,982,059 samples, 15.98%)</title><rect x="25.4869%" y="149" width="15.9788%" height="15" fill="rgb(242,79,21)"/><text x="25.7369%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (6,966,879 samples, 15.94%)</title><rect x="25.5217%" y="133" width="15.9440%" height="15" fill="rgb(211,96,35)"/><text x="25.7717%" y="143.50">typeck</text></g><g><title>typeck (6,948,259 samples, 15.90%)</title><rect x="25.5643%" y="117" width="15.9014%" height="15" fill="rgb(253,215,40)"/><text x="25.8143%" y="127.50">typeck</text></g><g><title>item_types_checking (204,932 samples, 0.47%)</title><rect x="41.4657%" y="165" width="0.4690%" height="15" fill="rgb(211,81,21)"/><text x="41.7157%" y="175.50"></text></g><g><title>check_mod_item_types (201,122 samples, 0.46%)</title><rect x="41.4745%" y="149" width="0.4603%" height="15" fill="rgb(208,190,38)"/><text x="41.7245%" y="159.50"></text></g><g><title>named_region_map (98,911 samples, 0.23%)</title><rect x="42.5113%" y="117" width="0.2264%" height="15" fill="rgb(235,213,38)"/><text x="42.7613%" y="127.50"></text></g><g><title>resolve_lifetimes (92,481 samples, 0.21%)</title><rect x="42.5260%" y="101" width="0.2116%" height="15" fill="rgb(237,122,38)"/><text x="42.7760%" y="111.50"></text></g><g><title>generics_of (197,082 samples, 0.45%)</title><rect x="42.3312%" y="133" width="0.4510%" height="15" fill="rgb(244,218,35)"/><text x="42.5812%" y="143.50"></text></g><g><title>explicit_predicates_of (231,043 samples, 0.53%)</title><rect x="42.9563%" y="101" width="0.5288%" height="15" fill="rgb(240,68,47)"/><text x="43.2063%" y="111.50"></text></g><g><title>predicates_of (44,360 samples, 0.10%)</title><rect x="43.6576%" y="69" width="0.1015%" height="15" fill="rgb(210,16,53)"/><text x="43.9076%" y="79.50"></text></g><g><title>named_region_map (65,291 samples, 0.15%)</title><rect x="43.8487%" y="53" width="0.1494%" height="15" fill="rgb(235,124,12)"/><text x="44.0987%" y="63.50"></text></g><g><title>resolve_lifetimes (52,030 samples, 0.12%)</title><rect x="43.8791%" y="37" width="0.1191%" height="15" fill="rgb(224,169,11)"/><text x="44.1291%" y="47.50"></text></g><g><title>predicates_of (560,746 samples, 1.28%)</title><rect x="42.8379%" y="133" width="1.2833%" height="15" fill="rgb(250,166,2)"/><text x="43.0879%" y="143.50"></text></g><g><title>predicates_defined_on (546,386 samples, 1.25%)</title><rect x="42.8707%" y="117" width="1.2504%" height="15" fill="rgb(242,216,29)"/><text x="43.1207%" y="127.50"></text></g><g><title>inferred_outlives_of (277,953 samples, 0.64%)</title><rect x="43.4850%" y="101" width="0.6361%" height="15" fill="rgb(230,116,27)"/><text x="43.7350%" y="111.50"></text></g><g><title>inferred_outlives_crate (259,943 samples, 0.59%)</title><rect x="43.5263%" y="85" width="0.5949%" height="15" fill="rgb(228,99,48)"/><text x="43.7763%" y="95.50"></text></g><g><title>type_of (158,193 samples, 0.36%)</title><rect x="43.7591%" y="69" width="0.3620%" height="15" fill="rgb(253,11,6)"/><text x="44.0091%" y="79.50"></text></g><g><title>type_of (53,742 samples, 0.12%)</title><rect x="43.9982%" y="53" width="0.1230%" height="15" fill="rgb(247,143,39)"/><text x="44.2482%" y="63.50"></text></g><g><title>metadata_decode_entry_type_of (50,761 samples, 0.12%)</title><rect x="44.0050%" y="37" width="0.1162%" height="15" fill="rgb(236,97,10)"/><text x="44.2550%" y="47.50"></text></g><g><title>type_collecting (1,024,961 samples, 2.35%)</title><rect x="41.9380%" y="165" width="2.3457%" height="15" fill="rgb(233,208,19)"/><text x="42.1880%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,007,391 samples, 2.31%)</title><rect x="41.9782%" y="149" width="2.3055%" height="15" fill="rgb(216,164,2)"/><text x="42.2282%" y="159.50">c..</text></g><g><title>type_of (71,010 samples, 0.16%)</title><rect x="44.1211%" y="133" width="0.1625%" height="15" fill="rgb(220,129,5)"/><text x="44.3711%" y="143.50"></text></g><g><title>evaluate_obligation (286,312 samples, 0.66%)</title><rect x="45.6111%" y="133" width="0.6552%" height="15" fill="rgb(242,17,10)"/><text x="45.8611%" y="143.50"></text></g><g><title>implied_outlives_bounds (129,071 samples, 0.30%)</title><rect x="46.2664%" y="133" width="0.2954%" height="15" fill="rgb(242,107,0)"/><text x="46.5164%" y="143.50"></text></g><g><title>param_env (78,440 samples, 0.18%)</title><rect x="46.5618%" y="133" width="0.1795%" height="15" fill="rgb(251,28,31)"/><text x="46.8118%" y="143.50"></text></g><g><title>region_scope_tree (84,170 samples, 0.19%)</title><rect x="46.7812%" y="133" width="0.1926%" height="15" fill="rgb(233,223,10)"/><text x="47.0312%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,135,723 samples, 2.60%)</title><rect x="44.4432%" y="149" width="2.5992%" height="15" fill="rgb(215,21,27)"/><text x="44.6932%" y="159.50">ch..</text></g><g><title>adt_def (67,791 samples, 0.16%)</title><rect x="48.6925%" y="85" width="0.1551%" height="15" fill="rgb(232,23,21)"/><text x="48.9425%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (67,191 samples, 0.15%)</title><rect x="48.6939%" y="69" width="0.1538%" height="15" fill="rgb(244,5,23)"/><text x="48.9439%" y="79.50"></text></g><g><title>item_attrs (61,901 samples, 0.14%)</title><rect x="48.7060%" y="53" width="0.1417%" height="15" fill="rgb(226,81,46)"/><text x="48.9560%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (61,151 samples, 0.14%)</title><rect x="48.7077%" y="37" width="0.1399%" height="15" fill="rgb(247,70,30)"/><text x="48.9577%" y="47.50"></text></g><g><title>adt_sized_constraint (81,721 samples, 0.19%)</title><rect x="48.6792%" y="101" width="0.1870%" height="15" fill="rgb(212,68,19)"/><text x="48.9292%" y="111.50"></text></g><g><title>evaluate_obligation (295,113 samples, 0.68%)</title><rect x="48.1945%" y="133" width="0.6754%" height="15" fill="rgb(240,187,13)"/><text x="48.4445%" y="143.50"></text></g><g><title>adt_sized_constraint (125,221 samples, 0.29%)</title><rect x="48.5833%" y="117" width="0.2866%" height="15" fill="rgb(223,113,26)"/><text x="48.8333%" y="127.50"></text></g><g><title>implied_outlives_bounds (61,700 samples, 0.14%)</title><rect x="48.8767%" y="133" width="0.1412%" height="15" fill="rgb(206,192,2)"/><text x="49.1267%" y="143.50"></text></g><g><title>param_env (264,943 samples, 0.61%)</title><rect x="49.0179%" y="133" width="0.6063%" height="15" fill="rgb(241,108,4)"/><text x="49.2679%" y="143.50"></text></g><g><title>analysis (21,138,176 samples, 48.38%)</title><rect x="1.5242%" y="197" width="48.3758%" height="15" fill="rgb(247,173,49)"/><text x="1.7742%" y="207.50">analysis</text></g><g><title>type_check_crate (12,619,000 samples, 28.88%)</title><rect x="21.0208%" y="181" width="28.8792%" height="15" fill="rgb(224,114,35)"/><text x="21.2708%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,452,737 samples, 5.61%)</title><rect x="44.2868%" y="165" width="5.6132%" height="15" fill="rgb(245,159,27)"/><text x="44.5368%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (1,248,644 samples, 2.86%)</title><rect x="47.0424%" y="149" width="2.8576%" height="15" fill="rgb(245,172,44)"/><text x="47.2924%" y="159.50">ch..</text></g><g><title>variances_of (76,161 samples, 0.17%)</title><rect x="49.7257%" y="133" width="0.1743%" height="15" fill="rgb(236,23,11)"/><text x="49.9757%" y="143.50"></text></g><g><title>crate_variances (70,191 samples, 0.16%)</title><rect x="49.7393%" y="117" width="0.1606%" height="15" fill="rgb(205,117,38)"/><text x="49.9893%" y="127.50"></text></g><g><title>codegen_crate (550,736 samples, 1.26%)</title><rect x="49.9260%" y="197" width="1.2604%" height="15" fill="rgb(237,72,25)"/><text x="50.1760%" y="207.50"></text></g><g><title>AST_validation (98,651 samples, 0.23%)</title><rect x="51.6942%" y="181" width="0.2258%" height="15" fill="rgb(244,70,9)"/><text x="51.9442%" y="191.50"></text></g><g><title>crate_injection (102,341 samples, 0.23%)</title><rect x="52.0099%" y="181" width="0.2342%" height="15" fill="rgb(217,125,39)"/><text x="52.2599%" y="191.50"></text></g><g><title>metadata_load_macro (345,444 samples, 0.79%)</title><rect x="74.9585%" y="149" width="0.7906%" height="15" fill="rgb(235,36,10)"/><text x="75.2085%" y="159.50"></text></g><g><title>macro_expand_crate (12,898,414 samples, 29.52%)</title><rect x="52.2441%" y="181" width="29.5187%" height="15" fill="rgb(251,123,47)"/><text x="52.4941%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,881,864 samples, 29.48%)</title><rect x="52.2820%" y="165" width="29.4808%" height="15" fill="rgb(221,13,13)"/><text x="52.5320%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,627,749 samples, 6.01%)</title><rect x="75.7490%" y="149" width="6.0137%" height="15" fill="rgb(238,131,9)"/><text x="75.9990%" y="159.50">metadata..</text></g><g><title>metadata_register_crate (950,361 samples, 2.17%)</title><rect x="79.5878%" y="133" width="2.1749%" height="15" fill="rgb(211,50,8)"/><text x="79.8378%" y="143.50">m..</text></g><g><title>metadata_register_crate (72,622 samples, 0.17%)</title><rect x="81.5966%" y="117" width="0.1662%" height="15" fill="rgb(245,182,24)"/><text x="81.8466%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (196,323 samples, 0.45%)</title><rect x="81.7744%" y="181" width="0.4493%" height="15" fill="rgb(242,14,37)"/><text x="82.0244%" y="191.50"></text></g><g><title>finalize_macro_resolutions (255,153 samples, 0.58%)</title><rect x="82.3274%" y="165" width="0.5839%" height="15" fill="rgb(246,228,12)"/><text x="82.5774%" y="175.50"></text></g><g><title>late_resolve_crate (731,008 samples, 1.67%)</title><rect x="82.9113%" y="165" width="1.6729%" height="15" fill="rgb(213,55,15)"/><text x="83.1613%" y="175.50"></text></g><g><title>configure_and_expand (14,640,393 samples, 33.51%)</title><rect x="51.1863%" y="197" width="33.5053%" height="15" fill="rgb(209,9,3)"/><text x="51.4363%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,078,372 samples, 2.47%)</title><rect x="82.2237%" y="181" width="2.4679%" height="15" fill="rgb(230,59,30)"/><text x="82.4737%" y="191.50">re..</text></g><g><title>drop_ast (79,291 samples, 0.18%)</title><rect x="84.6916%" y="197" width="0.1815%" height="15" fill="rgb(209,121,21)"/><text x="84.9416%" y="207.50"></text></g><g><title>early_lint_checks (175,152 samples, 0.40%)</title><rect x="84.9153%" y="197" width="0.4008%" height="15" fill="rgb(220,109,13)"/><text x="85.1653%" y="207.50"></text></g><g><title>free_global_ctxt (2,017,572 samples, 4.62%)</title><rect x="85.3162%" y="197" width="4.6173%" height="15" fill="rgb(232,18,1)"/><text x="85.5662%" y="207.50">free_..</text></g><g><title>crate_hash (69,312 samples, 0.16%)</title><rect x="90.5556%" y="181" width="0.1586%" height="15" fill="rgb(215,41,42)"/><text x="90.8056%" y="191.50"></text></g><g><title>generate_crate_metadata (414,494 samples, 0.95%)</title><rect x="89.9335%" y="197" width="0.9486%" height="15" fill="rgb(224,123,36)"/><text x="90.1835%" y="207.50"></text></g><g><title>hir_lowering (852,500 samples, 1.95%)</title><rect x="90.8821%" y="197" width="1.9510%" height="15" fill="rgb(240,125,3)"/><text x="91.1321%" y="207.50">h..</text></g><g><title>parse_crate (1,886,051 samples, 4.32%)</title><rect x="92.9252%" y="197" width="4.3163%" height="15" fill="rgb(205,98,50)"/><text x="93.1752%" y="207.50">parse..</text></g><g><title>prepare_outputs (361,134 samples, 0.83%)</title><rect x="97.2637%" y="197" width="0.8265%" height="15" fill="rgb(205,185,37)"/><text x="97.5137%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (368,324 samples, 0.84%)</title><rect x="98.0902%" y="197" width="0.8429%" height="15" fill="rgb(238,207,15)"/><text x="98.3402%" y="207.50"></text></g><g><title>setup_global_ctxt (157,092 samples, 0.36%)</title><rect x="98.9558%" y="197" width="0.3595%" height="15" fill="rgb(213,199,42)"/><text x="99.2058%" y="207.50"></text></g><g><title>all (43,695,797 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (43,695,797 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (299,194 samples, 0.68%)</title><rect x="99.3153%" y="197" width="0.6847%" height="15" fill="rgb(241,35,35)"/><text x="99.5653%" y="207.50"></text></g></svg></svg>