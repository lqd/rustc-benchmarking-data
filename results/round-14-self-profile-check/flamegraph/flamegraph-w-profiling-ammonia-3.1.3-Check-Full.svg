<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (432,761 samples, 0.16%)</title><rect x="15.8451%" y="197" width="0.1628%" height="15" fill="rgb(227,0,7)"/><text x="16.0951%" y="207.50"></text></g><g><title>param_env (724,919 samples, 0.27%)</title><rect x="17.6401%" y="165" width="0.2728%" height="15" fill="rgb(217,0,24)"/><text x="17.8901%" y="175.50"></text></g><g><title>item_attrs (627,336 samples, 0.24%)</title><rect x="18.4526%" y="133" width="0.2361%" height="15" fill="rgb(221,193,54)"/><text x="18.7026%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (602,906 samples, 0.23%)</title><rect x="18.4618%" y="117" width="0.2269%" height="15" fill="rgb(248,212,6)"/><text x="18.7118%" y="127.50"></text></g><g><title>codegen_fn_attrs (875,859 samples, 0.33%)</title><rect x="18.3745%" y="149" width="0.3296%" height="15" fill="rgb(208,68,35)"/><text x="18.6245%" y="159.50"></text></g><g><title>param_env (319,344 samples, 0.12%)</title><rect x="22.5264%" y="101" width="0.1202%" height="15" fill="rgb(232,128,0)"/><text x="22.7764%" y="111.50"></text></g><g><title>adt_drop_tys (956,872 samples, 0.36%)</title><rect x="22.2965%" y="117" width="0.3601%" height="15" fill="rgb(207,160,47)"/><text x="22.5465%" y="127.50"></text></g><g><title>is_copy_raw (1,647,157 samples, 0.62%)</title><rect x="22.6565%" y="117" width="0.6198%" height="15" fill="rgb(228,23,34)"/><text x="22.9065%" y="127.50"></text></g><g><title>evaluate_obligation (1,256,672 samples, 0.47%)</title><rect x="22.8034%" y="101" width="0.4729%" height="15" fill="rgb(218,30,26)"/><text x="23.0534%" y="111.50"></text></g><g><title>needs_drop_raw (2,872,770 samples, 1.08%)</title><rect x="22.1959%" y="133" width="1.0810%" height="15" fill="rgb(220,122,19)"/><text x="22.4459%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (950,100 samples, 0.36%)</title><rect x="23.4423%" y="117" width="0.3575%" height="15" fill="rgb(250,228,42)"/><text x="23.6923%" y="127.50"></text></g><g><title>impl_parent (576,657 samples, 0.22%)</title><rect x="24.1884%" y="101" width="0.2170%" height="15" fill="rgb(240,193,28)"/><text x="24.4384%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (361,992 samples, 0.14%)</title><rect x="24.2691%" y="85" width="0.1362%" height="15" fill="rgb(216,20,37)"/><text x="24.5191%" y="95.50"></text></g><g><title>specialization_graph_of (2,493,596 samples, 0.94%)</title><rect x="23.8562%" y="117" width="0.9383%" height="15" fill="rgb(206,188,39)"/><text x="24.1062%" y="127.50"></text></g><g><title>impl_trait_ref (1,034,085 samples, 0.39%)</title><rect x="24.4053%" y="101" width="0.3891%" height="15" fill="rgb(217,207,13)"/><text x="24.6553%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (819,180 samples, 0.31%)</title><rect x="24.4862%" y="85" width="0.3082%" height="15" fill="rgb(231,73,38)"/><text x="24.7362%" y="95.50"></text></g><g><title>resolve_instance (4,196,369 samples, 1.58%)</title><rect x="23.2772%" y="133" width="1.5790%" height="15" fill="rgb(225,20,46)"/><text x="23.5272%" y="143.50"></text></g><g><title>thir_body (2,847,695 samples, 1.07%)</title><rect x="24.8803%" y="133" width="1.0715%" height="15" fill="rgb(210,31,41)"/><text x="25.1303%" y="143.50"></text></g><g><title>mir_const (24,081,697 samples, 9.06%)</title><rect x="16.9346%" y="181" width="9.0615%" height="15" fill="rgb(221,200,47)"/><text x="17.1846%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (21,481,969 samples, 8.08%)</title><rect x="17.9129%" y="165" width="8.0832%" height="15" fill="rgb(226,26,5)"/><text x="18.1629%" y="175.50">unsafety_ch..</text></g><g><title>mir_built (19,379,398 samples, 7.29%)</title><rect x="18.7040%" y="149" width="7.2921%" height="15" fill="rgb(249,33,26)"/><text x="18.9540%" y="159.50">mir_built</text></g><g><title>has_structural_eq_impls (470,165 samples, 0.18%)</title><rect x="26.1690%" y="165" width="0.1769%" height="15" fill="rgb(235,183,28)"/><text x="26.4190%" y="175.50"></text></g><g><title>evaluate_obligation (449,595 samples, 0.17%)</title><rect x="26.1767%" y="149" width="0.1692%" height="15" fill="rgb(221,5,38)"/><text x="26.4267%" y="159.50"></text></g><g><title>trait_impls_of (419,235 samples, 0.16%)</title><rect x="26.1881%" y="133" width="0.1577%" height="15" fill="rgb(247,18,42)"/><text x="26.4381%" y="143.50"></text></g><g><title>mir_const_qualif (1,117,363 samples, 0.42%)</title><rect x="25.9961%" y="181" width="0.4204%" height="15" fill="rgb(241,131,45)"/><text x="26.2461%" y="191.50"></text></g><g><title>mir_promoted (27,314,181 samples, 10.28%)</title><rect x="16.1403%" y="197" width="10.2778%" height="15" fill="rgb(249,31,29)"/><text x="16.3903%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,157,388 samples, 0.44%)</title><rect x="26.4181%" y="197" width="0.4355%" height="15" fill="rgb(225,111,53)"/><text x="26.6681%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,866,047 samples, 0.70%)</title><rect x="26.8536%" y="197" width="0.7022%" height="15" fill="rgb(238,160,17)"/><text x="27.1036%" y="207.50"></text></g><g><title>normalize_projection_ty (1,051,460 samples, 0.40%)</title><rect x="27.1601%" y="181" width="0.3956%" height="15" fill="rgb(214,148,48)"/><text x="27.4101%" y="191.50"></text></g><g><title>type_op_normalize_predicate (430,676 samples, 0.16%)</title><rect x="27.5557%" y="197" width="0.1621%" height="15" fill="rgb(232,36,49)"/><text x="27.8057%" y="207.50"></text></g><g><title>type_op_prove_predicate (9,325,516 samples, 3.51%)</title><rect x="27.7428%" y="197" width="3.5090%" height="15" fill="rgb(209,103,24)"/><text x="27.9928%" y="207.50">typ..</text></g><g><title>MIR_borrow_checking (81,915,466 samples, 30.82%)</title><rect x="0.4342%" y="229" width="30.8231%" height="15" fill="rgb(229,88,8)"/><text x="0.6842%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (81,715,373 samples, 30.75%)</title><rect x="0.5095%" y="213" width="30.7478%" height="15" fill="rgb(213,181,19)"/><text x="0.7595%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (476,065 samples, 0.18%)</title><rect x="31.5765%" y="197" width="0.1791%" height="15" fill="rgb(254,191,54)"/><text x="31.8265%" y="207.50"></text></g><g><title>check_mod_attrs (871,519 samples, 0.33%)</title><rect x="31.4277%" y="213" width="0.3279%" height="15" fill="rgb(241,83,37)"/><text x="31.6777%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (487,835 samples, 0.18%)</title><rect x="31.8676%" y="213" width="0.1836%" height="15" fill="rgb(233,36,39)"/><text x="32.1176%" y="223.50"></text></g><g><title>misc_checking_1 (1,725,999 samples, 0.65%)</title><rect x="31.4201%" y="229" width="0.6495%" height="15" fill="rgb(226,3,54)"/><text x="31.6701%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,162,472 samples, 0.44%)</title><rect x="32.0703%" y="213" width="0.4374%" height="15" fill="rgb(245,192,40)"/><text x="32.3203%" y="223.50"></text></g><g><title>check_mod_liveness (993,051 samples, 0.37%)</title><rect x="32.1340%" y="197" width="0.3737%" height="15" fill="rgb(238,167,29)"/><text x="32.3840%" y="207.50"></text></g><g><title>type_uninhabited_from (311,382 samples, 0.12%)</title><rect x="32.3905%" y="181" width="0.1172%" height="15" fill="rgb(232,182,51)"/><text x="32.6405%" y="191.50"></text></g><g><title>misc_checking_2 (4,281,097 samples, 1.61%)</title><rect x="32.0696%" y="229" width="1.6109%" height="15" fill="rgb(231,60,39)"/><text x="32.3196%" y="239.50"></text></g><g><title>match_checking (3,116,854 samples, 1.17%)</title><rect x="32.5077%" y="213" width="1.1728%" height="15" fill="rgb(208,69,12)"/><text x="32.7577%" y="223.50"></text></g><g><title>check_match (3,069,784 samples, 1.16%)</title><rect x="32.5254%" y="197" width="1.1551%" height="15" fill="rgb(235,93,37)"/><text x="32.7754%" y="207.50"></text></g><g><title>check_private_in_public (305,273 samples, 0.11%)</title><rect x="33.6843%" y="213" width="0.1149%" height="15" fill="rgb(213,116,39)"/><text x="33.9343%" y="223.50"></text></g><g><title>death_checking (553,816 samples, 0.21%)</title><rect x="33.7992%" y="213" width="0.2084%" height="15" fill="rgb(222,207,29)"/><text x="34.0492%" y="223.50"></text></g><g><title>eval_to_const_value_raw (292,084 samples, 0.11%)</title><rect x="34.5782%" y="69" width="0.1099%" height="15" fill="rgb(206,96,30)"/><text x="34.8282%" y="79.50"></text></g><g><title>eval_to_const_value_raw (290,954 samples, 0.11%)</title><rect x="34.5786%" y="53" width="0.1095%" height="15" fill="rgb(218,138,4)"/><text x="34.8286%" y="63.50"></text></g><g><title>eval_to_allocation_raw (288,934 samples, 0.11%)</title><rect x="34.5793%" y="37" width="0.1087%" height="15" fill="rgb(250,191,14)"/><text x="34.8293%" y="47.50"></text></g><g><title>eval_to_const_value_raw (460,865 samples, 0.17%)</title><rect x="34.5166%" y="133" width="0.1734%" height="15" fill="rgb(239,60,40)"/><text x="34.7666%" y="143.50"></text></g><g><title>eval_to_const_value_raw (459,165 samples, 0.17%)</title><rect x="34.5173%" y="117" width="0.1728%" height="15" fill="rgb(206,27,48)"/><text x="34.7673%" y="127.50"></text></g><g><title>eval_to_allocation_raw (457,735 samples, 0.17%)</title><rect x="34.5178%" y="101" width="0.1722%" height="15" fill="rgb(225,35,8)"/><text x="34.7678%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (300,674 samples, 0.11%)</title><rect x="34.5769%" y="85" width="0.1131%" height="15" fill="rgb(250,213,24)"/><text x="34.8269%" y="95.50"></text></g><g><title>eval_to_allocation_raw (630,556 samples, 0.24%)</title><rect x="34.4532%" y="181" width="0.2373%" height="15" fill="rgb(247,123,22)"/><text x="34.7032%" y="191.50"></text></g><g><title>eval_to_allocation_raw (620,896 samples, 0.23%)</title><rect x="34.4568%" y="165" width="0.2336%" height="15" fill="rgb(231,138,38)"/><text x="34.7068%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (471,775 samples, 0.18%)</title><rect x="34.5130%" y="149" width="0.1775%" height="15" fill="rgb(231,145,46)"/><text x="34.7630%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (326,294 samples, 0.12%)</title><rect x="34.8043%" y="165" width="0.1228%" height="15" fill="rgb(251,118,11)"/><text x="35.0543%" y="175.50"></text></g><g><title>resolve_instance (388,534 samples, 0.15%)</title><rect x="34.7864%" y="181" width="0.1462%" height="15" fill="rgb(217,147,25)"/><text x="35.0364%" y="191.50"></text></g><g><title>crate_lints (3,740,151 samples, 1.41%)</title><rect x="34.0082%" y="197" width="1.4073%" height="15" fill="rgb(247,81,37)"/><text x="34.2582%" y="207.50"></text></g><g><title>type_of (1,259,694 samples, 0.47%)</title><rect x="34.9416%" y="181" width="0.4740%" height="15" fill="rgb(209,12,38)"/><text x="35.1916%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (997,662 samples, 0.38%)</title><rect x="35.0402%" y="165" width="0.3754%" height="15" fill="rgb(227,1,9)"/><text x="35.2902%" y="175.50"></text></g><g><title>lint_checking (4,726,782 samples, 1.78%)</title><rect x="34.0076%" y="213" width="1.7786%" height="15" fill="rgb(248,47,43)"/><text x="34.2576%" y="223.50">l..</text></g><g><title>module_lints (984,821 samples, 0.37%)</title><rect x="35.4156%" y="197" width="0.3706%" height="15" fill="rgb(221,10,30)"/><text x="35.6656%" y="207.50"></text></g><g><title>lint_mod (981,401 samples, 0.37%)</title><rect x="35.4169%" y="181" width="0.3693%" height="15" fill="rgb(210,229,1)"/><text x="35.6669%" y="191.50"></text></g><g><title>privacy_access_levels (401,474 samples, 0.15%)</title><rect x="35.7862%" y="213" width="0.1511%" height="15" fill="rgb(222,148,37)"/><text x="36.0362%" y="223.50"></text></g><g><title>privacy_checking_modules (2,118,184 samples, 0.80%)</title><rect x="35.9372%" y="213" width="0.7970%" height="15" fill="rgb(234,67,33)"/><text x="36.1872%" y="223.50"></text></g><g><title>check_mod_privacy (2,116,244 samples, 0.80%)</title><rect x="35.9380%" y="197" width="0.7963%" height="15" fill="rgb(247,98,35)"/><text x="36.1880%" y="207.50"></text></g><g><title>misc_checking_3 (8,141,611 samples, 3.06%)</title><rect x="33.6805%" y="229" width="3.0635%" height="15" fill="rgb(247,138,52)"/><text x="33.9305%" y="239.50">mis..</text></g><g><title>adt_destructor (394,694 samples, 0.15%)</title><rect x="36.8037%" y="181" width="0.1485%" height="15" fill="rgb(213,79,30)"/><text x="37.0537%" y="191.50"></text></g><g><title>coherent_trait (391,064 samples, 0.15%)</title><rect x="36.8050%" y="165" width="0.1471%" height="15" fill="rgb(246,177,23)"/><text x="37.0550%" y="175.50"></text></g><g><title>specialization_graph_of (389,894 samples, 0.15%)</title><rect x="36.8055%" y="149" width="0.1467%" height="15" fill="rgb(230,62,27)"/><text x="37.0555%" y="159.50"></text></g><g><title>impl_parent (2,388,662 samples, 0.90%)</title><rect x="38.5633%" y="165" width="0.8988%" height="15" fill="rgb(216,154,8)"/><text x="38.8133%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,481,402 samples, 0.56%)</title><rect x="38.9047%" y="149" width="0.5574%" height="15" fill="rgb(244,35,45)"/><text x="39.1547%" y="159.50"></text></g><g><title>impl_trait_ref (5,529,883 samples, 2.08%)</title><rect x="39.4621%" y="165" width="2.0808%" height="15" fill="rgb(251,115,12)"/><text x="39.7121%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,603,352 samples, 1.73%)</title><rect x="39.8107%" y="149" width="1.7321%" height="15" fill="rgb(240,54,50)"/><text x="40.0607%" y="159.50"></text></g><g><title>trait_impls_of (889,230 samples, 0.33%)</title><rect x="41.5556%" y="165" width="0.3346%" height="15" fill="rgb(233,84,52)"/><text x="41.8056%" y="175.50"></text></g><g><title>implementations_of_trait (287,094 samples, 0.11%)</title><rect x="41.7822%" y="149" width="0.1080%" height="15" fill="rgb(207,117,47)"/><text x="42.0322%" y="159.50"></text></g><g><title>coherent_trait (13,556,420 samples, 5.10%)</title><rect x="36.7895%" y="197" width="5.1010%" height="15" fill="rgb(249,43,39)"/><text x="37.0395%" y="207.50">cohere..</text></g><g><title>specialization_graph_of (12,752,201 samples, 4.80%)</title><rect x="37.0922%" y="181" width="4.7984%" height="15" fill="rgb(209,38,44)"/><text x="37.3422%" y="191.50">specia..</text></g><g><title>coherence_checking (13,686,052 samples, 5.15%)</title><rect x="36.7818%" y="213" width="5.1498%" height="15" fill="rgb(236,212,23)"/><text x="37.0318%" y="223.50">cohere..</text></g><g><title>associated_item (723,126 samples, 0.27%)</title><rect x="58.7851%" y="149" width="0.2721%" height="15" fill="rgb(242,79,21)"/><text x="59.0351%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (379,981 samples, 0.14%)</title><rect x="58.9142%" y="133" width="0.1430%" height="15" fill="rgb(211,96,35)"/><text x="59.1642%" y="143.50"></text></g><g><title>associated_items (959,079 samples, 0.36%)</title><rect x="58.7112%" y="165" width="0.3609%" height="15" fill="rgb(253,215,40)"/><text x="58.9612%" y="175.50"></text></g><g><title>adt_dtorck_constraint (451,975 samples, 0.17%)</title><rect x="59.4239%" y="133" width="0.1701%" height="15" fill="rgb(211,81,21)"/><text x="59.6739%" y="143.50"></text></g><g><title>adt_dtorck_constraint (878,300 samples, 0.33%)</title><rect x="59.3072%" y="149" width="0.3305%" height="15" fill="rgb(208,190,38)"/><text x="59.5572%" y="159.50"></text></g><g><title>dropck_outlives (1,575,880 samples, 0.59%)</title><rect x="59.1169%" y="165" width="0.5930%" height="15" fill="rgb(235,213,38)"/><text x="59.3669%" y="175.50"></text></g><g><title>trait_impls_of (670,439 samples, 0.25%)</title><rect x="60.7853%" y="149" width="0.2523%" height="15" fill="rgb(237,122,38)"/><text x="61.0353%" y="159.50"></text></g><g><title>implementations_of_trait (273,065 samples, 0.10%)</title><rect x="60.9349%" y="133" width="0.1027%" height="15" fill="rgb(244,218,35)"/><text x="61.1849%" y="143.50"></text></g><g><title>evaluate_obligation (3,529,229 samples, 1.33%)</title><rect x="59.7099%" y="165" width="1.3280%" height="15" fill="rgb(240,68,47)"/><text x="59.9599%" y="175.50"></text></g><g><title>evaluate_obligation (499,557 samples, 0.19%)</title><rect x="61.5374%" y="149" width="0.1880%" height="15" fill="rgb(210,16,53)"/><text x="61.7874%" y="159.50"></text></g><g><title>method_autoderef_steps (1,017,229 samples, 0.38%)</title><rect x="61.3510%" y="165" width="0.3828%" height="15" fill="rgb(235,124,12)"/><text x="61.6010%" y="175.50"></text></g><g><title>predicates_of (515,924 samples, 0.19%)</title><rect x="61.7987%" y="165" width="0.1941%" height="15" fill="rgb(224,169,11)"/><text x="62.0487%" y="175.50"></text></g><g><title>predicates_defined_on (358,704 samples, 0.13%)</title><rect x="61.8578%" y="149" width="0.1350%" height="15" fill="rgb(250,166,2)"/><text x="62.1078%" y="159.50"></text></g><g><title>associated_item (281,646 samples, 0.11%)</title><rect x="72.4316%" y="133" width="0.1060%" height="15" fill="rgb(242,216,29)"/><text x="72.6816%" y="143.50"></text></g><g><title>associated_items (430,426 samples, 0.16%)</title><rect x="72.3898%" y="149" width="0.1620%" height="15" fill="rgb(230,116,27)"/><text x="72.6398%" y="159.50"></text></g><g><title>adt_dtorck_constraint (333,345 samples, 0.13%)</title><rect x="72.7090%" y="133" width="0.1254%" height="15" fill="rgb(228,99,48)"/><text x="72.9590%" y="143.50"></text></g><g><title>dropck_outlives (663,779 samples, 0.25%)</title><rect x="72.6020%" y="149" width="0.2498%" height="15" fill="rgb(253,11,6)"/><text x="72.8520%" y="159.50"></text></g><g><title>trait_impls_of (455,745 samples, 0.17%)</title><rect x="74.2413%" y="133" width="0.1715%" height="15" fill="rgb(247,143,39)"/><text x="74.4913%" y="143.50"></text></g><g><title>evaluate_obligation (4,151,030 samples, 1.56%)</title><rect x="72.8517%" y="149" width="1.5619%" height="15" fill="rgb(236,97,10)"/><text x="73.1017%" y="159.50"></text></g><g><title>evaluate_obligation (417,006 samples, 0.16%)</title><rect x="75.1397%" y="133" width="0.1569%" height="15" fill="rgb(233,208,19)"/><text x="75.3897%" y="143.50"></text></g><g><title>method_autoderef_steps (985,162 samples, 0.37%)</title><rect x="74.9284%" y="149" width="0.3707%" height="15" fill="rgb(216,164,2)"/><text x="75.1784%" y="159.50"></text></g><g><title>predicates_of (554,655 samples, 0.21%)</title><rect x="75.3111%" y="149" width="0.2087%" height="15" fill="rgb(220,129,5)"/><text x="75.5611%" y="159.50"></text></g><g><title>predicates_defined_on (389,772 samples, 0.15%)</title><rect x="75.3731%" y="133" width="0.1467%" height="15" fill="rgb(242,17,10)"/><text x="75.6231%" y="143.50"></text></g><g><title>typeck (36,038,555 samples, 13.56%)</title><rect x="62.0500%" y="165" width="13.5606%" height="15" fill="rgb(242,107,0)"/><text x="62.3000%" y="175.50">typeck</text></g><g><title>item_bodies_checking (89,559,460 samples, 33.70%)</title><rect x="41.9434%" y="213" width="33.6994%" height="15" fill="rgb(251,28,31)"/><text x="42.1934%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (89,555,600 samples, 33.70%)</title><rect x="41.9449%" y="197" width="33.6980%" height="15" fill="rgb(233,223,10)"/><text x="42.1949%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (89,435,068 samples, 33.65%)</title><rect x="41.9902%" y="181" width="33.6526%" height="15" fill="rgb(215,21,27)"/><text x="42.2402%" y="191.50">typeck</text></g><g><title>layout_of (291,833 samples, 0.11%)</title><rect x="75.9246%" y="69" width="0.1098%" height="15" fill="rgb(232,23,21)"/><text x="76.1746%" y="79.50"></text></g><g><title>layout_of (351,903 samples, 0.13%)</title><rect x="75.9046%" y="117" width="0.1324%" height="15" fill="rgb(244,5,23)"/><text x="76.1546%" y="127.50"></text></g><g><title>layout_of (346,143 samples, 0.13%)</title><rect x="75.9067%" y="101" width="0.1302%" height="15" fill="rgb(226,81,46)"/><text x="76.1567%" y="111.50"></text></g><g><title>layout_of (328,933 samples, 0.12%)</title><rect x="75.9132%" y="85" width="0.1238%" height="15" fill="rgb(247,70,30)"/><text x="76.1632%" y="95.50"></text></g><g><title>layout_of (382,324 samples, 0.14%)</title><rect x="75.8971%" y="133" width="0.1439%" height="15" fill="rgb(212,68,19)"/><text x="76.1471%" y="143.50"></text></g><g><title>layout_of (402,654 samples, 0.15%)</title><rect x="75.8923%" y="149" width="0.1515%" height="15" fill="rgb(240,187,13)"/><text x="76.1423%" y="159.50"></text></g><g><title>layout_of (428,564 samples, 0.16%)</title><rect x="75.8841%" y="181" width="0.1613%" height="15" fill="rgb(223,113,26)"/><text x="76.1341%" y="191.50"></text></g><g><title>layout_of (416,964 samples, 0.16%)</title><rect x="75.8885%" y="165" width="0.1569%" height="15" fill="rgb(206,192,2)"/><text x="76.1385%" y="175.50"></text></g><g><title>adt_dtorck_constraint (289,963 samples, 0.11%)</title><rect x="76.1904%" y="117" width="0.1091%" height="15" fill="rgb(241,108,4)"/><text x="76.4404%" y="127.50"></text></g><g><title>adt_dtorck_constraint (308,273 samples, 0.12%)</title><rect x="76.1852%" y="133" width="0.1160%" height="15" fill="rgb(247,173,49)"/><text x="76.4352%" y="143.50"></text></g><g><title>dropck_outlives (371,314 samples, 0.14%)</title><rect x="76.1638%" y="165" width="0.1397%" height="15" fill="rgb(224,114,35)"/><text x="76.4138%" y="175.50"></text></g><g><title>adt_dtorck_constraint (336,344 samples, 0.13%)</title><rect x="76.1770%" y="149" width="0.1266%" height="15" fill="rgb(245,159,27)"/><text x="76.4270%" y="159.50"></text></g><g><title>item_types_checking (1,819,810 samples, 0.68%)</title><rect x="75.6428%" y="213" width="0.6848%" height="15" fill="rgb(245,172,44)"/><text x="75.8928%" y="223.50"></text></g><g><title>check_mod_item_types (1,817,240 samples, 0.68%)</title><rect x="75.6438%" y="197" width="0.6838%" height="15" fill="rgb(236,23,11)"/><text x="75.8938%" y="207.50"></text></g><g><title>typeck (687,218 samples, 0.26%)</title><rect x="76.0690%" y="181" width="0.2586%" height="15" fill="rgb(205,117,38)"/><text x="76.3190%" y="191.50"></text></g><g><title>fn_sig (320,794 samples, 0.12%)</title><rect x="76.4544%" y="181" width="0.1207%" height="15" fill="rgb(237,72,25)"/><text x="76.7044%" y="191.50"></text></g><g><title>is_late_bound_map (659,497 samples, 0.25%)</title><rect x="76.6273%" y="165" width="0.2482%" height="15" fill="rgb(244,70,9)"/><text x="76.8773%" y="175.50"></text></g><g><title>resolve_lifetimes (649,657 samples, 0.24%)</title><rect x="76.6310%" y="149" width="0.2445%" height="15" fill="rgb(217,125,39)"/><text x="76.8810%" y="159.50"></text></g><g><title>generics_of (955,010 samples, 0.36%)</title><rect x="76.5751%" y="181" width="0.3594%" height="15" fill="rgb(235,36,10)"/><text x="76.8251%" y="191.50"></text></g><g><title>explicit_predicates_of (392,194 samples, 0.15%)</title><rect x="77.0001%" y="149" width="0.1476%" height="15" fill="rgb(251,123,47)"/><text x="77.2501%" y="159.50"></text></g><g><title>predicates_of (1,109,023 samples, 0.42%)</title><rect x="76.9475%" y="181" width="0.4173%" height="15" fill="rgb(221,13,13)"/><text x="77.1975%" y="191.50"></text></g><g><title>predicates_defined_on (1,056,662 samples, 0.40%)</title><rect x="76.9672%" y="165" width="0.3976%" height="15" fill="rgb(238,131,9)"/><text x="77.2172%" y="175.50"></text></g><g><title>inferred_outlives_of (576,916 samples, 0.22%)</title><rect x="77.1477%" y="149" width="0.2171%" height="15" fill="rgb(211,50,8)"/><text x="77.3977%" y="159.50"></text></g><g><title>inferred_outlives_crate (554,266 samples, 0.21%)</title><rect x="77.1562%" y="133" width="0.2086%" height="15" fill="rgb(245,182,24)"/><text x="77.4062%" y="143.50"></text></g><g><title>type_of (403,016 samples, 0.15%)</title><rect x="77.2131%" y="117" width="0.1516%" height="15" fill="rgb(242,14,37)"/><text x="77.4631%" y="127.50"></text></g><g><title>type_collecting (2,905,652 samples, 1.09%)</title><rect x="76.3290%" y="213" width="1.0933%" height="15" fill="rgb(246,228,12)"/><text x="76.5790%" y="223.50"></text></g><g><title>collect_mod_item_types (2,898,212 samples, 1.09%)</title><rect x="76.3318%" y="197" width="1.0905%" height="15" fill="rgb(213,55,15)"/><text x="76.5818%" y="207.50"></text></g><g><title>evaluate_obligation (872,082 samples, 0.33%)</title><rect x="78.8175%" y="181" width="0.3281%" height="15" fill="rgb(209,9,3)"/><text x="79.0675%" y="191.50"></text></g><g><title>implied_outlives_bounds (374,063 samples, 0.14%)</title><rect x="79.1476%" y="181" width="0.1408%" height="15" fill="rgb(230,59,30)"/><text x="79.3976%" y="191.50"></text></g><g><title>param_env (472,794 samples, 0.18%)</title><rect x="79.2886%" y="181" width="0.1779%" height="15" fill="rgb(209,121,21)"/><text x="79.5386%" y="191.50"></text></g><g><title>region_scope_tree (723,118 samples, 0.27%)</title><rect x="79.5027%" y="181" width="0.2721%" height="15" fill="rgb(220,109,13)"/><text x="79.7527%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,276,081 samples, 2.36%)</title><rect x="77.5251%" y="197" width="2.3616%" height="15" fill="rgb(232,18,1)"/><text x="77.7751%" y="207.50">ch..</text></g><g><title>trait_impls_of (296,121 samples, 0.11%)</title><rect x="79.7753%" y="181" width="0.1114%" height="15" fill="rgb(215,41,42)"/><text x="80.0253%" y="191.50"></text></g><g><title>evaluate_obligation (682,648 samples, 0.26%)</title><rect x="80.2757%" y="181" width="0.2569%" height="15" fill="rgb(224,123,36)"/><text x="80.5257%" y="191.50"></text></g><g><title>check_item_well_formed (2,378,837 samples, 0.90%)</title><rect x="79.8867%" y="197" width="0.8951%" height="15" fill="rgb(240,125,3)"/><text x="80.1367%" y="207.50"></text></g><g><title>analysis (214,451,672 samples, 80.69%)</title><rect x="0.2420%" y="245" width="80.6938%" height="15" fill="rgb(205,98,50)"/><text x="0.4920%" y="255.50">analysis</text></g><g><title>type_check_crate (117,444,108 samples, 44.19%)</title><rect x="36.7440%" y="229" width="44.1918%" height="15" fill="rgb(205,185,37)"/><text x="36.9940%" y="239.50">type_check_crate</text></g><g><title>wf_checking (9,330,033 samples, 3.51%)</title><rect x="77.4252%" y="213" width="3.5107%" height="15" fill="rgb(238,207,15)"/><text x="77.6752%" y="223.50">wf_..</text></g><g><title>check_trait_item_well_formed (409,444 samples, 0.15%)</title><rect x="80.7818%" y="197" width="0.1541%" height="15" fill="rgb(213,199,42)"/><text x="81.0318%" y="207.50"></text></g><g><title>codegen_crate (487,886 samples, 0.18%)</title><rect x="80.9386%" y="245" width="0.1836%" height="15" fill="rgb(235,201,11)"/><text x="81.1886%" y="255.50"></text></g><g><title>metadata_load_macro (1,412,777 samples, 0.53%)</title><rect x="88.4623%" y="197" width="0.5316%" height="15" fill="rgb(207,46,11)"/><text x="88.7123%" y="207.50"></text></g><g><title>macro_expand_crate (22,922,843 samples, 8.63%)</title><rect x="81.3134%" y="229" width="8.6254%" height="15" fill="rgb(241,35,35)"/><text x="81.5634%" y="239.50">macro_expand..</text></g><g><title>expand_crate (22,905,313 samples, 8.62%)</title><rect x="81.3200%" y="213" width="8.6188%" height="15" fill="rgb(243,32,47)"/><text x="81.5700%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,511,277 samples, 0.94%)</title><rect x="88.9939%" y="197" width="0.9449%" height="15" fill="rgb(247,202,23)"/><text x="89.2439%" y="207.50"></text></g><g><title>metadata_register_crate (1,493,497 samples, 0.56%)</title><rect x="89.3768%" y="181" width="0.5620%" height="15" fill="rgb(219,102,11)"/><text x="89.6268%" y="191.50"></text></g><g><title>metadata_register_crate (818,659 samples, 0.31%)</title><rect x="89.6308%" y="165" width="0.3080%" height="15" fill="rgb(243,110,44)"/><text x="89.8808%" y="175.50"></text></g><g><title>metadata_register_crate (439,013 samples, 0.17%)</title><rect x="89.7736%" y="149" width="0.1652%" height="15" fill="rgb(222,74,54)"/><text x="90.0236%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (416,234 samples, 0.16%)</title><rect x="89.9403%" y="229" width="0.1566%" height="15" fill="rgb(216,99,12)"/><text x="90.1903%" y="239.50"></text></g><g><title>late_resolve_crate (3,383,358 samples, 1.27%)</title><rect x="90.2152%" y="213" width="1.2731%" height="15" fill="rgb(226,22,26)"/><text x="90.4652%" y="223.50"></text></g><g><title>configure_and_expand (27,735,427 samples, 10.44%)</title><rect x="81.1222%" y="245" width="10.4363%" height="15" fill="rgb(217,163,10)"/><text x="81.3722%" y="255.50">configure_and_e..</text></g><g><title>resolve_crate (3,884,184 samples, 1.46%)</title><rect x="90.0969%" y="229" width="1.4615%" height="15" fill="rgb(213,25,53)"/><text x="90.3469%" y="239.50"></text></g><g><title>drop_ast (510,756 samples, 0.19%)</title><rect x="91.5585%" y="245" width="0.1922%" height="15" fill="rgb(252,105,26)"/><text x="91.8085%" y="255.50"></text></g><g><title>early_lint_checks (735,338 samples, 0.28%)</title><rect x="91.7593%" y="245" width="0.2767%" height="15" fill="rgb(220,39,43)"/><text x="92.0093%" y="255.50"></text></g><g><title>free_global_ctxt (4,977,175 samples, 1.87%)</title><rect x="92.0359%" y="245" width="1.8728%" height="15" fill="rgb(229,68,48)"/><text x="92.2859%" y="255.50">f..</text></g><g><title>generate_crate_metadata (1,506,386 samples, 0.57%)</title><rect x="93.9088%" y="245" width="0.5668%" height="15" fill="rgb(252,8,32)"/><text x="94.1588%" y="255.50"></text></g><g><title>hir_lowering (4,712,301 samples, 1.77%)</title><rect x="94.4756%" y="245" width="1.7731%" height="15" fill="rgb(223,20,43)"/><text x="94.7256%" y="255.50">h..</text></g><g><title>parse_crate (8,042,289 samples, 3.03%)</title><rect x="96.2761%" y="245" width="3.0262%" height="15" fill="rgb(229,81,49)"/><text x="96.5261%" y="255.50">par..</text></g><g><title>self_profile_alloc_query_strings (1,174,733 samples, 0.44%)</title><rect x="99.3809%" y="245" width="0.4420%" height="15" fill="rgb(236,28,36)"/><text x="99.6309%" y="255.50"></text></g><g><title>all (265,759,710 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (265,759,710 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (372,674 samples, 0.14%)</title><rect x="99.8598%" y="245" width="0.1402%" height="15" fill="rgb(233,201,37)"/><text x="100.1098%" y="255.50"></text></g></svg></svg>