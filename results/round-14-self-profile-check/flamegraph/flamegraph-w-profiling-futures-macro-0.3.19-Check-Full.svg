<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (561,585 samples, 0.12%)</title><rect x="12.3983%" y="101" width="0.1214%" height="15" fill="rgb(227,0,7)"/><text x="12.6483%" y="111.50"></text></g><g><title>param_env (475,193 samples, 0.10%)</title><rect x="15.4991%" y="53" width="0.1027%" height="15" fill="rgb(217,0,24)"/><text x="15.7491%" y="63.50"></text></g><g><title>adt_drop_tys (887,181 samples, 0.19%)</title><rect x="15.4103%" y="69" width="0.1918%" height="15" fill="rgb(221,193,54)"/><text x="15.6603%" y="79.50"></text></g><g><title>needs_drop_raw (2,330,013 samples, 0.50%)</title><rect x="15.3613%" y="85" width="0.5037%" height="15" fill="rgb(248,212,6)"/><text x="15.6113%" y="95.50"></text></g><g><title>is_copy_raw (1,216,347 samples, 0.26%)</title><rect x="15.6020%" y="69" width="0.2629%" height="15" fill="rgb(208,68,35)"/><text x="15.8520%" y="79.50"></text></g><g><title>evaluate_obligation (1,010,035 samples, 0.22%)</title><rect x="15.6466%" y="53" width="0.2183%" height="15" fill="rgb(232,128,0)"/><text x="15.8966%" y="63.50"></text></g><g><title>impl_parent (588,226 samples, 0.13%)</title><rect x="16.2344%" y="53" width="0.1272%" height="15" fill="rgb(207,160,47)"/><text x="16.4844%" y="63.50"></text></g><g><title>specialization_graph_of (3,085,254 samples, 0.67%)</title><rect x="16.0252%" y="69" width="0.6669%" height="15" fill="rgb(228,23,34)"/><text x="16.2752%" y="79.50"></text></g><g><title>impl_trait_ref (1,529,397 samples, 0.33%)</title><rect x="16.3616%" y="53" width="0.3306%" height="15" fill="rgb(218,30,26)"/><text x="16.6116%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,258,383 samples, 0.27%)</title><rect x="16.4202%" y="37" width="0.2720%" height="15" fill="rgb(220,122,19)"/><text x="16.6702%" y="47.50"></text></g><g><title>resolve_instance (3,931,934 samples, 0.85%)</title><rect x="15.8650%" y="85" width="0.8500%" height="15" fill="rgb(250,228,42)"/><text x="16.1150%" y="95.50"></text></g><g><title>thir_body (4,947,727 samples, 1.07%)</title><rect x="16.7231%" y="85" width="1.0695%" height="15" fill="rgb(240,193,28)"/><text x="16.9731%" y="95.50"></text></g><g><title>mir_const (28,349,396 samples, 6.13%)</title><rect x="11.6718%" y="133" width="6.1282%" height="15" fill="rgb(216,20,37)"/><text x="11.9218%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (26,173,225 samples, 5.66%)</title><rect x="12.1422%" y="117" width="5.6578%" height="15" fill="rgb(206,188,39)"/><text x="12.3922%" y="127.50">unsafet..</text></g><g><title>mir_built (24,423,575 samples, 5.28%)</title><rect x="12.5204%" y="101" width="5.2796%" height="15" fill="rgb(217,207,13)"/><text x="12.7704%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (30,843,866 samples, 6.67%)</title><rect x="11.2491%" y="149" width="6.6674%" height="15" fill="rgb(231,73,38)"/><text x="11.4991%" y="159.50">mir_promo..</text></g><g><title>mir_const_qualif (539,308 samples, 0.12%)</title><rect x="17.8000%" y="133" width="0.1166%" height="15" fill="rgb(225,20,46)"/><text x="18.0500%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (847,330 samples, 0.18%)</title><rect x="17.9187%" y="149" width="0.1832%" height="15" fill="rgb(210,31,41)"/><text x="18.1687%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,574,347 samples, 0.34%)</title><rect x="18.1018%" y="149" width="0.3403%" height="15" fill="rgb(221,200,47)"/><text x="18.3518%" y="159.50"></text></g><g><title>normalize_projection_ty (966,061 samples, 0.21%)</title><rect x="18.2333%" y="133" width="0.2088%" height="15" fill="rgb(226,26,5)"/><text x="18.4833%" y="143.50"></text></g><g><title>type_op_normalize_predicate (903,453 samples, 0.20%)</title><rect x="18.4422%" y="149" width="0.1953%" height="15" fill="rgb(249,33,26)"/><text x="18.6922%" y="159.50"></text></g><g><title>normalize_projection_ty (528,567 samples, 0.11%)</title><rect x="18.5232%" y="133" width="0.1143%" height="15" fill="rgb(235,183,28)"/><text x="18.7732%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,548,647 samples, 0.98%)</title><rect x="18.6375%" y="149" width="0.9833%" height="15" fill="rgb(221,5,38)"/><text x="18.8875%" y="159.50"></text></g><g><title>MIR_borrow_checking (88,663,748 samples, 19.17%)</title><rect x="0.4558%" y="181" width="19.1662%" height="15" fill="rgb(247,18,42)"/><text x="0.7058%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (88,557,108 samples, 19.14%)</title><rect x="0.4789%" y="165" width="19.1431%" height="15" fill="rgb(241,131,45)"/><text x="0.7289%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (969,171 samples, 0.21%)</title><rect x="19.7304%" y="165" width="0.2095%" height="15" fill="rgb(249,31,29)"/><text x="19.9804%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (522,797 samples, 0.11%)</title><rect x="20.0140%" y="165" width="0.1130%" height="15" fill="rgb(225,111,53)"/><text x="20.2640%" y="175.50"></text></g><g><title>misc_checking_1 (1,924,461 samples, 0.42%)</title><rect x="19.7243%" y="181" width="0.4160%" height="15" fill="rgb(238,160,17)"/><text x="19.9743%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,792,950 samples, 0.39%)</title><rect x="20.1406%" y="165" width="0.3876%" height="15" fill="rgb(214,148,48)"/><text x="20.3906%" y="175.50"></text></g><g><title>check_mod_liveness (1,468,387 samples, 0.32%)</title><rect x="20.2108%" y="149" width="0.3174%" height="15" fill="rgb(232,36,49)"/><text x="20.4608%" y="159.50"></text></g><g><title>misc_checking_2 (3,254,296 samples, 0.70%)</title><rect x="20.1403%" y="181" width="0.7035%" height="15" fill="rgb(209,103,24)"/><text x="20.3903%" y="191.50"></text></g><g><title>match_checking (1,459,806 samples, 0.32%)</title><rect x="20.5282%" y="165" width="0.3156%" height="15" fill="rgb(229,88,8)"/><text x="20.7782%" y="175.50"></text></g><g><title>check_match (1,433,264 samples, 0.31%)</title><rect x="20.5339%" y="149" width="0.3098%" height="15" fill="rgb(213,181,19)"/><text x="20.7839%" y="159.50"></text></g><g><title>death_checking (569,396 samples, 0.12%)</title><rect x="20.8963%" y="165" width="0.1231%" height="15" fill="rgb(254,191,54)"/><text x="21.1463%" y="175.50"></text></g><g><title>eval_to_const_value_raw (597,227 samples, 0.13%)</title><rect x="21.3207%" y="85" width="0.1291%" height="15" fill="rgb(241,83,37)"/><text x="21.5707%" y="95.50"></text></g><g><title>eval_to_const_value_raw (596,597 samples, 0.13%)</title><rect x="21.3209%" y="69" width="0.1290%" height="15" fill="rgb(233,36,39)"/><text x="21.5709%" y="79.50"></text></g><g><title>eval_to_allocation_raw (594,697 samples, 0.13%)</title><rect x="21.3213%" y="53" width="0.1286%" height="15" fill="rgb(226,3,54)"/><text x="21.5713%" y="63.50"></text></g><g><title>eval_to_allocation_raw (661,957 samples, 0.14%)</title><rect x="21.3071%" y="133" width="0.1431%" height="15" fill="rgb(245,192,40)"/><text x="21.5571%" y="143.50"></text></g><g><title>eval_to_allocation_raw (661,297 samples, 0.14%)</title><rect x="21.3073%" y="117" width="0.1430%" height="15" fill="rgb(238,167,29)"/><text x="21.5573%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (606,447 samples, 0.13%)</title><rect x="21.3191%" y="101" width="0.1311%" height="15" fill="rgb(232,182,51)"/><text x="21.5691%" y="111.50"></text></g><g><title>crate_lints (2,609,929 samples, 0.56%)</title><rect x="21.0198%" y="149" width="0.5642%" height="15" fill="rgb(231,60,39)"/><text x="21.2698%" y="159.50"></text></g><g><title>layout_of (837,678 samples, 0.18%)</title><rect x="22.1128%" y="53" width="0.1811%" height="15" fill="rgb(208,69,12)"/><text x="22.3628%" y="63.50"></text></g><g><title>layout_of (1,411,565 samples, 0.31%)</title><rect x="22.0665%" y="69" width="0.3051%" height="15" fill="rgb(235,93,37)"/><text x="22.3165%" y="79.50"></text></g><g><title>layout_of (1,890,701 samples, 0.41%)</title><rect x="22.0140%" y="117" width="0.4087%" height="15" fill="rgb(213,116,39)"/><text x="22.2640%" y="127.50"></text></g><g><title>layout_of (1,883,741 samples, 0.41%)</title><rect x="22.0155%" y="101" width="0.4072%" height="15" fill="rgb(222,207,29)"/><text x="22.2655%" y="111.50"></text></g><g><title>layout_of (1,820,550 samples, 0.39%)</title><rect x="22.0292%" y="85" width="0.3935%" height="15" fill="rgb(206,96,30)"/><text x="22.2792%" y="95.50"></text></g><g><title>lint_checking (6,492,392 samples, 1.40%)</title><rect x="21.0194%" y="165" width="1.4034%" height="15" fill="rgb(218,138,4)"/><text x="21.2694%" y="175.50"></text></g><g><title>module_lints (3,880,493 samples, 0.84%)</title><rect x="21.5840%" y="149" width="0.8388%" height="15" fill="rgb(250,191,14)"/><text x="21.8340%" y="159.50"></text></g><g><title>lint_mod (3,873,053 samples, 0.84%)</title><rect x="21.5856%" y="133" width="0.8372%" height="15" fill="rgb(239,60,40)"/><text x="21.8356%" y="143.50"></text></g><g><title>privacy_checking_modules (2,583,869 samples, 0.56%)</title><rect x="22.4836%" y="165" width="0.5585%" height="15" fill="rgb(206,27,48)"/><text x="22.7336%" y="175.50"></text></g><g><title>check_mod_privacy (2,578,769 samples, 0.56%)</title><rect x="22.4847%" y="149" width="0.5574%" height="15" fill="rgb(225,35,8)"/><text x="22.7347%" y="159.50"></text></g><g><title>misc_checking_3 (10,183,303 samples, 2.20%)</title><rect x="20.8438%" y="181" width="2.2013%" height="15" fill="rgb(250,213,24)"/><text x="21.0938%" y="191.50">m..</text></g><g><title>impl_parent (1,558,072 samples, 0.34%)</title><rect x="23.7478%" y="117" width="0.3368%" height="15" fill="rgb(247,123,22)"/><text x="23.9978%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (953,355 samples, 0.21%)</title><rect x="23.8786%" y="101" width="0.2061%" height="15" fill="rgb(231,138,38)"/><text x="24.1286%" y="111.50"></text></g><g><title>impl_trait_ref (3,751,035 samples, 0.81%)</title><rect x="24.0846%" y="117" width="0.8108%" height="15" fill="rgb(231,145,46)"/><text x="24.3346%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,122,098 samples, 0.67%)</title><rect x="24.2206%" y="101" width="0.6749%" height="15" fill="rgb(251,118,11)"/><text x="24.4706%" y="111.50"></text></g><g><title>coherent_trait (8,949,180 samples, 1.93%)</title><rect x="23.0687%" y="149" width="1.9345%" height="15" fill="rgb(217,147,25)"/><text x="23.3187%" y="159.50">c..</text></g><g><title>specialization_graph_of (8,295,783 samples, 1.79%)</title><rect x="23.2100%" y="133" width="1.7933%" height="15" fill="rgb(247,81,37)"/><text x="23.4600%" y="143.50">s..</text></g><g><title>trait_impls_of (498,507 samples, 0.11%)</title><rect x="24.8955%" y="117" width="0.1078%" height="15" fill="rgb(209,12,38)"/><text x="25.1455%" y="127.50"></text></g><g><title>coherence_checking (9,015,221 samples, 1.95%)</title><rect x="23.0656%" y="165" width="1.9488%" height="15" fill="rgb(227,1,9)"/><text x="23.3156%" y="175.50">c..</text></g><g><title>dropck_outlives (991,861 samples, 0.21%)</title><rect x="26.3408%" y="117" width="0.2144%" height="15" fill="rgb(248,47,43)"/><text x="26.5908%" y="127.50"></text></g><g><title>evaluate_obligation (1,222,475 samples, 0.26%)</title><rect x="26.5552%" y="117" width="0.2643%" height="15" fill="rgb(221,10,30)"/><text x="26.8052%" y="127.50"></text></g><g><title>associated_items (599,568 samples, 0.13%)</title><rect x="46.1311%" y="101" width="0.1296%" height="15" fill="rgb(210,229,1)"/><text x="46.3811%" y="111.50"></text></g><g><title>adt_dtorck_constraint (901,822 samples, 0.19%)</title><rect x="47.0659%" y="37" width="0.1949%" height="15" fill="rgb(222,148,37)"/><text x="47.3159%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,588,629 samples, 0.34%)</title><rect x="46.9443%" y="53" width="0.3434%" height="15" fill="rgb(234,67,33)"/><text x="47.1943%" y="63.50"></text></g><g><title>adt_dtorck_constraint (2,185,466 samples, 0.47%)</title><rect x="46.8362%" y="69" width="0.4724%" height="15" fill="rgb(247,98,35)"/><text x="47.0862%" y="79.50"></text></g><g><title>dropck_outlives (4,849,732 samples, 1.05%)</title><rect x="46.2833%" y="101" width="1.0484%" height="15" fill="rgb(247,138,52)"/><text x="46.5333%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,860,563 samples, 0.62%)</title><rect x="46.7133%" y="85" width="0.6184%" height="15" fill="rgb(213,79,30)"/><text x="46.9633%" y="95.50"></text></g><g><title>evaluate_obligation (4,846,842 samples, 1.05%)</title><rect x="47.3317%" y="101" width="1.0477%" height="15" fill="rgb(246,177,23)"/><text x="47.5817%" y="111.50"></text></g><g><title>trait_impls_of (741,708 samples, 0.16%)</title><rect x="48.2191%" y="85" width="0.1603%" height="15" fill="rgb(230,62,27)"/><text x="48.4691%" y="95.50"></text></g><g><title>evaluate_obligation (714,599 samples, 0.15%)</title><rect x="48.7574%" y="85" width="0.1545%" height="15" fill="rgb(216,154,8)"/><text x="49.0074%" y="95.50"></text></g><g><title>method_autoderef_steps (1,222,292 samples, 0.26%)</title><rect x="48.6523%" y="101" width="0.2642%" height="15" fill="rgb(244,35,45)"/><text x="48.9023%" y="111.50"></text></g><g><title>predicates_of (906,788 samples, 0.20%)</title><rect x="48.9237%" y="101" width="0.1960%" height="15" fill="rgb(251,115,12)"/><text x="49.1737%" y="111.50"></text></g><g><title>predicates_defined_on (470,394 samples, 0.10%)</title><rect x="49.0180%" y="85" width="0.1017%" height="15" fill="rgb(240,54,50)"/><text x="49.2680%" y="95.50"></text></g><g><title>typeck (102,944,506 samples, 22.25%)</title><rect x="26.9648%" y="117" width="22.2532%" height="15" fill="rgb(233,84,52)"/><text x="27.2148%" y="127.50">typeck</text></g><g><title>item_bodies_checking (111,970,118 samples, 24.20%)</title><rect x="25.0194%" y="165" width="24.2042%" height="15" fill="rgb(207,117,47)"/><text x="25.2694%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (111,966,488 samples, 24.20%)</title><rect x="25.0201%" y="149" width="24.2034%" height="15" fill="rgb(249,43,39)"/><text x="25.2701%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (111,913,737 samples, 24.19%)</title><rect x="25.0316%" y="133" width="24.1920%" height="15" fill="rgb(209,38,44)"/><text x="25.2816%" y="143.50">typeck</text></g><g><title>typeck (710,478 samples, 0.15%)</title><rect x="49.4283%" y="133" width="0.1536%" height="15" fill="rgb(236,212,23)"/><text x="49.6783%" y="143.50"></text></g><g><title>item_types_checking (1,666,719 samples, 0.36%)</title><rect x="49.2236%" y="165" width="0.3603%" height="15" fill="rgb(242,79,21)"/><text x="49.4736%" y="175.50"></text></g><g><title>check_mod_item_types (1,660,879 samples, 0.36%)</title><rect x="49.2248%" y="149" width="0.3590%" height="15" fill="rgb(211,96,35)"/><text x="49.4748%" y="159.50"></text></g><g><title>fn_sig (498,256 samples, 0.11%)</title><rect x="49.6409%" y="133" width="0.1077%" height="15" fill="rgb(253,215,40)"/><text x="49.8909%" y="143.50"></text></g><g><title>named_region_map (640,276 samples, 0.14%)</title><rect x="49.7674%" y="117" width="0.1384%" height="15" fill="rgb(211,81,21)"/><text x="50.0174%" y="127.50"></text></g><g><title>resolve_lifetimes (636,796 samples, 0.14%)</title><rect x="49.7682%" y="101" width="0.1377%" height="15" fill="rgb(208,190,38)"/><text x="50.0182%" y="111.50"></text></g><g><title>lint_levels (554,636 samples, 0.12%)</title><rect x="49.7860%" y="85" width="0.1199%" height="15" fill="rgb(235,213,38)"/><text x="50.0360%" y="95.50"></text></g><g><title>generics_of (736,897 samples, 0.16%)</title><rect x="49.7487%" y="133" width="0.1593%" height="15" fill="rgb(237,122,38)"/><text x="49.9987%" y="143.50"></text></g><g><title>type_collecting (1,919,142 samples, 0.41%)</title><rect x="49.5852%" y="165" width="0.4149%" height="15" fill="rgb(244,218,35)"/><text x="49.8352%" y="175.50"></text></g><g><title>collect_mod_item_types (1,905,152 samples, 0.41%)</title><rect x="49.5882%" y="149" width="0.4118%" height="15" fill="rgb(240,68,47)"/><text x="49.8382%" y="159.50"></text></g><g><title>check_impl_item_well_formed (516,946 samples, 0.11%)</title><rect x="50.0381%" y="149" width="0.1117%" height="15" fill="rgb(210,16,53)"/><text x="50.2881%" y="159.50"></text></g><g><title>adt_sized_constraint (708,696 samples, 0.15%)</title><rect x="50.3517%" y="101" width="0.1532%" height="15" fill="rgb(235,124,12)"/><text x="50.6017%" y="111.50"></text></g><g><title>adt_sized_constraint (871,741 samples, 0.19%)</title><rect x="50.3206%" y="117" width="0.1884%" height="15" fill="rgb(224,169,11)"/><text x="50.5706%" y="127.50"></text></g><g><title>evaluate_obligation (1,166,014 samples, 0.25%)</title><rect x="50.2733%" y="133" width="0.2521%" height="15" fill="rgb(250,166,2)"/><text x="50.5233%" y="143.50"></text></g><g><title>region_scope_tree (1,253,142 samples, 0.27%)</title><rect x="50.5811%" y="133" width="0.2709%" height="15" fill="rgb(242,216,29)"/><text x="50.8311%" y="143.50"></text></g><g><title>analysis (234,123,049 samples, 50.61%)</title><rect x="0.2540%" y="197" width="50.6096%" height="15" fill="rgb(230,116,27)"/><text x="0.5040%" y="207.50">analysis</text></g><g><title>type_check_crate (128,690,355 samples, 27.82%)</title><rect x="23.0450%" y="181" width="27.8186%" height="15" fill="rgb(228,99,48)"/><text x="23.2950%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,991,314 samples, 0.86%)</title><rect x="50.0008%" y="165" width="0.8628%" height="15" fill="rgb(253,11,6)"/><text x="50.2508%" y="175.50"></text></g><g><title>check_item_well_formed (3,301,784 samples, 0.71%)</title><rect x="50.1499%" y="149" width="0.7137%" height="15" fill="rgb(247,143,39)"/><text x="50.3999%" y="159.50"></text></g><g><title>metadata_load_macro (1,641,931 samples, 0.35%)</title><rect x="92.9694%" y="149" width="0.3549%" height="15" fill="rgb(236,97,10)"/><text x="93.2194%" y="159.50"></text></g><g><title>metadata_register_crate (2,885,324 samples, 0.62%)</title><rect x="93.3244%" y="149" width="0.6237%" height="15" fill="rgb(233,208,19)"/><text x="93.5744%" y="159.50"></text></g><g><title>metadata_register_crate (962,242 samples, 0.21%)</title><rect x="93.7401%" y="133" width="0.2080%" height="15" fill="rgb(216,164,2)"/><text x="93.9901%" y="143.50"></text></g><g><title>macro_expand_crate (198,330,570 samples, 42.87%)</title><rect x="51.1508%" y="181" width="42.8725%" height="15" fill="rgb(220,129,5)"/><text x="51.4008%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (198,315,060 samples, 42.87%)</title><rect x="51.1541%" y="165" width="42.8691%" height="15" fill="rgb(242,17,10)"/><text x="51.4041%" y="175.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (597,987 samples, 0.13%)</title><rect x="94.0236%" y="181" width="0.1293%" height="15" fill="rgb(242,107,0)"/><text x="94.2736%" y="191.50"></text></g><g><title>finalize_macro_resolutions (2,633,979 samples, 0.57%)</title><rect x="94.2139%" y="165" width="0.5694%" height="15" fill="rgb(251,28,31)"/><text x="94.4639%" y="175.50"></text></g><g><title>late_resolve_crate (5,652,922 samples, 1.22%)</title><rect x="94.7833%" y="165" width="1.2220%" height="15" fill="rgb(233,223,10)"/><text x="95.0333%" y="175.50"></text></g><g><title>configure_and_expand (208,818,117 samples, 45.14%)</title><rect x="50.9588%" y="197" width="45.1395%" height="15" fill="rgb(215,21,27)"/><text x="51.2088%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (8,864,508 samples, 1.92%)</title><rect x="94.1821%" y="181" width="1.9162%" height="15" fill="rgb(232,23,21)"/><text x="94.4321%" y="191.50">r..</text></g><g><title>drop_ast (549,976 samples, 0.12%)</title><rect x="96.0984%" y="197" width="0.1189%" height="15" fill="rgb(244,5,23)"/><text x="96.3484%" y="207.50"></text></g><g><title>early_lint_checks (1,785,650 samples, 0.39%)</title><rect x="96.2229%" y="197" width="0.3860%" height="15" fill="rgb(226,81,46)"/><text x="96.4729%" y="207.50"></text></g><g><title>free_global_ctxt (4,701,633 samples, 1.02%)</title><rect x="96.6089%" y="197" width="1.0163%" height="15" fill="rgb(247,70,30)"/><text x="96.8589%" y="207.50"></text></g><g><title>hir_lowering (8,465,105 samples, 1.83%)</title><rect x="97.6651%" y="197" width="1.8299%" height="15" fill="rgb(212,68,19)"/><text x="97.9151%" y="207.50">h..</text></g><g><title>parse_crate (747,538 samples, 0.16%)</title><rect x="99.5094%" y="197" width="0.1616%" height="15" fill="rgb(240,187,13)"/><text x="99.7594%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (878,860 samples, 0.19%)</title><rect x="99.7212%" y="197" width="0.1900%" height="15" fill="rgb(223,113,26)"/><text x="99.9712%" y="207.50"></text></g><g><title>all (462,605,795 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (462,605,795 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>