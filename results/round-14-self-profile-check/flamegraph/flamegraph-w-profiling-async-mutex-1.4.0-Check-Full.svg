<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (77,301 samples, 0.11%)</title><rect x="5.6837%" y="229" width="0.1130%" height="15" fill="rgb(227,0,7)"/><text x="5.9337%" y="239.50"></text></g><g><title>item_attrs (78,011 samples, 0.11%)</title><rect x="6.0121%" y="197" width="0.1140%" height="15" fill="rgb(217,0,24)"/><text x="6.2621%" y="207.50"></text></g><g><title>codegen_fn_attrs (101,041 samples, 0.15%)</title><rect x="5.9810%" y="213" width="0.1477%" height="15" fill="rgb(221,193,54)"/><text x="6.2310%" y="223.50"></text></g><g><title>adt_drop_tys (73,041 samples, 0.11%)</title><rect x="6.9551%" y="181" width="0.1068%" height="15" fill="rgb(248,212,6)"/><text x="7.2051%" y="191.50"></text></g><g><title>needs_drop_raw (153,531 samples, 0.22%)</title><rect x="6.9379%" y="197" width="0.2244%" height="15" fill="rgb(208,68,35)"/><text x="7.1879%" y="207.50"></text></g><g><title>is_copy_raw (68,700 samples, 0.10%)</title><rect x="7.0619%" y="181" width="0.1004%" height="15" fill="rgb(232,128,0)"/><text x="7.3119%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (84,921 samples, 0.12%)</title><rect x="7.2781%" y="181" width="0.1241%" height="15" fill="rgb(207,160,47)"/><text x="7.5281%" y="191.50"></text></g><g><title>impl_parent (775,437 samples, 1.13%)</title><rect x="8.8645%" y="165" width="1.1335%" height="15" fill="rgb(228,23,34)"/><text x="9.1145%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (330,291 samples, 0.48%)</title><rect x="9.5152%" y="149" width="0.4828%" height="15" fill="rgb(218,30,26)"/><text x="9.7652%" y="159.50"></text></g><g><title>specialization_graph_of (2,803,611 samples, 4.10%)</title><rect x="7.4287%" y="181" width="4.0982%" height="15" fill="rgb(220,122,19)"/><text x="7.6787%" y="191.50">spec..</text></g><g><title>impl_trait_ref (1,045,932 samples, 1.53%)</title><rect x="9.9980%" y="165" width="1.5289%" height="15" fill="rgb(250,228,42)"/><text x="10.2480%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (843,998 samples, 1.23%)</title><rect x="10.2932%" y="149" width="1.2337%" height="15" fill="rgb(240,193,28)"/><text x="10.5432%" y="159.50"></text></g><g><title>resolve_instance (3,013,122 samples, 4.40%)</title><rect x="7.1623%" y="197" width="4.4044%" height="15" fill="rgb(216,20,37)"/><text x="7.4123%" y="207.50">resol..</text></g><g><title>thir_body (212,933 samples, 0.31%)</title><rect x="11.5780%" y="197" width="0.3113%" height="15" fill="rgb(206,188,39)"/><text x="11.8280%" y="207.50"></text></g><g><title>mir_const (4,444,056 samples, 6.50%)</title><rect x="5.4000%" y="245" width="6.4961%" height="15" fill="rgb(217,207,13)"/><text x="5.6500%" y="255.50">mir_const</text></g><g><title>unsafety_check_result (4,172,655 samples, 6.10%)</title><rect x="5.7967%" y="229" width="6.0994%" height="15" fill="rgb(231,73,38)"/><text x="6.0467%" y="239.50">unsafety..</text></g><g><title>mir_built (3,945,532 samples, 5.77%)</title><rect x="6.1287%" y="213" width="5.7674%" height="15" fill="rgb(225,20,46)"/><text x="6.3787%" y="223.50">mir_bui..</text></g><g><title>is_freeze_raw (73,291 samples, 0.11%)</title><rect x="12.1276%" y="229" width="0.1071%" height="15" fill="rgb(210,31,41)"/><text x="12.3776%" y="239.50"></text></g><g><title>mir_const (170,211 samples, 0.25%)</title><rect x="12.2493%" y="229" width="0.2488%" height="15" fill="rgb(221,200,47)"/><text x="12.4993%" y="239.50"></text></g><g><title>unsafety_check_result (139,361 samples, 0.20%)</title><rect x="12.2944%" y="213" width="0.2037%" height="15" fill="rgb(226,26,5)"/><text x="12.5444%" y="223.50"></text></g><g><title>mir_built (118,521 samples, 0.17%)</title><rect x="12.3249%" y="197" width="0.1732%" height="15" fill="rgb(249,33,26)"/><text x="12.5749%" y="207.50"></text></g><g><title>mir_promoted (5,088,066 samples, 7.44%)</title><rect x="5.0924%" y="261" width="7.4375%" height="15" fill="rgb(235,183,28)"/><text x="5.3424%" y="271.50">mir_promot..</text></g><g><title>mir_const_qualif (433,566 samples, 0.63%)</title><rect x="11.8961%" y="245" width="0.6338%" height="15" fill="rgb(221,5,38)"/><text x="12.1461%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (150,861 samples, 0.22%)</title><rect x="12.6265%" y="261" width="0.2205%" height="15" fill="rgb(247,18,42)"/><text x="12.8765%" y="271.50"></text></g><g><title>normalize_projection_ty (78,471 samples, 0.11%)</title><rect x="12.7323%" y="245" width="0.1147%" height="15" fill="rgb(241,131,45)"/><text x="12.9823%" y="255.50"></text></g><g><title>type_op_prove_predicate (451,363 samples, 0.66%)</title><rect x="12.8470%" y="261" width="0.6598%" height="15" fill="rgb(249,31,29)"/><text x="13.0970%" y="271.50"></text></g><g><title>MIR_borrow_checking (8,682,327 samples, 12.69%)</title><rect x="0.8179%" y="293" width="12.6914%" height="15" fill="rgb(225,111,53)"/><text x="1.0679%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,641,147 samples, 12.63%)</title><rect x="0.8781%" y="277" width="12.6312%" height="15" fill="rgb(238,160,17)"/><text x="1.1281%" y="287.50">mir_borrowck</text></g><g><title>MIR_effect_checking (214,892 samples, 0.31%)</title><rect x="13.5093%" y="293" width="0.3141%" height="15" fill="rgb(214,148,48)"/><text x="13.7593%" y="303.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (182,882 samples, 0.27%)</title><rect x="13.5561%" y="277" width="0.2673%" height="15" fill="rgb(232,36,49)"/><text x="13.8061%" y="287.50"></text></g><g><title>hir_module_items (109,361 samples, 0.16%)</title><rect x="13.8234%" y="293" width="0.1599%" height="15" fill="rgb(209,103,24)"/><text x="14.0734%" y="303.50"></text></g><g><title>codegen_fn_attrs (72,832 samples, 0.11%)</title><rect x="14.4305%" y="229" width="0.1065%" height="15" fill="rgb(229,88,8)"/><text x="14.6805%" y="239.50"></text></g><g><title>should_inherit_track_caller (146,153 samples, 0.21%)</title><rect x="14.3281%" y="245" width="0.2136%" height="15" fill="rgb(213,181,19)"/><text x="14.5781%" y="255.50"></text></g><g><title>codegen_fn_attrs (277,904 samples, 0.41%)</title><rect x="14.1638%" y="261" width="0.4062%" height="15" fill="rgb(254,191,54)"/><text x="14.4138%" y="271.50"></text></g><g><title>check_mod_attrs (384,344 samples, 0.56%)</title><rect x="14.0085%" y="277" width="0.5618%" height="15" fill="rgb(241,83,37)"/><text x="14.2585%" y="287.50"></text></g><g><title>lookup_deprecation_entry (100,711 samples, 0.15%)</title><rect x="14.9268%" y="261" width="0.1472%" height="15" fill="rgb(233,36,39)"/><text x="15.1768%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (315,454 samples, 0.46%)</title><rect x="14.7003%" y="277" width="0.4611%" height="15" fill="rgb(226,3,54)"/><text x="14.9503%" y="287.50"></text></g><g><title>misc_checking_1 (838,109 samples, 1.23%)</title><rect x="13.9845%" y="293" width="1.2251%" height="15" fill="rgb(245,192,40)"/><text x="14.2345%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (203,902 samples, 0.30%)</title><rect x="15.2121%" y="277" width="0.2981%" height="15" fill="rgb(238,167,29)"/><text x="15.4621%" y="287.50"></text></g><g><title>check_mod_liveness (163,042 samples, 0.24%)</title><rect x="15.2719%" y="261" width="0.2383%" height="15" fill="rgb(232,182,51)"/><text x="15.5219%" y="271.50"></text></g><g><title>misc_checking_2 (385,304 samples, 0.56%)</title><rect x="15.2096%" y="293" width="0.5632%" height="15" fill="rgb(231,60,39)"/><text x="15.4596%" y="303.50"></text></g><g><title>match_checking (179,672 samples, 0.26%)</title><rect x="15.5102%" y="277" width="0.2626%" height="15" fill="rgb(208,69,12)"/><text x="15.7602%" y="287.50"></text></g><g><title>check_match (165,732 samples, 0.24%)</title><rect x="15.5306%" y="261" width="0.2423%" height="15" fill="rgb(235,93,37)"/><text x="15.7806%" y="271.50"></text></g><g><title>check_private_in_public (116,011 samples, 0.17%)</title><rect x="15.7867%" y="277" width="0.1696%" height="15" fill="rgb(213,116,39)"/><text x="16.0367%" y="287.50"></text></g><g><title>death_checking (177,442 samples, 0.26%)</title><rect x="15.9562%" y="277" width="0.2594%" height="15" fill="rgb(222,207,29)"/><text x="16.2062%" y="287.50"></text></g><g><title>param_env (95,281 samples, 0.14%)</title><rect x="17.0046%" y="245" width="0.1393%" height="15" fill="rgb(206,96,30)"/><text x="17.2546%" y="255.50"></text></g><g><title>crate_lints (1,662,049 samples, 2.43%)</title><rect x="16.2174%" y="261" width="2.4295%" height="15" fill="rgb(218,138,4)"/><text x="16.4674%" y="271.50">cr..</text></g><g><title>type_of (1,023,532 samples, 1.50%)</title><rect x="17.1508%" y="245" width="1.4961%" height="15" fill="rgb(250,191,14)"/><text x="17.4008%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (789,679 samples, 1.15%)</title><rect x="17.4926%" y="229" width="1.1543%" height="15" fill="rgb(239,60,40)"/><text x="17.7426%" y="239.50"></text></g><g><title>lint_checking (1,834,560 samples, 2.68%)</title><rect x="16.2156%" y="277" width="2.6817%" height="15" fill="rgb(206,27,48)"/><text x="16.4656%" y="287.50">li..</text></g><g><title>module_lints (171,271 samples, 0.25%)</title><rect x="18.6469%" y="261" width="0.2504%" height="15" fill="rgb(225,35,8)"/><text x="18.8969%" y="271.50"></text></g><g><title>lint_mod (169,241 samples, 0.25%)</title><rect x="18.6499%" y="245" width="0.2474%" height="15" fill="rgb(250,213,24)"/><text x="18.8999%" y="255.50"></text></g><g><title>privacy_access_levels (171,132 samples, 0.25%)</title><rect x="18.8973%" y="277" width="0.2502%" height="15" fill="rgb(247,123,22)"/><text x="19.1473%" y="287.50"></text></g><g><title>privacy_checking_modules (420,975 samples, 0.62%)</title><rect x="19.1474%" y="277" width="0.6154%" height="15" fill="rgb(231,138,38)"/><text x="19.3974%" y="287.50"></text></g><g><title>check_mod_privacy (419,574 samples, 0.61%)</title><rect x="19.1495%" y="261" width="0.6133%" height="15" fill="rgb(231,145,46)"/><text x="19.3995%" y="271.50"></text></g><g><title>misc_checking_3 (2,742,620 samples, 4.01%)</title><rect x="15.7728%" y="293" width="4.0090%" height="15" fill="rgb(251,118,11)"/><text x="16.0228%" y="303.50">misc..</text></g><g><title>impl_parent (1,299,873 samples, 1.90%)</title><rect x="23.1549%" y="229" width="1.9001%" height="15" fill="rgb(217,147,25)"/><text x="23.4049%" y="239.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (825,049 samples, 1.21%)</title><rect x="23.8490%" y="213" width="1.2060%" height="15" fill="rgb(247,81,37)"/><text x="24.0990%" y="223.50"></text></g><g><title>impl_trait_ref (3,847,890 samples, 5.62%)</title><rect x="25.0571%" y="229" width="5.6246%" height="15" fill="rgb(209,12,38)"/><text x="25.3071%" y="239.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,367,913 samples, 4.92%)</title><rect x="25.7587%" y="213" width="4.9230%" height="15" fill="rgb(227,1,9)"/><text x="26.0087%" y="223.50">metada..</text></g><g><title>trait_impls_of (475,965 samples, 0.70%)</title><rect x="30.7390%" y="229" width="0.6957%" height="15" fill="rgb(248,47,43)"/><text x="30.9890%" y="239.50"></text></g><g><title>implementations_of_trait (138,833 samples, 0.20%)</title><rect x="31.2318%" y="213" width="0.2029%" height="15" fill="rgb(221,10,30)"/><text x="31.4818%" y="223.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (100,201 samples, 0.15%)</title><rect x="31.2883%" y="197" width="0.1465%" height="15" fill="rgb(210,229,1)"/><text x="31.5383%" y="207.50"></text></g><g><title>coherent_trait (7,915,767 samples, 11.57%)</title><rect x="19.8656%" y="261" width="11.5708%" height="15" fill="rgb(222,148,37)"/><text x="20.1156%" y="271.50">coherent_trait</text></g><g><title>specialization_graph_of (7,899,657 samples, 11.55%)</title><rect x="19.8891%" y="245" width="11.5473%" height="15" fill="rgb(234,67,33)"/><text x="20.1391%" y="255.50">specialization_gr..</text></g><g><title>coherence_checking (7,989,908 samples, 11.68%)</title><rect x="19.8415%" y="277" width="11.6792%" height="15" fill="rgb(247,98,35)"/><text x="20.0915%" y="287.50">coherence_checking</text></g><g><title>dropck_outlives (104,031 samples, 0.15%)</title><rect x="37.6738%" y="229" width="0.1521%" height="15" fill="rgb(247,138,52)"/><text x="37.9238%" y="239.50"></text></g><g><title>evaluate_obligation (202,740 samples, 0.30%)</title><rect x="37.8259%" y="229" width="0.2964%" height="15" fill="rgb(213,79,30)"/><text x="38.0759%" y="239.50"></text></g><g><title>method_autoderef_steps (105,322 samples, 0.15%)</title><rect x="38.3115%" y="229" width="0.1540%" height="15" fill="rgb(246,177,23)"/><text x="38.5615%" y="239.50"></text></g><g><title>object_safety_violations (132,922 samples, 0.19%)</title><rect x="38.4655%" y="229" width="0.1943%" height="15" fill="rgb(230,62,27)"/><text x="38.7155%" y="239.50"></text></g><g><title>item_bodies_checking (4,981,645 samples, 7.28%)</title><rect x="31.5597%" y="277" width="7.2819%" height="15" fill="rgb(216,154,8)"/><text x="31.8097%" y="287.50">item_bodie..</text></g><g><title>typeck_item_bodies (4,978,215 samples, 7.28%)</title><rect x="31.5647%" y="261" width="7.2769%" height="15" fill="rgb(244,35,45)"/><text x="31.8147%" y="271.50">typeck_ite..</text></g><g><title>typeck (4,944,725 samples, 7.23%)</title><rect x="31.6137%" y="245" width="7.2279%" height="15" fill="rgb(251,115,12)"/><text x="31.8637%" y="255.50">typeck</text></g><g><title>explicit_item_bounds (85,741 samples, 0.13%)</title><rect x="39.7915%" y="245" width="0.1253%" height="15" fill="rgb(240,54,50)"/><text x="40.0415%" y="255.50"></text></g><g><title>mir_borrowck (184,962 samples, 0.27%)</title><rect x="45.0944%" y="197" width="0.2704%" height="15" fill="rgb(233,84,52)"/><text x="45.3444%" y="207.50"></text></g><g><title>mir_const (238,292 samples, 0.35%)</title><rect x="45.5932%" y="181" width="0.3483%" height="15" fill="rgb(207,117,47)"/><text x="45.8432%" y="191.50"></text></g><g><title>mir_promoted (397,163 samples, 0.58%)</title><rect x="45.3648%" y="197" width="0.5806%" height="15" fill="rgb(249,43,39)"/><text x="45.6148%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (149,313 samples, 0.22%)</title><rect x="45.9600%" y="197" width="0.2183%" height="15" fill="rgb(209,38,44)"/><text x="46.2100%" y="207.50"></text></g><g><title>normalize_projection_ty (81,752 samples, 0.12%)</title><rect x="46.0588%" y="181" width="0.1195%" height="15" fill="rgb(236,212,23)"/><text x="46.3088%" y="191.50"></text></g><g><title>type_op_prove_predicate (303,823 samples, 0.44%)</title><rect x="46.2063%" y="197" width="0.4441%" height="15" fill="rgb(242,79,21)"/><text x="46.4563%" y="207.50"></text></g><g><title>mir_borrowck (3,294,357 samples, 4.82%)</title><rect x="41.8368%" y="213" width="4.8155%" height="15" fill="rgb(211,96,35)"/><text x="42.0868%" y="223.50">mir_bo..</text></g><g><title>associated_item (135,021 samples, 0.20%)</title><rect x="54.8802%" y="117" width="0.1974%" height="15" fill="rgb(253,215,40)"/><text x="55.1302%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (110,341 samples, 0.16%)</title><rect x="54.9163%" y="101" width="0.1613%" height="15" fill="rgb(211,81,21)"/><text x="55.1663%" y="111.50"></text></g><g><title>associated_items (203,663 samples, 0.30%)</title><rect x="54.8049%" y="133" width="0.2977%" height="15" fill="rgb(208,190,38)"/><text x="55.0549%" y="143.50"></text></g><g><title>adt_def (125,581 samples, 0.18%)</title><rect x="55.3574%" y="101" width="0.1836%" height="15" fill="rgb(235,213,38)"/><text x="55.6074%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (122,531 samples, 0.18%)</title><rect x="55.3619%" y="85" width="0.1791%" height="15" fill="rgb(237,122,38)"/><text x="55.6119%" y="95.50"></text></g><g><title>adt_destructor (80,712 samples, 0.12%)</title><rect x="55.5410%" y="101" width="0.1180%" height="15" fill="rgb(244,218,35)"/><text x="55.7910%" y="111.50"></text></g><g><title>adt_def (101,480 samples, 0.15%)</title><rect x="55.6968%" y="85" width="0.1483%" height="15" fill="rgb(240,68,47)"/><text x="55.9468%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (100,160 samples, 0.15%)</title><rect x="55.6987%" y="69" width="0.1464%" height="15" fill="rgb(210,16,53)"/><text x="55.9487%" y="79.50"></text></g><g><title>item_attrs (83,070 samples, 0.12%)</title><rect x="55.7237%" y="53" width="0.1214%" height="15" fill="rgb(235,124,12)"/><text x="55.9737%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (81,550 samples, 0.12%)</title><rect x="55.7259%" y="37" width="0.1192%" height="15" fill="rgb(224,169,11)"/><text x="55.9759%" y="47.50"></text></g><g><title>adt_dtorck_constraint (151,112 samples, 0.22%)</title><rect x="55.8692%" y="85" width="0.2209%" height="15" fill="rgb(250,166,2)"/><text x="56.1192%" y="95.50"></text></g><g><title>adt_dtorck_constraint (321,002 samples, 0.47%)</title><rect x="55.6590%" y="101" width="0.4692%" height="15" fill="rgb(242,216,29)"/><text x="55.9090%" y="111.50"></text></g><g><title>dropck_outlives (723,387 samples, 1.06%)</title><rect x="55.1319%" y="133" width="1.0574%" height="15" fill="rgb(230,116,27)"/><text x="55.3819%" y="143.50"></text></g><g><title>adt_dtorck_constraint (625,135 samples, 0.91%)</title><rect x="55.2755%" y="117" width="0.9138%" height="15" fill="rgb(228,99,48)"/><text x="55.5255%" y="127.50"></text></g><g><title>adt_def (77,711 samples, 0.11%)</title><rect x="57.6847%" y="101" width="0.1136%" height="15" fill="rgb(253,11,6)"/><text x="57.9347%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (76,381 samples, 0.11%)</title><rect x="57.6866%" y="85" width="0.1116%" height="15" fill="rgb(247,143,39)"/><text x="57.9366%" y="95.50"></text></g><g><title>adt_sized_constraint (155,832 samples, 0.23%)</title><rect x="57.6735%" y="117" width="0.2278%" height="15" fill="rgb(236,97,10)"/><text x="57.9235%" y="127.50"></text></g><g><title>generics_of (292,612 samples, 0.43%)</title><rect x="57.9013%" y="117" width="0.4277%" height="15" fill="rgb(233,208,19)"/><text x="58.1513%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (238,732 samples, 0.35%)</title><rect x="57.9800%" y="101" width="0.3490%" height="15" fill="rgb(216,164,2)"/><text x="58.2300%" y="111.50"></text></g><g><title>impl_trait_ref (361,426 samples, 0.53%)</title><rect x="58.3727%" y="117" width="0.5283%" height="15" fill="rgb(220,129,5)"/><text x="58.6227%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (308,916 samples, 0.45%)</title><rect x="58.4494%" y="101" width="0.4516%" height="15" fill="rgb(242,17,10)"/><text x="58.6994%" y="111.50"></text></g><g><title>predicates_of (125,111 samples, 0.18%)</title><rect x="58.9204%" y="117" width="0.1829%" height="15" fill="rgb(242,107,0)"/><text x="59.1704%" y="127.50"></text></g><g><title>predicates_defined_on (69,560 samples, 0.10%)</title><rect x="59.0016%" y="101" width="0.1017%" height="15" fill="rgb(251,28,31)"/><text x="59.2516%" y="111.50"></text></g><g><title>specializes (285,724 samples, 0.42%)</title><rect x="59.1033%" y="117" width="0.4177%" height="15" fill="rgb(233,223,10)"/><text x="59.3533%" y="127.50"></text></g><g><title>param_env (172,303 samples, 0.25%)</title><rect x="59.2691%" y="101" width="0.2519%" height="15" fill="rgb(215,21,27)"/><text x="59.5191%" y="111.50"></text></g><g><title>def_span (72,591 samples, 0.11%)</title><rect x="59.4148%" y="85" width="0.1061%" height="15" fill="rgb(232,23,21)"/><text x="59.6648%" y="95.50"></text></g><g><title>trait_impls_of (387,984 samples, 0.57%)</title><rect x="59.5311%" y="117" width="0.5671%" height="15" fill="rgb(244,5,23)"/><text x="59.7811%" y="127.50"></text></g><g><title>implementations_of_trait (126,251 samples, 0.18%)</title><rect x="59.9137%" y="101" width="0.1845%" height="15" fill="rgb(226,81,46)"/><text x="60.1637%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (94,911 samples, 0.14%)</title><rect x="59.9595%" y="85" width="0.1387%" height="15" fill="rgb(247,70,30)"/><text x="60.2095%" y="95.50"></text></g><g><title>evaluate_obligation (2,682,780 samples, 3.92%)</title><rect x="56.1924%" y="133" width="3.9215%" height="15" fill="rgb(212,68,19)"/><text x="56.4424%" y="143.50">eval..</text></g><g><title>is_copy_raw (386,653 samples, 0.57%)</title><rect x="60.5644%" y="133" width="0.5652%" height="15" fill="rgb(240,187,13)"/><text x="60.8144%" y="143.50"></text></g><g><title>evaluate_obligation (345,853 samples, 0.51%)</title><rect x="60.6240%" y="117" width="0.5055%" height="15" fill="rgb(223,113,26)"/><text x="60.8740%" y="127.50"></text></g><g><title>trait_impls_of (135,951 samples, 0.20%)</title><rect x="60.9308%" y="101" width="0.1987%" height="15" fill="rgb(206,192,2)"/><text x="61.1808%" y="111.50"></text></g><g><title>item_attrs (110,361 samples, 0.16%)</title><rect x="61.1295%" y="133" width="0.1613%" height="15" fill="rgb(241,108,4)"/><text x="61.3795%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (107,031 samples, 0.16%)</title><rect x="61.1344%" y="117" width="0.1565%" height="15" fill="rgb(247,173,49)"/><text x="61.3844%" y="127.50"></text></g><g><title>explicit_predicates_of (69,991 samples, 0.10%)</title><rect x="61.7339%" y="101" width="0.1023%" height="15" fill="rgb(224,114,35)"/><text x="61.9839%" y="111.50"></text></g><g><title>predicates_of (233,694 samples, 0.34%)</title><rect x="61.5491%" y="133" width="0.3416%" height="15" fill="rgb(245,159,27)"/><text x="61.7991%" y="143.50"></text></g><g><title>predicates_defined_on (165,883 samples, 0.24%)</title><rect x="61.6482%" y="117" width="0.2425%" height="15" fill="rgb(245,172,44)"/><text x="61.8982%" y="127.50"></text></g><g><title>trait_impls_of (113,481 samples, 0.17%)</title><rect x="61.9182%" y="133" width="0.1659%" height="15" fill="rgb(236,23,11)"/><text x="62.1682%" y="143.50"></text></g><g><title>mir_built (10,489,466 samples, 15.33%)</title><rect x="46.9789%" y="165" width="15.3329%" height="15" fill="rgb(205,117,38)"/><text x="47.2289%" y="175.50">mir_built</text></g><g><title>typeck (10,147,451 samples, 14.83%)</title><rect x="47.4788%" y="149" width="14.8330%" height="15" fill="rgb(237,72,25)"/><text x="47.7288%" y="159.50">typeck</text></g><g><title>item_attrs (77,501 samples, 0.11%)</title><rect x="62.5120%" y="133" width="0.1133%" height="15" fill="rgb(244,70,9)"/><text x="62.7620%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (75,041 samples, 0.11%)</title><rect x="62.5156%" y="117" width="0.1097%" height="15" fill="rgb(217,125,39)"/><text x="62.7656%" y="127.50"></text></g><g><title>codegen_fn_attrs (124,321 samples, 0.18%)</title><rect x="62.4559%" y="149" width="0.1817%" height="15" fill="rgb(235,36,10)"/><text x="62.7059%" y="159.50"></text></g><g><title>is_copy_raw (113,792 samples, 0.17%)</title><rect x="63.5327%" y="117" width="0.1663%" height="15" fill="rgb(251,123,47)"/><text x="63.7827%" y="127.50"></text></g><g><title>evaluate_obligation (90,672 samples, 0.13%)</title><rect x="63.5665%" y="101" width="0.1325%" height="15" fill="rgb(221,13,13)"/><text x="63.8165%" y="111.50"></text></g><g><title>needs_drop_raw (149,252 samples, 0.22%)</title><rect x="63.4812%" y="133" width="0.2182%" height="15" fill="rgb(238,131,9)"/><text x="63.7312%" y="143.50"></text></g><g><title>thir_body (221,044 samples, 0.32%)</title><rect x="63.7125%" y="133" width="0.3231%" height="15" fill="rgb(211,50,8)"/><text x="63.9625%" y="143.50"></text></g><g><title>mir_built (961,321 samples, 1.41%)</title><rect x="62.6376%" y="149" width="1.4052%" height="15" fill="rgb(245,182,24)"/><text x="62.8876%" y="159.50"></text></g><g><title>mir_const (11,885,162 samples, 17.37%)</title><rect x="46.7799%" y="197" width="17.3731%" height="15" fill="rgb(242,14,37)"/><text x="47.0299%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (11,777,201 samples, 17.22%)</title><rect x="46.9378%" y="181" width="17.2153%" height="15" fill="rgb(246,228,12)"/><text x="47.1878%" y="191.50">unsafety_check_result</text></g><g><title>unsafety_check_result (1,259,585 samples, 1.84%)</title><rect x="62.3118%" y="165" width="1.8412%" height="15" fill="rgb(213,55,15)"/><text x="62.5618%" y="175.50">u..</text></g><g><title>unsafety_check_result (74,680 samples, 0.11%)</title><rect x="64.0439%" y="149" width="0.1092%" height="15" fill="rgb(209,9,3)"/><text x="64.2939%" y="159.50"></text></g><g><title>mir_promoted (11,979,762 samples, 17.51%)</title><rect x="46.6524%" y="213" width="17.5114%" height="15" fill="rgb(230,59,30)"/><text x="46.9024%" y="223.50">mir_promoted</text></g><g><title>item_types_checking (17,607,135 samples, 25.74%)</title><rect x="38.8416%" y="277" width="25.7371%" height="15" fill="rgb(209,121,21)"/><text x="39.0916%" y="287.50">item_types_checking</text></g><g><title>check_mod_item_types (17,603,215 samples, 25.73%)</title><rect x="38.8473%" y="261" width="25.7314%" height="15" fill="rgb(220,109,13)"/><text x="39.0973%" y="271.50">check_mod_item_types</text></g><g><title>type_of (16,792,975 samples, 24.55%)</title><rect x="40.0317%" y="245" width="24.5471%" height="15" fill="rgb(232,18,1)"/><text x="40.2817%" y="255.50">type_of</text></g><g><title>mir_borrowck (16,779,245 samples, 24.53%)</title><rect x="40.0518%" y="229" width="24.5270%" height="15" fill="rgb(215,41,42)"/><text x="40.3018%" y="239.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (186,041 samples, 0.27%)</title><rect x="64.3068%" y="213" width="0.2719%" height="15" fill="rgb(224,123,36)"/><text x="64.5568%" y="223.50"></text></g><g><title>fn_sig (144,661 samples, 0.21%)</title><rect x="64.7979%" y="245" width="0.2115%" height="15" fill="rgb(240,125,3)"/><text x="65.0479%" y="255.50"></text></g><g><title>is_late_bound_map (125,642 samples, 0.18%)</title><rect x="65.1372%" y="229" width="0.1837%" height="15" fill="rgb(205,98,50)"/><text x="65.3872%" y="239.50"></text></g><g><title>resolve_lifetimes (116,002 samples, 0.17%)</title><rect x="65.1513%" y="213" width="0.1696%" height="15" fill="rgb(205,185,37)"/><text x="65.4013%" y="223.50"></text></g><g><title>generics_of (259,024 samples, 0.38%)</title><rect x="65.0094%" y="245" width="0.3786%" height="15" fill="rgb(238,207,15)"/><text x="65.2594%" y="255.50"></text></g><g><title>late_bound_vars_map (73,422 samples, 0.11%)</title><rect x="65.9010%" y="197" width="0.1073%" height="15" fill="rgb(213,199,42)"/><text x="66.1510%" y="207.50"></text></g><g><title>explicit_predicates_of (325,424 samples, 0.48%)</title><rect x="65.5608%" y="213" width="0.4757%" height="15" fill="rgb(235,201,11)"/><text x="65.8108%" y="223.50"></text></g><g><title>predicates_of (623,656 samples, 0.91%)</title><rect x="65.4586%" y="245" width="0.9116%" height="15" fill="rgb(207,46,11)"/><text x="65.7086%" y="255.50"></text></g><g><title>predicates_defined_on (597,916 samples, 0.87%)</title><rect x="65.4962%" y="229" width="0.8740%" height="15" fill="rgb(241,35,35)"/><text x="65.7462%" y="239.50"></text></g><g><title>inferred_outlives_of (228,312 samples, 0.33%)</title><rect x="66.0365%" y="213" width="0.3337%" height="15" fill="rgb(243,32,47)"/><text x="66.2865%" y="223.50"></text></g><g><title>inferred_outlives_crate (216,182 samples, 0.32%)</title><rect x="66.0542%" y="197" width="0.3160%" height="15" fill="rgb(247,202,23)"/><text x="66.3042%" y="207.50"></text></g><g><title>type_of (112,641 samples, 0.16%)</title><rect x="66.2056%" y="181" width="0.1647%" height="15" fill="rgb(219,102,11)"/><text x="66.4556%" y="191.50"></text></g><g><title>type_collecting (1,329,645 samples, 1.94%)</title><rect x="64.5813%" y="277" width="1.9436%" height="15" fill="rgb(243,110,44)"/><text x="64.8313%" y="287.50">t..</text></g><g><title>collect_mod_item_types (1,323,375 samples, 1.93%)</title><rect x="64.5904%" y="261" width="1.9344%" height="15" fill="rgb(222,74,54)"/><text x="64.8404%" y="271.50">c..</text></g><g><title>type_of (105,801 samples, 0.15%)</title><rect x="66.3702%" y="245" width="0.1547%" height="15" fill="rgb(216,99,12)"/><text x="66.6202%" y="255.50"></text></g><g><title>adt_sized_constraint (94,501 samples, 0.14%)</title><rect x="68.0917%" y="245" width="0.1381%" height="15" fill="rgb(226,22,26)"/><text x="68.3417%" y="255.50"></text></g><g><title>adt_sized_constraint (92,601 samples, 0.14%)</title><rect x="68.0944%" y="229" width="0.1354%" height="15" fill="rgb(217,163,10)"/><text x="68.3444%" y="239.50"></text></g><g><title>evaluate_obligation (384,207 samples, 0.56%)</title><rect x="68.2394%" y="245" width="0.5616%" height="15" fill="rgb(213,25,53)"/><text x="68.4894%" y="255.50"></text></g><g><title>implied_outlives_bounds (190,744 samples, 0.28%)</title><rect x="68.8134%" y="245" width="0.2788%" height="15" fill="rgb(252,105,26)"/><text x="69.0634%" y="255.50"></text></g><g><title>param_env (126,941 samples, 0.19%)</title><rect x="69.0922%" y="245" width="0.1856%" height="15" fill="rgb(220,39,43)"/><text x="69.3422%" y="255.50"></text></g><g><title>region_scope_tree (192,952 samples, 0.28%)</title><rect x="69.3082%" y="245" width="0.2820%" height="15" fill="rgb(229,68,48)"/><text x="69.5582%" y="255.50"></text></g><g><title>check_impl_item_well_formed (1,993,256 samples, 2.91%)</title><rect x="66.6779%" y="261" width="2.9136%" height="15" fill="rgb(252,8,32)"/><text x="66.9279%" y="271.50">ch..</text></g><g><title>evaluate_obligation (118,071 samples, 0.17%)</title><rect x="71.0966%" y="245" width="0.1726%" height="15" fill="rgb(223,20,43)"/><text x="71.3466%" y="255.50"></text></g><g><title>implied_outlives_bounds (86,501 samples, 0.13%)</title><rect x="71.2838%" y="245" width="0.1264%" height="15" fill="rgb(229,81,49)"/><text x="71.5338%" y="255.50"></text></g><g><title>param_env (205,992 samples, 0.30%)</title><rect x="71.4110%" y="245" width="0.3011%" height="15" fill="rgb(236,28,36)"/><text x="71.6610%" y="255.50"></text></g><g><title>predicates_of (73,250 samples, 0.11%)</title><rect x="71.7121%" y="245" width="0.1071%" height="15" fill="rgb(249,185,26)"/><text x="71.9621%" y="255.50"></text></g><g><title>analysis (48,863,600 samples, 71.43%)</title><rect x="0.5916%" y="309" width="71.4261%" height="15" fill="rgb(249,174,33)"/><text x="0.8416%" y="319.50">analysis</text></g><g><title>type_check_crate (35,735,315 samples, 52.24%)</title><rect x="19.7818%" y="293" width="52.2359%" height="15" fill="rgb(233,201,37)"/><text x="20.0318%" y="303.50">type_check_crate</text></g><g><title>wf_checking (3,755,322 samples, 5.49%)</title><rect x="66.5284%" y="277" width="5.4893%" height="15" fill="rgb(221,78,26)"/><text x="66.7784%" y="287.50">wf_chec..</text></g><g><title>check_item_well_formed (1,659,826 samples, 2.43%)</title><rect x="69.5915%" y="261" width="2.4262%" height="15" fill="rgb(250,127,30)"/><text x="69.8415%" y="271.50">ch..</text></g><g><title>variances_of (70,111 samples, 0.10%)</title><rect x="71.9153%" y="245" width="0.1025%" height="15" fill="rgb(230,49,44)"/><text x="72.1653%" y="255.50"></text></g><g><title>codegen_crate (374,874 samples, 0.55%)</title><rect x="72.0280%" y="309" width="0.5480%" height="15" fill="rgb(229,67,23)"/><text x="72.2780%" y="319.50"></text></g><g><title>AST_validation (76,310 samples, 0.11%)</title><rect x="72.7746%" y="293" width="0.1115%" height="15" fill="rgb(249,83,47)"/><text x="73.0246%" y="303.50"></text></g><g><title>macro_expand_crate (6,391,040 samples, 9.34%)</title><rect x="72.9930%" y="293" width="9.3421%" height="15" fill="rgb(215,43,3)"/><text x="73.2430%" y="303.50">macro_expand_..</text></g><g><title>expand_crate (6,376,530 samples, 9.32%)</title><rect x="73.0142%" y="277" width="9.3209%" height="15" fill="rgb(238,154,13)"/><text x="73.2642%" y="287.50">expand_crate</text></g><g><title>metadata_register_crate (1,290,444 samples, 1.89%)</title><rect x="80.4487%" y="261" width="1.8863%" height="15" fill="rgb(219,56,2)"/><text x="80.6987%" y="271.50">m..</text></g><g><title>metadata_register_crate (468,544 samples, 0.68%)</title><rect x="81.6502%" y="245" width="0.6849%" height="15" fill="rgb(233,0,4)"/><text x="81.9002%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (113,332 samples, 0.17%)</title><rect x="82.3391%" y="293" width="0.1657%" height="15" fill="rgb(235,30,7)"/><text x="82.5891%" y="303.50"></text></g><g><title>finalize_imports (133,632 samples, 0.20%)</title><rect x="82.5105%" y="277" width="0.1953%" height="15" fill="rgb(250,79,13)"/><text x="82.7605%" y="287.50"></text></g><g><title>late_resolve_crate (770,729 samples, 1.13%)</title><rect x="82.7121%" y="277" width="1.1266%" height="15" fill="rgb(211,146,34)"/><text x="82.9621%" y="287.50"></text></g><g><title>configure_and_expand (7,756,265 samples, 11.34%)</title><rect x="72.5760%" y="309" width="11.3377%" height="15" fill="rgb(228,22,38)"/><text x="72.8260%" y="319.50">configure_and_exp..</text></g><g><title>resolve_crate (963,851 samples, 1.41%)</title><rect x="82.5048%" y="293" width="1.4089%" height="15" fill="rgb(235,168,5)"/><text x="82.7548%" y="303.50"></text></g><g><title>drop_ast (74,811 samples, 0.11%)</title><rect x="83.9137%" y="309" width="0.1094%" height="15" fill="rgb(221,155,16)"/><text x="84.1637%" y="319.50"></text></g><g><title>early_lint_checks (149,002 samples, 0.22%)</title><rect x="84.0458%" y="309" width="0.2178%" height="15" fill="rgb(215,215,53)"/><text x="84.2958%" y="319.50"></text></g><g><title>free_global_ctxt (3,349,237 samples, 4.90%)</title><rect x="84.2636%" y="309" width="4.8957%" height="15" fill="rgb(223,4,10)"/><text x="84.5136%" y="319.50">free_g..</text></g><g><title>is_copy_raw (103,930 samples, 0.15%)</title><rect x="93.9925%" y="245" width="0.1519%" height="15" fill="rgb(234,103,6)"/><text x="94.2425%" y="255.50"></text></g><g><title>evaluate_obligation (81,990 samples, 0.12%)</title><rect x="94.0246%" y="229" width="0.1198%" height="15" fill="rgb(227,97,0)"/><text x="94.2746%" y="239.50"></text></g><g><title>needs_drop_raw (138,871 samples, 0.20%)</title><rect x="93.9420%" y="261" width="0.2030%" height="15" fill="rgb(234,150,53)"/><text x="94.1920%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,147,092 samples, 1.68%)</title><rect x="92.4884%" y="277" width="1.6768%" height="15" fill="rgb(228,201,54)"/><text x="92.7384%" y="287.50"></text></g><g><title>optimized_mir (2,491,088 samples, 3.64%)</title><rect x="90.5283%" y="293" width="3.6413%" height="15" fill="rgb(222,22,37)"/><text x="90.7783%" y="303.50">opti..</text></g><g><title>generate_crate_metadata (3,447,329 samples, 5.04%)</title><rect x="89.1594%" y="309" width="5.0391%" height="15" fill="rgb(237,53,32)"/><text x="89.4094%" y="319.50">genera..</text></g><g><title>hir_lowering (1,231,434 samples, 1.80%)</title><rect x="94.1985%" y="309" width="1.8000%" height="15" fill="rgb(233,25,53)"/><text x="94.4485%" y="319.50">h..</text></g><g><title>parse_crate (1,485,896 samples, 2.17%)</title><rect x="96.0717%" y="309" width="2.1720%" height="15" fill="rgb(210,40,34)"/><text x="96.3217%" y="319.50">p..</text></g><g><title>prepare_outputs (170,812 samples, 0.25%)</title><rect x="98.2529%" y="309" width="0.2497%" height="15" fill="rgb(241,220,44)"/><text x="98.5029%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (610,007 samples, 0.89%)</title><rect x="98.5026%" y="309" width="0.8917%" height="15" fill="rgb(235,28,35)"/><text x="98.7526%" y="319.50"></text></g><g><title>setup_global_ctxt (83,371 samples, 0.12%)</title><rect x="99.4098%" y="309" width="0.1219%" height="15" fill="rgb(210,56,17)"/><text x="99.6598%" y="319.50"></text></g><g><title>all (68,411,366 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (68,411,366 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,212,8)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (320,423 samples, 0.47%)</title><rect x="99.5316%" y="309" width="0.4684%" height="15" fill="rgb(223,33,50)"/><text x="99.7816%" y="319.50"></text></g></svg></svg>