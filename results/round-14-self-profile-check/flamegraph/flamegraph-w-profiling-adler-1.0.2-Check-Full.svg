<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (95,712 samples, 0.13%)</title><rect x="7.8951%" y="117" width="0.1268%" height="15" fill="rgb(227,0,7)"/><text x="8.1451%" y="127.50"></text></g><g><title>item_attrs (100,730 samples, 0.13%)</title><rect x="8.2536%" y="85" width="0.1335%" height="15" fill="rgb(217,0,24)"/><text x="8.5036%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (97,850 samples, 0.13%)</title><rect x="8.2575%" y="69" width="0.1297%" height="15" fill="rgb(221,193,54)"/><text x="8.5075%" y="79.50"></text></g><g><title>codegen_fn_attrs (144,740 samples, 0.19%)</title><rect x="8.2089%" y="101" width="0.1918%" height="15" fill="rgb(248,212,6)"/><text x="8.4589%" y="111.50"></text></g><g><title>is_copy_raw (101,531 samples, 0.13%)</title><rect x="9.9613%" y="53" width="0.1346%" height="15" fill="rgb(208,68,35)"/><text x="10.2113%" y="63.50"></text></g><g><title>evaluate_obligation (78,171 samples, 0.10%)</title><rect x="9.9923%" y="37" width="0.1036%" height="15" fill="rgb(232,128,0)"/><text x="10.2423%" y="47.50"></text></g><g><title>adt_drop_tys (231,764 samples, 0.31%)</title><rect x="9.8609%" y="69" width="0.3071%" height="15" fill="rgb(207,160,47)"/><text x="10.1109%" y="79.50"></text></g><g><title>needs_drop_raw (615,196 samples, 0.82%)</title><rect x="9.7989%" y="85" width="0.8153%" height="15" fill="rgb(228,23,34)"/><text x="10.0489%" y="95.50"></text></g><g><title>is_copy_raw (336,622 samples, 0.45%)</title><rect x="10.1681%" y="69" width="0.4461%" height="15" fill="rgb(218,30,26)"/><text x="10.4181%" y="79.50"></text></g><g><title>evaluate_obligation (296,612 samples, 0.39%)</title><rect x="10.2211%" y="53" width="0.3931%" height="15" fill="rgb(220,122,19)"/><text x="10.4711%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (187,334 samples, 0.25%)</title><rect x="10.7531%" y="69" width="0.2483%" height="15" fill="rgb(250,228,42)"/><text x="11.0031%" y="79.50"></text></g><g><title>impl_parent (357,473 samples, 0.47%)</title><rect x="11.7884%" y="53" width="0.4737%" height="15" fill="rgb(240,193,28)"/><text x="12.0384%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (209,240 samples, 0.28%)</title><rect x="11.9848%" y="37" width="0.2773%" height="15" fill="rgb(216,20,37)"/><text x="12.2348%" y="47.50"></text></g><g><title>specialization_graph_of (1,664,079 samples, 2.21%)</title><rect x="11.0576%" y="69" width="2.2053%" height="15" fill="rgb(206,188,39)"/><text x="11.3076%" y="79.50">s..</text></g><g><title>impl_trait_ref (755,219 samples, 1.00%)</title><rect x="12.2621%" y="53" width="1.0009%" height="15" fill="rgb(217,207,13)"/><text x="12.5121%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (612,999 samples, 0.81%)</title><rect x="12.4506%" y="37" width="0.8124%" height="15" fill="rgb(231,73,38)"/><text x="12.7006%" y="47.50"></text></g><g><title>resolve_instance (2,036,505 samples, 2.70%)</title><rect x="10.6142%" y="85" width="2.6989%" height="15" fill="rgb(225,20,46)"/><text x="10.8642%" y="95.50">re..</text></g><g><title>thir_body (363,006 samples, 0.48%)</title><rect x="13.3208%" y="85" width="0.4811%" height="15" fill="rgb(210,31,41)"/><text x="13.5708%" y="95.50"></text></g><g><title>mir_const (4,760,124 samples, 6.31%)</title><rect x="7.4983%" y="133" width="6.3084%" height="15" fill="rgb(221,200,47)"/><text x="7.7483%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,364,950 samples, 5.78%)</title><rect x="8.0220%" y="117" width="5.7847%" height="15" fill="rgb(226,26,5)"/><text x="8.2720%" y="127.50">unsafet..</text></g><g><title>mir_built (4,079,158 samples, 5.41%)</title><rect x="8.4007%" y="101" width="5.4059%" height="15" fill="rgb(249,33,26)"/><text x="8.6507%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (5,304,562 samples, 7.03%)</title><rect x="7.1466%" y="149" width="7.0299%" height="15" fill="rgb(235,183,28)"/><text x="7.3966%" y="159.50">mir_promo..</text></g><g><title>mir_const_qualif (279,073 samples, 0.37%)</title><rect x="13.8066%" y="133" width="0.3698%" height="15" fill="rgb(221,5,38)"/><text x="14.0566%" y="143.50"></text></g><g><title>mir_const (204,953 samples, 0.27%)</title><rect x="13.9049%" y="117" width="0.2716%" height="15" fill="rgb(247,18,42)"/><text x="14.1549%" y="127.50"></text></g><g><title>unsafety_check_result (138,213 samples, 0.18%)</title><rect x="13.9933%" y="101" width="0.1832%" height="15" fill="rgb(241,131,45)"/><text x="14.2433%" y="111.50"></text></g><g><title>mir_built (96,862 samples, 0.13%)</title><rect x="14.0481%" y="85" width="0.1284%" height="15" fill="rgb(249,31,29)"/><text x="14.2981%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (121,631 samples, 0.16%)</title><rect x="14.1779%" y="149" width="0.1612%" height="15" fill="rgb(225,111,53)"/><text x="14.4279%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (427,214 samples, 0.57%)</title><rect x="14.3391%" y="149" width="0.5662%" height="15" fill="rgb(238,160,17)"/><text x="14.5891%" y="159.50"></text></g><g><title>normalize_projection_ty (270,102 samples, 0.36%)</title><rect x="14.5473%" y="133" width="0.3580%" height="15" fill="rgb(214,148,48)"/><text x="14.7973%" y="143.50"></text></g><g><title>type_op_prove_predicate (740,563 samples, 0.98%)</title><rect x="14.9557%" y="149" width="0.9814%" height="15" fill="rgb(232,36,49)"/><text x="15.2057%" y="159.50"></text></g><g><title>MIR_borrow_checking (11,091,233 samples, 14.70%)</title><rect x="1.2417%" y="181" width="14.6987%" height="15" fill="rgb(209,103,24)"/><text x="1.4917%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (11,050,402 samples, 14.64%)</title><rect x="1.2958%" y="165" width="14.6446%" height="15" fill="rgb(229,88,8)"/><text x="1.5458%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (157,342 samples, 0.21%)</title><rect x="15.9404%" y="181" width="0.2085%" height="15" fill="rgb(213,181,19)"/><text x="16.1904%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (128,261 samples, 0.17%)</title><rect x="15.9789%" y="165" width="0.1700%" height="15" fill="rgb(254,191,54)"/><text x="16.2289%" y="175.50"></text></g><g><title>hir_module_items (157,302 samples, 0.21%)</title><rect x="16.1489%" y="181" width="0.2085%" height="15" fill="rgb(241,83,37)"/><text x="16.3989%" y="191.50"></text></g><g><title>get_lang_items (86,181 samples, 0.11%)</title><rect x="16.7872%" y="133" width="0.1142%" height="15" fill="rgb(233,36,39)"/><text x="17.0372%" y="143.50"></text></g><g><title>item_attrs (95,101 samples, 0.13%)</title><rect x="17.0530%" y="101" width="0.1260%" height="15" fill="rgb(226,3,54)"/><text x="17.3030%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (80,061 samples, 0.11%)</title><rect x="17.0730%" y="85" width="0.1061%" height="15" fill="rgb(245,192,40)"/><text x="17.3230%" y="95.50"></text></g><g><title>codegen_fn_attrs (167,533 samples, 0.22%)</title><rect x="17.0148%" y="117" width="0.2220%" height="15" fill="rgb(238,167,29)"/><text x="17.2648%" y="127.50"></text></g><g><title>should_inherit_track_caller (258,613 samples, 0.34%)</title><rect x="16.9014%" y="133" width="0.3427%" height="15" fill="rgb(232,182,51)"/><text x="17.1514%" y="143.50"></text></g><g><title>codegen_fn_attrs (456,856 samples, 0.61%)</title><rect x="16.6751%" y="149" width="0.6054%" height="15" fill="rgb(231,60,39)"/><text x="16.9251%" y="159.50"></text></g><g><title>check_mod_attrs (667,767 samples, 0.88%)</title><rect x="16.3959%" y="165" width="0.8850%" height="15" fill="rgb(208,69,12)"/><text x="16.6459%" y="175.50"></text></g><g><title>check_mod_const_bodies (94,691 samples, 0.13%)</title><rect x="17.2809%" y="165" width="0.1255%" height="15" fill="rgb(235,93,37)"/><text x="17.5309%" y="175.50"></text></g><g><title>lookup_deprecation_entry (99,510 samples, 0.13%)</title><rect x="17.6410%" y="149" width="0.1319%" height="15" fill="rgb(213,116,39)"/><text x="17.8910%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (293,253 samples, 0.39%)</title><rect x="17.4885%" y="165" width="0.3886%" height="15" fill="rgb(222,207,29)"/><text x="17.7385%" y="175.50"></text></g><g><title>misc_checking_1 (1,203,773 samples, 1.60%)</title><rect x="16.3582%" y="181" width="1.5953%" height="15" fill="rgb(206,96,30)"/><text x="16.6082%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (191,272 samples, 0.25%)</title><rect x="17.9552%" y="165" width="0.2535%" height="15" fill="rgb(218,138,4)"/><text x="18.2052%" y="175.50"></text></g><g><title>check_mod_liveness (153,492 samples, 0.20%)</title><rect x="18.0053%" y="149" width="0.2034%" height="15" fill="rgb(250,191,14)"/><text x="18.2553%" y="159.50"></text></g><g><title>misc_checking_2 (394,524 samples, 0.52%)</title><rect x="17.9535%" y="181" width="0.5228%" height="15" fill="rgb(239,60,40)"/><text x="18.2035%" y="191.50"></text></g><g><title>match_checking (201,982 samples, 0.27%)</title><rect x="18.2087%" y="165" width="0.2677%" height="15" fill="rgb(206,27,48)"/><text x="18.4587%" y="175.50"></text></g><g><title>check_match (191,082 samples, 0.25%)</title><rect x="18.2231%" y="149" width="0.2532%" height="15" fill="rgb(225,35,8)"/><text x="18.4731%" y="159.50"></text></g><g><title>death_checking (175,982 samples, 0.23%)</title><rect x="18.5829%" y="165" width="0.2332%" height="15" fill="rgb(250,213,24)"/><text x="18.8329%" y="175.50"></text></g><g><title>eval_to_const_value_raw (160,022 samples, 0.21%)</title><rect x="19.5476%" y="133" width="0.2121%" height="15" fill="rgb(247,123,22)"/><text x="19.7976%" y="143.50"></text></g><g><title>eval_to_const_value_raw (151,662 samples, 0.20%)</title><rect x="19.5587%" y="117" width="0.2010%" height="15" fill="rgb(231,138,38)"/><text x="19.8087%" y="127.50"></text></g><g><title>eval_to_allocation_raw (144,872 samples, 0.19%)</title><rect x="19.5677%" y="101" width="0.1920%" height="15" fill="rgb(231,145,46)"/><text x="19.8177%" y="111.50"></text></g><g><title>crate_lints (1,828,260 samples, 2.42%)</title><rect x="18.8181%" y="149" width="2.4229%" height="15" fill="rgb(251,118,11)"/><text x="19.0681%" y="159.50">cr..</text></g><g><title>type_of (1,044,300 samples, 1.38%)</title><rect x="19.8570%" y="133" width="1.3840%" height="15" fill="rgb(217,147,25)"/><text x="20.1070%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (809,389 samples, 1.07%)</title><rect x="20.1684%" y="117" width="1.0726%" height="15" fill="rgb(247,81,37)"/><text x="20.4184%" y="127.50"></text></g><g><title>lint_checking (1,969,062 samples, 2.61%)</title><rect x="18.8161%" y="165" width="2.6095%" height="15" fill="rgb(209,12,38)"/><text x="19.0661%" y="175.50">li..</text></g><g><title>module_lints (139,301 samples, 0.18%)</title><rect x="21.2410%" y="149" width="0.1846%" height="15" fill="rgb(227,1,9)"/><text x="21.4910%" y="159.50"></text></g><g><title>lint_mod (136,541 samples, 0.18%)</title><rect x="21.2447%" y="133" width="0.1810%" height="15" fill="rgb(248,47,43)"/><text x="21.4947%" y="143.50"></text></g><g><title>privacy_access_levels (77,521 samples, 0.10%)</title><rect x="21.4256%" y="165" width="0.1027%" height="15" fill="rgb(221,10,30)"/><text x="21.6756%" y="175.50"></text></g><g><title>privacy_checking_modules (254,892 samples, 0.34%)</title><rect x="21.5283%" y="165" width="0.3378%" height="15" fill="rgb(210,229,1)"/><text x="21.7783%" y="175.50"></text></g><g><title>check_mod_privacy (252,912 samples, 0.34%)</title><rect x="21.5310%" y="149" width="0.3352%" height="15" fill="rgb(222,148,37)"/><text x="21.7810%" y="159.50"></text></g><g><title>misc_checking_3 (2,567,958 samples, 3.40%)</title><rect x="18.4763%" y="181" width="3.4032%" height="15" fill="rgb(234,67,33)"/><text x="18.7263%" y="191.50">mis..</text></g><g><title>impl_trait_ref (140,962 samples, 0.19%)</title><rect x="22.1795%" y="85" width="0.1868%" height="15" fill="rgb(247,98,35)"/><text x="22.4295%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (121,922 samples, 0.16%)</title><rect x="22.2048%" y="69" width="0.1616%" height="15" fill="rgb(247,138,52)"/><text x="22.4548%" y="79.50"></text></g><g><title>adt_destructor (301,683 samples, 0.40%)</title><rect x="22.0026%" y="133" width="0.3998%" height="15" fill="rgb(213,79,30)"/><text x="22.2526%" y="143.50"></text></g><g><title>coherent_trait (289,873 samples, 0.38%)</title><rect x="22.0183%" y="117" width="0.3842%" height="15" fill="rgb(246,177,23)"/><text x="22.2683%" y="127.50"></text></g><g><title>specialization_graph_of (288,443 samples, 0.38%)</title><rect x="22.0202%" y="101" width="0.3823%" height="15" fill="rgb(230,62,27)"/><text x="22.2702%" y="111.50"></text></g><g><title>is_copy_raw (209,463 samples, 0.28%)</title><rect x="22.4024%" y="133" width="0.2776%" height="15" fill="rgb(216,154,8)"/><text x="22.6524%" y="143.50"></text></g><g><title>evaluate_obligation (187,233 samples, 0.25%)</title><rect x="22.4319%" y="117" width="0.2481%" height="15" fill="rgb(244,35,45)"/><text x="22.6819%" y="127.50"></text></g><g><title>param_env (121,432 samples, 0.16%)</title><rect x="22.6800%" y="133" width="0.1609%" height="15" fill="rgb(251,115,12)"/><text x="22.9300%" y="143.50"></text></g><g><title>impl_parent (2,211,967 samples, 2.93%)</title><rect x="27.8673%" y="117" width="2.9314%" height="15" fill="rgb(240,54,50)"/><text x="28.1173%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,313,711 samples, 1.74%)</title><rect x="29.0577%" y="101" width="1.7410%" height="15" fill="rgb(233,84,52)"/><text x="29.3077%" y="111.50"></text></g><g><title>impl_trait_ref (6,328,593 samples, 8.39%)</title><rect x="30.7987%" y="117" width="8.3870%" height="15" fill="rgb(207,117,47)"/><text x="31.0487%" y="127.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,399,193 samples, 7.16%)</title><rect x="32.0304%" y="101" width="7.1553%" height="15" fill="rgb(249,43,39)"/><text x="32.2804%" y="111.50">metadata_d..</text></g><g><title>coherent_trait (14,095,116 samples, 18.68%)</title><rect x="21.9572%" y="149" width="18.6796%" height="15" fill="rgb(209,38,44)"/><text x="22.2072%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,428,308 samples, 17.80%)</title><rect x="22.8409%" y="133" width="17.7959%" height="15" fill="rgb(236,212,23)"/><text x="23.0909%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,093,481 samples, 1.45%)</title><rect x="39.1877%" y="117" width="1.4491%" height="15" fill="rgb(242,79,21)"/><text x="39.4377%" y="127.50"></text></g><g><title>implementations_of_trait (213,293 samples, 0.28%)</title><rect x="40.3542%" y="101" width="0.2827%" height="15" fill="rgb(211,96,35)"/><text x="40.6042%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (172,003 samples, 0.23%)</title><rect x="40.4089%" y="85" width="0.2279%" height="15" fill="rgb(253,215,40)"/><text x="40.6589%" y="95.50"></text></g><g><title>coherence_checking (14,189,317 samples, 18.80%)</title><rect x="21.9320%" y="165" width="18.8044%" height="15" fill="rgb(211,81,21)"/><text x="22.1820%" y="175.50">coherence_checking</text></g><g><title>adt_def (82,890 samples, 0.11%)</title><rect x="52.4997%" y="101" width="0.1099%" height="15" fill="rgb(208,190,38)"/><text x="52.7497%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (80,810 samples, 0.11%)</title><rect x="52.5024%" y="85" width="0.1071%" height="15" fill="rgb(235,213,38)"/><text x="52.7524%" y="95.50"></text></g><g><title>adt_sized_constraint (142,271 samples, 0.19%)</title><rect x="52.4869%" y="117" width="0.1885%" height="15" fill="rgb(237,122,38)"/><text x="52.7369%" y="127.50"></text></g><g><title>associated_item (485,396 samples, 0.64%)</title><rect x="52.8776%" y="101" width="0.6433%" height="15" fill="rgb(244,218,35)"/><text x="53.1276%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (393,485 samples, 0.52%)</title><rect x="52.9994%" y="85" width="0.5215%" height="15" fill="rgb(240,68,47)"/><text x="53.2494%" y="95.50"></text></g><g><title>associated_items (660,218 samples, 0.87%)</title><rect x="52.6850%" y="117" width="0.8750%" height="15" fill="rgb(210,16,53)"/><text x="52.9350%" y="127.50"></text></g><g><title>adt_dtorck_constraint (82,441 samples, 0.11%)</title><rect x="53.9193%" y="85" width="0.1093%" height="15" fill="rgb(235,124,12)"/><text x="54.1693%" y="95.50"></text></g><g><title>dropck_outlives (335,963 samples, 0.45%)</title><rect x="53.6166%" y="117" width="0.4452%" height="15" fill="rgb(224,169,11)"/><text x="53.8666%" y="127.50"></text></g><g><title>adt_dtorck_constraint (229,632 samples, 0.30%)</title><rect x="53.7575%" y="101" width="0.3043%" height="15" fill="rgb(250,166,2)"/><text x="54.0075%" y="111.50"></text></g><g><title>generics_of (126,311 samples, 0.17%)</title><rect x="55.5935%" y="101" width="0.1674%" height="15" fill="rgb(242,216,29)"/><text x="55.8435%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (102,961 samples, 0.14%)</title><rect x="55.6244%" y="85" width="0.1364%" height="15" fill="rgb(230,116,27)"/><text x="55.8744%" y="95.50"></text></g><g><title>impl_trait_ref (91,751 samples, 0.12%)</title><rect x="55.8980%" y="101" width="0.1216%" height="15" fill="rgb(228,99,48)"/><text x="56.1480%" y="111.50"></text></g><g><title>predicates_of (515,486 samples, 0.68%)</title><rect x="56.0521%" y="101" width="0.6831%" height="15" fill="rgb(253,11,6)"/><text x="56.3021%" y="111.50"></text></g><g><title>predicates_defined_on (397,325 samples, 0.53%)</title><rect x="56.2087%" y="85" width="0.5266%" height="15" fill="rgb(247,143,39)"/><text x="56.4587%" y="95.50"></text></g><g><title>inferred_outlives_of (263,945 samples, 0.35%)</title><rect x="56.3855%" y="69" width="0.3498%" height="15" fill="rgb(236,97,10)"/><text x="56.6355%" y="79.50"></text></g><g><title>specializes (664,996 samples, 0.88%)</title><rect x="56.7353%" y="101" width="0.8813%" height="15" fill="rgb(233,208,19)"/><text x="56.9853%" y="111.50"></text></g><g><title>param_env (396,502 samples, 0.53%)</title><rect x="57.0911%" y="85" width="0.5255%" height="15" fill="rgb(216,164,2)"/><text x="57.3411%" y="95.50"></text></g><g><title>def_span (173,190 samples, 0.23%)</title><rect x="57.3870%" y="69" width="0.2295%" height="15" fill="rgb(220,129,5)"/><text x="57.6370%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (155,080 samples, 0.21%)</title><rect x="57.4110%" y="53" width="0.2055%" height="15" fill="rgb(242,17,10)"/><text x="57.6610%" y="63.50"></text></g><g><title>trait_impls_of (432,363 samples, 0.57%)</title><rect x="57.6334%" y="101" width="0.5730%" height="15" fill="rgb(242,107,0)"/><text x="57.8834%" y="111.50"></text></g><g><title>implementations_of_trait (179,420 samples, 0.24%)</title><rect x="57.9686%" y="85" width="0.2378%" height="15" fill="rgb(251,28,31)"/><text x="58.2186%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (130,910 samples, 0.17%)</title><rect x="58.0329%" y="69" width="0.1735%" height="15" fill="rgb(233,223,10)"/><text x="58.2829%" y="79.50"></text></g><g><title>evaluate_obligation (3,134,704 samples, 4.15%)</title><rect x="54.0618%" y="117" width="4.1543%" height="15" fill="rgb(215,21,27)"/><text x="54.3118%" y="127.50">evalu..</text></g><g><title>fn_sig (89,630 samples, 0.12%)</title><rect x="58.2400%" y="117" width="0.1188%" height="15" fill="rgb(232,23,21)"/><text x="58.4900%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (78,650 samples, 0.10%)</title><rect x="58.2546%" y="101" width="0.1042%" height="15" fill="rgb(244,5,23)"/><text x="58.5046%" y="111.50"></text></g><g><title>generics_of (86,653 samples, 0.11%)</title><rect x="58.3588%" y="117" width="0.1148%" height="15" fill="rgb(226,81,46)"/><text x="58.6088%" y="127.50"></text></g><g><title>impl_item_implementor_ids (97,313 samples, 0.13%)</title><rect x="58.4736%" y="117" width="0.1290%" height="15" fill="rgb(247,70,30)"/><text x="58.7236%" y="127.50"></text></g><g><title>associated_items (83,103 samples, 0.11%)</title><rect x="58.4925%" y="101" width="0.1101%" height="15" fill="rgb(212,68,19)"/><text x="58.7425%" y="111.50"></text></g><g><title>item_attrs (92,573 samples, 0.12%)</title><rect x="58.6810%" y="117" width="0.1227%" height="15" fill="rgb(240,187,13)"/><text x="58.9310%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (89,143 samples, 0.12%)</title><rect x="58.6855%" y="101" width="0.1181%" height="15" fill="rgb(223,113,26)"/><text x="58.9355%" y="111.50"></text></g><g><title>method_autoderef_steps (140,102 samples, 0.19%)</title><rect x="58.8637%" y="117" width="0.1857%" height="15" fill="rgb(206,192,2)"/><text x="59.1137%" y="127.50"></text></g><g><title>object_safety_violations (141,892 samples, 0.19%)</title><rect x="59.0494%" y="117" width="0.1880%" height="15" fill="rgb(241,108,4)"/><text x="59.2994%" y="127.50"></text></g><g><title>explicit_predicates_of (124,783 samples, 0.17%)</title><rect x="59.4894%" y="85" width="0.1654%" height="15" fill="rgb(247,173,49)"/><text x="59.7394%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (106,153 samples, 0.14%)</title><rect x="59.5141%" y="69" width="0.1407%" height="15" fill="rgb(224,114,35)"/><text x="59.7641%" y="79.50"></text></g><g><title>predicates_of (286,434 samples, 0.38%)</title><rect x="59.3200%" y="117" width="0.3796%" height="15" fill="rgb(245,159,27)"/><text x="59.5700%" y="127.50"></text></g><g><title>predicates_defined_on (211,083 samples, 0.28%)</title><rect x="59.4199%" y="101" width="0.2797%" height="15" fill="rgb(245,172,44)"/><text x="59.6699%" y="111.50"></text></g><g><title>item_bodies_checking (14,434,980 samples, 19.13%)</title><rect x="40.7777%" y="165" width="19.1300%" height="15" fill="rgb(236,23,11)"/><text x="41.0277%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (14,432,010 samples, 19.13%)</title><rect x="40.7816%" y="149" width="19.1260%" height="15" fill="rgb(205,117,38)"/><text x="41.0316%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (14,404,848 samples, 19.09%)</title><rect x="40.8176%" y="133" width="19.0900%" height="15" fill="rgb(237,72,25)"/><text x="41.0676%" y="143.50">typeck</text></g><g><title>generics_of (234,042 samples, 0.31%)</title><rect x="61.3647%" y="101" width="0.3102%" height="15" fill="rgb(244,70,9)"/><text x="61.6147%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (190,091 samples, 0.25%)</title><rect x="61.4229%" y="85" width="0.2519%" height="15" fill="rgb(217,125,39)"/><text x="61.6729%" y="95.50"></text></g><g><title>impl_trait_ref (229,883 samples, 0.30%)</title><rect x="61.7044%" y="101" width="0.3047%" height="15" fill="rgb(235,36,10)"/><text x="61.9544%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (187,012 samples, 0.25%)</title><rect x="61.7612%" y="85" width="0.2478%" height="15" fill="rgb(251,123,47)"/><text x="62.0112%" y="95.50"></text></g><g><title>specializes (279,864 samples, 0.37%)</title><rect x="62.0959%" y="101" width="0.3709%" height="15" fill="rgb(221,13,13)"/><text x="62.3459%" y="111.50"></text></g><g><title>param_env (204,893 samples, 0.27%)</title><rect x="62.1952%" y="85" width="0.2715%" height="15" fill="rgb(238,131,9)"/><text x="62.4452%" y="95.50"></text></g><g><title>def_span (147,693 samples, 0.20%)</title><rect x="62.2710%" y="69" width="0.1957%" height="15" fill="rgb(211,50,8)"/><text x="62.5210%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (141,773 samples, 0.19%)</title><rect x="62.2789%" y="53" width="0.1879%" height="15" fill="rgb(245,182,24)"/><text x="62.5289%" y="63.50"></text></g><g><title>evaluate_obligation (1,330,535 samples, 1.76%)</title><rect x="60.7716%" y="117" width="1.7633%" height="15" fill="rgb(242,14,37)"/><text x="61.0216%" y="127.50"></text></g><g><title>item_types_checking (2,067,373 samples, 2.74%)</title><rect x="59.9077%" y="165" width="2.7398%" height="15" fill="rgb(246,228,12)"/><text x="60.1577%" y="175.50">it..</text></g><g><title>check_mod_item_types (2,063,673 samples, 2.73%)</title><rect x="59.9126%" y="149" width="2.7349%" height="15" fill="rgb(213,55,15)"/><text x="60.1626%" y="159.50">ch..</text></g><g><title>typeck (1,763,120 samples, 2.34%)</title><rect x="60.3109%" y="133" width="2.3366%" height="15" fill="rgb(209,9,3)"/><text x="60.5609%" y="143.50">t..</text></g><g><title>fn_sig (229,441 samples, 0.30%)</title><rect x="62.9595%" y="133" width="0.3041%" height="15" fill="rgb(230,59,30)"/><text x="63.2095%" y="143.50"></text></g><g><title>named_region_map (372,467 samples, 0.49%)</title><rect x="63.3772%" y="117" width="0.4936%" height="15" fill="rgb(209,121,21)"/><text x="63.6272%" y="127.50"></text></g><g><title>resolve_lifetimes (346,077 samples, 0.46%)</title><rect x="63.4122%" y="101" width="0.4586%" height="15" fill="rgb(220,109,13)"/><text x="63.6622%" y="111.50"></text></g><g><title>lint_levels (123,371 samples, 0.16%)</title><rect x="63.7074%" y="85" width="0.1635%" height="15" fill="rgb(232,18,1)"/><text x="63.9574%" y="95.50"></text></g><g><title>generics_of (473,079 samples, 0.63%)</title><rect x="63.2636%" y="133" width="0.6269%" height="15" fill="rgb(215,41,42)"/><text x="63.5136%" y="143.50"></text></g><g><title>impl_trait_ref (83,040 samples, 0.11%)</title><rect x="63.8905%" y="133" width="0.1100%" height="15" fill="rgb(224,123,36)"/><text x="64.1405%" y="143.50"></text></g><g><title>explicit_predicates_of (139,983 samples, 0.19%)</title><rect x="64.1254%" y="101" width="0.1855%" height="15" fill="rgb(240,125,3)"/><text x="64.3754%" y="111.50"></text></g><g><title>predicates_of (367,646 samples, 0.49%)</title><rect x="64.0006%" y="133" width="0.4872%" height="15" fill="rgb(205,98,50)"/><text x="64.2506%" y="143.50"></text></g><g><title>predicates_defined_on (332,934 samples, 0.44%)</title><rect x="64.0466%" y="117" width="0.4412%" height="15" fill="rgb(205,185,37)"/><text x="64.2966%" y="127.50"></text></g><g><title>inferred_outlives_of (133,441 samples, 0.18%)</title><rect x="64.3109%" y="101" width="0.1768%" height="15" fill="rgb(238,207,15)"/><text x="64.5609%" y="111.50"></text></g><g><title>inferred_outlives_crate (111,591 samples, 0.15%)</title><rect x="64.3399%" y="85" width="0.1479%" height="15" fill="rgb(213,199,42)"/><text x="64.5899%" y="95.50"></text></g><g><title>type_of (78,361 samples, 0.10%)</title><rect x="64.3839%" y="69" width="0.1038%" height="15" fill="rgb(235,201,11)"/><text x="64.6339%" y="79.50"></text></g><g><title>type_collecting (1,489,607 samples, 1.97%)</title><rect x="62.6492%" y="165" width="1.9741%" height="15" fill="rgb(207,46,11)"/><text x="62.8992%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,472,546 samples, 1.95%)</title><rect x="62.6718%" y="149" width="1.9515%" height="15" fill="rgb(241,35,35)"/><text x="62.9218%" y="159.50">c..</text></g><g><title>type_of (102,270 samples, 0.14%)</title><rect x="64.4878%" y="133" width="0.1355%" height="15" fill="rgb(243,32,47)"/><text x="64.7378%" y="143.50"></text></g><g><title>evaluate_obligation (175,643 samples, 0.23%)</title><rect x="65.2662%" y="133" width="0.2328%" height="15" fill="rgb(247,202,23)"/><text x="65.5162%" y="143.50"></text></g><g><title>check_impl_item_well_formed (836,688 samples, 1.11%)</title><rect x="64.7102%" y="149" width="1.1088%" height="15" fill="rgb(219,102,11)"/><text x="64.9602%" y="159.50"></text></g><g><title>region_scope_tree (118,641 samples, 0.16%)</title><rect x="65.6618%" y="133" width="0.1572%" height="15" fill="rgb(243,110,44)"/><text x="65.9118%" y="143.50"></text></g><g><title>adt_sized_constraint (93,321 samples, 0.12%)</title><rect x="66.4918%" y="117" width="0.1237%" height="15" fill="rgb(222,74,54)"/><text x="66.7418%" y="127.50"></text></g><g><title>evaluate_obligation (203,172 samples, 0.27%)</title><rect x="66.3471%" y="133" width="0.2693%" height="15" fill="rgb(216,99,12)"/><text x="66.5971%" y="143.50"></text></g><g><title>param_env (89,823 samples, 0.12%)</title><rect x="66.6767%" y="133" width="0.1190%" height="15" fill="rgb(226,22,26)"/><text x="66.9267%" y="143.50"></text></g><g><title>analysis (49,885,042 samples, 66.11%)</title><rect x="0.9079%" y="197" width="66.1102%" height="15" fill="rgb(217,163,10)"/><text x="1.1579%" y="207.50">analysis</text></g><g><title>type_check_crate (34,060,397 samples, 45.14%)</title><rect x="21.8795%" y="181" width="45.1386%" height="15" fill="rgb(213,25,53)"/><text x="22.1295%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,804,810 samples, 2.39%)</title><rect x="64.6263%" y="165" width="2.3918%" height="15" fill="rgb(252,105,26)"/><text x="64.8763%" y="175.50">wf..</text></g><g><title>check_item_well_formed (904,822 samples, 1.20%)</title><rect x="65.8190%" y="149" width="1.1991%" height="15" fill="rgb(220,39,43)"/><text x="66.0690%" y="159.50"></text></g><g><title>codegen_crate (376,284 samples, 0.50%)</title><rect x="67.0313%" y="197" width="0.4987%" height="15" fill="rgb(229,68,48)"/><text x="67.2813%" y="207.50"></text></g><g><title>AST_validation (127,302 samples, 0.17%)</title><rect x="67.7786%" y="181" width="0.1687%" height="15" fill="rgb(252,8,32)"/><text x="68.0286%" y="191.50"></text></g><g><title>crate_injection (79,201 samples, 0.10%)</title><rect x="68.0196%" y="181" width="0.1050%" height="15" fill="rgb(223,20,43)"/><text x="68.2696%" y="191.50"></text></g><g><title>metadata_load_macro (96,881 samples, 0.13%)</title><rect x="82.2589%" y="149" width="0.1284%" height="15" fill="rgb(229,81,49)"/><text x="82.5089%" y="159.50"></text></g><g><title>metadata_register_crate (2,257,315 samples, 2.99%)</title><rect x="82.3873%" y="149" width="2.9915%" height="15" fill="rgb(236,28,36)"/><text x="82.6373%" y="159.50">met..</text></g><g><title>metadata_register_crate (828,129 samples, 1.10%)</title><rect x="84.2813%" y="133" width="1.0975%" height="15" fill="rgb(249,185,26)"/><text x="84.5313%" y="143.50"></text></g><g><title>macro_expand_crate (13,082,655 samples, 17.34%)</title><rect x="68.1245%" y="181" width="17.3378%" height="15" fill="rgb(249,174,33)"/><text x="68.3745%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,067,785 samples, 17.32%)</title><rect x="68.1442%" y="165" width="17.3181%" height="15" fill="rgb(233,201,37)"/><text x="68.3942%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (139,251 samples, 0.18%)</title><rect x="85.4678%" y="181" width="0.1845%" height="15" fill="rgb(221,78,26)"/><text x="85.7178%" y="191.50"></text></g><g><title>finalize_macro_resolutions (163,222 samples, 0.22%)</title><rect x="85.7137%" y="165" width="0.2163%" height="15" fill="rgb(250,127,30)"/><text x="85.9637%" y="175.50"></text></g><g><title>late_resolve_crate (1,444,686 samples, 1.91%)</title><rect x="85.9300%" y="165" width="1.9146%" height="15" fill="rgb(230,49,44)"/><text x="86.1800%" y="175.50">l..</text></g><g><title>configure_and_expand (15,410,341 samples, 20.42%)</title><rect x="67.5300%" y="197" width="20.4226%" height="15" fill="rgb(229,67,23)"/><text x="67.7800%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,735,669 samples, 2.30%)</title><rect x="85.6524%" y="181" width="2.3002%" height="15" fill="rgb(249,83,47)"/><text x="85.9024%" y="191.50">r..</text></g><g><title>drop_ast (136,902 samples, 0.18%)</title><rect x="87.9526%" y="197" width="0.1814%" height="15" fill="rgb(215,43,3)"/><text x="88.2026%" y="207.50"></text></g><g><title>early_lint_checks (285,813 samples, 0.38%)</title><rect x="88.1547%" y="197" width="0.3788%" height="15" fill="rgb(238,154,13)"/><text x="88.4047%" y="207.50"></text></g><g><title>free_global_ctxt (3,101,545 samples, 4.11%)</title><rect x="88.5334%" y="197" width="4.1103%" height="15" fill="rgb(219,56,2)"/><text x="88.7834%" y="207.50">free..</text></g><g><title>generate_crate_metadata (561,147 samples, 0.74%)</title><rect x="92.6438%" y="197" width="0.7437%" height="15" fill="rgb(233,0,4)"/><text x="92.8938%" y="207.50"></text></g><g><title>hir_lowering (1,875,370 samples, 2.49%)</title><rect x="93.3874%" y="197" width="2.4853%" height="15" fill="rgb(235,30,7)"/><text x="93.6374%" y="207.50">hi..</text></g><g><title>parse_crate (1,597,407 samples, 2.12%)</title><rect x="95.9443%" y="197" width="2.1170%" height="15" fill="rgb(250,79,13)"/><text x="96.1943%" y="207.50">p..</text></g><g><title>prepare_outputs (283,494 samples, 0.38%)</title><rect x="98.0699%" y="197" width="0.3757%" height="15" fill="rgb(211,146,34)"/><text x="98.3199%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (736,198 samples, 0.98%)</title><rect x="98.4456%" y="197" width="0.9756%" height="15" fill="rgb(228,22,38)"/><text x="98.6956%" y="207.50"></text></g><g><title>setup_global_ctxt (133,812 samples, 0.18%)</title><rect x="99.4352%" y="197" width="0.1773%" height="15" fill="rgb(235,168,5)"/><text x="99.6852%" y="207.50"></text></g><g><title>all (75,457,364 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (75,457,364 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (292,353 samples, 0.39%)</title><rect x="99.6126%" y="197" width="0.3874%" height="15" fill="rgb(223,4,10)"/><text x="99.8626%" y="207.50"></text></g></svg></svg>