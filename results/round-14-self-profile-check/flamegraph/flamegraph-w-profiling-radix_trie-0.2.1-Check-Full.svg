<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (555,824 samples, 0.24%)</title><rect x="14.0244%" y="149" width="0.2406%" height="15" fill="rgb(227,0,7)"/><text x="14.2744%" y="159.50"></text></g><g><title>param_env (501,598 samples, 0.22%)</title><rect x="15.9990%" y="117" width="0.2171%" height="15" fill="rgb(217,0,24)"/><text x="16.2490%" y="127.50"></text></g><g><title>item_attrs (487,324 samples, 0.21%)</title><rect x="16.7645%" y="85" width="0.2109%" height="15" fill="rgb(221,193,54)"/><text x="17.0145%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (468,224 samples, 0.20%)</title><rect x="16.7728%" y="69" width="0.2027%" height="15" fill="rgb(248,212,6)"/><text x="17.0228%" y="79.50"></text></g><g><title>codegen_fn_attrs (694,625 samples, 0.30%)</title><rect x="16.6863%" y="101" width="0.3006%" height="15" fill="rgb(208,68,35)"/><text x="16.9363%" y="111.50"></text></g><g><title>is_copy_raw (523,008 samples, 0.23%)</title><rect x="19.8061%" y="85" width="0.2264%" height="15" fill="rgb(232,128,0)"/><text x="20.0561%" y="95.50"></text></g><g><title>evaluate_obligation (395,028 samples, 0.17%)</title><rect x="19.8615%" y="69" width="0.1710%" height="15" fill="rgb(207,160,47)"/><text x="20.1115%" y="79.50"></text></g><g><title>adt_drop_tys (356,186 samples, 0.15%)</title><rect x="20.1683%" y="69" width="0.1542%" height="15" fill="rgb(228,23,34)"/><text x="20.4183%" y="79.50"></text></g><g><title>needs_drop_raw (2,747,985 samples, 1.19%)</title><rect x="20.0324%" y="85" width="1.1894%" height="15" fill="rgb(218,30,26)"/><text x="20.2824%" y="95.50"></text></g><g><title>is_copy_raw (2,077,818 samples, 0.90%)</title><rect x="20.3225%" y="69" width="0.8993%" height="15" fill="rgb(220,122,19)"/><text x="20.5725%" y="79.50"></text></g><g><title>evaluate_obligation (1,655,278 samples, 0.72%)</title><rect x="20.5054%" y="53" width="0.7164%" height="15" fill="rgb(250,228,42)"/><text x="20.7554%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,240,512 samples, 0.54%)</title><rect x="21.5019%" y="69" width="0.5369%" height="15" fill="rgb(240,193,28)"/><text x="21.7519%" y="79.50"></text></g><g><title>impl_parent (477,145 samples, 0.21%)</title><rect x="22.3031%" y="53" width="0.2065%" height="15" fill="rgb(216,20,37)"/><text x="22.5531%" y="63.50"></text></g><g><title>specialization_graph_of (1,473,457 samples, 0.64%)</title><rect x="22.1174%" y="69" width="0.6377%" height="15" fill="rgb(206,188,39)"/><text x="22.3674%" y="79.50"></text></g><g><title>impl_trait_ref (567,153 samples, 0.25%)</title><rect x="22.5097%" y="53" width="0.2455%" height="15" fill="rgb(217,207,13)"/><text x="22.7597%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (464,112 samples, 0.20%)</title><rect x="22.5543%" y="37" width="0.2009%" height="15" fill="rgb(231,73,38)"/><text x="22.8043%" y="47.50"></text></g><g><title>resolve_instance (3,727,503 samples, 1.61%)</title><rect x="21.2218%" y="85" width="1.6133%" height="15" fill="rgb(225,20,46)"/><text x="21.4718%" y="95.50"></text></g><g><title>thir_body (2,443,371 samples, 1.06%)</title><rect x="22.8752%" y="85" width="1.0575%" height="15" fill="rgb(210,31,41)"/><text x="23.1252%" y="95.50"></text></g><g><title>mir_const (20,375,535 samples, 8.82%)</title><rect x="15.1371%" y="133" width="8.8189%" height="15" fill="rgb(221,200,47)"/><text x="15.3871%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (17,882,551 samples, 7.74%)</title><rect x="16.2161%" y="117" width="7.7399%" height="15" fill="rgb(226,26,5)"/><text x="16.4661%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (16,101,512 samples, 6.97%)</title><rect x="16.9869%" y="101" width="6.9690%" height="15" fill="rgb(249,33,26)"/><text x="17.2369%" y="111.50">mir_built</text></g><g><title>mir_promoted (22,332,556 samples, 9.67%)</title><rect x="14.3333%" y="149" width="9.6659%" height="15" fill="rgb(235,183,28)"/><text x="14.5833%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (825,678 samples, 0.36%)</title><rect x="23.9992%" y="149" width="0.3574%" height="15" fill="rgb(221,5,38)"/><text x="24.2492%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,157,615 samples, 0.50%)</title><rect x="24.3565%" y="149" width="0.5010%" height="15" fill="rgb(247,18,42)"/><text x="24.6065%" y="159.50"></text></g><g><title>normalize_projection_ty (739,859 samples, 0.32%)</title><rect x="24.5374%" y="133" width="0.3202%" height="15" fill="rgb(241,131,45)"/><text x="24.7874%" y="143.50"></text></g><g><title>type_op_normalize_predicate (246,034 samples, 0.11%)</title><rect x="24.8576%" y="149" width="0.1065%" height="15" fill="rgb(249,31,29)"/><text x="25.1076%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,803,078 samples, 3.38%)</title><rect x="24.9878%" y="149" width="3.3773%" height="15" fill="rgb(225,111,53)"/><text x="25.2378%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (64,395,541 samples, 27.87%)</title><rect x="0.4993%" y="181" width="27.8715%" height="15" fill="rgb(238,160,17)"/><text x="0.7493%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (64,089,440 samples, 27.74%)</title><rect x="0.6318%" y="165" width="27.7390%" height="15" fill="rgb(214,148,48)"/><text x="0.8818%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (321,626 samples, 0.14%)</title><rect x="28.4125%" y="181" width="0.1392%" height="15" fill="rgb(232,36,49)"/><text x="28.6625%" y="191.50"></text></g><g><title>codegen_fn_attrs (250,312 samples, 0.11%)</title><rect x="28.8643%" y="117" width="0.1083%" height="15" fill="rgb(209,103,24)"/><text x="29.1143%" y="127.50"></text></g><g><title>codegen_fn_attrs (545,956 samples, 0.24%)</title><rect x="28.7430%" y="149" width="0.2363%" height="15" fill="rgb(229,88,8)"/><text x="28.9930%" y="159.50"></text></g><g><title>should_inherit_track_caller (449,985 samples, 0.19%)</title><rect x="28.7846%" y="133" width="0.1948%" height="15" fill="rgb(213,181,19)"/><text x="29.0346%" y="143.50"></text></g><g><title>check_mod_attrs (954,481 samples, 0.41%)</title><rect x="28.5663%" y="165" width="0.4131%" height="15" fill="rgb(254,191,54)"/><text x="28.8163%" y="175.50"></text></g><g><title>check_mod_const_bodies (241,635 samples, 0.10%)</title><rect x="28.9794%" y="165" width="0.1046%" height="15" fill="rgb(241,83,37)"/><text x="29.2294%" y="175.50"></text></g><g><title>lookup_deprecation_entry (243,183 samples, 0.11%)</title><rect x="29.2776%" y="149" width="0.1053%" height="15" fill="rgb(233,36,39)"/><text x="29.5276%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (641,196 samples, 0.28%)</title><rect x="29.1517%" y="165" width="0.2775%" height="15" fill="rgb(226,3,54)"/><text x="29.4017%" y="175.50"></text></g><g><title>misc_checking_1 (2,099,783 samples, 0.91%)</title><rect x="28.5519%" y="181" width="0.9088%" height="15" fill="rgb(245,192,40)"/><text x="28.8019%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,179,443 samples, 0.51%)</title><rect x="29.4616%" y="165" width="0.5105%" height="15" fill="rgb(238,167,29)"/><text x="29.7116%" y="175.50"></text></g><g><title>check_mod_liveness (984,031 samples, 0.43%)</title><rect x="29.5462%" y="149" width="0.4259%" height="15" fill="rgb(232,182,51)"/><text x="29.7962%" y="159.50"></text></g><g><title>type_uninhabited_from (241,041 samples, 0.10%)</title><rect x="29.8678%" y="133" width="0.1043%" height="15" fill="rgb(231,60,39)"/><text x="30.1178%" y="143.50"></text></g><g><title>misc_checking_2 (2,458,417 samples, 1.06%)</title><rect x="29.4607%" y="181" width="1.0640%" height="15" fill="rgb(208,69,12)"/><text x="29.7107%" y="191.50"></text></g><g><title>match_checking (1,276,884 samples, 0.55%)</title><rect x="29.9721%" y="165" width="0.5527%" height="15" fill="rgb(235,93,37)"/><text x="30.2221%" y="175.50"></text></g><g><title>check_match (1,204,423 samples, 0.52%)</title><rect x="30.0035%" y="149" width="0.5213%" height="15" fill="rgb(213,116,39)"/><text x="30.2535%" y="159.50"></text></g><g><title>check_private_in_public (438,345 samples, 0.19%)</title><rect x="30.5293%" y="165" width="0.1897%" height="15" fill="rgb(222,207,29)"/><text x="30.7793%" y="175.50"></text></g><g><title>death_checking (758,918 samples, 0.33%)</title><rect x="30.7190%" y="165" width="0.3285%" height="15" fill="rgb(206,96,30)"/><text x="30.9690%" y="175.50"></text></g><g><title>param_env (461,775 samples, 0.20%)</title><rect x="31.4899%" y="133" width="0.1999%" height="15" fill="rgb(218,138,4)"/><text x="31.7399%" y="143.50"></text></g><g><title>resolve_instance (234,703 samples, 0.10%)</title><rect x="31.6898%" y="133" width="0.1016%" height="15" fill="rgb(250,191,14)"/><text x="31.9398%" y="143.50"></text></g><g><title>crate_lints (2,845,181 samples, 1.23%)</title><rect x="31.0482%" y="149" width="1.2314%" height="15" fill="rgb(239,60,40)"/><text x="31.2982%" y="159.50"></text></g><g><title>type_of (1,113,034 samples, 0.48%)</title><rect x="31.7979%" y="133" width="0.4817%" height="15" fill="rgb(206,27,48)"/><text x="32.0479%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (882,461 samples, 0.38%)</title><rect x="31.8977%" y="117" width="0.3819%" height="15" fill="rgb(225,35,8)"/><text x="32.1477%" y="127.50"></text></g><g><title>lint_checking (3,949,544 samples, 1.71%)</title><rect x="31.0475%" y="165" width="1.7094%" height="15" fill="rgb(250,213,24)"/><text x="31.2975%" y="175.50"></text></g><g><title>module_lints (1,102,663 samples, 0.48%)</title><rect x="32.2797%" y="149" width="0.4773%" height="15" fill="rgb(247,123,22)"/><text x="32.5297%" y="159.50"></text></g><g><title>lint_mod (1,093,343 samples, 0.47%)</title><rect x="32.2837%" y="133" width="0.4732%" height="15" fill="rgb(231,138,38)"/><text x="32.5337%" y="143.50"></text></g><g><title>privacy_access_levels (596,357 samples, 0.26%)</title><rect x="32.7569%" y="165" width="0.2581%" height="15" fill="rgb(231,145,46)"/><text x="33.0069%" y="175.50"></text></g><g><title>privacy_checking_modules (2,026,782 samples, 0.88%)</title><rect x="33.0150%" y="165" width="0.8772%" height="15" fill="rgb(251,118,11)"/><text x="33.2650%" y="175.50"></text></g><g><title>check_mod_privacy (2,020,072 samples, 0.87%)</title><rect x="33.0179%" y="149" width="0.8743%" height="15" fill="rgb(217,147,25)"/><text x="33.2679%" y="159.50"></text></g><g><title>misc_checking_3 (7,804,817 samples, 3.38%)</title><rect x="30.5248%" y="181" width="3.3781%" height="15" fill="rgb(247,81,37)"/><text x="30.7748%" y="191.50">mis..</text></g><g><title>impl_parent (1,810,352 samples, 0.78%)</title><rect x="35.2555%" y="117" width="0.7836%" height="15" fill="rgb(209,12,38)"/><text x="35.5055%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,146,923 samples, 0.50%)</title><rect x="35.5426%" y="101" width="0.4964%" height="15" fill="rgb(227,1,9)"/><text x="35.7926%" y="111.50"></text></g><g><title>impl_trait_ref (4,594,793 samples, 1.99%)</title><rect x="36.0390%" y="117" width="1.9887%" height="15" fill="rgb(248,47,43)"/><text x="36.2890%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,945,869 samples, 1.71%)</title><rect x="36.3199%" y="101" width="1.7078%" height="15" fill="rgb(221,10,30)"/><text x="36.5699%" y="111.50"></text></g><g><title>coherent_trait (9,885,731 samples, 4.28%)</title><rect x="33.9788%" y="149" width="4.2787%" height="15" fill="rgb(210,229,1)"/><text x="34.2288%" y="159.50">coher..</text></g><g><title>specialization_graph_of (9,866,851 samples, 4.27%)</title><rect x="33.9870%" y="133" width="4.2705%" height="15" fill="rgb(222,148,37)"/><text x="34.2370%" y="143.50">speci..</text></g><g><title>trait_impls_of (528,516 samples, 0.23%)</title><rect x="38.0288%" y="117" width="0.2288%" height="15" fill="rgb(234,67,33)"/><text x="38.2788%" y="127.50"></text></g><g><title>coherence_checking (9,989,742 samples, 4.32%)</title><rect x="33.9705%" y="165" width="4.3237%" height="15" fill="rgb(247,98,35)"/><text x="34.2205%" y="175.50">coher..</text></g><g><title>adt_def (431,434 samples, 0.19%)</title><rect x="57.3433%" y="101" width="0.1867%" height="15" fill="rgb(247,138,52)"/><text x="57.5933%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (428,484 samples, 0.19%)</title><rect x="57.3446%" y="85" width="0.1855%" height="15" fill="rgb(213,79,30)"/><text x="57.5946%" y="95.50"></text></g><g><title>item_attrs (395,574 samples, 0.17%)</title><rect x="57.3589%" y="69" width="0.1712%" height="15" fill="rgb(246,177,23)"/><text x="57.6089%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (392,624 samples, 0.17%)</title><rect x="57.3601%" y="53" width="0.1699%" height="15" fill="rgb(230,62,27)"/><text x="57.6101%" y="63.50"></text></g><g><title>adt_sized_constraint (486,504 samples, 0.21%)</title><rect x="57.3347%" y="117" width="0.2106%" height="15" fill="rgb(216,154,8)"/><text x="57.5847%" y="127.50"></text></g><g><title>associated_item (1,284,004 samples, 0.56%)</title><rect x="57.7160%" y="101" width="0.5557%" height="15" fill="rgb(244,35,45)"/><text x="57.9660%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,036,730 samples, 0.45%)</title><rect x="57.8230%" y="85" width="0.4487%" height="15" fill="rgb(251,115,12)"/><text x="58.0730%" y="95.50"></text></g><g><title>associated_items (1,734,956 samples, 0.75%)</title><rect x="57.5474%" y="117" width="0.7509%" height="15" fill="rgb(240,54,50)"/><text x="57.7974%" y="127.50"></text></g><g><title>adt_dtorck_constraint (250,124 samples, 0.11%)</title><rect x="58.7924%" y="101" width="0.1083%" height="15" fill="rgb(233,84,52)"/><text x="59.0424%" y="111.50"></text></g><g><title>dropck_outlives (1,289,077 samples, 0.56%)</title><rect x="58.3459%" y="117" width="0.5579%" height="15" fill="rgb(207,117,47)"/><text x="58.5959%" y="127.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (930,258 samples, 0.40%)</title><rect x="59.4443%" y="53" width="0.4026%" height="15" fill="rgb(249,43,39)"/><text x="59.6943%" y="63.50"></text></g><g><title>mir_for_ctfe (1,158,390 samples, 0.50%)</title><rect x="59.4305%" y="69" width="0.5014%" height="15" fill="rgb(209,38,44)"/><text x="59.6805%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,423,505 samples, 1.05%)</title><rect x="58.9038%" y="117" width="1.0489%" height="15" fill="rgb(236,212,23)"/><text x="59.1538%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,389,415 samples, 1.03%)</title><rect x="58.9186%" y="101" width="1.0342%" height="15" fill="rgb(242,79,21)"/><text x="59.1686%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,327,004 samples, 1.01%)</title><rect x="58.9456%" y="85" width="1.0072%" height="15" fill="rgb(211,96,35)"/><text x="59.1956%" y="95.50"></text></g><g><title>predicates_of (243,831 samples, 0.11%)</title><rect x="61.6172%" y="101" width="0.1055%" height="15" fill="rgb(253,215,40)"/><text x="61.8672%" y="111.50"></text></g><g><title>trait_impls_of (685,324 samples, 0.30%)</title><rect x="61.7950%" y="101" width="0.2966%" height="15" fill="rgb(211,81,21)"/><text x="62.0450%" y="111.50"></text></g><g><title>implementations_of_trait (271,632 samples, 0.12%)</title><rect x="61.9740%" y="85" width="0.1176%" height="15" fill="rgb(208,190,38)"/><text x="62.2240%" y="95.50"></text></g><g><title>evaluate_obligation (4,945,696 samples, 2.14%)</title><rect x="59.9527%" y="117" width="2.1406%" height="15" fill="rgb(235,213,38)"/><text x="60.2027%" y="127.50">e..</text></g><g><title>generics_of (272,933 samples, 0.12%)</title><rect x="62.2066%" y="117" width="0.1181%" height="15" fill="rgb(237,122,38)"/><text x="62.4566%" y="127.50"></text></g><g><title>item_attrs (236,581 samples, 0.10%)</title><rect x="62.4592%" y="117" width="0.1024%" height="15" fill="rgb(244,218,35)"/><text x="62.7092%" y="127.50"></text></g><g><title>evaluate_obligation (685,151 samples, 0.30%)</title><rect x="62.9171%" y="101" width="0.2965%" height="15" fill="rgb(240,68,47)"/><text x="63.1671%" y="111.50"></text></g><g><title>method_autoderef_steps (1,426,708 samples, 0.62%)</title><rect x="62.6109%" y="117" width="0.6175%" height="15" fill="rgb(210,16,53)"/><text x="62.8609%" y="127.50"></text></g><g><title>predicates_of (586,965 samples, 0.25%)</title><rect x="63.3420%" y="117" width="0.2540%" height="15" fill="rgb(235,124,12)"/><text x="63.5920%" y="127.50"></text></g><g><title>predicates_defined_on (407,022 samples, 0.18%)</title><rect x="63.4199%" y="101" width="0.1762%" height="15" fill="rgb(224,169,11)"/><text x="63.6699%" y="111.50"></text></g><g><title>generics_of (235,923 samples, 0.10%)</title><rect x="70.9582%" y="85" width="0.1021%" height="15" fill="rgb(250,166,2)"/><text x="71.2082%" y="95.50"></text></g><g><title>impl_trait_ref (303,385 samples, 0.13%)</title><rect x="71.0781%" y="85" width="0.1313%" height="15" fill="rgb(242,216,29)"/><text x="71.3281%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (254,854 samples, 0.11%)</title><rect x="71.0991%" y="69" width="0.1103%" height="15" fill="rgb(230,116,27)"/><text x="71.3491%" y="79.50"></text></g><g><title>evaluate_obligation (2,873,365 samples, 1.24%)</title><rect x="70.1498%" y="101" width="1.2436%" height="15" fill="rgb(228,99,48)"/><text x="70.3998%" y="111.50"></text></g><g><title>method_autoderef_steps (393,497 samples, 0.17%)</title><rect x="71.5516%" y="101" width="0.1703%" height="15" fill="rgb(253,11,6)"/><text x="71.8016%" y="111.50"></text></g><g><title>typeck (18,677,798 samples, 8.08%)</title><rect x="63.7110%" y="117" width="8.0841%" height="15" fill="rgb(247,143,39)"/><text x="63.9610%" y="127.50">typeck</text></g><g><title>item_bodies_checking (77,424,426 samples, 33.51%)</title><rect x="38.3219%" y="165" width="33.5107%" height="15" fill="rgb(236,97,10)"/><text x="38.5719%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (77,420,416 samples, 33.51%)</title><rect x="38.3237%" y="149" width="33.5089%" height="15" fill="rgb(233,208,19)"/><text x="38.5737%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (77,224,913 samples, 33.42%)</title><rect x="38.4083%" y="133" width="33.4243%" height="15" fill="rgb(216,164,2)"/><text x="38.6583%" y="143.50">typeck</text></g><g><title>adt_destructor (452,705 samples, 0.20%)</title><rect x="72.5682%" y="133" width="0.1959%" height="15" fill="rgb(220,129,5)"/><text x="72.8182%" y="143.50"></text></g><g><title>coherent_trait (442,825 samples, 0.19%)</title><rect x="72.5725%" y="117" width="0.1917%" height="15" fill="rgb(242,17,10)"/><text x="72.8225%" y="127.50"></text></g><g><title>specialization_graph_of (440,085 samples, 0.19%)</title><rect x="72.5737%" y="101" width="0.1905%" height="15" fill="rgb(242,107,0)"/><text x="72.8237%" y="111.50"></text></g><g><title>item_types_checking (2,321,276 samples, 1.00%)</title><rect x="71.8326%" y="165" width="1.0047%" height="15" fill="rgb(251,28,31)"/><text x="72.0826%" y="175.50"></text></g><g><title>check_mod_item_types (2,312,316 samples, 1.00%)</title><rect x="71.8365%" y="149" width="1.0008%" height="15" fill="rgb(233,223,10)"/><text x="72.0865%" y="159.50"></text></g><g><title>fn_sig (586,395 samples, 0.25%)</title><rect x="73.0732%" y="133" width="0.2538%" height="15" fill="rgb(215,21,27)"/><text x="73.3232%" y="143.50"></text></g><g><title>resolve_lifetimes (352,594 samples, 0.15%)</title><rect x="73.4500%" y="101" width="0.1526%" height="15" fill="rgb(232,23,21)"/><text x="73.7000%" y="111.50"></text></g><g><title>is_late_bound_map (393,904 samples, 0.17%)</title><rect x="73.4365%" y="117" width="0.1705%" height="15" fill="rgb(244,5,23)"/><text x="73.6865%" y="127.50"></text></g><g><title>named_region_map (285,914 samples, 0.12%)</title><rect x="73.6070%" y="117" width="0.1237%" height="15" fill="rgb(226,81,46)"/><text x="73.8570%" y="127.50"></text></g><g><title>resolve_lifetimes (251,164 samples, 0.11%)</title><rect x="73.6221%" y="101" width="0.1087%" height="15" fill="rgb(247,70,30)"/><text x="73.8721%" y="111.50"></text></g><g><title>generics_of (966,931 samples, 0.42%)</title><rect x="73.3271%" y="133" width="0.4185%" height="15" fill="rgb(212,68,19)"/><text x="73.5771%" y="143.50"></text></g><g><title>late_bound_vars_map (575,956 samples, 0.25%)</title><rect x="74.0978%" y="85" width="0.2493%" height="15" fill="rgb(240,187,13)"/><text x="74.3478%" y="95.50"></text></g><g><title>resolve_lifetimes (558,286 samples, 0.24%)</title><rect x="74.1054%" y="69" width="0.2416%" height="15" fill="rgb(223,113,26)"/><text x="74.3554%" y="79.50"></text></g><g><title>explicit_predicates_of (1,092,851 samples, 0.47%)</title><rect x="73.8910%" y="101" width="0.4730%" height="15" fill="rgb(206,192,2)"/><text x="74.1410%" y="111.50"></text></g><g><title>predicates_of (2,011,201 samples, 0.87%)</title><rect x="73.7744%" y="133" width="0.8705%" height="15" fill="rgb(241,108,4)"/><text x="74.0244%" y="143.50"></text></g><g><title>predicates_defined_on (1,910,869 samples, 0.83%)</title><rect x="73.8178%" y="117" width="0.8271%" height="15" fill="rgb(247,173,49)"/><text x="74.0678%" y="127.50"></text></g><g><title>inferred_outlives_of (648,808 samples, 0.28%)</title><rect x="74.3640%" y="101" width="0.2808%" height="15" fill="rgb(224,114,35)"/><text x="74.6140%" y="111.50"></text></g><g><title>inferred_outlives_crate (610,207 samples, 0.26%)</title><rect x="74.3807%" y="85" width="0.2641%" height="15" fill="rgb(245,159,27)"/><text x="74.6307%" y="95.50"></text></g><g><title>type_of (377,014 samples, 0.16%)</title><rect x="74.4817%" y="69" width="0.1632%" height="15" fill="rgb(245,172,44)"/><text x="74.7317%" y="79.50"></text></g><g><title>type_collecting (4,512,051 samples, 1.95%)</title><rect x="72.8395%" y="165" width="1.9529%" height="15" fill="rgb(236,23,11)"/><text x="73.0895%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,497,201 samples, 1.95%)</title><rect x="72.8459%" y="149" width="1.9465%" height="15" fill="rgb(205,117,38)"/><text x="73.0959%" y="159.50">c..</text></g><g><title>type_of (278,755 samples, 0.12%)</title><rect x="74.6717%" y="133" width="0.1207%" height="15" fill="rgb(237,72,25)"/><text x="74.9217%" y="143.50"></text></g><g><title>evaluate_obligation (1,270,281 samples, 0.55%)</title><rect x="77.2172%" y="133" width="0.5498%" height="15" fill="rgb(244,70,9)"/><text x="77.4672%" y="143.50"></text></g><g><title>implied_outlives_bounds (772,619 samples, 0.33%)</title><rect x="77.7710%" y="133" width="0.3344%" height="15" fill="rgb(217,125,39)"/><text x="78.0210%" y="143.50"></text></g><g><title>param_env (841,569 samples, 0.36%)</title><rect x="78.1054%" y="133" width="0.3642%" height="15" fill="rgb(235,36,10)"/><text x="78.3554%" y="143.50"></text></g><g><title>region_scope_tree (679,529 samples, 0.29%)</title><rect x="78.4905%" y="133" width="0.2941%" height="15" fill="rgb(251,123,47)"/><text x="78.7405%" y="143.50"></text></g><g><title>check_impl_item_well_formed (8,990,298 samples, 3.89%)</title><rect x="74.9955%" y="149" width="3.8912%" height="15" fill="rgb(221,13,13)"/><text x="75.2455%" y="159.50">chec..</text></g><g><title>trait_impls_of (235,893 samples, 0.10%)</title><rect x="78.7846%" y="133" width="0.1021%" height="15" fill="rgb(238,131,9)"/><text x="79.0346%" y="143.50"></text></g><g><title>mir_borrowck (383,225 samples, 0.17%)</title><rect x="81.0676%" y="53" width="0.1659%" height="15" fill="rgb(211,50,8)"/><text x="81.3176%" y="63.50"></text></g><g><title>mir_for_ctfe (523,726 samples, 0.23%)</title><rect x="81.0074%" y="85" width="0.2267%" height="15" fill="rgb(245,182,24)"/><text x="81.2574%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (483,596 samples, 0.21%)</title><rect x="81.0247%" y="69" width="0.2093%" height="15" fill="rgb(242,14,37)"/><text x="81.2747%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,178,323 samples, 0.51%)</title><rect x="80.8572%" y="133" width="0.5100%" height="15" fill="rgb(246,228,12)"/><text x="81.1072%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,164,363 samples, 0.50%)</title><rect x="80.8632%" y="117" width="0.5040%" height="15" fill="rgb(213,55,15)"/><text x="81.1132%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,162,763 samples, 0.50%)</title><rect x="80.8639%" y="101" width="0.5033%" height="15" fill="rgb(209,9,3)"/><text x="81.1139%" y="111.50"></text></g><g><title>evaluate_obligation (1,849,211 samples, 0.80%)</title><rect x="81.3672%" y="133" width="0.8004%" height="15" fill="rgb(230,59,30)"/><text x="81.6172%" y="143.50"></text></g><g><title>implied_outlives_bounds (418,211 samples, 0.18%)</title><rect x="82.1911%" y="133" width="0.1810%" height="15" fill="rgb(209,121,21)"/><text x="82.4411%" y="143.50"></text></g><g><title>param_env (726,036 samples, 0.31%)</title><rect x="82.3727%" y="133" width="0.3142%" height="15" fill="rgb(220,109,13)"/><text x="82.6227%" y="143.50"></text></g><g><title>region_scope_tree (280,933 samples, 0.12%)</title><rect x="82.7322%" y="133" width="0.1216%" height="15" fill="rgb(232,18,1)"/><text x="82.9822%" y="143.50"></text></g><g><title>check_item_well_formed (9,578,187 samples, 4.15%)</title><rect x="78.8867%" y="149" width="4.1456%" height="15" fill="rgb(215,41,42)"/><text x="79.1367%" y="159.50">check..</text></g><g><title>evaluate_obligation (268,724 samples, 0.12%)</title><rect x="83.3132%" y="133" width="0.1163%" height="15" fill="rgb(224,123,36)"/><text x="83.5632%" y="143.50"></text></g><g><title>analysis (192,434,972 samples, 83.29%)</title><rect x="0.2618%" y="197" width="83.2892%" height="15" fill="rgb(240,125,3)"/><text x="0.5118%" y="207.50">analysis</text></g><g><title>type_check_crate (114,709,243 samples, 49.65%)</title><rect x="33.9028%" y="181" width="49.6482%" height="15" fill="rgb(205,98,50)"/><text x="34.1528%" y="191.50">type_check_crate</text></g><g><title>wf_checking (20,222,196 samples, 8.75%)</title><rect x="74.7985%" y="165" width="8.7525%" height="15" fill="rgb(205,185,37)"/><text x="75.0485%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,198,525 samples, 0.52%)</title><rect x="83.0323%" y="149" width="0.5187%" height="15" fill="rgb(238,207,15)"/><text x="83.2823%" y="159.50"></text></g><g><title>codegen_crate (414,255 samples, 0.18%)</title><rect x="83.5535%" y="197" width="0.1793%" height="15" fill="rgb(213,199,42)"/><text x="83.8035%" y="207.50"></text></g><g><title>metadata_load_macro (269,274 samples, 0.12%)</title><rect x="90.6950%" y="149" width="0.1165%" height="15" fill="rgb(235,201,11)"/><text x="90.9450%" y="159.50"></text></g><g><title>metadata_register_crate (1,351,724 samples, 0.59%)</title><rect x="90.8115%" y="149" width="0.5850%" height="15" fill="rgb(207,46,11)"/><text x="91.0615%" y="159.50"></text></g><g><title>metadata_register_crate (478,176 samples, 0.21%)</title><rect x="91.1896%" y="133" width="0.2070%" height="15" fill="rgb(241,35,35)"/><text x="91.4396%" y="143.50"></text></g><g><title>macro_expand_crate (17,501,056 samples, 7.57%)</title><rect x="83.9555%" y="181" width="7.5748%" height="15" fill="rgb(243,32,47)"/><text x="84.2055%" y="191.50">macro_expa..</text></g><g><title>expand_crate (17,486,266 samples, 7.57%)</title><rect x="83.9619%" y="165" width="7.5684%" height="15" fill="rgb(247,202,23)"/><text x="84.2119%" y="175.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (308,834 samples, 0.13%)</title><rect x="91.3966%" y="149" width="0.1337%" height="15" fill="rgb(219,102,11)"/><text x="91.6466%" y="159.50"></text></g><g><title>late_resolve_crate (3,128,065 samples, 1.35%)</title><rect x="91.6252%" y="165" width="1.3539%" height="15" fill="rgb(243,110,44)"/><text x="91.8752%" y="175.50"></text></g><g><title>configure_and_expand (21,589,811 samples, 9.34%)</title><rect x="83.7328%" y="197" width="9.3445%" height="15" fill="rgb(222,74,54)"/><text x="83.9828%" y="207.50">configure_and..</text></g><g><title>resolve_crate (3,529,579 samples, 1.53%)</title><rect x="91.5496%" y="181" width="1.5277%" height="15" fill="rgb(216,99,12)"/><text x="91.7996%" y="191.50"></text></g><g><title>drop_ast (356,954 samples, 0.15%)</title><rect x="93.0772%" y="197" width="0.1545%" height="15" fill="rgb(226,22,26)"/><text x="93.3272%" y="207.50"></text></g><g><title>early_lint_checks (645,278 samples, 0.28%)</title><rect x="93.2393%" y="197" width="0.2793%" height="15" fill="rgb(217,163,10)"/><text x="93.4893%" y="207.50"></text></g><g><title>free_global_ctxt (4,576,321 samples, 1.98%)</title><rect x="93.5186%" y="197" width="1.9807%" height="15" fill="rgb(213,25,53)"/><text x="93.7686%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,285,836 samples, 0.99%)</title><rect x="95.4993%" y="197" width="0.9894%" height="15" fill="rgb(252,105,26)"/><text x="95.7493%" y="207.50"></text></g><g><title>hir_lowering (5,804,944 samples, 2.51%)</title><rect x="96.4886%" y="197" width="2.5125%" height="15" fill="rgb(220,39,43)"/><text x="96.7386%" y="207.50">hi..</text></g><g><title>parse_crate (371,714 samples, 0.16%)</title><rect x="99.0270%" y="197" width="0.1609%" height="15" fill="rgb(229,68,48)"/><text x="99.2770%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,121,673 samples, 0.49%)</title><rect x="99.2825%" y="197" width="0.4855%" height="15" fill="rgb(252,8,32)"/><text x="99.5325%" y="207.50"></text></g><g><title>all (231,044,193 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (231,044,193 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (444,034 samples, 0.19%)</title><rect x="99.8078%" y="197" width="0.1922%" height="15" fill="rgb(236,28,36)"/><text x="100.0578%" y="207.50"></text></g></svg></svg>