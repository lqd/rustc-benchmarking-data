<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (60,621 samples, 0.15%)</title><rect x="7.9651%" y="181" width="0.1532%" height="15" fill="rgb(227,0,7)"/><text x="8.2151%" y="191.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (53,651 samples, 0.14%)</title><rect x="7.9827%" y="165" width="0.1356%" height="15" fill="rgb(217,0,24)"/><text x="8.2327%" y="175.50"></text></g><g><title>param_env (72,341 samples, 0.18%)</title><rect x="8.1183%" y="181" width="0.1828%" height="15" fill="rgb(221,193,54)"/><text x="8.3683%" y="191.50"></text></g><g><title>item_attrs (76,880 samples, 0.19%)</title><rect x="8.6376%" y="149" width="0.1943%" height="15" fill="rgb(248,212,6)"/><text x="8.8876%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (75,260 samples, 0.19%)</title><rect x="8.6417%" y="133" width="0.1902%" height="15" fill="rgb(208,68,35)"/><text x="8.8917%" y="143.50"></text></g><g><title>codegen_fn_attrs (112,100 samples, 0.28%)</title><rect x="8.5563%" y="165" width="0.2833%" height="15" fill="rgb(232,128,0)"/><text x="8.8063%" y="175.50"></text></g><g><title>adt_drop_tys (75,930 samples, 0.19%)</title><rect x="9.7938%" y="101" width="0.1919%" height="15" fill="rgb(207,160,47)"/><text x="10.0438%" y="111.50"></text></g><g><title>adt_drop_tys (99,791 samples, 0.25%)</title><rect x="9.7795%" y="117" width="0.2522%" height="15" fill="rgb(228,23,34)"/><text x="10.0295%" y="127.50"></text></g><g><title>is_copy_raw (109,211 samples, 0.28%)</title><rect x="10.0317%" y="117" width="0.2760%" height="15" fill="rgb(218,30,26)"/><text x="10.2817%" y="127.50"></text></g><g><title>evaluate_obligation (99,401 samples, 0.25%)</title><rect x="10.0565%" y="101" width="0.2512%" height="15" fill="rgb(220,122,19)"/><text x="10.3065%" y="111.50"></text></g><g><title>adt_drop_tys (256,762 samples, 0.65%)</title><rect x="9.7345%" y="133" width="0.6488%" height="15" fill="rgb(250,228,42)"/><text x="9.9845%" y="143.50"></text></g><g><title>needs_drop_raw (531,845 samples, 1.34%)</title><rect x="9.6752%" y="149" width="1.3440%" height="15" fill="rgb(240,193,28)"/><text x="9.9252%" y="159.50"></text></g><g><title>is_copy_raw (248,292 samples, 0.63%)</title><rect x="10.3917%" y="133" width="0.6274%" height="15" fill="rgb(216,20,37)"/><text x="10.6417%" y="143.50"></text></g><g><title>evaluate_obligation (210,302 samples, 0.53%)</title><rect x="10.4877%" y="117" width="0.5314%" height="15" fill="rgb(206,188,39)"/><text x="10.7377%" y="127.50"></text></g><g><title>predicates_of (64,971 samples, 0.16%)</title><rect x="10.8550%" y="101" width="0.1642%" height="15" fill="rgb(217,207,13)"/><text x="11.1050%" y="111.50"></text></g><g><title>predicates_defined_on (51,321 samples, 0.13%)</title><rect x="10.8894%" y="85" width="0.1297%" height="15" fill="rgb(231,73,38)"/><text x="11.1394%" y="95.50"></text></g><g><title>specialization_graph_of (216,253 samples, 0.55%)</title><rect x="11.2358%" y="133" width="0.5465%" height="15" fill="rgb(225,20,46)"/><text x="11.4858%" y="143.50"></text></g><g><title>impl_trait_ref (117,571 samples, 0.30%)</title><rect x="11.4852%" y="117" width="0.2971%" height="15" fill="rgb(210,31,41)"/><text x="11.7352%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (104,730 samples, 0.26%)</title><rect x="11.5177%" y="101" width="0.2647%" height="15" fill="rgb(221,200,47)"/><text x="11.7677%" y="111.50"></text></g><g><title>resolve_instance (319,234 samples, 0.81%)</title><rect x="11.0191%" y="149" width="0.8067%" height="15" fill="rgb(226,26,5)"/><text x="11.2691%" y="159.50"></text></g><g><title>thir_body (130,241 samples, 0.33%)</title><rect x="11.8360%" y="149" width="0.3291%" height="15" fill="rgb(249,33,26)"/><text x="12.0860%" y="159.50"></text></g><g><title>mir_const (1,825,120 samples, 4.61%)</title><rect x="7.5783%" y="197" width="4.6121%" height="15" fill="rgb(235,183,28)"/><text x="7.8283%" y="207.50">mir_c..</text></g><g><title>unsafety_check_result (1,539,086 samples, 3.89%)</title><rect x="8.3011%" y="181" width="3.8893%" height="15" fill="rgb(221,5,38)"/><text x="8.5511%" y="191.50">unsa..</text></g><g><title>mir_built (1,325,984 samples, 3.35%)</title><rect x="8.8396%" y="165" width="3.3507%" height="15" fill="rgb(247,18,42)"/><text x="9.0896%" y="175.50">mir..</text></g><g><title>has_structural_eq_impls (335,754 samples, 0.85%)</title><rect x="12.5810%" y="181" width="0.8484%" height="15" fill="rgb(241,131,45)"/><text x="12.8310%" y="191.50"></text></g><g><title>evaluate_obligation (316,254 samples, 0.80%)</title><rect x="12.6302%" y="165" width="0.7992%" height="15" fill="rgb(249,31,29)"/><text x="12.8802%" y="175.50"></text></g><g><title>trait_impls_of (283,132 samples, 0.72%)</title><rect x="12.7139%" y="149" width="0.7155%" height="15" fill="rgb(225,111,53)"/><text x="12.9639%" y="159.50"></text></g><g><title>implementations_of_trait (77,660 samples, 0.20%)</title><rect x="13.2332%" y="133" width="0.1962%" height="15" fill="rgb(238,160,17)"/><text x="13.4832%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (60,130 samples, 0.15%)</title><rect x="13.2775%" y="117" width="0.1519%" height="15" fill="rgb(214,148,48)"/><text x="13.5275%" y="127.50"></text></g><g><title>is_freeze_raw (95,521 samples, 0.24%)</title><rect x="13.4367%" y="181" width="0.2414%" height="15" fill="rgb(232,36,49)"/><text x="13.6867%" y="191.50"></text></g><g><title>evaluate_obligation (92,091 samples, 0.23%)</title><rect x="13.4454%" y="165" width="0.2327%" height="15" fill="rgb(209,103,24)"/><text x="13.6954%" y="175.50"></text></g><g><title>mir_const (74,701 samples, 0.19%)</title><rect x="13.6885%" y="181" width="0.1888%" height="15" fill="rgb(229,88,8)"/><text x="13.9385%" y="191.50"></text></g><g><title>unsafety_check_result (40,131 samples, 0.10%)</title><rect x="13.7758%" y="165" width="0.1014%" height="15" fill="rgb(213,181,19)"/><text x="14.0258%" y="175.50"></text></g><g><title>is_copy_raw (93,241 samples, 0.24%)</title><rect x="13.9586%" y="149" width="0.2356%" height="15" fill="rgb(254,191,54)"/><text x="14.2086%" y="159.50"></text></g><g><title>evaluate_obligation (87,541 samples, 0.22%)</title><rect x="13.9730%" y="133" width="0.2212%" height="15" fill="rgb(241,83,37)"/><text x="14.2230%" y="143.50"></text></g><g><title>adt_drop_tys (139,291 samples, 0.35%)</title><rect x="13.8991%" y="165" width="0.3520%" height="15" fill="rgb(233,36,39)"/><text x="14.1491%" y="175.50"></text></g><g><title>needs_drop_raw (158,781 samples, 0.40%)</title><rect x="13.8772%" y="181" width="0.4012%" height="15" fill="rgb(226,3,54)"/><text x="14.1272%" y="191.50"></text></g><g><title>mir_promoted (2,872,692 samples, 7.26%)</title><rect x="7.0266%" y="213" width="7.2593%" height="15" fill="rgb(245,192,40)"/><text x="7.2766%" y="223.50">mir_promot..</text></g><g><title>mir_const_qualif (829,249 samples, 2.10%)</title><rect x="12.1903%" y="197" width="2.0955%" height="15" fill="rgb(238,167,29)"/><text x="12.4403%" y="207.50">m..</text></g><g><title>type_op_ascribe_user_type (152,861 samples, 0.39%)</title><rect x="14.3043%" y="213" width="0.3863%" height="15" fill="rgb(232,182,51)"/><text x="14.5543%" y="223.50"></text></g><g><title>type_op_prove_predicate (651,767 samples, 1.65%)</title><rect x="14.6906%" y="213" width="1.6470%" height="15" fill="rgb(231,60,39)"/><text x="14.9406%" y="223.50"></text></g><g><title>evaluate_obligation (43,140 samples, 0.11%)</title><rect x="16.2286%" y="197" width="0.1090%" height="15" fill="rgb(208,69,12)"/><text x="16.4786%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,827,155 samples, 14.73%)</title><rect x="1.6441%" y="245" width="14.7252%" height="15" fill="rgb(235,93,37)"/><text x="1.8941%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (5,808,185 samples, 14.68%)</title><rect x="1.6921%" y="229" width="14.6772%" height="15" fill="rgb(213,116,39)"/><text x="1.9421%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (199,782 samples, 0.50%)</title><rect x="16.3693%" y="245" width="0.5048%" height="15" fill="rgb(222,207,29)"/><text x="16.6193%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (170,572 samples, 0.43%)</title><rect x="16.4431%" y="229" width="0.4310%" height="15" fill="rgb(206,96,30)"/><text x="16.6931%" y="239.50"></text></g><g><title>hir_module_items (101,861 samples, 0.26%)</title><rect x="16.8741%" y="245" width="0.2574%" height="15" fill="rgb(218,138,4)"/><text x="17.1241%" y="255.50"></text></g><g><title>get_lang_items (64,881 samples, 0.16%)</title><rect x="17.5473%" y="197" width="0.1640%" height="15" fill="rgb(250,191,14)"/><text x="17.7973%" y="207.50"></text></g><g><title>codegen_fn_attrs (176,012 samples, 0.44%)</title><rect x="17.3733%" y="213" width="0.4448%" height="15" fill="rgb(239,60,40)"/><text x="17.6233%" y="223.50"></text></g><g><title>check_mod_attrs (241,803 samples, 0.61%)</title><rect x="17.2075%" y="229" width="0.6110%" height="15" fill="rgb(206,27,48)"/><text x="17.4575%" y="239.50"></text></g><g><title>lookup_deprecation_entry (71,360 samples, 0.18%)</title><rect x="18.1116%" y="213" width="0.1803%" height="15" fill="rgb(225,35,8)"/><text x="18.3616%" y="223.50"></text></g><g><title>lookup_stability (47,231 samples, 0.12%)</title><rect x="18.2919%" y="213" width="0.1194%" height="15" fill="rgb(250,213,24)"/><text x="18.5419%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (205,672 samples, 0.52%)</title><rect x="17.9429%" y="229" width="0.5197%" height="15" fill="rgb(247,123,22)"/><text x="18.1929%" y="239.50"></text></g><g><title>misc_checking_1 (558,386 samples, 1.41%)</title><rect x="17.1331%" y="245" width="1.4110%" height="15" fill="rgb(231,138,38)"/><text x="17.3831%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (99,081 samples, 0.25%)</title><rect x="18.5500%" y="229" width="0.2504%" height="15" fill="rgb(231,145,46)"/><text x="18.8000%" y="239.50"></text></g><g><title>check_mod_liveness (79,671 samples, 0.20%)</title><rect x="18.5990%" y="213" width="0.2013%" height="15" fill="rgb(251,118,11)"/><text x="18.8490%" y="223.50"></text></g><g><title>misc_checking_2 (230,282 samples, 0.58%)</title><rect x="18.5441%" y="245" width="0.5819%" height="15" fill="rgb(217,147,25)"/><text x="18.7941%" y="255.50"></text></g><g><title>match_checking (128,891 samples, 0.33%)</title><rect x="18.8003%" y="229" width="0.3257%" height="15" fill="rgb(247,81,37)"/><text x="19.0503%" y="239.50"></text></g><g><title>check_match (121,581 samples, 0.31%)</title><rect x="18.8188%" y="213" width="0.3072%" height="15" fill="rgb(209,12,38)"/><text x="19.0688%" y="223.50"></text></g><g><title>death_checking (67,301 samples, 0.17%)</title><rect x="19.2507%" y="229" width="0.1701%" height="15" fill="rgb(227,1,9)"/><text x="19.5007%" y="239.50"></text></g><g><title>item_attrs (48,711 samples, 0.12%)</title><rect x="20.2314%" y="133" width="0.1231%" height="15" fill="rgb(248,47,43)"/><text x="20.4814%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,991 samples, 0.12%)</title><rect x="20.2358%" y="117" width="0.1187%" height="15" fill="rgb(221,10,30)"/><text x="20.4858%" y="127.50"></text></g><g><title>codegen_fn_attrs (78,961 samples, 0.20%)</title><rect x="20.1904%" y="149" width="0.1995%" height="15" fill="rgb(210,229,1)"/><text x="20.4404%" y="159.50"></text></g><g><title>fn_abi_of_instance (187,011 samples, 0.47%)</title><rect x="20.1072%" y="165" width="0.4726%" height="15" fill="rgb(222,148,37)"/><text x="20.3572%" y="175.50"></text></g><g><title>param_env (60,460 samples, 0.15%)</title><rect x="20.4270%" y="149" width="0.1528%" height="15" fill="rgb(234,67,33)"/><text x="20.6770%" y="159.50"></text></g><g><title>mir_for_ctfe (64,861 samples, 0.16%)</title><rect x="20.7630%" y="165" width="0.1639%" height="15" fill="rgb(247,98,35)"/><text x="21.0130%" y="175.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (54,540 samples, 0.14%)</title><rect x="20.7891%" y="149" width="0.1378%" height="15" fill="rgb(247,138,52)"/><text x="21.0391%" y="159.50"></text></g><g><title>eval_to_const_value_raw (47,481 samples, 0.12%)</title><rect x="20.9945%" y="149" width="0.1200%" height="15" fill="rgb(213,79,30)"/><text x="21.2445%" y="159.50"></text></g><g><title>eval_to_const_value_raw (44,821 samples, 0.11%)</title><rect x="21.0012%" y="133" width="0.1133%" height="15" fill="rgb(246,177,23)"/><text x="21.2512%" y="143.50"></text></g><g><title>eval_to_allocation_raw (580,097 samples, 1.47%)</title><rect x="19.6706%" y="197" width="1.4659%" height="15" fill="rgb(230,62,27)"/><text x="19.9206%" y="207.50"></text></g><g><title>eval_to_allocation_raw (577,487 samples, 1.46%)</title><rect x="19.6772%" y="181" width="1.4593%" height="15" fill="rgb(216,154,8)"/><text x="19.9272%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (68,131 samples, 0.17%)</title><rect x="20.9644%" y="165" width="0.1722%" height="15" fill="rgb(244,35,45)"/><text x="21.2144%" y="175.50"></text></g><g><title>crate_lints (785,399 samples, 1.98%)</title><rect x="19.4284%" y="213" width="1.9847%" height="15" fill="rgb(251,115,12)"/><text x="19.6784%" y="223.50">c..</text></g><g><title>param_env (109,431 samples, 0.28%)</title><rect x="21.1365%" y="197" width="0.2765%" height="15" fill="rgb(240,54,50)"/><text x="21.3865%" y="207.50"></text></g><g><title>predicates_of (50,100 samples, 0.13%)</title><rect x="21.2865%" y="181" width="0.1266%" height="15" fill="rgb(233,84,52)"/><text x="21.5365%" y="191.50"></text></g><g><title>predicates_defined_on (43,280 samples, 0.11%)</title><rect x="21.3037%" y="165" width="0.1094%" height="15" fill="rgb(207,117,47)"/><text x="21.5537%" y="175.50"></text></g><g><title>lint_checking (849,550 samples, 2.15%)</title><rect x="19.4208%" y="229" width="2.1468%" height="15" fill="rgb(249,43,39)"/><text x="19.6708%" y="239.50">l..</text></g><g><title>module_lints (61,151 samples, 0.15%)</title><rect x="21.4131%" y="213" width="0.1545%" height="15" fill="rgb(209,38,44)"/><text x="21.6631%" y="223.50"></text></g><g><title>lint_mod (57,111 samples, 0.14%)</title><rect x="21.4233%" y="197" width="0.1443%" height="15" fill="rgb(236,212,23)"/><text x="21.6733%" y="207.50"></text></g><g><title>privacy_access_levels (49,661 samples, 0.13%)</title><rect x="21.5676%" y="229" width="0.1255%" height="15" fill="rgb(242,79,21)"/><text x="21.8176%" y="239.50"></text></g><g><title>privacy_checking_modules (95,991 samples, 0.24%)</title><rect x="21.6931%" y="229" width="0.2426%" height="15" fill="rgb(211,96,35)"/><text x="21.9431%" y="239.50"></text></g><g><title>check_mod_privacy (93,591 samples, 0.24%)</title><rect x="21.6992%" y="213" width="0.2365%" height="15" fill="rgb(253,215,40)"/><text x="21.9492%" y="223.50"></text></g><g><title>misc_checking_3 (1,122,643 samples, 2.84%)</title><rect x="19.1260%" y="245" width="2.8369%" height="15" fill="rgb(211,81,21)"/><text x="19.3760%" y="255.50">mi..</text></g><g><title>adt_sized_constraint (40,531 samples, 0.10%)</title><rect x="26.4527%" y="181" width="0.1024%" height="15" fill="rgb(208,190,38)"/><text x="26.7027%" y="191.50"></text></g><g><title>associated_items (58,700 samples, 0.15%)</title><rect x="26.5615%" y="181" width="0.1483%" height="15" fill="rgb(235,213,38)"/><text x="26.8115%" y="191.50"></text></g><g><title>adt_dtorck_constraint (59,950 samples, 0.15%)</title><rect x="27.0116%" y="149" width="0.1515%" height="15" fill="rgb(237,122,38)"/><text x="27.2616%" y="159.50"></text></g><g><title>dropck_outlives (174,682 samples, 0.44%)</title><rect x="26.7791%" y="181" width="0.4414%" height="15" fill="rgb(244,218,35)"/><text x="27.0291%" y="191.50"></text></g><g><title>adt_dtorck_constraint (133,292 samples, 0.34%)</title><rect x="26.8837%" y="165" width="0.3368%" height="15" fill="rgb(240,68,47)"/><text x="27.1337%" y="175.50"></text></g><g><title>adt_def (118,882 samples, 0.30%)</title><rect x="27.4967%" y="149" width="0.3004%" height="15" fill="rgb(210,16,53)"/><text x="27.7467%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (116,112 samples, 0.29%)</title><rect x="27.5037%" y="133" width="0.2934%" height="15" fill="rgb(235,124,12)"/><text x="27.7537%" y="143.50"></text></g><g><title>item_attrs (58,472 samples, 0.15%)</title><rect x="27.6494%" y="117" width="0.1478%" height="15" fill="rgb(224,169,11)"/><text x="27.8994%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (54,992 samples, 0.14%)</title><rect x="27.6582%" y="101" width="0.1390%" height="15" fill="rgb(250,166,2)"/><text x="27.9082%" y="111.50"></text></g><g><title>adt_sized_constraint (44,081 samples, 0.11%)</title><rect x="27.8810%" y="133" width="0.1114%" height="15" fill="rgb(242,216,29)"/><text x="28.1310%" y="143.50"></text></g><g><title>adt_def (42,461 samples, 0.11%)</title><rect x="27.8851%" y="117" width="0.1073%" height="15" fill="rgb(230,116,27)"/><text x="28.1351%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (41,941 samples, 0.11%)</title><rect x="27.8864%" y="101" width="0.1060%" height="15" fill="rgb(228,99,48)"/><text x="28.1364%" y="111.50"></text></g><g><title>adt_sized_constraint (126,161 samples, 0.32%)</title><rect x="27.7972%" y="149" width="0.3188%" height="15" fill="rgb(253,11,6)"/><text x="28.0472%" y="159.50"></text></g><g><title>type_of (39,650 samples, 0.10%)</title><rect x="28.0158%" y="133" width="0.1002%" height="15" fill="rgb(247,143,39)"/><text x="28.2658%" y="143.50"></text></g><g><title>adt_sized_constraint (277,564 samples, 0.70%)</title><rect x="27.4597%" y="165" width="0.7014%" height="15" fill="rgb(236,97,10)"/><text x="27.7097%" y="175.50"></text></g><g><title>evaluate_obligation (547,027 samples, 1.38%)</title><rect x="27.2206%" y="181" width="1.3823%" height="15" fill="rgb(233,208,19)"/><text x="27.4706%" y="191.50"></text></g><g><title>trait_impls_of (160,802 samples, 0.41%)</title><rect x="28.1966%" y="165" width="0.4063%" height="15" fill="rgb(216,164,2)"/><text x="28.4466%" y="175.50"></text></g><g><title>implementations_of_trait (53,501 samples, 0.14%)</title><rect x="28.4677%" y="149" width="0.1352%" height="15" fill="rgb(220,129,5)"/><text x="28.7177%" y="159.50"></text></g><g><title>fn_sig (77,751 samples, 0.20%)</title><rect x="28.6129%" y="181" width="0.1965%" height="15" fill="rgb(242,17,10)"/><text x="28.8629%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (73,811 samples, 0.19%)</title><rect x="28.6228%" y="165" width="0.1865%" height="15" fill="rgb(242,107,0)"/><text x="28.8728%" y="175.50"></text></g><g><title>generics_of (60,421 samples, 0.15%)</title><rect x="28.8093%" y="181" width="0.1527%" height="15" fill="rgb(251,28,31)"/><text x="29.0593%" y="191.50"></text></g><g><title>explicit_predicates_of (55,180 samples, 0.14%)</title><rect x="29.4677%" y="149" width="0.1394%" height="15" fill="rgb(233,223,10)"/><text x="29.7177%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (44,550 samples, 0.11%)</title><rect x="29.4945%" y="133" width="0.1126%" height="15" fill="rgb(215,21,27)"/><text x="29.7445%" y="143.50"></text></g><g><title>predicates_of (153,441 samples, 0.39%)</title><rect x="29.2848%" y="181" width="0.3877%" height="15" fill="rgb(232,23,21)"/><text x="29.5348%" y="191.50"></text></g><g><title>predicates_defined_on (108,900 samples, 0.28%)</title><rect x="29.3974%" y="165" width="0.2752%" height="15" fill="rgb(244,5,23)"/><text x="29.6474%" y="175.50"></text></g><g><title>type_of (53,850 samples, 0.14%)</title><rect x="29.7043%" y="181" width="0.1361%" height="15" fill="rgb(226,81,46)"/><text x="29.9543%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (46,410 samples, 0.12%)</title><rect x="29.7231%" y="165" width="0.1173%" height="15" fill="rgb(247,70,30)"/><text x="29.9731%" y="175.50"></text></g><g><title>associated_item (71,881 samples, 0.18%)</title><rect x="32.5775%" y="149" width="0.1816%" height="15" fill="rgb(212,68,19)"/><text x="32.8275%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (54,641 samples, 0.14%)</title><rect x="32.6211%" y="133" width="0.1381%" height="15" fill="rgb(240,187,13)"/><text x="32.8711%" y="143.50"></text></g><g><title>associated_items (117,491 samples, 0.30%)</title><rect x="32.4879%" y="165" width="0.2969%" height="15" fill="rgb(223,113,26)"/><text x="32.7379%" y="175.50"></text></g><g><title>adt_dtorck_constraint (57,771 samples, 0.15%)</title><rect x="32.9367%" y="133" width="0.1460%" height="15" fill="rgb(206,192,2)"/><text x="33.1867%" y="143.50"></text></g><g><title>dropck_outlives (125,431 samples, 0.32%)</title><rect x="32.8029%" y="165" width="0.3170%" height="15" fill="rgb(241,108,4)"/><text x="33.0529%" y="175.50"></text></g><g><title>adt_dtorck_constraint (100,161 samples, 0.25%)</title><rect x="32.8667%" y="149" width="0.2531%" height="15" fill="rgb(247,173,49)"/><text x="33.1167%" y="159.50"></text></g><g><title>adt_sized_constraint (47,411 samples, 0.12%)</title><rect x="33.8232%" y="149" width="0.1198%" height="15" fill="rgb(224,114,35)"/><text x="34.0732%" y="159.50"></text></g><g><title>adt_def (41,490 samples, 0.10%)</title><rect x="33.8382%" y="133" width="0.1048%" height="15" fill="rgb(245,159,27)"/><text x="34.0882%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (39,880 samples, 0.10%)</title><rect x="33.8423%" y="117" width="0.1008%" height="15" fill="rgb(245,172,44)"/><text x="34.0923%" y="127.50"></text></g><g><title>evaluate_obligation (496,746 samples, 1.26%)</title><rect x="33.1198%" y="165" width="1.2553%" height="15" fill="rgb(236,23,11)"/><text x="33.3698%" y="175.50"></text></g><g><title>trait_impls_of (144,511 samples, 0.37%)</title><rect x="34.0099%" y="149" width="0.3652%" height="15" fill="rgb(205,117,38)"/><text x="34.2599%" y="159.50"></text></g><g><title>implementations_of_trait (57,791 samples, 0.15%)</title><rect x="34.2291%" y="133" width="0.1460%" height="15" fill="rgb(237,72,25)"/><text x="34.4791%" y="143.50"></text></g><g><title>fn_sig (52,170 samples, 0.13%)</title><rect x="34.3828%" y="165" width="0.1318%" height="15" fill="rgb(244,70,9)"/><text x="34.6328%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (49,440 samples, 0.12%)</title><rect x="34.3897%" y="149" width="0.1249%" height="15" fill="rgb(217,125,39)"/><text x="34.6397%" y="159.50"></text></g><g><title>is_copy_raw (288,783 samples, 0.73%)</title><rect x="34.6468%" y="165" width="0.7298%" height="15" fill="rgb(235,36,10)"/><text x="34.8968%" y="175.50"></text></g><g><title>evaluate_obligation (267,453 samples, 0.68%)</title><rect x="34.7007%" y="149" width="0.6759%" height="15" fill="rgb(251,123,47)"/><text x="34.9507%" y="159.50"></text></g><g><title>trait_impls_of (239,453 samples, 0.61%)</title><rect x="34.7714%" y="133" width="0.6051%" height="15" fill="rgb(221,13,13)"/><text x="35.0214%" y="143.50"></text></g><g><title>implementations_of_trait (67,300 samples, 0.17%)</title><rect x="35.2065%" y="117" width="0.1701%" height="15" fill="rgb(238,131,9)"/><text x="35.4565%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (58,500 samples, 0.15%)</title><rect x="35.2287%" y="101" width="0.1478%" height="15" fill="rgb(211,50,8)"/><text x="35.4787%" y="111.50"></text></g><g><title>method_autoderef_steps (80,270 samples, 0.20%)</title><rect x="35.4847%" y="165" width="0.2028%" height="15" fill="rgb(245,182,24)"/><text x="35.7347%" y="175.50"></text></g><g><title>evaluate_obligation (71,670 samples, 0.18%)</title><rect x="35.5064%" y="149" width="0.1811%" height="15" fill="rgb(242,14,37)"/><text x="35.7564%" y="159.50"></text></g><g><title>trait_impls_of (46,920 samples, 0.12%)</title><rect x="35.5690%" y="133" width="0.1186%" height="15" fill="rgb(246,228,12)"/><text x="35.8190%" y="143.50"></text></g><g><title>evaluate_obligation (195,072 samples, 0.49%)</title><rect x="36.1753%" y="149" width="0.4929%" height="15" fill="rgb(213,55,15)"/><text x="36.4253%" y="159.50"></text></g><g><title>layout_of (54,571 samples, 0.14%)</title><rect x="36.8921%" y="133" width="0.1379%" height="15" fill="rgb(209,9,3)"/><text x="37.1421%" y="143.50"></text></g><g><title>layout_of (180,043 samples, 0.45%)</title><rect x="36.7361%" y="149" width="0.4550%" height="15" fill="rgb(230,59,30)"/><text x="36.9861%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (60,631 samples, 0.15%)</title><rect x="37.0379%" y="133" width="0.1532%" height="15" fill="rgb(209,121,21)"/><text x="37.2879%" y="143.50"></text></g><g><title>param_env (43,192 samples, 0.11%)</title><rect x="37.1911%" y="149" width="0.1091%" height="15" fill="rgb(220,109,13)"/><text x="37.4411%" y="159.50"></text></g><g><title>object_safety_violations (707,488 samples, 1.79%)</title><rect x="35.6875%" y="165" width="1.7878%" height="15" fill="rgb(232,18,1)"/><text x="35.9375%" y="175.50">o..</text></g><g><title>predicates_of (69,301 samples, 0.18%)</title><rect x="37.3002%" y="149" width="0.1751%" height="15" fill="rgb(215,41,42)"/><text x="37.5502%" y="159.50"></text></g><g><title>predicates_of (70,141 samples, 0.18%)</title><rect x="37.4841%" y="165" width="0.1772%" height="15" fill="rgb(224,123,36)"/><text x="37.7341%" y="175.50"></text></g><g><title>predicates_defined_on (55,011 samples, 0.14%)</title><rect x="37.5223%" y="149" width="0.1390%" height="15" fill="rgb(240,125,3)"/><text x="37.7723%" y="159.50"></text></g><g><title>typeck (3,158,295 samples, 7.98%)</title><rect x="29.8404%" y="181" width="7.9810%" height="15" fill="rgb(205,98,50)"/><text x="30.0904%" y="191.50">typeck</text></g><g><title>item_bodies_checking (6,214,318 samples, 15.70%)</title><rect x="22.1716%" y="229" width="15.7035%" height="15" fill="rgb(205,185,37)"/><text x="22.4216%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (6,211,008 samples, 15.70%)</title><rect x="22.1799%" y="213" width="15.6951%" height="15" fill="rgb(238,207,15)"/><text x="22.4299%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (6,201,408 samples, 15.67%)</title><rect x="22.2042%" y="197" width="15.6709%" height="15" fill="rgb(213,199,42)"/><text x="22.4542%" y="207.50">typeck</text></g><g><title>layout_of (96,411 samples, 0.24%)</title><rect x="38.0778%" y="165" width="0.2436%" height="15" fill="rgb(235,201,11)"/><text x="38.3278%" y="175.50"></text></g><g><title>layout_of (143,302 samples, 0.36%)</title><rect x="37.9889%" y="181" width="0.3621%" height="15" fill="rgb(207,46,11)"/><text x="38.2389%" y="191.50"></text></g><g><title>layout_of (181,482 samples, 0.46%)</title><rect x="37.9067%" y="197" width="0.4586%" height="15" fill="rgb(241,35,35)"/><text x="38.1567%" y="207.50"></text></g><g><title>adt_def (233,223 samples, 0.59%)</title><rect x="39.2823%" y="133" width="0.5894%" height="15" fill="rgb(243,32,47)"/><text x="39.5323%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (232,503 samples, 0.59%)</title><rect x="39.2841%" y="117" width="0.5875%" height="15" fill="rgb(247,202,23)"/><text x="39.5341%" y="127.50"></text></g><g><title>adt_def (49,781 samples, 0.13%)</title><rect x="39.9058%" y="117" width="0.1258%" height="15" fill="rgb(219,102,11)"/><text x="40.1558%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (49,181 samples, 0.12%)</title><rect x="39.9073%" y="101" width="0.1243%" height="15" fill="rgb(243,110,44)"/><text x="40.1573%" y="111.50"></text></g><g><title>item_attrs (44,221 samples, 0.11%)</title><rect x="39.9198%" y="85" width="0.1117%" height="15" fill="rgb(222,74,54)"/><text x="40.1698%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (43,681 samples, 0.11%)</title><rect x="39.9212%" y="69" width="0.1104%" height="15" fill="rgb(216,99,12)"/><text x="40.1712%" y="79.50"></text></g><g><title>impl_parent (137,970 samples, 0.35%)</title><rect x="40.5480%" y="53" width="0.3486%" height="15" fill="rgb(226,22,26)"/><text x="40.7980%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (93,980 samples, 0.24%)</title><rect x="40.6591%" y="37" width="0.2375%" height="15" fill="rgb(217,163,10)"/><text x="40.9091%" y="47.50"></text></g><g><title>impl_trait_ref (561,354 samples, 1.42%)</title><rect x="40.8966%" y="53" width="1.4185%" height="15" fill="rgb(213,25,53)"/><text x="41.1466%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (516,024 samples, 1.30%)</title><rect x="41.0112%" y="37" width="1.3040%" height="15" fill="rgb(252,105,26)"/><text x="41.2612%" y="47.50"></text></g><g><title>coherent_trait (959,701 samples, 2.43%)</title><rect x="40.0496%" y="85" width="2.4252%" height="15" fill="rgb(220,39,43)"/><text x="40.2996%" y="95.50">co..</text></g><g><title>specialization_graph_of (954,430 samples, 2.41%)</title><rect x="40.0629%" y="69" width="2.4118%" height="15" fill="rgb(229,68,48)"/><text x="40.3129%" y="79.50">sp..</text></g><g><title>trait_impls_of (63,141 samples, 0.16%)</title><rect x="42.3152%" y="53" width="0.1596%" height="15" fill="rgb(252,8,32)"/><text x="42.5652%" y="63.50"></text></g><g><title>adt_destructor (975,541 samples, 2.47%)</title><rect x="40.0316%" y="117" width="2.4652%" height="15" fill="rgb(223,20,43)"/><text x="40.2816%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (974,401 samples, 2.46%)</title><rect x="40.0344%" y="101" width="2.4623%" height="15" fill="rgb(229,81,49)"/><text x="40.2844%" y="111.50">me..</text></g><g><title>adt_dtorck_constraint (1,043,842 samples, 2.64%)</title><rect x="39.8816%" y="133" width="2.6378%" height="15" fill="rgb(236,28,36)"/><text x="40.1316%" y="143.50">ad..</text></g><g><title>adt_dtorck_constraint (1,318,015 samples, 3.33%)</title><rect x="39.2507%" y="149" width="3.3306%" height="15" fill="rgb(249,185,26)"/><text x="39.5007%" y="159.50">adt..</text></g><g><title>dropck_outlives (1,365,055 samples, 3.45%)</title><rect x="39.1519%" y="181" width="3.4495%" height="15" fill="rgb(249,174,33)"/><text x="39.4019%" y="191.50">dro..</text></g><g><title>adt_dtorck_constraint (1,342,435 samples, 3.39%)</title><rect x="39.2091%" y="165" width="3.3923%" height="15" fill="rgb(233,201,37)"/><text x="39.4591%" y="175.50">adt..</text></g><g><title>item_types_checking (1,986,322 samples, 5.02%)</title><rect x="37.8751%" y="229" width="5.0194%" height="15" fill="rgb(221,78,26)"/><text x="38.1251%" y="239.50">item_t..</text></g><g><title>check_mod_item_types (1,982,822 samples, 5.01%)</title><rect x="37.8839%" y="213" width="5.0106%" height="15" fill="rgb(250,127,30)"/><text x="38.1339%" y="223.50">check_..</text></g><g><title>typeck (1,792,340 samples, 4.53%)</title><rect x="38.3653%" y="197" width="4.5292%" height="15" fill="rgb(230,49,44)"/><text x="38.6153%" y="207.50">typeck</text></g><g><title>fn_sig (96,201 samples, 0.24%)</title><rect x="43.0620%" y="197" width="0.2431%" height="15" fill="rgb(229,67,23)"/><text x="43.3120%" y="207.50"></text></g><g><title>named_region_map (124,601 samples, 0.31%)</title><rect x="43.4553%" y="181" width="0.3149%" height="15" fill="rgb(249,83,47)"/><text x="43.7053%" y="191.50"></text></g><g><title>resolve_lifetimes (112,461 samples, 0.28%)</title><rect x="43.4860%" y="165" width="0.2842%" height="15" fill="rgb(215,43,3)"/><text x="43.7360%" y="175.50"></text></g><g><title>generics_of (192,042 samples, 0.49%)</title><rect x="43.3051%" y="197" width="0.4853%" height="15" fill="rgb(238,154,13)"/><text x="43.5551%" y="207.50"></text></g><g><title>predicates_of (44,991 samples, 0.11%)</title><rect x="43.7904%" y="197" width="0.1137%" height="15" fill="rgb(219,56,2)"/><text x="44.0404%" y="207.50"></text></g><g><title>type_collecting (437,735 samples, 1.11%)</title><rect x="42.8999%" y="229" width="1.1062%" height="15" fill="rgb(233,0,4)"/><text x="43.1499%" y="239.50"></text></g><g><title>collect_mod_item_types (427,555 samples, 1.08%)</title><rect x="42.9257%" y="213" width="1.0804%" height="15" fill="rgb(235,30,7)"/><text x="43.1757%" y="223.50"></text></g><g><title>type_of (40,380 samples, 0.10%)</title><rect x="43.9041%" y="197" width="0.1020%" height="15" fill="rgb(250,79,13)"/><text x="44.1541%" y="207.50"></text></g><g><title>adt_sized_constraint (57,371 samples, 0.14%)</title><rect x="45.7096%" y="165" width="0.1450%" height="15" fill="rgb(211,146,34)"/><text x="45.9596%" y="175.50"></text></g><g><title>adt_def (56,181 samples, 0.14%)</title><rect x="45.7126%" y="149" width="0.1420%" height="15" fill="rgb(228,22,38)"/><text x="45.9626%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (55,621 samples, 0.14%)</title><rect x="45.7140%" y="133" width="0.1406%" height="15" fill="rgb(235,168,5)"/><text x="45.9640%" y="143.50"></text></g><g><title>item_attrs (52,131 samples, 0.13%)</title><rect x="45.7228%" y="117" width="0.1317%" height="15" fill="rgb(221,155,16)"/><text x="45.9728%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (51,491 samples, 0.13%)</title><rect x="45.7244%" y="101" width="0.1301%" height="15" fill="rgb(215,215,53)"/><text x="45.9744%" y="111.50"></text></g><g><title>adt_sized_constraint (109,272 samples, 0.28%)</title><rect x="45.5965%" y="181" width="0.2761%" height="15" fill="rgb(223,4,10)"/><text x="45.8465%" y="191.50"></text></g><g><title>evaluate_obligation (290,483 samples, 0.73%)</title><rect x="45.3675%" y="197" width="0.7340%" height="15" fill="rgb(234,103,6)"/><text x="45.6175%" y="207.50"></text></g><g><title>trait_impls_of (68,751 samples, 0.17%)</title><rect x="45.9278%" y="181" width="0.1737%" height="15" fill="rgb(227,97,0)"/><text x="46.1778%" y="191.50"></text></g><g><title>implied_outlives_bounds (132,962 samples, 0.34%)</title><rect x="46.1015%" y="197" width="0.3360%" height="15" fill="rgb(234,150,53)"/><text x="46.3515%" y="207.50"></text></g><g><title>param_env (210,442 samples, 0.53%)</title><rect x="46.4387%" y="197" width="0.5318%" height="15" fill="rgb(228,201,54)"/><text x="46.6887%" y="207.50"></text></g><g><title>region_scope_tree (40,860 samples, 0.10%)</title><rect x="47.0687%" y="197" width="0.1033%" height="15" fill="rgb(222,22,37)"/><text x="47.3187%" y="207.50"></text></g><g><title>analysis (18,156,581 samples, 45.88%)</title><rect x="1.2920%" y="261" width="45.8815%" height="15" fill="rgb(237,53,32)"/><text x="1.5420%" y="271.50">analysis</text></g><g><title>type_check_crate (9,976,501 samples, 25.21%)</title><rect x="21.9630%" y="245" width="25.2105%" height="15" fill="rgb(233,25,53)"/><text x="22.2130%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,252,324 samples, 3.16%)</title><rect x="44.0088%" y="229" width="3.1646%" height="15" fill="rgb(210,40,34)"/><text x="44.2588%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (1,222,404 samples, 3.09%)</title><rect x="44.0845%" y="213" width="3.0890%" height="15" fill="rgb(241,220,44)"/><text x="44.3345%" y="223.50">che..</text></g><g><title>native_libraries (47,491 samples, 0.12%)</title><rect x="49.3682%" y="245" width="0.1200%" height="15" fill="rgb(235,28,35)"/><text x="49.6182%" y="255.50"></text></g><g><title>codegen_crate (937,370 samples, 2.37%)</title><rect x="47.1901%" y="261" width="2.3687%" height="15" fill="rgb(210,56,17)"/><text x="47.4401%" y="271.50">co..</text></g><g><title>crate_injection (53,920 samples, 0.14%)</title><rect x="50.0890%" y="245" width="0.1363%" height="15" fill="rgb(224,130,29)"/><text x="50.3390%" y="255.50"></text></g><g><title>metadata_load_macro (182,001 samples, 0.46%)</title><rect x="76.0724%" y="213" width="0.4599%" height="15" fill="rgb(235,212,8)"/><text x="76.3224%" y="223.50"></text></g><g><title>macro_expand_crate (12,015,163 samples, 30.36%)</title><rect x="50.2252%" y="245" width="30.3622%" height="15" fill="rgb(223,33,50)"/><text x="50.4752%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (11,994,993 samples, 30.31%)</title><rect x="50.2762%" y="229" width="30.3112%" height="15" fill="rgb(219,149,13)"/><text x="50.5262%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (1,604,708 samples, 4.06%)</title><rect x="76.5323%" y="213" width="4.0551%" height="15" fill="rgb(250,156,29)"/><text x="76.7823%" y="223.50">meta..</text></g><g><title>metadata_register_crate (584,196 samples, 1.48%)</title><rect x="79.1111%" y="197" width="1.4763%" height="15" fill="rgb(216,193,19)"/><text x="79.3611%" y="207.50"></text></g><g><title>metadata_register_crate (47,040 samples, 0.12%)</title><rect x="80.4685%" y="181" width="0.1189%" height="15" fill="rgb(216,135,14)"/><text x="80.7185%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (45,090 samples, 0.11%)</title><rect x="80.5986%" y="245" width="0.1139%" height="15" fill="rgb(241,47,5)"/><text x="80.8486%" y="255.50"></text></g><g><title>finalize_imports (283,043 samples, 0.72%)</title><rect x="80.7335%" y="229" width="0.7152%" height="15" fill="rgb(233,42,35)"/><text x="80.9835%" y="239.50"></text></g><g><title>late_resolve_crate (664,757 samples, 1.68%)</title><rect x="81.5177%" y="229" width="1.6798%" height="15" fill="rgb(231,13,6)"/><text x="81.7677%" y="239.50"></text></g><g><title>configure_and_expand (13,359,827 samples, 33.76%)</title><rect x="49.5588%" y="261" width="33.7601%" height="15" fill="rgb(207,181,40)"/><text x="49.8088%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,031,431 samples, 2.61%)</title><rect x="80.7125%" y="245" width="2.6064%" height="15" fill="rgb(254,173,49)"/><text x="80.9625%" y="255.50">re..</text></g><g><title>drop_ast (39,710 samples, 0.10%)</title><rect x="83.3190%" y="261" width="0.1003%" height="15" fill="rgb(221,1,38)"/><text x="83.5690%" y="271.50"></text></g><g><title>early_lint_checks (94,011 samples, 0.24%)</title><rect x="83.5012%" y="261" width="0.2376%" height="15" fill="rgb(206,124,46)"/><text x="83.7512%" y="271.50"></text></g><g><title>free_global_ctxt (3,279,766 samples, 8.29%)</title><rect x="83.7388%" y="261" width="8.2879%" height="15" fill="rgb(249,21,11)"/><text x="83.9888%" y="271.50">free_global_..</text></g><g><title>crate_hash (123,822 samples, 0.31%)</title><rect x="92.8934%" y="245" width="0.3129%" height="15" fill="rgb(222,201,40)"/><text x="93.1434%" y="255.50"></text></g><g><title>generate_crate_metadata (554,266 samples, 1.40%)</title><rect x="92.0267%" y="261" width="1.4006%" height="15" fill="rgb(235,61,29)"/><text x="92.2767%" y="271.50"></text></g><g><title>hir_lowering (488,176 samples, 1.23%)</title><rect x="93.4274%" y="261" width="1.2336%" height="15" fill="rgb(219,207,3)"/><text x="93.6774%" y="271.50"></text></g><g><title>link (86,711 samples, 0.22%)</title><rect x="94.6610%" y="261" width="0.2191%" height="15" fill="rgb(222,56,46)"/><text x="94.9110%" y="271.50"></text></g><g><title>parse_crate (443,825 samples, 1.12%)</title><rect x="94.8801%" y="261" width="1.1215%" height="15" fill="rgb(239,76,54)"/><text x="95.1301%" y="271.50"></text></g><g><title>prepare_outputs (268,173 samples, 0.68%)</title><rect x="96.0180%" y="261" width="0.6777%" height="15" fill="rgb(231,124,27)"/><text x="96.2680%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (699,428 samples, 1.77%)</title><rect x="96.6956%" y="261" width="1.7674%" height="15" fill="rgb(249,195,6)"/><text x="96.9456%" y="271.50"></text></g><g><title>setup_global_ctxt (134,311 samples, 0.34%)</title><rect x="98.5201%" y="261" width="0.3394%" height="15" fill="rgb(237,174,47)"/><text x="98.7701%" y="271.50"></text></g><g><title>all (39,572,797 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(206,201,31)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (39,572,797 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(231,57,52)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (451,325 samples, 1.14%)</title><rect x="98.8595%" y="261" width="1.1405%" height="15" fill="rgb(248,177,22)"/><text x="99.1095%" y="271.50"></text></g></svg></svg>