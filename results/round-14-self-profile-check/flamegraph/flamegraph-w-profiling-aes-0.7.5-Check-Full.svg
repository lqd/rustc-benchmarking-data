<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (3,621,740 samples, 0.83%)</title><rect x="12.7397%" y="133" width="0.8308%" height="15" fill="rgb(227,0,7)"/><text x="12.9897%" y="143.50"></text></g><g><title>mir_const_qualif_const_arg (3,020,926 samples, 0.69%)</title><rect x="12.8776%" y="117" width="0.6930%" height="15" fill="rgb(217,0,24)"/><text x="13.1276%" y="127.50"></text></g><g><title>mir_const (2,548,490 samples, 0.58%)</title><rect x="12.9859%" y="101" width="0.5846%" height="15" fill="rgb(221,193,54)"/><text x="13.2359%" y="111.50"></text></g><g><title>unsafety_check_result_for_const_arg (1,701,810 samples, 0.39%)</title><rect x="13.1802%" y="85" width="0.3904%" height="15" fill="rgb(248,212,6)"/><text x="13.4302%" y="95.50"></text></g><g><title>mir_built (1,465,899 samples, 0.34%)</title><rect x="13.2343%" y="69" width="0.3363%" height="15" fill="rgb(208,68,35)"/><text x="13.4843%" y="79.50"></text></g><g><title>mir_borrowck_const_arg (9,151,812 samples, 2.10%)</title><rect x="11.4773%" y="149" width="2.0994%" height="15" fill="rgb(232,128,0)"/><text x="11.7273%" y="159.50">m..</text></g><g><title>is_copy_raw (447,499 samples, 0.10%)</title><rect x="18.4110%" y="85" width="0.1027%" height="15" fill="rgb(207,160,47)"/><text x="18.6610%" y="95.50"></text></g><g><title>needs_drop_raw (977,770 samples, 0.22%)</title><rect x="18.5137%" y="85" width="0.2243%" height="15" fill="rgb(228,23,34)"/><text x="18.7637%" y="95.50"></text></g><g><title>is_copy_raw (676,487 samples, 0.16%)</title><rect x="18.5828%" y="69" width="0.1552%" height="15" fill="rgb(218,30,26)"/><text x="18.8328%" y="79.50"></text></g><g><title>evaluate_obligation (599,716 samples, 0.14%)</title><rect x="18.6004%" y="53" width="0.1376%" height="15" fill="rgb(220,122,19)"/><text x="18.8504%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (551,189 samples, 0.13%)</title><rect x="18.8329%" y="69" width="0.1264%" height="15" fill="rgb(250,228,42)"/><text x="19.0829%" y="79.50"></text></g><g><title>specialization_graph_of (2,201,681 samples, 0.51%)</title><rect x="18.9753%" y="69" width="0.5051%" height="15" fill="rgb(240,193,28)"/><text x="19.2253%" y="79.50"></text></g><g><title>impl_trait_ref (890,499 samples, 0.20%)</title><rect x="19.2761%" y="53" width="0.2043%" height="15" fill="rgb(216,20,37)"/><text x="19.5261%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (736,587 samples, 0.17%)</title><rect x="19.3114%" y="37" width="0.1690%" height="15" fill="rgb(206,188,39)"/><text x="19.5614%" y="47.50"></text></g><g><title>resolve_instance (3,376,597 samples, 0.77%)</title><rect x="18.7380%" y="85" width="0.7746%" height="15" fill="rgb(217,207,13)"/><text x="18.9880%" y="95.50"></text></g><g><title>thir_body (6,011,938 samples, 1.38%)</title><rect x="19.5241%" y="85" width="1.3791%" height="15" fill="rgb(231,73,38)"/><text x="19.7741%" y="95.50"></text></g><g><title>mir_const (29,129,999 samples, 6.68%)</title><rect x="14.2284%" y="133" width="6.6822%" height="15" fill="rgb(225,20,46)"/><text x="14.4784%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (26,171,754 samples, 6.00%)</title><rect x="14.9070%" y="117" width="6.0036%" height="15" fill="rgb(210,31,41)"/><text x="15.1570%" y="127.50">unsafety..</text></g><g><title>mir_built (23,972,047 samples, 5.50%)</title><rect x="15.4116%" y="101" width="5.4990%" height="15" fill="rgb(221,200,47)"/><text x="15.6616%" y="111.50">mir_bui..</text></g><g><title>mir_const (461,586 samples, 0.11%)</title><rect x="21.0071%" y="117" width="0.1059%" height="15" fill="rgb(226,26,5)"/><text x="21.2571%" y="127.50"></text></g><g><title>mir_promoted (32,877,327 samples, 7.54%)</title><rect x="13.5767%" y="149" width="7.5418%" height="15" fill="rgb(249,33,26)"/><text x="13.8267%" y="159.50">mir_promot..</text></g><g><title>mir_const_qualif (906,180 samples, 0.21%)</title><rect x="20.9107%" y="133" width="0.2079%" height="15" fill="rgb(235,183,28)"/><text x="21.1607%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,445,134 samples, 0.33%)</title><rect x="21.1712%" y="149" width="0.3315%" height="15" fill="rgb(221,5,38)"/><text x="21.4212%" y="159.50"></text></g><g><title>normalize_projection_ty (961,492 samples, 0.22%)</title><rect x="21.2822%" y="133" width="0.2206%" height="15" fill="rgb(247,18,42)"/><text x="21.5322%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,022,205 samples, 0.46%)</title><rect x="21.5110%" y="149" width="0.4639%" height="15" fill="rgb(241,131,45)"/><text x="21.7610%" y="159.50"></text></g><g><title>MIR_borrow_checking (92,809,307 samples, 21.29%)</title><rect x="0.6867%" y="181" width="21.2898%" height="15" fill="rgb(249,31,29)"/><text x="0.9367%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (92,304,124 samples, 21.17%)</title><rect x="0.8026%" y="165" width="21.1739%" height="15" fill="rgb(225,111,53)"/><text x="1.0526%" y="175.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (1,482,597 samples, 0.34%)</title><rect x="22.1460%" y="149" width="0.3401%" height="15" fill="rgb(238,160,17)"/><text x="22.3960%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,799,941 samples, 0.41%)</title><rect x="22.0738%" y="165" width="0.4129%" height="15" fill="rgb(214,148,48)"/><text x="22.3238%" y="175.50"></text></g><g><title>MIR_effect_checking (2,273,065 samples, 0.52%)</title><rect x="21.9765%" y="181" width="0.5214%" height="15" fill="rgb(232,36,49)"/><text x="22.2265%" y="191.50"></text></g><g><title>hir_module_items (634,187 samples, 0.15%)</title><rect x="22.4979%" y="181" width="0.1455%" height="15" fill="rgb(209,103,24)"/><text x="22.7479%" y="191.50"></text></g><g><title>codegen_fn_attrs (698,799 samples, 0.16%)</title><rect x="22.8771%" y="149" width="0.1603%" height="15" fill="rgb(229,88,8)"/><text x="23.1271%" y="159.50"></text></g><g><title>check_mod_attrs (1,665,287 samples, 0.38%)</title><rect x="22.6554%" y="165" width="0.3820%" height="15" fill="rgb(213,181,19)"/><text x="22.9054%" y="175.50"></text></g><g><title>param_env (469,315 samples, 0.11%)</title><rect x="23.3662%" y="149" width="0.1077%" height="15" fill="rgb(254,191,54)"/><text x="23.6162%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,345,897 samples, 0.31%)</title><rect x="23.1854%" y="165" width="0.3087%" height="15" fill="rgb(241,83,37)"/><text x="23.4354%" y="175.50"></text></g><g><title>misc_checking_1 (3,834,942 samples, 0.88%)</title><rect x="22.6435%" y="181" width="0.8797%" height="15" fill="rgb(233,36,39)"/><text x="22.8935%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,090,222 samples, 0.48%)</title><rect x="23.5236%" y="165" width="0.4795%" height="15" fill="rgb(226,3,54)"/><text x="23.7736%" y="175.50"></text></g><g><title>check_mod_liveness (1,666,945 samples, 0.38%)</title><rect x="23.6207%" y="149" width="0.3824%" height="15" fill="rgb(245,192,40)"/><text x="23.8707%" y="159.50"></text></g><g><title>misc_checking_2 (4,244,236 samples, 0.97%)</title><rect x="23.5232%" y="181" width="0.9736%" height="15" fill="rgb(238,167,29)"/><text x="23.7732%" y="191.50"></text></g><g><title>match_checking (2,152,364 samples, 0.49%)</title><rect x="24.0031%" y="165" width="0.4937%" height="15" fill="rgb(232,182,51)"/><text x="24.2531%" y="175.50"></text></g><g><title>check_match (2,022,521 samples, 0.46%)</title><rect x="24.0329%" y="149" width="0.4640%" height="15" fill="rgb(231,60,39)"/><text x="24.2829%" y="159.50"></text></g><g><title>check_private_in_public (576,176 samples, 0.13%)</title><rect x="24.4993%" y="165" width="0.1322%" height="15" fill="rgb(208,69,12)"/><text x="24.7493%" y="175.50"></text></g><g><title>death_checking (1,193,303 samples, 0.27%)</title><rect x="24.6315%" y="165" width="0.2737%" height="15" fill="rgb(235,93,37)"/><text x="24.8815%" y="175.50"></text></g><g><title>param_env (1,150,222 samples, 0.26%)</title><rect x="25.4122%" y="133" width="0.2639%" height="15" fill="rgb(213,116,39)"/><text x="25.6622%" y="143.50"></text></g><g><title>predicates_of (626,416 samples, 0.14%)</title><rect x="25.5324%" y="117" width="0.1437%" height="15" fill="rgb(222,207,29)"/><text x="25.7824%" y="127.50"></text></g><g><title>predicates_defined_on (547,655 samples, 0.13%)</title><rect x="25.5504%" y="101" width="0.1256%" height="15" fill="rgb(206,96,30)"/><text x="25.8004%" y="111.50"></text></g><g><title>crate_lints (4,125,946 samples, 0.95%)</title><rect x="24.9058%" y="149" width="0.9465%" height="15" fill="rgb(218,138,4)"/><text x="25.1558%" y="159.50"></text></g><g><title>type_of (476,826 samples, 0.11%)</title><rect x="25.7429%" y="133" width="0.1094%" height="15" fill="rgb(250,191,14)"/><text x="25.9929%" y="143.50"></text></g><g><title>lint_checking (6,688,284 samples, 1.53%)</title><rect x="24.9052%" y="165" width="1.5342%" height="15" fill="rgb(239,60,40)"/><text x="25.1552%" y="175.50"></text></g><g><title>module_lints (2,559,678 samples, 0.59%)</title><rect x="25.8523%" y="149" width="0.5872%" height="15" fill="rgb(206,27,48)"/><text x="26.1023%" y="159.50"></text></g><g><title>lint_mod (2,545,738 samples, 0.58%)</title><rect x="25.8555%" y="133" width="0.5840%" height="15" fill="rgb(225,35,8)"/><text x="26.1055%" y="143.50"></text></g><g><title>privacy_access_levels (623,357 samples, 0.14%)</title><rect x="26.4395%" y="165" width="0.1430%" height="15" fill="rgb(250,213,24)"/><text x="26.6895%" y="175.50"></text></g><g><title>privacy_checking_modules (3,303,366 samples, 0.76%)</title><rect x="26.5824%" y="165" width="0.7578%" height="15" fill="rgb(247,123,22)"/><text x="26.8324%" y="175.50"></text></g><g><title>check_mod_privacy (3,294,246 samples, 0.76%)</title><rect x="26.5845%" y="149" width="0.7557%" height="15" fill="rgb(231,138,38)"/><text x="26.8345%" y="159.50"></text></g><g><title>misc_checking_3 (12,424,187 samples, 2.85%)</title><rect x="24.4968%" y="181" width="2.8500%" height="15" fill="rgb(231,145,46)"/><text x="24.7468%" y="191.50">mi..</text></g><g><title>impl_parent (559,155 samples, 0.13%)</title><rect x="27.6725%" y="117" width="0.1283%" height="15" fill="rgb(251,118,11)"/><text x="27.9225%" y="127.50"></text></g><g><title>impl_trait_ref (1,422,786 samples, 0.33%)</title><rect x="27.8008%" y="117" width="0.3264%" height="15" fill="rgb(217,147,25)"/><text x="28.0508%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,210,124 samples, 0.28%)</title><rect x="27.8496%" y="101" width="0.2776%" height="15" fill="rgb(247,81,37)"/><text x="28.0996%" y="111.50"></text></g><g><title>coherent_trait (3,347,897 samples, 0.77%)</title><rect x="27.4092%" y="149" width="0.7680%" height="15" fill="rgb(209,12,38)"/><text x="27.6592%" y="159.50"></text></g><g><title>specialization_graph_of (3,015,753 samples, 0.69%)</title><rect x="27.4854%" y="133" width="0.6918%" height="15" fill="rgb(227,1,9)"/><text x="27.7354%" y="143.50"></text></g><g><title>coherence_checking (3,489,678 samples, 0.80%)</title><rect x="27.4058%" y="165" width="0.8005%" height="15" fill="rgb(248,47,43)"/><text x="27.6558%" y="175.50"></text></g><g><title>associated_item (625,568 samples, 0.14%)</title><rect x="58.5047%" y="101" width="0.1435%" height="15" fill="rgb(221,10,30)"/><text x="58.7547%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (549,637 samples, 0.13%)</title><rect x="58.5222%" y="85" width="0.1261%" height="15" fill="rgb(210,229,1)"/><text x="58.7722%" y="95.50"></text></g><g><title>associated_items (800,851 samples, 0.18%)</title><rect x="58.4717%" y="117" width="0.1837%" height="15" fill="rgb(222,148,37)"/><text x="58.7217%" y="127.50"></text></g><g><title>dropck_outlives (552,743 samples, 0.13%)</title><rect x="58.6751%" y="117" width="0.1268%" height="15" fill="rgb(234,67,33)"/><text x="58.9251%" y="127.50"></text></g><g><title>mir_borrowck (615,616 samples, 0.14%)</title><rect x="59.0003%" y="53" width="0.1412%" height="15" fill="rgb(247,98,35)"/><text x="59.2503%" y="63.50"></text></g><g><title>mir_for_ctfe (868,639 samples, 0.20%)</title><rect x="58.9428%" y="85" width="0.1993%" height="15" fill="rgb(247,138,52)"/><text x="59.1928%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (804,939 samples, 0.18%)</title><rect x="58.9574%" y="69" width="0.1846%" height="15" fill="rgb(213,79,30)"/><text x="59.2074%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,634,389 samples, 0.37%)</title><rect x="58.8019%" y="117" width="0.3749%" height="15" fill="rgb(246,177,23)"/><text x="59.0519%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,619,279 samples, 0.37%)</title><rect x="58.8054%" y="101" width="0.3715%" height="15" fill="rgb(230,62,27)"/><text x="59.0554%" y="111.50"></text></g><g><title>mir_for_ctfe (736,820 samples, 0.17%)</title><rect x="61.0123%" y="53" width="0.1690%" height="15" fill="rgb(216,154,8)"/><text x="61.2623%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (728,990 samples, 0.17%)</title><rect x="61.0141%" y="37" width="0.1672%" height="15" fill="rgb(244,35,45)"/><text x="61.2641%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,578,856 samples, 0.36%)</title><rect x="60.8258%" y="101" width="0.3622%" height="15" fill="rgb(251,115,12)"/><text x="61.0758%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,537,626 samples, 0.35%)</title><rect x="60.8353%" y="85" width="0.3527%" height="15" fill="rgb(240,54,50)"/><text x="61.0853%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,499,346 samples, 0.34%)</title><rect x="60.8440%" y="69" width="0.3439%" height="15" fill="rgb(233,84,52)"/><text x="61.0940%" y="79.50"></text></g><g><title>generics_of (1,422,083 samples, 0.33%)</title><rect x="61.1880%" y="101" width="0.3262%" height="15" fill="rgb(207,117,47)"/><text x="61.4380%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,074,922 samples, 0.25%)</title><rect x="61.2676%" y="85" width="0.2466%" height="15" fill="rgb(249,43,39)"/><text x="61.5176%" y="95.50"></text></g><g><title>impl_trait_ref (1,753,185 samples, 0.40%)</title><rect x="61.5781%" y="101" width="0.4022%" height="15" fill="rgb(209,38,44)"/><text x="61.8281%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,410,334 samples, 0.32%)</title><rect x="61.6567%" y="85" width="0.3235%" height="15" fill="rgb(236,212,23)"/><text x="61.9067%" y="95.50"></text></g><g><title>predicates_of (1,387,643 samples, 0.32%)</title><rect x="62.0011%" y="101" width="0.3183%" height="15" fill="rgb(242,79,21)"/><text x="62.2511%" y="111.50"></text></g><g><title>predicates_defined_on (886,399 samples, 0.20%)</title><rect x="62.1160%" y="85" width="0.2033%" height="15" fill="rgb(211,96,35)"/><text x="62.3660%" y="95.50"></text></g><g><title>specializes (3,033,132 samples, 0.70%)</title><rect x="62.3359%" y="101" width="0.6958%" height="15" fill="rgb(253,215,40)"/><text x="62.5859%" y="111.50"></text></g><g><title>param_env (1,764,830 samples, 0.40%)</title><rect x="62.6268%" y="85" width="0.4048%" height="15" fill="rgb(211,81,21)"/><text x="62.8768%" y="95.50"></text></g><g><title>def_span (793,684 samples, 0.18%)</title><rect x="62.8496%" y="69" width="0.1821%" height="15" fill="rgb(208,190,38)"/><text x="63.0996%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (707,703 samples, 0.16%)</title><rect x="62.8693%" y="53" width="0.1623%" height="15" fill="rgb(235,213,38)"/><text x="63.1193%" y="63.50"></text></g><g><title>trait_impls_of (571,644 samples, 0.13%)</title><rect x="63.0375%" y="101" width="0.1311%" height="15" fill="rgb(237,122,38)"/><text x="63.2875%" y="111.50"></text></g><g><title>evaluate_obligation (17,449,378 samples, 4.00%)</title><rect x="59.1768%" y="117" width="4.0028%" height="15" fill="rgb(244,218,35)"/><text x="59.4268%" y="127.50">eval..</text></g><g><title>generics_of (531,217 samples, 0.12%)</title><rect x="63.2409%" y="117" width="0.1219%" height="15" fill="rgb(240,68,47)"/><text x="63.4909%" y="127.50"></text></g><g><title>evaluate_obligation (1,324,676 samples, 0.30%)</title><rect x="68.7486%" y="85" width="0.3039%" height="15" fill="rgb(210,16,53)"/><text x="68.9986%" y="95.50"></text></g><g><title>opt_const_param_of (23,679,562 samples, 5.43%)</title><rect x="63.6938%" y="117" width="5.4319%" height="15" fill="rgb(235,124,12)"/><text x="63.9438%" y="127.50">opt_con..</text></g><g><title>typeck (23,449,569 samples, 5.38%)</title><rect x="63.7465%" y="101" width="5.3792%" height="15" fill="rgb(224,169,11)"/><text x="63.9965%" y="111.50">typeck</text></g><g><title>predicates_of (512,924 samples, 0.12%)</title><rect x="69.2056%" y="117" width="0.1177%" height="15" fill="rgb(250,166,2)"/><text x="69.4556%" y="127.50"></text></g><g><title>param_env (1,204,175 samples, 0.28%)</title><rect x="69.9660%" y="101" width="0.2762%" height="15" fill="rgb(242,216,29)"/><text x="70.2160%" y="111.50"></text></g><g><title>predicates_of (561,689 samples, 0.13%)</title><rect x="70.1134%" y="85" width="0.1288%" height="15" fill="rgb(230,116,27)"/><text x="70.3634%" y="95.50"></text></g><g><title>predicates_defined_on (455,299 samples, 0.10%)</title><rect x="70.1378%" y="69" width="0.1044%" height="15" fill="rgb(228,99,48)"/><text x="70.3878%" y="79.50"></text></g><g><title>typeck_const_arg (3,635,299 samples, 0.83%)</title><rect x="69.4673%" y="117" width="0.8339%" height="15" fill="rgb(253,11,6)"/><text x="69.7173%" y="127.50"></text></g><g><title>item_bodies_checking (183,562,351 samples, 42.11%)</title><rect x="28.2195%" y="165" width="42.1079%" height="15" fill="rgb(247,143,39)"/><text x="28.4695%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (183,558,511 samples, 42.11%)</title><rect x="28.2203%" y="149" width="42.1071%" height="15" fill="rgb(236,97,10)"/><text x="28.4703%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (183,236,638 samples, 42.03%)</title><rect x="28.2942%" y="133" width="42.0332%" height="15" fill="rgb(233,208,19)"/><text x="28.5442%" y="143.50">typeck</text></g><g><title>evaluate_obligation (621,407 samples, 0.14%)</title><rect x="70.9121%" y="133" width="0.1425%" height="15" fill="rgb(216,164,2)"/><text x="71.1621%" y="143.50"></text></g><g><title>item_types_checking (4,065,975 samples, 0.93%)</title><rect x="70.3274%" y="165" width="0.9327%" height="15" fill="rgb(220,129,5)"/><text x="70.5774%" y="175.50"></text></g><g><title>check_mod_item_types (4,053,205 samples, 0.93%)</title><rect x="70.3303%" y="149" width="0.9298%" height="15" fill="rgb(242,17,10)"/><text x="70.5803%" y="159.50"></text></g><g><title>typeck (575,627 samples, 0.13%)</title><rect x="71.1281%" y="133" width="0.1320%" height="15" fill="rgb(242,107,0)"/><text x="71.3781%" y="143.50"></text></g><g><title>named_region_map (1,451,548 samples, 0.33%)</title><rect x="71.5143%" y="117" width="0.3330%" height="15" fill="rgb(251,28,31)"/><text x="71.7643%" y="127.50"></text></g><g><title>resolve_lifetimes (1,398,597 samples, 0.32%)</title><rect x="71.5264%" y="101" width="0.3208%" height="15" fill="rgb(233,223,10)"/><text x="71.7764%" y="111.50"></text></g><g><title>lint_levels (660,708 samples, 0.15%)</title><rect x="71.6957%" y="85" width="0.1516%" height="15" fill="rgb(215,21,27)"/><text x="71.9457%" y="95.50"></text></g><g><title>generics_of (1,639,160 samples, 0.38%)</title><rect x="71.4757%" y="133" width="0.3760%" height="15" fill="rgb(232,23,21)"/><text x="71.7257%" y="143.50"></text></g><g><title>type_collecting (3,136,364 samples, 0.72%)</title><rect x="71.2622%" y="165" width="0.7195%" height="15" fill="rgb(244,5,23)"/><text x="71.5122%" y="175.50"></text></g><g><title>collect_mod_item_types (3,123,384 samples, 0.72%)</title><rect x="71.2652%" y="149" width="0.7165%" height="15" fill="rgb(226,81,46)"/><text x="71.5152%" y="159.50"></text></g><g><title>param_env (570,075 samples, 0.13%)</title><rect x="72.8008%" y="133" width="0.1308%" height="15" fill="rgb(247,70,30)"/><text x="73.0508%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,056,701 samples, 0.93%)</title><rect x="72.0924%" y="149" width="0.9306%" height="15" fill="rgb(212,68,19)"/><text x="72.3424%" y="159.50"></text></g><g><title>evaluate_obligation (1,209,190 samples, 0.28%)</title><rect x="73.5807%" y="133" width="0.2774%" height="15" fill="rgb(240,187,13)"/><text x="73.8307%" y="143.50"></text></g><g><title>param_env (458,316 samples, 0.11%)</title><rect x="73.9228%" y="133" width="0.1051%" height="15" fill="rgb(223,113,26)"/><text x="74.1728%" y="143.50"></text></g><g><title>region_scope_tree (1,480,290 samples, 0.34%)</title><rect x="74.0430%" y="133" width="0.3396%" height="15" fill="rgb(206,192,2)"/><text x="74.2930%" y="143.50"></text></g><g><title>analysis (322,450,886 samples, 73.97%)</title><rect x="0.4259%" y="197" width="73.9680%" height="15" fill="rgb(241,108,4)"/><text x="0.6759%" y="207.50">analysis</text></g><g><title>type_check_crate (205,093,419 samples, 47.05%)</title><rect x="27.3469%" y="181" width="47.0470%" height="15" fill="rgb(247,173,49)"/><text x="27.5969%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,486,716 samples, 2.41%)</title><rect x="71.9883%" y="165" width="2.4056%" height="15" fill="rgb(224,114,35)"/><text x="72.2383%" y="175.50">wf..</text></g><g><title>check_item_well_formed (5,976,327 samples, 1.37%)</title><rect x="73.0229%" y="149" width="1.3709%" height="15" fill="rgb(245,159,27)"/><text x="73.2729%" y="159.50"></text></g><g><title>AST_validation (506,696 samples, 0.12%)</title><rect x="74.5273%" y="181" width="0.1162%" height="15" fill="rgb(245,172,44)"/><text x="74.7773%" y="191.50"></text></g><g><title>metadata_load_macro (515,296 samples, 0.12%)</title><rect x="89.3420%" y="149" width="0.1182%" height="15" fill="rgb(236,23,11)"/><text x="89.5920%" y="159.50"></text></g><g><title>metadata_register_crate (657,377 samples, 0.15%)</title><rect x="89.4602%" y="149" width="0.1508%" height="15" fill="rgb(205,117,38)"/><text x="89.7102%" y="159.50"></text></g><g><title>macro_expand_crate (66,204,872 samples, 15.19%)</title><rect x="74.7162%" y="181" width="15.1869%" height="15" fill="rgb(237,72,25)"/><text x="74.9662%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (66,176,952 samples, 15.18%)</title><rect x="74.7226%" y="165" width="15.1805%" height="15" fill="rgb(244,70,9)"/><text x="74.9726%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,273,714 samples, 0.29%)</title><rect x="89.6110%" y="149" width="0.2922%" height="15" fill="rgb(217,125,39)"/><text x="89.8610%" y="159.50"></text></g><g><title>finalize_imports (1,402,125 samples, 0.32%)</title><rect x="89.9285%" y="165" width="0.3216%" height="15" fill="rgb(235,36,10)"/><text x="90.1785%" y="175.50"></text></g><g><title>late_resolve_crate (6,359,311 samples, 1.46%)</title><rect x="90.3248%" y="165" width="1.4588%" height="15" fill="rgb(251,123,47)"/><text x="90.5748%" y="175.50"></text></g><g><title>configure_and_expand (76,014,561 samples, 17.44%)</title><rect x="74.4833%" y="197" width="17.4372%" height="15" fill="rgb(221,13,13)"/><text x="74.7333%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (8,692,526 samples, 1.99%)</title><rect x="89.9265%" y="181" width="1.9940%" height="15" fill="rgb(238,131,9)"/><text x="90.1765%" y="191.50">r..</text></g><g><title>drop_ast (833,150 samples, 0.19%)</title><rect x="91.9205%" y="197" width="0.1911%" height="15" fill="rgb(211,50,8)"/><text x="92.1705%" y="207.50"></text></g><g><title>early_lint_checks (1,987,221 samples, 0.46%)</title><rect x="92.1161%" y="197" width="0.4559%" height="15" fill="rgb(245,182,24)"/><text x="92.3661%" y="207.50"></text></g><g><title>free_global_ctxt (4,704,352 samples, 1.08%)</title><rect x="92.5720%" y="197" width="1.0791%" height="15" fill="rgb(242,14,37)"/><text x="92.8220%" y="207.50"></text></g><g><title>mir_for_ctfe (583,594 samples, 0.13%)</title><rect x="96.0423%" y="181" width="0.1339%" height="15" fill="rgb(246,228,12)"/><text x="96.2923%" y="191.50"></text></g><g><title>generate_crate_metadata (11,289,256 samples, 2.59%)</title><rect x="93.6511%" y="197" width="2.5897%" height="15" fill="rgb(213,55,15)"/><text x="93.9011%" y="207.50">ge..</text></g><g><title>hir_lowering (12,420,208 samples, 2.85%)</title><rect x="96.2408%" y="197" width="2.8491%" height="15" fill="rgb(209,9,3)"/><text x="96.4908%" y="207.50">hi..</text></g><g><title>parse_crate (688,007 samples, 0.16%)</title><rect x="99.1057%" y="197" width="0.1578%" height="15" fill="rgb(230,59,30)"/><text x="99.3557%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,421,366 samples, 0.33%)</title><rect x="99.3160%" y="197" width="0.3261%" height="15" fill="rgb(209,121,21)"/><text x="99.5660%" y="207.50"></text></g><g><title>all (435,932,871 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (435,932,871 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,455,646 samples, 0.33%)</title><rect x="99.6661%" y="197" width="0.3339%" height="15" fill="rgb(215,41,42)"/><text x="99.9161%" y="207.50"></text></g></svg></svg>