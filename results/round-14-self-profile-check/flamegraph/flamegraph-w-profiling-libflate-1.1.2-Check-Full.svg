<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,093,190 samples, 0.17%)</title><rect x="16.6574%" y="101" width="0.1714%" height="15" fill="rgb(227,0,7)"/><text x="16.9074%" y="111.50"></text></g><g><title>item_attrs (969,569 samples, 0.15%)</title><rect x="17.4069%" y="69" width="0.1521%" height="15" fill="rgb(217,0,24)"/><text x="17.6569%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (933,088 samples, 0.15%)</title><rect x="17.4126%" y="53" width="0.1463%" height="15" fill="rgb(221,193,54)"/><text x="17.6626%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,337,873 samples, 0.21%)</title><rect x="17.3579%" y="85" width="0.2098%" height="15" fill="rgb(248,212,6)"/><text x="17.6079%" y="95.50"></text></g><g><title>adt_drop_tys (793,660 samples, 0.12%)</title><rect x="21.1329%" y="53" width="0.1245%" height="15" fill="rgb(208,68,35)"/><text x="21.3829%" y="63.50"></text></g><g><title>is_copy_raw (4,167,862 samples, 0.65%)</title><rect x="21.2574%" y="53" width="0.6536%" height="15" fill="rgb(232,128,0)"/><text x="21.5074%" y="63.50"></text></g><g><title>evaluate_obligation (3,334,107 samples, 0.52%)</title><rect x="21.3881%" y="37" width="0.5229%" height="15" fill="rgb(207,160,47)"/><text x="21.6381%" y="47.50"></text></g><g><title>needs_drop_raw (5,950,564 samples, 0.93%)</title><rect x="20.9783%" y="69" width="0.9332%" height="15" fill="rgb(228,23,34)"/><text x="21.2283%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,545,848 samples, 0.40%)</title><rect x="22.1091%" y="53" width="0.3993%" height="15" fill="rgb(218,30,26)"/><text x="22.3591%" y="63.50"></text></g><g><title>specialization_graph_of (1,198,073 samples, 0.19%)</title><rect x="22.5530%" y="53" width="0.1879%" height="15" fill="rgb(220,122,19)"/><text x="22.8030%" y="63.50"></text></g><g><title>resolve_instance (5,559,921 samples, 0.87%)</title><rect x="21.9164%" y="69" width="0.8720%" height="15" fill="rgb(250,228,42)"/><text x="22.1664%" y="79.50"></text></g><g><title>thir_body (8,296,256 samples, 1.30%)</title><rect x="22.8178%" y="69" width="1.3011%" height="15" fill="rgb(240,193,28)"/><text x="23.0678%" y="79.50"></text></g><g><title>mir_const (53,672,118 samples, 8.42%)</title><rect x="15.7231%" y="117" width="8.4173%" height="15" fill="rgb(216,20,37)"/><text x="15.9731%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (46,621,631 samples, 7.31%)</title><rect x="16.8289%" y="101" width="7.3116%" height="15" fill="rgb(206,188,39)"/><text x="17.0789%" y="111.50">unsafety_c..</text></g><g><title>mir_built (41,910,359 samples, 6.57%)</title><rect x="17.5677%" y="85" width="6.5728%" height="15" fill="rgb(217,207,13)"/><text x="17.8177%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (1,487,345 samples, 0.23%)</title><rect x="24.1405%" y="117" width="0.2333%" height="15" fill="rgb(231,73,38)"/><text x="24.3905%" y="127.50"></text></g><g><title>mir_const (891,610 samples, 0.14%)</title><rect x="24.2339%" y="101" width="0.1398%" height="15" fill="rgb(225,20,46)"/><text x="24.4839%" y="111.50"></text></g><g><title>unsafety_check_result (682,047 samples, 0.11%)</title><rect x="24.2668%" y="85" width="0.1070%" height="15" fill="rgb(210,31,41)"/><text x="24.5168%" y="95.50"></text></g><g><title>mir_promoted (61,198,677 samples, 9.60%)</title><rect x="14.7764%" y="133" width="9.5977%" height="15" fill="rgb(221,200,47)"/><text x="15.0264%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,298,791 samples, 0.52%)</title><rect x="24.3763%" y="133" width="0.5173%" height="15" fill="rgb(226,26,5)"/><text x="24.6263%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,549,184 samples, 0.56%)</title><rect x="24.8937%" y="133" width="0.5566%" height="15" fill="rgb(249,33,26)"/><text x="25.1437%" y="143.50"></text></g><g><title>normalize_projection_ty (2,477,705 samples, 0.39%)</title><rect x="25.0617%" y="117" width="0.3886%" height="15" fill="rgb(235,183,28)"/><text x="25.3117%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,943,012 samples, 0.30%)</title><rect x="25.4503%" y="133" width="0.3047%" height="15" fill="rgb(221,5,38)"/><text x="25.7003%" y="143.50"></text></g><g><title>normalize_projection_ty (1,189,895 samples, 0.19%)</title><rect x="25.5684%" y="117" width="0.1866%" height="15" fill="rgb(247,18,42)"/><text x="25.8184%" y="127.50"></text></g><g><title>type_op_prove_predicate (14,465,857 samples, 2.27%)</title><rect x="25.7705%" y="133" width="2.2687%" height="15" fill="rgb(241,131,45)"/><text x="26.0205%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (176,014,775 samples, 27.60%)</title><rect x="0.4381%" y="165" width="27.6042%" height="15" fill="rgb(249,31,29)"/><text x="0.6881%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (175,110,178 samples, 27.46%)</title><rect x="0.5800%" y="149" width="27.4624%" height="15" fill="rgb(225,111,53)"/><text x="0.8300%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (845,880 samples, 0.13%)</title><rect x="28.0423%" y="165" width="0.1327%" height="15" fill="rgb(238,160,17)"/><text x="28.2923%" y="175.50"></text></g><g><title>hir_module_items (1,101,592 samples, 0.17%)</title><rect x="28.1750%" y="165" width="0.1728%" height="15" fill="rgb(214,148,48)"/><text x="28.4250%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,130,072 samples, 0.18%)</title><rect x="28.5875%" y="133" width="0.1772%" height="15" fill="rgb(232,36,49)"/><text x="28.8375%" y="143.50"></text></g><g><title>should_inherit_track_caller (889,849 samples, 0.14%)</title><rect x="28.6252%" y="117" width="0.1396%" height="15" fill="rgb(209,103,24)"/><text x="28.8752%" y="127.50"></text></g><g><title>check_mod_attrs (2,603,238 samples, 0.41%)</title><rect x="28.3565%" y="149" width="0.4083%" height="15" fill="rgb(229,88,8)"/><text x="28.6065%" y="159.50"></text></g><g><title>check_mod_const_bodies (708,159 samples, 0.11%)</title><rect x="28.7648%" y="149" width="0.1111%" height="15" fill="rgb(213,181,19)"/><text x="29.0148%" y="159.50"></text></g><g><title>lookup_deprecation_entry (707,329 samples, 0.11%)</title><rect x="29.0620%" y="133" width="0.1109%" height="15" fill="rgb(254,191,54)"/><text x="29.3120%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,579,237 samples, 0.25%)</title><rect x="28.9490%" y="149" width="0.2477%" height="15" fill="rgb(241,83,37)"/><text x="29.1990%" y="159.50"></text></g><g><title>misc_checking_1 (5,588,882 samples, 0.88%)</title><rect x="28.3478%" y="165" width="0.8765%" height="15" fill="rgb(233,36,39)"/><text x="28.5978%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,228,386 samples, 0.51%)</title><rect x="29.2248%" y="149" width="0.5063%" height="15" fill="rgb(226,3,54)"/><text x="29.4748%" y="159.50"></text></g><g><title>check_mod_liveness (2,583,401 samples, 0.41%)</title><rect x="29.3260%" y="133" width="0.4052%" height="15" fill="rgb(245,192,40)"/><text x="29.5760%" y="143.50"></text></g><g><title>mir_borrowck (759,620 samples, 0.12%)</title><rect x="30.5431%" y="37" width="0.1191%" height="15" fill="rgb(238,167,29)"/><text x="30.7931%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,412,266 samples, 0.22%)</title><rect x="30.4415%" y="117" width="0.2215%" height="15" fill="rgb(232,182,51)"/><text x="30.6915%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,398,346 samples, 0.22%)</title><rect x="30.4437%" y="101" width="0.2193%" height="15" fill="rgb(231,60,39)"/><text x="30.6937%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,366,736 samples, 0.21%)</title><rect x="30.4487%" y="85" width="0.2143%" height="15" fill="rgb(208,69,12)"/><text x="30.6987%" y="95.50"></text></g><g><title>mir_for_ctfe (1,172,342 samples, 0.18%)</title><rect x="30.4791%" y="69" width="0.1839%" height="15" fill="rgb(235,93,37)"/><text x="30.7291%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,070,012 samples, 0.17%)</title><rect x="30.4952%" y="53" width="0.1678%" height="15" fill="rgb(213,116,39)"/><text x="30.7452%" y="63.50"></text></g><g><title>misc_checking_2 (9,912,800 samples, 1.55%)</title><rect x="29.2243%" y="165" width="1.5546%" height="15" fill="rgb(222,207,29)"/><text x="29.4743%" y="175.50"></text></g><g><title>match_checking (6,681,394 samples, 1.05%)</title><rect x="29.7311%" y="149" width="1.0478%" height="15" fill="rgb(206,96,30)"/><text x="29.9811%" y="159.50"></text></g><g><title>check_match (6,150,119 samples, 0.96%)</title><rect x="29.8144%" y="133" width="0.9645%" height="15" fill="rgb(218,138,4)"/><text x="30.0644%" y="143.50"></text></g><g><title>check_private_in_public (1,247,294 samples, 0.20%)</title><rect x="30.7808%" y="149" width="0.1956%" height="15" fill="rgb(250,191,14)"/><text x="31.0308%" y="159.50"></text></g><g><title>death_checking (2,241,465 samples, 0.35%)</title><rect x="30.9764%" y="149" width="0.3515%" height="15" fill="rgb(239,60,40)"/><text x="31.2264%" y="159.50"></text></g><g><title>eval_to_const_value_raw (683,287 samples, 0.11%)</title><rect x="31.7867%" y="117" width="0.1072%" height="15" fill="rgb(206,27,48)"/><text x="32.0367%" y="127.50"></text></g><g><title>eval_to_const_value_raw (661,557 samples, 0.10%)</title><rect x="31.7901%" y="101" width="0.1038%" height="15" fill="rgb(225,35,8)"/><text x="32.0401%" y="111.50"></text></g><g><title>crate_lints (5,727,394 samples, 0.90%)</title><rect x="31.3284%" y="133" width="0.8982%" height="15" fill="rgb(250,213,24)"/><text x="31.5784%" y="143.50"></text></g><g><title>type_of (1,223,270 samples, 0.19%)</title><rect x="32.0347%" y="117" width="0.1918%" height="15" fill="rgb(247,123,22)"/><text x="32.2847%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (981,437 samples, 0.15%)</title><rect x="32.0727%" y="101" width="0.1539%" height="15" fill="rgb(231,138,38)"/><text x="32.3227%" y="111.50"></text></g><g><title>lint_checking (9,316,214 samples, 1.46%)</title><rect x="31.3279%" y="149" width="1.4611%" height="15" fill="rgb(231,145,46)"/><text x="31.5779%" y="159.50"></text></g><g><title>module_lints (3,586,140 samples, 0.56%)</title><rect x="32.2266%" y="133" width="0.5624%" height="15" fill="rgb(251,118,11)"/><text x="32.4766%" y="143.50"></text></g><g><title>lint_mod (3,566,740 samples, 0.56%)</title><rect x="32.2296%" y="117" width="0.5594%" height="15" fill="rgb(217,147,25)"/><text x="32.4796%" y="127.50"></text></g><g><title>privacy_access_levels (1,548,077 samples, 0.24%)</title><rect x="32.7890%" y="149" width="0.2428%" height="15" fill="rgb(247,81,37)"/><text x="33.0390%" y="159.50"></text></g><g><title>privacy_checking_modules (6,002,327 samples, 0.94%)</title><rect x="33.0318%" y="149" width="0.9413%" height="15" fill="rgb(209,12,38)"/><text x="33.2818%" y="159.50"></text></g><g><title>check_mod_privacy (5,987,347 samples, 0.94%)</title><rect x="33.0341%" y="133" width="0.9390%" height="15" fill="rgb(227,1,9)"/><text x="33.2841%" y="143.50"></text></g><g><title>misc_checking_3 (20,424,227 samples, 3.20%)</title><rect x="30.7789%" y="165" width="3.2031%" height="15" fill="rgb(248,47,43)"/><text x="31.0289%" y="175.50">mis..</text></g><g><title>impl_parent (2,847,275 samples, 0.45%)</title><rect x="34.8242%" y="101" width="0.4465%" height="15" fill="rgb(221,10,30)"/><text x="35.0742%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,650,326 samples, 0.26%)</title><rect x="35.0119%" y="85" width="0.2588%" height="15" fill="rgb(210,229,1)"/><text x="35.2619%" y="95.50"></text></g><g><title>impl_trait_ref (6,401,275 samples, 1.00%)</title><rect x="35.2707%" y="101" width="1.0039%" height="15" fill="rgb(222,148,37)"/><text x="35.5207%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,818,346 samples, 0.76%)</title><rect x="35.5190%" y="85" width="0.7557%" height="15" fill="rgb(234,67,33)"/><text x="35.7690%" y="95.50"></text></g><g><title>trait_impls_of (1,030,163 samples, 0.16%)</title><rect x="36.2797%" y="101" width="0.1616%" height="15" fill="rgb(247,98,35)"/><text x="36.5297%" y="111.50"></text></g><g><title>coherent_trait (15,294,420 samples, 2.40%)</title><rect x="34.0428%" y="133" width="2.3986%" height="15" fill="rgb(247,138,52)"/><text x="34.2928%" y="143.50">co..</text></g><g><title>specialization_graph_of (14,800,914 samples, 2.32%)</title><rect x="34.1202%" y="117" width="2.3212%" height="15" fill="rgb(213,79,30)"/><text x="34.3702%" y="127.50">s..</text></g><g><title>coherence_checking (15,567,493 samples, 2.44%)</title><rect x="34.0376%" y="149" width="2.4414%" height="15" fill="rgb(246,177,23)"/><text x="34.2876%" y="159.50">co..</text></g><g><title>associated_items (883,634 samples, 0.14%)</title><rect x="55.7599%" y="101" width="0.1386%" height="15" fill="rgb(230,62,27)"/><text x="56.0099%" y="111.50"></text></g><g><title>dropck_outlives (1,589,090 samples, 0.25%)</title><rect x="55.9252%" y="101" width="0.2492%" height="15" fill="rgb(216,154,8)"/><text x="56.1752%" y="111.50"></text></g><g><title>adt_dtorck_constraint (660,768 samples, 0.10%)</title><rect x="56.0708%" y="85" width="0.1036%" height="15" fill="rgb(244,35,45)"/><text x="56.3208%" y="95.50"></text></g><g><title>eval_to_const_value_raw (654,958 samples, 0.10%)</title><rect x="56.1744%" y="101" width="0.1027%" height="15" fill="rgb(251,115,12)"/><text x="56.4244%" y="111.50"></text></g><g><title>generics_of (1,702,858 samples, 0.27%)</title><rect x="58.5834%" y="85" width="0.2671%" height="15" fill="rgb(240,54,50)"/><text x="58.8334%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,256,631 samples, 0.20%)</title><rect x="58.6534%" y="69" width="0.1971%" height="15" fill="rgb(233,84,52)"/><text x="58.9034%" y="79.50"></text></g><g><title>impl_trait_ref (2,210,601 samples, 0.35%)</title><rect x="58.9234%" y="85" width="0.3467%" height="15" fill="rgb(207,117,47)"/><text x="59.1734%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,824,079 samples, 0.29%)</title><rect x="58.9841%" y="69" width="0.2861%" height="15" fill="rgb(249,43,39)"/><text x="59.2341%" y="79.50"></text></g><g><title>explicit_predicates_of (640,392 samples, 0.10%)</title><rect x="59.5468%" y="53" width="0.1004%" height="15" fill="rgb(209,38,44)"/><text x="59.7968%" y="63.50"></text></g><g><title>predicates_of (2,562,388 samples, 0.40%)</title><rect x="59.2898%" y="85" width="0.4019%" height="15" fill="rgb(236,212,23)"/><text x="59.5398%" y="95.50"></text></g><g><title>predicates_defined_on (1,538,514 samples, 0.24%)</title><rect x="59.4503%" y="69" width="0.2413%" height="15" fill="rgb(242,79,21)"/><text x="59.7003%" y="79.50"></text></g><g><title>specializes (5,479,517 samples, 0.86%)</title><rect x="59.6916%" y="85" width="0.8593%" height="15" fill="rgb(211,96,35)"/><text x="59.9416%" y="95.50"></text></g><g><title>param_env (3,160,289 samples, 0.50%)</title><rect x="60.0553%" y="69" width="0.4956%" height="15" fill="rgb(253,215,40)"/><text x="60.3053%" y="79.50"></text></g><g><title>def_span (1,384,060 samples, 0.22%)</title><rect x="60.3339%" y="53" width="0.2171%" height="15" fill="rgb(211,81,21)"/><text x="60.5839%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (1,222,610 samples, 0.19%)</title><rect x="60.3592%" y="37" width="0.1917%" height="15" fill="rgb(208,190,38)"/><text x="60.6092%" y="47.50"></text></g><g><title>evaluate_obligation (27,937,078 samples, 4.38%)</title><rect x="56.2771%" y="101" width="4.3813%" height="15" fill="rgb(235,213,38)"/><text x="56.5271%" y="111.50">evalu..</text></g><g><title>generics_of (753,317 samples, 0.12%)</title><rect x="60.7058%" y="101" width="0.1181%" height="15" fill="rgb(237,122,38)"/><text x="60.9558%" y="111.50"></text></g><g><title>method_autoderef_steps (1,250,185 samples, 0.20%)</title><rect x="60.9291%" y="101" width="0.1961%" height="15" fill="rgb(244,218,35)"/><text x="61.1791%" y="111.50"></text></g><g><title>predicates_of (641,632 samples, 0.10%)</title><rect x="61.2417%" y="101" width="0.1006%" height="15" fill="rgb(240,68,47)"/><text x="61.4917%" y="111.50"></text></g><g><title>dropck_outlives (924,123 samples, 0.14%)</title><rect x="70.5893%" y="85" width="0.1449%" height="15" fill="rgb(210,16,53)"/><text x="70.8393%" y="95.50"></text></g><g><title>specializes (835,139 samples, 0.13%)</title><rect x="71.9839%" y="69" width="0.1310%" height="15" fill="rgb(235,124,12)"/><text x="72.2339%" y="79.50"></text></g><g><title>evaluate_obligation (8,982,278 samples, 1.41%)</title><rect x="70.7827%" y="85" width="1.4087%" height="15" fill="rgb(224,169,11)"/><text x="71.0327%" y="95.50"></text></g><g><title>generics_of (1,240,841 samples, 0.19%)</title><rect x="72.2258%" y="85" width="0.1946%" height="15" fill="rgb(250,166,2)"/><text x="72.4758%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (924,277 samples, 0.14%)</title><rect x="72.2755%" y="69" width="0.1450%" height="15" fill="rgb(242,216,29)"/><text x="72.5255%" y="79.50"></text></g><g><title>is_copy_raw (954,744 samples, 0.15%)</title><rect x="72.5057%" y="85" width="0.1497%" height="15" fill="rgb(230,116,27)"/><text x="72.7557%" y="95.50"></text></g><g><title>evaluate_obligation (759,391 samples, 0.12%)</title><rect x="72.5364%" y="69" width="0.1191%" height="15" fill="rgb(228,99,48)"/><text x="72.7864%" y="79.50"></text></g><g><title>method_autoderef_steps (1,372,143 samples, 0.22%)</title><rect x="72.7033%" y="85" width="0.2152%" height="15" fill="rgb(253,11,6)"/><text x="72.9533%" y="95.50"></text></g><g><title>evaluate_obligation (683,677 samples, 0.11%)</title><rect x="72.8113%" y="69" width="0.1072%" height="15" fill="rgb(247,143,39)"/><text x="73.0613%" y="79.50"></text></g><g><title>typeck (74,416,039 samples, 11.67%)</title><rect x="61.4410%" y="101" width="11.6706%" height="15" fill="rgb(236,97,10)"/><text x="61.6910%" y="111.50">typeck</text></g><g><title>item_bodies_checking (233,574,155 samples, 36.63%)</title><rect x="36.5078%" y="149" width="36.6312%" height="15" fill="rgb(233,208,19)"/><text x="36.7578%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (233,570,195 samples, 36.63%)</title><rect x="36.5084%" y="133" width="36.6306%" height="15" fill="rgb(216,164,2)"/><text x="36.7584%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (232,981,380 samples, 36.54%)</title><rect x="36.6007%" y="117" width="36.5383%" height="15" fill="rgb(220,129,5)"/><text x="36.8507%" y="127.50">typeck</text></g><g><title>evaluate_obligation (1,238,683 samples, 0.19%)</title><rect x="73.9824%" y="101" width="0.1943%" height="15" fill="rgb(242,17,10)"/><text x="74.2324%" y="111.50"></text></g><g><title>item_types_checking (6,707,034 samples, 1.05%)</title><rect x="73.1390%" y="149" width="1.0519%" height="15" fill="rgb(242,107,0)"/><text x="73.3890%" y="159.50"></text></g><g><title>check_mod_item_types (6,689,624 samples, 1.05%)</title><rect x="73.1417%" y="133" width="1.0491%" height="15" fill="rgb(251,28,31)"/><text x="73.3917%" y="143.50"></text></g><g><title>typeck (2,401,757 samples, 0.38%)</title><rect x="73.8142%" y="117" width="0.3767%" height="15" fill="rgb(233,223,10)"/><text x="74.0642%" y="127.50"></text></g><g><title>mir_borrowck (1,173,725 samples, 0.18%)</title><rect x="74.7472%" y="37" width="0.1841%" height="15" fill="rgb(215,21,27)"/><text x="74.9972%" y="47.50"></text></g><g><title>mir_for_ctfe (1,988,942 samples, 0.31%)</title><rect x="74.6203%" y="69" width="0.3119%" height="15" fill="rgb(232,23,21)"/><text x="74.8703%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,846,071 samples, 0.29%)</title><rect x="74.6427%" y="53" width="0.2895%" height="15" fill="rgb(244,5,23)"/><text x="74.8927%" y="63.50"></text></g><g><title>eval_to_const_value_raw (3,850,621 samples, 0.60%)</title><rect x="74.4456%" y="117" width="0.6039%" height="15" fill="rgb(226,81,46)"/><text x="74.6956%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,825,711 samples, 0.60%)</title><rect x="74.4495%" y="101" width="0.6000%" height="15" fill="rgb(247,70,30)"/><text x="74.6995%" y="111.50"></text></g><g><title>eval_to_allocation_raw (3,787,550 samples, 0.59%)</title><rect x="74.4555%" y="85" width="0.5940%" height="15" fill="rgb(212,68,19)"/><text x="74.7055%" y="95.50"></text></g><g><title>typeck (743,818 samples, 0.12%)</title><rect x="74.9328%" y="69" width="0.1167%" height="15" fill="rgb(240,187,13)"/><text x="75.1828%" y="79.50"></text></g><g><title>fn_sig (1,412,576 samples, 0.22%)</title><rect x="75.0495%" y="117" width="0.2215%" height="15" fill="rgb(223,113,26)"/><text x="75.2995%" y="127.50"></text></g><g><title>named_region_map (2,650,711 samples, 0.42%)</title><rect x="75.3699%" y="101" width="0.4157%" height="15" fill="rgb(206,192,2)"/><text x="75.6199%" y="111.50"></text></g><g><title>resolve_lifetimes (2,546,759 samples, 0.40%)</title><rect x="75.3862%" y="85" width="0.3994%" height="15" fill="rgb(241,108,4)"/><text x="75.6362%" y="95.50"></text></g><g><title>lint_levels (1,442,466 samples, 0.23%)</title><rect x="75.5594%" y="69" width="0.2262%" height="15" fill="rgb(247,173,49)"/><text x="75.8094%" y="79.50"></text></g><g><title>generics_of (3,342,010 samples, 0.52%)</title><rect x="75.2710%" y="117" width="0.5241%" height="15" fill="rgb(224,114,35)"/><text x="75.5210%" y="127.50"></text></g><g><title>late_bound_vars_map (1,130,830 samples, 0.18%)</title><rect x="76.1272%" y="69" width="0.1773%" height="15" fill="rgb(245,159,27)"/><text x="76.3772%" y="79.50"></text></g><g><title>resolve_lifetimes (1,071,300 samples, 0.17%)</title><rect x="76.1366%" y="53" width="0.1680%" height="15" fill="rgb(245,172,44)"/><text x="76.3866%" y="63.50"></text></g><g><title>explicit_predicates_of (1,985,039 samples, 0.31%)</title><rect x="76.0035%" y="85" width="0.3113%" height="15" fill="rgb(236,23,11)"/><text x="76.2535%" y="95.50"></text></g><g><title>predicates_of (3,577,315 samples, 0.56%)</title><rect x="75.8747%" y="117" width="0.5610%" height="15" fill="rgb(205,117,38)"/><text x="76.1247%" y="127.50"></text></g><g><title>predicates_defined_on (3,262,373 samples, 0.51%)</title><rect x="75.9241%" y="101" width="0.5116%" height="15" fill="rgb(237,72,25)"/><text x="76.1741%" y="111.50"></text></g><g><title>inferred_outlives_of (770,809 samples, 0.12%)</title><rect x="76.3148%" y="85" width="0.1209%" height="15" fill="rgb(244,70,9)"/><text x="76.5648%" y="95.50"></text></g><g><title>inferred_outlives_crate (659,667 samples, 0.10%)</title><rect x="76.3322%" y="69" width="0.1035%" height="15" fill="rgb(217,125,39)"/><text x="76.5822%" y="79.50"></text></g><g><title>type_collecting (14,775,014 samples, 2.32%)</title><rect x="74.1918%" y="149" width="2.3172%" height="15" fill="rgb(235,36,10)"/><text x="74.4418%" y="159.50">t..</text></g><g><title>collect_mod_item_types (14,742,494 samples, 2.31%)</title><rect x="74.1969%" y="133" width="2.3121%" height="15" fill="rgb(251,123,47)"/><text x="74.4469%" y="143.50">c..</text></g><g><title>evaluate_obligation (2,797,144 samples, 0.44%)</title><rect x="78.5778%" y="117" width="0.4387%" height="15" fill="rgb(221,13,13)"/><text x="78.8278%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,371,788 samples, 0.22%)</title><rect x="79.0186%" y="117" width="0.2151%" height="15" fill="rgb(238,131,9)"/><text x="79.2686%" y="127.50"></text></g><g><title>param_env (1,820,128 samples, 0.29%)</title><rect x="79.2337%" y="117" width="0.2854%" height="15" fill="rgb(211,50,8)"/><text x="79.4837%" y="127.50"></text></g><g><title>region_scope_tree (2,795,568 samples, 0.44%)</title><rect x="79.5244%" y="117" width="0.4384%" height="15" fill="rgb(245,182,24)"/><text x="79.7744%" y="127.50"></text></g><g><title>check_impl_item_well_formed (20,832,845 samples, 3.27%)</title><rect x="76.7001%" y="133" width="3.2672%" height="15" fill="rgb(242,14,37)"/><text x="76.9501%" y="143.50">che..</text></g><g><title>evaluate_obligation (1,388,008 samples, 0.22%)</title><rect x="80.9361%" y="117" width="0.2177%" height="15" fill="rgb(246,228,12)"/><text x="81.1861%" y="127.50"></text></g><g><title>object_safety_violations (790,378 samples, 0.12%)</title><rect x="81.2279%" y="117" width="0.1240%" height="15" fill="rgb(213,55,15)"/><text x="81.4779%" y="127.50"></text></g><g><title>param_env (1,380,297 samples, 0.22%)</title><rect x="81.3518%" y="117" width="0.2165%" height="15" fill="rgb(209,9,3)"/><text x="81.6018%" y="127.50"></text></g><g><title>check_item_well_formed (11,083,600 samples, 1.74%)</title><rect x="79.9673%" y="133" width="1.7382%" height="15" fill="rgb(230,59,30)"/><text x="80.2173%" y="143.50"></text></g><g><title>analysis (520,303,430 samples, 81.60%)</title><rect x="0.1923%" y="181" width="81.5987%" height="15" fill="rgb(209,121,21)"/><text x="0.4423%" y="191.50">analysis</text></g><g><title>type_check_crate (304,847,526 samples, 47.81%)</title><rect x="33.9821%" y="165" width="47.8090%" height="15" fill="rgb(220,109,13)"/><text x="34.2321%" y="175.50">type_check_crate</text></g><g><title>wf_checking (33,643,983 samples, 5.28%)</title><rect x="76.5147%" y="149" width="5.2764%" height="15" fill="rgb(232,18,1)"/><text x="76.7647%" y="159.50">wf_che..</text></g><g><title>metadata_register_crate (1,323,976 samples, 0.21%)</title><rect x="91.7378%" y="133" width="0.2076%" height="15" fill="rgb(215,41,42)"/><text x="91.9878%" y="143.50"></text></g><g><title>macro_expand_crate (65,356,386 samples, 10.25%)</title><rect x="82.0484%" y="165" width="10.2498%" height="15" fill="rgb(224,123,36)"/><text x="82.2984%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (65,335,346 samples, 10.25%)</title><rect x="82.0517%" y="149" width="10.2465%" height="15" fill="rgb(240,125,3)"/><text x="82.3017%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,248,682 samples, 0.35%)</title><rect x="91.9455%" y="133" width="0.3527%" height="15" fill="rgb(205,98,50)"/><text x="92.1955%" y="143.50"></text></g><g><title>late_resolve_crate (8,631,146 samples, 1.35%)</title><rect x="92.4154%" y="149" width="1.3536%" height="15" fill="rgb(205,185,37)"/><text x="92.6654%" y="159.50"></text></g><g><title>configure_and_expand (76,653,881 samples, 12.02%)</title><rect x="81.8565%" y="181" width="12.0216%" height="15" fill="rgb(238,207,15)"/><text x="82.1065%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (9,959,961 samples, 1.56%)</title><rect x="92.3161%" y="165" width="1.5620%" height="15" fill="rgb(213,199,42)"/><text x="92.5661%" y="175.50"></text></g><g><title>drop_ast (1,042,732 samples, 0.16%)</title><rect x="93.8781%" y="181" width="0.1635%" height="15" fill="rgb(235,201,11)"/><text x="94.1281%" y="191.50"></text></g><g><title>early_lint_checks (2,343,136 samples, 0.37%)</title><rect x="94.0448%" y="181" width="0.3675%" height="15" fill="rgb(207,46,11)"/><text x="94.2948%" y="191.50"></text></g><g><title>free_global_ctxt (7,737,266 samples, 1.21%)</title><rect x="94.4122%" y="181" width="1.2134%" height="15" fill="rgb(241,35,35)"/><text x="94.6622%" y="191.50"></text></g><g><title>generate_crate_metadata (5,903,465 samples, 0.93%)</title><rect x="95.6257%" y="181" width="0.9258%" height="15" fill="rgb(243,32,47)"/><text x="95.8757%" y="191.50"></text></g><g><title>hir_lowering (18,298,353 samples, 2.87%)</title><rect x="96.5515%" y="181" width="2.8697%" height="15" fill="rgb(247,202,23)"/><text x="96.8015%" y="191.50">hi..</text></g><g><title>self_profile_alloc_query_strings (2,305,476 samples, 0.36%)</title><rect x="99.5365%" y="181" width="0.3616%" height="15" fill="rgb(219,102,11)"/><text x="99.7865%" y="191.50"></text></g><g><title>all (637,636,793 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (637,636,793 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>