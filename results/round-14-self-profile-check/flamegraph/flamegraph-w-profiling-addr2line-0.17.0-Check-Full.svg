<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (611,188 samples, 0.24%)</title><rect x="12.8723%" y="181" width="0.2398%" height="15" fill="rgb(227,0,7)"/><text x="13.1223%" y="191.50"></text></g><g><title>param_env (894,588 samples, 0.35%)</title><rect x="14.5583%" y="149" width="0.3509%" height="15" fill="rgb(217,0,24)"/><text x="14.8083%" y="159.50"></text></g><g><title>item_attrs (547,868 samples, 0.21%)</title><rect x="15.4296%" y="117" width="0.2149%" height="15" fill="rgb(221,193,54)"/><text x="15.6796%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (520,428 samples, 0.20%)</title><rect x="15.4403%" y="101" width="0.2042%" height="15" fill="rgb(248,212,6)"/><text x="15.6903%" y="111.50"></text></g><g><title>codegen_fn_attrs (799,611 samples, 0.31%)</title><rect x="15.3481%" y="133" width="0.3137%" height="15" fill="rgb(208,68,35)"/><text x="15.5981%" y="143.50"></text></g><g><title>is_copy_raw (666,187 samples, 0.26%)</title><rect x="18.9716%" y="53" width="0.2613%" height="15" fill="rgb(232,128,0)"/><text x="19.2216%" y="63.50"></text></g><g><title>evaluate_obligation (609,477 samples, 0.24%)</title><rect x="18.9938%" y="37" width="0.2391%" height="15" fill="rgb(207,160,47)"/><text x="19.2438%" y="47.50"></text></g><g><title>adt_drop_tys (895,241 samples, 0.35%)</title><rect x="18.9484%" y="69" width="0.3512%" height="15" fill="rgb(228,23,34)"/><text x="19.1984%" y="79.50"></text></g><g><title>is_copy_raw (669,449 samples, 0.26%)</title><rect x="19.2997%" y="69" width="0.2626%" height="15" fill="rgb(218,30,26)"/><text x="19.5497%" y="79.50"></text></g><g><title>evaluate_obligation (630,749 samples, 0.25%)</title><rect x="19.3149%" y="53" width="0.2474%" height="15" fill="rgb(220,122,19)"/><text x="19.5649%" y="63.50"></text></g><g><title>adt_drop_tys (1,779,581 samples, 0.70%)</title><rect x="18.9202%" y="85" width="0.6981%" height="15" fill="rgb(250,228,42)"/><text x="19.1702%" y="95.50"></text></g><g><title>is_copy_raw (550,248 samples, 0.22%)</title><rect x="19.6218%" y="85" width="0.2159%" height="15" fill="rgb(240,193,28)"/><text x="19.8718%" y="95.50"></text></g><g><title>evaluate_obligation (455,356 samples, 0.18%)</title><rect x="19.6590%" y="69" width="0.1786%" height="15" fill="rgb(216,20,37)"/><text x="19.9090%" y="79.50"></text></g><g><title>param_env (325,122 samples, 0.13%)</title><rect x="19.8377%" y="85" width="0.1275%" height="15" fill="rgb(206,188,39)"/><text x="20.0877%" y="95.50"></text></g><g><title>adt_drop_tys (2,851,341 samples, 1.12%)</title><rect x="18.8643%" y="101" width="1.1185%" height="15" fill="rgb(217,207,13)"/><text x="19.1143%" y="111.50"></text></g><g><title>is_copy_raw (3,993,747 samples, 1.57%)</title><rect x="19.9829%" y="101" width="1.5667%" height="15" fill="rgb(231,73,38)"/><text x="20.2329%" y="111.50"></text></g><g><title>evaluate_obligation (3,408,076 samples, 1.34%)</title><rect x="20.2126%" y="85" width="1.3369%" height="15" fill="rgb(225,20,46)"/><text x="20.4626%" y="95.50"></text></g><g><title>needs_drop_raw (7,405,165 samples, 2.90%)</title><rect x="18.6533%" y="117" width="2.9049%" height="15" fill="rgb(210,31,41)"/><text x="18.9033%" y="127.50">ne..</text></g><g><title>codegen_fulfill_obligation (573,189 samples, 0.22%)</title><rect x="21.6934%" y="101" width="0.2249%" height="15" fill="rgb(221,200,47)"/><text x="21.9434%" y="111.50"></text></g><g><title>specialization_graph_of (2,170,355 samples, 0.85%)</title><rect x="21.9369%" y="101" width="0.8514%" height="15" fill="rgb(226,26,5)"/><text x="22.1869%" y="111.50"></text></g><g><title>impl_trait_ref (1,243,564 samples, 0.49%)</title><rect x="22.3005%" y="85" width="0.4878%" height="15" fill="rgb(249,33,26)"/><text x="22.5505%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,141,473 samples, 0.45%)</title><rect x="22.3406%" y="69" width="0.4478%" height="15" fill="rgb(235,183,28)"/><text x="22.5906%" y="79.50"></text></g><g><title>resolve_instance (3,285,538 samples, 1.29%)</title><rect x="21.5582%" y="117" width="1.2889%" height="15" fill="rgb(221,5,38)"/><text x="21.8082%" y="127.50"></text></g><g><title>thir_body (2,665,070 samples, 1.05%)</title><rect x="22.8791%" y="117" width="1.0455%" height="15" fill="rgb(247,18,42)"/><text x="23.1291%" y="127.50"></text></g><g><title>mir_const (25,882,846 samples, 10.15%)</title><rect x="13.8498%" y="165" width="10.1535%" height="15" fill="rgb(241,131,45)"/><text x="14.0998%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (23,182,207 samples, 9.09%)</title><rect x="14.9092%" y="149" width="9.0940%" height="15" fill="rgb(249,31,29)"/><text x="15.1592%" y="159.50">unsafety_chec..</text></g><g><title>mir_built (21,263,886 samples, 8.34%)</title><rect x="15.6618%" y="133" width="8.3415%" height="15" fill="rgb(225,111,53)"/><text x="15.9118%" y="143.50">mir_built</text></g><g><title>mir_promoted (27,721,931 samples, 10.87%)</title><rect x="13.1822%" y="181" width="10.8749%" height="15" fill="rgb(238,160,17)"/><text x="13.4322%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,227,548 samples, 0.48%)</title><rect x="24.0598%" y="181" width="0.4815%" height="15" fill="rgb(214,148,48)"/><text x="24.3098%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (2,785,505 samples, 1.09%)</title><rect x="24.5413%" y="181" width="1.0927%" height="15" fill="rgb(232,36,49)"/><text x="24.7913%" y="191.50"></text></g><g><title>normalize_projection_ty (1,677,057 samples, 0.66%)</title><rect x="24.9761%" y="165" width="0.6579%" height="15" fill="rgb(209,103,24)"/><text x="25.2261%" y="175.50"></text></g><g><title>type_op_normalize_predicate (1,257,946 samples, 0.49%)</title><rect x="25.6340%" y="181" width="0.4935%" height="15" fill="rgb(229,88,8)"/><text x="25.8840%" y="191.50"></text></g><g><title>normalize_projection_ty (601,329 samples, 0.24%)</title><rect x="25.8916%" y="165" width="0.2359%" height="15" fill="rgb(213,181,19)"/><text x="26.1416%" y="175.50"></text></g><g><title>type_op_normalize_ty (615,026 samples, 0.24%)</title><rect x="26.1275%" y="181" width="0.2413%" height="15" fill="rgb(254,191,54)"/><text x="26.3775%" y="191.50"></text></g><g><title>type_op_prove_predicate (9,604,504 samples, 3.77%)</title><rect x="26.3688%" y="181" width="3.7677%" height="15" fill="rgb(241,83,37)"/><text x="26.6188%" y="191.50">type..</text></g><g><title>MIR_borrow_checking (75,736,567 samples, 29.71%)</title><rect x="0.4310%" y="213" width="29.7104%" height="15" fill="rgb(233,36,39)"/><text x="0.6810%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (75,558,216 samples, 29.64%)</title><rect x="0.5009%" y="197" width="29.6404%" height="15" fill="rgb(226,3,54)"/><text x="0.7509%" y="207.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (364,824 samples, 0.14%)</title><rect x="30.4792%" y="181" width="0.1431%" height="15" fill="rgb(245,192,40)"/><text x="30.7292%" y="191.50"></text></g><g><title>check_mod_attrs (795,449 samples, 0.31%)</title><rect x="30.3104%" y="197" width="0.3120%" height="15" fill="rgb(238,167,29)"/><text x="30.5604%" y="207.50"></text></g><g><title>lint_levels (372,134 samples, 0.15%)</title><rect x="30.8471%" y="181" width="0.1460%" height="15" fill="rgb(232,182,51)"/><text x="31.0971%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (938,360 samples, 0.37%)</title><rect x="30.7436%" y="197" width="0.3681%" height="15" fill="rgb(231,60,39)"/><text x="30.9936%" y="207.50"></text></g><g><title>misc_checking_1 (2,122,983 samples, 0.83%)</title><rect x="30.3012%" y="213" width="0.8328%" height="15" fill="rgb(208,69,12)"/><text x="30.5512%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (1,534,467 samples, 0.60%)</title><rect x="31.1348%" y="197" width="0.6019%" height="15" fill="rgb(235,93,37)"/><text x="31.3848%" y="207.50"></text></g><g><title>check_mod_liveness (1,329,314 samples, 0.52%)</title><rect x="31.2153%" y="181" width="0.5215%" height="15" fill="rgb(213,116,39)"/><text x="31.4653%" y="191.50"></text></g><g><title>type_uninhabited_from (403,777 samples, 0.16%)</title><rect x="31.5784%" y="165" width="0.1584%" height="15" fill="rgb(222,207,29)"/><text x="31.8284%" y="175.50"></text></g><g><title>type_uninhabited_from (297,786 samples, 0.12%)</title><rect x="31.6199%" y="149" width="0.1168%" height="15" fill="rgb(206,96,30)"/><text x="31.8699%" y="159.50"></text></g><g><title>eval_to_const_value_raw (451,026 samples, 0.18%)</title><rect x="32.5652%" y="165" width="0.1769%" height="15" fill="rgb(218,138,4)"/><text x="32.8152%" y="175.50"></text></g><g><title>eval_to_const_value_raw (421,046 samples, 0.17%)</title><rect x="32.5769%" y="149" width="0.1652%" height="15" fill="rgb(250,191,14)"/><text x="32.8269%" y="159.50"></text></g><g><title>eval_to_allocation_raw (392,194 samples, 0.15%)</title><rect x="32.5882%" y="133" width="0.1539%" height="15" fill="rgb(239,60,40)"/><text x="32.8382%" y="143.50"></text></g><g><title>has_structural_eq_impls (325,164 samples, 0.13%)</title><rect x="32.7620%" y="165" width="0.1276%" height="15" fill="rgb(206,27,48)"/><text x="33.0120%" y="175.50"></text></g><g><title>evaluate_obligation (307,114 samples, 0.12%)</title><rect x="32.7691%" y="149" width="0.1205%" height="15" fill="rgb(225,35,8)"/><text x="33.0191%" y="159.50"></text></g><g><title>param_env (296,203 samples, 0.12%)</title><rect x="32.9271%" y="165" width="0.1162%" height="15" fill="rgb(250,213,24)"/><text x="33.1771%" y="175.50"></text></g><g><title>misc_checking_2 (4,948,496 samples, 1.94%)</title><rect x="31.1340%" y="213" width="1.9412%" height="15" fill="rgb(247,123,22)"/><text x="31.3840%" y="223.50">m..</text></g><g><title>match_checking (3,412,079 samples, 1.34%)</title><rect x="31.7368%" y="197" width="1.3385%" height="15" fill="rgb(231,138,38)"/><text x="31.9868%" y="207.50"></text></g><g><title>check_match (3,353,107 samples, 1.32%)</title><rect x="31.7599%" y="181" width="1.3154%" height="15" fill="rgb(231,145,46)"/><text x="32.0099%" y="191.50"></text></g><g><title>check_private_in_public (366,624 samples, 0.14%)</title><rect x="33.0809%" y="197" width="0.1438%" height="15" fill="rgb(251,118,11)"/><text x="33.3309%" y="207.50"></text></g><g><title>death_checking (567,357 samples, 0.22%)</title><rect x="33.2247%" y="197" width="0.2226%" height="15" fill="rgb(217,147,25)"/><text x="33.4747%" y="207.50"></text></g><g><title>crate_lints (4,160,136 samples, 1.63%)</title><rect x="33.4480%" y="181" width="1.6320%" height="15" fill="rgb(247,81,37)"/><text x="33.6980%" y="191.50"></text></g><g><title>type_of (2,617,128 samples, 1.03%)</title><rect x="34.0533%" y="165" width="1.0267%" height="15" fill="rgb(209,12,38)"/><text x="34.3033%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (2,225,594 samples, 0.87%)</title><rect x="34.2069%" y="149" width="0.8731%" height="15" fill="rgb(227,1,9)"/><text x="34.4569%" y="159.50"></text></g><g><title>layout_of (327,563 samples, 0.13%)</title><rect x="35.5290%" y="133" width="0.1285%" height="15" fill="rgb(248,47,43)"/><text x="35.7790%" y="143.50"></text></g><g><title>layout_of (311,773 samples, 0.12%)</title><rect x="35.5352%" y="117" width="0.1223%" height="15" fill="rgb(221,10,30)"/><text x="35.7852%" y="127.50"></text></g><g><title>layout_of (292,292 samples, 0.11%)</title><rect x="35.5428%" y="101" width="0.1147%" height="15" fill="rgb(210,229,1)"/><text x="35.7928%" y="111.50"></text></g><g><title>layout_of (261,342 samples, 0.10%)</title><rect x="35.5550%" y="85" width="0.1025%" height="15" fill="rgb(222,148,37)"/><text x="35.8050%" y="95.50"></text></g><g><title>layout_of (340,613 samples, 0.13%)</title><rect x="35.5245%" y="149" width="0.1336%" height="15" fill="rgb(234,67,33)"/><text x="35.7745%" y="159.50"></text></g><g><title>lint_checking (5,636,703 samples, 2.21%)</title><rect x="33.4473%" y="197" width="2.2112%" height="15" fill="rgb(247,98,35)"/><text x="33.6973%" y="207.50">l..</text></g><g><title>module_lints (1,474,667 samples, 0.58%)</title><rect x="35.0800%" y="181" width="0.5785%" height="15" fill="rgb(247,138,52)"/><text x="35.3300%" y="191.50"></text></g><g><title>lint_mod (1,468,837 samples, 0.58%)</title><rect x="35.0823%" y="165" width="0.5762%" height="15" fill="rgb(213,79,30)"/><text x="35.3323%" y="175.50"></text></g><g><title>privacy_access_levels (394,414 samples, 0.15%)</title><rect x="35.6585%" y="197" width="0.1547%" height="15" fill="rgb(246,177,23)"/><text x="35.9085%" y="207.50"></text></g><g><title>privacy_checking_modules (2,513,967 samples, 0.99%)</title><rect x="35.8132%" y="197" width="0.9862%" height="15" fill="rgb(230,62,27)"/><text x="36.0632%" y="207.50"></text></g><g><title>check_mod_privacy (2,510,477 samples, 0.98%)</title><rect x="35.8146%" y="181" width="0.9848%" height="15" fill="rgb(216,154,8)"/><text x="36.0646%" y="191.50"></text></g><g><title>misc_checking_3 (9,517,005 samples, 3.73%)</title><rect x="33.0753%" y="213" width="3.7334%" height="15" fill="rgb(244,35,45)"/><text x="33.3253%" y="223.50">misc..</text></g><g><title>impl_parent (517,736 samples, 0.20%)</title><rect x="37.0562%" y="149" width="0.2031%" height="15" fill="rgb(251,115,12)"/><text x="37.3062%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (386,826 samples, 0.15%)</title><rect x="37.1076%" y="133" width="0.1517%" height="15" fill="rgb(240,54,50)"/><text x="37.3576%" y="143.50"></text></g><g><title>impl_trait_ref (1,305,217 samples, 0.51%)</title><rect x="37.2593%" y="149" width="0.5120%" height="15" fill="rgb(233,84,52)"/><text x="37.5093%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,170,635 samples, 0.46%)</title><rect x="37.3121%" y="133" width="0.4592%" height="15" fill="rgb(207,117,47)"/><text x="37.5621%" y="143.50"></text></g><g><title>coherent_trait (2,506,358 samples, 0.98%)</title><rect x="36.8494%" y="181" width="0.9832%" height="15" fill="rgb(249,43,39)"/><text x="37.0994%" y="191.50"></text></g><g><title>specialization_graph_of (2,499,228 samples, 0.98%)</title><rect x="36.8522%" y="165" width="0.9804%" height="15" fill="rgb(209,38,44)"/><text x="37.1022%" y="175.50"></text></g><g><title>coherence_checking (2,560,198 samples, 1.00%)</title><rect x="36.8450%" y="197" width="1.0043%" height="15" fill="rgb(236,212,23)"/><text x="37.0950%" y="207.50"></text></g><g><title>adt_dtorck_constraint (376,164 samples, 0.15%)</title><rect x="46.4804%" y="117" width="0.1476%" height="15" fill="rgb(242,79,21)"/><text x="46.7304%" y="127.50"></text></g><g><title>adt_dtorck_constraint (537,956 samples, 0.21%)</title><rect x="46.4289%" y="133" width="0.2110%" height="15" fill="rgb(211,96,35)"/><text x="46.6789%" y="143.50"></text></g><g><title>dropck_outlives (1,090,524 samples, 0.43%)</title><rect x="46.2408%" y="149" width="0.4278%" height="15" fill="rgb(253,215,40)"/><text x="46.4908%" y="159.50"></text></g><g><title>evaluate_obligation (1,040,478 samples, 0.41%)</title><rect x="46.6697%" y="149" width="0.4082%" height="15" fill="rgb(211,81,21)"/><text x="46.9197%" y="159.50"></text></g><g><title>method_autoderef_steps (372,336 samples, 0.15%)</title><rect x="47.2438%" y="149" width="0.1461%" height="15" fill="rgb(208,190,38)"/><text x="47.4938%" y="159.50"></text></g><g><title>adt_sized_constraint (322,283 samples, 0.13%)</title><rect x="66.7837%" y="117" width="0.1264%" height="15" fill="rgb(235,213,38)"/><text x="67.0337%" y="127.50"></text></g><g><title>adt_sized_constraint (516,574 samples, 0.20%)</title><rect x="66.7195%" y="133" width="0.2026%" height="15" fill="rgb(237,122,38)"/><text x="66.9695%" y="143.50"></text></g><g><title>associated_item (661,960 samples, 0.26%)</title><rect x="67.0327%" y="117" width="0.2597%" height="15" fill="rgb(244,218,35)"/><text x="67.2827%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (533,359 samples, 0.21%)</title><rect x="67.0832%" y="101" width="0.2092%" height="15" fill="rgb(240,68,47)"/><text x="67.3332%" y="111.50"></text></g><g><title>associated_items (999,154 samples, 0.39%)</title><rect x="66.9248%" y="133" width="0.3920%" height="15" fill="rgb(210,16,53)"/><text x="67.1748%" y="143.50"></text></g><g><title>adt_dtorck_constraint (286,924 samples, 0.11%)</title><rect x="68.0826%" y="53" width="0.1126%" height="15" fill="rgb(235,124,12)"/><text x="68.3326%" y="63.50"></text></g><g><title>adt_dtorck_constraint (366,694 samples, 0.14%)</title><rect x="68.0568%" y="69" width="0.1438%" height="15" fill="rgb(224,169,11)"/><text x="68.3068%" y="79.50"></text></g><g><title>adt_dtorck_constraint (622,688 samples, 0.24%)</title><rect x="67.9712%" y="85" width="0.2443%" height="15" fill="rgb(250,166,2)"/><text x="68.2212%" y="95.50"></text></g><g><title>adt_dtorck_constraint (983,481 samples, 0.39%)</title><rect x="67.8580%" y="101" width="0.3858%" height="15" fill="rgb(242,216,29)"/><text x="68.1080%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,118,424 samples, 0.83%)</title><rect x="67.7415%" y="117" width="0.8310%" height="15" fill="rgb(230,116,27)"/><text x="67.9915%" y="127.50"></text></g><g><title>type_of (798,268 samples, 0.31%)</title><rect x="68.2594%" y="101" width="0.3131%" height="15" fill="rgb(228,99,48)"/><text x="68.5094%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (786,318 samples, 0.31%)</title><rect x="68.2641%" y="85" width="0.3085%" height="15" fill="rgb(253,11,6)"/><text x="68.5141%" y="95.50"></text></g><g><title>dropck_outlives (3,043,754 samples, 1.19%)</title><rect x="67.4120%" y="133" width="1.1940%" height="15" fill="rgb(247,143,39)"/><text x="67.6620%" y="143.50"></text></g><g><title>adt_sized_constraint (344,874 samples, 0.14%)</title><rect x="70.4953%" y="117" width="0.1353%" height="15" fill="rgb(236,97,10)"/><text x="70.7453%" y="127.50"></text></g><g><title>generics_of (819,485 samples, 0.32%)</title><rect x="70.6364%" y="117" width="0.3215%" height="15" fill="rgb(233,208,19)"/><text x="70.8864%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (681,853 samples, 0.27%)</title><rect x="70.6903%" y="101" width="0.2675%" height="15" fill="rgb(216,164,2)"/><text x="70.9403%" y="111.50"></text></g><g><title>impl_trait_ref (556,215 samples, 0.22%)</title><rect x="70.9805%" y="117" width="0.2182%" height="15" fill="rgb(220,129,5)"/><text x="71.2305%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (480,005 samples, 0.19%)</title><rect x="71.0104%" y="101" width="0.1883%" height="15" fill="rgb(242,17,10)"/><text x="71.2604%" y="111.50"></text></g><g><title>predicates_of (273,425 samples, 0.11%)</title><rect x="71.2091%" y="117" width="0.1073%" height="15" fill="rgb(242,107,0)"/><text x="71.4591%" y="127.50"></text></g><g><title>specializes (431,704 samples, 0.17%)</title><rect x="71.3164%" y="117" width="0.1694%" height="15" fill="rgb(251,28,31)"/><text x="71.5664%" y="127.50"></text></g><g><title>trait_impls_of (320,644 samples, 0.13%)</title><rect x="71.4934%" y="117" width="0.1258%" height="15" fill="rgb(233,223,10)"/><text x="71.7434%" y="127.50"></text></g><g><title>evaluate_obligation (7,685,590 samples, 3.01%)</title><rect x="68.6066%" y="133" width="3.0149%" height="15" fill="rgb(215,21,27)"/><text x="68.8566%" y="143.50">eva..</text></g><g><title>fn_sig (371,212 samples, 0.15%)</title><rect x="71.6437%" y="133" width="0.1456%" height="15" fill="rgb(232,23,21)"/><text x="71.8937%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (334,452 samples, 0.13%)</title><rect x="71.6581%" y="117" width="0.1312%" height="15" fill="rgb(244,5,23)"/><text x="71.9081%" y="127.50"></text></g><g><title>generics_of (1,086,153 samples, 0.43%)</title><rect x="71.7893%" y="133" width="0.4261%" height="15" fill="rgb(226,81,46)"/><text x="72.0393%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (799,531 samples, 0.31%)</title><rect x="71.9017%" y="117" width="0.3136%" height="15" fill="rgb(247,70,30)"/><text x="72.1517%" y="127.50"></text></g><g><title>impl_trait_ref (1,772,650 samples, 0.70%)</title><rect x="72.2647%" y="133" width="0.6954%" height="15" fill="rgb(212,68,19)"/><text x="72.5147%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,548,525 samples, 0.61%)</title><rect x="72.3527%" y="117" width="0.6075%" height="15" fill="rgb(240,187,13)"/><text x="72.6027%" y="127.50"></text></g><g><title>is_copy_raw (1,142,153 samples, 0.45%)</title><rect x="73.0585%" y="133" width="0.4481%" height="15" fill="rgb(223,113,26)"/><text x="73.3085%" y="143.50"></text></g><g><title>evaluate_obligation (666,589 samples, 0.26%)</title><rect x="73.2451%" y="117" width="0.2615%" height="15" fill="rgb(206,192,2)"/><text x="73.4951%" y="127.50"></text></g><g><title>evaluate_obligation (937,320 samples, 0.37%)</title><rect x="73.9566%" y="117" width="0.3677%" height="15" fill="rgb(241,108,4)"/><text x="74.2066%" y="127.50"></text></g><g><title>method_autoderef_steps (1,824,780 samples, 0.72%)</title><rect x="73.6176%" y="133" width="0.7158%" height="15" fill="rgb(247,173,49)"/><text x="73.8676%" y="143.50"></text></g><g><title>explicit_predicates_of (303,477 samples, 0.12%)</title><rect x="74.5870%" y="101" width="0.1190%" height="15" fill="rgb(224,114,35)"/><text x="74.8370%" y="111.50"></text></g><g><title>predicates_of (1,268,029 samples, 0.50%)</title><rect x="74.3506%" y="133" width="0.4974%" height="15" fill="rgb(245,159,27)"/><text x="74.6006%" y="143.50"></text></g><g><title>predicates_defined_on (905,685 samples, 0.36%)</title><rect x="74.4928%" y="117" width="0.3553%" height="15" fill="rgb(245,172,44)"/><text x="74.7428%" y="127.50"></text></g><g><title>inferred_outlives_of (362,067 samples, 0.14%)</title><rect x="74.7060%" y="101" width="0.1420%" height="15" fill="rgb(236,23,11)"/><text x="74.9560%" y="111.50"></text></g><g><title>specializes (364,424 samples, 0.14%)</title><rect x="74.8481%" y="133" width="0.1430%" height="15" fill="rgb(205,117,38)"/><text x="75.0981%" y="143.50"></text></g><g><title>param_env (300,823 samples, 0.12%)</title><rect x="74.8730%" y="117" width="0.1180%" height="15" fill="rgb(237,72,25)"/><text x="75.1230%" y="127.50"></text></g><g><title>typeck (70,403,268 samples, 27.62%)</title><rect x="47.5281%" y="149" width="27.6182%" height="15" fill="rgb(244,70,9)"/><text x="47.7781%" y="159.50">typeck</text></g><g><title>item_bodies_checking (95,072,981 samples, 37.30%)</title><rect x="37.8612%" y="197" width="37.2958%" height="15" fill="rgb(217,125,39)"/><text x="38.1112%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (95,068,561 samples, 37.29%)</title><rect x="37.8630%" y="181" width="37.2940%" height="15" fill="rgb(235,36,10)"/><text x="38.1130%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (94,972,989 samples, 37.26%)</title><rect x="37.9005%" y="165" width="37.2565%" height="15" fill="rgb(251,123,47)"/><text x="38.1505%" y="175.50">typeck</text></g><g><title>adt_destructor (645,717 samples, 0.25%)</title><rect x="75.6511%" y="165" width="0.2533%" height="15" fill="rgb(221,13,13)"/><text x="75.9011%" y="175.50"></text></g><g><title>coherent_trait (635,297 samples, 0.25%)</title><rect x="75.6552%" y="149" width="0.2492%" height="15" fill="rgb(238,131,9)"/><text x="75.9052%" y="159.50"></text></g><g><title>specialization_graph_of (632,337 samples, 0.25%)</title><rect x="75.6564%" y="133" width="0.2481%" height="15" fill="rgb(211,50,8)"/><text x="75.9064%" y="143.50"></text></g><g><title>trait_impls_of (278,543 samples, 0.11%)</title><rect x="75.7951%" y="117" width="0.1093%" height="15" fill="rgb(245,182,24)"/><text x="76.0451%" y="127.50"></text></g><g><title>mir_borrowck (897,181 samples, 0.35%)</title><rect x="76.6581%" y="133" width="0.3520%" height="15" fill="rgb(242,14,37)"/><text x="76.9081%" y="143.50"></text></g><g><title>associated_items (312,143 samples, 0.12%)</title><rect x="78.7942%" y="53" width="0.1224%" height="15" fill="rgb(246,228,12)"/><text x="79.0442%" y="63.50"></text></g><g><title>evaluate_obligation (1,054,123 samples, 0.41%)</title><rect x="78.9763%" y="53" width="0.4135%" height="15" fill="rgb(213,55,15)"/><text x="79.2263%" y="63.50"></text></g><g><title>mir_built (6,545,112 samples, 2.57%)</title><rect x="77.1957%" y="85" width="2.5676%" height="15" fill="rgb(209,9,3)"/><text x="77.4457%" y="95.50">mi..</text></g><g><title>typeck (5,715,703 samples, 2.24%)</title><rect x="77.5211%" y="69" width="2.2422%" height="15" fill="rgb(230,59,30)"/><text x="77.7711%" y="79.50">t..</text></g><g><title>mir_built (268,943 samples, 0.11%)</title><rect x="79.7864%" y="69" width="0.1055%" height="15" fill="rgb(209,121,21)"/><text x="80.0364%" y="79.50"></text></g><g><title>mir_const (7,256,320 samples, 2.85%)</title><rect x="77.0458%" y="117" width="2.8466%" height="15" fill="rgb(220,109,13)"/><text x="77.2958%" y="127.50">mi..</text></g><g><title>unsafety_check_result (7,034,437 samples, 2.76%)</title><rect x="77.1328%" y="101" width="2.7595%" height="15" fill="rgb(232,18,1)"/><text x="77.3828%" y="111.50">un..</text></g><g><title>unsafety_check_result (328,973 samples, 0.13%)</title><rect x="79.7633%" y="85" width="0.1291%" height="15" fill="rgb(215,41,42)"/><text x="80.0133%" y="95.50"></text></g><g><title>mir_promoted (7,353,891 samples, 2.88%)</title><rect x="77.0100%" y="133" width="2.8848%" height="15" fill="rgb(224,123,36)"/><text x="77.2600%" y="143.50">mi..</text></g><g><title>type_op_normalize_predicate (267,153 samples, 0.10%)</title><rect x="79.9276%" y="133" width="0.1048%" height="15" fill="rgb(240,125,3)"/><text x="80.1776%" y="143.50"></text></g><g><title>item_types_checking (12,991,043 samples, 5.10%)</title><rect x="75.1570%" y="197" width="5.0962%" height="15" fill="rgb(205,98,50)"/><text x="75.4070%" y="207.50">item_t..</text></g><g><title>check_mod_item_types (12,985,003 samples, 5.09%)</title><rect x="75.1594%" y="181" width="5.0938%" height="15" fill="rgb(205,185,37)"/><text x="75.4094%" y="191.50">check_..</text></g><g><title>type_of (11,008,801 samples, 4.32%)</title><rect x="75.9346%" y="165" width="4.3186%" height="15" fill="rgb(238,207,15)"/><text x="76.1846%" y="175.50">type_..</text></g><g><title>mir_borrowck (10,843,749 samples, 4.25%)</title><rect x="75.9994%" y="149" width="4.2538%" height="15" fill="rgb(213,199,42)"/><text x="76.2494%" y="159.50">mir_b..</text></g><g><title>type_op_prove_predicate (548,496 samples, 0.22%)</title><rect x="80.0380%" y="133" width="0.2152%" height="15" fill="rgb(235,201,11)"/><text x="80.2880%" y="143.50"></text></g><g><title>fn_sig (457,176 samples, 0.18%)</title><rect x="80.4003%" y="165" width="0.1793%" height="15" fill="rgb(207,46,11)"/><text x="80.6503%" y="175.50"></text></g><g><title>generics_of (409,224 samples, 0.16%)</title><rect x="80.5796%" y="165" width="0.1605%" height="15" fill="rgb(241,35,35)"/><text x="80.8296%" y="175.50"></text></g><g><title>late_bound_vars_map (351,004 samples, 0.14%)</title><rect x="80.9066%" y="117" width="0.1377%" height="15" fill="rgb(243,32,47)"/><text x="81.1566%" y="127.50"></text></g><g><title>resolve_lifetimes (337,804 samples, 0.13%)</title><rect x="80.9118%" y="101" width="0.1325%" height="15" fill="rgb(247,202,23)"/><text x="81.1618%" y="111.50"></text></g><g><title>explicit_predicates_of (627,097 samples, 0.25%)</title><rect x="80.8072%" y="133" width="0.2460%" height="15" fill="rgb(219,102,11)"/><text x="81.0572%" y="143.50"></text></g><g><title>predicates_of (1,981,524 samples, 0.78%)</title><rect x="80.7450%" y="165" width="0.7773%" height="15" fill="rgb(243,110,44)"/><text x="80.9950%" y="175.50"></text></g><g><title>predicates_defined_on (1,920,752 samples, 0.75%)</title><rect x="80.7689%" y="149" width="0.7535%" height="15" fill="rgb(222,74,54)"/><text x="81.0189%" y="159.50"></text></g><g><title>inferred_outlives_of (1,196,113 samples, 0.47%)</title><rect x="81.0532%" y="133" width="0.4692%" height="15" fill="rgb(216,99,12)"/><text x="81.3032%" y="143.50"></text></g><g><title>inferred_outlives_crate (1,166,243 samples, 0.46%)</title><rect x="81.0649%" y="117" width="0.4575%" height="15" fill="rgb(226,22,26)"/><text x="81.3149%" y="127.50"></text></g><g><title>type_of (816,841 samples, 0.32%)</title><rect x="81.2019%" y="101" width="0.3204%" height="15" fill="rgb(217,163,10)"/><text x="81.4519%" y="111.50"></text></g><g><title>type_collecting (3,422,058 samples, 1.34%)</title><rect x="80.2544%" y="197" width="1.3424%" height="15" fill="rgb(213,25,53)"/><text x="80.5044%" y="207.50"></text></g><g><title>collect_mod_item_types (3,411,588 samples, 1.34%)</title><rect x="80.2585%" y="181" width="1.3383%" height="15" fill="rgb(252,105,26)"/><text x="80.5085%" y="191.50"></text></g><g><title>evaluate_obligation (448,064 samples, 0.18%)</title><rect x="82.8194%" y="165" width="0.1758%" height="15" fill="rgb(220,39,43)"/><text x="83.0694%" y="175.50"></text></g><g><title>implied_outlives_bounds (497,298 samples, 0.20%)</title><rect x="83.0331%" y="165" width="0.1951%" height="15" fill="rgb(229,68,48)"/><text x="83.2831%" y="175.50"></text></g><g><title>param_env (394,766 samples, 0.15%)</title><rect x="83.2293%" y="165" width="0.1549%" height="15" fill="rgb(252,8,32)"/><text x="83.4793%" y="175.50"></text></g><g><title>region_scope_tree (662,486 samples, 0.26%)</title><rect x="83.4321%" y="165" width="0.2599%" height="15" fill="rgb(223,20,43)"/><text x="83.6821%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,231,131 samples, 2.05%)</title><rect x="81.7001%" y="181" width="2.0521%" height="15" fill="rgb(229,81,49)"/><text x="81.9501%" y="191.50">c..</text></g><g><title>adt_sized_constraint (297,473 samples, 0.12%)</title><rect x="84.7113%" y="149" width="0.1167%" height="15" fill="rgb(236,28,36)"/><text x="84.9613%" y="159.50"></text></g><g><title>evaluate_obligation (804,188 samples, 0.32%)</title><rect x="84.5747%" y="165" width="0.3155%" height="15" fill="rgb(249,185,26)"/><text x="84.8247%" y="175.50"></text></g><g><title>predicates_of (284,794 samples, 0.11%)</title><rect x="85.1555%" y="149" width="0.1117%" height="15" fill="rgb(249,174,33)"/><text x="85.4055%" y="159.50"></text></g><g><title>object_safety_violations (756,148 samples, 0.30%)</title><rect x="84.9741%" y="165" width="0.2966%" height="15" fill="rgb(233,201,37)"/><text x="85.2241%" y="175.50"></text></g><g><title>param_env (406,263 samples, 0.16%)</title><rect x="85.2721%" y="165" width="0.1594%" height="15" fill="rgb(221,78,26)"/><text x="85.5221%" y="175.50"></text></g><g><title>trait_impls_of (841,700 samples, 0.33%)</title><rect x="85.4913%" y="165" width="0.3302%" height="15" fill="rgb(250,127,30)"/><text x="85.7413%" y="175.50"></text></g><g><title>analysis (218,320,254 samples, 85.64%)</title><rect x="0.2297%" y="229" width="85.6439%" height="15" fill="rgb(230,49,44)"/><text x="0.4797%" y="239.50">analysis</text></g><g><title>type_check_crate (125,074,473 samples, 49.06%)</title><rect x="36.8087%" y="213" width="49.0649%" height="15" fill="rgb(229,67,23)"/><text x="37.0587%" y="223.50">type_check_crate</text></g><g><title>wf_checking (10,893,372 samples, 4.27%)</title><rect x="81.6003%" y="197" width="4.2733%" height="15" fill="rgb(249,83,47)"/><text x="81.8503%" y="207.50">wf_ch..</text></g><g><title>check_item_well_formed (5,407,789 samples, 2.12%)</title><rect x="83.7522%" y="181" width="2.1214%" height="15" fill="rgb(215,43,3)"/><text x="84.0022%" y="191.50">c..</text></g><g><title>codegen_crate (520,196 samples, 0.20%)</title><rect x="85.8764%" y="229" width="0.2041%" height="15" fill="rgb(238,154,13)"/><text x="86.1264%" y="239.50"></text></g><g><title>metadata_register_crate (1,436,937 samples, 0.56%)</title><rect x="89.9796%" y="181" width="0.5637%" height="15" fill="rgb(219,56,2)"/><text x="90.2296%" y="191.50"></text></g><g><title>metadata_register_crate (1,002,611 samples, 0.39%)</title><rect x="90.1500%" y="165" width="0.3933%" height="15" fill="rgb(233,0,4)"/><text x="90.4000%" y="175.50"></text></g><g><title>metadata_register_crate (410,234 samples, 0.16%)</title><rect x="90.3824%" y="149" width="0.1609%" height="15" fill="rgb(235,30,7)"/><text x="90.6324%" y="159.50"></text></g><g><title>macro_expand_crate (10,987,112 samples, 4.31%)</title><rect x="86.2741%" y="213" width="4.3101%" height="15" fill="rgb(250,79,13)"/><text x="86.5241%" y="223.50">macro..</text></g><g><title>expand_crate (10,977,782 samples, 4.31%)</title><rect x="86.2778%" y="197" width="4.3064%" height="15" fill="rgb(211,146,34)"/><text x="86.5278%" y="207.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (262,113 samples, 0.10%)</title><rect x="90.5857%" y="213" width="0.1028%" height="15" fill="rgb(228,22,38)"/><text x="90.8357%" y="223.50"></text></g><g><title>late_resolve_crate (4,163,826 samples, 1.63%)</title><rect x="90.7476%" y="197" width="1.6334%" height="15" fill="rgb(235,168,5)"/><text x="90.9976%" y="207.50"></text></g><g><title>configure_and_expand (16,248,380 samples, 6.37%)</title><rect x="86.0804%" y="229" width="6.3740%" height="15" fill="rgb(221,155,16)"/><text x="86.3304%" y="239.50">configur..</text></g><g><title>resolve_crate (4,501,600 samples, 1.77%)</title><rect x="90.6885%" y="213" width="1.7659%" height="15" fill="rgb(215,215,53)"/><text x="90.9385%" y="223.50"></text></g><g><title>drop_ast (294,293 samples, 0.12%)</title><rect x="92.4544%" y="229" width="0.1154%" height="15" fill="rgb(223,4,10)"/><text x="92.7044%" y="239.50"></text></g><g><title>early_lint_checks (570,176 samples, 0.22%)</title><rect x="92.5777%" y="229" width="0.2237%" height="15" fill="rgb(234,103,6)"/><text x="92.8277%" y="239.50"></text></g><g><title>free_global_ctxt (5,155,197 samples, 2.02%)</title><rect x="92.8014%" y="229" width="2.0223%" height="15" fill="rgb(227,97,0)"/><text x="93.0514%" y="239.50">f..</text></g><g><title>generate_crate_metadata (1,604,278 samples, 0.63%)</title><rect x="94.8237%" y="229" width="0.6293%" height="15" fill="rgb(234,150,53)"/><text x="95.0737%" y="239.50"></text></g><g><title>hir_lowering (4,982,155 samples, 1.95%)</title><rect x="95.4530%" y="229" width="1.9544%" height="15" fill="rgb(228,201,54)"/><text x="95.7030%" y="239.50">h..</text></g><g><title>parse_crate (4,678,191 samples, 1.84%)</title><rect x="97.4307%" y="229" width="1.8352%" height="15" fill="rgb(222,22,37)"/><text x="97.6807%" y="239.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,259,613 samples, 0.49%)</title><rect x="99.3345%" y="229" width="0.4941%" height="15" fill="rgb(237,53,32)"/><text x="99.5845%" y="239.50"></text></g><g><title>all (254,916,279 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (254,916,279 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (346,644 samples, 0.14%)</title><rect x="99.8640%" y="229" width="0.1360%" height="15" fill="rgb(241,220,44)"/><text x="100.1140%" y="239.50"></text></g></svg></svg>