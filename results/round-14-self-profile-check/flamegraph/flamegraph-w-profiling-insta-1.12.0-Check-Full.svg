<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (987,110 samples, 0.15%)</title><rect x="14.8939%" y="149" width="0.1533%" height="15" fill="rgb(227,0,7)"/><text x="15.1439%" y="159.50"></text></g><g><title>param_env (1,457,664 samples, 0.23%)</title><rect x="16.7113%" y="117" width="0.2264%" height="15" fill="rgb(217,0,24)"/><text x="16.9613%" y="127.50"></text></g><g><title>item_attrs (1,283,557 samples, 0.20%)</title><rect x="17.4783%" y="85" width="0.1993%" height="15" fill="rgb(221,193,54)"/><text x="17.7283%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,239,975 samples, 0.19%)</title><rect x="17.4851%" y="69" width="0.1926%" height="15" fill="rgb(248,212,6)"/><text x="17.7351%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,767,672 samples, 0.27%)</title><rect x="17.4158%" y="101" width="0.2745%" height="15" fill="rgb(208,68,35)"/><text x="17.6658%" y="111.50"></text></g><g><title>is_copy_raw (661,807 samples, 0.10%)</title><rect x="20.8811%" y="85" width="0.1028%" height="15" fill="rgb(232,128,0)"/><text x="21.1311%" y="95.50"></text></g><g><title>adt_drop_tys (673,547 samples, 0.10%)</title><rect x="21.1444%" y="53" width="0.1046%" height="15" fill="rgb(207,160,47)"/><text x="21.3944%" y="63.50"></text></g><g><title>adt_drop_tys (1,727,046 samples, 0.27%)</title><rect x="21.1188%" y="69" width="0.2682%" height="15" fill="rgb(228,23,34)"/><text x="21.3688%" y="79.50"></text></g><g><title>is_copy_raw (5,476,867 samples, 0.85%)</title><rect x="21.3876%" y="69" width="0.8505%" height="15" fill="rgb(218,30,26)"/><text x="21.6376%" y="79.50"></text></g><g><title>evaluate_obligation (4,439,346 samples, 0.69%)</title><rect x="21.5487%" y="53" width="0.6894%" height="15" fill="rgb(220,122,19)"/><text x="21.7987%" y="63.50"></text></g><g><title>needs_drop_raw (8,163,345 samples, 1.27%)</title><rect x="20.9847%" y="85" width="1.2677%" height="15" fill="rgb(250,228,42)"/><text x="21.2347%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,281,905 samples, 0.20%)</title><rect x="22.3854%" y="69" width="0.1991%" height="15" fill="rgb(240,193,28)"/><text x="22.6354%" y="79.50"></text></g><g><title>specialization_graph_of (2,048,983 samples, 0.32%)</title><rect x="22.6209%" y="69" width="0.3182%" height="15" fill="rgb(216,20,37)"/><text x="22.8709%" y="79.50"></text></g><g><title>impl_trait_ref (921,158 samples, 0.14%)</title><rect x="22.7960%" y="53" width="0.1430%" height="15" fill="rgb(206,188,39)"/><text x="23.0460%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (819,128 samples, 0.13%)</title><rect x="22.8119%" y="37" width="0.1272%" height="15" fill="rgb(217,207,13)"/><text x="23.0619%" y="47.50"></text></g><g><title>resolve_instance (4,721,805 samples, 0.73%)</title><rect x="22.2591%" y="85" width="0.7333%" height="15" fill="rgb(231,73,38)"/><text x="22.5091%" y="95.50"></text></g><g><title>thir_body (7,541,029 samples, 1.17%)</title><rect x="23.0159%" y="85" width="1.1711%" height="15" fill="rgb(225,20,46)"/><text x="23.2659%" y="95.50"></text></g><g><title>mir_const (53,314,284 samples, 8.28%)</title><rect x="15.9533%" y="133" width="8.2793%" height="15" fill="rgb(210,31,41)"/><text x="16.2033%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (46,975,312 samples, 7.29%)</title><rect x="16.9377%" y="117" width="7.2949%" height="15" fill="rgb(221,200,47)"/><text x="17.1877%" y="127.50">unsafety_c..</text></g><g><title>mir_built (42,128,657 samples, 6.54%)</title><rect x="17.6903%" y="101" width="6.5423%" height="15" fill="rgb(226,26,5)"/><text x="17.9403%" y="111.50">mir_built</text></g><g><title>mir_const (675,210 samples, 0.10%)</title><rect x="24.4285%" y="117" width="0.1049%" height="15" fill="rgb(249,33,26)"/><text x="24.6785%" y="127.50"></text></g><g><title>mir_const_qualif (2,217,077 samples, 0.34%)</title><rect x="24.2326%" y="133" width="0.3443%" height="15" fill="rgb(235,183,28)"/><text x="24.4826%" y="143.50"></text></g><g><title>mir_promoted (60,854,406 samples, 9.45%)</title><rect x="15.1268%" y="149" width="9.4502%" height="15" fill="rgb(221,5,38)"/><text x="15.3768%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,483,217 samples, 0.54%)</title><rect x="24.5770%" y="149" width="0.5409%" height="15" fill="rgb(247,18,42)"/><text x="24.8270%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (4,206,021 samples, 0.65%)</title><rect x="25.1179%" y="149" width="0.6532%" height="15" fill="rgb(241,131,45)"/><text x="25.3679%" y="159.50"></text></g><g><title>normalize_projection_ty (2,395,747 samples, 0.37%)</title><rect x="25.3990%" y="133" width="0.3720%" height="15" fill="rgb(249,31,29)"/><text x="25.6490%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,232,136 samples, 0.19%)</title><rect x="25.7711%" y="149" width="0.1913%" height="15" fill="rgb(225,111,53)"/><text x="26.0211%" y="159.50"></text></g><g><title>normalize_projection_ty (702,310 samples, 0.11%)</title><rect x="25.8533%" y="133" width="0.1091%" height="15" fill="rgb(238,160,17)"/><text x="26.1033%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,126,054 samples, 0.17%)</title><rect x="25.9624%" y="149" width="0.1749%" height="15" fill="rgb(214,148,48)"/><text x="26.2124%" y="159.50"></text></g><g><title>type_op_prove_predicate (16,183,124 samples, 2.51%)</title><rect x="26.1373%" y="149" width="2.5131%" height="15" fill="rgb(232,36,49)"/><text x="26.3873%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (181,655,150 samples, 28.21%)</title><rect x="0.4464%" y="181" width="28.2096%" height="15" fill="rgb(209,103,24)"/><text x="0.6964%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (180,991,238 samples, 28.11%)</title><rect x="0.5495%" y="165" width="28.1065%" height="15" fill="rgb(229,88,8)"/><text x="0.7995%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (694,538 samples, 0.11%)</title><rect x="28.6560%" y="181" width="0.1079%" height="15" fill="rgb(213,181,19)"/><text x="28.9060%" y="191.50"></text></g><g><title>hir_module_items (967,040 samples, 0.15%)</title><rect x="28.7639%" y="181" width="0.1502%" height="15" fill="rgb(254,191,54)"/><text x="29.0139%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,101,291 samples, 0.17%)</title><rect x="29.1036%" y="149" width="0.1710%" height="15" fill="rgb(241,83,37)"/><text x="29.3536%" y="159.50"></text></g><g><title>should_inherit_track_caller (958,351 samples, 0.15%)</title><rect x="29.1258%" y="133" width="0.1488%" height="15" fill="rgb(233,36,39)"/><text x="29.3758%" y="143.50"></text></g><g><title>check_mod_attrs (2,272,785 samples, 0.35%)</title><rect x="28.9217%" y="165" width="0.3529%" height="15" fill="rgb(226,3,54)"/><text x="29.1717%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,528,597 samples, 0.24%)</title><rect x="29.4179%" y="165" width="0.2374%" height="15" fill="rgb(245,192,40)"/><text x="29.6679%" y="175.50"></text></g><g><title>misc_checking_1 (4,927,684 samples, 0.77%)</title><rect x="28.9142%" y="181" width="0.7652%" height="15" fill="rgb(238,167,29)"/><text x="29.1642%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,894,943 samples, 0.45%)</title><rect x="29.6798%" y="165" width="0.4496%" height="15" fill="rgb(232,182,51)"/><text x="29.9298%" y="175.50"></text></g><g><title>check_mod_liveness (2,341,135 samples, 0.36%)</title><rect x="29.7658%" y="149" width="0.3636%" height="15" fill="rgb(231,60,39)"/><text x="30.0158%" y="159.50"></text></g><g><title>misc_checking_2 (8,274,232 samples, 1.28%)</title><rect x="29.6794%" y="181" width="1.2849%" height="15" fill="rgb(208,69,12)"/><text x="29.9294%" y="191.50"></text></g><g><title>match_checking (5,376,939 samples, 0.83%)</title><rect x="30.1293%" y="165" width="0.8350%" height="15" fill="rgb(235,93,37)"/><text x="30.3793%" y="175.50"></text></g><g><title>check_match (5,217,204 samples, 0.81%)</title><rect x="30.1541%" y="149" width="0.8102%" height="15" fill="rgb(213,116,39)"/><text x="30.4041%" y="159.50"></text></g><g><title>check_private_in_public (990,761 samples, 0.15%)</title><rect x="30.9662%" y="165" width="0.1539%" height="15" fill="rgb(222,207,29)"/><text x="31.2162%" y="175.50"></text></g><g><title>death_checking (1,858,231 samples, 0.29%)</title><rect x="31.1201%" y="165" width="0.2886%" height="15" fill="rgb(206,96,30)"/><text x="31.3701%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,556,817 samples, 0.24%)</title><rect x="31.8911%" y="133" width="0.2418%" height="15" fill="rgb(218,138,4)"/><text x="32.1411%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,549,587 samples, 0.24%)</title><rect x="31.8922%" y="117" width="0.2406%" height="15" fill="rgb(250,191,14)"/><text x="32.1422%" y="127.50"></text></g><g><title>eval_to_const_value_raw (699,156 samples, 0.11%)</title><rect x="32.1328%" y="133" width="0.1086%" height="15" fill="rgb(239,60,40)"/><text x="32.3828%" y="143.50"></text></g><g><title>eval_to_const_value_raw (687,746 samples, 0.11%)</title><rect x="32.1346%" y="117" width="0.1068%" height="15" fill="rgb(206,27,48)"/><text x="32.3846%" y="127.50"></text></g><g><title>eval_to_allocation_raw (669,156 samples, 0.10%)</title><rect x="32.1375%" y="101" width="0.1039%" height="15" fill="rgb(225,35,8)"/><text x="32.3875%" y="111.50"></text></g><g><title>param_env (1,279,810 samples, 0.20%)</title><rect x="32.2414%" y="133" width="0.1987%" height="15" fill="rgb(250,213,24)"/><text x="32.4914%" y="143.50"></text></g><g><title>predicates_of (654,546 samples, 0.10%)</title><rect x="32.3385%" y="117" width="0.1016%" height="15" fill="rgb(247,123,22)"/><text x="32.5885%" y="127.50"></text></g><g><title>crate_lints (8,263,992 samples, 1.28%)</title><rect x="31.4092%" y="149" width="1.2833%" height="15" fill="rgb(231,138,38)"/><text x="31.6592%" y="159.50"></text></g><g><title>type_of (1,357,443 samples, 0.21%)</title><rect x="32.4818%" y="133" width="0.2108%" height="15" fill="rgb(231,145,46)"/><text x="32.7318%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,092,052 samples, 0.17%)</title><rect x="32.5230%" y="117" width="0.1696%" height="15" fill="rgb(251,118,11)"/><text x="32.7730%" y="127.50"></text></g><g><title>lint_checking (11,878,992 samples, 1.84%)</title><rect x="31.4087%" y="165" width="1.8447%" height="15" fill="rgb(217,147,25)"/><text x="31.6587%" y="175.50">l..</text></g><g><title>module_lints (3,611,300 samples, 0.56%)</title><rect x="32.6926%" y="149" width="0.5608%" height="15" fill="rgb(247,81,37)"/><text x="32.9426%" y="159.50"></text></g><g><title>lint_mod (3,596,620 samples, 0.56%)</title><rect x="32.6948%" y="133" width="0.5585%" height="15" fill="rgb(209,12,38)"/><text x="32.9448%" y="143.50"></text></g><g><title>privacy_access_levels (1,603,398 samples, 0.25%)</title><rect x="33.2534%" y="165" width="0.2490%" height="15" fill="rgb(227,1,9)"/><text x="33.5034%" y="175.50"></text></g><g><title>privacy_checking_modules (6,115,128 samples, 0.95%)</title><rect x="33.5024%" y="165" width="0.9496%" height="15" fill="rgb(248,47,43)"/><text x="33.7524%" y="175.50"></text></g><g><title>check_mod_privacy (6,104,327 samples, 0.95%)</title><rect x="33.5040%" y="149" width="0.9480%" height="15" fill="rgb(221,10,30)"/><text x="33.7540%" y="159.50"></text></g><g><title>misc_checking_3 (22,488,630 samples, 3.49%)</title><rect x="30.9643%" y="181" width="3.4923%" height="15" fill="rgb(210,229,1)"/><text x="31.2143%" y="191.50">mis..</text></g><g><title>impl_parent (3,384,151 samples, 0.53%)</title><rect x="35.5740%" y="117" width="0.5255%" height="15" fill="rgb(222,148,37)"/><text x="35.8240%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,957,469 samples, 0.30%)</title><rect x="35.7955%" y="101" width="0.3040%" height="15" fill="rgb(234,67,33)"/><text x="36.0455%" y="111.50"></text></g><g><title>impl_trait_ref (7,403,984 samples, 1.15%)</title><rect x="36.0995%" y="117" width="1.1498%" height="15" fill="rgb(247,98,35)"/><text x="36.3495%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,932,668 samples, 0.92%)</title><rect x="36.3280%" y="101" width="0.9213%" height="15" fill="rgb(247,138,52)"/><text x="36.5780%" y="111.50"></text></g><g><title>trait_impls_of (1,351,635 samples, 0.21%)</title><rect x="37.2532%" y="117" width="0.2099%" height="15" fill="rgb(213,79,30)"/><text x="37.5032%" y="127.50"></text></g><g><title>coherent_trait (19,051,322 samples, 2.96%)</title><rect x="34.5047%" y="149" width="2.9585%" height="15" fill="rgb(246,177,23)"/><text x="34.7547%" y="159.50">coh..</text></g><g><title>specialization_graph_of (18,612,668 samples, 2.89%)</title><rect x="34.5729%" y="133" width="2.8904%" height="15" fill="rgb(230,62,27)"/><text x="34.8229%" y="143.50">sp..</text></g><g><title>coherence_checking (19,222,344 samples, 2.99%)</title><rect x="34.5002%" y="165" width="2.9851%" height="15" fill="rgb(216,154,8)"/><text x="34.7502%" y="175.50">coh..</text></g><g><title>associated_item (1,607,624 samples, 0.25%)</title><rect x="58.2656%" y="101" width="0.2497%" height="15" fill="rgb(244,35,45)"/><text x="58.5156%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,080,618 samples, 0.17%)</title><rect x="58.3474%" y="85" width="0.1678%" height="15" fill="rgb(251,115,12)"/><text x="58.5974%" y="95.50"></text></g><g><title>associated_items (2,190,138 samples, 0.34%)</title><rect x="58.1855%" y="117" width="0.3401%" height="15" fill="rgb(240,54,50)"/><text x="58.4355%" y="127.50"></text></g><g><title>dropck_outlives (2,230,056 samples, 0.35%)</title><rect x="58.5663%" y="117" width="0.3463%" height="15" fill="rgb(233,84,52)"/><text x="58.8163%" y="127.50"></text></g><g><title>predicates_of (656,888 samples, 0.10%)</title><rect x="59.7861%" y="101" width="0.1020%" height="15" fill="rgb(207,117,47)"/><text x="60.0361%" y="111.50"></text></g><g><title>trait_impls_of (711,258 samples, 0.11%)</title><rect x="59.9682%" y="101" width="0.1105%" height="15" fill="rgb(249,43,39)"/><text x="60.2182%" y="111.50"></text></g><g><title>evaluate_obligation (7,511,336 samples, 1.17%)</title><rect x="58.9126%" y="117" width="1.1665%" height="15" fill="rgb(209,38,44)"/><text x="59.1626%" y="127.50"></text></g><g><title>evaluate_obligation (759,468 samples, 0.12%)</title><rect x="60.4968%" y="101" width="0.1179%" height="15" fill="rgb(236,212,23)"/><text x="60.7468%" y="111.50"></text></g><g><title>method_autoderef_steps (1,476,488 samples, 0.23%)</title><rect x="60.3867%" y="117" width="0.2293%" height="15" fill="rgb(242,79,21)"/><text x="60.6367%" y="127.50"></text></g><g><title>predicates_of (1,038,879 samples, 0.16%)</title><rect x="60.6673%" y="117" width="0.1613%" height="15" fill="rgb(211,96,35)"/><text x="60.9173%" y="127.50"></text></g><g><title>predicates_defined_on (705,419 samples, 0.11%)</title><rect x="60.7191%" y="101" width="0.1095%" height="15" fill="rgb(253,215,40)"/><text x="60.9691%" y="111.50"></text></g><g><title>adt_dtorck_constraint (942,779 samples, 0.15%)</title><rect x="67.7207%" y="85" width="0.1464%" height="15" fill="rgb(211,81,21)"/><text x="67.9707%" y="95.50"></text></g><g><title>dropck_outlives (1,621,160 samples, 0.25%)</title><rect x="67.6342%" y="101" width="0.2518%" height="15" fill="rgb(208,190,38)"/><text x="67.8842%" y="111.50"></text></g><g><title>evaluate_obligation (5,641,372 samples, 0.88%)</title><rect x="67.8859%" y="101" width="0.8761%" height="15" fill="rgb(235,213,38)"/><text x="68.1359%" y="111.50"></text></g><g><title>evaluate_obligation (850,007 samples, 0.13%)</title><rect x="69.1765%" y="85" width="0.1320%" height="15" fill="rgb(237,122,38)"/><text x="69.4265%" y="95.50"></text></g><g><title>method_autoderef_steps (1,791,510 samples, 0.28%)</title><rect x="69.0354%" y="101" width="0.2782%" height="15" fill="rgb(244,218,35)"/><text x="69.2854%" y="111.50"></text></g><g><title>predicates_of (650,299 samples, 0.10%)</title><rect x="69.3228%" y="101" width="0.1010%" height="15" fill="rgb(240,68,47)"/><text x="69.5728%" y="111.50"></text></g><g><title>typeck (55,384,286 samples, 8.60%)</title><rect x="60.8861%" y="117" width="8.6007%" height="15" fill="rgb(210,16,53)"/><text x="61.1361%" y="127.50">typeck</text></g><g><title>item_bodies_checking (206,136,363 samples, 32.01%)</title><rect x="37.5016%" y="165" width="32.0114%" height="15" fill="rgb(235,124,12)"/><text x="37.7516%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (206,131,843 samples, 32.01%)</title><rect x="37.5023%" y="149" width="32.0107%" height="15" fill="rgb(224,169,11)"/><text x="37.7523%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (205,752,482 samples, 31.95%)</title><rect x="37.5612%" y="133" width="31.9518%" height="15" fill="rgb(250,166,2)"/><text x="37.8112%" y="143.50">typeck</text></g><g><title>layout_of (646,987 samples, 0.10%)</title><rect x="70.4761%" y="133" width="0.1005%" height="15" fill="rgb(242,216,29)"/><text x="70.7261%" y="143.50"></text></g><g><title>mir_const (682,878 samples, 0.11%)</title><rect x="70.7014%" y="85" width="0.1060%" height="15" fill="rgb(230,116,27)"/><text x="70.9514%" y="95.50"></text></g><g><title>mir_promoted (752,248 samples, 0.12%)</title><rect x="70.6915%" y="101" width="0.1168%" height="15" fill="rgb(228,99,48)"/><text x="70.9415%" y="111.50"></text></g><g><title>type_of (1,259,745 samples, 0.20%)</title><rect x="70.6166%" y="133" width="0.1956%" height="15" fill="rgb(253,11,6)"/><text x="70.8666%" y="143.50"></text></g><g><title>mir_borrowck (1,245,314 samples, 0.19%)</title><rect x="70.6189%" y="117" width="0.1934%" height="15" fill="rgb(247,143,39)"/><text x="70.8689%" y="127.50"></text></g><g><title>item_types_checking (13,914,415 samples, 2.16%)</title><rect x="69.5130%" y="165" width="2.1608%" height="15" fill="rgb(236,97,10)"/><text x="69.7630%" y="175.50">i..</text></g><g><title>check_mod_item_types (13,901,075 samples, 2.16%)</title><rect x="69.5151%" y="149" width="2.1587%" height="15" fill="rgb(233,208,19)"/><text x="69.7651%" y="159.50">c..</text></g><g><title>typeck (5,547,812 samples, 0.86%)</title><rect x="70.8123%" y="133" width="0.8615%" height="15" fill="rgb(216,164,2)"/><text x="71.0623%" y="143.50"></text></g><g><title>fn_sig (1,550,504 samples, 0.24%)</title><rect x="71.8979%" y="133" width="0.2408%" height="15" fill="rgb(220,129,5)"/><text x="72.1479%" y="143.50"></text></g><g><title>lint_levels (896,930 samples, 0.14%)</title><rect x="72.3052%" y="85" width="0.1393%" height="15" fill="rgb(242,17,10)"/><text x="72.5552%" y="95.50"></text></g><g><title>is_late_bound_map (1,526,348 samples, 0.24%)</title><rect x="72.2078%" y="117" width="0.2370%" height="15" fill="rgb(242,107,0)"/><text x="72.4578%" y="127.50"></text></g><g><title>resolve_lifetimes (1,487,477 samples, 0.23%)</title><rect x="72.2138%" y="101" width="0.2310%" height="15" fill="rgb(251,28,31)"/><text x="72.4638%" y="111.50"></text></g><g><title>named_region_map (703,871 samples, 0.11%)</title><rect x="72.4448%" y="117" width="0.1093%" height="15" fill="rgb(233,223,10)"/><text x="72.6948%" y="127.50"></text></g><g><title>resolve_lifetimes (648,769 samples, 0.10%)</title><rect x="72.4534%" y="101" width="0.1007%" height="15" fill="rgb(215,21,27)"/><text x="72.7034%" y="111.50"></text></g><g><title>generics_of (2,722,184 samples, 0.42%)</title><rect x="72.1386%" y="133" width="0.4227%" height="15" fill="rgb(232,23,21)"/><text x="72.3886%" y="143.50"></text></g><g><title>explicit_predicates_of (950,039 samples, 0.15%)</title><rect x="72.6781%" y="101" width="0.1475%" height="15" fill="rgb(244,5,23)"/><text x="72.9281%" y="111.50"></text></g><g><title>predicates_of (2,282,079 samples, 0.35%)</title><rect x="72.5858%" y="133" width="0.3544%" height="15" fill="rgb(226,81,46)"/><text x="72.8358%" y="143.50"></text></g><g><title>predicates_defined_on (2,057,798 samples, 0.32%)</title><rect x="72.6206%" y="117" width="0.3196%" height="15" fill="rgb(247,70,30)"/><text x="72.8706%" y="127.50"></text></g><g><title>inferred_outlives_of (737,408 samples, 0.11%)</title><rect x="72.8257%" y="101" width="0.1145%" height="15" fill="rgb(212,68,19)"/><text x="73.0757%" y="111.50"></text></g><g><title>inferred_outlives_crate (657,007 samples, 0.10%)</title><rect x="72.8381%" y="85" width="0.1020%" height="15" fill="rgb(240,187,13)"/><text x="73.0881%" y="95.50"></text></g><g><title>type_collecting (8,591,826 samples, 1.33%)</title><rect x="71.6751%" y="165" width="1.3342%" height="15" fill="rgb(223,113,26)"/><text x="71.9251%" y="175.50"></text></g><g><title>collect_mod_item_types (8,560,476 samples, 1.33%)</title><rect x="71.6799%" y="149" width="1.3294%" height="15" fill="rgb(206,192,2)"/><text x="71.9299%" y="159.50"></text></g><g><title>evaluate_obligation (1,289,741 samples, 0.20%)</title><rect x="74.3076%" y="133" width="0.2003%" height="15" fill="rgb(241,108,4)"/><text x="74.5576%" y="143.50"></text></g><g><title>implied_outlives_bounds (960,031 samples, 0.15%)</title><rect x="74.5165%" y="133" width="0.1491%" height="15" fill="rgb(247,173,49)"/><text x="74.7665%" y="143.50"></text></g><g><title>param_env (1,346,725 samples, 0.21%)</title><rect x="74.7439%" y="133" width="0.2091%" height="15" fill="rgb(224,114,35)"/><text x="74.9939%" y="143.50"></text></g><g><title>region_scope_tree (2,018,903 samples, 0.31%)</title><rect x="74.9773%" y="133" width="0.3135%" height="15" fill="rgb(245,159,27)"/><text x="75.2273%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,976,772 samples, 2.17%)</title><rect x="73.1460%" y="149" width="2.1705%" height="15" fill="rgb(245,172,44)"/><text x="73.3960%" y="159.50">c..</text></g><g><title>evaluate_obligation (1,928,555 samples, 0.30%)</title><rect x="75.9570%" y="133" width="0.2995%" height="15" fill="rgb(236,23,11)"/><text x="76.2070%" y="143.50"></text></g><g><title>param_env (707,835 samples, 0.11%)</title><rect x="76.3125%" y="133" width="0.1099%" height="15" fill="rgb(205,117,38)"/><text x="76.5625%" y="143.50"></text></g><g><title>analysis (491,818,190 samples, 76.38%)</title><rect x="0.2111%" y="197" width="76.3755%" height="15" fill="rgb(237,72,25)"/><text x="0.4611%" y="207.50">analysis</text></g><g><title>type_check_crate (271,294,758 samples, 42.13%)</title><rect x="34.4566%" y="181" width="42.1300%" height="15" fill="rgb(244,70,9)"/><text x="34.7066%" y="191.50">type_check_crate</text></g><g><title>wf_checking (23,007,266 samples, 3.57%)</title><rect x="73.0137%" y="165" width="3.5728%" height="15" fill="rgb(217,125,39)"/><text x="73.2637%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (8,178,673 samples, 1.27%)</title><rect x="75.3165%" y="149" width="1.2701%" height="15" fill="rgb(235,36,10)"/><text x="75.5665%" y="159.50"></text></g><g><title>AST_validation (675,297 samples, 0.10%)</title><rect x="76.7164%" y="181" width="0.1049%" height="15" fill="rgb(251,123,47)"/><text x="76.9664%" y="191.50"></text></g><g><title>metadata_register_crate (5,292,388 samples, 0.82%)</title><rect x="91.0049%" y="149" width="0.8219%" height="15" fill="rgb(221,13,13)"/><text x="91.2549%" y="159.50"></text></g><g><title>metadata_register_crate (3,344,967 samples, 0.52%)</title><rect x="91.3074%" y="133" width="0.5194%" height="15" fill="rgb(238,131,9)"/><text x="91.5574%" y="143.50"></text></g><g><title>macro_expand_crate (97,536,105 samples, 15.15%)</title><rect x="76.8851%" y="181" width="15.1466%" height="15" fill="rgb(211,50,8)"/><text x="77.1351%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (97,506,295 samples, 15.14%)</title><rect x="76.8897%" y="165" width="15.1420%" height="15" fill="rgb(245,182,24)"/><text x="77.1397%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,319,175 samples, 0.20%)</title><rect x="91.8268%" y="149" width="0.2049%" height="15" fill="rgb(242,14,37)"/><text x="92.0768%" y="159.50"></text></g><g><title>late_resolve_crate (10,842,001 samples, 1.68%)</title><rect x="92.1282%" y="165" width="1.6837%" height="15" fill="rgb(246,228,12)"/><text x="92.3782%" y="175.50"></text></g><g><title>configure_and_expand (111,013,894 samples, 17.24%)</title><rect x="76.6853%" y="197" width="17.2396%" height="15" fill="rgb(213,55,15)"/><text x="76.9353%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (12,128,395 samples, 1.88%)</title><rect x="92.0414%" y="181" width="1.8834%" height="15" fill="rgb(209,9,3)"/><text x="92.2914%" y="191.50">r..</text></g><g><title>drop_ast (1,092,352 samples, 0.17%)</title><rect x="93.9249%" y="197" width="0.1696%" height="15" fill="rgb(230,59,30)"/><text x="94.1749%" y="207.50"></text></g><g><title>early_lint_checks (2,784,452 samples, 0.43%)</title><rect x="94.0983%" y="197" width="0.4324%" height="15" fill="rgb(209,121,21)"/><text x="94.3483%" y="207.50"></text></g><g><title>free_global_ctxt (7,543,454 samples, 1.17%)</title><rect x="94.5307%" y="197" width="1.1714%" height="15" fill="rgb(220,109,13)"/><text x="94.7807%" y="207.50"></text></g><g><title>generate_crate_metadata (7,061,158 samples, 1.10%)</title><rect x="95.7021%" y="197" width="1.0965%" height="15" fill="rgb(232,18,1)"/><text x="95.9521%" y="207.50"></text></g><g><title>hir_lowering (16,913,307 samples, 2.63%)</title><rect x="96.7987%" y="197" width="2.6265%" height="15" fill="rgb(215,41,42)"/><text x="97.0487%" y="207.50">hi..</text></g><g><title>parse_crate (644,997 samples, 0.10%)</title><rect x="99.4425%" y="197" width="0.1002%" height="15" fill="rgb(224,123,36)"/><text x="99.6925%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,992,582 samples, 0.31%)</title><rect x="99.5768%" y="197" width="0.3094%" height="15" fill="rgb(240,125,3)"/><text x="99.8268%" y="207.50"></text></g><g><title>all (643,947,312 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (643,947,312 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>