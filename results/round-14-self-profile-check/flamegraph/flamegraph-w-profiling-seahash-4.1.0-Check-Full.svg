<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (217,391 samples, 0.28%)</title><rect x="10.6372%" y="117" width="0.2836%" height="15" fill="rgb(227,0,7)"/><text x="10.8872%" y="127.50"></text></g><g><title>item_attrs (275,033 samples, 0.36%)</title><rect x="11.4346%" y="85" width="0.3588%" height="15" fill="rgb(217,0,24)"/><text x="11.6846%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (266,963 samples, 0.35%)</title><rect x="11.4451%" y="69" width="0.3483%" height="15" fill="rgb(221,193,54)"/><text x="11.6951%" y="79.50"></text></g><g><title>codegen_fn_attrs (365,863 samples, 0.48%)</title><rect x="11.3321%" y="101" width="0.4773%" height="15" fill="rgb(248,212,6)"/><text x="11.5821%" y="111.50"></text></g><g><title>is_copy_raw (249,043 samples, 0.32%)</title><rect x="14.5593%" y="85" width="0.3249%" height="15" fill="rgb(208,68,35)"/><text x="14.8093%" y="95.50"></text></g><g><title>evaluate_obligation (210,852 samples, 0.28%)</title><rect x="14.6092%" y="69" width="0.2751%" height="15" fill="rgb(232,128,0)"/><text x="14.8592%" y="79.50"></text></g><g><title>adt_drop_tys (86,162 samples, 0.11%)</title><rect x="14.9122%" y="69" width="0.1124%" height="15" fill="rgb(207,160,47)"/><text x="15.1622%" y="79.50"></text></g><g><title>needs_drop_raw (286,493 samples, 0.37%)</title><rect x="14.8842%" y="85" width="0.3737%" height="15" fill="rgb(228,23,34)"/><text x="15.1342%" y="95.50"></text></g><g><title>is_copy_raw (178,911 samples, 0.23%)</title><rect x="15.0246%" y="69" width="0.2334%" height="15" fill="rgb(218,30,26)"/><text x="15.2746%" y="79.50"></text></g><g><title>evaluate_obligation (156,371 samples, 0.20%)</title><rect x="15.0540%" y="53" width="0.2040%" height="15" fill="rgb(220,122,19)"/><text x="15.3040%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (96,922 samples, 0.13%)</title><rect x="15.3912%" y="69" width="0.1264%" height="15" fill="rgb(250,228,42)"/><text x="15.6412%" y="79.50"></text></g><g><title>specialization_graph_of (326,724 samples, 0.43%)</title><rect x="15.5534%" y="69" width="0.4262%" height="15" fill="rgb(240,193,28)"/><text x="15.8034%" y="79.50"></text></g><g><title>impl_trait_ref (154,583 samples, 0.20%)</title><rect x="15.7780%" y="53" width="0.2017%" height="15" fill="rgb(216,20,37)"/><text x="16.0280%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (131,993 samples, 0.17%)</title><rect x="15.8074%" y="37" width="0.1722%" height="15" fill="rgb(206,188,39)"/><text x="16.0574%" y="47.50"></text></g><g><title>resolve_instance (621,588 samples, 0.81%)</title><rect x="15.2580%" y="85" width="0.8109%" height="15" fill="rgb(217,207,13)"/><text x="15.5080%" y="95.50"></text></g><g><title>thir_body (890,049 samples, 1.16%)</title><rect x="16.0865%" y="85" width="1.1611%" height="15" fill="rgb(231,73,38)"/><text x="16.3365%" y="95.50"></text></g><g><title>mir_const (5,605,250 samples, 7.31%)</title><rect x="9.9465%" y="133" width="7.3122%" height="15" fill="rgb(225,20,46)"/><text x="10.1965%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,858,444 samples, 6.34%)</title><rect x="10.9208%" y="117" width="6.3380%" height="15" fill="rgb(210,31,41)"/><text x="11.1708%" y="127.50">unsafety..</text></g><g><title>mir_built (4,177,277 samples, 5.45%)</title><rect x="11.8094%" y="101" width="5.4494%" height="15" fill="rgb(221,200,47)"/><text x="12.0594%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (6,324,479 samples, 8.25%)</title><rect x="9.2909%" y="149" width="8.2505%" height="15" fill="rgb(226,26,5)"/><text x="9.5409%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (216,672 samples, 0.28%)</title><rect x="17.2587%" y="133" width="0.2827%" height="15" fill="rgb(249,33,26)"/><text x="17.5087%" y="143.50"></text></g><g><title>mir_const (156,051 samples, 0.20%)</title><rect x="17.3378%" y="117" width="0.2036%" height="15" fill="rgb(235,183,28)"/><text x="17.5878%" y="127.50"></text></g><g><title>unsafety_check_result (128,311 samples, 0.17%)</title><rect x="17.3740%" y="101" width="0.1674%" height="15" fill="rgb(221,5,38)"/><text x="17.6240%" y="111.50"></text></g><g><title>mir_built (102,351 samples, 0.13%)</title><rect x="17.4079%" y="85" width="0.1335%" height="15" fill="rgb(247,18,42)"/><text x="17.6579%" y="95.50"></text></g><g><title>type_op_normalize_fn_sig (266,502 samples, 0.35%)</title><rect x="17.5414%" y="149" width="0.3477%" height="15" fill="rgb(241,131,45)"/><text x="17.7914%" y="159.50"></text></g><g><title>normalize_projection_ty (141,651 samples, 0.18%)</title><rect x="17.7043%" y="133" width="0.1848%" height="15" fill="rgb(249,31,29)"/><text x="17.9543%" y="143.50"></text></g><g><title>MIR_borrow_checking (13,209,938 samples, 17.23%)</title><rect x="1.3882%" y="181" width="17.2327%" height="15" fill="rgb(225,111,53)"/><text x="1.6382%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,149,688 samples, 17.15%)</title><rect x="1.4668%" y="165" width="17.1541%" height="15" fill="rgb(238,160,17)"/><text x="1.7168%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (561,016 samples, 0.73%)</title><rect x="17.8891%" y="149" width="0.7319%" height="15" fill="rgb(214,148,48)"/><text x="18.1391%" y="159.50"></text></g><g><title>MIR_effect_checking (203,372 samples, 0.27%)</title><rect x="18.6209%" y="181" width="0.2653%" height="15" fill="rgb(232,36,49)"/><text x="18.8709%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (164,322 samples, 0.21%)</title><rect x="18.6719%" y="165" width="0.2144%" height="15" fill="rgb(209,103,24)"/><text x="18.9219%" y="175.50"></text></g><g><title>hir_module_items (135,841 samples, 0.18%)</title><rect x="18.8862%" y="181" width="0.1772%" height="15" fill="rgb(229,88,8)"/><text x="19.1362%" y="191.50"></text></g><g><title>codegen_fn_attrs (91,191 samples, 0.12%)</title><rect x="19.5256%" y="117" width="0.1190%" height="15" fill="rgb(213,181,19)"/><text x="19.7756%" y="127.50"></text></g><g><title>should_inherit_track_caller (154,201 samples, 0.20%)</title><rect x="19.4484%" y="133" width="0.2012%" height="15" fill="rgb(254,191,54)"/><text x="19.6984%" y="143.50"></text></g><g><title>codegen_fn_attrs (275,892 samples, 0.36%)</title><rect x="19.3140%" y="149" width="0.3599%" height="15" fill="rgb(241,83,37)"/><text x="19.5640%" y="159.50"></text></g><g><title>check_mod_attrs (444,615 samples, 0.58%)</title><rect x="19.0940%" y="165" width="0.5800%" height="15" fill="rgb(233,36,39)"/><text x="19.3440%" y="175.50"></text></g><g><title>check_mod_const_bodies (77,920 samples, 0.10%)</title><rect x="19.6740%" y="165" width="0.1016%" height="15" fill="rgb(226,3,54)"/><text x="19.9240%" y="175.50"></text></g><g><title>lookup_deprecation_entry (81,061 samples, 0.11%)</title><rect x="19.9826%" y="149" width="0.1057%" height="15" fill="rgb(245,192,40)"/><text x="20.2326%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (227,422 samples, 0.30%)</title><rect x="19.8405%" y="165" width="0.2967%" height="15" fill="rgb(238,167,29)"/><text x="20.0905%" y="175.50"></text></g><g><title>misc_checking_1 (862,439 samples, 1.13%)</title><rect x="19.0640%" y="181" width="1.1251%" height="15" fill="rgb(232,182,51)"/><text x="19.3140%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (331,583 samples, 0.43%)</title><rect x="20.1912%" y="165" width="0.4326%" height="15" fill="rgb(231,60,39)"/><text x="20.4412%" y="175.50"></text></g><g><title>check_mod_liveness (258,303 samples, 0.34%)</title><rect x="20.2868%" y="149" width="0.3370%" height="15" fill="rgb(208,69,12)"/><text x="20.5368%" y="159.50"></text></g><g><title>misc_checking_2 (706,087 samples, 0.92%)</title><rect x="20.1891%" y="181" width="0.9211%" height="15" fill="rgb(235,93,37)"/><text x="20.4391%" y="191.50"></text></g><g><title>match_checking (372,874 samples, 0.49%)</title><rect x="20.6237%" y="165" width="0.4864%" height="15" fill="rgb(213,116,39)"/><text x="20.8737%" y="175.50"></text></g><g><title>check_match (357,084 samples, 0.47%)</title><rect x="20.6443%" y="149" width="0.4658%" height="15" fill="rgb(222,207,29)"/><text x="20.8943%" y="159.50"></text></g><g><title>check_private_in_public (109,872 samples, 0.14%)</title><rect x="21.1223%" y="165" width="0.1433%" height="15" fill="rgb(206,96,30)"/><text x="21.3723%" y="175.50"></text></g><g><title>death_checking (200,452 samples, 0.26%)</title><rect x="21.2656%" y="165" width="0.2615%" height="15" fill="rgb(218,138,4)"/><text x="21.5156%" y="175.50"></text></g><g><title>param_env (112,323 samples, 0.15%)</title><rect x="22.0220%" y="133" width="0.1465%" height="15" fill="rgb(250,191,14)"/><text x="22.2720%" y="143.50"></text></g><g><title>crate_lints (1,031,962 samples, 1.35%)</title><rect x="21.5290%" y="149" width="1.3462%" height="15" fill="rgb(239,60,40)"/><text x="21.7790%" y="159.50"></text></g><g><title>type_of (473,226 samples, 0.62%)</title><rect x="22.2579%" y="133" width="0.6173%" height="15" fill="rgb(206,27,48)"/><text x="22.5079%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (392,675 samples, 0.51%)</title><rect x="22.3630%" y="117" width="0.5123%" height="15" fill="rgb(225,35,8)"/><text x="22.6130%" y="127.50"></text></g><g><title>lint_checking (1,332,815 samples, 1.74%)</title><rect x="21.5271%" y="165" width="1.7387%" height="15" fill="rgb(250,213,24)"/><text x="21.7771%" y="175.50"></text></g><g><title>module_lints (299,353 samples, 0.39%)</title><rect x="22.8753%" y="149" width="0.3905%" height="15" fill="rgb(247,123,22)"/><text x="23.1253%" y="159.50"></text></g><g><title>lint_mod (295,093 samples, 0.38%)</title><rect x="22.8808%" y="133" width="0.3850%" height="15" fill="rgb(231,138,38)"/><text x="23.1308%" y="143.50"></text></g><g><title>privacy_access_levels (135,961 samples, 0.18%)</title><rect x="23.2658%" y="165" width="0.1774%" height="15" fill="rgb(231,145,46)"/><text x="23.5158%" y="175.50"></text></g><g><title>privacy_checking_modules (364,394 samples, 0.48%)</title><rect x="23.4431%" y="165" width="0.4754%" height="15" fill="rgb(251,118,11)"/><text x="23.6931%" y="175.50"></text></g><g><title>check_mod_privacy (361,084 samples, 0.47%)</title><rect x="23.4475%" y="149" width="0.4710%" height="15" fill="rgb(217,147,25)"/><text x="23.6975%" y="159.50"></text></g><g><title>misc_checking_3 (2,170,794 samples, 2.83%)</title><rect x="21.1102%" y="181" width="2.8319%" height="15" fill="rgb(247,81,37)"/><text x="21.3602%" y="191.50">mi..</text></g><g><title>is_copy_raw (142,721 samples, 0.19%)</title><rect x="24.1009%" y="133" width="0.1862%" height="15" fill="rgb(209,12,38)"/><text x="24.3509%" y="143.50"></text></g><g><title>evaluate_obligation (119,751 samples, 0.16%)</title><rect x="24.1309%" y="117" width="0.1562%" height="15" fill="rgb(227,1,9)"/><text x="24.3809%" y="127.50"></text></g><g><title>param_env (127,071 samples, 0.17%)</title><rect x="24.2871%" y="133" width="0.1658%" height="15" fill="rgb(248,47,43)"/><text x="24.5371%" y="143.50"></text></g><g><title>impl_parent (294,423 samples, 0.38%)</title><rect x="25.0799%" y="117" width="0.3841%" height="15" fill="rgb(221,10,30)"/><text x="25.3299%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (181,912 samples, 0.24%)</title><rect x="25.2266%" y="101" width="0.2373%" height="15" fill="rgb(210,229,1)"/><text x="25.4766%" y="111.50"></text></g><g><title>impl_trait_ref (873,442 samples, 1.14%)</title><rect x="25.4639%" y="117" width="1.1394%" height="15" fill="rgb(222,148,37)"/><text x="25.7139%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (758,260 samples, 0.99%)</title><rect x="25.6142%" y="101" width="0.9892%" height="15" fill="rgb(234,67,33)"/><text x="25.8642%" y="111.50"></text></g><g><title>coherent_trait (2,100,634 samples, 2.74%)</title><rect x="24.0052%" y="149" width="2.7403%" height="15" fill="rgb(247,98,35)"/><text x="24.2552%" y="159.50">co..</text></g><g><title>specialization_graph_of (1,757,480 samples, 2.29%)</title><rect x="24.4529%" y="133" width="2.2927%" height="15" fill="rgb(247,138,52)"/><text x="24.7029%" y="143.50">s..</text></g><g><title>trait_impls_of (108,971 samples, 0.14%)</title><rect x="26.6034%" y="117" width="0.1422%" height="15" fill="rgb(213,79,30)"/><text x="26.8534%" y="127.50"></text></g><g><title>coherence_checking (2,150,404 samples, 2.81%)</title><rect x="23.9897%" y="165" width="2.8053%" height="15" fill="rgb(246,177,23)"/><text x="24.2397%" y="175.50">co..</text></g><g><title>adt_sized_constraint (118,800 samples, 0.15%)</title><rect x="43.7256%" y="117" width="0.1550%" height="15" fill="rgb(230,62,27)"/><text x="43.9756%" y="127.50"></text></g><g><title>associated_item (1,165,684 samples, 1.52%)</title><rect x="44.3813%" y="101" width="1.5207%" height="15" fill="rgb(216,154,8)"/><text x="44.6313%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (917,492 samples, 1.20%)</title><rect x="44.7050%" y="85" width="1.1969%" height="15" fill="rgb(244,35,45)"/><text x="44.9550%" y="95.50"></text></g><g><title>associated_items (1,591,316 samples, 2.08%)</title><rect x="43.8838%" y="117" width="2.0759%" height="15" fill="rgb(251,115,12)"/><text x="44.1338%" y="127.50">a..</text></g><g><title>dropck_outlives (143,242 samples, 0.19%)</title><rect x="46.0366%" y="117" width="0.1869%" height="15" fill="rgb(240,54,50)"/><text x="46.2866%" y="127.50"></text></g><g><title>adt_dtorck_constraint (80,641 samples, 0.11%)</title><rect x="46.1182%" y="101" width="0.1052%" height="15" fill="rgb(233,84,52)"/><text x="46.3682%" y="111.50"></text></g><g><title>fn_abi_of_instance (102,561 samples, 0.13%)</title><rect x="46.6844%" y="69" width="0.1338%" height="15" fill="rgb(207,117,47)"/><text x="46.9344%" y="79.50"></text></g><g><title>mir_for_ctfe (104,731 samples, 0.14%)</title><rect x="46.8972%" y="69" width="0.1366%" height="15" fill="rgb(249,43,39)"/><text x="47.1472%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (100,391 samples, 0.13%)</title><rect x="46.9028%" y="53" width="0.1310%" height="15" fill="rgb(209,38,44)"/><text x="47.1528%" y="63.50"></text></g><g><title>eval_to_const_value_raw (647,986 samples, 0.85%)</title><rect x="46.2234%" y="117" width="0.8453%" height="15" fill="rgb(236,212,23)"/><text x="46.4734%" y="127.50"></text></g><g><title>eval_to_const_value_raw (621,596 samples, 0.81%)</title><rect x="46.2579%" y="101" width="0.8109%" height="15" fill="rgb(242,79,21)"/><text x="46.5079%" y="111.50"></text></g><g><title>eval_to_allocation_raw (599,646 samples, 0.78%)</title><rect x="46.2865%" y="85" width="0.7823%" height="15" fill="rgb(211,96,35)"/><text x="46.5365%" y="95.50"></text></g><g><title>generics_of (876,239 samples, 1.14%)</title><rect x="51.3234%" y="101" width="1.1431%" height="15" fill="rgb(253,215,40)"/><text x="51.5734%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (472,553 samples, 0.62%)</title><rect x="51.8500%" y="85" width="0.6165%" height="15" fill="rgb(211,81,21)"/><text x="52.1000%" y="95.50"></text></g><g><title>impl_polarity (163,632 samples, 0.21%)</title><rect x="52.5428%" y="101" width="0.2135%" height="15" fill="rgb(208,190,38)"/><text x="52.7928%" y="111.50"></text></g><g><title>impl_trait_ref (860,803 samples, 1.12%)</title><rect x="52.7563%" y="101" width="1.1229%" height="15" fill="rgb(235,213,38)"/><text x="53.0063%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (687,070 samples, 0.90%)</title><rect x="52.9829%" y="85" width="0.8963%" height="15" fill="rgb(237,122,38)"/><text x="53.2329%" y="95.50"></text></g><g><title>opt_def_kind (180,531 samples, 0.24%)</title><rect x="54.3124%" y="85" width="0.2355%" height="15" fill="rgb(244,218,35)"/><text x="54.5624%" y="95.50"></text></g><g><title>metadata_decode_entry_opt_def_kind (94,500 samples, 0.12%)</title><rect x="54.4247%" y="69" width="0.1233%" height="15" fill="rgb(240,68,47)"/><text x="54.6747%" y="79.50"></text></g><g><title>explicit_predicates_of (157,540 samples, 0.21%)</title><rect x="54.8562%" y="69" width="0.2055%" height="15" fill="rgb(210,16,53)"/><text x="55.1062%" y="79.50"></text></g><g><title>predicates_of (969,289 samples, 1.26%)</title><rect x="53.9771%" y="101" width="1.2645%" height="15" fill="rgb(235,124,12)"/><text x="54.2271%" y="111.50"></text></g><g><title>predicates_defined_on (531,673 samples, 0.69%)</title><rect x="54.5479%" y="85" width="0.6936%" height="15" fill="rgb(224,169,11)"/><text x="54.7979%" y="95.50"></text></g><g><title>inferred_outlives_of (137,810 samples, 0.18%)</title><rect x="55.0617%" y="69" width="0.1798%" height="15" fill="rgb(250,166,2)"/><text x="55.3117%" y="79.50"></text></g><g><title>specializes (2,813,591 samples, 3.67%)</title><rect x="55.2415%" y="101" width="3.6704%" height="15" fill="rgb(242,216,29)"/><text x="55.4915%" y="111.50">spec..</text></g><g><title>param_env (1,700,576 samples, 2.22%)</title><rect x="56.6935%" y="85" width="2.2184%" height="15" fill="rgb(230,116,27)"/><text x="56.9435%" y="95.50">p..</text></g><g><title>def_span (778,680 samples, 1.02%)</title><rect x="57.8961%" y="69" width="1.0158%" height="15" fill="rgb(228,99,48)"/><text x="58.1461%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (691,188 samples, 0.90%)</title><rect x="58.0103%" y="53" width="0.9017%" height="15" fill="rgb(253,11,6)"/><text x="58.2603%" y="63.50"></text></g><g><title>trait_impls_of (411,713 samples, 0.54%)</title><rect x="58.9383%" y="101" width="0.5371%" height="15" fill="rgb(247,143,39)"/><text x="59.1883%" y="111.50"></text></g><g><title>implementations_of_trait (154,332 samples, 0.20%)</title><rect x="59.2741%" y="85" width="0.2013%" height="15" fill="rgb(236,97,10)"/><text x="59.5241%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (140,542 samples, 0.18%)</title><rect x="59.2921%" y="69" width="0.1833%" height="15" fill="rgb(233,208,19)"/><text x="59.5421%" y="79.50"></text></g><g><title>evaluate_obligation (9,537,576 samples, 12.44%)</title><rect x="47.0688%" y="117" width="12.4420%" height="15" fill="rgb(216,164,2)"/><text x="47.3188%" y="127.50">evaluate_obligation</text></g><g><title>fn_sig (119,891 samples, 0.16%)</title><rect x="59.5463%" y="117" width="0.1564%" height="15" fill="rgb(220,129,5)"/><text x="59.7963%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (102,081 samples, 0.13%)</title><rect x="59.5696%" y="101" width="0.1332%" height="15" fill="rgb(242,17,10)"/><text x="59.8196%" y="111.50"></text></g><g><title>generics_of (107,142 samples, 0.14%)</title><rect x="59.7027%" y="117" width="0.1398%" height="15" fill="rgb(242,107,0)"/><text x="59.9527%" y="127.50"></text></g><g><title>impl_item_implementor_ids (95,492 samples, 0.12%)</title><rect x="59.8444%" y="117" width="0.1246%" height="15" fill="rgb(251,28,31)"/><text x="60.0944%" y="127.50"></text></g><g><title>associated_items (83,862 samples, 0.11%)</title><rect x="59.8595%" y="101" width="0.1094%" height="15" fill="rgb(233,223,10)"/><text x="60.1095%" y="111.50"></text></g><g><title>item_attrs (86,250 samples, 0.11%)</title><rect x="60.0374%" y="117" width="0.1125%" height="15" fill="rgb(215,21,27)"/><text x="60.2874%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (83,810 samples, 0.11%)</title><rect x="60.0406%" y="101" width="0.1093%" height="15" fill="rgb(232,23,21)"/><text x="60.2906%" y="111.50"></text></g><g><title>lint_levels (107,582 samples, 0.14%)</title><rect x="60.1499%" y="117" width="0.1403%" height="15" fill="rgb(244,5,23)"/><text x="60.3999%" y="127.50"></text></g><g><title>method_autoderef_steps (178,911 samples, 0.23%)</title><rect x="60.3765%" y="117" width="0.2334%" height="15" fill="rgb(226,81,46)"/><text x="60.6265%" y="127.50"></text></g><g><title>evaluate_obligation (94,971 samples, 0.12%)</title><rect x="60.4860%" y="101" width="0.1239%" height="15" fill="rgb(247,70,30)"/><text x="60.7360%" y="111.50"></text></g><g><title>explicit_predicates_of (98,190 samples, 0.13%)</title><rect x="60.9330%" y="85" width="0.1281%" height="15" fill="rgb(212,68,19)"/><text x="61.1830%" y="95.50"></text></g><g><title>predicates_of (353,127 samples, 0.46%)</title><rect x="60.6636%" y="117" width="0.4607%" height="15" fill="rgb(240,187,13)"/><text x="60.9136%" y="127.50"></text></g><g><title>predicates_defined_on (225,733 samples, 0.29%)</title><rect x="60.8297%" y="101" width="0.2945%" height="15" fill="rgb(223,113,26)"/><text x="61.0797%" y="111.50"></text></g><g><title>specializes (163,732 samples, 0.21%)</title><rect x="61.1671%" y="117" width="0.2136%" height="15" fill="rgb(206,192,2)"/><text x="61.4171%" y="127.50"></text></g><g><title>item_bodies_checking (26,672,548 samples, 34.80%)</title><rect x="26.8188%" y="165" width="34.7951%" height="15" fill="rgb(241,108,4)"/><text x="27.0688%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (26,669,828 samples, 34.79%)</title><rect x="26.8223%" y="149" width="34.7915%" height="15" fill="rgb(247,173,49)"/><text x="27.0723%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (26,624,137 samples, 34.73%)</title><rect x="26.8819%" y="133" width="34.7319%" height="15" fill="rgb(224,114,35)"/><text x="27.1319%" y="143.50">typeck</text></g><g><title>item_types_checking (323,873 samples, 0.42%)</title><rect x="61.6139%" y="165" width="0.4225%" height="15" fill="rgb(245,159,27)"/><text x="61.8639%" y="175.50"></text></g><g><title>check_mod_item_types (320,713 samples, 0.42%)</title><rect x="61.6180%" y="149" width="0.4184%" height="15" fill="rgb(245,172,44)"/><text x="61.8680%" y="159.50"></text></g><g><title>fn_sig (135,062 samples, 0.18%)</title><rect x="62.2445%" y="133" width="0.1762%" height="15" fill="rgb(236,23,11)"/><text x="62.4945%" y="143.50"></text></g><g><title>named_region_map (122,202 samples, 0.16%)</title><rect x="62.4768%" y="117" width="0.1594%" height="15" fill="rgb(205,117,38)"/><text x="62.7268%" y="127.50"></text></g><g><title>resolve_lifetimes (111,132 samples, 0.14%)</title><rect x="62.4912%" y="101" width="0.1450%" height="15" fill="rgb(237,72,25)"/><text x="62.7412%" y="111.50"></text></g><g><title>generics_of (180,053 samples, 0.23%)</title><rect x="62.4207%" y="133" width="0.2349%" height="15" fill="rgb(244,70,9)"/><text x="62.6707%" y="143.50"></text></g><g><title>predicates_of (197,913 samples, 0.26%)</title><rect x="62.6817%" y="133" width="0.2582%" height="15" fill="rgb(217,125,39)"/><text x="62.9317%" y="143.50"></text></g><g><title>predicates_defined_on (173,153 samples, 0.23%)</title><rect x="62.7140%" y="117" width="0.2259%" height="15" fill="rgb(235,36,10)"/><text x="62.9640%" y="127.50"></text></g><g><title>inferred_outlives_of (77,890 samples, 0.10%)</title><rect x="62.8383%" y="101" width="0.1016%" height="15" fill="rgb(251,123,47)"/><text x="63.0883%" y="111.50"></text></g><g><title>type_collecting (769,209 samples, 1.00%)</title><rect x="62.0378%" y="165" width="1.0035%" height="15" fill="rgb(221,13,13)"/><text x="62.2878%" y="175.50"></text></g><g><title>collect_mod_item_types (752,988 samples, 0.98%)</title><rect x="62.0590%" y="149" width="0.9823%" height="15" fill="rgb(238,131,9)"/><text x="62.3090%" y="159.50"></text></g><g><title>type_of (77,750 samples, 0.10%)</title><rect x="62.9399%" y="133" width="0.1014%" height="15" fill="rgb(211,50,8)"/><text x="63.1899%" y="143.50"></text></g><g><title>evaluate_obligation (152,471 samples, 0.20%)</title><rect x="63.9022%" y="133" width="0.1989%" height="15" fill="rgb(245,182,24)"/><text x="64.1522%" y="143.50"></text></g><g><title>implied_outlives_bounds (83,821 samples, 0.11%)</title><rect x="64.1011%" y="133" width="0.1093%" height="15" fill="rgb(242,14,37)"/><text x="64.3511%" y="143.50"></text></g><g><title>param_env (95,541 samples, 0.12%)</title><rect x="64.2104%" y="133" width="0.1246%" height="15" fill="rgb(246,228,12)"/><text x="64.4604%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,104,632 samples, 1.44%)</title><rect x="63.1472%" y="149" width="1.4410%" height="15" fill="rgb(213,55,15)"/><text x="63.3972%" y="159.50"></text></g><g><title>region_scope_tree (194,022 samples, 0.25%)</title><rect x="64.3351%" y="133" width="0.2531%" height="15" fill="rgb(209,9,3)"/><text x="64.5851%" y="143.50"></text></g><g><title>analysis (49,311,250 samples, 64.33%)</title><rect x="1.0821%" y="197" width="64.3279%" height="15" fill="rgb(230,59,30)"/><text x="1.3321%" y="207.50">analysis</text></g><g><title>type_check_crate (31,787,725 samples, 41.47%)</title><rect x="23.9420%" y="181" width="41.4679%" height="15" fill="rgb(209,121,21)"/><text x="24.1920%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,812,611 samples, 2.36%)</title><rect x="63.0454%" y="165" width="2.3646%" height="15" fill="rgb(220,109,13)"/><text x="63.2954%" y="175.50">wf..</text></g><g><title>check_item_well_formed (629,958 samples, 0.82%)</title><rect x="64.5882%" y="149" width="0.8218%" height="15" fill="rgb(232,18,1)"/><text x="64.8382%" y="159.50"></text></g><g><title>codegen_crate (322,693 samples, 0.42%)</title><rect x="65.4256%" y="197" width="0.4210%" height="15" fill="rgb(215,41,42)"/><text x="65.6756%" y="207.50"></text></g><g><title>AST_validation (168,102 samples, 0.22%)</title><rect x="66.1600%" y="181" width="0.2193%" height="15" fill="rgb(224,123,36)"/><text x="66.4100%" y="191.50"></text></g><g><title>crate_injection (104,121 samples, 0.14%)</title><rect x="66.4414%" y="181" width="0.1358%" height="15" fill="rgb(240,125,3)"/><text x="66.6914%" y="191.50"></text></g><g><title>metadata_load_macro (205,921 samples, 0.27%)</title><rect x="87.9144%" y="149" width="0.2686%" height="15" fill="rgb(205,98,50)"/><text x="88.1644%" y="159.50"></text></g><g><title>metadata_register_crate (186,602 samples, 0.24%)</title><rect x="88.1830%" y="149" width="0.2434%" height="15" fill="rgb(205,185,37)"/><text x="88.4330%" y="159.50"></text></g><g><title>macro_expand_crate (17,235,593 samples, 22.48%)</title><rect x="66.5772%" y="181" width="22.4843%" height="15" fill="rgb(238,207,15)"/><text x="66.8272%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,218,753 samples, 22.46%)</title><rect x="66.5992%" y="165" width="22.4623%" height="15" fill="rgb(213,199,42)"/><text x="66.8492%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (486,825 samples, 0.64%)</title><rect x="88.4264%" y="149" width="0.6351%" height="15" fill="rgb(235,201,11)"/><text x="88.6764%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (81,741 samples, 0.11%)</title><rect x="89.0680%" y="181" width="0.1066%" height="15" fill="rgb(207,46,11)"/><text x="89.3180%" y="191.50"></text></g><g><title>finalize_macro_resolutions (161,702 samples, 0.21%)</title><rect x="89.2444%" y="165" width="0.2109%" height="15" fill="rgb(241,35,35)"/><text x="89.4944%" y="175.50"></text></g><g><title>late_resolve_crate (1,509,126 samples, 1.97%)</title><rect x="89.4554%" y="165" width="1.9687%" height="15" fill="rgb(243,32,47)"/><text x="89.7054%" y="175.50">l..</text></g><g><title>configure_and_expand (19,694,220 samples, 25.69%)</title><rect x="65.8465%" y="197" width="25.6916%" height="15" fill="rgb(247,202,23)"/><text x="66.0965%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,811,800 samples, 2.36%)</title><rect x="89.1746%" y="181" width="2.3635%" height="15" fill="rgb(219,102,11)"/><text x="89.4246%" y="191.50">re..</text></g><g><title>drop_ast (143,832 samples, 0.19%)</title><rect x="91.5382%" y="197" width="0.1876%" height="15" fill="rgb(243,110,44)"/><text x="91.7882%" y="207.50"></text></g><g><title>early_lint_checks (304,693 samples, 0.40%)</title><rect x="91.7444%" y="197" width="0.3975%" height="15" fill="rgb(222,74,54)"/><text x="91.9944%" y="207.50"></text></g><g><title>free_global_ctxt (1,981,432 samples, 2.58%)</title><rect x="92.1419%" y="197" width="2.5848%" height="15" fill="rgb(216,99,12)"/><text x="92.3919%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (547,596 samples, 0.71%)</title><rect x="94.7267%" y="197" width="0.7144%" height="15" fill="rgb(226,22,26)"/><text x="94.9767%" y="207.50"></text></g><g><title>hir_lowering (1,671,548 samples, 2.18%)</title><rect x="95.4410%" y="197" width="2.1806%" height="15" fill="rgb(217,163,10)"/><text x="95.6910%" y="207.50">h..</text></g><g><title>parse_crate (554,986 samples, 0.72%)</title><rect x="97.6760%" y="197" width="0.7240%" height="15" fill="rgb(213,25,53)"/><text x="97.9260%" y="207.50"></text></g><g><title>prepare_outputs (164,751 samples, 0.21%)</title><rect x="98.4141%" y="197" width="0.2149%" height="15" fill="rgb(252,105,26)"/><text x="98.6641%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (652,048 samples, 0.85%)</title><rect x="98.6291%" y="197" width="0.8506%" height="15" fill="rgb(220,39,43)"/><text x="98.8791%" y="207.50"></text></g><g><title>setup_global_ctxt (87,531 samples, 0.11%)</title><rect x="99.4976%" y="197" width="0.1142%" height="15" fill="rgb(229,68,48)"/><text x="99.7476%" y="207.50"></text></g><g><title>all (76,656,136 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (76,656,136 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (297,604 samples, 0.39%)</title><rect x="99.6118%" y="197" width="0.3882%" height="15" fill="rgb(229,81,49)"/><text x="99.8618%" y="207.50"></text></g></svg></svg>