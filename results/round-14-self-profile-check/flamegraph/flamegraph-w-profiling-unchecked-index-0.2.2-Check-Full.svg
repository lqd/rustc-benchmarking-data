<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (233,223 samples, 0.30%)</title><rect x="11.3999%" y="69" width="0.2995%" height="15" fill="rgb(227,0,7)"/><text x="11.6499%" y="79.50"></text></g><g><title>is_copy_raw (204,093 samples, 0.26%)</title><rect x="11.4373%" y="53" width="0.2621%" height="15" fill="rgb(217,0,24)"/><text x="11.6873%" y="63.50"></text></g><g><title>evaluate_obligation (165,313 samples, 0.21%)</title><rect x="11.4872%" y="37" width="0.2123%" height="15" fill="rgb(221,193,54)"/><text x="11.7372%" y="47.50"></text></g><g><title>resolve_instance (156,752 samples, 0.20%)</title><rect x="11.6995%" y="69" width="0.2013%" height="15" fill="rgb(248,212,6)"/><text x="11.9495%" y="79.50"></text></g><g><title>thir_body (348,081 samples, 0.45%)</title><rect x="11.9199%" y="69" width="0.4471%" height="15" fill="rgb(208,68,35)"/><text x="12.1699%" y="79.50"></text></g><g><title>mir_const (2,543,981 samples, 3.27%)</title><rect x="9.1114%" y="117" width="3.2674%" height="15" fill="rgb(232,128,0)"/><text x="9.3614%" y="127.50">mir..</text></g><g><title>unsafety_check_result (2,103,713 samples, 2.70%)</title><rect x="9.6769%" y="101" width="2.7019%" height="15" fill="rgb(207,160,47)"/><text x="9.9269%" y="111.50">un..</text></g><g><title>mir_built (1,825,028 samples, 2.34%)</title><rect x="10.0348%" y="85" width="2.3440%" height="15" fill="rgb(228,23,34)"/><text x="10.2848%" y="95.50">m..</text></g><g><title>mir_promoted (2,995,735 samples, 3.85%)</title><rect x="8.5670%" y="133" width="3.8476%" height="15" fill="rgb(218,30,26)"/><text x="8.8170%" y="143.50">mir_..</text></g><g><title>type_op_normalize_fn_sig (222,612 samples, 0.29%)</title><rect x="12.4988%" y="133" width="0.2859%" height="15" fill="rgb(220,122,19)"/><text x="12.7488%" y="143.50"></text></g><g><title>type_op_normalize_ty (701,456 samples, 0.90%)</title><rect x="12.7847%" y="133" width="0.9009%" height="15" fill="rgb(250,228,42)"/><text x="13.0347%" y="143.50"></text></g><g><title>normalize_projection_ty (473,884 samples, 0.61%)</title><rect x="13.0770%" y="117" width="0.6086%" height="15" fill="rgb(240,193,28)"/><text x="13.3270%" y="127.50"></text></g><g><title>type_op_prove_predicate (549,967 samples, 0.71%)</title><rect x="13.6856%" y="133" width="0.7064%" height="15" fill="rgb(216,20,37)"/><text x="13.9356%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,852,640 samples, 12.65%)</title><rect x="1.7481%" y="165" width="12.6544%" height="15" fill="rgb(206,188,39)"/><text x="1.9981%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,779,840 samples, 12.56%)</title><rect x="1.8416%" y="149" width="12.5608%" height="15" fill="rgb(217,207,13)"/><text x="2.0916%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (306,294 samples, 0.39%)</title><rect x="14.4489%" y="165" width="0.3934%" height="15" fill="rgb(231,73,38)"/><text x="14.6989%" y="175.50"></text></g><g><title>get_lang_items (141,022 samples, 0.18%)</title><rect x="15.4037%" y="117" width="0.1811%" height="15" fill="rgb(225,20,46)"/><text x="15.6537%" y="127.50"></text></g><g><title>associated_item (80,040 samples, 0.10%)</title><rect x="15.6630%" y="101" width="0.1028%" height="15" fill="rgb(210,31,41)"/><text x="15.9130%" y="111.50"></text></g><g><title>codegen_fn_attrs (159,243 samples, 0.20%)</title><rect x="15.7658%" y="101" width="0.2045%" height="15" fill="rgb(221,200,47)"/><text x="16.0158%" y="111.50"></text></g><g><title>should_inherit_track_caller (309,864 samples, 0.40%)</title><rect x="15.5849%" y="117" width="0.3980%" height="15" fill="rgb(226,26,5)"/><text x="15.8349%" y="127.50"></text></g><g><title>codegen_fn_attrs (609,508 samples, 0.78%)</title><rect x="15.2569%" y="133" width="0.7828%" height="15" fill="rgb(249,33,26)"/><text x="15.5069%" y="143.50"></text></g><g><title>check_mod_attrs (889,299 samples, 1.14%)</title><rect x="14.8980%" y="149" width="1.1422%" height="15" fill="rgb(235,183,28)"/><text x="15.1480%" y="159.50"></text></g><g><title>check_mod_const_bodies (160,172 samples, 0.21%)</title><rect x="16.0401%" y="149" width="0.2057%" height="15" fill="rgb(221,5,38)"/><text x="16.2901%" y="159.50"></text></g><g><title>lookup_deprecation_entry (184,972 samples, 0.24%)</title><rect x="16.6847%" y="133" width="0.2376%" height="15" fill="rgb(247,18,42)"/><text x="16.9347%" y="143.50"></text></g><g><title>stability_index (127,321 samples, 0.16%)</title><rect x="16.7588%" y="117" width="0.1635%" height="15" fill="rgb(241,131,45)"/><text x="17.0088%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (506,216 samples, 0.65%)</title><rect x="16.3791%" y="149" width="0.6502%" height="15" fill="rgb(249,31,29)"/><text x="16.6291%" y="159.50"></text></g><g><title>looking_for_derive_registrar (107,291 samples, 0.14%)</title><rect x="17.0318%" y="149" width="0.1378%" height="15" fill="rgb(225,111,53)"/><text x="17.2818%" y="159.50"></text></g><g><title>proc_macro_decls_static (81,851 samples, 0.11%)</title><rect x="17.0645%" y="133" width="0.1051%" height="15" fill="rgb(238,160,17)"/><text x="17.3145%" y="143.50"></text></g><g><title>misc_checking_1 (1,816,370 samples, 2.33%)</title><rect x="14.8431%" y="165" width="2.3329%" height="15" fill="rgb(214,148,48)"/><text x="15.0931%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (176,302 samples, 0.23%)</title><rect x="17.1776%" y="149" width="0.2264%" height="15" fill="rgb(232,36,49)"/><text x="17.4276%" y="159.50"></text></g><g><title>check_mod_liveness (133,362 samples, 0.17%)</title><rect x="17.2328%" y="133" width="0.1713%" height="15" fill="rgb(209,103,24)"/><text x="17.4828%" y="143.50"></text></g><g><title>misc_checking_2 (352,634 samples, 0.45%)</title><rect x="17.1759%" y="165" width="0.4529%" height="15" fill="rgb(229,88,8)"/><text x="17.4259%" y="175.50"></text></g><g><title>match_checking (175,032 samples, 0.22%)</title><rect x="17.4040%" y="149" width="0.2248%" height="15" fill="rgb(213,181,19)"/><text x="17.6540%" y="159.50"></text></g><g><title>check_match (158,812 samples, 0.20%)</title><rect x="17.4249%" y="133" width="0.2040%" height="15" fill="rgb(254,191,54)"/><text x="17.6749%" y="143.50"></text></g><g><title>check_private_in_public (156,252 samples, 0.20%)</title><rect x="17.6402%" y="149" width="0.2007%" height="15" fill="rgb(241,83,37)"/><text x="17.8902%" y="159.50"></text></g><g><title>death_checking (226,912 samples, 0.29%)</title><rect x="17.8409%" y="149" width="0.2914%" height="15" fill="rgb(233,36,39)"/><text x="18.0909%" y="159.50"></text></g><g><title>param_env (288,632 samples, 0.37%)</title><rect x="18.5109%" y="117" width="0.3707%" height="15" fill="rgb(226,3,54)"/><text x="18.7609%" y="127.50"></text></g><g><title>predicates_of (128,011 samples, 0.16%)</title><rect x="18.7172%" y="101" width="0.1644%" height="15" fill="rgb(245,192,40)"/><text x="18.9672%" y="111.50"></text></g><g><title>predicates_defined_on (100,001 samples, 0.13%)</title><rect x="18.7532%" y="85" width="0.1284%" height="15" fill="rgb(238,167,29)"/><text x="19.0032%" y="95.50"></text></g><g><title>crate_lints (1,126,742 samples, 1.45%)</title><rect x="18.1348%" y="133" width="1.4471%" height="15" fill="rgb(232,182,51)"/><text x="18.3848%" y="143.50"></text></g><g><title>type_of (472,474 samples, 0.61%)</title><rect x="18.9751%" y="117" width="0.6068%" height="15" fill="rgb(231,60,39)"/><text x="19.2251%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (389,154 samples, 0.50%)</title><rect x="19.0821%" y="101" width="0.4998%" height="15" fill="rgb(208,69,12)"/><text x="19.3321%" y="111.50"></text></g><g><title>lint_checking (1,281,614 samples, 1.65%)</title><rect x="18.1323%" y="149" width="1.6461%" height="15" fill="rgb(235,93,37)"/><text x="18.3823%" y="159.50"></text></g><g><title>module_lints (152,942 samples, 0.20%)</title><rect x="19.5819%" y="133" width="0.1964%" height="15" fill="rgb(213,116,39)"/><text x="19.8319%" y="143.50"></text></g><g><title>lint_mod (148,412 samples, 0.19%)</title><rect x="19.5877%" y="117" width="0.1906%" height="15" fill="rgb(222,207,29)"/><text x="19.8377%" y="127.50"></text></g><g><title>privacy_access_levels (148,612 samples, 0.19%)</title><rect x="19.7784%" y="149" width="0.1909%" height="15" fill="rgb(206,96,30)"/><text x="20.0284%" y="159.50"></text></g><g><title>privacy_checking_modules (440,925 samples, 0.57%)</title><rect x="19.9692%" y="149" width="0.5663%" height="15" fill="rgb(218,138,4)"/><text x="20.2192%" y="159.50"></text></g><g><title>check_mod_privacy (436,925 samples, 0.56%)</title><rect x="19.9744%" y="133" width="0.5612%" height="15" fill="rgb(250,191,14)"/><text x="20.2244%" y="143.50"></text></g><g><title>misc_checking_3 (2,281,906 samples, 2.93%)</title><rect x="17.6288%" y="165" width="2.9308%" height="15" fill="rgb(239,60,40)"/><text x="17.8788%" y="175.50">mi..</text></g><g><title>adt_destructor (93,921 samples, 0.12%)</title><rect x="20.7719%" y="117" width="0.1206%" height="15" fill="rgb(206,27,48)"/><text x="21.0219%" y="127.50"></text></g><g><title>coherent_trait (82,081 samples, 0.11%)</title><rect x="20.7871%" y="101" width="0.1054%" height="15" fill="rgb(225,35,8)"/><text x="21.0371%" y="111.50"></text></g><g><title>specialization_graph_of (79,911 samples, 0.10%)</title><rect x="20.7899%" y="85" width="0.1026%" height="15" fill="rgb(250,213,24)"/><text x="21.0399%" y="95.50"></text></g><g><title>is_copy_raw (143,002 samples, 0.18%)</title><rect x="20.8925%" y="117" width="0.1837%" height="15" fill="rgb(247,123,22)"/><text x="21.1425%" y="127.50"></text></g><g><title>evaluate_obligation (120,592 samples, 0.15%)</title><rect x="20.9213%" y="101" width="0.1549%" height="15" fill="rgb(231,138,38)"/><text x="21.1713%" y="111.50"></text></g><g><title>param_env (163,752 samples, 0.21%)</title><rect x="21.0762%" y="117" width="0.2103%" height="15" fill="rgb(231,145,46)"/><text x="21.3262%" y="127.50"></text></g><g><title>impl_parent (579,833 samples, 0.74%)</title><rect x="22.5881%" y="101" width="0.7447%" height="15" fill="rgb(251,118,11)"/><text x="22.8381%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (322,643 samples, 0.41%)</title><rect x="22.9184%" y="85" width="0.4144%" height="15" fill="rgb(217,147,25)"/><text x="23.1684%" y="95.50"></text></g><g><title>impl_trait_ref (1,583,848 samples, 2.03%)</title><rect x="23.3328%" y="101" width="2.0342%" height="15" fill="rgb(247,81,37)"/><text x="23.5828%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,358,205 samples, 1.74%)</title><rect x="23.6226%" y="85" width="1.7444%" height="15" fill="rgb(209,12,38)"/><text x="23.8726%" y="95.50"></text></g><g><title>coherent_trait (3,875,363 samples, 4.98%)</title><rect x="20.6913%" y="133" width="4.9774%" height="15" fill="rgb(227,1,9)"/><text x="20.9413%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (3,411,988 samples, 4.38%)</title><rect x="21.2865%" y="117" width="4.3822%" height="15" fill="rgb(248,47,43)"/><text x="21.5365%" y="127.50">speci..</text></g><g><title>trait_impls_of (234,852 samples, 0.30%)</title><rect x="25.3671%" y="101" width="0.3016%" height="15" fill="rgb(221,10,30)"/><text x="25.6171%" y="111.50"></text></g><g><title>coherence_checking (3,993,385 samples, 5.13%)</title><rect x="20.6575%" y="149" width="5.1289%" height="15" fill="rgb(210,229,1)"/><text x="20.9075%" y="159.50">cohere..</text></g><g><title>associated_item (117,571 samples, 0.15%)</title><rect x="37.8519%" y="85" width="0.1510%" height="15" fill="rgb(222,148,37)"/><text x="38.1019%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (92,471 samples, 0.12%)</title><rect x="37.8841%" y="69" width="0.1188%" height="15" fill="rgb(234,67,33)"/><text x="38.1341%" y="79.50"></text></g><g><title>associated_items (164,602 samples, 0.21%)</title><rect x="37.8002%" y="101" width="0.2114%" height="15" fill="rgb(247,98,35)"/><text x="38.0502%" y="111.50"></text></g><g><title>evaluate_obligation (290,493 samples, 0.37%)</title><rect x="38.1471%" y="101" width="0.3731%" height="15" fill="rgb(247,138,52)"/><text x="38.3971%" y="111.50"></text></g><g><title>predicates_of (146,082 samples, 0.19%)</title><rect x="38.9569%" y="101" width="0.1876%" height="15" fill="rgb(213,79,30)"/><text x="39.2069%" y="111.50"></text></g><g><title>predicates_defined_on (110,282 samples, 0.14%)</title><rect x="39.0029%" y="85" width="0.1416%" height="15" fill="rgb(246,177,23)"/><text x="39.2529%" y="95.50"></text></g><g><title>item_bodies_checking (10,443,726 samples, 13.41%)</title><rect x="25.8679%" y="149" width="13.4135%" height="15" fill="rgb(230,62,27)"/><text x="26.1179%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,440,846 samples, 13.41%)</title><rect x="25.8716%" y="133" width="13.4098%" height="15" fill="rgb(216,154,8)"/><text x="26.1216%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (10,392,686 samples, 13.35%)</title><rect x="25.9335%" y="117" width="13.3480%" height="15" fill="rgb(244,35,45)"/><text x="26.1835%" y="127.50">typeck</text></g><g><title>item_types_checking (1,793,310 samples, 2.30%)</title><rect x="39.2814%" y="149" width="2.3033%" height="15" fill="rgb(251,115,12)"/><text x="39.5314%" y="159.50">i..</text></g><g><title>check_mod_item_types (1,787,210 samples, 2.30%)</title><rect x="39.2893%" y="133" width="2.2954%" height="15" fill="rgb(240,54,50)"/><text x="39.5393%" y="143.50">c..</text></g><g><title>fn_sig (861,438 samples, 1.11%)</title><rect x="42.2249%" y="117" width="1.1064%" height="15" fill="rgb(233,84,52)"/><text x="42.4749%" y="127.50"></text></g><g><title>type_param_predicates (183,161 samples, 0.24%)</title><rect x="43.0960%" y="101" width="0.2352%" height="15" fill="rgb(207,117,47)"/><text x="43.3460%" y="111.50"></text></g><g><title>is_late_bound_map (527,565 samples, 0.68%)</title><rect x="43.6216%" y="101" width="0.6776%" height="15" fill="rgb(249,43,39)"/><text x="43.8716%" y="111.50"></text></g><g><title>resolve_lifetimes (514,435 samples, 0.66%)</title><rect x="43.6385%" y="85" width="0.6607%" height="15" fill="rgb(209,38,44)"/><text x="43.8885%" y="95.50"></text></g><g><title>lint_levels (376,164 samples, 0.48%)</title><rect x="43.8161%" y="69" width="0.4831%" height="15" fill="rgb(236,212,23)"/><text x="44.0661%" y="79.50"></text></g><g><title>named_region_map (524,436 samples, 0.67%)</title><rect x="44.2992%" y="101" width="0.6736%" height="15" fill="rgb(242,79,21)"/><text x="44.5492%" y="111.50"></text></g><g><title>resolve_lifetimes (467,386 samples, 0.60%)</title><rect x="44.3725%" y="85" width="0.6003%" height="15" fill="rgb(211,96,35)"/><text x="44.6225%" y="95.50"></text></g><g><title>generics_of (1,323,074 samples, 1.70%)</title><rect x="43.3313%" y="117" width="1.6993%" height="15" fill="rgb(253,215,40)"/><text x="43.5813%" y="127.50"></text></g><g><title>impl_trait_ref (164,453 samples, 0.21%)</title><rect x="45.0306%" y="117" width="0.2112%" height="15" fill="rgb(211,81,21)"/><text x="45.2806%" y="127.50"></text></g><g><title>late_bound_vars_map (119,131 samples, 0.15%)</title><rect x="46.0374%" y="69" width="0.1530%" height="15" fill="rgb(208,190,38)"/><text x="46.2874%" y="79.50"></text></g><g><title>resolve_lifetimes (105,171 samples, 0.14%)</title><rect x="46.0553%" y="53" width="0.1351%" height="15" fill="rgb(235,213,38)"/><text x="46.3053%" y="63.50"></text></g><g><title>explicit_predicates_of (509,774 samples, 0.65%)</title><rect x="45.5646%" y="85" width="0.6547%" height="15" fill="rgb(237,122,38)"/><text x="45.8146%" y="95.50"></text></g><g><title>predicates_of (819,582 samples, 1.05%)</title><rect x="45.2797%" y="117" width="1.0526%" height="15" fill="rgb(244,218,35)"/><text x="45.5297%" y="127.50"></text></g><g><title>predicates_defined_on (735,229 samples, 0.94%)</title><rect x="45.3880%" y="101" width="0.9443%" height="15" fill="rgb(240,68,47)"/><text x="45.6380%" y="111.50"></text></g><g><title>inferred_outlives_of (87,991 samples, 0.11%)</title><rect x="46.2193%" y="85" width="0.1130%" height="15" fill="rgb(210,16,53)"/><text x="46.4693%" y="95.50"></text></g><g><title>type_collecting (3,980,894 samples, 5.11%)</title><rect x="41.5890%" y="149" width="5.1129%" height="15" fill="rgb(235,124,12)"/><text x="41.8390%" y="159.50">type_c..</text></g><g><title>collect_mod_item_types (3,960,143 samples, 5.09%)</title><rect x="41.6157%" y="133" width="5.0863%" height="15" fill="rgb(224,169,11)"/><text x="41.8657%" y="143.50">collec..</text></g><g><title>type_of (287,752 samples, 0.37%)</title><rect x="46.3323%" y="117" width="0.3696%" height="15" fill="rgb(250,166,2)"/><text x="46.5823%" y="127.50"></text></g><g><title>evaluate_obligation (590,435 samples, 0.76%)</title><rect x="51.7981%" y="117" width="0.7583%" height="15" fill="rgb(242,216,29)"/><text x="52.0481%" y="127.50"></text></g><g><title>implied_outlives_bounds (373,724 samples, 0.48%)</title><rect x="52.6249%" y="117" width="0.4800%" height="15" fill="rgb(230,116,27)"/><text x="52.8749%" y="127.50"></text></g><g><title>param_env (450,497 samples, 0.58%)</title><rect x="53.1049%" y="117" width="0.5786%" height="15" fill="rgb(228,99,48)"/><text x="53.3549%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,323,518 samples, 6.84%)</title><rect x="47.1808%" y="133" width="6.8373%" height="15" fill="rgb(253,11,6)"/><text x="47.4308%" y="143.50">check_imp..</text></g><g><title>region_scope_tree (252,992 samples, 0.32%)</title><rect x="53.6931%" y="117" width="0.3249%" height="15" fill="rgb(247,143,39)"/><text x="53.9431%" y="127.50"></text></g><g><title>adt_def (144,711 samples, 0.19%)</title><rect x="60.0306%" y="85" width="0.1859%" height="15" fill="rgb(236,97,10)"/><text x="60.2806%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (141,011 samples, 0.18%)</title><rect x="60.0354%" y="69" width="0.1811%" height="15" fill="rgb(233,208,19)"/><text x="60.2854%" y="79.50"></text></g><g><title>item_attrs (110,521 samples, 0.14%)</title><rect x="60.0746%" y="53" width="0.1419%" height="15" fill="rgb(216,164,2)"/><text x="60.3246%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,381 samples, 0.14%)</title><rect x="60.0799%" y="37" width="0.1366%" height="15" fill="rgb(220,129,5)"/><text x="60.3299%" y="47.50"></text></g><g><title>evaluate_obligation (271,683 samples, 0.35%)</title><rect x="59.9161%" y="117" width="0.3489%" height="15" fill="rgb(242,17,10)"/><text x="60.1661%" y="127.50"></text></g><g><title>adt_sized_constraint (200,563 samples, 0.26%)</title><rect x="60.0075%" y="101" width="0.2576%" height="15" fill="rgb(242,107,0)"/><text x="60.2575%" y="111.50"></text></g><g><title>impl_item_implementor_ids (121,510 samples, 0.16%)</title><rect x="60.3124%" y="117" width="0.1561%" height="15" fill="rgb(251,28,31)"/><text x="60.5624%" y="127.50"></text></g><g><title>associated_items (104,500 samples, 0.13%)</title><rect x="60.3342%" y="101" width="0.1342%" height="15" fill="rgb(233,223,10)"/><text x="60.5842%" y="111.50"></text></g><g><title>implied_outlives_bounds (335,321 samples, 0.43%)</title><rect x="60.5542%" y="117" width="0.4307%" height="15" fill="rgb(215,21,27)"/><text x="60.8042%" y="127.50"></text></g><g><title>param_env (673,778 samples, 0.87%)</title><rect x="60.9864%" y="117" width="0.8654%" height="15" fill="rgb(232,23,21)"/><text x="61.2364%" y="127.50"></text></g><g><title>predicates_of (184,353 samples, 0.24%)</title><rect x="61.8518%" y="117" width="0.2368%" height="15" fill="rgb(244,5,23)"/><text x="62.1018%" y="127.50"></text></g><g><title>predicates_defined_on (126,863 samples, 0.16%)</title><rect x="61.9256%" y="101" width="0.1629%" height="15" fill="rgb(226,81,46)"/><text x="62.1756%" y="111.50"></text></g><g><title>region_scope_tree (126,993 samples, 0.16%)</title><rect x="62.0886%" y="117" width="0.1631%" height="15" fill="rgb(247,70,30)"/><text x="62.3386%" y="127.50"></text></g><g><title>check_item_well_formed (6,572,242 samples, 8.44%)</title><rect x="54.0181%" y="133" width="8.4411%" height="15" fill="rgb(212,68,19)"/><text x="54.2681%" y="143.50">check_item_w..</text></g><g><title>variances_of (124,041 samples, 0.16%)</title><rect x="62.2999%" y="117" width="0.1593%" height="15" fill="rgb(240,187,13)"/><text x="62.5499%" y="127.50"></text></g><g><title>crate_variances (118,521 samples, 0.15%)</title><rect x="62.3070%" y="101" width="0.1522%" height="15" fill="rgb(223,113,26)"/><text x="62.5570%" y="111.50"></text></g><g><title>evaluate_obligation (121,631 samples, 0.16%)</title><rect x="62.9580%" y="117" width="0.1562%" height="15" fill="rgb(206,192,2)"/><text x="63.2080%" y="127.50"></text></g><g><title>implied_outlives_bounds (98,512 samples, 0.13%)</title><rect x="63.1142%" y="117" width="0.1265%" height="15" fill="rgb(241,108,4)"/><text x="63.3642%" y="127.50"></text></g><g><title>analysis (48,328,177 samples, 62.07%)</title><rect x="1.2385%" y="181" width="62.0708%" height="15" fill="rgb(247,173,49)"/><text x="1.4885%" y="191.50">analysis</text></g><g><title>type_check_crate (33,284,789 samples, 42.75%)</title><rect x="20.5596%" y="165" width="42.7497%" height="15" fill="rgb(224,114,35)"/><text x="20.8096%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,927,713 samples, 16.60%)</title><rect x="46.7055%" y="149" width="16.6039%" height="15" fill="rgb(245,159,27)"/><text x="46.9555%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (661,897 samples, 0.85%)</title><rect x="62.4592%" y="133" width="0.8501%" height="15" fill="rgb(245,172,44)"/><text x="62.7092%" y="143.50"></text></g><g><title>codegen_crate (314,694 samples, 0.40%)</title><rect x="63.3245%" y="181" width="0.4042%" height="15" fill="rgb(236,23,11)"/><text x="63.5745%" y="191.50"></text></g><g><title>AST_validation (201,492 samples, 0.26%)</title><rect x="64.0313%" y="165" width="0.2588%" height="15" fill="rgb(205,117,38)"/><text x="64.2813%" y="175.50"></text></g><g><title>complete_gated_feature_checking (78,931 samples, 0.10%)</title><rect x="64.2901%" y="165" width="0.1014%" height="15" fill="rgb(237,72,25)"/><text x="64.5401%" y="175.50"></text></g><g><title>crate_injection (81,181 samples, 0.10%)</title><rect x="64.3914%" y="165" width="0.1043%" height="15" fill="rgb(244,70,9)"/><text x="64.6414%" y="175.50"></text></g><g><title>metadata_load_macro (226,542 samples, 0.29%)</title><rect x="81.0795%" y="133" width="0.2910%" height="15" fill="rgb(217,125,39)"/><text x="81.3295%" y="143.50"></text></g><g><title>metadata_register_crate (209,883 samples, 0.27%)</title><rect x="81.3704%" y="133" width="0.2696%" height="15" fill="rgb(235,36,10)"/><text x="81.6204%" y="143.50"></text></g><g><title>macro_expand_crate (13,394,219 samples, 17.20%)</title><rect x="64.4957%" y="165" width="17.2030%" height="15" fill="rgb(251,123,47)"/><text x="64.7457%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (13,366,158 samples, 17.17%)</title><rect x="64.5317%" y="149" width="17.1670%" height="15" fill="rgb(221,13,13)"/><text x="64.7817%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (168,812 samples, 0.22%)</title><rect x="81.7045%" y="165" width="0.2168%" height="15" fill="rgb(238,131,9)"/><text x="81.9545%" y="175.50"></text></g><g><title>finalize_imports (140,501 samples, 0.18%)</title><rect x="81.9369%" y="149" width="0.1805%" height="15" fill="rgb(211,50,8)"/><text x="82.1869%" y="159.50"></text></g><g><title>finalize_macro_resolutions (237,123 samples, 0.30%)</title><rect x="82.1173%" y="149" width="0.3046%" height="15" fill="rgb(245,182,24)"/><text x="82.3673%" y="159.50"></text></g><g><title>late_resolve_crate (2,108,653 samples, 2.71%)</title><rect x="82.4219%" y="149" width="2.7083%" height="15" fill="rgb(242,14,37)"/><text x="82.6719%" y="159.50">la..</text></g><g><title>resolve_check_unused (121,292 samples, 0.16%)</title><rect x="85.1529%" y="149" width="0.1558%" height="15" fill="rgb(246,228,12)"/><text x="85.4029%" y="159.50"></text></g><g><title>configure_and_expand (16,855,337 samples, 21.65%)</title><rect x="63.7287%" y="181" width="21.6483%" height="15" fill="rgb(213,55,15)"/><text x="63.9787%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,690,629 samples, 3.46%)</title><rect x="81.9213%" y="165" width="3.4557%" height="15" fill="rgb(209,9,3)"/><text x="82.1713%" y="175.50">res..</text></g><g><title>drop_ast (253,343 samples, 0.33%)</title><rect x="85.3770%" y="181" width="0.3254%" height="15" fill="rgb(230,59,30)"/><text x="85.6270%" y="191.50"></text></g><g><title>early_lint_checks (510,606 samples, 0.66%)</title><rect x="85.7197%" y="181" width="0.6558%" height="15" fill="rgb(209,121,21)"/><text x="85.9697%" y="191.50"></text></g><g><title>free_global_ctxt (1,612,508 samples, 2.07%)</title><rect x="86.3755%" y="181" width="2.0710%" height="15" fill="rgb(220,109,13)"/><text x="86.6255%" y="191.50">f..</text></g><g><title>generate_crate_metadata (912,460 samples, 1.17%)</title><rect x="88.4465%" y="181" width="1.1719%" height="15" fill="rgb(232,18,1)"/><text x="88.6965%" y="191.50"></text></g><g><title>hir_lowering (4,147,386 samples, 5.33%)</title><rect x="89.6185%" y="181" width="5.3267%" height="15" fill="rgb(215,41,42)"/><text x="89.8685%" y="191.50">hir_low..</text></g><g><title>parse_crate (2,635,429 samples, 3.38%)</title><rect x="95.0122%" y="181" width="3.3848%" height="15" fill="rgb(224,123,36)"/><text x="95.2622%" y="191.50">par..</text></g><g><title>prepare_outputs (311,003 samples, 0.40%)</title><rect x="98.4094%" y="181" width="0.3994%" height="15" fill="rgb(240,125,3)"/><text x="98.6594%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (453,405 samples, 0.58%)</title><rect x="98.8088%" y="181" width="0.5823%" height="15" fill="rgb(205,98,50)"/><text x="99.0588%" y="191.50"></text></g><g><title>setup_global_ctxt (144,071 samples, 0.19%)</title><rect x="99.4065%" y="181" width="0.1850%" height="15" fill="rgb(205,185,37)"/><text x="99.6565%" y="191.50"></text></g><g><title>all (77,859,704 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (77,859,704 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (318,063 samples, 0.41%)</title><rect x="99.5915%" y="181" width="0.4085%" height="15" fill="rgb(235,201,11)"/><text x="99.8415%" y="191.50"></text></g></svg></svg>