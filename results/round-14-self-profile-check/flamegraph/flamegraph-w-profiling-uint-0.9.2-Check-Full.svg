<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>adt_drop_tys (99,122 samples, 0.12%)</title><rect x="8.1941%" y="53" width="0.1184%" height="15" fill="rgb(227,0,7)"/><text x="8.4441%" y="63.50"></text></g><g><title>needs_drop_raw (240,113 samples, 0.29%)</title><rect x="8.1680%" y="69" width="0.2869%" height="15" fill="rgb(217,0,24)"/><text x="8.4180%" y="79.50"></text></g><g><title>is_copy_raw (119,141 samples, 0.14%)</title><rect x="8.3126%" y="53" width="0.1423%" height="15" fill="rgb(221,193,54)"/><text x="8.5626%" y="63.50"></text></g><g><title>evaluate_obligation (100,581 samples, 0.12%)</title><rect x="8.3347%" y="37" width="0.1202%" height="15" fill="rgb(248,212,6)"/><text x="8.5847%" y="47.50"></text></g><g><title>thir_body (310,864 samples, 0.37%)</title><rect x="8.5531%" y="69" width="0.3714%" height="15" fill="rgb(208,68,35)"/><text x="8.8031%" y="79.50"></text></g><g><title>mir_const (1,952,275 samples, 2.33%)</title><rect x="6.5974%" y="117" width="2.3325%" height="15" fill="rgb(232,128,0)"/><text x="6.8474%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,684,422 samples, 2.01%)</title><rect x="6.9175%" y="101" width="2.0125%" height="15" fill="rgb(207,160,47)"/><text x="7.1675%" y="111.50">u..</text></g><g><title>mir_built (1,488,459 samples, 1.78%)</title><rect x="7.1516%" y="85" width="1.7784%" height="15" fill="rgb(228,23,34)"/><text x="7.4016%" y="95.50">m..</text></g><g><title>mir_promoted (2,303,867 samples, 2.75%)</title><rect x="6.1960%" y="133" width="2.7526%" height="15" fill="rgb(218,30,26)"/><text x="6.4460%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (276,893 samples, 0.33%)</title><rect x="8.9486%" y="133" width="0.3308%" height="15" fill="rgb(220,122,19)"/><text x="9.1986%" y="143.50"></text></g><g><title>type_op_prove_predicate (661,481 samples, 0.79%)</title><rect x="9.3404%" y="133" width="0.7903%" height="15" fill="rgb(250,228,42)"/><text x="9.5904%" y="143.50"></text></g><g><title>MIR_borrow_checking (7,663,855 samples, 9.16%)</title><rect x="0.9824%" y="165" width="9.1566%" height="15" fill="rgb(240,193,28)"/><text x="1.2324%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (7,625,804 samples, 9.11%)</title><rect x="1.0278%" y="149" width="9.1111%" height="15" fill="rgb(216,20,37)"/><text x="1.2778%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (96,232 samples, 0.11%)</title><rect x="10.1497%" y="165" width="0.1150%" height="15" fill="rgb(206,188,39)"/><text x="10.3997%" y="175.50"></text></g><g><title>codegen_fn_attrs (138,702 samples, 0.17%)</title><rect x="10.4833%" y="101" width="0.1657%" height="15" fill="rgb(217,207,13)"/><text x="10.7333%" y="111.50"></text></g><g><title>codegen_fn_attrs (208,653 samples, 0.25%)</title><rect x="10.4028%" y="133" width="0.2493%" height="15" fill="rgb(231,73,38)"/><text x="10.6528%" y="143.50"></text></g><g><title>should_inherit_track_caller (185,163 samples, 0.22%)</title><rect x="10.4309%" y="117" width="0.2212%" height="15" fill="rgb(225,20,46)"/><text x="10.6809%" y="127.50"></text></g><g><title>check_mod_attrs (310,523 samples, 0.37%)</title><rect x="10.2812%" y="149" width="0.3710%" height="15" fill="rgb(210,31,41)"/><text x="10.5312%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (224,493 samples, 0.27%)</title><rect x="10.7376%" y="149" width="0.2682%" height="15" fill="rgb(221,200,47)"/><text x="10.9876%" y="159.50"></text></g><g><title>misc_checking_1 (651,057 samples, 0.78%)</title><rect x="10.2650%" y="165" width="0.7779%" height="15" fill="rgb(226,26,5)"/><text x="10.5150%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (110,611 samples, 0.13%)</title><rect x="11.0444%" y="149" width="0.1322%" height="15" fill="rgb(249,33,26)"/><text x="11.2944%" y="159.50"></text></g><g><title>misc_checking_2 (342,284 samples, 0.41%)</title><rect x="11.0429%" y="165" width="0.4090%" height="15" fill="rgb(235,183,28)"/><text x="11.2929%" y="175.50"></text></g><g><title>match_checking (230,383 samples, 0.28%)</title><rect x="11.1766%" y="149" width="0.2753%" height="15" fill="rgb(221,5,38)"/><text x="11.4266%" y="159.50"></text></g><g><title>check_match (219,813 samples, 0.26%)</title><rect x="11.1892%" y="133" width="0.2626%" height="15" fill="rgb(247,18,42)"/><text x="11.4392%" y="143.50"></text></g><g><title>death_checking (304,463 samples, 0.36%)</title><rect x="11.5584%" y="149" width="0.3638%" height="15" fill="rgb(241,131,45)"/><text x="11.8084%" y="159.50"></text></g><g><title>item_attrs (147,840 samples, 0.18%)</title><rect x="11.7455%" y="133" width="0.1766%" height="15" fill="rgb(249,31,29)"/><text x="11.9955%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (146,270 samples, 0.17%)</title><rect x="11.7474%" y="117" width="0.1748%" height="15" fill="rgb(225,111,53)"/><text x="11.9974%" y="127.50"></text></g><g><title>param_env (112,380 samples, 0.13%)</title><rect x="12.5778%" y="117" width="0.1343%" height="15" fill="rgb(238,160,17)"/><text x="12.8278%" y="127.50"></text></g><g><title>crate_lints (1,723,298 samples, 2.06%)</title><rect x="11.9239%" y="133" width="2.0590%" height="15" fill="rgb(214,148,48)"/><text x="12.1739%" y="143.50">c..</text></g><g><title>type_of (1,063,635 samples, 1.27%)</title><rect x="12.7121%" y="117" width="1.2708%" height="15" fill="rgb(232,36,49)"/><text x="12.9621%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (818,030 samples, 0.98%)</title><rect x="13.0055%" y="101" width="0.9774%" height="15" fill="rgb(209,103,24)"/><text x="13.2555%" y="111.50"></text></g><g><title>lint_checking (1,918,631 samples, 2.29%)</title><rect x="11.9222%" y="149" width="2.2923%" height="15" fill="rgb(229,88,8)"/><text x="12.1722%" y="159.50">l..</text></g><g><title>module_lints (193,862 samples, 0.23%)</title><rect x="13.9829%" y="133" width="0.2316%" height="15" fill="rgb(213,181,19)"/><text x="14.2329%" y="143.50"></text></g><g><title>lint_mod (191,342 samples, 0.23%)</title><rect x="13.9859%" y="117" width="0.2286%" height="15" fill="rgb(254,191,54)"/><text x="14.2359%" y="127.50"></text></g><g><title>privacy_access_levels (109,211 samples, 0.13%)</title><rect x="14.2145%" y="149" width="0.1305%" height="15" fill="rgb(241,83,37)"/><text x="14.4645%" y="159.50"></text></g><g><title>privacy_checking_modules (306,523 samples, 0.37%)</title><rect x="14.3450%" y="149" width="0.3662%" height="15" fill="rgb(233,36,39)"/><text x="14.5950%" y="159.50"></text></g><g><title>check_mod_privacy (304,553 samples, 0.36%)</title><rect x="14.3473%" y="133" width="0.3639%" height="15" fill="rgb(226,3,54)"/><text x="14.5973%" y="143.50"></text></g><g><title>misc_checking_3 (2,735,640 samples, 3.27%)</title><rect x="11.4518%" y="165" width="3.2685%" height="15" fill="rgb(245,192,40)"/><text x="11.7018%" y="175.50">mis..</text></g><g><title>impl_trait_ref (191,384 samples, 0.23%)</title><rect x="14.9581%" y="69" width="0.2287%" height="15" fill="rgb(238,167,29)"/><text x="15.2081%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (172,873 samples, 0.21%)</title><rect x="14.9802%" y="53" width="0.2065%" height="15" fill="rgb(232,182,51)"/><text x="15.2302%" y="63.50"></text></g><g><title>adt_destructor (343,564 samples, 0.41%)</title><rect x="14.8062%" y="117" width="0.4105%" height="15" fill="rgb(231,60,39)"/><text x="15.0562%" y="127.50"></text></g><g><title>coherent_trait (340,834 samples, 0.41%)</title><rect x="14.8094%" y="101" width="0.4072%" height="15" fill="rgb(208,69,12)"/><text x="15.0594%" y="111.50"></text></g><g><title>specialization_graph_of (339,694 samples, 0.41%)</title><rect x="14.8108%" y="85" width="0.4059%" height="15" fill="rgb(235,93,37)"/><text x="15.0608%" y="95.50"></text></g><g><title>impl_parent (2,769,310 samples, 3.31%)</title><rect x="20.2270%" y="101" width="3.3087%" height="15" fill="rgb(213,116,39)"/><text x="20.4770%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,456,534 samples, 1.74%)</title><rect x="21.7955%" y="85" width="1.7402%" height="15" fill="rgb(222,207,29)"/><text x="22.0455%" y="95.50"></text></g><g><title>impl_trait_ref (5,619,601 samples, 6.71%)</title><rect x="23.5357%" y="101" width="6.7142%" height="15" fill="rgb(206,96,30)"/><text x="23.7857%" y="111.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,354,877 samples, 5.20%)</title><rect x="25.0468%" y="85" width="5.2031%" height="15" fill="rgb(218,138,4)"/><text x="25.2968%" y="95.50">metada..</text></g><g><title>trait_impls_of (978,388 samples, 1.17%)</title><rect x="30.2747%" y="101" width="1.1690%" height="15" fill="rgb(250,191,14)"/><text x="30.5247%" y="111.50"></text></g><g><title>implementations_of_trait (245,281 samples, 0.29%)</title><rect x="31.1506%" y="85" width="0.2931%" height="15" fill="rgb(239,60,40)"/><text x="31.4006%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (192,531 samples, 0.23%)</title><rect x="31.2136%" y="69" width="0.2300%" height="15" fill="rgb(206,27,48)"/><text x="31.4636%" y="79.50"></text></g><g><title>coherent_trait (13,953,135 samples, 16.67%)</title><rect x="14.7736%" y="133" width="16.6708%" height="15" fill="rgb(225,35,8)"/><text x="15.0236%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (13,553,270 samples, 16.19%)</title><rect x="15.2513%" y="117" width="16.1931%" height="15" fill="rgb(250,213,24)"/><text x="15.5013%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (14,000,755 samples, 16.73%)</title><rect x="14.7536%" y="149" width="16.7277%" height="15" fill="rgb(247,123,22)"/><text x="15.0036%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (104,971 samples, 0.13%)</title><rect x="40.4639%" y="101" width="0.1254%" height="15" fill="rgb(231,138,38)"/><text x="40.7139%" y="111.50"></text></g><g><title>evaluate_obligation (236,952 samples, 0.28%)</title><rect x="40.5893%" y="101" width="0.2831%" height="15" fill="rgb(231,145,46)"/><text x="40.8393%" y="111.50"></text></g><g><title>item_attrs (100,790 samples, 0.12%)</title><rect x="40.9996%" y="101" width="0.1204%" height="15" fill="rgb(251,118,11)"/><text x="41.2496%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,580 samples, 0.12%)</title><rect x="41.0046%" y="85" width="0.1154%" height="15" fill="rgb(217,147,25)"/><text x="41.2546%" y="95.50"></text></g><g><title>predicates_of (102,510 samples, 0.12%)</title><rect x="41.2430%" y="101" width="0.1225%" height="15" fill="rgb(247,81,37)"/><text x="41.4930%" y="111.50"></text></g><g><title>item_bodies_checking (8,353,774 samples, 9.98%)</title><rect x="31.5027%" y="149" width="9.9809%" height="15" fill="rgb(209,12,38)"/><text x="31.7527%" y="159.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (8,351,884 samples, 9.98%)</title><rect x="31.5050%" y="133" width="9.9786%" height="15" fill="rgb(227,1,9)"/><text x="31.7550%" y="143.50">typeck_item_bo..</text></g><g><title>typeck (8,324,954 samples, 9.95%)</title><rect x="31.5372%" y="117" width="9.9464%" height="15" fill="rgb(248,47,43)"/><text x="31.7872%" y="127.50">typeck</text></g><g><title>item_types_checking (494,165 samples, 0.59%)</title><rect x="41.4836%" y="149" width="0.5904%" height="15" fill="rgb(221,10,30)"/><text x="41.7336%" y="159.50"></text></g><g><title>check_mod_item_types (491,815 samples, 0.59%)</title><rect x="41.4864%" y="133" width="0.5876%" height="15" fill="rgb(210,229,1)"/><text x="41.7364%" y="143.50"></text></g><g><title>fn_sig (235,602 samples, 0.28%)</title><rect x="42.2323%" y="117" width="0.2815%" height="15" fill="rgb(222,148,37)"/><text x="42.4823%" y="127.50"></text></g><g><title>named_region_map (206,493 samples, 0.25%)</title><rect x="42.5726%" y="101" width="0.2467%" height="15" fill="rgb(234,67,33)"/><text x="42.8226%" y="111.50"></text></g><g><title>resolve_lifetimes (192,413 samples, 0.23%)</title><rect x="42.5894%" y="85" width="0.2299%" height="15" fill="rgb(247,98,35)"/><text x="42.8394%" y="95.50"></text></g><g><title>generics_of (263,363 samples, 0.31%)</title><rect x="42.5138%" y="117" width="0.3147%" height="15" fill="rgb(247,138,52)"/><text x="42.7638%" y="127.50"></text></g><g><title>predicates_of (250,672 samples, 0.30%)</title><rect x="42.8807%" y="117" width="0.2995%" height="15" fill="rgb(213,79,30)"/><text x="43.1307%" y="127.50"></text></g><g><title>predicates_defined_on (227,922 samples, 0.27%)</title><rect x="42.9079%" y="101" width="0.2723%" height="15" fill="rgb(246,177,23)"/><text x="43.1579%" y="111.50"></text></g><g><title>inferred_outlives_of (124,661 samples, 0.15%)</title><rect x="43.0312%" y="85" width="0.1489%" height="15" fill="rgb(230,62,27)"/><text x="43.2812%" y="95.50"></text></g><g><title>inferred_outlives_crate (112,801 samples, 0.13%)</title><rect x="43.0454%" y="69" width="0.1348%" height="15" fill="rgb(216,154,8)"/><text x="43.2954%" y="79.50"></text></g><g><title>type_collecting (970,251 samples, 1.16%)</title><rect x="42.0747%" y="149" width="1.1592%" height="15" fill="rgb(244,35,45)"/><text x="42.3247%" y="159.50"></text></g><g><title>collect_mod_item_types (962,331 samples, 1.15%)</title><rect x="42.0842%" y="133" width="1.1498%" height="15" fill="rgb(251,115,12)"/><text x="42.3342%" y="143.50"></text></g><g><title>evaluate_obligation (196,682 samples, 0.23%)</title><rect x="44.1276%" y="117" width="0.2350%" height="15" fill="rgb(240,54,50)"/><text x="44.3776%" y="127.50"></text></g><g><title>evaluate_obligation (142,223 samples, 0.17%)</title><rect x="44.5853%" y="101" width="0.1699%" height="15" fill="rgb(233,84,52)"/><text x="44.8353%" y="111.50"></text></g><g><title>object_safety_violations (438,565 samples, 0.52%)</title><rect x="44.4493%" y="117" width="0.5240%" height="15" fill="rgb(207,117,47)"/><text x="44.6993%" y="127.50"></text></g><g><title>region_scope_tree (158,150 samples, 0.19%)</title><rect x="45.0927%" y="117" width="0.1890%" height="15" fill="rgb(249,43,39)"/><text x="45.3427%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,646,756 samples, 1.97%)</title><rect x="43.3329%" y="133" width="1.9675%" height="15" fill="rgb(209,38,44)"/><text x="43.5829%" y="143.50">c..</text></g><g><title>evaluate_obligation (283,173 samples, 0.34%)</title><rect x="45.9264%" y="117" width="0.3383%" height="15" fill="rgb(236,212,23)"/><text x="46.1764%" y="127.50"></text></g><g><title>param_env (108,160 samples, 0.13%)</title><rect x="46.3160%" y="117" width="0.1292%" height="15" fill="rgb(242,79,21)"/><text x="46.5660%" y="127.50"></text></g><g><title>analysis (38,285,605 samples, 45.74%)</title><rect x="0.8274%" y="181" width="45.7426%" height="15" fill="rgb(211,96,35)"/><text x="1.0774%" y="191.50">analysis</text></g><g><title>type_check_crate (26,657,536 samples, 31.85%)</title><rect x="14.7203%" y="165" width="31.8497%" height="15" fill="rgb(253,215,40)"/><text x="14.9703%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,790,591 samples, 3.33%)</title><rect x="43.2359%" y="149" width="3.3341%" height="15" fill="rgb(211,81,21)"/><text x="43.4859%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (1,062,665 samples, 1.27%)</title><rect x="45.3004%" y="133" width="1.2696%" height="15" fill="rgb(208,190,38)"/><text x="45.5504%" y="143.50"></text></g><g><title>codegen_crate (563,616 samples, 0.67%)</title><rect x="46.5799%" y="181" width="0.6734%" height="15" fill="rgb(235,213,38)"/><text x="46.8299%" y="191.50"></text></g><g><title>AST_validation (192,742 samples, 0.23%)</title><rect x="47.4785%" y="165" width="0.2303%" height="15" fill="rgb(237,122,38)"/><text x="47.7285%" y="175.50"></text></g><g><title>metadata_load_macro (233,343 samples, 0.28%)</title><rect x="79.3973%" y="133" width="0.2788%" height="15" fill="rgb(244,218,35)"/><text x="79.6473%" y="143.50"></text></g><g><title>metadata_register_crate (2,777,290 samples, 3.32%)</title><rect x="79.6761%" y="133" width="3.3182%" height="15" fill="rgb(240,68,47)"/><text x="79.9261%" y="143.50">met..</text></g><g><title>metadata_register_crate (967,030 samples, 1.16%)</title><rect x="81.8389%" y="117" width="1.1554%" height="15" fill="rgb(210,16,53)"/><text x="82.0889%" y="127.50"></text></g><g><title>macro_expand_crate (30,107,304 samples, 35.97%)</title><rect x="47.8582%" y="165" width="35.9714%" height="15" fill="rgb(235,124,12)"/><text x="48.1082%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (30,091,614 samples, 35.95%)</title><rect x="47.8770%" y="149" width="35.9527%" height="15" fill="rgb(224,169,11)"/><text x="48.1270%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (699,148 samples, 0.84%)</title><rect x="82.9943%" y="133" width="0.8353%" height="15" fill="rgb(250,166,2)"/><text x="83.2443%" y="143.50"></text></g><g><title>finalize_macro_resolutions (406,115 samples, 0.49%)</title><rect x="83.9734%" y="149" width="0.4852%" height="15" fill="rgb(242,216,29)"/><text x="84.2234%" y="159.50"></text></g><g><title>late_resolve_crate (2,048,622 samples, 2.45%)</title><rect x="84.4586%" y="149" width="2.4476%" height="15" fill="rgb(230,116,27)"/><text x="84.7086%" y="159.50">la..</text></g><g><title>configure_and_expand (33,284,030 samples, 39.77%)</title><rect x="47.2533%" y="181" width="39.7669%" height="15" fill="rgb(228,99,48)"/><text x="47.5033%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,617,298 samples, 3.13%)</title><rect x="83.8931%" y="165" width="3.1271%" height="15" fill="rgb(253,11,6)"/><text x="84.1431%" y="175.50">res..</text></g><g><title>early_lint_checks (182,552 samples, 0.22%)</title><rect x="87.1233%" y="181" width="0.2181%" height="15" fill="rgb(247,143,39)"/><text x="87.3733%" y="191.50"></text></g><g><title>free_global_ctxt (2,906,733 samples, 3.47%)</title><rect x="87.3414%" y="181" width="3.4729%" height="15" fill="rgb(236,97,10)"/><text x="87.5914%" y="191.50">fre..</text></g><g><title>generate_crate_metadata (1,409,396 samples, 1.68%)</title><rect x="90.8143%" y="181" width="1.6839%" height="15" fill="rgb(233,208,19)"/><text x="91.0643%" y="191.50"></text></g><g><title>hir_lowering (4,532,640 samples, 5.42%)</title><rect x="92.4982%" y="181" width="5.4155%" height="15" fill="rgb(216,164,2)"/><text x="92.7482%" y="191.50">hir_low..</text></g><g><title>parse_crate (346,794 samples, 0.41%)</title><rect x="97.9754%" y="181" width="0.4143%" height="15" fill="rgb(220,129,5)"/><text x="98.2254%" y="191.50"></text></g><g><title>prepare_outputs (248,783 samples, 0.30%)</title><rect x="98.3979%" y="181" width="0.2972%" height="15" fill="rgb(242,17,10)"/><text x="98.6479%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (612,227 samples, 0.73%)</title><rect x="98.6952%" y="181" width="0.7315%" height="15" fill="rgb(242,107,0)"/><text x="98.9452%" y="191.50"></text></g><g><title>all (83,697,840 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (83,697,840 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (410,854 samples, 0.49%)</title><rect x="99.5091%" y="181" width="0.4909%" height="15" fill="rgb(215,21,27)"/><text x="99.7591%" y="191.50"></text></g></svg></svg>