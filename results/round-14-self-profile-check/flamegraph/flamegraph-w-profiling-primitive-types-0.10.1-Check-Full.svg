<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (1,652,960 samples, 0.12%)</title><rect x="14.7209%" y="149" width="0.1239%" height="15" fill="rgb(227,0,7)"/><text x="14.9709%" y="159.50"></text></g><g><title>needs_drop_raw (3,873,493 samples, 0.29%)</title><rect x="21.3448%" y="85" width="0.2903%" height="15" fill="rgb(217,0,24)"/><text x="21.5948%" y="95.50"></text></g><g><title>is_copy_raw (2,877,919 samples, 0.22%)</title><rect x="21.4195%" y="69" width="0.2157%" height="15" fill="rgb(221,193,54)"/><text x="21.6695%" y="79.50"></text></g><g><title>evaluate_obligation (2,234,728 samples, 0.17%)</title><rect x="21.4677%" y="53" width="0.1675%" height="15" fill="rgb(248,212,6)"/><text x="21.7177%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (3,581,323 samples, 0.27%)</title><rect x="21.7712%" y="69" width="0.2684%" height="15" fill="rgb(208,68,35)"/><text x="22.0212%" y="79.50"></text></g><g><title>resolve_instance (6,805,835 samples, 0.51%)</title><rect x="21.6352%" y="85" width="0.5101%" height="15" fill="rgb(232,128,0)"/><text x="21.8852%" y="95.50"></text></g><g><title>thir_body (19,640,813 samples, 1.47%)</title><rect x="22.1725%" y="85" width="1.4721%" height="15" fill="rgb(207,160,47)"/><text x="22.4225%" y="95.50"></text></g><g><title>mir_const (103,475,869 samples, 7.76%)</title><rect x="15.9096%" y="133" width="7.7558%" height="15" fill="rgb(228,23,34)"/><text x="16.1596%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (91,751,645 samples, 6.88%)</title><rect x="16.7884%" y="117" width="6.8771%" height="15" fill="rgb(218,30,26)"/><text x="17.0384%" y="127.50">unsafety_..</text></g><g><title>mir_built (83,849,188 samples, 6.28%)</title><rect x="17.3807%" y="101" width="6.2848%" height="15" fill="rgb(220,122,19)"/><text x="17.6307%" y="111.50">mir_built</text></g><g><title>mir_const (7,470,009 samples, 0.56%)</title><rect x="23.8512%" y="117" width="0.5599%" height="15" fill="rgb(250,228,42)"/><text x="24.1012%" y="127.50"></text></g><g><title>unsafety_check_result (5,564,362 samples, 0.42%)</title><rect x="23.9941%" y="101" width="0.4171%" height="15" fill="rgb(240,193,28)"/><text x="24.2441%" y="111.50"></text></g><g><title>mir_built (4,872,791 samples, 0.37%)</title><rect x="24.0459%" y="85" width="0.3652%" height="15" fill="rgb(216,20,37)"/><text x="24.2959%" y="95.50"></text></g><g><title>mir_promoted (127,564,980 samples, 9.56%)</title><rect x="14.8499%" y="149" width="9.5614%" height="15" fill="rgb(206,188,39)"/><text x="15.0999%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (9,950,526 samples, 0.75%)</title><rect x="23.6654%" y="133" width="0.7458%" height="15" fill="rgb(217,207,13)"/><text x="23.9154%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,835,954 samples, 0.14%)</title><rect x="24.4136%" y="149" width="0.1376%" height="15" fill="rgb(231,73,38)"/><text x="24.6636%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (6,827,287 samples, 0.51%)</title><rect x="24.5512%" y="149" width="0.5117%" height="15" fill="rgb(225,20,46)"/><text x="24.8012%" y="159.50"></text></g><g><title>normalize_projection_ty (4,780,148 samples, 0.36%)</title><rect x="24.7047%" y="133" width="0.3583%" height="15" fill="rgb(210,31,41)"/><text x="24.9547%" y="143.50"></text></g><g><title>type_op_prove_predicate (10,936,296 samples, 0.82%)</title><rect x="25.2013%" y="149" width="0.8197%" height="15" fill="rgb(221,200,47)"/><text x="25.4513%" y="159.50"></text></g><g><title>evaluate_obligation (1,586,635 samples, 0.12%)</title><rect x="25.9021%" y="133" width="0.1189%" height="15" fill="rgb(226,26,5)"/><text x="26.1521%" y="143.50"></text></g><g><title>MIR_borrow_checking (339,852,272 samples, 25.47%)</title><rect x="0.5485%" y="181" width="25.4730%" height="15" fill="rgb(249,33,26)"/><text x="0.7985%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (335,842,917 samples, 25.17%)</title><rect x="0.8490%" y="165" width="25.1725%" height="15" fill="rgb(235,183,28)"/><text x="1.0990%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (5,565,983 samples, 0.42%)</title><rect x="26.0215%" y="181" width="0.4172%" height="15" fill="rgb(221,5,38)"/><text x="26.2715%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,273,099 samples, 0.32%)</title><rect x="26.1184%" y="165" width="0.3203%" height="15" fill="rgb(247,18,42)"/><text x="26.3684%" y="175.50"></text></g><g><title>hir_module_items (2,477,409 samples, 0.19%)</title><rect x="26.4387%" y="181" width="0.1857%" height="15" fill="rgb(241,131,45)"/><text x="26.6887%" y="191.50"></text></g><g><title>should_inherit_track_caller (1,413,424 samples, 0.11%)</title><rect x="26.9796%" y="133" width="0.1059%" height="15" fill="rgb(249,31,29)"/><text x="27.2296%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,681,948 samples, 0.20%)</title><rect x="26.8862%" y="149" width="0.2010%" height="15" fill="rgb(225,111,53)"/><text x="27.1362%" y="159.50"></text></g><g><title>check_mod_attrs (6,140,508 samples, 0.46%)</title><rect x="26.6271%" y="165" width="0.4603%" height="15" fill="rgb(238,160,17)"/><text x="26.8771%" y="175.50"></text></g><g><title>check_mod_const_bodies (1,886,411 samples, 0.14%)</title><rect x="27.0873%" y="165" width="0.1414%" height="15" fill="rgb(214,148,48)"/><text x="27.3373%" y="175.50"></text></g><g><title>lint_levels (2,985,553 samples, 0.22%)</title><rect x="27.4695%" y="149" width="0.2238%" height="15" fill="rgb(232,36,49)"/><text x="27.7195%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (6,570,674 samples, 0.49%)</title><rect x="27.3158%" y="165" width="0.4925%" height="15" fill="rgb(209,103,24)"/><text x="27.5658%" y="175.50"></text></g><g><title>misc_checking_1 (16,129,631 samples, 1.21%)</title><rect x="26.6244%" y="181" width="1.2090%" height="15" fill="rgb(229,88,8)"/><text x="26.8744%" y="191.50"></text></g><g><title>check_mod_intrinsics (1,932,972 samples, 0.14%)</title><rect x="27.8345%" y="149" width="0.1449%" height="15" fill="rgb(213,181,19)"/><text x="28.0845%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (8,910,840 samples, 0.67%)</title><rect x="27.8336%" y="165" width="0.6679%" height="15" fill="rgb(254,191,54)"/><text x="28.0836%" y="175.50"></text></g><g><title>check_mod_liveness (6,966,517 samples, 0.52%)</title><rect x="27.9794%" y="149" width="0.5222%" height="15" fill="rgb(241,83,37)"/><text x="28.2294%" y="159.50"></text></g><g><title>misc_checking_2 (19,023,024 samples, 1.43%)</title><rect x="27.8334%" y="181" width="1.4258%" height="15" fill="rgb(233,36,39)"/><text x="28.0834%" y="191.50"></text></g><g><title>match_checking (10,108,964 samples, 0.76%)</title><rect x="28.5015%" y="165" width="0.7577%" height="15" fill="rgb(226,3,54)"/><text x="28.7515%" y="175.50"></text></g><g><title>check_match (9,144,673 samples, 0.69%)</title><rect x="28.5738%" y="149" width="0.6854%" height="15" fill="rgb(245,192,40)"/><text x="28.8238%" y="159.50"></text></g><g><title>check_private_in_public (3,540,689 samples, 0.27%)</title><rect x="29.2607%" y="165" width="0.2654%" height="15" fill="rgb(238,167,29)"/><text x="29.5107%" y="175.50"></text></g><g><title>death_checking (5,179,528 samples, 0.39%)</title><rect x="29.5261%" y="165" width="0.3882%" height="15" fill="rgb(232,182,51)"/><text x="29.7761%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,483,530 samples, 0.19%)</title><rect x="30.4550%" y="133" width="0.1861%" height="15" fill="rgb(231,60,39)"/><text x="30.7050%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,369,867 samples, 0.18%)</title><rect x="30.4635%" y="117" width="0.1776%" height="15" fill="rgb(208,69,12)"/><text x="30.7135%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,192,275 samples, 0.16%)</title><rect x="30.4768%" y="101" width="0.1643%" height="15" fill="rgb(235,93,37)"/><text x="30.7268%" y="111.50"></text></g><g><title>crate_lints (12,257,408 samples, 0.92%)</title><rect x="29.9146%" y="149" width="0.9187%" height="15" fill="rgb(213,116,39)"/><text x="30.1646%" y="159.50"></text></g><g><title>type_of (1,398,509 samples, 0.10%)</title><rect x="30.7285%" y="133" width="0.1048%" height="15" fill="rgb(222,207,29)"/><text x="30.9785%" y="143.50"></text></g><g><title>lint_checking (20,737,993 samples, 1.55%)</title><rect x="29.9143%" y="165" width="1.5544%" height="15" fill="rgb(206,96,30)"/><text x="30.1643%" y="175.50"></text></g><g><title>module_lints (8,476,905 samples, 0.64%)</title><rect x="30.8333%" y="149" width="0.6354%" height="15" fill="rgb(218,138,4)"/><text x="31.0833%" y="159.50"></text></g><g><title>lint_mod (8,465,025 samples, 0.63%)</title><rect x="30.8342%" y="133" width="0.6345%" height="15" fill="rgb(250,191,14)"/><text x="31.0842%" y="143.50"></text></g><g><title>privacy_access_levels (4,885,214 samples, 0.37%)</title><rect x="31.4687%" y="165" width="0.3662%" height="15" fill="rgb(239,60,40)"/><text x="31.7187%" y="175.50"></text></g><g><title>privacy_checking_modules (12,889,394 samples, 0.97%)</title><rect x="31.8349%" y="165" width="0.9661%" height="15" fill="rgb(206,27,48)"/><text x="32.0849%" y="175.50"></text></g><g><title>check_mod_privacy (12,881,434 samples, 0.97%)</title><rect x="31.8355%" y="149" width="0.9655%" height="15" fill="rgb(225,35,8)"/><text x="32.0855%" y="159.50"></text></g><g><title>misc_checking_3 (47,337,839 samples, 3.55%)</title><rect x="29.2592%" y="181" width="3.5481%" height="15" fill="rgb(250,213,24)"/><text x="29.5092%" y="191.50">misc..</text></g><g><title>evaluate_obligation (1,462,707 samples, 0.11%)</title><rect x="35.8149%" y="53" width="0.1096%" height="15" fill="rgb(247,123,22)"/><text x="36.0649%" y="63.50"></text></g><g><title>eval_to_const_value_raw (5,568,034 samples, 0.42%)</title><rect x="35.5253%" y="117" width="0.4173%" height="15" fill="rgb(231,138,38)"/><text x="35.7753%" y="127.50"></text></g><g><title>eval_to_const_value_raw (5,549,264 samples, 0.42%)</title><rect x="35.5267%" y="101" width="0.4159%" height="15" fill="rgb(231,145,46)"/><text x="35.7767%" y="111.50"></text></g><g><title>eval_to_allocation_raw (5,526,524 samples, 0.41%)</title><rect x="35.5284%" y="85" width="0.4142%" height="15" fill="rgb(251,118,11)"/><text x="35.7784%" y="95.50"></text></g><g><title>typeck (2,765,011 samples, 0.21%)</title><rect x="35.7354%" y="69" width="0.2072%" height="15" fill="rgb(217,147,25)"/><text x="35.9854%" y="79.50"></text></g><g><title>impl_parent (5,843,916 samples, 0.44%)</title><rect x="36.0039%" y="117" width="0.4380%" height="15" fill="rgb(247,81,37)"/><text x="36.2539%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,979,726 samples, 0.22%)</title><rect x="36.2185%" y="101" width="0.2233%" height="15" fill="rgb(209,12,38)"/><text x="36.4685%" y="111.50"></text></g><g><title>impl_trait_ref (11,338,385 samples, 0.85%)</title><rect x="36.4419%" y="117" width="0.8498%" height="15" fill="rgb(227,1,9)"/><text x="36.6919%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,749,629 samples, 0.66%)</title><rect x="36.6360%" y="101" width="0.6558%" height="15" fill="rgb(248,47,43)"/><text x="36.8860%" y="111.50"></text></g><g><title>item_attrs (5,073,064 samples, 0.38%)</title><rect x="37.2918%" y="117" width="0.3802%" height="15" fill="rgb(221,10,30)"/><text x="37.5418%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (4,768,549 samples, 0.36%)</title><rect x="37.3146%" y="101" width="0.3574%" height="15" fill="rgb(210,229,1)"/><text x="37.5646%" y="111.50"></text></g><g><title>predicates_of (3,354,291 samples, 0.25%)</title><rect x="37.6722%" y="117" width="0.2514%" height="15" fill="rgb(222,148,37)"/><text x="37.9222%" y="127.50"></text></g><g><title>predicates_defined_on (2,098,759 samples, 0.16%)</title><rect x="37.7663%" y="101" width="0.1573%" height="15" fill="rgb(234,67,33)"/><text x="38.0163%" y="111.50"></text></g><g><title>trait_impls_of (2,766,889 samples, 0.21%)</title><rect x="37.9265%" y="117" width="0.2074%" height="15" fill="rgb(247,98,35)"/><text x="38.1765%" y="127.50"></text></g><g><title>coherent_trait (70,962,134 samples, 5.32%)</title><rect x="32.8776%" y="149" width="5.3188%" height="15" fill="rgb(247,138,52)"/><text x="33.1276%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (70,255,946 samples, 5.27%)</title><rect x="32.9305%" y="133" width="5.2659%" height="15" fill="rgb(213,79,30)"/><text x="33.1805%" y="143.50">specia..</text></g><g><title>coherence_checking (71,618,921 samples, 5.37%)</title><rect x="32.8730%" y="165" width="5.3681%" height="15" fill="rgb(246,177,23)"/><text x="33.1230%" y="175.50">coheren..</text></g><g><title>associated_items (1,445,397 samples, 0.11%)</title><rect x="58.8175%" y="117" width="0.1083%" height="15" fill="rgb(230,62,27)"/><text x="59.0675%" y="127.50"></text></g><g><title>mir_const_qualif (1,527,536 samples, 0.11%)</title><rect x="59.0808%" y="85" width="0.1145%" height="15" fill="rgb(216,154,8)"/><text x="59.3308%" y="95.50"></text></g><g><title>mir_borrowck (3,119,229 samples, 0.23%)</title><rect x="59.3080%" y="53" width="0.2338%" height="15" fill="rgb(244,35,45)"/><text x="59.5580%" y="63.50"></text></g><g><title>mir_for_ctfe (4,648,247 samples, 0.35%)</title><rect x="59.1953%" y="85" width="0.3484%" height="15" fill="rgb(251,115,12)"/><text x="59.4453%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,236,603 samples, 0.32%)</title><rect x="59.2261%" y="69" width="0.3175%" height="15" fill="rgb(240,54,50)"/><text x="59.4761%" y="79.50"></text></g><g><title>eval_to_allocation_raw (8,082,741 samples, 0.61%)</title><rect x="59.0064%" y="101" width="0.6058%" height="15" fill="rgb(233,84,52)"/><text x="59.2564%" y="111.50"></text></g><g><title>eval_to_const_value_raw (9,662,299 samples, 0.72%)</title><rect x="58.9960%" y="117" width="0.7242%" height="15" fill="rgb(207,117,47)"/><text x="59.2460%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,440,798 samples, 0.11%)</title><rect x="59.6122%" y="101" width="0.1080%" height="15" fill="rgb(249,43,39)"/><text x="59.8622%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,403,808 samples, 0.11%)</title><rect x="59.6150%" y="85" width="0.1052%" height="15" fill="rgb(209,38,44)"/><text x="59.8650%" y="95.50"></text></g><g><title>generics_of (1,668,181 samples, 0.13%)</title><rect x="61.0127%" y="101" width="0.1250%" height="15" fill="rgb(236,212,23)"/><text x="61.2627%" y="111.50"></text></g><g><title>evaluate_obligation (21,480,164 samples, 1.61%)</title><rect x="59.7202%" y="117" width="1.6100%" height="15" fill="rgb(242,79,21)"/><text x="59.9702%" y="127.50"></text></g><g><title>param_env (2,535,317 samples, 0.19%)</title><rect x="61.5952%" y="117" width="0.1900%" height="15" fill="rgb(211,96,35)"/><text x="61.8452%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,446,669 samples, 0.18%)</title><rect x="73.6759%" y="101" width="0.1834%" height="15" fill="rgb(253,215,40)"/><text x="73.9259%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,373,126 samples, 0.10%)</title><rect x="73.7564%" y="85" width="0.1029%" height="15" fill="rgb(211,81,21)"/><text x="74.0064%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,356,536 samples, 0.10%)</title><rect x="73.7576%" y="69" width="0.1017%" height="15" fill="rgb(208,190,38)"/><text x="74.0076%" y="79.50"></text></g><g><title>evaluate_obligation (4,235,507 samples, 0.32%)</title><rect x="73.8593%" y="101" width="0.3175%" height="15" fill="rgb(235,213,38)"/><text x="74.1093%" y="111.50"></text></g><g><title>typeck (164,432,109 samples, 12.32%)</title><rect x="61.9727%" y="117" width="12.3247%" height="15" fill="rgb(237,122,38)"/><text x="62.2227%" y="127.50">typeck</text></g><g><title>item_bodies_checking (480,914,251 samples, 36.05%)</title><rect x="38.2832%" y="165" width="36.0461%" height="15" fill="rgb(244,218,35)"/><text x="38.5332%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (480,910,021 samples, 36.05%)</title><rect x="38.2835%" y="149" width="36.0457%" height="15" fill="rgb(240,68,47)"/><text x="38.5335%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (479,313,986 samples, 35.93%)</title><rect x="38.4031%" y="133" width="35.9261%" height="15" fill="rgb(210,16,53)"/><text x="38.6531%" y="143.50">typeck</text></g><g><title>specializes (1,505,695 samples, 0.11%)</title><rect x="77.0802%" y="101" width="0.1129%" height="15" fill="rgb(235,124,12)"/><text x="77.3302%" y="111.50"></text></g><g><title>evaluate_obligation (4,863,256 samples, 0.36%)</title><rect x="76.8292%" y="117" width="0.3645%" height="15" fill="rgb(224,169,11)"/><text x="77.0792%" y="127.50"></text></g><g><title>item_types_checking (38,469,120 samples, 2.88%)</title><rect x="74.3292%" y="165" width="2.8834%" height="15" fill="rgb(250,166,2)"/><text x="74.5792%" y="175.50">it..</text></g><g><title>check_mod_item_types (38,462,780 samples, 2.88%)</title><rect x="74.3297%" y="149" width="2.8829%" height="15" fill="rgb(242,216,29)"/><text x="74.5797%" y="159.50">ch..</text></g><g><title>typeck (12,700,039 samples, 0.95%)</title><rect x="76.2607%" y="133" width="0.9519%" height="15" fill="rgb(230,116,27)"/><text x="76.5107%" y="143.50"></text></g><g><title>fn_sig (2,881,049 samples, 0.22%)</title><rect x="77.4679%" y="133" width="0.2159%" height="15" fill="rgb(228,99,48)"/><text x="77.7179%" y="143.50"></text></g><g><title>is_late_bound_map (1,651,697 samples, 0.12%)</title><rect x="77.7958%" y="117" width="0.1238%" height="15" fill="rgb(253,11,6)"/><text x="78.0458%" y="127.50"></text></g><g><title>resolve_lifetimes (1,507,514 samples, 0.11%)</title><rect x="77.8066%" y="101" width="0.1130%" height="15" fill="rgb(247,143,39)"/><text x="78.0566%" y="111.50"></text></g><g><title>named_region_map (2,645,564 samples, 0.20%)</title><rect x="77.9196%" y="117" width="0.1983%" height="15" fill="rgb(236,97,10)"/><text x="78.1696%" y="127.50"></text></g><g><title>resolve_lifetimes (2,438,453 samples, 0.18%)</title><rect x="77.9351%" y="101" width="0.1828%" height="15" fill="rgb(233,208,19)"/><text x="78.1851%" y="111.50"></text></g><g><title>generics_of (5,943,782 samples, 0.45%)</title><rect x="77.6839%" y="133" width="0.4455%" height="15" fill="rgb(216,164,2)"/><text x="77.9339%" y="143.50"></text></g><g><title>explicit_predicates_of (2,054,781 samples, 0.15%)</title><rect x="78.3180%" y="101" width="0.1540%" height="15" fill="rgb(220,129,5)"/><text x="78.5680%" y="111.50"></text></g><g><title>predicates_of (4,175,797 samples, 0.31%)</title><rect x="78.1883%" y="133" width="0.3130%" height="15" fill="rgb(242,17,10)"/><text x="78.4383%" y="143.50"></text></g><g><title>predicates_defined_on (3,535,979 samples, 0.27%)</title><rect x="78.2363%" y="117" width="0.2650%" height="15" fill="rgb(242,107,0)"/><text x="78.4863%" y="127.50"></text></g><g><title>type_collecting (18,506,237 samples, 1.39%)</title><rect x="77.2132%" y="165" width="1.3871%" height="15" fill="rgb(251,28,31)"/><text x="77.4632%" y="175.50"></text></g><g><title>collect_mod_item_types (18,489,187 samples, 1.39%)</title><rect x="77.2145%" y="149" width="1.3858%" height="15" fill="rgb(233,223,10)"/><text x="77.4645%" y="159.50"></text></g><g><title>mir_for_ctfe (1,589,827 samples, 0.12%)</title><rect x="80.3043%" y="85" width="0.1192%" height="15" fill="rgb(215,21,27)"/><text x="80.5543%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,444,536 samples, 0.11%)</title><rect x="80.3152%" y="69" width="0.1083%" height="15" fill="rgb(232,23,21)"/><text x="80.5652%" y="79.50"></text></g><g><title>eval_to_const_value_raw (4,562,874 samples, 0.34%)</title><rect x="80.2408%" y="133" width="0.3420%" height="15" fill="rgb(244,5,23)"/><text x="80.4908%" y="143.50"></text></g><g><title>eval_to_const_value_raw (4,548,914 samples, 0.34%)</title><rect x="80.2419%" y="117" width="0.3410%" height="15" fill="rgb(226,81,46)"/><text x="80.4919%" y="127.50"></text></g><g><title>eval_to_allocation_raw (4,516,714 samples, 0.34%)</title><rect x="80.2443%" y="101" width="0.3385%" height="15" fill="rgb(247,70,30)"/><text x="80.4943%" y="111.50"></text></g><g><title>typeck (2,123,324 samples, 0.16%)</title><rect x="80.4237%" y="85" width="0.1591%" height="15" fill="rgb(212,68,19)"/><text x="80.6737%" y="95.50"></text></g><g><title>evaluate_obligation (1,548,852 samples, 0.12%)</title><rect x="80.5828%" y="133" width="0.1161%" height="15" fill="rgb(240,187,13)"/><text x="80.8328%" y="143.50"></text></g><g><title>param_env (4,415,740 samples, 0.33%)</title><rect x="80.7605%" y="133" width="0.3310%" height="15" fill="rgb(223,113,26)"/><text x="81.0105%" y="143.50"></text></g><g><title>region_scope_tree (7,147,321 samples, 0.54%)</title><rect x="81.0987%" y="133" width="0.5357%" height="15" fill="rgb(206,192,2)"/><text x="81.3487%" y="143.50"></text></g><g><title>check_impl_item_well_formed (37,661,288 samples, 2.82%)</title><rect x="78.8369%" y="149" width="2.8228%" height="15" fill="rgb(241,108,4)"/><text x="79.0869%" y="159.50">ch..</text></g><g><title>eval_to_const_value_raw (2,757,140 samples, 0.21%)</title><rect x="83.4060%" y="69" width="0.2067%" height="15" fill="rgb(247,173,49)"/><text x="83.6560%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,748,670 samples, 0.21%)</title><rect x="83.4066%" y="53" width="0.2060%" height="15" fill="rgb(224,114,35)"/><text x="83.6566%" y="63.50"></text></g><g><title>eval_to_allocation_raw (2,731,899 samples, 0.20%)</title><rect x="83.4079%" y="37" width="0.2048%" height="15" fill="rgb(245,159,27)"/><text x="83.6579%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,823,581 samples, 0.21%)</title><rect x="83.4029%" y="85" width="0.2116%" height="15" fill="rgb(245,172,44)"/><text x="83.6529%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,980,907 samples, 0.45%)</title><rect x="83.2803%" y="133" width="0.4483%" height="15" fill="rgb(236,23,11)"/><text x="83.5303%" y="143.50"></text></g><g><title>eval_to_const_value_raw (5,975,637 samples, 0.45%)</title><rect x="83.2807%" y="117" width="0.4479%" height="15" fill="rgb(205,117,38)"/><text x="83.5307%" y="127.50"></text></g><g><title>eval_to_allocation_raw (5,968,677 samples, 0.45%)</title><rect x="83.2812%" y="101" width="0.4474%" height="15" fill="rgb(237,72,25)"/><text x="83.5312%" y="111.50"></text></g><g><title>typeck (1,522,467 samples, 0.11%)</title><rect x="83.6145%" y="85" width="0.1141%" height="15" fill="rgb(244,70,9)"/><text x="83.8645%" y="95.50"></text></g><g><title>evaluate_obligation (4,547,971 samples, 0.34%)</title><rect x="83.7286%" y="133" width="0.3409%" height="15" fill="rgb(217,125,39)"/><text x="83.9786%" y="143.50"></text></g><g><title>param_env (2,640,887 samples, 0.20%)</title><rect x="84.1085%" y="133" width="0.1979%" height="15" fill="rgb(235,36,10)"/><text x="84.3585%" y="143.50"></text></g><g><title>analysis (1,122,744,423 samples, 84.15%)</title><rect x="0.2582%" y="197" width="84.1533%" height="15" fill="rgb(251,123,47)"/><text x="0.5082%" y="207.50">analysis</text></g><g><title>type_check_crate (688,484,183 samples, 51.60%)</title><rect x="32.8074%" y="181" width="51.6041%" height="15" fill="rgb(221,13,13)"/><text x="33.0574%" y="191.50">type_check_crate</text></g><g><title>wf_checking (77,413,287 samples, 5.80%)</title><rect x="78.6091%" y="165" width="5.8024%" height="15" fill="rgb(238,131,9)"/><text x="78.8591%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (36,712,049 samples, 2.75%)</title><rect x="81.6598%" y="149" width="2.7517%" height="15" fill="rgb(211,50,8)"/><text x="81.9098%" y="159.50">ch..</text></g><g><title>AST_validation (1,821,930 samples, 0.14%)</title><rect x="84.4582%" y="181" width="0.1366%" height="15" fill="rgb(245,182,24)"/><text x="84.7082%" y="191.50"></text></g><g><title>complete_gated_feature_checking (1,390,356 samples, 0.10%)</title><rect x="84.5948%" y="181" width="0.1042%" height="15" fill="rgb(242,14,37)"/><text x="84.8448%" y="191.50"></text></g><g><title>metadata_load_macro (2,209,001 samples, 0.17%)</title><rect x="90.4929%" y="149" width="0.1656%" height="15" fill="rgb(246,228,12)"/><text x="90.7429%" y="159.50"></text></g><g><title>macro_expand_crate (90,712,385 samples, 6.80%)</title><rect x="84.7030%" y="181" width="6.7992%" height="15" fill="rgb(213,55,15)"/><text x="84.9530%" y="191.50">macro_exp..</text></g><g><title>expand_crate (90,698,995 samples, 6.80%)</title><rect x="84.7040%" y="165" width="6.7982%" height="15" fill="rgb(209,9,3)"/><text x="84.9540%" y="175.50">expand_cr..</text></g><g><title>metadata_register_crate (11,256,606 samples, 0.84%)</title><rect x="90.6584%" y="149" width="0.8437%" height="15" fill="rgb(230,59,30)"/><text x="90.9084%" y="159.50"></text></g><g><title>metadata_register_crate (10,094,035 samples, 0.76%)</title><rect x="90.7456%" y="133" width="0.7566%" height="15" fill="rgb(209,121,21)"/><text x="90.9956%" y="143.50"></text></g><g><title>metadata_register_crate (8,851,288 samples, 0.66%)</title><rect x="90.8387%" y="117" width="0.6634%" height="15" fill="rgb(220,109,13)"/><text x="91.0887%" y="127.50"></text></g><g><title>late_resolve_crate (21,795,623 samples, 1.63%)</title><rect x="91.5873%" y="165" width="1.6337%" height="15" fill="rgb(232,18,1)"/><text x="91.8373%" y="175.50"></text></g><g><title>resolve_check_unused (1,667,629 samples, 0.12%)</title><rect x="93.2226%" y="165" width="0.1250%" height="15" fill="rgb(215,41,42)"/><text x="93.4726%" y="175.50"></text></g><g><title>configure_and_expand (119,961,823 samples, 8.99%)</title><rect x="84.4483%" y="197" width="8.9915%" height="15" fill="rgb(224,123,36)"/><text x="84.6983%" y="207.50">configure_and..</text></g><g><title>resolve_crate (25,774,548 samples, 1.93%)</title><rect x="91.5080%" y="181" width="1.9319%" height="15" fill="rgb(240,125,3)"/><text x="91.7580%" y="191.50">r..</text></g><g><title>drop_ast (3,338,977 samples, 0.25%)</title><rect x="93.4399%" y="197" width="0.2503%" height="15" fill="rgb(205,98,50)"/><text x="93.6899%" y="207.50"></text></g><g><title>early_lint_checks (6,913,338 samples, 0.52%)</title><rect x="93.6923%" y="197" width="0.5182%" height="15" fill="rgb(205,185,37)"/><text x="93.9423%" y="207.50"></text></g><g><title>free_global_ctxt (13,552,621 samples, 1.02%)</title><rect x="94.2105%" y="197" width="1.0158%" height="15" fill="rgb(238,207,15)"/><text x="94.4605%" y="207.50"></text></g><g><title>generate_crate_metadata (12,990,246 samples, 0.97%)</title><rect x="95.2263%" y="197" width="0.9737%" height="15" fill="rgb(213,199,42)"/><text x="95.4763%" y="207.50"></text></g><g><title>hir_lowering (44,661,959 samples, 3.35%)</title><rect x="96.1999%" y="197" width="3.3476%" height="15" fill="rgb(235,201,11)"/><text x="96.4499%" y="207.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,769,891 samples, 0.28%)</title><rect x="99.6494%" y="197" width="0.2826%" height="15" fill="rgb(207,46,11)"/><text x="99.8994%" y="207.50"></text></g><g><title>all (1,334,165,938 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,334,165,938 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>