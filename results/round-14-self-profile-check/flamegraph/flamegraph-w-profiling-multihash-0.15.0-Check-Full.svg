<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,289,353 samples, 0.36%)</title><rect x="9.6589%" y="133" width="0.3595%" height="15" fill="rgb(227,0,7)"/><text x="9.9089%" y="143.50"></text></g><g><title>adt_drop_tys (712,208 samples, 0.20%)</title><rect x="14.3877%" y="53" width="0.1986%" height="15" fill="rgb(217,0,24)"/><text x="14.6377%" y="63.50"></text></g><g><title>is_copy_raw (5,094,941 samples, 1.42%)</title><rect x="14.5863%" y="53" width="1.4205%" height="15" fill="rgb(221,193,54)"/><text x="14.8363%" y="63.50"></text></g><g><title>evaluate_obligation (4,658,796 samples, 1.30%)</title><rect x="14.7079%" y="37" width="1.2989%" height="15" fill="rgb(248,212,6)"/><text x="14.9579%" y="47.50"></text></g><g><title>needs_drop_raw (6,225,973 samples, 1.74%)</title><rect x="14.3048%" y="69" width="1.7359%" height="15" fill="rgb(208,68,35)"/><text x="14.5548%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,772,756 samples, 0.49%)</title><rect x="16.2457%" y="53" width="0.4943%" height="15" fill="rgb(232,128,0)"/><text x="16.4957%" y="63.50"></text></g><g><title>impl_item_implementor_ids (366,413 samples, 0.10%)</title><rect x="16.7482%" y="53" width="0.1022%" height="15" fill="rgb(207,160,47)"/><text x="16.9982%" y="63.50"></text></g><g><title>resolve_instance (3,378,728 samples, 0.94%)</title><rect x="16.0502%" y="69" width="0.9420%" height="15" fill="rgb(228,23,34)"/><text x="16.3002%" y="79.50"></text></g><g><title>thir_body (2,724,762 samples, 0.76%)</title><rect x="17.0166%" y="69" width="0.7597%" height="15" fill="rgb(218,30,26)"/><text x="17.2666%" y="79.50"></text></g><g><title>mir_const (25,109,444 samples, 7.00%)</title><rect x="10.7940%" y="117" width="7.0009%" height="15" fill="rgb(220,122,19)"/><text x="11.0440%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (22,450,716 samples, 6.26%)</title><rect x="11.5353%" y="101" width="6.2596%" height="15" fill="rgb(250,228,42)"/><text x="11.7853%" y="111.50">unsafety..</text></g><g><title>mir_built (20,676,609 samples, 5.76%)</title><rect x="12.0299%" y="85" width="5.7650%" height="15" fill="rgb(240,193,28)"/><text x="12.2799%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (27,645,348 samples, 7.71%)</title><rect x="10.1310%" y="133" width="7.7079%" height="15" fill="rgb(216,20,37)"/><text x="10.3810%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,201,116 samples, 0.61%)</title><rect x="17.8390%" y="133" width="0.6137%" height="15" fill="rgb(206,188,39)"/><text x="18.0890%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,413,760 samples, 0.39%)</title><rect x="18.4527%" y="133" width="0.3942%" height="15" fill="rgb(217,207,13)"/><text x="18.7027%" y="143.50"></text></g><g><title>normalize_projection_ty (1,020,525 samples, 0.28%)</title><rect x="18.5623%" y="117" width="0.2845%" height="15" fill="rgb(231,73,38)"/><text x="18.8123%" y="127.50"></text></g><g><title>type_op_normalize_ty (632,168 samples, 0.18%)</title><rect x="18.9051%" y="133" width="0.1763%" height="15" fill="rgb(225,20,46)"/><text x="19.1551%" y="143.50"></text></g><g><title>normalize_projection_ty (438,295 samples, 0.12%)</title><rect x="18.9591%" y="117" width="0.1222%" height="15" fill="rgb(210,31,41)"/><text x="19.2091%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,904,236 samples, 1.65%)</title><rect x="19.0813%" y="133" width="1.6462%" height="15" fill="rgb(221,200,47)"/><text x="19.3313%" y="143.50"></text></g><g><title>MIR_borrow_checking (72,412,781 samples, 20.19%)</title><rect x="0.5411%" y="165" width="20.1898%" height="15" fill="rgb(226,26,5)"/><text x="0.7911%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (71,946,695 samples, 20.06%)</title><rect x="0.6711%" y="149" width="20.0598%" height="15" fill="rgb(249,33,26)"/><text x="0.9211%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (639,129 samples, 0.18%)</title><rect x="20.7718%" y="165" width="0.1782%" height="15" fill="rgb(235,183,28)"/><text x="21.0218%" y="175.50"></text></g><g><title>codegen_fn_attrs (805,441 samples, 0.22%)</title><rect x="21.1337%" y="133" width="0.2246%" height="15" fill="rgb(221,5,38)"/><text x="21.3837%" y="143.50"></text></g><g><title>should_inherit_track_caller (670,738 samples, 0.19%)</title><rect x="21.1712%" y="117" width="0.1870%" height="15" fill="rgb(247,18,42)"/><text x="21.4212%" y="127.50"></text></g><g><title>check_mod_attrs (1,426,228 samples, 0.40%)</title><rect x="20.9606%" y="149" width="0.3977%" height="15" fill="rgb(241,131,45)"/><text x="21.2106%" y="159.50"></text></g><g><title>check_mod_const_bodies (386,975 samples, 0.11%)</title><rect x="21.3583%" y="149" width="0.1079%" height="15" fill="rgb(249,31,29)"/><text x="21.6083%" y="159.50"></text></g><g><title>lookup_deprecation_entry (444,404 samples, 0.12%)</title><rect x="21.6568%" y="133" width="0.1239%" height="15" fill="rgb(225,111,53)"/><text x="21.9068%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,027,011 samples, 0.29%)</title><rect x="21.5279%" y="149" width="0.2863%" height="15" fill="rgb(238,160,17)"/><text x="21.7779%" y="159.50"></text></g><g><title>misc_checking_1 (3,265,077 samples, 0.91%)</title><rect x="20.9501%" y="165" width="0.9104%" height="15" fill="rgb(214,148,48)"/><text x="21.2001%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,435,416 samples, 0.40%)</title><rect x="21.8610%" y="149" width="0.4002%" height="15" fill="rgb(232,36,49)"/><text x="22.1110%" y="159.50"></text></g><g><title>check_mod_liveness (1,186,605 samples, 0.33%)</title><rect x="21.9303%" y="133" width="0.3308%" height="15" fill="rgb(209,103,24)"/><text x="22.1803%" y="143.50"></text></g><g><title>type_uninhabited_from (549,636 samples, 0.15%)</title><rect x="22.1079%" y="117" width="0.1532%" height="15" fill="rgb(229,88,8)"/><text x="22.3579%" y="127.50"></text></g><g><title>type_uninhabited_from (465,424 samples, 0.13%)</title><rect x="22.1314%" y="101" width="0.1298%" height="15" fill="rgb(213,181,19)"/><text x="22.3814%" y="111.50"></text></g><g><title>misc_checking_2 (3,007,963 samples, 0.84%)</title><rect x="21.8605%" y="165" width="0.8387%" height="15" fill="rgb(254,191,54)"/><text x="22.1105%" y="175.50"></text></g><g><title>match_checking (1,570,857 samples, 0.44%)</title><rect x="22.2612%" y="149" width="0.4380%" height="15" fill="rgb(241,83,37)"/><text x="22.5112%" y="159.50"></text></g><g><title>check_match (1,464,556 samples, 0.41%)</title><rect x="22.2908%" y="133" width="0.4083%" height="15" fill="rgb(233,36,39)"/><text x="22.5408%" y="143.50"></text></g><g><title>check_private_in_public (756,899 samples, 0.21%)</title><rect x="22.7023%" y="149" width="0.2110%" height="15" fill="rgb(226,3,54)"/><text x="22.9523%" y="159.50"></text></g><g><title>death_checking (1,482,127 samples, 0.41%)</title><rect x="22.9133%" y="149" width="0.4132%" height="15" fill="rgb(245,192,40)"/><text x="23.1633%" y="159.50"></text></g><g><title>param_env (855,445 samples, 0.24%)</title><rect x="23.7117%" y="117" width="0.2385%" height="15" fill="rgb(238,167,29)"/><text x="23.9617%" y="127.50"></text></g><g><title>crate_lints (3,551,390 samples, 0.99%)</title><rect x="23.3271%" y="133" width="0.9902%" height="15" fill="rgb(232,182,51)"/><text x="23.5771%" y="143.50"></text></g><g><title>type_of (1,167,065 samples, 0.33%)</title><rect x="23.9919%" y="117" width="0.3254%" height="15" fill="rgb(231,60,39)"/><text x="24.2419%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (921,008 samples, 0.26%)</title><rect x="24.0605%" y="101" width="0.2568%" height="15" fill="rgb(208,69,12)"/><text x="24.3105%" y="111.50"></text></g><g><title>lint_checking (4,876,265 samples, 1.36%)</title><rect x="23.3266%" y="149" width="1.3596%" height="15" fill="rgb(235,93,37)"/><text x="23.5766%" y="159.50"></text></g><g><title>module_lints (1,323,145 samples, 0.37%)</title><rect x="24.3173%" y="133" width="0.3689%" height="15" fill="rgb(213,116,39)"/><text x="24.5673%" y="143.50"></text></g><g><title>lint_mod (1,309,485 samples, 0.37%)</title><rect x="24.3211%" y="117" width="0.3651%" height="15" fill="rgb(222,207,29)"/><text x="24.5711%" y="127.50"></text></g><g><title>privacy_access_levels (1,181,183 samples, 0.33%)</title><rect x="24.6862%" y="149" width="0.3293%" height="15" fill="rgb(206,96,30)"/><text x="24.9362%" y="159.50"></text></g><g><title>privacy_checking_modules (3,102,495 samples, 0.87%)</title><rect x="25.0155%" y="149" width="0.8650%" height="15" fill="rgb(218,138,4)"/><text x="25.2655%" y="159.50"></text></g><g><title>check_mod_privacy (3,093,155 samples, 0.86%)</title><rect x="25.0181%" y="133" width="0.8624%" height="15" fill="rgb(250,191,14)"/><text x="25.2681%" y="143.50"></text></g><g><title>misc_checking_3 (11,439,399 samples, 3.19%)</title><rect x="22.6991%" y="165" width="3.1895%" height="15" fill="rgb(239,60,40)"/><text x="22.9491%" y="175.50">mis..</text></g><g><title>impl_parent (3,540,432 samples, 0.99%)</title><rect x="28.0226%" y="101" width="0.9871%" height="15" fill="rgb(206,27,48)"/><text x="28.2726%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,947,058 samples, 0.54%)</title><rect x="28.4668%" y="85" width="0.5429%" height="15" fill="rgb(225,35,8)"/><text x="28.7168%" y="95.50"></text></g><g><title>impl_trait_ref (6,957,676 samples, 1.94%)</title><rect x="29.0100%" y="101" width="1.9399%" height="15" fill="rgb(250,213,24)"/><text x="29.2600%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,406,020 samples, 1.51%)</title><rect x="29.4426%" y="85" width="1.5073%" height="15" fill="rgb(247,123,22)"/><text x="29.6926%" y="95.50"></text></g><g><title>trait_impls_of (1,366,045 samples, 0.38%)</title><rect x="30.9740%" y="101" width="0.3809%" height="15" fill="rgb(231,138,38)"/><text x="31.2240%" y="111.50"></text></g><g><title>implementations_of_trait (479,435 samples, 0.13%)</title><rect x="31.2212%" y="85" width="0.1337%" height="15" fill="rgb(231,145,46)"/><text x="31.4712%" y="95.50"></text></g><g><title>coherent_trait (19,345,247 samples, 5.39%)</title><rect x="25.9616%" y="133" width="5.3938%" height="15" fill="rgb(251,118,11)"/><text x="26.2116%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (18,563,068 samples, 5.18%)</title><rect x="26.1797%" y="117" width="5.1757%" height="15" fill="rgb(217,147,25)"/><text x="26.4297%" y="127.50">specia..</text></g><g><title>coherence_checking (19,583,440 samples, 5.46%)</title><rect x="25.9514%" y="149" width="5.4602%" height="15" fill="rgb(247,81,37)"/><text x="26.2014%" y="159.50">coheren..</text></g><g><title>associated_item (718,852 samples, 0.20%)</title><rect x="50.4255%" y="85" width="0.2004%" height="15" fill="rgb(209,12,38)"/><text x="50.6755%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (573,710 samples, 0.16%)</title><rect x="50.4660%" y="69" width="0.1600%" height="15" fill="rgb(227,1,9)"/><text x="50.7160%" y="79.50"></text></g><g><title>associated_items (1,002,186 samples, 0.28%)</title><rect x="50.3619%" y="101" width="0.2794%" height="15" fill="rgb(248,47,43)"/><text x="50.6119%" y="111.50"></text></g><g><title>adt_dtorck_constraint (603,248 samples, 0.17%)</title><rect x="51.0121%" y="85" width="0.1682%" height="15" fill="rgb(221,10,30)"/><text x="51.2621%" y="95.50"></text></g><g><title>dropck_outlives (3,312,032 samples, 0.92%)</title><rect x="50.6709%" y="101" width="0.9234%" height="15" fill="rgb(210,229,1)"/><text x="50.9209%" y="111.50"></text></g><g><title>normalize_projection_ty (1,484,795 samples, 0.41%)</title><rect x="51.1803%" y="85" width="0.4140%" height="15" fill="rgb(222,148,37)"/><text x="51.4303%" y="95.50"></text></g><g><title>evaluate_obligation (419,845 samples, 0.12%)</title><rect x="51.4773%" y="69" width="0.1171%" height="15" fill="rgb(234,67,33)"/><text x="51.7273%" y="79.50"></text></g><g><title>predicates_of (396,372 samples, 0.11%)</title><rect x="53.4340%" y="85" width="0.1105%" height="15" fill="rgb(247,98,35)"/><text x="53.6840%" y="95.50"></text></g><g><title>trait_impls_of (546,477 samples, 0.15%)</title><rect x="53.5560%" y="85" width="0.1524%" height="15" fill="rgb(247,138,52)"/><text x="53.8060%" y="95.50"></text></g><g><title>evaluate_obligation (7,358,072 samples, 2.05%)</title><rect x="51.6570%" y="101" width="2.0515%" height="15" fill="rgb(213,79,30)"/><text x="51.9070%" y="111.50">e..</text></g><g><title>evaluate_obligation (696,348 samples, 0.19%)</title><rect x="54.1682%" y="85" width="0.1942%" height="15" fill="rgb(246,177,23)"/><text x="54.4182%" y="95.50"></text></g><g><title>method_autoderef_steps (1,383,657 samples, 0.39%)</title><rect x="53.9794%" y="101" width="0.3858%" height="15" fill="rgb(230,62,27)"/><text x="54.2294%" y="111.50"></text></g><g><title>predicates_of (610,724 samples, 0.17%)</title><rect x="54.4439%" y="101" width="0.1703%" height="15" fill="rgb(216,154,8)"/><text x="54.6939%" y="111.50"></text></g><g><title>predicates_defined_on (398,572 samples, 0.11%)</title><rect x="54.5030%" y="85" width="0.1111%" height="15" fill="rgb(244,35,45)"/><text x="54.7530%" y="95.50"></text></g><g><title>item_bodies_checking (83,447,156 samples, 23.27%)</title><rect x="31.4545%" y="149" width="23.2664%" height="15" fill="rgb(251,115,12)"/><text x="31.7045%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (83,443,126 samples, 23.27%)</title><rect x="31.4556%" y="133" width="23.2652%" height="15" fill="rgb(240,54,50)"/><text x="31.7056%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (83,096,233 samples, 23.17%)</title><rect x="31.5523%" y="117" width="23.1685%" height="15" fill="rgb(233,84,52)"/><text x="31.8023%" y="127.50">typeck</text></g><g><title>evaluate_obligation (3,256,189 samples, 0.91%)</title><rect x="57.3245%" y="117" width="0.9079%" height="15" fill="rgb(207,117,47)"/><text x="57.5745%" y="127.50"></text></g><g><title>item_types_checking (13,012,236 samples, 3.63%)</title><rect x="54.7208%" y="149" width="3.6280%" height="15" fill="rgb(249,43,39)"/><text x="54.9708%" y="159.50">item..</text></g><g><title>check_mod_item_types (12,998,225 samples, 3.62%)</title><rect x="54.7247%" y="133" width="3.6241%" height="15" fill="rgb(209,38,44)"/><text x="54.9747%" y="143.50">chec..</text></g><g><title>fn_sig (928,532 samples, 0.26%)</title><rect x="58.6548%" y="117" width="0.2589%" height="15" fill="rgb(236,212,23)"/><text x="58.9048%" y="127.50"></text></g><g><title>named_region_map (900,998 samples, 0.25%)</title><rect x="59.0894%" y="101" width="0.2512%" height="15" fill="rgb(242,79,21)"/><text x="59.3394%" y="111.50"></text></g><g><title>resolve_lifetimes (833,698 samples, 0.23%)</title><rect x="59.1081%" y="85" width="0.2324%" height="15" fill="rgb(211,96,35)"/><text x="59.3581%" y="95.50"></text></g><g><title>lint_levels (413,245 samples, 0.12%)</title><rect x="59.2254%" y="69" width="0.1152%" height="15" fill="rgb(253,215,40)"/><text x="59.4754%" y="79.50"></text></g><g><title>generics_of (1,594,558 samples, 0.44%)</title><rect x="58.9137%" y="117" width="0.4446%" height="15" fill="rgb(211,81,21)"/><text x="59.1637%" y="127.50"></text></g><g><title>late_bound_vars_map (999,404 samples, 0.28%)</title><rect x="59.9741%" y="69" width="0.2786%" height="15" fill="rgb(208,190,38)"/><text x="60.2241%" y="79.50"></text></g><g><title>resolve_lifetimes (918,423 samples, 0.26%)</title><rect x="59.9967%" y="53" width="0.2561%" height="15" fill="rgb(235,213,38)"/><text x="60.2467%" y="63.50"></text></g><g><title>explicit_predicates_of (1,978,783 samples, 0.55%)</title><rect x="59.7369%" y="85" width="0.5517%" height="15" fill="rgb(237,122,38)"/><text x="59.9869%" y="95.50"></text></g><g><title>predicates_of (3,246,863 samples, 0.91%)</title><rect x="59.5011%" y="117" width="0.9053%" height="15" fill="rgb(244,218,35)"/><text x="59.7511%" y="127.50"></text></g><g><title>predicates_defined_on (2,786,589 samples, 0.78%)</title><rect x="59.6294%" y="101" width="0.7769%" height="15" fill="rgb(240,68,47)"/><text x="59.8794%" y="111.50"></text></g><g><title>inferred_outlives_of (422,245 samples, 0.12%)</title><rect x="60.2886%" y="85" width="0.1177%" height="15" fill="rgb(210,16,53)"/><text x="60.5386%" y="95.50"></text></g><g><title>type_collecting (8,065,180 samples, 2.25%)</title><rect x="58.3510%" y="149" width="2.2487%" height="15" fill="rgb(235,124,12)"/><text x="58.6010%" y="159.50">t..</text></g><g><title>collect_mod_item_types (8,041,610 samples, 2.24%)</title><rect x="58.3575%" y="133" width="2.2421%" height="15" fill="rgb(224,169,11)"/><text x="58.6075%" y="143.50">c..</text></g><g><title>type_of (535,956 samples, 0.15%)</title><rect x="60.4502%" y="117" width="0.1494%" height="15" fill="rgb(250,166,2)"/><text x="60.7002%" y="127.50"></text></g><g><title>evaluate_obligation (3,517,192 samples, 0.98%)</title><rect x="64.1224%" y="117" width="0.9806%" height="15" fill="rgb(242,216,29)"/><text x="64.3724%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,148,459 samples, 0.32%)</title><rect x="65.1231%" y="117" width="0.3202%" height="15" fill="rgb(230,116,27)"/><text x="65.3731%" y="127.50"></text></g><g><title>param_env (2,731,136 samples, 0.76%)</title><rect x="65.4433%" y="117" width="0.7615%" height="15" fill="rgb(228,99,48)"/><text x="65.6933%" y="127.50"></text></g><g><title>region_scope_tree (1,192,615 samples, 0.33%)</title><rect x="66.2251%" y="117" width="0.3325%" height="15" fill="rgb(253,11,6)"/><text x="66.4751%" y="127.50"></text></g><g><title>check_impl_item_well_formed (20,457,671 samples, 5.70%)</title><rect x="60.8596%" y="133" width="5.7039%" height="15" fill="rgb(247,143,39)"/><text x="61.1096%" y="143.50">check_i..</text></g><g><title>eval_to_const_value_raw (521,406 samples, 0.15%)</title><rect x="71.0665%" y="101" width="0.1454%" height="15" fill="rgb(236,97,10)"/><text x="71.3165%" y="111.50"></text></g><g><title>eval_to_const_value_raw (504,065 samples, 0.14%)</title><rect x="71.0713%" y="85" width="0.1405%" height="15" fill="rgb(233,208,19)"/><text x="71.3213%" y="95.50"></text></g><g><title>eval_to_allocation_raw (497,925 samples, 0.14%)</title><rect x="71.0730%" y="69" width="0.1388%" height="15" fill="rgb(216,164,2)"/><text x="71.3230%" y="79.50"></text></g><g><title>evaluate_obligation (2,641,122 samples, 0.74%)</title><rect x="70.5190%" y="117" width="0.7364%" height="15" fill="rgb(220,129,5)"/><text x="70.7690%" y="127.50"></text></g><g><title>implied_outlives_bounds (875,358 samples, 0.24%)</title><rect x="71.2874%" y="117" width="0.2441%" height="15" fill="rgb(242,17,10)"/><text x="71.5374%" y="127.50"></text></g><g><title>param_env (2,493,411 samples, 0.70%)</title><rect x="71.5320%" y="117" width="0.6952%" height="15" fill="rgb(242,107,0)"/><text x="71.7820%" y="127.50"></text></g><g><title>check_item_well_formed (20,980,387 samples, 5.85%)</title><rect x="66.5635%" y="133" width="5.8497%" height="15" fill="rgb(251,28,31)"/><text x="66.8135%" y="143.50">check_i..</text></g><g><title>analysis (260,705,284 samples, 72.69%)</title><rect x="0.3215%" y="181" width="72.6887%" height="15" fill="rgb(233,223,10)"/><text x="0.5715%" y="191.50">analysis</text></g><g><title>type_check_crate (169,006,336 samples, 47.12%)</title><rect x="25.8886%" y="165" width="47.1216%" height="15" fill="rgb(215,21,27)"/><text x="26.1386%" y="175.50">type_check_crate</text></g><g><title>wf_checking (44,492,089 samples, 12.41%)</title><rect x="60.6051%" y="149" width="12.4051%" height="15" fill="rgb(232,23,21)"/><text x="60.8551%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,141,235 samples, 0.60%)</title><rect x="72.4132%" y="133" width="0.5970%" height="15" fill="rgb(244,5,23)"/><text x="72.6632%" y="143.50"></text></g><g><title>codegen_crate (687,808 samples, 0.19%)</title><rect x="73.0135%" y="181" width="0.1918%" height="15" fill="rgb(226,81,46)"/><text x="73.2635%" y="191.50"></text></g><g><title>AST_validation (367,354 samples, 0.10%)</title><rect x="73.2750%" y="165" width="0.1024%" height="15" fill="rgb(247,70,30)"/><text x="73.5250%" y="175.50"></text></g><g><title>metadata_register_crate (9,434,866 samples, 2.63%)</title><rect x="88.4743%" y="133" width="2.6306%" height="15" fill="rgb(212,68,19)"/><text x="88.7243%" y="143.50">me..</text></g><g><title>metadata_register_crate (1,017,762 samples, 0.28%)</title><rect x="90.8211%" y="117" width="0.2838%" height="15" fill="rgb(240,187,13)"/><text x="91.0711%" y="127.50"></text></g><g><title>macro_expand_crate (63,799,655 samples, 17.79%)</title><rect x="73.4543%" y="165" width="17.7883%" height="15" fill="rgb(223,113,26)"/><text x="73.7043%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (63,784,235 samples, 17.78%)</title><rect x="73.4585%" y="149" width="17.7840%" height="15" fill="rgb(206,192,2)"/><text x="73.7085%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (493,915 samples, 0.14%)</title><rect x="91.1049%" y="133" width="0.1377%" height="15" fill="rgb(241,108,4)"/><text x="91.3549%" y="143.50"></text></g><g><title>finalize_macro_resolutions (366,004 samples, 0.10%)</title><rect x="91.3368%" y="149" width="0.1020%" height="15" fill="rgb(247,173,49)"/><text x="91.5868%" y="159.50"></text></g><g><title>late_resolve_crate (6,004,178 samples, 1.67%)</title><rect x="91.4389%" y="149" width="1.6741%" height="15" fill="rgb(224,114,35)"/><text x="91.6889%" y="159.50"></text></g><g><title>metadata_register_crate (402,414 samples, 0.11%)</title><rect x="93.0007%" y="133" width="0.1122%" height="15" fill="rgb(245,159,27)"/><text x="93.2507%" y="143.50"></text></g><g><title>configure_and_expand (71,703,174 samples, 19.99%)</title><rect x="73.2053%" y="181" width="19.9919%" height="15" fill="rgb(245,172,44)"/><text x="73.4553%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,912,658 samples, 1.93%)</title><rect x="91.2699%" y="165" width="1.9274%" height="15" fill="rgb(236,23,11)"/><text x="91.5199%" y="175.50">r..</text></g><g><title>drop_ast (513,555 samples, 0.14%)</title><rect x="93.1972%" y="181" width="0.1432%" height="15" fill="rgb(205,117,38)"/><text x="93.4472%" y="191.50"></text></g><g><title>early_lint_checks (955,511 samples, 0.27%)</title><rect x="93.3479%" y="181" width="0.2664%" height="15" fill="rgb(237,72,25)"/><text x="93.5979%" y="191.50"></text></g><g><title>free_global_ctxt (5,157,858 samples, 1.44%)</title><rect x="93.6143%" y="181" width="1.4381%" height="15" fill="rgb(244,70,9)"/><text x="93.8643%" y="191.50"></text></g><g><title>generate_crate_metadata (4,310,228 samples, 1.20%)</title><rect x="95.0524%" y="181" width="1.2018%" height="15" fill="rgb(217,125,39)"/><text x="95.3024%" y="191.50"></text></g><g><title>hir_lowering (10,249,775 samples, 2.86%)</title><rect x="96.2541%" y="181" width="2.8578%" height="15" fill="rgb(235,36,10)"/><text x="96.5041%" y="191.50">hi..</text></g><g><title>parse_crate (728,468 samples, 0.20%)</title><rect x="99.1318%" y="181" width="0.2031%" height="15" fill="rgb(251,123,47)"/><text x="99.3818%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,563,557 samples, 0.44%)</title><rect x="99.3920%" y="181" width="0.4359%" height="15" fill="rgb(221,13,13)"/><text x="99.6420%" y="191.50"></text></g><g><title>all (358,660,232 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (358,660,232 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (507,396 samples, 0.14%)</title><rect x="99.8585%" y="181" width="0.1415%" height="15" fill="rgb(245,182,24)"/><text x="100.1085%" y="191.50"></text></g></svg></svg>