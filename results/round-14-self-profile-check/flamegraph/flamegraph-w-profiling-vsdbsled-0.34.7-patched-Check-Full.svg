<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (3,332,612 samples, 0.14%)</title><rect x="19.8795%" y="149" width="0.1401%" height="15" fill="rgb(227,0,7)"/><text x="20.1295%" y="159.50"></text></g><g><title>item_attrs (3,085,283 samples, 0.13%)</title><rect x="20.6661%" y="117" width="0.1297%" height="15" fill="rgb(217,0,24)"/><text x="20.9161%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,983,243 samples, 0.13%)</title><rect x="20.6704%" y="101" width="0.1254%" height="15" fill="rgb(221,193,54)"/><text x="20.9204%" y="111.50"></text></g><g><title>codegen_fn_attrs (4,259,593 samples, 0.18%)</title><rect x="20.6239%" y="133" width="0.1791%" height="15" fill="rgb(248,212,6)"/><text x="20.8739%" y="143.50"></text></g><g><title>is_copy_raw (14,924,245 samples, 0.63%)</title><rect x="24.6205%" y="101" width="0.6276%" height="15" fill="rgb(208,68,35)"/><text x="24.8705%" y="111.50"></text></g><g><title>evaluate_obligation (12,044,728 samples, 0.51%)</title><rect x="24.7416%" y="85" width="0.5065%" height="15" fill="rgb(232,128,0)"/><text x="24.9916%" y="95.50"></text></g><g><title>needs_drop_raw (19,808,797 samples, 0.83%)</title><rect x="24.4196%" y="117" width="0.8329%" height="15" fill="rgb(207,160,47)"/><text x="24.6696%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (9,378,816 samples, 0.39%)</title><rect x="25.4536%" y="101" width="0.3944%" height="15" fill="rgb(228,23,34)"/><text x="25.7036%" y="111.50"></text></g><g><title>resolve_instance (17,537,517 samples, 0.74%)</title><rect x="25.2545%" y="117" width="0.7374%" height="15" fill="rgb(218,30,26)"/><text x="25.5045%" y="127.50"></text></g><g><title>thir_body (36,489,440 samples, 1.53%)</title><rect x="26.0153%" y="117" width="1.5343%" height="15" fill="rgb(220,122,19)"/><text x="26.2653%" y="127.50"></text></g><g><title>mir_const (202,961,812 samples, 8.53%)</title><rect x="19.0296%" y="165" width="8.5344%" height="15" fill="rgb(250,228,42)"/><text x="19.2796%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (179,415,852 samples, 7.54%)</title><rect x="20.0197%" y="149" width="7.5443%" height="15" fill="rgb(240,193,28)"/><text x="20.2697%" y="159.50">unsafety_c..</text></g><g><title>mir_built (160,785,462 samples, 6.76%)</title><rect x="20.8030%" y="133" width="6.7609%" height="15" fill="rgb(216,20,37)"/><text x="21.0530%" y="143.50">mir_built</text></g><g><title>mir_const (3,914,121 samples, 0.16%)</title><rect x="27.6661%" y="149" width="0.1646%" height="15" fill="rgb(206,188,39)"/><text x="27.9161%" y="159.50"></text></g><g><title>unsafety_check_result (2,819,946 samples, 0.12%)</title><rect x="27.7121%" y="133" width="0.1186%" height="15" fill="rgb(217,207,13)"/><text x="27.9621%" y="143.50"></text></g><g><title>mir_built (2,459,602 samples, 0.10%)</title><rect x="27.7273%" y="117" width="0.1034%" height="15" fill="rgb(231,73,38)"/><text x="27.9773%" y="127.50"></text></g><g><title>mir_const_qualif (6,376,667 samples, 0.27%)</title><rect x="27.5639%" y="165" width="0.2681%" height="15" fill="rgb(225,20,46)"/><text x="27.8139%" y="175.50"></text></g><g><title>mir_promoted (233,294,513 samples, 9.81%)</title><rect x="18.0224%" y="181" width="9.8098%" height="15" fill="rgb(210,31,41)"/><text x="18.2724%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (9,884,867 samples, 0.42%)</title><rect x="27.8334%" y="181" width="0.4156%" height="15" fill="rgb(221,200,47)"/><text x="28.0834%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (15,514,380 samples, 0.65%)</title><rect x="28.2490%" y="181" width="0.6524%" height="15" fill="rgb(226,26,5)"/><text x="28.4990%" y="191.50"></text></g><g><title>normalize_projection_ty (10,189,140 samples, 0.43%)</title><rect x="28.4729%" y="165" width="0.4284%" height="15" fill="rgb(249,33,26)"/><text x="28.7229%" y="175.50"></text></g><g><title>type_op_normalize_predicate (6,706,738 samples, 0.28%)</title><rect x="28.9014%" y="181" width="0.2820%" height="15" fill="rgb(235,183,28)"/><text x="29.1514%" y="191.50"></text></g><g><title>normalize_projection_ty (3,796,060 samples, 0.16%)</title><rect x="29.0238%" y="165" width="0.1596%" height="15" fill="rgb(221,5,38)"/><text x="29.2738%" y="175.50"></text></g><g><title>type_op_prove_predicate (48,526,915 samples, 2.04%)</title><rect x="29.2377%" y="181" width="2.0405%" height="15" fill="rgb(247,18,42)"/><text x="29.4877%" y="191.50">t..</text></g><g><title>evaluate_obligation (2,898,842 samples, 0.12%)</title><rect x="31.1563%" y="165" width="0.1219%" height="15" fill="rgb(241,131,45)"/><text x="31.4063%" y="175.50"></text></g><g><title>MIR_borrow_checking (736,907,721 samples, 30.99%)</title><rect x="0.2935%" y="213" width="30.9863%" height="15" fill="rgb(249,31,29)"/><text x="0.5435%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (734,386,508 samples, 30.88%)</title><rect x="0.3995%" y="197" width="30.8803%" height="15" fill="rgb(225,111,53)"/><text x="0.6495%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (3,271,477 samples, 0.14%)</title><rect x="31.2798%" y="213" width="0.1376%" height="15" fill="rgb(238,160,17)"/><text x="31.5298%" y="223.50"></text></g><g><title>hir_module_items (3,425,141 samples, 0.14%)</title><rect x="31.4174%" y="213" width="0.1440%" height="15" fill="rgb(214,148,48)"/><text x="31.6674%" y="223.50"></text></g><g><title>codegen_fn_attrs (3,199,567 samples, 0.13%)</title><rect x="31.7853%" y="181" width="0.1345%" height="15" fill="rgb(232,36,49)"/><text x="32.0353%" y="191.50"></text></g><g><title>check_mod_attrs (8,400,347 samples, 0.35%)</title><rect x="31.5666%" y="197" width="0.3532%" height="15" fill="rgb(209,103,24)"/><text x="31.8166%" y="207.50"></text></g><g><title>check_mod_loops (2,423,502 samples, 0.10%)</title><rect x="32.0105%" y="197" width="0.1019%" height="15" fill="rgb(229,88,8)"/><text x="32.2605%" y="207.50"></text></g><g><title>lint_levels (5,550,552 samples, 0.23%)</title><rect x="32.2215%" y="181" width="0.2334%" height="15" fill="rgb(213,181,19)"/><text x="32.4715%" y="191.50"></text></g><g><title>lookup_deprecation_entry (2,667,801 samples, 0.11%)</title><rect x="32.4549%" y="181" width="0.1122%" height="15" fill="rgb(254,191,54)"/><text x="32.7049%" y="191.50"></text></g><g><title>stability_index (2,458,118 samples, 0.10%)</title><rect x="32.4637%" y="165" width="0.1034%" height="15" fill="rgb(241,83,37)"/><text x="32.7137%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (11,045,307 samples, 0.46%)</title><rect x="32.1210%" y="197" width="0.4644%" height="15" fill="rgb(233,36,39)"/><text x="32.3710%" y="207.50"></text></g><g><title>misc_checking_1 (24,959,971 samples, 1.05%)</title><rect x="31.5614%" y="213" width="1.0495%" height="15" fill="rgb(226,3,54)"/><text x="31.8114%" y="223.50"></text></g><g><title>check_mod_intrinsics (2,408,096 samples, 0.10%)</title><rect x="32.6135%" y="181" width="0.1013%" height="15" fill="rgb(245,192,40)"/><text x="32.8635%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (13,937,147 samples, 0.59%)</title><rect x="32.6111%" y="197" width="0.5860%" height="15" fill="rgb(238,167,29)"/><text x="32.8611%" y="207.50"></text></g><g><title>check_mod_liveness (11,471,521 samples, 0.48%)</title><rect x="32.7148%" y="181" width="0.4824%" height="15" fill="rgb(232,182,51)"/><text x="32.9648%" y="191.50"></text></g><g><title>misc_checking_2 (30,675,285 samples, 1.29%)</title><rect x="32.6109%" y="213" width="1.2899%" height="15" fill="rgb(231,60,39)"/><text x="32.8609%" y="223.50"></text></g><g><title>match_checking (16,734,228 samples, 0.70%)</title><rect x="33.1972%" y="197" width="0.7037%" height="15" fill="rgb(208,69,12)"/><text x="33.4472%" y="207.50"></text></g><g><title>check_match (15,930,753 samples, 0.67%)</title><rect x="33.2309%" y="181" width="0.6699%" height="15" fill="rgb(235,93,37)"/><text x="33.4809%" y="191.50"></text></g><g><title>check_private_in_public (5,845,486 samples, 0.25%)</title><rect x="33.9018%" y="197" width="0.2458%" height="15" fill="rgb(213,116,39)"/><text x="34.1518%" y="207.50"></text></g><g><title>death_checking (9,888,711 samples, 0.42%)</title><rect x="34.1476%" y="197" width="0.4158%" height="15" fill="rgb(222,207,29)"/><text x="34.3976%" y="207.50"></text></g><g><title>eval_to_const_value_raw (36,200,788 samples, 1.52%)</title><rect x="35.1164%" y="101" width="1.5222%" height="15" fill="rgb(206,96,30)"/><text x="35.3664%" y="111.50"></text></g><g><title>eval_to_const_value_raw (36,200,088 samples, 1.52%)</title><rect x="35.1165%" y="85" width="1.5222%" height="15" fill="rgb(218,138,4)"/><text x="35.3665%" y="95.50"></text></g><g><title>eval_to_allocation_raw (36,198,558 samples, 1.52%)</title><rect x="35.1165%" y="69" width="1.5221%" height="15" fill="rgb(250,191,14)"/><text x="35.3665%" y="79.50"></text></g><g><title>eval_to_const_value_raw (36,817,514 samples, 1.55%)</title><rect x="35.0906%" y="165" width="1.5481%" height="15" fill="rgb(239,60,40)"/><text x="35.3406%" y="175.50"></text></g><g><title>eval_to_const_value_raw (36,802,914 samples, 1.55%)</title><rect x="35.0913%" y="149" width="1.5475%" height="15" fill="rgb(206,27,48)"/><text x="35.3413%" y="159.50"></text></g><g><title>eval_to_allocation_raw (36,774,083 samples, 1.55%)</title><rect x="35.0925%" y="133" width="1.5463%" height="15" fill="rgb(225,35,8)"/><text x="35.3425%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (36,209,498 samples, 1.52%)</title><rect x="35.1162%" y="117" width="1.5226%" height="15" fill="rgb(250,213,24)"/><text x="35.3662%" y="127.50"></text></g><g><title>param_env (3,798,561 samples, 0.16%)</title><rect x="36.6388%" y="165" width="0.1597%" height="15" fill="rgb(247,123,22)"/><text x="36.8888%" y="175.50"></text></g><g><title>crate_lints (55,463,766 samples, 2.33%)</title><rect x="34.5635%" y="181" width="2.3322%" height="15" fill="rgb(231,138,38)"/><text x="34.8135%" y="191.50">c..</text></g><g><title>lint_checking (71,394,486 samples, 3.00%)</title><rect x="34.5634%" y="197" width="3.0021%" height="15" fill="rgb(231,145,46)"/><text x="34.8134%" y="207.50">lin..</text></g><g><title>module_lints (15,926,970 samples, 0.67%)</title><rect x="36.8957%" y="181" width="0.6697%" height="15" fill="rgb(251,118,11)"/><text x="37.1457%" y="191.50"></text></g><g><title>lint_mod (15,887,419 samples, 0.67%)</title><rect x="36.8974%" y="165" width="0.6681%" height="15" fill="rgb(217,147,25)"/><text x="37.1474%" y="175.50"></text></g><g><title>privacy_access_levels (9,239,724 samples, 0.39%)</title><rect x="37.5654%" y="197" width="0.3885%" height="15" fill="rgb(247,81,37)"/><text x="37.8154%" y="207.50"></text></g><g><title>privacy_checking_modules (25,616,769 samples, 1.08%)</title><rect x="37.9540%" y="197" width="1.0772%" height="15" fill="rgb(209,12,38)"/><text x="38.2040%" y="207.50"></text></g><g><title>check_mod_privacy (25,581,168 samples, 1.08%)</title><rect x="37.9555%" y="181" width="1.0757%" height="15" fill="rgb(227,1,9)"/><text x="38.2055%" y="191.50"></text></g><g><title>misc_checking_3 (122,188,148 samples, 5.14%)</title><rect x="33.9008%" y="213" width="5.1379%" height="15" fill="rgb(248,47,43)"/><text x="34.1508%" y="223.50">misc_c..</text></g><g><title>impl_parent (3,686,657 samples, 0.16%)</title><rect x="39.5689%" y="149" width="0.1550%" height="15" fill="rgb(221,10,30)"/><text x="39.8189%" y="159.50"></text></g><g><title>impl_trait_ref (7,651,767 samples, 0.32%)</title><rect x="39.7239%" y="149" width="0.3217%" height="15" fill="rgb(210,229,1)"/><text x="39.9739%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,933,830 samples, 0.25%)</title><rect x="39.7962%" y="133" width="0.2495%" height="15" fill="rgb(222,148,37)"/><text x="40.0462%" y="143.50"></text></g><g><title>coherent_trait (24,654,486 samples, 1.04%)</title><rect x="39.1100%" y="181" width="1.0367%" height="15" fill="rgb(234,67,33)"/><text x="39.3600%" y="191.50"></text></g><g><title>specialization_graph_of (23,694,365 samples, 1.00%)</title><rect x="39.1504%" y="165" width="0.9963%" height="15" fill="rgb(247,98,35)"/><text x="39.4004%" y="175.50"></text></g><g><title>coherence_checking (25,278,615 samples, 1.06%)</title><rect x="39.1084%" y="197" width="1.0629%" height="15" fill="rgb(247,138,52)"/><text x="39.3584%" y="207.50"></text></g><g><title>associated_items (2,641,294 samples, 0.11%)</title><rect x="63.9989%" y="149" width="0.1111%" height="15" fill="rgb(213,79,30)"/><text x="64.2489%" y="159.50"></text></g><g><title>dropck_outlives (6,878,091 samples, 0.29%)</title><rect x="64.1364%" y="149" width="0.2892%" height="15" fill="rgb(246,177,23)"/><text x="64.3864%" y="159.50"></text></g><g><title>specializes (3,770,370 samples, 0.16%)</title><rect x="65.9450%" y="133" width="0.1585%" height="15" fill="rgb(230,62,27)"/><text x="66.1950%" y="143.50"></text></g><g><title>evaluate_obligation (39,449,342 samples, 1.66%)</title><rect x="64.4910%" y="149" width="1.6588%" height="15" fill="rgb(216,154,8)"/><text x="64.7410%" y="159.50"></text></g><g><title>evaluate_obligation (3,557,378 samples, 0.15%)</title><rect x="66.5869%" y="133" width="0.1496%" height="15" fill="rgb(244,35,45)"/><text x="66.8369%" y="143.50"></text></g><g><title>method_autoderef_steps (7,529,242 samples, 0.32%)</title><rect x="66.4227%" y="149" width="0.3166%" height="15" fill="rgb(251,115,12)"/><text x="66.6727%" y="159.50"></text></g><g><title>predicates_of (2,507,684 samples, 0.11%)</title><rect x="66.8367%" y="149" width="0.1054%" height="15" fill="rgb(240,54,50)"/><text x="67.0867%" y="159.50"></text></g><g><title>dropck_outlives (2,587,509 samples, 0.11%)</title><rect x="76.2596%" y="133" width="0.1088%" height="15" fill="rgb(233,84,52)"/><text x="76.5096%" y="143.50"></text></g><g><title>evaluate_obligation (17,903,286 samples, 0.75%)</title><rect x="76.3684%" y="133" width="0.7528%" height="15" fill="rgb(207,117,47)"/><text x="76.6184%" y="143.50"></text></g><g><title>evaluate_obligation (2,533,480 samples, 0.11%)</title><rect x="77.3665%" y="117" width="0.1065%" height="15" fill="rgb(249,43,39)"/><text x="77.6165%" y="127.50"></text></g><g><title>method_autoderef_steps (5,302,414 samples, 0.22%)</title><rect x="77.2504%" y="133" width="0.2230%" height="15" fill="rgb(209,38,44)"/><text x="77.5004%" y="143.50"></text></g><g><title>typeck (250,819,558 samples, 10.55%)</title><rect x="66.9937%" y="149" width="10.5467%" height="15" fill="rgb(236,212,23)"/><text x="67.2437%" y="159.50">typeck</text></g><g><title>item_bodies_checking (888,684,533 samples, 37.37%)</title><rect x="40.1957%" y="197" width="37.3684%" height="15" fill="rgb(242,79,21)"/><text x="40.4457%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (888,680,323 samples, 37.37%)</title><rect x="40.1959%" y="181" width="37.3682%" height="15" fill="rgb(211,96,35)"/><text x="40.4459%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (886,053,898 samples, 37.26%)</title><rect x="40.3063%" y="165" width="37.2578%" height="15" fill="rgb(253,215,40)"/><text x="40.5563%" y="175.50">typeck</text></g><g><title>mir_built (10,833,804 samples, 0.46%)</title><rect x="78.3586%" y="85" width="0.4556%" height="15" fill="rgb(211,81,21)"/><text x="78.6086%" y="95.50"></text></g><g><title>typeck (9,728,402 samples, 0.41%)</title><rect x="78.4051%" y="69" width="0.4091%" height="15" fill="rgb(208,190,38)"/><text x="78.6551%" y="79.50"></text></g><g><title>mir_const (12,497,602 samples, 0.53%)</title><rect x="78.3233%" y="117" width="0.5255%" height="15" fill="rgb(235,213,38)"/><text x="78.5733%" y="127.50"></text></g><g><title>unsafety_check_result (11,825,436 samples, 0.50%)</title><rect x="78.3515%" y="101" width="0.4972%" height="15" fill="rgb(237,122,38)"/><text x="78.6015%" y="111.50"></text></g><g><title>mir_promoted (12,596,742 samples, 0.53%)</title><rect x="78.3194%" y="133" width="0.5297%" height="15" fill="rgb(244,218,35)"/><text x="78.5694%" y="143.50"></text></g><g><title>type_of (17,719,760 samples, 0.75%)</title><rect x="78.1423%" y="165" width="0.7451%" height="15" fill="rgb(240,68,47)"/><text x="78.3923%" y="175.50"></text></g><g><title>mir_borrowck (17,602,319 samples, 0.74%)</title><rect x="78.1472%" y="149" width="0.7402%" height="15" fill="rgb(210,16,53)"/><text x="78.3972%" y="159.50"></text></g><g><title>item_types_checking (37,255,881 samples, 1.57%)</title><rect x="77.5641%" y="197" width="1.5666%" height="15" fill="rgb(235,124,12)"/><text x="77.8141%" y="207.50"></text></g><g><title>check_mod_item_types (37,210,991 samples, 1.56%)</title><rect x="77.5660%" y="181" width="1.5647%" height="15" fill="rgb(224,169,11)"/><text x="77.8160%" y="191.50"></text></g><g><title>typeck (5,785,255 samples, 0.24%)</title><rect x="78.8874%" y="165" width="0.2433%" height="15" fill="rgb(250,166,2)"/><text x="79.1374%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,513,799 samples, 0.15%)</title><rect x="79.3124%" y="165" width="0.1478%" height="15" fill="rgb(242,216,29)"/><text x="79.5624%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,487,209 samples, 0.15%)</title><rect x="79.3135%" y="149" width="0.1466%" height="15" fill="rgb(230,116,27)"/><text x="79.5635%" y="159.50"></text></g><g><title>eval_to_allocation_raw (3,458,569 samples, 0.15%)</title><rect x="79.3147%" y="133" width="0.1454%" height="15" fill="rgb(228,99,48)"/><text x="79.5647%" y="143.50"></text></g><g><title>fn_sig (4,630,953 samples, 0.19%)</title><rect x="79.4601%" y="165" width="0.1947%" height="15" fill="rgb(253,11,6)"/><text x="79.7101%" y="175.50"></text></g><g><title>named_region_map (4,537,740 samples, 0.19%)</title><rect x="79.7826%" y="149" width="0.1908%" height="15" fill="rgb(247,143,39)"/><text x="80.0326%" y="159.50"></text></g><g><title>resolve_lifetimes (4,246,138 samples, 0.18%)</title><rect x="79.7949%" y="133" width="0.1785%" height="15" fill="rgb(236,97,10)"/><text x="80.0449%" y="143.50"></text></g><g><title>generics_of (7,726,808 samples, 0.32%)</title><rect x="79.6549%" y="165" width="0.3249%" height="15" fill="rgb(233,208,19)"/><text x="79.9049%" y="175.50"></text></g><g><title>predicates_of (7,011,550 samples, 0.29%)</title><rect x="80.0137%" y="165" width="0.2948%" height="15" fill="rgb(216,164,2)"/><text x="80.2637%" y="175.50"></text></g><g><title>predicates_defined_on (6,237,788 samples, 0.26%)</title><rect x="80.0462%" y="149" width="0.2623%" height="15" fill="rgb(220,129,5)"/><text x="80.2962%" y="159.50"></text></g><g><title>inferred_outlives_of (2,788,660 samples, 0.12%)</title><rect x="80.1912%" y="133" width="0.1173%" height="15" fill="rgb(242,17,10)"/><text x="80.4412%" y="143.50"></text></g><g><title>inferred_outlives_crate (2,538,759 samples, 0.11%)</title><rect x="80.2017%" y="117" width="0.1068%" height="15" fill="rgb(242,107,0)"/><text x="80.4517%" y="127.50"></text></g><g><title>type_collecting (29,080,828 samples, 1.22%)</title><rect x="79.1322%" y="197" width="1.2228%" height="15" fill="rgb(251,28,31)"/><text x="79.3822%" y="207.50"></text></g><g><title>collect_mod_item_types (29,027,297 samples, 1.22%)</title><rect x="79.1345%" y="181" width="1.2206%" height="15" fill="rgb(233,223,10)"/><text x="79.3845%" y="191.50"></text></g><g><title>evaluate_obligation (4,903,360 samples, 0.21%)</title><rect x="81.5656%" y="165" width="0.2062%" height="15" fill="rgb(215,21,27)"/><text x="81.8156%" y="175.50"></text></g><g><title>implied_outlives_bounds (2,517,052 samples, 0.11%)</title><rect x="81.7757%" y="165" width="0.1058%" height="15" fill="rgb(232,23,21)"/><text x="82.0257%" y="175.50"></text></g><g><title>param_env (3,739,675 samples, 0.16%)</title><rect x="81.9010%" y="165" width="0.1572%" height="15" fill="rgb(244,5,23)"/><text x="82.1510%" y="175.50"></text></g><g><title>region_scope_tree (8,900,066 samples, 0.37%)</title><rect x="82.0615%" y="165" width="0.3742%" height="15" fill="rgb(226,81,46)"/><text x="82.3115%" y="175.50"></text></g><g><title>check_impl_item_well_formed (45,963,954 samples, 1.93%)</title><rect x="80.5084%" y="181" width="1.9327%" height="15" fill="rgb(247,70,30)"/><text x="80.7584%" y="191.50">c..</text></g><g><title>evaluate_obligation (6,536,374 samples, 0.27%)</title><rect x="83.3159%" y="37" width="0.2748%" height="15" fill="rgb(212,68,19)"/><text x="83.5659%" y="47.50"></text></g><g><title>eval_to_const_value_raw (8,210,843 samples, 0.35%)</title><rect x="83.2496%" y="101" width="0.3453%" height="15" fill="rgb(240,187,13)"/><text x="83.4996%" y="111.50"></text></g><g><title>eval_to_const_value_raw (8,207,453 samples, 0.35%)</title><rect x="83.2497%" y="85" width="0.3451%" height="15" fill="rgb(223,113,26)"/><text x="83.4997%" y="95.50"></text></g><g><title>eval_to_allocation_raw (8,197,752 samples, 0.34%)</title><rect x="83.2502%" y="69" width="0.3447%" height="15" fill="rgb(206,192,2)"/><text x="83.5002%" y="79.50"></text></g><g><title>typeck (7,167,610 samples, 0.30%)</title><rect x="83.2935%" y="53" width="0.3014%" height="15" fill="rgb(241,108,4)"/><text x="83.5435%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,251,114 samples, 0.35%)</title><rect x="83.2485%" y="117" width="0.3470%" height="15" fill="rgb(247,173,49)"/><text x="83.4985%" y="127.50"></text></g><g><title>eval_to_const_value_raw (9,472,998 samples, 0.40%)</title><rect x="83.2052%" y="165" width="0.3983%" height="15" fill="rgb(224,114,35)"/><text x="83.4552%" y="175.50"></text></g><g><title>eval_to_const_value_raw (9,467,468 samples, 0.40%)</title><rect x="83.2054%" y="149" width="0.3981%" height="15" fill="rgb(245,159,27)"/><text x="83.4554%" y="159.50"></text></g><g><title>eval_to_allocation_raw (9,461,878 samples, 0.40%)</title><rect x="83.2056%" y="133" width="0.3979%" height="15" fill="rgb(245,172,44)"/><text x="83.4556%" y="143.50"></text></g><g><title>evaluate_obligation (5,439,483 samples, 0.23%)</title><rect x="83.6035%" y="165" width="0.2287%" height="15" fill="rgb(236,23,11)"/><text x="83.8535%" y="175.50"></text></g><g><title>param_env (2,878,512 samples, 0.12%)</title><rect x="83.9068%" y="165" width="0.1210%" height="15" fill="rgb(205,117,38)"/><text x="84.1568%" y="175.50"></text></g><g><title>check_item_well_formed (40,408,359 samples, 1.70%)</title><rect x="82.4411%" y="181" width="1.6991%" height="15" fill="rgb(237,72,25)"/><text x="82.6911%" y="191.50"></text></g><g><title>analysis (2,000,232,309 samples, 84.11%)</title><rect x="0.0629%" y="229" width="84.1080%" height="15" fill="rgb(244,70,9)"/><text x="0.3129%" y="239.50">analysis</text></g><g><title>type_check_crate (1,073,319,886 samples, 45.13%)</title><rect x="39.0387%" y="213" width="45.1321%" height="15" fill="rgb(217,125,39)"/><text x="39.2887%" y="223.50">type_check_crate</text></g><g><title>wf_checking (90,570,271 samples, 3.81%)</title><rect x="80.3625%" y="197" width="3.8084%" height="15" fill="rgb(235,36,10)"/><text x="80.6125%" y="207.50">wf_c..</text></g><g><title>AST_validation (3,871,994 samples, 0.16%)</title><rect x="84.1988%" y="213" width="0.1628%" height="15" fill="rgb(251,123,47)"/><text x="84.4488%" y="223.50"></text></g><g><title>complete_gated_feature_checking (3,027,984 samples, 0.13%)</title><rect x="84.3616%" y="213" width="0.1273%" height="15" fill="rgb(221,13,13)"/><text x="84.6116%" y="223.50"></text></g><g><title>macro_expand_crate (181,032,192 samples, 7.61%)</title><rect x="84.4911%" y="213" width="7.6122%" height="15" fill="rgb(238,131,9)"/><text x="84.7411%" y="223.50">macro_expa..</text></g><g><title>expand_crate (181,017,432 samples, 7.61%)</title><rect x="84.4917%" y="197" width="7.6116%" height="15" fill="rgb(211,50,8)"/><text x="84.7417%" y="207.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (3,247,615 samples, 0.14%)</title><rect x="91.9668%" y="181" width="0.1366%" height="15" fill="rgb(245,182,24)"/><text x="92.2168%" y="191.50"></text></g><g><title>finalize_macro_resolutions (3,026,115 samples, 0.13%)</title><rect x="92.1541%" y="197" width="0.1272%" height="15" fill="rgb(242,14,37)"/><text x="92.4041%" y="207.50"></text></g><g><title>late_resolve_crate (41,934,342 samples, 1.76%)</title><rect x="92.2813%" y="197" width="1.7633%" height="15" fill="rgb(246,228,12)"/><text x="92.5313%" y="207.50"></text></g><g><title>resolve_check_unused (2,631,610 samples, 0.11%)</title><rect x="94.0510%" y="197" width="0.1107%" height="15" fill="rgb(213,55,15)"/><text x="94.3010%" y="207.50"></text></g><g><title>configure_and_expand (239,461,211 samples, 10.07%)</title><rect x="84.1926%" y="229" width="10.0691%" height="15" fill="rgb(209,9,3)"/><text x="84.4426%" y="239.50">configure_and_e..</text></g><g><title>resolve_crate (51,049,506 samples, 2.15%)</title><rect x="92.1151%" y="213" width="2.1466%" height="15" fill="rgb(230,59,30)"/><text x="92.3651%" y="223.50">r..</text></g><g><title>drop_ast (10,859,142 samples, 0.46%)</title><rect x="94.2617%" y="229" width="0.4566%" height="15" fill="rgb(209,121,21)"/><text x="94.5117%" y="239.50"></text></g><g><title>early_lint_checks (10,131,634 samples, 0.43%)</title><rect x="94.7194%" y="229" width="0.4260%" height="15" fill="rgb(220,109,13)"/><text x="94.9694%" y="239.50"></text></g><g><title>free_global_ctxt (20,293,188 samples, 0.85%)</title><rect x="95.1455%" y="229" width="0.8533%" height="15" fill="rgb(232,18,1)"/><text x="95.3955%" y="239.50"></text></g><g><title>generate_crate_metadata (18,733,181 samples, 0.79%)</title><rect x="95.9988%" y="229" width="0.7877%" height="15" fill="rgb(215,41,42)"/><text x="96.2488%" y="239.50"></text></g><g><title>hir_lowering (68,901,307 samples, 2.90%)</title><rect x="96.7865%" y="229" width="2.8972%" height="15" fill="rgb(224,123,36)"/><text x="97.0365%" y="239.50">hi..</text></g><g><title>self_profile_alloc_query_strings (4,394,189 samples, 0.18%)</title><rect x="99.7492%" y="229" width="0.1848%" height="15" fill="rgb(240,125,3)"/><text x="99.9992%" y="239.50"></text></g><g><title>all (2,378,171,751 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (2,378,171,751 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>