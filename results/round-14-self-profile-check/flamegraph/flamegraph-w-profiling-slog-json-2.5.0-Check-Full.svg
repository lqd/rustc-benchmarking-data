<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (174,552 samples, 0.15%)</title><rect x="14.4339%" y="181" width="0.1530%" height="15" fill="rgb(227,0,7)"/><text x="14.6839%" y="191.50"></text></g><g><title>param_env (246,791 samples, 0.22%)</title><rect x="16.4709%" y="149" width="0.2163%" height="15" fill="rgb(217,0,24)"/><text x="16.7209%" y="159.50"></text></g><g><title>item_attrs (165,362 samples, 0.14%)</title><rect x="17.2627%" y="117" width="0.1449%" height="15" fill="rgb(221,193,54)"/><text x="17.5127%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (156,252 samples, 0.14%)</title><rect x="17.2707%" y="101" width="0.1370%" height="15" fill="rgb(248,212,6)"/><text x="17.5207%" y="111.50"></text></g><g><title>codegen_fn_attrs (274,083 samples, 0.24%)</title><rect x="17.1881%" y="133" width="0.2402%" height="15" fill="rgb(208,68,35)"/><text x="17.4381%" y="143.50"></text></g><g><title>is_copy_raw (130,520 samples, 0.11%)</title><rect x="20.4830%" y="85" width="0.1144%" height="15" fill="rgb(232,128,0)"/><text x="20.7330%" y="95.50"></text></g><g><title>param_env (129,571 samples, 0.11%)</title><rect x="20.5974%" y="85" width="0.1136%" height="15" fill="rgb(207,160,47)"/><text x="20.8474%" y="95.50"></text></g><g><title>adt_drop_tys (349,013 samples, 0.31%)</title><rect x="20.4058%" y="101" width="0.3059%" height="15" fill="rgb(228,23,34)"/><text x="20.6558%" y="111.50"></text></g><g><title>is_copy_raw (894,442 samples, 0.78%)</title><rect x="20.7134%" y="101" width="0.7840%" height="15" fill="rgb(218,30,26)"/><text x="20.9634%" y="111.50"></text></g><g><title>evaluate_obligation (715,609 samples, 0.63%)</title><rect x="20.8702%" y="85" width="0.6273%" height="15" fill="rgb(220,122,19)"/><text x="21.1202%" y="95.50"></text></g><g><title>needs_drop_raw (1,447,777 samples, 1.27%)</title><rect x="20.2602%" y="117" width="1.2691%" height="15" fill="rgb(250,228,42)"/><text x="20.5102%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (444,726 samples, 0.39%)</title><rect x="21.7084%" y="101" width="0.3898%" height="15" fill="rgb(240,193,28)"/><text x="21.9584%" y="111.50"></text></g><g><title>impl_parent (278,533 samples, 0.24%)</title><rect x="22.4806%" y="85" width="0.2442%" height="15" fill="rgb(216,20,37)"/><text x="22.7306%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (169,651 samples, 0.15%)</title><rect x="22.5760%" y="69" width="0.1487%" height="15" fill="rgb(206,188,39)"/><text x="22.8260%" y="79.50"></text></g><g><title>specialization_graph_of (1,396,894 samples, 1.22%)</title><rect x="22.1322%" y="101" width="1.2245%" height="15" fill="rgb(217,207,13)"/><text x="22.3822%" y="111.50"></text></g><g><title>impl_trait_ref (720,938 samples, 0.63%)</title><rect x="22.7247%" y="85" width="0.6319%" height="15" fill="rgb(231,73,38)"/><text x="22.9747%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (619,068 samples, 0.54%)</title><rect x="22.8140%" y="69" width="0.5426%" height="15" fill="rgb(225,20,46)"/><text x="23.0640%" y="79.50"></text></g><g><title>resolve_instance (2,205,733 samples, 1.93%)</title><rect x="21.5293%" y="117" width="1.9335%" height="15" fill="rgb(210,31,41)"/><text x="21.7793%" y="127.50">r..</text></g><g><title>thir_body (1,136,087 samples, 1.00%)</title><rect x="23.4916%" y="117" width="0.9958%" height="15" fill="rgb(221,200,47)"/><text x="23.7416%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (122,181 samples, 0.11%)</title><rect x="24.5017%" y="117" width="0.1071%" height="15" fill="rgb(226,26,5)"/><text x="24.7517%" y="127.50"></text></g><g><title>mir_const (10,237,461 samples, 8.97%)</title><rect x="15.6486%" y="165" width="8.9737%" height="15" fill="rgb(249,33,26)"/><text x="15.8986%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (9,052,599 samples, 7.94%)</title><rect x="16.6872%" y="149" width="7.9351%" height="15" fill="rgb(235,183,28)"/><text x="16.9372%" y="159.50">unsafety_ch..</text></g><g><title>mir_built (8,207,061 samples, 7.19%)</title><rect x="17.4284%" y="133" width="7.1940%" height="15" fill="rgb(221,5,38)"/><text x="17.6784%" y="143.50">mir_built</text></g><g><title>has_structural_eq_impls (202,033 samples, 0.18%)</title><rect x="24.7961%" y="149" width="0.1771%" height="15" fill="rgb(247,18,42)"/><text x="25.0461%" y="159.50"></text></g><g><title>evaluate_obligation (181,672 samples, 0.16%)</title><rect x="24.8139%" y="133" width="0.1592%" height="15" fill="rgb(241,131,45)"/><text x="25.0639%" y="143.50"></text></g><g><title>trait_impls_of (154,942 samples, 0.14%)</title><rect x="24.8374%" y="117" width="0.1358%" height="15" fill="rgb(249,31,29)"/><text x="25.0874%" y="127.50"></text></g><g><title>mir_const_qualif (622,167 samples, 0.55%)</title><rect x="24.6224%" y="165" width="0.5454%" height="15" fill="rgb(225,111,53)"/><text x="24.8724%" y="175.50"></text></g><g><title>mir_promoted (11,939,855 samples, 10.47%)</title><rect x="14.7020%" y="181" width="10.4660%" height="15" fill="rgb(238,160,17)"/><text x="14.9520%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (893,439 samples, 0.78%)</title><rect x="25.1679%" y="181" width="0.7832%" height="15" fill="rgb(214,148,48)"/><text x="25.4179%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (699,289 samples, 0.61%)</title><rect x="25.9511%" y="181" width="0.6130%" height="15" fill="rgb(232,36,49)"/><text x="26.2011%" y="191.50"></text></g><g><title>normalize_projection_ty (300,404 samples, 0.26%)</title><rect x="26.3007%" y="165" width="0.2633%" height="15" fill="rgb(209,103,24)"/><text x="26.5507%" y="175.50"></text></g><g><title>type_op_normalize_predicate (363,686 samples, 0.32%)</title><rect x="26.5673%" y="181" width="0.3188%" height="15" fill="rgb(229,88,8)"/><text x="26.8173%" y="191.50"></text></g><g><title>normalize_projection_ty (126,251 samples, 0.11%)</title><rect x="26.7755%" y="165" width="0.1107%" height="15" fill="rgb(213,181,19)"/><text x="27.0255%" y="175.50"></text></g><g><title>type_op_normalize_ty (149,533 samples, 0.13%)</title><rect x="26.8861%" y="181" width="0.1311%" height="15" fill="rgb(254,191,54)"/><text x="27.1361%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,066,143 samples, 3.56%)</title><rect x="27.0172%" y="181" width="3.5642%" height="15" fill="rgb(241,83,37)"/><text x="27.2672%" y="191.50">type..</text></g><g><title>MIR_borrow_checking (34,176,671 samples, 29.96%)</title><rect x="0.6345%" y="213" width="29.9578%" height="15" fill="rgb(233,36,39)"/><text x="0.8845%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,046,261 samples, 29.84%)</title><rect x="0.7488%" y="197" width="29.8435%" height="15" fill="rgb(226,3,54)"/><text x="0.9988%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (292,813 samples, 0.26%)</title><rect x="30.5924%" y="213" width="0.2567%" height="15" fill="rgb(245,192,40)"/><text x="30.8424%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (115,951 samples, 0.10%)</title><rect x="30.7474%" y="197" width="0.1016%" height="15" fill="rgb(238,167,29)"/><text x="30.9974%" y="207.50"></text></g><g><title>hir_module_items (116,302 samples, 0.10%)</title><rect x="30.8490%" y="213" width="0.1019%" height="15" fill="rgb(232,182,51)"/><text x="31.0990%" y="223.50"></text></g><g><title>should_inherit_track_caller (174,914 samples, 0.15%)</title><rect x="31.2547%" y="165" width="0.1533%" height="15" fill="rgb(231,60,39)"/><text x="31.5047%" y="175.50"></text></g><g><title>codegen_fn_attrs (324,825 samples, 0.28%)</title><rect x="31.1405%" y="181" width="0.2847%" height="15" fill="rgb(208,69,12)"/><text x="31.3905%" y="191.50"></text></g><g><title>check_mod_attrs (524,656 samples, 0.46%)</title><rect x="30.9654%" y="197" width="0.4599%" height="15" fill="rgb(235,93,37)"/><text x="31.2154%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (252,703 samples, 0.22%)</title><rect x="31.5414%" y="197" width="0.2215%" height="15" fill="rgb(213,116,39)"/><text x="31.7914%" y="207.50"></text></g><g><title>misc_checking_1 (961,451 samples, 0.84%)</title><rect x="30.9513%" y="213" width="0.8428%" height="15" fill="rgb(222,207,29)"/><text x="31.2013%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (460,425 samples, 0.40%)</title><rect x="31.7954%" y="197" width="0.4036%" height="15" fill="rgb(206,96,30)"/><text x="32.0454%" y="207.50"></text></g><g><title>check_mod_liveness (388,885 samples, 0.34%)</title><rect x="31.8581%" y="181" width="0.3409%" height="15" fill="rgb(218,138,4)"/><text x="32.1081%" y="191.50"></text></g><g><title>param_env (165,410 samples, 0.14%)</title><rect x="32.6556%" y="165" width="0.1450%" height="15" fill="rgb(250,191,14)"/><text x="32.9056%" y="175.50"></text></g><g><title>misc_checking_2 (1,152,352 samples, 1.01%)</title><rect x="31.7941%" y="213" width="1.0101%" height="15" fill="rgb(239,60,40)"/><text x="32.0441%" y="223.50"></text></g><g><title>match_checking (690,467 samples, 0.61%)</title><rect x="32.1990%" y="197" width="0.6052%" height="15" fill="rgb(206,27,48)"/><text x="32.4490%" y="207.50"></text></g><g><title>check_match (659,346 samples, 0.58%)</title><rect x="32.2263%" y="181" width="0.5780%" height="15" fill="rgb(225,35,8)"/><text x="32.4763%" y="191.50"></text></g><g><title>check_private_in_public (128,871 samples, 0.11%)</title><rect x="32.8136%" y="197" width="0.1130%" height="15" fill="rgb(250,213,24)"/><text x="33.0636%" y="207.50"></text></g><g><title>death_checking (197,342 samples, 0.17%)</title><rect x="32.9265%" y="197" width="0.1730%" height="15" fill="rgb(247,123,22)"/><text x="33.1765%" y="207.50"></text></g><g><title>fn_abi_of_instance (122,402 samples, 0.11%)</title><rect x="33.7648%" y="133" width="0.1073%" height="15" fill="rgb(231,138,38)"/><text x="34.0148%" y="143.50"></text></g><g><title>eval_to_allocation_raw (296,653 samples, 0.26%)</title><rect x="33.6929%" y="165" width="0.2600%" height="15" fill="rgb(231,145,46)"/><text x="33.9429%" y="175.50"></text></g><g><title>eval_to_allocation_raw (295,783 samples, 0.26%)</title><rect x="33.6937%" y="149" width="0.2593%" height="15" fill="rgb(251,118,11)"/><text x="33.9437%" y="159.50"></text></g><g><title>eval_to_const_value_raw (236,893 samples, 0.21%)</title><rect x="33.9530%" y="165" width="0.2077%" height="15" fill="rgb(217,147,25)"/><text x="34.2030%" y="175.50"></text></g><g><title>eval_to_const_value_raw (234,863 samples, 0.21%)</title><rect x="33.9548%" y="149" width="0.2059%" height="15" fill="rgb(247,81,37)"/><text x="34.2048%" y="159.50"></text></g><g><title>eval_to_allocation_raw (230,163 samples, 0.20%)</title><rect x="33.9589%" y="133" width="0.2018%" height="15" fill="rgb(209,12,38)"/><text x="34.2089%" y="143.50"></text></g><g><title>param_env (124,531 samples, 0.11%)</title><rect x="34.1606%" y="165" width="0.1092%" height="15" fill="rgb(227,1,9)"/><text x="34.4106%" y="175.50"></text></g><g><title>crate_lints (3,875,583 samples, 3.40%)</title><rect x="33.1012%" y="181" width="3.3972%" height="15" fill="rgb(248,47,43)"/><text x="33.3512%" y="191.50">cra..</text></g><g><title>type_of (2,531,099 samples, 2.22%)</title><rect x="34.2797%" y="165" width="2.2187%" height="15" fill="rgb(221,10,30)"/><text x="34.5297%" y="175.50">t..</text></g><g><title>metadata_decode_entry_type_of (2,260,454 samples, 1.98%)</title><rect x="34.5169%" y="149" width="1.9814%" height="15" fill="rgb(210,229,1)"/><text x="34.7669%" y="159.50">m..</text></g><g><title>lint_checking (4,285,688 samples, 3.76%)</title><rect x="33.0995%" y="197" width="3.7567%" height="15" fill="rgb(222,148,37)"/><text x="33.3495%" y="207.50">lint..</text></g><g><title>module_lints (408,185 samples, 0.36%)</title><rect x="36.4984%" y="181" width="0.3578%" height="15" fill="rgb(234,67,33)"/><text x="36.7484%" y="191.50"></text></g><g><title>lint_mod (404,995 samples, 0.36%)</title><rect x="36.5011%" y="165" width="0.3550%" height="15" fill="rgb(247,98,35)"/><text x="36.7511%" y="175.50"></text></g><g><title>privacy_access_levels (134,152 samples, 0.12%)</title><rect x="36.8561%" y="197" width="0.1176%" height="15" fill="rgb(247,138,52)"/><text x="37.1061%" y="207.50"></text></g><g><title>privacy_checking_modules (812,359 samples, 0.71%)</title><rect x="36.9737%" y="197" width="0.7121%" height="15" fill="rgb(213,79,30)"/><text x="37.2237%" y="207.50"></text></g><g><title>check_mod_privacy (810,809 samples, 0.71%)</title><rect x="36.9751%" y="181" width="0.7107%" height="15" fill="rgb(246,177,23)"/><text x="37.2251%" y="191.50"></text></g><g><title>misc_checking_3 (5,588,813 samples, 4.90%)</title><rect x="32.8042%" y="213" width="4.8989%" height="15" fill="rgb(230,62,27)"/><text x="33.0542%" y="223.50">misc_c..</text></g><g><title>coherent_trait (141,701 samples, 0.12%)</title><rect x="37.7677%" y="181" width="0.1242%" height="15" fill="rgb(216,154,8)"/><text x="38.0177%" y="191.50"></text></g><g><title>specialization_graph_of (136,881 samples, 0.12%)</title><rect x="37.7720%" y="165" width="0.1200%" height="15" fill="rgb(244,35,45)"/><text x="38.0220%" y="175.50"></text></g><g><title>coherence_checking (188,222 samples, 0.16%)</title><rect x="37.7549%" y="197" width="0.1650%" height="15" fill="rgb(251,115,12)"/><text x="38.0049%" y="207.50"></text></g><g><title>associated_item (188,613 samples, 0.17%)</title><rect x="40.9459%" y="133" width="0.1653%" height="15" fill="rgb(240,54,50)"/><text x="41.1959%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (149,082 samples, 0.13%)</title><rect x="40.9805%" y="117" width="0.1307%" height="15" fill="rgb(233,84,52)"/><text x="41.2305%" y="127.50"></text></g><g><title>associated_items (266,323 samples, 0.23%)</title><rect x="40.8896%" y="149" width="0.2334%" height="15" fill="rgb(207,117,47)"/><text x="41.1396%" y="159.50"></text></g><g><title>dropck_outlives (180,414 samples, 0.16%)</title><rect x="41.1428%" y="149" width="0.1581%" height="15" fill="rgb(249,43,39)"/><text x="41.3928%" y="159.50"></text></g><g><title>evaluate_obligation (266,254 samples, 0.23%)</title><rect x="41.3009%" y="149" width="0.2334%" height="15" fill="rgb(209,38,44)"/><text x="41.5509%" y="159.50"></text></g><g><title>evaluate_obligation (121,080 samples, 0.11%)</title><rect x="41.7494%" y="133" width="0.1061%" height="15" fill="rgb(236,212,23)"/><text x="41.9994%" y="143.50"></text></g><g><title>method_autoderef_steps (229,961 samples, 0.20%)</title><rect x="41.6606%" y="149" width="0.2016%" height="15" fill="rgb(242,79,21)"/><text x="41.9106%" y="159.50"></text></g><g><title>adt_sized_constraint (122,651 samples, 0.11%)</title><rect x="65.9350%" y="133" width="0.1075%" height="15" fill="rgb(211,96,35)"/><text x="66.1850%" y="143.50"></text></g><g><title>associated_item (228,723 samples, 0.20%)</title><rect x="66.1280%" y="117" width="0.2005%" height="15" fill="rgb(253,215,40)"/><text x="66.3780%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (180,482 samples, 0.16%)</title><rect x="66.1703%" y="101" width="0.1582%" height="15" fill="rgb(211,81,21)"/><text x="66.4203%" y="111.50"></text></g><g><title>associated_items (335,353 samples, 0.29%)</title><rect x="66.0557%" y="133" width="0.2940%" height="15" fill="rgb(208,190,38)"/><text x="66.3057%" y="143.50"></text></g><g><title>adt_dtorck_constraint (147,612 samples, 0.13%)</title><rect x="66.6866%" y="101" width="0.1294%" height="15" fill="rgb(235,213,38)"/><text x="66.9366%" y="111.50"></text></g><g><title>adt_dtorck_constraint (294,183 samples, 0.26%)</title><rect x="66.5862%" y="117" width="0.2579%" height="15" fill="rgb(237,122,38)"/><text x="66.8362%" y="127.50"></text></g><g><title>dropck_outlives (581,406 samples, 0.51%)</title><rect x="66.3857%" y="133" width="0.5096%" height="15" fill="rgb(244,218,35)"/><text x="66.6357%" y="143.50"></text></g><g><title>impl_trait_ref (159,530 samples, 0.14%)</title><rect x="68.5253%" y="117" width="0.1398%" height="15" fill="rgb(240,68,47)"/><text x="68.7753%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (130,440 samples, 0.11%)</title><rect x="68.5508%" y="101" width="0.1143%" height="15" fill="rgb(210,16,53)"/><text x="68.8008%" y="111.50"></text></g><g><title>predicates_of (219,162 samples, 0.19%)</title><rect x="68.6729%" y="117" width="0.1921%" height="15" fill="rgb(235,124,12)"/><text x="68.9229%" y="127.50"></text></g><g><title>predicates_defined_on (129,321 samples, 0.11%)</title><rect x="68.7517%" y="101" width="0.1134%" height="15" fill="rgb(224,169,11)"/><text x="69.0017%" y="111.50"></text></g><g><title>trait_impls_of (680,570 samples, 0.60%)</title><rect x="68.9232%" y="117" width="0.5966%" height="15" fill="rgb(250,166,2)"/><text x="69.1732%" y="127.50"></text></g><g><title>implementations_of_trait (240,624 samples, 0.21%)</title><rect x="69.3088%" y="101" width="0.2109%" height="15" fill="rgb(242,216,29)"/><text x="69.5588%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (150,253 samples, 0.13%)</title><rect x="69.3880%" y="85" width="0.1317%" height="15" fill="rgb(230,116,27)"/><text x="69.6380%" y="95.50"></text></g><g><title>evaluate_obligation (3,002,971 samples, 2.63%)</title><rect x="66.8953%" y="133" width="2.6323%" height="15" fill="rgb(228,99,48)"/><text x="67.1453%" y="143.50">ev..</text></g><g><title>fn_sig (129,200 samples, 0.11%)</title><rect x="69.5435%" y="133" width="0.1133%" height="15" fill="rgb(253,11,6)"/><text x="69.7935%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (118,120 samples, 0.10%)</title><rect x="69.5532%" y="117" width="0.1035%" height="15" fill="rgb(247,143,39)"/><text x="69.8032%" y="127.50"></text></g><g><title>generics_of (148,831 samples, 0.13%)</title><rect x="69.6567%" y="133" width="0.1305%" height="15" fill="rgb(236,97,10)"/><text x="69.9067%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (117,221 samples, 0.10%)</title><rect x="69.6845%" y="117" width="0.1028%" height="15" fill="rgb(233,208,19)"/><text x="69.9345%" y="127.50"></text></g><g><title>impl_trait_ref (133,382 samples, 0.12%)</title><rect x="69.8827%" y="133" width="0.1169%" height="15" fill="rgb(216,164,2)"/><text x="70.1327%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (117,482 samples, 0.10%)</title><rect x="69.8966%" y="117" width="0.1030%" height="15" fill="rgb(220,129,5)"/><text x="70.1466%" y="127.50"></text></g><g><title>is_copy_raw (478,124 samples, 0.42%)</title><rect x="70.0682%" y="133" width="0.4191%" height="15" fill="rgb(242,17,10)"/><text x="70.3182%" y="143.50"></text></g><g><title>evaluate_obligation (408,474 samples, 0.36%)</title><rect x="70.1292%" y="117" width="0.3581%" height="15" fill="rgb(242,107,0)"/><text x="70.3792%" y="127.50"></text></g><g><title>trait_impls_of (143,222 samples, 0.13%)</title><rect x="70.3617%" y="101" width="0.1255%" height="15" fill="rgb(251,28,31)"/><text x="70.6117%" y="111.50"></text></g><g><title>item_attrs (265,262 samples, 0.23%)</title><rect x="70.4873%" y="133" width="0.2325%" height="15" fill="rgb(233,223,10)"/><text x="70.7373%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (260,292 samples, 0.23%)</title><rect x="70.4916%" y="117" width="0.2282%" height="15" fill="rgb(215,21,27)"/><text x="70.7416%" y="127.50"></text></g><g><title>evaluate_obligation (168,532 samples, 0.15%)</title><rect x="70.8742%" y="117" width="0.1477%" height="15" fill="rgb(232,23,21)"/><text x="71.1242%" y="127.50"></text></g><g><title>method_autoderef_steps (320,014 samples, 0.28%)</title><rect x="70.7559%" y="133" width="0.2805%" height="15" fill="rgb(244,5,23)"/><text x="71.0059%" y="143.50"></text></g><g><title>object_safety_violations (352,674 samples, 0.31%)</title><rect x="71.0394%" y="133" width="0.3091%" height="15" fill="rgb(226,81,46)"/><text x="71.2894%" y="143.50"></text></g><g><title>explicit_predicates_of (156,072 samples, 0.14%)</title><rect x="71.5611%" y="101" width="0.1368%" height="15" fill="rgb(247,70,30)"/><text x="71.8111%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (129,661 samples, 0.11%)</title><rect x="71.5842%" y="85" width="0.1137%" height="15" fill="rgb(212,68,19)"/><text x="71.8342%" y="95.50"></text></g><g><title>predicates_of (429,905 samples, 0.38%)</title><rect x="71.3702%" y="133" width="0.3768%" height="15" fill="rgb(240,187,13)"/><text x="71.6202%" y="143.50"></text></g><g><title>predicates_defined_on (302,834 samples, 0.27%)</title><rect x="71.4815%" y="117" width="0.2655%" height="15" fill="rgb(223,113,26)"/><text x="71.7315%" y="127.50"></text></g><g><title>typeck (34,197,740 samples, 29.98%)</title><rect x="41.9967%" y="149" width="29.9763%" height="15" fill="rgb(206,192,2)"/><text x="42.2467%" y="159.50">typeck</text></g><g><title>item_bodies_checking (38,840,643 samples, 34.05%)</title><rect x="37.9356%" y="197" width="34.0461%" height="15" fill="rgb(241,108,4)"/><text x="38.1856%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,837,223 samples, 34.04%)</title><rect x="37.9386%" y="181" width="34.0431%" height="15" fill="rgb(247,173,49)"/><text x="38.1886%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (38,782,812 samples, 34.00%)</title><rect x="37.9863%" y="165" width="33.9954%" height="15" fill="rgb(224,114,35)"/><text x="38.2363%" y="175.50">typeck</text></g><g><title>layout_of (118,742 samples, 0.10%)</title><rect x="72.5760%" y="85" width="0.1041%" height="15" fill="rgb(245,159,27)"/><text x="72.8260%" y="95.50"></text></g><g><title>layout_of (142,002 samples, 0.12%)</title><rect x="72.5572%" y="133" width="0.1245%" height="15" fill="rgb(245,172,44)"/><text x="72.8072%" y="143.50"></text></g><g><title>layout_of (135,902 samples, 0.12%)</title><rect x="72.5626%" y="117" width="0.1191%" height="15" fill="rgb(236,23,11)"/><text x="72.8126%" y="127.50"></text></g><g><title>layout_of (123,902 samples, 0.11%)</title><rect x="72.5731%" y="101" width="0.1086%" height="15" fill="rgb(205,117,38)"/><text x="72.8231%" y="111.50"></text></g><g><title>layout_of (165,942 samples, 0.15%)</title><rect x="72.5431%" y="149" width="0.1455%" height="15" fill="rgb(237,72,25)"/><text x="72.7931%" y="159.50"></text></g><g><title>layout_of (188,102 samples, 0.16%)</title><rect x="72.5273%" y="165" width="0.1649%" height="15" fill="rgb(244,70,9)"/><text x="72.7773%" y="175.50"></text></g><g><title>impl_trait_ref (293,065 samples, 0.26%)</title><rect x="73.2627%" y="53" width="0.2569%" height="15" fill="rgb(217,125,39)"/><text x="73.5127%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (273,855 samples, 0.24%)</title><rect x="73.2795%" y="37" width="0.2400%" height="15" fill="rgb(235,36,10)"/><text x="73.5295%" y="47.50"></text></g><g><title>coherent_trait (500,756 samples, 0.44%)</title><rect x="73.1078%" y="85" width="0.4389%" height="15" fill="rgb(251,123,47)"/><text x="73.3578%" y="95.50"></text></g><g><title>specialization_graph_of (499,316 samples, 0.44%)</title><rect x="73.1091%" y="69" width="0.4377%" height="15" fill="rgb(221,13,13)"/><text x="73.3591%" y="79.50"></text></g><g><title>adt_destructor (507,576 samples, 0.44%)</title><rect x="73.1026%" y="117" width="0.4449%" height="15" fill="rgb(238,131,9)"/><text x="73.3526%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (505,806 samples, 0.44%)</title><rect x="73.1042%" y="101" width="0.4434%" height="15" fill="rgb(211,50,8)"/><text x="73.3542%" y="111.50"></text></g><g><title>dropck_outlives (646,537 samples, 0.57%)</title><rect x="73.0652%" y="149" width="0.5667%" height="15" fill="rgb(245,182,24)"/><text x="73.3152%" y="159.50"></text></g><g><title>adt_dtorck_constraint (621,807 samples, 0.55%)</title><rect x="73.0869%" y="133" width="0.5451%" height="15" fill="rgb(242,14,37)"/><text x="73.3369%" y="143.50"></text></g><g><title>item_types_checking (2,002,152 samples, 1.76%)</title><rect x="71.9817%" y="197" width="1.7550%" height="15" fill="rgb(246,228,12)"/><text x="72.2317%" y="207.50"></text></g><g><title>check_mod_item_types (2,000,192 samples, 1.75%)</title><rect x="71.9834%" y="181" width="1.7533%" height="15" fill="rgb(213,55,15)"/><text x="72.2334%" y="191.50"></text></g><g><title>typeck (1,139,682 samples, 1.00%)</title><rect x="72.7377%" y="165" width="0.9990%" height="15" fill="rgb(209,9,3)"/><text x="72.9877%" y="175.50"></text></g><g><title>fn_sig (229,752 samples, 0.20%)</title><rect x="73.8820%" y="165" width="0.2014%" height="15" fill="rgb(230,59,30)"/><text x="74.1320%" y="175.50"></text></g><g><title>late_bound_vars_map (367,496 samples, 0.32%)</title><rect x="74.3262%" y="117" width="0.3221%" height="15" fill="rgb(209,121,21)"/><text x="74.5762%" y="127.50"></text></g><g><title>resolve_lifetimes (361,546 samples, 0.32%)</title><rect x="74.3314%" y="101" width="0.3169%" height="15" fill="rgb(220,109,13)"/><text x="74.5814%" y="111.50"></text></g><g><title>lint_levels (161,592 samples, 0.14%)</title><rect x="74.5067%" y="85" width="0.1416%" height="15" fill="rgb(232,18,1)"/><text x="74.7567%" y="95.50"></text></g><g><title>explicit_predicates_of (476,256 samples, 0.42%)</title><rect x="74.2389%" y="133" width="0.4175%" height="15" fill="rgb(215,41,42)"/><text x="74.4889%" y="143.50"></text></g><g><title>predicates_of (799,749 samples, 0.70%)</title><rect x="74.1810%" y="165" width="0.7010%" height="15" fill="rgb(224,123,36)"/><text x="74.4310%" y="175.50"></text></g><g><title>predicates_defined_on (775,289 samples, 0.68%)</title><rect x="74.2025%" y="149" width="0.6796%" height="15" fill="rgb(240,125,3)"/><text x="74.4525%" y="159.50"></text></g><g><title>inferred_outlives_of (257,463 samples, 0.23%)</title><rect x="74.6564%" y="133" width="0.2257%" height="15" fill="rgb(205,98,50)"/><text x="74.9064%" y="143.50"></text></g><g><title>inferred_outlives_crate (241,823 samples, 0.21%)</title><rect x="74.6701%" y="117" width="0.2120%" height="15" fill="rgb(205,185,37)"/><text x="74.9201%" y="127.50"></text></g><g><title>type_of (169,103 samples, 0.15%)</title><rect x="74.7338%" y="101" width="0.1482%" height="15" fill="rgb(238,207,15)"/><text x="74.9838%" y="111.50"></text></g><g><title>type_collecting (1,443,206 samples, 1.27%)</title><rect x="73.7386%" y="197" width="1.2651%" height="15" fill="rgb(213,199,42)"/><text x="73.9886%" y="207.50"></text></g><g><title>collect_mod_item_types (1,436,696 samples, 1.26%)</title><rect x="73.7443%" y="181" width="1.2593%" height="15" fill="rgb(235,201,11)"/><text x="73.9943%" y="191.50"></text></g><g><title>type_of (138,741 samples, 0.12%)</title><rect x="74.8820%" y="165" width="0.1216%" height="15" fill="rgb(207,46,11)"/><text x="75.1320%" y="175.50"></text></g><g><title>evaluate_obligation (269,783 samples, 0.24%)</title><rect x="76.2422%" y="165" width="0.2365%" height="15" fill="rgb(241,35,35)"/><text x="76.4922%" y="175.50"></text></g><g><title>implied_outlives_bounds (153,852 samples, 0.13%)</title><rect x="76.4812%" y="165" width="0.1349%" height="15" fill="rgb(243,32,47)"/><text x="76.7312%" y="175.50"></text></g><g><title>param_env (226,571 samples, 0.20%)</title><rect x="76.6496%" y="165" width="0.1986%" height="15" fill="rgb(247,202,23)"/><text x="76.8996%" y="175.50"></text></g><g><title>region_scope_tree (283,493 samples, 0.25%)</title><rect x="76.8965%" y="165" width="0.2485%" height="15" fill="rgb(219,102,11)"/><text x="77.1465%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,459,207 samples, 2.16%)</title><rect x="75.0978%" y="181" width="2.1556%" height="15" fill="rgb(243,110,44)"/><text x="75.3478%" y="191.50">c..</text></g><g><title>trait_impls_of (123,731 samples, 0.11%)</title><rect x="77.1450%" y="165" width="0.1085%" height="15" fill="rgb(222,74,54)"/><text x="77.3950%" y="175.50"></text></g><g><title>adt_def (141,851 samples, 0.12%)</title><rect x="77.7399%" y="133" width="0.1243%" height="15" fill="rgb(216,99,12)"/><text x="77.9899%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (140,041 samples, 0.12%)</title><rect x="77.7415%" y="117" width="0.1228%" height="15" fill="rgb(226,22,26)"/><text x="77.9915%" y="127.50"></text></g><g><title>item_attrs (121,071 samples, 0.11%)</title><rect x="77.7581%" y="101" width="0.1061%" height="15" fill="rgb(217,163,10)"/><text x="78.0081%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (119,131 samples, 0.10%)</title><rect x="77.7598%" y="85" width="0.1044%" height="15" fill="rgb(213,25,53)"/><text x="78.0098%" y="95.50"></text></g><g><title>adt_sized_constraint (263,372 samples, 0.23%)</title><rect x="77.7328%" y="149" width="0.2309%" height="15" fill="rgb(252,105,26)"/><text x="77.9828%" y="159.50"></text></g><g><title>evaluate_obligation (337,955 samples, 0.30%)</title><rect x="77.6877%" y="165" width="0.2962%" height="15" fill="rgb(220,39,43)"/><text x="77.9377%" y="175.50"></text></g><g><title>param_env (197,241 samples, 0.17%)</title><rect x="78.0509%" y="165" width="0.1729%" height="15" fill="rgb(229,68,48)"/><text x="78.3009%" y="175.50"></text></g><g><title>analysis (88,939,361 samples, 77.96%)</title><rect x="0.4101%" y="229" width="77.9605%" height="15" fill="rgb(252,8,32)"/><text x="0.6601%" y="239.50">analysis</text></g><g><title>type_check_crate (46,394,557 samples, 40.67%)</title><rect x="37.7031%" y="213" width="40.6675%" height="15" fill="rgb(223,20,43)"/><text x="37.9531%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,836,613 samples, 3.36%)</title><rect x="75.0076%" y="197" width="3.3630%" height="15" fill="rgb(229,81,49)"/><text x="75.2576%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (1,274,556 samples, 1.12%)</title><rect x="77.2534%" y="181" width="1.1172%" height="15" fill="rgb(236,28,36)"/><text x="77.5034%" y="191.50"></text></g><g><title>codegen_crate (380,374 samples, 0.33%)</title><rect x="78.3761%" y="229" width="0.3334%" height="15" fill="rgb(249,185,26)"/><text x="78.6261%" y="239.50"></text></g><g><title>metadata_load_macro (270,473 samples, 0.24%)</title><rect x="87.4172%" y="181" width="0.2371%" height="15" fill="rgb(249,174,33)"/><text x="87.6672%" y="191.50"></text></g><g><title>macro_expand_crate (11,232,225 samples, 9.85%)</title><rect x="78.9956%" y="213" width="9.8457%" height="15" fill="rgb(233,201,37)"/><text x="79.2456%" y="223.50">macro_expand_c..</text></g><g><title>expand_crate (11,222,685 samples, 9.84%)</title><rect x="79.0040%" y="197" width="9.8373%" height="15" fill="rgb(221,78,26)"/><text x="79.2540%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (1,354,145 samples, 1.19%)</title><rect x="87.6543%" y="181" width="1.1870%" height="15" fill="rgb(250,127,30)"/><text x="87.9043%" y="191.50"></text></g><g><title>metadata_register_crate (470,616 samples, 0.41%)</title><rect x="88.4288%" y="165" width="0.4125%" height="15" fill="rgb(230,49,44)"/><text x="88.6788%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (122,591 samples, 0.11%)</title><rect x="88.8443%" y="213" width="0.1075%" height="15" fill="rgb(229,67,23)"/><text x="89.0943%" y="223.50"></text></g><g><title>finalize_imports (116,321 samples, 0.10%)</title><rect x="88.9558%" y="197" width="0.1020%" height="15" fill="rgb(249,83,47)"/><text x="89.2058%" y="207.50"></text></g><g><title>late_resolve_crate (2,819,581 samples, 2.47%)</title><rect x="89.0940%" y="197" width="2.4715%" height="15" fill="rgb(215,43,3)"/><text x="89.3440%" y="207.50">la..</text></g><g><title>metadata_register_crate (264,262 samples, 0.23%)</title><rect x="91.3339%" y="181" width="0.2316%" height="15" fill="rgb(238,154,13)"/><text x="91.5839%" y="191.50"></text></g><g><title>configure_and_expand (14,739,514 samples, 12.92%)</title><rect x="78.7096%" y="229" width="12.9200%" height="15" fill="rgb(219,56,2)"/><text x="78.9596%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (3,054,914 samples, 2.68%)</title><rect x="88.9518%" y="213" width="2.6778%" height="15" fill="rgb(233,0,4)"/><text x="89.2018%" y="223.50">re..</text></g><g><title>drop_ast (130,911 samples, 0.11%)</title><rect x="91.6296%" y="229" width="0.1148%" height="15" fill="rgb(235,30,7)"/><text x="91.8796%" y="239.50"></text></g><g><title>early_lint_checks (265,422 samples, 0.23%)</title><rect x="91.7603%" y="229" width="0.2327%" height="15" fill="rgb(250,79,13)"/><text x="92.0103%" y="239.50"></text></g><g><title>free_global_ctxt (3,594,090 samples, 3.15%)</title><rect x="91.9929%" y="229" width="3.1504%" height="15" fill="rgb(211,146,34)"/><text x="92.2429%" y="239.50">fre..</text></g><g><title>generate_crate_metadata (770,979 samples, 0.68%)</title><rect x="95.1434%" y="229" width="0.6758%" height="15" fill="rgb(228,22,38)"/><text x="95.3934%" y="239.50"></text></g><g><title>hir_lowering (2,282,016 samples, 2.00%)</title><rect x="95.8192%" y="229" width="2.0003%" height="15" fill="rgb(235,168,5)"/><text x="96.0692%" y="239.50">h..</text></g><g><title>parse_crate (1,260,044 samples, 1.10%)</title><rect x="97.8624%" y="229" width="1.1045%" height="15" fill="rgb(221,155,16)"/><text x="98.1124%" y="239.50"></text></g><g><title>prepare_outputs (179,212 samples, 0.16%)</title><rect x="98.9710%" y="229" width="0.1571%" height="15" fill="rgb(215,215,53)"/><text x="99.2210%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (578,836 samples, 0.51%)</title><rect x="99.1281%" y="229" width="0.5074%" height="15" fill="rgb(223,4,10)"/><text x="99.3781%" y="239.50"></text></g><g><title>all (114,082,560 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (114,082,560 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (315,263 samples, 0.28%)</title><rect x="99.7237%" y="229" width="0.2763%" height="15" fill="rgb(234,150,53)"/><text x="99.9737%" y="239.50"></text></g></svg></svg>