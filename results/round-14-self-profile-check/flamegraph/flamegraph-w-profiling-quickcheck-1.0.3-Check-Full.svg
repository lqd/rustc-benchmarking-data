<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (2,341,868 samples, 0.40%)</title><rect x="12.8112%" y="149" width="0.3989%" height="15" fill="rgb(227,0,7)"/><text x="13.0612%" y="159.50"></text></g><g><title>param_env (633,016 samples, 0.11%)</title><rect x="14.6870%" y="117" width="0.1078%" height="15" fill="rgb(217,0,24)"/><text x="14.9370%" y="127.50"></text></g><g><title>item_attrs (713,949 samples, 0.12%)</title><rect x="15.2453%" y="85" width="0.1216%" height="15" fill="rgb(221,193,54)"/><text x="15.4953%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (689,189 samples, 0.12%)</title><rect x="15.2495%" y="69" width="0.1174%" height="15" fill="rgb(248,212,6)"/><text x="15.4995%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,059,377 samples, 0.18%)</title><rect x="15.1950%" y="101" width="0.1804%" height="15" fill="rgb(208,68,35)"/><text x="15.4450%" y="111.50"></text></g><g><title>adt_drop_tys (822,216 samples, 0.14%)</title><rect x="18.1926%" y="69" width="0.1400%" height="15" fill="rgb(232,128,0)"/><text x="18.4426%" y="79.50"></text></g><g><title>is_copy_raw (5,088,707 samples, 0.87%)</title><rect x="18.3326%" y="69" width="0.8667%" height="15" fill="rgb(207,160,47)"/><text x="18.5826%" y="79.50"></text></g><g><title>evaluate_obligation (3,605,896 samples, 0.61%)</title><rect x="18.5852%" y="53" width="0.6142%" height="15" fill="rgb(228,23,34)"/><text x="18.8352%" y="63.50"></text></g><g><title>needs_drop_raw (7,005,053 samples, 1.19%)</title><rect x="18.0068%" y="85" width="1.1931%" height="15" fill="rgb(218,30,26)"/><text x="18.2568%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (16,280,114 samples, 2.77%)</title><rect x="19.5405%" y="69" width="2.7729%" height="15" fill="rgb(220,122,19)"/><text x="19.7905%" y="79.50">co..</text></g><g><title>evaluate_obligation (588,360 samples, 0.10%)</title><rect x="22.2132%" y="53" width="0.1002%" height="15" fill="rgb(250,228,42)"/><text x="22.4632%" y="63.50"></text></g><g><title>impl_parent (685,964 samples, 0.12%)</title><rect x="22.5521%" y="53" width="0.1168%" height="15" fill="rgb(240,193,28)"/><text x="22.8021%" y="63.50"></text></g><g><title>specialization_graph_of (2,571,200 samples, 0.44%)</title><rect x="22.3722%" y="69" width="0.4379%" height="15" fill="rgb(216,20,37)"/><text x="22.6222%" y="79.50"></text></g><g><title>impl_trait_ref (829,524 samples, 0.14%)</title><rect x="22.6689%" y="53" width="0.1413%" height="15" fill="rgb(206,188,39)"/><text x="22.9189%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (673,921 samples, 0.11%)</title><rect x="22.6954%" y="37" width="0.1148%" height="15" fill="rgb(217,207,13)"/><text x="22.9454%" y="47.50"></text></g><g><title>resolve_instance (21,439,254 samples, 3.65%)</title><rect x="19.2001%" y="85" width="3.6517%" height="15" fill="rgb(231,73,38)"/><text x="19.4501%" y="95.50">reso..</text></g><g><title>thir_body (5,415,598 samples, 0.92%)</title><rect x="22.8922%" y="85" width="0.9224%" height="15" fill="rgb(225,20,46)"/><text x="23.1422%" y="95.50"></text></g><g><title>mir_const (57,583,266 samples, 9.81%)</title><rect x="14.0270%" y="133" width="9.8079%" height="15" fill="rgb(210,31,41)"/><text x="14.2770%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (53,074,885 samples, 9.04%)</title><rect x="14.7949%" y="117" width="9.0400%" height="15" fill="rgb(221,200,47)"/><text x="15.0449%" y="127.50">unsafety_chec..</text></g><g><title>mir_built (49,662,011 samples, 8.46%)</title><rect x="15.3761%" y="101" width="8.4587%" height="15" fill="rgb(226,26,5)"/><text x="15.6261%" y="111.50">mir_built</text></g><g><title>mir_promoted (61,955,820 samples, 10.55%)</title><rect x="13.3176%" y="149" width="10.5527%" height="15" fill="rgb(249,33,26)"/><text x="13.5676%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (6,307,688 samples, 1.07%)</title><rect x="23.8715%" y="149" width="1.0744%" height="15" fill="rgb(235,183,28)"/><text x="24.1215%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (6,325,270 samples, 1.08%)</title><rect x="24.9459%" y="149" width="1.0774%" height="15" fill="rgb(221,5,38)"/><text x="25.1959%" y="159.50"></text></g><g><title>normalize_projection_ty (4,973,157 samples, 0.85%)</title><rect x="25.1762%" y="133" width="0.8471%" height="15" fill="rgb(247,18,42)"/><text x="25.4262%" y="143.50"></text></g><g><title>type_op_normalize_predicate (15,171,883 samples, 2.58%)</title><rect x="26.0232%" y="149" width="2.5842%" height="15" fill="rgb(241,131,45)"/><text x="26.2732%" y="159.50">ty..</text></g><g><title>normalize_projection_ty (12,766,516 samples, 2.17%)</title><rect x="26.4329%" y="133" width="2.1745%" height="15" fill="rgb(249,31,29)"/><text x="26.6829%" y="143.50">n..</text></g><g><title>type_op_prove_predicate (53,092,566 samples, 9.04%)</title><rect x="28.6074%" y="149" width="9.0430%" height="15" fill="rgb(225,111,53)"/><text x="28.8574%" y="159.50">type_op_prove..</text></g><g><title>evaluate_obligation (990,130 samples, 0.17%)</title><rect x="37.4817%" y="133" width="0.1686%" height="15" fill="rgb(238,160,17)"/><text x="37.7317%" y="143.50"></text></g><g><title>MIR_borrow_checking (219,272,042 samples, 37.35%)</title><rect x="0.3063%" y="181" width="37.3476%" height="15" fill="rgb(214,148,48)"/><text x="0.5563%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (218,674,323 samples, 37.25%)</title><rect x="0.4081%" y="165" width="37.2458%" height="15" fill="rgb(232,36,49)"/><text x="0.6581%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (608,077 samples, 0.10%)</title><rect x="37.6825%" y="181" width="0.1036%" height="15" fill="rgb(209,103,24)"/><text x="37.9325%" y="191.50"></text></g><g><title>codegen_fn_attrs (732,238 samples, 0.12%)</title><rect x="37.9061%" y="149" width="0.1247%" height="15" fill="rgb(229,88,8)"/><text x="38.1561%" y="159.50"></text></g><g><title>check_mod_attrs (1,373,946 samples, 0.23%)</title><rect x="37.7969%" y="165" width="0.2340%" height="15" fill="rgb(213,181,19)"/><text x="38.0469%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,393,495 samples, 0.24%)</title><rect x="38.1357%" y="165" width="0.2373%" height="15" fill="rgb(254,191,54)"/><text x="38.3857%" y="175.50"></text></g><g><title>misc_checking_1 (3,559,350 samples, 0.61%)</title><rect x="37.7861%" y="181" width="0.6062%" height="15" fill="rgb(241,83,37)"/><text x="38.0361%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (3,134,204 samples, 0.53%)</title><rect x="38.3927%" y="165" width="0.5338%" height="15" fill="rgb(233,36,39)"/><text x="38.6427%" y="175.50"></text></g><g><title>check_mod_liveness (2,800,941 samples, 0.48%)</title><rect x="38.4495%" y="149" width="0.4771%" height="15" fill="rgb(226,3,54)"/><text x="38.6995%" y="159.50"></text></g><g><title>type_uninhabited_from (1,250,764 samples, 0.21%)</title><rect x="38.7135%" y="133" width="0.2130%" height="15" fill="rgb(245,192,40)"/><text x="38.9635%" y="143.50"></text></g><g><title>type_uninhabited_from (960,174 samples, 0.16%)</title><rect x="38.7630%" y="117" width="0.1635%" height="15" fill="rgb(238,167,29)"/><text x="39.0130%" y="127.50"></text></g><g><title>param_env (1,058,731 samples, 0.18%)</title><rect x="39.2660%" y="133" width="0.1803%" height="15" fill="rgb(232,182,51)"/><text x="39.5160%" y="143.50"></text></g><g><title>misc_checking_2 (6,193,038 samples, 1.05%)</title><rect x="38.3924%" y="181" width="1.0548%" height="15" fill="rgb(231,60,39)"/><text x="38.6424%" y="191.50"></text></g><g><title>match_checking (3,056,654 samples, 0.52%)</title><rect x="38.9266%" y="165" width="0.5206%" height="15" fill="rgb(208,69,12)"/><text x="39.1766%" y="175.50"></text></g><g><title>check_match (2,907,623 samples, 0.50%)</title><rect x="38.9520%" y="149" width="0.4952%" height="15" fill="rgb(235,93,37)"/><text x="39.2020%" y="159.50"></text></g><g><title>check_private_in_public (661,267 samples, 0.11%)</title><rect x="39.4493%" y="165" width="0.1126%" height="15" fill="rgb(213,116,39)"/><text x="39.6993%" y="175.50"></text></g><g><title>death_checking (1,191,533 samples, 0.20%)</title><rect x="39.5620%" y="165" width="0.2029%" height="15" fill="rgb(222,207,29)"/><text x="39.8120%" y="175.50"></text></g><g><title>param_env (643,983 samples, 0.11%)</title><rect x="40.1254%" y="133" width="0.1097%" height="15" fill="rgb(206,96,30)"/><text x="40.3754%" y="143.50"></text></g><g><title>crate_lints (4,328,038 samples, 0.74%)</title><rect x="39.7653%" y="149" width="0.7372%" height="15" fill="rgb(218,138,4)"/><text x="40.0153%" y="159.50"></text></g><g><title>type_of (1,452,998 samples, 0.25%)</title><rect x="40.2549%" y="133" width="0.2475%" height="15" fill="rgb(250,191,14)"/><text x="40.5049%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,157,545 samples, 0.20%)</title><rect x="40.3053%" y="117" width="0.1972%" height="15" fill="rgb(239,60,40)"/><text x="40.5553%" y="127.50"></text></g><g><title>lint_checking (6,938,307 samples, 1.18%)</title><rect x="39.7649%" y="165" width="1.1818%" height="15" fill="rgb(206,27,48)"/><text x="40.0149%" y="175.50"></text></g><g><title>module_lints (2,608,289 samples, 0.44%)</title><rect x="40.5024%" y="149" width="0.4443%" height="15" fill="rgb(225,35,8)"/><text x="40.7524%" y="159.50"></text></g><g><title>lint_mod (2,590,688 samples, 0.44%)</title><rect x="40.5054%" y="133" width="0.4413%" height="15" fill="rgb(250,213,24)"/><text x="40.7554%" y="143.50"></text></g><g><title>privacy_access_levels (911,501 samples, 0.16%)</title><rect x="40.9467%" y="165" width="0.1553%" height="15" fill="rgb(247,123,22)"/><text x="41.1967%" y="175.50"></text></g><g><title>privacy_checking_modules (5,148,458 samples, 0.88%)</title><rect x="41.1019%" y="165" width="0.8769%" height="15" fill="rgb(231,138,38)"/><text x="41.3519%" y="175.50"></text></g><g><title>check_mod_privacy (5,132,068 samples, 0.87%)</title><rect x="41.1047%" y="149" width="0.8741%" height="15" fill="rgb(231,145,46)"/><text x="41.3547%" y="159.50"></text></g><g><title>misc_checking_3 (14,882,217 samples, 2.53%)</title><rect x="39.4472%" y="181" width="2.5348%" height="15" fill="rgb(251,118,11)"/><text x="39.6972%" y="191.50">mi..</text></g><g><title>impl_parent (2,085,086 samples, 0.36%)</title><rect x="42.4644%" y="117" width="0.3551%" height="15" fill="rgb(217,147,25)"/><text x="42.7144%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,183,193 samples, 0.20%)</title><rect x="42.6180%" y="101" width="0.2015%" height="15" fill="rgb(247,81,37)"/><text x="42.8680%" y="111.50"></text></g><g><title>impl_trait_ref (4,971,129 samples, 0.85%)</title><rect x="42.8195%" y="117" width="0.8467%" height="15" fill="rgb(209,12,38)"/><text x="43.0695%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,126,710 samples, 0.70%)</title><rect x="42.9633%" y="101" width="0.7029%" height="15" fill="rgb(227,1,9)"/><text x="43.2133%" y="111.50"></text></g><g><title>coherent_trait (10,154,834 samples, 1.73%)</title><rect x="42.0260%" y="149" width="1.7296%" height="15" fill="rgb(248,47,43)"/><text x="42.2760%" y="159.50"></text></g><g><title>specialization_graph_of (10,135,604 samples, 1.73%)</title><rect x="42.0293%" y="133" width="1.7264%" height="15" fill="rgb(221,10,30)"/><text x="42.2793%" y="143.50"></text></g><g><title>coherence_checking (10,281,895 samples, 1.75%)</title><rect x="42.0232%" y="165" width="1.7513%" height="15" fill="rgb(210,229,1)"/><text x="42.2732%" y="175.50"></text></g><g><title>associated_item (1,903,839 samples, 0.32%)</title><rect x="56.7740%" y="101" width="0.3243%" height="15" fill="rgb(222,148,37)"/><text x="57.0240%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,513,393 samples, 0.26%)</title><rect x="56.8405%" y="85" width="0.2578%" height="15" fill="rgb(234,67,33)"/><text x="57.0905%" y="95.50"></text></g><g><title>associated_items (2,721,974 samples, 0.46%)</title><rect x="56.6561%" y="117" width="0.4636%" height="15" fill="rgb(247,98,35)"/><text x="56.9061%" y="127.50"></text></g><g><title>dropck_outlives (2,283,349 samples, 0.39%)</title><rect x="57.1589%" y="117" width="0.3889%" height="15" fill="rgb(247,138,52)"/><text x="57.4089%" y="127.50"></text></g><g><title>adt_dtorck_constraint (747,369 samples, 0.13%)</title><rect x="57.4205%" y="101" width="0.1273%" height="15" fill="rgb(213,79,30)"/><text x="57.6705%" y="111.50"></text></g><g><title>mir_for_ctfe (920,278 samples, 0.16%)</title><rect x="57.7008%" y="69" width="0.1567%" height="15" fill="rgb(246,177,23)"/><text x="57.9508%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (910,698 samples, 0.16%)</title><rect x="57.7024%" y="53" width="0.1551%" height="15" fill="rgb(230,62,27)"/><text x="57.9524%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,848,653 samples, 0.31%)</title><rect x="57.5480%" y="117" width="0.3149%" height="15" fill="rgb(216,154,8)"/><text x="57.7980%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,805,601 samples, 0.31%)</title><rect x="57.5553%" y="101" width="0.3075%" height="15" fill="rgb(244,35,45)"/><text x="57.8053%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,761,660 samples, 0.30%)</title><rect x="57.5628%" y="85" width="0.3001%" height="15" fill="rgb(251,115,12)"/><text x="57.8128%" y="95.50"></text></g><g><title>impl_trait_ref (878,658 samples, 0.15%)</title><rect x="59.3826%" y="101" width="0.1497%" height="15" fill="rgb(240,54,50)"/><text x="59.6326%" y="111.50"></text></g><g><title>specializes (911,616 samples, 0.16%)</title><rect x="59.6385%" y="101" width="0.1553%" height="15" fill="rgb(233,84,52)"/><text x="59.8885%" y="111.50"></text></g><g><title>param_env (600,224 samples, 0.10%)</title><rect x="59.6915%" y="85" width="0.1022%" height="15" fill="rgb(207,117,47)"/><text x="59.9415%" y="95.50"></text></g><g><title>trait_impls_of (704,080 samples, 0.12%)</title><rect x="59.7982%" y="101" width="0.1199%" height="15" fill="rgb(249,43,39)"/><text x="60.0482%" y="111.50"></text></g><g><title>evaluate_obligation (12,089,529 samples, 2.06%)</title><rect x="57.8629%" y="117" width="2.0592%" height="15" fill="rgb(209,38,44)"/><text x="58.1129%" y="127.50">e..</text></g><g><title>generics_of (1,471,469 samples, 0.25%)</title><rect x="59.9863%" y="117" width="0.2506%" height="15" fill="rgb(236,212,23)"/><text x="60.2363%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,143,442 samples, 0.19%)</title><rect x="60.0422%" y="101" width="0.1948%" height="15" fill="rgb(242,79,21)"/><text x="60.2922%" y="111.50"></text></g><g><title>impl_trait_ref (1,068,771 samples, 0.18%)</title><rect x="60.3147%" y="117" width="0.1820%" height="15" fill="rgb(211,96,35)"/><text x="60.5647%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (837,857 samples, 0.14%)</title><rect x="60.3540%" y="101" width="0.1427%" height="15" fill="rgb(253,215,40)"/><text x="60.6040%" y="111.50"></text></g><g><title>item_attrs (690,044 samples, 0.12%)</title><rect x="60.5151%" y="117" width="0.1175%" height="15" fill="rgb(211,81,21)"/><text x="60.7651%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (662,883 samples, 0.11%)</title><rect x="60.5197%" y="101" width="0.1129%" height="15" fill="rgb(208,190,38)"/><text x="60.7697%" y="111.50"></text></g><g><title>evaluate_obligation (1,177,587 samples, 0.20%)</title><rect x="60.8686%" y="101" width="0.2006%" height="15" fill="rgb(235,213,38)"/><text x="61.1186%" y="111.50"></text></g><g><title>method_autoderef_steps (2,368,991 samples, 0.40%)</title><rect x="60.6687%" y="117" width="0.4035%" height="15" fill="rgb(237,122,38)"/><text x="60.9187%" y="127.50"></text></g><g><title>predicates_of (1,389,150 samples, 0.24%)</title><rect x="61.1205%" y="117" width="0.2366%" height="15" fill="rgb(244,218,35)"/><text x="61.3705%" y="127.50"></text></g><g><title>predicates_defined_on (957,353 samples, 0.16%)</title><rect x="61.1940%" y="101" width="0.1631%" height="15" fill="rgb(240,68,47)"/><text x="61.4440%" y="111.50"></text></g><g><title>associated_items (795,416 samples, 0.14%)</title><rect x="78.3752%" y="101" width="0.1355%" height="15" fill="rgb(210,16,53)"/><text x="78.6252%" y="111.50"></text></g><g><title>dropck_outlives (2,717,568 samples, 0.46%)</title><rect x="78.5159%" y="101" width="0.4629%" height="15" fill="rgb(235,124,12)"/><text x="78.7659%" y="111.50"></text></g><g><title>evaluate_obligation (14,098,110 samples, 2.40%)</title><rect x="78.9809%" y="101" width="2.4013%" height="15" fill="rgb(224,169,11)"/><text x="79.2309%" y="111.50">ev..</text></g><g><title>is_copy_raw (1,364,290 samples, 0.23%)</title><rect x="81.4990%" y="101" width="0.2324%" height="15" fill="rgb(250,166,2)"/><text x="81.7490%" y="111.50"></text></g><g><title>evaluate_obligation (949,166 samples, 0.16%)</title><rect x="81.5697%" y="85" width="0.1617%" height="15" fill="rgb(242,216,29)"/><text x="81.8197%" y="95.50"></text></g><g><title>evaluate_obligation (2,191,999 samples, 0.37%)</title><rect x="82.1802%" y="85" width="0.3734%" height="15" fill="rgb(230,116,27)"/><text x="82.4302%" y="95.50"></text></g><g><title>method_autoderef_steps (4,785,770 samples, 0.82%)</title><rect x="81.7422%" y="101" width="0.8151%" height="15" fill="rgb(228,99,48)"/><text x="81.9922%" y="111.50"></text></g><g><title>typeck (123,790,140 samples, 21.08%)</title><rect x="61.5497%" y="117" width="21.0846%" height="15" fill="rgb(253,11,6)"/><text x="61.7997%" y="127.50">typeck</text></g><g><title>item_bodies_checking (228,230,363 samples, 38.87%)</title><rect x="43.7924%" y="165" width="38.8735%" height="15" fill="rgb(247,143,39)"/><text x="44.0424%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (228,226,103 samples, 38.87%)</title><rect x="43.7931%" y="149" width="38.8727%" height="15" fill="rgb(236,97,10)"/><text x="44.0431%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (227,861,391 samples, 38.81%)</title><rect x="43.8553%" y="133" width="38.8106%" height="15" fill="rgb(233,208,19)"/><text x="44.1053%" y="143.50">typeck</text></g><g><title>item_types_checking (4,136,926 samples, 0.70%)</title><rect x="82.6659%" y="165" width="0.7046%" height="15" fill="rgb(216,164,2)"/><text x="82.9159%" y="175.50"></text></g><g><title>check_mod_item_types (4,115,136 samples, 0.70%)</title><rect x="82.6696%" y="149" width="0.7009%" height="15" fill="rgb(220,129,5)"/><text x="82.9196%" y="159.50"></text></g><g><title>fn_sig (1,540,753 samples, 0.26%)</title><rect x="83.5351%" y="133" width="0.2624%" height="15" fill="rgb(242,17,10)"/><text x="83.7851%" y="143.50"></text></g><g><title>named_region_map (1,007,802 samples, 0.17%)</title><rect x="83.8721%" y="117" width="0.1717%" height="15" fill="rgb(242,107,0)"/><text x="84.1221%" y="127.50"></text></g><g><title>resolve_lifetimes (915,121 samples, 0.16%)</title><rect x="83.8879%" y="101" width="0.1559%" height="15" fill="rgb(251,28,31)"/><text x="84.1379%" y="111.50"></text></g><g><title>generics_of (1,492,197 samples, 0.25%)</title><rect x="83.7975%" y="133" width="0.2542%" height="15" fill="rgb(233,223,10)"/><text x="84.0475%" y="143.50"></text></g><g><title>explicit_predicates_of (1,137,811 samples, 0.19%)</title><rect x="84.1429%" y="101" width="0.1938%" height="15" fill="rgb(215,21,27)"/><text x="84.3929%" y="111.50"></text></g><g><title>predicates_of (2,153,063 samples, 0.37%)</title><rect x="84.0658%" y="133" width="0.3667%" height="15" fill="rgb(232,23,21)"/><text x="84.3158%" y="143.50"></text></g><g><title>predicates_defined_on (1,983,752 samples, 0.34%)</title><rect x="84.0946%" y="117" width="0.3379%" height="15" fill="rgb(244,5,23)"/><text x="84.3446%" y="127.50"></text></g><g><title>type_collecting (6,887,107 samples, 1.17%)</title><rect x="83.3714%" y="165" width="1.1731%" height="15" fill="rgb(226,81,46)"/><text x="83.6214%" y="175.50"></text></g><g><title>collect_mod_item_types (6,862,157 samples, 1.17%)</title><rect x="83.3757%" y="149" width="1.1688%" height="15" fill="rgb(247,70,30)"/><text x="83.6257%" y="159.50"></text></g><g><title>type_of (592,994 samples, 0.10%)</title><rect x="84.4435%" y="133" width="0.1010%" height="15" fill="rgb(212,68,19)"/><text x="84.6935%" y="143.50"></text></g><g><title>evaluate_obligation (1,998,500 samples, 0.34%)</title><rect x="85.9007%" y="133" width="0.3404%" height="15" fill="rgb(240,187,13)"/><text x="86.1507%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,393,330 samples, 0.24%)</title><rect x="86.2652%" y="133" width="0.2373%" height="15" fill="rgb(223,113,26)"/><text x="86.5152%" y="143.50"></text></g><g><title>param_env (1,373,085 samples, 0.23%)</title><rect x="86.5026%" y="133" width="0.2339%" height="15" fill="rgb(206,192,2)"/><text x="86.7526%" y="143.50"></text></g><g><title>region_scope_tree (1,438,272 samples, 0.24%)</title><rect x="86.7452%" y="133" width="0.2450%" height="15" fill="rgb(241,108,4)"/><text x="86.9952%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,733,045 samples, 2.34%)</title><rect x="84.6776%" y="149" width="2.3391%" height="15" fill="rgb(247,173,49)"/><text x="84.9276%" y="159.50">c..</text></g><g><title>adt_sized_constraint (655,432 samples, 0.11%)</title><rect x="88.1777%" y="133" width="0.1116%" height="15" fill="rgb(224,114,35)"/><text x="88.4277%" y="143.50"></text></g><g><title>adt_def (652,368 samples, 0.11%)</title><rect x="88.4614%" y="101" width="0.1111%" height="15" fill="rgb(245,159,27)"/><text x="88.7114%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (646,358 samples, 0.11%)</title><rect x="88.4624%" y="85" width="0.1101%" height="15" fill="rgb(245,172,44)"/><text x="88.7124%" y="95.50"></text></g><g><title>adt_sized_constraint (922,870 samples, 0.16%)</title><rect x="88.4556%" y="117" width="0.1572%" height="15" fill="rgb(236,23,11)"/><text x="88.7056%" y="127.50"></text></g><g><title>evaluate_obligation (2,177,199 samples, 0.37%)</title><rect x="88.2894%" y="133" width="0.3708%" height="15" fill="rgb(205,117,38)"/><text x="88.5394%" y="143.50"></text></g><g><title>object_safety_violations (845,220 samples, 0.14%)</title><rect x="88.7764%" y="133" width="0.1440%" height="15" fill="rgb(237,72,25)"/><text x="89.0264%" y="143.50"></text></g><g><title>param_env (1,229,412 samples, 0.21%)</title><rect x="88.9205%" y="133" width="0.2094%" height="15" fill="rgb(244,70,9)"/><text x="89.1705%" y="143.50"></text></g><g><title>check_item_well_formed (13,576,760 samples, 2.31%)</title><rect x="87.0167%" y="149" width="2.3125%" height="15" fill="rgb(217,125,39)"/><text x="87.2667%" y="159.50">c..</text></g><g><title>analysis (523,780,967 samples, 89.21%)</title><rect x="0.1545%" y="197" width="89.2133%" height="15" fill="rgb(235,36,10)"/><text x="0.4045%" y="207.50">analysis</text></g><g><title>type_check_crate (278,206,922 samples, 47.39%)</title><rect x="41.9820%" y="181" width="47.3857%" height="15" fill="rgb(251,123,47)"/><text x="42.2320%" y="191.50">type_check_crate</text></g><g><title>wf_checking (28,293,517 samples, 4.82%)</title><rect x="84.5487%" y="165" width="4.8191%" height="15" fill="rgb(221,13,13)"/><text x="84.7987%" y="175.50">wf_che..</text></g><g><title>metadata_register_crate (1,524,057 samples, 0.26%)</title><rect x="94.2786%" y="149" width="0.2596%" height="15" fill="rgb(238,131,9)"/><text x="94.5286%" y="159.50"></text></g><g><title>metadata_register_crate (597,717 samples, 0.10%)</title><rect x="94.4364%" y="133" width="0.1018%" height="15" fill="rgb(211,50,8)"/><text x="94.6864%" y="143.50"></text></g><g><title>macro_expand_crate (29,561,250 samples, 5.04%)</title><rect x="89.5642%" y="181" width="5.0350%" height="15" fill="rgb(245,182,24)"/><text x="89.8142%" y="191.50">macro_..</text></g><g><title>expand_crate (29,549,480 samples, 5.03%)</title><rect x="89.5662%" y="165" width="5.0330%" height="15" fill="rgb(242,14,37)"/><text x="89.8162%" y="175.50">expand..</text></g><g><title>late_resolve_crate (5,706,354 samples, 0.97%)</title><rect x="94.6479%" y="165" width="0.9719%" height="15" fill="rgb(246,228,12)"/><text x="94.8979%" y="175.50"></text></g><g><title>configure_and_expand (36,588,519 samples, 6.23%)</title><rect x="89.4455%" y="197" width="6.2320%" height="15" fill="rgb(213,55,15)"/><text x="89.6955%" y="207.50">configur..</text></g><g><title>resolve_crate (6,278,901 samples, 1.07%)</title><rect x="94.6080%" y="181" width="1.0695%" height="15" fill="rgb(209,9,3)"/><text x="94.8580%" y="191.50"></text></g><g><title>drop_ast (623,547 samples, 0.11%)</title><rect x="95.6775%" y="197" width="0.1062%" height="15" fill="rgb(230,59,30)"/><text x="95.9275%" y="207.50"></text></g><g><title>early_lint_checks (1,183,093 samples, 0.20%)</title><rect x="95.7870%" y="197" width="0.2015%" height="15" fill="rgb(209,121,21)"/><text x="96.0370%" y="207.50"></text></g><g><title>free_global_ctxt (6,689,824 samples, 1.14%)</title><rect x="95.9885%" y="197" width="1.1394%" height="15" fill="rgb(220,109,13)"/><text x="96.2385%" y="207.50"></text></g><g><title>generate_crate_metadata (3,034,394 samples, 0.52%)</title><rect x="97.1280%" y="197" width="0.5168%" height="15" fill="rgb(232,18,1)"/><text x="97.3780%" y="207.50"></text></g><g><title>hir_lowering (10,837,392 samples, 1.85%)</title><rect x="97.6448%" y="197" width="1.8459%" height="15" fill="rgb(215,41,42)"/><text x="97.8948%" y="207.50">h..</text></g><g><title>self_profile_alloc_query_strings (1,856,251 samples, 0.32%)</title><rect x="99.5897%" y="197" width="0.3162%" height="15" fill="rgb(224,123,36)"/><text x="99.8397%" y="207.50"></text></g><g><title>all (587,110,975 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (587,110,975 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>