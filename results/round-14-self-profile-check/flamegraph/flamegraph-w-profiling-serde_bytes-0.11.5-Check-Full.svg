<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (278,982 samples, 0.20%)</title><rect x="8.4155%" y="149" width="0.2033%" height="15" fill="rgb(227,0,7)"/><text x="8.6655%" y="159.50"></text></g><g><title>is_sized_raw (209,323 samples, 0.15%)</title><rect x="8.6794%" y="149" width="0.1526%" height="15" fill="rgb(217,0,24)"/><text x="8.9294%" y="159.50"></text></g><g><title>evaluate_obligation (143,273 samples, 0.10%)</title><rect x="8.7275%" y="133" width="0.1044%" height="15" fill="rgb(221,193,54)"/><text x="8.9775%" y="143.50"></text></g><g><title>param_env (300,435 samples, 0.22%)</title><rect x="10.0701%" y="117" width="0.2190%" height="15" fill="rgb(248,212,6)"/><text x="10.3201%" y="127.50"></text></g><g><title>item_attrs (171,692 samples, 0.13%)</title><rect x="10.6850%" y="85" width="0.1251%" height="15" fill="rgb(208,68,35)"/><text x="10.9350%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (164,942 samples, 0.12%)</title><rect x="10.6899%" y="69" width="0.1202%" height="15" fill="rgb(232,128,0)"/><text x="10.9399%" y="79.50"></text></g><g><title>codegen_fn_attrs (245,984 samples, 0.18%)</title><rect x="10.6393%" y="101" width="0.1793%" height="15" fill="rgb(207,160,47)"/><text x="10.8893%" y="111.50"></text></g><g><title>is_copy_raw (210,075 samples, 0.15%)</title><rect x="12.6285%" y="85" width="0.1531%" height="15" fill="rgb(228,23,34)"/><text x="12.8785%" y="95.50"></text></g><g><title>evaluate_obligation (191,465 samples, 0.14%)</title><rect x="12.6421%" y="69" width="0.1396%" height="15" fill="rgb(218,30,26)"/><text x="12.8921%" y="79.50"></text></g><g><title>adt_drop_tys (199,992 samples, 0.15%)</title><rect x="12.8850%" y="69" width="0.1458%" height="15" fill="rgb(220,122,19)"/><text x="13.1350%" y="79.50"></text></g><g><title>is_copy_raw (1,419,115 samples, 1.03%)</title><rect x="13.0308%" y="69" width="1.0344%" height="15" fill="rgb(250,228,42)"/><text x="13.2808%" y="79.50"></text></g><g><title>evaluate_obligation (1,193,183 samples, 0.87%)</title><rect x="13.1955%" y="53" width="0.8697%" height="15" fill="rgb(240,193,28)"/><text x="13.4455%" y="63.50"></text></g><g><title>trait_impls_of (141,742 samples, 0.10%)</title><rect x="13.9619%" y="37" width="0.1033%" height="15" fill="rgb(216,20,37)"/><text x="14.2119%" y="47.50"></text></g><g><title>needs_drop_raw (1,792,629 samples, 1.31%)</title><rect x="12.7822%" y="85" width="1.3066%" height="15" fill="rgb(206,188,39)"/><text x="13.0322%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (685,427 samples, 0.50%)</title><rect x="14.3311%" y="69" width="0.4996%" height="15" fill="rgb(217,207,13)"/><text x="14.5811%" y="79.50"></text></g><g><title>resolve_instance (1,255,303 samples, 0.91%)</title><rect x="14.1078%" y="85" width="0.9150%" height="15" fill="rgb(231,73,38)"/><text x="14.3578%" y="95.50"></text></g><g><title>thir_body (712,950 samples, 0.52%)</title><rect x="15.0474%" y="85" width="0.5197%" height="15" fill="rgb(225,20,46)"/><text x="15.2974%" y="95.50"></text></g><g><title>mir_const (8,527,097 samples, 6.22%)</title><rect x="9.4201%" y="133" width="6.2154%" height="15" fill="rgb(210,31,41)"/><text x="9.6701%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,334,969 samples, 5.35%)</title><rect x="10.2891%" y="117" width="5.3465%" height="15" fill="rgb(221,200,47)"/><text x="10.5391%" y="127.50">unsafet..</text></g><g><title>mir_built (6,608,526 samples, 4.82%)</title><rect x="10.8186%" y="101" width="4.8170%" height="15" fill="rgb(226,26,5)"/><text x="11.0686%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (9,388,522 samples, 6.84%)</title><rect x="8.8320%" y="149" width="6.8433%" height="15" fill="rgb(249,33,26)"/><text x="9.0820%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (456,473 samples, 0.33%)</title><rect x="15.6753%" y="149" width="0.3327%" height="15" fill="rgb(235,183,28)"/><text x="15.9253%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (711,170 samples, 0.52%)</title><rect x="16.0080%" y="149" width="0.5184%" height="15" fill="rgb(221,5,38)"/><text x="16.2580%" y="159.50"></text></g><g><title>normalize_projection_ty (319,864 samples, 0.23%)</title><rect x="16.2932%" y="133" width="0.2331%" height="15" fill="rgb(247,18,42)"/><text x="16.5432%" y="143.50"></text></g><g><title>type_op_normalize_predicate (322,755 samples, 0.24%)</title><rect x="16.5264%" y="149" width="0.2353%" height="15" fill="rgb(241,131,45)"/><text x="16.7764%" y="159.50"></text></g><g><title>normalize_projection_ty (156,102 samples, 0.11%)</title><rect x="16.6478%" y="133" width="0.1138%" height="15" fill="rgb(249,31,29)"/><text x="16.8978%" y="143.50"></text></g><g><title>type_op_normalize_ty (696,513 samples, 0.51%)</title><rect x="16.7616%" y="149" width="0.5077%" height="15" fill="rgb(225,111,53)"/><text x="17.0116%" y="159.50"></text></g><g><title>normalize_projection_ty (299,047 samples, 0.22%)</title><rect x="17.0513%" y="133" width="0.2180%" height="15" fill="rgb(238,160,17)"/><text x="17.3013%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,483,857 samples, 2.54%)</title><rect x="17.2693%" y="149" width="2.5394%" height="15" fill="rgb(214,148,48)"/><text x="17.5193%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (26,174,801 samples, 19.08%)</title><rect x="0.7311%" y="181" width="19.0788%" height="15" fill="rgb(232,36,49)"/><text x="0.9811%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,019,361 samples, 18.97%)</title><rect x="0.8444%" y="165" width="18.9655%" height="15" fill="rgb(209,103,24)"/><text x="1.0944%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (201,204 samples, 0.15%)</title><rect x="19.8389%" y="181" width="0.1467%" height="15" fill="rgb(229,88,8)"/><text x="20.0889%" y="191.50"></text></g><g><title>codegen_fn_attrs (236,682 samples, 0.17%)</title><rect x="20.3715%" y="117" width="0.1725%" height="15" fill="rgb(213,181,19)"/><text x="20.6215%" y="127.50"></text></g><g><title>should_inherit_track_caller (371,182 samples, 0.27%)</title><rect x="20.2801%" y="133" width="0.2706%" height="15" fill="rgb(254,191,54)"/><text x="20.5301%" y="143.50"></text></g><g><title>codegen_fn_attrs (566,994 samples, 0.41%)</title><rect x="20.1550%" y="149" width="0.4133%" height="15" fill="rgb(241,83,37)"/><text x="20.4050%" y="159.50"></text></g><g><title>check_mod_attrs (777,928 samples, 0.57%)</title><rect x="20.0014%" y="165" width="0.5670%" height="15" fill="rgb(233,36,39)"/><text x="20.2514%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (427,826 samples, 0.31%)</title><rect x="20.7210%" y="165" width="0.3118%" height="15" fill="rgb(226,3,54)"/><text x="20.9710%" y="175.50"></text></g><g><title>misc_checking_1 (1,513,557 samples, 1.10%)</title><rect x="19.9862%" y="181" width="1.1032%" height="15" fill="rgb(245,192,40)"/><text x="20.2362%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (432,885 samples, 0.32%)</title><rect x="21.0906%" y="165" width="0.3155%" height="15" fill="rgb(238,167,29)"/><text x="21.3406%" y="175.50"></text></g><g><title>check_mod_liveness (355,674 samples, 0.26%)</title><rect x="21.1468%" y="149" width="0.2593%" height="15" fill="rgb(232,182,51)"/><text x="21.3968%" y="159.50"></text></g><g><title>misc_checking_2 (860,640 samples, 0.63%)</title><rect x="21.0894%" y="181" width="0.6273%" height="15" fill="rgb(231,60,39)"/><text x="21.3394%" y="191.50"></text></g><g><title>match_checking (426,145 samples, 0.31%)</title><rect x="21.4061%" y="165" width="0.3106%" height="15" fill="rgb(208,69,12)"/><text x="21.6561%" y="175.50"></text></g><g><title>check_match (392,445 samples, 0.29%)</title><rect x="21.4307%" y="149" width="0.2861%" height="15" fill="rgb(235,93,37)"/><text x="21.6807%" y="159.50"></text></g><g><title>check_private_in_public (276,323 samples, 0.20%)</title><rect x="21.7247%" y="165" width="0.2014%" height="15" fill="rgb(213,116,39)"/><text x="21.9747%" y="175.50"></text></g><g><title>death_checking (878,030 samples, 0.64%)</title><rect x="21.9261%" y="165" width="0.6400%" height="15" fill="rgb(222,207,29)"/><text x="22.1761%" y="175.50"></text></g><g><title>item_attrs (448,016 samples, 0.33%)</title><rect x="22.2395%" y="149" width="0.3266%" height="15" fill="rgb(206,96,30)"/><text x="22.4895%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (446,446 samples, 0.33%)</title><rect x="22.2406%" y="133" width="0.3254%" height="15" fill="rgb(218,138,4)"/><text x="22.4906%" y="143.50"></text></g><g><title>param_env (402,005 samples, 0.29%)</title><rect x="23.0720%" y="133" width="0.2930%" height="15" fill="rgb(250,191,14)"/><text x="23.3220%" y="143.50"></text></g><g><title>predicates_of (200,242 samples, 0.15%)</title><rect x="23.2191%" y="117" width="0.1460%" height="15" fill="rgb(239,60,40)"/><text x="23.4691%" y="127.50"></text></g><g><title>predicates_defined_on (162,401 samples, 0.12%)</title><rect x="23.2467%" y="101" width="0.1184%" height="15" fill="rgb(206,27,48)"/><text x="23.4967%" y="111.50"></text></g><g><title>crate_lints (2,414,277 samples, 1.76%)</title><rect x="22.5672%" y="149" width="1.7598%" height="15" fill="rgb(225,35,8)"/><text x="22.8172%" y="159.50"></text></g><g><title>type_of (1,316,278 samples, 0.96%)</title><rect x="23.3675%" y="133" width="0.9594%" height="15" fill="rgb(250,213,24)"/><text x="23.6175%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (852,973 samples, 0.62%)</title><rect x="23.7052%" y="117" width="0.6217%" height="15" fill="rgb(247,123,22)"/><text x="23.9552%" y="127.50"></text></g><g><title>lint_checking (2,739,320 samples, 2.00%)</title><rect x="22.5661%" y="165" width="1.9967%" height="15" fill="rgb(231,138,38)"/><text x="22.8161%" y="175.50">l..</text></g><g><title>module_lints (323,493 samples, 0.24%)</title><rect x="24.3270%" y="149" width="0.2358%" height="15" fill="rgb(231,145,46)"/><text x="24.5770%" y="159.50"></text></g><g><title>lint_mod (317,543 samples, 0.23%)</title><rect x="24.3313%" y="133" width="0.2315%" height="15" fill="rgb(251,118,11)"/><text x="24.5813%" y="143.50"></text></g><g><title>privacy_access_levels (323,544 samples, 0.24%)</title><rect x="24.5628%" y="165" width="0.2358%" height="15" fill="rgb(217,147,25)"/><text x="24.8128%" y="175.50"></text></g><g><title>privacy_checking_modules (1,321,325 samples, 0.96%)</title><rect x="24.7986%" y="165" width="0.9631%" height="15" fill="rgb(247,81,37)"/><text x="25.0486%" y="175.50"></text></g><g><title>check_mod_privacy (1,316,885 samples, 0.96%)</title><rect x="24.8018%" y="149" width="0.9599%" height="15" fill="rgb(209,12,38)"/><text x="25.0518%" y="159.50"></text></g><g><title>misc_checking_3 (5,563,802 samples, 4.06%)</title><rect x="21.7167%" y="181" width="4.0555%" height="15" fill="rgb(227,1,9)"/><text x="21.9667%" y="191.50">misc..</text></g><g><title>impl_parent (2,720,565 samples, 1.98%)</title><rect x="29.8829%" y="117" width="1.9830%" height="15" fill="rgb(248,47,43)"/><text x="30.1329%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,623,917 samples, 1.18%)</title><rect x="30.6823%" y="101" width="1.1837%" height="15" fill="rgb(221,10,30)"/><text x="30.9323%" y="111.50"></text></g><g><title>impl_trait_ref (6,167,263 samples, 4.50%)</title><rect x="31.8673%" y="117" width="4.4953%" height="15" fill="rgb(210,229,1)"/><text x="32.1173%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,873,609 samples, 3.55%)</title><rect x="32.8103%" y="101" width="3.5524%" height="15" fill="rgb(222,148,37)"/><text x="33.0603%" y="111.50">meta..</text></g><g><title>item_attrs (155,241 samples, 0.11%)</title><rect x="36.3626%" y="117" width="0.1132%" height="15" fill="rgb(234,67,33)"/><text x="36.6126%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,621 samples, 0.10%)</title><rect x="36.3718%" y="101" width="0.1040%" height="15" fill="rgb(247,98,35)"/><text x="36.6218%" y="111.50"></text></g><g><title>explicit_predicates_of (163,191 samples, 0.12%)</title><rect x="36.5586%" y="85" width="0.1189%" height="15" fill="rgb(247,138,52)"/><text x="36.8086%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (148,211 samples, 0.11%)</title><rect x="36.5696%" y="69" width="0.1080%" height="15" fill="rgb(213,79,30)"/><text x="36.8196%" y="79.50"></text></g><g><title>predicates_of (311,865 samples, 0.23%)</title><rect x="36.4762%" y="117" width="0.2273%" height="15" fill="rgb(246,177,23)"/><text x="36.7262%" y="127.50"></text></g><g><title>predicates_defined_on (245,204 samples, 0.18%)</title><rect x="36.5248%" y="101" width="0.1787%" height="15" fill="rgb(230,62,27)"/><text x="36.7748%" y="111.50"></text></g><g><title>trait_impls_of (1,103,476 samples, 0.80%)</title><rect x="36.7058%" y="117" width="0.8043%" height="15" fill="rgb(216,154,8)"/><text x="36.9558%" y="127.50"></text></g><g><title>implementations_of_trait (351,865 samples, 0.26%)</title><rect x="37.2536%" y="101" width="0.2565%" height="15" fill="rgb(244,35,45)"/><text x="37.5036%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (264,453 samples, 0.19%)</title><rect x="37.3173%" y="85" width="0.1928%" height="15" fill="rgb(251,115,12)"/><text x="37.5673%" y="95.50"></text></g><g><title>coherent_trait (16,027,598 samples, 11.68%)</title><rect x="25.8580%" y="149" width="11.6825%" height="15" fill="rgb(240,54,50)"/><text x="26.1080%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (15,989,058 samples, 11.65%)</title><rect x="25.8861%" y="133" width="11.6544%" height="15" fill="rgb(233,84,52)"/><text x="26.1361%" y="143.50">specialization_gr..</text></g><g><title>coherence_checking (16,154,200 samples, 11.77%)</title><rect x="25.8339%" y="165" width="11.7748%" height="15" fill="rgb(207,117,47)"/><text x="26.0839%" y="175.50">coherence_checking</text></g><g><title>associated_item (422,825 samples, 0.31%)</title><rect x="50.8755%" y="101" width="0.3082%" height="15" fill="rgb(249,43,39)"/><text x="51.1255%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (328,134 samples, 0.24%)</title><rect x="50.9446%" y="85" width="0.2392%" height="15" fill="rgb(209,38,44)"/><text x="51.1946%" y="95.50"></text></g><g><title>associated_items (609,106 samples, 0.44%)</title><rect x="50.7624%" y="117" width="0.4440%" height="15" fill="rgb(236,212,23)"/><text x="51.0124%" y="127.50"></text></g><g><title>adt_dtorck_constraint (238,865 samples, 0.17%)</title><rect x="51.6565%" y="101" width="0.1741%" height="15" fill="rgb(242,79,21)"/><text x="51.9065%" y="111.50"></text></g><g><title>dropck_outlives (998,575 samples, 0.73%)</title><rect x="51.2775%" y="117" width="0.7279%" height="15" fill="rgb(211,96,35)"/><text x="51.5275%" y="127.50"></text></g><g><title>normalize_projection_ty (239,793 samples, 0.17%)</title><rect x="51.8306%" y="101" width="0.1748%" height="15" fill="rgb(253,215,40)"/><text x="52.0806%" y="111.50"></text></g><g><title>predicates_of (169,331 samples, 0.12%)</title><rect x="53.1784%" y="101" width="0.1234%" height="15" fill="rgb(211,81,21)"/><text x="53.4284%" y="111.50"></text></g><g><title>evaluate_obligation (1,832,958 samples, 1.34%)</title><rect x="52.0054%" y="117" width="1.3360%" height="15" fill="rgb(208,190,38)"/><text x="52.2554%" y="127.50"></text></g><g><title>evaluate_obligation (274,402 samples, 0.20%)</title><rect x="53.8607%" y="101" width="0.2000%" height="15" fill="rgb(235,213,38)"/><text x="54.1107%" y="111.50"></text></g><g><title>method_autoderef_steps (576,994 samples, 0.42%)</title><rect x="53.6509%" y="117" width="0.4206%" height="15" fill="rgb(237,122,38)"/><text x="53.9009%" y="127.50"></text></g><g><title>predicates_of (234,816 samples, 0.17%)</title><rect x="54.1059%" y="117" width="0.1712%" height="15" fill="rgb(244,218,35)"/><text x="54.3559%" y="127.50"></text></g><g><title>predicates_defined_on (161,833 samples, 0.12%)</title><rect x="54.1591%" y="101" width="0.1180%" height="15" fill="rgb(240,68,47)"/><text x="54.4091%" y="111.50"></text></g><g><title>item_bodies_checking (22,954,826 samples, 16.73%)</title><rect x="37.6500%" y="165" width="16.7318%" height="15" fill="rgb(210,16,53)"/><text x="37.9000%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,950,876 samples, 16.73%)</title><rect x="37.6529%" y="149" width="16.7289%" height="15" fill="rgb(235,124,12)"/><text x="37.9029%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (22,838,274 samples, 16.65%)</title><rect x="37.7350%" y="133" width="16.6468%" height="15" fill="rgb(224,169,11)"/><text x="37.9850%" y="143.50">typeck</text></g><g><title>impl_trait_ref (143,203 samples, 0.10%)</title><rect x="57.0872%" y="85" width="0.1044%" height="15" fill="rgb(250,166,2)"/><text x="57.3372%" y="95.50"></text></g><g><title>adt_destructor (322,493 samples, 0.24%)</title><rect x="56.9838%" y="133" width="0.2351%" height="15" fill="rgb(242,216,29)"/><text x="57.2338%" y="143.50"></text></g><g><title>coherent_trait (315,993 samples, 0.23%)</title><rect x="56.9885%" y="117" width="0.2303%" height="15" fill="rgb(230,116,27)"/><text x="57.2385%" y="127.50"></text></g><g><title>specialization_graph_of (313,513 samples, 0.23%)</title><rect x="56.9903%" y="101" width="0.2285%" height="15" fill="rgb(228,99,48)"/><text x="57.2403%" y="111.50"></text></g><g><title>impl_item_implementor_ids (338,515 samples, 0.25%)</title><rect x="57.4553%" y="133" width="0.2467%" height="15" fill="rgb(253,11,6)"/><text x="57.7053%" y="143.50"></text></g><g><title>associated_items (294,294 samples, 0.21%)</title><rect x="57.4876%" y="117" width="0.2145%" height="15" fill="rgb(247,143,39)"/><text x="57.7376%" y="127.50"></text></g><g><title>item_types_checking (4,695,842 samples, 3.42%)</title><rect x="54.3818%" y="165" width="3.4228%" height="15" fill="rgb(236,97,10)"/><text x="54.6318%" y="175.50">ite..</text></g><g><title>check_mod_item_types (4,689,742 samples, 3.42%)</title><rect x="54.3862%" y="149" width="3.4184%" height="15" fill="rgb(233,208,19)"/><text x="54.6362%" y="159.50">che..</text></g><g><title>fn_sig (967,792 samples, 0.71%)</title><rect x="58.0741%" y="133" width="0.7054%" height="15" fill="rgb(216,164,2)"/><text x="58.3241%" y="143.50"></text></g><g><title>type_param_predicates (275,603 samples, 0.20%)</title><rect x="58.5786%" y="117" width="0.2009%" height="15" fill="rgb(220,129,5)"/><text x="58.8286%" y="127.50"></text></g><g><title>is_late_bound_map (468,235 samples, 0.34%)</title><rect x="58.9199%" y="117" width="0.3413%" height="15" fill="rgb(242,17,10)"/><text x="59.1699%" y="127.50"></text></g><g><title>resolve_lifetimes (445,175 samples, 0.32%)</title><rect x="58.9367%" y="101" width="0.3245%" height="15" fill="rgb(242,107,0)"/><text x="59.1867%" y="111.50"></text></g><g><title>named_region_map (239,663 samples, 0.17%)</title><rect x="59.2612%" y="117" width="0.1747%" height="15" fill="rgb(251,28,31)"/><text x="59.5112%" y="127.50"></text></g><g><title>resolve_lifetimes (210,943 samples, 0.15%)</title><rect x="59.2821%" y="101" width="0.1538%" height="15" fill="rgb(233,223,10)"/><text x="59.5321%" y="111.50"></text></g><g><title>generics_of (921,240 samples, 0.67%)</title><rect x="58.7795%" y="133" width="0.6715%" height="15" fill="rgb(215,21,27)"/><text x="59.0295%" y="143.50"></text></g><g><title>explicit_predicates_of (456,683 samples, 0.33%)</title><rect x="59.6660%" y="101" width="0.3329%" height="15" fill="rgb(232,23,21)"/><text x="59.9160%" y="111.50"></text></g><g><title>predicates_of (761,026 samples, 0.55%)</title><rect x="59.5237%" y="133" width="0.5547%" height="15" fill="rgb(244,5,23)"/><text x="59.7737%" y="143.50"></text></g><g><title>predicates_defined_on (684,145 samples, 0.50%)</title><rect x="59.5797%" y="117" width="0.4987%" height="15" fill="rgb(226,81,46)"/><text x="59.8297%" y="127.50"></text></g><g><title>type_collecting (3,300,127 samples, 2.41%)</title><rect x="57.8079%" y="165" width="2.4055%" height="15" fill="rgb(247,70,30)"/><text x="58.0579%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (3,289,877 samples, 2.40%)</title><rect x="57.8154%" y="149" width="2.3980%" height="15" fill="rgb(212,68,19)"/><text x="58.0654%" y="159.50">co..</text></g><g><title>type_of (185,164 samples, 0.13%)</title><rect x="60.0784%" y="133" width="0.1350%" height="15" fill="rgb(240,187,13)"/><text x="60.3284%" y="143.50"></text></g><g><title>evaluate_obligation (770,848 samples, 0.56%)</title><rect x="63.6601%" y="133" width="0.5619%" height="15" fill="rgb(223,113,26)"/><text x="63.9101%" y="143.50"></text></g><g><title>implied_outlives_bounds (638,877 samples, 0.47%)</title><rect x="64.2765%" y="133" width="0.4657%" height="15" fill="rgb(206,192,2)"/><text x="64.5265%" y="143.50"></text></g><g><title>param_env (584,253 samples, 0.43%)</title><rect x="64.7774%" y="133" width="0.4259%" height="15" fill="rgb(241,108,4)"/><text x="65.0274%" y="143.50"></text></g><g><title>region_scope_tree (371,237 samples, 0.27%)</title><rect x="65.2919%" y="133" width="0.2706%" height="15" fill="rgb(247,173,49)"/><text x="65.5419%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,133,182 samples, 5.20%)</title><rect x="60.4398%" y="149" width="5.1994%" height="15" fill="rgb(224,114,35)"/><text x="60.6898%" y="159.50">check_..</text></g><g><title>evaluate_obligation (488,855 samples, 0.36%)</title><rect x="67.3457%" y="133" width="0.3563%" height="15" fill="rgb(245,159,27)"/><text x="67.5957%" y="143.50"></text></g><g><title>implied_outlives_bounds (187,231 samples, 0.14%)</title><rect x="67.7330%" y="133" width="0.1365%" height="15" fill="rgb(245,172,44)"/><text x="67.9830%" y="143.50"></text></g><g><title>param_env (395,493 samples, 0.29%)</title><rect x="67.8695%" y="133" width="0.2883%" height="15" fill="rgb(236,23,11)"/><text x="68.1195%" y="143.50"></text></g><g><title>check_item_well_formed (3,749,862 samples, 2.73%)</title><rect x="65.6391%" y="149" width="2.7333%" height="15" fill="rgb(205,117,38)"/><text x="65.8891%" y="159.50">ch..</text></g><g><title>analysis (93,265,760 samples, 67.98%)</title><rect x="0.5282%" y="197" width="67.9814%" height="15" fill="rgb(237,72,25)"/><text x="0.7782%" y="207.50">analysis</text></g><g><title>type_check_crate (58,632,814 samples, 42.74%)</title><rect x="25.7722%" y="181" width="42.7374%" height="15" fill="rgb(244,70,9)"/><text x="26.0222%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,376,277 samples, 8.29%)</title><rect x="60.2174%" y="165" width="8.2922%" height="15" fill="rgb(217,125,39)"/><text x="60.4674%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (188,223 samples, 0.14%)</title><rect x="68.3724%" y="149" width="0.1372%" height="15" fill="rgb(235,36,10)"/><text x="68.6224%" y="159.50"></text></g><g><title>codegen_crate (390,314 samples, 0.28%)</title><rect x="68.5178%" y="197" width="0.2845%" height="15" fill="rgb(251,123,47)"/><text x="68.7678%" y="207.50"></text></g><g><title>AST_validation (411,695 samples, 0.30%)</title><rect x="68.9646%" y="181" width="0.3001%" height="15" fill="rgb(221,13,13)"/><text x="69.2146%" y="191.50"></text></g><g><title>complete_gated_feature_checking (140,482 samples, 0.10%)</title><rect x="69.2647%" y="181" width="0.1024%" height="15" fill="rgb(238,131,9)"/><text x="69.5147%" y="191.50"></text></g><g><title>metadata_register_crate (2,720,961 samples, 1.98%)</title><rect x="85.2961%" y="149" width="1.9833%" height="15" fill="rgb(211,50,8)"/><text x="85.5461%" y="159.50">m..</text></g><g><title>metadata_register_crate (984,201 samples, 0.72%)</title><rect x="86.5620%" y="133" width="0.7174%" height="15" fill="rgb(245,182,24)"/><text x="86.8120%" y="143.50"></text></g><g><title>macro_expand_crate (24,839,787 samples, 18.11%)</title><rect x="69.4358%" y="181" width="18.1057%" height="15" fill="rgb(242,14,37)"/><text x="69.6858%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (24,822,587 samples, 18.09%)</title><rect x="69.4484%" y="165" width="18.0932%" height="15" fill="rgb(246,228,12)"/><text x="69.6984%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (359,614 samples, 0.26%)</title><rect x="87.2794%" y="149" width="0.2621%" height="15" fill="rgb(213,55,15)"/><text x="87.5294%" y="159.50"></text></g><g><title>finalize_imports (228,083 samples, 0.17%)</title><rect x="87.6361%" y="165" width="0.1662%" height="15" fill="rgb(209,9,3)"/><text x="87.8861%" y="175.50"></text></g><g><title>finalize_macro_resolutions (138,861 samples, 0.10%)</title><rect x="87.8023%" y="165" width="0.1012%" height="15" fill="rgb(230,59,30)"/><text x="88.0523%" y="175.50"></text></g><g><title>late_resolve_crate (3,321,338 samples, 2.42%)</title><rect x="87.9036%" y="165" width="2.4209%" height="15" fill="rgb(209,121,21)"/><text x="88.1536%" y="175.50">la..</text></g><g><title>configure_and_expand (29,752,143 samples, 21.69%)</title><rect x="68.8023%" y="197" width="21.6863%" height="15" fill="rgb(220,109,13)"/><text x="69.0523%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,923,274 samples, 2.86%)</title><rect x="87.6289%" y="181" width="2.8597%" height="15" fill="rgb(232,18,1)"/><text x="87.8789%" y="191.50">re..</text></g><g><title>drop_ast (164,642 samples, 0.12%)</title><rect x="90.4886%" y="197" width="0.1200%" height="15" fill="rgb(215,41,42)"/><text x="90.7386%" y="207.50"></text></g><g><title>early_lint_checks (282,643 samples, 0.21%)</title><rect x="90.6204%" y="197" width="0.2060%" height="15" fill="rgb(224,123,36)"/><text x="90.8704%" y="207.50"></text></g><g><title>free_global_ctxt (3,561,240 samples, 2.60%)</title><rect x="90.8264%" y="197" width="2.5958%" height="15" fill="rgb(240,125,3)"/><text x="91.0764%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,405,526 samples, 1.02%)</title><rect x="93.4222%" y="197" width="1.0245%" height="15" fill="rgb(205,98,50)"/><text x="93.6722%" y="207.50"></text></g><g><title>hir_lowering (5,210,267 samples, 3.80%)</title><rect x="94.4467%" y="197" width="3.7978%" height="15" fill="rgb(205,185,37)"/><text x="94.6967%" y="207.50">hir_..</text></g><g><title>parse_crate (706,478 samples, 0.51%)</title><rect x="98.2835%" y="197" width="0.5150%" height="15" fill="rgb(238,207,15)"/><text x="98.5335%" y="207.50"></text></g><g><title>prepare_outputs (331,123 samples, 0.24%)</title><rect x="98.8052%" y="197" width="0.2414%" height="15" fill="rgb(213,199,42)"/><text x="99.0552%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (886,560 samples, 0.65%)</title><rect x="99.0465%" y="197" width="0.6462%" height="15" fill="rgb(235,201,11)"/><text x="99.2965%" y="207.50"></text></g><g><title>all (137,193,121 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (137,193,121 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (326,294 samples, 0.24%)</title><rect x="99.7622%" y="197" width="0.2378%" height="15" fill="rgb(243,32,47)"/><text x="100.0122%" y="207.50"></text></g></svg></svg>