<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (381,983 samples, 0.26%)</title><rect x="9.0482%" y="213" width="0.2620%" height="15" fill="rgb(227,0,7)"/><text x="9.2982%" y="223.50"></text></g><g><title>item_attrs (343,094 samples, 0.24%)</title><rect x="9.6802%" y="181" width="0.2353%" height="15" fill="rgb(217,0,24)"/><text x="9.9302%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (331,414 samples, 0.23%)</title><rect x="9.6882%" y="165" width="0.2273%" height="15" fill="rgb(221,193,54)"/><text x="9.9382%" y="175.50"></text></g><g><title>codegen_fn_attrs (493,036 samples, 0.34%)</title><rect x="9.5933%" y="197" width="0.3381%" height="15" fill="rgb(248,212,6)"/><text x="9.8433%" y="207.50"></text></g><g><title>is_copy_raw (927,797 samples, 0.64%)</title><rect x="11.6932%" y="165" width="0.6363%" height="15" fill="rgb(208,68,35)"/><text x="11.9432%" y="175.50"></text></g><g><title>evaluate_obligation (806,757 samples, 0.55%)</title><rect x="11.7762%" y="149" width="0.5533%" height="15" fill="rgb(232,128,0)"/><text x="12.0262%" y="159.50"></text></g><g><title>needs_drop_raw (1,190,050 samples, 0.82%)</title><rect x="11.5303%" y="181" width="0.8162%" height="15" fill="rgb(207,160,47)"/><text x="11.7803%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (418,404 samples, 0.29%)</title><rect x="12.5223%" y="165" width="0.2870%" height="15" fill="rgb(228,23,34)"/><text x="12.7723%" y="175.50"></text></g><g><title>impl_parent (210,172 samples, 0.14%)</title><rect x="13.0980%" y="149" width="0.1441%" height="15" fill="rgb(218,30,26)"/><text x="13.3480%" y="159.50"></text></g><g><title>specialization_graph_of (1,062,702 samples, 0.73%)</title><rect x="12.8662%" y="165" width="0.7288%" height="15" fill="rgb(220,122,19)"/><text x="13.1162%" y="175.50"></text></g><g><title>impl_trait_ref (514,534 samples, 0.35%)</title><rect x="13.2422%" y="149" width="0.3529%" height="15" fill="rgb(250,228,42)"/><text x="13.4922%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (443,903 samples, 0.30%)</title><rect x="13.2906%" y="133" width="0.3044%" height="15" fill="rgb(240,193,28)"/><text x="13.5406%" y="143.50"></text></g><g><title>resolve_instance (1,934,359 samples, 1.33%)</title><rect x="12.3464%" y="181" width="1.3266%" height="15" fill="rgb(216,20,37)"/><text x="12.5964%" y="191.50"></text></g><g><title>thir_body (936,341 samples, 0.64%)</title><rect x="13.6911%" y="181" width="0.6422%" height="15" fill="rgb(206,188,39)"/><text x="13.9411%" y="191.50"></text></g><g><title>mir_const (8,436,429 samples, 5.79%)</title><rect x="8.5644%" y="229" width="5.7859%" height="15" fill="rgb(217,207,13)"/><text x="8.8144%" y="239.50">mir_con..</text></g><g><title>unsafety_check_result (7,349,121 samples, 5.04%)</title><rect x="9.3102%" y="213" width="5.0402%" height="15" fill="rgb(231,73,38)"/><text x="9.5602%" y="223.50">unsafe..</text></g><g><title>mir_built (6,443,190 samples, 4.42%)</title><rect x="9.9315%" y="197" width="4.4189%" height="15" fill="rgb(225,20,46)"/><text x="10.1815%" y="207.50">mir_b..</text></g><g><title>is_freeze_raw (183,553 samples, 0.13%)</title><rect x="14.5422%" y="213" width="0.1259%" height="15" fill="rgb(210,31,41)"/><text x="14.7922%" y="223.50"></text></g><g><title>evaluate_obligation (177,252 samples, 0.12%)</title><rect x="14.5465%" y="197" width="0.1216%" height="15" fill="rgb(221,200,47)"/><text x="14.7965%" y="207.50"></text></g><g><title>mir_const (408,925 samples, 0.28%)</title><rect x="14.6733%" y="213" width="0.2805%" height="15" fill="rgb(226,26,5)"/><text x="14.9233%" y="223.50"></text></g><g><title>unsafety_check_result (301,922 samples, 0.21%)</title><rect x="14.7467%" y="197" width="0.2071%" height="15" fill="rgb(249,33,26)"/><text x="14.9967%" y="207.50"></text></g><g><title>mir_built (267,942 samples, 0.18%)</title><rect x="14.7700%" y="181" width="0.1838%" height="15" fill="rgb(235,183,28)"/><text x="15.0200%" y="191.50"></text></g><g><title>mir_promoted (10,125,644 samples, 6.94%)</title><rect x="8.0708%" y="245" width="6.9445%" height="15" fill="rgb(221,5,38)"/><text x="8.3208%" y="255.50">mir_promo..</text></g><g><title>mir_const_qualif (969,502 samples, 0.66%)</title><rect x="14.3504%" y="229" width="0.6649%" height="15" fill="rgb(247,18,42)"/><text x="14.6004%" y="239.50"></text></g><g><title>type_op_ascribe_user_type (751,406 samples, 0.52%)</title><rect x="15.0155%" y="245" width="0.5153%" height="15" fill="rgb(241,131,45)"/><text x="15.2655%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (623,986 samples, 0.43%)</title><rect x="15.5309%" y="245" width="0.4279%" height="15" fill="rgb(249,31,29)"/><text x="15.7809%" y="255.50"></text></g><g><title>normalize_projection_ty (378,763 samples, 0.26%)</title><rect x="15.6990%" y="229" width="0.2598%" height="15" fill="rgb(225,111,53)"/><text x="15.9490%" y="239.50"></text></g><g><title>type_op_prove_predicate (2,232,198 samples, 1.53%)</title><rect x="16.0535%" y="245" width="1.5309%" height="15" fill="rgb(238,160,17)"/><text x="16.3035%" y="255.50"></text></g><g><title>MIR_borrow_checking (24,793,736 samples, 17.00%)</title><rect x="0.5846%" y="277" width="17.0043%" height="15" fill="rgb(214,148,48)"/><text x="0.8346%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,674,885 samples, 16.92%)</title><rect x="0.6661%" y="261" width="16.9227%" height="15" fill="rgb(232,36,49)"/><text x="0.9161%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (248,573 samples, 0.17%)</title><rect x="17.5888%" y="277" width="0.1705%" height="15" fill="rgb(209,103,24)"/><text x="17.8388%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (191,932 samples, 0.13%)</title><rect x="17.6277%" y="261" width="0.1316%" height="15" fill="rgb(229,88,8)"/><text x="17.8777%" y="271.50"></text></g><g><title>hir_module_items (159,612 samples, 0.11%)</title><rect x="17.7593%" y="277" width="0.1095%" height="15" fill="rgb(213,181,19)"/><text x="18.0093%" y="287.50"></text></g><g><title>codegen_fn_attrs (146,410 samples, 0.10%)</title><rect x="18.1533%" y="213" width="0.1004%" height="15" fill="rgb(254,191,54)"/><text x="18.4033%" y="223.50"></text></g><g><title>should_inherit_track_caller (236,420 samples, 0.16%)</title><rect x="18.0956%" y="229" width="0.1621%" height="15" fill="rgb(241,83,37)"/><text x="18.3456%" y="239.50"></text></g><g><title>codegen_fn_attrs (369,062 samples, 0.25%)</title><rect x="18.0147%" y="245" width="0.2531%" height="15" fill="rgb(233,36,39)"/><text x="18.2647%" y="255.50"></text></g><g><title>check_mod_attrs (561,137 samples, 0.38%)</title><rect x="17.8830%" y="261" width="0.3848%" height="15" fill="rgb(226,3,54)"/><text x="18.1330%" y="271.50"></text></g><g><title>lookup_deprecation_entry (162,792 samples, 0.11%)</title><rect x="18.5148%" y="245" width="0.1116%" height="15" fill="rgb(245,192,40)"/><text x="18.7648%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (459,106 samples, 0.31%)</title><rect x="18.3909%" y="261" width="0.3149%" height="15" fill="rgb(238,167,29)"/><text x="18.6409%" y="271.50"></text></g><g><title>misc_checking_1 (1,274,814 samples, 0.87%)</title><rect x="17.8691%" y="277" width="0.8743%" height="15" fill="rgb(232,182,51)"/><text x="18.1191%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (474,325 samples, 0.33%)</title><rect x="18.7445%" y="261" width="0.3253%" height="15" fill="rgb(231,60,39)"/><text x="18.9945%" y="271.50"></text></g><g><title>check_mod_liveness (352,894 samples, 0.24%)</title><rect x="18.8278%" y="245" width="0.2420%" height="15" fill="rgb(208,69,12)"/><text x="19.0778%" y="255.50"></text></g><g><title>mir_borrowck (156,090 samples, 0.11%)</title><rect x="19.4464%" y="149" width="0.1071%" height="15" fill="rgb(235,93,37)"/><text x="19.6964%" y="159.50"></text></g><g><title>eval_to_const_value_raw (285,193 samples, 0.20%)</title><rect x="19.3586%" y="229" width="0.1956%" height="15" fill="rgb(213,116,39)"/><text x="19.6086%" y="239.50"></text></g><g><title>eval_to_const_value_raw (282,853 samples, 0.19%)</title><rect x="19.3602%" y="213" width="0.1940%" height="15" fill="rgb(222,207,29)"/><text x="19.6102%" y="223.50"></text></g><g><title>eval_to_allocation_raw (277,273 samples, 0.19%)</title><rect x="19.3640%" y="197" width="0.1902%" height="15" fill="rgb(206,96,30)"/><text x="19.6140%" y="207.50"></text></g><g><title>mir_for_ctfe (236,592 samples, 0.16%)</title><rect x="19.3919%" y="181" width="0.1623%" height="15" fill="rgb(218,138,4)"/><text x="19.6419%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (217,242 samples, 0.15%)</title><rect x="19.4052%" y="165" width="0.1490%" height="15" fill="rgb(250,191,14)"/><text x="19.6552%" y="175.50"></text></g><g><title>misc_checking_2 (1,323,134 samples, 0.91%)</title><rect x="18.7434%" y="277" width="0.9074%" height="15" fill="rgb(239,60,40)"/><text x="18.9934%" y="287.50"></text></g><g><title>match_checking (847,089 samples, 0.58%)</title><rect x="19.0699%" y="261" width="0.5810%" height="15" fill="rgb(206,27,48)"/><text x="19.3199%" y="271.50"></text></g><g><title>check_match (812,629 samples, 0.56%)</title><rect x="19.0935%" y="245" width="0.5573%" height="15" fill="rgb(225,35,8)"/><text x="19.3435%" y="255.50"></text></g><g><title>check_private_in_public (202,452 samples, 0.14%)</title><rect x="19.6557%" y="261" width="0.1388%" height="15" fill="rgb(250,213,24)"/><text x="19.9057%" y="271.50"></text></g><g><title>death_checking (515,336 samples, 0.35%)</title><rect x="19.7945%" y="261" width="0.3534%" height="15" fill="rgb(247,123,22)"/><text x="20.0445%" y="271.50"></text></g><g><title>eval_to_const_value_raw (291,183 samples, 0.20%)</title><rect x="20.9292%" y="117" width="0.1997%" height="15" fill="rgb(231,138,38)"/><text x="21.1792%" y="127.50"></text></g><g><title>eval_to_const_value_raw (284,943 samples, 0.20%)</title><rect x="20.9334%" y="101" width="0.1954%" height="15" fill="rgb(231,145,46)"/><text x="21.1834%" y="111.50"></text></g><g><title>eval_to_allocation_raw (282,903 samples, 0.19%)</title><rect x="20.9348%" y="85" width="0.1940%" height="15" fill="rgb(251,118,11)"/><text x="21.1848%" y="95.50"></text></g><g><title>eval_to_const_value_raw (570,615 samples, 0.39%)</title><rect x="20.7405%" y="181" width="0.3913%" height="15" fill="rgb(217,147,25)"/><text x="20.9905%" y="191.50"></text></g><g><title>eval_to_const_value_raw (568,125 samples, 0.39%)</title><rect x="20.7422%" y="165" width="0.3896%" height="15" fill="rgb(247,81,37)"/><text x="20.9922%" y="175.50"></text></g><g><title>eval_to_allocation_raw (563,145 samples, 0.39%)</title><rect x="20.7457%" y="149" width="0.3862%" height="15" fill="rgb(209,12,38)"/><text x="20.9957%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (298,833 samples, 0.20%)</title><rect x="20.9269%" y="133" width="0.2049%" height="15" fill="rgb(227,1,9)"/><text x="21.1769%" y="143.50"></text></g><g><title>eval_to_allocation_raw (680,119 samples, 0.47%)</title><rect x="20.6666%" y="229" width="0.4664%" height="15" fill="rgb(248,47,43)"/><text x="20.9166%" y="239.50"></text></g><g><title>eval_to_allocation_raw (678,359 samples, 0.47%)</title><rect x="20.6678%" y="213" width="0.4652%" height="15" fill="rgb(221,10,30)"/><text x="20.9178%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (586,975 samples, 0.40%)</title><rect x="20.7305%" y="197" width="0.4026%" height="15" fill="rgb(210,229,1)"/><text x="20.9805%" y="207.50"></text></g><g><title>eval_to_const_value_raw (148,662 samples, 0.10%)</title><rect x="21.1331%" y="229" width="0.1020%" height="15" fill="rgb(222,148,37)"/><text x="21.3831%" y="239.50"></text></g><g><title>param_env (307,332 samples, 0.21%)</title><rect x="21.2350%" y="229" width="0.2108%" height="15" fill="rgb(234,67,33)"/><text x="21.4850%" y="239.50"></text></g><g><title>crate_lints (3,080,094 samples, 2.11%)</title><rect x="20.1489%" y="245" width="2.1124%" height="15" fill="rgb(247,98,35)"/><text x="20.3989%" y="255.50">c..</text></g><g><title>type_of (1,181,272 samples, 0.81%)</title><rect x="21.4511%" y="229" width="0.8102%" height="15" fill="rgb(247,138,52)"/><text x="21.7011%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (937,832 samples, 0.64%)</title><rect x="21.6181%" y="213" width="0.6432%" height="15" fill="rgb(213,79,30)"/><text x="21.8681%" y="223.50"></text></g><g><title>lint_checking (3,516,929 samples, 2.41%)</title><rect x="20.1480%" y="261" width="2.4120%" height="15" fill="rgb(246,177,23)"/><text x="20.3980%" y="271.50">li..</text></g><g><title>module_lints (435,545 samples, 0.30%)</title><rect x="22.2613%" y="245" width="0.2987%" height="15" fill="rgb(230,62,27)"/><text x="22.5113%" y="255.50"></text></g><g><title>lint_mod (430,055 samples, 0.29%)</title><rect x="22.2650%" y="229" width="0.2949%" height="15" fill="rgb(216,154,8)"/><text x="22.5150%" y="239.50"></text></g><g><title>privacy_access_levels (225,423 samples, 0.15%)</title><rect x="22.5600%" y="261" width="0.1546%" height="15" fill="rgb(244,35,45)"/><text x="22.8100%" y="271.50"></text></g><g><title>privacy_checking_modules (789,409 samples, 0.54%)</title><rect x="22.7146%" y="261" width="0.5414%" height="15" fill="rgb(251,115,12)"/><text x="22.9646%" y="271.50"></text></g><g><title>check_mod_privacy (785,479 samples, 0.54%)</title><rect x="22.7173%" y="245" width="0.5387%" height="15" fill="rgb(240,54,50)"/><text x="22.9673%" y="255.50"></text></g><g><title>misc_checking_3 (5,267,639 samples, 3.61%)</title><rect x="19.6508%" y="277" width="3.6127%" height="15" fill="rgb(233,84,52)"/><text x="19.9008%" y="287.50">misc..</text></g><g><title>impl_parent (3,009,193 samples, 2.06%)</title><rect x="27.0117%" y="213" width="2.0638%" height="15" fill="rgb(207,117,47)"/><text x="27.2617%" y="223.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,794,623 samples, 1.23%)</title><rect x="27.8447%" y="197" width="1.2308%" height="15" fill="rgb(249,43,39)"/><text x="28.0947%" y="207.50"></text></g><g><title>impl_trait_ref (6,501,181 samples, 4.46%)</title><rect x="29.0755%" y="213" width="4.4587%" height="15" fill="rgb(209,38,44)"/><text x="29.3255%" y="223.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,281,512 samples, 3.62%)</title><rect x="29.9120%" y="197" width="3.6222%" height="15" fill="rgb(236,212,23)"/><text x="30.1620%" y="207.50">meta..</text></g><g><title>trait_impls_of (1,265,184 samples, 0.87%)</title><rect x="33.5466%" y="213" width="0.8677%" height="15" fill="rgb(242,79,21)"/><text x="33.7966%" y="223.50"></text></g><g><title>implementations_of_trait (407,334 samples, 0.28%)</title><rect x="34.1349%" y="197" width="0.2794%" height="15" fill="rgb(211,96,35)"/><text x="34.3849%" y="207.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (286,714 samples, 0.20%)</title><rect x="34.2176%" y="181" width="0.1966%" height="15" fill="rgb(253,215,40)"/><text x="34.4676%" y="191.50"></text></g><g><title>coherent_trait (16,155,880 samples, 11.08%)</title><rect x="23.3349%" y="245" width="11.0802%" height="15" fill="rgb(211,81,21)"/><text x="23.5849%" y="255.50">coherent_trait</text></g><g><title>specialization_graph_of (16,125,040 samples, 11.06%)</title><rect x="23.3561%" y="229" width="11.0590%" height="15" fill="rgb(208,190,38)"/><text x="23.6061%" y="239.50">specialization_g..</text></g><g><title>coherence_checking (16,309,602 samples, 11.19%)</title><rect x="23.3160%" y="261" width="11.1856%" height="15" fill="rgb(235,213,38)"/><text x="23.5660%" y="271.50">coherence_checki..</text></g><g><title>associated_item (700,631 samples, 0.48%)</title><rect x="45.1882%" y="197" width="0.4805%" height="15" fill="rgb(237,122,38)"/><text x="45.4382%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (549,640 samples, 0.38%)</title><rect x="45.2918%" y="181" width="0.3770%" height="15" fill="rgb(244,218,35)"/><text x="45.5418%" y="191.50"></text></g><g><title>associated_items (1,013,506 samples, 0.70%)</title><rect x="45.0061%" y="213" width="0.6951%" height="15" fill="rgb(240,68,47)"/><text x="45.2561%" y="223.50"></text></g><g><title>adt_dtorck_constraint (215,833 samples, 0.15%)</title><rect x="45.8939%" y="197" width="0.1480%" height="15" fill="rgb(210,16,53)"/><text x="46.1439%" y="207.50"></text></g><g><title>dropck_outlives (458,714 samples, 0.31%)</title><rect x="45.7579%" y="213" width="0.3146%" height="15" fill="rgb(235,124,12)"/><text x="46.0079%" y="223.50"></text></g><g><title>mir_for_ctfe (148,112 samples, 0.10%)</title><rect x="46.1279%" y="165" width="0.1016%" height="15" fill="rgb(224,169,11)"/><text x="46.3779%" y="175.50"></text></g><g><title>eval_to_const_value_raw (229,242 samples, 0.16%)</title><rect x="46.0725%" y="213" width="0.1572%" height="15" fill="rgb(250,166,2)"/><text x="46.3225%" y="223.50"></text></g><g><title>eval_to_const_value_raw (227,892 samples, 0.16%)</title><rect x="46.0734%" y="197" width="0.1563%" height="15" fill="rgb(242,216,29)"/><text x="46.3234%" y="207.50"></text></g><g><title>eval_to_allocation_raw (225,072 samples, 0.15%)</title><rect x="46.0753%" y="181" width="0.1544%" height="15" fill="rgb(230,116,27)"/><text x="46.3253%" y="191.50"></text></g><g><title>predicates_of (459,596 samples, 0.32%)</title><rect x="48.0725%" y="197" width="0.3152%" height="15" fill="rgb(228,99,48)"/><text x="48.3225%" y="207.50"></text></g><g><title>specializes (445,897 samples, 0.31%)</title><rect x="48.3877%" y="197" width="0.3058%" height="15" fill="rgb(253,11,6)"/><text x="48.6377%" y="207.50"></text></g><g><title>param_env (228,615 samples, 0.16%)</title><rect x="48.5367%" y="181" width="0.1568%" height="15" fill="rgb(247,143,39)"/><text x="48.7867%" y="191.50"></text></g><g><title>trait_impls_of (416,563 samples, 0.29%)</title><rect x="48.7044%" y="197" width="0.2857%" height="15" fill="rgb(236,97,10)"/><text x="48.9544%" y="207.50"></text></g><g><title>implementations_of_trait (193,652 samples, 0.13%)</title><rect x="48.8573%" y="181" width="0.1328%" height="15" fill="rgb(233,208,19)"/><text x="49.1073%" y="191.50"></text></g><g><title>evaluate_obligation (4,032,728 samples, 2.77%)</title><rect x="46.2297%" y="213" width="2.7658%" height="15" fill="rgb(216,164,2)"/><text x="46.4797%" y="223.50">ev..</text></g><g><title>fn_sig (147,981 samples, 0.10%)</title><rect x="49.0153%" y="213" width="0.1015%" height="15" fill="rgb(220,129,5)"/><text x="49.2653%" y="223.50"></text></g><g><title>item_attrs (279,474 samples, 0.19%)</title><rect x="49.2913%" y="213" width="0.1917%" height="15" fill="rgb(242,17,10)"/><text x="49.5413%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (268,494 samples, 0.18%)</title><rect x="49.2988%" y="197" width="0.1841%" height="15" fill="rgb(242,107,0)"/><text x="49.5488%" y="207.50"></text></g><g><title>evaluate_obligation (305,475 samples, 0.21%)</title><rect x="49.7201%" y="197" width="0.2095%" height="15" fill="rgb(251,28,31)"/><text x="49.9701%" y="207.50"></text></g><g><title>method_autoderef_steps (605,425 samples, 0.42%)</title><rect x="49.5234%" y="213" width="0.4152%" height="15" fill="rgb(233,223,10)"/><text x="49.7734%" y="223.50"></text></g><g><title>predicates_of (354,407 samples, 0.24%)</title><rect x="49.9886%" y="213" width="0.2431%" height="15" fill="rgb(215,21,27)"/><text x="50.2386%" y="223.50"></text></g><g><title>predicates_defined_on (245,536 samples, 0.17%)</title><rect x="50.0633%" y="197" width="0.1684%" height="15" fill="rgb(232,23,21)"/><text x="50.3133%" y="207.50"></text></g><g><title>dropck_outlives (235,883 samples, 0.16%)</title><rect x="52.8231%" y="197" width="0.1618%" height="15" fill="rgb(244,5,23)"/><text x="53.0731%" y="207.50"></text></g><g><title>generics_of (688,708 samples, 0.47%)</title><rect x="54.2643%" y="181" width="0.4723%" height="15" fill="rgb(226,81,46)"/><text x="54.5143%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (570,087 samples, 0.39%)</title><rect x="54.3457%" y="165" width="0.3910%" height="15" fill="rgb(247,70,30)"/><text x="54.5957%" y="175.50"></text></g><g><title>trait_impls_of (385,475 samples, 0.26%)</title><rect x="54.8774%" y="181" width="0.2644%" height="15" fill="rgb(212,68,19)"/><text x="55.1274%" y="191.50"></text></g><g><title>evaluate_obligation (3,153,853 samples, 2.16%)</title><rect x="52.9849%" y="197" width="2.1630%" height="15" fill="rgb(240,187,13)"/><text x="53.2349%" y="207.50">e..</text></g><g><title>is_copy_raw (223,282 samples, 0.15%)</title><rect x="55.2863%" y="197" width="0.1531%" height="15" fill="rgb(223,113,26)"/><text x="55.5363%" y="207.50"></text></g><g><title>evaluate_obligation (188,312 samples, 0.13%)</title><rect x="55.3103%" y="181" width="0.1291%" height="15" fill="rgb(206,192,2)"/><text x="55.5603%" y="191.50"></text></g><g><title>method_autoderef_steps (173,283 samples, 0.12%)</title><rect x="55.4719%" y="197" width="0.1188%" height="15" fill="rgb(241,108,4)"/><text x="55.7219%" y="207.50"></text></g><g><title>typeck (7,882,349 samples, 5.41%)</title><rect x="50.3177%" y="213" width="5.4059%" height="15" fill="rgb(247,173,49)"/><text x="50.5677%" y="223.50">typeck</text></g><g><title>item_bodies_checking (30,965,205 samples, 21.24%)</title><rect x="34.5248%" y="261" width="21.2368%" height="15" fill="rgb(224,114,35)"/><text x="34.7748%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,962,775 samples, 21.24%)</title><rect x="34.5265%" y="245" width="21.2352%" height="15" fill="rgb(245,159,27)"/><text x="34.7765%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (30,884,624 samples, 21.18%)</title><rect x="34.5801%" y="229" width="21.1816%" height="15" fill="rgb(245,172,44)"/><text x="34.8301%" y="239.50">typeck</text></g><g><title>layout_of (180,843 samples, 0.12%)</title><rect x="56.4974%" y="197" width="0.1240%" height="15" fill="rgb(236,23,11)"/><text x="56.7474%" y="207.50"></text></g><g><title>layout_of (230,343 samples, 0.16%)</title><rect x="56.4801%" y="213" width="0.1580%" height="15" fill="rgb(205,117,38)"/><text x="56.7301%" y="223.50"></text></g><g><title>layout_of (259,903 samples, 0.18%)</title><rect x="56.4637%" y="229" width="0.1782%" height="15" fill="rgb(237,72,25)"/><text x="56.7137%" y="239.50"></text></g><g><title>adt_def (399,105 samples, 0.27%)</title><rect x="57.3279%" y="149" width="0.2737%" height="15" fill="rgb(244,70,9)"/><text x="57.5779%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (398,554 samples, 0.27%)</title><rect x="57.3282%" y="133" width="0.2733%" height="15" fill="rgb(217,125,39)"/><text x="57.5782%" y="143.50"></text></g><g><title>item_attrs (393,134 samples, 0.27%)</title><rect x="57.3320%" y="117" width="0.2696%" height="15" fill="rgb(235,36,10)"/><text x="57.5820%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (392,364 samples, 0.27%)</title><rect x="57.3325%" y="101" width="0.2691%" height="15" fill="rgb(251,123,47)"/><text x="57.5825%" y="111.50"></text></g><g><title>adt_dtorck_constraint (425,735 samples, 0.29%)</title><rect x="57.3148%" y="165" width="0.2920%" height="15" fill="rgb(221,13,13)"/><text x="57.5648%" y="175.50"></text></g><g><title>adt_dtorck_constraint (488,956 samples, 0.34%)</title><rect x="57.2787%" y="181" width="0.3353%" height="15" fill="rgb(238,131,9)"/><text x="57.5287%" y="191.50"></text></g><g><title>dropck_outlives (550,337 samples, 0.38%)</title><rect x="57.2418%" y="213" width="0.3774%" height="15" fill="rgb(211,50,8)"/><text x="57.4918%" y="223.50"></text></g><g><title>adt_dtorck_constraint (513,676 samples, 0.35%)</title><rect x="57.2670%" y="197" width="0.3523%" height="15" fill="rgb(245,182,24)"/><text x="57.5170%" y="207.50"></text></g><g><title>generics_of (193,691 samples, 0.13%)</title><rect x="57.9242%" y="197" width="0.1328%" height="15" fill="rgb(242,14,37)"/><text x="58.1742%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (150,340 samples, 0.10%)</title><rect x="57.9540%" y="181" width="0.1031%" height="15" fill="rgb(246,228,12)"/><text x="58.2040%" y="191.50"></text></g><g><title>impl_trait_ref (215,913 samples, 0.15%)</title><rect x="58.0711%" y="197" width="0.1481%" height="15" fill="rgb(213,55,15)"/><text x="58.3211%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (172,663 samples, 0.12%)</title><rect x="58.1008%" y="181" width="0.1184%" height="15" fill="rgb(209,9,3)"/><text x="58.3508%" y="191.50"></text></g><g><title>specializes (151,612 samples, 0.10%)</title><rect x="58.2578%" y="197" width="0.1040%" height="15" fill="rgb(230,59,30)"/><text x="58.5078%" y="207.50"></text></g><g><title>evaluate_obligation (1,129,521 samples, 0.77%)</title><rect x="57.6193%" y="213" width="0.7747%" height="15" fill="rgb(209,121,21)"/><text x="57.8693%" y="223.50"></text></g><g><title>item_types_checking (3,899,804 samples, 2.67%)</title><rect x="55.7616%" y="261" width="2.6746%" height="15" fill="rgb(220,109,13)"/><text x="56.0116%" y="271.50">it..</text></g><g><title>check_mod_item_types (3,894,113 samples, 2.67%)</title><rect x="55.7655%" y="245" width="2.6707%" height="15" fill="rgb(232,18,1)"/><text x="56.0155%" y="255.50">ch..</text></g><g><title>typeck (2,570,249 samples, 1.76%)</title><rect x="56.6735%" y="229" width="1.7628%" height="15" fill="rgb(215,41,42)"/><text x="56.9235%" y="239.50"></text></g><g><title>fn_sig (328,862 samples, 0.23%)</title><rect x="58.6154%" y="229" width="0.2255%" height="15" fill="rgb(224,123,36)"/><text x="58.8654%" y="239.50"></text></g><g><title>generics_of (278,502 samples, 0.19%)</title><rect x="58.8410%" y="229" width="0.1910%" height="15" fill="rgb(240,125,3)"/><text x="59.0910%" y="239.50"></text></g><g><title>late_bound_vars_map (324,136 samples, 0.22%)</title><rect x="59.3237%" y="181" width="0.2223%" height="15" fill="rgb(205,98,50)"/><text x="59.5737%" y="191.50"></text></g><g><title>resolve_lifetimes (308,026 samples, 0.21%)</title><rect x="59.3348%" y="165" width="0.2113%" height="15" fill="rgb(205,185,37)"/><text x="59.5848%" y="175.50"></text></g><g><title>explicit_predicates_of (535,068 samples, 0.37%)</title><rect x="59.1909%" y="197" width="0.3670%" height="15" fill="rgb(238,207,15)"/><text x="59.4409%" y="207.50"></text></g><g><title>predicates_of (866,972 samples, 0.59%)</title><rect x="59.1016%" y="229" width="0.5946%" height="15" fill="rgb(213,199,42)"/><text x="59.3516%" y="239.50"></text></g><g><title>predicates_defined_on (818,732 samples, 0.56%)</title><rect x="59.1347%" y="213" width="0.5615%" height="15" fill="rgb(235,201,11)"/><text x="59.3847%" y="223.50"></text></g><g><title>inferred_outlives_of (201,633 samples, 0.14%)</title><rect x="59.5579%" y="197" width="0.1383%" height="15" fill="rgb(207,46,11)"/><text x="59.8079%" y="207.50"></text></g><g><title>inferred_outlives_crate (184,362 samples, 0.13%)</title><rect x="59.5697%" y="181" width="0.1264%" height="15" fill="rgb(241,35,35)"/><text x="59.8197%" y="191.50"></text></g><g><title>type_collecting (1,998,602 samples, 1.37%)</title><rect x="58.4383%" y="261" width="1.3707%" height="15" fill="rgb(243,32,47)"/><text x="58.6883%" y="271.50"></text></g><g><title>collect_mod_item_types (1,987,812 samples, 1.36%)</title><rect x="58.4457%" y="245" width="1.3633%" height="15" fill="rgb(247,202,23)"/><text x="58.6957%" y="255.50"></text></g><g><title>evaluate_obligation (373,755 samples, 0.26%)</title><rect x="61.1962%" y="229" width="0.2563%" height="15" fill="rgb(219,102,11)"/><text x="61.4462%" y="239.50"></text></g><g><title>implied_outlives_bounds (214,800 samples, 0.15%)</title><rect x="61.4525%" y="229" width="0.1473%" height="15" fill="rgb(243,110,44)"/><text x="61.7025%" y="239.50"></text></g><g><title>param_env (368,942 samples, 0.25%)</title><rect x="61.6453%" y="229" width="0.2530%" height="15" fill="rgb(222,74,54)"/><text x="61.8953%" y="239.50"></text></g><g><title>region_scope_tree (315,325 samples, 0.22%)</title><rect x="61.9446%" y="229" width="0.2163%" height="15" fill="rgb(216,99,12)"/><text x="62.1946%" y="239.50"></text></g><g><title>check_impl_item_well_formed (3,322,698 samples, 2.28%)</title><rect x="59.9489%" y="245" width="2.2788%" height="15" fill="rgb(226,22,26)"/><text x="60.1989%" y="255.50">c..</text></g><g><title>mir_borrowck (269,213 samples, 0.18%)</title><rect x="63.6963%" y="149" width="0.1846%" height="15" fill="rgb(217,163,10)"/><text x="63.9463%" y="159.50"></text></g><g><title>mir_for_ctfe (374,844 samples, 0.26%)</title><rect x="63.6242%" y="181" width="0.2571%" height="15" fill="rgb(213,25,53)"/><text x="63.8742%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (347,314 samples, 0.24%)</title><rect x="63.6430%" y="165" width="0.2382%" height="15" fill="rgb(252,105,26)"/><text x="63.8930%" y="175.50"></text></g><g><title>generics_of (410,705 samples, 0.28%)</title><rect x="66.1707%" y="85" width="0.2817%" height="15" fill="rgb(220,39,43)"/><text x="66.4207%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (277,114 samples, 0.19%)</title><rect x="66.2623%" y="69" width="0.1901%" height="15" fill="rgb(229,68,48)"/><text x="66.5123%" y="79.50"></text></g><g><title>impl_trait_ref (1,086,044 samples, 0.74%)</title><rect x="66.5283%" y="85" width="0.7448%" height="15" fill="rgb(252,8,32)"/><text x="66.7783%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (722,851 samples, 0.50%)</title><rect x="66.7774%" y="69" width="0.4958%" height="15" fill="rgb(223,20,43)"/><text x="67.0274%" y="79.50"></text></g><g><title>predicates_of (607,536 samples, 0.42%)</title><rect x="67.2991%" y="85" width="0.4167%" height="15" fill="rgb(229,81,49)"/><text x="67.5491%" y="95.50"></text></g><g><title>predicates_defined_on (341,013 samples, 0.23%)</title><rect x="67.4819%" y="69" width="0.2339%" height="15" fill="rgb(236,28,36)"/><text x="67.7319%" y="79.50"></text></g><g><title>specializes (1,851,951 samples, 1.27%)</title><rect x="67.7158%" y="85" width="1.2701%" height="15" fill="rgb(249,185,26)"/><text x="67.9658%" y="95.50"></text></g><g><title>param_env (1,061,424 samples, 0.73%)</title><rect x="68.2579%" y="69" width="0.7280%" height="15" fill="rgb(249,174,33)"/><text x="68.5079%" y="79.50"></text></g><g><title>def_span (470,104 samples, 0.32%)</title><rect x="68.6635%" y="53" width="0.3224%" height="15" fill="rgb(233,201,37)"/><text x="68.9135%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (411,584 samples, 0.28%)</title><rect x="68.7036%" y="37" width="0.2823%" height="15" fill="rgb(221,78,26)"/><text x="68.9536%" y="47.50"></text></g><g><title>evaluate_obligation (6,400,451 samples, 4.39%)</title><rect x="64.6526%" y="101" width="4.3896%" height="15" fill="rgb(250,127,30)"/><text x="64.9026%" y="111.50">evalu..</text></g><g><title>specializes (165,083 samples, 0.11%)</title><rect x="69.0808%" y="101" width="0.1132%" height="15" fill="rgb(230,49,44)"/><text x="69.3308%" y="111.50"></text></g><g><title>eval_to_const_value_raw (7,740,456 samples, 5.31%)</title><rect x="63.8857%" y="165" width="5.3086%" height="15" fill="rgb(229,67,23)"/><text x="64.1357%" y="175.50">eval_t..</text></g><g><title>eval_to_const_value_raw (7,738,576 samples, 5.31%)</title><rect x="63.8870%" y="149" width="5.3073%" height="15" fill="rgb(249,83,47)"/><text x="64.1370%" y="159.50">eval_t..</text></g><g><title>eval_to_allocation_raw (7,735,586 samples, 5.31%)</title><rect x="63.8890%" y="133" width="5.3053%" height="15" fill="rgb(215,43,3)"/><text x="64.1390%" y="143.50">eval_t..</text></g><g><title>typeck (7,498,594 samples, 5.14%)</title><rect x="64.0516%" y="117" width="5.1428%" height="15" fill="rgb(238,154,13)"/><text x="64.3016%" y="127.50">typeck</text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,749,646 samples, 5.31%)</title><rect x="63.8814%" y="181" width="5.3149%" height="15" fill="rgb(219,56,2)"/><text x="64.1314%" y="191.50">try_nor..</text></g><g><title>eval_to_const_value_raw (8,459,684 samples, 5.80%)</title><rect x="63.4571%" y="229" width="5.8019%" height="15" fill="rgb(233,0,4)"/><text x="63.7071%" y="239.50">eval_to..</text></g><g><title>eval_to_const_value_raw (8,449,164 samples, 5.79%)</title><rect x="63.4644%" y="213" width="5.7947%" height="15" fill="rgb(235,30,7)"/><text x="63.7144%" y="223.50">eval_to..</text></g><g><title>eval_to_allocation_raw (8,447,654 samples, 5.79%)</title><rect x="63.4654%" y="197" width="5.7936%" height="15" fill="rgb(250,79,13)"/><text x="63.7154%" y="207.50">eval_to..</text></g><g><title>adt_def (154,692 samples, 0.11%)</title><rect x="69.5262%" y="197" width="0.1061%" height="15" fill="rgb(211,146,34)"/><text x="69.7762%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (152,052 samples, 0.10%)</title><rect x="69.5280%" y="181" width="0.1043%" height="15" fill="rgb(228,22,38)"/><text x="69.7780%" y="191.50"></text></g><g><title>adt_sized_constraint (311,114 samples, 0.21%)</title><rect x="69.5146%" y="213" width="0.2134%" height="15" fill="rgb(235,168,5)"/><text x="69.7646%" y="223.50"></text></g><g><title>evaluate_obligation (848,068 samples, 0.58%)</title><rect x="69.2590%" y="229" width="0.5816%" height="15" fill="rgb(221,155,16)"/><text x="69.5090%" y="239.50"></text></g><g><title>param_env (378,006 samples, 0.26%)</title><rect x="69.9274%" y="229" width="0.2592%" height="15" fill="rgb(215,215,53)"/><text x="70.1774%" y="239.50"></text></g><g><title>check_item_well_formed (11,950,862 samples, 8.20%)</title><rect x="62.2277%" y="245" width="8.1962%" height="15" fill="rgb(223,4,10)"/><text x="62.4777%" y="255.50">check_item_..</text></g><g><title>analysis (102,134,418 samples, 70.05%)</title><rect x="0.4233%" y="293" width="70.0467%" height="15" fill="rgb(234,103,6)"/><text x="0.6733%" y="303.50">analysis</text></g><g><title>type_check_crate (68,831,327 samples, 47.21%)</title><rect x="23.2635%" y="277" width="47.2065%" height="15" fill="rgb(227,97,0)"/><text x="23.5135%" y="287.50">type_check_crate</text></g><g><title>wf_checking (15,538,642 samples, 10.66%)</title><rect x="59.8132%" y="261" width="10.6568%" height="15" fill="rgb(234,150,53)"/><text x="60.0632%" y="271.50">wf_checking</text></g><g><title>codegen_crate (394,894 samples, 0.27%)</title><rect x="70.4763%" y="293" width="0.2708%" height="15" fill="rgb(228,201,54)"/><text x="70.7263%" y="303.50"></text></g><g><title>AST_validation (225,823 samples, 0.15%)</title><rect x="70.8770%" y="277" width="0.1549%" height="15" fill="rgb(222,22,37)"/><text x="71.1270%" y="287.50"></text></g><g><title>metadata_load_macro (577,697 samples, 0.40%)</title><rect x="87.4331%" y="245" width="0.3962%" height="15" fill="rgb(237,53,32)"/><text x="87.6831%" y="255.50"></text></g><g><title>metadata_register_crate (3,604,731 samples, 2.47%)</title><rect x="87.8293%" y="245" width="2.4722%" height="15" fill="rgb(233,25,53)"/><text x="88.0793%" y="255.50">me..</text></g><g><title>metadata_register_crate (1,397,066 samples, 0.96%)</title><rect x="89.3434%" y="229" width="0.9581%" height="15" fill="rgb(210,40,34)"/><text x="89.5934%" y="239.50"></text></g><g><title>macro_expand_crate (28,263,464 samples, 19.38%)</title><rect x="71.1344%" y="277" width="19.3839%" height="15" fill="rgb(241,220,44)"/><text x="71.3844%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (28,249,524 samples, 19.37%)</title><rect x="71.1439%" y="261" width="19.3743%" height="15" fill="rgb(235,28,35)"/><text x="71.3939%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (315,973 samples, 0.22%)</title><rect x="90.3016%" y="245" width="0.2167%" height="15" fill="rgb(210,56,17)"/><text x="90.5516%" y="255.50"></text></g><g><title>late_resolve_crate (2,788,031 samples, 1.91%)</title><rect x="90.7262%" y="261" width="1.9121%" height="15" fill="rgb(224,130,29)"/><text x="90.9762%" y="271.50">l..</text></g><g><title>configure_and_expand (32,022,106 samples, 21.96%)</title><rect x="70.7471%" y="293" width="21.9617%" height="15" fill="rgb(235,212,8)"/><text x="70.9971%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (3,139,315 samples, 2.15%)</title><rect x="90.5558%" y="277" width="2.1530%" height="15" fill="rgb(223,33,50)"/><text x="90.8058%" y="287.50">r..</text></g><g><title>drop_ast (160,072 samples, 0.11%)</title><rect x="92.7088%" y="293" width="0.1098%" height="15" fill="rgb(219,149,13)"/><text x="92.9588%" y="303.50"></text></g><g><title>early_lint_checks (306,223 samples, 0.21%)</title><rect x="92.8312%" y="293" width="0.2100%" height="15" fill="rgb(250,156,29)"/><text x="93.0812%" y="303.50"></text></g><g><title>free_global_ctxt (4,234,017 samples, 2.90%)</title><rect x="93.0412%" y="293" width="2.9038%" height="15" fill="rgb(216,193,19)"/><text x="93.2912%" y="303.50">fr..</text></g><g><title>generate_crate_metadata (1,132,993 samples, 0.78%)</title><rect x="95.9450%" y="293" width="0.7770%" height="15" fill="rgb(216,135,14)"/><text x="96.1950%" y="303.50"></text></g><g><title>hir_lowering (2,355,697 samples, 1.62%)</title><rect x="96.7220%" y="293" width="1.6156%" height="15" fill="rgb(241,47,5)"/><text x="96.9720%" y="303.50"></text></g><g><title>parse_crate (490,326 samples, 0.34%)</title><rect x="98.3674%" y="293" width="0.3363%" height="15" fill="rgb(233,42,35)"/><text x="98.6174%" y="303.50"></text></g><g><title>prepare_outputs (189,192 samples, 0.13%)</title><rect x="98.7097%" y="293" width="0.1298%" height="15" fill="rgb(231,13,6)"/><text x="98.9597%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,229,804 samples, 0.84%)</title><rect x="98.8394%" y="293" width="0.8434%" height="15" fill="rgb(207,181,40)"/><text x="99.0894%" y="303.50"></text></g><g><title>all (145,808,984 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(254,173,49)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (145,808,984 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(221,1,38)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (386,024 samples, 0.26%)</title><rect x="99.7353%" y="293" width="0.2647%" height="15" fill="rgb(206,124,46)"/><text x="99.9853%" y="303.50"></text></g></svg></svg>