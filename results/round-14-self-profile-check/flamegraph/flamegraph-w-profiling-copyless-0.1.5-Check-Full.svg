<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (274,034 samples, 0.49%)</title><rect x="8.5047%" y="149" width="0.4859%" height="15" fill="rgb(227,0,7)"/><text x="8.7547%" y="159.50"></text></g><g><title>item_attrs (200,502 samples, 0.36%)</title><rect x="9.5008%" y="117" width="0.3555%" height="15" fill="rgb(217,0,24)"/><text x="9.7508%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (194,202 samples, 0.34%)</title><rect x="9.5120%" y="101" width="0.3444%" height="15" fill="rgb(221,193,54)"/><text x="9.7620%" y="111.50"></text></g><g><title>codegen_fn_attrs (295,723 samples, 0.52%)</title><rect x="9.3483%" y="133" width="0.5244%" height="15" fill="rgb(248,212,6)"/><text x="9.5983%" y="143.50"></text></g><g><title>is_copy_raw (181,741 samples, 0.32%)</title><rect x="11.4767%" y="117" width="0.3223%" height="15" fill="rgb(208,68,35)"/><text x="11.7267%" y="127.50"></text></g><g><title>evaluate_obligation (158,071 samples, 0.28%)</title><rect x="11.5187%" y="101" width="0.2803%" height="15" fill="rgb(232,128,0)"/><text x="11.7687%" y="111.50"></text></g><g><title>predicates_of (86,793 samples, 0.15%)</title><rect x="12.5189%" y="69" width="0.1539%" height="15" fill="rgb(207,160,47)"/><text x="12.7689%" y="79.50"></text></g><g><title>predicates_defined_on (65,603 samples, 0.12%)</title><rect x="12.5565%" y="53" width="0.1163%" height="15" fill="rgb(228,23,34)"/><text x="12.8065%" y="63.50"></text></g><g><title>needs_drop_raw (497,276 samples, 0.88%)</title><rect x="11.7990%" y="117" width="0.8817%" height="15" fill="rgb(218,30,26)"/><text x="12.0490%" y="127.50"></text></g><g><title>is_copy_raw (424,425 samples, 0.75%)</title><rect x="11.9282%" y="101" width="0.7526%" height="15" fill="rgb(220,122,19)"/><text x="12.1782%" y="111.50"></text></g><g><title>evaluate_obligation (364,895 samples, 0.65%)</title><rect x="12.0337%" y="85" width="0.6470%" height="15" fill="rgb(250,228,42)"/><text x="12.2837%" y="95.50"></text></g><g><title>specialization_graph_of (133,861 samples, 0.24%)</title><rect x="12.8983%" y="101" width="0.2374%" height="15" fill="rgb(240,193,28)"/><text x="13.1483%" y="111.50"></text></g><g><title>impl_trait_ref (73,641 samples, 0.13%)</title><rect x="13.0051%" y="85" width="0.1306%" height="15" fill="rgb(216,20,37)"/><text x="13.2551%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (63,351 samples, 0.11%)</title><rect x="13.0234%" y="69" width="0.1123%" height="15" fill="rgb(206,188,39)"/><text x="13.2734%" y="79.50"></text></g><g><title>resolve_instance (305,763 samples, 0.54%)</title><rect x="12.6807%" y="117" width="0.5422%" height="15" fill="rgb(217,207,13)"/><text x="12.9307%" y="127.50"></text></g><g><title>thir_body (332,264 samples, 0.59%)</title><rect x="13.2434%" y="117" width="0.5892%" height="15" fill="rgb(231,73,38)"/><text x="13.4934%" y="127.50"></text></g><g><title>mir_const (3,380,688 samples, 5.99%)</title><rect x="7.8498%" y="165" width="5.9945%" height="15" fill="rgb(225,20,46)"/><text x="8.0998%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (2,737,282 samples, 4.85%)</title><rect x="8.9906%" y="149" width="4.8536%" height="15" fill="rgb(210,31,41)"/><text x="9.2406%" y="159.50">unsafe..</text></g><g><title>mir_built (2,239,845 samples, 3.97%)</title><rect x="9.8727%" y="133" width="3.9716%" height="15" fill="rgb(221,200,47)"/><text x="10.1227%" y="143.50">mir_..</text></g><g><title>mir_promoted (3,689,841 samples, 6.54%)</title><rect x="7.3304%" y="181" width="6.5427%" height="15" fill="rgb(226,26,5)"/><text x="7.5804%" y="191.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (161,192 samples, 0.29%)</title><rect x="13.8731%" y="181" width="0.2858%" height="15" fill="rgb(249,33,26)"/><text x="14.1231%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (108,341 samples, 0.19%)</title><rect x="14.1589%" y="181" width="0.1921%" height="15" fill="rgb(235,183,28)"/><text x="14.4089%" y="191.50"></text></g><g><title>normalize_projection_ty (69,691 samples, 0.12%)</title><rect x="14.2274%" y="165" width="0.1236%" height="15" fill="rgb(221,5,38)"/><text x="14.4774%" y="175.50"></text></g><g><title>MIR_borrow_checking (7,840,036 samples, 13.90%)</title><rect x="1.4518%" y="213" width="13.9016%" height="15" fill="rgb(247,18,42)"/><text x="1.7018%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,806,846 samples, 13.84%)</title><rect x="1.5106%" y="197" width="13.8428%" height="15" fill="rgb(241,131,45)"/><text x="1.7606%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (565,305 samples, 1.00%)</title><rect x="14.3510%" y="181" width="1.0024%" height="15" fill="rgb(249,31,29)"/><text x="14.6010%" y="191.50"></text></g><g><title>hir_module_items (136,151 samples, 0.24%)</title><rect x="15.3721%" y="213" width="0.2414%" height="15" fill="rgb(225,111,53)"/><text x="15.6221%" y="223.50"></text></g><g><title>get_lang_items (69,581 samples, 0.12%)</title><rect x="16.0147%" y="165" width="0.1234%" height="15" fill="rgb(238,160,17)"/><text x="16.2647%" y="175.50"></text></g><g><title>should_inherit_track_caller (92,722 samples, 0.16%)</title><rect x="16.1381%" y="165" width="0.1644%" height="15" fill="rgb(214,148,48)"/><text x="16.3881%" y="175.50"></text></g><g><title>codegen_fn_attrs (264,654 samples, 0.47%)</title><rect x="15.8864%" y="181" width="0.4693%" height="15" fill="rgb(232,36,49)"/><text x="16.1364%" y="191.50"></text></g><g><title>check_mod_attrs (381,575 samples, 0.68%)</title><rect x="15.6793%" y="197" width="0.6766%" height="15" fill="rgb(209,103,24)"/><text x="15.9293%" y="207.50"></text></g><g><title>check_mod_const_bodies (63,470 samples, 0.11%)</title><rect x="16.3559%" y="197" width="0.1125%" height="15" fill="rgb(229,88,8)"/><text x="16.6059%" y="207.50"></text></g><g><title>lookup_deprecation_entry (141,372 samples, 0.25%)</title><rect x="16.7711%" y="181" width="0.2507%" height="15" fill="rgb(213,181,19)"/><text x="17.0211%" y="191.50"></text></g><g><title>stability_index (69,421 samples, 0.12%)</title><rect x="16.8987%" y="165" width="0.1231%" height="15" fill="rgb(254,191,54)"/><text x="17.1487%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (352,535 samples, 0.63%)</title><rect x="16.5419%" y="197" width="0.6251%" height="15" fill="rgb(241,83,37)"/><text x="16.7919%" y="207.50"></text></g><g><title>misc_checking_1 (922,500 samples, 1.64%)</title><rect x="15.6145%" y="213" width="1.6357%" height="15" fill="rgb(233,36,39)"/><text x="15.8645%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (216,453 samples, 0.38%)</title><rect x="17.2548%" y="197" width="0.3838%" height="15" fill="rgb(226,3,54)"/><text x="17.5048%" y="207.50"></text></g><g><title>check_mod_liveness (165,781 samples, 0.29%)</title><rect x="17.3446%" y="181" width="0.2940%" height="15" fill="rgb(245,192,40)"/><text x="17.5946%" y="191.50"></text></g><g><title>misc_checking_2 (443,695 samples, 0.79%)</title><rect x="17.2503%" y="213" width="0.7867%" height="15" fill="rgb(238,167,29)"/><text x="17.5003%" y="223.50"></text></g><g><title>match_checking (224,682 samples, 0.40%)</title><rect x="17.6386%" y="197" width="0.3984%" height="15" fill="rgb(232,182,51)"/><text x="17.8886%" y="207.50"></text></g><g><title>check_match (212,752 samples, 0.38%)</title><rect x="17.6598%" y="181" width="0.3772%" height="15" fill="rgb(231,60,39)"/><text x="17.9098%" y="191.50"></text></g><g><title>check_private_in_public (107,051 samples, 0.19%)</title><rect x="18.0552%" y="197" width="0.1898%" height="15" fill="rgb(208,69,12)"/><text x="18.3052%" y="207.50"></text></g><g><title>death_checking (191,602 samples, 0.34%)</title><rect x="18.2451%" y="197" width="0.3397%" height="15" fill="rgb(235,93,37)"/><text x="18.4951%" y="207.50"></text></g><g><title>all_diagnostic_items (58,730 samples, 0.10%)</title><rect x="19.5629%" y="165" width="0.1041%" height="15" fill="rgb(213,116,39)"/><text x="19.8129%" y="175.50"></text></g><g><title>param_env (190,642 samples, 0.34%)</title><rect x="19.6678%" y="165" width="0.3380%" height="15" fill="rgb(222,207,29)"/><text x="19.9178%" y="175.50"></text></g><g><title>predicates_of (89,451 samples, 0.16%)</title><rect x="19.8472%" y="149" width="0.1586%" height="15" fill="rgb(206,96,30)"/><text x="20.0972%" y="159.50"></text></g><g><title>predicates_defined_on (77,681 samples, 0.14%)</title><rect x="19.8681%" y="133" width="0.1377%" height="15" fill="rgb(218,138,4)"/><text x="20.1181%" y="143.50"></text></g><g><title>crate_lints (4,261,097 samples, 7.56%)</title><rect x="18.5877%" y="181" width="7.5556%" height="15" fill="rgb(250,191,14)"/><text x="18.8377%" y="191.50">crate_lints</text></g><g><title>type_of (3,458,471 samples, 6.13%)</title><rect x="20.0109%" y="165" width="6.1324%" height="15" fill="rgb(239,60,40)"/><text x="20.2609%" y="175.50">type_of</text></g><g><title>metadata_decode_entry_type_of (3,109,128 samples, 5.51%)</title><rect x="20.6303%" y="149" width="5.5130%" height="15" fill="rgb(206,27,48)"/><text x="20.8803%" y="159.50">metadat..</text></g><g><title>adt_sized_constraint (74,661 samples, 0.13%)</title><rect x="26.4376%" y="101" width="0.1324%" height="15" fill="rgb(225,35,8)"/><text x="26.6876%" y="111.50"></text></g><g><title>adt_def (70,991 samples, 0.13%)</title><rect x="26.4441%" y="85" width="0.1259%" height="15" fill="rgb(250,213,24)"/><text x="26.6941%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (70,411 samples, 0.12%)</title><rect x="26.4452%" y="69" width="0.1248%" height="15" fill="rgb(247,123,22)"/><text x="26.6952%" y="79.50"></text></g><g><title>item_attrs (63,711 samples, 0.11%)</title><rect x="26.4571%" y="53" width="0.1130%" height="15" fill="rgb(231,138,38)"/><text x="26.7071%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (63,211 samples, 0.11%)</title><rect x="26.4579%" y="37" width="0.1121%" height="15" fill="rgb(231,145,46)"/><text x="26.7079%" y="47.50"></text></g><g><title>layout_of (118,211 samples, 0.21%)</title><rect x="26.3606%" y="133" width="0.2096%" height="15" fill="rgb(251,118,11)"/><text x="26.6106%" y="143.50"></text></g><g><title>layout_of (80,301 samples, 0.14%)</title><rect x="26.4279%" y="117" width="0.1424%" height="15" fill="rgb(217,147,25)"/><text x="26.6779%" y="127.50"></text></g><g><title>lint_checking (4,504,310 samples, 7.99%)</title><rect x="18.5848%" y="197" width="7.9869%" height="15" fill="rgb(247,81,37)"/><text x="18.8348%" y="207.50">lint_checki..</text></g><g><title>module_lints (241,573 samples, 0.43%)</title><rect x="26.1433%" y="181" width="0.4283%" height="15" fill="rgb(209,12,38)"/><text x="26.3933%" y="191.50"></text></g><g><title>lint_mod (234,583 samples, 0.42%)</title><rect x="26.1557%" y="165" width="0.4160%" height="15" fill="rgb(227,1,9)"/><text x="26.4057%" y="175.50"></text></g><g><title>layout_of (134,882 samples, 0.24%)</title><rect x="26.3325%" y="149" width="0.2392%" height="15" fill="rgb(248,47,43)"/><text x="26.5825%" y="159.50"></text></g><g><title>privacy_access_levels (122,272 samples, 0.22%)</title><rect x="26.5717%" y="197" width="0.2168%" height="15" fill="rgb(221,10,30)"/><text x="26.8217%" y="207.50"></text></g><g><title>privacy_checking_modules (136,021 samples, 0.24%)</title><rect x="26.7885%" y="197" width="0.2412%" height="15" fill="rgb(210,229,1)"/><text x="27.0385%" y="207.50"></text></g><g><title>check_mod_privacy (133,761 samples, 0.24%)</title><rect x="26.7925%" y="181" width="0.2372%" height="15" fill="rgb(222,148,37)"/><text x="27.0425%" y="191.50"></text></g><g><title>misc_checking_3 (5,082,966 samples, 9.01%)</title><rect x="18.0370%" y="213" width="9.0129%" height="15" fill="rgb(234,67,33)"/><text x="18.2870%" y="223.50">misc_checking..</text></g><g><title>impl_parent (147,160 samples, 0.26%)</title><rect x="27.6650%" y="149" width="0.2609%" height="15" fill="rgb(247,98,35)"/><text x="27.9150%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (100,520 samples, 0.18%)</title><rect x="27.7477%" y="133" width="0.1782%" height="15" fill="rgb(247,138,52)"/><text x="27.9977%" y="143.50"></text></g><g><title>impl_trait_ref (599,817 samples, 1.06%)</title><rect x="27.9259%" y="149" width="1.0636%" height="15" fill="rgb(213,79,30)"/><text x="28.1759%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (552,617 samples, 0.98%)</title><rect x="28.0096%" y="133" width="0.9799%" height="15" fill="rgb(246,177,23)"/><text x="28.2596%" y="143.50"></text></g><g><title>coherent_trait (1,123,533 samples, 1.99%)</title><rect x="27.1665%" y="181" width="1.9922%" height="15" fill="rgb(230,62,27)"/><text x="27.4165%" y="191.50">c..</text></g><g><title>specialization_graph_of (1,113,153 samples, 1.97%)</title><rect x="27.1849%" y="165" width="1.9738%" height="15" fill="rgb(216,154,8)"/><text x="27.4349%" y="175.50">s..</text></g><g><title>trait_impls_of (95,442 samples, 0.17%)</title><rect x="28.9895%" y="149" width="0.1692%" height="15" fill="rgb(244,35,45)"/><text x="29.2395%" y="159.50"></text></g><g><title>coherence_checking (1,207,673 samples, 2.14%)</title><rect x="27.1346%" y="197" width="2.1414%" height="15" fill="rgb(251,115,12)"/><text x="27.3846%" y="207.50">c..</text></g><g><title>adt_sized_constraint (98,801 samples, 0.18%)</title><rect x="39.8406%" y="149" width="0.1752%" height="15" fill="rgb(240,54,50)"/><text x="40.0906%" y="159.50"></text></g><g><title>associated_item (508,626 samples, 0.90%)</title><rect x="40.3970%" y="133" width="0.9019%" height="15" fill="rgb(233,84,52)"/><text x="40.6470%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (366,783 samples, 0.65%)</title><rect x="40.6485%" y="117" width="0.6504%" height="15" fill="rgb(207,117,47)"/><text x="40.8985%" y="127.50"></text></g><g><title>associated_items (759,097 samples, 1.35%)</title><rect x="40.0234%" y="149" width="1.3460%" height="15" fill="rgb(249,43,39)"/><text x="40.2734%" y="159.50"></text></g><g><title>adt_def (76,601 samples, 0.14%)</title><rect x="41.8262%" y="85" width="0.1358%" height="15" fill="rgb(209,38,44)"/><text x="42.0762%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (76,111 samples, 0.13%)</title><rect x="41.8270%" y="69" width="0.1350%" height="15" fill="rgb(236,212,23)"/><text x="42.0770%" y="79.50"></text></g><g><title>item_attrs (72,041 samples, 0.13%)</title><rect x="41.8342%" y="53" width="0.1277%" height="15" fill="rgb(242,79,21)"/><text x="42.0842%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (71,501 samples, 0.13%)</title><rect x="41.8352%" y="37" width="0.1268%" height="15" fill="rgb(211,96,35)"/><text x="42.0852%" y="47.50"></text></g><g><title>adt_dtorck_constraint (85,081 samples, 0.15%)</title><rect x="41.8172%" y="101" width="0.1509%" height="15" fill="rgb(253,215,40)"/><text x="42.0672%" y="111.50"></text></g><g><title>adt_dtorck_constraint (147,651 samples, 0.26%)</title><rect x="41.7152%" y="117" width="0.2618%" height="15" fill="rgb(211,81,21)"/><text x="41.9652%" y="127.50"></text></g><g><title>dropck_outlives (332,324 samples, 0.59%)</title><rect x="41.4621%" y="149" width="0.5893%" height="15" fill="rgb(208,190,38)"/><text x="41.7121%" y="159.50"></text></g><g><title>adt_dtorck_constraint (242,342 samples, 0.43%)</title><rect x="41.6217%" y="133" width="0.4297%" height="15" fill="rgb(235,213,38)"/><text x="41.8717%" y="143.50"></text></g><g><title>adt_def (83,991 samples, 0.15%)</title><rect x="43.0237%" y="101" width="0.1489%" height="15" fill="rgb(237,122,38)"/><text x="43.2737%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (83,471 samples, 0.15%)</title><rect x="43.0246%" y="85" width="0.1480%" height="15" fill="rgb(244,218,35)"/><text x="43.2746%" y="95.50"></text></g><g><title>adt_sized_constraint (87,211 samples, 0.15%)</title><rect x="43.0201%" y="117" width="0.1546%" height="15" fill="rgb(240,68,47)"/><text x="43.2701%" y="127.50"></text></g><g><title>adt_sized_constraint (149,461 samples, 0.27%)</title><rect x="42.9270%" y="133" width="0.2650%" height="15" fill="rgb(210,16,53)"/><text x="43.1770%" y="143.50"></text></g><g><title>predicates_of (79,562 samples, 0.14%)</title><rect x="43.3967%" y="133" width="0.1411%" height="15" fill="rgb(235,124,12)"/><text x="43.6467%" y="143.50"></text></g><g><title>specializes (221,452 samples, 0.39%)</title><rect x="43.5378%" y="133" width="0.3927%" height="15" fill="rgb(224,169,11)"/><text x="43.7878%" y="143.50"></text></g><g><title>param_env (202,952 samples, 0.36%)</title><rect x="43.5706%" y="117" width="0.3599%" height="15" fill="rgb(250,166,2)"/><text x="43.8206%" y="127.50"></text></g><g><title>def_span (179,912 samples, 0.32%)</title><rect x="43.6114%" y="101" width="0.3190%" height="15" fill="rgb(242,216,29)"/><text x="43.8614%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (178,392 samples, 0.32%)</title><rect x="43.6141%" y="85" width="0.3163%" height="15" fill="rgb(230,116,27)"/><text x="43.8641%" y="95.50"></text></g><g><title>evaluate_obligation (2,091,503 samples, 3.71%)</title><rect x="42.0514%" y="149" width="3.7086%" height="15" fill="rgb(228,99,48)"/><text x="42.3014%" y="159.50">eval..</text></g><g><title>trait_impls_of (1,024,171 samples, 1.82%)</title><rect x="43.9439%" y="133" width="1.8160%" height="15" fill="rgb(253,11,6)"/><text x="44.1939%" y="143.50">t..</text></g><g><title>implementations_of_trait (306,054 samples, 0.54%)</title><rect x="45.2173%" y="117" width="0.5427%" height="15" fill="rgb(247,143,39)"/><text x="45.4673%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (237,454 samples, 0.42%)</title><rect x="45.3389%" y="101" width="0.4210%" height="15" fill="rgb(236,97,10)"/><text x="45.5889%" y="111.50"></text></g><g><title>fn_sig (119,281 samples, 0.21%)</title><rect x="45.8005%" y="149" width="0.2115%" height="15" fill="rgb(233,208,19)"/><text x="46.0505%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (102,871 samples, 0.18%)</title><rect x="45.8296%" y="133" width="0.1824%" height="15" fill="rgb(216,164,2)"/><text x="46.0796%" y="143.50"></text></g><g><title>generics_of (120,793 samples, 0.21%)</title><rect x="46.0120%" y="149" width="0.2142%" height="15" fill="rgb(220,129,5)"/><text x="46.2620%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (79,812 samples, 0.14%)</title><rect x="46.0847%" y="133" width="0.1415%" height="15" fill="rgb(242,17,10)"/><text x="46.3347%" y="143.50"></text></g><g><title>impl_item_implementor_ids (76,360 samples, 0.14%)</title><rect x="46.2262%" y="149" width="0.1354%" height="15" fill="rgb(242,107,0)"/><text x="46.4762%" y="159.50"></text></g><g><title>associated_items (69,110 samples, 0.12%)</title><rect x="46.2390%" y="133" width="0.1225%" height="15" fill="rgb(251,28,31)"/><text x="46.4890%" y="143.50"></text></g><g><title>impl_trait_ref (65,810 samples, 0.12%)</title><rect x="46.3772%" y="149" width="0.1167%" height="15" fill="rgb(233,223,10)"/><text x="46.6272%" y="159.50"></text></g><g><title>item_attrs (222,563 samples, 0.39%)</title><rect x="46.5473%" y="149" width="0.3946%" height="15" fill="rgb(215,21,27)"/><text x="46.7973%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (216,323 samples, 0.38%)</title><rect x="46.5583%" y="133" width="0.3836%" height="15" fill="rgb(232,23,21)"/><text x="46.8083%" y="143.50"></text></g><g><title>evaluate_obligation (227,991 samples, 0.40%)</title><rect x="47.3339%" y="133" width="0.4043%" height="15" fill="rgb(244,5,23)"/><text x="47.5839%" y="143.50"></text></g><g><title>method_autoderef_steps (421,064 samples, 0.75%)</title><rect x="47.0303%" y="149" width="0.7466%" height="15" fill="rgb(226,81,46)"/><text x="47.2803%" y="159.50"></text></g><g><title>explicit_predicates_of (117,154 samples, 0.21%)</title><rect x="48.1692%" y="117" width="0.2077%" height="15" fill="rgb(247,70,30)"/><text x="48.4192%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (89,773 samples, 0.16%)</title><rect x="48.2178%" y="101" width="0.1592%" height="15" fill="rgb(212,68,19)"/><text x="48.4678%" y="111.50"></text></g><g><title>predicates_of (361,094 samples, 0.64%)</title><rect x="47.8274%" y="149" width="0.6403%" height="15" fill="rgb(240,187,13)"/><text x="48.0774%" y="159.50"></text></g><g><title>predicates_defined_on (258,244 samples, 0.46%)</title><rect x="48.0098%" y="133" width="0.4579%" height="15" fill="rgb(223,113,26)"/><text x="48.2598%" y="143.50"></text></g><g><title>type_of (98,490 samples, 0.17%)</title><rect x="48.5589%" y="149" width="0.1746%" height="15" fill="rgb(206,192,2)"/><text x="48.8089%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (84,720 samples, 0.15%)</title><rect x="48.5833%" y="133" width="0.1502%" height="15" fill="rgb(241,108,4)"/><text x="48.8333%" y="143.50"></text></g><g><title>associated_item (67,981 samples, 0.12%)</title><rect x="51.2924%" y="117" width="0.1205%" height="15" fill="rgb(247,173,49)"/><text x="51.5424%" y="127.50"></text></g><g><title>associated_items (117,241 samples, 0.21%)</title><rect x="51.2152%" y="133" width="0.2079%" height="15" fill="rgb(224,114,35)"/><text x="51.4652%" y="143.50"></text></g><g><title>evaluate_obligation (77,211 samples, 0.14%)</title><rect x="51.5073%" y="133" width="0.1369%" height="15" fill="rgb(245,159,27)"/><text x="51.7573%" y="143.50"></text></g><g><title>is_copy_raw (390,985 samples, 0.69%)</title><rect x="51.7473%" y="133" width="0.6933%" height="15" fill="rgb(245,172,44)"/><text x="51.9973%" y="143.50"></text></g><g><title>evaluate_obligation (377,205 samples, 0.67%)</title><rect x="51.7718%" y="117" width="0.6688%" height="15" fill="rgb(236,23,11)"/><text x="52.0218%" y="127.50"></text></g><g><title>trait_impls_of (284,653 samples, 0.50%)</title><rect x="51.9359%" y="101" width="0.5047%" height="15" fill="rgb(205,117,38)"/><text x="52.1859%" y="111.50"></text></g><g><title>implementations_of_trait (67,661 samples, 0.12%)</title><rect x="52.3206%" y="85" width="0.1200%" height="15" fill="rgb(237,72,25)"/><text x="52.5706%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (59,130 samples, 0.10%)</title><rect x="52.3358%" y="69" width="0.1048%" height="15" fill="rgb(244,70,9)"/><text x="52.5858%" y="79.50"></text></g><g><title>item_attrs (86,050 samples, 0.15%)</title><rect x="52.4406%" y="133" width="0.1526%" height="15" fill="rgb(217,125,39)"/><text x="52.6906%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (82,840 samples, 0.15%)</title><rect x="52.4463%" y="117" width="0.1469%" height="15" fill="rgb(235,36,10)"/><text x="52.6963%" y="127.50"></text></g><g><title>predicates_of (100,212 samples, 0.18%)</title><rect x="52.6623%" y="133" width="0.1777%" height="15" fill="rgb(251,123,47)"/><text x="52.9123%" y="143.50"></text></g><g><title>predicates_defined_on (68,631 samples, 0.12%)</title><rect x="52.7183%" y="117" width="0.1217%" height="15" fill="rgb(221,13,13)"/><text x="52.9683%" y="127.50"></text></g><g><title>typeck (2,345,166 samples, 4.16%)</title><rect x="48.7335%" y="149" width="4.1584%" height="15" fill="rgb(238,131,9)"/><text x="48.9835%" y="159.50">typeck</text></g><g><title>item_bodies_checking (13,315,057 samples, 23.61%)</title><rect x="29.3284%" y="197" width="23.6097%" height="15" fill="rgb(211,50,8)"/><text x="29.5784%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,311,557 samples, 23.60%)</title><rect x="29.3346%" y="181" width="23.6035%" height="15" fill="rgb(245,182,24)"/><text x="29.5846%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (13,287,417 samples, 23.56%)</title><rect x="29.3774%" y="165" width="23.5607%" height="15" fill="rgb(242,14,37)"/><text x="29.6274%" y="175.50">typeck</text></g><g><title>item_types_checking (311,293 samples, 0.55%)</title><rect x="52.9381%" y="197" width="0.5520%" height="15" fill="rgb(246,228,12)"/><text x="53.1881%" y="207.50"></text></g><g><title>check_mod_item_types (305,953 samples, 0.54%)</title><rect x="52.9476%" y="181" width="0.5425%" height="15" fill="rgb(213,55,15)"/><text x="53.1976%" y="191.50"></text></g><g><title>fn_sig (137,520 samples, 0.24%)</title><rect x="53.8168%" y="165" width="0.2438%" height="15" fill="rgb(209,9,3)"/><text x="54.0668%" y="175.50"></text></g><g><title>late_bound_vars_map (61,510 samples, 0.11%)</title><rect x="53.9516%" y="149" width="0.1091%" height="15" fill="rgb(230,59,30)"/><text x="54.2016%" y="159.50"></text></g><g><title>is_late_bound_map (124,201 samples, 0.22%)</title><rect x="54.2077%" y="149" width="0.2202%" height="15" fill="rgb(209,121,21)"/><text x="54.4577%" y="159.50"></text></g><g><title>resolve_lifetimes (118,981 samples, 0.21%)</title><rect x="54.2170%" y="133" width="0.2110%" height="15" fill="rgb(220,109,13)"/><text x="54.4670%" y="143.50"></text></g><g><title>lint_levels (70,001 samples, 0.12%)</title><rect x="54.3038%" y="117" width="0.1241%" height="15" fill="rgb(232,18,1)"/><text x="54.5538%" y="127.50"></text></g><g><title>named_region_map (93,782 samples, 0.17%)</title><rect x="54.4280%" y="149" width="0.1663%" height="15" fill="rgb(215,41,42)"/><text x="54.6780%" y="159.50"></text></g><g><title>resolve_lifetimes (87,682 samples, 0.16%)</title><rect x="54.4388%" y="133" width="0.1555%" height="15" fill="rgb(224,123,36)"/><text x="54.6888%" y="143.50"></text></g><g><title>generics_of (314,885 samples, 0.56%)</title><rect x="54.0607%" y="165" width="0.5583%" height="15" fill="rgb(240,125,3)"/><text x="54.3107%" y="175.50"></text></g><g><title>explicit_predicates_of (124,044 samples, 0.22%)</title><rect x="54.8181%" y="133" width="0.2199%" height="15" fill="rgb(205,98,50)"/><text x="55.0681%" y="143.50"></text></g><g><title>named_region_map (64,851 samples, 0.11%)</title><rect x="55.4880%" y="85" width="0.1150%" height="15" fill="rgb(205,185,37)"/><text x="55.7380%" y="95.50"></text></g><g><title>predicates_of (561,929 samples, 1.00%)</title><rect x="54.6754%" y="165" width="0.9964%" height="15" fill="rgb(238,207,15)"/><text x="54.9254%" y="175.50"></text></g><g><title>predicates_defined_on (532,469 samples, 0.94%)</title><rect x="54.7276%" y="149" width="0.9442%" height="15" fill="rgb(213,199,42)"/><text x="54.9776%" y="159.50"></text></g><g><title>inferred_outlives_of (357,385 samples, 0.63%)</title><rect x="55.0381%" y="133" width="0.6337%" height="15" fill="rgb(235,201,11)"/><text x="55.2881%" y="143.50"></text></g><g><title>inferred_outlives_crate (342,694 samples, 0.61%)</title><rect x="55.0641%" y="117" width="0.6077%" height="15" fill="rgb(207,46,11)"/><text x="55.3141%" y="127.50"></text></g><g><title>type_of (172,162 samples, 0.31%)</title><rect x="55.3665%" y="101" width="0.3053%" height="15" fill="rgb(241,35,35)"/><text x="55.6165%" y="111.50"></text></g><g><title>type_collecting (1,358,675 samples, 2.41%)</title><rect x="53.4948%" y="197" width="2.4091%" height="15" fill="rgb(243,32,47)"/><text x="53.7448%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (1,341,845 samples, 2.38%)</title><rect x="53.5247%" y="181" width="2.3793%" height="15" fill="rgb(247,202,23)"/><text x="53.7747%" y="191.50">co..</text></g><g><title>type_of (102,460 samples, 0.18%)</title><rect x="55.7223%" y="165" width="0.1817%" height="15" fill="rgb(219,102,11)"/><text x="55.9723%" y="175.50"></text></g><g><title>evaluate_obligation (300,153 samples, 0.53%)</title><rect x="57.0285%" y="165" width="0.5322%" height="15" fill="rgb(243,110,44)"/><text x="57.2785%" y="175.50"></text></g><g><title>trait_impls_of (60,331 samples, 0.11%)</title><rect x="57.4537%" y="149" width="0.1070%" height="15" fill="rgb(222,74,54)"/><text x="57.7037%" y="159.50"></text></g><g><title>implied_outlives_bounds (101,623 samples, 0.18%)</title><rect x="57.5607%" y="165" width="0.1802%" height="15" fill="rgb(216,99,12)"/><text x="57.8107%" y="175.50"></text></g><g><title>param_env (82,560 samples, 0.15%)</title><rect x="57.7409%" y="165" width="0.1464%" height="15" fill="rgb(226,22,26)"/><text x="57.9909%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,160,592 samples, 2.06%)</title><rect x="56.0673%" y="181" width="2.0579%" height="15" fill="rgb(217,163,10)"/><text x="56.3173%" y="191.50">c..</text></g><g><title>region_scope_tree (124,090 samples, 0.22%)</title><rect x="57.9052%" y="165" width="0.2200%" height="15" fill="rgb(213,25,53)"/><text x="58.1552%" y="175.50"></text></g><g><title>implied_outlives_bounds (110,401 samples, 0.20%)</title><rect x="59.6781%" y="165" width="0.1958%" height="15" fill="rgb(252,105,26)"/><text x="59.9281%" y="175.50"></text></g><g><title>param_env (295,013 samples, 0.52%)</title><rect x="59.8739%" y="165" width="0.5231%" height="15" fill="rgb(220,39,43)"/><text x="60.1239%" y="175.50"></text></g><g><title>check_item_well_formed (1,390,695 samples, 2.47%)</title><rect x="58.1252%" y="181" width="2.4659%" height="15" fill="rgb(229,68,48)"/><text x="58.3752%" y="191.50">ch..</text></g><g><title>variances_of (76,401 samples, 0.14%)</title><rect x="60.4557%" y="165" width="0.1355%" height="15" fill="rgb(252,8,32)"/><text x="60.7057%" y="175.50"></text></g><g><title>crate_variances (70,771 samples, 0.13%)</title><rect x="60.4657%" y="149" width="0.1255%" height="15" fill="rgb(223,20,43)"/><text x="60.7157%" y="159.50"></text></g><g><title>analysis (33,899,844 samples, 60.11%)</title><rect x="1.1045%" y="229" width="60.1098%" height="15" fill="rgb(229,81,49)"/><text x="1.3545%" y="239.50">analysis</text></g><g><title>type_check_crate (19,267,513 samples, 34.16%)</title><rect x="27.0499%" y="213" width="34.1644%" height="15" fill="rgb(236,28,36)"/><text x="27.2999%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,993,273 samples, 5.31%)</title><rect x="55.9067%" y="197" width="5.3075%" height="15" fill="rgb(249,185,26)"/><text x="56.1567%" y="207.50">wf_che..</text></g><g><title>check_trait_item_well_formed (351,404 samples, 0.62%)</title><rect x="60.5912%" y="181" width="0.6231%" height="15" fill="rgb(249,174,33)"/><text x="60.8412%" y="191.50"></text></g><g><title>codegen_crate (352,564 samples, 0.63%)</title><rect x="61.2281%" y="229" width="0.6252%" height="15" fill="rgb(233,201,37)"/><text x="61.4781%" y="239.50"></text></g><g><title>AST_validation (113,741 samples, 0.20%)</title><rect x="62.1867%" y="213" width="0.2017%" height="15" fill="rgb(221,78,26)"/><text x="62.4367%" y="223.50"></text></g><g><title>crate_injection (91,091 samples, 0.16%)</title><rect x="62.4556%" y="213" width="0.1615%" height="15" fill="rgb(250,127,30)"/><text x="62.7056%" y="223.50"></text></g><g><title>metadata_load_macro (116,431 samples, 0.21%)</title><rect x="80.5297%" y="181" width="0.2065%" height="15" fill="rgb(230,49,44)"/><text x="80.7797%" y="191.50"></text></g><g><title>metadata_register_crate (2,387,756 samples, 4.23%)</title><rect x="80.7362%" y="181" width="4.2339%" height="15" fill="rgb(229,67,23)"/><text x="80.9862%" y="191.50">metad..</text></g><g><title>metadata_register_crate (894,800 samples, 1.59%)</title><rect x="83.3834%" y="165" width="1.5866%" height="15" fill="rgb(249,83,47)"/><text x="83.6334%" y="175.50"></text></g><g><title>metadata_register_crate (70,152 samples, 0.12%)</title><rect x="84.8457%" y="149" width="0.1244%" height="15" fill="rgb(215,43,3)"/><text x="85.0957%" y="159.50"></text></g><g><title>macro_expand_crate (12,686,360 samples, 22.49%)</title><rect x="62.6171%" y="213" width="22.4949%" height="15" fill="rgb(238,154,13)"/><text x="62.8671%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (12,661,500 samples, 22.45%)</title><rect x="62.6612%" y="197" width="22.4508%" height="15" fill="rgb(219,56,2)"/><text x="62.9112%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (80,081 samples, 0.14%)</title><rect x="84.9700%" y="181" width="0.1420%" height="15" fill="rgb(233,0,4)"/><text x="85.2200%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (70,051 samples, 0.12%)</title><rect x="85.1196%" y="213" width="0.1242%" height="15" fill="rgb(235,30,7)"/><text x="85.3696%" y="223.50"></text></g><g><title>finalize_imports (322,003 samples, 0.57%)</title><rect x="85.2587%" y="197" width="0.5710%" height="15" fill="rgb(250,79,13)"/><text x="85.5087%" y="207.50"></text></g><g><title>late_resolve_crate (1,648,899 samples, 2.92%)</title><rect x="85.8509%" y="197" width="2.9238%" height="15" fill="rgb(211,146,34)"/><text x="86.1009%" y="207.50">la..</text></g><g><title>configure_and_expand (15,249,389 samples, 27.04%)</title><rect x="61.8532%" y="229" width="27.0396%" height="15" fill="rgb(228,22,38)"/><text x="62.1032%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,057,912 samples, 3.65%)</title><rect x="85.2438%" y="213" width="3.6490%" height="15" fill="rgb(235,168,5)"/><text x="85.4938%" y="223.50">reso..</text></g><g><title>drop_ast (92,851 samples, 0.16%)</title><rect x="88.8928%" y="229" width="0.1646%" height="15" fill="rgb(221,155,16)"/><text x="89.1428%" y="239.50"></text></g><g><title>early_lint_checks (191,482 samples, 0.34%)</title><rect x="89.0820%" y="229" width="0.3395%" height="15" fill="rgb(215,215,53)"/><text x="89.3320%" y="239.50"></text></g><g><title>free_global_ctxt (2,582,948 samples, 4.58%)</title><rect x="89.4216%" y="229" width="4.5800%" height="15" fill="rgb(223,4,10)"/><text x="89.6716%" y="239.50">free_..</text></g><g><title>crate_hash (69,281 samples, 0.12%)</title><rect x="94.6373%" y="213" width="0.1228%" height="15" fill="rgb(234,103,6)"/><text x="94.8873%" y="223.50"></text></g><g><title>generate_crate_metadata (585,007 samples, 1.04%)</title><rect x="94.0015%" y="229" width="1.0373%" height="15" fill="rgb(227,97,0)"/><text x="94.2515%" y="239.50"></text></g><g><title>hir_lowering (1,361,235 samples, 2.41%)</title><rect x="95.0389%" y="229" width="2.4137%" height="15" fill="rgb(234,150,53)"/><text x="95.2889%" y="239.50">hi..</text></g><g><title>parse_crate (265,293 samples, 0.47%)</title><rect x="97.5329%" y="229" width="0.4704%" height="15" fill="rgb(228,201,54)"/><text x="97.7829%" y="239.50"></text></g><g><title>prepare_outputs (274,703 samples, 0.49%)</title><rect x="98.0175%" y="229" width="0.4871%" height="15" fill="rgb(222,22,37)"/><text x="98.2675%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (386,785 samples, 0.69%)</title><rect x="98.5046%" y="229" width="0.6858%" height="15" fill="rgb(237,53,32)"/><text x="98.7546%" y="239.50"></text></g><g><title>setup_global_ctxt (124,372 samples, 0.22%)</title><rect x="99.2084%" y="229" width="0.2205%" height="15" fill="rgb(233,25,53)"/><text x="99.4584%" y="239.50"></text></g><g><title>all (56,396,543 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (56,396,543 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (322,053 samples, 0.57%)</title><rect x="99.4289%" y="229" width="0.5711%" height="15" fill="rgb(235,28,35)"/><text x="99.6789%" y="239.50"></text></g></svg></svg>