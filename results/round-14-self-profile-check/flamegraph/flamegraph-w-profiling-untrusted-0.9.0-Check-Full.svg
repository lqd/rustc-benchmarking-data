<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (65,361 samples, 0.12%)</title><rect x="9.9728%" y="149" width="0.1214%" height="15" fill="rgb(227,0,7)"/><text x="10.2228%" y="159.50"></text></g><g><title>is_sized_raw (65,140 samples, 0.12%)</title><rect x="10.1476%" y="149" width="0.1209%" height="15" fill="rgb(217,0,24)"/><text x="10.3976%" y="159.50"></text></g><g><title>param_env (128,072 samples, 0.24%)</title><rect x="11.6243%" y="117" width="0.2378%" height="15" fill="rgb(221,193,54)"/><text x="11.8743%" y="127.50"></text></g><g><title>item_attrs (163,712 samples, 0.30%)</title><rect x="12.2958%" y="85" width="0.3040%" height="15" fill="rgb(248,212,6)"/><text x="12.5458%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (158,702 samples, 0.29%)</title><rect x="12.3051%" y="69" width="0.2947%" height="15" fill="rgb(208,68,35)"/><text x="12.5551%" y="79.50"></text></g><g><title>codegen_fn_attrs (214,042 samples, 0.40%)</title><rect x="12.2184%" y="101" width="0.3974%" height="15" fill="rgb(232,128,0)"/><text x="12.4684%" y="111.50"></text></g><g><title>is_copy_raw (70,001 samples, 0.13%)</title><rect x="14.5369%" y="85" width="0.1300%" height="15" fill="rgb(207,160,47)"/><text x="14.7869%" y="95.50"></text></g><g><title>evaluate_obligation (59,511 samples, 0.11%)</title><rect x="14.5564%" y="69" width="0.1105%" height="15" fill="rgb(228,23,34)"/><text x="14.8064%" y="79.50"></text></g><g><title>is_copy_raw (85,921 samples, 0.16%)</title><rect x="14.7960%" y="53" width="0.1595%" height="15" fill="rgb(218,30,26)"/><text x="15.0460%" y="63.50"></text></g><g><title>evaluate_obligation (79,631 samples, 0.15%)</title><rect x="14.8076%" y="37" width="0.1479%" height="15" fill="rgb(220,122,19)"/><text x="15.0576%" y="47.50"></text></g><g><title>adt_drop_tys (110,381 samples, 0.20%)</title><rect x="14.7793%" y="69" width="0.2049%" height="15" fill="rgb(250,228,42)"/><text x="15.0293%" y="79.50"></text></g><g><title>needs_drop_raw (799,077 samples, 1.48%)</title><rect x="14.6669%" y="85" width="1.4837%" height="15" fill="rgb(240,193,28)"/><text x="14.9169%" y="95.50"></text></g><g><title>is_copy_raw (628,146 samples, 1.17%)</title><rect x="14.9842%" y="69" width="1.1663%" height="15" fill="rgb(216,20,37)"/><text x="15.2342%" y="79.50"></text></g><g><title>evaluate_obligation (506,886 samples, 0.94%)</title><rect x="15.2094%" y="53" width="0.9412%" height="15" fill="rgb(206,188,39)"/><text x="15.4594%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (92,051 samples, 0.17%)</title><rect x="16.3293%" y="69" width="0.1709%" height="15" fill="rgb(217,207,13)"/><text x="16.5793%" y="79.50"></text></g><g><title>resolve_instance (275,434 samples, 0.51%)</title><rect x="16.1505%" y="85" width="0.5114%" height="15" fill="rgb(231,73,38)"/><text x="16.4005%" y="95.50"></text></g><g><title>thir_body (350,266 samples, 0.65%)</title><rect x="16.6857%" y="85" width="0.6504%" height="15" fill="rgb(225,20,46)"/><text x="16.9357%" y="95.50"></text></g><g><title>mir_const (3,466,800 samples, 6.44%)</title><rect x="10.9181%" y="133" width="6.4369%" height="15" fill="rgb(210,31,41)"/><text x="11.1681%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (2,958,405 samples, 5.49%)</title><rect x="11.8621%" y="117" width="5.4930%" height="15" fill="rgb(221,200,47)"/><text x="12.1121%" y="127.50">unsafet..</text></g><g><title>mir_built (2,552,450 samples, 4.74%)</title><rect x="12.6158%" y="101" width="4.7392%" height="15" fill="rgb(226,26,5)"/><text x="12.8658%" y="111.50">mir_bu..</text></g><g><title>impl_trait_ref (84,451 samples, 0.16%)</title><rect x="17.5810%" y="85" width="0.1568%" height="15" fill="rgb(249,33,26)"/><text x="17.8310%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (84,021 samples, 0.16%)</title><rect x="17.5818%" y="69" width="0.1560%" height="15" fill="rgb(235,183,28)"/><text x="17.8318%" y="79.50"></text></g><g><title>is_freeze_raw (137,922 samples, 0.26%)</title><rect x="17.5156%" y="117" width="0.2561%" height="15" fill="rgb(221,5,38)"/><text x="17.7656%" y="127.50"></text></g><g><title>evaluate_obligation (134,882 samples, 0.25%)</title><rect x="17.5213%" y="101" width="0.2504%" height="15" fill="rgb(247,18,42)"/><text x="17.7713%" y="111.50"></text></g><g><title>mir_const (92,171 samples, 0.17%)</title><rect x="17.7736%" y="117" width="0.1711%" height="15" fill="rgb(241,131,45)"/><text x="18.0236%" y="127.50"></text></g><g><title>unsafety_check_result (70,570 samples, 0.13%)</title><rect x="17.8137%" y="101" width="0.1310%" height="15" fill="rgb(249,31,29)"/><text x="18.0637%" y="111.50"></text></g><g><title>mir_built (64,180 samples, 0.12%)</title><rect x="17.8256%" y="85" width="0.1192%" height="15" fill="rgb(225,111,53)"/><text x="18.0756%" y="95.50"></text></g><g><title>mir_promoted (4,148,319 samples, 7.70%)</title><rect x="10.2686%" y="149" width="7.7023%" height="15" fill="rgb(238,160,17)"/><text x="10.5186%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (331,674 samples, 0.62%)</title><rect x="17.3550%" y="133" width="0.6158%" height="15" fill="rgb(214,148,48)"/><text x="17.6050%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (102,613 samples, 0.19%)</title><rect x="17.9709%" y="149" width="0.1905%" height="15" fill="rgb(232,36,49)"/><text x="18.2209%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (272,585 samples, 0.51%)</title><rect x="18.1614%" y="149" width="0.5061%" height="15" fill="rgb(209,103,24)"/><text x="18.4114%" y="159.50"></text></g><g><title>normalize_projection_ty (178,214 samples, 0.33%)</title><rect x="18.3366%" y="133" width="0.3309%" height="15" fill="rgb(229,88,8)"/><text x="18.5866%" y="143.50"></text></g><g><title>type_op_normalize_predicate (152,513 samples, 0.28%)</title><rect x="18.6675%" y="149" width="0.2832%" height="15" fill="rgb(213,181,19)"/><text x="18.9175%" y="159.50"></text></g><g><title>normalize_projection_ty (109,361 samples, 0.20%)</title><rect x="18.7476%" y="133" width="0.2031%" height="15" fill="rgb(254,191,54)"/><text x="18.9976%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,049,964 samples, 1.95%)</title><rect x="18.9507%" y="149" width="1.9495%" height="15" fill="rgb(241,83,37)"/><text x="19.2007%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (10,472,946 samples, 19.45%)</title><rect x="1.4648%" y="181" width="19.4455%" height="15" fill="rgb(233,36,39)"/><text x="1.7148%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,413,965 samples, 19.34%)</title><rect x="1.5743%" y="165" width="19.3359%" height="15" fill="rgb(226,3,54)"/><text x="1.8243%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (144,592 samples, 0.27%)</title><rect x="20.9102%" y="181" width="0.2685%" height="15" fill="rgb(245,192,40)"/><text x="21.1602%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (116,341 samples, 0.22%)</title><rect x="20.9627%" y="165" width="0.2160%" height="15" fill="rgb(238,167,29)"/><text x="21.2127%" y="175.50"></text></g><g><title>hir_module_items (102,441 samples, 0.19%)</title><rect x="21.1787%" y="181" width="0.1902%" height="15" fill="rgb(232,182,51)"/><text x="21.4287%" y="191.50"></text></g><g><title>should_inherit_track_caller (112,651 samples, 0.21%)</title><rect x="21.8193%" y="133" width="0.2092%" height="15" fill="rgb(231,60,39)"/><text x="22.0693%" y="143.50"></text></g><g><title>codegen_fn_attrs (230,902 samples, 0.43%)</title><rect x="21.6356%" y="149" width="0.4287%" height="15" fill="rgb(208,69,12)"/><text x="21.8856%" y="159.50"></text></g><g><title>check_mod_attrs (353,073 samples, 0.66%)</title><rect x="21.4089%" y="165" width="0.6556%" height="15" fill="rgb(235,93,37)"/><text x="21.6589%" y="175.50"></text></g><g><title>check_mod_const_bodies (65,201 samples, 0.12%)</title><rect x="22.0645%" y="165" width="0.1211%" height="15" fill="rgb(213,116,39)"/><text x="22.3145%" y="175.50"></text></g><g><title>lookup_deprecation_entry (75,181 samples, 0.14%)</title><rect x="22.3922%" y="149" width="0.1396%" height="15" fill="rgb(222,207,29)"/><text x="22.6422%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (184,153 samples, 0.34%)</title><rect x="22.2586%" y="165" width="0.3419%" height="15" fill="rgb(206,96,30)"/><text x="22.5086%" y="175.50"></text></g><g><title>misc_checking_1 (698,298 samples, 1.30%)</title><rect x="21.3696%" y="181" width="1.2966%" height="15" fill="rgb(218,138,4)"/><text x="21.6196%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (196,612 samples, 0.37%)</title><rect x="22.6694%" y="165" width="0.3651%" height="15" fill="rgb(250,191,14)"/><text x="22.9194%" y="175.50"></text></g><g><title>check_mod_liveness (155,951 samples, 0.29%)</title><rect x="22.7449%" y="149" width="0.2896%" height="15" fill="rgb(239,60,40)"/><text x="22.9949%" y="159.50"></text></g><g><title>misc_checking_2 (434,824 samples, 0.81%)</title><rect x="22.6661%" y="181" width="0.8074%" height="15" fill="rgb(206,27,48)"/><text x="22.9161%" y="191.50"></text></g><g><title>match_checking (236,472 samples, 0.44%)</title><rect x="23.0344%" y="165" width="0.4391%" height="15" fill="rgb(225,35,8)"/><text x="23.2844%" y="175.50"></text></g><g><title>check_match (221,252 samples, 0.41%)</title><rect x="23.0627%" y="149" width="0.4108%" height="15" fill="rgb(250,213,24)"/><text x="23.3127%" y="159.50"></text></g><g><title>check_private_in_public (103,431 samples, 0.19%)</title><rect x="23.4900%" y="165" width="0.1920%" height="15" fill="rgb(247,123,22)"/><text x="23.7400%" y="175.50"></text></g><g><title>death_checking (256,702 samples, 0.48%)</title><rect x="23.6820%" y="165" width="0.4766%" height="15" fill="rgb(231,138,38)"/><text x="23.9320%" y="175.50"></text></g><g><title>item_attrs (97,602 samples, 0.18%)</title><rect x="23.9774%" y="149" width="0.1812%" height="15" fill="rgb(231,145,46)"/><text x="24.2274%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,352 samples, 0.18%)</title><rect x="23.9797%" y="133" width="0.1789%" height="15" fill="rgb(251,118,11)"/><text x="24.2297%" y="143.50"></text></g><g><title>param_env (100,680 samples, 0.19%)</title><rect x="24.7231%" y="133" width="0.1869%" height="15" fill="rgb(217,147,25)"/><text x="24.9731%" y="143.50"></text></g><g><title>crate_lints (719,368 samples, 1.34%)</title><rect x="24.1613%" y="149" width="1.3357%" height="15" fill="rgb(247,81,37)"/><text x="24.4113%" y="159.50"></text></g><g><title>type_of (314,664 samples, 0.58%)</title><rect x="24.9127%" y="133" width="0.5842%" height="15" fill="rgb(209,12,38)"/><text x="25.1627%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (237,914 samples, 0.44%)</title><rect x="25.0552%" y="117" width="0.4417%" height="15" fill="rgb(227,1,9)"/><text x="25.3052%" y="127.50"></text></g><g><title>lint_checking (853,819 samples, 1.59%)</title><rect x="24.1586%" y="165" width="1.5853%" height="15" fill="rgb(248,47,43)"/><text x="24.4086%" y="175.50"></text></g><g><title>module_lints (133,031 samples, 0.25%)</title><rect x="25.4969%" y="149" width="0.2470%" height="15" fill="rgb(221,10,30)"/><text x="25.7469%" y="159.50"></text></g><g><title>lint_mod (129,561 samples, 0.24%)</title><rect x="25.5034%" y="133" width="0.2406%" height="15" fill="rgb(210,229,1)"/><text x="25.7534%" y="143.50"></text></g><g><title>privacy_access_levels (117,271 samples, 0.22%)</title><rect x="25.7439%" y="165" width="0.2177%" height="15" fill="rgb(222,148,37)"/><text x="25.9939%" y="175.50"></text></g><g><title>privacy_checking_modules (312,154 samples, 0.58%)</title><rect x="25.9617%" y="165" width="0.5796%" height="15" fill="rgb(234,67,33)"/><text x="26.2117%" y="175.50"></text></g><g><title>check_mod_privacy (309,054 samples, 0.57%)</title><rect x="25.9674%" y="149" width="0.5738%" height="15" fill="rgb(247,98,35)"/><text x="26.2174%" y="159.50"></text></g><g><title>misc_checking_3 (1,664,029 samples, 3.09%)</title><rect x="23.4735%" y="181" width="3.0897%" height="15" fill="rgb(247,138,52)"/><text x="23.7235%" y="191.50">mis..</text></g><g><title>is_copy_raw (175,041 samples, 0.33%)</title><rect x="26.7928%" y="133" width="0.3250%" height="15" fill="rgb(213,79,30)"/><text x="27.0428%" y="143.50"></text></g><g><title>evaluate_obligation (139,181 samples, 0.26%)</title><rect x="26.8594%" y="117" width="0.2584%" height="15" fill="rgb(246,177,23)"/><text x="27.1094%" y="127.50"></text></g><g><title>impl_parent (805,288 samples, 1.50%)</title><rect x="29.8931%" y="117" width="1.4952%" height="15" fill="rgb(230,62,27)"/><text x="30.1431%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (468,874 samples, 0.87%)</title><rect x="30.5177%" y="101" width="0.8706%" height="15" fill="rgb(216,154,8)"/><text x="30.7677%" y="111.50"></text></g><g><title>impl_trait_ref (1,557,902 samples, 2.89%)</title><rect x="31.3883%" y="117" width="2.8926%" height="15" fill="rgb(244,35,45)"/><text x="31.6383%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,218,611 samples, 2.26%)</title><rect x="32.0183%" y="101" width="2.2626%" height="15" fill="rgb(251,115,12)"/><text x="32.2683%" y="111.50">m..</text></g><g><title>trait_impls_of (285,994 samples, 0.53%)</title><rect x="34.3225%" y="117" width="0.5310%" height="15" fill="rgb(240,54,50)"/><text x="34.5725%" y="127.50"></text></g><g><title>implementations_of_trait (68,360 samples, 0.13%)</title><rect x="34.7265%" y="101" width="0.1269%" height="15" fill="rgb(233,84,52)"/><text x="34.9765%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (61,860 samples, 0.11%)</title><rect x="34.7386%" y="85" width="0.1149%" height="15" fill="rgb(207,117,47)"/><text x="34.9886%" y="95.50"></text></g><g><title>coherent_trait (4,414,208 samples, 8.20%)</title><rect x="26.6589%" y="149" width="8.1960%" height="15" fill="rgb(249,43,39)"/><text x="26.9089%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (4,127,145 samples, 7.66%)</title><rect x="27.1919%" y="133" width="7.6630%" height="15" fill="rgb(209,38,44)"/><text x="27.4419%" y="143.50">specializa..</text></g><g><title>coherence_checking (4,471,750 samples, 8.30%)</title><rect x="26.6322%" y="165" width="8.3028%" height="15" fill="rgb(236,212,23)"/><text x="26.8822%" y="175.50">coherence_ch..</text></g><g><title>associated_item (296,742 samples, 0.55%)</title><rect x="47.9316%" y="101" width="0.5510%" height="15" fill="rgb(242,79,21)"/><text x="48.1816%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (242,692 samples, 0.45%)</title><rect x="48.0320%" y="85" width="0.4506%" height="15" fill="rgb(211,96,35)"/><text x="48.2820%" y="95.50"></text></g><g><title>associated_items (410,773 samples, 0.76%)</title><rect x="47.7417%" y="117" width="0.7627%" height="15" fill="rgb(253,215,40)"/><text x="47.9917%" y="127.50"></text></g><g><title>dropck_outlives (244,433 samples, 0.45%)</title><rect x="48.5576%" y="117" width="0.4538%" height="15" fill="rgb(211,81,21)"/><text x="48.8076%" y="127.50"></text></g><g><title>adt_dtorck_constraint (95,802 samples, 0.18%)</title><rect x="48.8336%" y="101" width="0.1779%" height="15" fill="rgb(208,190,38)"/><text x="49.0836%" y="111.50"></text></g><g><title>specializes (114,282 samples, 0.21%)</title><rect x="50.4320%" y="101" width="0.2122%" height="15" fill="rgb(235,213,38)"/><text x="50.6820%" y="111.50"></text></g><g><title>param_env (97,072 samples, 0.18%)</title><rect x="50.4640%" y="85" width="0.1802%" height="15" fill="rgb(237,122,38)"/><text x="50.7140%" y="95.50"></text></g><g><title>def_span (78,602 samples, 0.15%)</title><rect x="50.4983%" y="69" width="0.1459%" height="15" fill="rgb(244,218,35)"/><text x="50.7483%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (77,412 samples, 0.14%)</title><rect x="50.5005%" y="53" width="0.1437%" height="15" fill="rgb(240,68,47)"/><text x="50.7505%" y="63.50"></text></g><g><title>trait_impls_of (77,131 samples, 0.14%)</title><rect x="50.6622%" y="101" width="0.1432%" height="15" fill="rgb(210,16,53)"/><text x="50.9122%" y="111.50"></text></g><g><title>evaluate_obligation (967,102 samples, 1.80%)</title><rect x="49.0114%" y="117" width="1.7956%" height="15" fill="rgb(235,124,12)"/><text x="49.2614%" y="127.50">e..</text></g><g><title>generics_of (64,691 samples, 0.12%)</title><rect x="50.9310%" y="117" width="0.1201%" height="15" fill="rgb(224,169,11)"/><text x="51.1810%" y="127.50"></text></g><g><title>method_autoderef_steps (234,543 samples, 0.44%)</title><rect x="51.2987%" y="117" width="0.4355%" height="15" fill="rgb(250,166,2)"/><text x="51.5487%" y="127.50"></text></g><g><title>evaluate_obligation (120,570 samples, 0.22%)</title><rect x="51.5103%" y="101" width="0.2239%" height="15" fill="rgb(242,216,29)"/><text x="51.7603%" y="111.50"></text></g><g><title>explicit_predicates_of (82,060 samples, 0.15%)</title><rect x="51.9811%" y="85" width="0.1524%" height="15" fill="rgb(230,116,27)"/><text x="52.2311%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (69,810 samples, 0.13%)</title><rect x="52.0038%" y="69" width="0.1296%" height="15" fill="rgb(228,99,48)"/><text x="52.2538%" y="79.50"></text></g><g><title>predicates_of (220,822 samples, 0.41%)</title><rect x="51.7888%" y="117" width="0.4100%" height="15" fill="rgb(253,11,6)"/><text x="52.0388%" y="127.50"></text></g><g><title>predicates_defined_on (163,922 samples, 0.30%)</title><rect x="51.8945%" y="101" width="0.3044%" height="15" fill="rgb(247,143,39)"/><text x="52.1445%" y="111.50"></text></g><g><title>associated_item (76,102 samples, 0.14%)</title><rect x="53.7558%" y="85" width="0.1413%" height="15" fill="rgb(236,97,10)"/><text x="54.0058%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (54,421 samples, 0.10%)</title><rect x="53.7961%" y="69" width="0.1010%" height="15" fill="rgb(233,208,19)"/><text x="54.0461%" y="79.50"></text></g><g><title>associated_items (118,862 samples, 0.22%)</title><rect x="53.6831%" y="101" width="0.2207%" height="15" fill="rgb(216,164,2)"/><text x="53.9331%" y="111.50"></text></g><g><title>evaluate_obligation (62,210 samples, 0.12%)</title><rect x="53.9345%" y="101" width="0.1155%" height="15" fill="rgb(220,129,5)"/><text x="54.1845%" y="111.50"></text></g><g><title>typeck (1,048,501 samples, 1.95%)</title><rect x="52.2939%" y="117" width="1.9468%" height="15" fill="rgb(242,17,10)"/><text x="52.5439%" y="127.50">t..</text></g><g><title>item_bodies_checking (10,407,915 samples, 19.32%)</title><rect x="34.9766%" y="165" width="19.3247%" height="15" fill="rgb(242,107,0)"/><text x="35.2266%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,405,685 samples, 19.32%)</title><rect x="34.9807%" y="149" width="19.3206%" height="15" fill="rgb(251,28,31)"/><text x="35.2307%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (10,366,115 samples, 19.25%)</title><rect x="35.0542%" y="133" width="19.2471%" height="15" fill="rgb(233,223,10)"/><text x="35.3042%" y="143.50">typeck</text></g><g><title>item_types_checking (288,553 samples, 0.54%)</title><rect x="54.3013%" y="165" width="0.5358%" height="15" fill="rgb(215,21,27)"/><text x="54.5513%" y="175.50"></text></g><g><title>check_mod_item_types (284,913 samples, 0.53%)</title><rect x="54.3080%" y="149" width="0.5290%" height="15" fill="rgb(232,23,21)"/><text x="54.5580%" y="159.50"></text></g><g><title>fn_sig (133,120 samples, 0.25%)</title><rect x="55.0991%" y="133" width="0.2472%" height="15" fill="rgb(244,5,23)"/><text x="55.3491%" y="143.50"></text></g><g><title>is_late_bound_map (241,532 samples, 0.45%)</title><rect x="55.5225%" y="117" width="0.4485%" height="15" fill="rgb(226,81,46)"/><text x="55.7725%" y="127.50"></text></g><g><title>resolve_lifetimes (216,842 samples, 0.40%)</title><rect x="55.5684%" y="101" width="0.4026%" height="15" fill="rgb(247,70,30)"/><text x="55.8184%" y="111.50"></text></g><g><title>named_region_map (115,071 samples, 0.21%)</title><rect x="55.9710%" y="117" width="0.2137%" height="15" fill="rgb(212,68,19)"/><text x="56.2210%" y="127.50"></text></g><g><title>resolve_lifetimes (105,541 samples, 0.20%)</title><rect x="55.9887%" y="101" width="0.1960%" height="15" fill="rgb(240,187,13)"/><text x="56.2387%" y="111.50"></text></g><g><title>lint_levels (76,581 samples, 0.14%)</title><rect x="56.0424%" y="85" width="0.1422%" height="15" fill="rgb(223,113,26)"/><text x="56.2924%" y="95.50"></text></g><g><title>generics_of (456,565 samples, 0.85%)</title><rect x="55.3462%" y="133" width="0.8477%" height="15" fill="rgb(206,192,2)"/><text x="55.5962%" y="143.50"></text></g><g><title>explicit_predicates_of (242,142 samples, 0.45%)</title><rect x="56.3811%" y="101" width="0.4496%" height="15" fill="rgb(241,108,4)"/><text x="56.6311%" y="111.50"></text></g><g><title>predicates_of (364,733 samples, 0.68%)</title><rect x="56.2593%" y="133" width="0.6772%" height="15" fill="rgb(247,173,49)"/><text x="56.5093%" y="143.50"></text></g><g><title>predicates_defined_on (341,113 samples, 0.63%)</title><rect x="56.3032%" y="117" width="0.6334%" height="15" fill="rgb(224,114,35)"/><text x="56.5532%" y="127.50"></text></g><g><title>inferred_outlives_of (56,971 samples, 0.11%)</title><rect x="56.8307%" y="101" width="0.1058%" height="15" fill="rgb(245,159,27)"/><text x="57.0807%" y="111.50"></text></g><g><title>type_collecting (1,183,103 samples, 2.20%)</title><rect x="54.8402%" y="165" width="2.1967%" height="15" fill="rgb(245,172,44)"/><text x="55.0902%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,174,053 samples, 2.18%)</title><rect x="54.8570%" y="149" width="2.1799%" height="15" fill="rgb(236,23,11)"/><text x="55.1070%" y="159.50">c..</text></g><g><title>type_of (54,040 samples, 0.10%)</title><rect x="56.9365%" y="133" width="0.1003%" height="15" fill="rgb(205,117,38)"/><text x="57.1865%" y="143.50"></text></g><g><title>evaluate_obligation (228,043 samples, 0.42%)</title><rect x="59.1293%" y="133" width="0.4234%" height="15" fill="rgb(237,72,25)"/><text x="59.3793%" y="143.50"></text></g><g><title>implied_outlives_bounds (135,473 samples, 0.25%)</title><rect x="59.5527%" y="133" width="0.2515%" height="15" fill="rgb(244,70,9)"/><text x="59.8027%" y="143.50"></text></g><g><title>param_env (145,483 samples, 0.27%)</title><rect x="59.8042%" y="133" width="0.2701%" height="15" fill="rgb(217,125,39)"/><text x="60.0542%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,739,518 samples, 3.23%)</title><rect x="57.2078%" y="149" width="3.2298%" height="15" fill="rgb(235,36,10)"/><text x="57.4578%" y="159.50">che..</text></g><g><title>region_scope_tree (143,710 samples, 0.27%)</title><rect x="60.1708%" y="133" width="0.2668%" height="15" fill="rgb(251,123,47)"/><text x="60.4208%" y="143.50"></text></g><g><title>implied_outlives_bounds (63,641 samples, 0.12%)</title><rect x="61.6737%" y="133" width="0.1182%" height="15" fill="rgb(221,13,13)"/><text x="61.9237%" y="143.50"></text></g><g><title>param_env (86,551 samples, 0.16%)</title><rect x="61.7918%" y="133" width="0.1607%" height="15" fill="rgb(238,131,9)"/><text x="62.0418%" y="143.50"></text></g><g><title>analysis (32,862,155 samples, 61.02%)</title><rect x="1.1837%" y="197" width="61.0162%" height="15" fill="rgb(211,50,8)"/><text x="1.4337%" y="207.50">analysis</text></g><g><title>type_check_crate (19,193,283 samples, 35.64%)</title><rect x="26.5631%" y="181" width="35.6368%" height="15" fill="rgb(245,182,24)"/><text x="26.8131%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,777,951 samples, 5.16%)</title><rect x="57.0420%" y="165" width="5.1579%" height="15" fill="rgb(242,14,37)"/><text x="57.2920%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (949,142 samples, 1.76%)</title><rect x="60.4376%" y="149" width="1.7623%" height="15" fill="rgb(246,228,12)"/><text x="60.6876%" y="159.50"></text></g><g><title>variances_of (55,040 samples, 0.10%)</title><rect x="62.0977%" y="133" width="0.1022%" height="15" fill="rgb(213,55,15)"/><text x="62.3477%" y="143.50"></text></g><g><title>codegen_crate (308,044 samples, 0.57%)</title><rect x="62.2205%" y="197" width="0.5720%" height="15" fill="rgb(209,9,3)"/><text x="62.4705%" y="207.50"></text></g><g><title>AST_validation (149,322 samples, 0.28%)</title><rect x="63.2111%" y="181" width="0.2773%" height="15" fill="rgb(230,59,30)"/><text x="63.4611%" y="191.50"></text></g><g><title>crate_injection (78,531 samples, 0.15%)</title><rect x="63.5883%" y="181" width="0.1458%" height="15" fill="rgb(209,121,21)"/><text x="63.8383%" y="191.50"></text></g><g><title>metadata_load_macro (114,040 samples, 0.21%)</title><rect x="83.1484%" y="149" width="0.2117%" height="15" fill="rgb(220,109,13)"/><text x="83.3984%" y="159.50"></text></g><g><title>metadata_register_crate (205,312 samples, 0.38%)</title><rect x="83.3601%" y="149" width="0.3812%" height="15" fill="rgb(232,18,1)"/><text x="83.6101%" y="159.50"></text></g><g><title>macro_expand_crate (10,902,201 samples, 20.24%)</title><rect x="63.7341%" y="181" width="20.2425%" height="15" fill="rgb(215,41,42)"/><text x="63.9841%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (10,876,611 samples, 20.19%)</title><rect x="63.7816%" y="165" width="20.1950%" height="15" fill="rgb(224,123,36)"/><text x="64.0316%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (126,672 samples, 0.24%)</title><rect x="83.7413%" y="149" width="0.2352%" height="15" fill="rgb(240,125,3)"/><text x="83.9913%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (69,211 samples, 0.13%)</title><rect x="83.9996%" y="181" width="0.1285%" height="15" fill="rgb(205,98,50)"/><text x="84.2496%" y="191.50"></text></g><g><title>finalize_macro_resolutions (348,014 samples, 0.65%)</title><rect x="84.2190%" y="165" width="0.6462%" height="15" fill="rgb(205,185,37)"/><text x="84.4690%" y="175.50"></text></g><g><title>late_resolve_crate (1,451,697 samples, 2.70%)</title><rect x="84.8651%" y="165" width="2.6954%" height="15" fill="rgb(238,207,15)"/><text x="85.1151%" y="175.50">la..</text></g><g><title>configure_and_expand (13,434,089 samples, 24.94%)</title><rect x="62.7925%" y="197" width="24.9435%" height="15" fill="rgb(213,199,42)"/><text x="63.0425%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,943,132 samples, 3.61%)</title><rect x="84.1281%" y="181" width="3.6079%" height="15" fill="rgb(235,201,11)"/><text x="84.3781%" y="191.50">reso..</text></g><g><title>drop_ast (127,622 samples, 0.24%)</title><rect x="87.7360%" y="197" width="0.2370%" height="15" fill="rgb(207,46,11)"/><text x="87.9860%" y="207.50"></text></g><g><title>early_lint_checks (254,483 samples, 0.47%)</title><rect x="87.9971%" y="197" width="0.4725%" height="15" fill="rgb(241,35,35)"/><text x="88.2471%" y="207.50"></text></g><g><title>free_global_ctxt (1,559,387 samples, 2.90%)</title><rect x="88.4696%" y="197" width="2.8954%" height="15" fill="rgb(243,32,47)"/><text x="88.7196%" y="207.50">fr..</text></g><g><title>crate_hash (60,170 samples, 0.11%)</title><rect x="92.2213%" y="181" width="0.1117%" height="15" fill="rgb(247,202,23)"/><text x="92.4713%" y="191.50"></text></g><g><title>generate_crate_metadata (612,117 samples, 1.14%)</title><rect x="91.3650%" y="197" width="1.1365%" height="15" fill="rgb(219,102,11)"/><text x="91.6150%" y="207.50"></text></g><g><title>hir_lowering (1,964,102 samples, 3.65%)</title><rect x="92.5015%" y="197" width="3.6468%" height="15" fill="rgb(243,110,44)"/><text x="92.7515%" y="207.50">hir_..</text></g><g><title>parse_crate (832,410 samples, 1.55%)</title><rect x="96.2236%" y="197" width="1.5456%" height="15" fill="rgb(222,74,54)"/><text x="96.4736%" y="207.50"></text></g><g><title>prepare_outputs (258,673 samples, 0.48%)</title><rect x="97.7878%" y="197" width="0.4803%" height="15" fill="rgb(216,99,12)"/><text x="98.0378%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (478,495 samples, 0.89%)</title><rect x="98.2681%" y="197" width="0.8884%" height="15" fill="rgb(226,22,26)"/><text x="98.5181%" y="207.50"></text></g><g><title>setup_global_ctxt (124,552 samples, 0.23%)</title><rect x="99.1768%" y="197" width="0.2313%" height="15" fill="rgb(217,163,10)"/><text x="99.4268%" y="207.50"></text></g><g><title>all (53,858,068 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (53,858,068 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (318,823 samples, 0.59%)</title><rect x="99.4080%" y="197" width="0.5920%" height="15" fill="rgb(220,39,43)"/><text x="99.6580%" y="207.50"></text></g></svg></svg>