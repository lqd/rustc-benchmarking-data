<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (781,755 samples, 0.12%)</title><rect x="14.1824%" y="133" width="0.1240%" height="15" fill="rgb(227,0,7)"/><text x="14.4324%" y="143.50"></text></g><g><title>param_env (1,218,612 samples, 0.19%)</title><rect x="16.2724%" y="101" width="0.1934%" height="15" fill="rgb(217,0,24)"/><text x="16.5224%" y="111.50"></text></g><g><title>codegen_fn_attrs (922,335 samples, 0.15%)</title><rect x="16.9854%" y="85" width="0.1464%" height="15" fill="rgb(221,193,54)"/><text x="17.2354%" y="95.50"></text></g><g><title>is_copy_raw (1,562,774 samples, 0.25%)</title><rect x="20.2837%" y="69" width="0.2480%" height="15" fill="rgb(248,212,6)"/><text x="20.5337%" y="79.50"></text></g><g><title>evaluate_obligation (1,251,110 samples, 0.20%)</title><rect x="20.3332%" y="53" width="0.1985%" height="15" fill="rgb(208,68,35)"/><text x="20.5832%" y="63.50"></text></g><g><title>is_copy_raw (6,999,295 samples, 1.11%)</title><rect x="20.7221%" y="53" width="1.1106%" height="15" fill="rgb(232,128,0)"/><text x="20.9721%" y="63.50"></text></g><g><title>evaluate_obligation (5,732,787 samples, 0.91%)</title><rect x="20.9231%" y="37" width="0.9097%" height="15" fill="rgb(207,160,47)"/><text x="21.1731%" y="47.50"></text></g><g><title>needs_drop_raw (8,210,135 samples, 1.30%)</title><rect x="20.5335%" y="69" width="1.3028%" height="15" fill="rgb(228,23,34)"/><text x="20.7835%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,962,968 samples, 0.31%)</title><rect x="22.0240%" y="53" width="0.3115%" height="15" fill="rgb(218,30,26)"/><text x="22.2740%" y="63.50"></text></g><g><title>resolve_instance (4,548,015 samples, 0.72%)</title><rect x="21.8364%" y="69" width="0.7217%" height="15" fill="rgb(220,122,19)"/><text x="22.0864%" y="79.50"></text></g><g><title>thir_body (6,725,384 samples, 1.07%)</title><rect x="22.5916%" y="69" width="1.0672%" height="15" fill="rgb(250,228,42)"/><text x="22.8416%" y="79.50"></text></g><g><title>mir_const (52,823,858 samples, 8.38%)</title><rect x="15.3442%" y="117" width="8.3820%" height="15" fill="rgb(240,193,28)"/><text x="15.5942%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (45,755,259 samples, 7.26%)</title><rect x="16.4658%" y="101" width="7.2604%" height="15" fill="rgb(216,20,37)"/><text x="16.7158%" y="111.50">unsafety_c..</text></g><g><title>mir_built (41,558,096 samples, 6.59%)</title><rect x="17.1318%" y="85" width="6.5944%" height="15" fill="rgb(206,188,39)"/><text x="17.3818%" y="95.50">mir_built</text></g><g><title>mir_promoted (58,872,140 samples, 9.34%)</title><rect x="14.4627%" y="133" width="9.3418%" height="15" fill="rgb(217,207,13)"/><text x="14.7127%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,555,803 samples, 0.56%)</title><rect x="23.8047%" y="133" width="0.5642%" height="15" fill="rgb(231,73,38)"/><text x="24.0547%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (6,548,370 samples, 1.04%)</title><rect x="24.3690%" y="133" width="1.0391%" height="15" fill="rgb(225,20,46)"/><text x="24.6190%" y="143.50"></text></g><g><title>normalize_projection_ty (3,806,824 samples, 0.60%)</title><rect x="24.8040%" y="117" width="0.6041%" height="15" fill="rgb(210,31,41)"/><text x="25.0540%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,057,064 samples, 0.33%)</title><rect x="25.4081%" y="133" width="0.3264%" height="15" fill="rgb(221,200,47)"/><text x="25.6581%" y="143.50"></text></g><g><title>normalize_projection_ty (956,192 samples, 0.15%)</title><rect x="25.5827%" y="117" width="0.1517%" height="15" fill="rgb(226,26,5)"/><text x="25.8327%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,495,548 samples, 0.24%)</title><rect x="25.7345%" y="133" width="0.2373%" height="15" fill="rgb(249,33,26)"/><text x="25.9845%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,254,478 samples, 2.42%)</title><rect x="25.9718%" y="133" width="2.4206%" height="15" fill="rgb(235,183,28)"/><text x="26.2218%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (176,400,717 samples, 27.99%)</title><rect x="0.4054%" y="165" width="27.9911%" height="15" fill="rgb(221,5,38)"/><text x="0.6554%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (175,437,805 samples, 27.84%)</title><rect x="0.5582%" y="149" width="27.8383%" height="15" fill="rgb(247,18,42)"/><text x="0.8082%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,041,061 samples, 0.17%)</title><rect x="28.4707%" y="165" width="0.1652%" height="15" fill="rgb(241,131,45)"/><text x="28.7207%" y="175.50"></text></g><g><title>codegen_fn_attrs (752,140 samples, 0.12%)</title><rect x="29.0186%" y="101" width="0.1193%" height="15" fill="rgb(249,31,29)"/><text x="29.2686%" y="111.50"></text></g><g><title>should_inherit_track_caller (1,374,835 samples, 0.22%)</title><rect x="28.9273%" y="117" width="0.2182%" height="15" fill="rgb(225,111,53)"/><text x="29.1773%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,871,902 samples, 0.30%)</title><rect x="28.8518%" y="133" width="0.2970%" height="15" fill="rgb(238,160,17)"/><text x="29.1018%" y="143.50"></text></g><g><title>check_mod_attrs (3,191,026 samples, 0.51%)</title><rect x="28.6425%" y="149" width="0.5063%" height="15" fill="rgb(214,148,48)"/><text x="28.8925%" y="159.50"></text></g><g><title>check_mod_const_bodies (717,017 samples, 0.11%)</title><rect x="29.1488%" y="149" width="0.1138%" height="15" fill="rgb(232,36,49)"/><text x="29.3988%" y="159.50"></text></g><g><title>lookup_deprecation_entry (691,349 samples, 0.11%)</title><rect x="29.4337%" y="133" width="0.1097%" height="15" fill="rgb(209,103,24)"/><text x="29.6837%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,514,008 samples, 0.24%)</title><rect x="29.3247%" y="149" width="0.2402%" height="15" fill="rgb(229,88,8)"/><text x="29.5747%" y="159.50"></text></g><g><title>misc_checking_1 (5,991,368 samples, 0.95%)</title><rect x="28.6360%" y="165" width="0.9507%" height="15" fill="rgb(213,181,19)"/><text x="28.8860%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,051,724 samples, 0.48%)</title><rect x="29.5871%" y="149" width="0.4842%" height="15" fill="rgb(254,191,54)"/><text x="29.8371%" y="159.50"></text></g><g><title>check_mod_liveness (2,581,308 samples, 0.41%)</title><rect x="29.6617%" y="133" width="0.4096%" height="15" fill="rgb(241,83,37)"/><text x="29.9117%" y="143.50"></text></g><g><title>misc_checking_2 (7,459,994 samples, 1.18%)</title><rect x="29.5867%" y="165" width="1.1837%" height="15" fill="rgb(233,36,39)"/><text x="29.8367%" y="175.50"></text></g><g><title>match_checking (4,406,080 samples, 0.70%)</title><rect x="30.0713%" y="149" width="0.6992%" height="15" fill="rgb(226,3,54)"/><text x="30.3213%" y="159.50"></text></g><g><title>check_match (4,147,786 samples, 0.66%)</title><rect x="30.1123%" y="133" width="0.6582%" height="15" fill="rgb(245,192,40)"/><text x="30.3623%" y="143.50"></text></g><g><title>check_private_in_public (1,186,123 samples, 0.19%)</title><rect x="30.7723%" y="149" width="0.1882%" height="15" fill="rgb(238,167,29)"/><text x="31.0223%" y="159.50"></text></g><g><title>death_checking (1,790,350 samples, 0.28%)</title><rect x="30.9606%" y="149" width="0.2841%" height="15" fill="rgb(232,182,51)"/><text x="31.2106%" y="159.50"></text></g><g><title>crate_lints (4,801,132 samples, 0.76%)</title><rect x="31.2452%" y="133" width="0.7618%" height="15" fill="rgb(231,60,39)"/><text x="31.4952%" y="143.50"></text></g><g><title>type_of (1,213,166 samples, 0.19%)</title><rect x="31.8145%" y="117" width="0.1925%" height="15" fill="rgb(208,69,12)"/><text x="32.0645%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (978,384 samples, 0.16%)</title><rect x="31.8518%" y="101" width="0.1552%" height="15" fill="rgb(235,93,37)"/><text x="32.1018%" y="111.50"></text></g><g><title>lint_checking (7,532,173 samples, 1.20%)</title><rect x="31.2446%" y="149" width="1.1952%" height="15" fill="rgb(213,116,39)"/><text x="31.4946%" y="159.50"></text></g><g><title>module_lints (2,727,511 samples, 0.43%)</title><rect x="32.0070%" y="133" width="0.4328%" height="15" fill="rgb(222,207,29)"/><text x="32.2570%" y="143.50"></text></g><g><title>lint_mod (2,714,961 samples, 0.43%)</title><rect x="32.0090%" y="117" width="0.4308%" height="15" fill="rgb(206,96,30)"/><text x="32.2590%" y="127.50"></text></g><g><title>privacy_access_levels (1,444,867 samples, 0.23%)</title><rect x="32.4398%" y="149" width="0.2293%" height="15" fill="rgb(218,138,4)"/><text x="32.6898%" y="159.50"></text></g><g><title>privacy_checking_modules (6,627,984 samples, 1.05%)</title><rect x="32.6691%" y="149" width="1.0517%" height="15" fill="rgb(250,191,14)"/><text x="32.9191%" y="159.50"></text></g><g><title>check_mod_privacy (6,618,214 samples, 1.05%)</title><rect x="32.6707%" y="133" width="1.0502%" height="15" fill="rgb(239,60,40)"/><text x="32.9207%" y="143.50"></text></g><g><title>misc_checking_3 (18,641,018 samples, 2.96%)</title><rect x="30.7705%" y="165" width="2.9579%" height="15" fill="rgb(206,27,48)"/><text x="31.0205%" y="175.50">mis..</text></g><g><title>impl_parent (3,028,551 samples, 0.48%)</title><rect x="34.6877%" y="101" width="0.4806%" height="15" fill="rgb(225,35,8)"/><text x="34.9377%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,746,110 samples, 0.28%)</title><rect x="34.8912%" y="85" width="0.2771%" height="15" fill="rgb(250,213,24)"/><text x="35.1412%" y="95.50"></text></g><g><title>impl_trait_ref (7,060,428 samples, 1.12%)</title><rect x="35.1683%" y="101" width="1.1203%" height="15" fill="rgb(247,123,22)"/><text x="35.4183%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,581,344 samples, 0.89%)</title><rect x="35.4030%" y="85" width="0.8856%" height="15" fill="rgb(231,138,38)"/><text x="35.6530%" y="95.50"></text></g><g><title>trait_impls_of (1,223,172 samples, 0.19%)</title><rect x="36.2938%" y="101" width="0.1941%" height="15" fill="rgb(231,145,46)"/><text x="36.5438%" y="111.50"></text></g><g><title>coherent_trait (16,983,720 samples, 2.69%)</title><rect x="33.7936%" y="133" width="2.6950%" height="15" fill="rgb(251,118,11)"/><text x="34.0436%" y="143.50">co..</text></g><g><title>specialization_graph_of (16,594,476 samples, 2.63%)</title><rect x="33.8553%" y="117" width="2.6332%" height="15" fill="rgb(217,147,25)"/><text x="34.1053%" y="127.50">sp..</text></g><g><title>coherence_checking (17,211,322 samples, 2.73%)</title><rect x="33.7877%" y="149" width="2.7311%" height="15" fill="rgb(247,81,37)"/><text x="34.0377%" y="159.50">co..</text></g><g><title>associated_item (1,263,364 samples, 0.20%)</title><rect x="60.1247%" y="85" width="0.2005%" height="15" fill="rgb(209,12,38)"/><text x="60.3747%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,000,749 samples, 0.16%)</title><rect x="60.1664%" y="69" width="0.1588%" height="15" fill="rgb(227,1,9)"/><text x="60.4164%" y="79.50"></text></g><g><title>associated_items (1,829,420 samples, 0.29%)</title><rect x="60.0462%" y="101" width="0.2903%" height="15" fill="rgb(248,47,43)"/><text x="60.2962%" y="111.50"></text></g><g><title>dropck_outlives (2,838,555 samples, 0.45%)</title><rect x="60.3741%" y="101" width="0.4504%" height="15" fill="rgb(221,10,30)"/><text x="60.6241%" y="111.50"></text></g><g><title>generics_of (713,769 samples, 0.11%)</title><rect x="62.3914%" y="85" width="0.1133%" height="15" fill="rgb(210,229,1)"/><text x="62.6414%" y="95.50"></text></g><g><title>impl_trait_ref (775,686 samples, 0.12%)</title><rect x="62.5373%" y="85" width="0.1231%" height="15" fill="rgb(222,148,37)"/><text x="62.7873%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (643,973 samples, 0.10%)</title><rect x="62.5582%" y="69" width="0.1022%" height="15" fill="rgb(234,67,33)"/><text x="62.8082%" y="79.50"></text></g><g><title>predicates_of (1,066,770 samples, 0.17%)</title><rect x="62.6680%" y="85" width="0.1693%" height="15" fill="rgb(247,98,35)"/><text x="62.9180%" y="95.50"></text></g><g><title>predicates_defined_on (646,436 samples, 0.10%)</title><rect x="62.7347%" y="69" width="0.1026%" height="15" fill="rgb(247,138,52)"/><text x="62.9847%" y="79.50"></text></g><g><title>specializes (1,253,567 samples, 0.20%)</title><rect x="62.8372%" y="85" width="0.1989%" height="15" fill="rgb(213,79,30)"/><text x="63.0872%" y="95.50"></text></g><g><title>param_env (754,740 samples, 0.12%)</title><rect x="62.9164%" y="69" width="0.1198%" height="15" fill="rgb(246,177,23)"/><text x="63.1664%" y="79.50"></text></g><g><title>evaluate_obligation (14,559,607 samples, 2.31%)</title><rect x="60.8245%" y="101" width="2.3103%" height="15" fill="rgb(230,62,27)"/><text x="61.0745%" y="111.50">e..</text></g><g><title>associated_item (1,061,859 samples, 0.17%)</title><rect x="63.2956%" y="69" width="0.1685%" height="15" fill="rgb(216,154,8)"/><text x="63.5456%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (909,739 samples, 0.14%)</title><rect x="63.3198%" y="53" width="0.1444%" height="15" fill="rgb(244,35,45)"/><text x="63.5698%" y="63.50"></text></g><g><title>impl_item_implementor_ids (1,522,047 samples, 0.24%)</title><rect x="63.2324%" y="101" width="0.2415%" height="15" fill="rgb(251,115,12)"/><text x="63.4824%" y="111.50"></text></g><g><title>associated_items (1,414,957 samples, 0.22%)</title><rect x="63.2494%" y="85" width="0.2245%" height="15" fill="rgb(240,54,50)"/><text x="63.4994%" y="95.50"></text></g><g><title>evaluate_obligation (1,029,929 samples, 0.16%)</title><rect x="63.7709%" y="85" width="0.1634%" height="15" fill="rgb(233,84,52)"/><text x="64.0209%" y="95.50"></text></g><g><title>method_autoderef_steps (2,165,249 samples, 0.34%)</title><rect x="63.5919%" y="101" width="0.3436%" height="15" fill="rgb(207,117,47)"/><text x="63.8419%" y="111.50"></text></g><g><title>predicates_of (1,034,459 samples, 0.16%)</title><rect x="63.9930%" y="101" width="0.1641%" height="15" fill="rgb(249,43,39)"/><text x="64.2430%" y="111.50"></text></g><g><title>predicates_defined_on (767,415 samples, 0.12%)</title><rect x="64.0354%" y="85" width="0.1218%" height="15" fill="rgb(209,38,44)"/><text x="64.2854%" y="95.50"></text></g><g><title>associated_items (693,986 samples, 0.11%)</title><rect x="68.8475%" y="85" width="0.1101%" height="15" fill="rgb(236,212,23)"/><text x="69.0975%" y="95.50"></text></g><g><title>generics_of (650,816 samples, 0.10%)</title><rect x="70.2247%" y="69" width="0.1033%" height="15" fill="rgb(242,79,21)"/><text x="70.4747%" y="79.50"></text></g><g><title>impl_trait_ref (1,817,911 samples, 0.29%)</title><rect x="70.3526%" y="69" width="0.2885%" height="15" fill="rgb(211,96,35)"/><text x="70.6026%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,621,179 samples, 0.26%)</title><rect x="70.3839%" y="53" width="0.2572%" height="15" fill="rgb(253,215,40)"/><text x="70.6339%" y="63.50"></text></g><g><title>predicates_of (837,646 samples, 0.13%)</title><rect x="70.6477%" y="69" width="0.1329%" height="15" fill="rgb(211,81,21)"/><text x="70.8977%" y="79.50"></text></g><g><title>specializes (2,369,376 samples, 0.38%)</title><rect x="70.7806%" y="69" width="0.3760%" height="15" fill="rgb(208,190,38)"/><text x="71.0306%" y="79.50"></text></g><g><title>param_env (1,337,418 samples, 0.21%)</title><rect x="70.9444%" y="53" width="0.2122%" height="15" fill="rgb(235,213,38)"/><text x="71.1944%" y="63.50"></text></g><g><title>evaluate_obligation (13,151,768 samples, 2.09%)</title><rect x="69.0916%" y="85" width="2.0869%" height="15" fill="rgb(237,122,38)"/><text x="69.3416%" y="95.50">e..</text></g><g><title>generics_of (781,712 samples, 0.12%)</title><rect x="71.1912%" y="85" width="0.1240%" height="15" fill="rgb(244,218,35)"/><text x="71.4412%" y="95.50"></text></g><g><title>is_copy_raw (651,127 samples, 0.10%)</title><rect x="71.3336%" y="85" width="0.1033%" height="15" fill="rgb(240,68,47)"/><text x="71.5836%" y="95.50"></text></g><g><title>typeck (46,710,352 samples, 7.41%)</title><rect x="64.2053%" y="101" width="7.4119%" height="15" fill="rgb(210,16,53)"/><text x="64.4553%" y="111.50">typeck</text></g><g><title>item_bodies_checking (221,277,707 samples, 35.11%)</title><rect x="36.5461%" y="149" width="35.1121%" height="15" fill="rgb(235,124,12)"/><text x="36.7961%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (221,273,427 samples, 35.11%)</title><rect x="36.5467%" y="133" width="35.1114%" height="15" fill="rgb(224,169,11)"/><text x="36.7967%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (220,608,056 samples, 35.01%)</title><rect x="36.6523%" y="117" width="35.0058%" height="15" fill="rgb(250,166,2)"/><text x="36.9023%" y="127.50">typeck</text></g><g><title>item_types_checking (17,523,696 samples, 2.78%)</title><rect x="71.6581%" y="149" width="2.7806%" height="15" fill="rgb(242,216,29)"/><text x="71.9081%" y="159.50">it..</text></g><g><title>check_mod_item_types (17,511,296 samples, 2.78%)</title><rect x="71.6601%" y="133" width="2.7787%" height="15" fill="rgb(230,116,27)"/><text x="71.9101%" y="143.50">ch..</text></g><g><title>fn_sig (2,992,216 samples, 0.47%)</title><rect x="74.7148%" y="117" width="0.4748%" height="15" fill="rgb(228,99,48)"/><text x="74.9648%" y="127.50"></text></g><g><title>lint_levels (965,940 samples, 0.15%)</title><rect x="75.6076%" y="69" width="0.1533%" height="15" fill="rgb(253,11,6)"/><text x="75.8576%" y="79.50"></text></g><g><title>is_late_bound_map (2,895,249 samples, 0.46%)</title><rect x="75.3024%" y="101" width="0.4594%" height="15" fill="rgb(247,143,39)"/><text x="75.5524%" y="111.50"></text></g><g><title>resolve_lifetimes (2,820,368 samples, 0.45%)</title><rect x="75.3142%" y="85" width="0.4475%" height="15" fill="rgb(236,97,10)"/><text x="75.5642%" y="95.50"></text></g><g><title>generics_of (4,038,492 samples, 0.64%)</title><rect x="75.1896%" y="117" width="0.6408%" height="15" fill="rgb(233,208,19)"/><text x="75.4396%" y="127.50"></text></g><g><title>explicit_predicates_of (1,647,378 samples, 0.26%)</title><rect x="75.9881%" y="85" width="0.2614%" height="15" fill="rgb(216,164,2)"/><text x="76.2381%" y="95.50"></text></g><g><title>predicates_of (3,110,614 samples, 0.49%)</title><rect x="75.8619%" y="117" width="0.4936%" height="15" fill="rgb(220,129,5)"/><text x="76.1119%" y="127.50"></text></g><g><title>predicates_defined_on (2,801,554 samples, 0.44%)</title><rect x="75.9109%" y="101" width="0.4445%" height="15" fill="rgb(242,17,10)"/><text x="76.1609%" y="111.50"></text></g><g><title>inferred_outlives_of (667,698 samples, 0.11%)</title><rect x="76.2495%" y="85" width="0.1059%" height="15" fill="rgb(242,107,0)"/><text x="76.4995%" y="95.50"></text></g><g><title>type_collecting (12,687,371 samples, 2.01%)</title><rect x="74.4397%" y="149" width="2.0132%" height="15" fill="rgb(251,28,31)"/><text x="74.6897%" y="159.50">t..</text></g><g><title>collect_mod_item_types (12,667,071 samples, 2.01%)</title><rect x="74.4429%" y="133" width="2.0100%" height="15" fill="rgb(233,223,10)"/><text x="74.6929%" y="143.50">c..</text></g><g><title>evaluate_obligation (1,559,371 samples, 0.25%)</title><rect x="79.9839%" y="117" width="0.2474%" height="15" fill="rgb(215,21,27)"/><text x="80.2339%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,749,547 samples, 0.28%)</title><rect x="80.2403%" y="117" width="0.2776%" height="15" fill="rgb(232,23,21)"/><text x="80.4903%" y="127.50"></text></g><g><title>param_env (3,387,114 samples, 0.54%)</title><rect x="80.6071%" y="117" width="0.5375%" height="15" fill="rgb(244,5,23)"/><text x="80.8571%" y="127.50"></text></g><g><title>check_impl_item_well_formed (30,821,872 samples, 4.89%)</title><rect x="76.6679%" y="133" width="4.8908%" height="15" fill="rgb(226,81,46)"/><text x="76.9179%" y="143.50">check_..</text></g><g><title>region_scope_tree (2,505,059 samples, 0.40%)</title><rect x="81.1612%" y="117" width="0.3975%" height="15" fill="rgb(247,70,30)"/><text x="81.4112%" y="127.50"></text></g><g><title>evaluate_obligation (939,673 samples, 0.15%)</title><rect x="82.4023%" y="117" width="0.1491%" height="15" fill="rgb(212,68,19)"/><text x="82.6523%" y="127.50"></text></g><g><title>param_env (960,920 samples, 0.15%)</title><rect x="82.6170%" y="117" width="0.1525%" height="15" fill="rgb(240,187,13)"/><text x="82.8670%" y="127.50"></text></g><g><title>check_item_well_formed (8,563,762 samples, 1.36%)</title><rect x="81.5587%" y="133" width="1.3589%" height="15" fill="rgb(223,113,26)"/><text x="81.8087%" y="143.50"></text></g><g><title>analysis (522,222,594 samples, 82.87%)</title><rect x="0.1840%" y="181" width="82.8657%" height="15" fill="rgb(206,192,2)"/><text x="0.4340%" y="191.50">analysis</text></g><g><title>type_check_crate (310,824,685 samples, 49.32%)</title><rect x="33.7284%" y="165" width="49.3213%" height="15" fill="rgb(241,108,4)"/><text x="33.9784%" y="175.50">type_check_crate</text></g><g><title>wf_checking (41,526,563 samples, 6.59%)</title><rect x="76.4603%" y="149" width="6.5894%" height="15" fill="rgb(247,173,49)"/><text x="76.7103%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (832,740 samples, 0.13%)</title><rect x="82.9176%" y="133" width="0.1321%" height="15" fill="rgb(224,114,35)"/><text x="83.1676%" y="143.50"></text></g><g><title>AST_validation (685,987 samples, 0.11%)</title><rect x="83.1588%" y="165" width="0.1089%" height="15" fill="rgb(245,159,27)"/><text x="83.4088%" y="175.50"></text></g><g><title>metadata_register_crate (1,290,424 samples, 0.20%)</title><rect x="92.0051%" y="133" width="0.2048%" height="15" fill="rgb(245,172,44)"/><text x="92.2551%" y="143.50"></text></g><g><title>macro_expand_crate (57,506,651 samples, 9.13%)</title><rect x="83.3264%" y="165" width="9.1251%" height="15" fill="rgb(236,23,11)"/><text x="83.5764%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (57,491,870 samples, 9.12%)</title><rect x="83.3287%" y="149" width="9.1227%" height="15" fill="rgb(205,117,38)"/><text x="83.5787%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,522,648 samples, 0.24%)</title><rect x="92.2099%" y="133" width="0.2416%" height="15" fill="rgb(237,72,25)"/><text x="92.4599%" y="143.50"></text></g><g><title>late_resolve_crate (8,415,134 samples, 1.34%)</title><rect x="92.5398%" y="149" width="1.3353%" height="15" fill="rgb(244,70,9)"/><text x="92.7898%" y="159.50"></text></g><g><title>configure_and_expand (68,371,493 samples, 10.85%)</title><rect x="83.1274%" y="181" width="10.8491%" height="15" fill="rgb(217,125,39)"/><text x="83.3774%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (9,537,307 samples, 1.51%)</title><rect x="92.4631%" y="165" width="1.5134%" height="15" fill="rgb(235,36,10)"/><text x="92.7131%" y="175.50"></text></g><g><title>drop_ast (1,229,084 samples, 0.20%)</title><rect x="93.9765%" y="181" width="0.1950%" height="15" fill="rgb(251,123,47)"/><text x="94.2265%" y="191.50"></text></g><g><title>early_lint_checks (2,039,932 samples, 0.32%)</title><rect x="94.1745%" y="181" width="0.3237%" height="15" fill="rgb(221,13,13)"/><text x="94.4245%" y="191.50"></text></g><g><title>free_global_ctxt (7,279,382 samples, 1.16%)</title><rect x="94.4982%" y="181" width="1.1551%" height="15" fill="rgb(238,131,9)"/><text x="94.7482%" y="191.50"></text></g><g><title>generate_crate_metadata (5,641,473 samples, 0.90%)</title><rect x="95.6533%" y="181" width="0.8952%" height="15" fill="rgb(211,50,8)"/><text x="95.9033%" y="191.50"></text></g><g><title>hir_lowering (17,675,527 samples, 2.80%)</title><rect x="96.5484%" y="181" width="2.8047%" height="15" fill="rgb(245,182,24)"/><text x="96.7984%" y="191.50">hi..</text></g><g><title>parse_crate (808,978 samples, 0.13%)</title><rect x="99.3640%" y="181" width="0.1284%" height="15" fill="rgb(242,14,37)"/><text x="99.6140%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,269,015 samples, 0.36%)</title><rect x="99.5306%" y="181" width="0.3600%" height="15" fill="rgb(246,228,12)"/><text x="99.7806%" y="191.50"></text></g><g><title>all (630,203,747 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (630,203,747 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>