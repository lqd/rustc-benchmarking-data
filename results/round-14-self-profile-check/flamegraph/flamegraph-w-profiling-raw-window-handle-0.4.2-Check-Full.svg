<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (133,601 samples, 0.13%)</title><rect x="16.7178%" y="37" width="0.1343%" height="15" fill="rgb(227,0,7)"/><text x="16.9678%" y="47.50"></text></g><g><title>resolve_instance (140,561 samples, 0.14%)</title><rect x="16.8521%" y="37" width="0.1413%" height="15" fill="rgb(217,0,24)"/><text x="17.1021%" y="47.50"></text></g><g><title>thir_body (1,003,437 samples, 1.01%)</title><rect x="17.0236%" y="37" width="1.0085%" height="15" fill="rgb(221,193,54)"/><text x="17.2736%" y="47.50"></text></g><g><title>mir_const (5,317,147 samples, 5.34%)</title><rect x="12.7092%" y="85" width="5.3438%" height="15" fill="rgb(248,212,6)"/><text x="12.9592%" y="95.50">mir_con..</text></g><g><title>unsafety_check_result (4,524,513 samples, 4.55%)</title><rect x="13.5058%" y="69" width="4.5472%" height="15" fill="rgb(208,68,35)"/><text x="13.7558%" y="79.50">unsaf..</text></g><g><title>mir_built (4,058,199 samples, 4.08%)</title><rect x="13.9744%" y="53" width="4.0786%" height="15" fill="rgb(232,128,0)"/><text x="14.2244%" y="63.50">mir_..</text></g><g><title>mir_promoted (6,083,425 samples, 6.11%)</title><rect x="11.9884%" y="101" width="6.1139%" height="15" fill="rgb(207,160,47)"/><text x="12.2384%" y="111.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (125,111 samples, 0.13%)</title><rect x="18.1023%" y="101" width="0.1257%" height="15" fill="rgb(228,23,34)"/><text x="18.3523%" y="111.50"></text></g><g><title>type_op_prove_predicate (881,379 samples, 0.89%)</title><rect x="18.2757%" y="101" width="0.8858%" height="15" fill="rgb(218,30,26)"/><text x="18.5257%" y="111.50"></text></g><g><title>MIR_borrow_checking (18,072,622 samples, 18.16%)</title><rect x="1.0042%" y="133" width="18.1633%" height="15" fill="rgb(220,122,19)"/><text x="1.2542%" y="143.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (17,942,222 samples, 18.03%)</title><rect x="1.1353%" y="117" width="18.0322%" height="15" fill="rgb(250,228,42)"/><text x="1.3853%" y="127.50">mir_borrowck</text></g><g><title>hir_module_items (205,292 samples, 0.21%)</title><rect x="19.2006%" y="133" width="0.2063%" height="15" fill="rgb(240,193,28)"/><text x="19.4506%" y="143.50"></text></g><g><title>should_inherit_track_caller (201,271 samples, 0.20%)</title><rect x="19.8630%" y="85" width="0.2023%" height="15" fill="rgb(216,20,37)"/><text x="20.1130%" y="95.50"></text></g><g><title>codegen_fn_attrs (358,273 samples, 0.36%)</title><rect x="19.7255%" y="101" width="0.3601%" height="15" fill="rgb(206,188,39)"/><text x="19.9755%" y="111.50"></text></g><g><title>check_mod_attrs (645,126 samples, 0.65%)</title><rect x="19.4374%" y="117" width="0.6484%" height="15" fill="rgb(217,207,13)"/><text x="19.6874%" y="127.50"></text></g><g><title>check_mod_const_bodies (132,200 samples, 0.13%)</title><rect x="20.0858%" y="117" width="0.1329%" height="15" fill="rgb(231,73,38)"/><text x="20.3358%" y="127.50"></text></g><g><title>lookup_deprecation_entry (104,621 samples, 0.11%)</title><rect x="20.4471%" y="101" width="0.1051%" height="15" fill="rgb(225,20,46)"/><text x="20.6971%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (292,175 samples, 0.29%)</title><rect x="20.2971%" y="117" width="0.2936%" height="15" fill="rgb(210,31,41)"/><text x="20.5471%" y="127.50"></text></g><g><title>misc_checking_1 (1,248,834 samples, 1.26%)</title><rect x="19.4074%" y="133" width="1.2551%" height="15" fill="rgb(221,200,47)"/><text x="19.6574%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (163,002 samples, 0.16%)</title><rect x="20.6642%" y="117" width="0.1638%" height="15" fill="rgb(226,26,5)"/><text x="20.9142%" y="127.50"></text></g><g><title>misc_checking_2 (992,731 samples, 1.00%)</title><rect x="20.6625%" y="133" width="0.9977%" height="15" fill="rgb(249,33,26)"/><text x="20.9125%" y="143.50"></text></g><g><title>match_checking (828,069 samples, 0.83%)</title><rect x="20.8280%" y="117" width="0.8322%" height="15" fill="rgb(235,183,28)"/><text x="21.0780%" y="127.50"></text></g><g><title>check_match (795,729 samples, 0.80%)</title><rect x="20.8605%" y="101" width="0.7997%" height="15" fill="rgb(221,5,38)"/><text x="21.1105%" y="111.50"></text></g><g><title>check_private_in_public (218,172 samples, 0.22%)</title><rect x="21.6710%" y="117" width="0.2193%" height="15" fill="rgb(247,18,42)"/><text x="21.9210%" y="127.50"></text></g><g><title>death_checking (540,006 samples, 0.54%)</title><rect x="21.8903%" y="117" width="0.5427%" height="15" fill="rgb(241,131,45)"/><text x="22.1403%" y="127.50"></text></g><g><title>item_attrs (148,312 samples, 0.15%)</title><rect x="22.2840%" y="101" width="0.1491%" height="15" fill="rgb(249,31,29)"/><text x="22.5340%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (146,492 samples, 0.15%)</title><rect x="22.2858%" y="85" width="0.1472%" height="15" fill="rgb(225,111,53)"/><text x="22.5358%" y="95.50"></text></g><g><title>param_env (189,202 samples, 0.19%)</title><rect x="22.9136%" y="85" width="0.1902%" height="15" fill="rgb(238,160,17)"/><text x="23.1636%" y="95.50"></text></g><g><title>crate_lints (1,003,972 samples, 1.01%)</title><rect x="22.4345%" y="101" width="1.0090%" height="15" fill="rgb(214,148,48)"/><text x="22.6845%" y="111.50"></text></g><g><title>type_of (338,105 samples, 0.34%)</title><rect x="23.1037%" y="85" width="0.3398%" height="15" fill="rgb(232,36,49)"/><text x="23.3537%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (261,075 samples, 0.26%)</title><rect x="23.1812%" y="69" width="0.2624%" height="15" fill="rgb(209,103,24)"/><text x="23.4312%" y="79.50"></text></g><g><title>lint_checking (1,462,527 samples, 1.47%)</title><rect x="22.4330%" y="117" width="1.4699%" height="15" fill="rgb(229,88,8)"/><text x="22.6830%" y="127.50"></text></g><g><title>module_lints (457,045 samples, 0.46%)</title><rect x="23.4435%" y="101" width="0.4593%" height="15" fill="rgb(213,181,19)"/><text x="23.6935%" y="111.50"></text></g><g><title>lint_mod (450,305 samples, 0.45%)</title><rect x="23.4503%" y="85" width="0.4526%" height="15" fill="rgb(254,191,54)"/><text x="23.7003%" y="95.50"></text></g><g><title>privacy_access_levels (328,104 samples, 0.33%)</title><rect x="23.9029%" y="117" width="0.3297%" height="15" fill="rgb(241,83,37)"/><text x="24.1529%" y="127.50"></text></g><g><title>privacy_checking_modules (794,249 samples, 0.80%)</title><rect x="24.2326%" y="117" width="0.7982%" height="15" fill="rgb(233,36,39)"/><text x="24.4826%" y="127.50"></text></g><g><title>check_mod_privacy (789,028 samples, 0.79%)</title><rect x="24.2379%" y="101" width="0.7930%" height="15" fill="rgb(226,3,54)"/><text x="24.4879%" y="111.50"></text></g><g><title>misc_checking_3 (3,370,588 samples, 3.39%)</title><rect x="21.6602%" y="133" width="3.3875%" height="15" fill="rgb(245,192,40)"/><text x="21.9102%" y="143.50">mis..</text></g><g><title>is_copy_raw (219,581 samples, 0.22%)</title><rect x="25.2420%" y="85" width="0.2207%" height="15" fill="rgb(238,167,29)"/><text x="25.4920%" y="95.50"></text></g><g><title>evaluate_obligation (185,331 samples, 0.19%)</title><rect x="25.2764%" y="69" width="0.1863%" height="15" fill="rgb(232,182,51)"/><text x="25.5264%" y="79.50"></text></g><g><title>param_env (141,441 samples, 0.14%)</title><rect x="25.4626%" y="85" width="0.1422%" height="15" fill="rgb(231,60,39)"/><text x="25.7126%" y="95.50"></text></g><g><title>impl_parent (793,185 samples, 0.80%)</title><rect x="26.8564%" y="69" width="0.7972%" height="15" fill="rgb(208,69,12)"/><text x="27.1064%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (469,892 samples, 0.47%)</title><rect x="27.1814%" y="53" width="0.4722%" height="15" fill="rgb(235,93,37)"/><text x="27.4314%" y="63.50"></text></g><g><title>impl_trait_ref (1,438,789 samples, 1.45%)</title><rect x="27.6536%" y="69" width="1.4460%" height="15" fill="rgb(213,116,39)"/><text x="27.9036%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,120,398 samples, 1.13%)</title><rect x="27.9736%" y="53" width="1.1260%" height="15" fill="rgb(222,207,29)"/><text x="28.2236%" y="63.50"></text></g><g><title>coherent_trait (4,237,908 samples, 4.26%)</title><rect x="25.1322%" y="101" width="4.2592%" height="15" fill="rgb(206,96,30)"/><text x="25.3822%" y="111.50">coher..</text></g><g><title>specialization_graph_of (3,767,683 samples, 3.79%)</title><rect x="25.6048%" y="85" width="3.7866%" height="15" fill="rgb(218,138,4)"/><text x="25.8548%" y="95.50">spec..</text></g><g><title>trait_impls_of (289,074 samples, 0.29%)</title><rect x="29.1008%" y="69" width="0.2905%" height="15" fill="rgb(250,191,14)"/><text x="29.3508%" y="79.50"></text></g><g><title>coherence_checking (4,336,719 samples, 4.36%)</title><rect x="25.1118%" y="117" width="4.3585%" height="15" fill="rgb(239,60,40)"/><text x="25.3618%" y="127.50">coher..</text></g><g><title>dropck_outlives (109,560 samples, 0.11%)</title><rect x="49.1300%" y="69" width="0.1101%" height="15" fill="rgb(206,27,48)"/><text x="49.3800%" y="79.50"></text></g><g><title>evaluate_obligation (544,707 samples, 0.55%)</title><rect x="49.2401%" y="69" width="0.5474%" height="15" fill="rgb(225,35,8)"/><text x="49.4901%" y="79.50"></text></g><g><title>object_safety_violations (133,881 samples, 0.13%)</title><rect x="50.0214%" y="69" width="0.1346%" height="15" fill="rgb(250,213,24)"/><text x="50.2714%" y="79.50"></text></g><g><title>predicates_of (99,700 samples, 0.10%)</title><rect x="50.1823%" y="69" width="0.1002%" height="15" fill="rgb(247,123,22)"/><text x="50.4323%" y="79.50"></text></g><g><title>item_bodies_checking (20,759,662 samples, 20.86%)</title><rect x="29.5199%" y="117" width="20.8638%" height="15" fill="rgb(231,138,38)"/><text x="29.7699%" y="127.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,757,022 samples, 20.86%)</title><rect x="29.5225%" y="101" width="20.8611%" height="15" fill="rgb(231,145,46)"/><text x="29.7725%" y="111.50">typeck_item_bodies</text></g><g><title>typeck (20,664,749 samples, 20.77%)</title><rect x="29.6153%" y="85" width="20.7684%" height="15" fill="rgb(251,118,11)"/><text x="29.8653%" y="95.50">typeck</text></g><g><title>item_types_checking (1,312,204 samples, 1.32%)</title><rect x="50.3837%" y="117" width="1.3188%" height="15" fill="rgb(217,147,25)"/><text x="50.6337%" y="127.50"></text></g><g><title>check_mod_item_types (1,303,594 samples, 1.31%)</title><rect x="50.3923%" y="101" width="1.3101%" height="15" fill="rgb(247,81,37)"/><text x="50.6423%" y="111.50"></text></g><g><title>fn_sig (235,601 samples, 0.24%)</title><rect x="52.0743%" y="85" width="0.2368%" height="15" fill="rgb(209,12,38)"/><text x="52.3243%" y="95.50"></text></g><g><title>is_late_bound_map (239,692 samples, 0.24%)</title><rect x="52.4612%" y="69" width="0.2409%" height="15" fill="rgb(227,1,9)"/><text x="52.7112%" y="79.50"></text></g><g><title>resolve_lifetimes (231,902 samples, 0.23%)</title><rect x="52.4690%" y="53" width="0.2331%" height="15" fill="rgb(248,47,43)"/><text x="52.7190%" y="63.50"></text></g><g><title>lint_levels (181,292 samples, 0.18%)</title><rect x="52.5199%" y="37" width="0.1822%" height="15" fill="rgb(221,10,30)"/><text x="52.7699%" y="47.50"></text></g><g><title>named_region_map (391,683 samples, 0.39%)</title><rect x="52.7021%" y="69" width="0.3936%" height="15" fill="rgb(210,229,1)"/><text x="52.9521%" y="79.50"></text></g><g><title>resolve_lifetimes (358,243 samples, 0.36%)</title><rect x="52.7357%" y="53" width="0.3600%" height="15" fill="rgb(222,148,37)"/><text x="52.9857%" y="63.50"></text></g><g><title>generics_of (800,557 samples, 0.80%)</title><rect x="52.3110%" y="85" width="0.8046%" height="15" fill="rgb(234,67,33)"/><text x="52.5610%" y="95.50"></text></g><g><title>explicit_predicates_of (196,681 samples, 0.20%)</title><rect x="53.4117%" y="53" width="0.1977%" height="15" fill="rgb(247,98,35)"/><text x="53.6617%" y="63.50"></text></g><g><title>predicates_of (565,057 samples, 0.57%)</title><rect x="53.1970%" y="85" width="0.5679%" height="15" fill="rgb(247,138,52)"/><text x="53.4470%" y="95.50"></text></g><g><title>predicates_defined_on (477,996 samples, 0.48%)</title><rect x="53.2845%" y="69" width="0.4804%" height="15" fill="rgb(213,79,30)"/><text x="53.5345%" y="79.50"></text></g><g><title>inferred_outlives_of (154,702 samples, 0.16%)</title><rect x="53.6094%" y="53" width="0.1555%" height="15" fill="rgb(246,177,23)"/><text x="53.8594%" y="63.50"></text></g><g><title>inferred_outlives_crate (123,631 samples, 0.12%)</title><rect x="53.6406%" y="37" width="0.1243%" height="15" fill="rgb(230,62,27)"/><text x="53.8906%" y="47.50"></text></g><g><title>type_collecting (2,193,945 samples, 2.20%)</title><rect x="51.7040%" y="117" width="2.2049%" height="15" fill="rgb(216,154,8)"/><text x="51.9540%" y="127.50">t..</text></g><g><title>collect_mod_item_types (2,181,935 samples, 2.19%)</title><rect x="51.7160%" y="101" width="2.1929%" height="15" fill="rgb(244,35,45)"/><text x="51.9660%" y="111.50">c..</text></g><g><title>type_of (105,755 samples, 0.11%)</title><rect x="53.8026%" y="85" width="0.1063%" height="15" fill="rgb(251,115,12)"/><text x="54.0526%" y="95.50"></text></g><g><title>evaluate_obligation (421,716 samples, 0.42%)</title><rect x="56.2169%" y="85" width="0.4238%" height="15" fill="rgb(240,54,50)"/><text x="56.4669%" y="95.50"></text></g><g><title>implied_outlives_bounds (166,163 samples, 0.17%)</title><rect x="56.6407%" y="85" width="0.1670%" height="15" fill="rgb(233,84,52)"/><text x="56.8907%" y="95.50"></text></g><g><title>param_env (283,702 samples, 0.29%)</title><rect x="56.8077%" y="85" width="0.2851%" height="15" fill="rgb(207,117,47)"/><text x="57.0577%" y="95.50"></text></g><g><title>region_scope_tree (477,285 samples, 0.48%)</title><rect x="57.1195%" y="85" width="0.4797%" height="15" fill="rgb(249,43,39)"/><text x="57.3695%" y="95.50"></text></g><g><title>check_impl_item_well_formed (3,417,717 samples, 3.43%)</title><rect x="54.1698%" y="101" width="3.4349%" height="15" fill="rgb(209,38,44)"/><text x="54.4198%" y="111.50">che..</text></g><g><title>evaluate_obligation (636,628 samples, 0.64%)</title><rect x="59.3501%" y="85" width="0.6398%" height="15" fill="rgb(236,212,23)"/><text x="59.6001%" y="95.50"></text></g><g><title>param_env (350,343 samples, 0.35%)</title><rect x="60.0793%" y="85" width="0.3521%" height="15" fill="rgb(242,79,21)"/><text x="60.3293%" y="95.50"></text></g><g><title>check_item_well_formed (2,943,296 samples, 2.96%)</title><rect x="57.6046%" y="101" width="2.9581%" height="15" fill="rgb(211,96,35)"/><text x="57.8546%" y="111.50">che..</text></g><g><title>analysis (59,755,089 samples, 60.05%)</title><rect x="0.6535%" y="149" width="60.0548%" height="15" fill="rgb(253,215,40)"/><text x="0.9035%" y="159.50">analysis</text></g><g><title>type_check_crate (35,482,637 samples, 35.66%)</title><rect x="25.0477%" y="133" width="35.6606%" height="15" fill="rgb(211,81,21)"/><text x="25.2977%" y="143.50">type_check_crate</text></g><g><title>wf_checking (6,759,976 samples, 6.79%)</title><rect x="53.9145%" y="117" width="6.7939%" height="15" fill="rgb(208,190,38)"/><text x="54.1645%" y="127.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (144,941 samples, 0.15%)</title><rect x="60.5627%" y="101" width="0.1457%" height="15" fill="rgb(235,213,38)"/><text x="60.8127%" y="111.50"></text></g><g><title>codegen_crate (589,156 samples, 0.59%)</title><rect x="60.7190%" y="149" width="0.5921%" height="15" fill="rgb(237,122,38)"/><text x="60.9690%" y="159.50"></text></g><g><title>AST_validation (305,164 samples, 0.31%)</title><rect x="61.5403%" y="133" width="0.3067%" height="15" fill="rgb(244,218,35)"/><text x="61.7903%" y="143.50"></text></g><g><title>complete_gated_feature_checking (174,232 samples, 0.18%)</title><rect x="61.8470%" y="133" width="0.1751%" height="15" fill="rgb(240,68,47)"/><text x="62.0970%" y="143.50"></text></g><g><title>metadata_load_macro (109,861 samples, 0.11%)</title><rect x="79.7390%" y="101" width="0.1104%" height="15" fill="rgb(210,16,53)"/><text x="79.9890%" y="111.50"></text></g><g><title>metadata_register_crate (224,152 samples, 0.23%)</title><rect x="79.8494%" y="101" width="0.2253%" height="15" fill="rgb(235,124,12)"/><text x="80.0994%" y="111.50"></text></g><g><title>macro_expand_crate (17,982,091 samples, 18.07%)</title><rect x="62.1183%" y="133" width="18.0723%" height="15" fill="rgb(224,169,11)"/><text x="62.3683%" y="143.50">macro_expand_crate</text></g><g><title>expand_crate (17,955,491 samples, 18.05%)</title><rect x="62.1451%" y="117" width="18.0456%" height="15" fill="rgb(250,166,2)"/><text x="62.3951%" y="127.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (115,391 samples, 0.12%)</title><rect x="80.0746%" y="101" width="0.1160%" height="15" fill="rgb(242,216,29)"/><text x="80.3246%" y="111.50"></text></g><g><title>finalize_imports (119,391 samples, 0.12%)</title><rect x="80.2910%" y="117" width="0.1200%" height="15" fill="rgb(230,116,27)"/><text x="80.5410%" y="127.50"></text></g><g><title>finalize_macro_resolutions (857,059 samples, 0.86%)</title><rect x="80.4110%" y="117" width="0.8614%" height="15" fill="rgb(228,99,48)"/><text x="80.6610%" y="127.50"></text></g><g><title>late_resolve_crate (4,925,685 samples, 4.95%)</title><rect x="81.2724%" y="117" width="4.9504%" height="15" fill="rgb(253,11,6)"/><text x="81.5224%" y="127.50">late_r..</text></g><g><title>resolve_check_unused (132,141 samples, 0.13%)</title><rect x="86.2579%" y="117" width="0.1328%" height="15" fill="rgb(247,143,39)"/><text x="86.5079%" y="127.50"></text></g><g><title>resolve_postprocess (108,041 samples, 0.11%)</title><rect x="86.3915%" y="117" width="0.1086%" height="15" fill="rgb(236,97,10)"/><text x="86.6415%" y="127.50"></text></g><g><title>configure_and_expand (25,064,889 samples, 25.19%)</title><rect x="61.3111%" y="149" width="25.1906%" height="15" fill="rgb(233,208,19)"/><text x="61.5611%" y="159.50">configure_and_expand</text></g><g><title>resolve_crate (6,189,938 samples, 6.22%)</title><rect x="80.2807%" y="133" width="6.2210%" height="15" fill="rgb(216,164,2)"/><text x="80.5307%" y="143.50">resolve_..</text></g><g><title>drop_ast (167,192 samples, 0.17%)</title><rect x="86.5017%" y="149" width="0.1680%" height="15" fill="rgb(220,129,5)"/><text x="86.7517%" y="159.50"></text></g><g><title>early_lint_checks (524,556 samples, 0.53%)</title><rect x="86.6866%" y="149" width="0.5272%" height="15" fill="rgb(242,17,10)"/><text x="86.9366%" y="159.50"></text></g><g><title>free_global_ctxt (1,878,450 samples, 1.89%)</title><rect x="87.2138%" y="149" width="1.8879%" height="15" fill="rgb(242,107,0)"/><text x="87.4638%" y="159.50">f..</text></g><g><title>generate_crate_metadata (1,276,714 samples, 1.28%)</title><rect x="89.1017%" y="149" width="1.2831%" height="15" fill="rgb(251,28,31)"/><text x="89.3517%" y="159.50"></text></g><g><title>hir_lowering (7,118,460 samples, 7.15%)</title><rect x="90.3848%" y="149" width="7.1542%" height="15" fill="rgb(233,223,10)"/><text x="90.6348%" y="159.50">hir_loweri..</text></g><g><title>parse_crate (1,079,572 samples, 1.08%)</title><rect x="97.5799%" y="149" width="1.0850%" height="15" fill="rgb(215,21,27)"/><text x="97.8299%" y="159.50"></text></g><g><title>prepare_outputs (326,644 samples, 0.33%)</title><rect x="98.6746%" y="149" width="0.3283%" height="15" fill="rgb(232,23,21)"/><text x="98.9246%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (539,606 samples, 0.54%)</title><rect x="99.0029%" y="149" width="0.5423%" height="15" fill="rgb(244,5,23)"/><text x="99.2529%" y="159.50"></text></g><g><title>all (99,500,912 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (99,500,912 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (348,254 samples, 0.35%)</title><rect x="99.6500%" y="149" width="0.3500%" height="15" fill="rgb(212,68,19)"/><text x="99.9000%" y="159.50"></text></g></svg></svg>