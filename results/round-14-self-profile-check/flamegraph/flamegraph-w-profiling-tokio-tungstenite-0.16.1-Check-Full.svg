<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (279,154 samples, 0.11%)</title><rect x="6.4856%" y="245" width="0.1073%" height="15" fill="rgb(227,0,7)"/><text x="6.7356%" y="255.50"></text></g><g><title>codegen_fn_attrs (268,961 samples, 0.10%)</title><rect x="6.7585%" y="229" width="0.1034%" height="15" fill="rgb(217,0,24)"/><text x="7.0085%" y="239.50"></text></g><g><title>needs_drop_raw (1,373,748 samples, 0.53%)</title><rect x="7.8817%" y="213" width="0.5282%" height="15" fill="rgb(221,193,54)"/><text x="8.1317%" y="223.50"></text></g><g><title>is_copy_raw (1,063,502 samples, 0.41%)</title><rect x="8.0010%" y="197" width="0.4089%" height="15" fill="rgb(248,212,6)"/><text x="8.2510%" y="207.50"></text></g><g><title>evaluate_obligation (875,067 samples, 0.34%)</title><rect x="8.0735%" y="181" width="0.3365%" height="15" fill="rgb(208,68,35)"/><text x="8.3235%" y="191.50"></text></g><g><title>specialization_graph_of (1,024,101 samples, 0.39%)</title><rect x="8.6143%" y="197" width="0.3938%" height="15" fill="rgb(232,128,0)"/><text x="8.8643%" y="207.50"></text></g><g><title>impl_trait_ref (386,512 samples, 0.15%)</title><rect x="8.8595%" y="181" width="0.1486%" height="15" fill="rgb(207,160,47)"/><text x="9.1095%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (291,081 samples, 0.11%)</title><rect x="8.8962%" y="165" width="0.1119%" height="15" fill="rgb(228,23,34)"/><text x="9.1462%" y="175.50"></text></g><g><title>resolve_instance (1,628,911 samples, 0.63%)</title><rect x="8.4100%" y="213" width="0.6263%" height="15" fill="rgb(218,30,26)"/><text x="8.6600%" y="223.50"></text></g><g><title>thir_body (1,003,684 samples, 0.39%)</title><rect x="9.0463%" y="213" width="0.3859%" height="15" fill="rgb(220,122,19)"/><text x="9.2963%" y="223.50"></text></g><g><title>mir_const (8,357,472 samples, 3.21%)</title><rect x="6.2290%" y="261" width="3.2135%" height="15" fill="rgb(250,228,42)"/><text x="6.4790%" y="271.50">mir..</text></g><g><title>unsafety_check_result (7,410,973 samples, 2.85%)</title><rect x="6.5929%" y="245" width="2.8495%" height="15" fill="rgb(240,193,28)"/><text x="6.8429%" y="255.50">un..</text></g><g><title>mir_built (6,711,288 samples, 2.58%)</title><rect x="6.8619%" y="229" width="2.5805%" height="15" fill="rgb(216,20,37)"/><text x="7.1119%" y="239.50">mi..</text></g><g><title>mir_promoted (9,344,645 samples, 3.59%)</title><rect x="5.8607%" y="277" width="3.5930%" height="15" fill="rgb(206,188,39)"/><text x="6.1107%" y="287.50">mir_..</text></g><g><title>type_op_ascribe_user_type (759,424 samples, 0.29%)</title><rect x="9.4538%" y="277" width="0.2920%" height="15" fill="rgb(217,207,13)"/><text x="9.7038%" y="287.50"></text></g><g><title>type_op_normalize_fn_sig (374,437 samples, 0.14%)</title><rect x="9.7458%" y="277" width="0.1440%" height="15" fill="rgb(231,73,38)"/><text x="9.9958%" y="287.50"></text></g><g><title>type_op_prove_predicate (3,671,016 samples, 1.41%)</title><rect x="9.9934%" y="277" width="1.4115%" height="15" fill="rgb(225,20,46)"/><text x="10.2434%" y="287.50"></text></g><g><title>MIR_borrow_checking (28,584,538 samples, 10.99%)</title><rect x="0.4173%" y="309" width="10.9908%" height="15" fill="rgb(210,31,41)"/><text x="0.6673%" y="319.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (28,475,457 samples, 10.95%)</title><rect x="0.4593%" y="293" width="10.9488%" height="15" fill="rgb(221,200,47)"/><text x="0.7093%" y="303.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (305,115 samples, 0.12%)</title><rect x="11.7345%" y="261" width="0.1173%" height="15" fill="rgb(226,26,5)"/><text x="11.9845%" y="271.50"></text></g><g><title>codegen_fn_attrs (531,367 samples, 0.20%)</title><rect x="11.6549%" y="277" width="0.2043%" height="15" fill="rgb(249,33,26)"/><text x="11.9049%" y="287.50"></text></g><g><title>check_mod_attrs (849,721 samples, 0.33%)</title><rect x="11.5325%" y="293" width="0.3267%" height="15" fill="rgb(235,183,28)"/><text x="11.7825%" y="303.50"></text></g><g><title>check_mod_unstable_api_usage (501,706 samples, 0.19%)</title><rect x="11.9649%" y="293" width="0.1929%" height="15" fill="rgb(221,5,38)"/><text x="12.2149%" y="303.50"></text></g><g><title>misc_checking_1 (1,733,849 samples, 0.67%)</title><rect x="11.5205%" y="309" width="0.6667%" height="15" fill="rgb(247,18,42)"/><text x="11.7705%" y="319.50"></text></g><g><title>liveness_and_intrinsic_checking (1,402,885 samples, 0.54%)</title><rect x="12.1877%" y="293" width="0.5394%" height="15" fill="rgb(241,131,45)"/><text x="12.4377%" y="303.50"></text></g><g><title>check_mod_liveness (1,240,752 samples, 0.48%)</title><rect x="12.2501%" y="277" width="0.4771%" height="15" fill="rgb(249,31,29)"/><text x="12.5001%" y="287.50"></text></g><g><title>type_uninhabited_from (573,458 samples, 0.22%)</title><rect x="12.5067%" y="261" width="0.2205%" height="15" fill="rgb(225,111,53)"/><text x="12.7567%" y="271.50"></text></g><g><title>type_uninhabited_from (485,866 samples, 0.19%)</title><rect x="12.5403%" y="245" width="0.1868%" height="15" fill="rgb(238,160,17)"/><text x="12.7903%" y="255.50"></text></g><g><title>type_uninhabited_from (438,686 samples, 0.17%)</title><rect x="12.5585%" y="229" width="0.1687%" height="15" fill="rgb(214,148,48)"/><text x="12.8085%" y="239.50"></text></g><g><title>type_uninhabited_from (405,665 samples, 0.16%)</title><rect x="12.5712%" y="213" width="0.1560%" height="15" fill="rgb(232,36,49)"/><text x="12.8212%" y="223.50"></text></g><g><title>type_uninhabited_from (364,465 samples, 0.14%)</title><rect x="12.5870%" y="197" width="0.1401%" height="15" fill="rgb(209,103,24)"/><text x="12.8370%" y="207.50"></text></g><g><title>type_uninhabited_from (299,845 samples, 0.12%)</title><rect x="12.6119%" y="181" width="0.1153%" height="15" fill="rgb(229,88,8)"/><text x="12.8619%" y="191.50"></text></g><g><title>misc_checking_2 (2,364,206 samples, 0.91%)</title><rect x="12.1872%" y="309" width="0.9090%" height="15" fill="rgb(213,181,19)"/><text x="12.4372%" y="319.50"></text></g><g><title>match_checking (959,811 samples, 0.37%)</title><rect x="12.7272%" y="293" width="0.3690%" height="15" fill="rgb(254,191,54)"/><text x="12.9772%" y="303.50"></text></g><g><title>check_match (913,551 samples, 0.35%)</title><rect x="12.7449%" y="277" width="0.3513%" height="15" fill="rgb(241,83,37)"/><text x="12.9949%" y="287.50"></text></g><g><title>check_private_in_public (349,104 samples, 0.13%)</title><rect x="13.1003%" y="293" width="0.1342%" height="15" fill="rgb(233,36,39)"/><text x="13.3503%" y="303.50"></text></g><g><title>death_checking (661,637 samples, 0.25%)</title><rect x="13.2345%" y="293" width="0.2544%" height="15" fill="rgb(226,3,54)"/><text x="13.4845%" y="303.50"></text></g><g><title>param_env (801,381 samples, 0.31%)</title><rect x="13.9385%" y="261" width="0.3081%" height="15" fill="rgb(245,192,40)"/><text x="14.1885%" y="271.50"></text></g><g><title>predicates_of (273,212 samples, 0.11%)</title><rect x="14.1416%" y="245" width="0.1051%" height="15" fill="rgb(238,167,29)"/><text x="14.3916%" y="255.50"></text></g><g><title>crate_lints (3,771,373 samples, 1.45%)</title><rect x="13.4896%" y="277" width="1.4501%" height="15" fill="rgb(232,182,51)"/><text x="13.7396%" y="287.50"></text></g><g><title>type_of (1,788,244 samples, 0.69%)</title><rect x="14.2521%" y="261" width="0.6876%" height="15" fill="rgb(231,60,39)"/><text x="14.5021%" y="271.50"></text></g><g><title>metadata_decode_entry_type_of (1,207,947 samples, 0.46%)</title><rect x="14.4752%" y="245" width="0.4645%" height="15" fill="rgb(208,69,12)"/><text x="14.7252%" y="255.50"></text></g><g><title>lint_checking (4,680,113 samples, 1.80%)</title><rect x="13.4889%" y="293" width="1.7995%" height="15" fill="rgb(235,93,37)"/><text x="13.7389%" y="303.50">l..</text></g><g><title>module_lints (906,920 samples, 0.35%)</title><rect x="14.9397%" y="277" width="0.3487%" height="15" fill="rgb(213,116,39)"/><text x="15.1897%" y="287.50"></text></g><g><title>lint_mod (899,030 samples, 0.35%)</title><rect x="14.9427%" y="261" width="0.3457%" height="15" fill="rgb(222,207,29)"/><text x="15.1927%" y="271.50"></text></g><g><title>privacy_access_levels (657,217 samples, 0.25%)</title><rect x="15.2884%" y="293" width="0.2527%" height="15" fill="rgb(206,96,30)"/><text x="15.5384%" y="303.50"></text></g><g><title>privacy_checking_modules (1,969,232 samples, 0.76%)</title><rect x="15.5411%" y="293" width="0.7572%" height="15" fill="rgb(218,138,4)"/><text x="15.7911%" y="303.50"></text></g><g><title>check_mod_privacy (1,963,312 samples, 0.75%)</title><rect x="15.5434%" y="277" width="0.7549%" height="15" fill="rgb(250,191,14)"/><text x="15.7934%" y="287.50"></text></g><g><title>misc_checking_3 (8,342,653 samples, 3.21%)</title><rect x="13.0962%" y="309" width="3.2078%" height="15" fill="rgb(239,60,40)"/><text x="13.3462%" y="319.50">mis..</text></g><g><title>impl_parent (1,524,635 samples, 0.59%)</title><rect x="17.1927%" y="245" width="0.5862%" height="15" fill="rgb(206,27,48)"/><text x="17.4427%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,004,007 samples, 0.39%)</title><rect x="17.3929%" y="229" width="0.3860%" height="15" fill="rgb(225,35,8)"/><text x="17.6429%" y="239.50"></text></g><g><title>impl_trait_ref (4,501,319 samples, 1.73%)</title><rect x="17.7789%" y="245" width="1.7308%" height="15" fill="rgb(250,213,24)"/><text x="18.0289%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,773,993 samples, 1.45%)</title><rect x="18.0586%" y="229" width="1.4511%" height="15" fill="rgb(247,123,22)"/><text x="18.3086%" y="239.50"></text></g><g><title>coherent_trait (8,943,049 samples, 3.44%)</title><rect x="16.3590%" y="277" width="3.4386%" height="15" fill="rgb(231,138,38)"/><text x="16.6090%" y="287.50">coh..</text></g><g><title>specialization_graph_of (8,925,638 samples, 3.43%)</title><rect x="16.3657%" y="261" width="3.4319%" height="15" fill="rgb(231,145,46)"/><text x="16.6157%" y="271.50">spe..</text></g><g><title>trait_impls_of (745,568 samples, 0.29%)</title><rect x="19.5109%" y="245" width="0.2867%" height="15" fill="rgb(251,118,11)"/><text x="19.7609%" y="255.50"></text></g><g><title>implementations_of_trait (275,604 samples, 0.11%)</title><rect x="19.6916%" y="229" width="0.1060%" height="15" fill="rgb(217,147,25)"/><text x="19.9416%" y="239.50"></text></g><g><title>coherence_checking (9,031,960 samples, 3.47%)</title><rect x="16.3516%" y="293" width="3.4728%" height="15" fill="rgb(247,81,37)"/><text x="16.6016%" y="303.50">coh..</text></g><g><title>adt_dtorck_constraint (269,404 samples, 0.10%)</title><rect x="25.4530%" y="229" width="0.1036%" height="15" fill="rgb(209,12,38)"/><text x="25.7030%" y="239.50"></text></g><g><title>dropck_outlives (730,886 samples, 0.28%)</title><rect x="25.3060%" y="245" width="0.2810%" height="15" fill="rgb(227,1,9)"/><text x="25.5560%" y="255.50"></text></g><g><title>evaluate_obligation (1,576,764 samples, 0.61%)</title><rect x="25.5871%" y="245" width="0.6063%" height="15" fill="rgb(248,47,43)"/><text x="25.8371%" y="255.50"></text></g><g><title>trait_impls_of (329,363 samples, 0.13%)</title><rect x="26.0667%" y="229" width="0.1266%" height="15" fill="rgb(221,10,30)"/><text x="26.3167%" y="239.50"></text></g><g><title>method_autoderef_steps (409,034 samples, 0.16%)</title><rect x="26.3513%" y="245" width="0.1573%" height="15" fill="rgb(210,229,1)"/><text x="26.6013%" y="255.50"></text></g><g><title>predicates_of (273,602 samples, 0.11%)</title><rect x="26.5786%" y="245" width="0.1052%" height="15" fill="rgb(222,148,37)"/><text x="26.8286%" y="255.50"></text></g><g><title>evaluate_obligation (1,201,544 samples, 0.46%)</title><rect x="31.3979%" y="229" width="0.4620%" height="15" fill="rgb(234,67,33)"/><text x="31.6479%" y="239.50"></text></g><g><title>is_copy_raw (368,495 samples, 0.14%)</title><rect x="31.9061%" y="229" width="0.1417%" height="15" fill="rgb(247,98,35)"/><text x="32.1561%" y="239.50"></text></g><g><title>evaluate_obligation (286,123 samples, 0.11%)</title><rect x="31.9378%" y="213" width="0.1100%" height="15" fill="rgb(247,138,52)"/><text x="32.1878%" y="223.50"></text></g><g><title>typeck (14,244,998 samples, 5.48%)</title><rect x="26.7147%" y="245" width="5.4772%" height="15" fill="rgb(213,79,30)"/><text x="26.9647%" y="255.50">typeck</text></g><g><title>item_bodies_checking (32,155,067 samples, 12.36%)</title><rect x="19.8374%" y="293" width="12.3637%" height="15" fill="rgb(246,177,23)"/><text x="20.0874%" y="303.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (32,151,097 samples, 12.36%)</title><rect x="19.8389%" y="277" width="12.3621%" height="15" fill="rgb(230,62,27)"/><text x="20.0889%" y="287.50">typeck_item_bodies</text></g><g><title>typeck (32,078,705 samples, 12.33%)</title><rect x="19.8668%" y="261" width="12.3343%" height="15" fill="rgb(216,154,8)"/><text x="20.1168%" y="271.50">typeck</text></g><g><title>implied_outlives_bounds (268,822 samples, 0.10%)</title><rect x="38.4723%" y="213" width="0.1034%" height="15" fill="rgb(244,35,45)"/><text x="38.7223%" y="223.50"></text></g><g><title>mir_promoted (319,893 samples, 0.12%)</title><rect x="39.1713%" y="197" width="0.1230%" height="15" fill="rgb(251,115,12)"/><text x="39.4213%" y="207.50"></text></g><g><title>type_op_prove_predicate (682,400 samples, 0.26%)</title><rect x="39.3723%" y="197" width="0.2624%" height="15" fill="rgb(240,54,50)"/><text x="39.6223%" y="207.50"></text></g><g><title>mir_borrowck (2,623,589 samples, 1.01%)</title><rect x="38.6265%" y="213" width="1.0088%" height="15" fill="rgb(233,84,52)"/><text x="38.8765%" y="223.50"></text></g><g><title>mir_const (729,966 samples, 0.28%)</title><rect x="39.8750%" y="197" width="0.2807%" height="15" fill="rgb(207,117,47)"/><text x="40.1250%" y="207.50"></text></g><g><title>mir_promoted (1,370,574 samples, 0.53%)</title><rect x="39.6353%" y="213" width="0.5270%" height="15" fill="rgb(249,43,39)"/><text x="39.8853%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (1,466,529 samples, 0.56%)</title><rect x="40.2071%" y="213" width="0.5639%" height="15" fill="rgb(209,38,44)"/><text x="40.4571%" y="223.50"></text></g><g><title>normalize_projection_ty (1,041,999 samples, 0.40%)</title><rect x="40.3704%" y="197" width="0.4006%" height="15" fill="rgb(236,212,23)"/><text x="40.6204%" y="207.50"></text></g><g><title>type_op_normalize_predicate (486,246 samples, 0.19%)</title><rect x="40.7710%" y="213" width="0.1870%" height="15" fill="rgb(242,79,21)"/><text x="41.0210%" y="223.50"></text></g><g><title>type_op_prove_predicate (3,720,126 samples, 1.43%)</title><rect x="41.0024%" y="213" width="1.4304%" height="15" fill="rgb(211,96,35)"/><text x="41.2524%" y="223.50"></text></g><g><title>mir_borrowck (20,098,961 samples, 7.73%)</title><rect x="34.7053%" y="229" width="7.7281%" height="15" fill="rgb(253,215,40)"/><text x="34.9553%" y="239.50">mir_borrowck</text></g><g><title>needs_drop_raw (466,847 samples, 0.18%)</title><rect x="42.9270%" y="165" width="0.1795%" height="15" fill="rgb(211,81,21)"/><text x="43.1770%" y="175.50"></text></g><g><title>associated_items (380,273 samples, 0.15%)</title><rect x="53.4473%" y="149" width="0.1462%" height="15" fill="rgb(208,190,38)"/><text x="53.6973%" y="159.50"></text></g><g><title>adt_def (289,923 samples, 0.11%)</title><rect x="54.2213%" y="117" width="0.1115%" height="15" fill="rgb(235,213,38)"/><text x="54.4713%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (284,943 samples, 0.11%)</title><rect x="54.2232%" y="101" width="0.1096%" height="15" fill="rgb(237,122,38)"/><text x="54.4732%" y="111.50"></text></g><g><title>impl_trait_ref (374,715 samples, 0.14%)</title><rect x="54.4453%" y="53" width="0.1441%" height="15" fill="rgb(244,218,35)"/><text x="54.6953%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (340,844 samples, 0.13%)</title><rect x="54.4583%" y="37" width="0.1311%" height="15" fill="rgb(240,68,47)"/><text x="54.7083%" y="47.50"></text></g><g><title>coherent_trait (687,718 samples, 0.26%)</title><rect x="54.3490%" y="85" width="0.2644%" height="15" fill="rgb(210,16,53)"/><text x="54.5990%" y="95.50"></text></g><g><title>specialization_graph_of (685,168 samples, 0.26%)</title><rect x="54.3500%" y="69" width="0.2634%" height="15" fill="rgb(235,124,12)"/><text x="54.6000%" y="79.50"></text></g><g><title>adt_destructor (744,069 samples, 0.29%)</title><rect x="54.3328%" y="117" width="0.2861%" height="15" fill="rgb(224,169,11)"/><text x="54.5828%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (726,668 samples, 0.28%)</title><rect x="54.3395%" y="101" width="0.2794%" height="15" fill="rgb(250,166,2)"/><text x="54.5895%" y="111.50"></text></g><g><title>adt_def (284,591 samples, 0.11%)</title><rect x="54.6475%" y="101" width="0.1094%" height="15" fill="rgb(242,216,29)"/><text x="54.8975%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (281,191 samples, 0.11%)</title><rect x="54.6488%" y="85" width="0.1081%" height="15" fill="rgb(230,116,27)"/><text x="54.8988%" y="95.50"></text></g><g><title>adt_dtorck_constraint (527,867 samples, 0.20%)</title><rect x="54.9258%" y="85" width="0.2030%" height="15" fill="rgb(228,99,48)"/><text x="55.1758%" y="95.50"></text></g><g><title>adt_dtorck_constraint (976,043 samples, 0.38%)</title><rect x="54.7713%" y="101" width="0.3753%" height="15" fill="rgb(253,11,6)"/><text x="55.0213%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,432,887 samples, 0.55%)</title><rect x="54.6189%" y="117" width="0.5509%" height="15" fill="rgb(247,143,39)"/><text x="54.8689%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,654,580 samples, 1.02%)</title><rect x="54.1741%" y="133" width="1.0207%" height="15" fill="rgb(236,97,10)"/><text x="54.4241%" y="143.50"></text></g><g><title>normalize_projection_ty (334,885 samples, 0.13%)</title><rect x="55.2614%" y="133" width="0.1288%" height="15" fill="rgb(233,208,19)"/><text x="55.5114%" y="143.50"></text></g><g><title>dropck_outlives (4,624,520 samples, 1.78%)</title><rect x="53.6138%" y="149" width="1.7781%" height="15" fill="rgb(216,164,2)"/><text x="53.8638%" y="159.50">d..</text></g><g><title>evaluate_obligation (5,194,894 samples, 2.00%)</title><rect x="55.3945%" y="149" width="1.9974%" height="15" fill="rgb(220,129,5)"/><text x="55.6445%" y="159.50">e..</text></g><g><title>trait_impls_of (616,285 samples, 0.24%)</title><rect x="57.1550%" y="133" width="0.2370%" height="15" fill="rgb(242,17,10)"/><text x="57.4050%" y="143.50"></text></g><g><title>implementations_of_trait (283,793 samples, 0.11%)</title><rect x="57.2829%" y="117" width="0.1091%" height="15" fill="rgb(242,107,0)"/><text x="57.5329%" y="127.50"></text></g><g><title>implied_outlives_bounds (334,762 samples, 0.13%)</title><rect x="57.5167%" y="149" width="0.1287%" height="15" fill="rgb(251,28,31)"/><text x="57.7667%" y="159.50"></text></g><g><title>is_copy_raw (2,263,537 samples, 0.87%)</title><rect x="57.6606%" y="149" width="0.8703%" height="15" fill="rgb(233,223,10)"/><text x="57.9106%" y="159.50"></text></g><g><title>evaluate_obligation (1,891,541 samples, 0.73%)</title><rect x="57.8036%" y="133" width="0.7273%" height="15" fill="rgb(215,21,27)"/><text x="58.0536%" y="143.50"></text></g><g><title>item_attrs (530,186 samples, 0.20%)</title><rect x="58.5309%" y="149" width="0.2039%" height="15" fill="rgb(232,23,21)"/><text x="58.7809%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (519,456 samples, 0.20%)</title><rect x="58.5351%" y="133" width="0.1997%" height="15" fill="rgb(244,5,23)"/><text x="58.7851%" y="143.50"></text></g><g><title>item_bounds (377,137 samples, 0.15%)</title><rect x="58.7348%" y="149" width="0.1450%" height="15" fill="rgb(226,81,46)"/><text x="58.9848%" y="159.50"></text></g><g><title>explicit_item_bounds (324,806 samples, 0.12%)</title><rect x="58.7549%" y="133" width="0.1249%" height="15" fill="rgb(247,70,30)"/><text x="59.0049%" y="143.50"></text></g><g><title>predicates_of (381,497 samples, 0.15%)</title><rect x="59.0211%" y="149" width="0.1467%" height="15" fill="rgb(212,68,19)"/><text x="59.2711%" y="159.50"></text></g><g><title>predicates_defined_on (261,156 samples, 0.10%)</title><rect x="59.0674%" y="133" width="0.1004%" height="15" fill="rgb(240,187,13)"/><text x="59.3174%" y="143.50"></text></g><g><title>mir_built (43,505,054 samples, 16.73%)</title><rect x="42.6515%" y="181" width="16.7277%" height="15" fill="rgb(223,113,26)"/><text x="42.9015%" y="191.50">mir_built</text></g><g><title>typeck (42,035,066 samples, 16.16%)</title><rect x="43.2168%" y="165" width="16.1625%" height="15" fill="rgb(206,192,2)"/><text x="43.4668%" y="175.50">typeck</text></g><g><title>adt_drop_tys (444,254 samples, 0.17%)</title><rect x="60.5261%" y="133" width="0.1708%" height="15" fill="rgb(241,108,4)"/><text x="60.7761%" y="143.50"></text></g><g><title>is_copy_raw (338,214 samples, 0.13%)</title><rect x="60.6969%" y="133" width="0.1300%" height="15" fill="rgb(247,173,49)"/><text x="60.9469%" y="143.50"></text></g><g><title>needs_drop_raw (971,729 samples, 0.37%)</title><rect x="60.4549%" y="149" width="0.3736%" height="15" fill="rgb(224,114,35)"/><text x="60.7049%" y="159.50"></text></g><g><title>param_env (347,832 samples, 0.13%)</title><rect x="61.0641%" y="133" width="0.1337%" height="15" fill="rgb(245,159,27)"/><text x="61.3141%" y="143.50"></text></g><g><title>thir_body (921,331 samples, 0.35%)</title><rect x="60.8463%" y="149" width="0.3543%" height="15" fill="rgb(245,172,44)"/><text x="61.0963%" y="159.50"></text></g><g><title>mir_built (4,338,018 samples, 1.67%)</title><rect x="59.5488%" y="165" width="1.6680%" height="15" fill="rgb(236,23,11)"/><text x="59.7988%" y="175.50"></text></g><g><title>needs_drop_raw (334,247 samples, 0.13%)</title><rect x="61.3883%" y="133" width="0.1285%" height="15" fill="rgb(205,117,38)"/><text x="61.6383%" y="143.50"></text></g><g><title>mir_built (841,888 samples, 0.32%)</title><rect x="61.2713%" y="149" width="0.3237%" height="15" fill="rgb(237,72,25)"/><text x="61.5213%" y="159.50"></text></g><g><title>mir_const (49,626,490 samples, 19.08%)</title><rect x="42.5141%" y="213" width="19.0814%" height="15" fill="rgb(244,70,9)"/><text x="42.7641%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (49,363,227 samples, 18.98%)</title><rect x="42.6153%" y="197" width="18.9802%" height="15" fill="rgb(217,125,39)"/><text x="42.8653%" y="207.50">unsafety_check_result</text></g><g><title>unsafety_check_result (5,763,962 samples, 2.22%)</title><rect x="59.3793%" y="181" width="2.2162%" height="15" fill="rgb(235,36,10)"/><text x="59.6293%" y="191.50">u..</text></g><g><title>unsafety_check_result (980,410 samples, 0.38%)</title><rect x="61.2186%" y="165" width="0.3770%" height="15" fill="rgb(251,123,47)"/><text x="61.4686%" y="175.50"></text></g><g><title>mir_promoted (49,855,586 samples, 19.17%)</title><rect x="42.4334%" y="229" width="19.1695%" height="15" fill="rgb(221,13,13)"/><text x="42.6834%" y="239.50">mir_promoted</text></g><g><title>item_types_checking (77,897,216 samples, 29.95%)</title><rect x="32.2010%" y="293" width="29.9516%" height="15" fill="rgb(238,131,9)"/><text x="32.4510%" y="303.50">item_types_checking</text></g><g><title>check_mod_item_types (77,883,956 samples, 29.95%)</title><rect x="32.2061%" y="277" width="29.9465%" height="15" fill="rgb(211,50,8)"/><text x="32.4561%" y="287.50">check_mod_item_types</text></g><g><title>type_of (74,999,524 samples, 28.84%)</title><rect x="33.3152%" y="261" width="28.8374%" height="15" fill="rgb(245,182,24)"/><text x="33.5652%" y="271.50">type_of</text></g><g><title>mir_borrowck (74,935,384 samples, 28.81%)</title><rect x="33.3399%" y="245" width="28.8127%" height="15" fill="rgb(242,14,37)"/><text x="33.5899%" y="255.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,170,139 samples, 0.45%)</title><rect x="61.7027%" y="229" width="0.4499%" height="15" fill="rgb(246,228,12)"/><text x="61.9527%" y="239.50"></text></g><g><title>fn_sig (492,427 samples, 0.19%)</title><rect x="62.2829%" y="261" width="0.1893%" height="15" fill="rgb(213,55,15)"/><text x="62.5329%" y="271.50"></text></g><g><title>generics_of (295,952 samples, 0.11%)</title><rect x="62.4723%" y="261" width="0.1138%" height="15" fill="rgb(209,9,3)"/><text x="62.7223%" y="271.50"></text></g><g><title>late_bound_vars_map (712,318 samples, 0.27%)</title><rect x="62.8168%" y="213" width="0.2739%" height="15" fill="rgb(230,59,30)"/><text x="63.0668%" y="223.50"></text></g><g><title>resolve_lifetimes (690,917 samples, 0.27%)</title><rect x="62.8251%" y="197" width="0.2657%" height="15" fill="rgb(209,121,21)"/><text x="63.0751%" y="207.50"></text></g><g><title>explicit_predicates_of (1,261,397 samples, 0.49%)</title><rect x="62.6514%" y="229" width="0.4850%" height="15" fill="rgb(220,109,13)"/><text x="62.9014%" y="239.50"></text></g><g><title>predicates_of (1,674,950 samples, 0.64%)</title><rect x="62.5996%" y="261" width="0.6440%" height="15" fill="rgb(232,18,1)"/><text x="62.8496%" y="271.50"></text></g><g><title>predicates_defined_on (1,623,430 samples, 0.62%)</title><rect x="62.6194%" y="245" width="0.6242%" height="15" fill="rgb(215,41,42)"/><text x="62.8694%" y="255.50"></text></g><g><title>inferred_outlives_of (278,873 samples, 0.11%)</title><rect x="63.1364%" y="229" width="0.1072%" height="15" fill="rgb(224,123,36)"/><text x="63.3864%" y="239.50"></text></g><g><title>type_collecting (2,951,813 samples, 1.13%)</title><rect x="62.1557%" y="293" width="1.1350%" height="15" fill="rgb(240,125,3)"/><text x="62.4057%" y="303.50"></text></g><g><title>collect_mod_item_types (2,940,413 samples, 1.13%)</title><rect x="62.1601%" y="277" width="1.1306%" height="15" fill="rgb(205,98,50)"/><text x="62.4101%" y="287.50"></text></g><g><title>evaluate_obligation (805,385 samples, 0.31%)</title><rect x="64.3503%" y="261" width="0.3097%" height="15" fill="rgb(205,185,37)"/><text x="64.6003%" y="271.50"></text></g><g><title>implied_outlives_bounds (326,573 samples, 0.13%)</title><rect x="64.6754%" y="261" width="0.1256%" height="15" fill="rgb(238,207,15)"/><text x="64.9254%" y="271.50"></text></g><g><title>param_env (287,405 samples, 0.11%)</title><rect x="64.8012%" y="261" width="0.1105%" height="15" fill="rgb(213,199,42)"/><text x="65.0512%" y="271.50"></text></g><g><title>region_scope_tree (351,905 samples, 0.14%)</title><rect x="64.9445%" y="261" width="0.1353%" height="15" fill="rgb(235,201,11)"/><text x="65.1945%" y="271.50"></text></g><g><title>check_impl_item_well_formed (4,415,117 samples, 1.70%)</title><rect x="63.3971%" y="277" width="1.6976%" height="15" fill="rgb(207,46,11)"/><text x="63.6471%" y="287.50"></text></g><g><title>adt_sized_constraint (295,684 samples, 0.11%)</title><rect x="66.0482%" y="229" width="0.1137%" height="15" fill="rgb(241,35,35)"/><text x="66.2982%" y="239.50"></text></g><g><title>adt_sized_constraint (365,344 samples, 0.14%)</title><rect x="66.0258%" y="245" width="0.1405%" height="15" fill="rgb(243,32,47)"/><text x="66.2758%" y="255.50"></text></g><g><title>evaluate_obligation (606,036 samples, 0.23%)</title><rect x="65.9809%" y="261" width="0.2330%" height="15" fill="rgb(247,202,23)"/><text x="66.2309%" y="271.50"></text></g><g><title>param_env (668,428 samples, 0.26%)</title><rect x="66.2838%" y="261" width="0.2570%" height="15" fill="rgb(219,102,11)"/><text x="66.5338%" y="271.50"></text></g><g><title>region_scope_tree (329,212 samples, 0.13%)</title><rect x="66.5861%" y="261" width="0.1266%" height="15" fill="rgb(243,110,44)"/><text x="66.8361%" y="271.50"></text></g><g><title>check_item_well_formed (4,526,228 samples, 1.74%)</title><rect x="65.0947%" y="277" width="1.7403%" height="15" fill="rgb(222,74,54)"/><text x="65.3447%" y="287.50"></text></g><g><title>analysis (173,465,488 samples, 66.70%)</title><rect x="0.2574%" y="325" width="66.6976%" height="15" fill="rgb(216,99,12)"/><text x="0.5074%" y="335.50">analysis</text></g><g><title>type_check_crate (131,732,124 samples, 50.65%)</title><rect x="16.3040%" y="309" width="50.6511%" height="15" fill="rgb(226,22,26)"/><text x="16.5540%" y="319.50">type_check_crate</text></g><g><title>wf_checking (9,522,266 samples, 3.66%)</title><rect x="63.2938%" y="293" width="3.6613%" height="15" fill="rgb(217,163,10)"/><text x="63.5438%" y="303.50">wf_c..</text></g><g><title>check_trait_item_well_formed (312,224 samples, 0.12%)</title><rect x="66.8350%" y="277" width="0.1201%" height="15" fill="rgb(213,25,53)"/><text x="67.0850%" y="287.50"></text></g><g><title>codegen_crate (597,587 samples, 0.23%)</title><rect x="66.9587%" y="325" width="0.2298%" height="15" fill="rgb(252,105,26)"/><text x="67.2087%" y="335.50"></text></g><g><title>metadata_load_macro (287,364 samples, 0.11%)</title><rect x="78.6388%" y="277" width="0.1105%" height="15" fill="rgb(220,39,43)"/><text x="78.8888%" y="287.50"></text></g><g><title>metadata_register_crate (19,392,246 samples, 7.46%)</title><rect x="78.7493%" y="277" width="7.4563%" height="15" fill="rgb(229,68,48)"/><text x="78.9993%" y="287.50">metadata_r..</text></g><g><title>metadata_register_crate (15,970,059 samples, 6.14%)</title><rect x="80.0651%" y="261" width="6.1405%" height="15" fill="rgb(252,8,32)"/><text x="80.3151%" y="271.50">metadata..</text></g><g><title>metadata_register_crate (7,380,742 samples, 2.84%)</title><rect x="83.3677%" y="245" width="2.8379%" height="15" fill="rgb(223,20,43)"/><text x="83.6177%" y="255.50">me..</text></g><g><title>metadata_register_crate (416,156 samples, 0.16%)</title><rect x="86.0456%" y="229" width="0.1600%" height="15" fill="rgb(229,81,49)"/><text x="86.2956%" y="239.50"></text></g><g><title>macro_expand_crate (49,309,128 samples, 18.96%)</title><rect x="67.3812%" y="309" width="18.9594%" height="15" fill="rgb(236,28,36)"/><text x="67.6312%" y="319.50">macro_expand_crate</text></g><g><title>expand_crate (49,296,698 samples, 18.95%)</title><rect x="67.3860%" y="293" width="18.9546%" height="15" fill="rgb(249,185,26)"/><text x="67.6360%" y="303.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (351,143 samples, 0.14%)</title><rect x="86.2056%" y="277" width="0.1350%" height="15" fill="rgb(249,174,33)"/><text x="86.4556%" y="287.50"></text></g><g><title>late_resolve_crate (2,245,535 samples, 0.86%)</title><rect x="86.5552%" y="293" width="0.8634%" height="15" fill="rgb(233,201,37)"/><text x="86.8052%" y="303.50"></text></g><g><title>configure_and_expand (52,758,956 samples, 20.29%)</title><rect x="67.1885%" y="325" width="20.2859%" height="15" fill="rgb(221,78,26)"/><text x="67.4385%" y="335.50">configure_and_expand</text></g><g><title>resolve_crate (2,733,941 samples, 1.05%)</title><rect x="86.4232%" y="309" width="1.0512%" height="15" fill="rgb(250,127,30)"/><text x="86.6732%" y="319.50"></text></g><g><title>early_lint_checks (410,675 samples, 0.16%)</title><rect x="87.5739%" y="325" width="0.1579%" height="15" fill="rgb(230,49,44)"/><text x="87.8239%" y="335.50"></text></g><g><title>free_global_ctxt (5,015,885 samples, 1.93%)</title><rect x="87.7318%" y="325" width="1.9286%" height="15" fill="rgb(229,67,23)"/><text x="87.9818%" y="335.50">f..</text></g><g><title>layout_of (336,945 samples, 0.13%)</title><rect x="92.7761%" y="117" width="0.1296%" height="15" fill="rgb(249,83,47)"/><text x="93.0261%" y="127.50"></text></g><g><title>layout_of (398,765 samples, 0.15%)</title><rect x="92.7594%" y="133" width="0.1533%" height="15" fill="rgb(215,43,3)"/><text x="93.0094%" y="143.50"></text></g><g><title>layout_of (466,685 samples, 0.18%)</title><rect x="92.7403%" y="149" width="0.1794%" height="15" fill="rgb(238,154,13)"/><text x="92.9903%" y="159.50"></text></g><g><title>layout_of (591,507 samples, 0.23%)</title><rect x="92.7020%" y="165" width="0.2274%" height="15" fill="rgb(219,56,2)"/><text x="92.9520%" y="175.50"></text></g><g><title>layout_of (735,329 samples, 0.28%)</title><rect x="92.6592%" y="181" width="0.2827%" height="15" fill="rgb(233,0,4)"/><text x="92.9092%" y="191.50"></text></g><g><title>layout_of (901,929 samples, 0.35%)</title><rect x="92.6090%" y="197" width="0.3468%" height="15" fill="rgb(235,30,7)"/><text x="92.8590%" y="207.50"></text></g><g><title>layout_of (1,034,560 samples, 0.40%)</title><rect x="92.5755%" y="213" width="0.3978%" height="15" fill="rgb(250,79,13)"/><text x="92.8255%" y="223.50"></text></g><g><title>layout_of (1,115,281 samples, 0.43%)</title><rect x="92.5523%" y="229" width="0.4288%" height="15" fill="rgb(211,146,34)"/><text x="92.8023%" y="239.50"></text></g><g><title>layout_of (1,325,534 samples, 0.51%)</title><rect x="92.4755%" y="293" width="0.5097%" height="15" fill="rgb(228,22,38)"/><text x="92.7255%" y="303.50"></text></g><g><title>layout_of (1,256,413 samples, 0.48%)</title><rect x="92.5021%" y="277" width="0.4831%" height="15" fill="rgb(235,168,5)"/><text x="92.7521%" y="287.50"></text></g><g><title>layout_of (1,224,093 samples, 0.47%)</title><rect x="92.5145%" y="261" width="0.4707%" height="15" fill="rgb(221,155,16)"/><text x="92.7645%" y="271.50"></text></g><g><title>layout_of (1,195,162 samples, 0.46%)</title><rect x="92.5257%" y="245" width="0.4595%" height="15" fill="rgb(215,215,53)"/><text x="92.7757%" y="255.50"></text></g><g><title>is_copy_raw (1,576,411 samples, 0.61%)</title><rect x="95.3811%" y="261" width="0.6061%" height="15" fill="rgb(223,4,10)"/><text x="95.6311%" y="271.50"></text></g><g><title>evaluate_obligation (1,287,198 samples, 0.49%)</title><rect x="95.4923%" y="245" width="0.4949%" height="15" fill="rgb(234,103,6)"/><text x="95.7423%" y="255.50"></text></g><g><title>needs_drop_raw (1,901,974 samples, 0.73%)</title><rect x="95.2581%" y="277" width="0.7313%" height="15" fill="rgb(227,97,0)"/><text x="95.5081%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,660,813 samples, 3.33%)</title><rect x="92.9852%" y="293" width="3.3301%" height="15" fill="rgb(234,150,53)"/><text x="93.2352%" y="303.50">mir..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (836,542 samples, 0.32%)</title><rect x="95.9936%" y="277" width="0.3217%" height="15" fill="rgb(228,201,54)"/><text x="96.2436%" y="287.50"></text></g><g><title>normalize_projection_ty (467,947 samples, 0.18%)</title><rect x="96.1354%" y="261" width="0.1799%" height="15" fill="rgb(222,22,37)"/><text x="96.3854%" y="271.50"></text></g><g><title>optimized_mir (14,609,238 samples, 5.62%)</title><rect x="90.7053%" y="309" width="5.6173%" height="15" fill="rgb(237,53,32)"/><text x="90.9553%" y="319.50">optimiz..</text></g><g><title>generate_crate_metadata (17,398,293 samples, 6.69%)</title><rect x="89.6605%" y="325" width="6.6897%" height="15" fill="rgb(233,25,53)"/><text x="89.9105%" y="335.50">generate_..</text></g><g><title>hir_lowering (4,287,508 samples, 1.65%)</title><rect x="96.3501%" y="325" width="1.6486%" height="15" fill="rgb(210,40,34)"/><text x="96.6001%" y="335.50"></text></g><g><title>parse_crate (3,246,346 samples, 1.25%)</title><rect x="98.0245%" y="325" width="1.2482%" height="15" fill="rgb(241,220,44)"/><text x="98.2745%" y="335.50"></text></g><g><title>self_profile_alloc_query_strings (1,142,423 samples, 0.44%)</title><rect x="99.3559%" y="325" width="0.4393%" height="15" fill="rgb(235,28,35)"/><text x="99.6059%" y="335.50"></text></g><g><title>all (260,077,370 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="367.50"></text></g><g><title>rustc (260,077,370 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="351.50">rustc</text></g><g><title>write_crate_metadata (442,975 samples, 0.17%)</title><rect x="99.8297%" y="325" width="0.1703%" height="15" fill="rgb(235,212,8)"/><text x="100.0797%" y="335.50"></text></g></svg></svg>