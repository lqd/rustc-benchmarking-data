<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>hir_module_items (93,512 samples, 0.48%)</title><rect x="4.0241%" y="149" width="0.4816%" height="15" fill="rgb(227,0,7)"/><text x="4.2741%" y="159.50"></text></g><g><title>hir_owner (28,260 samples, 0.15%)</title><rect x="4.3601%" y="133" width="0.1455%" height="15" fill="rgb(217,0,24)"/><text x="4.6101%" y="143.50"></text></g><g><title>check_mod_attrs (33,610 samples, 0.17%)</title><rect x="4.6552%" y="133" width="0.1731%" height="15" fill="rgb(221,193,54)"/><text x="4.9052%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (104,341 samples, 0.54%)</title><rect x="4.9385%" y="133" width="0.5373%" height="15" fill="rgb(248,212,6)"/><text x="5.1885%" y="143.50"></text></g><g><title>looking_for_derive_registrar (40,171 samples, 0.21%)</title><rect x="5.4816%" y="133" width="0.2069%" height="15" fill="rgb(208,68,35)"/><text x="5.7316%" y="143.50"></text></g><g><title>misc_checking_1 (240,973 samples, 1.24%)</title><rect x="4.5099%" y="149" width="1.2410%" height="15" fill="rgb(232,128,0)"/><text x="4.7599%" y="159.50"></text></g><g><title>get_lang_items (65,920 samples, 0.34%)</title><rect x="6.1519%" y="101" width="0.3395%" height="15" fill="rgb(207,160,47)"/><text x="6.4019%" y="111.50"></text></g><g><title>codegen_fn_attrs (136,142 samples, 0.70%)</title><rect x="6.0062%" y="117" width="0.7011%" height="15" fill="rgb(228,23,34)"/><text x="6.2562%" y="127.50"></text></g><g><title>supported_target_features (37,121 samples, 0.19%)</title><rect x="6.5161%" y="101" width="0.1912%" height="15" fill="rgb(218,30,26)"/><text x="6.7661%" y="111.50"></text></g><g><title>death_checking (179,722 samples, 0.93%)</title><rect x="5.8881%" y="133" width="0.9255%" height="15" fill="rgb(220,122,19)"/><text x="6.1381%" y="143.50"></text></g><g><title>lint_levels (19,550 samples, 0.10%)</title><rect x="6.7130%" y="117" width="0.1007%" height="15" fill="rgb(250,228,42)"/><text x="6.9630%" y="127.50"></text></g><g><title>explicit_predicates_of (51,650 samples, 0.27%)</title><rect x="8.3750%" y="53" width="0.2660%" height="15" fill="rgb(240,193,28)"/><text x="8.6250%" y="63.50"></text></g><g><title>generics_of (24,250 samples, 0.12%)</title><rect x="8.5161%" y="37" width="0.1249%" height="15" fill="rgb(216,20,37)"/><text x="8.7661%" y="47.50"></text></g><g><title>crate_lints (343,904 samples, 1.77%)</title><rect x="6.8751%" y="117" width="1.7711%" height="15" fill="rgb(206,188,39)"/><text x="7.1251%" y="127.50">c..</text></g><g><title>param_env (322,743 samples, 1.66%)</title><rect x="6.9840%" y="101" width="1.6621%" height="15" fill="rgb(217,207,13)"/><text x="7.2340%" y="111.50"></text></g><g><title>predicates_of (66,611 samples, 0.34%)</title><rect x="8.3031%" y="85" width="0.3430%" height="15" fill="rgb(231,73,38)"/><text x="8.5531%" y="95.50"></text></g><g><title>predicates_defined_on (62,821 samples, 0.32%)</title><rect x="8.3226%" y="69" width="0.3235%" height="15" fill="rgb(225,20,46)"/><text x="8.5726%" y="79.50"></text></g><g><title>lint_checking (377,055 samples, 1.94%)</title><rect x="6.8137%" y="133" width="1.9418%" height="15" fill="rgb(210,31,41)"/><text x="7.0637%" y="143.50">l..</text></g><g><title>module_lints (21,231 samples, 0.11%)</title><rect x="8.6461%" y="117" width="0.1093%" height="15" fill="rgb(221,200,47)"/><text x="8.8961%" y="127.50"></text></g><g><title>privacy_access_levels (22,880 samples, 0.12%)</title><rect x="8.7554%" y="133" width="0.1178%" height="15" fill="rgb(226,26,5)"/><text x="9.0054%" y="143.50"></text></g><g><title>misc_checking_3 (627,957 samples, 3.23%)</title><rect x="5.8028%" y="149" width="3.2339%" height="15" fill="rgb(249,33,26)"/><text x="6.0528%" y="159.50">mis..</text></g><g><title>unused_lib_feature_checking (28,140 samples, 0.14%)</title><rect x="8.8918%" y="133" width="0.1449%" height="15" fill="rgb(235,183,28)"/><text x="9.1418%" y="143.50"></text></g><g><title>coherence_checking (52,340 samples, 0.27%)</title><rect x="9.2480%" y="133" width="0.2695%" height="15" fill="rgb(221,5,38)"/><text x="9.4980%" y="143.50"></text></g><g><title>type_collecting (61,771 samples, 0.32%)</title><rect x="9.6934%" y="133" width="0.3181%" height="15" fill="rgb(247,18,42)"/><text x="9.9434%" y="143.50"></text></g><g><title>collect_mod_item_types (34,971 samples, 0.18%)</title><rect x="9.8315%" y="117" width="0.1801%" height="15" fill="rgb(241,131,45)"/><text x="10.0815%" y="127.50"></text></g><g><title>analysis (1,309,485 samples, 6.74%)</title><rect x="3.3833%" y="165" width="6.7436%" height="15" fill="rgb(249,31,29)"/><text x="3.6333%" y="175.50">analysis</text></g><g><title>type_check_crate (211,702 samples, 1.09%)</title><rect x="9.0367%" y="149" width="1.0902%" height="15" fill="rgb(225,111,53)"/><text x="9.2867%" y="159.50"></text></g><g><title>wf_checking (22,401 samples, 0.12%)</title><rect x="10.0116%" y="133" width="0.1154%" height="15" fill="rgb(238,160,17)"/><text x="10.2616%" y="143.50"></text></g><g><title>native_libraries (43,502 samples, 0.22%)</title><rect x="13.6471%" y="149" width="0.2240%" height="15" fill="rgb(214,148,48)"/><text x="13.8971%" y="159.50"></text></g><g><title>metadata_decode_entry_native_libraries (32,221 samples, 0.17%)</title><rect x="13.7052%" y="133" width="0.1659%" height="15" fill="rgb(232,36,49)"/><text x="13.9552%" y="143.50"></text></g><g><title>codegen_crate (742,438 samples, 3.82%)</title><rect x="10.1846%" y="165" width="3.8234%" height="15" fill="rgb(209,103,24)"/><text x="10.4346%" y="175.50">code..</text></g><g><title>AST_validation (20,751 samples, 0.11%)</title><rect x="15.1984%" y="149" width="0.1069%" height="15" fill="rgb(229,88,8)"/><text x="15.4484%" y="159.50"></text></g><g><title>crate_injection (151,762 samples, 0.78%)</title><rect x="15.3768%" y="149" width="0.7816%" height="15" fill="rgb(213,181,19)"/><text x="15.6268%" y="159.50"></text></g><g><title>metadata_load_macro (62,810 samples, 0.32%)</title><rect x="60.7095%" y="117" width="0.3235%" height="15" fill="rgb(254,191,54)"/><text x="60.9595%" y="127.50"></text></g><g><title>macro_expand_crate (11,483,018 samples, 59.14%)</title><rect x="16.1584%" y="149" width="59.1357%" height="15" fill="rgb(241,83,37)"/><text x="16.4084%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (11,458,858 samples, 59.01%)</title><rect x="16.2828%" y="133" width="59.0113%" height="15" fill="rgb(233,36,39)"/><text x="16.5328%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (2,769,231 samples, 14.26%)</title><rect x="61.0330%" y="117" width="14.2611%" height="15" fill="rgb(226,3,54)"/><text x="61.2830%" y="127.50">metadata_register_crate</text></g><g><title>metadata_register_crate (990,722 samples, 5.10%)</title><rect x="70.1920%" y="101" width="5.1021%" height="15" fill="rgb(245,192,40)"/><text x="70.4420%" y="111.50">metada..</text></g><g><title>metadata_register_crate (81,361 samples, 0.42%)</title><rect x="74.8751%" y="85" width="0.4190%" height="15" fill="rgb(238,167,29)"/><text x="75.1251%" y="95.50"></text></g><g><title>pre_AST_expansion_lint_checks (57,530 samples, 0.30%)</title><rect x="75.3170%" y="149" width="0.2963%" height="15" fill="rgb(232,182,51)"/><text x="75.5670%" y="159.50"></text></g><g><title>finalize_macro_resolutions (363,344 samples, 1.87%)</title><rect x="75.7269%" y="133" width="1.8712%" height="15" fill="rgb(231,60,39)"/><text x="75.9769%" y="143.50">f..</text></g><g><title>configure_and_expand (12,382,729 samples, 63.77%)</title><rect x="14.0080%" y="165" width="63.7691%" height="15" fill="rgb(208,69,12)"/><text x="14.2580%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (420,174 samples, 2.16%)</title><rect x="75.6133%" y="149" width="2.1638%" height="15" fill="rgb(235,93,37)"/><text x="75.8633%" y="159.50">r..</text></g><g><title>drop_compiler (22,251 samples, 0.11%)</title><rect x="77.7938%" y="165" width="0.1146%" height="15" fill="rgb(213,116,39)"/><text x="78.0438%" y="175.50"></text></g><g><title>early_lint_checks (38,181 samples, 0.20%)</title><rect x="77.9084%" y="165" width="0.1966%" height="15" fill="rgb(222,207,29)"/><text x="78.1584%" y="175.50"></text></g><g><title>free_global_ctxt (1,774,000 samples, 9.14%)</title><rect x="78.1051%" y="165" width="9.1358%" height="15" fill="rgb(206,96,30)"/><text x="78.3551%" y="175.50">free_global_c..</text></g><g><title>crate_hash (158,461 samples, 0.82%)</title><rect x="88.4220%" y="149" width="0.8160%" height="15" fill="rgb(218,138,4)"/><text x="88.6720%" y="159.50"></text></g><g><title>mir_keys (42,021 samples, 0.22%)</title><rect x="89.5658%" y="149" width="0.2164%" height="15" fill="rgb(250,191,14)"/><text x="89.8158%" y="159.50"></text></g><g><title>generate_crate_metadata (498,526 samples, 2.57%)</title><rect x="87.2409%" y="165" width="2.5673%" height="15" fill="rgb(239,60,40)"/><text x="87.4909%" y="175.50">ge..</text></g><g><title>hir_lowering (158,972 samples, 0.82%)</title><rect x="89.8082%" y="165" width="0.8187%" height="15" fill="rgb(206,27,48)"/><text x="90.0582%" y="175.50"></text></g><g><title>finish_ongoing_codegen (25,891 samples, 0.13%)</title><rect x="90.7497%" y="149" width="0.1333%" height="15" fill="rgb(225,35,8)"/><text x="90.9997%" y="159.50"></text></g><g><title>link_crate (23,110 samples, 0.12%)</title><rect x="90.8830%" y="149" width="0.1190%" height="15" fill="rgb(250,213,24)"/><text x="91.1330%" y="159.50"></text></g><g><title>link (80,591 samples, 0.42%)</title><rect x="90.6269%" y="165" width="0.4150%" height="15" fill="rgb(247,123,22)"/><text x="90.8769%" y="175.50"></text></g><g><title>parse_crate (363,564 samples, 1.87%)</title><rect x="91.0419%" y="165" width="1.8723%" height="15" fill="rgb(231,138,38)"/><text x="91.2919%" y="175.50">p..</text></g><g><title>prepare_outputs (311,403 samples, 1.60%)</title><rect x="92.9708%" y="165" width="1.6037%" height="15" fill="rgb(231,145,46)"/><text x="93.2208%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (520,646 samples, 2.68%)</title><rect x="94.5745%" y="165" width="2.6812%" height="15" fill="rgb(251,118,11)"/><text x="94.8245%" y="175.50">se..</text></g><g><title>setup_global_ctxt (145,102 samples, 0.75%)</title><rect x="97.3505%" y="165" width="0.7473%" height="15" fill="rgb(217,147,25)"/><text x="97.6005%" y="175.50"></text></g><g><title>all (19,418,079 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,81,37)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (19,418,079 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(209,12,38)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (369,384 samples, 1.90%)</title><rect x="98.0977%" y="165" width="1.9023%" height="15" fill="rgb(227,1,9)"/><text x="98.3477%" y="175.50">w..</text></g></svg></svg>