<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (182,002 samples, 0.16%)</title><rect x="8.3918%" y="117" width="0.1586%" height="15" fill="rgb(227,0,7)"/><text x="8.6418%" y="127.50"></text></g><g><title>item_attrs (121,131 samples, 0.11%)</title><rect x="8.8571%" y="85" width="0.1056%" height="15" fill="rgb(217,0,24)"/><text x="9.1071%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (116,381 samples, 0.10%)</title><rect x="8.8613%" y="69" width="0.1014%" height="15" fill="rgb(221,193,54)"/><text x="9.1113%" y="79.50"></text></g><g><title>codegen_fn_attrs (184,983 samples, 0.16%)</title><rect x="8.8105%" y="101" width="0.1612%" height="15" fill="rgb(248,212,6)"/><text x="9.0605%" y="111.50"></text></g><g><title>needs_drop_raw (334,924 samples, 0.29%)</title><rect x="10.8524%" y="85" width="0.2919%" height="15" fill="rgb(208,68,35)"/><text x="11.1024%" y="95.50"></text></g><g><title>is_copy_raw (217,461 samples, 0.19%)</title><rect x="10.9548%" y="69" width="0.1895%" height="15" fill="rgb(232,128,0)"/><text x="11.2048%" y="79.50"></text></g><g><title>evaluate_obligation (177,871 samples, 0.16%)</title><rect x="10.9893%" y="53" width="0.1550%" height="15" fill="rgb(207,160,47)"/><text x="11.2393%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (172,620 samples, 0.15%)</title><rect x="11.2534%" y="69" width="0.1504%" height="15" fill="rgb(228,23,34)"/><text x="11.5034%" y="79.50"></text></g><g><title>impl_parent (239,620 samples, 0.21%)</title><rect x="11.7007%" y="53" width="0.2088%" height="15" fill="rgb(218,30,26)"/><text x="11.9507%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (168,820 samples, 0.15%)</title><rect x="11.7624%" y="37" width="0.1471%" height="15" fill="rgb(220,122,19)"/><text x="12.0124%" y="47.50"></text></g><g><title>specialization_graph_of (1,558,328 samples, 1.36%)</title><rect x="11.4184%" y="69" width="1.3581%" height="15" fill="rgb(250,228,42)"/><text x="11.6684%" y="79.50"></text></g><g><title>impl_trait_ref (994,763 samples, 0.87%)</title><rect x="11.9095%" y="53" width="0.8670%" height="15" fill="rgb(240,193,28)"/><text x="12.1595%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (701,569 samples, 0.61%)</title><rect x="12.1651%" y="37" width="0.6114%" height="15" fill="rgb(216,20,37)"/><text x="12.4151%" y="47.50"></text></g><g><title>resolve_instance (1,933,370 samples, 1.68%)</title><rect x="11.1443%" y="85" width="1.6850%" height="15" fill="rgb(206,188,39)"/><text x="11.3943%" y="95.50"></text></g><g><title>thir_body (877,071 samples, 0.76%)</title><rect x="12.8386%" y="85" width="0.7644%" height="15" fill="rgb(217,207,13)"/><text x="13.0886%" y="95.50"></text></g><g><title>mir_const (6,529,033 samples, 5.69%)</title><rect x="7.9186%" y="133" width="5.6903%" height="15" fill="rgb(231,73,38)"/><text x="8.1686%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (5,804,035 samples, 5.06%)</title><rect x="8.5505%" y="117" width="5.0584%" height="15" fill="rgb(225,20,46)"/><text x="8.8005%" y="127.50">unsafe..</text></g><g><title>mir_built (5,320,679 samples, 4.64%)</title><rect x="8.9717%" y="101" width="4.6372%" height="15" fill="rgb(210,31,41)"/><text x="9.2217%" y="111.50">mir_b..</text></g><g><title>mir_const_qualif (256,433 samples, 0.22%)</title><rect x="13.6089%" y="133" width="0.2235%" height="15" fill="rgb(221,200,47)"/><text x="13.8589%" y="143.50"></text></g><g><title>mir_const (188,223 samples, 0.16%)</title><rect x="13.6683%" y="117" width="0.1640%" height="15" fill="rgb(226,26,5)"/><text x="13.9183%" y="127.50"></text></g><g><title>unsafety_check_result (138,833 samples, 0.12%)</title><rect x="13.7114%" y="101" width="0.1210%" height="15" fill="rgb(249,33,26)"/><text x="13.9614%" y="111.50"></text></g><g><title>mir_built (122,703 samples, 0.11%)</title><rect x="13.7254%" y="85" width="0.1069%" height="15" fill="rgb(235,183,28)"/><text x="13.9754%" y="95.50"></text></g><g><title>mir_promoted (7,315,910 samples, 6.38%)</title><rect x="7.4564%" y="149" width="6.3761%" height="15" fill="rgb(221,5,38)"/><text x="7.7064%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (130,522 samples, 0.11%)</title><rect x="13.8331%" y="149" width="0.1138%" height="15" fill="rgb(247,18,42)"/><text x="14.0831%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (410,895 samples, 0.36%)</title><rect x="13.9469%" y="149" width="0.3581%" height="15" fill="rgb(241,131,45)"/><text x="14.1969%" y="159.50"></text></g><g><title>normalize_projection_ty (266,843 samples, 0.23%)</title><rect x="14.0724%" y="133" width="0.2326%" height="15" fill="rgb(249,31,29)"/><text x="14.3224%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,785,594 samples, 13.76%)</title><rect x="1.1419%" y="181" width="13.7577%" height="15" fill="rgb(225,111,53)"/><text x="1.3919%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,738,234 samples, 13.72%)</title><rect x="1.1831%" y="165" width="13.7164%" height="15" fill="rgb(238,160,17)"/><text x="1.4331%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (623,438 samples, 0.54%)</title><rect x="14.3562%" y="149" width="0.5433%" height="15" fill="rgb(214,148,48)"/><text x="14.6062%" y="159.50"></text></g><g><title>MIR_effect_checking (229,092 samples, 0.20%)</title><rect x="14.8995%" y="181" width="0.1997%" height="15" fill="rgb(232,36,49)"/><text x="15.1495%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (193,382 samples, 0.17%)</title><rect x="14.9307%" y="165" width="0.1685%" height="15" fill="rgb(209,103,24)"/><text x="15.1807%" y="175.50"></text></g><g><title>hir_module_items (228,933 samples, 0.20%)</title><rect x="15.0992%" y="181" width="0.1995%" height="15" fill="rgb(229,88,8)"/><text x="15.3492%" y="191.50"></text></g><g><title>get_lang_items (114,912 samples, 0.10%)</title><rect x="15.8315%" y="101" width="0.1001%" height="15" fill="rgb(213,181,19)"/><text x="16.0815%" y="111.50"></text></g><g><title>codegen_fn_attrs (218,173 samples, 0.19%)</title><rect x="15.7981%" y="117" width="0.1901%" height="15" fill="rgb(254,191,54)"/><text x="16.0481%" y="127.50"></text></g><g><title>codegen_fn_attrs (423,735 samples, 0.37%)</title><rect x="15.6242%" y="149" width="0.3693%" height="15" fill="rgb(241,83,37)"/><text x="15.8742%" y="159.50"></text></g><g><title>should_inherit_track_caller (335,283 samples, 0.29%)</title><rect x="15.7013%" y="133" width="0.2922%" height="15" fill="rgb(233,36,39)"/><text x="15.9513%" y="143.50"></text></g><g><title>check_mod_attrs (763,338 samples, 0.67%)</title><rect x="15.3287%" y="165" width="0.6653%" height="15" fill="rgb(226,3,54)"/><text x="15.5787%" y="175.50"></text></g><g><title>check_mod_const_bodies (127,252 samples, 0.11%)</title><rect x="15.9940%" y="165" width="0.1109%" height="15" fill="rgb(245,192,40)"/><text x="16.2440%" y="175.50"></text></g><g><title>lint_levels (200,523 samples, 0.17%)</title><rect x="16.3440%" y="149" width="0.1748%" height="15" fill="rgb(238,167,29)"/><text x="16.5940%" y="159.50"></text></g><g><title>lookup_deprecation_entry (161,321 samples, 0.14%)</title><rect x="16.5187%" y="149" width="0.1406%" height="15" fill="rgb(232,182,51)"/><text x="16.7687%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (612,736 samples, 0.53%)</title><rect x="16.1951%" y="165" width="0.5340%" height="15" fill="rgb(231,60,39)"/><text x="16.4451%" y="175.50"></text></g><g><title>misc_checking_1 (1,688,658 samples, 1.47%)</title><rect x="15.2992%" y="181" width="1.4717%" height="15" fill="rgb(208,69,12)"/><text x="15.5492%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (386,995 samples, 0.34%)</title><rect x="16.7726%" y="165" width="0.3373%" height="15" fill="rgb(235,93,37)"/><text x="17.0226%" y="175.50"></text></g><g><title>check_mod_liveness (319,265 samples, 0.28%)</title><rect x="16.8316%" y="149" width="0.2783%" height="15" fill="rgb(213,116,39)"/><text x="17.0816%" y="159.50"></text></g><g><title>misc_checking_2 (734,199 samples, 0.64%)</title><rect x="16.7709%" y="181" width="0.6399%" height="15" fill="rgb(222,207,29)"/><text x="17.0209%" y="191.50"></text></g><g><title>match_checking (345,314 samples, 0.30%)</title><rect x="17.1099%" y="165" width="0.3010%" height="15" fill="rgb(206,96,30)"/><text x="17.3599%" y="175.50"></text></g><g><title>check_match (332,083 samples, 0.29%)</title><rect x="17.1214%" y="149" width="0.2894%" height="15" fill="rgb(218,138,4)"/><text x="17.3714%" y="159.50"></text></g><g><title>death_checking (180,292 samples, 0.16%)</title><rect x="17.5010%" y="165" width="0.1571%" height="15" fill="rgb(250,191,14)"/><text x="17.7510%" y="175.50"></text></g><g><title>eval_to_const_value_raw (266,203 samples, 0.23%)</title><rect x="18.1396%" y="133" width="0.2320%" height="15" fill="rgb(239,60,40)"/><text x="18.3896%" y="143.50"></text></g><g><title>eval_to_const_value_raw (259,173 samples, 0.23%)</title><rect x="18.1458%" y="117" width="0.2259%" height="15" fill="rgb(206,27,48)"/><text x="18.3958%" y="127.50"></text></g><g><title>eval_to_allocation_raw (246,383 samples, 0.21%)</title><rect x="18.1569%" y="101" width="0.2147%" height="15" fill="rgb(225,35,8)"/><text x="18.4069%" y="111.50"></text></g><g><title>trait_impls_of (190,253 samples, 0.17%)</title><rect x="18.4315%" y="133" width="0.1658%" height="15" fill="rgb(250,213,24)"/><text x="18.6815%" y="143.50"></text></g><g><title>crate_lints (2,711,830 samples, 2.36%)</title><rect x="17.6599%" y="149" width="2.3635%" height="15" fill="rgb(247,123,22)"/><text x="17.9099%" y="159.50">cr..</text></g><g><title>type_of (1,632,367 samples, 1.42%)</title><rect x="18.6006%" y="133" width="1.4227%" height="15" fill="rgb(231,138,38)"/><text x="18.8506%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,391,036 samples, 1.21%)</title><rect x="18.8110%" y="117" width="1.2123%" height="15" fill="rgb(231,145,46)"/><text x="19.0610%" y="127.50"></text></g><g><title>lint_checking (3,009,853 samples, 2.62%)</title><rect x="17.6581%" y="165" width="2.6232%" height="15" fill="rgb(251,118,11)"/><text x="17.9081%" y="175.50">li..</text></g><g><title>module_lints (296,023 samples, 0.26%)</title><rect x="20.0233%" y="149" width="0.2580%" height="15" fill="rgb(217,147,25)"/><text x="20.2733%" y="159.50"></text></g><g><title>lint_mod (292,853 samples, 0.26%)</title><rect x="20.0261%" y="133" width="0.2552%" height="15" fill="rgb(247,81,37)"/><text x="20.2761%" y="143.50"></text></g><g><title>privacy_checking_modules (366,805 samples, 0.32%)</title><rect x="20.3718%" y="165" width="0.3197%" height="15" fill="rgb(209,12,38)"/><text x="20.6218%" y="175.50"></text></g><g><title>check_mod_privacy (364,395 samples, 0.32%)</title><rect x="20.3739%" y="149" width="0.3176%" height="15" fill="rgb(227,1,9)"/><text x="20.6239%" y="159.50"></text></g><g><title>misc_checking_3 (3,779,793 samples, 3.29%)</title><rect x="17.4108%" y="181" width="3.2942%" height="15" fill="rgb(248,47,43)"/><text x="17.6608%" y="191.50">mis..</text></g><g><title>impl_trait_ref (343,874 samples, 0.30%)</title><rect x="21.0523%" y="85" width="0.2997%" height="15" fill="rgb(221,10,30)"/><text x="21.3023%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (297,382 samples, 0.26%)</title><rect x="21.0928%" y="69" width="0.2592%" height="15" fill="rgb(210,229,1)"/><text x="21.3428%" y="79.50"></text></g><g><title>adt_destructor (706,818 samples, 0.62%)</title><rect x="20.7879%" y="133" width="0.6160%" height="15" fill="rgb(222,148,37)"/><text x="21.0379%" y="143.50"></text></g><g><title>coherent_trait (693,908 samples, 0.60%)</title><rect x="20.7992%" y="117" width="0.6048%" height="15" fill="rgb(234,67,33)"/><text x="21.0492%" y="127.50"></text></g><g><title>specialization_graph_of (691,298 samples, 0.60%)</title><rect x="20.8014%" y="101" width="0.6025%" height="15" fill="rgb(247,98,35)"/><text x="21.0514%" y="111.50"></text></g><g><title>is_copy_raw (145,362 samples, 0.13%)</title><rect x="21.4039%" y="133" width="0.1267%" height="15" fill="rgb(247,138,52)"/><text x="21.6539%" y="143.50"></text></g><g><title>param_env (271,653 samples, 0.24%)</title><rect x="21.5306%" y="133" width="0.2368%" height="15" fill="rgb(213,79,30)"/><text x="21.7806%" y="143.50"></text></g><g><title>impl_parent (2,059,200 samples, 1.79%)</title><rect x="24.9886%" y="117" width="1.7947%" height="15" fill="rgb(246,177,23)"/><text x="25.2386%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,122,929 samples, 0.98%)</title><rect x="25.8046%" y="101" width="0.9787%" height="15" fill="rgb(230,62,27)"/><text x="26.0546%" y="111.50"></text></g><g><title>impl_trait_ref (6,148,779 samples, 5.36%)</title><rect x="26.7833%" y="117" width="5.3589%" height="15" fill="rgb(216,154,8)"/><text x="27.0333%" y="127.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,243,130 samples, 4.57%)</title><rect x="27.5726%" y="101" width="4.5696%" height="15" fill="rgb(244,35,45)"/><text x="27.8226%" y="111.50">metad..</text></g><g><title>coherent_trait (13,702,542 samples, 11.94%)</title><rect x="20.7550%" y="149" width="11.9422%" height="15" fill="rgb(251,115,12)"/><text x="21.0050%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (12,540,929 samples, 10.93%)</title><rect x="21.7674%" y="133" width="10.9298%" height="15" fill="rgb(240,54,50)"/><text x="22.0174%" y="143.50">specialization_g..</text></g><g><title>trait_impls_of (636,897 samples, 0.56%)</title><rect x="32.1421%" y="117" width="0.5551%" height="15" fill="rgb(233,84,52)"/><text x="32.3921%" y="127.50"></text></g><g><title>implementations_of_trait (133,031 samples, 0.12%)</title><rect x="32.5813%" y="101" width="0.1159%" height="15" fill="rgb(207,117,47)"/><text x="32.8313%" y="111.50"></text></g><g><title>coherence_checking (13,771,072 samples, 12.00%)</title><rect x="20.7381%" y="165" width="12.0020%" height="15" fill="rgb(249,43,39)"/><text x="20.9881%" y="175.50">coherence_checking</text></g><g><title>associated_item (261,335 samples, 0.23%)</title><rect x="45.3861%" y="101" width="0.2278%" height="15" fill="rgb(209,38,44)"/><text x="45.6361%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (208,705 samples, 0.18%)</title><rect x="45.4320%" y="85" width="0.1819%" height="15" fill="rgb(236,212,23)"/><text x="45.6820%" y="95.50"></text></g><g><title>associated_items (363,506 samples, 0.32%)</title><rect x="45.3120%" y="117" width="0.3168%" height="15" fill="rgb(242,79,21)"/><text x="45.5620%" y="127.50"></text></g><g><title>adt_dtorck_constraint (136,981 samples, 0.12%)</title><rect x="45.7322%" y="85" width="0.1194%" height="15" fill="rgb(211,96,35)"/><text x="45.9822%" y="95.50"></text></g><g><title>dropck_outlives (235,103 samples, 0.20%)</title><rect x="45.6530%" y="117" width="0.2049%" height="15" fill="rgb(253,215,40)"/><text x="45.9030%" y="127.50"></text></g><g><title>adt_dtorck_constraint (173,212 samples, 0.15%)</title><rect x="45.7070%" y="101" width="0.1510%" height="15" fill="rgb(211,81,21)"/><text x="45.9570%" y="111.50"></text></g><g><title>generics_of (371,112 samples, 0.32%)</title><rect x="47.0172%" y="101" width="0.3234%" height="15" fill="rgb(208,190,38)"/><text x="47.2672%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (128,060 samples, 0.11%)</title><rect x="47.2290%" y="85" width="0.1116%" height="15" fill="rgb(235,213,38)"/><text x="47.4790%" y="95.50"></text></g><g><title>impl_trait_ref (189,521 samples, 0.17%)</title><rect x="47.3932%" y="101" width="0.1652%" height="15" fill="rgb(237,122,38)"/><text x="47.6432%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (145,561 samples, 0.13%)</title><rect x="47.4315%" y="85" width="0.1269%" height="15" fill="rgb(244,218,35)"/><text x="47.6815%" y="95.50"></text></g><g><title>predicates_of (228,365 samples, 0.20%)</title><rect x="47.5783%" y="101" width="0.1990%" height="15" fill="rgb(240,68,47)"/><text x="47.8283%" y="111.50"></text></g><g><title>predicates_defined_on (138,742 samples, 0.12%)</title><rect x="47.6565%" y="85" width="0.1209%" height="15" fill="rgb(210,16,53)"/><text x="47.9065%" y="95.50"></text></g><g><title>specializes (368,793 samples, 0.32%)</title><rect x="47.7774%" y="101" width="0.3214%" height="15" fill="rgb(235,124,12)"/><text x="48.0274%" y="111.50"></text></g><g><title>param_env (230,611 samples, 0.20%)</title><rect x="47.8978%" y="85" width="0.2010%" height="15" fill="rgb(224,169,11)"/><text x="48.1478%" y="95.50"></text></g><g><title>trait_impls_of (413,913 samples, 0.36%)</title><rect x="48.1091%" y="101" width="0.3607%" height="15" fill="rgb(250,166,2)"/><text x="48.3591%" y="111.50"></text></g><g><title>implementations_of_trait (156,472 samples, 0.14%)</title><rect x="48.3334%" y="85" width="0.1364%" height="15" fill="rgb(242,216,29)"/><text x="48.5834%" y="95.50"></text></g><g><title>evaluate_obligation (3,004,112 samples, 2.62%)</title><rect x="45.8579%" y="117" width="2.6182%" height="15" fill="rgb(230,116,27)"/><text x="46.1079%" y="127.50">ev..</text></g><g><title>generics_of (161,801 samples, 0.14%)</title><rect x="48.5530%" y="117" width="0.1410%" height="15" fill="rgb(228,99,48)"/><text x="48.8030%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (135,590 samples, 0.12%)</title><rect x="48.5759%" y="101" width="0.1182%" height="15" fill="rgb(253,11,6)"/><text x="48.8259%" y="111.50"></text></g><g><title>impl_item_implementor_ids (144,323 samples, 0.13%)</title><rect x="48.6941%" y="117" width="0.1258%" height="15" fill="rgb(247,143,39)"/><text x="48.9441%" y="127.50"></text></g><g><title>associated_items (129,612 samples, 0.11%)</title><rect x="48.7069%" y="101" width="0.1130%" height="15" fill="rgb(236,97,10)"/><text x="48.9569%" y="111.50"></text></g><g><title>evaluate_obligation (148,751 samples, 0.13%)</title><rect x="49.1106%" y="101" width="0.1296%" height="15" fill="rgb(233,208,19)"/><text x="49.3606%" y="111.50"></text></g><g><title>method_autoderef_steps (281,003 samples, 0.24%)</title><rect x="49.0032%" y="117" width="0.2449%" height="15" fill="rgb(216,164,2)"/><text x="49.2532%" y="127.50"></text></g><g><title>predicates_of (228,740 samples, 0.20%)</title><rect x="49.2914%" y="117" width="0.1994%" height="15" fill="rgb(220,129,5)"/><text x="49.5414%" y="127.50"></text></g><g><title>predicates_defined_on (149,900 samples, 0.13%)</title><rect x="49.3601%" y="101" width="0.1306%" height="15" fill="rgb(242,17,10)"/><text x="49.6101%" y="111.50"></text></g><g><title>specializes (190,172 samples, 0.17%)</title><rect x="49.4976%" y="117" width="0.1657%" height="15" fill="rgb(242,107,0)"/><text x="49.7476%" y="127.50"></text></g><g><title>associated_items (157,571 samples, 0.14%)</title><rect x="53.3997%" y="101" width="0.1373%" height="15" fill="rgb(251,28,31)"/><text x="53.6497%" y="111.50"></text></g><g><title>generics_of (763,211 samples, 0.67%)</title><rect x="55.4863%" y="85" width="0.6652%" height="15" fill="rgb(233,223,10)"/><text x="55.7363%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (610,257 samples, 0.53%)</title><rect x="55.6196%" y="69" width="0.5319%" height="15" fill="rgb(215,21,27)"/><text x="55.8696%" y="79.50"></text></g><g><title>impl_trait_ref (841,017 samples, 0.73%)</title><rect x="56.2280%" y="85" width="0.7330%" height="15" fill="rgb(232,23,21)"/><text x="56.4780%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (683,456 samples, 0.60%)</title><rect x="56.3653%" y="69" width="0.5957%" height="15" fill="rgb(244,5,23)"/><text x="56.6153%" y="79.50"></text></g><g><title>predicates_of (245,252 samples, 0.21%)</title><rect x="56.9766%" y="85" width="0.2137%" height="15" fill="rgb(226,81,46)"/><text x="57.2266%" y="95.50"></text></g><g><title>predicates_defined_on (139,400 samples, 0.12%)</title><rect x="57.0689%" y="69" width="0.1215%" height="15" fill="rgb(247,70,30)"/><text x="57.3189%" y="79.50"></text></g><g><title>specializes (705,098 samples, 0.61%)</title><rect x="57.1904%" y="85" width="0.6145%" height="15" fill="rgb(212,68,19)"/><text x="57.4404%" y="95.50"></text></g><g><title>param_env (420,505 samples, 0.37%)</title><rect x="57.4384%" y="69" width="0.3665%" height="15" fill="rgb(240,187,13)"/><text x="57.6884%" y="79.50"></text></g><g><title>def_span (159,913 samples, 0.14%)</title><rect x="57.6655%" y="53" width="0.1394%" height="15" fill="rgb(223,113,26)"/><text x="57.9155%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (138,532 samples, 0.12%)</title><rect x="57.6841%" y="37" width="0.1207%" height="15" fill="rgb(206,192,2)"/><text x="57.9341%" y="47.50"></text></g><g><title>trait_impls_of (124,771 samples, 0.11%)</title><rect x="57.8114%" y="85" width="0.1087%" height="15" fill="rgb(241,108,4)"/><text x="58.0614%" y="95.50"></text></g><g><title>evaluate_obligation (4,996,936 samples, 4.35%)</title><rect x="53.5850%" y="101" width="4.3550%" height="15" fill="rgb(247,173,49)"/><text x="53.8350%" y="111.50">evalu..</text></g><g><title>generics_of (607,565 samples, 0.53%)</title><rect x="57.9710%" y="101" width="0.5295%" height="15" fill="rgb(224,114,35)"/><text x="58.2210%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (485,875 samples, 0.42%)</title><rect x="58.0771%" y="85" width="0.4235%" height="15" fill="rgb(245,159,27)"/><text x="58.3271%" y="95.50"></text></g><g><title>impl_trait_ref (484,953 samples, 0.42%)</title><rect x="58.5367%" y="101" width="0.4227%" height="15" fill="rgb(245,172,44)"/><text x="58.7867%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (368,022 samples, 0.32%)</title><rect x="58.6387%" y="85" width="0.3207%" height="15" fill="rgb(236,23,11)"/><text x="58.8887%" y="95.50"></text></g><g><title>typeck (10,917,431 samples, 9.51%)</title><rect x="49.7845%" y="117" width="9.5149%" height="15" fill="rgb(205,117,38)"/><text x="50.0345%" y="127.50">typeck</text></g><g><title>item_bodies_checking (30,469,517 samples, 26.56%)</title><rect x="32.7671%" y="165" width="26.5552%" height="15" fill="rgb(237,72,25)"/><text x="33.0171%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,466,357 samples, 26.55%)</title><rect x="32.7699%" y="149" width="26.5525%" height="15" fill="rgb(244,70,9)"/><text x="33.0199%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (30,438,877 samples, 26.53%)</title><rect x="32.7938%" y="133" width="26.5285%" height="15" fill="rgb(217,125,39)"/><text x="33.0438%" y="143.50">typeck</text></g><g><title>generics_of (753,446 samples, 0.66%)</title><rect x="62.3211%" y="101" width="0.6567%" height="15" fill="rgb(235,36,10)"/><text x="62.5711%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (545,205 samples, 0.48%)</title><rect x="62.5026%" y="85" width="0.4752%" height="15" fill="rgb(251,123,47)"/><text x="62.7526%" y="95.50"></text></g><g><title>impl_trait_ref (1,120,942 samples, 0.98%)</title><rect x="63.0956%" y="101" width="0.9769%" height="15" fill="rgb(221,13,13)"/><text x="63.3456%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (914,580 samples, 0.80%)</title><rect x="63.2754%" y="85" width="0.7971%" height="15" fill="rgb(238,131,9)"/><text x="63.5254%" y="95.50"></text></g><g><title>opt_def_kind (122,582 samples, 0.11%)</title><rect x="64.2380%" y="85" width="0.1068%" height="15" fill="rgb(211,50,8)"/><text x="64.4880%" y="95.50"></text></g><g><title>predicates_of (626,028 samples, 0.55%)</title><rect x="64.1084%" y="101" width="0.5456%" height="15" fill="rgb(245,182,24)"/><text x="64.3584%" y="111.50"></text></g><g><title>predicates_defined_on (354,713 samples, 0.31%)</title><rect x="64.3448%" y="85" width="0.3091%" height="15" fill="rgb(242,14,37)"/><text x="64.5948%" y="95.50"></text></g><g><title>specializes (2,078,903 samples, 1.81%)</title><rect x="64.6540%" y="101" width="1.8118%" height="15" fill="rgb(246,228,12)"/><text x="64.9040%" y="111.50">s..</text></g><g><title>param_env (1,274,353 samples, 1.11%)</title><rect x="65.3552%" y="85" width="1.1106%" height="15" fill="rgb(213,55,15)"/><text x="65.6052%" y="95.50"></text></g><g><title>def_span (650,483 samples, 0.57%)</title><rect x="65.8989%" y="69" width="0.5669%" height="15" fill="rgb(209,9,3)"/><text x="66.1489%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (588,313 samples, 0.51%)</title><rect x="65.9531%" y="53" width="0.5127%" height="15" fill="rgb(230,59,30)"/><text x="66.2031%" y="63.50"></text></g><g><title>trait_impls_of (173,601 samples, 0.15%)</title><rect x="66.4698%" y="101" width="0.1513%" height="15" fill="rgb(209,121,21)"/><text x="66.7198%" y="111.50"></text></g><g><title>evaluate_obligation (7,679,074 samples, 6.69%)</title><rect x="59.9483%" y="117" width="6.6926%" height="15" fill="rgb(220,109,13)"/><text x="60.1983%" y="127.50">evaluate_..</text></g><g><title>item_types_checking (8,616,154 samples, 7.51%)</title><rect x="59.3223%" y="165" width="7.5093%" height="15" fill="rgb(232,18,1)"/><text x="59.5723%" y="175.50">item_types..</text></g><g><title>check_mod_item_types (8,610,934 samples, 7.50%)</title><rect x="59.3269%" y="149" width="7.5047%" height="15" fill="rgb(215,41,42)"/><text x="59.5769%" y="159.50">check_mod_..</text></g><g><title>typeck (8,497,182 samples, 7.41%)</title><rect x="59.4260%" y="133" width="7.4056%" height="15" fill="rgb(224,123,36)"/><text x="59.6760%" y="143.50">typeck</text></g><g><title>fn_sig (153,783 samples, 0.13%)</title><rect x="67.0645%" y="133" width="0.1340%" height="15" fill="rgb(240,125,3)"/><text x="67.3145%" y="143.50"></text></g><g><title>named_region_map (216,862 samples, 0.19%)</title><rect x="67.2870%" y="117" width="0.1890%" height="15" fill="rgb(205,98,50)"/><text x="67.5370%" y="127.50"></text></g><g><title>resolve_lifetimes (208,292 samples, 0.18%)</title><rect x="67.2944%" y="101" width="0.1815%" height="15" fill="rgb(205,185,37)"/><text x="67.5444%" y="111.50"></text></g><g><title>generics_of (350,782 samples, 0.31%)</title><rect x="67.1985%" y="133" width="0.3057%" height="15" fill="rgb(238,207,15)"/><text x="67.4485%" y="143.50"></text></g><g><title>explicit_predicates_of (227,873 samples, 0.20%)</title><rect x="67.6188%" y="101" width="0.1986%" height="15" fill="rgb(213,199,42)"/><text x="67.8688%" y="111.50"></text></g><g><title>predicates_of (544,017 samples, 0.47%)</title><rect x="67.5250%" y="133" width="0.4741%" height="15" fill="rgb(235,201,11)"/><text x="67.7750%" y="143.50"></text></g><g><title>predicates_defined_on (505,936 samples, 0.44%)</title><rect x="67.5582%" y="117" width="0.4409%" height="15" fill="rgb(207,46,11)"/><text x="67.8082%" y="127.50"></text></g><g><title>inferred_outlives_of (208,582 samples, 0.18%)</title><rect x="67.8174%" y="101" width="0.1818%" height="15" fill="rgb(241,35,35)"/><text x="68.0674%" y="111.50"></text></g><g><title>inferred_outlives_crate (184,322 samples, 0.16%)</title><rect x="67.8385%" y="85" width="0.1606%" height="15" fill="rgb(243,32,47)"/><text x="68.0885%" y="95.50"></text></g><g><title>type_collecting (1,573,547 samples, 1.37%)</title><rect x="66.8324%" y="165" width="1.3714%" height="15" fill="rgb(247,202,23)"/><text x="67.0824%" y="175.50"></text></g><g><title>collect_mod_item_types (1,558,827 samples, 1.36%)</title><rect x="66.8453%" y="149" width="1.3586%" height="15" fill="rgb(219,102,11)"/><text x="67.0953%" y="159.50"></text></g><g><title>type_of (234,842 samples, 0.20%)</title><rect x="67.9992%" y="133" width="0.2047%" height="15" fill="rgb(243,110,44)"/><text x="68.2492%" y="143.50"></text></g><g><title>evaluate_obligation (218,253 samples, 0.19%)</title><rect x="68.9792%" y="133" width="0.1902%" height="15" fill="rgb(222,74,54)"/><text x="69.2292%" y="143.50"></text></g><g><title>implied_outlives_bounds (128,482 samples, 0.11%)</title><rect x="69.1694%" y="133" width="0.1120%" height="15" fill="rgb(216,99,12)"/><text x="69.4194%" y="143.50"></text></g><g><title>param_env (133,522 samples, 0.12%)</title><rect x="69.2814%" y="133" width="0.1164%" height="15" fill="rgb(226,22,26)"/><text x="69.5314%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,807,809 samples, 1.58%)</title><rect x="68.3095%" y="149" width="1.5756%" height="15" fill="rgb(217,163,10)"/><text x="68.5595%" y="159.50"></text></g><g><title>region_scope_tree (535,605 samples, 0.47%)</title><rect x="69.4183%" y="133" width="0.4668%" height="15" fill="rgb(213,25,53)"/><text x="69.6683%" y="143.50"></text></g><g><title>adt_sized_constraint (116,701 samples, 0.10%)</title><rect x="70.4805%" y="117" width="0.1017%" height="15" fill="rgb(252,105,26)"/><text x="70.7305%" y="127.50"></text></g><g><title>evaluate_obligation (261,023 samples, 0.23%)</title><rect x="70.3986%" y="133" width="0.2275%" height="15" fill="rgb(220,39,43)"/><text x="70.6486%" y="143.50"></text></g><g><title>analysis (80,525,370 samples, 70.18%)</title><rect x="0.7134%" y="197" width="70.1806%" height="15" fill="rgb(229,68,48)"/><text x="0.9634%" y="207.50">analysis</text></g><g><title>type_check_crate (57,586,936 samples, 50.19%)</title><rect x="20.7050%" y="181" width="50.1890%" height="15" fill="rgb(252,8,32)"/><text x="20.9550%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,083,525 samples, 2.69%)</title><rect x="68.2066%" y="165" width="2.6874%" height="15" fill="rgb(223,20,43)"/><text x="68.4566%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,157,604 samples, 1.01%)</title><rect x="69.8851%" y="149" width="1.0089%" height="15" fill="rgb(229,81,49)"/><text x="70.1351%" y="159.50"></text></g><g><title>codegen_crate (355,554 samples, 0.31%)</title><rect x="70.9048%" y="197" width="0.3099%" height="15" fill="rgb(236,28,36)"/><text x="71.1548%" y="207.50"></text></g><g><title>AST_validation (156,662 samples, 0.14%)</title><rect x="71.4299%" y="181" width="0.1365%" height="15" fill="rgb(249,185,26)"/><text x="71.6799%" y="191.50"></text></g><g><title>metadata_load_macro (187,654 samples, 0.16%)</title><rect x="81.4689%" y="149" width="0.1635%" height="15" fill="rgb(249,174,33)"/><text x="81.7189%" y="159.50"></text></g><g><title>metadata_register_crate (2,724,610 samples, 2.37%)</title><rect x="81.6325%" y="149" width="2.3746%" height="15" fill="rgb(233,201,37)"/><text x="81.8825%" y="159.50">me..</text></g><g><title>metadata_register_crate (987,101 samples, 0.86%)</title><rect x="83.1468%" y="133" width="0.8603%" height="15" fill="rgb(221,78,26)"/><text x="83.3968%" y="143.50"></text></g><g><title>macro_expand_crate (14,084,596 samples, 12.28%)</title><rect x="71.7455%" y="181" width="12.2752%" height="15" fill="rgb(250,127,30)"/><text x="71.9955%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,057,155 samples, 12.25%)</title><rect x="71.7694%" y="165" width="12.2513%" height="15" fill="rgb(230,49,44)"/><text x="72.0194%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (342,814 samples, 0.30%)</title><rect x="84.0253%" y="181" width="0.2988%" height="15" fill="rgb(229,67,23)"/><text x="84.2753%" y="191.50"></text></g><g><title>finalize_macro_resolutions (157,152 samples, 0.14%)</title><rect x="84.3701%" y="165" width="0.1370%" height="15" fill="rgb(249,83,47)"/><text x="84.6201%" y="175.50"></text></g><g><title>late_resolve_crate (2,689,430 samples, 2.34%)</title><rect x="84.5071%" y="165" width="2.3439%" height="15" fill="rgb(215,43,3)"/><text x="84.7571%" y="175.50">l..</text></g><g><title>configure_and_expand (18,085,530 samples, 15.76%)</title><rect x="71.2147%" y="197" width="15.7622%" height="15" fill="rgb(238,154,13)"/><text x="71.4647%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,043,824 samples, 2.65%)</title><rect x="84.3241%" y="181" width="2.6528%" height="15" fill="rgb(219,56,2)"/><text x="84.5741%" y="191.50">re..</text></g><g><title>drop_ast (242,843 samples, 0.21%)</title><rect x="86.9769%" y="197" width="0.2116%" height="15" fill="rgb(233,0,4)"/><text x="87.2269%" y="207.50"></text></g><g><title>early_lint_checks (563,156 samples, 0.49%)</title><rect x="87.2009%" y="197" width="0.4908%" height="15" fill="rgb(235,30,7)"/><text x="87.4509%" y="207.50"></text></g><g><title>free_global_ctxt (3,476,819 samples, 3.03%)</title><rect x="87.6917%" y="197" width="3.0302%" height="15" fill="rgb(250,79,13)"/><text x="87.9417%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (581,326 samples, 0.51%)</title><rect x="90.7219%" y="197" width="0.5066%" height="15" fill="rgb(211,146,34)"/><text x="90.9719%" y="207.50"></text></g><g><title>hir_lowering (3,354,917 samples, 2.92%)</title><rect x="91.2285%" y="197" width="2.9239%" height="15" fill="rgb(228,22,38)"/><text x="91.4785%" y="207.50">hi..</text></g><g><title>parse_crate (4,964,495 samples, 4.33%)</title><rect x="94.1980%" y="197" width="4.3267%" height="15" fill="rgb(235,168,5)"/><text x="94.4480%" y="207.50">parse..</text></g><g><title>prepare_outputs (326,623 samples, 0.28%)</title><rect x="98.5339%" y="197" width="0.2847%" height="15" fill="rgb(221,155,16)"/><text x="98.7839%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (912,020 samples, 0.79%)</title><rect x="98.8186%" y="197" width="0.7949%" height="15" fill="rgb(215,215,53)"/><text x="99.0686%" y="207.50"></text></g><g><title>setup_global_ctxt (141,311 samples, 0.12%)</title><rect x="99.6240%" y="197" width="0.1232%" height="15" fill="rgb(223,4,10)"/><text x="99.8740%" y="207.50"></text></g><g><title>all (114,740,247 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (114,740,247 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (290,133 samples, 0.25%)</title><rect x="99.7471%" y="197" width="0.2529%" height="15" fill="rgb(234,150,53)"/><text x="99.9971%" y="207.50"></text></g></svg></svg>