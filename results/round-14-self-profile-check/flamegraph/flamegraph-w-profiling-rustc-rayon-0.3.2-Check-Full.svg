<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (2,798,099 samples, 0.12%)</title><rect x="10.5199%" y="149" width="0.1156%" height="15" fill="rgb(227,0,7)"/><text x="10.7699%" y="159.50"></text></g><g><title>is_sized_raw (33,470,941 samples, 1.38%)</title><rect x="10.7081%" y="149" width="1.3830%" height="15" fill="rgb(217,0,24)"/><text x="10.9581%" y="159.50"></text></g><g><title>evaluate_obligation (28,514,630 samples, 1.18%)</title><rect x="10.9129%" y="133" width="1.1782%" height="15" fill="rgb(221,193,54)"/><text x="11.1629%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,833,226 samples, 0.12%)</title><rect x="13.8598%" y="101" width="0.1171%" height="15" fill="rgb(248,212,6)"/><text x="14.1098%" y="111.50"></text></g><g><title>is_copy_raw (3,081,810 samples, 0.13%)</title><rect x="16.3459%" y="85" width="0.1273%" height="15" fill="rgb(208,68,35)"/><text x="16.5959%" y="95.50"></text></g><g><title>is_copy_raw (24,536,536 samples, 1.01%)</title><rect x="16.7153%" y="69" width="1.0138%" height="15" fill="rgb(232,128,0)"/><text x="16.9653%" y="79.50"></text></g><g><title>evaluate_obligation (17,309,757 samples, 0.72%)</title><rect x="17.0140%" y="53" width="0.7152%" height="15" fill="rgb(207,160,47)"/><text x="17.2640%" y="63.50"></text></g><g><title>needs_drop_raw (30,981,633 samples, 1.28%)</title><rect x="16.4734%" y="85" width="1.2801%" height="15" fill="rgb(228,23,34)"/><text x="16.7234%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (32,919,242 samples, 1.36%)</title><rect x="17.9924%" y="69" width="1.3602%" height="15" fill="rgb(218,30,26)"/><text x="18.2424%" y="79.50"></text></g><g><title>specialization_graph_of (2,621,920 samples, 0.11%)</title><rect x="19.3781%" y="69" width="0.1083%" height="15" fill="rgb(220,122,19)"/><text x="19.6281%" y="79.50"></text></g><g><title>resolve_instance (42,776,665 samples, 1.77%)</title><rect x="17.7535%" y="85" width="1.7675%" height="15" fill="rgb(250,228,42)"/><text x="18.0035%" y="95.50"></text></g><g><title>thir_body (19,250,071 samples, 0.80%)</title><rect x="19.5467%" y="85" width="0.7954%" height="15" fill="rgb(240,193,28)"/><text x="19.7967%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,532,311 samples, 0.19%)</title><rect x="20.3568%" y="85" width="0.1873%" height="15" fill="rgb(216,20,37)"/><text x="20.6068%" y="95.50"></text></g><g><title>mir_const (189,414,965 samples, 7.83%)</title><rect x="12.7185%" y="133" width="7.8265%" height="15" fill="rgb(206,188,39)"/><text x="12.9685%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (172,140,929 samples, 7.11%)</title><rect x="13.4323%" y="117" width="7.1127%" height="15" fill="rgb(217,207,13)"/><text x="13.6823%" y="127.50">unsafety_c..</text></g><g><title>mir_built (158,960,920 samples, 6.57%)</title><rect x="13.9769%" y="101" width="6.5681%" height="15" fill="rgb(231,73,38)"/><text x="14.2269%" y="111.50">mir_built</text></g><g><title>mir_promoted (205,919,109 samples, 8.51%)</title><rect x="12.0911%" y="149" width="8.5084%" height="15" fill="rgb(225,20,46)"/><text x="12.3411%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (7,218,958 samples, 0.30%)</title><rect x="20.5995%" y="149" width="0.2983%" height="15" fill="rgb(210,31,41)"/><text x="20.8495%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (16,901,280 samples, 0.70%)</title><rect x="20.8978%" y="149" width="0.6983%" height="15" fill="rgb(221,200,47)"/><text x="21.1478%" y="159.50"></text></g><g><title>normalize_projection_ty (6,517,383 samples, 0.27%)</title><rect x="21.3269%" y="133" width="0.2693%" height="15" fill="rgb(226,26,5)"/><text x="21.5769%" y="143.50"></text></g><g><title>type_op_normalize_predicate (24,705,069 samples, 1.02%)</title><rect x="21.5961%" y="149" width="1.0208%" height="15" fill="rgb(249,33,26)"/><text x="21.8461%" y="159.50"></text></g><g><title>normalize_projection_ty (15,305,446 samples, 0.63%)</title><rect x="21.9845%" y="133" width="0.6324%" height="15" fill="rgb(235,183,28)"/><text x="22.2345%" y="143.50"></text></g><g><title>type_op_normalize_ty (60,501,018 samples, 2.50%)</title><rect x="22.6169%" y="149" width="2.4999%" height="15" fill="rgb(221,5,38)"/><text x="22.8669%" y="159.50">ty..</text></g><g><title>normalize_projection_ty (45,453,347 samples, 1.88%)</title><rect x="23.2387%" y="133" width="1.8781%" height="15" fill="rgb(247,18,42)"/><text x="23.4887%" y="143.50">n..</text></g><g><title>type_op_prove_predicate (144,851,951 samples, 5.99%)</title><rect x="25.1168%" y="149" width="5.9852%" height="15" fill="rgb(241,131,45)"/><text x="25.3668%" y="159.50">type_op_..</text></g><g><title>MIR_borrow_checking (743,204,107 samples, 30.71%)</title><rect x="0.3946%" y="181" width="30.7086%" height="15" fill="rgb(249,31,29)"/><text x="0.6446%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (740,200,246 samples, 30.58%)</title><rect x="0.5187%" y="165" width="30.5845%" height="15" fill="rgb(225,111,53)"/><text x="0.7687%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (4,063,106 samples, 0.17%)</title><rect x="31.1566%" y="181" width="0.1679%" height="15" fill="rgb(238,160,17)"/><text x="31.4066%" y="191.50"></text></g><g><title>codegen_fn_attrs (4,906,449 samples, 0.20%)</title><rect x="31.4836%" y="149" width="0.2027%" height="15" fill="rgb(214,148,48)"/><text x="31.7336%" y="159.50"></text></g><g><title>check_mod_attrs (8,553,802 samples, 0.35%)</title><rect x="31.3329%" y="165" width="0.3534%" height="15" fill="rgb(232,36,49)"/><text x="31.5829%" y="175.50"></text></g><g><title>check_mod_const_bodies (2,681,948 samples, 0.11%)</title><rect x="31.6863%" y="165" width="0.1108%" height="15" fill="rgb(209,103,24)"/><text x="31.9363%" y="175.50"></text></g><g><title>lint_levels (3,341,437 samples, 0.14%)</title><rect x="32.0222%" y="149" width="0.1381%" height="15" fill="rgb(229,88,8)"/><text x="32.2722%" y="159.50"></text></g><g><title>lookup_deprecation_entry (3,537,929 samples, 0.15%)</title><rect x="32.1602%" y="149" width="0.1462%" height="15" fill="rgb(213,181,19)"/><text x="32.4102%" y="159.50"></text></g><g><title>stability_index (3,178,996 samples, 0.13%)</title><rect x="32.1751%" y="133" width="0.1314%" height="15" fill="rgb(254,191,54)"/><text x="32.4251%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (10,128,105 samples, 0.42%)</title><rect x="31.8999%" y="165" width="0.4185%" height="15" fill="rgb(241,83,37)"/><text x="32.1499%" y="175.50"></text></g><g><title>misc_checking_1 (24,783,436 samples, 1.02%)</title><rect x="31.3245%" y="181" width="1.0240%" height="15" fill="rgb(233,36,39)"/><text x="31.5745%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (9,678,978 samples, 0.40%)</title><rect x="32.3487%" y="165" width="0.3999%" height="15" fill="rgb(226,3,54)"/><text x="32.5987%" y="175.50"></text></g><g><title>check_mod_liveness (8,066,513 samples, 0.33%)</title><rect x="32.4153%" y="149" width="0.3333%" height="15" fill="rgb(245,192,40)"/><text x="32.6653%" y="159.50"></text></g><g><title>misc_checking_2 (18,544,227 samples, 0.77%)</title><rect x="32.3485%" y="181" width="0.7662%" height="15" fill="rgb(238,167,29)"/><text x="32.5985%" y="191.50"></text></g><g><title>match_checking (8,861,718 samples, 0.37%)</title><rect x="32.7486%" y="165" width="0.3662%" height="15" fill="rgb(232,182,51)"/><text x="32.9986%" y="175.50"></text></g><g><title>check_match (7,940,768 samples, 0.33%)</title><rect x="32.7867%" y="149" width="0.3281%" height="15" fill="rgb(231,60,39)"/><text x="33.0367%" y="159.50"></text></g><g><title>check_private_in_public (7,465,563 samples, 0.31%)</title><rect x="33.1158%" y="165" width="0.3085%" height="15" fill="rgb(208,69,12)"/><text x="33.3658%" y="175.50"></text></g><g><title>death_checking (9,329,905 samples, 0.39%)</title><rect x="33.4242%" y="165" width="0.3855%" height="15" fill="rgb(235,93,37)"/><text x="33.6742%" y="175.50"></text></g><g><title>param_env (3,249,361 samples, 0.13%)</title><rect x="34.1812%" y="133" width="0.1343%" height="15" fill="rgb(213,116,39)"/><text x="34.4312%" y="143.50"></text></g><g><title>crate_lints (13,709,543 samples, 0.57%)</title><rect x="33.8099%" y="149" width="0.5665%" height="15" fill="rgb(222,207,29)"/><text x="34.0599%" y="159.50"></text></g><g><title>lint_checking (22,973,097 samples, 0.95%)</title><rect x="33.8097%" y="165" width="0.9492%" height="15" fill="rgb(206,96,30)"/><text x="34.0597%" y="175.50"></text></g><g><title>module_lints (9,259,034 samples, 0.38%)</title><rect x="34.3764%" y="149" width="0.3826%" height="15" fill="rgb(218,138,4)"/><text x="34.6264%" y="159.50"></text></g><g><title>lint_mod (9,194,584 samples, 0.38%)</title><rect x="34.3791%" y="133" width="0.3799%" height="15" fill="rgb(250,191,14)"/><text x="34.6291%" y="143.50"></text></g><g><title>privacy_access_levels (12,526,899 samples, 0.52%)</title><rect x="34.7590%" y="165" width="0.5176%" height="15" fill="rgb(239,60,40)"/><text x="35.0090%" y="175.50"></text></g><g><title>privacy_checking_modules (26,398,624 samples, 1.09%)</title><rect x="35.2766%" y="165" width="1.0908%" height="15" fill="rgb(206,27,48)"/><text x="35.5266%" y="175.50"></text></g><g><title>check_mod_privacy (26,317,514 samples, 1.09%)</title><rect x="35.2799%" y="149" width="1.0874%" height="15" fill="rgb(225,35,8)"/><text x="35.5299%" y="159.50"></text></g><g><title>misc_checking_3 (78,927,901 samples, 3.26%)</title><rect x="33.1148%" y="181" width="3.2612%" height="15" fill="rgb(250,213,24)"/><text x="33.3648%" y="191.50">mis..</text></g><g><title>impl_parent (3,041,527 samples, 0.13%)</title><rect x="37.2409%" y="117" width="0.1257%" height="15" fill="rgb(247,123,22)"/><text x="37.4909%" y="127.50"></text></g><g><title>impl_trait_ref (6,331,769 samples, 0.26%)</title><rect x="37.3666%" y="117" width="0.2616%" height="15" fill="rgb(231,138,38)"/><text x="37.6166%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,195,842 samples, 0.21%)</title><rect x="37.4135%" y="101" width="0.2147%" height="15" fill="rgb(231,145,46)"/><text x="37.6635%" y="111.50"></text></g><g><title>coherent_trait (30,083,465 samples, 1.24%)</title><rect x="36.4354%" y="149" width="1.2430%" height="15" fill="rgb(251,118,11)"/><text x="36.6854%" y="159.50"></text></g><g><title>specialization_graph_of (29,192,966 samples, 1.21%)</title><rect x="36.4722%" y="133" width="1.2062%" height="15" fill="rgb(217,147,25)"/><text x="36.7222%" y="143.50"></text></g><g><title>coherence_checking (31,014,835 samples, 1.28%)</title><rect x="36.4338%" y="165" width="1.2815%" height="15" fill="rgb(247,81,37)"/><text x="36.6838%" y="175.50"></text></g><g><title>associated_items (2,509,907 samples, 0.10%)</title><rect x="56.5837%" y="117" width="0.1037%" height="15" fill="rgb(209,12,38)"/><text x="56.8337%" y="127.50"></text></g><g><title>dropck_outlives (52,581,465 samples, 2.17%)</title><rect x="56.7213%" y="117" width="2.1726%" height="15" fill="rgb(227,1,9)"/><text x="56.9713%" y="127.50">d..</text></g><g><title>normalize_projection_ty (32,817,442 samples, 1.36%)</title><rect x="57.5379%" y="101" width="1.3560%" height="15" fill="rgb(248,47,43)"/><text x="57.7879%" y="111.50"></text></g><g><title>is_mir_available (2,934,493 samples, 0.12%)</title><rect x="58.8964%" y="85" width="0.1213%" height="15" fill="rgb(221,10,30)"/><text x="59.1464%" y="95.50"></text></g><g><title>mir_keys (2,915,512 samples, 0.12%)</title><rect x="58.8972%" y="69" width="0.1205%" height="15" fill="rgb(210,229,1)"/><text x="59.1472%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,731,632 samples, 0.15%)</title><rect x="58.8940%" y="117" width="0.1542%" height="15" fill="rgb(222,148,37)"/><text x="59.1440%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,726,302 samples, 0.15%)</title><rect x="58.8942%" y="101" width="0.1540%" height="15" fill="rgb(234,67,33)"/><text x="59.1442%" y="111.50"></text></g><g><title>evaluate_obligation (49,840,196 samples, 2.06%)</title><rect x="59.0481%" y="117" width="2.0594%" height="15" fill="rgb(247,98,35)"/><text x="59.2981%" y="127.50">e..</text></g><g><title>evaluate_obligation (8,986,008 samples, 0.37%)</title><rect x="61.6859%" y="101" width="0.3713%" height="15" fill="rgb(247,138,52)"/><text x="61.9359%" y="111.50"></text></g><g><title>method_autoderef_steps (18,919,980 samples, 0.78%)</title><rect x="61.2762%" y="117" width="0.7818%" height="15" fill="rgb(213,79,30)"/><text x="61.5262%" y="127.50"></text></g><g><title>evaluate_obligation (4,952,241 samples, 0.20%)</title><rect x="63.5065%" y="101" width="0.2046%" height="15" fill="rgb(246,177,23)"/><text x="63.7565%" y="111.50"></text></g><g><title>typeck (38,351,228 samples, 1.58%)</title><rect x="62.2072%" y="117" width="1.5846%" height="15" fill="rgb(230,62,27)"/><text x="62.4572%" y="127.50"></text></g><g><title>item_bodies_checking (630,458,299 samples, 26.05%)</title><rect x="37.7741%" y="165" width="26.0500%" height="15" fill="rgb(216,154,8)"/><text x="38.0241%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (630,453,869 samples, 26.05%)</title><rect x="37.7742%" y="149" width="26.0498%" height="15" fill="rgb(244,35,45)"/><text x="38.0242%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (627,674,672 samples, 25.94%)</title><rect x="37.8891%" y="133" width="25.9350%" height="15" fill="rgb(251,115,12)"/><text x="38.1391%" y="143.50">typeck</text></g><g><title>mir_borrowck (5,198,810 samples, 0.21%)</title><rect x="70.1811%" y="101" width="0.2148%" height="15" fill="rgb(240,54,50)"/><text x="70.4311%" y="111.50"></text></g><g><title>mir_built (10,856,732 samples, 0.45%)</title><rect x="70.4178%" y="53" width="0.4486%" height="15" fill="rgb(233,84,52)"/><text x="70.6678%" y="63.50"></text></g><g><title>typeck (10,109,233 samples, 0.42%)</title><rect x="70.4487%" y="37" width="0.4177%" height="15" fill="rgb(207,117,47)"/><text x="70.6987%" y="47.50"></text></g><g><title>mir_const (13,175,596 samples, 0.54%)</title><rect x="70.4043%" y="85" width="0.5444%" height="15" fill="rgb(249,43,39)"/><text x="70.6543%" y="95.50"></text></g><g><title>unsafety_check_result (12,940,164 samples, 0.53%)</title><rect x="70.4140%" y="69" width="0.5347%" height="15" fill="rgb(209,38,44)"/><text x="70.6640%" y="79.50"></text></g><g><title>mir_promoted (13,405,919 samples, 0.55%)</title><rect x="70.3959%" y="101" width="0.5539%" height="15" fill="rgb(236,212,23)"/><text x="70.6459%" y="111.50"></text></g><g><title>type_of (22,153,378 samples, 0.92%)</title><rect x="70.0512%" y="133" width="0.9154%" height="15" fill="rgb(242,79,21)"/><text x="70.3012%" y="143.50"></text></g><g><title>mir_borrowck (22,065,838 samples, 0.91%)</title><rect x="70.0548%" y="117" width="0.9117%" height="15" fill="rgb(211,96,35)"/><text x="70.3048%" y="127.50"></text></g><g><title>item_types_checking (174,676,700 samples, 7.22%)</title><rect x="63.8241%" y="165" width="7.2175%" height="15" fill="rgb(253,215,40)"/><text x="64.0741%" y="175.50">item_types..</text></g><g><title>check_mod_item_types (174,566,110 samples, 7.21%)</title><rect x="63.8286%" y="149" width="7.2129%" height="15" fill="rgb(211,81,21)"/><text x="64.0786%" y="159.50">check_mod_..</text></g><g><title>fn_sig (7,331,215 samples, 0.30%)</title><rect x="71.3150%" y="133" width="0.3029%" height="15" fill="rgb(208,190,38)"/><text x="71.5650%" y="143.50"></text></g><g><title>resolve_lifetimes (4,840,923 samples, 0.20%)</title><rect x="71.7764%" y="101" width="0.2000%" height="15" fill="rgb(235,213,38)"/><text x="72.0264%" y="111.50"></text></g><g><title>is_late_bound_map (5,158,016 samples, 0.21%)</title><rect x="71.7634%" y="117" width="0.2131%" height="15" fill="rgb(237,122,38)"/><text x="72.0134%" y="127.50"></text></g><g><title>generics_of (10,508,738 samples, 0.43%)</title><rect x="71.6180%" y="133" width="0.4342%" height="15" fill="rgb(244,218,35)"/><text x="71.8680%" y="143.50"></text></g><g><title>late_bound_vars_map (5,483,658 samples, 0.23%)</title><rect x="72.7428%" y="85" width="0.2266%" height="15" fill="rgb(240,68,47)"/><text x="72.9928%" y="95.50"></text></g><g><title>resolve_lifetimes (5,042,675 samples, 0.21%)</title><rect x="72.7610%" y="69" width="0.2084%" height="15" fill="rgb(210,16,53)"/><text x="73.0110%" y="79.50"></text></g><g><title>type_param_predicates (2,567,522 samples, 0.11%)</title><rect x="72.9909%" y="85" width="0.1061%" height="15" fill="rgb(235,124,12)"/><text x="73.2409%" y="95.50"></text></g><g><title>explicit_predicates_of (20,140,323 samples, 0.83%)</title><rect x="72.2649%" y="101" width="0.8322%" height="15" fill="rgb(224,169,11)"/><text x="72.5149%" y="111.50"></text></g><g><title>predicates_of (28,371,185 samples, 1.17%)</title><rect x="72.1039%" y="133" width="1.1723%" height="15" fill="rgb(250,166,2)"/><text x="72.3539%" y="143.50"></text></g><g><title>predicates_defined_on (26,701,513 samples, 1.10%)</title><rect x="72.1729%" y="117" width="1.1033%" height="15" fill="rgb(242,216,29)"/><text x="72.4229%" y="127.50"></text></g><g><title>inferred_outlives_of (4,335,251 samples, 0.18%)</title><rect x="73.0970%" y="101" width="0.1791%" height="15" fill="rgb(230,116,27)"/><text x="73.3470%" y="111.50"></text></g><g><title>inferred_outlives_crate (3,829,753 samples, 0.16%)</title><rect x="73.1179%" y="85" width="0.1582%" height="15" fill="rgb(228,99,48)"/><text x="73.3679%" y="95.50"></text></g><g><title>type_collecting (61,782,480 samples, 2.55%)</title><rect x="71.0426%" y="165" width="2.5528%" height="15" fill="rgb(253,11,6)"/><text x="71.2926%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (61,687,590 samples, 2.55%)</title><rect x="71.0465%" y="149" width="2.5489%" height="15" fill="rgb(247,143,39)"/><text x="71.2965%" y="159.50">co..</text></g><g><title>type_of (7,673,183 samples, 0.32%)</title><rect x="73.2784%" y="133" width="0.3170%" height="15" fill="rgb(236,97,10)"/><text x="73.5284%" y="143.50"></text></g><g><title>type_param_predicates (3,178,447 samples, 0.13%)</title><rect x="73.4641%" y="117" width="0.1313%" height="15" fill="rgb(233,208,19)"/><text x="73.7141%" y="127.50"></text></g><g><title>type_param_predicates (2,695,433 samples, 0.11%)</title><rect x="73.4841%" y="101" width="0.1114%" height="15" fill="rgb(216,164,2)"/><text x="73.7341%" y="111.50"></text></g><g><title>evaluate_obligation (10,949,629 samples, 0.45%)</title><rect x="78.2819%" y="133" width="0.4524%" height="15" fill="rgb(220,129,5)"/><text x="78.5319%" y="143.50"></text></g><g><title>implied_outlives_bounds (23,779,397 samples, 0.98%)</title><rect x="78.7714%" y="133" width="0.9825%" height="15" fill="rgb(242,17,10)"/><text x="79.0214%" y="143.50"></text></g><g><title>param_env (33,471,709 samples, 1.38%)</title><rect x="79.7539%" y="133" width="1.3830%" height="15" fill="rgb(242,107,0)"/><text x="80.0039%" y="143.50"></text></g><g><title>region_scope_tree (6,502,544 samples, 0.27%)</title><rect x="81.1466%" y="133" width="0.2687%" height="15" fill="rgb(251,28,31)"/><text x="81.3966%" y="143.50"></text></g><g><title>check_impl_item_well_formed (183,363,712 samples, 7.58%)</title><rect x="73.8415%" y="149" width="7.5764%" height="15" fill="rgb(233,223,10)"/><text x="74.0915%" y="159.50">check_impl..</text></g><g><title>implied_outlives_bounds (4,270,574 samples, 0.18%)</title><rect x="84.6879%" y="133" width="0.1765%" height="15" fill="rgb(215,21,27)"/><text x="84.9379%" y="143.50"></text></g><g><title>param_env (24,489,218 samples, 1.01%)</title><rect x="84.8654%" y="133" width="1.0119%" height="15" fill="rgb(232,23,21)"/><text x="85.1154%" y="143.50"></text></g><g><title>check_item_well_formed (112,734,014 samples, 4.66%)</title><rect x="81.4179%" y="149" width="4.6581%" height="15" fill="rgb(244,5,23)"/><text x="81.6679%" y="159.50">check..</text></g><g><title>analysis (2,090,877,694 samples, 86.39%)</title><rect x="0.2034%" y="197" width="86.3934%" height="15" fill="rgb(226,81,46)"/><text x="0.4534%" y="207.50">analysis</text></g><g><title>type_check_crate (1,215,433,081 samples, 50.22%)</title><rect x="36.3760%" y="181" width="50.2207%" height="15" fill="rgb(247,70,30)"/><text x="36.6260%" y="191.50">type_check_crate</text></g><g><title>wf_checking (314,468,932 samples, 12.99%)</title><rect x="73.6031%" y="165" width="12.9936%" height="15" fill="rgb(212,68,19)"/><text x="73.8531%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (12,602,588 samples, 0.52%)</title><rect x="86.0760%" y="149" width="0.5207%" height="15" fill="rgb(240,187,13)"/><text x="86.3260%" y="159.50"></text></g><g><title>AST_validation (3,265,446 samples, 0.13%)</title><rect x="86.6335%" y="181" width="0.1349%" height="15" fill="rgb(223,113,26)"/><text x="86.8835%" y="191.50"></text></g><g><title>complete_gated_feature_checking (2,568,959 samples, 0.11%)</title><rect x="86.7684%" y="181" width="0.1061%" height="15" fill="rgb(206,192,2)"/><text x="87.0184%" y="191.50"></text></g><g><title>macro_expand_crate (149,156,225 samples, 6.16%)</title><rect x="86.8780%" y="181" width="6.1630%" height="15" fill="rgb(241,108,4)"/><text x="87.1280%" y="191.50">macro_ex..</text></g><g><title>expand_crate (149,119,074 samples, 6.16%)</title><rect x="86.8795%" y="165" width="6.1615%" height="15" fill="rgb(247,173,49)"/><text x="87.1295%" y="175.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (3,827,933 samples, 0.16%)</title><rect x="92.8828%" y="149" width="0.1582%" height="15" fill="rgb(224,114,35)"/><text x="93.1328%" y="159.50"></text></g><g><title>late_resolve_crate (29,542,850 samples, 1.22%)</title><rect x="93.1327%" y="165" width="1.2207%" height="15" fill="rgb(245,159,27)"/><text x="93.3827%" y="175.50"></text></g><g><title>configure_and_expand (191,632,849 samples, 7.92%)</title><rect x="86.6236%" y="197" width="7.9181%" height="15" fill="rgb(245,172,44)"/><text x="86.8736%" y="207.50">configure_a..</text></g><g><title>resolve_crate (36,191,384 samples, 1.50%)</title><rect x="93.0463%" y="181" width="1.4954%" height="15" fill="rgb(236,23,11)"/><text x="93.2963%" y="191.50"></text></g><g><title>drop_ast (4,951,496 samples, 0.20%)</title><rect x="94.5417%" y="197" width="0.2046%" height="15" fill="rgb(205,117,38)"/><text x="94.7917%" y="207.50"></text></g><g><title>early_lint_checks (7,137,149 samples, 0.29%)</title><rect x="94.7474%" y="197" width="0.2949%" height="15" fill="rgb(237,72,25)"/><text x="94.9974%" y="207.50"></text></g><g><title>free_global_ctxt (15,133,429 samples, 0.63%)</title><rect x="95.0423%" y="197" width="0.6253%" height="15" fill="rgb(244,70,9)"/><text x="95.2923%" y="207.50"></text></g><g><title>generate_crate_metadata (29,860,114 samples, 1.23%)</title><rect x="95.6676%" y="197" width="1.2338%" height="15" fill="rgb(217,125,39)"/><text x="95.9176%" y="207.50"></text></g><g><title>hir_lowering (66,584,754 samples, 2.75%)</title><rect x="96.9014%" y="197" width="2.7512%" height="15" fill="rgb(235,36,10)"/><text x="97.1514%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (5,363,640 samples, 0.22%)</title><rect x="99.6964%" y="197" width="0.2216%" height="15" fill="rgb(251,123,47)"/><text x="99.9464%" y="207.50"></text></g><g><title>all (2,420,183,540 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,420,183,540 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>