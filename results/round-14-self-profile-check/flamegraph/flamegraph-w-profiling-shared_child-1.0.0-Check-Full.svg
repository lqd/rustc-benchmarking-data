<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (153,001 samples, 0.21%)</title><rect x="8.6927%" y="117" width="0.2103%" height="15" fill="rgb(227,0,7)"/><text x="8.9427%" y="127.50"></text></g><g><title>item_attrs (204,634 samples, 0.28%)</title><rect x="9.3057%" y="85" width="0.2812%" height="15" fill="rgb(217,0,24)"/><text x="9.5557%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (199,164 samples, 0.27%)</title><rect x="9.3132%" y="69" width="0.2737%" height="15" fill="rgb(221,193,54)"/><text x="9.5632%" y="79.50"></text></g><g><title>codegen_fn_attrs (284,308 samples, 0.39%)</title><rect x="9.2148%" y="101" width="0.3907%" height="15" fill="rgb(248,212,6)"/><text x="9.4648%" y="111.50"></text></g><g><title>adt_drop_tys (123,532 samples, 0.17%)</title><rect x="11.2871%" y="53" width="0.1698%" height="15" fill="rgb(208,68,35)"/><text x="11.5371%" y="63.50"></text></g><g><title>adt_drop_tys (275,904 samples, 0.38%)</title><rect x="11.2561%" y="69" width="0.3791%" height="15" fill="rgb(232,128,0)"/><text x="11.5061%" y="79.50"></text></g><g><title>param_env (74,842 samples, 0.10%)</title><rect x="11.5324%" y="53" width="0.1028%" height="15" fill="rgb(207,160,47)"/><text x="11.7824%" y="63.50"></text></g><g><title>needs_drop_raw (775,700 samples, 1.07%)</title><rect x="11.1737%" y="85" width="1.0660%" height="15" fill="rgb(228,23,34)"/><text x="11.4237%" y="95.50"></text></g><g><title>is_copy_raw (439,836 samples, 0.60%)</title><rect x="11.6353%" y="69" width="0.6044%" height="15" fill="rgb(218,30,26)"/><text x="11.8853%" y="79.50"></text></g><g><title>evaluate_obligation (379,566 samples, 0.52%)</title><rect x="11.7181%" y="53" width="0.5216%" height="15" fill="rgb(220,122,19)"/><text x="11.9681%" y="63.50"></text></g><g><title>specialization_graph_of (345,223 samples, 0.47%)</title><rect x="12.4700%" y="69" width="0.4744%" height="15" fill="rgb(250,228,42)"/><text x="12.7200%" y="79.50"></text></g><g><title>impl_trait_ref (226,352 samples, 0.31%)</title><rect x="12.6333%" y="53" width="0.3111%" height="15" fill="rgb(240,193,28)"/><text x="12.8833%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (215,382 samples, 0.30%)</title><rect x="12.6484%" y="37" width="0.2960%" height="15" fill="rgb(216,20,37)"/><text x="12.8984%" y="47.50"></text></g><g><title>resolve_instance (551,724 samples, 0.76%)</title><rect x="12.2397%" y="85" width="0.7582%" height="15" fill="rgb(206,188,39)"/><text x="12.4897%" y="95.50"></text></g><g><title>thir_body (440,014 samples, 0.60%)</title><rect x="13.0126%" y="85" width="0.6047%" height="15" fill="rgb(217,207,13)"/><text x="13.2626%" y="95.50"></text></g><g><title>mir_const (3,978,444 samples, 5.47%)</title><rect x="8.1582%" y="133" width="5.4671%" height="15" fill="rgb(231,73,38)"/><text x="8.4082%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (3,436,480 samples, 4.72%)</title><rect x="8.9030%" y="117" width="4.7224%" height="15" fill="rgb(225,20,46)"/><text x="9.1530%" y="127.50">unsafe..</text></g><g><title>mir_built (2,925,221 samples, 4.02%)</title><rect x="9.6055%" y="101" width="4.0198%" height="15" fill="rgb(210,31,41)"/><text x="9.8555%" y="111.50">mir_..</text></g><g><title>mir_promoted (4,384,340 samples, 6.02%)</title><rect x="7.6205%" y="149" width="6.0249%" height="15" fill="rgb(221,200,47)"/><text x="7.8705%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (210,112 samples, 0.29%)</title><rect x="13.6454%" y="149" width="0.2887%" height="15" fill="rgb(226,26,5)"/><text x="13.8954%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (170,682 samples, 0.23%)</title><rect x="13.9341%" y="149" width="0.2345%" height="15" fill="rgb(249,33,26)"/><text x="14.1841%" y="159.50"></text></g><g><title>normalize_projection_ty (89,461 samples, 0.12%)</title><rect x="14.0457%" y="133" width="0.1229%" height="15" fill="rgb(235,183,28)"/><text x="14.2957%" y="143.50"></text></g><g><title>type_op_normalize_predicate (95,872 samples, 0.13%)</title><rect x="14.1687%" y="149" width="0.1317%" height="15" fill="rgb(221,5,38)"/><text x="14.4187%" y="159.50"></text></g><g><title>type_op_prove_predicate (774,827 samples, 1.06%)</title><rect x="14.3004%" y="149" width="1.0648%" height="15" fill="rgb(247,18,42)"/><text x="14.5504%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,438,156 samples, 14.34%)</title><rect x="1.0294%" y="181" width="14.3440%" height="15" fill="rgb(241,131,45)"/><text x="1.2794%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,404,065 samples, 14.30%)</title><rect x="1.0763%" y="165" width="14.2972%" height="15" fill="rgb(249,31,29)"/><text x="1.3263%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (103,021 samples, 0.14%)</title><rect x="15.3868%" y="181" width="0.1416%" height="15" fill="rgb(225,111,53)"/><text x="15.6368%" y="191.50"></text></g><g><title>codegen_fn_attrs (103,811 samples, 0.14%)</title><rect x="15.8286%" y="117" width="0.1427%" height="15" fill="rgb(238,160,17)"/><text x="16.0786%" y="127.50"></text></g><g><title>codegen_fn_attrs (207,422 samples, 0.29%)</title><rect x="15.6900%" y="149" width="0.2850%" height="15" fill="rgb(214,148,48)"/><text x="15.9400%" y="159.50"></text></g><g><title>should_inherit_track_caller (175,521 samples, 0.24%)</title><rect x="15.7338%" y="133" width="0.2412%" height="15" fill="rgb(232,36,49)"/><text x="15.9838%" y="143.50"></text></g><g><title>check_mod_attrs (303,824 samples, 0.42%)</title><rect x="15.5577%" y="165" width="0.4175%" height="15" fill="rgb(209,103,24)"/><text x="15.8077%" y="175.50"></text></g><g><title>lookup_deprecation_entry (81,840 samples, 0.11%)</title><rect x="16.1943%" y="149" width="0.1125%" height="15" fill="rgb(229,88,8)"/><text x="16.4443%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (217,393 samples, 0.30%)</title><rect x="16.0891%" y="165" width="0.2987%" height="15" fill="rgb(213,181,19)"/><text x="16.3391%" y="175.50"></text></g><g><title>misc_checking_1 (655,628 samples, 0.90%)</title><rect x="15.5288%" y="181" width="0.9010%" height="15" fill="rgb(254,191,54)"/><text x="15.7788%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (215,683 samples, 0.30%)</title><rect x="16.4317%" y="165" width="0.2964%" height="15" fill="rgb(241,83,37)"/><text x="16.6817%" y="175.50"></text></g><g><title>check_mod_liveness (172,523 samples, 0.24%)</title><rect x="16.4910%" y="149" width="0.2371%" height="15" fill="rgb(233,36,39)"/><text x="16.7410%" y="159.50"></text></g><g><title>misc_checking_2 (498,026 samples, 0.68%)</title><rect x="16.4298%" y="181" width="0.6844%" height="15" fill="rgb(226,3,54)"/><text x="16.6798%" y="191.50"></text></g><g><title>match_checking (280,963 samples, 0.39%)</title><rect x="16.7281%" y="165" width="0.3861%" height="15" fill="rgb(245,192,40)"/><text x="16.9781%" y="175.50"></text></g><g><title>check_match (270,283 samples, 0.37%)</title><rect x="16.7428%" y="149" width="0.3714%" height="15" fill="rgb(238,167,29)"/><text x="16.9928%" y="159.50"></text></g><g><title>check_private_in_public (84,801 samples, 0.12%)</title><rect x="17.1262%" y="165" width="0.1165%" height="15" fill="rgb(232,182,51)"/><text x="17.3762%" y="175.50"></text></g><g><title>death_checking (172,082 samples, 0.24%)</title><rect x="17.2427%" y="165" width="0.2365%" height="15" fill="rgb(231,60,39)"/><text x="17.4927%" y="175.50"></text></g><g><title>param_env (112,320 samples, 0.15%)</title><rect x="18.1257%" y="133" width="0.1543%" height="15" fill="rgb(208,69,12)"/><text x="18.3757%" y="143.50"></text></g><g><title>crate_lints (1,593,658 samples, 2.19%)</title><rect x="17.4811%" y="149" width="2.1900%" height="15" fill="rgb(235,93,37)"/><text x="17.7311%" y="159.50">c..</text></g><g><title>type_of (1,008,352 samples, 1.39%)</title><rect x="18.2855%" y="133" width="1.3857%" height="15" fill="rgb(213,116,39)"/><text x="18.5355%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (776,269 samples, 1.07%)</title><rect x="18.6044%" y="117" width="1.0667%" height="15" fill="rgb(222,207,29)"/><text x="18.8544%" y="127.50"></text></g><g><title>lint_checking (1,812,781 samples, 2.49%)</title><rect x="17.4792%" y="165" width="2.4911%" height="15" fill="rgb(206,96,30)"/><text x="17.7292%" y="175.50">li..</text></g><g><title>module_lints (217,713 samples, 0.30%)</title><rect x="19.6711%" y="149" width="0.2992%" height="15" fill="rgb(218,138,4)"/><text x="19.9211%" y="159.50"></text></g><g><title>lint_mod (214,233 samples, 0.29%)</title><rect x="19.6759%" y="133" width="0.2944%" height="15" fill="rgb(250,191,14)"/><text x="19.9259%" y="143.50"></text></g><g><title>privacy_access_levels (89,561 samples, 0.12%)</title><rect x="19.9703%" y="165" width="0.1231%" height="15" fill="rgb(239,60,40)"/><text x="20.2203%" y="175.50"></text></g><g><title>privacy_checking_modules (288,303 samples, 0.40%)</title><rect x="20.0934%" y="165" width="0.3962%" height="15" fill="rgb(206,27,48)"/><text x="20.3434%" y="175.50"></text></g><g><title>check_mod_privacy (285,643 samples, 0.39%)</title><rect x="20.0970%" y="149" width="0.3925%" height="15" fill="rgb(225,35,8)"/><text x="20.3470%" y="159.50"></text></g><g><title>misc_checking_3 (2,471,538 samples, 3.40%)</title><rect x="17.1142%" y="181" width="3.3964%" height="15" fill="rgb(250,213,24)"/><text x="17.3642%" y="191.50">mis..</text></g><g><title>impl_parent (752,937 samples, 1.03%)</title><rect x="21.8838%" y="117" width="1.0347%" height="15" fill="rgb(247,123,22)"/><text x="22.1338%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (508,417 samples, 0.70%)</title><rect x="22.2199%" y="101" width="0.6987%" height="15" fill="rgb(231,138,38)"/><text x="22.4699%" y="111.50"></text></g><g><title>impl_trait_ref (2,481,839 samples, 3.41%)</title><rect x="22.9185%" y="117" width="3.4105%" height="15" fill="rgb(231,145,46)"/><text x="23.1685%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,233,347 samples, 3.07%)</title><rect x="23.2600%" y="101" width="3.0690%" height="15" fill="rgb(251,118,11)"/><text x="23.5100%" y="111.50">met..</text></g><g><title>coherent_trait (4,373,769 samples, 6.01%)</title><rect x="20.5693%" y="149" width="6.0104%" height="15" fill="rgb(217,147,25)"/><text x="20.8193%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (4,367,869 samples, 6.00%)</title><rect x="20.5774%" y="133" width="6.0023%" height="15" fill="rgb(247,81,37)"/><text x="20.8274%" y="143.50">speciali..</text></g><g><title>trait_impls_of (180,982 samples, 0.25%)</title><rect x="26.3310%" y="117" width="0.2487%" height="15" fill="rgb(209,12,38)"/><text x="26.5810%" y="127.50"></text></g><g><title>coherence_checking (4,417,059 samples, 6.07%)</title><rect x="20.5536%" y="165" width="6.0699%" height="15" fill="rgb(227,1,9)"/><text x="20.8036%" y="175.50">coherenc..</text></g><g><title>adt_def (75,561 samples, 0.10%)</title><rect x="37.7297%" y="101" width="0.1038%" height="15" fill="rgb(248,47,43)"/><text x="37.9797%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (73,331 samples, 0.10%)</title><rect x="37.7328%" y="85" width="0.1008%" height="15" fill="rgb(221,10,30)"/><text x="37.9828%" y="95.50"></text></g><g><title>adt_sized_constraint (93,421 samples, 0.13%)</title><rect x="37.7171%" y="117" width="0.1284%" height="15" fill="rgb(210,229,1)"/><text x="37.9671%" y="127.50"></text></g><g><title>associated_item (229,503 samples, 0.32%)</title><rect x="37.9771%" y="101" width="0.3154%" height="15" fill="rgb(222,148,37)"/><text x="38.2271%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (174,532 samples, 0.24%)</title><rect x="38.0526%" y="85" width="0.2398%" height="15" fill="rgb(234,67,33)"/><text x="38.3026%" y="95.50"></text></g><g><title>associated_items (342,774 samples, 0.47%)</title><rect x="37.8527%" y="117" width="0.4710%" height="15" fill="rgb(247,98,35)"/><text x="38.1027%" y="127.50"></text></g><g><title>adt_def (111,951 samples, 0.15%)</title><rect x="38.7245%" y="85" width="0.1538%" height="15" fill="rgb(247,138,52)"/><text x="38.9745%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (110,181 samples, 0.15%)</title><rect x="38.7270%" y="69" width="0.1514%" height="15" fill="rgb(213,79,30)"/><text x="38.9770%" y="79.50"></text></g><g><title>adt_dtorck_constraint (89,881 samples, 0.12%)</title><rect x="39.0626%" y="53" width="0.1235%" height="15" fill="rgb(246,177,23)"/><text x="39.3126%" y="63.50"></text></g><g><title>adt_dtorck_constraint (170,342 samples, 0.23%)</title><rect x="38.9766%" y="69" width="0.2341%" height="15" fill="rgb(230,62,27)"/><text x="39.2266%" y="79.50"></text></g><g><title>adt_dtorck_constraint (217,952 samples, 0.30%)</title><rect x="38.9325%" y="85" width="0.2995%" height="15" fill="rgb(216,154,8)"/><text x="39.1825%" y="95.50"></text></g><g><title>adt_dtorck_constraint (483,075 samples, 0.66%)</title><rect x="38.6421%" y="101" width="0.6638%" height="15" fill="rgb(244,35,45)"/><text x="38.8921%" y="111.50"></text></g><g><title>dropck_outlives (668,619 samples, 0.92%)</title><rect x="38.4009%" y="117" width="0.9188%" height="15" fill="rgb(251,115,12)"/><text x="38.6509%" y="127.50"></text></g><g><title>adt_def (117,373 samples, 0.16%)</title><rect x="40.3192%" y="85" width="0.1613%" height="15" fill="rgb(240,54,50)"/><text x="40.5692%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (116,063 samples, 0.16%)</title><rect x="40.3210%" y="69" width="0.1595%" height="15" fill="rgb(233,84,52)"/><text x="40.5710%" y="79.50"></text></g><g><title>item_attrs (97,612 samples, 0.13%)</title><rect x="40.3464%" y="53" width="0.1341%" height="15" fill="rgb(207,117,47)"/><text x="40.5964%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,982 samples, 0.13%)</title><rect x="40.3486%" y="37" width="0.1319%" height="15" fill="rgb(249,43,39)"/><text x="40.5986%" y="47.50"></text></g><g><title>adt_sized_constraint (189,643 samples, 0.26%)</title><rect x="40.3089%" y="101" width="0.2606%" height="15" fill="rgb(209,38,44)"/><text x="40.5589%" y="111.50"></text></g><g><title>generics_of (117,911 samples, 0.16%)</title><rect x="40.5695%" y="101" width="0.1620%" height="15" fill="rgb(236,212,23)"/><text x="40.8195%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (100,881 samples, 0.14%)</title><rect x="40.5929%" y="85" width="0.1386%" height="15" fill="rgb(242,79,21)"/><text x="40.8429%" y="95.50"></text></g><g><title>impl_trait_ref (231,362 samples, 0.32%)</title><rect x="40.7796%" y="101" width="0.3179%" height="15" fill="rgb(211,96,35)"/><text x="41.0296%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (211,112 samples, 0.29%)</title><rect x="40.8074%" y="85" width="0.2901%" height="15" fill="rgb(253,215,40)"/><text x="41.0574%" y="95.50"></text></g><g><title>predicates_of (95,061 samples, 0.13%)</title><rect x="41.1111%" y="101" width="0.1306%" height="15" fill="rgb(211,81,21)"/><text x="41.3611%" y="111.50"></text></g><g><title>specializes (91,821 samples, 0.13%)</title><rect x="41.2418%" y="101" width="0.1262%" height="15" fill="rgb(208,190,38)"/><text x="41.4918%" y="111.50"></text></g><g><title>trait_impls_of (382,193 samples, 0.53%)</title><rect x="41.3801%" y="101" width="0.5252%" height="15" fill="rgb(235,213,38)"/><text x="41.6301%" y="111.50"></text></g><g><title>implementations_of_trait (120,921 samples, 0.17%)</title><rect x="41.7392%" y="85" width="0.1662%" height="15" fill="rgb(237,122,38)"/><text x="41.9892%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (80,681 samples, 0.11%)</title><rect x="41.7945%" y="69" width="0.1109%" height="15" fill="rgb(244,218,35)"/><text x="42.0445%" y="79.50"></text></g><g><title>evaluate_obligation (1,885,250 samples, 2.59%)</title><rect x="39.3197%" y="117" width="2.5907%" height="15" fill="rgb(240,68,47)"/><text x="39.5697%" y="127.50">ev..</text></g><g><title>fn_sig (113,791 samples, 0.16%)</title><rect x="41.9417%" y="117" width="0.1564%" height="15" fill="rgb(210,16,53)"/><text x="42.1917%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (98,371 samples, 0.14%)</title><rect x="41.9629%" y="101" width="0.1352%" height="15" fill="rgb(235,124,12)"/><text x="42.2129%" y="111.50"></text></g><g><title>generics_of (83,452 samples, 0.11%)</title><rect x="42.0981%" y="117" width="0.1147%" height="15" fill="rgb(224,169,11)"/><text x="42.3481%" y="127.50"></text></g><g><title>item_attrs (178,452 samples, 0.25%)</title><rect x="42.3221%" y="117" width="0.2452%" height="15" fill="rgb(250,166,2)"/><text x="42.5721%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (170,402 samples, 0.23%)</title><rect x="42.3332%" y="101" width="0.2342%" height="15" fill="rgb(242,216,29)"/><text x="42.5832%" y="111.50"></text></g><g><title>method_autoderef_steps (184,801 samples, 0.25%)</title><rect x="42.6733%" y="117" width="0.2540%" height="15" fill="rgb(230,116,27)"/><text x="42.9233%" y="127.50"></text></g><g><title>evaluate_obligation (104,161 samples, 0.14%)</title><rect x="42.7841%" y="101" width="0.1431%" height="15" fill="rgb(228,99,48)"/><text x="43.0341%" y="111.50"></text></g><g><title>object_safety_violations (146,791 samples, 0.20%)</title><rect x="42.9292%" y="117" width="0.2017%" height="15" fill="rgb(253,11,6)"/><text x="43.1792%" y="127.50"></text></g><g><title>explicit_predicates_of (88,562 samples, 0.12%)</title><rect x="43.4220%" y="85" width="0.1217%" height="15" fill="rgb(247,143,39)"/><text x="43.6720%" y="95.50"></text></g><g><title>predicates_of (317,316 samples, 0.44%)</title><rect x="43.1706%" y="117" width="0.4361%" height="15" fill="rgb(236,97,10)"/><text x="43.4206%" y="127.50"></text></g><g><title>predicates_defined_on (210,064 samples, 0.29%)</title><rect x="43.3180%" y="101" width="0.2887%" height="15" fill="rgb(233,208,19)"/><text x="43.5680%" y="111.50"></text></g><g><title>type_of (95,240 samples, 0.13%)</title><rect x="43.6425%" y="117" width="0.1309%" height="15" fill="rgb(216,164,2)"/><text x="43.8925%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (73,000 samples, 0.10%)</title><rect x="43.6730%" y="101" width="0.1003%" height="15" fill="rgb(220,129,5)"/><text x="43.9230%" y="111.50"></text></g><g><title>evaluate_obligation (142,682 samples, 0.20%)</title><rect x="45.5118%" y="101" width="0.1961%" height="15" fill="rgb(242,17,10)"/><text x="45.7618%" y="111.50"></text></g><g><title>is_copy_raw (229,502 samples, 0.32%)</title><rect x="45.7601%" y="101" width="0.3154%" height="15" fill="rgb(242,107,0)"/><text x="46.0101%" y="111.50"></text></g><g><title>evaluate_obligation (223,012 samples, 0.31%)</title><rect x="45.7691%" y="85" width="0.3065%" height="15" fill="rgb(251,28,31)"/><text x="46.0191%" y="95.50"></text></g><g><title>trait_impls_of (167,472 samples, 0.23%)</title><rect x="45.8454%" y="69" width="0.2301%" height="15" fill="rgb(233,223,10)"/><text x="46.0954%" y="79.50"></text></g><g><title>typeck (1,773,120 samples, 2.44%)</title><rect x="43.7733%" y="117" width="2.4366%" height="15" fill="rgb(215,21,27)"/><text x="44.0233%" y="127.50">ty..</text></g><g><title>item_bodies_checking (14,297,369 samples, 19.65%)</title><rect x="26.6447%" y="165" width="19.6473%" height="15" fill="rgb(232,23,21)"/><text x="26.8947%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (14,294,539 samples, 19.64%)</title><rect x="26.6486%" y="149" width="19.6434%" height="15" fill="rgb(244,5,23)"/><text x="26.8986%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (14,269,589 samples, 19.61%)</title><rect x="26.6829%" y="133" width="19.6091%" height="15" fill="rgb(226,81,46)"/><text x="26.9329%" y="143.50">typeck</text></g><g><title>impl_trait_ref (186,481 samples, 0.26%)</title><rect x="46.6777%" y="85" width="0.2563%" height="15" fill="rgb(247,70,30)"/><text x="46.9277%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (166,111 samples, 0.23%)</title><rect x="46.7057%" y="69" width="0.2283%" height="15" fill="rgb(212,68,19)"/><text x="46.9557%" y="79.50"></text></g><g><title>adt_destructor (357,904 samples, 0.49%)</title><rect x="46.4865%" y="133" width="0.4918%" height="15" fill="rgb(240,187,13)"/><text x="46.7365%" y="143.50"></text></g><g><title>coherent_trait (352,874 samples, 0.48%)</title><rect x="46.4934%" y="117" width="0.4849%" height="15" fill="rgb(223,113,26)"/><text x="46.7434%" y="127.50"></text></g><g><title>specialization_graph_of (351,334 samples, 0.48%)</title><rect x="46.4955%" y="101" width="0.4828%" height="15" fill="rgb(206,192,2)"/><text x="46.7455%" y="111.50"></text></g><g><title>item_types_checking (539,966 samples, 0.74%)</title><rect x="46.2920%" y="165" width="0.7420%" height="15" fill="rgb(241,108,4)"/><text x="46.5420%" y="175.50"></text></g><g><title>check_mod_item_types (536,536 samples, 0.74%)</title><rect x="46.2967%" y="149" width="0.7373%" height="15" fill="rgb(247,173,49)"/><text x="46.5467%" y="159.50"></text></g><g><title>fn_sig (134,901 samples, 0.19%)</title><rect x="47.1903%" y="133" width="0.1854%" height="15" fill="rgb(224,114,35)"/><text x="47.4403%" y="143.50"></text></g><g><title>named_region_map (202,253 samples, 0.28%)</title><rect x="47.4266%" y="117" width="0.2779%" height="15" fill="rgb(245,159,27)"/><text x="47.6766%" y="127.50"></text></g><g><title>resolve_lifetimes (192,073 samples, 0.26%)</title><rect x="47.4406%" y="101" width="0.2639%" height="15" fill="rgb(245,172,44)"/><text x="47.6906%" y="111.50"></text></g><g><title>generics_of (250,243 samples, 0.34%)</title><rect x="47.3756%" y="133" width="0.3439%" height="15" fill="rgb(236,23,11)"/><text x="47.6256%" y="143.50"></text></g><g><title>predicates_of (228,351 samples, 0.31%)</title><rect x="47.7388%" y="133" width="0.3138%" height="15" fill="rgb(205,117,38)"/><text x="47.9888%" y="143.50"></text></g><g><title>predicates_defined_on (208,791 samples, 0.29%)</title><rect x="47.7657%" y="117" width="0.2869%" height="15" fill="rgb(237,72,25)"/><text x="48.0157%" y="127.50"></text></g><g><title>inferred_outlives_of (145,491 samples, 0.20%)</title><rect x="47.8527%" y="101" width="0.1999%" height="15" fill="rgb(244,70,9)"/><text x="48.1027%" y="111.50"></text></g><g><title>inferred_outlives_crate (133,621 samples, 0.18%)</title><rect x="47.8690%" y="85" width="0.1836%" height="15" fill="rgb(217,125,39)"/><text x="48.1190%" y="95.50"></text></g><g><title>type_of (75,371 samples, 0.10%)</title><rect x="47.9490%" y="69" width="0.1036%" height="15" fill="rgb(235,36,10)"/><text x="48.1990%" y="79.50"></text></g><g><title>type_collecting (813,749 samples, 1.12%)</title><rect x="47.0363%" y="165" width="1.1182%" height="15" fill="rgb(251,123,47)"/><text x="47.2863%" y="175.50"></text></g><g><title>collect_mod_item_types (804,549 samples, 1.11%)</title><rect x="47.0490%" y="149" width="1.1056%" height="15" fill="rgb(221,13,13)"/><text x="47.2990%" y="159.50"></text></g><g><title>adt_def (120,922 samples, 0.17%)</title><rect x="49.0477%" y="85" width="0.1662%" height="15" fill="rgb(238,131,9)"/><text x="49.2977%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (119,942 samples, 0.16%)</title><rect x="49.0490%" y="69" width="0.1648%" height="15" fill="rgb(211,50,8)"/><text x="49.2990%" y="79.50"></text></g><g><title>adt_sized_constraint (201,062 samples, 0.28%)</title><rect x="49.0392%" y="101" width="0.2763%" height="15" fill="rgb(245,182,24)"/><text x="49.2892%" y="111.50"></text></g><g><title>adt_sized_constraint (291,523 samples, 0.40%)</title><rect x="48.9224%" y="117" width="0.4006%" height="15" fill="rgb(242,14,37)"/><text x="49.1724%" y="127.50"></text></g><g><title>evaluate_obligation (450,204 samples, 0.62%)</title><rect x="48.7606%" y="133" width="0.6187%" height="15" fill="rgb(246,228,12)"/><text x="49.0106%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,071,410 samples, 1.47%)</title><rect x="48.2331%" y="149" width="1.4723%" height="15" fill="rgb(213,55,15)"/><text x="48.4831%" y="159.50"></text></g><g><title>region_scope_tree (102,930 samples, 0.14%)</title><rect x="49.5639%" y="133" width="0.1414%" height="15" fill="rgb(209,9,3)"/><text x="49.8139%" y="143.50"></text></g><g><title>adt_def (72,801 samples, 0.10%)</title><rect x="50.2809%" y="101" width="0.1000%" height="15" fill="rgb(230,59,30)"/><text x="50.5309%" y="111.50"></text></g><g><title>adt_sized_constraint (133,941 samples, 0.18%)</title><rect x="50.2709%" y="117" width="0.1841%" height="15" fill="rgb(209,121,21)"/><text x="50.5209%" y="127.50"></text></g><g><title>evaluate_obligation (204,982 samples, 0.28%)</title><rect x="50.1747%" y="133" width="0.2817%" height="15" fill="rgb(220,109,13)"/><text x="50.4247%" y="143.50"></text></g><g><title>implied_outlives_bounds (85,072 samples, 0.12%)</title><rect x="50.4587%" y="133" width="0.1169%" height="15" fill="rgb(232,18,1)"/><text x="50.7087%" y="143.50"></text></g><g><title>param_env (139,402 samples, 0.19%)</title><rect x="50.5756%" y="133" width="0.1916%" height="15" fill="rgb(215,41,42)"/><text x="50.8256%" y="143.50"></text></g><g><title>check_item_well_formed (873,490 samples, 1.20%)</title><rect x="49.7054%" y="149" width="1.2003%" height="15" fill="rgb(224,123,36)"/><text x="49.9554%" y="159.50"></text></g><g><title>evaluate_obligation (81,971 samples, 0.11%)</title><rect x="50.9820%" y="133" width="0.1126%" height="15" fill="rgb(240,125,3)"/><text x="51.2320%" y="143.50"></text></g><g><title>analysis (36,593,998 samples, 50.29%)</title><rect x="0.8281%" y="197" width="50.2871%" height="15" fill="rgb(205,98,50)"/><text x="1.0781%" y="207.50">analysis</text></g><g><title>type_check_crate (22,271,028 samples, 30.60%)</title><rect x="20.5105%" y="181" width="30.6046%" height="15" fill="rgb(205,185,37)"/><text x="20.7605%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,152,935 samples, 2.96%)</title><rect x="48.1566%" y="165" width="2.9585%" height="15" fill="rgb(238,207,15)"/><text x="48.4066%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (152,412 samples, 0.21%)</title><rect x="50.9057%" y="149" width="0.2094%" height="15" fill="rgb(213,199,42)"/><text x="51.1557%" y="159.50"></text></g><g><title>codegen_crate (366,154 samples, 0.50%)</title><rect x="51.1324%" y="197" width="0.5032%" height="15" fill="rgb(235,201,11)"/><text x="51.3824%" y="207.50"></text></g><g><title>AST_validation (115,661 samples, 0.16%)</title><rect x="51.9533%" y="181" width="0.1589%" height="15" fill="rgb(207,46,11)"/><text x="52.2033%" y="191.50"></text></g><g><title>crate_injection (88,501 samples, 0.12%)</title><rect x="52.1821%" y="181" width="0.1216%" height="15" fill="rgb(241,35,35)"/><text x="52.4321%" y="191.50"></text></g><g><title>metadata_load_macro (363,693 samples, 0.50%)</title><rect x="69.3284%" y="149" width="0.4998%" height="15" fill="rgb(243,32,47)"/><text x="69.5784%" y="159.50"></text></g><g><title>metadata_register_crate (2,614,269 samples, 3.59%)</title><rect x="69.8282%" y="149" width="3.5925%" height="15" fill="rgb(247,202,23)"/><text x="70.0782%" y="159.50">meta..</text></g><g><title>metadata_register_crate (973,750 samples, 1.34%)</title><rect x="72.0826%" y="133" width="1.3381%" height="15" fill="rgb(219,102,11)"/><text x="72.3326%" y="143.50"></text></g><g><title>metadata_register_crate (80,932 samples, 0.11%)</title><rect x="73.3095%" y="117" width="0.1112%" height="15" fill="rgb(243,110,44)"/><text x="73.5595%" y="127.50"></text></g><g><title>macro_expand_crate (15,447,592 samples, 21.23%)</title><rect x="52.3037%" y="181" width="21.2279%" height="15" fill="rgb(222,74,54)"/><text x="52.5537%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (15,421,032 samples, 21.19%)</title><rect x="52.3402%" y="165" width="21.1914%" height="15" fill="rgb(216,99,12)"/><text x="52.5902%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (80,741 samples, 0.11%)</title><rect x="73.4207%" y="149" width="0.1110%" height="15" fill="rgb(226,22,26)"/><text x="73.6707%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (200,862 samples, 0.28%)</title><rect x="73.5393%" y="181" width="0.2760%" height="15" fill="rgb(217,163,10)"/><text x="73.7893%" y="191.50"></text></g><g><title>finalize_imports (87,971 samples, 0.12%)</title><rect x="73.8272%" y="165" width="0.1209%" height="15" fill="rgb(213,25,53)"/><text x="74.0772%" y="175.50"></text></g><g><title>late_resolve_crate (9,174,932 samples, 12.61%)</title><rect x="74.0089%" y="165" width="12.6081%" height="15" fill="rgb(252,105,26)"/><text x="74.2589%" y="175.50">late_resolve_crate</text></g><g><title>configure_and_expand (25,539,024 samples, 35.10%)</title><rect x="51.6356%" y="197" width="35.0955%" height="15" fill="rgb(220,39,43)"/><text x="51.8856%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (9,398,795 samples, 12.92%)</title><rect x="73.8153%" y="181" width="12.9157%" height="15" fill="rgb(229,68,48)"/><text x="74.0653%" y="191.50">resolve_crate</text></g><g><title>drop_ast (76,201 samples, 0.10%)</title><rect x="86.7311%" y="197" width="0.1047%" height="15" fill="rgb(252,8,32)"/><text x="86.9811%" y="207.50"></text></g><g><title>early_lint_checks (154,352 samples, 0.21%)</title><rect x="86.8566%" y="197" width="0.2121%" height="15" fill="rgb(223,20,43)"/><text x="87.1066%" y="207.50"></text></g><g><title>free_global_ctxt (2,813,732 samples, 3.87%)</title><rect x="87.0687%" y="197" width="3.8666%" height="15" fill="rgb(229,81,49)"/><text x="87.3187%" y="207.50">free..</text></g><g><title>generate_crate_metadata (592,266 samples, 0.81%)</title><rect x="90.9353%" y="197" width="0.8139%" height="15" fill="rgb(236,28,36)"/><text x="91.1853%" y="207.50"></text></g><g><title>hir_lowering (1,315,204 samples, 1.81%)</title><rect x="91.7492%" y="197" width="1.8073%" height="15" fill="rgb(249,185,26)"/><text x="91.9992%" y="207.50">h..</text></g><g><title>parse_crate (3,455,508 samples, 4.75%)</title><rect x="93.6197%" y="197" width="4.7485%" height="15" fill="rgb(249,174,33)"/><text x="93.8697%" y="207.50">parse_..</text></g><g><title>prepare_outputs (267,323 samples, 0.37%)</title><rect x="98.3795%" y="197" width="0.3674%" height="15" fill="rgb(233,201,37)"/><text x="98.6295%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (519,386 samples, 0.71%)</title><rect x="98.7468%" y="197" width="0.7137%" height="15" fill="rgb(221,78,26)"/><text x="98.9968%" y="207.50"></text></g><g><title>setup_global_ctxt (76,511 samples, 0.11%)</title><rect x="99.4760%" y="197" width="0.1051%" height="15" fill="rgb(250,127,30)"/><text x="99.7260%" y="207.50"></text></g><g><title>all (72,770,121 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (72,770,121 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (304,804 samples, 0.42%)</title><rect x="99.5811%" y="197" width="0.4189%" height="15" fill="rgb(249,83,47)"/><text x="99.8311%" y="207.50"></text></g></svg></svg>