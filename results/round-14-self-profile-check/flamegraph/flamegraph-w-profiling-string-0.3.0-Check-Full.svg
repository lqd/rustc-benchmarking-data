<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (124,902 samples, 0.17%)</title><rect x="5.7407%" y="149" width="0.1746%" height="15" fill="rgb(227,0,7)"/><text x="5.9907%" y="159.50"></text></g><g><title>is_late_bound_map (85,310 samples, 0.12%)</title><rect x="5.7961%" y="133" width="0.1193%" height="15" fill="rgb(217,0,24)"/><text x="6.0461%" y="143.50"></text></g><g><title>param_env (104,801 samples, 0.15%)</title><rect x="6.7325%" y="117" width="0.1465%" height="15" fill="rgb(221,193,54)"/><text x="6.9825%" y="127.50"></text></g><g><title>eval_to_const_value_raw (89,381 samples, 0.12%)</title><rect x="8.0695%" y="85" width="0.1250%" height="15" fill="rgb(248,212,6)"/><text x="8.3195%" y="95.50"></text></g><g><title>eval_to_const_value_raw (82,361 samples, 0.12%)</title><rect x="8.0794%" y="69" width="0.1152%" height="15" fill="rgb(208,68,35)"/><text x="8.3294%" y="79.50"></text></g><g><title>eval_to_allocation_raw (76,871 samples, 0.11%)</title><rect x="8.0870%" y="53" width="0.1075%" height="15" fill="rgb(232,128,0)"/><text x="8.3370%" y="63.50"></text></g><g><title>needs_drop_raw (513,907 samples, 0.72%)</title><rect x="8.2000%" y="85" width="0.7185%" height="15" fill="rgb(207,160,47)"/><text x="8.4500%" y="95.50"></text></g><g><title>is_copy_raw (453,637 samples, 0.63%)</title><rect x="8.2842%" y="69" width="0.6342%" height="15" fill="rgb(228,23,34)"/><text x="8.5342%" y="79.50"></text></g><g><title>evaluate_obligation (410,996 samples, 0.57%)</title><rect x="8.3438%" y="53" width="0.5746%" height="15" fill="rgb(218,30,26)"/><text x="8.5938%" y="63.50"></text></g><g><title>trait_impls_of (141,972 samples, 0.20%)</title><rect x="8.7200%" y="37" width="0.1985%" height="15" fill="rgb(220,122,19)"/><text x="8.9700%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (179,871 samples, 0.25%)</title><rect x="9.0941%" y="69" width="0.2515%" height="15" fill="rgb(250,228,42)"/><text x="9.3441%" y="79.50"></text></g><g><title>specialization_graph_of (133,771 samples, 0.19%)</title><rect x="9.3997%" y="69" width="0.1870%" height="15" fill="rgb(240,193,28)"/><text x="9.6497%" y="79.50"></text></g><g><title>resolve_instance (507,076 samples, 0.71%)</title><rect x="8.9540%" y="85" width="0.7090%" height="15" fill="rgb(216,20,37)"/><text x="9.2040%" y="95.50"></text></g><g><title>thir_body (187,012 samples, 0.26%)</title><rect x="9.6752%" y="85" width="0.2615%" height="15" fill="rgb(206,188,39)"/><text x="9.9252%" y="95.50"></text></g><g><title>mir_const (2,564,048 samples, 3.58%)</title><rect x="6.3593%" y="133" width="3.5848%" height="15" fill="rgb(217,207,13)"/><text x="6.6093%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (2,192,293 samples, 3.07%)</title><rect x="6.8790%" y="117" width="3.0651%" height="15" fill="rgb(231,73,38)"/><text x="7.1290%" y="127.50">uns..</text></g><g><title>mir_built (1,988,113 samples, 2.78%)</title><rect x="7.1645%" y="101" width="2.7796%" height="15" fill="rgb(225,20,46)"/><text x="7.4145%" y="111.50">mi..</text></g><g><title>mir_promoted (3,166,476 samples, 4.43%)</title><rect x="5.9561%" y="149" width="4.4271%" height="15" fill="rgb(210,31,41)"/><text x="6.2061%" y="159.50">mir_p..</text></g><g><title>mir_const_qualif (314,084 samples, 0.44%)</title><rect x="9.9441%" y="133" width="0.4391%" height="15" fill="rgb(221,200,47)"/><text x="10.1941%" y="143.50"></text></g><g><title>mir_const (247,122 samples, 0.35%)</title><rect x="10.0377%" y="117" width="0.3455%" height="15" fill="rgb(226,26,5)"/><text x="10.2877%" y="127.50"></text></g><g><title>unsafety_check_result (169,552 samples, 0.24%)</title><rect x="10.1462%" y="101" width="0.2371%" height="15" fill="rgb(249,33,26)"/><text x="10.3962%" y="111.50"></text></g><g><title>mir_built (145,702 samples, 0.20%)</title><rect x="10.1795%" y="85" width="0.2037%" height="15" fill="rgb(235,183,28)"/><text x="10.4295%" y="95.50"></text></g><g><title>type_op_normalize_fn_sig (110,112 samples, 0.15%)</title><rect x="10.4355%" y="149" width="0.1539%" height="15" fill="rgb(221,5,38)"/><text x="10.6855%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,122,559 samples, 9.96%)</title><rect x="1.3601%" y="181" width="9.9582%" height="15" fill="rgb(247,18,42)"/><text x="1.6101%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (7,063,089 samples, 9.88%)</title><rect x="1.4433%" y="165" width="9.8750%" height="15" fill="rgb(241,131,45)"/><text x="1.6933%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (461,806 samples, 0.65%)</title><rect x="10.6727%" y="149" width="0.6457%" height="15" fill="rgb(249,31,29)"/><text x="10.9227%" y="159.50"></text></g><g><title>MIR_effect_checking (231,002 samples, 0.32%)</title><rect x="11.3183%" y="181" width="0.3230%" height="15" fill="rgb(225,111,53)"/><text x="11.5683%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (199,542 samples, 0.28%)</title><rect x="11.3623%" y="165" width="0.2790%" height="15" fill="rgb(238,160,17)"/><text x="11.6123%" y="175.50"></text></g><g><title>hir_module_items (222,652 samples, 0.31%)</title><rect x="11.6413%" y="181" width="0.3113%" height="15" fill="rgb(214,148,48)"/><text x="11.8913%" y="191.50"></text></g><g><title>get_lang_items (115,841 samples, 0.16%)</title><rect x="12.3894%" y="133" width="0.1620%" height="15" fill="rgb(232,36,49)"/><text x="12.6394%" y="143.50"></text></g><g><title>associated_item (78,440 samples, 0.11%)</title><rect x="12.6472%" y="117" width="0.1097%" height="15" fill="rgb(209,103,24)"/><text x="12.8972%" y="127.50"></text></g><g><title>item_attrs (141,192 samples, 0.20%)</title><rect x="12.8148%" y="101" width="0.1974%" height="15" fill="rgb(229,88,8)"/><text x="13.0648%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (128,392 samples, 0.18%)</title><rect x="12.8327%" y="85" width="0.1795%" height="15" fill="rgb(213,181,19)"/><text x="13.0827%" y="95.50"></text></g><g><title>codegen_fn_attrs (245,444 samples, 0.34%)</title><rect x="12.7569%" y="117" width="0.3432%" height="15" fill="rgb(254,191,54)"/><text x="13.0069%" y="127.50"></text></g><g><title>should_inherit_track_caller (399,945 samples, 0.56%)</title><rect x="12.5514%" y="133" width="0.5592%" height="15" fill="rgb(241,83,37)"/><text x="12.8014%" y="143.50"></text></g><g><title>codegen_fn_attrs (610,767 samples, 0.85%)</title><rect x="12.2870%" y="149" width="0.8539%" height="15" fill="rgb(233,36,39)"/><text x="12.5370%" y="159.50"></text></g><g><title>check_mod_attrs (824,469 samples, 1.15%)</title><rect x="11.9893%" y="165" width="1.1527%" height="15" fill="rgb(226,3,54)"/><text x="12.2393%" y="175.50"></text></g><g><title>check_mod_const_bodies (80,621 samples, 0.11%)</title><rect x="13.1420%" y="165" width="0.1127%" height="15" fill="rgb(245,192,40)"/><text x="13.3920%" y="175.50"></text></g><g><title>lookup_deprecation_entry (151,041 samples, 0.21%)</title><rect x="13.6084%" y="149" width="0.2112%" height="15" fill="rgb(238,167,29)"/><text x="13.8584%" y="159.50"></text></g><g><title>stability_index (74,681 samples, 0.10%)</title><rect x="13.7151%" y="133" width="0.1044%" height="15" fill="rgb(232,182,51)"/><text x="13.9651%" y="143.50"></text></g><g><title>lookup_stability (82,782 samples, 0.12%)</title><rect x="13.8195%" y="149" width="0.1157%" height="15" fill="rgb(231,60,39)"/><text x="14.0695%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (475,495 samples, 0.66%)</title><rect x="13.3477%" y="165" width="0.6648%" height="15" fill="rgb(208,69,12)"/><text x="13.5977%" y="175.50"></text></g><g><title>misc_checking_1 (1,549,207 samples, 2.17%)</title><rect x="11.9531%" y="181" width="2.1660%" height="15" fill="rgb(235,93,37)"/><text x="12.2031%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (113,581 samples, 0.16%)</title><rect x="14.1210%" y="165" width="0.1588%" height="15" fill="rgb(213,116,39)"/><text x="14.3710%" y="175.50"></text></g><g><title>check_mod_liveness (84,831 samples, 0.12%)</title><rect x="14.1612%" y="149" width="0.1186%" height="15" fill="rgb(222,207,29)"/><text x="14.4112%" y="159.50"></text></g><g><title>misc_checking_2 (269,713 samples, 0.38%)</title><rect x="14.1191%" y="181" width="0.3771%" height="15" fill="rgb(206,96,30)"/><text x="14.3691%" y="191.50"></text></g><g><title>match_checking (154,772 samples, 0.22%)</title><rect x="14.2798%" y="165" width="0.2164%" height="15" fill="rgb(218,138,4)"/><text x="14.5298%" y="175.50"></text></g><g><title>check_match (139,852 samples, 0.20%)</title><rect x="14.3007%" y="149" width="0.1955%" height="15" fill="rgb(250,191,14)"/><text x="14.5507%" y="159.50"></text></g><g><title>check_private_in_public (105,461 samples, 0.15%)</title><rect x="14.5050%" y="165" width="0.1474%" height="15" fill="rgb(239,60,40)"/><text x="14.7550%" y="175.50"></text></g><g><title>death_checking (316,304 samples, 0.44%)</title><rect x="14.6525%" y="165" width="0.4422%" height="15" fill="rgb(206,27,48)"/><text x="14.9025%" y="175.50"></text></g><g><title>item_attrs (144,592 samples, 0.20%)</title><rect x="14.8925%" y="149" width="0.2022%" height="15" fill="rgb(225,35,8)"/><text x="15.1425%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (143,132 samples, 0.20%)</title><rect x="14.8946%" y="133" width="0.2001%" height="15" fill="rgb(250,213,24)"/><text x="15.1446%" y="143.50"></text></g><g><title>param_env (102,811 samples, 0.14%)</title><rect x="16.1638%" y="133" width="0.1437%" height="15" fill="rgb(247,123,22)"/><text x="16.4138%" y="143.50"></text></g><g><title>crate_lints (1,933,232 samples, 2.70%)</title><rect x="15.0967%" y="149" width="2.7029%" height="15" fill="rgb(231,138,38)"/><text x="15.3467%" y="159.50">cr..</text></g><g><title>type_of (1,067,191 samples, 1.49%)</title><rect x="16.3076%" y="133" width="1.4921%" height="15" fill="rgb(231,145,46)"/><text x="16.5576%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (831,598 samples, 1.16%)</title><rect x="16.6370%" y="117" width="1.1627%" height="15" fill="rgb(251,118,11)"/><text x="16.8870%" y="127.50"></text></g><g><title>lint_checking (2,029,303 samples, 2.84%)</title><rect x="15.0947%" y="165" width="2.8372%" height="15" fill="rgb(217,147,25)"/><text x="15.3447%" y="175.50">li..</text></g><g><title>module_lints (94,601 samples, 0.13%)</title><rect x="17.7996%" y="149" width="0.1323%" height="15" fill="rgb(247,81,37)"/><text x="18.0496%" y="159.50"></text></g><g><title>lint_mod (91,911 samples, 0.13%)</title><rect x="17.8034%" y="133" width="0.1285%" height="15" fill="rgb(209,12,38)"/><text x="18.0534%" y="143.50"></text></g><g><title>privacy_access_levels (134,732 samples, 0.19%)</title><rect x="17.9319%" y="165" width="0.1884%" height="15" fill="rgb(227,1,9)"/><text x="18.1819%" y="175.50"></text></g><g><title>privacy_checking_modules (310,603 samples, 0.43%)</title><rect x="18.1203%" y="165" width="0.4343%" height="15" fill="rgb(248,47,43)"/><text x="18.3703%" y="175.50"></text></g><g><title>check_mod_privacy (308,843 samples, 0.43%)</title><rect x="18.1227%" y="149" width="0.4318%" height="15" fill="rgb(221,10,30)"/><text x="18.3727%" y="159.50"></text></g><g><title>misc_checking_3 (2,914,443 samples, 4.07%)</title><rect x="14.4962%" y="181" width="4.0747%" height="15" fill="rgb(210,229,1)"/><text x="14.7462%" y="191.50">misc..</text></g><g><title>impl_parent (2,769,140 samples, 3.87%)</title><rect x="25.4818%" y="117" width="3.8716%" height="15" fill="rgb(222,148,37)"/><text x="25.7318%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (1,508,999 samples, 2.11%)</title><rect x="27.2436%" y="101" width="2.1098%" height="15" fill="rgb(234,67,33)"/><text x="27.4936%" y="111.50">m..</text></g><g><title>impl_trait_ref (5,624,456 samples, 7.86%)</title><rect x="29.3534%" y="117" width="7.8637%" height="15" fill="rgb(247,98,35)"/><text x="29.6034%" y="127.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,525,088 samples, 6.33%)</title><rect x="30.8904%" y="101" width="6.3266%" height="15" fill="rgb(247,138,52)"/><text x="31.1404%" y="111.50">metadata..</text></g><g><title>trait_impls_of (1,154,582 samples, 1.61%)</title><rect x="37.2757%" y="117" width="1.6142%" height="15" fill="rgb(213,79,30)"/><text x="37.5257%" y="127.50"></text></g><g><title>implementations_of_trait (301,004 samples, 0.42%)</title><rect x="38.4691%" y="101" width="0.4208%" height="15" fill="rgb(246,177,23)"/><text x="38.7191%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (235,303 samples, 0.33%)</title><rect x="38.5609%" y="85" width="0.3290%" height="15" fill="rgb(230,62,27)"/><text x="38.8109%" y="95.50"></text></g><g><title>coherent_trait (14,478,101 samples, 20.24%)</title><rect x="18.6501%" y="149" width="20.2421%" height="15" fill="rgb(216,154,8)"/><text x="18.9001%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (14,443,611 samples, 20.19%)</title><rect x="18.6983%" y="133" width="20.1939%" height="15" fill="rgb(244,35,45)"/><text x="18.9483%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (14,571,802 samples, 20.37%)</title><rect x="18.6162%" y="165" width="20.3731%" height="15" fill="rgb(251,115,12)"/><text x="18.8662%" y="175.50">coherence_checking</text></g><g><title>associated_item (162,752 samples, 0.23%)</title><rect x="44.9113%" y="101" width="0.2275%" height="15" fill="rgb(240,54,50)"/><text x="45.1613%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (125,431 samples, 0.18%)</title><rect x="44.9635%" y="85" width="0.1754%" height="15" fill="rgb(233,84,52)"/><text x="45.2135%" y="95.50"></text></g><g><title>associated_items (243,394 samples, 0.34%)</title><rect x="44.8107%" y="117" width="0.3403%" height="15" fill="rgb(207,117,47)"/><text x="45.0607%" y="127.50"></text></g><g><title>adt_dtorck_constraint (99,191 samples, 0.14%)</title><rect x="45.3935%" y="85" width="0.1387%" height="15" fill="rgb(249,43,39)"/><text x="45.6435%" y="95.50"></text></g><g><title>dropck_outlives (264,193 samples, 0.37%)</title><rect x="45.1814%" y="117" width="0.3694%" height="15" fill="rgb(209,38,44)"/><text x="45.4314%" y="127.50"></text></g><g><title>adt_dtorck_constraint (175,723 samples, 0.25%)</title><rect x="45.3051%" y="101" width="0.2457%" height="15" fill="rgb(236,212,23)"/><text x="45.5551%" y="111.50"></text></g><g><title>predicates_of (88,581 samples, 0.12%)</title><rect x="46.3443%" y="101" width="0.1238%" height="15" fill="rgb(242,79,21)"/><text x="46.5943%" y="111.50"></text></g><g><title>specializes (105,592 samples, 0.15%)</title><rect x="46.4682%" y="101" width="0.1476%" height="15" fill="rgb(211,96,35)"/><text x="46.7182%" y="111.50"></text></g><g><title>trait_impls_of (83,721 samples, 0.12%)</title><rect x="46.6217%" y="101" width="0.1171%" height="15" fill="rgb(253,215,40)"/><text x="46.8717%" y="111.50"></text></g><g><title>evaluate_obligation (850,430 samples, 1.19%)</title><rect x="45.5508%" y="117" width="1.1890%" height="15" fill="rgb(211,81,21)"/><text x="45.8008%" y="127.50"></text></g><g><title>item_attrs (90,943 samples, 0.13%)</title><rect x="46.8932%" y="117" width="0.1271%" height="15" fill="rgb(208,190,38)"/><text x="47.1432%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,593 samples, 0.12%)</title><rect x="46.8965%" y="101" width="0.1239%" height="15" fill="rgb(235,213,38)"/><text x="47.1465%" y="111.50"></text></g><g><title>method_autoderef_steps (84,312 samples, 0.12%)</title><rect x="47.0420%" y="117" width="0.1179%" height="15" fill="rgb(237,122,38)"/><text x="47.2920%" y="127.50"></text></g><g><title>param_env (105,040 samples, 0.15%)</title><rect x="47.1818%" y="117" width="0.1469%" height="15" fill="rgb(244,218,35)"/><text x="47.4318%" y="127.50"></text></g><g><title>predicates_of (103,271 samples, 0.14%)</title><rect x="47.3353%" y="117" width="0.1444%" height="15" fill="rgb(240,68,47)"/><text x="47.5853%" y="127.50"></text></g><g><title>item_bodies_checking (6,133,039 samples, 8.57%)</title><rect x="39.0620%" y="165" width="8.5747%" height="15" fill="rgb(210,16,53)"/><text x="39.3120%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (6,131,189 samples, 8.57%)</title><rect x="39.0645%" y="149" width="8.5721%" height="15" fill="rgb(235,124,12)"/><text x="39.3145%" y="159.50">typeck_item_..</text></g><g><title>typeck (6,090,679 samples, 8.52%)</title><rect x="39.1212%" y="133" width="8.5155%" height="15" fill="rgb(224,169,11)"/><text x="39.3712%" y="143.50">typeck</text></g><g><title>impl_trait_ref (145,721 samples, 0.20%)</title><rect x="48.5932%" y="85" width="0.2037%" height="15" fill="rgb(250,166,2)"/><text x="48.8432%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (125,830 samples, 0.18%)</title><rect x="48.6211%" y="69" width="0.1759%" height="15" fill="rgb(242,216,29)"/><text x="48.8711%" y="79.50"></text></g><g><title>adt_destructor (318,603 samples, 0.45%)</title><rect x="48.3981%" y="133" width="0.4454%" height="15" fill="rgb(230,116,27)"/><text x="48.6481%" y="143.50"></text></g><g><title>coherent_trait (316,143 samples, 0.44%)</title><rect x="48.4016%" y="117" width="0.4420%" height="15" fill="rgb(228,99,48)"/><text x="48.6516%" y="127.50"></text></g><g><title>specialization_graph_of (314,413 samples, 0.44%)</title><rect x="48.4040%" y="101" width="0.4396%" height="15" fill="rgb(253,11,6)"/><text x="48.6540%" y="111.50"></text></g><g><title>item_types_checking (995,611 samples, 1.39%)</title><rect x="47.6367%" y="165" width="1.3920%" height="15" fill="rgb(247,143,39)"/><text x="47.8867%" y="175.50"></text></g><g><title>check_mod_item_types (993,091 samples, 1.39%)</title><rect x="47.6402%" y="149" width="1.3885%" height="15" fill="rgb(236,97,10)"/><text x="47.8902%" y="159.50"></text></g><g><title>fn_sig (308,373 samples, 0.43%)</title><rect x="49.4543%" y="133" width="0.4311%" height="15" fill="rgb(233,208,19)"/><text x="49.7043%" y="143.50"></text></g><g><title>generics_of (241,653 samples, 0.34%)</title><rect x="49.8855%" y="133" width="0.3379%" height="15" fill="rgb(216,164,2)"/><text x="50.1355%" y="143.50"></text></g><g><title>impl_trait_ref (132,681 samples, 0.19%)</title><rect x="50.2233%" y="133" width="0.1855%" height="15" fill="rgb(220,129,5)"/><text x="50.4733%" y="143.50"></text></g><g><title>late_bound_vars_map (424,045 samples, 0.59%)</title><rect x="51.1543%" y="85" width="0.5929%" height="15" fill="rgb(242,17,10)"/><text x="51.4043%" y="95.50"></text></g><g><title>resolve_lifetimes (399,195 samples, 0.56%)</title><rect x="51.1890%" y="69" width="0.5581%" height="15" fill="rgb(242,107,0)"/><text x="51.4390%" y="79.50"></text></g><g><title>lint_levels (118,542 samples, 0.17%)</title><rect x="51.5814%" y="53" width="0.1657%" height="15" fill="rgb(251,28,31)"/><text x="51.8314%" y="63.50"></text></g><g><title>explicit_predicates_of (758,838 samples, 1.06%)</title><rect x="50.7240%" y="101" width="1.0609%" height="15" fill="rgb(233,223,10)"/><text x="50.9740%" y="111.50"></text></g><g><title>predicates_of (983,570 samples, 1.38%)</title><rect x="50.4952%" y="133" width="1.3751%" height="15" fill="rgb(215,21,27)"/><text x="50.7452%" y="143.50"></text></g><g><title>predicates_defined_on (919,909 samples, 1.29%)</title><rect x="50.5842%" y="117" width="1.2861%" height="15" fill="rgb(232,23,21)"/><text x="50.8342%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (74,360 samples, 0.10%)</title><rect x="52.3435%" y="101" width="0.1040%" height="15" fill="rgb(244,5,23)"/><text x="52.5935%" y="111.50"></text></g><g><title>type_collecting (2,448,338 samples, 3.42%)</title><rect x="49.0303%" y="165" width="3.4231%" height="15" fill="rgb(226,81,46)"/><text x="49.2803%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (2,438,397 samples, 3.41%)</title><rect x="49.0442%" y="149" width="3.4092%" height="15" fill="rgb(247,70,30)"/><text x="49.2942%" y="159.50">col..</text></g><g><title>type_of (359,803 samples, 0.50%)</title><rect x="51.9503%" y="133" width="0.5030%" height="15" fill="rgb(212,68,19)"/><text x="52.2003%" y="143.50"></text></g><g><title>type_of (101,180 samples, 0.14%)</title><rect x="52.3119%" y="117" width="0.1415%" height="15" fill="rgb(240,187,13)"/><text x="52.5619%" y="127.50"></text></g><g><title>adt_sized_constraint (75,571 samples, 0.11%)</title><rect x="54.2381%" y="117" width="0.1057%" height="15" fill="rgb(223,113,26)"/><text x="54.4881%" y="127.50"></text></g><g><title>evaluate_obligation (356,225 samples, 0.50%)</title><rect x="53.8964%" y="133" width="0.4980%" height="15" fill="rgb(206,192,2)"/><text x="54.1464%" y="143.50"></text></g><g><title>implied_outlives_bounds (130,941 samples, 0.18%)</title><rect x="54.3988%" y="133" width="0.1831%" height="15" fill="rgb(241,108,4)"/><text x="54.6488%" y="143.50"></text></g><g><title>param_env (156,253 samples, 0.22%)</title><rect x="54.5819%" y="133" width="0.2185%" height="15" fill="rgb(247,173,49)"/><text x="54.8319%" y="143.50"></text></g><g><title>region_scope_tree (100,611 samples, 0.14%)</title><rect x="54.8679%" y="133" width="0.1407%" height="15" fill="rgb(224,114,35)"/><text x="55.1179%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,720,638 samples, 2.41%)</title><rect x="52.6214%" y="149" width="2.4057%" height="15" fill="rgb(245,159,27)"/><text x="52.8714%" y="159.50">ch..</text></g><g><title>adt_def (184,342 samples, 0.26%)</title><rect x="57.5115%" y="101" width="0.2577%" height="15" fill="rgb(245,172,44)"/><text x="57.7615%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (182,822 samples, 0.26%)</title><rect x="57.5136%" y="85" width="0.2556%" height="15" fill="rgb(236,23,11)"/><text x="57.7636%" y="95.50"></text></g><g><title>item_attrs (168,602 samples, 0.24%)</title><rect x="57.5335%" y="69" width="0.2357%" height="15" fill="rgb(205,117,38)"/><text x="57.7835%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (167,282 samples, 0.23%)</title><rect x="57.5354%" y="53" width="0.2339%" height="15" fill="rgb(237,72,25)"/><text x="57.7854%" y="63.50"></text></g><g><title>adt_sized_constraint (194,393 samples, 0.27%)</title><rect x="57.5007%" y="117" width="0.2718%" height="15" fill="rgb(244,70,9)"/><text x="57.7507%" y="127.50"></text></g><g><title>evaluate_obligation (531,288 samples, 0.74%)</title><rect x="57.0558%" y="133" width="0.7428%" height="15" fill="rgb(217,125,39)"/><text x="57.3058%" y="143.50"></text></g><g><title>implied_outlives_bounds (160,221 samples, 0.22%)</title><rect x="57.8226%" y="133" width="0.2240%" height="15" fill="rgb(235,36,10)"/><text x="58.0726%" y="143.50"></text></g><g><title>param_env (301,132 samples, 0.42%)</title><rect x="58.0466%" y="133" width="0.4210%" height="15" fill="rgb(251,123,47)"/><text x="58.2966%" y="143.50"></text></g><g><title>predicates_of (130,091 samples, 0.18%)</title><rect x="58.4676%" y="133" width="0.1819%" height="15" fill="rgb(221,13,13)"/><text x="58.7176%" y="143.50"></text></g><g><title>predicates_defined_on (90,331 samples, 0.13%)</title><rect x="58.5232%" y="117" width="0.1263%" height="15" fill="rgb(238,131,9)"/><text x="58.7732%" y="127.50"></text></g><g><title>check_item_well_formed (2,691,082 samples, 3.76%)</title><rect x="55.0271%" y="149" width="3.7625%" height="15" fill="rgb(211,50,8)"/><text x="55.2771%" y="159.50">chec..</text></g><g><title>analysis (41,455,302 samples, 57.96%)</title><rect x="0.9554%" y="197" width="57.9595%" height="15" fill="rgb(245,182,24)"/><text x="1.2054%" y="207.50">analysis</text></g><g><title>type_check_crate (28,855,852 samples, 40.34%)</title><rect x="18.5710%" y="181" width="40.3439%" height="15" fill="rgb(242,14,37)"/><text x="18.8210%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,619,002 samples, 6.46%)</title><rect x="52.4570%" y="165" width="6.4579%" height="15" fill="rgb(246,228,12)"/><text x="52.7070%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (89,671 samples, 0.13%)</title><rect x="58.7895%" y="149" width="0.1254%" height="15" fill="rgb(213,55,15)"/><text x="59.0395%" y="159.50"></text></g><g><title>codegen_crate (340,314 samples, 0.48%)</title><rect x="58.9290%" y="197" width="0.4758%" height="15" fill="rgb(209,9,3)"/><text x="59.1790%" y="207.50"></text></g><g><title>AST_validation (152,091 samples, 0.21%)</title><rect x="59.6590%" y="181" width="0.2126%" height="15" fill="rgb(230,59,30)"/><text x="59.9090%" y="191.50"></text></g><g><title>metadata_load_macro (115,032 samples, 0.16%)</title><rect x="74.9587%" y="149" width="0.1608%" height="15" fill="rgb(209,121,21)"/><text x="75.2087%" y="159.50"></text></g><g><title>macro_expand_crate (13,470,830 samples, 18.83%)</title><rect x="60.0551%" y="181" width="18.8338%" height="15" fill="rgb(220,109,13)"/><text x="60.3051%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,457,180 samples, 18.81%)</title><rect x="60.0742%" y="165" width="18.8148%" height="15" fill="rgb(232,18,1)"/><text x="60.3242%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,696,030 samples, 3.77%)</title><rect x="75.1196%" y="149" width="3.7694%" height="15" fill="rgb(215,41,42)"/><text x="75.3696%" y="159.50">meta..</text></g><g><title>metadata_register_crate (963,262 samples, 1.35%)</title><rect x="77.5422%" y="133" width="1.3468%" height="15" fill="rgb(224,123,36)"/><text x="77.7922%" y="143.50"></text></g><g><title>metadata_register_crate (76,941 samples, 0.11%)</title><rect x="78.7814%" y="117" width="0.1076%" height="15" fill="rgb(240,125,3)"/><text x="79.0314%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (204,172 samples, 0.29%)</title><rect x="78.8956%" y="181" width="0.2855%" height="15" fill="rgb(205,98,50)"/><text x="79.1456%" y="191.50"></text></g><g><title>finalize_macro_resolutions (201,172 samples, 0.28%)</title><rect x="79.2571%" y="165" width="0.2813%" height="15" fill="rgb(205,185,37)"/><text x="79.5071%" y="175.50"></text></g><g><title>late_resolve_crate (3,769,813 samples, 5.27%)</title><rect x="79.5384%" y="165" width="5.2707%" height="15" fill="rgb(238,207,15)"/><text x="79.7884%" y="175.50">late_r..</text></g><g><title>configure_and_expand (18,270,453 samples, 25.54%)</title><rect x="59.4048%" y="197" width="25.5443%" height="15" fill="rgb(213,199,42)"/><text x="59.6548%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,125,556 samples, 5.77%)</title><rect x="79.1811%" y="181" width="5.7680%" height="15" fill="rgb(235,201,11)"/><text x="79.4311%" y="191.50">resolve..</text></g><g><title>drop_ast (148,881 samples, 0.21%)</title><rect x="84.9491%" y="197" width="0.2082%" height="15" fill="rgb(207,46,11)"/><text x="85.1991%" y="207.50"></text></g><g><title>early_lint_checks (355,074 samples, 0.50%)</title><rect x="85.1821%" y="197" width="0.4964%" height="15" fill="rgb(241,35,35)"/><text x="85.4321%" y="207.50"></text></g><g><title>free_global_ctxt (2,935,983 samples, 4.10%)</title><rect x="85.6785%" y="197" width="4.1049%" height="15" fill="rgb(243,32,47)"/><text x="85.9285%" y="207.50">free..</text></g><g><title>generate_crate_metadata (813,599 samples, 1.14%)</title><rect x="89.7834%" y="197" width="1.1375%" height="15" fill="rgb(247,202,23)"/><text x="90.0334%" y="207.50"></text></g><g><title>hir_lowering (2,630,380 samples, 3.68%)</title><rect x="90.9209%" y="197" width="3.6776%" height="15" fill="rgb(219,102,11)"/><text x="91.1709%" y="207.50">hir_..</text></g><g><title>parse_crate (2,325,906 samples, 3.25%)</title><rect x="94.6530%" y="197" width="3.2519%" height="15" fill="rgb(243,110,44)"/><text x="94.9030%" y="207.50">par..</text></g><g><title>prepare_outputs (317,334 samples, 0.44%)</title><rect x="97.9147%" y="197" width="0.4437%" height="15" fill="rgb(222,74,54)"/><text x="98.1647%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (750,488 samples, 1.05%)</title><rect x="98.3584%" y="197" width="1.0493%" height="15" fill="rgb(216,99,12)"/><text x="98.6084%" y="207.50"></text></g><g><title>setup_global_ctxt (107,981 samples, 0.15%)</title><rect x="99.4196%" y="197" width="0.1510%" height="15" fill="rgb(226,22,26)"/><text x="99.6696%" y="207.50"></text></g><g><title>all (71,524,616 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (71,524,616 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (307,164 samples, 0.43%)</title><rect x="99.5705%" y="197" width="0.4295%" height="15" fill="rgb(252,105,26)"/><text x="99.8205%" y="207.50"></text></g></svg></svg>