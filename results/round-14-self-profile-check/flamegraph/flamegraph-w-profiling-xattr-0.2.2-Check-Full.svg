<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (248,743 samples, 0.32%)</title><rect x="10.1943%" y="133" width="0.3174%" height="15" fill="rgb(227,0,7)"/><text x="10.4443%" y="143.50"></text></g><g><title>item_attrs (268,673 samples, 0.34%)</title><rect x="10.9673%" y="101" width="0.3428%" height="15" fill="rgb(217,0,24)"/><text x="11.2173%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (259,713 samples, 0.33%)</title><rect x="10.9788%" y="85" width="0.3314%" height="15" fill="rgb(221,193,54)"/><text x="11.2288%" y="95.50"></text></g><g><title>codegen_fn_attrs (369,574 samples, 0.47%)</title><rect x="10.8612%" y="117" width="0.4715%" height="15" fill="rgb(248,212,6)"/><text x="11.1112%" y="127.50"></text></g><g><title>is_copy_raw (115,522 samples, 0.15%)</title><rect x="13.5238%" y="69" width="0.1474%" height="15" fill="rgb(208,68,35)"/><text x="13.7738%" y="79.50"></text></g><g><title>evaluate_obligation (87,771 samples, 0.11%)</title><rect x="13.5592%" y="53" width="0.1120%" height="15" fill="rgb(232,128,0)"/><text x="13.8092%" y="63.50"></text></g><g><title>param_env (79,711 samples, 0.10%)</title><rect x="13.6712%" y="69" width="0.1017%" height="15" fill="rgb(207,160,47)"/><text x="13.9212%" y="79.50"></text></g><g><title>adt_drop_tys (237,734 samples, 0.30%)</title><rect x="13.4711%" y="85" width="0.3033%" height="15" fill="rgb(228,23,34)"/><text x="13.7211%" y="95.50"></text></g><g><title>needs_drop_raw (819,563 samples, 1.05%)</title><rect x="13.3975%" y="101" width="1.0456%" height="15" fill="rgb(218,30,26)"/><text x="13.6475%" y="111.50"></text></g><g><title>is_copy_raw (524,105 samples, 0.67%)</title><rect x="13.7744%" y="85" width="0.6687%" height="15" fill="rgb(220,122,19)"/><text x="14.0244%" y="95.50"></text></g><g><title>evaluate_obligation (448,235 samples, 0.57%)</title><rect x="13.8712%" y="69" width="0.5719%" height="15" fill="rgb(250,228,42)"/><text x="14.1212%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (119,460 samples, 0.15%)</title><rect x="14.6128%" y="85" width="0.1524%" height="15" fill="rgb(240,193,28)"/><text x="14.8628%" y="95.50"></text></g><g><title>impl_parent (217,582 samples, 0.28%)</title><rect x="15.3132%" y="69" width="0.2776%" height="15" fill="rgb(216,20,37)"/><text x="15.5632%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (117,881 samples, 0.15%)</title><rect x="15.4404%" y="53" width="0.1504%" height="15" fill="rgb(206,188,39)"/><text x="15.6904%" y="63.50"></text></g><g><title>specialization_graph_of (1,077,182 samples, 1.37%)</title><rect x="14.8063%" y="85" width="1.3743%" height="15" fill="rgb(217,207,13)"/><text x="15.0563%" y="95.50"></text></g><g><title>impl_trait_ref (462,315 samples, 0.59%)</title><rect x="15.5908%" y="69" width="0.5898%" height="15" fill="rgb(231,73,38)"/><text x="15.8408%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (372,225 samples, 0.47%)</title><rect x="15.7057%" y="53" width="0.4749%" height="15" fill="rgb(225,20,46)"/><text x="15.9557%" y="63.50"></text></g><g><title>resolve_instance (1,418,033 samples, 1.81%)</title><rect x="14.4431%" y="101" width="1.8092%" height="15" fill="rgb(210,31,41)"/><text x="14.6931%" y="111.50">r..</text></g><g><title>thir_body (593,924 samples, 0.76%)</title><rect x="16.2783%" y="101" width="0.7578%" height="15" fill="rgb(221,200,47)"/><text x="16.5283%" y="111.50"></text></g><g><title>mir_const (5,900,645 samples, 7.53%)</title><rect x="9.5237%" y="149" width="7.5283%" height="15" fill="rgb(226,26,5)"/><text x="9.7737%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (5,126,267 samples, 6.54%)</title><rect x="10.5117%" y="133" width="6.5403%" height="15" fill="rgb(249,33,26)"/><text x="10.7617%" y="143.50">unsafety_..</text></g><g><title>mir_built (4,482,786 samples, 5.72%)</title><rect x="11.3327%" y="117" width="5.7193%" height="15" fill="rgb(235,183,28)"/><text x="11.5827%" y="127.50">mir_bui..</text></g><g><title>mir_promoted (6,465,093 samples, 8.25%)</title><rect x="8.8685%" y="165" width="8.2484%" height="15" fill="rgb(221,5,38)"/><text x="9.1185%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (253,233 samples, 0.32%)</title><rect x="17.1169%" y="165" width="0.3231%" height="15" fill="rgb(247,18,42)"/><text x="17.3669%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (161,121 samples, 0.21%)</title><rect x="17.4400%" y="165" width="0.2056%" height="15" fill="rgb(241,131,45)"/><text x="17.6900%" y="175.50"></text></g><g><title>normalize_projection_ty (104,421 samples, 0.13%)</title><rect x="17.5123%" y="149" width="0.1332%" height="15" fill="rgb(249,31,29)"/><text x="17.7623%" y="159.50"></text></g><g><title>type_op_normalize_predicate (101,491 samples, 0.13%)</title><rect x="17.6456%" y="165" width="0.1295%" height="15" fill="rgb(225,111,53)"/><text x="17.8956%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,144,190 samples, 1.46%)</title><rect x="17.7751%" y="165" width="1.4598%" height="15" fill="rgb(238,160,17)"/><text x="18.0251%" y="175.50"></text></g><g><title>evaluate_obligation (99,400 samples, 0.13%)</title><rect x="19.1080%" y="149" width="0.1268%" height="15" fill="rgb(214,148,48)"/><text x="19.3580%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,302,442 samples, 18.25%)</title><rect x="1.0030%" y="197" width="18.2476%" height="15" fill="rgb(232,36,49)"/><text x="1.2530%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,237,071 samples, 18.16%)</title><rect x="1.0864%" y="181" width="18.1642%" height="15" fill="rgb(209,103,24)"/><text x="1.3364%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (123,611 samples, 0.16%)</title><rect x="19.3491%" y="197" width="0.1577%" height="15" fill="rgb(229,88,8)"/><text x="19.5991%" y="207.50"></text></g><g><title>codegen_fn_attrs (91,732 samples, 0.12%)</title><rect x="19.9455%" y="133" width="0.1170%" height="15" fill="rgb(213,181,19)"/><text x="20.1955%" y="143.50"></text></g><g><title>should_inherit_track_caller (152,672 samples, 0.19%)</title><rect x="19.8747%" y="149" width="0.1948%" height="15" fill="rgb(254,191,54)"/><text x="20.1247%" y="159.50"></text></g><g><title>codegen_fn_attrs (296,224 samples, 0.38%)</title><rect x="19.7170%" y="165" width="0.3779%" height="15" fill="rgb(241,83,37)"/><text x="19.9670%" y="175.50"></text></g><g><title>check_mod_attrs (435,164 samples, 0.56%)</title><rect x="19.5399%" y="181" width="0.5552%" height="15" fill="rgb(233,36,39)"/><text x="19.7899%" y="191.50"></text></g><g><title>check_mod_const_bodies (79,002 samples, 0.10%)</title><rect x="20.0951%" y="181" width="0.1008%" height="15" fill="rgb(226,3,54)"/><text x="20.3451%" y="191.50"></text></g><g><title>lint_levels (97,091 samples, 0.12%)</title><rect x="20.4164%" y="165" width="0.1239%" height="15" fill="rgb(245,192,40)"/><text x="20.6664%" y="175.50"></text></g><g><title>lookup_deprecation_entry (110,431 samples, 0.14%)</title><rect x="20.5402%" y="165" width="0.1409%" height="15" fill="rgb(238,167,29)"/><text x="20.7902%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (406,922 samples, 0.52%)</title><rect x="20.2578%" y="181" width="0.5192%" height="15" fill="rgb(232,182,51)"/><text x="20.5078%" y="191.50"></text></g><g><title>misc_checking_1 (1,055,972 samples, 1.35%)</title><rect x="19.5073%" y="197" width="1.3473%" height="15" fill="rgb(231,60,39)"/><text x="19.7573%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (323,563 samples, 0.41%)</title><rect x="20.8568%" y="181" width="0.4128%" height="15" fill="rgb(208,69,12)"/><text x="21.1068%" y="191.50"></text></g><g><title>check_mod_liveness (263,943 samples, 0.34%)</title><rect x="20.9329%" y="165" width="0.3367%" height="15" fill="rgb(235,93,37)"/><text x="21.1829%" y="175.50"></text></g><g><title>mir_borrowck (367,595 samples, 0.47%)</title><rect x="21.9536%" y="69" width="0.4690%" height="15" fill="rgb(213,116,39)"/><text x="22.2036%" y="79.50"></text></g><g><title>mir_for_ctfe (493,926 samples, 0.63%)</title><rect x="21.7929%" y="101" width="0.6302%" height="15" fill="rgb(222,207,29)"/><text x="22.0429%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (454,375 samples, 0.58%)</title><rect x="21.8434%" y="85" width="0.5797%" height="15" fill="rgb(206,96,30)"/><text x="22.0934%" y="95.50"></text></g><g><title>eval_to_const_value_raw (662,577 samples, 0.85%)</title><rect x="21.6879%" y="149" width="0.8453%" height="15" fill="rgb(218,138,4)"/><text x="21.9379%" y="159.50"></text></g><g><title>eval_to_const_value_raw (660,627 samples, 0.84%)</title><rect x="21.6903%" y="133" width="0.8429%" height="15" fill="rgb(250,191,14)"/><text x="21.9403%" y="143.50"></text></g><g><title>eval_to_allocation_raw (658,687 samples, 0.84%)</title><rect x="21.6928%" y="117" width="0.8404%" height="15" fill="rgb(239,60,40)"/><text x="21.9428%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (86,291 samples, 0.11%)</title><rect x="22.4231%" y="101" width="0.1101%" height="15" fill="rgb(206,27,48)"/><text x="22.6731%" y="111.50"></text></g><g><title>mir_const_qualif (158,972 samples, 0.20%)</title><rect x="22.5332%" y="149" width="0.2028%" height="15" fill="rgb(225,35,8)"/><text x="22.7832%" y="159.50"></text></g><g><title>mir_const (126,051 samples, 0.16%)</title><rect x="22.5752%" y="133" width="0.1608%" height="15" fill="rgb(250,213,24)"/><text x="22.8252%" y="143.50"></text></g><g><title>misc_checking_2 (1,523,357 samples, 1.94%)</title><rect x="20.8545%" y="197" width="1.9436%" height="15" fill="rgb(247,123,22)"/><text x="21.1045%" y="207.50">m..</text></g><g><title>match_checking (1,198,014 samples, 1.53%)</title><rect x="21.2696%" y="181" width="1.5285%" height="15" fill="rgb(231,138,38)"/><text x="21.5196%" y="191.50"></text></g><g><title>check_match (1,177,354 samples, 1.50%)</title><rect x="21.2960%" y="165" width="1.5021%" height="15" fill="rgb(231,145,46)"/><text x="21.5460%" y="175.50"></text></g><g><title>check_private_in_public (121,172 samples, 0.15%)</title><rect x="22.8104%" y="181" width="0.1546%" height="15" fill="rgb(251,118,11)"/><text x="23.0604%" y="191.50"></text></g><g><title>death_checking (288,513 samples, 0.37%)</title><rect x="22.9650%" y="181" width="0.3681%" height="15" fill="rgb(217,147,25)"/><text x="23.2150%" y="191.50"></text></g><g><title>param_env (277,663 samples, 0.35%)</title><rect x="24.1888%" y="149" width="0.3543%" height="15" fill="rgb(247,81,37)"/><text x="24.4388%" y="159.50"></text></g><g><title>predicates_of (126,991 samples, 0.16%)</title><rect x="24.3810%" y="133" width="0.1620%" height="15" fill="rgb(209,12,38)"/><text x="24.6310%" y="143.50"></text></g><g><title>predicates_defined_on (103,981 samples, 0.13%)</title><rect x="24.4103%" y="117" width="0.1327%" height="15" fill="rgb(227,1,9)"/><text x="24.6603%" y="127.50"></text></g><g><title>crate_lints (2,032,913 samples, 2.59%)</title><rect x="23.3351%" y="165" width="2.5937%" height="15" fill="rgb(248,47,43)"/><text x="23.5851%" y="175.50">cr..</text></g><g><title>type_of (1,061,180 samples, 1.35%)</title><rect x="24.5748%" y="149" width="1.3539%" height="15" fill="rgb(221,10,30)"/><text x="24.8248%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (831,588 samples, 1.06%)</title><rect x="24.8678%" y="133" width="1.0610%" height="15" fill="rgb(210,229,1)"/><text x="25.1178%" y="143.50"></text></g><g><title>lint_checking (2,304,546 samples, 2.94%)</title><rect x="23.3331%" y="181" width="2.9402%" height="15" fill="rgb(222,148,37)"/><text x="23.5831%" y="191.50">li..</text></g><g><title>module_lints (270,103 samples, 0.34%)</title><rect x="25.9287%" y="165" width="0.3446%" height="15" fill="rgb(234,67,33)"/><text x="26.1787%" y="175.50"></text></g><g><title>lint_mod (264,663 samples, 0.34%)</title><rect x="25.9357%" y="149" width="0.3377%" height="15" fill="rgb(247,98,35)"/><text x="26.1857%" y="159.50"></text></g><g><title>privacy_access_levels (135,501 samples, 0.17%)</title><rect x="26.2733%" y="181" width="0.1729%" height="15" fill="rgb(247,138,52)"/><text x="26.5233%" y="191.50"></text></g><g><title>privacy_checking_modules (505,986 samples, 0.65%)</title><rect x="26.4462%" y="181" width="0.6456%" height="15" fill="rgb(213,79,30)"/><text x="26.6962%" y="191.50"></text></g><g><title>check_mod_privacy (501,676 samples, 0.64%)</title><rect x="26.4517%" y="165" width="0.6401%" height="15" fill="rgb(246,177,23)"/><text x="26.7017%" y="175.50"></text></g><g><title>misc_checking_3 (3,383,838 samples, 4.32%)</title><rect x="22.7981%" y="197" width="4.3172%" height="15" fill="rgb(230,62,27)"/><text x="23.0481%" y="207.50">misc_..</text></g><g><title>impl_trait_ref (147,573 samples, 0.19%)</title><rect x="27.4195%" y="101" width="0.1883%" height="15" fill="rgb(216,154,8)"/><text x="27.6695%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (129,103 samples, 0.16%)</title><rect x="27.4431%" y="85" width="0.1647%" height="15" fill="rgb(244,35,45)"/><text x="27.6931%" y="95.50"></text></g><g><title>adt_destructor (306,173 samples, 0.39%)</title><rect x="27.2477%" y="149" width="0.3906%" height="15" fill="rgb(251,115,12)"/><text x="27.4977%" y="159.50"></text></g><g><title>coherent_trait (294,233 samples, 0.38%)</title><rect x="27.2629%" y="133" width="0.3754%" height="15" fill="rgb(240,54,50)"/><text x="27.5129%" y="143.50"></text></g><g><title>specialization_graph_of (293,253 samples, 0.37%)</title><rect x="27.2642%" y="117" width="0.3741%" height="15" fill="rgb(233,84,52)"/><text x="27.5142%" y="127.50"></text></g><g><title>param_env (99,772 samples, 0.13%)</title><rect x="27.6383%" y="149" width="0.1273%" height="15" fill="rgb(207,117,47)"/><text x="27.8883%" y="159.50"></text></g><g><title>impl_parent (2,116,216 samples, 2.70%)</title><rect x="31.5763%" y="133" width="2.7000%" height="15" fill="rgb(249,43,39)"/><text x="31.8263%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,135,575 samples, 1.45%)</title><rect x="32.8274%" y="117" width="1.4488%" height="15" fill="rgb(209,38,44)"/><text x="33.0774%" y="127.50"></text></g><g><title>impl_trait_ref (4,506,659 samples, 5.75%)</title><rect x="34.2762%" y="133" width="5.7498%" height="15" fill="rgb(236,212,23)"/><text x="34.5262%" y="143.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,750,599 samples, 4.79%)</title><rect x="35.2408%" y="117" width="4.7852%" height="15" fill="rgb(242,79,21)"/><text x="35.4908%" y="127.50">metada..</text></g><g><title>coherent_trait (10,661,520 samples, 13.60%)</title><rect x="27.2119%" y="165" width="13.6024%" height="15" fill="rgb(211,96,35)"/><text x="27.4619%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (10,227,505 samples, 13.05%)</title><rect x="27.7656%" y="149" width="13.0487%" height="15" fill="rgb(253,215,40)"/><text x="28.0156%" y="159.50">specialization_graph..</text></g><g><title>trait_impls_of (616,257 samples, 0.79%)</title><rect x="40.0280%" y="133" width="0.7862%" height="15" fill="rgb(211,81,21)"/><text x="40.2780%" y="143.50"></text></g><g><title>implementations_of_trait (145,623 samples, 0.19%)</title><rect x="40.6285%" y="117" width="0.1858%" height="15" fill="rgb(208,190,38)"/><text x="40.8785%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (121,373 samples, 0.15%)</title><rect x="40.6594%" y="101" width="0.1549%" height="15" fill="rgb(235,213,38)"/><text x="40.9094%" y="111.50"></text></g><g><title>coherence_checking (10,720,601 samples, 13.68%)</title><rect x="27.1847%" y="181" width="13.6778%" height="15" fill="rgb(237,122,38)"/><text x="27.4347%" y="191.50">coherence_checking</text></g><g><title>associated_item (364,285 samples, 0.46%)</title><rect x="51.4015%" y="117" width="0.4648%" height="15" fill="rgb(244,218,35)"/><text x="51.6515%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (298,185 samples, 0.38%)</title><rect x="51.4859%" y="101" width="0.3804%" height="15" fill="rgb(240,68,47)"/><text x="51.7359%" y="111.50"></text></g><g><title>associated_items (504,087 samples, 0.64%)</title><rect x="51.2666%" y="133" width="0.6431%" height="15" fill="rgb(210,16,53)"/><text x="51.5166%" y="143.50"></text></g><g><title>adt_dtorck_constraint (110,662 samples, 0.14%)</title><rect x="52.2435%" y="85" width="0.1412%" height="15" fill="rgb(235,124,12)"/><text x="52.4935%" y="95.50"></text></g><g><title>adt_dtorck_constraint (153,763 samples, 0.20%)</title><rect x="52.1966%" y="101" width="0.1962%" height="15" fill="rgb(224,169,11)"/><text x="52.4466%" y="111.50"></text></g><g><title>dropck_outlives (360,663 samples, 0.46%)</title><rect x="51.9590%" y="133" width="0.4601%" height="15" fill="rgb(250,166,2)"/><text x="52.2090%" y="143.50"></text></g><g><title>adt_dtorck_constraint (226,513 samples, 0.29%)</title><rect x="52.1301%" y="117" width="0.2890%" height="15" fill="rgb(242,216,29)"/><text x="52.3801%" y="127.50"></text></g><g><title>predicates_of (122,991 samples, 0.16%)</title><rect x="53.5578%" y="117" width="0.1569%" height="15" fill="rgb(230,116,27)"/><text x="53.8078%" y="127.50"></text></g><g><title>predicates_defined_on (86,730 samples, 0.11%)</title><rect x="53.6041%" y="101" width="0.1107%" height="15" fill="rgb(228,99,48)"/><text x="53.8541%" y="111.50"></text></g><g><title>trait_impls_of (263,423 samples, 0.34%)</title><rect x="53.8187%" y="117" width="0.3361%" height="15" fill="rgb(253,11,6)"/><text x="54.0687%" y="127.50"></text></g><g><title>implementations_of_trait (99,771 samples, 0.13%)</title><rect x="54.0275%" y="101" width="0.1273%" height="15" fill="rgb(247,143,39)"/><text x="54.2775%" y="111.50"></text></g><g><title>evaluate_obligation (1,361,896 samples, 1.74%)</title><rect x="52.4191%" y="133" width="1.7376%" height="15" fill="rgb(236,97,10)"/><text x="52.6691%" y="143.50"></text></g><g><title>fn_sig (85,260 samples, 0.11%)</title><rect x="54.1753%" y="133" width="0.1088%" height="15" fill="rgb(233,208,19)"/><text x="54.4253%" y="143.50"></text></g><g><title>generics_of (86,334 samples, 0.11%)</title><rect x="54.2840%" y="133" width="0.1101%" height="15" fill="rgb(216,164,2)"/><text x="54.5340%" y="143.50"></text></g><g><title>item_attrs (103,241 samples, 0.13%)</title><rect x="54.5391%" y="133" width="0.1317%" height="15" fill="rgb(220,129,5)"/><text x="54.7891%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,201 samples, 0.13%)</title><rect x="54.5455%" y="117" width="0.1253%" height="15" fill="rgb(242,17,10)"/><text x="54.7955%" y="127.50"></text></g><g><title>lookup_deprecation_entry (222,322 samples, 0.28%)</title><rect x="54.6906%" y="133" width="0.2836%" height="15" fill="rgb(242,107,0)"/><text x="54.9406%" y="143.50"></text></g><g><title>evaluate_obligation (135,222 samples, 0.17%)</title><rect x="55.1435%" y="117" width="0.1725%" height="15" fill="rgb(251,28,31)"/><text x="55.3935%" y="127.50"></text></g><g><title>method_autoderef_steps (248,223 samples, 0.32%)</title><rect x="55.0107%" y="133" width="0.3167%" height="15" fill="rgb(233,223,10)"/><text x="55.2607%" y="143.50"></text></g><g><title>explicit_predicates_of (89,601 samples, 0.11%)</title><rect x="55.5412%" y="101" width="0.1143%" height="15" fill="rgb(215,21,27)"/><text x="55.7912%" y="111.50"></text></g><g><title>predicates_of (258,383 samples, 0.33%)</title><rect x="55.3655%" y="133" width="0.3297%" height="15" fill="rgb(232,23,21)"/><text x="55.6155%" y="143.50"></text></g><g><title>predicates_defined_on (182,513 samples, 0.23%)</title><rect x="55.4623%" y="117" width="0.2329%" height="15" fill="rgb(244,5,23)"/><text x="55.7123%" y="127.50"></text></g><g><title>trait_impls_of (93,851 samples, 0.12%)</title><rect x="55.7049%" y="133" width="0.1197%" height="15" fill="rgb(226,81,46)"/><text x="55.9549%" y="143.50"></text></g><g><title>associated_item (94,781 samples, 0.12%)</title><rect x="61.1904%" y="101" width="0.1209%" height="15" fill="rgb(247,70,30)"/><text x="61.4404%" y="111.50"></text></g><g><title>associated_items (154,613 samples, 0.20%)</title><rect x="61.1258%" y="117" width="0.1973%" height="15" fill="rgb(212,68,19)"/><text x="61.3758%" y="127.50"></text></g><g><title>adt_def (84,221 samples, 0.11%)</title><rect x="61.4425%" y="85" width="0.1075%" height="15" fill="rgb(240,187,13)"/><text x="61.6925%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (83,771 samples, 0.11%)</title><rect x="61.4430%" y="69" width="0.1069%" height="15" fill="rgb(223,113,26)"/><text x="61.6930%" y="79.50"></text></g><g><title>item_attrs (79,551 samples, 0.10%)</title><rect x="61.4484%" y="53" width="0.1015%" height="15" fill="rgb(206,192,2)"/><text x="61.6984%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,131 samples, 0.10%)</title><rect x="61.4489%" y="37" width="0.1010%" height="15" fill="rgb(241,108,4)"/><text x="61.6989%" y="47.50"></text></g><g><title>dropck_outlives (153,802 samples, 0.20%)</title><rect x="61.3710%" y="117" width="0.1962%" height="15" fill="rgb(247,173,49)"/><text x="61.6210%" y="127.50"></text></g><g><title>adt_dtorck_constraint (106,402 samples, 0.14%)</title><rect x="61.4315%" y="101" width="0.1358%" height="15" fill="rgb(224,114,35)"/><text x="61.6815%" y="111.50"></text></g><g><title>adt_def (85,670 samples, 0.11%)</title><rect x="62.0422%" y="85" width="0.1093%" height="15" fill="rgb(245,159,27)"/><text x="62.2922%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (83,710 samples, 0.11%)</title><rect x="62.0447%" y="69" width="0.1068%" height="15" fill="rgb(245,172,44)"/><text x="62.2947%" y="79.50"></text></g><g><title>adt_sized_constraint (100,250 samples, 0.13%)</title><rect x="62.0317%" y="101" width="0.1279%" height="15" fill="rgb(236,23,11)"/><text x="62.2817%" y="111.50"></text></g><g><title>evaluate_obligation (725,117 samples, 0.93%)</title><rect x="61.5673%" y="117" width="0.9251%" height="15" fill="rgb(205,117,38)"/><text x="61.8173%" y="127.50"></text></g><g><title>trait_impls_of (109,551 samples, 0.14%)</title><rect x="62.3526%" y="101" width="0.1398%" height="15" fill="rgb(237,72,25)"/><text x="62.6026%" y="111.50"></text></g><g><title>is_copy_raw (275,103 samples, 0.35%)</title><rect x="62.7405%" y="117" width="0.3510%" height="15" fill="rgb(244,70,9)"/><text x="62.9905%" y="127.50"></text></g><g><title>evaluate_obligation (244,203 samples, 0.31%)</title><rect x="62.7799%" y="101" width="0.3116%" height="15" fill="rgb(217,125,39)"/><text x="63.0299%" y="111.50"></text></g><g><title>predicates_of (110,052 samples, 0.14%)</title><rect x="62.9511%" y="85" width="0.1404%" height="15" fill="rgb(235,36,10)"/><text x="63.2011%" y="95.50"></text></g><g><title>predicates_defined_on (92,932 samples, 0.12%)</title><rect x="62.9729%" y="69" width="0.1186%" height="15" fill="rgb(251,123,47)"/><text x="63.2229%" y="79.50"></text></g><g><title>predicates_of (119,191 samples, 0.15%)</title><rect x="63.2783%" y="117" width="0.1521%" height="15" fill="rgb(221,13,13)"/><text x="63.5283%" y="127.50"></text></g><g><title>predicates_defined_on (82,460 samples, 0.11%)</title><rect x="63.3251%" y="101" width="0.1052%" height="15" fill="rgb(238,131,9)"/><text x="63.5751%" y="111.50"></text></g><g><title>typeck (5,984,689 samples, 7.64%)</title><rect x="55.8804%" y="133" width="7.6355%" height="15" fill="rgb(211,50,8)"/><text x="56.1304%" y="143.50">typeck</text></g><g><title>item_bodies_checking (17,788,820 samples, 22.70%)</title><rect x="40.8849%" y="181" width="22.6957%" height="15" fill="rgb(245,182,24)"/><text x="41.1349%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,785,990 samples, 22.69%)</title><rect x="40.8885%" y="165" width="22.6921%" height="15" fill="rgb(242,14,37)"/><text x="41.1385%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (17,746,909 samples, 22.64%)</title><rect x="40.9384%" y="149" width="22.6422%" height="15" fill="rgb(246,228,12)"/><text x="41.1884%" y="159.50">typeck</text></g><g><title>item_types_checking (581,227 samples, 0.74%)</title><rect x="63.5806%" y="181" width="0.7416%" height="15" fill="rgb(213,55,15)"/><text x="63.8306%" y="191.50"></text></g><g><title>check_mod_item_types (576,087 samples, 0.73%)</title><rect x="63.5871%" y="165" width="0.7350%" height="15" fill="rgb(209,9,3)"/><text x="63.8371%" y="175.50"></text></g><g><title>typeck (123,912 samples, 0.16%)</title><rect x="64.1640%" y="149" width="0.1581%" height="15" fill="rgb(230,59,30)"/><text x="64.4140%" y="159.50"></text></g><g><title>fn_sig (276,404 samples, 0.35%)</title><rect x="64.5235%" y="149" width="0.3526%" height="15" fill="rgb(209,121,21)"/><text x="64.7735%" y="159.50"></text></g><g><title>named_region_map (163,183 samples, 0.21%)</title><rect x="64.9784%" y="133" width="0.2082%" height="15" fill="rgb(220,109,13)"/><text x="65.2284%" y="143.50"></text></g><g><title>resolve_lifetimes (151,803 samples, 0.19%)</title><rect x="64.9929%" y="117" width="0.1937%" height="15" fill="rgb(232,18,1)"/><text x="65.2429%" y="127.50"></text></g><g><title>generics_of (253,064 samples, 0.32%)</title><rect x="64.8761%" y="149" width="0.3229%" height="15" fill="rgb(215,41,42)"/><text x="65.1261%" y="159.50"></text></g><g><title>explicit_predicates_of (319,112 samples, 0.41%)</title><rect x="65.3029%" y="117" width="0.4071%" height="15" fill="rgb(224,123,36)"/><text x="65.5529%" y="127.50"></text></g><g><title>predicates_of (447,145 samples, 0.57%)</title><rect x="65.2251%" y="149" width="0.5705%" height="15" fill="rgb(240,125,3)"/><text x="65.4751%" y="159.50"></text></g><g><title>predicates_defined_on (423,555 samples, 0.54%)</title><rect x="65.2552%" y="133" width="0.5404%" height="15" fill="rgb(205,98,50)"/><text x="65.5052%" y="143.50"></text></g><g><title>type_collecting (1,236,584 samples, 1.58%)</title><rect x="64.3262%" y="181" width="1.5777%" height="15" fill="rgb(205,185,37)"/><text x="64.5762%" y="191.50"></text></g><g><title>collect_mod_item_types (1,226,704 samples, 1.57%)</title><rect x="64.3389%" y="165" width="1.5651%" height="15" fill="rgb(238,207,15)"/><text x="64.5889%" y="175.50"></text></g><g><title>evaluate_obligation (227,333 samples, 0.29%)</title><rect x="66.4175%" y="149" width="0.2900%" height="15" fill="rgb(213,199,42)"/><text x="66.6675%" y="159.50"></text></g><g><title>check_impl_item_well_formed (691,458 samples, 0.88%)</title><rect x="66.0384%" y="165" width="0.8822%" height="15" fill="rgb(235,201,11)"/><text x="66.2884%" y="175.50"></text></g><g><title>adt_def (119,571 samples, 0.15%)</title><rect x="68.2740%" y="117" width="0.1526%" height="15" fill="rgb(207,46,11)"/><text x="68.5240%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (118,301 samples, 0.15%)</title><rect x="68.2756%" y="101" width="0.1509%" height="15" fill="rgb(241,35,35)"/><text x="68.5256%" y="111.50"></text></g><g><title>item_attrs (98,681 samples, 0.13%)</title><rect x="68.3007%" y="85" width="0.1259%" height="15" fill="rgb(243,32,47)"/><text x="68.5507%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (97,041 samples, 0.12%)</title><rect x="68.3028%" y="69" width="0.1238%" height="15" fill="rgb(247,202,23)"/><text x="68.5528%" y="79.50"></text></g><g><title>adt_sized_constraint (173,312 samples, 0.22%)</title><rect x="68.2617%" y="133" width="0.2211%" height="15" fill="rgb(219,102,11)"/><text x="68.5117%" y="143.50"></text></g><g><title>evaluate_obligation (425,134 samples, 0.54%)</title><rect x="67.9755%" y="149" width="0.5424%" height="15" fill="rgb(243,110,44)"/><text x="68.2255%" y="159.50"></text></g><g><title>implied_outlives_bounds (115,385 samples, 0.15%)</title><rect x="68.5215%" y="149" width="0.1472%" height="15" fill="rgb(222,74,54)"/><text x="68.7715%" y="159.50"></text></g><g><title>param_env (158,251 samples, 0.20%)</title><rect x="68.6687%" y="149" width="0.2019%" height="15" fill="rgb(216,99,12)"/><text x="68.9187%" y="159.50"></text></g><g><title>predicates_of (86,940 samples, 0.11%)</title><rect x="68.8706%" y="149" width="0.1109%" height="15" fill="rgb(226,22,26)"/><text x="69.1206%" y="159.50"></text></g><g><title>region_scope_tree (152,335 samples, 0.19%)</title><rect x="68.9815%" y="149" width="0.1944%" height="15" fill="rgb(217,163,10)"/><text x="69.2315%" y="159.50"></text></g><g><title>check_item_well_formed (1,886,422 samples, 2.41%)</title><rect x="66.9206%" y="165" width="2.4068%" height="15" fill="rgb(213,25,53)"/><text x="67.1706%" y="175.50">ch..</text></g><g><title>analysis (54,066,199 samples, 68.98%)</title><rect x="0.7551%" y="213" width="68.9798%" height="15" fill="rgb(252,105,26)"/><text x="1.0051%" y="223.50">analysis</text></g><g><title>type_check_crate (33,405,106 samples, 42.62%)</title><rect x="27.1153%" y="197" width="42.6195%" height="15" fill="rgb(220,39,43)"/><text x="27.3653%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,999,604 samples, 3.83%)</title><rect x="65.9078%" y="181" width="3.8270%" height="15" fill="rgb(229,68,48)"/><text x="66.1578%" y="191.50">wf_c..</text></g><g><title>check_trait_item_well_formed (319,354 samples, 0.41%)</title><rect x="69.3274%" y="165" width="0.4074%" height="15" fill="rgb(252,8,32)"/><text x="69.5774%" y="175.50"></text></g><g><title>codegen_crate (336,824 samples, 0.43%)</title><rect x="69.7469%" y="213" width="0.4297%" height="15" fill="rgb(223,20,43)"/><text x="69.9969%" y="223.50"></text></g><g><title>AST_validation (89,221 samples, 0.11%)</title><rect x="70.3883%" y="197" width="0.1138%" height="15" fill="rgb(229,81,49)"/><text x="70.6383%" y="207.50"></text></g><g><title>metadata_load_macro (83,981 samples, 0.11%)</title><rect x="85.2517%" y="165" width="0.1071%" height="15" fill="rgb(236,28,36)"/><text x="85.5017%" y="175.50"></text></g><g><title>metadata_register_crate (1,433,986 samples, 1.83%)</title><rect x="85.3588%" y="165" width="1.8295%" height="15" fill="rgb(249,185,26)"/><text x="85.6088%" y="175.50">m..</text></g><g><title>metadata_register_crate (478,528 samples, 0.61%)</title><rect x="86.5778%" y="149" width="0.6105%" height="15" fill="rgb(249,174,33)"/><text x="86.8278%" y="159.50"></text></g><g><title>macro_expand_crate (13,147,328 samples, 16.77%)</title><rect x="70.6395%" y="197" width="16.7739%" height="15" fill="rgb(233,201,37)"/><text x="70.8895%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (13,133,108 samples, 16.76%)</title><rect x="70.6577%" y="181" width="16.7557%" height="15" fill="rgb(221,78,26)"/><text x="70.9077%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (176,400 samples, 0.23%)</title><rect x="87.1884%" y="165" width="0.2251%" height="15" fill="rgb(250,127,30)"/><text x="87.4384%" y="175.50"></text></g><g><title>late_resolve_crate (1,202,133 samples, 1.53%)</title><rect x="87.6758%" y="181" width="1.5337%" height="15" fill="rgb(230,49,44)"/><text x="87.9258%" y="191.50"></text></g><g><title>configure_and_expand (14,984,009 samples, 19.12%)</title><rect x="70.1766%" y="213" width="19.1172%" height="15" fill="rgb(229,67,23)"/><text x="70.4266%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,397,356 samples, 1.78%)</title><rect x="87.5110%" y="197" width="1.7828%" height="15" fill="rgb(249,83,47)"/><text x="87.7610%" y="207.50">r..</text></g><g><title>drop_ast (97,861 samples, 0.12%)</title><rect x="89.2938%" y="213" width="0.1249%" height="15" fill="rgb(215,43,3)"/><text x="89.5438%" y="223.50"></text></g><g><title>early_lint_checks (199,352 samples, 0.25%)</title><rect x="89.4381%" y="213" width="0.2543%" height="15" fill="rgb(238,154,13)"/><text x="89.6881%" y="223.50"></text></g><g><title>free_global_ctxt (3,217,367 samples, 4.10%)</title><rect x="89.6925%" y="213" width="4.1048%" height="15" fill="rgb(219,56,2)"/><text x="89.9425%" y="223.50">free..</text></g><g><title>dep_kind (231,093 samples, 0.29%)</title><rect x="94.6557%" y="197" width="0.2948%" height="15" fill="rgb(233,0,4)"/><text x="94.9057%" y="207.50"></text></g><g><title>generate_crate_metadata (987,031 samples, 1.26%)</title><rect x="93.7973%" y="213" width="1.2593%" height="15" fill="rgb(235,30,7)"/><text x="94.0473%" y="223.50"></text></g><g><title>hir_lowering (1,678,269 samples, 2.14%)</title><rect x="95.0566%" y="213" width="2.1412%" height="15" fill="rgb(250,79,13)"/><text x="95.3066%" y="223.50">h..</text></g><g><title>parse_crate (854,519 samples, 1.09%)</title><rect x="97.2623%" y="213" width="1.0902%" height="15" fill="rgb(211,146,34)"/><text x="97.5123%" y="223.50"></text></g><g><title>prepare_outputs (174,072 samples, 0.22%)</title><rect x="98.3626%" y="213" width="0.2221%" height="15" fill="rgb(228,22,38)"/><text x="98.6126%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (744,018 samples, 0.95%)</title><rect x="98.5847%" y="213" width="0.9492%" height="15" fill="rgb(235,168,5)"/><text x="98.8347%" y="223.50"></text></g><g><title>setup_global_ctxt (83,590 samples, 0.11%)</title><rect x="99.5479%" y="213" width="0.1066%" height="15" fill="rgb(221,155,16)"/><text x="99.7979%" y="223.50"></text></g><g><title>all (78,379,793 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (78,379,793 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (270,763 samples, 0.35%)</title><rect x="99.6545%" y="213" width="0.3455%" height="15" fill="rgb(234,103,6)"/><text x="99.9045%" y="223.50"></text></g></svg></svg>