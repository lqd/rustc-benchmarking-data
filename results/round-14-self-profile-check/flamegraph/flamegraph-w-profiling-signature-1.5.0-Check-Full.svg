<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (67,721 samples, 0.12%)</title><rect x="7.1743%" y="117" width="0.1163%" height="15" fill="rgb(227,0,7)"/><text x="7.4243%" y="127.50"></text></g><g><title>codegen_fn_attrs (84,611 samples, 0.15%)</title><rect x="7.4976%" y="101" width="0.1453%" height="15" fill="rgb(217,0,24)"/><text x="7.7476%" y="111.50"></text></g><g><title>adt_drop_tys (80,860 samples, 0.14%)</title><rect x="8.6409%" y="69" width="0.1389%" height="15" fill="rgb(221,193,54)"/><text x="8.8909%" y="79.50"></text></g><g><title>predicates_of (61,331 samples, 0.11%)</title><rect x="9.2616%" y="37" width="0.1054%" height="15" fill="rgb(248,212,6)"/><text x="9.5116%" y="47.50"></text></g><g><title>needs_drop_raw (455,307 samples, 0.78%)</title><rect x="8.5890%" y="85" width="0.7821%" height="15" fill="rgb(208,68,35)"/><text x="8.8390%" y="95.50"></text></g><g><title>is_copy_raw (344,246 samples, 0.59%)</title><rect x="8.7798%" y="69" width="0.5914%" height="15" fill="rgb(232,128,0)"/><text x="9.0298%" y="79.50"></text></g><g><title>evaluate_obligation (306,486 samples, 0.53%)</title><rect x="8.8446%" y="53" width="0.5265%" height="15" fill="rgb(207,160,47)"/><text x="9.0946%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (114,122 samples, 0.20%)</title><rect x="9.4833%" y="69" width="0.1960%" height="15" fill="rgb(228,23,34)"/><text x="9.7333%" y="79.50"></text></g><g><title>resolve_instance (255,752 samples, 0.44%)</title><rect x="9.3711%" y="85" width="0.4393%" height="15" fill="rgb(218,30,26)"/><text x="9.6211%" y="95.50"></text></g><g><title>thir_body (186,031 samples, 0.32%)</title><rect x="9.8209%" y="85" width="0.3196%" height="15" fill="rgb(220,122,19)"/><text x="10.0709%" y="95.50"></text></g><g><title>mir_const (1,959,311 samples, 3.37%)</title><rect x="6.7832%" y="133" width="3.3658%" height="15" fill="rgb(250,228,42)"/><text x="7.0332%" y="143.50">mir..</text></g><g><title>unsafety_check_result (1,663,899 samples, 2.86%)</title><rect x="7.2907%" y="117" width="2.8583%" height="15" fill="rgb(240,193,28)"/><text x="7.5407%" y="127.50">un..</text></g><g><title>mir_built (1,458,827 samples, 2.51%)</title><rect x="7.6429%" y="101" width="2.5060%" height="15" fill="rgb(216,20,37)"/><text x="7.8929%" y="111.50">mi..</text></g><g><title>mir_promoted (2,194,314 samples, 3.77%)</title><rect x="6.4001%" y="149" width="3.7695%" height="15" fill="rgb(206,188,39)"/><text x="6.6501%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (143,162 samples, 0.25%)</title><rect x="10.1696%" y="149" width="0.2459%" height="15" fill="rgb(217,207,13)"/><text x="10.4196%" y="159.50"></text></g><g><title>type_op_prove_predicate (689,640 samples, 1.18%)</title><rect x="10.5289%" y="149" width="1.1847%" height="15" fill="rgb(231,73,38)"/><text x="10.7789%" y="159.50"></text></g><g><title>MIR_borrow_checking (5,785,224 samples, 9.94%)</title><rect x="1.7903%" y="181" width="9.9381%" height="15" fill="rgb(225,20,46)"/><text x="2.0403%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (5,763,083 samples, 9.90%)</title><rect x="1.8283%" y="165" width="9.9001%" height="15" fill="rgb(210,31,41)"/><text x="2.0783%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (184,152 samples, 0.32%)</title><rect x="11.7397%" y="181" width="0.3163%" height="15" fill="rgb(221,200,47)"/><text x="11.9897%" y="191.50"></text></g><g><title>get_lang_items (89,761 samples, 0.15%)</title><rect x="12.7672%" y="101" width="0.1542%" height="15" fill="rgb(226,26,5)"/><text x="13.0172%" y="111.50"></text></g><g><title>item_attrs (80,811 samples, 0.14%)</title><rect x="12.9214%" y="101" width="0.1388%" height="15" fill="rgb(249,33,26)"/><text x="13.1714%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (77,031 samples, 0.13%)</title><rect x="12.9279%" y="85" width="0.1323%" height="15" fill="rgb(235,183,28)"/><text x="13.1779%" y="95.50"></text></g><g><title>codegen_fn_attrs (270,783 samples, 0.47%)</title><rect x="12.7122%" y="117" width="0.4652%" height="15" fill="rgb(221,5,38)"/><text x="12.9622%" y="127.50"></text></g><g><title>codegen_fn_attrs (414,795 samples, 0.71%)</title><rect x="12.4738%" y="149" width="0.7126%" height="15" fill="rgb(247,18,42)"/><text x="12.7238%" y="159.50"></text></g><g><title>should_inherit_track_caller (360,114 samples, 0.62%)</title><rect x="12.5677%" y="133" width="0.6186%" height="15" fill="rgb(241,131,45)"/><text x="12.8177%" y="143.50"></text></g><g><title>check_mod_attrs (613,586 samples, 1.05%)</title><rect x="12.1326%" y="165" width="1.0540%" height="15" fill="rgb(249,31,29)"/><text x="12.3826%" y="175.50"></text></g><g><title>check_mod_const_bodies (76,841 samples, 0.13%)</title><rect x="13.1867%" y="165" width="0.1320%" height="15" fill="rgb(225,111,53)"/><text x="13.4367%" y="175.50"></text></g><g><title>lookup_deprecation_entry (155,091 samples, 0.27%)</title><rect x="13.7465%" y="149" width="0.2664%" height="15" fill="rgb(238,160,17)"/><text x="13.9965%" y="159.50"></text></g><g><title>stability_index (80,181 samples, 0.14%)</title><rect x="13.8752%" y="133" width="0.1377%" height="15" fill="rgb(214,148,48)"/><text x="14.1252%" y="143.50"></text></g><g><title>lookup_stability (67,010 samples, 0.12%)</title><rect x="14.0130%" y="149" width="0.1151%" height="15" fill="rgb(232,36,49)"/><text x="14.2630%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (451,235 samples, 0.78%)</title><rect x="13.4140%" y="165" width="0.7752%" height="15" fill="rgb(209,103,24)"/><text x="13.6640%" y="175.50"></text></g><g><title>looking_for_derive_registrar (62,720 samples, 0.11%)</title><rect x="14.1944%" y="165" width="0.1077%" height="15" fill="rgb(229,88,8)"/><text x="14.4444%" y="175.50"></text></g><g><title>misc_checking_1 (1,311,994 samples, 2.25%)</title><rect x="12.0567%" y="181" width="2.2538%" height="15" fill="rgb(213,181,19)"/><text x="12.3067%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (148,522 samples, 0.26%)</title><rect x="14.3133%" y="165" width="0.2551%" height="15" fill="rgb(254,191,54)"/><text x="14.5633%" y="175.50"></text></g><g><title>check_mod_liveness (118,112 samples, 0.20%)</title><rect x="14.3656%" y="149" width="0.2029%" height="15" fill="rgb(241,83,37)"/><text x="14.6156%" y="159.50"></text></g><g><title>misc_checking_2 (330,214 samples, 0.57%)</title><rect x="14.3105%" y="181" width="0.5673%" height="15" fill="rgb(233,36,39)"/><text x="14.5605%" y="191.50"></text></g><g><title>match_checking (180,022 samples, 0.31%)</title><rect x="14.5685%" y="165" width="0.3093%" height="15" fill="rgb(226,3,54)"/><text x="14.8185%" y="175.50"></text></g><g><title>check_match (171,892 samples, 0.30%)</title><rect x="14.5824%" y="149" width="0.2953%" height="15" fill="rgb(245,192,40)"/><text x="14.8324%" y="159.50"></text></g><g><title>check_private_in_public (69,191 samples, 0.12%)</title><rect x="14.8925%" y="165" width="0.1189%" height="15" fill="rgb(238,167,29)"/><text x="15.1425%" y="175.50"></text></g><g><title>death_checking (153,561 samples, 0.26%)</title><rect x="15.0114%" y="165" width="0.2638%" height="15" fill="rgb(232,182,51)"/><text x="15.2614%" y="175.50"></text></g><g><title>param_env (161,653 samples, 0.28%)</title><rect x="16.4716%" y="133" width="0.2777%" height="15" fill="rgb(231,60,39)"/><text x="16.7216%" y="143.50"></text></g><g><title>predicates_of (76,393 samples, 0.13%)</title><rect x="16.6181%" y="117" width="0.1312%" height="15" fill="rgb(208,69,12)"/><text x="16.8681%" y="127.50"></text></g><g><title>predicates_defined_on (63,142 samples, 0.11%)</title><rect x="16.6408%" y="101" width="0.1085%" height="15" fill="rgb(235,93,37)"/><text x="16.8908%" y="111.50"></text></g><g><title>crate_lints (1,910,651 samples, 3.28%)</title><rect x="15.2781%" y="149" width="3.2822%" height="15" fill="rgb(213,116,39)"/><text x="15.5281%" y="159.50">cra..</text></g><g><title>type_of (1,052,832 samples, 1.81%)</title><rect x="16.7517%" y="133" width="1.8086%" height="15" fill="rgb(222,207,29)"/><text x="17.0017%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (815,309 samples, 1.40%)</title><rect x="17.1598%" y="117" width="1.4006%" height="15" fill="rgb(206,96,30)"/><text x="17.4098%" y="127.50"></text></g><g><title>lint_checking (2,065,803 samples, 3.55%)</title><rect x="15.2752%" y="165" width="3.5487%" height="15" fill="rgb(218,138,4)"/><text x="15.5252%" y="175.50">lint..</text></g><g><title>module_lints (153,442 samples, 0.26%)</title><rect x="18.5603%" y="149" width="0.2636%" height="15" fill="rgb(250,191,14)"/><text x="18.8103%" y="159.50"></text></g><g><title>lint_mod (149,102 samples, 0.26%)</title><rect x="18.5678%" y="133" width="0.2561%" height="15" fill="rgb(239,60,40)"/><text x="18.8178%" y="143.50"></text></g><g><title>privacy_access_levels (81,221 samples, 0.14%)</title><rect x="18.8239%" y="165" width="0.1395%" height="15" fill="rgb(206,27,48)"/><text x="19.0739%" y="175.50"></text></g><g><title>privacy_checking_modules (288,093 samples, 0.49%)</title><rect x="18.9634%" y="165" width="0.4949%" height="15" fill="rgb(225,35,8)"/><text x="19.2134%" y="175.50"></text></g><g><title>check_mod_privacy (284,353 samples, 0.49%)</title><rect x="18.9699%" y="149" width="0.4885%" height="15" fill="rgb(250,213,24)"/><text x="19.2199%" y="159.50"></text></g><g><title>misc_checking_3 (2,682,400 samples, 4.61%)</title><rect x="14.8777%" y="181" width="4.6080%" height="15" fill="rgb(247,123,22)"/><text x="15.1277%" y="191.50">misc_..</text></g><g><title>impl_parent (1,349,729 samples, 2.32%)</title><rect x="23.1154%" y="117" width="2.3186%" height="15" fill="rgb(231,138,38)"/><text x="23.3654%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (846,021 samples, 1.45%)</title><rect x="23.9807%" y="101" width="1.4533%" height="15" fill="rgb(231,145,46)"/><text x="24.2307%" y="111.50"></text></g><g><title>impl_trait_ref (4,071,276 samples, 6.99%)</title><rect x="25.4341%" y="117" width="6.9938%" height="15" fill="rgb(251,118,11)"/><text x="25.6841%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,559,559 samples, 6.11%)</title><rect x="26.3131%" y="101" width="6.1148%" height="15" fill="rgb(217,147,25)"/><text x="26.5631%" y="111.50">metadata..</text></g><g><title>trait_impls_of (425,385 samples, 0.73%)</title><rect x="32.4620%" y="117" width="0.7307%" height="15" fill="rgb(247,81,37)"/><text x="32.7120%" y="127.50"></text></g><g><title>implementations_of_trait (131,281 samples, 0.23%)</title><rect x="32.9672%" y="101" width="0.2255%" height="15" fill="rgb(209,12,38)"/><text x="33.2172%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (102,031 samples, 0.18%)</title><rect x="33.0174%" y="85" width="0.1753%" height="15" fill="rgb(227,1,9)"/><text x="33.2674%" y="95.50"></text></g><g><title>coherent_trait (7,933,488 samples, 13.63%)</title><rect x="19.5654%" y="149" width="13.6285%" height="15" fill="rgb(248,47,43)"/><text x="19.8154%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (7,920,048 samples, 13.61%)</title><rect x="19.5885%" y="133" width="13.6054%" height="15" fill="rgb(221,10,30)"/><text x="19.8385%" y="143.50">specialization_graph_..</text></g><g><title>coherence_checking (7,984,248 samples, 13.72%)</title><rect x="19.5362%" y="165" width="13.7157%" height="15" fill="rgb(210,229,1)"/><text x="19.7862%" y="175.50">coherence_checking</text></g><g><title>associated_item (65,861 samples, 0.11%)</title><rect x="39.9981%" y="101" width="0.1131%" height="15" fill="rgb(222,148,37)"/><text x="40.2481%" y="111.50"></text></g><g><title>associated_items (113,291 samples, 0.19%)</title><rect x="39.9307%" y="117" width="0.1946%" height="15" fill="rgb(234,67,33)"/><text x="40.1807%" y="127.50"></text></g><g><title>adt_dtorck_constraint (70,771 samples, 0.12%)</title><rect x="40.4158%" y="85" width="0.1216%" height="15" fill="rgb(247,98,35)"/><text x="40.6658%" y="95.50"></text></g><g><title>dropck_outlives (243,233 samples, 0.42%)</title><rect x="40.1458%" y="117" width="0.4178%" height="15" fill="rgb(247,138,52)"/><text x="40.3958%" y="127.50"></text></g><g><title>adt_dtorck_constraint (153,662 samples, 0.26%)</title><rect x="40.2997%" y="101" width="0.2640%" height="15" fill="rgb(213,79,30)"/><text x="40.5497%" y="111.50"></text></g><g><title>evaluate_obligation (254,423 samples, 0.44%)</title><rect x="40.5637%" y="117" width="0.4371%" height="15" fill="rgb(246,177,23)"/><text x="40.8137%" y="127.50"></text></g><g><title>method_autoderef_steps (103,572 samples, 0.18%)</title><rect x="41.3351%" y="117" width="0.1779%" height="15" fill="rgb(230,62,27)"/><text x="41.5851%" y="127.50"></text></g><g><title>evaluate_obligation (61,191 samples, 0.11%)</title><rect x="41.4079%" y="101" width="0.1051%" height="15" fill="rgb(216,154,8)"/><text x="41.6579%" y="111.50"></text></g><g><title>explicit_predicates_of (87,701 samples, 0.15%)</title><rect x="41.6607%" y="85" width="0.1507%" height="15" fill="rgb(244,35,45)"/><text x="41.9107%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (79,791 samples, 0.14%)</title><rect x="41.6743%" y="69" width="0.1371%" height="15" fill="rgb(251,115,12)"/><text x="41.9243%" y="79.50"></text></g><g><title>predicates_of (163,231 samples, 0.28%)</title><rect x="41.5645%" y="117" width="0.2804%" height="15" fill="rgb(240,54,50)"/><text x="41.8145%" y="127.50"></text></g><g><title>predicates_defined_on (130,391 samples, 0.22%)</title><rect x="41.6209%" y="101" width="0.2240%" height="15" fill="rgb(233,84,52)"/><text x="41.8709%" y="111.50"></text></g><g><title>associated_item (128,322 samples, 0.22%)</title><rect x="43.1088%" y="85" width="0.2204%" height="15" fill="rgb(207,117,47)"/><text x="43.3588%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (96,141 samples, 0.17%)</title><rect x="43.1641%" y="69" width="0.1652%" height="15" fill="rgb(249,43,39)"/><text x="43.4141%" y="79.50"></text></g><g><title>associated_items (196,773 samples, 0.34%)</title><rect x="43.0119%" y="101" width="0.3380%" height="15" fill="rgb(209,38,44)"/><text x="43.2619%" y="111.50"></text></g><g><title>evaluate_obligation (274,701 samples, 0.47%)</title><rect x="43.3736%" y="101" width="0.4719%" height="15" fill="rgb(236,212,23)"/><text x="43.6236%" y="111.50"></text></g><g><title>trait_impls_of (145,051 samples, 0.25%)</title><rect x="43.5963%" y="85" width="0.2492%" height="15" fill="rgb(242,79,21)"/><text x="43.8463%" y="95.50"></text></g><g><title>lint_levels (77,651 samples, 0.13%)</title><rect x="43.9469%" y="101" width="0.1334%" height="15" fill="rgb(211,96,35)"/><text x="44.1969%" y="111.50"></text></g><g><title>typeck (1,339,685 samples, 2.30%)</title><rect x="41.9293%" y="117" width="2.3014%" height="15" fill="rgb(253,215,40)"/><text x="42.1793%" y="127.50">t..</text></g><g><title>item_bodies_checking (6,388,272 samples, 10.97%)</title><rect x="33.2992%" y="165" width="10.9741%" height="15" fill="rgb(211,81,21)"/><text x="33.5492%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (6,385,902 samples, 10.97%)</title><rect x="33.3032%" y="149" width="10.9700%" height="15" fill="rgb(208,190,38)"/><text x="33.5532%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (6,369,892 samples, 10.94%)</title><rect x="33.3308%" y="133" width="10.9425%" height="15" fill="rgb(235,213,38)"/><text x="33.5808%" y="143.50">typeck</text></g><g><title>impl_trait_ref (403,855 samples, 0.69%)</title><rect x="44.8302%" y="85" width="0.6938%" height="15" fill="rgb(237,122,38)"/><text x="45.0802%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (163,372 samples, 0.28%)</title><rect x="45.2433%" y="69" width="0.2806%" height="15" fill="rgb(244,218,35)"/><text x="45.4933%" y="79.50"></text></g><g><title>adt_destructor (580,696 samples, 1.00%)</title><rect x="44.5800%" y="133" width="0.9975%" height="15" fill="rgb(240,68,47)"/><text x="44.8300%" y="143.50"></text></g><g><title>coherent_trait (578,106 samples, 0.99%)</title><rect x="44.5844%" y="117" width="0.9931%" height="15" fill="rgb(210,16,53)"/><text x="44.8344%" y="127.50"></text></g><g><title>specialization_graph_of (576,546 samples, 0.99%)</title><rect x="44.5871%" y="101" width="0.9904%" height="15" fill="rgb(235,124,12)"/><text x="44.8371%" y="111.50"></text></g><g><title>item_types_checking (784,539 samples, 1.35%)</title><rect x="44.2733%" y="165" width="1.3477%" height="15" fill="rgb(224,169,11)"/><text x="44.5233%" y="175.50"></text></g><g><title>check_mod_item_types (780,759 samples, 1.34%)</title><rect x="44.2797%" y="149" width="1.3412%" height="15" fill="rgb(250,166,2)"/><text x="44.5297%" y="159.50"></text></g><g><title>fn_sig (192,033 samples, 0.33%)</title><rect x="45.9686%" y="133" width="0.3299%" height="15" fill="rgb(242,216,29)"/><text x="46.2186%" y="143.50"></text></g><g><title>named_region_map (140,451 samples, 0.24%)</title><rect x="46.4451%" y="117" width="0.2413%" height="15" fill="rgb(230,116,27)"/><text x="46.6951%" y="127.50"></text></g><g><title>resolve_lifetimes (124,680 samples, 0.21%)</title><rect x="46.4722%" y="101" width="0.2142%" height="15" fill="rgb(228,99,48)"/><text x="46.7222%" y="111.50"></text></g><g><title>generics_of (256,763 samples, 0.44%)</title><rect x="46.2985%" y="133" width="0.4411%" height="15" fill="rgb(253,11,6)"/><text x="46.5485%" y="143.50"></text></g><g><title>impl_trait_ref (82,951 samples, 0.14%)</title><rect x="46.7396%" y="133" width="0.1425%" height="15" fill="rgb(247,143,39)"/><text x="46.9896%" y="143.50"></text></g><g><title>explicit_predicates_of (187,231 samples, 0.32%)</title><rect x="46.9994%" y="101" width="0.3216%" height="15" fill="rgb(236,97,10)"/><text x="47.2494%" y="111.50"></text></g><g><title>predicates_of (681,777 samples, 1.17%)</title><rect x="46.8821%" y="133" width="1.1712%" height="15" fill="rgb(233,208,19)"/><text x="47.1321%" y="143.50"></text></g><g><title>predicates_defined_on (654,576 samples, 1.12%)</title><rect x="46.9288%" y="117" width="1.1245%" height="15" fill="rgb(216,164,2)"/><text x="47.1788%" y="127.50"></text></g><g><title>inferred_outlives_of (426,275 samples, 0.73%)</title><rect x="47.3210%" y="101" width="0.7323%" height="15" fill="rgb(220,129,5)"/><text x="47.5710%" y="111.50"></text></g><g><title>inferred_outlives_crate (408,965 samples, 0.70%)</title><rect x="47.3507%" y="85" width="0.7025%" height="15" fill="rgb(242,17,10)"/><text x="47.6007%" y="95.50"></text></g><g><title>type_of (322,683 samples, 0.55%)</title><rect x="47.4990%" y="69" width="0.5543%" height="15" fill="rgb(242,107,0)"/><text x="47.7490%" y="79.50"></text></g><g><title>super_predicates_of (77,790 samples, 0.13%)</title><rect x="48.0533%" y="133" width="0.1336%" height="15" fill="rgb(251,28,31)"/><text x="48.3033%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (60,900 samples, 0.10%)</title><rect x="48.0823%" y="117" width="0.1046%" height="15" fill="rgb(233,223,10)"/><text x="48.3323%" y="127.50"></text></g><g><title>type_collecting (1,685,879 samples, 2.90%)</title><rect x="45.6241%" y="165" width="2.8961%" height="15" fill="rgb(215,21,27)"/><text x="45.8741%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (1,659,548 samples, 2.85%)</title><rect x="45.6693%" y="149" width="2.8509%" height="15" fill="rgb(232,23,21)"/><text x="45.9193%" y="159.50">co..</text></g><g><title>type_of (189,653 samples, 0.33%)</title><rect x="48.1944%" y="133" width="0.3258%" height="15" fill="rgb(244,5,23)"/><text x="48.4444%" y="143.50"></text></g><g><title>type_of (85,581 samples, 0.15%)</title><rect x="48.3732%" y="117" width="0.1470%" height="15" fill="rgb(226,81,46)"/><text x="48.6232%" y="127.50"></text></g><g><title>evaluate_obligation (174,503 samples, 0.30%)</title><rect x="49.3541%" y="133" width="0.2998%" height="15" fill="rgb(247,70,30)"/><text x="49.6041%" y="143.50"></text></g><g><title>implied_outlives_bounds (61,330 samples, 0.11%)</title><rect x="49.6681%" y="133" width="0.1054%" height="15" fill="rgb(212,68,19)"/><text x="49.9181%" y="143.50"></text></g><g><title>evaluate_obligation (177,832 samples, 0.31%)</title><rect x="50.0088%" y="117" width="0.3055%" height="15" fill="rgb(240,187,13)"/><text x="50.2588%" y="127.50"></text></g><g><title>layout_of (75,331 samples, 0.13%)</title><rect x="50.3803%" y="117" width="0.1294%" height="15" fill="rgb(223,113,26)"/><text x="50.6303%" y="127.50"></text></g><g><title>object_safety_violations (511,166 samples, 0.88%)</title><rect x="49.7734%" y="133" width="0.8781%" height="15" fill="rgb(206,192,2)"/><text x="50.0234%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,328,284 samples, 2.28%)</title><rect x="48.6255%" y="149" width="2.2818%" height="15" fill="rgb(241,108,4)"/><text x="48.8755%" y="159.50">c..</text></g><g><title>evaluate_obligation (84,951 samples, 0.15%)</title><rect x="51.6607%" y="133" width="0.1459%" height="15" fill="rgb(247,173,49)"/><text x="51.9107%" y="143.50"></text></g><g><title>implied_outlives_bounds (63,231 samples, 0.11%)</title><rect x="51.8126%" y="133" width="0.1086%" height="15" fill="rgb(224,114,35)"/><text x="52.0626%" y="143.50"></text></g><g><title>param_env (103,601 samples, 0.18%)</title><rect x="51.9212%" y="133" width="0.1780%" height="15" fill="rgb(245,159,27)"/><text x="52.1712%" y="143.50"></text></g><g><title>check_item_well_formed (776,000 samples, 1.33%)</title><rect x="50.9073%" y="149" width="1.3330%" height="15" fill="rgb(245,172,44)"/><text x="51.1573%" y="159.50"></text></g><g><title>evaluate_obligation (120,532 samples, 0.21%)</title><rect x="52.8802%" y="133" width="0.2071%" height="15" fill="rgb(236,23,11)"/><text x="53.1302%" y="143.50"></text></g><g><title>implied_outlives_bounds (60,630 samples, 0.10%)</title><rect x="53.0873%" y="133" width="0.1042%" height="15" fill="rgb(205,117,38)"/><text x="53.3373%" y="143.50"></text></g><g><title>analysis (30,229,687 samples, 51.93%)</title><rect x="1.3837%" y="197" width="51.9300%" height="15" fill="rgb(237,72,25)"/><text x="1.6337%" y="207.50">analysis</text></g><g><title>type_check_crate (19,692,120 samples, 33.83%)</title><rect x="19.4857%" y="181" width="33.8281%" height="15" fill="rgb(244,70,9)"/><text x="19.7357%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,789,041 samples, 4.79%)</title><rect x="48.5226%" y="165" width="4.7911%" height="15" fill="rgb(217,125,39)"/><text x="48.7726%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (624,846 samples, 1.07%)</title><rect x="52.2403%" y="149" width="1.0734%" height="15" fill="rgb(235,36,10)"/><text x="52.4903%" y="159.50"></text></g><g><title>codegen_crate (345,924 samples, 0.59%)</title><rect x="53.3318%" y="197" width="0.5942%" height="15" fill="rgb(251,123,47)"/><text x="53.5818%" y="207.50"></text></g><g><title>AST_validation (153,702 samples, 0.26%)</title><rect x="54.2978%" y="181" width="0.2640%" height="15" fill="rgb(221,13,13)"/><text x="54.5478%" y="191.50"></text></g><g><title>crate_injection (90,061 samples, 0.15%)</title><rect x="54.6595%" y="181" width="0.1547%" height="15" fill="rgb(238,131,9)"/><text x="54.9095%" y="191.50"></text></g><g><title>metadata_load_macro (160,881 samples, 0.28%)</title><rect x="80.9132%" y="149" width="0.2764%" height="15" fill="rgb(211,50,8)"/><text x="81.1632%" y="159.50"></text></g><g><title>metadata_register_crate (2,162,194 samples, 3.71%)</title><rect x="81.1895%" y="149" width="3.7143%" height="15" fill="rgb(245,182,24)"/><text x="81.4395%" y="159.50">meta..</text></g><g><title>metadata_register_crate (786,858 samples, 1.35%)</title><rect x="83.5522%" y="133" width="1.3517%" height="15" fill="rgb(242,14,37)"/><text x="83.8022%" y="143.50"></text></g><g><title>metadata_register_crate (70,251 samples, 0.12%)</title><rect x="84.7832%" y="117" width="0.1207%" height="15" fill="rgb(246,228,12)"/><text x="85.0332%" y="127.50"></text></g><g><title>macro_expand_crate (17,666,067 samples, 30.35%)</title><rect x="54.8142%" y="181" width="30.3476%" height="15" fill="rgb(213,55,15)"/><text x="55.0642%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,648,117 samples, 30.32%)</title><rect x="54.8450%" y="165" width="30.3168%" height="15" fill="rgb(209,9,3)"/><text x="55.0950%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (150,162 samples, 0.26%)</title><rect x="84.9039%" y="149" width="0.2580%" height="15" fill="rgb(230,59,30)"/><text x="85.1539%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (104,102 samples, 0.18%)</title><rect x="85.1722%" y="181" width="0.1788%" height="15" fill="rgb(209,121,21)"/><text x="85.4222%" y="191.50"></text></g><g><title>finalize_imports (76,671 samples, 0.13%)</title><rect x="85.3671%" y="165" width="0.1317%" height="15" fill="rgb(220,109,13)"/><text x="85.6171%" y="175.50"></text></g><g><title>late_resolve_crate (973,571 samples, 1.67%)</title><rect x="85.5850%" y="165" width="1.6724%" height="15" fill="rgb(232,18,1)"/><text x="85.8350%" y="175.50"></text></g><g><title>configure_and_expand (19,500,827 samples, 33.50%)</title><rect x="53.9260%" y="197" width="33.4994%" height="15" fill="rgb(215,41,42)"/><text x="54.1760%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,207,583 samples, 2.07%)</title><rect x="85.3510%" y="181" width="2.0744%" height="15" fill="rgb(224,123,36)"/><text x="85.6010%" y="191.50">r..</text></g><g><title>drop_ast (108,271 samples, 0.19%)</title><rect x="87.4255%" y="197" width="0.1860%" height="15" fill="rgb(240,125,3)"/><text x="87.6755%" y="207.50"></text></g><g><title>early_lint_checks (260,503 samples, 0.45%)</title><rect x="87.6357%" y="197" width="0.4475%" height="15" fill="rgb(205,98,50)"/><text x="87.8857%" y="207.50"></text></g><g><title>free_global_ctxt (2,659,890 samples, 4.57%)</title><rect x="88.0832%" y="197" width="4.5693%" height="15" fill="rgb(205,185,37)"/><text x="88.3332%" y="207.50">free_..</text></g><g><title>crate_hash (69,491 samples, 0.12%)</title><rect x="93.2908%" y="181" width="0.1194%" height="15" fill="rgb(238,207,15)"/><text x="93.5408%" y="191.50"></text></g><g><title>generate_crate_metadata (519,886 samples, 0.89%)</title><rect x="92.6525%" y="197" width="0.8931%" height="15" fill="rgb(213,199,42)"/><text x="92.9025%" y="207.50"></text></g><g><title>hir_lowering (1,774,910 samples, 3.05%)</title><rect x="93.5456%" y="197" width="3.0490%" height="15" fill="rgb(235,201,11)"/><text x="93.7956%" y="207.50">hir..</text></g><g><title>parse_crate (715,877 samples, 1.23%)</title><rect x="96.6667%" y="197" width="1.2298%" height="15" fill="rgb(207,46,11)"/><text x="96.9167%" y="207.50"></text></g><g><title>prepare_outputs (319,164 samples, 0.55%)</title><rect x="97.9135%" y="197" width="0.5483%" height="15" fill="rgb(241,35,35)"/><text x="98.1635%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (463,925 samples, 0.80%)</title><rect x="98.4618%" y="197" width="0.7970%" height="15" fill="rgb(243,32,47)"/><text x="98.7118%" y="207.50"></text></g><g><title>setup_global_ctxt (131,921 samples, 0.23%)</title><rect x="99.2774%" y="197" width="0.2266%" height="15" fill="rgb(247,202,23)"/><text x="99.5274%" y="207.50"></text></g><g><title>all (58,212,389 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (58,212,389 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (288,713 samples, 0.50%)</title><rect x="99.5040%" y="197" width="0.4960%" height="15" fill="rgb(222,74,54)"/><text x="99.7540%" y="207.50"></text></g></svg></svg>