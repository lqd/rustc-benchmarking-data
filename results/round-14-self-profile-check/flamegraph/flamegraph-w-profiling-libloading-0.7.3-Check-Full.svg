<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (241,783 samples, 0.18%)</title><rect x="11.4960%" y="133" width="0.1785%" height="15" fill="rgb(227,0,7)"/><text x="11.7460%" y="143.50"></text></g><g><title>item_attrs (220,181 samples, 0.16%)</title><rect x="12.0300%" y="101" width="0.1626%" height="15" fill="rgb(217,0,24)"/><text x="12.2800%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (212,171 samples, 0.16%)</title><rect x="12.0359%" y="85" width="0.1567%" height="15" fill="rgb(221,193,54)"/><text x="12.2859%" y="95.50"></text></g><g><title>codegen_fn_attrs (328,353 samples, 0.24%)</title><rect x="11.9631%" y="117" width="0.2425%" height="15" fill="rgb(248,212,6)"/><text x="12.2131%" y="127.50"></text></g><g><title>adt_drop_tys (283,654 samples, 0.21%)</title><rect x="14.0271%" y="85" width="0.2095%" height="15" fill="rgb(208,68,35)"/><text x="14.2771%" y="95.50"></text></g><g><title>is_copy_raw (994,102 samples, 0.73%)</title><rect x="14.2366%" y="85" width="0.7341%" height="15" fill="rgb(232,128,0)"/><text x="14.4866%" y="95.50"></text></g><g><title>evaluate_obligation (836,360 samples, 0.62%)</title><rect x="14.3530%" y="69" width="0.6176%" height="15" fill="rgb(207,160,47)"/><text x="14.6030%" y="79.50"></text></g><g><title>needs_drop_raw (1,447,656 samples, 1.07%)</title><rect x="13.9089%" y="101" width="1.0690%" height="15" fill="rgb(228,23,34)"/><text x="14.1589%" y="111.50"></text></g><g><title>resolve_instance (375,866 samples, 0.28%)</title><rect x="14.9779%" y="101" width="0.2775%" height="15" fill="rgb(218,30,26)"/><text x="15.2279%" y="111.50"></text></g><g><title>thir_body (836,176 samples, 0.62%)</title><rect x="15.2769%" y="101" width="0.6174%" height="15" fill="rgb(220,122,19)"/><text x="15.5269%" y="111.50"></text></g><g><title>mir_const (6,632,621 samples, 4.90%)</title><rect x="11.0117%" y="149" width="4.8976%" height="15" fill="rgb(250,228,42)"/><text x="11.2617%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (5,735,040 samples, 4.23%)</title><rect x="11.6745%" y="133" width="4.2349%" height="15" fill="rgb(240,193,28)"/><text x="11.9245%" y="143.50">unsaf..</text></g><g><title>mir_built (5,015,812 samples, 3.70%)</title><rect x="12.2056%" y="117" width="3.7038%" height="15" fill="rgb(216,20,37)"/><text x="12.4556%" y="127.50">mir_..</text></g><g><title>mir_const_qualif (368,613 samples, 0.27%)</title><rect x="15.9094%" y="149" width="0.2722%" height="15" fill="rgb(206,188,39)"/><text x="16.1594%" y="159.50"></text></g><g><title>mir_const (263,023 samples, 0.19%)</title><rect x="15.9873%" y="133" width="0.1942%" height="15" fill="rgb(217,207,13)"/><text x="16.2373%" y="143.50"></text></g><g><title>unsafety_check_result (176,483 samples, 0.13%)</title><rect x="16.0512%" y="117" width="0.1303%" height="15" fill="rgb(231,73,38)"/><text x="16.3012%" y="127.50"></text></g><g><title>mir_promoted (7,761,402 samples, 5.73%)</title><rect x="10.4515%" y="165" width="5.7312%" height="15" fill="rgb(225,20,46)"/><text x="10.7015%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (477,623 samples, 0.35%)</title><rect x="16.1827%" y="165" width="0.3527%" height="15" fill="rgb(210,31,41)"/><text x="16.4327%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (301,064 samples, 0.22%)</title><rect x="16.5353%" y="165" width="0.2223%" height="15" fill="rgb(221,200,47)"/><text x="16.7853%" y="175.50"></text></g><g><title>normalize_projection_ty (181,222 samples, 0.13%)</title><rect x="16.6238%" y="149" width="0.1338%" height="15" fill="rgb(226,26,5)"/><text x="16.8738%" y="159.50"></text></g><g><title>type_op_normalize_predicate (148,572 samples, 0.11%)</title><rect x="16.7576%" y="165" width="0.1097%" height="15" fill="rgb(249,33,26)"/><text x="17.0076%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,340,157 samples, 1.73%)</title><rect x="16.8705%" y="165" width="1.7280%" height="15" fill="rgb(235,183,28)"/><text x="17.1205%" y="175.50"></text></g><g><title>MIR_borrow_checking (23,914,766 samples, 17.66%)</title><rect x="0.9477%" y="197" width="17.6591%" height="15" fill="rgb(221,5,38)"/><text x="1.1977%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,808,615 samples, 17.58%)</title><rect x="1.0261%" y="181" width="17.5807%" height="15" fill="rgb(247,18,42)"/><text x="1.2761%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (245,852 samples, 0.18%)</title><rect x="18.6068%" y="197" width="0.1815%" height="15" fill="rgb(241,131,45)"/><text x="18.8568%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (174,472 samples, 0.13%)</title><rect x="18.6595%" y="181" width="0.1288%" height="15" fill="rgb(249,31,29)"/><text x="18.9095%" y="191.50"></text></g><g><title>hir_module_items (284,714 samples, 0.21%)</title><rect x="18.7883%" y="197" width="0.2102%" height="15" fill="rgb(225,111,53)"/><text x="19.0383%" y="207.50"></text></g><g><title>codegen_fn_attrs (146,851 samples, 0.11%)</title><rect x="19.6110%" y="133" width="0.1084%" height="15" fill="rgb(238,160,17)"/><text x="19.8610%" y="143.50"></text></g><g><title>should_inherit_track_caller (275,932 samples, 0.20%)</title><rect x="19.5238%" y="149" width="0.2038%" height="15" fill="rgb(214,148,48)"/><text x="19.7738%" y="159.50"></text></g><g><title>codegen_fn_attrs (551,274 samples, 0.41%)</title><rect x="19.3415%" y="165" width="0.4071%" height="15" fill="rgb(232,36,49)"/><text x="19.5915%" y="175.50"></text></g><g><title>check_mod_attrs (920,110 samples, 0.68%)</title><rect x="19.0693%" y="181" width="0.6794%" height="15" fill="rgb(209,103,24)"/><text x="19.3193%" y="191.50"></text></g><g><title>check_mod_const_bodies (183,223 samples, 0.14%)</title><rect x="19.7487%" y="181" width="0.1353%" height="15" fill="rgb(229,88,8)"/><text x="19.9987%" y="191.50"></text></g><g><title>lookup_deprecation_entry (274,002 samples, 0.20%)</title><rect x="20.2300%" y="165" width="0.2023%" height="15" fill="rgb(213,181,19)"/><text x="20.4800%" y="175.50"></text></g><g><title>stability_index (170,282 samples, 0.13%)</title><rect x="20.3066%" y="149" width="0.1257%" height="15" fill="rgb(254,191,54)"/><text x="20.5566%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (774,888 samples, 0.57%)</title><rect x="19.9870%" y="181" width="0.5722%" height="15" fill="rgb(241,83,37)"/><text x="20.2370%" y="191.50"></text></g><g><title>misc_checking_1 (2,220,034 samples, 1.64%)</title><rect x="18.9988%" y="197" width="1.6393%" height="15" fill="rgb(233,36,39)"/><text x="19.2488%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (446,815 samples, 0.33%)</title><rect x="20.6394%" y="181" width="0.3299%" height="15" fill="rgb(226,3,54)"/><text x="20.8894%" y="191.50"></text></g><g><title>check_mod_liveness (343,654 samples, 0.25%)</title><rect x="20.7156%" y="165" width="0.2538%" height="15" fill="rgb(245,192,40)"/><text x="20.9656%" y="175.50"></text></g><g><title>misc_checking_2 (1,023,171 samples, 0.76%)</title><rect x="20.6382%" y="197" width="0.7555%" height="15" fill="rgb(238,167,29)"/><text x="20.8882%" y="207.50"></text></g><g><title>match_checking (574,606 samples, 0.42%)</title><rect x="20.9694%" y="181" width="0.4243%" height="15" fill="rgb(232,182,51)"/><text x="21.2194%" y="191.50"></text></g><g><title>check_match (545,696 samples, 0.40%)</title><rect x="20.9907%" y="165" width="0.4030%" height="15" fill="rgb(231,60,39)"/><text x="21.2407%" y="175.50"></text></g><g><title>check_private_in_public (203,722 samples, 0.15%)</title><rect x="21.4007%" y="181" width="0.1504%" height="15" fill="rgb(208,69,12)"/><text x="21.6507%" y="191.50"></text></g><g><title>death_checking (433,145 samples, 0.32%)</title><rect x="21.5511%" y="181" width="0.3198%" height="15" fill="rgb(235,93,37)"/><text x="21.8011%" y="191.50"></text></g><g><title>eval_to_const_value_raw (243,653 samples, 0.18%)</title><rect x="22.4204%" y="149" width="0.1799%" height="15" fill="rgb(213,116,39)"/><text x="22.6704%" y="159.50"></text></g><g><title>eval_to_const_value_raw (240,033 samples, 0.18%)</title><rect x="22.4231%" y="133" width="0.1772%" height="15" fill="rgb(222,207,29)"/><text x="22.6731%" y="143.50"></text></g><g><title>eval_to_allocation_raw (234,733 samples, 0.17%)</title><rect x="22.4270%" y="117" width="0.1733%" height="15" fill="rgb(206,96,30)"/><text x="22.6770%" y="127.50"></text></g><g><title>param_env (403,747 samples, 0.30%)</title><rect x="22.6004%" y="149" width="0.2981%" height="15" fill="rgb(218,138,4)"/><text x="22.8504%" y="159.50"></text></g><g><title>predicates_of (172,684 samples, 0.13%)</title><rect x="22.7710%" y="133" width="0.1275%" height="15" fill="rgb(250,191,14)"/><text x="23.0210%" y="143.50"></text></g><g><title>predicates_defined_on (139,452 samples, 0.10%)</title><rect x="22.7955%" y="117" width="0.1030%" height="15" fill="rgb(239,60,40)"/><text x="23.0455%" y="127.50"></text></g><g><title>crate_lints (2,513,858 samples, 1.86%)</title><rect x="21.8721%" y="165" width="1.8563%" height="15" fill="rgb(206,27,48)"/><text x="22.1221%" y="175.50">c..</text></g><g><title>type_of (1,101,612 samples, 0.81%)</title><rect x="22.9149%" y="149" width="0.8134%" height="15" fill="rgb(225,35,8)"/><text x="23.1649%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (873,349 samples, 0.64%)</title><rect x="23.0835%" y="133" width="0.6449%" height="15" fill="rgb(250,213,24)"/><text x="23.3335%" y="143.50"></text></g><g><title>layout_of (150,972 samples, 0.11%)</title><rect x="24.0835%" y="85" width="0.1115%" height="15" fill="rgb(247,123,22)"/><text x="24.3335%" y="95.50"></text></g><g><title>layout_of (171,212 samples, 0.13%)</title><rect x="24.0712%" y="101" width="0.1264%" height="15" fill="rgb(231,138,38)"/><text x="24.3212%" y="111.50"></text></g><g><title>lint_checking (3,153,535 samples, 2.33%)</title><rect x="21.8710%" y="181" width="2.3286%" height="15" fill="rgb(231,145,46)"/><text x="22.1210%" y="191.50">l..</text></g><g><title>module_lints (638,167 samples, 0.47%)</title><rect x="23.7284%" y="165" width="0.4712%" height="15" fill="rgb(251,118,11)"/><text x="23.9784%" y="175.50"></text></g><g><title>lint_mod (623,257 samples, 0.46%)</title><rect x="23.7394%" y="149" width="0.4602%" height="15" fill="rgb(217,147,25)"/><text x="23.9894%" y="159.50"></text></g><g><title>layout_of (199,052 samples, 0.15%)</title><rect x="24.0526%" y="133" width="0.1470%" height="15" fill="rgb(247,81,37)"/><text x="24.3026%" y="143.50"></text></g><g><title>layout_of (183,042 samples, 0.14%)</title><rect x="24.0645%" y="117" width="0.1352%" height="15" fill="rgb(209,12,38)"/><text x="24.3145%" y="127.50"></text></g><g><title>privacy_access_levels (309,413 samples, 0.23%)</title><rect x="24.1996%" y="181" width="0.2285%" height="15" fill="rgb(227,1,9)"/><text x="24.4496%" y="191.50"></text></g><g><title>privacy_checking_modules (768,849 samples, 0.57%)</title><rect x="24.4281%" y="181" width="0.5677%" height="15" fill="rgb(248,47,43)"/><text x="24.6781%" y="191.50"></text></g><g><title>check_mod_privacy (757,559 samples, 0.56%)</title><rect x="24.4364%" y="165" width="0.5594%" height="15" fill="rgb(221,10,30)"/><text x="24.6864%" y="175.50"></text></g><g><title>misc_checking_3 (4,895,275 samples, 3.61%)</title><rect x="21.3937%" y="197" width="3.6148%" height="15" fill="rgb(210,229,1)"/><text x="21.6437%" y="207.50">misc..</text></g><g><title>impl_parent (2,728,103 samples, 2.01%)</title><rect x="28.7938%" y="133" width="2.0145%" height="15" fill="rgb(222,148,37)"/><text x="29.0438%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,517,200 samples, 1.12%)</title><rect x="29.6879%" y="117" width="1.1203%" height="15" fill="rgb(234,67,33)"/><text x="29.9379%" y="127.50"></text></g><g><title>impl_trait_ref (7,625,691 samples, 5.63%)</title><rect x="30.8083%" y="133" width="5.6309%" height="15" fill="rgb(247,98,35)"/><text x="31.0583%" y="143.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,467,199 samples, 4.78%)</title><rect x="31.6637%" y="117" width="4.7755%" height="15" fill="rgb(247,138,52)"/><text x="31.9137%" y="127.50">metada..</text></g><g><title>trait_impls_of (986,971 samples, 0.73%)</title><rect x="36.4580%" y="133" width="0.7288%" height="15" fill="rgb(213,79,30)"/><text x="36.7080%" y="143.50"></text></g><g><title>implementations_of_trait (276,432 samples, 0.20%)</title><rect x="36.9827%" y="117" width="0.2041%" height="15" fill="rgb(246,177,23)"/><text x="37.2327%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (210,561 samples, 0.16%)</title><rect x="37.0314%" y="101" width="0.1555%" height="15" fill="rgb(230,62,27)"/><text x="37.2814%" y="111.50"></text></g><g><title>coherent_trait (16,383,232 samples, 12.10%)</title><rect x="25.0901%" y="165" width="12.0977%" height="15" fill="rgb(216,154,8)"/><text x="25.3401%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (16,353,442 samples, 12.08%)</title><rect x="25.1121%" y="149" width="12.0757%" height="15" fill="rgb(244,35,45)"/><text x="25.3621%" y="159.50">specialization_gra..</text></g><g><title>coherence_checking (16,504,853 samples, 12.19%)</title><rect x="25.0656%" y="181" width="12.1875%" height="15" fill="rgb(251,115,12)"/><text x="25.3156%" y="191.50">coherence_checking</text></g><g><title>associated_item (228,711 samples, 0.17%)</title><rect x="48.0857%" y="117" width="0.1689%" height="15" fill="rgb(240,54,50)"/><text x="48.3357%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (186,731 samples, 0.14%)</title><rect x="48.1167%" y="101" width="0.1379%" height="15" fill="rgb(233,84,52)"/><text x="48.3667%" y="111.50"></text></g><g><title>associated_items (316,664 samples, 0.23%)</title><rect x="48.0327%" y="133" width="0.2338%" height="15" fill="rgb(207,117,47)"/><text x="48.2827%" y="143.50"></text></g><g><title>dropck_outlives (192,691 samples, 0.14%)</title><rect x="48.2999%" y="133" width="0.1423%" height="15" fill="rgb(249,43,39)"/><text x="48.5499%" y="143.50"></text></g><g><title>adt_def (149,182 samples, 0.11%)</title><rect x="48.8572%" y="101" width="0.1102%" height="15" fill="rgb(209,38,44)"/><text x="49.1072%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (147,762 samples, 0.11%)</title><rect x="48.8582%" y="85" width="0.1091%" height="15" fill="rgb(236,212,23)"/><text x="49.1082%" y="95.50"></text></g><g><title>adt_sized_constraint (247,353 samples, 0.18%)</title><rect x="48.9673%" y="101" width="0.1826%" height="15" fill="rgb(242,79,21)"/><text x="49.2173%" y="111.50"></text></g><g><title>adt_sized_constraint (408,185 samples, 0.30%)</title><rect x="48.8504%" y="117" width="0.3014%" height="15" fill="rgb(211,96,35)"/><text x="49.1004%" y="127.50"></text></g><g><title>evaluate_obligation (1,341,043 samples, 0.99%)</title><rect x="48.4422%" y="133" width="0.9902%" height="15" fill="rgb(253,215,40)"/><text x="48.6922%" y="143.50"></text></g><g><title>item_attrs (150,640 samples, 0.11%)</title><rect x="49.5896%" y="133" width="0.1112%" height="15" fill="rgb(211,81,21)"/><text x="49.8396%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (146,550 samples, 0.11%)</title><rect x="49.5927%" y="117" width="0.1082%" height="15" fill="rgb(208,190,38)"/><text x="49.8427%" y="127.50"></text></g><g><title>method_autoderef_steps (229,520 samples, 0.17%)</title><rect x="49.7351%" y="133" width="0.1695%" height="15" fill="rgb(235,213,38)"/><text x="49.9851%" y="143.50"></text></g><g><title>predicates_of (189,934 samples, 0.14%)</title><rect x="49.9458%" y="133" width="0.1403%" height="15" fill="rgb(237,122,38)"/><text x="50.1958%" y="143.50"></text></g><g><title>predicates_defined_on (140,333 samples, 0.10%)</title><rect x="49.9825%" y="117" width="0.1036%" height="15" fill="rgb(244,218,35)"/><text x="50.2325%" y="127.50"></text></g><g><title>associated_item (457,386 samples, 0.34%)</title><rect x="55.6972%" y="101" width="0.3377%" height="15" fill="rgb(240,68,47)"/><text x="55.9472%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (362,526 samples, 0.27%)</title><rect x="55.7672%" y="85" width="0.2677%" height="15" fill="rgb(210,16,53)"/><text x="56.0172%" y="95.50"></text></g><g><title>associated_items (657,116 samples, 0.49%)</title><rect x="55.5702%" y="117" width="0.4852%" height="15" fill="rgb(235,124,12)"/><text x="55.8202%" y="127.50"></text></g><g><title>adt_dtorck_constraint (175,792 samples, 0.13%)</title><rect x="56.2330%" y="101" width="0.1298%" height="15" fill="rgb(224,169,11)"/><text x="56.4830%" y="111.50"></text></g><g><title>dropck_outlives (409,216 samples, 0.30%)</title><rect x="56.0801%" y="117" width="0.3022%" height="15" fill="rgb(250,166,2)"/><text x="56.3301%" y="127.50"></text></g><g><title>evaluate_obligation (1,004,351 samples, 0.74%)</title><rect x="56.3822%" y="117" width="0.7416%" height="15" fill="rgb(242,216,29)"/><text x="56.6322%" y="127.50"></text></g><g><title>trait_impls_of (229,702 samples, 0.17%)</title><rect x="56.9543%" y="101" width="0.1696%" height="15" fill="rgb(230,116,27)"/><text x="57.2043%" y="111.50"></text></g><g><title>is_copy_raw (629,628 samples, 0.46%)</title><rect x="57.3246%" y="117" width="0.4649%" height="15" fill="rgb(228,99,48)"/><text x="57.5746%" y="127.50"></text></g><g><title>evaluate_obligation (552,578 samples, 0.41%)</title><rect x="57.3814%" y="101" width="0.4080%" height="15" fill="rgb(253,11,6)"/><text x="57.6314%" y="111.50"></text></g><g><title>item_attrs (472,616 samples, 0.35%)</title><rect x="57.7895%" y="117" width="0.3490%" height="15" fill="rgb(247,143,39)"/><text x="58.0395%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (466,836 samples, 0.34%)</title><rect x="57.7937%" y="101" width="0.3447%" height="15" fill="rgb(236,97,10)"/><text x="58.0437%" y="111.50"></text></g><g><title>evaluate_obligation (232,043 samples, 0.17%)</title><rect x="58.2889%" y="101" width="0.1713%" height="15" fill="rgb(233,208,19)"/><text x="58.5389%" y="111.50"></text></g><g><title>method_autoderef_steps (409,609 samples, 0.30%)</title><rect x="58.1641%" y="117" width="0.3025%" height="15" fill="rgb(216,164,2)"/><text x="58.4141%" y="127.50"></text></g><g><title>predicates_of (198,475 samples, 0.15%)</title><rect x="58.4785%" y="117" width="0.1466%" height="15" fill="rgb(220,129,5)"/><text x="58.7285%" y="127.50"></text></g><g><title>predicates_defined_on (137,153 samples, 0.10%)</title><rect x="58.5238%" y="101" width="0.1013%" height="15" fill="rgb(242,17,10)"/><text x="58.7738%" y="111.50"></text></g><g><title>typeck (11,595,239 samples, 8.56%)</title><rect x="50.1454%" y="133" width="8.5621%" height="15" fill="rgb(242,107,0)"/><text x="50.3954%" y="143.50">typeck</text></g><g><title>item_bodies_checking (29,016,982 samples, 21.43%)</title><rect x="37.3055%" y="181" width="21.4266%" height="15" fill="rgb(251,28,31)"/><text x="37.5555%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,013,182 samples, 21.42%)</title><rect x="37.3083%" y="165" width="21.4238%" height="15" fill="rgb(233,223,10)"/><text x="37.5583%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (28,955,622 samples, 21.38%)</title><rect x="37.3508%" y="149" width="21.3813%" height="15" fill="rgb(215,21,27)"/><text x="37.6008%" y="159.50">typeck</text></g><g><title>item_types_checking (1,445,926 samples, 1.07%)</title><rect x="58.7321%" y="181" width="1.0677%" height="15" fill="rgb(232,23,21)"/><text x="58.9821%" y="191.50"></text></g><g><title>check_mod_item_types (1,421,155 samples, 1.05%)</title><rect x="58.7504%" y="165" width="1.0494%" height="15" fill="rgb(244,5,23)"/><text x="59.0004%" y="175.50"></text></g><g><title>typeck (323,884 samples, 0.24%)</title><rect x="59.5606%" y="149" width="0.2392%" height="15" fill="rgb(226,81,46)"/><text x="59.8106%" y="159.50"></text></g><g><title>fn_sig (701,968 samples, 0.52%)</title><rect x="60.1424%" y="149" width="0.5183%" height="15" fill="rgb(247,70,30)"/><text x="60.3924%" y="159.50"></text></g><g><title>named_region_map (520,957 samples, 0.38%)</title><rect x="60.9204%" y="133" width="0.3847%" height="15" fill="rgb(212,68,19)"/><text x="61.1704%" y="143.50"></text></g><g><title>resolve_lifetimes (504,066 samples, 0.37%)</title><rect x="60.9329%" y="117" width="0.3722%" height="15" fill="rgb(240,187,13)"/><text x="61.1829%" y="127.50"></text></g><g><title>lint_levels (230,613 samples, 0.17%)</title><rect x="61.1348%" y="101" width="0.1703%" height="15" fill="rgb(223,113,26)"/><text x="61.3848%" y="111.50"></text></g><g><title>generics_of (893,660 samples, 0.66%)</title><rect x="60.6607%" y="149" width="0.6599%" height="15" fill="rgb(206,192,2)"/><text x="60.9107%" y="159.50"></text></g><g><title>late_bound_vars_map (207,773 samples, 0.15%)</title><rect x="61.8132%" y="101" width="0.1534%" height="15" fill="rgb(241,108,4)"/><text x="62.0632%" y="111.50"></text></g><g><title>resolve_lifetimes (189,983 samples, 0.14%)</title><rect x="61.8263%" y="85" width="0.1403%" height="15" fill="rgb(247,173,49)"/><text x="62.0763%" y="95.50"></text></g><g><title>explicit_predicates_of (605,887 samples, 0.45%)</title><rect x="61.5510%" y="117" width="0.4474%" height="15" fill="rgb(224,114,35)"/><text x="61.8010%" y="127.50"></text></g><g><title>predicates_of (1,208,076 samples, 0.89%)</title><rect x="61.3747%" y="149" width="0.8921%" height="15" fill="rgb(245,159,27)"/><text x="61.6247%" y="159.50"></text></g><g><title>predicates_defined_on (1,120,334 samples, 0.83%)</title><rect x="61.4395%" y="133" width="0.8273%" height="15" fill="rgb(245,172,44)"/><text x="61.6895%" y="143.50"></text></g><g><title>inferred_outlives_of (363,405 samples, 0.27%)</title><rect x="61.9984%" y="117" width="0.2683%" height="15" fill="rgb(236,23,11)"/><text x="62.2484%" y="127.50"></text></g><g><title>inferred_outlives_crate (330,454 samples, 0.24%)</title><rect x="62.0228%" y="101" width="0.2440%" height="15" fill="rgb(205,117,38)"/><text x="62.2728%" y="111.50"></text></g><g><title>type_collecting (3,476,838 samples, 2.57%)</title><rect x="59.8025%" y="181" width="2.5674%" height="15" fill="rgb(237,72,25)"/><text x="60.0525%" y="191.50">ty..</text></g><g><title>collect_mod_item_types (3,435,928 samples, 2.54%)</title><rect x="59.8327%" y="165" width="2.5371%" height="15" fill="rgb(244,70,9)"/><text x="60.0827%" y="175.50">co..</text></g><g><title>type_of (139,561 samples, 0.10%)</title><rect x="62.2668%" y="149" width="0.1031%" height="15" fill="rgb(217,125,39)"/><text x="62.5168%" y="159.50"></text></g><g><title>evaluate_obligation (622,288 samples, 0.46%)</title><rect x="64.1972%" y="149" width="0.4595%" height="15" fill="rgb(235,36,10)"/><text x="64.4472%" y="159.50"></text></g><g><title>implied_outlives_bounds (400,041 samples, 0.30%)</title><rect x="64.6567%" y="149" width="0.2954%" height="15" fill="rgb(251,123,47)"/><text x="64.9067%" y="159.50"></text></g><g><title>evaluate_obligation (216,922 samples, 0.16%)</title><rect x="65.1059%" y="133" width="0.1602%" height="15" fill="rgb(221,13,13)"/><text x="65.3559%" y="143.50"></text></g><g><title>object_safety_violations (748,109 samples, 0.55%)</title><rect x="64.9521%" y="149" width="0.5524%" height="15" fill="rgb(238,131,9)"/><text x="65.2021%" y="159.50"></text></g><g><title>param_env (326,003 samples, 0.24%)</title><rect x="65.5045%" y="149" width="0.2407%" height="15" fill="rgb(211,50,8)"/><text x="65.7545%" y="159.50"></text></g><g><title>region_scope_tree (462,405 samples, 0.34%)</title><rect x="65.7624%" y="149" width="0.3414%" height="15" fill="rgb(245,182,24)"/><text x="66.0124%" y="159.50"></text></g><g><title>check_impl_item_well_formed (4,790,222 samples, 3.54%)</title><rect x="62.5913%" y="165" width="3.5372%" height="15" fill="rgb(242,14,37)"/><text x="62.8413%" y="175.50">che..</text></g><g><title>adt_def (187,994 samples, 0.14%)</title><rect x="68.2534%" y="85" width="0.1388%" height="15" fill="rgb(246,228,12)"/><text x="68.5034%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (186,264 samples, 0.14%)</title><rect x="68.2546%" y="69" width="0.1375%" height="15" fill="rgb(213,55,15)"/><text x="68.5046%" y="79.50"></text></g><g><title>item_attrs (168,013 samples, 0.12%)</title><rect x="68.2681%" y="53" width="0.1241%" height="15" fill="rgb(209,9,3)"/><text x="68.5181%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (165,883 samples, 0.12%)</title><rect x="68.2697%" y="37" width="0.1225%" height="15" fill="rgb(230,59,30)"/><text x="68.5197%" y="47.50"></text></g><g><title>adt_sized_constraint (283,964 samples, 0.21%)</title><rect x="68.2477%" y="101" width="0.2097%" height="15" fill="rgb(209,121,21)"/><text x="68.4977%" y="111.50"></text></g><g><title>adt_sized_constraint (318,604 samples, 0.24%)</title><rect x="68.2232%" y="117" width="0.2353%" height="15" fill="rgb(220,109,13)"/><text x="68.4732%" y="127.50"></text></g><g><title>adt_sized_constraint (363,354 samples, 0.27%)</title><rect x="68.1911%" y="133" width="0.2683%" height="15" fill="rgb(232,18,1)"/><text x="68.4411%" y="143.50"></text></g><g><title>evaluate_obligation (780,598 samples, 0.58%)</title><rect x="67.8857%" y="149" width="0.5764%" height="15" fill="rgb(215,41,42)"/><text x="68.1357%" y="159.50"></text></g><g><title>implied_outlives_bounds (205,942 samples, 0.15%)</title><rect x="68.4945%" y="149" width="0.1521%" height="15" fill="rgb(224,123,36)"/><text x="68.7445%" y="159.50"></text></g><g><title>param_env (489,094 samples, 0.36%)</title><rect x="68.6477%" y="149" width="0.3612%" height="15" fill="rgb(240,125,3)"/><text x="68.8977%" y="159.50"></text></g><g><title>predicates_of (154,653 samples, 0.11%)</title><rect x="69.0088%" y="149" width="0.1142%" height="15" fill="rgb(205,98,50)"/><text x="69.2588%" y="159.50"></text></g><g><title>region_scope_tree (145,583 samples, 0.11%)</title><rect x="69.1230%" y="149" width="0.1075%" height="15" fill="rgb(205,185,37)"/><text x="69.3730%" y="159.50"></text></g><g><title>analysis (93,113,744 samples, 68.76%)</title><rect x="0.6040%" y="213" width="68.7568%" height="15" fill="rgb(238,207,15)"/><text x="0.8540%" y="223.50">analysis</text></g><g><title>type_check_crate (60,064,028 samples, 44.35%)</title><rect x="25.0084%" y="197" width="44.3523%" height="15" fill="rgb(213,199,42)"/><text x="25.2584%" y="207.50">type_check_crate</text></g><g><title>wf_checking (9,462,505 samples, 6.99%)</title><rect x="62.3735%" y="181" width="6.9873%" height="15" fill="rgb(235,201,11)"/><text x="62.6235%" y="191.50">wf_checki..</text></g><g><title>check_item_well_formed (4,377,309 samples, 3.23%)</title><rect x="66.1285%" y="165" width="3.2323%" height="15" fill="rgb(207,46,11)"/><text x="66.3785%" y="175.50">che..</text></g><g><title>codegen_crate (407,664 samples, 0.30%)</title><rect x="69.3676%" y="213" width="0.3010%" height="15" fill="rgb(241,35,35)"/><text x="69.6176%" y="223.50"></text></g><g><title>AST_validation (256,022 samples, 0.19%)</title><rect x="69.7988%" y="197" width="0.1891%" height="15" fill="rgb(243,32,47)"/><text x="70.0488%" y="207.50"></text></g><g><title>metadata_load_macro (275,003 samples, 0.20%)</title><rect x="86.3095%" y="165" width="0.2031%" height="15" fill="rgb(247,202,23)"/><text x="86.5595%" y="175.50"></text></g><g><title>metadata_register_crate (2,089,153 samples, 1.54%)</title><rect x="86.5125%" y="165" width="1.5427%" height="15" fill="rgb(219,102,11)"/><text x="86.7625%" y="175.50"></text></g><g><title>metadata_register_crate (743,378 samples, 0.55%)</title><rect x="87.5063%" y="149" width="0.5489%" height="15" fill="rgb(243,110,44)"/><text x="87.7563%" y="159.50"></text></g><g><title>macro_expand_crate (24,543,202 samples, 18.12%)</title><rect x="70.1329%" y="197" width="18.1231%" height="15" fill="rgb(222,74,54)"/><text x="70.3829%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (24,521,422 samples, 18.11%)</title><rect x="70.1490%" y="181" width="18.1070%" height="15" fill="rgb(216,99,12)"/><text x="70.3990%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (272,014 samples, 0.20%)</title><rect x="88.0552%" y="165" width="0.2009%" height="15" fill="rgb(226,22,26)"/><text x="88.3052%" y="175.50"></text></g><g><title>late_resolve_crate (3,135,975 samples, 2.32%)</title><rect x="88.4890%" y="181" width="2.3157%" height="15" fill="rgb(217,163,10)"/><text x="88.7390%" y="191.50">l..</text></g><g><title>configure_and_expand (28,863,010 samples, 21.31%)</title><rect x="69.6686%" y="213" width="21.3129%" height="15" fill="rgb(213,25,53)"/><text x="69.9186%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (3,587,709 samples, 2.65%)</title><rect x="88.3323%" y="197" width="2.6492%" height="15" fill="rgb(252,105,26)"/><text x="88.5823%" y="207.50">re..</text></g><g><title>drop_ast (297,933 samples, 0.22%)</title><rect x="90.9816%" y="213" width="0.2200%" height="15" fill="rgb(220,39,43)"/><text x="91.2316%" y="223.50"></text></g><g><title>early_lint_checks (670,058 samples, 0.49%)</title><rect x="91.2131%" y="213" width="0.4948%" height="15" fill="rgb(229,68,48)"/><text x="91.4631%" y="223.50"></text></g><g><title>free_global_ctxt (3,402,427 samples, 2.51%)</title><rect x="91.7079%" y="213" width="2.5124%" height="15" fill="rgb(252,8,32)"/><text x="91.9579%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (1,288,615 samples, 0.95%)</title><rect x="94.2203%" y="213" width="0.9515%" height="15" fill="rgb(223,20,43)"/><text x="94.4703%" y="223.50"></text></g><g><title>hir_lowering (4,376,699 samples, 3.23%)</title><rect x="95.1719%" y="213" width="3.2318%" height="15" fill="rgb(229,81,49)"/><text x="95.4219%" y="223.50">hir..</text></g><g><title>parse_crate (571,636 samples, 0.42%)</title><rect x="98.4420%" y="213" width="0.4221%" height="15" fill="rgb(236,28,36)"/><text x="98.6920%" y="223.50"></text></g><g><title>prepare_outputs (266,903 samples, 0.20%)</title><rect x="98.8699%" y="213" width="0.1971%" height="15" fill="rgb(249,185,26)"/><text x="99.1199%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (755,929 samples, 0.56%)</title><rect x="99.0670%" y="213" width="0.5582%" height="15" fill="rgb(249,174,33)"/><text x="99.3170%" y="223.50"></text></g><g><title>setup_global_ctxt (140,731 samples, 0.10%)</title><rect x="99.6331%" y="213" width="0.1039%" height="15" fill="rgb(233,201,37)"/><text x="99.8831%" y="223.50"></text></g><g><title>all (135,424,794 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (135,424,794 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (356,114 samples, 0.26%)</title><rect x="99.7370%" y="213" width="0.2630%" height="15" fill="rgb(230,49,44)"/><text x="99.9870%" y="223.50"></text></g></svg></svg>