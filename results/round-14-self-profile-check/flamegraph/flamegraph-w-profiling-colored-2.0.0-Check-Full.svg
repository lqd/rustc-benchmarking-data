<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (170,311 samples, 0.11%)</title><rect x="11.7916%" y="197" width="0.1105%" height="15" fill="rgb(227,0,7)"/><text x="12.0416%" y="207.50"></text></g><g><title>param_env (321,816 samples, 0.21%)</title><rect x="13.6511%" y="165" width="0.2088%" height="15" fill="rgb(217,0,24)"/><text x="13.9011%" y="175.50"></text></g><g><title>item_attrs (319,795 samples, 0.21%)</title><rect x="14.4026%" y="133" width="0.2075%" height="15" fill="rgb(221,193,54)"/><text x="14.6526%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (309,795 samples, 0.20%)</title><rect x="14.4091%" y="117" width="0.2010%" height="15" fill="rgb(248,212,6)"/><text x="14.6591%" y="127.50"></text></g><g><title>codegen_fn_attrs (438,825 samples, 0.28%)</title><rect x="14.3387%" y="149" width="0.2848%" height="15" fill="rgb(208,68,35)"/><text x="14.5887%" y="159.50"></text></g><g><title>is_copy_raw (172,981 samples, 0.11%)</title><rect x="17.3926%" y="101" width="0.1123%" height="15" fill="rgb(232,128,0)"/><text x="17.6426%" y="111.50"></text></g><g><title>adt_drop_tys (404,044 samples, 0.26%)</title><rect x="17.3479%" y="117" width="0.2622%" height="15" fill="rgb(207,160,47)"/><text x="17.5979%" y="127.50"></text></g><g><title>is_copy_raw (775,086 samples, 0.50%)</title><rect x="17.6101%" y="117" width="0.5030%" height="15" fill="rgb(228,23,34)"/><text x="17.8601%" y="127.50"></text></g><g><title>evaluate_obligation (667,536 samples, 0.43%)</title><rect x="17.6799%" y="101" width="0.4332%" height="15" fill="rgb(218,30,26)"/><text x="17.9299%" y="111.50"></text></g><g><title>needs_drop_raw (1,305,810 samples, 0.85%)</title><rect x="17.2812%" y="133" width="0.8474%" height="15" fill="rgb(220,122,19)"/><text x="17.5312%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (352,044 samples, 0.23%)</title><rect x="18.3149%" y="117" width="0.2285%" height="15" fill="rgb(250,228,42)"/><text x="18.5649%" y="127.50"></text></g><g><title>impl_parent (169,861 samples, 0.11%)</title><rect x="18.9456%" y="101" width="0.1102%" height="15" fill="rgb(240,193,28)"/><text x="19.1956%" y="111.50"></text></g><g><title>specialization_graph_of (1,122,174 samples, 0.73%)</title><rect x="18.6023%" y="117" width="0.7282%" height="15" fill="rgb(216,20,37)"/><text x="18.8523%" y="127.50"></text></g><g><title>impl_trait_ref (423,328 samples, 0.27%)</title><rect x="19.0558%" y="101" width="0.2747%" height="15" fill="rgb(206,188,39)"/><text x="19.3058%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (365,226 samples, 0.24%)</title><rect x="19.0935%" y="85" width="0.2370%" height="15" fill="rgb(217,207,13)"/><text x="19.3435%" y="95.50"></text></g><g><title>resolve_instance (1,937,573 samples, 1.26%)</title><rect x="18.1287%" y="133" width="1.2574%" height="15" fill="rgb(231,73,38)"/><text x="18.3787%" y="143.50"></text></g><g><title>thir_body (1,539,607 samples, 1.00%)</title><rect x="19.4191%" y="133" width="0.9991%" height="15" fill="rgb(225,20,46)"/><text x="19.6691%" y="143.50"></text></g><g><title>mir_const (11,773,409 samples, 7.64%)</title><rect x="12.8006%" y="181" width="7.6404%" height="15" fill="rgb(210,31,41)"/><text x="13.0506%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (10,141,052 samples, 6.58%)</title><rect x="13.8600%" y="165" width="6.5811%" height="15" fill="rgb(221,200,47)"/><text x="14.1100%" y="175.50">unsafety_..</text></g><g><title>mir_built (8,964,511 samples, 5.82%)</title><rect x="14.6235%" y="149" width="5.8176%" height="15" fill="rgb(226,26,5)"/><text x="14.8735%" y="159.50">mir_bui..</text></g><g><title>mir_const (293,703 samples, 0.19%)</title><rect x="20.7046%" y="165" width="0.1906%" height="15" fill="rgb(249,33,26)"/><text x="20.9546%" y="175.50"></text></g><g><title>unsafety_check_result (227,122 samples, 0.15%)</title><rect x="20.7478%" y="149" width="0.1474%" height="15" fill="rgb(235,183,28)"/><text x="20.9978%" y="159.50"></text></g><g><title>mir_built (202,602 samples, 0.13%)</title><rect x="20.7637%" y="133" width="0.1315%" height="15" fill="rgb(221,5,38)"/><text x="21.0137%" y="143.50"></text></g><g><title>mir_promoted (13,879,412 samples, 9.01%)</title><rect x="11.9208%" y="197" width="9.0071%" height="15" fill="rgb(247,18,42)"/><text x="12.1708%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (750,279 samples, 0.49%)</title><rect x="20.4410%" y="181" width="0.4869%" height="15" fill="rgb(241,131,45)"/><text x="20.6910%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (514,673 samples, 0.33%)</title><rect x="20.9282%" y="197" width="0.3340%" height="15" fill="rgb(249,31,29)"/><text x="21.1782%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (389,525 samples, 0.25%)</title><rect x="21.2622%" y="197" width="0.2528%" height="15" fill="rgb(225,111,53)"/><text x="21.5122%" y="207.50"></text></g><g><title>normalize_projection_ty (248,244 samples, 0.16%)</title><rect x="21.3539%" y="181" width="0.1611%" height="15" fill="rgb(238,160,17)"/><text x="21.6039%" y="191.50"></text></g><g><title>type_op_normalize_predicate (556,166 samples, 0.36%)</title><rect x="21.5150%" y="197" width="0.3609%" height="15" fill="rgb(214,148,48)"/><text x="21.7650%" y="207.50"></text></g><g><title>normalize_projection_ty (354,444 samples, 0.23%)</title><rect x="21.6459%" y="181" width="0.2300%" height="15" fill="rgb(232,36,49)"/><text x="21.8959%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,990,449 samples, 1.29%)</title><rect x="21.8808%" y="197" width="1.2917%" height="15" fill="rgb(209,103,24)"/><text x="22.1308%" y="207.50"></text></g><g><title>MIR_borrow_checking (34,705,844 samples, 22.52%)</title><rect x="0.6630%" y="229" width="22.5225%" height="15" fill="rgb(229,88,8)"/><text x="0.9130%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,477,013 samples, 22.37%)</title><rect x="0.8115%" y="213" width="22.3740%" height="15" fill="rgb(213,181,19)"/><text x="1.0615%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (304,563 samples, 0.20%)</title><rect x="23.1855%" y="229" width="0.1976%" height="15" fill="rgb(254,191,54)"/><text x="23.4355%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (225,442 samples, 0.15%)</title><rect x="23.2369%" y="213" width="0.1463%" height="15" fill="rgb(241,83,37)"/><text x="23.4869%" y="223.50"></text></g><g><title>hir_module_items (224,782 samples, 0.15%)</title><rect x="23.3832%" y="229" width="0.1459%" height="15" fill="rgb(233,36,39)"/><text x="23.6332%" y="239.50"></text></g><g><title>should_inherit_track_caller (295,773 samples, 0.19%)</title><rect x="23.8647%" y="181" width="0.1919%" height="15" fill="rgb(226,3,54)"/><text x="24.1147%" y="191.50"></text></g><g><title>codegen_fn_attrs (520,926 samples, 0.34%)</title><rect x="23.7283%" y="197" width="0.3381%" height="15" fill="rgb(245,192,40)"/><text x="23.9783%" y="207.50"></text></g><g><title>check_mod_attrs (804,919 samples, 0.52%)</title><rect x="23.5442%" y="213" width="0.5224%" height="15" fill="rgb(238,167,29)"/><text x="23.7942%" y="223.50"></text></g><g><title>check_mod_const_bodies (171,211 samples, 0.11%)</title><rect x="24.0665%" y="213" width="0.1111%" height="15" fill="rgb(232,182,51)"/><text x="24.3165%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (406,495 samples, 0.26%)</title><rect x="24.2353%" y="213" width="0.2638%" height="15" fill="rgb(231,60,39)"/><text x="24.4853%" y="223.50"></text></g><g><title>misc_checking_1 (1,541,257 samples, 1.00%)</title><rect x="23.5295%" y="229" width="1.0002%" height="15" fill="rgb(208,69,12)"/><text x="23.7795%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (504,435 samples, 0.33%)</title><rect x="24.5307%" y="213" width="0.3274%" height="15" fill="rgb(235,93,37)"/><text x="24.7807%" y="223.50"></text></g><g><title>check_mod_liveness (388,373 samples, 0.25%)</title><rect x="24.6060%" y="197" width="0.2520%" height="15" fill="rgb(213,116,39)"/><text x="24.8560%" y="207.50"></text></g><g><title>misc_checking_2 (1,375,005 samples, 0.89%)</title><rect x="24.5297%" y="229" width="0.8923%" height="15" fill="rgb(222,207,29)"/><text x="24.7797%" y="239.50"></text></g><g><title>match_checking (869,000 samples, 0.56%)</title><rect x="24.8580%" y="213" width="0.5639%" height="15" fill="rgb(206,96,30)"/><text x="25.1080%" y="223.50"></text></g><g><title>check_match (816,450 samples, 0.53%)</title><rect x="24.8921%" y="197" width="0.5298%" height="15" fill="rgb(218,138,4)"/><text x="25.1421%" y="207.50"></text></g><g><title>check_private_in_public (247,283 samples, 0.16%)</title><rect x="25.4285%" y="213" width="0.1605%" height="15" fill="rgb(250,191,14)"/><text x="25.6785%" y="223.50"></text></g><g><title>death_checking (546,946 samples, 0.35%)</title><rect x="25.5889%" y="213" width="0.3549%" height="15" fill="rgb(239,60,40)"/><text x="25.8389%" y="223.50"></text></g><g><title>eval_to_const_value_raw (293,183 samples, 0.19%)</title><rect x="26.7987%" y="69" width="0.1903%" height="15" fill="rgb(206,27,48)"/><text x="27.0487%" y="79.50"></text></g><g><title>eval_to_const_value_raw (292,343 samples, 0.19%)</title><rect x="26.7992%" y="53" width="0.1897%" height="15" fill="rgb(225,35,8)"/><text x="27.0492%" y="63.50"></text></g><g><title>eval_to_allocation_raw (290,133 samples, 0.19%)</title><rect x="26.8006%" y="37" width="0.1883%" height="15" fill="rgb(250,213,24)"/><text x="27.0506%" y="47.50"></text></g><g><title>eval_to_const_value_raw (460,225 samples, 0.30%)</title><rect x="26.6931%" y="133" width="0.2987%" height="15" fill="rgb(247,123,22)"/><text x="26.9431%" y="143.50"></text></g><g><title>eval_to_const_value_raw (459,095 samples, 0.30%)</title><rect x="26.6938%" y="117" width="0.2979%" height="15" fill="rgb(231,138,38)"/><text x="26.9438%" y="127.50"></text></g><g><title>eval_to_allocation_raw (457,555 samples, 0.30%)</title><rect x="26.6948%" y="101" width="0.2969%" height="15" fill="rgb(231,145,46)"/><text x="26.9448%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (301,643 samples, 0.20%)</title><rect x="26.7960%" y="85" width="0.1958%" height="15" fill="rgb(251,118,11)"/><text x="27.0460%" y="95.50"></text></g><g><title>eval_to_allocation_raw (766,138 samples, 0.50%)</title><rect x="26.4980%" y="181" width="0.4972%" height="15" fill="rgb(217,147,25)"/><text x="26.7480%" y="191.50"></text></g><g><title>eval_to_allocation_raw (760,738 samples, 0.49%)</title><rect x="26.5015%" y="165" width="0.4937%" height="15" fill="rgb(247,81,37)"/><text x="26.7515%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (488,815 samples, 0.32%)</title><rect x="26.6780%" y="149" width="0.3172%" height="15" fill="rgb(209,12,38)"/><text x="26.9280%" y="159.50"></text></g><g><title>param_env (164,111 samples, 0.11%)</title><rect x="27.0814%" y="181" width="0.1065%" height="15" fill="rgb(227,1,9)"/><text x="27.3314%" y="191.50"></text></g><g><title>crate_lints (3,049,083 samples, 1.98%)</title><rect x="25.9450%" y="197" width="1.9787%" height="15" fill="rgb(248,47,43)"/><text x="26.1950%" y="207.50">c..</text></g><g><title>type_of (1,082,454 samples, 0.70%)</title><rect x="27.2212%" y="181" width="0.7025%" height="15" fill="rgb(221,10,30)"/><text x="27.4712%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (853,222 samples, 0.55%)</title><rect x="27.3700%" y="165" width="0.5537%" height="15" fill="rgb(210,229,1)"/><text x="27.6200%" y="175.50"></text></g><g><title>lint_checking (3,534,749 samples, 2.29%)</title><rect x="25.9439%" y="213" width="2.2939%" height="15" fill="rgb(222,148,37)"/><text x="26.1939%" y="223.50">l..</text></g><g><title>module_lints (483,966 samples, 0.31%)</title><rect x="27.9237%" y="197" width="0.3141%" height="15" fill="rgb(234,67,33)"/><text x="28.1737%" y="207.50"></text></g><g><title>lint_mod (478,566 samples, 0.31%)</title><rect x="27.9272%" y="181" width="0.3106%" height="15" fill="rgb(247,98,35)"/><text x="28.1772%" y="191.50"></text></g><g><title>privacy_access_levels (356,774 samples, 0.23%)</title><rect x="28.2378%" y="213" width="0.2315%" height="15" fill="rgb(247,138,52)"/><text x="28.4878%" y="223.50"></text></g><g><title>privacy_checking_modules (915,730 samples, 0.59%)</title><rect x="28.4693%" y="213" width="0.5943%" height="15" fill="rgb(213,79,30)"/><text x="28.7193%" y="223.50"></text></g><g><title>check_mod_privacy (912,200 samples, 0.59%)</title><rect x="28.4716%" y="197" width="0.5920%" height="15" fill="rgb(246,177,23)"/><text x="28.7216%" y="207.50"></text></g><g><title>misc_checking_3 (5,631,242 samples, 3.65%)</title><rect x="25.4220%" y="229" width="3.6544%" height="15" fill="rgb(230,62,27)"/><text x="25.6720%" y="239.50">misc..</text></g><g><title>adt_destructor (281,963 samples, 0.18%)</title><rect x="29.1817%" y="181" width="0.1830%" height="15" fill="rgb(216,154,8)"/><text x="29.4317%" y="191.50"></text></g><g><title>coherent_trait (278,503 samples, 0.18%)</title><rect x="29.1840%" y="165" width="0.1807%" height="15" fill="rgb(244,35,45)"/><text x="29.4340%" y="175.50"></text></g><g><title>specialization_graph_of (277,273 samples, 0.18%)</title><rect x="29.1847%" y="149" width="0.1799%" height="15" fill="rgb(251,115,12)"/><text x="29.4347%" y="159.50"></text></g><g><title>impl_parent (2,734,961 samples, 1.77%)</title><rect x="32.5681%" y="165" width="1.7749%" height="15" fill="rgb(240,54,50)"/><text x="32.8181%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,616,781 samples, 1.05%)</title><rect x="33.2938%" y="149" width="1.0492%" height="15" fill="rgb(233,84,52)"/><text x="33.5438%" y="159.50"></text></g><g><title>impl_trait_ref (5,769,585 samples, 3.74%)</title><rect x="34.3430%" y="165" width="3.7442%" height="15" fill="rgb(207,117,47)"/><text x="34.5930%" y="175.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,629,978 samples, 3.00%)</title><rect x="35.0825%" y="149" width="3.0046%" height="15" fill="rgb(249,43,39)"/><text x="35.3325%" y="159.50">met..</text></g><g><title>trait_impls_of (946,393 samples, 0.61%)</title><rect x="38.1020%" y="165" width="0.6142%" height="15" fill="rgb(209,38,44)"/><text x="38.3520%" y="175.50"></text></g><g><title>implementations_of_trait (272,413 samples, 0.18%)</title><rect x="38.5393%" y="149" width="0.1768%" height="15" fill="rgb(236,212,23)"/><text x="38.7893%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (214,613 samples, 0.14%)</title><rect x="38.5768%" y="133" width="0.1393%" height="15" fill="rgb(242,79,21)"/><text x="38.8268%" y="143.50"></text></g><g><title>coherent_trait (14,737,873 samples, 9.56%)</title><rect x="29.1525%" y="197" width="9.5642%" height="15" fill="rgb(211,96,35)"/><text x="29.4025%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (14,271,519 samples, 9.26%)</title><rect x="29.4551%" y="181" width="9.2616%" height="15" fill="rgb(253,215,40)"/><text x="29.7051%" y="191.50">specializatio..</text></g><g><title>coherence_checking (14,874,865 samples, 9.65%)</title><rect x="29.1377%" y="213" width="9.6531%" height="15" fill="rgb(211,81,21)"/><text x="29.3877%" y="223.50">coherence_chec..</text></g><g><title>associated_item (431,664 samples, 0.28%)</title><rect x="53.5026%" y="149" width="0.2801%" height="15" fill="rgb(208,190,38)"/><text x="53.7526%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (168,232 samples, 0.11%)</title><rect x="53.6736%" y="133" width="0.1092%" height="15" fill="rgb(235,213,38)"/><text x="53.9236%" y="143.50"></text></g><g><title>associated_items (535,944 samples, 0.35%)</title><rect x="53.4458%" y="165" width="0.3478%" height="15" fill="rgb(237,122,38)"/><text x="53.6958%" y="175.50"></text></g><g><title>adt_dtorck_constraint (171,952 samples, 0.11%)</title><rect x="53.8967%" y="149" width="0.1116%" height="15" fill="rgb(244,218,35)"/><text x="54.1467%" y="159.50"></text></g><g><title>dropck_outlives (290,276 samples, 0.19%)</title><rect x="53.8271%" y="165" width="0.1884%" height="15" fill="rgb(240,68,47)"/><text x="54.0771%" y="175.50"></text></g><g><title>evaluate_obligation (1,401,219 samples, 0.91%)</title><rect x="54.0155%" y="165" width="0.9093%" height="15" fill="rgb(210,16,53)"/><text x="54.2655%" y="175.50"></text></g><g><title>item_attrs (165,321 samples, 0.11%)</title><rect x="55.1112%" y="165" width="0.1073%" height="15" fill="rgb(235,124,12)"/><text x="55.3612%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (158,661 samples, 0.10%)</title><rect x="55.1155%" y="149" width="0.1030%" height="15" fill="rgb(224,169,11)"/><text x="55.3655%" y="159.50"></text></g><g><title>method_autoderef_steps (259,652 samples, 0.17%)</title><rect x="55.2613%" y="165" width="0.1685%" height="15" fill="rgb(250,166,2)"/><text x="55.5113%" y="175.50"></text></g><g><title>predicates_of (241,584 samples, 0.16%)</title><rect x="55.5714%" y="165" width="0.1568%" height="15" fill="rgb(242,216,29)"/><text x="55.8214%" y="175.50"></text></g><g><title>predicates_defined_on (165,434 samples, 0.11%)</title><rect x="55.6208%" y="149" width="0.1074%" height="15" fill="rgb(230,116,27)"/><text x="55.8708%" y="159.50"></text></g><g><title>adt_def (448,055 samples, 0.29%)</title><rect x="58.9844%" y="133" width="0.2908%" height="15" fill="rgb(228,99,48)"/><text x="59.2344%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (445,705 samples, 0.29%)</title><rect x="58.9859%" y="117" width="0.2892%" height="15" fill="rgb(253,11,6)"/><text x="59.2359%" y="127.50"></text></g><g><title>item_attrs (416,425 samples, 0.27%)</title><rect x="59.0049%" y="101" width="0.2702%" height="15" fill="rgb(247,143,39)"/><text x="59.2549%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (413,505 samples, 0.27%)</title><rect x="59.0068%" y="85" width="0.2683%" height="15" fill="rgb(236,97,10)"/><text x="59.2568%" y="95.50"></text></g><g><title>adt_sized_constraint (497,325 samples, 0.32%)</title><rect x="58.9746%" y="149" width="0.3227%" height="15" fill="rgb(233,208,19)"/><text x="59.2246%" y="159.50"></text></g><g><title>associated_item (275,863 samples, 0.18%)</title><rect x="59.3641%" y="133" width="0.1790%" height="15" fill="rgb(216,164,2)"/><text x="59.6141%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (214,533 samples, 0.14%)</title><rect x="59.4039%" y="117" width="0.1392%" height="15" fill="rgb(220,129,5)"/><text x="59.6539%" y="127.50"></text></g><g><title>associated_items (391,505 samples, 0.25%)</title><rect x="59.3018%" y="149" width="0.2541%" height="15" fill="rgb(242,17,10)"/><text x="59.5518%" y="159.50"></text></g><g><title>dropck_outlives (232,843 samples, 0.15%)</title><rect x="59.5839%" y="149" width="0.1511%" height="15" fill="rgb(242,107,0)"/><text x="59.8339%" y="159.50"></text></g><g><title>generics_of (805,940 samples, 0.52%)</title><rect x="60.9489%" y="133" width="0.5230%" height="15" fill="rgb(251,28,31)"/><text x="61.1989%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (677,626 samples, 0.44%)</title><rect x="61.0322%" y="117" width="0.4397%" height="15" fill="rgb(233,223,10)"/><text x="61.2822%" y="127.50"></text></g><g><title>predicates_of (189,371 samples, 0.12%)</title><rect x="61.5302%" y="133" width="0.1229%" height="15" fill="rgb(215,21,27)"/><text x="61.7802%" y="143.50"></text></g><g><title>specializes (160,522 samples, 0.10%)</title><rect x="61.6531%" y="133" width="0.1042%" height="15" fill="rgb(232,23,21)"/><text x="61.9031%" y="143.50"></text></g><g><title>trait_impls_of (276,913 samples, 0.18%)</title><rect x="61.7628%" y="133" width="0.1797%" height="15" fill="rgb(244,5,23)"/><text x="62.0128%" y="143.50"></text></g><g><title>evaluate_obligation (3,412,150 samples, 2.21%)</title><rect x="59.7350%" y="149" width="2.2143%" height="15" fill="rgb(226,81,46)"/><text x="59.9850%" y="159.50">e..</text></g><g><title>evaluate_obligation (170,051 samples, 0.11%)</title><rect x="62.3784%" y="133" width="0.1104%" height="15" fill="rgb(247,70,30)"/><text x="62.6284%" y="143.50"></text></g><g><title>method_autoderef_steps (333,462 samples, 0.22%)</title><rect x="62.2771%" y="149" width="0.2164%" height="15" fill="rgb(212,68,19)"/><text x="62.5271%" y="159.50"></text></g><g><title>predicates_of (237,382 samples, 0.15%)</title><rect x="62.5063%" y="149" width="0.1541%" height="15" fill="rgb(240,187,13)"/><text x="62.7563%" y="159.50"></text></g><g><title>predicates_defined_on (171,222 samples, 0.11%)</title><rect x="62.5493%" y="133" width="0.1111%" height="15" fill="rgb(223,113,26)"/><text x="62.7993%" y="143.50"></text></g><g><title>typeck (10,719,968 samples, 6.96%)</title><rect x="55.7906%" y="165" width="6.9568%" height="15" fill="rgb(206,192,2)"/><text x="56.0406%" y="175.50">typeck</text></g><g><title>item_bodies_checking (36,958,388 samples, 23.98%)</title><rect x="38.8173%" y="213" width="23.9843%" height="15" fill="rgb(241,108,4)"/><text x="39.0673%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,955,458 samples, 23.98%)</title><rect x="38.8192%" y="197" width="23.9824%" height="15" fill="rgb(247,173,49)"/><text x="39.0692%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (36,809,946 samples, 23.89%)</title><rect x="38.9136%" y="181" width="23.8880%" height="15" fill="rgb(224,114,35)"/><text x="39.1636%" y="191.50">typeck</text></g><g><title>layout_of (178,931 samples, 0.12%)</title><rect x="63.4590%" y="181" width="0.1161%" height="15" fill="rgb(245,159,27)"/><text x="63.7090%" y="191.50"></text></g><g><title>item_types_checking (1,892,981 samples, 1.23%)</title><rect x="62.8016%" y="213" width="1.2285%" height="15" fill="rgb(245,172,44)"/><text x="63.0516%" y="223.50"></text></g><g><title>check_mod_item_types (1,887,141 samples, 1.22%)</title><rect x="62.8054%" y="197" width="1.2247%" height="15" fill="rgb(236,23,11)"/><text x="63.0554%" y="207.50"></text></g><g><title>typeck (668,238 samples, 0.43%)</title><rect x="63.5964%" y="181" width="0.4337%" height="15" fill="rgb(205,117,38)"/><text x="63.8464%" y="191.50"></text></g><g><title>late_bound_vars_map (156,841 samples, 0.10%)</title><rect x="64.4657%" y="165" width="0.1018%" height="15" fill="rgb(237,72,25)"/><text x="64.7157%" y="175.50"></text></g><g><title>fn_sig (492,514 samples, 0.32%)</title><rect x="64.2805%" y="181" width="0.3196%" height="15" fill="rgb(244,70,9)"/><text x="64.5305%" y="191.50"></text></g><g><title>is_late_bound_map (290,963 samples, 0.19%)</title><rect x="64.6963%" y="165" width="0.1888%" height="15" fill="rgb(217,125,39)"/><text x="64.9463%" y="175.50"></text></g><g><title>resolve_lifetimes (284,153 samples, 0.18%)</title><rect x="64.7008%" y="149" width="0.1844%" height="15" fill="rgb(235,36,10)"/><text x="64.9508%" y="159.50"></text></g><g><title>lint_levels (173,652 samples, 0.11%)</title><rect x="64.7725%" y="133" width="0.1127%" height="15" fill="rgb(251,123,47)"/><text x="65.0225%" y="143.50"></text></g><g><title>named_region_map (230,464 samples, 0.15%)</title><rect x="64.8852%" y="165" width="0.1496%" height="15" fill="rgb(221,13,13)"/><text x="65.1352%" y="175.50"></text></g><g><title>resolve_lifetimes (213,474 samples, 0.14%)</title><rect x="64.8962%" y="149" width="0.1385%" height="15" fill="rgb(238,131,9)"/><text x="65.1462%" y="159.50"></text></g><g><title>generics_of (694,588 samples, 0.45%)</title><rect x="64.6001%" y="181" width="0.4508%" height="15" fill="rgb(211,50,8)"/><text x="64.8501%" y="191.50"></text></g><g><title>explicit_predicates_of (197,115 samples, 0.13%)</title><rect x="65.2408%" y="149" width="0.1279%" height="15" fill="rgb(245,182,24)"/><text x="65.4908%" y="159.50"></text></g><g><title>predicates_of (633,658 samples, 0.41%)</title><rect x="65.1020%" y="181" width="0.4112%" height="15" fill="rgb(242,14,37)"/><text x="65.3520%" y="191.50"></text></g><g><title>predicates_defined_on (554,537 samples, 0.36%)</title><rect x="65.1533%" y="165" width="0.3599%" height="15" fill="rgb(246,228,12)"/><text x="65.4033%" y="175.50"></text></g><g><title>inferred_outlives_of (222,652 samples, 0.14%)</title><rect x="65.3687%" y="149" width="0.1445%" height="15" fill="rgb(213,55,15)"/><text x="65.6187%" y="159.50"></text></g><g><title>inferred_outlives_crate (192,692 samples, 0.13%)</title><rect x="65.3881%" y="133" width="0.1250%" height="15" fill="rgb(209,9,3)"/><text x="65.6381%" y="143.50"></text></g><g><title>type_collecting (2,467,067 samples, 1.60%)</title><rect x="64.0313%" y="213" width="1.6010%" height="15" fill="rgb(230,59,30)"/><text x="64.2813%" y="223.50"></text></g><g><title>collect_mod_item_types (2,456,587 samples, 1.59%)</title><rect x="64.0381%" y="197" width="1.5942%" height="15" fill="rgb(209,121,21)"/><text x="64.2881%" y="207.50"></text></g><g><title>type_of (170,174 samples, 0.11%)</title><rect x="65.5219%" y="181" width="0.1104%" height="15" fill="rgb(220,109,13)"/><text x="65.7719%" y="191.50"></text></g><g><title>evaluate_obligation (393,076 samples, 0.26%)</title><rect x="66.8149%" y="181" width="0.2551%" height="15" fill="rgb(232,18,1)"/><text x="67.0649%" y="191.50"></text></g><g><title>param_env (289,802 samples, 0.19%)</title><rect x="67.1425%" y="181" width="0.1881%" height="15" fill="rgb(215,41,42)"/><text x="67.3925%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,877,559 samples, 1.87%)</title><rect x="65.8015%" y="197" width="1.8674%" height="15" fill="rgb(224,123,36)"/><text x="66.0515%" y="207.50">c..</text></g><g><title>region_scope_tree (479,185 samples, 0.31%)</title><rect x="67.3579%" y="181" width="0.3110%" height="15" fill="rgb(240,125,3)"/><text x="67.6079%" y="191.50"></text></g><g><title>adt_sized_constraint (167,821 samples, 0.11%)</title><rect x="68.6631%" y="149" width="0.1089%" height="15" fill="rgb(205,98,50)"/><text x="68.9131%" y="159.50"></text></g><g><title>adt_sized_constraint (290,293 samples, 0.19%)</title><rect x="68.5880%" y="165" width="0.1884%" height="15" fill="rgb(205,185,37)"/><text x="68.8380%" y="175.50"></text></g><g><title>evaluate_obligation (737,487 samples, 0.48%)</title><rect x="68.3333%" y="181" width="0.4786%" height="15" fill="rgb(238,207,15)"/><text x="68.5833%" y="191.50"></text></g><g><title>param_env (215,153 samples, 0.14%)</title><rect x="68.8638%" y="181" width="0.1396%" height="15" fill="rgb(213,199,42)"/><text x="69.1138%" y="191.50"></text></g><g><title>check_item_well_formed (2,269,715 samples, 1.47%)</title><rect x="67.6689%" y="197" width="1.4729%" height="15" fill="rgb(235,201,11)"/><text x="67.9189%" y="207.50"></text></g><g><title>param_env (231,272 samples, 0.15%)</title><rect x="69.7028%" y="181" width="0.1501%" height="15" fill="rgb(207,46,11)"/><text x="69.9528%" y="191.50"></text></g><g><title>analysis (107,079,972 samples, 69.49%)</title><rect x="0.4383%" y="245" width="69.4900%" height="15" fill="rgb(241,35,35)"/><text x="0.6883%" y="255.50">analysis</text></g><g><title>type_check_crate (62,950,375 samples, 40.85%)</title><rect x="29.0764%" y="229" width="40.8519%" height="15" fill="rgb(243,32,47)"/><text x="29.3264%" y="239.50">type_check_crate</text></g><g><title>wf_checking (6,608,323 samples, 4.29%)</title><rect x="65.6398%" y="213" width="4.2885%" height="15" fill="rgb(247,202,23)"/><text x="65.8898%" y="223.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,211,964 samples, 0.79%)</title><rect x="69.1418%" y="197" width="0.7865%" height="15" fill="rgb(219,102,11)"/><text x="69.3918%" y="207.50"></text></g><g><title>codegen_crate (646,897 samples, 0.42%)</title><rect x="69.9361%" y="245" width="0.4198%" height="15" fill="rgb(243,110,44)"/><text x="70.1861%" y="255.50"></text></g><g><title>metadata_load_macro (275,143 samples, 0.18%)</title><rect x="84.6433%" y="197" width="0.1786%" height="15" fill="rgb(222,74,54)"/><text x="84.8933%" y="207.50"></text></g><g><title>metadata_register_crate (2,758,110 samples, 1.79%)</title><rect x="84.8218%" y="197" width="1.7899%" height="15" fill="rgb(216,99,12)"/><text x="85.0718%" y="207.50">m..</text></g><g><title>metadata_register_crate (996,880 samples, 0.65%)</title><rect x="85.9648%" y="181" width="0.6469%" height="15" fill="rgb(226,22,26)"/><text x="86.2148%" y="191.50"></text></g><g><title>macro_expand_crate (24,909,495 samples, 16.17%)</title><rect x="70.7043%" y="229" width="16.1651%" height="15" fill="rgb(217,163,10)"/><text x="70.9543%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (24,889,725 samples, 16.15%)</title><rect x="70.7172%" y="213" width="16.1523%" height="15" fill="rgb(213,25,53)"/><text x="70.9672%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (397,185 samples, 0.26%)</title><rect x="86.6117%" y="197" width="0.2578%" height="15" fill="rgb(252,105,26)"/><text x="86.8617%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (371,574 samples, 0.24%)</title><rect x="86.8722%" y="229" width="0.2411%" height="15" fill="rgb(220,39,43)"/><text x="87.1222%" y="239.50"></text></g><g><title>finalize_macro_resolutions (156,321 samples, 0.10%)</title><rect x="87.1337%" y="213" width="0.1014%" height="15" fill="rgb(229,68,48)"/><text x="87.3837%" y="223.50"></text></g><g><title>late_resolve_crate (2,255,235 samples, 1.46%)</title><rect x="87.2352%" y="213" width="1.4635%" height="15" fill="rgb(252,8,32)"/><text x="87.4852%" y="223.50"></text></g><g><title>configure_and_expand (28,392,893 samples, 18.43%)</title><rect x="70.3559%" y="245" width="18.4257%" height="15" fill="rgb(223,20,43)"/><text x="70.6059%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,570,769 samples, 1.67%)</title><rect x="87.1133%" y="229" width="1.6683%" height="15" fill="rgb(229,81,49)"/><text x="87.3633%" y="239.50"></text></g><g><title>drop_ast (239,873 samples, 0.16%)</title><rect x="88.7816%" y="245" width="0.1557%" height="15" fill="rgb(236,28,36)"/><text x="89.0316%" y="255.50"></text></g><g><title>early_lint_checks (461,975 samples, 0.30%)</title><rect x="88.9480%" y="245" width="0.2998%" height="15" fill="rgb(249,185,26)"/><text x="89.1980%" y="255.50"></text></g><g><title>free_global_ctxt (4,064,684 samples, 2.64%)</title><rect x="89.2478%" y="245" width="2.6378%" height="15" fill="rgb(249,174,33)"/><text x="89.4978%" y="255.50">fr..</text></g><g><title>generate_crate_metadata (1,406,776 samples, 0.91%)</title><rect x="91.8855%" y="245" width="0.9129%" height="15" fill="rgb(233,201,37)"/><text x="92.1355%" y="255.50"></text></g><g><title>hir_lowering (3,439,828 samples, 2.23%)</title><rect x="92.7985%" y="245" width="2.2323%" height="15" fill="rgb(221,78,26)"/><text x="93.0485%" y="255.50">h..</text></g><g><title>parse_crate (6,046,907 samples, 3.92%)</title><rect x="95.0680%" y="245" width="3.9242%" height="15" fill="rgb(250,127,30)"/><text x="95.3180%" y="255.50">pars..</text></g><g><title>prepare_outputs (177,632 samples, 0.12%)</title><rect x="98.9981%" y="245" width="0.1153%" height="15" fill="rgb(230,49,44)"/><text x="99.2481%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (948,831 samples, 0.62%)</title><rect x="99.1133%" y="245" width="0.6157%" height="15" fill="rgb(229,67,23)"/><text x="99.3633%" y="255.50"></text></g><g><title>all (154,094,032 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (154,094,032 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (333,114 samples, 0.22%)</title><rect x="99.7838%" y="245" width="0.2162%" height="15" fill="rgb(238,154,13)"/><text x="100.0338%" y="255.50"></text></g></svg></svg>