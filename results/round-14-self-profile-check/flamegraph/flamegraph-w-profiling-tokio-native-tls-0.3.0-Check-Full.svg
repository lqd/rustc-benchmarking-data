<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (224,243 samples, 0.23%)</title><rect x="7.1436%" y="229" width="0.2270%" height="15" fill="rgb(227,0,7)"/><text x="7.3936%" y="239.50"></text></g><g><title>item_attrs (108,010 samples, 0.11%)</title><rect x="7.6705%" y="197" width="0.1093%" height="15" fill="rgb(217,0,24)"/><text x="7.9205%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (102,420 samples, 0.10%)</title><rect x="7.6762%" y="181" width="0.1037%" height="15" fill="rgb(221,193,54)"/><text x="7.9262%" y="191.50"></text></g><g><title>codegen_fn_attrs (194,960 samples, 0.20%)</title><rect x="7.5952%" y="213" width="0.1973%" height="15" fill="rgb(248,212,6)"/><text x="7.8452%" y="223.50"></text></g><g><title>adt_drop_tys (133,072 samples, 0.13%)</title><rect x="9.1794%" y="181" width="0.1347%" height="15" fill="rgb(208,68,35)"/><text x="9.4294%" y="191.50"></text></g><g><title>needs_drop_raw (780,912 samples, 0.79%)</title><rect x="9.0818%" y="197" width="0.7904%" height="15" fill="rgb(232,128,0)"/><text x="9.3318%" y="207.50"></text></g><g><title>is_copy_raw (551,420 samples, 0.56%)</title><rect x="9.3141%" y="181" width="0.5581%" height="15" fill="rgb(207,160,47)"/><text x="9.5641%" y="191.50"></text></g><g><title>evaluate_obligation (443,859 samples, 0.45%)</title><rect x="9.4230%" y="165" width="0.4493%" height="15" fill="rgb(228,23,34)"/><text x="9.6730%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (126,571 samples, 0.13%)</title><rect x="9.9980%" y="181" width="0.1281%" height="15" fill="rgb(218,30,26)"/><text x="10.2480%" y="191.50"></text></g><g><title>specialization_graph_of (239,892 samples, 0.24%)</title><rect x="10.1676%" y="181" width="0.2428%" height="15" fill="rgb(220,122,19)"/><text x="10.4176%" y="191.50"></text></g><g><title>resolve_instance (573,167 samples, 0.58%)</title><rect x="9.8723%" y="197" width="0.5802%" height="15" fill="rgb(250,228,42)"/><text x="10.1223%" y="207.50"></text></g><g><title>thir_body (419,536 samples, 0.42%)</title><rect x="10.4739%" y="197" width="0.4247%" height="15" fill="rgb(240,193,28)"/><text x="10.7239%" y="207.50"></text></g><g><title>mir_const (4,075,419 samples, 4.13%)</title><rect x="6.7860%" y="245" width="4.1252%" height="15" fill="rgb(216,20,37)"/><text x="7.0360%" y="255.50">mir_..</text></g><g><title>unsafety_check_result (3,497,860 samples, 3.54%)</title><rect x="7.3706%" y="229" width="3.5405%" height="15" fill="rgb(206,188,39)"/><text x="7.6206%" y="239.50">unsa..</text></g><g><title>mir_built (3,080,974 samples, 3.12%)</title><rect x="7.7926%" y="213" width="3.1186%" height="15" fill="rgb(217,207,13)"/><text x="8.0426%" y="223.50">mir..</text></g><g><title>mir_promoted (4,478,133 samples, 4.53%)</title><rect x="6.3967%" y="261" width="4.5328%" height="15" fill="rgb(231,73,38)"/><text x="6.6467%" y="271.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (192,992 samples, 0.20%)</title><rect x="10.9295%" y="261" width="0.1953%" height="15" fill="rgb(225,20,46)"/><text x="11.1795%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (224,774 samples, 0.23%)</title><rect x="11.1248%" y="261" width="0.2275%" height="15" fill="rgb(210,31,41)"/><text x="11.3748%" y="271.50"></text></g><g><title>normalize_projection_ty (138,472 samples, 0.14%)</title><rect x="11.2122%" y="245" width="0.1402%" height="15" fill="rgb(221,200,47)"/><text x="11.4622%" y="255.50"></text></g><g><title>type_op_prove_predicate (1,701,769 samples, 1.72%)</title><rect x="11.4259%" y="261" width="1.7225%" height="15" fill="rgb(226,26,5)"/><text x="11.6759%" y="271.50"></text></g><g><title>MIR_borrow_checking (12,320,237 samples, 12.47%)</title><rect x="0.6848%" y="293" width="12.4706%" height="15" fill="rgb(249,33,26)"/><text x="0.9348%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,255,015 samples, 12.40%)</title><rect x="0.7509%" y="277" width="12.4046%" height="15" fill="rgb(235,183,28)"/><text x="1.0009%" y="287.50">mir_borrowck</text></g><g><title>hir_module_items (138,421 samples, 0.14%)</title><rect x="13.1738%" y="293" width="0.1401%" height="15" fill="rgb(221,5,38)"/><text x="13.4238%" y="303.50"></text></g><g><title>codegen_fn_attrs (168,253 samples, 0.17%)</title><rect x="13.6747%" y="229" width="0.1703%" height="15" fill="rgb(247,18,42)"/><text x="13.9247%" y="239.50"></text></g><g><title>should_inherit_track_caller (243,104 samples, 0.25%)</title><rect x="13.6039%" y="245" width="0.2461%" height="15" fill="rgb(241,131,45)"/><text x="13.8539%" y="255.50"></text></g><g><title>codegen_fn_attrs (393,445 samples, 0.40%)</title><rect x="13.4747%" y="261" width="0.3982%" height="15" fill="rgb(249,31,29)"/><text x="13.7247%" y="271.50"></text></g><g><title>check_mod_attrs (536,636 samples, 0.54%)</title><rect x="13.3299%" y="277" width="0.5432%" height="15" fill="rgb(225,111,53)"/><text x="13.5799%" y="287.50"></text></g><g><title>lookup_deprecation_entry (105,120 samples, 0.11%)</title><rect x="14.1297%" y="261" width="0.1064%" height="15" fill="rgb(238,160,17)"/><text x="14.3797%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (308,224 samples, 0.31%)</title><rect x="13.9924%" y="277" width="0.3120%" height="15" fill="rgb(214,148,48)"/><text x="14.2424%" y="287.50"></text></g><g><title>misc_checking_1 (1,029,462 samples, 1.04%)</title><rect x="13.3143%" y="293" width="1.0420%" height="15" fill="rgb(232,36,49)"/><text x="13.5643%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (372,434 samples, 0.38%)</title><rect x="14.3577%" y="277" width="0.3770%" height="15" fill="rgb(209,103,24)"/><text x="14.6077%" y="287.50"></text></g><g><title>check_mod_liveness (314,054 samples, 0.32%)</title><rect x="14.4168%" y="261" width="0.3179%" height="15" fill="rgb(229,88,8)"/><text x="14.6668%" y="271.50"></text></g><g><title>misc_checking_2 (682,137 samples, 0.69%)</title><rect x="14.3563%" y="293" width="0.6905%" height="15" fill="rgb(213,181,19)"/><text x="14.6063%" y="303.50"></text></g><g><title>match_checking (308,313 samples, 0.31%)</title><rect x="14.7347%" y="277" width="0.3121%" height="15" fill="rgb(254,191,54)"/><text x="14.9847%" y="287.50"></text></g><g><title>check_match (288,543 samples, 0.29%)</title><rect x="14.7547%" y="261" width="0.2921%" height="15" fill="rgb(241,83,37)"/><text x="15.0047%" y="271.50"></text></g><g><title>check_private_in_public (141,441 samples, 0.14%)</title><rect x="15.0566%" y="277" width="0.1432%" height="15" fill="rgb(233,36,39)"/><text x="15.3066%" y="287.50"></text></g><g><title>death_checking (272,553 samples, 0.28%)</title><rect x="15.1998%" y="277" width="0.2759%" height="15" fill="rgb(226,3,54)"/><text x="15.4498%" y="287.50"></text></g><g><title>param_env (145,652 samples, 0.15%)</title><rect x="16.5316%" y="245" width="0.1474%" height="15" fill="rgb(245,192,40)"/><text x="16.7816%" y="255.50"></text></g><g><title>crate_lints (2,510,498 samples, 2.54%)</title><rect x="15.4773%" y="261" width="2.5411%" height="15" fill="rgb(238,167,29)"/><text x="15.7273%" y="271.50">cr..</text></g><g><title>type_of (1,314,298 samples, 1.33%)</title><rect x="16.6881%" y="245" width="1.3303%" height="15" fill="rgb(232,182,51)"/><text x="16.9381%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (1,012,223 samples, 1.02%)</title><rect x="16.9939%" y="229" width="1.0246%" height="15" fill="rgb(231,60,39)"/><text x="17.2439%" y="239.50"></text></g><g><title>adt_sized_constraint (113,681 samples, 0.12%)</title><rect x="18.4631%" y="101" width="0.1151%" height="15" fill="rgb(208,69,12)"/><text x="18.7131%" y="111.50"></text></g><g><title>adt_def (110,011 samples, 0.11%)</title><rect x="18.4668%" y="85" width="0.1114%" height="15" fill="rgb(235,93,37)"/><text x="18.7168%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (109,231 samples, 0.11%)</title><rect x="18.4676%" y="69" width="0.1106%" height="15" fill="rgb(213,116,39)"/><text x="18.7176%" y="79.50"></text></g><g><title>item_attrs (102,751 samples, 0.10%)</title><rect x="18.4742%" y="53" width="0.1040%" height="15" fill="rgb(222,207,29)"/><text x="18.7242%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (102,231 samples, 0.10%)</title><rect x="18.4747%" y="37" width="0.1035%" height="15" fill="rgb(206,96,30)"/><text x="18.7247%" y="47.50"></text></g><g><title>layout_of (142,221 samples, 0.14%)</title><rect x="18.5814%" y="101" width="0.1440%" height="15" fill="rgb(218,138,4)"/><text x="18.8314%" y="111.50"></text></g><g><title>layout_of (117,871 samples, 0.12%)</title><rect x="18.6061%" y="85" width="0.1193%" height="15" fill="rgb(250,191,14)"/><text x="18.8561%" y="95.50"></text></g><g><title>layout_of (280,802 samples, 0.28%)</title><rect x="18.4489%" y="117" width="0.2842%" height="15" fill="rgb(239,60,40)"/><text x="18.6989%" y="127.50"></text></g><g><title>layout_of (340,624 samples, 0.34%)</title><rect x="18.4173%" y="133" width="0.3448%" height="15" fill="rgb(206,27,48)"/><text x="18.6673%" y="143.50"></text></g><g><title>layout_of (409,295 samples, 0.41%)</title><rect x="18.3671%" y="149" width="0.4143%" height="15" fill="rgb(225,35,8)"/><text x="18.6171%" y="159.50"></text></g><g><title>layout_of (444,135 samples, 0.45%)</title><rect x="18.3387%" y="213" width="0.4496%" height="15" fill="rgb(250,213,24)"/><text x="18.5887%" y="223.50"></text></g><g><title>layout_of (438,325 samples, 0.44%)</title><rect x="18.3446%" y="197" width="0.4437%" height="15" fill="rgb(247,123,22)"/><text x="18.5946%" y="207.50"></text></g><g><title>layout_of (430,505 samples, 0.44%)</title><rect x="18.3525%" y="181" width="0.4358%" height="15" fill="rgb(231,138,38)"/><text x="18.6025%" y="191.50"></text></g><g><title>layout_of (425,495 samples, 0.43%)</title><rect x="18.3576%" y="165" width="0.4307%" height="15" fill="rgb(231,145,46)"/><text x="18.6076%" y="175.50"></text></g><g><title>lint_checking (3,273,546 samples, 3.31%)</title><rect x="15.4757%" y="277" width="3.3135%" height="15" fill="rgb(251,118,11)"/><text x="15.7257%" y="287.50">lin..</text></g><g><title>module_lints (761,438 samples, 0.77%)</title><rect x="18.0184%" y="261" width="0.7707%" height="15" fill="rgb(217,147,25)"/><text x="18.2684%" y="271.50"></text></g><g><title>lint_mod (757,568 samples, 0.77%)</title><rect x="18.0223%" y="245" width="0.7668%" height="15" fill="rgb(247,81,37)"/><text x="18.2723%" y="255.50"></text></g><g><title>layout_of (453,345 samples, 0.46%)</title><rect x="18.3303%" y="229" width="0.4589%" height="15" fill="rgb(209,12,38)"/><text x="18.5803%" y="239.50"></text></g><g><title>privacy_access_levels (268,343 samples, 0.27%)</title><rect x="18.7892%" y="277" width="0.2716%" height="15" fill="rgb(227,1,9)"/><text x="19.0392%" y="287.50"></text></g><g><title>privacy_checking_modules (679,108 samples, 0.69%)</title><rect x="19.0608%" y="277" width="0.6874%" height="15" fill="rgb(248,47,43)"/><text x="19.3108%" y="287.50"></text></g><g><title>check_mod_privacy (677,068 samples, 0.69%)</title><rect x="19.0628%" y="261" width="0.6853%" height="15" fill="rgb(221,10,30)"/><text x="19.3128%" y="271.50"></text></g><g><title>misc_checking_3 (4,655,712 samples, 4.71%)</title><rect x="15.0467%" y="293" width="4.7125%" height="15" fill="rgb(210,229,1)"/><text x="15.2967%" y="303.50">misc_..</text></g><g><title>impl_parent (2,346,029 samples, 2.37%)</title><rect x="23.9351%" y="229" width="2.3747%" height="15" fill="rgb(222,148,37)"/><text x="24.1851%" y="239.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,490,698 samples, 1.51%)</title><rect x="24.8009%" y="213" width="1.5089%" height="15" fill="rgb(234,67,33)"/><text x="25.0509%" y="223.50"></text></g><g><title>impl_trait_ref (5,870,044 samples, 5.94%)</title><rect x="26.3097%" y="229" width="5.9417%" height="15" fill="rgb(247,98,35)"/><text x="26.5597%" y="239.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,000,922 samples, 5.06%)</title><rect x="27.1895%" y="213" width="5.0619%" height="15" fill="rgb(247,138,52)"/><text x="27.4395%" y="223.50">metada..</text></g><g><title>trait_impls_of (832,772 samples, 0.84%)</title><rect x="32.2783%" y="229" width="0.8429%" height="15" fill="rgb(213,79,30)"/><text x="32.5283%" y="239.50"></text></g><g><title>implementations_of_trait (254,506 samples, 0.26%)</title><rect x="32.8636%" y="213" width="0.2576%" height="15" fill="rgb(246,177,23)"/><text x="33.1136%" y="223.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (175,834 samples, 0.18%)</title><rect x="32.9433%" y="197" width="0.1780%" height="15" fill="rgb(230,62,27)"/><text x="33.1933%" y="207.50"></text></g><g><title>coherent_trait (13,119,956 samples, 13.28%)</title><rect x="19.8419%" y="261" width="13.2801%" height="15" fill="rgb(216,154,8)"/><text x="20.0919%" y="271.50">coherent_trait</text></g><g><title>specialization_graph_of (13,100,766 samples, 13.26%)</title><rect x="19.8613%" y="245" width="13.2606%" height="15" fill="rgb(244,35,45)"/><text x="20.1113%" y="255.50">specialization_graph..</text></g><g><title>coherence_checking (13,213,256 samples, 13.37%)</title><rect x="19.8146%" y="277" width="13.3745%" height="15" fill="rgb(251,115,12)"/><text x="20.0646%" y="287.50">coherence_checking</text></g><g><title>associated_item (212,894 samples, 0.22%)</title><rect x="39.7747%" y="213" width="0.2155%" height="15" fill="rgb(240,54,50)"/><text x="40.0247%" y="223.50"></text></g><g><title>metadata_decode_entry_associated_item (167,552 samples, 0.17%)</title><rect x="39.8206%" y="197" width="0.1696%" height="15" fill="rgb(233,84,52)"/><text x="40.0706%" y="207.50"></text></g><g><title>associated_items (321,006 samples, 0.32%)</title><rect x="39.6867%" y="229" width="0.3249%" height="15" fill="rgb(207,117,47)"/><text x="39.9367%" y="239.50"></text></g><g><title>dropck_outlives (250,732 samples, 0.25%)</title><rect x="40.0442%" y="229" width="0.2538%" height="15" fill="rgb(249,43,39)"/><text x="40.2942%" y="239.50"></text></g><g><title>evaluate_obligation (1,236,816 samples, 1.25%)</title><rect x="40.2980%" y="229" width="1.2519%" height="15" fill="rgb(209,38,44)"/><text x="40.5480%" y="239.50"></text></g><g><title>trait_impls_of (324,675 samples, 0.33%)</title><rect x="41.2213%" y="213" width="0.3286%" height="15" fill="rgb(236,212,23)"/><text x="41.4713%" y="223.50"></text></g><g><title>implementations_of_trait (117,204 samples, 0.12%)</title><rect x="41.4313%" y="197" width="0.1186%" height="15" fill="rgb(242,79,21)"/><text x="41.6813%" y="207.50"></text></g><g><title>item_attrs (99,121 samples, 0.10%)</title><rect x="41.7552%" y="229" width="0.1003%" height="15" fill="rgb(211,96,35)"/><text x="42.0052%" y="239.50"></text></g><g><title>method_autoderef_steps (150,871 samples, 0.15%)</title><rect x="41.8824%" y="229" width="0.1527%" height="15" fill="rgb(253,215,40)"/><text x="42.1324%" y="239.50"></text></g><g><title>object_safety_violations (143,151 samples, 0.14%)</title><rect x="42.0351%" y="229" width="0.1449%" height="15" fill="rgb(211,81,21)"/><text x="42.2851%" y="239.50"></text></g><g><title>predicates_of (182,112 samples, 0.18%)</title><rect x="42.1956%" y="229" width="0.1843%" height="15" fill="rgb(208,190,38)"/><text x="42.4456%" y="239.50"></text></g><g><title>predicates_defined_on (124,701 samples, 0.13%)</title><rect x="42.2537%" y="213" width="0.1262%" height="15" fill="rgb(235,213,38)"/><text x="42.5037%" y="223.50"></text></g><g><title>associated_item (132,202 samples, 0.13%)</title><rect x="46.7470%" y="197" width="0.1338%" height="15" fill="rgb(237,122,38)"/><text x="46.9970%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (104,192 samples, 0.11%)</title><rect x="46.7754%" y="181" width="0.1055%" height="15" fill="rgb(244,218,35)"/><text x="47.0254%" y="191.50"></text></g><g><title>associated_items (189,893 samples, 0.19%)</title><rect x="46.6988%" y="213" width="0.1922%" height="15" fill="rgb(240,68,47)"/><text x="46.9488%" y="223.50"></text></g><g><title>dropck_outlives (103,691 samples, 0.10%)</title><rect x="46.9196%" y="213" width="0.1050%" height="15" fill="rgb(210,16,53)"/><text x="47.1696%" y="223.50"></text></g><g><title>evaluate_obligation (555,611 samples, 0.56%)</title><rect x="47.0246%" y="213" width="0.5624%" height="15" fill="rgb(235,124,12)"/><text x="47.2746%" y="223.50"></text></g><g><title>trait_impls_of (111,011 samples, 0.11%)</title><rect x="47.4746%" y="197" width="0.1124%" height="15" fill="rgb(224,169,11)"/><text x="47.7246%" y="207.50"></text></g><g><title>is_copy_raw (244,692 samples, 0.25%)</title><rect x="47.7213%" y="213" width="0.2477%" height="15" fill="rgb(250,166,2)"/><text x="47.9713%" y="223.50"></text></g><g><title>evaluate_obligation (194,142 samples, 0.20%)</title><rect x="47.7725%" y="197" width="0.1965%" height="15" fill="rgb(242,216,29)"/><text x="48.0225%" y="207.50"></text></g><g><title>method_autoderef_steps (237,893 samples, 0.24%)</title><rect x="48.0084%" y="213" width="0.2408%" height="15" fill="rgb(230,116,27)"/><text x="48.2584%" y="223.50"></text></g><g><title>evaluate_obligation (101,100 samples, 0.10%)</title><rect x="48.1468%" y="197" width="0.1023%" height="15" fill="rgb(228,99,48)"/><text x="48.3968%" y="207.50"></text></g><g><title>typeck (5,883,806 samples, 5.96%)</title><rect x="42.4414%" y="229" width="5.9556%" height="15" fill="rgb(253,11,6)"/><text x="42.6914%" y="239.50">typeck</text></g><g><title>item_bodies_checking (15,022,127 samples, 15.21%)</title><rect x="33.2158%" y="277" width="15.2054%" height="15" fill="rgb(247,143,39)"/><text x="33.4658%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,018,257 samples, 15.20%)</title><rect x="33.2197%" y="261" width="15.2015%" height="15" fill="rgb(236,97,10)"/><text x="33.4697%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (14,978,247 samples, 15.16%)</title><rect x="33.2602%" y="245" width="15.1610%" height="15" fill="rgb(233,208,19)"/><text x="33.5102%" y="255.50">typeck</text></g><g><title>mir_borrowck (419,544 samples, 0.42%)</title><rect x="52.7740%" y="197" width="0.4247%" height="15" fill="rgb(216,164,2)"/><text x="53.0240%" y="207.50"></text></g><g><title>mir_const (129,411 samples, 0.13%)</title><rect x="53.3065%" y="181" width="0.1310%" height="15" fill="rgb(220,129,5)"/><text x="53.5565%" y="191.50"></text></g><g><title>mir_promoted (239,154 samples, 0.24%)</title><rect x="53.1987%" y="197" width="0.2421%" height="15" fill="rgb(242,17,10)"/><text x="53.4487%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (323,454 samples, 0.33%)</title><rect x="53.4408%" y="197" width="0.3274%" height="15" fill="rgb(242,107,0)"/><text x="53.6908%" y="207.50"></text></g><g><title>normalize_projection_ty (205,032 samples, 0.21%)</title><rect x="53.5606%" y="181" width="0.2075%" height="15" fill="rgb(251,28,31)"/><text x="53.8106%" y="191.50"></text></g><g><title>mir_borrowck (3,629,712 samples, 3.67%)</title><rect x="50.7525%" y="213" width="3.6740%" height="15" fill="rgb(233,223,10)"/><text x="51.0025%" y="223.50">mir_..</text></g><g><title>type_op_prove_predicate (597,292 samples, 0.60%)</title><rect x="53.8219%" y="197" width="0.6046%" height="15" fill="rgb(215,21,27)"/><text x="54.0719%" y="207.50"></text></g><g><title>needs_drop_raw (137,701 samples, 0.14%)</title><rect x="54.8806%" y="149" width="0.1394%" height="15" fill="rgb(232,23,21)"/><text x="55.1306%" y="159.50"></text></g><g><title>adt_def (122,151 samples, 0.12%)</title><rect x="60.1947%" y="101" width="0.1236%" height="15" fill="rgb(244,5,23)"/><text x="60.4447%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (120,271 samples, 0.12%)</title><rect x="60.1966%" y="85" width="0.1217%" height="15" fill="rgb(226,81,46)"/><text x="60.4466%" y="95.50"></text></g><g><title>adt_dtorck_constraint (106,801 samples, 0.11%)</title><rect x="60.3595%" y="69" width="0.1081%" height="15" fill="rgb(247,70,30)"/><text x="60.6095%" y="79.50"></text></g><g><title>adt_dtorck_constraint (124,602 samples, 0.13%)</title><rect x="60.3452%" y="85" width="0.1261%" height="15" fill="rgb(212,68,19)"/><text x="60.5952%" y="95.50"></text></g><g><title>adt_dtorck_constraint (142,402 samples, 0.14%)</title><rect x="60.3327%" y="101" width="0.1441%" height="15" fill="rgb(240,187,13)"/><text x="60.5827%" y="111.50"></text></g><g><title>adt_dtorck_constraint (339,605 samples, 0.34%)</title><rect x="60.1505%" y="117" width="0.3437%" height="15" fill="rgb(223,113,26)"/><text x="60.4005%" y="127.50"></text></g><g><title>dropck_outlives (609,667 samples, 0.62%)</title><rect x="59.9917%" y="133" width="0.6171%" height="15" fill="rgb(206,192,2)"/><text x="60.2417%" y="143.50"></text></g><g><title>normalize_projection_ty (113,231 samples, 0.11%)</title><rect x="60.4942%" y="117" width="0.1146%" height="15" fill="rgb(241,108,4)"/><text x="60.7442%" y="127.50"></text></g><g><title>evaluate_obligation (490,986 samples, 0.50%)</title><rect x="60.6123%" y="133" width="0.4970%" height="15" fill="rgb(247,173,49)"/><text x="60.8623%" y="143.50"></text></g><g><title>is_copy_raw (560,746 samples, 0.57%)</title><rect x="61.2767%" y="133" width="0.5676%" height="15" fill="rgb(224,114,35)"/><text x="61.5267%" y="143.50"></text></g><g><title>evaluate_obligation (483,746 samples, 0.49%)</title><rect x="61.3546%" y="117" width="0.4896%" height="15" fill="rgb(245,159,27)"/><text x="61.6046%" y="127.50"></text></g><g><title>trait_impls_of (202,772 samples, 0.21%)</title><rect x="61.6390%" y="101" width="0.2052%" height="15" fill="rgb(245,172,44)"/><text x="61.8890%" y="111.50"></text></g><g><title>mir_built (7,572,624 samples, 7.67%)</title><rect x="54.6640%" y="165" width="7.6650%" height="15" fill="rgb(236,23,11)"/><text x="54.9140%" y="175.50">mir_built</text></g><g><title>typeck (7,139,770 samples, 7.23%)</title><rect x="55.1021%" y="149" width="7.2269%" height="15" fill="rgb(205,117,38)"/><text x="55.3521%" y="159.50">typeck</text></g><g><title>adt_drop_tys (130,612 samples, 0.13%)</title><rect x="62.8970%" y="117" width="0.1322%" height="15" fill="rgb(237,72,25)"/><text x="63.1470%" y="127.50"></text></g><g><title>needs_drop_raw (181,512 samples, 0.18%)</title><rect x="62.8692%" y="133" width="0.1837%" height="15" fill="rgb(244,70,9)"/><text x="63.1192%" y="143.50"></text></g><g><title>thir_body (127,301 samples, 0.13%)</title><rect x="63.0619%" y="133" width="0.1289%" height="15" fill="rgb(217,125,39)"/><text x="63.3119%" y="143.50"></text></g><g><title>mir_built (760,848 samples, 0.77%)</title><rect x="62.4261%" y="149" width="0.7701%" height="15" fill="rgb(235,36,10)"/><text x="62.6761%" y="159.50"></text></g><g><title>item_attrs (376,415 samples, 0.38%)</title><rect x="63.2274%" y="117" width="0.3810%" height="15" fill="rgb(251,123,47)"/><text x="63.4774%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (375,065 samples, 0.38%)</title><rect x="63.2288%" y="101" width="0.3796%" height="15" fill="rgb(221,13,13)"/><text x="63.4788%" y="111.50"></text></g><g><title>codegen_fn_attrs (387,195 samples, 0.39%)</title><rect x="63.2176%" y="133" width="0.3919%" height="15" fill="rgb(238,131,9)"/><text x="63.4676%" y="143.50"></text></g><g><title>mir_const (9,082,010 samples, 9.19%)</title><rect x="54.5133%" y="197" width="9.1928%" height="15" fill="rgb(211,50,8)"/><text x="54.7633%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (8,963,599 samples, 9.07%)</title><rect x="54.6331%" y="181" width="9.0730%" height="15" fill="rgb(245,182,24)"/><text x="54.8831%" y="191.50">unsafety_chec..</text></g><g><title>unsafety_check_result (1,360,524 samples, 1.38%)</title><rect x="62.3290%" y="165" width="1.3771%" height="15" fill="rgb(242,14,37)"/><text x="62.5790%" y="175.50"></text></g><g><title>unsafety_check_result (502,896 samples, 0.51%)</title><rect x="63.1971%" y="149" width="0.5090%" height="15" fill="rgb(246,228,12)"/><text x="63.4471%" y="159.50"></text></g><g><title>mir_promoted (9,175,062 samples, 9.29%)</title><rect x="54.4265%" y="213" width="9.2870%" height="15" fill="rgb(213,55,15)"/><text x="54.6765%" y="223.50">mir_promoted</text></g><g><title>item_types_checking (15,423,251 samples, 15.61%)</title><rect x="48.4212%" y="277" width="15.6115%" height="15" fill="rgb(209,9,3)"/><text x="48.6712%" y="287.50">item_types_checking</text></g><g><title>check_mod_item_types (15,418,691 samples, 15.61%)</title><rect x="48.4258%" y="261" width="15.6068%" height="15" fill="rgb(230,59,30)"/><text x="48.6758%" y="271.50">check_mod_item_types</text></g><g><title>type_of (14,180,547 samples, 14.35%)</title><rect x="49.6791%" y="245" width="14.3536%" height="15" fill="rgb(209,121,21)"/><text x="49.9291%" y="255.50">type_of</text></g><g><title>mir_borrowck (14,139,107 samples, 14.31%)</title><rect x="49.7210%" y="229" width="14.3116%" height="15" fill="rgb(220,109,13)"/><text x="49.9710%" y="239.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (239,110 samples, 0.24%)</title><rect x="63.7906%" y="213" width="0.2420%" height="15" fill="rgb(232,18,1)"/><text x="64.0406%" y="223.50"></text></g><g><title>fn_sig (239,623 samples, 0.24%)</title><rect x="64.2380%" y="245" width="0.2425%" height="15" fill="rgb(215,41,42)"/><text x="64.4880%" y="255.50"></text></g><g><title>generics_of (227,614 samples, 0.23%)</title><rect x="64.4805%" y="245" width="0.2304%" height="15" fill="rgb(224,123,36)"/><text x="64.7305%" y="255.50"></text></g><g><title>late_bound_vars_map (276,712 samples, 0.28%)</title><rect x="65.1006%" y="197" width="0.2801%" height="15" fill="rgb(240,125,3)"/><text x="65.3506%" y="207.50"></text></g><g><title>resolve_lifetimes (266,372 samples, 0.27%)</title><rect x="65.1110%" y="181" width="0.2696%" height="15" fill="rgb(205,98,50)"/><text x="65.3610%" y="191.50"></text></g><g><title>explicit_predicates_of (599,484 samples, 0.61%)</title><rect x="64.8318%" y="213" width="0.6068%" height="15" fill="rgb(205,185,37)"/><text x="65.0818%" y="223.50"></text></g><g><title>predicates_of (974,589 samples, 0.99%)</title><rect x="64.7443%" y="245" width="0.9865%" height="15" fill="rgb(238,207,15)"/><text x="64.9943%" y="255.50"></text></g><g><title>predicates_defined_on (939,818 samples, 0.95%)</title><rect x="64.7794%" y="229" width="0.9513%" height="15" fill="rgb(213,199,42)"/><text x="65.0294%" y="239.50"></text></g><g><title>inferred_outlives_of (288,594 samples, 0.29%)</title><rect x="65.4386%" y="213" width="0.2921%" height="15" fill="rgb(235,201,11)"/><text x="65.6886%" y="223.50"></text></g><g><title>inferred_outlives_crate (270,003 samples, 0.27%)</title><rect x="65.4574%" y="197" width="0.2733%" height="15" fill="rgb(207,46,11)"/><text x="65.7074%" y="207.50"></text></g><g><title>type_of (135,381 samples, 0.14%)</title><rect x="65.5937%" y="181" width="0.1370%" height="15" fill="rgb(241,35,35)"/><text x="65.8437%" y="191.50"></text></g><g><title>type_collecting (1,765,499 samples, 1.79%)</title><rect x="64.0349%" y="277" width="1.7870%" height="15" fill="rgb(243,32,47)"/><text x="64.2849%" y="287.50">t..</text></g><g><title>collect_mod_item_types (1,757,279 samples, 1.78%)</title><rect x="64.0432%" y="261" width="1.7787%" height="15" fill="rgb(247,202,23)"/><text x="64.2932%" y="271.50">c..</text></g><g><title>evaluate_obligation (707,858 samples, 0.72%)</title><rect x="67.6121%" y="245" width="0.7165%" height="15" fill="rgb(219,102,11)"/><text x="67.8621%" y="255.50"></text></g><g><title>implied_outlives_bounds (249,112 samples, 0.25%)</title><rect x="68.3462%" y="245" width="0.2522%" height="15" fill="rgb(243,110,44)"/><text x="68.5962%" y="255.50"></text></g><g><title>param_env (183,991 samples, 0.19%)</title><rect x="68.5984%" y="245" width="0.1862%" height="15" fill="rgb(222,74,54)"/><text x="68.8484%" y="255.50"></text></g><g><title>region_scope_tree (194,072 samples, 0.20%)</title><rect x="68.8572%" y="245" width="0.1964%" height="15" fill="rgb(216,99,12)"/><text x="69.1072%" y="255.50"></text></g><g><title>check_impl_item_well_formed (3,055,202 samples, 3.09%)</title><rect x="65.9645%" y="261" width="3.0925%" height="15" fill="rgb(226,22,26)"/><text x="66.2145%" y="271.50">che..</text></g><g><title>adt_def (226,302 samples, 0.23%)</title><rect x="70.2816%" y="197" width="0.2291%" height="15" fill="rgb(217,163,10)"/><text x="70.5316%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (225,672 samples, 0.23%)</title><rect x="70.2823%" y="181" width="0.2284%" height="15" fill="rgb(213,25,53)"/><text x="70.5323%" y="191.50"></text></g><g><title>adt_def (130,122 samples, 0.13%)</title><rect x="70.7536%" y="165" width="0.1317%" height="15" fill="rgb(252,105,26)"/><text x="71.0036%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (129,382 samples, 0.13%)</title><rect x="70.7543%" y="149" width="0.1310%" height="15" fill="rgb(220,39,43)"/><text x="71.0043%" y="159.50"></text></g><g><title>item_attrs (119,702 samples, 0.12%)</title><rect x="70.7641%" y="133" width="0.1212%" height="15" fill="rgb(229,68,48)"/><text x="71.0141%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,872 samples, 0.12%)</title><rect x="70.7649%" y="117" width="0.1203%" height="15" fill="rgb(252,8,32)"/><text x="71.0149%" y="127.50"></text></g><g><title>adt_sized_constraint (134,682 samples, 0.14%)</title><rect x="70.7502%" y="181" width="0.1363%" height="15" fill="rgb(223,20,43)"/><text x="71.0002%" y="191.50"></text></g><g><title>adt_sized_constraint (379,116 samples, 0.38%)</title><rect x="70.5107%" y="197" width="0.3837%" height="15" fill="rgb(229,81,49)"/><text x="70.7607%" y="207.50"></text></g><g><title>adt_sized_constraint (616,488 samples, 0.62%)</title><rect x="70.2770%" y="213" width="0.6240%" height="15" fill="rgb(236,28,36)"/><text x="70.5270%" y="223.50"></text></g><g><title>adt_sized_constraint (642,308 samples, 0.65%)</title><rect x="70.2540%" y="229" width="0.6501%" height="15" fill="rgb(249,185,26)"/><text x="70.5040%" y="239.50"></text></g><g><title>adt_sized_constraint (670,808 samples, 0.68%)</title><rect x="70.2272%" y="245" width="0.6790%" height="15" fill="rgb(249,174,33)"/><text x="70.4772%" y="255.50"></text></g><g><title>evaluate_obligation (151,271 samples, 0.15%)</title><rect x="70.9062%" y="245" width="0.1531%" height="15" fill="rgb(233,201,37)"/><text x="71.1562%" y="255.50"></text></g><g><title>implied_outlives_bounds (130,211 samples, 0.13%)</title><rect x="71.0702%" y="245" width="0.1318%" height="15" fill="rgb(221,78,26)"/><text x="71.3202%" y="255.50"></text></g><g><title>param_env (261,790 samples, 0.26%)</title><rect x="71.2038%" y="245" width="0.2650%" height="15" fill="rgb(250,127,30)"/><text x="71.4538%" y="255.50"></text></g><g><title>analysis (70,436,254 samples, 71.30%)</title><rect x="0.4654%" y="309" width="71.2958%" height="15" fill="rgb(230,49,44)"/><text x="0.7154%" y="319.50">analysis</text></g><g><title>type_check_crate (51,374,971 samples, 52.00%)</title><rect x="19.7593%" y="293" width="52.0019%" height="15" fill="rgb(229,67,23)"/><text x="20.0093%" y="303.50">type_check_crate</text></g><g><title>wf_checking (5,864,526 samples, 5.94%)</title><rect x="65.8251%" y="277" width="5.9361%" height="15" fill="rgb(249,83,47)"/><text x="66.0751%" y="287.50">wf_check..</text></g><g><title>check_item_well_formed (2,671,522 samples, 2.70%)</title><rect x="69.0570%" y="261" width="2.7041%" height="15" fill="rgb(215,43,3)"/><text x="69.3070%" y="271.50">ch..</text></g><g><title>codegen_crate (728,048 samples, 0.74%)</title><rect x="71.7688%" y="309" width="0.7369%" height="15" fill="rgb(238,154,13)"/><text x="72.0188%" y="319.50"></text></g><g><title>AST_validation (99,941 samples, 0.10%)</title><rect x="72.6620%" y="293" width="0.1012%" height="15" fill="rgb(219,56,2)"/><text x="72.9120%" y="303.50"></text></g><g><title>macro_expand_crate (12,585,281 samples, 12.74%)</title><rect x="72.8771%" y="293" width="12.7389%" height="15" fill="rgb(233,0,4)"/><text x="73.1271%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (12,567,979 samples, 12.72%)</title><rect x="72.8947%" y="277" width="12.7213%" height="15" fill="rgb(235,30,7)"/><text x="73.1447%" y="287.50">expand_crate</text></g><g><title>metadata_register_crate (5,986,226 samples, 6.06%)</title><rect x="79.5567%" y="261" width="6.0593%" height="15" fill="rgb(250,79,13)"/><text x="79.8067%" y="271.50">metadata..</text></g><g><title>metadata_register_crate (4,584,143 samples, 4.64%)</title><rect x="80.9759%" y="245" width="4.6401%" height="15" fill="rgb(211,146,34)"/><text x="81.2259%" y="255.50">metad..</text></g><g><title>metadata_register_crate (144,394 samples, 0.15%)</title><rect x="85.4698%" y="229" width="0.1462%" height="15" fill="rgb(228,22,38)"/><text x="85.7198%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (156,571 samples, 0.16%)</title><rect x="85.6198%" y="293" width="0.1585%" height="15" fill="rgb(235,168,5)"/><text x="85.8698%" y="303.50"></text></g><g><title>late_resolve_crate (1,199,003 samples, 1.21%)</title><rect x="85.8705%" y="277" width="1.2136%" height="15" fill="rgb(221,155,16)"/><text x="86.1205%" y="287.50"></text></g><g><title>configure_and_expand (14,467,582 samples, 14.64%)</title><rect x="72.5058%" y="309" width="14.6441%" height="15" fill="rgb(215,215,53)"/><text x="72.7558%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (1,355,105 samples, 1.37%)</title><rect x="85.7783%" y="293" width="1.3716%" height="15" fill="rgb(223,4,10)"/><text x="86.0283%" y="303.50"></text></g><g><title>drop_ast (104,911 samples, 0.11%)</title><rect x="87.1499%" y="309" width="0.1062%" height="15" fill="rgb(234,103,6)"/><text x="87.3999%" y="319.50"></text></g><g><title>early_lint_checks (196,013 samples, 0.20%)</title><rect x="87.2773%" y="309" width="0.1984%" height="15" fill="rgb(227,97,0)"/><text x="87.5273%" y="319.50"></text></g><g><title>free_global_ctxt (3,797,802 samples, 3.84%)</title><rect x="87.4757%" y="309" width="3.8441%" height="15" fill="rgb(234,150,53)"/><text x="87.7257%" y="319.50">free..</text></g><g><title>layout_of (99,451 samples, 0.10%)</title><rect x="93.4405%" y="277" width="0.1007%" height="15" fill="rgb(228,201,54)"/><text x="93.6905%" y="287.50"></text></g><g><title>is_copy_raw (241,802 samples, 0.24%)</title><rect x="94.7717%" y="245" width="0.2448%" height="15" fill="rgb(222,22,37)"/><text x="95.0217%" y="255.50"></text></g><g><title>evaluate_obligation (186,112 samples, 0.19%)</title><rect x="94.8281%" y="229" width="0.1884%" height="15" fill="rgb(237,53,32)"/><text x="95.0781%" y="239.50"></text></g><g><title>needs_drop_raw (300,612 samples, 0.30%)</title><rect x="94.7125%" y="261" width="0.3043%" height="15" fill="rgb(233,25,53)"/><text x="94.9625%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,482,627 samples, 1.50%)</title><rect x="93.5412%" y="277" width="1.5007%" height="15" fill="rgb(210,40,34)"/><text x="93.7912%" y="287.50"></text></g><g><title>optimized_mir (2,548,529 samples, 2.58%)</title><rect x="92.4663%" y="293" width="2.5796%" height="15" fill="rgb(241,220,44)"/><text x="92.7163%" y="303.50">op..</text></g><g><title>generate_crate_metadata (3,705,291 samples, 3.75%)</title><rect x="91.3199%" y="309" width="3.7505%" height="15" fill="rgb(235,28,35)"/><text x="91.5699%" y="319.50">gene..</text></g><g><title>hir_lowering (1,656,138 samples, 1.68%)</title><rect x="95.0704%" y="309" width="1.6763%" height="15" fill="rgb(210,56,17)"/><text x="95.3204%" y="319.50"></text></g><g><title>parse_crate (1,701,479 samples, 1.72%)</title><rect x="96.8108%" y="309" width="1.7222%" height="15" fill="rgb(224,130,29)"/><text x="97.0608%" y="319.50"></text></g><g><title>prepare_outputs (192,652 samples, 0.20%)</title><rect x="98.5385%" y="309" width="0.1950%" height="15" fill="rgb(235,212,8)"/><text x="98.7885%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (822,960 samples, 0.83%)</title><rect x="98.7335%" y="309" width="0.8330%" height="15" fill="rgb(223,33,50)"/><text x="98.9835%" y="319.50"></text></g><g><title>all (98,794,439 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (98,794,439 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(250,156,29)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (320,013 samples, 0.32%)</title><rect x="99.6761%" y="309" width="0.3239%" height="15" fill="rgb(216,193,19)"/><text x="99.9261%" y="319.50"></text></g></svg></svg>