<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,039,128 samples, 0.11%)</title><rect x="19.8199%" y="101" width="0.1054%" height="15" fill="rgb(227,0,7)"/><text x="20.0699%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,181,286 samples, 0.12%)</title><rect x="20.3872%" y="85" width="0.1198%" height="15" fill="rgb(217,0,24)"/><text x="20.6372%" y="95.50"></text></g><g><title>needs_drop_raw (6,420,362 samples, 0.65%)</title><rect x="23.8820%" y="69" width="0.6511%" height="15" fill="rgb(221,193,54)"/><text x="24.1320%" y="79.50"></text></g><g><title>is_copy_raw (5,229,833 samples, 0.53%)</title><rect x="24.0027%" y="53" width="0.5303%" height="15" fill="rgb(248,212,6)"/><text x="24.2527%" y="63.50"></text></g><g><title>evaluate_obligation (4,239,704 samples, 0.43%)</title><rect x="24.1031%" y="37" width="0.4299%" height="15" fill="rgb(208,68,35)"/><text x="24.3531%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,127,391 samples, 0.11%)</title><rect x="24.6613%" y="53" width="0.1143%" height="15" fill="rgb(232,128,0)"/><text x="24.9113%" y="63.50"></text></g><g><title>resolve_instance (3,113,801 samples, 0.32%)</title><rect x="24.5331%" y="69" width="0.3158%" height="15" fill="rgb(207,160,47)"/><text x="24.7831%" y="79.50"></text></g><g><title>thir_body (15,683,065 samples, 1.59%)</title><rect x="24.8700%" y="69" width="1.5904%" height="15" fill="rgb(228,23,34)"/><text x="25.1200%" y="79.50"></text></g><g><title>mir_const (71,463,064 samples, 7.25%)</title><rect x="19.2266%" y="117" width="7.2470%" height="15" fill="rgb(218,30,26)"/><text x="19.4766%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (64,573,237 samples, 6.55%)</title><rect x="19.9253%" y="101" width="6.5483%" height="15" fill="rgb(220,122,19)"/><text x="20.1753%" y="111.50">unsafety_..</text></g><g><title>mir_built (58,837,178 samples, 5.97%)</title><rect x="20.5070%" y="85" width="5.9666%" height="15" fill="rgb(250,228,42)"/><text x="20.7570%" y="95.50">mir_built</text></g><g><title>mir_const (1,243,821 samples, 0.13%)</title><rect x="26.5799%" y="101" width="0.1261%" height="15" fill="rgb(240,193,28)"/><text x="26.8299%" y="111.50"></text></g><g><title>mir_const_qualif (2,406,122 samples, 0.24%)</title><rect x="26.4736%" y="117" width="0.2440%" height="15" fill="rgb(216,20,37)"/><text x="26.7236%" y="127.50"></text></g><g><title>mir_promoted (84,530,494 samples, 8.57%)</title><rect x="18.1459%" y="133" width="8.5721%" height="15" fill="rgb(206,188,39)"/><text x="18.3959%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (6,164,889 samples, 0.63%)</title><rect x="26.7191%" y="133" width="0.6252%" height="15" fill="rgb(217,207,13)"/><text x="26.9691%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,983,390 samples, 0.20%)</title><rect x="27.3443%" y="133" width="0.2011%" height="15" fill="rgb(231,73,38)"/><text x="27.5943%" y="143.50"></text></g><g><title>normalize_projection_ty (1,210,481 samples, 0.12%)</title><rect x="27.4226%" y="117" width="0.1228%" height="15" fill="rgb(225,20,46)"/><text x="27.6726%" y="127.50"></text></g><g><title>type_op_prove_predicate (23,084,219 samples, 2.34%)</title><rect x="27.6830%" y="133" width="2.3409%" height="15" fill="rgb(210,31,41)"/><text x="27.9330%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (291,202,005 samples, 29.53%)</title><rect x="0.4951%" y="165" width="29.5303%" height="15" fill="rgb(221,200,47)"/><text x="0.7451%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (290,479,302 samples, 29.46%)</title><rect x="0.5684%" y="149" width="29.4570%" height="15" fill="rgb(226,26,5)"/><text x="0.8184%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,005,491 samples, 0.10%)</title><rect x="30.0254%" y="165" width="0.1020%" height="15" fill="rgb(249,33,26)"/><text x="30.2754%" y="175.50"></text></g><g><title>hir_module_items (1,475,628 samples, 0.15%)</title><rect x="30.1274%" y="165" width="0.1496%" height="15" fill="rgb(235,183,28)"/><text x="30.3774%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,055,111 samples, 0.11%)</title><rect x="30.4805%" y="133" width="0.1070%" height="15" fill="rgb(221,5,38)"/><text x="30.7305%" y="143.50"></text></g><g><title>check_mod_attrs (3,007,604 samples, 0.30%)</title><rect x="30.2826%" y="149" width="0.3050%" height="15" fill="rgb(247,18,42)"/><text x="30.5326%" y="159.50"></text></g><g><title>lint_levels (1,523,027 samples, 0.15%)</title><rect x="30.9017%" y="133" width="0.1544%" height="15" fill="rgb(241,131,45)"/><text x="31.1517%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (4,147,547 samples, 0.42%)</title><rect x="30.7472%" y="149" width="0.4206%" height="15" fill="rgb(249,31,29)"/><text x="30.9972%" y="159.50"></text></g><g><title>misc_checking_1 (8,941,300 samples, 0.91%)</title><rect x="30.2771%" y="165" width="0.9067%" height="15" fill="rgb(225,111,53)"/><text x="30.5271%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,367,299 samples, 0.44%)</title><rect x="31.1840%" y="149" width="0.4429%" height="15" fill="rgb(238,160,17)"/><text x="31.4340%" y="159.50"></text></g><g><title>check_mod_liveness (3,374,756 samples, 0.34%)</title><rect x="31.2847%" y="133" width="0.3422%" height="15" fill="rgb(214,148,48)"/><text x="31.5347%" y="143.50"></text></g><g><title>misc_checking_2 (7,369,802 samples, 0.75%)</title><rect x="31.1838%" y="165" width="0.7474%" height="15" fill="rgb(232,36,49)"/><text x="31.4338%" y="175.50"></text></g><g><title>match_checking (3,000,183 samples, 0.30%)</title><rect x="31.6269%" y="149" width="0.3042%" height="15" fill="rgb(209,103,24)"/><text x="31.8769%" y="159.50"></text></g><g><title>check_match (2,821,971 samples, 0.29%)</title><rect x="31.6450%" y="133" width="0.2862%" height="15" fill="rgb(229,88,8)"/><text x="31.8950%" y="143.50"></text></g><g><title>check_private_in_public (1,584,458 samples, 0.16%)</title><rect x="31.9327%" y="149" width="0.1607%" height="15" fill="rgb(213,181,19)"/><text x="32.1827%" y="159.50"></text></g><g><title>death_checking (2,886,192 samples, 0.29%)</title><rect x="32.0934%" y="149" width="0.2927%" height="15" fill="rgb(254,191,54)"/><text x="32.3434%" y="159.50"></text></g><g><title>param_env (1,071,941 samples, 0.11%)</title><rect x="32.9641%" y="117" width="0.1087%" height="15" fill="rgb(241,83,37)"/><text x="33.2141%" y="127.50"></text></g><g><title>crate_lints (8,046,300 samples, 0.82%)</title><rect x="32.3864%" y="133" width="0.8160%" height="15" fill="rgb(233,36,39)"/><text x="32.6364%" y="143.50"></text></g><g><title>type_of (1,255,783 samples, 0.13%)</title><rect x="33.0750%" y="117" width="0.1273%" height="15" fill="rgb(226,3,54)"/><text x="33.3250%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,024,321 samples, 0.10%)</title><rect x="33.0985%" y="101" width="0.1039%" height="15" fill="rgb(245,192,40)"/><text x="33.3485%" y="111.50"></text></g><g><title>lint_checking (13,973,927 samples, 1.42%)</title><rect x="32.3860%" y="149" width="1.4171%" height="15" fill="rgb(238,167,29)"/><text x="32.6360%" y="159.50"></text></g><g><title>module_lints (5,924,306 samples, 0.60%)</title><rect x="33.2023%" y="133" width="0.6008%" height="15" fill="rgb(232,182,51)"/><text x="33.4523%" y="143.50"></text></g><g><title>lint_mod (5,907,786 samples, 0.60%)</title><rect x="33.2040%" y="117" width="0.5991%" height="15" fill="rgb(231,60,39)"/><text x="33.4540%" y="127.50"></text></g><g><title>privacy_access_levels (2,631,919 samples, 0.27%)</title><rect x="33.8031%" y="149" width="0.2669%" height="15" fill="rgb(208,69,12)"/><text x="34.0531%" y="159.50"></text></g><g><title>privacy_checking_modules (10,431,436 samples, 1.06%)</title><rect x="34.0700%" y="149" width="1.0578%" height="15" fill="rgb(235,93,37)"/><text x="34.3200%" y="159.50"></text></g><g><title>check_mod_privacy (10,416,676 samples, 1.06%)</title><rect x="34.0715%" y="133" width="1.0563%" height="15" fill="rgb(213,116,39)"/><text x="34.3215%" y="143.50"></text></g><g><title>misc_checking_3 (31,573,342 samples, 3.20%)</title><rect x="31.9311%" y="165" width="3.2018%" height="15" fill="rgb(222,207,29)"/><text x="32.1811%" y="175.50">mis..</text></g><g><title>impl_parent (2,960,169 samples, 0.30%)</title><rect x="35.6513%" y="101" width="0.3002%" height="15" fill="rgb(206,96,30)"/><text x="35.9013%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,669,534 samples, 0.17%)</title><rect x="35.7822%" y="85" width="0.1693%" height="15" fill="rgb(218,138,4)"/><text x="36.0322%" y="95.50"></text></g><g><title>impl_trait_ref (5,875,351 samples, 0.60%)</title><rect x="35.9515%" y="101" width="0.5958%" height="15" fill="rgb(250,191,14)"/><text x="36.2015%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,756,978 samples, 0.48%)</title><rect x="36.0649%" y="85" width="0.4824%" height="15" fill="rgb(239,60,40)"/><text x="36.3149%" y="95.50"></text></g><g><title>coherent_trait (14,586,053 samples, 1.48%)</title><rect x="35.1669%" y="133" width="1.4791%" height="15" fill="rgb(206,27,48)"/><text x="35.4169%" y="143.50"></text></g><g><title>specialization_graph_of (14,032,507 samples, 1.42%)</title><rect x="35.2231%" y="117" width="1.4230%" height="15" fill="rgb(225,35,8)"/><text x="35.4731%" y="127.50"></text></g><g><title>coherence_checking (14,893,006 samples, 1.51%)</title><rect x="35.1639%" y="149" width="1.5103%" height="15" fill="rgb(250,213,24)"/><text x="35.4139%" y="159.50"></text></g><g><title>associated_items (1,109,051 samples, 0.11%)</title><rect x="61.3216%" y="101" width="0.1125%" height="15" fill="rgb(247,123,22)"/><text x="61.5716%" y="111.50"></text></g><g><title>dropck_outlives (1,545,774 samples, 0.16%)</title><rect x="61.4563%" y="101" width="0.1568%" height="15" fill="rgb(231,138,38)"/><text x="61.7063%" y="111.50"></text></g><g><title>impl_trait_ref (1,226,795 samples, 0.12%)</title><rect x="62.6675%" y="85" width="0.1244%" height="15" fill="rgb(231,145,46)"/><text x="62.9175%" y="95.50"></text></g><g><title>predicates_of (1,105,157 samples, 0.11%)</title><rect x="62.7995%" y="85" width="0.1121%" height="15" fill="rgb(251,118,11)"/><text x="63.0495%" y="95.50"></text></g><g><title>specializes (2,804,371 samples, 0.28%)</title><rect x="62.9115%" y="85" width="0.2844%" height="15" fill="rgb(217,147,25)"/><text x="63.1615%" y="95.50"></text></g><g><title>param_env (1,607,814 samples, 0.16%)</title><rect x="63.0329%" y="69" width="0.1630%" height="15" fill="rgb(247,81,37)"/><text x="63.2829%" y="79.50"></text></g><g><title>evaluate_obligation (16,324,970 samples, 1.66%)</title><rect x="61.6130%" y="101" width="1.6555%" height="15" fill="rgb(209,12,38)"/><text x="61.8630%" y="111.50"></text></g><g><title>evaluate_obligation (1,097,315 samples, 0.11%)</title><rect x="63.5774%" y="85" width="0.1113%" height="15" fill="rgb(227,1,9)"/><text x="63.8274%" y="95.50"></text></g><g><title>method_autoderef_steps (2,375,786 samples, 0.24%)</title><rect x="63.4485%" y="101" width="0.2409%" height="15" fill="rgb(248,47,43)"/><text x="63.6985%" y="111.50"></text></g><g><title>evaluate_obligation (6,475,357 samples, 0.66%)</title><rect x="75.7613%" y="85" width="0.6567%" height="15" fill="rgb(221,10,30)"/><text x="76.0113%" y="95.50"></text></g><g><title>is_copy_raw (1,609,093 samples, 0.16%)</title><rect x="76.4922%" y="85" width="0.1632%" height="15" fill="rgb(210,229,1)"/><text x="76.7422%" y="95.50"></text></g><g><title>evaluate_obligation (1,230,841 samples, 0.12%)</title><rect x="76.5305%" y="69" width="0.1248%" height="15" fill="rgb(222,148,37)"/><text x="76.7805%" y="79.50"></text></g><g><title>method_autoderef_steps (1,286,098 samples, 0.13%)</title><rect x="76.6816%" y="85" width="0.1304%" height="15" fill="rgb(234,67,33)"/><text x="76.9316%" y="95.50"></text></g><g><title>typeck (128,710,793 samples, 13.05%)</title><rect x="63.8390%" y="101" width="13.0524%" height="15" fill="rgb(247,98,35)"/><text x="64.0890%" y="111.50">typeck</text></g><g><title>item_bodies_checking (396,537,278 samples, 40.21%)</title><rect x="36.6928%" y="149" width="40.2122%" height="15" fill="rgb(247,138,52)"/><text x="36.9428%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (396,533,308 samples, 40.21%)</title><rect x="36.6932%" y="133" width="40.2118%" height="15" fill="rgb(213,79,30)"/><text x="36.9432%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (396,095,696 samples, 40.17%)</title><rect x="36.7376%" y="117" width="40.1674%" height="15" fill="rgb(246,177,23)"/><text x="36.9876%" y="127.50">typeck</text></g><g><title>item_types_checking (5,938,467 samples, 0.60%)</title><rect x="76.9050%" y="149" width="0.6022%" height="15" fill="rgb(230,62,27)"/><text x="77.1550%" y="159.50"></text></g><g><title>check_mod_item_types (5,922,066 samples, 0.60%)</title><rect x="76.9067%" y="133" width="0.6005%" height="15" fill="rgb(216,154,8)"/><text x="77.1567%" y="143.50"></text></g><g><title>typeck (1,232,973 samples, 0.13%)</title><rect x="77.3822%" y="117" width="0.1250%" height="15" fill="rgb(244,35,45)"/><text x="77.6322%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,580,127 samples, 0.16%)</title><rect x="77.6890%" y="117" width="0.1602%" height="15" fill="rgb(251,115,12)"/><text x="77.9390%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,563,867 samples, 0.16%)</title><rect x="77.6907%" y="101" width="0.1586%" height="15" fill="rgb(240,54,50)"/><text x="77.9407%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,555,237 samples, 0.16%)</title><rect x="77.6915%" y="85" width="0.1577%" height="15" fill="rgb(233,84,52)"/><text x="77.9415%" y="95.50"></text></g><g><title>generics_of (1,322,190 samples, 0.13%)</title><rect x="77.9447%" y="117" width="0.1341%" height="15" fill="rgb(207,117,47)"/><text x="78.1947%" y="127.50"></text></g><g><title>late_bound_vars_map (2,223,053 samples, 0.23%)</title><rect x="78.2781%" y="69" width="0.2254%" height="15" fill="rgb(249,43,39)"/><text x="78.5281%" y="79.50"></text></g><g><title>resolve_lifetimes (2,142,901 samples, 0.22%)</title><rect x="78.2862%" y="53" width="0.2173%" height="15" fill="rgb(209,38,44)"/><text x="78.5362%" y="63.50"></text></g><g><title>explicit_predicates_of (3,302,623 samples, 0.33%)</title><rect x="78.1752%" y="85" width="0.3349%" height="15" fill="rgb(236,212,23)"/><text x="78.4252%" y="95.50"></text></g><g><title>predicates_of (4,981,324 samples, 0.51%)</title><rect x="78.1147%" y="117" width="0.5051%" height="15" fill="rgb(242,79,21)"/><text x="78.3647%" y="127.50"></text></g><g><title>predicates_defined_on (4,739,151 samples, 0.48%)</title><rect x="78.1392%" y="101" width="0.4806%" height="15" fill="rgb(211,96,35)"/><text x="78.3892%" y="111.50"></text></g><g><title>inferred_outlives_of (1,081,592 samples, 0.11%)</title><rect x="78.5101%" y="85" width="0.1097%" height="15" fill="rgb(253,215,40)"/><text x="78.7601%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,005,711 samples, 0.10%)</title><rect x="78.5178%" y="69" width="0.1020%" height="15" fill="rgb(211,81,21)"/><text x="78.7678%" y="79.50"></text></g><g><title>type_collecting (11,517,738 samples, 1.17%)</title><rect x="77.5081%" y="149" width="1.1680%" height="15" fill="rgb(208,190,38)"/><text x="77.7581%" y="159.50"></text></g><g><title>collect_mod_item_types (11,492,068 samples, 1.17%)</title><rect x="77.5107%" y="133" width="1.1654%" height="15" fill="rgb(235,213,38)"/><text x="77.7607%" y="143.50"></text></g><g><title>evaluate_obligation (2,099,185 samples, 0.21%)</title><rect x="79.7958%" y="117" width="0.2129%" height="15" fill="rgb(237,122,38)"/><text x="80.0458%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,534,755 samples, 0.16%)</title><rect x="80.0129%" y="117" width="0.1556%" height="15" fill="rgb(244,218,35)"/><text x="80.2629%" y="127.50"></text></g><g><title>param_env (1,655,294 samples, 0.17%)</title><rect x="80.1686%" y="117" width="0.1679%" height="15" fill="rgb(240,68,47)"/><text x="80.4186%" y="127.50"></text></g><g><title>region_scope_tree (3,606,603 samples, 0.37%)</title><rect x="80.3413%" y="117" width="0.3657%" height="15" fill="rgb(210,16,53)"/><text x="80.5913%" y="127.50"></text></g><g><title>check_impl_item_well_formed (18,851,015 samples, 1.91%)</title><rect x="78.8000%" y="133" width="1.9117%" height="15" fill="rgb(235,124,12)"/><text x="79.0500%" y="143.50">c..</text></g><g><title>param_env (1,310,871 samples, 0.13%)</title><rect x="81.5705%" y="117" width="0.1329%" height="15" fill="rgb(224,169,11)"/><text x="81.8205%" y="127.50"></text></g><g><title>check_item_well_formed (10,499,321 samples, 1.06%)</title><rect x="80.7116%" y="133" width="1.0647%" height="15" fill="rgb(250,166,2)"/><text x="80.9616%" y="143.50"></text></g><g><title>analysis (805,524,626 samples, 81.69%)</title><rect x="0.1735%" y="181" width="81.6869%" height="15" fill="rgb(242,216,29)"/><text x="0.4235%" y="191.50">analysis</text></g><g><title>type_check_crate (460,785,135 samples, 46.73%)</title><rect x="35.1329%" y="165" width="46.7275%" height="15" fill="rgb(230,116,27)"/><text x="35.3829%" y="175.50">type_check_crate</text></g><g><title>wf_checking (31,372,520 samples, 3.18%)</title><rect x="78.6790%" y="149" width="3.1814%" height="15" fill="rgb(228,99,48)"/><text x="78.9290%" y="159.50">wf_..</text></g><g><title>AST_validation (1,157,603 samples, 0.12%)</title><rect x="81.9275%" y="165" width="0.1174%" height="15" fill="rgb(253,11,6)"/><text x="82.1775%" y="175.50"></text></g><g><title>metadata_register_crate (2,298,075 samples, 0.23%)</title><rect x="90.4661%" y="133" width="0.2330%" height="15" fill="rgb(247,143,39)"/><text x="90.7161%" y="143.50"></text></g><g><title>macro_expand_crate (85,664,044 samples, 8.69%)</title><rect x="82.1377%" y="165" width="8.6871%" height="15" fill="rgb(236,97,10)"/><text x="82.3877%" y="175.50">macro_expand..</text></g><g><title>expand_crate (85,638,234 samples, 8.68%)</title><rect x="82.1403%" y="149" width="8.6844%" height="15" fill="rgb(233,208,19)"/><text x="82.3903%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,238,304 samples, 0.13%)</title><rect x="90.6992%" y="133" width="0.1256%" height="15" fill="rgb(216,164,2)"/><text x="90.9492%" y="143.50"></text></g><g><title>finalize_macro_resolutions (1,052,002 samples, 0.11%)</title><rect x="90.8713%" y="149" width="0.1067%" height="15" fill="rgb(220,129,5)"/><text x="91.1213%" y="159.50"></text></g><g><title>late_resolve_crate (18,959,711 samples, 1.92%)</title><rect x="90.9780%" y="149" width="1.9227%" height="15" fill="rgb(242,17,10)"/><text x="91.2280%" y="159.50">l..</text></g><g><title>resolve_check_unused (1,201,234 samples, 0.12%)</title><rect x="92.9040%" y="149" width="0.1218%" height="15" fill="rgb(242,107,0)"/><text x="93.1540%" y="159.50"></text></g><g><title>configure_and_expand (110,420,111 samples, 11.20%)</title><rect x="81.9073%" y="181" width="11.1975%" height="15" fill="rgb(251,28,31)"/><text x="82.1573%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (22,230,008 samples, 2.25%)</title><rect x="90.8505%" y="165" width="2.2543%" height="15" fill="rgb(233,223,10)"/><text x="91.1005%" y="175.50">r..</text></g><g><title>drop_ast (2,185,924 samples, 0.22%)</title><rect x="93.1048%" y="181" width="0.2217%" height="15" fill="rgb(215,21,27)"/><text x="93.3548%" y="191.50"></text></g><g><title>early_lint_checks (4,727,833 samples, 0.48%)</title><rect x="93.3284%" y="181" width="0.4794%" height="15" fill="rgb(232,23,21)"/><text x="93.5784%" y="191.50"></text></g><g><title>free_global_ctxt (9,794,529 samples, 0.99%)</title><rect x="93.8078%" y="181" width="0.9932%" height="15" fill="rgb(244,5,23)"/><text x="94.0578%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,022,232 samples, 0.10%)</title><rect x="95.4089%" y="133" width="0.1037%" height="15" fill="rgb(226,81,46)"/><text x="95.6589%" y="143.50"></text></g><g><title>mir_for_ctfe (1,729,042 samples, 0.18%)</title><rect x="95.3540%" y="165" width="0.1753%" height="15" fill="rgb(247,70,30)"/><text x="95.6040%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,233,263 samples, 0.13%)</title><rect x="95.4043%" y="149" width="0.1251%" height="15" fill="rgb(212,68,19)"/><text x="95.6543%" y="159.50"></text></g><g><title>generate_crate_metadata (7,454,003 samples, 0.76%)</title><rect x="94.8010%" y="181" width="0.7559%" height="15" fill="rgb(240,187,13)"/><text x="95.0510%" y="191.50"></text></g><g><title>hir_lowering (36,177,903 samples, 3.67%)</title><rect x="95.5569%" y="181" width="3.6687%" height="15" fill="rgb(223,113,26)"/><text x="95.8069%" y="191.50">hir_..</text></g><g><title>parse_crate (4,628,372 samples, 0.47%)</title><rect x="99.2332%" y="181" width="0.4694%" height="15" fill="rgb(206,192,2)"/><text x="99.4832%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,882,172 samples, 0.19%)</title><rect x="99.7294%" y="181" width="0.1909%" height="15" fill="rgb(241,108,4)"/><text x="99.9794%" y="191.50"></text></g><g><title>all (986,111,869 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (986,111,869 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>