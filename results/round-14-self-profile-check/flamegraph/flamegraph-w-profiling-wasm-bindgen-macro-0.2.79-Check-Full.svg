<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>adt_drop_tys (26,341 samples, 0.10%)</title><rect x="9.5176%" y="85" width="0.1050%" height="15" fill="rgb(227,0,7)"/><text x="9.7676%" y="95.50"></text></g><g><title>adt_drop_tys (51,501 samples, 0.21%)</title><rect x="9.5050%" y="101" width="0.2052%" height="15" fill="rgb(217,0,24)"/><text x="9.7550%" y="111.50"></text></g><g><title>adt_drop_tys (99,631 samples, 0.40%)</title><rect x="9.4710%" y="117" width="0.3970%" height="15" fill="rgb(221,193,54)"/><text x="9.7210%" y="127.50"></text></g><g><title>param_env (30,070 samples, 0.12%)</title><rect x="9.7482%" y="101" width="0.1198%" height="15" fill="rgb(248,212,6)"/><text x="9.9982%" y="111.50"></text></g><g><title>needs_drop_raw (409,125 samples, 1.63%)</title><rect x="9.4202%" y="133" width="1.6303%" height="15" fill="rgb(208,68,35)"/><text x="9.6702%" y="143.50"></text></g><g><title>is_copy_raw (296,744 samples, 1.18%)</title><rect x="9.8680%" y="117" width="1.1825%" height="15" fill="rgb(232,128,0)"/><text x="10.1180%" y="127.50"></text></g><g><title>evaluate_obligation (282,143 samples, 1.12%)</title><rect x="9.9262%" y="101" width="1.1243%" height="15" fill="rgb(207,160,47)"/><text x="10.1762%" y="111.50"></text></g><g><title>trait_impls_of (174,282 samples, 0.69%)</title><rect x="10.3560%" y="85" width="0.6945%" height="15" fill="rgb(228,23,34)"/><text x="10.6060%" y="95.50"></text></g><g><title>implementations_of_trait (37,970 samples, 0.15%)</title><rect x="10.8992%" y="69" width="0.1513%" height="15" fill="rgb(218,30,26)"/><text x="11.1492%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (32,240 samples, 0.13%)</title><rect x="10.9220%" y="53" width="0.1285%" height="15" fill="rgb(220,122,19)"/><text x="11.1720%" y="63.50"></text></g><g><title>specialization_graph_of (42,911 samples, 0.17%)</title><rect x="11.2562%" y="117" width="0.1710%" height="15" fill="rgb(250,228,42)"/><text x="11.5062%" y="127.50"></text></g><g><title>resolve_instance (99,801 samples, 0.40%)</title><rect x="11.0505%" y="133" width="0.3977%" height="15" fill="rgb(240,193,28)"/><text x="11.3005%" y="143.50"></text></g><g><title>thir_body (84,091 samples, 0.34%)</title><rect x="11.4584%" y="133" width="0.3351%" height="15" fill="rgb(216,20,37)"/><text x="11.7084%" y="143.50"></text></g><g><title>mir_const (1,078,872 samples, 4.30%)</title><rect x="7.4995%" y="181" width="4.2991%" height="15" fill="rgb(206,188,39)"/><text x="7.7495%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (940,411 samples, 3.75%)</title><rect x="8.0512%" y="165" width="3.7473%" height="15" fill="rgb(217,207,13)"/><text x="8.3012%" y="175.50">unsa..</text></g><g><title>mir_built (865,429 samples, 3.45%)</title><rect x="8.3500%" y="149" width="3.4486%" height="15" fill="rgb(231,73,38)"/><text x="8.6000%" y="159.50">mir..</text></g><g><title>has_structural_eq_impls (150,842 samples, 0.60%)</title><rect x="12.0589%" y="165" width="0.6011%" height="15" fill="rgb(225,20,46)"/><text x="12.3089%" y="175.50"></text></g><g><title>evaluate_obligation (141,022 samples, 0.56%)</title><rect x="12.0980%" y="149" width="0.5619%" height="15" fill="rgb(210,31,41)"/><text x="12.3480%" y="159.50"></text></g><g><title>trait_impls_of (129,532 samples, 0.52%)</title><rect x="12.1438%" y="133" width="0.5162%" height="15" fill="rgb(221,200,47)"/><text x="12.3938%" y="143.50"></text></g><g><title>implementations_of_trait (41,141 samples, 0.16%)</title><rect x="12.4960%" y="117" width="0.1639%" height="15" fill="rgb(226,26,5)"/><text x="12.7460%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (30,231 samples, 0.12%)</title><rect x="12.5395%" y="101" width="0.1205%" height="15" fill="rgb(249,33,26)"/><text x="12.7895%" y="111.50"></text></g><g><title>is_freeze_raw (99,861 samples, 0.40%)</title><rect x="12.6644%" y="165" width="0.3979%" height="15" fill="rgb(235,183,28)"/><text x="12.9144%" y="175.50"></text></g><g><title>evaluate_obligation (97,241 samples, 0.39%)</title><rect x="12.6749%" y="149" width="0.3875%" height="15" fill="rgb(221,5,38)"/><text x="12.9249%" y="159.50"></text></g><g><title>needs_drop_raw (25,621 samples, 0.10%)</title><rect x="13.2808%" y="117" width="0.1021%" height="15" fill="rgb(247,18,42)"/><text x="13.5308%" y="127.50"></text></g><g><title>mir_const (100,181 samples, 0.40%)</title><rect x="13.0669%" y="165" width="0.3992%" height="15" fill="rgb(241,131,45)"/><text x="13.3169%" y="175.50"></text></g><g><title>unsafety_check_result (82,421 samples, 0.33%)</title><rect x="13.1377%" y="149" width="0.3284%" height="15" fill="rgb(249,31,29)"/><text x="13.3877%" y="159.50"></text></g><g><title>mir_built (73,731 samples, 0.29%)</title><rect x="13.1723%" y="133" width="0.2938%" height="15" fill="rgb(225,111,53)"/><text x="13.4223%" y="143.50"></text></g><g><title>mir_promoted (1,658,928 samples, 6.61%)</title><rect x="6.8600%" y="197" width="6.6105%" height="15" fill="rgb(238,160,17)"/><text x="7.1100%" y="207.50">mir_promo..</text></g><g><title>mir_const_qualif (419,574 samples, 1.67%)</title><rect x="11.7985%" y="181" width="1.6719%" height="15" fill="rgb(214,148,48)"/><text x="12.0485%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (48,541 samples, 0.19%)</title><rect x="13.4704%" y="197" width="0.1934%" height="15" fill="rgb(232,36,49)"/><text x="13.7204%" y="207.50"></text></g><g><title>type_op_prove_predicate (185,433 samples, 0.74%)</title><rect x="13.6639%" y="197" width="0.7389%" height="15" fill="rgb(209,103,24)"/><text x="13.9139%" y="207.50"></text></g><g><title>evaluate_obligation (33,230 samples, 0.13%)</title><rect x="14.2704%" y="181" width="0.1324%" height="15" fill="rgb(229,88,8)"/><text x="14.5204%" y="191.50"></text></g><g><title>MIR_borrow_checking (3,141,656 samples, 12.52%)</title><rect x="1.9070%" y="229" width="12.5188%" height="15" fill="rgb(213,181,19)"/><text x="2.1570%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (3,133,896 samples, 12.49%)</title><rect x="1.9379%" y="213" width="12.4879%" height="15" fill="rgb(254,191,54)"/><text x="2.1879%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (123,312 samples, 0.49%)</title><rect x="14.4258%" y="229" width="0.4914%" height="15" fill="rgb(241,83,37)"/><text x="14.6758%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (106,952 samples, 0.43%)</title><rect x="14.4910%" y="213" width="0.4262%" height="15" fill="rgb(233,36,39)"/><text x="14.7410%" y="223.50"></text></g><g><title>hir_module_items (67,141 samples, 0.27%)</title><rect x="14.9172%" y="229" width="0.2675%" height="15" fill="rgb(226,3,54)"/><text x="15.1672%" y="239.50"></text></g><g><title>get_lang_items (77,451 samples, 0.31%)</title><rect x="15.5895%" y="181" width="0.3086%" height="15" fill="rgb(245,192,40)"/><text x="15.8395%" y="191.50"></text></g><g><title>codegen_fn_attrs (139,042 samples, 0.55%)</title><rect x="15.4480%" y="197" width="0.5541%" height="15" fill="rgb(238,167,29)"/><text x="15.6980%" y="207.50"></text></g><g><title>check_mod_attrs (187,782 samples, 0.75%)</title><rect x="15.2544%" y="213" width="0.7483%" height="15" fill="rgb(232,182,51)"/><text x="15.5044%" y="223.50"></text></g><g><title>lookup_deprecation_entry (37,241 samples, 0.15%)</title><rect x="16.3118%" y="197" width="0.1484%" height="15" fill="rgb(231,60,39)"/><text x="16.5618%" y="207.50"></text></g><g><title>lookup_stability (25,160 samples, 0.10%)</title><rect x="16.4602%" y="197" width="0.1003%" height="15" fill="rgb(208,69,12)"/><text x="16.7102%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (114,912 samples, 0.46%)</title><rect x="16.1399%" y="213" width="0.4579%" height="15" fill="rgb(235,93,37)"/><text x="16.3899%" y="223.50"></text></g><g><title>misc_checking_1 (382,554 samples, 1.52%)</title><rect x="15.1865%" y="229" width="1.5244%" height="15" fill="rgb(213,116,39)"/><text x="15.4365%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (96,231 samples, 0.38%)</title><rect x="16.7155%" y="213" width="0.3835%" height="15" fill="rgb(222,207,29)"/><text x="16.9655%" y="223.50"></text></g><g><title>check_mod_liveness (81,781 samples, 0.33%)</title><rect x="16.7731%" y="197" width="0.3259%" height="15" fill="rgb(206,96,30)"/><text x="17.0231%" y="207.50"></text></g><g><title>type_uninhabited_from (38,160 samples, 0.15%)</title><rect x="16.9469%" y="181" width="0.1521%" height="15" fill="rgb(218,138,4)"/><text x="17.1969%" y="191.50"></text></g><g><title>type_uninhabited_from (28,540 samples, 0.11%)</title><rect x="16.9853%" y="165" width="0.1137%" height="15" fill="rgb(250,191,14)"/><text x="17.2353%" y="175.50"></text></g><g><title>misc_checking_2 (181,912 samples, 0.72%)</title><rect x="16.7109%" y="229" width="0.7249%" height="15" fill="rgb(239,60,40)"/><text x="16.9609%" y="239.50"></text></g><g><title>match_checking (84,511 samples, 0.34%)</title><rect x="17.0990%" y="213" width="0.3368%" height="15" fill="rgb(206,27,48)"/><text x="17.3490%" y="223.50"></text></g><g><title>check_match (81,471 samples, 0.32%)</title><rect x="17.1111%" y="197" width="0.3246%" height="15" fill="rgb(225,35,8)"/><text x="17.3611%" y="207.50"></text></g><g><title>death_checking (38,651 samples, 0.15%)</title><rect x="17.5462%" y="213" width="0.1540%" height="15" fill="rgb(250,213,24)"/><text x="17.7962%" y="223.50"></text></g><g><title>layout_of (74,032 samples, 0.30%)</title><rect x="18.8683%" y="69" width="0.2950%" height="15" fill="rgb(247,123,22)"/><text x="19.1183%" y="79.50"></text></g><g><title>layout_of (43,200 samples, 0.17%)</title><rect x="18.9912%" y="53" width="0.1721%" height="15" fill="rgb(231,138,38)"/><text x="19.2412%" y="63.50"></text></g><g><title>fn_abi_of_instance (124,412 samples, 0.50%)</title><rect x="18.7526%" y="85" width="0.4958%" height="15" fill="rgb(231,145,46)"/><text x="19.0026%" y="95.50"></text></g><g><title>layout_of (37,711 samples, 0.15%)</title><rect x="19.2663%" y="85" width="0.1503%" height="15" fill="rgb(251,118,11)"/><text x="19.5163%" y="95.50"></text></g><g><title>mir_for_ctfe (28,950 samples, 0.12%)</title><rect x="19.4166%" y="85" width="0.1154%" height="15" fill="rgb(217,147,25)"/><text x="19.6666%" y="95.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (27,000 samples, 0.11%)</title><rect x="19.4244%" y="69" width="0.1076%" height="15" fill="rgb(247,81,37)"/><text x="19.6744%" y="79.50"></text></g><g><title>promoted_mir (36,750 samples, 0.15%)</title><rect x="19.5368%" y="85" width="0.1464%" height="15" fill="rgb(209,12,38)"/><text x="19.7868%" y="95.50"></text></g><g><title>eval_to_const_value_raw (390,294 samples, 1.56%)</title><rect x="18.1997%" y="133" width="1.5552%" height="15" fill="rgb(227,1,9)"/><text x="18.4497%" y="143.50"></text></g><g><title>eval_to_const_value_raw (389,654 samples, 1.55%)</title><rect x="18.2022%" y="117" width="1.5527%" height="15" fill="rgb(248,47,43)"/><text x="18.4522%" y="127.50"></text></g><g><title>eval_to_allocation_raw (387,924 samples, 1.55%)</title><rect x="18.2091%" y="101" width="1.5458%" height="15" fill="rgb(221,10,30)"/><text x="18.4591%" y="111.50"></text></g><g><title>eval_to_allocation_raw (436,205 samples, 1.74%)</title><rect x="18.0226%" y="181" width="1.7382%" height="15" fill="rgb(210,229,1)"/><text x="18.2726%" y="191.50"></text></g><g><title>eval_to_allocation_raw (435,555 samples, 1.74%)</title><rect x="18.0252%" y="165" width="1.7356%" height="15" fill="rgb(222,148,37)"/><text x="18.2752%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (399,714 samples, 1.59%)</title><rect x="18.1680%" y="149" width="1.5928%" height="15" fill="rgb(234,67,33)"/><text x="18.4180%" y="159.50"></text></g><g><title>eval_to_const_value_raw (97,041 samples, 0.39%)</title><rect x="19.7608%" y="181" width="0.3867%" height="15" fill="rgb(247,98,35)"/><text x="20.0108%" y="191.50"></text></g><g><title>eval_to_const_value_raw (94,441 samples, 0.38%)</title><rect x="19.7711%" y="165" width="0.3763%" height="15" fill="rgb(247,138,52)"/><text x="20.0211%" y="175.50"></text></g><g><title>eval_to_allocation_raw (88,101 samples, 0.35%)</title><rect x="19.7964%" y="149" width="0.3511%" height="15" fill="rgb(213,79,30)"/><text x="20.0464%" y="159.50"></text></g><g><title>crate_lints (670,328 samples, 2.67%)</title><rect x="17.7059%" y="197" width="2.6711%" height="15" fill="rgb(246,177,23)"/><text x="17.9559%" y="207.50">cr..</text></g><g><title>param_env (57,621 samples, 0.23%)</title><rect x="20.1474%" y="181" width="0.2296%" height="15" fill="rgb(230,62,27)"/><text x="20.3974%" y="191.50"></text></g><g><title>predicates_of (32,251 samples, 0.13%)</title><rect x="20.2485%" y="165" width="0.1285%" height="15" fill="rgb(216,154,8)"/><text x="20.4985%" y="175.50"></text></g><g><title>predicates_defined_on (27,351 samples, 0.11%)</title><rect x="20.2681%" y="149" width="0.1090%" height="15" fill="rgb(244,35,45)"/><text x="20.5181%" y="159.50"></text></g><g><title>lint_checking (716,438 samples, 2.85%)</title><rect x="17.7002%" y="213" width="2.8549%" height="15" fill="rgb(251,115,12)"/><text x="17.9502%" y="223.50">li..</text></g><g><title>module_lints (44,670 samples, 0.18%)</title><rect x="20.3771%" y="197" width="0.1780%" height="15" fill="rgb(240,54,50)"/><text x="20.6271%" y="207.50"></text></g><g><title>lint_mod (42,740 samples, 0.17%)</title><rect x="20.3847%" y="181" width="0.1703%" height="15" fill="rgb(233,84,52)"/><text x="20.6347%" y="191.50"></text></g><g><title>privacy_access_levels (35,470 samples, 0.14%)</title><rect x="20.5551%" y="213" width="0.1413%" height="15" fill="rgb(207,117,47)"/><text x="20.8051%" y="223.50"></text></g><g><title>privacy_checking_modules (62,511 samples, 0.25%)</title><rect x="20.6964%" y="213" width="0.2491%" height="15" fill="rgb(249,43,39)"/><text x="20.9464%" y="223.50"></text></g><g><title>check_mod_privacy (61,401 samples, 0.24%)</title><rect x="20.7008%" y="197" width="0.2447%" height="15" fill="rgb(209,38,44)"/><text x="20.9508%" y="207.50"></text></g><g><title>misc_checking_3 (890,530 samples, 3.55%)</title><rect x="17.4358%" y="229" width="3.5486%" height="15" fill="rgb(236,212,23)"/><text x="17.6858%" y="239.50">misc..</text></g><g><title>adt_sized_constraint (26,821 samples, 0.11%)</title><rect x="27.7459%" y="165" width="0.1069%" height="15" fill="rgb(242,79,21)"/><text x="27.9959%" y="175.50"></text></g><g><title>associated_items (38,240 samples, 0.15%)</title><rect x="27.8663%" y="165" width="0.1524%" height="15" fill="rgb(211,96,35)"/><text x="28.1163%" y="175.50"></text></g><g><title>adt_def (29,540 samples, 0.12%)</title><rect x="28.4052%" y="133" width="0.1177%" height="15" fill="rgb(253,215,40)"/><text x="28.6552%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (28,060 samples, 0.11%)</title><rect x="28.4111%" y="117" width="0.1118%" height="15" fill="rgb(211,81,21)"/><text x="28.6611%" y="127.50"></text></g><g><title>adt_def (66,571 samples, 0.27%)</title><rect x="28.7049%" y="117" width="0.2653%" height="15" fill="rgb(208,190,38)"/><text x="28.9549%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (64,541 samples, 0.26%)</title><rect x="28.7130%" y="101" width="0.2572%" height="15" fill="rgb(235,213,38)"/><text x="28.9630%" y="111.50"></text></g><g><title>item_attrs (42,391 samples, 0.17%)</title><rect x="28.8013%" y="85" width="0.1689%" height="15" fill="rgb(237,122,38)"/><text x="29.0513%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (40,271 samples, 0.16%)</title><rect x="28.8097%" y="69" width="0.1605%" height="15" fill="rgb(244,218,35)"/><text x="29.0597%" y="79.50"></text></g><g><title>adt_def (144,251 samples, 0.57%)</title><rect x="29.1676%" y="101" width="0.5748%" height="15" fill="rgb(240,68,47)"/><text x="29.4176%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (141,381 samples, 0.56%)</title><rect x="29.1791%" y="85" width="0.5634%" height="15" fill="rgb(210,16,53)"/><text x="29.4291%" y="95.50"></text></g><g><title>item_attrs (113,621 samples, 0.45%)</title><rect x="29.2897%" y="69" width="0.4528%" height="15" fill="rgb(235,124,12)"/><text x="29.5397%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (110,671 samples, 0.44%)</title><rect x="29.3015%" y="53" width="0.4410%" height="15" fill="rgb(224,169,11)"/><text x="29.5515%" y="63.50"></text></g><g><title>adt_destructor (38,590 samples, 0.15%)</title><rect x="29.7425%" y="101" width="0.1538%" height="15" fill="rgb(250,166,2)"/><text x="29.9925%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_destructor (35,430 samples, 0.14%)</title><rect x="29.7551%" y="85" width="0.1412%" height="15" fill="rgb(242,216,29)"/><text x="30.0051%" y="95.50"></text></g><g><title>type_of (27,670 samples, 0.11%)</title><rect x="29.7860%" y="69" width="0.1103%" height="15" fill="rgb(230,116,27)"/><text x="30.0360%" y="79.50"></text></g><g><title>adt_def (43,201 samples, 0.17%)</title><rect x="29.9928%" y="85" width="0.1721%" height="15" fill="rgb(228,99,48)"/><text x="30.2428%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (41,641 samples, 0.17%)</title><rect x="29.9990%" y="69" width="0.1659%" height="15" fill="rgb(253,11,6)"/><text x="30.2490%" y="79.50"></text></g><g><title>item_attrs (25,150 samples, 0.10%)</title><rect x="30.0647%" y="53" width="0.1002%" height="15" fill="rgb(247,143,39)"/><text x="30.3147%" y="63.50"></text></g><g><title>adt_dtorck_constraint (34,611 samples, 0.14%)</title><rect x="30.4040%" y="69" width="0.1379%" height="15" fill="rgb(236,97,10)"/><text x="30.6540%" y="79.50"></text></g><g><title>adt_dtorck_constraint (101,301 samples, 0.40%)</title><rect x="30.2103%" y="85" width="0.4037%" height="15" fill="rgb(233,208,19)"/><text x="30.4603%" y="95.50"></text></g><g><title>adt_dtorck_constraint (202,192 samples, 0.81%)</title><rect x="29.8962%" y="101" width="0.8057%" height="15" fill="rgb(216,164,2)"/><text x="30.1462%" y="111.50"></text></g><g><title>adt_dtorck_constraint (454,754 samples, 1.81%)</title><rect x="29.0492%" y="117" width="1.8121%" height="15" fill="rgb(220,129,5)"/><text x="29.2992%" y="127.50">a..</text></g><g><title>type_of (30,670 samples, 0.12%)</title><rect x="30.7391%" y="101" width="0.1222%" height="15" fill="rgb(242,17,10)"/><text x="30.9891%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (27,590 samples, 0.11%)</title><rect x="30.7513%" y="85" width="0.1099%" height="15" fill="rgb(242,107,0)"/><text x="31.0013%" y="95.50"></text></g><g><title>adt_dtorck_constraint (618,187 samples, 2.46%)</title><rect x="28.5653%" y="133" width="2.4633%" height="15" fill="rgb(251,28,31)"/><text x="28.8153%" y="143.50">ad..</text></g><g><title>type_of (31,462 samples, 0.13%)</title><rect x="30.9033%" y="117" width="0.1254%" height="15" fill="rgb(233,223,10)"/><text x="31.1533%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (27,531 samples, 0.11%)</title><rect x="30.9190%" y="101" width="0.1097%" height="15" fill="rgb(215,21,27)"/><text x="31.1690%" y="111.50"></text></g><g><title>dropck_outlives (771,458 samples, 3.07%)</title><rect x="28.0736%" y="165" width="3.0741%" height="15" fill="rgb(232,23,21)"/><text x="28.3236%" y="175.50">dro..</text></g><g><title>adt_dtorck_constraint (721,357 samples, 2.87%)</title><rect x="28.2733%" y="149" width="2.8745%" height="15" fill="rgb(244,5,23)"/><text x="28.5233%" y="159.50">ad..</text></g><g><title>adt_def (27,400 samples, 0.11%)</title><rect x="31.7615%" y="133" width="0.1092%" height="15" fill="rgb(226,81,46)"/><text x="32.0115%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (26,220 samples, 0.10%)</title><rect x="31.7662%" y="117" width="0.1045%" height="15" fill="rgb(247,70,30)"/><text x="32.0162%" y="127.50"></text></g><g><title>adt_def (37,160 samples, 0.15%)</title><rect x="31.8819%" y="117" width="0.1481%" height="15" fill="rgb(212,68,19)"/><text x="32.1319%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (36,690 samples, 0.15%)</title><rect x="31.8838%" y="101" width="0.1462%" height="15" fill="rgb(240,187,13)"/><text x="32.1338%" y="111.50"></text></g><g><title>item_attrs (31,180 samples, 0.12%)</title><rect x="31.9058%" y="85" width="0.1242%" height="15" fill="rgb(223,113,26)"/><text x="32.1558%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (30,610 samples, 0.12%)</title><rect x="31.9080%" y="69" width="0.1220%" height="15" fill="rgb(206,192,2)"/><text x="32.1580%" y="79.50"></text></g><g><title>adt_def (43,951 samples, 0.18%)</title><rect x="32.0425%" y="101" width="0.1751%" height="15" fill="rgb(241,108,4)"/><text x="32.2925%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (43,461 samples, 0.17%)</title><rect x="32.0444%" y="85" width="0.1732%" height="15" fill="rgb(247,173,49)"/><text x="32.2944%" y="95.50"></text></g><g><title>adt_def (57,901 samples, 0.23%)</title><rect x="32.2211%" y="85" width="0.2307%" height="15" fill="rgb(224,114,35)"/><text x="32.4711%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (57,631 samples, 0.23%)</title><rect x="32.2222%" y="69" width="0.2296%" height="15" fill="rgb(245,159,27)"/><text x="32.4722%" y="79.50"></text></g><g><title>item_attrs (54,251 samples, 0.22%)</title><rect x="32.2356%" y="53" width="0.2162%" height="15" fill="rgb(245,172,44)"/><text x="32.4856%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (53,881 samples, 0.21%)</title><rect x="32.2371%" y="37" width="0.2147%" height="15" fill="rgb(236,23,11)"/><text x="32.4871%" y="47.50"></text></g><g><title>adt_sized_constraint (63,961 samples, 0.25%)</title><rect x="32.2176%" y="101" width="0.2549%" height="15" fill="rgb(205,117,38)"/><text x="32.4676%" y="111.50"></text></g><g><title>adt_sized_constraint (122,432 samples, 0.49%)</title><rect x="32.0300%" y="117" width="0.4879%" height="15" fill="rgb(237,72,25)"/><text x="32.2800%" y="127.50"></text></g><g><title>adt_sized_constraint (168,432 samples, 0.67%)</title><rect x="31.8707%" y="133" width="0.6712%" height="15" fill="rgb(244,70,9)"/><text x="32.1207%" y="143.50"></text></g><g><title>adt_sized_constraint (203,802 samples, 0.81%)</title><rect x="31.7377%" y="149" width="0.8121%" height="15" fill="rgb(217,125,39)"/><text x="31.9877%" y="159.50"></text></g><g><title>predicates_of (37,710 samples, 0.15%)</title><rect x="32.6690%" y="149" width="0.1503%" height="15" fill="rgb(235,36,10)"/><text x="32.9190%" y="159.50"></text></g><g><title>predicates_defined_on (30,310 samples, 0.12%)</title><rect x="32.6984%" y="133" width="0.1208%" height="15" fill="rgb(251,123,47)"/><text x="32.9484%" y="143.50"></text></g><g><title>evaluate_obligation (643,416 samples, 2.56%)</title><rect x="31.1477%" y="165" width="2.5639%" height="15" fill="rgb(221,13,13)"/><text x="31.3977%" y="175.50">ev..</text></g><g><title>trait_impls_of (221,922 samples, 0.88%)</title><rect x="32.8273%" y="149" width="0.8843%" height="15" fill="rgb(238,131,9)"/><text x="33.0773%" y="159.50"></text></g><g><title>implementations_of_trait (81,511 samples, 0.32%)</title><rect x="33.3868%" y="133" width="0.3248%" height="15" fill="rgb(211,50,8)"/><text x="33.6368%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (56,551 samples, 0.23%)</title><rect x="33.4862%" y="117" width="0.2253%" height="15" fill="rgb(245,182,24)"/><text x="33.7362%" y="127.50"></text></g><g><title>fn_sig (54,290 samples, 0.22%)</title><rect x="33.7259%" y="165" width="0.2163%" height="15" fill="rgb(242,14,37)"/><text x="33.9759%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (50,640 samples, 0.20%)</title><rect x="33.7404%" y="149" width="0.2018%" height="15" fill="rgb(246,228,12)"/><text x="33.9904%" y="159.50"></text></g><g><title>generics_of (30,700 samples, 0.12%)</title><rect x="33.9422%" y="165" width="0.1223%" height="15" fill="rgb(213,55,15)"/><text x="34.1922%" y="175.50"></text></g><g><title>item_attrs (28,860 samples, 0.12%)</title><rect x="34.1236%" y="165" width="0.1150%" height="15" fill="rgb(209,9,3)"/><text x="34.3736%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (26,350 samples, 0.10%)</title><rect x="34.1336%" y="149" width="0.1050%" height="15" fill="rgb(230,59,30)"/><text x="34.3836%" y="159.50"></text></g><g><title>method_autoderef_steps (55,711 samples, 0.22%)</title><rect x="34.2872%" y="165" width="0.2220%" height="15" fill="rgb(209,121,21)"/><text x="34.5372%" y="175.50"></text></g><g><title>evaluate_obligation (46,921 samples, 0.19%)</title><rect x="34.3223%" y="149" width="0.1870%" height="15" fill="rgb(220,109,13)"/><text x="34.5723%" y="159.50"></text></g><g><title>trait_impls_of (34,511 samples, 0.14%)</title><rect x="34.3717%" y="133" width="0.1375%" height="15" fill="rgb(232,18,1)"/><text x="34.6217%" y="143.50"></text></g><g><title>explicit_predicates_of (26,770 samples, 0.11%)</title><rect x="34.7381%" y="133" width="0.1067%" height="15" fill="rgb(215,41,42)"/><text x="34.9881%" y="143.50"></text></g><g><title>predicates_of (103,670 samples, 0.41%)</title><rect x="34.5282%" y="165" width="0.4131%" height="15" fill="rgb(224,123,36)"/><text x="34.7782%" y="175.50"></text></g><g><title>predicates_defined_on (71,190 samples, 0.28%)</title><rect x="34.6577%" y="149" width="0.2837%" height="15" fill="rgb(240,125,3)"/><text x="34.9077%" y="159.50"></text></g><g><title>type_of (38,331 samples, 0.15%)</title><rect x="34.9678%" y="165" width="0.1527%" height="15" fill="rgb(205,98,50)"/><text x="35.2178%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (32,411 samples, 0.13%)</title><rect x="34.9914%" y="149" width="0.1292%" height="15" fill="rgb(205,185,37)"/><text x="35.2414%" y="159.50"></text></g><g><title>item_bodies_checking (3,507,570 samples, 13.98%)</title><rect x="21.1964%" y="213" width="13.9769%" height="15" fill="rgb(238,207,15)"/><text x="21.4464%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (3,506,110 samples, 13.97%)</title><rect x="21.2022%" y="197" width="13.9711%" height="15" fill="rgb(213,199,42)"/><text x="21.4522%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (3,502,109 samples, 13.96%)</title><rect x="21.2182%" y="181" width="13.9552%" height="15" fill="rgb(235,201,11)"/><text x="21.4682%" y="191.50">typeck</text></g><g><title>layout_of (30,040 samples, 0.12%)</title><rect x="35.2022%" y="181" width="0.1197%" height="15" fill="rgb(207,46,11)"/><text x="35.4522%" y="191.50"></text></g><g><title>impl_parent (108,500 samples, 0.43%)</title><rect x="37.5281%" y="53" width="0.4323%" height="15" fill="rgb(241,35,35)"/><text x="37.7781%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (85,090 samples, 0.34%)</title><rect x="37.6214%" y="37" width="0.3391%" height="15" fill="rgb(243,32,47)"/><text x="37.8714%" y="47.50"></text></g><g><title>impl_trait_ref (356,784 samples, 1.42%)</title><rect x="37.9605%" y="53" width="1.4217%" height="15" fill="rgb(247,202,23)"/><text x="38.2105%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (333,453 samples, 1.33%)</title><rect x="38.0535%" y="37" width="1.3287%" height="15" fill="rgb(219,102,11)"/><text x="38.3035%" y="47.50"></text></g><g><title>coherent_trait (610,776 samples, 2.43%)</title><rect x="37.0812%" y="85" width="2.4338%" height="15" fill="rgb(243,110,44)"/><text x="37.3312%" y="95.50">co..</text></g><g><title>specialization_graph_of (606,776 samples, 2.42%)</title><rect x="37.0972%" y="69" width="2.4179%" height="15" fill="rgb(222,74,54)"/><text x="37.3472%" y="79.50">sp..</text></g><g><title>trait_impls_of (33,340 samples, 0.13%)</title><rect x="39.3822%" y="53" width="0.1329%" height="15" fill="rgb(216,99,12)"/><text x="39.6322%" y="63.50"></text></g><g><title>adt_destructor (622,417 samples, 2.48%)</title><rect x="37.0415%" y="117" width="2.4802%" height="15" fill="rgb(226,22,26)"/><text x="37.2915%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (621,917 samples, 2.48%)</title><rect x="37.0435%" y="101" width="2.4782%" height="15" fill="rgb(217,163,10)"/><text x="37.2935%" y="111.50">me..</text></g><g><title>adt_dtorck_constraint (627,657 samples, 2.50%)</title><rect x="37.0228%" y="133" width="2.5011%" height="15" fill="rgb(213,25,53)"/><text x="37.2728%" y="143.50">ad..</text></g><g><title>dropck_outlives (655,998 samples, 2.61%)</title><rect x="36.9137%" y="165" width="2.6140%" height="15" fill="rgb(252,105,26)"/><text x="37.1637%" y="175.50">dr..</text></g><g><title>adt_dtorck_constraint (639,857 samples, 2.55%)</title><rect x="36.9780%" y="149" width="2.5497%" height="15" fill="rgb(220,39,43)"/><text x="37.2280%" y="159.50">ad..</text></g><g><title>adt_def (58,270 samples, 0.23%)</title><rect x="39.6353%" y="101" width="0.2322%" height="15" fill="rgb(229,68,48)"/><text x="39.8853%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (58,050 samples, 0.23%)</title><rect x="39.6362%" y="85" width="0.2313%" height="15" fill="rgb(252,8,32)"/><text x="39.8862%" y="95.50"></text></g><g><title>item_attrs (25,330 samples, 0.10%)</title><rect x="39.7666%" y="69" width="0.1009%" height="15" fill="rgb(223,20,43)"/><text x="40.0166%" y="79.50"></text></g><g><title>adt_sized_constraint (63,430 samples, 0.25%)</title><rect x="39.6321%" y="117" width="0.2528%" height="15" fill="rgb(229,81,49)"/><text x="39.8821%" y="127.50"></text></g><g><title>adt_sized_constraint (70,210 samples, 0.28%)</title><rect x="39.6104%" y="133" width="0.2798%" height="15" fill="rgb(236,28,36)"/><text x="39.8604%" y="143.50"></text></g><g><title>evaluate_obligation (93,101 samples, 0.37%)</title><rect x="39.5277%" y="165" width="0.3710%" height="15" fill="rgb(249,185,26)"/><text x="39.7777%" y="175.50"></text></g><g><title>adt_sized_constraint (83,501 samples, 0.33%)</title><rect x="39.5660%" y="149" width="0.3327%" height="15" fill="rgb(249,174,33)"/><text x="39.8160%" y="159.50"></text></g><g><title>impl_trait_ref (29,340 samples, 0.12%)</title><rect x="39.9283%" y="165" width="0.1169%" height="15" fill="rgb(233,201,37)"/><text x="40.1783%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (28,430 samples, 0.11%)</title><rect x="39.9319%" y="149" width="0.1133%" height="15" fill="rgb(221,78,26)"/><text x="40.1819%" y="159.50"></text></g><g><title>item_types_checking (1,286,964 samples, 5.13%)</title><rect x="35.1733%" y="213" width="5.1283%" height="15" fill="rgb(250,127,30)"/><text x="35.4233%" y="223.50">item_t..</text></g><g><title>check_mod_item_types (1,285,274 samples, 5.12%)</title><rect x="35.1801%" y="197" width="5.1215%" height="15" fill="rgb(230,49,44)"/><text x="35.4301%" y="207.50">check_..</text></g><g><title>typeck (1,249,684 samples, 4.98%)</title><rect x="35.3219%" y="181" width="4.9797%" height="15" fill="rgb(229,67,23)"/><text x="35.5719%" y="191.50">typeck</text></g><g><title>lint_levels (29,940 samples, 0.12%)</title><rect x="40.3016%" y="213" width="0.1193%" height="15" fill="rgb(249,83,47)"/><text x="40.5516%" y="223.50"></text></g><g><title>late_bound_vars_map (48,790 samples, 0.19%)</title><rect x="40.7500%" y="165" width="0.1944%" height="15" fill="rgb(215,43,3)"/><text x="41.0000%" y="175.50"></text></g><g><title>resolve_lifetimes (41,670 samples, 0.17%)</title><rect x="40.7784%" y="149" width="0.1660%" height="15" fill="rgb(238,154,13)"/><text x="41.0284%" y="159.50"></text></g><g><title>fn_sig (95,081 samples, 0.38%)</title><rect x="40.5850%" y="181" width="0.3789%" height="15" fill="rgb(219,56,2)"/><text x="40.8350%" y="191.50"></text></g><g><title>predicates_of (27,330 samples, 0.11%)</title><rect x="41.0621%" y="181" width="0.1089%" height="15" fill="rgb(233,0,4)"/><text x="41.3121%" y="191.50"></text></g><g><title>type_collecting (211,902 samples, 0.84%)</title><rect x="40.4244%" y="213" width="0.8444%" height="15" fill="rgb(235,30,7)"/><text x="40.6744%" y="223.50"></text></g><g><title>collect_mod_item_types (201,702 samples, 0.80%)</title><rect x="40.4651%" y="197" width="0.8037%" height="15" fill="rgb(250,79,13)"/><text x="40.7151%" y="207.50"></text></g><g><title>adt_sized_constraint (36,371 samples, 0.14%)</title><rect x="42.8724%" y="165" width="0.1449%" height="15" fill="rgb(211,146,34)"/><text x="43.1224%" y="175.50"></text></g><g><title>trait_impls_of (45,781 samples, 0.18%)</title><rect x="43.1067%" y="165" width="0.1824%" height="15" fill="rgb(228,22,38)"/><text x="43.3567%" y="175.50"></text></g><g><title>evaluate_obligation (258,454 samples, 1.03%)</title><rect x="42.3925%" y="181" width="1.0299%" height="15" fill="rgb(235,168,5)"/><text x="42.6425%" y="191.50"></text></g><g><title>type_of (33,451 samples, 0.13%)</title><rect x="43.2891%" y="165" width="0.1333%" height="15" fill="rgb(221,155,16)"/><text x="43.5391%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (28,920 samples, 0.12%)</title><rect x="43.3072%" y="149" width="0.1152%" height="15" fill="rgb(215,215,53)"/><text x="43.5572%" y="159.50"></text></g><g><title>implied_outlives_bounds (46,330 samples, 0.18%)</title><rect x="43.4224%" y="181" width="0.1846%" height="15" fill="rgb(223,4,10)"/><text x="43.6724%" y="191.50"></text></g><g><title>param_env (132,631 samples, 0.53%)</title><rect x="43.6081%" y="181" width="0.5285%" height="15" fill="rgb(234,103,6)"/><text x="43.8581%" y="191.50"></text></g><g><title>region_scope_tree (32,440 samples, 0.13%)</title><rect x="44.1641%" y="181" width="0.1293%" height="15" fill="rgb(227,97,0)"/><text x="44.4141%" y="191.50"></text></g><g><title>analysis (10,732,601 samples, 42.77%)</title><rect x="1.5281%" y="245" width="42.7671%" height="15" fill="rgb(234,150,53)"/><text x="1.7781%" y="255.50">analysis</text></g><g><title>type_check_crate (5,849,965 samples, 23.31%)</title><rect x="20.9843%" y="229" width="23.3109%" height="15" fill="rgb(228,201,54)"/><text x="21.2343%" y="239.50">type_check_crate</text></g><g><title>wf_checking (758,878 samples, 3.02%)</title><rect x="41.2712%" y="213" width="3.0240%" height="15" fill="rgb(222,22,37)"/><text x="41.5212%" y="223.50">wf_..</text></g><g><title>check_item_well_formed (742,498 samples, 2.96%)</title><rect x="41.3365%" y="197" width="2.9587%" height="15" fill="rgb(237,53,32)"/><text x="41.5865%" y="207.50">che..</text></g><g><title>native_libraries (27,040 samples, 0.11%)</title><rect x="45.8627%" y="229" width="0.1077%" height="15" fill="rgb(233,25,53)"/><text x="46.1127%" y="239.50"></text></g><g><title>codegen_crate (438,835 samples, 1.75%)</title><rect x="44.3205%" y="245" width="1.7487%" height="15" fill="rgb(210,40,34)"/><text x="44.5705%" y="255.50"></text></g><g><title>AST_validation (46,950 samples, 0.19%)</title><rect x="46.5687%" y="229" width="0.1871%" height="15" fill="rgb(241,220,44)"/><text x="46.8187%" y="239.50"></text></g><g><title>complete_gated_feature_checking (28,571 samples, 0.11%)</title><rect x="46.7558%" y="229" width="0.1138%" height="15" fill="rgb(235,28,35)"/><text x="47.0058%" y="239.50"></text></g><g><title>crate_injection (54,430 samples, 0.22%)</title><rect x="46.8696%" y="229" width="0.2169%" height="15" fill="rgb(210,56,17)"/><text x="47.1196%" y="239.50"></text></g><g><title>metadata_load_macro (273,332 samples, 1.09%)</title><rect x="68.3205%" y="197" width="1.0892%" height="15" fill="rgb(224,130,29)"/><text x="68.5705%" y="207.50"></text></g><g><title>macro_expand_crate (7,009,520 samples, 27.93%)</title><rect x="47.0865%" y="229" width="27.9315%" height="15" fill="rgb(235,212,8)"/><text x="47.3365%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (6,995,790 samples, 27.88%)</title><rect x="47.1412%" y="213" width="27.8767%" height="15" fill="rgb(223,33,50)"/><text x="47.3912%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (1,407,416 samples, 5.61%)</title><rect x="69.4097%" y="197" width="5.6083%" height="15" fill="rgb(219,149,13)"/><text x="69.6597%" y="207.50">metadat..</text></g><g><title>metadata_register_crate (505,628 samples, 2.01%)</title><rect x="73.0031%" y="181" width="2.0148%" height="15" fill="rgb(250,156,29)"/><text x="73.2531%" y="191.50">m..</text></g><g><title>metadata_register_crate (41,021 samples, 0.16%)</title><rect x="74.8545%" y="165" width="0.1635%" height="15" fill="rgb(216,193,19)"/><text x="75.1045%" y="175.50"></text></g><g><title>maybe_create_a_macro_crate (194,792 samples, 0.78%)</title><rect x="75.0378%" y="229" width="0.7762%" height="15" fill="rgb(216,135,14)"/><text x="75.2878%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (43,410 samples, 0.17%)</title><rect x="75.8141%" y="229" width="0.1730%" height="15" fill="rgb(241,47,5)"/><text x="76.0641%" y="239.50"></text></g><g><title>finalize_imports (176,601 samples, 0.70%)</title><rect x="76.0062%" y="213" width="0.7037%" height="15" fill="rgb(233,42,35)"/><text x="76.2562%" y="223.50"></text></g><g><title>late_resolve_crate (1,710,499 samples, 6.82%)</title><rect x="76.7823%" y="213" width="6.8160%" height="15" fill="rgb(231,13,6)"/><text x="77.0323%" y="223.50">late_reso..</text></g><g><title>metadata_register_crate (213,363 samples, 0.85%)</title><rect x="82.7481%" y="197" width="0.8502%" height="15" fill="rgb(207,181,40)"/><text x="82.9981%" y="207.50"></text></g><g><title>metadata_register_crate (137,612 samples, 0.55%)</title><rect x="83.0499%" y="181" width="0.5484%" height="15" fill="rgb(254,173,49)"/><text x="83.2999%" y="191.50"></text></g><g><title>configure_and_expand (9,443,267 samples, 37.63%)</title><rect x="46.0691%" y="245" width="37.6294%" height="15" fill="rgb(221,1,38)"/><text x="46.3191%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,935,242 samples, 7.71%)</title><rect x="75.9870%" y="229" width="7.7115%" height="15" fill="rgb(206,124,46)"/><text x="76.2370%" y="239.50">resolve_cra..</text></g><g><title>drop_ast (28,321 samples, 0.11%)</title><rect x="83.6986%" y="245" width="0.1129%" height="15" fill="rgb(249,21,11)"/><text x="83.9486%" y="255.50"></text></g><g><title>early_lint_checks (70,810 samples, 0.28%)</title><rect x="83.8796%" y="245" width="0.2822%" height="15" fill="rgb(222,201,40)"/><text x="84.1296%" y="255.50"></text></g><g><title>free_global_ctxt (2,097,094 samples, 8.36%)</title><rect x="84.1617%" y="245" width="8.3565%" height="15" fill="rgb(235,61,29)"/><text x="84.4117%" y="255.50">free_global_..</text></g><g><title>crate_hash (85,471 samples, 0.34%)</title><rect x="92.8269%" y="229" width="0.3406%" height="15" fill="rgb(219,207,3)"/><text x="93.0769%" y="239.50"></text></g><g><title>generate_crate_metadata (166,852 samples, 0.66%)</title><rect x="92.5182%" y="245" width="0.6649%" height="15" fill="rgb(222,56,46)"/><text x="92.7682%" y="255.50"></text></g><g><title>hir_lowering (344,364 samples, 1.37%)</title><rect x="93.1831%" y="245" width="1.3722%" height="15" fill="rgb(239,76,54)"/><text x="93.4331%" y="255.50"></text></g><g><title>link (47,061 samples, 0.19%)</title><rect x="94.5553%" y="245" width="0.1875%" height="15" fill="rgb(231,124,27)"/><text x="94.8053%" y="255.50"></text></g><g><title>parse_crate (371,454 samples, 1.48%)</title><rect x="94.7428%" y="245" width="1.4802%" height="15" fill="rgb(249,195,6)"/><text x="94.9928%" y="255.50"></text></g><g><title>prepare_outputs (178,712 samples, 0.71%)</title><rect x="96.2468%" y="245" width="0.7121%" height="15" fill="rgb(237,174,47)"/><text x="96.4968%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (350,854 samples, 1.40%)</title><rect x="96.9589%" y="245" width="1.3981%" height="15" fill="rgb(206,201,31)"/><text x="97.2089%" y="255.50"></text></g><g><title>setup_global_ctxt (96,141 samples, 0.38%)</title><rect x="98.3981%" y="245" width="0.3831%" height="15" fill="rgb(231,57,52)"/><text x="98.6481%" y="255.50"></text></g><g><title>all (25,095,433 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(248,177,22)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (25,095,433 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,211,37)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (305,853 samples, 1.22%)</title><rect x="98.7812%" y="245" width="1.2188%" height="15" fill="rgb(241,128,51)"/><text x="99.0312%" y="255.50"></text></g></svg></svg>