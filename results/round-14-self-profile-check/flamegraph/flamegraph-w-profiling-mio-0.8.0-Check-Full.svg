<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (179,771 samples, 0.13%)</title><rect x="9.8855%" y="181" width="0.1318%" height="15" fill="rgb(227,0,7)"/><text x="10.1355%" y="191.50"></text></g><g><title>codegen_fn_attrs (202,473 samples, 0.15%)</title><rect x="10.3252%" y="165" width="0.1484%" height="15" fill="rgb(217,0,24)"/><text x="10.5752%" y="175.50"></text></g><g><title>adt_drop_tys (153,392 samples, 0.11%)</title><rect x="12.4034%" y="133" width="0.1125%" height="15" fill="rgb(221,193,54)"/><text x="12.6534%" y="143.50"></text></g><g><title>needs_drop_raw (785,340 samples, 0.58%)</title><rect x="12.3621%" y="149" width="0.5758%" height="15" fill="rgb(248,212,6)"/><text x="12.6121%" y="159.50"></text></g><g><title>is_copy_raw (575,596 samples, 0.42%)</title><rect x="12.5158%" y="133" width="0.4220%" height="15" fill="rgb(208,68,35)"/><text x="12.7658%" y="143.50"></text></g><g><title>evaluate_obligation (495,716 samples, 0.36%)</title><rect x="12.5744%" y="117" width="0.3634%" height="15" fill="rgb(232,128,0)"/><text x="12.8244%" y="127.50"></text></g><g><title>resolve_instance (706,706 samples, 0.52%)</title><rect x="12.9561%" y="149" width="0.5181%" height="15" fill="rgb(207,160,47)"/><text x="13.2061%" y="159.50"></text></g><g><title>thir_body (893,968 samples, 0.66%)</title><rect x="13.4960%" y="149" width="0.6554%" height="15" fill="rgb(228,23,34)"/><text x="13.7460%" y="159.50"></text></g><g><title>mir_const (6,605,835 samples, 4.84%)</title><rect x="9.3232%" y="197" width="4.8430%" height="15" fill="rgb(218,30,26)"/><text x="9.5732%" y="207.50">mir_co..</text></g><g><title>unsafety_check_result (5,659,125 samples, 4.15%)</title><rect x="10.0173%" y="181" width="4.1489%" height="15" fill="rgb(220,122,19)"/><text x="10.2673%" y="191.50">unsaf..</text></g><g><title>mir_built (5,036,606 samples, 3.69%)</title><rect x="10.4737%" y="165" width="3.6925%" height="15" fill="rgb(250,228,42)"/><text x="10.7237%" y="175.50">mir_..</text></g><g><title>mir_const (583,467 samples, 0.43%)</title><rect x="14.3843%" y="181" width="0.4278%" height="15" fill="rgb(240,193,28)"/><text x="14.6343%" y="191.50"></text></g><g><title>unsafety_check_result (423,744 samples, 0.31%)</title><rect x="14.5014%" y="165" width="0.3107%" height="15" fill="rgb(216,20,37)"/><text x="14.7514%" y="175.50"></text></g><g><title>mir_built (328,444 samples, 0.24%)</title><rect x="14.5713%" y="149" width="0.2408%" height="15" fill="rgb(206,188,39)"/><text x="14.8213%" y="159.50"></text></g><g><title>mir_const_qualif (886,978 samples, 0.65%)</title><rect x="14.1662%" y="197" width="0.6503%" height="15" fill="rgb(217,207,13)"/><text x="14.4162%" y="207.50"></text></g><g><title>mir_promoted (8,318,872 samples, 6.10%)</title><rect x="8.7180%" y="213" width="6.0989%" height="15" fill="rgb(231,73,38)"/><text x="8.9680%" y="223.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (250,142 samples, 0.18%)</title><rect x="14.8174%" y="213" width="0.1834%" height="15" fill="rgb(225,20,46)"/><text x="15.0674%" y="223.50"></text></g><g><title>type_op_prove_predicate (1,266,534 samples, 0.93%)</title><rect x="15.1412%" y="213" width="0.9285%" height="15" fill="rgb(210,31,41)"/><text x="15.3912%" y="223.50"></text></g><g><title>MIR_borrow_checking (20,962,772 samples, 15.37%)</title><rect x="0.7080%" y="245" width="15.3686%" height="15" fill="rgb(221,200,47)"/><text x="0.9580%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,808,320 samples, 15.26%)</title><rect x="0.8213%" y="229" width="15.2554%" height="15" fill="rgb(226,26,5)"/><text x="1.0713%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (286,834 samples, 0.21%)</title><rect x="16.0766%" y="245" width="0.2103%" height="15" fill="rgb(249,33,26)"/><text x="16.3266%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (220,482 samples, 0.16%)</title><rect x="16.1253%" y="229" width="0.1616%" height="15" fill="rgb(235,183,28)"/><text x="16.3753%" y="239.50"></text></g><g><title>hir_module_items (213,152 samples, 0.16%)</title><rect x="16.2869%" y="245" width="0.1563%" height="15" fill="rgb(221,5,38)"/><text x="16.5369%" y="255.50"></text></g><g><title>codegen_fn_attrs (255,522 samples, 0.19%)</title><rect x="16.8103%" y="181" width="0.1873%" height="15" fill="rgb(247,18,42)"/><text x="17.0603%" y="191.50"></text></g><g><title>codegen_fn_attrs (442,724 samples, 0.32%)</title><rect x="16.6797%" y="213" width="0.3246%" height="15" fill="rgb(241,131,45)"/><text x="16.9297%" y="223.50"></text></g><g><title>should_inherit_track_caller (382,284 samples, 0.28%)</title><rect x="16.7240%" y="197" width="0.2803%" height="15" fill="rgb(249,31,29)"/><text x="16.9740%" y="207.50"></text></g><g><title>check_mod_attrs (718,688 samples, 0.53%)</title><rect x="16.4775%" y="229" width="0.5269%" height="15" fill="rgb(225,111,53)"/><text x="16.7275%" y="239.50"></text></g><g><title>check_mod_const_bodies (141,052 samples, 0.10%)</title><rect x="17.0043%" y="229" width="0.1034%" height="15" fill="rgb(238,160,17)"/><text x="17.2543%" y="239.50"></text></g><g><title>lookup_deprecation_entry (180,123 samples, 0.13%)</title><rect x="17.2999%" y="213" width="0.1321%" height="15" fill="rgb(214,148,48)"/><text x="17.5499%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (461,166 samples, 0.34%)</title><rect x="17.1702%" y="229" width="0.3381%" height="15" fill="rgb(232,36,49)"/><text x="17.4202%" y="239.50"></text></g><g><title>misc_checking_1 (1,527,987 samples, 1.12%)</title><rect x="16.4435%" y="245" width="1.1202%" height="15" fill="rgb(209,103,24)"/><text x="16.6935%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (355,524 samples, 0.26%)</title><rect x="17.5648%" y="229" width="0.2606%" height="15" fill="rgb(229,88,8)"/><text x="17.8148%" y="239.50"></text></g><g><title>check_mod_liveness (261,563 samples, 0.19%)</title><rect x="17.6337%" y="213" width="0.1918%" height="15" fill="rgb(213,181,19)"/><text x="17.8837%" y="223.50"></text></g><g><title>misc_checking_2 (817,429 samples, 0.60%)</title><rect x="17.5638%" y="245" width="0.5993%" height="15" fill="rgb(254,191,54)"/><text x="17.8138%" y="255.50"></text></g><g><title>match_checking (460,505 samples, 0.34%)</title><rect x="17.8254%" y="229" width="0.3376%" height="15" fill="rgb(241,83,37)"/><text x="18.0754%" y="239.50"></text></g><g><title>check_match (423,575 samples, 0.31%)</title><rect x="17.8525%" y="213" width="0.3105%" height="15" fill="rgb(233,36,39)"/><text x="18.1025%" y="223.50"></text></g><g><title>check_private_in_public (250,363 samples, 0.18%)</title><rect x="18.1701%" y="229" width="0.1836%" height="15" fill="rgb(226,3,54)"/><text x="18.4201%" y="239.50"></text></g><g><title>death_checking (667,577 samples, 0.49%)</title><rect x="18.3537%" y="229" width="0.4894%" height="15" fill="rgb(245,192,40)"/><text x="18.6037%" y="239.50"></text></g><g><title>item_attrs (203,082 samples, 0.15%)</title><rect x="18.6942%" y="213" width="0.1489%" height="15" fill="rgb(238,167,29)"/><text x="18.9442%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (200,772 samples, 0.15%)</title><rect x="18.6959%" y="197" width="0.1472%" height="15" fill="rgb(232,182,51)"/><text x="18.9459%" y="207.50"></text></g><g><title>eval_to_const_value_raw (143,022 samples, 0.10%)</title><rect x="19.5810%" y="197" width="0.1049%" height="15" fill="rgb(231,60,39)"/><text x="19.8310%" y="207.50"></text></g><g><title>eval_to_const_value_raw (140,262 samples, 0.10%)</title><rect x="19.5830%" y="181" width="0.1028%" height="15" fill="rgb(208,69,12)"/><text x="19.8330%" y="191.50"></text></g><g><title>param_env (516,036 samples, 0.38%)</title><rect x="19.6858%" y="197" width="0.3783%" height="15" fill="rgb(235,93,37)"/><text x="19.9358%" y="207.50"></text></g><g><title>predicates_of (258,294 samples, 0.19%)</title><rect x="19.8748%" y="181" width="0.1894%" height="15" fill="rgb(213,116,39)"/><text x="20.1248%" y="191.50"></text></g><g><title>predicates_defined_on (206,824 samples, 0.15%)</title><rect x="19.9125%" y="165" width="0.1516%" height="15" fill="rgb(222,207,29)"/><text x="20.1625%" y="175.50"></text></g><g><title>crate_lints (2,995,874 samples, 2.20%)</title><rect x="18.8442%" y="213" width="2.1964%" height="15" fill="rgb(206,96,30)"/><text x="19.0942%" y="223.50">c..</text></g><g><title>type_of (1,331,495 samples, 0.98%)</title><rect x="20.0644%" y="197" width="0.9762%" height="15" fill="rgb(218,138,4)"/><text x="20.3144%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (856,220 samples, 0.63%)</title><rect x="20.4129%" y="181" width="0.6277%" height="15" fill="rgb(250,191,14)"/><text x="20.6629%" y="191.50"></text></g><g><title>lint_checking (3,431,449 samples, 2.52%)</title><rect x="18.8431%" y="229" width="2.5157%" height="15" fill="rgb(239,60,40)"/><text x="19.0931%" y="239.50">li..</text></g><g><title>module_lints (434,035 samples, 0.32%)</title><rect x="21.0406%" y="213" width="0.3182%" height="15" fill="rgb(206,27,48)"/><text x="21.2906%" y="223.50"></text></g><g><title>lint_mod (420,254 samples, 0.31%)</title><rect x="21.0507%" y="197" width="0.3081%" height="15" fill="rgb(225,35,8)"/><text x="21.3007%" y="207.50"></text></g><g><title>privacy_access_levels (264,473 samples, 0.19%)</title><rect x="21.3588%" y="229" width="0.1939%" height="15" fill="rgb(250,213,24)"/><text x="21.6088%" y="239.50"></text></g><g><title>privacy_checking_modules (706,138 samples, 0.52%)</title><rect x="21.5527%" y="229" width="0.5177%" height="15" fill="rgb(247,123,22)"/><text x="21.8027%" y="239.50"></text></g><g><title>check_mod_privacy (697,818 samples, 0.51%)</title><rect x="21.5588%" y="213" width="0.5116%" height="15" fill="rgb(231,138,38)"/><text x="21.8088%" y="223.50"></text></g><g><title>misc_checking_3 (5,361,240 samples, 3.93%)</title><rect x="18.1631%" y="245" width="3.9305%" height="15" fill="rgb(231,145,46)"/><text x="18.4131%" y="255.50">misc..</text></g><g><title>impl_trait_ref (152,792 samples, 0.11%)</title><rect x="22.3161%" y="149" width="0.1120%" height="15" fill="rgb(251,118,11)"/><text x="22.5661%" y="159.50"></text></g><g><title>adt_destructor (315,973 samples, 0.23%)</title><rect x="22.2155%" y="197" width="0.2317%" height="15" fill="rgb(217,147,25)"/><text x="22.4655%" y="207.50"></text></g><g><title>coherent_trait (307,853 samples, 0.23%)</title><rect x="22.2214%" y="181" width="0.2257%" height="15" fill="rgb(247,81,37)"/><text x="22.4714%" y="191.50"></text></g><g><title>specialization_graph_of (306,693 samples, 0.22%)</title><rect x="22.2223%" y="165" width="0.2248%" height="15" fill="rgb(209,12,38)"/><text x="22.4723%" y="175.50"></text></g><g><title>impl_parent (3,020,245 samples, 2.21%)</title><rect x="26.5876%" y="181" width="2.2143%" height="15" fill="rgb(227,1,9)"/><text x="26.8376%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,761,868 samples, 1.29%)</title><rect x="27.5101%" y="165" width="1.2917%" height="15" fill="rgb(248,47,43)"/><text x="27.7601%" y="175.50"></text></g><g><title>impl_trait_ref (6,514,305 samples, 4.78%)</title><rect x="28.8018%" y="181" width="4.7759%" height="15" fill="rgb(221,10,30)"/><text x="29.0518%" y="191.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,012,820 samples, 3.68%)</title><rect x="29.9026%" y="165" width="3.6751%" height="15" fill="rgb(210,229,1)"/><text x="30.1526%" y="175.50">meta..</text></g><g><title>explicit_predicates_of (139,033 samples, 0.10%)</title><rect x="33.6938%" y="149" width="0.1019%" height="15" fill="rgb(222,148,37)"/><text x="33.9438%" y="159.50"></text></g><g><title>predicates_of (199,333 samples, 0.15%)</title><rect x="33.6656%" y="181" width="0.1461%" height="15" fill="rgb(234,67,33)"/><text x="33.9156%" y="191.50"></text></g><g><title>predicates_defined_on (174,623 samples, 0.13%)</title><rect x="33.6837%" y="165" width="0.1280%" height="15" fill="rgb(247,98,35)"/><text x="33.9337%" y="175.50"></text></g><g><title>trait_impls_of (1,066,363 samples, 0.78%)</title><rect x="33.8132%" y="181" width="0.7818%" height="15" fill="rgb(247,138,52)"/><text x="34.0632%" y="191.50"></text></g><g><title>implementations_of_trait (294,694 samples, 0.22%)</title><rect x="34.3789%" y="165" width="0.2161%" height="15" fill="rgb(213,79,30)"/><text x="34.6289%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (229,192 samples, 0.17%)</title><rect x="34.4270%" y="149" width="0.1680%" height="15" fill="rgb(246,177,23)"/><text x="34.6770%" y="159.50"></text></g><g><title>coherent_trait (16,954,189 samples, 12.43%)</title><rect x="22.1776%" y="213" width="12.4298%" height="15" fill="rgb(230,62,27)"/><text x="22.4276%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (16,429,613 samples, 12.05%)</title><rect x="22.5622%" y="197" width="12.0452%" height="15" fill="rgb(216,154,8)"/><text x="22.8122%" y="207.50">specialization_gra..</text></g><g><title>coherence_checking (17,077,140 samples, 12.52%)</title><rect x="22.1589%" y="229" width="12.5199%" height="15" fill="rgb(244,35,45)"/><text x="22.4089%" y="239.50">coherence_checking</text></g><g><title>associated_item (320,594 samples, 0.24%)</title><rect x="46.8486%" y="165" width="0.2350%" height="15" fill="rgb(251,115,12)"/><text x="47.0986%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (266,053 samples, 0.20%)</title><rect x="46.8886%" y="149" width="0.1951%" height="15" fill="rgb(240,54,50)"/><text x="47.1386%" y="159.50"></text></g><g><title>associated_items (447,345 samples, 0.33%)</title><rect x="46.7750%" y="181" width="0.3280%" height="15" fill="rgb(233,84,52)"/><text x="47.0250%" y="191.50"></text></g><g><title>adt_def (398,025 samples, 0.29%)</title><rect x="47.4192%" y="85" width="0.2918%" height="15" fill="rgb(207,117,47)"/><text x="47.6692%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (397,735 samples, 0.29%)</title><rect x="47.4194%" y="69" width="0.2916%" height="15" fill="rgb(249,43,39)"/><text x="47.6694%" y="79.50"></text></g><g><title>item_attrs (395,995 samples, 0.29%)</title><rect x="47.4207%" y="53" width="0.2903%" height="15" fill="rgb(209,38,44)"/><text x="47.6707%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (395,525 samples, 0.29%)</title><rect x="47.4210%" y="37" width="0.2900%" height="15" fill="rgb(236,212,23)"/><text x="47.6710%" y="47.50"></text></g><g><title>adt_dtorck_constraint (402,865 samples, 0.30%)</title><rect x="47.4172%" y="101" width="0.2954%" height="15" fill="rgb(242,79,21)"/><text x="47.6672%" y="111.50"></text></g><g><title>adt_dtorck_constraint (428,235 samples, 0.31%)</title><rect x="47.3990%" y="117" width="0.3140%" height="15" fill="rgb(211,96,35)"/><text x="47.6490%" y="127.50"></text></g><g><title>adt_dtorck_constraint (479,605 samples, 0.35%)</title><rect x="47.3698%" y="133" width="0.3516%" height="15" fill="rgb(253,215,40)"/><text x="47.6198%" y="143.50"></text></g><g><title>adt_dtorck_constraint (513,995 samples, 0.38%)</title><rect x="47.3519%" y="149" width="0.3768%" height="15" fill="rgb(211,81,21)"/><text x="47.6019%" y="159.50"></text></g><g><title>dropck_outlives (830,708 samples, 0.61%)</title><rect x="47.1395%" y="181" width="0.6090%" height="15" fill="rgb(208,190,38)"/><text x="47.3895%" y="191.50"></text></g><g><title>adt_dtorck_constraint (681,365 samples, 0.50%)</title><rect x="47.2490%" y="165" width="0.4995%" height="15" fill="rgb(235,213,38)"/><text x="47.4990%" y="175.50"></text></g><g><title>adt_sized_constraint (138,970 samples, 0.10%)</title><rect x="48.3036%" y="165" width="0.1019%" height="15" fill="rgb(237,122,38)"/><text x="48.5536%" y="175.50"></text></g><g><title>trait_impls_of (195,882 samples, 0.14%)</title><rect x="48.6842%" y="165" width="0.1436%" height="15" fill="rgb(244,218,35)"/><text x="48.9342%" y="175.50"></text></g><g><title>evaluate_obligation (1,473,832 samples, 1.08%)</title><rect x="47.7485%" y="181" width="1.0805%" height="15" fill="rgb(240,68,47)"/><text x="47.9985%" y="191.50"></text></g><g><title>item_attrs (150,282 samples, 0.11%)</title><rect x="49.0581%" y="181" width="0.1102%" height="15" fill="rgb(210,16,53)"/><text x="49.3081%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (143,632 samples, 0.11%)</title><rect x="49.0630%" y="165" width="0.1053%" height="15" fill="rgb(235,124,12)"/><text x="49.3130%" y="175.50"></text></g><g><title>evaluate_obligation (161,421 samples, 0.12%)</title><rect x="49.3014%" y="165" width="0.1183%" height="15" fill="rgb(224,169,11)"/><text x="49.5514%" y="175.50"></text></g><g><title>method_autoderef_steps (306,512 samples, 0.22%)</title><rect x="49.2069%" y="181" width="0.2247%" height="15" fill="rgb(250,166,2)"/><text x="49.4569%" y="191.50"></text></g><g><title>object_safety_violations (140,502 samples, 0.10%)</title><rect x="49.4316%" y="181" width="0.1030%" height="15" fill="rgb(242,216,29)"/><text x="49.6816%" y="191.50"></text></g><g><title>explicit_predicates_of (145,921 samples, 0.11%)</title><rect x="49.6855%" y="149" width="0.1070%" height="15" fill="rgb(230,116,27)"/><text x="49.9355%" y="159.50"></text></g><g><title>predicates_of (334,624 samples, 0.25%)</title><rect x="49.5753%" y="181" width="0.2453%" height="15" fill="rgb(228,99,48)"/><text x="49.8253%" y="191.50"></text></g><g><title>predicates_defined_on (246,923 samples, 0.18%)</title><rect x="49.6396%" y="165" width="0.1810%" height="15" fill="rgb(253,11,6)"/><text x="49.8896%" y="175.50"></text></g><g><title>typeck (743,398 samples, 0.55%)</title><rect x="49.9029%" y="181" width="0.5450%" height="15" fill="rgb(247,143,39)"/><text x="50.1529%" y="191.50"></text></g><g><title>item_bodies_checking (21,534,079 samples, 15.79%)</title><rect x="34.7135%" y="229" width="15.7874%" height="15" fill="rgb(236,97,10)"/><text x="34.9635%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,531,109 samples, 15.79%)</title><rect x="34.7157%" y="213" width="15.7853%" height="15" fill="rgb(233,208,19)"/><text x="34.9657%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (21,427,376 samples, 15.71%)</title><rect x="34.7917%" y="197" width="15.7092%" height="15" fill="rgb(216,164,2)"/><text x="35.0417%" y="207.50">typeck</text></g><g><title>item_types_checking (1,436,336 samples, 1.05%)</title><rect x="50.5009%" y="229" width="1.0530%" height="15" fill="rgb(220,129,5)"/><text x="50.7509%" y="239.50"></text></g><g><title>check_mod_item_types (1,423,706 samples, 1.04%)</title><rect x="50.5102%" y="213" width="1.0438%" height="15" fill="rgb(242,17,10)"/><text x="50.7602%" y="223.50"></text></g><g><title>fn_sig (503,285 samples, 0.37%)</title><rect x="51.8062%" y="197" width="0.3690%" height="15" fill="rgb(242,107,0)"/><text x="52.0562%" y="207.50"></text></g><g><title>named_region_map (520,863 samples, 0.38%)</title><rect x="52.3195%" y="181" width="0.3819%" height="15" fill="rgb(251,28,31)"/><text x="52.5695%" y="191.50"></text></g><g><title>resolve_lifetimes (489,893 samples, 0.36%)</title><rect x="52.3422%" y="165" width="0.3592%" height="15" fill="rgb(233,223,10)"/><text x="52.5922%" y="175.50"></text></g><g><title>lint_levels (164,252 samples, 0.12%)</title><rect x="52.5809%" y="149" width="0.1204%" height="15" fill="rgb(215,21,27)"/><text x="52.8309%" y="159.50"></text></g><g><title>generics_of (736,446 samples, 0.54%)</title><rect x="52.1752%" y="197" width="0.5399%" height="15" fill="rgb(232,23,21)"/><text x="52.4252%" y="207.50"></text></g><g><title>explicit_predicates_of (142,493 samples, 0.10%)</title><rect x="52.8850%" y="165" width="0.1045%" height="15" fill="rgb(244,5,23)"/><text x="53.1350%" y="175.50"></text></g><g><title>predicates_of (542,176 samples, 0.40%)</title><rect x="52.7697%" y="197" width="0.3975%" height="15" fill="rgb(226,81,46)"/><text x="53.0197%" y="207.50"></text></g><g><title>predicates_defined_on (484,435 samples, 0.36%)</title><rect x="52.8120%" y="181" width="0.3552%" height="15" fill="rgb(247,70,30)"/><text x="53.0620%" y="191.50"></text></g><g><title>inferred_outlives_of (242,322 samples, 0.18%)</title><rect x="52.9895%" y="165" width="0.1777%" height="15" fill="rgb(212,68,19)"/><text x="53.2395%" y="175.50"></text></g><g><title>inferred_outlives_crate (215,802 samples, 0.16%)</title><rect x="53.0089%" y="149" width="0.1582%" height="15" fill="rgb(240,187,13)"/><text x="53.2589%" y="159.50"></text></g><g><title>type_collecting (2,353,566 samples, 1.73%)</title><rect x="51.5570%" y="229" width="1.7255%" height="15" fill="rgb(223,113,26)"/><text x="51.8070%" y="239.50"></text></g><g><title>collect_mod_item_types (2,325,546 samples, 1.70%)</title><rect x="51.5775%" y="213" width="1.7049%" height="15" fill="rgb(206,192,2)"/><text x="51.8275%" y="223.50"></text></g><g><title>adt_sized_constraint (180,852 samples, 0.13%)</title><rect x="55.3032%" y="181" width="0.1326%" height="15" fill="rgb(241,108,4)"/><text x="55.5532%" y="191.50"></text></g><g><title>evaluate_obligation (626,848 samples, 0.46%)</title><rect x="54.9992%" y="197" width="0.4596%" height="15" fill="rgb(247,173,49)"/><text x="55.2492%" y="207.50"></text></g><g><title>implied_outlives_bounds (216,383 samples, 0.16%)</title><rect x="55.4661%" y="197" width="0.1586%" height="15" fill="rgb(224,114,35)"/><text x="55.7161%" y="207.50"></text></g><g><title>param_env (303,824 samples, 0.22%)</title><rect x="55.6248%" y="197" width="0.2227%" height="15" fill="rgb(245,159,27)"/><text x="55.8748%" y="207.50"></text></g><g><title>region_scope_tree (361,503 samples, 0.27%)</title><rect x="55.9075%" y="197" width="0.2650%" height="15" fill="rgb(245,172,44)"/><text x="56.1575%" y="207.50"></text></g><g><title>check_impl_item_well_formed (3,723,387 samples, 2.73%)</title><rect x="53.4582%" y="213" width="2.7298%" height="15" fill="rgb(236,23,11)"/><text x="53.7082%" y="223.50">ch..</text></g><g><title>evaluate_obligation (333,732 samples, 0.24%)</title><rect x="57.0715%" y="197" width="0.2447%" height="15" fill="rgb(205,117,38)"/><text x="57.3215%" y="207.50"></text></g><g><title>param_env (249,861 samples, 0.18%)</title><rect x="57.3739%" y="197" width="0.1832%" height="15" fill="rgb(237,72,25)"/><text x="57.6239%" y="207.50"></text></g><g><title>check_item_well_formed (2,113,978 samples, 1.55%)</title><rect x="56.1880%" y="213" width="1.5498%" height="15" fill="rgb(244,70,9)"/><text x="56.4380%" y="223.50"></text></g><g><title>analysis (78,242,759 samples, 57.36%)</title><rect x="0.4996%" y="261" width="57.3627%" height="15" fill="rgb(217,125,39)"/><text x="0.7496%" y="271.50">analysis</text></g><g><title>type_check_crate (48,788,592 samples, 35.77%)</title><rect x="22.0936%" y="245" width="35.7688%" height="15" fill="rgb(235,36,10)"/><text x="22.3436%" y="255.50">type_check_crate</text></g><g><title>wf_checking (6,240,359 samples, 4.58%)</title><rect x="53.2873%" y="229" width="4.5750%" height="15" fill="rgb(251,123,47)"/><text x="53.5373%" y="239.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (169,852 samples, 0.12%)</title><rect x="57.7378%" y="213" width="0.1245%" height="15" fill="rgb(221,13,13)"/><text x="57.9878%" y="223.50"></text></g><g><title>codegen_crate (674,567 samples, 0.49%)</title><rect x="57.8706%" y="261" width="0.4946%" height="15" fill="rgb(238,131,9)"/><text x="58.1206%" y="271.50"></text></g><g><title>AST_validation (372,884 samples, 0.27%)</title><rect x="58.5331%" y="245" width="0.2734%" height="15" fill="rgb(211,50,8)"/><text x="58.7831%" y="255.50"></text></g><g><title>complete_gated_feature_checking (177,172 samples, 0.13%)</title><rect x="58.8065%" y="245" width="0.1299%" height="15" fill="rgb(245,182,24)"/><text x="59.0565%" y="255.50"></text></g><g><title>metadata_load_macro (557,344 samples, 0.41%)</title><rect x="82.8447%" y="213" width="0.4086%" height="15" fill="rgb(242,14,37)"/><text x="83.0947%" y="223.50"></text></g><g><title>metadata_register_crate (2,787,061 samples, 2.04%)</title><rect x="83.2533%" y="213" width="2.0433%" height="15" fill="rgb(246,228,12)"/><text x="83.5033%" y="223.50">m..</text></g><g><title>metadata_register_crate (947,460 samples, 0.69%)</title><rect x="84.6020%" y="197" width="0.6946%" height="15" fill="rgb(213,55,15)"/><text x="84.8520%" y="207.50"></text></g><g><title>macro_expand_crate (36,434,994 samples, 26.71%)</title><rect x="59.0007%" y="245" width="26.7119%" height="15" fill="rgb(209,9,3)"/><text x="59.2507%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (36,402,394 samples, 26.69%)</title><rect x="59.0246%" y="229" width="26.6880%" height="15" fill="rgb(230,59,30)"/><text x="59.2746%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (567,327 samples, 0.42%)</title><rect x="85.2966%" y="213" width="0.4159%" height="15" fill="rgb(209,121,21)"/><text x="85.5466%" y="223.50"></text></g><g><title>finalize_imports (207,192 samples, 0.15%)</title><rect x="85.8191%" y="229" width="0.1519%" height="15" fill="rgb(220,109,13)"/><text x="86.0691%" y="239.50"></text></g><g><title>finalize_macro_resolutions (575,297 samples, 0.42%)</title><rect x="85.9710%" y="229" width="0.4218%" height="15" fill="rgb(232,18,1)"/><text x="86.2210%" y="239.50"></text></g><g><title>late_resolve_crate (3,737,792 samples, 2.74%)</title><rect x="86.3927%" y="229" width="2.7403%" height="15" fill="rgb(215,41,42)"/><text x="86.6427%" y="239.50">la..</text></g><g><title>resolve_check_unused (137,661 samples, 0.10%)</title><rect x="89.1673%" y="229" width="0.1009%" height="15" fill="rgb(224,123,36)"/><text x="89.4173%" y="239.50"></text></g><g><title>configure_and_expand (42,284,620 samples, 31.00%)</title><rect x="58.3652%" y="261" width="31.0004%" height="15" fill="rgb(240,125,3)"/><text x="58.6152%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (4,848,614 samples, 3.55%)</title><rect x="85.8109%" y="245" width="3.5547%" height="15" fill="rgb(205,98,50)"/><text x="86.0609%" y="255.50">reso..</text></g><g><title>drop_ast (209,352 samples, 0.15%)</title><rect x="89.3656%" y="261" width="0.1535%" height="15" fill="rgb(205,185,37)"/><text x="89.6156%" y="271.50"></text></g><g><title>early_lint_checks (427,375 samples, 0.31%)</title><rect x="89.5314%" y="261" width="0.3133%" height="15" fill="rgb(238,207,15)"/><text x="89.7814%" y="271.50"></text></g><g><title>free_global_ctxt (3,654,681 samples, 2.68%)</title><rect x="89.8447%" y="261" width="2.6794%" height="15" fill="rgb(213,199,42)"/><text x="90.0947%" y="271.50">fr..</text></g><g><title>mir_for_ctfe (148,872 samples, 0.11%)</title><rect x="93.4826%" y="245" width="0.1091%" height="15" fill="rgb(235,201,11)"/><text x="93.7326%" y="255.50"></text></g><g><title>generate_crate_metadata (1,522,927 samples, 1.12%)</title><rect x="92.5241%" y="261" width="1.1165%" height="15" fill="rgb(207,46,11)"/><text x="92.7741%" y="271.50"></text></g><g><title>hir_lowering (5,920,605 samples, 4.34%)</title><rect x="93.6406%" y="261" width="4.3406%" height="15" fill="rgb(241,35,35)"/><text x="93.8906%" y="271.50">hir_l..</text></g><g><title>parse_crate (1,041,072 samples, 0.76%)</title><rect x="98.0283%" y="261" width="0.7632%" height="15" fill="rgb(243,32,47)"/><text x="98.2783%" y="271.50"></text></g><g><title>prepare_outputs (340,794 samples, 0.25%)</title><rect x="98.7985%" y="261" width="0.2498%" height="15" fill="rgb(247,202,23)"/><text x="99.0485%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (806,679 samples, 0.59%)</title><rect x="99.0484%" y="261" width="0.5914%" height="15" fill="rgb(219,102,11)"/><text x="99.2984%" y="271.50"></text></g><g><title>all (136,400,025 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (136,400,025 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (381,714 samples, 0.28%)</title><rect x="99.7202%" y="261" width="0.2798%" height="15" fill="rgb(216,99,12)"/><text x="99.9702%" y="271.50"></text></g></svg></svg>