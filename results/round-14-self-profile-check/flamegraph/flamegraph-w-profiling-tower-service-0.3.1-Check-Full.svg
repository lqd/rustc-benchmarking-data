<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (36,110 samples, 0.10%)</title><rect x="6.8003%" y="149" width="0.1021%" height="15" fill="rgb(227,0,7)"/><text x="7.0503%" y="159.50"></text></g><g><title>needs_drop_raw (300,823 samples, 0.85%)</title><rect x="7.8354%" y="117" width="0.8508%" height="15" fill="rgb(217,0,24)"/><text x="8.0854%" y="127.50"></text></g><g><title>is_copy_raw (293,083 samples, 0.83%)</title><rect x="7.8573%" y="101" width="0.8289%" height="15" fill="rgb(221,193,54)"/><text x="8.1073%" y="111.50"></text></g><g><title>evaluate_obligation (269,973 samples, 0.76%)</title><rect x="7.9226%" y="85" width="0.7635%" height="15" fill="rgb(248,212,6)"/><text x="8.1726%" y="95.50"></text></g><g><title>trait_impls_of (233,883 samples, 0.66%)</title><rect x="8.0247%" y="69" width="0.6615%" height="15" fill="rgb(208,68,35)"/><text x="8.2747%" y="79.50"></text></g><g><title>implementations_of_trait (49,311 samples, 0.14%)</title><rect x="8.5467%" y="53" width="0.1395%" height="15" fill="rgb(232,128,0)"/><text x="8.7967%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (42,111 samples, 0.12%)</title><rect x="8.5671%" y="37" width="0.1191%" height="15" fill="rgb(207,160,47)"/><text x="8.8171%" y="47.50"></text></g><g><title>resolve_instance (49,961 samples, 0.14%)</title><rect x="8.6861%" y="117" width="0.1413%" height="15" fill="rgb(228,23,34)"/><text x="8.9361%" y="127.50"></text></g><g><title>thir_body (60,671 samples, 0.17%)</title><rect x="8.8380%" y="117" width="0.1716%" height="15" fill="rgb(218,30,26)"/><text x="9.0880%" y="127.50"></text></g><g><title>mir_const (918,281 samples, 2.60%)</title><rect x="6.4198%" y="165" width="2.5971%" height="15" fill="rgb(220,122,19)"/><text x="6.6698%" y="175.50">mi..</text></g><g><title>unsafety_check_result (747,659 samples, 2.11%)</title><rect x="6.9024%" y="149" width="2.1145%" height="15" fill="rgb(250,228,42)"/><text x="7.1524%" y="159.50">u..</text></g><g><title>mir_built (656,057 samples, 1.86%)</title><rect x="7.1615%" y="133" width="1.8555%" height="15" fill="rgb(240,193,28)"/><text x="7.4115%" y="143.50">m..</text></g><g><title>mir_promoted (1,056,692 samples, 2.99%)</title><rect x="6.0551%" y="181" width="2.9885%" height="15" fill="rgb(216,20,37)"/><text x="6.3051%" y="191.50">mir..</text></g><g><title>type_op_normalize_fn_sig (59,710 samples, 0.17%)</title><rect x="9.0437%" y="181" width="0.1689%" height="15" fill="rgb(206,188,39)"/><text x="9.2937%" y="191.50"></text></g><g><title>type_op_normalize_ty (64,372 samples, 0.18%)</title><rect x="9.2125%" y="181" width="0.1821%" height="15" fill="rgb(217,207,13)"/><text x="9.4625%" y="191.50"></text></g><g><title>type_op_prove_predicate (277,493 samples, 0.78%)</title><rect x="9.3946%" y="181" width="0.7848%" height="15" fill="rgb(231,73,38)"/><text x="9.6446%" y="191.50"></text></g><g><title>MIR_borrow_checking (2,800,652 samples, 7.92%)</title><rect x="2.2840%" y="213" width="7.9208%" height="15" fill="rgb(225,20,46)"/><text x="2.5340%" y="223.50">MIR_borrow_..</text></g><g><title>mir_borrowck (2,786,582 samples, 7.88%)</title><rect x="2.3238%" y="197" width="7.8810%" height="15" fill="rgb(210,31,41)"/><text x="2.5738%" y="207.50">mir_borrowck</text></g><g><title>hir_owner (35,700 samples, 0.10%)</title><rect x="10.5031%" y="197" width="0.1010%" height="15" fill="rgb(221,200,47)"/><text x="10.7531%" y="207.50"></text></g><g><title>hir_module_items (136,632 samples, 0.39%)</title><rect x="10.2199%" y="213" width="0.3864%" height="15" fill="rgb(226,26,5)"/><text x="10.4699%" y="223.50"></text></g><g><title>get_lang_items (93,151 samples, 0.26%)</title><rect x="11.1783%" y="165" width="0.2634%" height="15" fill="rgb(249,33,26)"/><text x="11.4283%" y="175.50"></text></g><g><title>associated_item (44,500 samples, 0.13%)</title><rect x="11.5938%" y="149" width="0.1259%" height="15" fill="rgb(235,183,28)"/><text x="11.8438%" y="159.50"></text></g><g><title>should_inherit_track_caller (101,221 samples, 0.29%)</title><rect x="11.4417%" y="165" width="0.2863%" height="15" fill="rgb(221,5,38)"/><text x="11.6917%" y="175.50"></text></g><g><title>codegen_fn_attrs (293,314 samples, 0.83%)</title><rect x="10.9834%" y="181" width="0.8295%" height="15" fill="rgb(247,18,42)"/><text x="11.2334%" y="191.50"></text></g><g><title>check_mod_attrs (398,494 samples, 1.13%)</title><rect x="10.6884%" y="197" width="1.1270%" height="15" fill="rgb(241,131,45)"/><text x="10.9384%" y="207.50"></text></g><g><title>check_mod_const_bodies (38,320 samples, 0.11%)</title><rect x="11.8154%" y="197" width="0.1084%" height="15" fill="rgb(249,31,29)"/><text x="12.0654%" y="207.50"></text></g><g><title>lookup_deprecation_entry (46,070 samples, 0.13%)</title><rect x="12.1985%" y="181" width="0.1303%" height="15" fill="rgb(225,111,53)"/><text x="12.4485%" y="191.50"></text></g><g><title>metadata_decode_entry_lookup_deprecation_entry (39,580 samples, 0.11%)</title><rect x="12.2168%" y="165" width="0.1119%" height="15" fill="rgb(238,160,17)"/><text x="12.4668%" y="175.50"></text></g><g><title>metadata_decode_entry_lookup_stability (45,391 samples, 0.13%)</title><rect x="12.3583%" y="165" width="0.1284%" height="15" fill="rgb(214,148,48)"/><text x="12.6083%" y="175.50"></text></g><g><title>lookup_stability (90,952 samples, 0.26%)</title><rect x="12.3288%" y="181" width="0.2572%" height="15" fill="rgb(232,36,49)"/><text x="12.5788%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (223,593 samples, 0.63%)</title><rect x="11.9942%" y="197" width="0.6324%" height="15" fill="rgb(209,103,24)"/><text x="12.2442%" y="207.50"></text></g><g><title>misc_checking_1 (750,048 samples, 2.12%)</title><rect x="10.6084%" y="213" width="2.1213%" height="15" fill="rgb(229,88,8)"/><text x="10.8584%" y="223.50">m..</text></g><g><title>liveness_and_intrinsic_checking (80,580 samples, 0.23%)</title><rect x="12.7354%" y="197" width="0.2279%" height="15" fill="rgb(213,181,19)"/><text x="12.9854%" y="207.50"></text></g><g><title>check_mod_liveness (64,590 samples, 0.18%)</title><rect x="12.7807%" y="181" width="0.1827%" height="15" fill="rgb(254,191,54)"/><text x="13.0307%" y="191.50"></text></g><g><title>misc_checking_2 (210,672 samples, 0.60%)</title><rect x="12.7297%" y="213" width="0.5958%" height="15" fill="rgb(241,83,37)"/><text x="12.9797%" y="223.50"></text></g><g><title>match_checking (128,062 samples, 0.36%)</title><rect x="12.9633%" y="197" width="0.3622%" height="15" fill="rgb(233,36,39)"/><text x="13.2133%" y="207.50"></text></g><g><title>check_match (120,802 samples, 0.34%)</title><rect x="12.9839%" y="181" width="0.3417%" height="15" fill="rgb(226,3,54)"/><text x="13.2339%" y="191.50"></text></g><g><title>check_private_in_public (69,751 samples, 0.20%)</title><rect x="13.3563%" y="197" width="0.1973%" height="15" fill="rgb(245,192,40)"/><text x="13.6063%" y="207.50"></text></g><g><title>death_checking (145,171 samples, 0.41%)</title><rect x="13.5536%" y="197" width="0.4106%" height="15" fill="rgb(238,167,29)"/><text x="13.8036%" y="207.50"></text></g><g><title>lint_levels (53,771 samples, 0.15%)</title><rect x="13.8121%" y="181" width="0.1521%" height="15" fill="rgb(232,182,51)"/><text x="14.0621%" y="191.50"></text></g><g><title>crate_lints (207,572 samples, 0.59%)</title><rect x="13.9699%" y="181" width="0.5871%" height="15" fill="rgb(231,60,39)"/><text x="14.2199%" y="191.50"></text></g><g><title>param_env (68,271 samples, 0.19%)</title><rect x="14.3639%" y="165" width="0.1931%" height="15" fill="rgb(208,69,12)"/><text x="14.6139%" y="175.50"></text></g><g><title>lint_checking (260,983 samples, 0.74%)</title><rect x="13.9641%" y="197" width="0.7381%" height="15" fill="rgb(235,93,37)"/><text x="14.2141%" y="207.50"></text></g><g><title>module_lints (51,371 samples, 0.15%)</title><rect x="14.5570%" y="181" width="0.1453%" height="15" fill="rgb(213,116,39)"/><text x="14.8070%" y="191.50"></text></g><g><title>lint_mod (48,781 samples, 0.14%)</title><rect x="14.5643%" y="165" width="0.1380%" height="15" fill="rgb(222,207,29)"/><text x="14.8143%" y="175.50"></text></g><g><title>privacy_access_levels (87,081 samples, 0.25%)</title><rect x="14.7023%" y="197" width="0.2463%" height="15" fill="rgb(206,96,30)"/><text x="14.9523%" y="207.50"></text></g><g><title>privacy_checking_modules (166,881 samples, 0.47%)</title><rect x="14.9485%" y="197" width="0.4720%" height="15" fill="rgb(218,138,4)"/><text x="15.1985%" y="207.50"></text></g><g><title>check_mod_privacy (165,111 samples, 0.47%)</title><rect x="14.9535%" y="181" width="0.4670%" height="15" fill="rgb(250,191,14)"/><text x="15.2035%" y="191.50"></text></g><g><title>misc_checking_3 (761,998 samples, 2.16%)</title><rect x="13.3255%" y="213" width="2.1551%" height="15" fill="rgb(239,60,40)"/><text x="13.5755%" y="223.50">m..</text></g><g><title>coherent_trait (104,421 samples, 0.30%)</title><rect x="15.6253%" y="181" width="0.2953%" height="15" fill="rgb(206,27,48)"/><text x="15.8753%" y="191.50"></text></g><g><title>specialization_graph_of (89,781 samples, 0.25%)</title><rect x="15.6667%" y="165" width="0.2539%" height="15" fill="rgb(225,35,8)"/><text x="15.9167%" y="175.50"></text></g><g><title>coherence_checking (164,962 samples, 0.47%)</title><rect x="15.5770%" y="197" width="0.4665%" height="15" fill="rgb(250,213,24)"/><text x="15.8270%" y="207.50"></text></g><g><title>impl_parent (189,063 samples, 0.53%)</title><rect x="22.3796%" y="53" width="0.5347%" height="15" fill="rgb(247,123,22)"/><text x="22.6296%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (136,962 samples, 0.39%)</title><rect x="22.5270%" y="37" width="0.3874%" height="15" fill="rgb(231,138,38)"/><text x="22.7770%" y="47.50"></text></g><g><title>impl_trait_ref (655,265 samples, 1.85%)</title><rect x="22.9143%" y="53" width="1.8532%" height="15" fill="rgb(231,145,46)"/><text x="23.1643%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (607,284 samples, 1.72%)</title><rect x="23.0500%" y="37" width="1.7175%" height="15" fill="rgb(251,118,11)"/><text x="23.3000%" y="47.50"></text></g><g><title>adt_destructor (1,132,112 samples, 3.20%)</title><rect x="21.7556%" y="117" width="3.2018%" height="15" fill="rgb(217,147,25)"/><text x="22.0056%" y="127.50">adt..</text></g><g><title>metadata_decode_entry_adt_destructor (1,130,292 samples, 3.20%)</title><rect x="21.7607%" y="101" width="3.1967%" height="15" fill="rgb(247,81,37)"/><text x="22.0107%" y="111.50">met..</text></g><g><title>coherent_trait (1,123,242 samples, 3.18%)</title><rect x="21.7807%" y="85" width="3.1767%" height="15" fill="rgb(209,12,38)"/><text x="22.0307%" y="95.50">coh..</text></g><g><title>specialization_graph_of (1,119,882 samples, 3.17%)</title><rect x="21.7902%" y="69" width="3.1672%" height="15" fill="rgb(227,1,9)"/><text x="22.0402%" y="79.50">spe..</text></g><g><title>trait_impls_of (67,131 samples, 0.19%)</title><rect x="24.7676%" y="53" width="0.1899%" height="15" fill="rgb(248,47,43)"/><text x="25.0176%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,153,582 samples, 3.26%)</title><rect x="21.7095%" y="133" width="3.2625%" height="15" fill="rgb(221,10,30)"/><text x="21.9595%" y="143.50">adt..</text></g><g><title>dropck_outlives (1,360,703 samples, 3.85%)</title><rect x="21.3873%" y="149" width="3.8483%" height="15" fill="rgb(210,229,1)"/><text x="21.6373%" y="159.50">drop..</text></g><g><title>normalize_projection_ty (93,191 samples, 0.26%)</title><rect x="24.9720%" y="133" width="0.2636%" height="15" fill="rgb(222,148,37)"/><text x="25.2220%" y="143.50"></text></g><g><title>evaluate_obligation (111,271 samples, 0.31%)</title><rect x="25.2356%" y="149" width="0.3147%" height="15" fill="rgb(234,67,33)"/><text x="25.4856%" y="159.50"></text></g><g><title>trait_impls_of (55,760 samples, 0.16%)</title><rect x="25.3926%" y="133" width="0.1577%" height="15" fill="rgb(247,98,35)"/><text x="25.6426%" y="143.50"></text></g><g><title>implementations_of_trait (37,870 samples, 0.11%)</title><rect x="25.4432%" y="117" width="0.1071%" height="15" fill="rgb(247,138,52)"/><text x="25.6932%" y="127.50"></text></g><g><title>impl_trait_ref (46,470 samples, 0.13%)</title><rect x="25.6606%" y="149" width="0.1314%" height="15" fill="rgb(213,79,30)"/><text x="25.9106%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (44,060 samples, 0.12%)</title><rect x="25.6674%" y="133" width="0.1246%" height="15" fill="rgb(246,177,23)"/><text x="25.9174%" y="143.50"></text></g><g><title>method_autoderef_steps (129,762 samples, 0.37%)</title><rect x="25.8210%" y="149" width="0.3670%" height="15" fill="rgb(230,62,27)"/><text x="26.0710%" y="159.50"></text></g><g><title>evaluate_obligation (98,771 samples, 0.28%)</title><rect x="25.9087%" y="133" width="0.2793%" height="15" fill="rgb(216,154,8)"/><text x="26.1587%" y="143.50"></text></g><g><title>trait_impls_of (52,320 samples, 0.15%)</title><rect x="26.0400%" y="117" width="0.1480%" height="15" fill="rgb(244,35,45)"/><text x="26.2900%" y="127.50"></text></g><g><title>trait_impls_of (40,990 samples, 0.12%)</title><rect x="26.2836%" y="149" width="0.1159%" height="15" fill="rgb(251,115,12)"/><text x="26.5336%" y="159.50"></text></g><g><title>item_bodies_checking (3,662,741 samples, 10.36%)</title><rect x="16.1274%" y="197" width="10.3589%" height="15" fill="rgb(240,54,50)"/><text x="16.3774%" y="207.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (3,659,541 samples, 10.35%)</title><rect x="16.1365%" y="181" width="10.3499%" height="15" fill="rgb(233,84,52)"/><text x="16.3865%" y="191.50">typeck_item_bod..</text></g><g><title>typeck (3,643,641 samples, 10.30%)</title><rect x="16.1814%" y="165" width="10.3049%" height="15" fill="rgb(207,117,47)"/><text x="16.4314%" y="175.50">typeck</text></g><g><title>item_types_checking (1,320,434 samples, 3.73%)</title><rect x="26.4864%" y="197" width="3.7344%" height="15" fill="rgb(249,43,39)"/><text x="26.7364%" y="207.50">item..</text></g><g><title>check_mod_item_types (1,316,054 samples, 3.72%)</title><rect x="26.4987%" y="181" width="3.7220%" height="15" fill="rgb(209,38,44)"/><text x="26.7487%" y="191.50">chec..</text></g><g><title>fn_sig (153,451 samples, 0.43%)</title><rect x="30.6458%" y="165" width="0.4340%" height="15" fill="rgb(236,212,23)"/><text x="30.8958%" y="175.50"></text></g><g><title>is_late_bound_map (115,381 samples, 0.33%)</title><rect x="31.2867%" y="149" width="0.3263%" height="15" fill="rgb(242,79,21)"/><text x="31.5367%" y="159.50"></text></g><g><title>resolve_lifetimes (108,261 samples, 0.31%)</title><rect x="31.3069%" y="133" width="0.3062%" height="15" fill="rgb(211,96,35)"/><text x="31.5569%" y="143.50"></text></g><g><title>generics_of (216,021 samples, 0.61%)</title><rect x="31.0798%" y="165" width="0.6109%" height="15" fill="rgb(253,215,40)"/><text x="31.3298%" y="175.50"></text></g><g><title>late_bound_vars_map (86,871 samples, 0.25%)</title><rect x="32.3369%" y="133" width="0.2457%" height="15" fill="rgb(211,81,21)"/><text x="32.5869%" y="143.50"></text></g><g><title>resolve_lifetimes (82,621 samples, 0.23%)</title><rect x="32.3489%" y="117" width="0.2337%" height="15" fill="rgb(208,190,38)"/><text x="32.5989%" y="127.50"></text></g><g><title>explicit_item_bounds (281,282 samples, 0.80%)</title><rect x="31.9965%" y="149" width="0.7955%" height="15" fill="rgb(235,213,38)"/><text x="32.2465%" y="159.50"></text></g><g><title>item_bounds (389,294 samples, 1.10%)</title><rect x="31.7445%" y="165" width="1.1010%" height="15" fill="rgb(237,122,38)"/><text x="31.9945%" y="175.50"></text></g><g><title>late_bound_vars_map (39,641 samples, 0.11%)</title><rect x="33.2809%" y="117" width="0.1121%" height="15" fill="rgb(244,218,35)"/><text x="33.5309%" y="127.50"></text></g><g><title>resolve_lifetimes (36,991 samples, 0.10%)</title><rect x="33.2884%" y="101" width="0.1046%" height="15" fill="rgb(240,68,47)"/><text x="33.5384%" y="111.50"></text></g><g><title>explicit_predicates_of (205,603 samples, 0.58%)</title><rect x="33.0099%" y="133" width="0.5815%" height="15" fill="rgb(210,16,53)"/><text x="33.2599%" y="143.50"></text></g><g><title>trait_explicit_predicates_and_bounds (67,061 samples, 0.19%)</title><rect x="33.4017%" y="117" width="0.1897%" height="15" fill="rgb(235,124,12)"/><text x="33.6517%" y="127.50"></text></g><g><title>predicates_of (276,614 samples, 0.78%)</title><rect x="32.8455%" y="165" width="0.7823%" height="15" fill="rgb(224,169,11)"/><text x="33.0955%" y="175.50"></text></g><g><title>predicates_defined_on (255,603 samples, 0.72%)</title><rect x="32.9049%" y="149" width="0.7229%" height="15" fill="rgb(250,166,2)"/><text x="33.1549%" y="159.50"></text></g><g><title>super_predicates_of (53,021 samples, 0.15%)</title><rect x="33.6278%" y="165" width="0.1500%" height="15" fill="rgb(242,216,29)"/><text x="33.8778%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (38,811 samples, 0.11%)</title><rect x="33.6680%" y="149" width="0.1098%" height="15" fill="rgb(230,116,27)"/><text x="33.9180%" y="159.50"></text></g><g><title>type_collecting (1,456,556 samples, 4.12%)</title><rect x="30.2262%" y="197" width="4.1194%" height="15" fill="rgb(228,99,48)"/><text x="30.4762%" y="207.50">type..</text></g><g><title>collect_mod_item_types (1,444,976 samples, 4.09%)</title><rect x="30.2589%" y="181" width="4.0867%" height="15" fill="rgb(253,11,6)"/><text x="30.5089%" y="191.50">coll..</text></g><g><title>type_of (189,542 samples, 0.54%)</title><rect x="33.8095%" y="165" width="0.5361%" height="15" fill="rgb(247,143,39)"/><text x="34.0595%" y="175.50"></text></g><g><title>type_param_predicates (64,151 samples, 0.18%)</title><rect x="34.1642%" y="149" width="0.1814%" height="15" fill="rgb(236,97,10)"/><text x="34.4142%" y="159.50"></text></g><g><title>type_param_predicates (51,091 samples, 0.14%)</title><rect x="34.2011%" y="133" width="0.1445%" height="15" fill="rgb(233,208,19)"/><text x="34.4511%" y="143.50"></text></g><g><title>evaluate_obligation (113,431 samples, 0.32%)</title><rect x="37.0311%" y="165" width="0.3208%" height="15" fill="rgb(216,164,2)"/><text x="37.2811%" y="175.50"></text></g><g><title>implied_outlives_bounds (151,583 samples, 0.43%)</title><rect x="37.3519%" y="165" width="0.4287%" height="15" fill="rgb(220,129,5)"/><text x="37.6019%" y="175.50"></text></g><g><title>param_env (161,930 samples, 0.46%)</title><rect x="37.7806%" y="165" width="0.4580%" height="15" fill="rgb(242,17,10)"/><text x="38.0306%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,351,364 samples, 3.82%)</title><rect x="34.5441%" y="181" width="3.8219%" height="15" fill="rgb(242,107,0)"/><text x="34.7941%" y="191.50">chec..</text></g><g><title>region_scope_tree (45,090 samples, 0.13%)</title><rect x="38.2385%" y="165" width="0.1275%" height="15" fill="rgb(251,28,31)"/><text x="38.4885%" y="175.50"></text></g><g><title>evaluate_obligation (124,681 samples, 0.35%)</title><rect x="39.8403%" y="165" width="0.3526%" height="15" fill="rgb(233,223,10)"/><text x="40.0903%" y="175.50"></text></g><g><title>trait_impls_of (37,481 samples, 0.11%)</title><rect x="40.0869%" y="149" width="0.1060%" height="15" fill="rgb(215,21,27)"/><text x="40.3369%" y="159.50"></text></g><g><title>implied_outlives_bounds (37,010 samples, 0.10%)</title><rect x="40.1991%" y="165" width="0.1047%" height="15" fill="rgb(232,23,21)"/><text x="40.4491%" y="175.50"></text></g><g><title>param_env (163,582 samples, 0.46%)</title><rect x="40.3038%" y="165" width="0.4626%" height="15" fill="rgb(244,5,23)"/><text x="40.5538%" y="175.50"></text></g><g><title>predicates_of (63,241 samples, 0.18%)</title><rect x="40.7664%" y="165" width="0.1789%" height="15" fill="rgb(226,81,46)"/><text x="41.0164%" y="175.50"></text></g><g><title>predicates_defined_on (46,561 samples, 0.13%)</title><rect x="40.8136%" y="149" width="0.1317%" height="15" fill="rgb(247,70,30)"/><text x="41.0636%" y="159.50"></text></g><g><title>check_item_well_formed (917,870 samples, 2.60%)</title><rect x="38.3661%" y="181" width="2.5959%" height="15" fill="rgb(212,68,19)"/><text x="38.6161%" y="191.50">ch..</text></g><g><title>adt_def (40,951 samples, 0.12%)</title><rect x="42.8000%" y="149" width="0.1158%" height="15" fill="rgb(240,187,13)"/><text x="43.0500%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (39,281 samples, 0.11%)</title><rect x="42.8047%" y="133" width="0.1111%" height="15" fill="rgb(223,113,26)"/><text x="43.0547%" y="143.50"></text></g><g><title>adt_sized_constraint (53,331 samples, 0.15%)</title><rect x="42.7710%" y="165" width="0.1508%" height="15" fill="rgb(206,192,2)"/><text x="43.0210%" y="175.50"></text></g><g><title>evaluate_obligation (229,173 samples, 0.65%)</title><rect x="42.9249%" y="165" width="0.6481%" height="15" fill="rgb(241,108,4)"/><text x="43.1749%" y="175.50"></text></g><g><title>trait_impls_of (35,780 samples, 0.10%)</title><rect x="43.4719%" y="149" width="0.1012%" height="15" fill="rgb(247,173,49)"/><text x="43.7219%" y="159.50"></text></g><g><title>implied_outlives_bounds (132,971 samples, 0.38%)</title><rect x="43.5730%" y="165" width="0.3761%" height="15" fill="rgb(224,114,35)"/><text x="43.8230%" y="175.50"></text></g><g><title>param_env (74,530 samples, 0.21%)</title><rect x="43.9491%" y="165" width="0.2108%" height="15" fill="rgb(245,159,27)"/><text x="44.1991%" y="175.50"></text></g><g><title>explicit_predicates_of (38,931 samples, 0.11%)</title><rect x="44.2007%" y="133" width="0.1101%" height="15" fill="rgb(245,172,44)"/><text x="44.4507%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (35,361 samples, 0.10%)</title><rect x="44.2108%" y="117" width="0.1000%" height="15" fill="rgb(236,23,11)"/><text x="44.4608%" y="127.50"></text></g><g><title>predicates_of (71,081 samples, 0.20%)</title><rect x="44.1599%" y="165" width="0.2010%" height="15" fill="rgb(205,117,38)"/><text x="44.4099%" y="175.50"></text></g><g><title>predicates_defined_on (64,611 samples, 0.18%)</title><rect x="44.1782%" y="149" width="0.1827%" height="15" fill="rgb(237,72,25)"/><text x="44.4282%" y="159.50"></text></g><g><title>analysis (15,094,657 samples, 42.69%)</title><rect x="1.8274%" y="229" width="42.6905%" height="15" fill="rgb(244,70,9)"/><text x="2.0774%" y="239.50">analysis</text></g><g><title>type_check_crate (10,267,134 samples, 29.04%)</title><rect x="15.4806%" y="213" width="29.0374%" height="15" fill="rgb(217,125,39)"/><text x="15.7306%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,595,710 samples, 10.17%)</title><rect x="34.3486%" y="197" width="10.1693%" height="15" fill="rgb(235,36,10)"/><text x="34.5986%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,257,344 samples, 3.56%)</title><rect x="40.9620%" y="181" width="3.5560%" height="15" fill="rgb(251,123,47)"/><text x="41.2120%" y="191.50">chec..</text></g><g><title>trait_impls_of (49,810 samples, 0.14%)</title><rect x="44.3771%" y="165" width="0.1409%" height="15" fill="rgb(221,13,13)"/><text x="44.6271%" y="175.50"></text></g><g><title>codegen_crate (405,324 samples, 1.15%)</title><rect x="44.5492%" y="229" width="1.1463%" height="15" fill="rgb(238,131,9)"/><text x="44.7992%" y="239.50"></text></g><g><title>AST_validation (129,881 samples, 0.37%)</title><rect x="46.3548%" y="213" width="0.3673%" height="15" fill="rgb(211,50,8)"/><text x="46.6048%" y="223.50"></text></g><g><title>complete_gated_feature_checking (36,581 samples, 0.10%)</title><rect x="46.7221%" y="213" width="0.1035%" height="15" fill="rgb(245,182,24)"/><text x="46.9721%" y="223.50"></text></g><g><title>crate_injection (80,571 samples, 0.23%)</title><rect x="46.8255%" y="213" width="0.2279%" height="15" fill="rgb(242,14,37)"/><text x="47.0755%" y="223.50"></text></g><g><title>metadata_load_macro (251,232 samples, 0.71%)</title><rect x="72.5466%" y="181" width="0.7105%" height="15" fill="rgb(246,228,12)"/><text x="72.7966%" y="191.50"></text></g><g><title>macro_expand_crate (12,007,174 samples, 33.96%)</title><rect x="47.0534%" y="213" width="33.9586%" height="15" fill="rgb(213,55,15)"/><text x="47.3034%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (11,982,544 samples, 33.89%)</title><rect x="47.1231%" y="197" width="33.8889%" height="15" fill="rgb(209,9,3)"/><text x="47.3731%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,741,981 samples, 7.75%)</title><rect x="73.2571%" y="181" width="7.7548%" height="15" fill="rgb(230,59,30)"/><text x="73.5071%" y="191.50">metadata_re..</text></g><g><title>metadata_register_crate (1,003,940 samples, 2.84%)</title><rect x="78.1726%" y="165" width="2.8393%" height="15" fill="rgb(209,121,21)"/><text x="78.4226%" y="175.50">me..</text></g><g><title>metadata_register_crate (77,431 samples, 0.22%)</title><rect x="80.7930%" y="149" width="0.2190%" height="15" fill="rgb(220,109,13)"/><text x="81.0430%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (135,632 samples, 0.38%)</title><rect x="81.0265%" y="213" width="0.3836%" height="15" fill="rgb(232,18,1)"/><text x="81.2765%" y="223.50"></text></g><g><title>finalize_imports (282,864 samples, 0.80%)</title><rect x="81.4369%" y="197" width="0.8000%" height="15" fill="rgb(215,41,42)"/><text x="81.6869%" y="207.50"></text></g><g><title>late_resolve_crate (515,996 samples, 1.46%)</title><rect x="82.2654%" y="197" width="1.4593%" height="15" fill="rgb(224,123,36)"/><text x="82.5154%" y="207.50"></text></g><g><title>configure_and_expand (13,505,691 samples, 38.20%)</title><rect x="45.6955%" y="229" width="38.1966%" height="15" fill="rgb(240,125,3)"/><text x="45.9455%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (877,610 samples, 2.48%)</title><rect x="81.4101%" y="213" width="2.4820%" height="15" fill="rgb(205,98,50)"/><text x="81.6601%" y="223.50">re..</text></g><g><title>drop_ast (51,640 samples, 0.15%)</title><rect x="83.8922%" y="229" width="0.1460%" height="15" fill="rgb(205,185,37)"/><text x="84.1422%" y="239.50"></text></g><g><title>early_lint_checks (174,082 samples, 0.49%)</title><rect x="84.0767%" y="229" width="0.4923%" height="15" fill="rgb(238,207,15)"/><text x="84.3267%" y="239.50"></text></g><g><title>free_global_ctxt (1,588,638 samples, 4.49%)</title><rect x="84.5691%" y="229" width="4.4930%" height="15" fill="rgb(213,199,42)"/><text x="84.8191%" y="239.50">free_..</text></g><g><title>crate_hash (72,901 samples, 0.21%)</title><rect x="90.1054%" y="213" width="0.2062%" height="15" fill="rgb(235,201,11)"/><text x="90.3554%" y="223.50"></text></g><g><title>generate_crate_metadata (583,706 samples, 1.65%)</title><rect x="89.0620%" y="229" width="1.6508%" height="15" fill="rgb(207,46,11)"/><text x="89.3120%" y="239.50"></text></g><g><title>hir_lowering (847,209 samples, 2.40%)</title><rect x="90.7129%" y="229" width="2.3961%" height="15" fill="rgb(241,35,35)"/><text x="90.9629%" y="239.50">hi..</text></g><g><title>link (46,140 samples, 0.13%)</title><rect x="93.1089%" y="229" width="0.1305%" height="15" fill="rgb(243,32,47)"/><text x="93.3589%" y="239.50"></text></g><g><title>parse_crate (1,276,295 samples, 3.61%)</title><rect x="93.2394%" y="229" width="3.6096%" height="15" fill="rgb(247,202,23)"/><text x="93.4894%" y="239.50">pars..</text></g><g><title>prepare_outputs (325,293 samples, 0.92%)</title><rect x="96.8756%" y="229" width="0.9200%" height="15" fill="rgb(219,102,11)"/><text x="97.1256%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (338,194 samples, 0.96%)</title><rect x="97.7955%" y="229" width="0.9565%" height="15" fill="rgb(243,110,44)"/><text x="98.0455%" y="239.50"></text></g><g><title>setup_global_ctxt (120,011 samples, 0.34%)</title><rect x="98.7816%" y="229" width="0.3394%" height="15" fill="rgb(222,74,54)"/><text x="99.0316%" y="239.50"></text></g><g><title>all (35,358,314 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (35,358,314 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (310,804 samples, 0.88%)</title><rect x="99.1210%" y="229" width="0.8790%" height="15" fill="rgb(217,163,10)"/><text x="99.3710%" y="239.50"></text></g></svg></svg>