<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (218,801 samples, 0.15%)</title><rect x="8.5231%" y="133" width="0.1500%" height="15" fill="rgb(227,0,7)"/><text x="8.7731%" y="143.50"></text></g><g><title>is_late_bound_map (298,584 samples, 0.20%)</title><rect x="8.6731%" y="133" width="0.2046%" height="15" fill="rgb(217,0,24)"/><text x="8.9231%" y="143.50"></text></g><g><title>needs_drop_raw (589,324 samples, 0.40%)</title><rect x="11.8747%" y="69" width="0.4039%" height="15" fill="rgb(221,193,54)"/><text x="12.1247%" y="79.50"></text></g><g><title>is_copy_raw (543,134 samples, 0.37%)</title><rect x="11.9064%" y="53" width="0.3723%" height="15" fill="rgb(248,212,6)"/><text x="12.1564%" y="63.50"></text></g><g><title>evaluate_obligation (456,853 samples, 0.31%)</title><rect x="11.9655%" y="37" width="0.3131%" height="15" fill="rgb(208,68,35)"/><text x="12.2155%" y="47.50"></text></g><g><title>resolve_instance (183,383 samples, 0.13%)</title><rect x="12.2786%" y="69" width="0.1257%" height="15" fill="rgb(232,128,0)"/><text x="12.5286%" y="79.50"></text></g><g><title>thir_body (796,442 samples, 0.55%)</title><rect x="12.4144%" y="69" width="0.5459%" height="15" fill="rgb(207,160,47)"/><text x="12.6644%" y="79.50"></text></g><g><title>mir_const (4,821,675 samples, 3.30%)</title><rect x="9.6769%" y="117" width="3.3047%" height="15" fill="rgb(228,23,34)"/><text x="9.9269%" y="127.50">mir..</text></g><g><title>unsafety_check_result (4,067,910 samples, 2.79%)</title><rect x="10.1935%" y="101" width="2.7881%" height="15" fill="rgb(218,30,26)"/><text x="10.4435%" y="111.50">un..</text></g><g><title>mir_built (3,586,014 samples, 2.46%)</title><rect x="10.5238%" y="85" width="2.4578%" height="15" fill="rgb(220,122,19)"/><text x="10.7738%" y="95.50">mi..</text></g><g><title>thir_body (244,251 samples, 0.17%)</title><rect x="14.5888%" y="53" width="0.1674%" height="15" fill="rgb(250,228,42)"/><text x="14.8388%" y="63.50"></text></g><g><title>mir_const (2,138,673 samples, 1.47%)</title><rect x="13.3049%" y="101" width="1.4658%" height="15" fill="rgb(240,193,28)"/><text x="13.5549%" y="111.50"></text></g><g><title>unsafety_check_result (1,442,885 samples, 0.99%)</title><rect x="13.7817%" y="85" width="0.9889%" height="15" fill="rgb(216,20,37)"/><text x="14.0317%" y="95.50"></text></g><g><title>mir_built (1,139,761 samples, 0.78%)</title><rect x="13.9895%" y="69" width="0.7812%" height="15" fill="rgb(206,188,39)"/><text x="14.2395%" y="79.50"></text></g><g><title>mir_const_qualif (2,627,125 samples, 1.80%)</title><rect x="12.9816%" y="117" width="1.8006%" height="15" fill="rgb(217,207,13)"/><text x="13.2316%" y="127.50">m..</text></g><g><title>mir_promoted (8,547,004 samples, 5.86%)</title><rect x="8.9247%" y="133" width="5.8579%" height="15" fill="rgb(231,73,38)"/><text x="9.1747%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (382,955 samples, 0.26%)</title><rect x="14.7953%" y="133" width="0.2625%" height="15" fill="rgb(225,20,46)"/><text x="15.0453%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,170,606 samples, 0.80%)</title><rect x="15.1352%" y="133" width="0.8023%" height="15" fill="rgb(210,31,41)"/><text x="15.3852%" y="143.50"></text></g><g><title>MIR_borrow_checking (22,173,985 samples, 15.20%)</title><rect x="0.7424%" y="165" width="15.1976%" height="15" fill="rgb(221,200,47)"/><text x="0.9924%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,944,122 samples, 15.04%)</title><rect x="0.8999%" y="149" width="15.0400%" height="15" fill="rgb(226,26,5)"/><text x="1.1499%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,262,494 samples, 0.87%)</title><rect x="15.9400%" y="165" width="0.8653%" height="15" fill="rgb(249,33,26)"/><text x="16.1900%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,113,453 samples, 0.76%)</title><rect x="16.0421%" y="149" width="0.7631%" height="15" fill="rgb(235,183,28)"/><text x="16.2921%" y="159.50"></text></g><g><title>hir_module_items (251,092 samples, 0.17%)</title><rect x="16.8053%" y="165" width="0.1721%" height="15" fill="rgb(221,5,38)"/><text x="17.0553%" y="175.50"></text></g><g><title>codegen_fn_attrs (313,923 samples, 0.22%)</title><rect x="17.1423%" y="133" width="0.2152%" height="15" fill="rgb(247,18,42)"/><text x="17.3923%" y="143.50"></text></g><g><title>check_mod_attrs (532,686 samples, 0.37%)</title><rect x="16.9924%" y="149" width="0.3651%" height="15" fill="rgb(241,131,45)"/><text x="17.2424%" y="159.50"></text></g><g><title>lookup_deprecation_entry (151,952 samples, 0.10%)</title><rect x="17.6767%" y="133" width="0.1041%" height="15" fill="rgb(249,31,29)"/><text x="17.9267%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (529,827 samples, 0.36%)</title><rect x="17.4903%" y="149" width="0.3631%" height="15" fill="rgb(225,111,53)"/><text x="17.7403%" y="159.50"></text></g><g><title>misc_checking_1 (1,373,625 samples, 0.94%)</title><rect x="16.9779%" y="165" width="0.9415%" height="15" fill="rgb(238,160,17)"/><text x="17.2279%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (390,884 samples, 0.27%)</title><rect x="17.9204%" y="149" width="0.2679%" height="15" fill="rgb(214,148,48)"/><text x="18.1704%" y="159.50"></text></g><g><title>check_mod_liveness (297,152 samples, 0.20%)</title><rect x="17.9846%" y="133" width="0.2037%" height="15" fill="rgb(232,36,49)"/><text x="18.2346%" y="143.50"></text></g><g><title>misc_checking_2 (716,938 samples, 0.49%)</title><rect x="17.9194%" y="165" width="0.4914%" height="15" fill="rgb(209,103,24)"/><text x="18.1694%" y="175.50"></text></g><g><title>match_checking (324,584 samples, 0.22%)</title><rect x="18.1883%" y="149" width="0.2225%" height="15" fill="rgb(229,88,8)"/><text x="18.4383%" y="159.50"></text></g><g><title>check_match (275,103 samples, 0.19%)</title><rect x="18.2222%" y="133" width="0.1885%" height="15" fill="rgb(213,181,19)"/><text x="18.4722%" y="143.50"></text></g><g><title>check_private_in_public (251,723 samples, 0.17%)</title><rect x="18.4173%" y="149" width="0.1725%" height="15" fill="rgb(254,191,54)"/><text x="18.6673%" y="159.50"></text></g><g><title>death_checking (696,568 samples, 0.48%)</title><rect x="18.5899%" y="149" width="0.4774%" height="15" fill="rgb(241,83,37)"/><text x="18.8399%" y="159.50"></text></g><g><title>item_attrs (148,492 samples, 0.10%)</title><rect x="18.9655%" y="133" width="0.1018%" height="15" fill="rgb(233,36,39)"/><text x="19.2155%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (146,762 samples, 0.10%)</title><rect x="18.9667%" y="117" width="0.1006%" height="15" fill="rgb(226,3,54)"/><text x="19.2167%" y="127.50"></text></g><g><title>param_env (158,724 samples, 0.11%)</title><rect x="19.4082%" y="117" width="0.1088%" height="15" fill="rgb(245,192,40)"/><text x="19.6582%" y="127.50"></text></g><g><title>crate_lints (996,921 samples, 0.68%)</title><rect x="19.0684%" y="133" width="0.6833%" height="15" fill="rgb(238,167,29)"/><text x="19.3184%" y="143.50"></text></g><g><title>type_of (342,404 samples, 0.23%)</title><rect x="19.5170%" y="117" width="0.2347%" height="15" fill="rgb(232,182,51)"/><text x="19.7670%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (264,754 samples, 0.18%)</title><rect x="19.5702%" y="101" width="0.1815%" height="15" fill="rgb(231,60,39)"/><text x="19.8202%" y="111.50"></text></g><g><title>lint_checking (1,360,205 samples, 0.93%)</title><rect x="19.0673%" y="149" width="0.9323%" height="15" fill="rgb(208,69,12)"/><text x="19.3173%" y="159.50"></text></g><g><title>module_lints (361,594 samples, 0.25%)</title><rect x="19.7517%" y="133" width="0.2478%" height="15" fill="rgb(235,93,37)"/><text x="20.0017%" y="143.50"></text></g><g><title>lint_mod (356,504 samples, 0.24%)</title><rect x="19.7552%" y="117" width="0.2443%" height="15" fill="rgb(213,116,39)"/><text x="20.0052%" y="127.50"></text></g><g><title>privacy_access_levels (395,444 samples, 0.27%)</title><rect x="19.9995%" y="149" width="0.2710%" height="15" fill="rgb(222,207,29)"/><text x="20.2495%" y="159.50"></text></g><g><title>privacy_checking_modules (957,301 samples, 0.66%)</title><rect x="20.2706%" y="149" width="0.6561%" height="15" fill="rgb(206,96,30)"/><text x="20.5206%" y="159.50"></text></g><g><title>check_mod_privacy (953,131 samples, 0.65%)</title><rect x="20.2734%" y="133" width="0.6533%" height="15" fill="rgb(218,138,4)"/><text x="20.5234%" y="143.50"></text></g><g><title>misc_checking_3 (3,694,391 samples, 2.53%)</title><rect x="18.4108%" y="165" width="2.5321%" height="15" fill="rgb(250,191,14)"/><text x="18.6608%" y="175.50">mi..</text></g><g><title>impl_parent (786,521 samples, 0.54%)</title><rect x="26.3318%" y="101" width="0.5391%" height="15" fill="rgb(239,60,40)"/><text x="26.5818%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (447,236 samples, 0.31%)</title><rect x="26.5644%" y="85" width="0.3065%" height="15" fill="rgb(206,27,48)"/><text x="26.8144%" y="95.50"></text></g><g><title>impl_trait_ref (1,455,978 samples, 1.00%)</title><rect x="26.8709%" y="101" width="0.9979%" height="15" fill="rgb(225,35,8)"/><text x="27.1209%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,109,890 samples, 0.76%)</title><rect x="27.1081%" y="85" width="0.7607%" height="15" fill="rgb(250,213,24)"/><text x="27.3581%" y="95.50"></text></g><g><title>coherent_trait (10,284,453 samples, 7.05%)</title><rect x="21.0205%" y="133" width="7.0488%" height="15" fill="rgb(247,123,22)"/><text x="21.2705%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (10,169,591 samples, 6.97%)</title><rect x="21.0993%" y="117" width="6.9700%" height="15" fill="rgb(231,138,38)"/><text x="21.3493%" y="127.50">specializ..</text></g><g><title>trait_impls_of (290,911 samples, 0.20%)</title><rect x="27.8699%" y="101" width="0.1994%" height="15" fill="rgb(231,145,46)"/><text x="28.1199%" y="111.50"></text></g><g><title>coherence_checking (10,396,954 samples, 7.13%)</title><rect x="21.0092%" y="149" width="7.1259%" height="15" fill="rgb(251,118,11)"/><text x="21.2592%" y="159.50">coherence_..</text></g><g><title>associated_item (1,309,423 samples, 0.90%)</title><rect x="40.8289%" y="85" width="0.8975%" height="15" fill="rgb(217,147,25)"/><text x="41.0789%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (854,357 samples, 0.59%)</title><rect x="41.1408%" y="69" width="0.5856%" height="15" fill="rgb(247,81,37)"/><text x="41.3908%" y="79.50"></text></g><g><title>associated_items (1,723,000 samples, 1.18%)</title><rect x="40.5712%" y="101" width="1.1809%" height="15" fill="rgb(209,12,38)"/><text x="40.8212%" y="111.50"></text></g><g><title>dropck_outlives (242,975 samples, 0.17%)</title><rect x="41.7791%" y="101" width="0.1665%" height="15" fill="rgb(227,1,9)"/><text x="42.0291%" y="111.50"></text></g><g><title>evaluate_obligation (906,790 samples, 0.62%)</title><rect x="41.9456%" y="101" width="0.6215%" height="15" fill="rgb(248,47,43)"/><text x="42.1956%" y="111.50"></text></g><g><title>item_attrs (390,423 samples, 0.27%)</title><rect x="42.7717%" y="101" width="0.2676%" height="15" fill="rgb(221,10,30)"/><text x="43.0217%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (376,943 samples, 0.26%)</title><rect x="42.7809%" y="85" width="0.2583%" height="15" fill="rgb(210,229,1)"/><text x="43.0309%" y="95.50"></text></g><g><title>param_env (516,829 samples, 0.35%)</title><rect x="43.2081%" y="101" width="0.3542%" height="15" fill="rgb(222,148,37)"/><text x="43.4581%" y="111.50"></text></g><g><title>predicates_of (238,834 samples, 0.16%)</title><rect x="43.3986%" y="85" width="0.1637%" height="15" fill="rgb(234,67,33)"/><text x="43.6486%" y="95.50"></text></g><g><title>predicates_defined_on (203,182 samples, 0.14%)</title><rect x="43.4230%" y="69" width="0.1393%" height="15" fill="rgb(247,98,35)"/><text x="43.6730%" y="79.50"></text></g><g><title>predicates_of (257,613 samples, 0.18%)</title><rect x="43.5760%" y="101" width="0.1766%" height="15" fill="rgb(247,138,52)"/><text x="43.8260%" y="111.50"></text></g><g><title>predicates_defined_on (180,542 samples, 0.12%)</title><rect x="43.6288%" y="85" width="0.1237%" height="15" fill="rgb(213,79,30)"/><text x="43.8788%" y="95.50"></text></g><g><title>item_bodies_checking (22,965,804 samples, 15.74%)</title><rect x="28.1900%" y="149" width="15.7403%" height="15" fill="rgb(246,177,23)"/><text x="28.4400%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,962,714 samples, 15.74%)</title><rect x="28.1921%" y="133" width="15.7382%" height="15" fill="rgb(230,62,27)"/><text x="28.4421%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (22,815,753 samples, 15.64%)</title><rect x="28.2928%" y="117" width="15.6374%" height="15" fill="rgb(216,154,8)"/><text x="28.5428%" y="127.50">typeck</text></g><g><title>evaluate_obligation (437,126 samples, 0.30%)</title><rect x="44.6647%" y="117" width="0.2996%" height="15" fill="rgb(244,35,45)"/><text x="44.9147%" y="127.50"></text></g><g><title>item_types_checking (1,664,128 samples, 1.14%)</title><rect x="43.9303%" y="149" width="1.1406%" height="15" fill="rgb(251,115,12)"/><text x="44.1803%" y="159.50"></text></g><g><title>check_mod_item_types (1,658,778 samples, 1.14%)</title><rect x="43.9339%" y="133" width="1.1369%" height="15" fill="rgb(240,54,50)"/><text x="44.1839%" y="143.50"></text></g><g><title>fn_sig (294,982 samples, 0.20%)</title><rect x="45.4122%" y="117" width="0.2022%" height="15" fill="rgb(233,84,52)"/><text x="45.6622%" y="127.50"></text></g><g><title>named_region_map (340,066 samples, 0.23%)</title><rect x="45.7522%" y="101" width="0.2331%" height="15" fill="rgb(207,117,47)"/><text x="46.0022%" y="111.50"></text></g><g><title>resolve_lifetimes (323,356 samples, 0.22%)</title><rect x="45.7636%" y="85" width="0.2216%" height="15" fill="rgb(249,43,39)"/><text x="46.0136%" y="95.50"></text></g><g><title>generics_of (576,770 samples, 0.40%)</title><rect x="45.6144%" y="117" width="0.3953%" height="15" fill="rgb(209,38,44)"/><text x="45.8644%" y="127.50"></text></g><g><title>late_bound_vars_map (261,282 samples, 0.18%)</title><rect x="46.7337%" y="69" width="0.1791%" height="15" fill="rgb(236,212,23)"/><text x="46.9837%" y="79.50"></text></g><g><title>resolve_lifetimes (215,831 samples, 0.15%)</title><rect x="46.7649%" y="53" width="0.1479%" height="15" fill="rgb(242,79,21)"/><text x="47.0149%" y="63.50"></text></g><g><title>explicit_predicates_of (811,256 samples, 0.56%)</title><rect x="46.3781%" y="85" width="0.5560%" height="15" fill="rgb(211,96,35)"/><text x="46.6281%" y="95.50"></text></g><g><title>predicates_of (1,166,888 samples, 0.80%)</title><rect x="46.1727%" y="117" width="0.7998%" height="15" fill="rgb(253,215,40)"/><text x="46.4227%" y="127.50"></text></g><g><title>predicates_defined_on (1,055,638 samples, 0.72%)</title><rect x="46.2489%" y="101" width="0.7235%" height="15" fill="rgb(211,81,21)"/><text x="46.4989%" y="111.50"></text></g><g><title>type_collecting (3,277,497 samples, 2.25%)</title><rect x="45.0717%" y="149" width="2.2463%" height="15" fill="rgb(208,190,38)"/><text x="45.3217%" y="159.50">t..</text></g><g><title>collect_mod_item_types (3,267,337 samples, 2.24%)</title><rect x="45.0786%" y="133" width="2.2394%" height="15" fill="rgb(235,213,38)"/><text x="45.3286%" y="143.50">c..</text></g><g><title>type_of (445,194 samples, 0.31%)</title><rect x="47.0129%" y="117" width="0.3051%" height="15" fill="rgb(237,122,38)"/><text x="47.2629%" y="127.50"></text></g><g><title>param_env (194,113 samples, 0.13%)</title><rect x="47.9807%" y="117" width="0.1330%" height="15" fill="rgb(244,218,35)"/><text x="48.2307%" y="127.50"></text></g><g><title>check_impl_item_well_formed (884,759 samples, 0.61%)</title><rect x="47.5831%" y="133" width="0.6064%" height="15" fill="rgb(240,68,47)"/><text x="47.8331%" y="143.50"></text></g><g><title>adt_def (381,093 samples, 0.26%)</title><rect x="58.6138%" y="85" width="0.2612%" height="15" fill="rgb(210,16,53)"/><text x="58.8638%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (374,723 samples, 0.26%)</title><rect x="58.6182%" y="69" width="0.2568%" height="15" fill="rgb(235,124,12)"/><text x="58.8682%" y="79.50"></text></g><g><title>item_attrs (295,412 samples, 0.20%)</title><rect x="58.6726%" y="53" width="0.2025%" height="15" fill="rgb(224,169,11)"/><text x="58.9226%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (288,212 samples, 0.20%)</title><rect x="58.6775%" y="37" width="0.1975%" height="15" fill="rgb(250,166,2)"/><text x="58.9275%" y="47.50"></text></g><g><title>adt_sized_constraint (432,074 samples, 0.30%)</title><rect x="58.5957%" y="101" width="0.2961%" height="15" fill="rgb(242,216,29)"/><text x="58.8457%" y="111.50"></text></g><g><title>evaluate_obligation (2,104,013 samples, 1.44%)</title><rect x="57.6309%" y="117" width="1.4420%" height="15" fill="rgb(230,116,27)"/><text x="57.8809%" y="127.50"></text></g><g><title>predicates_of (183,733 samples, 0.13%)</title><rect x="58.9470%" y="101" width="0.1259%" height="15" fill="rgb(228,99,48)"/><text x="59.1970%" y="111.50"></text></g><g><title>implied_outlives_bounds (686,649 samples, 0.47%)</title><rect x="59.1259%" y="117" width="0.4706%" height="15" fill="rgb(253,11,6)"/><text x="59.3759%" y="127.50"></text></g><g><title>param_env (1,369,007 samples, 0.94%)</title><rect x="59.5965%" y="117" width="0.9383%" height="15" fill="rgb(247,143,39)"/><text x="59.8465%" y="127.50"></text></g><g><title>predicates_of (176,483 samples, 0.12%)</title><rect x="60.5348%" y="117" width="0.1210%" height="15" fill="rgb(236,97,10)"/><text x="60.7848%" y="127.50"></text></g><g><title>region_scope_tree (232,686 samples, 0.16%)</title><rect x="60.6558%" y="117" width="0.1595%" height="15" fill="rgb(233,208,19)"/><text x="60.9058%" y="127.50"></text></g><g><title>check_item_well_formed (18,480,353 samples, 12.67%)</title><rect x="48.1895%" y="133" width="12.6661%" height="15" fill="rgb(216,164,2)"/><text x="48.4395%" y="143.50">check_item_well_for..</text></g><g><title>analysis (88,889,872 samples, 60.92%)</title><rect x="0.5232%" y="181" width="60.9233%" height="15" fill="rgb(220,129,5)"/><text x="0.7732%" y="191.50">analysis</text></g><g><title>type_check_crate (59,096,693 samples, 40.50%)</title><rect x="20.9428%" y="165" width="40.5037%" height="15" fill="rgb(242,17,10)"/><text x="21.1928%" y="175.50">type_check_crate</text></g><g><title>wf_checking (20,603,148 samples, 14.12%)</title><rect x="47.3255%" y="149" width="14.1210%" height="15" fill="rgb(242,107,0)"/><text x="47.5755%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (862,129 samples, 0.59%)</title><rect x="60.8556%" y="133" width="0.5909%" height="15" fill="rgb(251,28,31)"/><text x="61.1056%" y="143.50"></text></g><g><title>codegen_crate (316,443 samples, 0.22%)</title><rect x="61.4544%" y="181" width="0.2169%" height="15" fill="rgb(233,223,10)"/><text x="61.7044%" y="191.50"></text></g><g><title>AST_validation (308,494 samples, 0.21%)</title><rect x="61.8293%" y="165" width="0.2114%" height="15" fill="rgb(215,21,27)"/><text x="62.0793%" y="175.50"></text></g><g><title>complete_gated_feature_checking (155,982 samples, 0.11%)</title><rect x="62.0407%" y="165" width="0.1069%" height="15" fill="rgb(232,23,21)"/><text x="62.2907%" y="175.50"></text></g><g><title>metadata_load_macro (412,386 samples, 0.28%)</title><rect x="77.7088%" y="133" width="0.2826%" height="15" fill="rgb(244,5,23)"/><text x="77.9588%" y="143.50"></text></g><g><title>metadata_register_crate (225,143 samples, 0.15%)</title><rect x="77.9915%" y="133" width="0.1543%" height="15" fill="rgb(226,81,46)"/><text x="78.2415%" y="143.50"></text></g><g><title>macro_expand_crate (23,505,239 samples, 16.11%)</title><rect x="62.2026%" y="165" width="16.1100%" height="15" fill="rgb(247,70,30)"/><text x="62.4526%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (23,477,839 samples, 16.09%)</title><rect x="62.2214%" y="149" width="16.0912%" height="15" fill="rgb(212,68,19)"/><text x="62.4714%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (243,464 samples, 0.17%)</title><rect x="78.1458%" y="133" width="0.1669%" height="15" fill="rgb(240,187,13)"/><text x="78.3958%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (265,343 samples, 0.18%)</title><rect x="78.3166%" y="165" width="0.1819%" height="15" fill="rgb(223,113,26)"/><text x="78.5666%" y="175.50"></text></g><g><title>finalize_macro_resolutions (227,903 samples, 0.16%)</title><rect x="78.5788%" y="149" width="0.1562%" height="15" fill="rgb(206,192,2)"/><text x="78.8288%" y="159.50"></text></g><g><title>late_resolve_crate (12,068,683 samples, 8.27%)</title><rect x="78.7350%" y="149" width="8.2716%" height="15" fill="rgb(241,108,4)"/><text x="78.9850%" y="159.50">late_resolve..</text></g><g><title>resolve_check_unused (156,602 samples, 0.11%)</title><rect x="87.0321%" y="149" width="0.1073%" height="15" fill="rgb(247,173,49)"/><text x="87.2821%" y="159.50"></text></g><g><title>configure_and_expand (37,273,572 samples, 25.55%)</title><rect x="61.6713%" y="181" width="25.5465%" height="15" fill="rgb(224,114,35)"/><text x="61.9213%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (12,722,040 samples, 8.72%)</title><rect x="78.4984%" y="165" width="8.7194%" height="15" fill="rgb(245,159,27)"/><text x="78.7484%" y="175.50">resolve_crate</text></g><g><title>drop_ast (215,672 samples, 0.15%)</title><rect x="87.2179%" y="181" width="0.1478%" height="15" fill="rgb(245,172,44)"/><text x="87.4679%" y="191.50"></text></g><g><title>early_lint_checks (424,475 samples, 0.29%)</title><rect x="87.3757%" y="181" width="0.2909%" height="15" fill="rgb(236,23,11)"/><text x="87.6257%" y="191.50"></text></g><g><title>free_global_ctxt (2,155,813 samples, 1.48%)</title><rect x="87.6667%" y="181" width="1.4775%" height="15" fill="rgb(205,117,38)"/><text x="87.9167%" y="191.50"></text></g><g><title>mir_for_ctfe (570,657 samples, 0.39%)</title><rect x="90.6570%" y="165" width="0.3911%" height="15" fill="rgb(237,72,25)"/><text x="90.9070%" y="175.50"></text></g><g><title>generate_crate_metadata (2,902,282 samples, 1.99%)</title><rect x="89.1442%" y="181" width="1.9892%" height="15" fill="rgb(244,70,9)"/><text x="89.3942%" y="191.50">g..</text></g><g><title>hir_lowering (7,048,698 samples, 4.83%)</title><rect x="91.1334%" y="181" width="4.8310%" height="15" fill="rgb(217,125,39)"/><text x="91.3834%" y="191.50">hir_lo..</text></g><g><title>parse_crate (4,132,915 samples, 2.83%)</title><rect x="96.0007%" y="181" width="2.8326%" height="15" fill="rgb(235,36,10)"/><text x="96.2507%" y="191.50">pa..</text></g><g><title>prepare_outputs (346,864 samples, 0.24%)</title><rect x="98.8389%" y="181" width="0.2377%" height="15" fill="rgb(251,123,47)"/><text x="99.0889%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (836,940 samples, 0.57%)</title><rect x="99.0766%" y="181" width="0.5736%" height="15" fill="rgb(221,13,13)"/><text x="99.3266%" y="191.50"></text></g><g><title>all (145,904,611 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (145,904,611 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (417,525 samples, 0.29%)</title><rect x="99.7138%" y="181" width="0.2862%" height="15" fill="rgb(245,182,24)"/><text x="99.9638%" y="191.50"></text></g></svg></svg>