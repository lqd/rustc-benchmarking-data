<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (877,904 samples, 0.17%)</title><rect x="16.7533%" y="101" width="0.1652%" height="15" fill="rgb(227,0,7)"/><text x="17.0033%" y="111.50"></text></g><g><title>item_attrs (748,041 samples, 0.14%)</title><rect x="17.5303%" y="69" width="0.1408%" height="15" fill="rgb(217,0,24)"/><text x="17.7803%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (719,950 samples, 0.14%)</title><rect x="17.5356%" y="53" width="0.1355%" height="15" fill="rgb(221,193,54)"/><text x="17.7856%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,060,885 samples, 0.20%)</title><rect x="17.4803%" y="85" width="0.1997%" height="15" fill="rgb(248,212,6)"/><text x="17.7303%" y="95.50"></text></g><g><title>adt_drop_tys (694,360 samples, 0.13%)</title><rect x="21.1411%" y="53" width="0.1307%" height="15" fill="rgb(208,68,35)"/><text x="21.3911%" y="63.50"></text></g><g><title>needs_drop_raw (5,938,269 samples, 1.12%)</title><rect x="21.0235%" y="69" width="1.1176%" height="15" fill="rgb(232,128,0)"/><text x="21.2735%" y="79.50"></text></g><g><title>is_copy_raw (4,618,844 samples, 0.87%)</title><rect x="21.2718%" y="53" width="0.8693%" height="15" fill="rgb(207,160,47)"/><text x="21.5218%" y="63.50"></text></g><g><title>evaluate_obligation (3,755,708 samples, 0.71%)</title><rect x="21.4343%" y="37" width="0.7069%" height="15" fill="rgb(228,23,34)"/><text x="21.6843%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,235,965 samples, 0.23%)</title><rect x="22.3624%" y="53" width="0.2326%" height="15" fill="rgb(218,30,26)"/><text x="22.6124%" y="63.50"></text></g><g><title>specialization_graph_of (1,270,234 samples, 0.24%)</title><rect x="22.6909%" y="53" width="0.2391%" height="15" fill="rgb(220,122,19)"/><text x="22.9409%" y="63.50"></text></g><g><title>resolve_instance (4,468,698 samples, 0.84%)</title><rect x="22.1411%" y="69" width="0.8410%" height="15" fill="rgb(250,228,42)"/><text x="22.3911%" y="79.50"></text></g><g><title>thir_body (6,581,603 samples, 1.24%)</title><rect x="23.0140%" y="69" width="1.2387%" height="15" fill="rgb(240,193,28)"/><text x="23.2640%" y="79.50"></text></g><g><title>mir_const (45,017,102 samples, 8.47%)</title><rect x="15.8015%" y="117" width="8.4726%" height="15" fill="rgb(216,20,37)"/><text x="16.0515%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (39,081,844 samples, 7.36%)</title><rect x="16.9186%" y="101" width="7.3555%" height="15" fill="rgb(206,188,39)"/><text x="17.1686%" y="111.50">unsafety_c..</text></g><g><title>mir_built (35,036,268 samples, 6.59%)</title><rect x="17.6800%" y="85" width="6.5941%" height="15" fill="rgb(217,207,13)"/><text x="17.9300%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (591,408 samples, 0.11%)</title><rect x="24.2741%" y="117" width="0.1113%" height="15" fill="rgb(231,73,38)"/><text x="24.5241%" y="127.50"></text></g><g><title>mir_promoted (50,697,804 samples, 9.54%)</title><rect x="14.8439%" y="133" width="9.5418%" height="15" fill="rgb(225,20,46)"/><text x="15.0939%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,511,565 samples, 0.66%)</title><rect x="24.3857%" y="133" width="0.6609%" height="15" fill="rgb(210,31,41)"/><text x="24.6357%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,741,424 samples, 0.33%)</title><rect x="25.0466%" y="133" width="0.3278%" height="15" fill="rgb(221,200,47)"/><text x="25.2966%" y="143.50"></text></g><g><title>normalize_projection_ty (1,146,273 samples, 0.22%)</title><rect x="25.1586%" y="117" width="0.2157%" height="15" fill="rgb(226,26,5)"/><text x="25.4086%" y="127.50"></text></g><g><title>type_op_normalize_predicate (792,927 samples, 0.15%)</title><rect x="25.3743%" y="133" width="0.1492%" height="15" fill="rgb(249,33,26)"/><text x="25.6243%" y="143.50"></text></g><g><title>normalize_projection_ty (581,726 samples, 0.11%)</title><rect x="25.4141%" y="117" width="0.1095%" height="15" fill="rgb(235,183,28)"/><text x="25.6641%" y="127.50"></text></g><g><title>type_op_prove_predicate (11,588,103 samples, 2.18%)</title><rect x="25.5474%" y="133" width="2.1810%" height="15" fill="rgb(221,5,38)"/><text x="25.7974%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (144,770,900 samples, 27.25%)</title><rect x="0.4860%" y="165" width="27.2471%" height="15" fill="rgb(247,18,42)"/><text x="0.7360%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (143,924,319 samples, 27.09%)</title><rect x="0.6454%" y="149" width="27.0878%" height="15" fill="rgb(241,131,45)"/><text x="0.8954%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,084,136 samples, 0.20%)</title><rect x="27.8173%" y="165" width="0.2040%" height="15" fill="rgb(249,31,29)"/><text x="28.0673%" y="175.50"></text></g><g><title>should_inherit_track_caller (707,678 samples, 0.13%)</title><rect x="28.3422%" y="117" width="0.1332%" height="15" fill="rgb(225,111,53)"/><text x="28.5922%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,160,633 samples, 0.22%)</title><rect x="28.2608%" y="133" width="0.2184%" height="15" fill="rgb(238,160,17)"/><text x="28.5108%" y="143.50"></text></g><g><title>check_mod_attrs (2,383,577 samples, 0.45%)</title><rect x="28.0306%" y="149" width="0.4486%" height="15" fill="rgb(214,148,48)"/><text x="28.2806%" y="159.50"></text></g><g><title>check_mod_const_bodies (639,095 samples, 0.12%)</title><rect x="28.4793%" y="149" width="0.1203%" height="15" fill="rgb(232,36,49)"/><text x="28.7293%" y="159.50"></text></g><g><title>lookup_deprecation_entry (628,737 samples, 0.12%)</title><rect x="28.7927%" y="133" width="0.1183%" height="15" fill="rgb(209,103,24)"/><text x="29.0427%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,413,896 samples, 0.27%)</title><rect x="28.6722%" y="149" width="0.2661%" height="15" fill="rgb(229,88,8)"/><text x="28.9222%" y="159.50"></text></g><g><title>misc_checking_1 (5,080,307 samples, 0.96%)</title><rect x="28.0214%" y="165" width="0.9562%" height="15" fill="rgb(213,181,19)"/><text x="28.2714%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,598,240 samples, 0.49%)</title><rect x="28.9779%" y="149" width="0.4890%" height="15" fill="rgb(254,191,54)"/><text x="29.2279%" y="159.50"></text></g><g><title>check_mod_liveness (2,114,992 samples, 0.40%)</title><rect x="29.0689%" y="133" width="0.3981%" height="15" fill="rgb(241,83,37)"/><text x="29.3189%" y="143.50"></text></g><g><title>misc_checking_2 (6,496,993 samples, 1.22%)</title><rect x="28.9776%" y="165" width="1.2228%" height="15" fill="rgb(233,36,39)"/><text x="29.2276%" y="175.50"></text></g><g><title>match_checking (3,896,753 samples, 0.73%)</title><rect x="29.4669%" y="149" width="0.7334%" height="15" fill="rgb(226,3,54)"/><text x="29.7169%" y="159.50"></text></g><g><title>check_match (3,684,317 samples, 0.69%)</title><rect x="29.5069%" y="133" width="0.6934%" height="15" fill="rgb(245,192,40)"/><text x="29.7569%" y="143.50"></text></g><g><title>check_private_in_public (1,186,943 samples, 0.22%)</title><rect x="30.2025%" y="149" width="0.2234%" height="15" fill="rgb(238,167,29)"/><text x="30.4525%" y="159.50"></text></g><g><title>death_checking (2,160,894 samples, 0.41%)</title><rect x="30.4259%" y="149" width="0.4067%" height="15" fill="rgb(232,182,51)"/><text x="30.6759%" y="159.50"></text></g><g><title>param_env (1,577,616 samples, 0.30%)</title><rect x="31.4834%" y="117" width="0.2969%" height="15" fill="rgb(231,60,39)"/><text x="31.7334%" y="127.50"></text></g><g><title>predicates_of (767,821 samples, 0.14%)</title><rect x="31.6358%" y="101" width="0.1445%" height="15" fill="rgb(208,69,12)"/><text x="31.8858%" y="111.50"></text></g><g><title>predicates_defined_on (601,948 samples, 0.11%)</title><rect x="31.6670%" y="85" width="0.1133%" height="15" fill="rgb(235,93,37)"/><text x="31.9170%" y="95.50"></text></g><g><title>crate_lints (6,449,692 samples, 1.21%)</title><rect x="30.8331%" y="133" width="1.2139%" height="15" fill="rgb(213,116,39)"/><text x="31.0831%" y="143.50"></text></g><g><title>type_of (1,203,101 samples, 0.23%)</title><rect x="31.8206%" y="117" width="0.2264%" height="15" fill="rgb(222,207,29)"/><text x="32.0706%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (968,739 samples, 0.18%)</title><rect x="31.8647%" y="101" width="0.1823%" height="15" fill="rgb(206,96,30)"/><text x="32.1147%" y="111.50"></text></g><g><title>lint_checking (9,512,656 samples, 1.79%)</title><rect x="30.8326%" y="149" width="1.7904%" height="15" fill="rgb(218,138,4)"/><text x="31.0826%" y="159.50">l..</text></g><g><title>module_lints (3,060,384 samples, 0.58%)</title><rect x="32.0470%" y="133" width="0.5760%" height="15" fill="rgb(250,191,14)"/><text x="32.2970%" y="143.50"></text></g><g><title>lint_mod (3,043,294 samples, 0.57%)</title><rect x="32.0502%" y="117" width="0.5728%" height="15" fill="rgb(239,60,40)"/><text x="32.3002%" y="127.50"></text></g><g><title>privacy_access_levels (1,726,099 samples, 0.32%)</title><rect x="32.6230%" y="149" width="0.3249%" height="15" fill="rgb(206,27,48)"/><text x="32.8730%" y="159.50"></text></g><g><title>privacy_checking_modules (5,430,500 samples, 1.02%)</title><rect x="32.9479%" y="149" width="1.0221%" height="15" fill="rgb(225,35,8)"/><text x="33.1979%" y="159.50"></text></g><g><title>check_mod_privacy (5,416,230 samples, 1.02%)</title><rect x="32.9506%" y="133" width="1.0194%" height="15" fill="rgb(250,213,24)"/><text x="33.2006%" y="143.50"></text></g><g><title>misc_checking_3 (20,075,943 samples, 3.78%)</title><rect x="30.2003%" y="165" width="3.7785%" height="15" fill="rgb(247,123,22)"/><text x="30.4503%" y="175.50">misc..</text></g><g><title>impl_parent (2,910,952 samples, 0.55%)</title><rect x="35.0183%" y="101" width="0.5479%" height="15" fill="rgb(231,138,38)"/><text x="35.2683%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,707,751 samples, 0.32%)</title><rect x="35.2448%" y="85" width="0.3214%" height="15" fill="rgb(231,145,46)"/><text x="35.4948%" y="95.50"></text></g><g><title>impl_trait_ref (6,520,099 samples, 1.23%)</title><rect x="35.5665%" y="101" width="1.2271%" height="15" fill="rgb(251,118,11)"/><text x="35.8165%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,945,525 samples, 0.93%)</title><rect x="35.8628%" y="85" width="0.9308%" height="15" fill="rgb(217,147,25)"/><text x="36.1128%" y="95.50"></text></g><g><title>trait_impls_of (1,322,857 samples, 0.25%)</title><rect x="36.8114%" y="101" width="0.2490%" height="15" fill="rgb(247,81,37)"/><text x="37.0614%" y="111.50"></text></g><g><title>coherent_trait (15,958,008 samples, 3.00%)</title><rect x="34.0573%" y="133" width="3.0034%" height="15" fill="rgb(209,12,38)"/><text x="34.3073%" y="143.50">coh..</text></g><g><title>specialization_graph_of (15,510,564 samples, 2.92%)</title><rect x="34.1415%" y="117" width="2.9192%" height="15" fill="rgb(227,1,9)"/><text x="34.3915%" y="127.50">sp..</text></g><g><title>coherence_checking (16,197,890 samples, 3.05%)</title><rect x="34.0516%" y="149" width="3.0486%" height="15" fill="rgb(248,47,43)"/><text x="34.3016%" y="159.50">coh..</text></g><g><title>associated_item (783,050 samples, 0.15%)</title><rect x="61.3338%" y="85" width="0.1474%" height="15" fill="rgb(221,10,30)"/><text x="61.5838%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (622,788 samples, 0.12%)</title><rect x="61.3640%" y="69" width="0.1172%" height="15" fill="rgb(210,229,1)"/><text x="61.6140%" y="79.50"></text></g><g><title>associated_items (1,164,125 samples, 0.22%)</title><rect x="61.2760%" y="101" width="0.2191%" height="15" fill="rgb(222,148,37)"/><text x="61.5260%" y="111.50"></text></g><g><title>adt_dtorck_constraint (588,087 samples, 0.11%)</title><rect x="61.8937%" y="69" width="0.1107%" height="15" fill="rgb(234,67,33)"/><text x="62.1437%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,187,865 samples, 0.22%)</title><rect x="61.8059%" y="85" width="0.2236%" height="15" fill="rgb(247,98,35)"/><text x="62.0559%" y="95.50"></text></g><g><title>dropck_outlives (2,708,180 samples, 0.51%)</title><rect x="61.5312%" y="101" width="0.5097%" height="15" fill="rgb(247,138,52)"/><text x="61.7812%" y="111.50"></text></g><g><title>predicates_of (653,789 samples, 0.12%)</title><rect x="63.7224%" y="85" width="0.1230%" height="15" fill="rgb(213,79,30)"/><text x="63.9724%" y="95.50"></text></g><g><title>specializes (888,939 samples, 0.17%)</title><rect x="63.8455%" y="85" width="0.1673%" height="15" fill="rgb(246,177,23)"/><text x="64.0955%" y="95.50"></text></g><g><title>trait_impls_of (964,084 samples, 0.18%)</title><rect x="64.0603%" y="85" width="0.1814%" height="15" fill="rgb(230,62,27)"/><text x="64.3103%" y="95.50"></text></g><g><title>evaluate_obligation (11,697,991 samples, 2.20%)</title><rect x="62.0422%" y="101" width="2.2017%" height="15" fill="rgb(216,154,8)"/><text x="62.2922%" y="111.50">e..</text></g><g><title>generics_of (2,405,116 samples, 0.45%)</title><rect x="64.3140%" y="101" width="0.4527%" height="15" fill="rgb(244,35,45)"/><text x="64.5640%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,770,636 samples, 0.33%)</title><rect x="64.4334%" y="85" width="0.3332%" height="15" fill="rgb(251,115,12)"/><text x="64.6834%" y="95.50"></text></g><g><title>evaluate_obligation (662,037 samples, 0.12%)</title><rect x="65.0501%" y="85" width="0.1246%" height="15" fill="rgb(240,54,50)"/><text x="65.3001%" y="95.50"></text></g><g><title>method_autoderef_steps (1,334,425 samples, 0.25%)</title><rect x="64.9250%" y="101" width="0.2511%" height="15" fill="rgb(233,84,52)"/><text x="65.1750%" y="111.50"></text></g><g><title>predicates_of (880,861 samples, 0.17%)</title><rect x="65.2369%" y="101" width="0.1658%" height="15" fill="rgb(207,117,47)"/><text x="65.4869%" y="111.50"></text></g><g><title>predicates_defined_on (611,710 samples, 0.12%)</title><rect x="65.2876%" y="85" width="0.1151%" height="15" fill="rgb(249,43,39)"/><text x="65.5376%" y="95.50"></text></g><g><title>evaluate_obligation (3,098,552 samples, 0.58%)</title><rect x="68.8100%" y="85" width="0.5832%" height="15" fill="rgb(209,38,44)"/><text x="69.0600%" y="95.50"></text></g><g><title>typeck (22,432,462 samples, 4.22%)</title><rect x="65.4797%" y="101" width="4.2220%" height="15" fill="rgb(236,212,23)"/><text x="65.7297%" y="111.50">typeck</text></g><g><title>item_bodies_checking (173,259,647 samples, 32.61%)</title><rect x="37.1332%" y="149" width="32.6089%" height="15" fill="rgb(242,79,21)"/><text x="37.3832%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (173,256,037 samples, 32.61%)</title><rect x="37.1339%" y="133" width="32.6082%" height="15" fill="rgb(211,96,35)"/><text x="37.3839%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (172,663,338 samples, 32.50%)</title><rect x="37.2455%" y="117" width="32.4967%" height="15" fill="rgb(253,215,40)"/><text x="37.4955%" y="127.50">typeck</text></g><g><title>item_types_checking (5,781,444 samples, 1.09%)</title><rect x="69.7421%" y="149" width="1.0881%" height="15" fill="rgb(211,81,21)"/><text x="69.9921%" y="159.50"></text></g><g><title>check_mod_item_types (5,766,474 samples, 1.09%)</title><rect x="69.7450%" y="133" width="1.0853%" height="15" fill="rgb(208,190,38)"/><text x="69.9950%" y="143.50"></text></g><g><title>mir_const_qualif (674,845 samples, 0.13%)</title><rect x="71.2751%" y="69" width="0.1270%" height="15" fill="rgb(235,213,38)"/><text x="71.5251%" y="79.50"></text></g><g><title>mir_const (561,525 samples, 0.11%)</title><rect x="71.2964%" y="53" width="0.1057%" height="15" fill="rgb(237,122,38)"/><text x="71.5464%" y="63.50"></text></g><g><title>mir_borrowck (1,438,569 samples, 0.27%)</title><rect x="71.5414%" y="37" width="0.2708%" height="15" fill="rgb(244,218,35)"/><text x="71.7914%" y="47.50"></text></g><g><title>mir_for_ctfe (2,187,947 samples, 0.41%)</title><rect x="71.4021%" y="69" width="0.4118%" height="15" fill="rgb(240,68,47)"/><text x="71.6521%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,995,953 samples, 0.38%)</title><rect x="71.4382%" y="53" width="0.3757%" height="15" fill="rgb(210,16,53)"/><text x="71.6882%" y="63.50"></text></g><g><title>eval_to_const_value_raw (4,509,061 samples, 0.85%)</title><rect x="71.1333%" y="117" width="0.8486%" height="15" fill="rgb(235,124,12)"/><text x="71.3833%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,471,401 samples, 0.84%)</title><rect x="71.1404%" y="101" width="0.8416%" height="15" fill="rgb(224,169,11)"/><text x="71.3904%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,419,799 samples, 0.83%)</title><rect x="71.1501%" y="85" width="0.8318%" height="15" fill="rgb(250,166,2)"/><text x="71.4001%" y="95.50"></text></g><g><title>typeck (887,230 samples, 0.17%)</title><rect x="71.8149%" y="69" width="0.1670%" height="15" fill="rgb(242,216,29)"/><text x="72.0649%" y="79.50"></text></g><g><title>fn_sig (1,828,835 samples, 0.34%)</title><rect x="71.9819%" y="117" width="0.3442%" height="15" fill="rgb(230,116,27)"/><text x="72.2319%" y="127.50"></text></g><g><title>named_region_map (1,983,959 samples, 0.37%)</title><rect x="72.4614%" y="101" width="0.3734%" height="15" fill="rgb(228,99,48)"/><text x="72.7114%" y="111.50"></text></g><g><title>resolve_lifetimes (1,843,899 samples, 0.35%)</title><rect x="72.4877%" y="85" width="0.3470%" height="15" fill="rgb(253,11,6)"/><text x="72.7377%" y="95.50"></text></g><g><title>lint_levels (1,023,451 samples, 0.19%)</title><rect x="72.6422%" y="69" width="0.1926%" height="15" fill="rgb(247,143,39)"/><text x="72.8922%" y="79.50"></text></g><g><title>generics_of (2,788,183 samples, 0.52%)</title><rect x="72.3261%" y="117" width="0.5248%" height="15" fill="rgb(236,97,10)"/><text x="72.5761%" y="127.50"></text></g><g><title>param_env (537,648 samples, 0.10%)</title><rect x="72.8839%" y="117" width="0.1012%" height="15" fill="rgb(233,208,19)"/><text x="73.1339%" y="127.50"></text></g><g><title>late_bound_vars_map (1,098,201 samples, 0.21%)</title><rect x="73.2784%" y="69" width="0.2067%" height="15" fill="rgb(216,164,2)"/><text x="73.5284%" y="79.50"></text></g><g><title>resolve_lifetimes (1,053,271 samples, 0.20%)</title><rect x="73.2868%" y="53" width="0.1982%" height="15" fill="rgb(220,129,5)"/><text x="73.5368%" y="63.50"></text></g><g><title>explicit_predicates_of (1,906,737 samples, 0.36%)</title><rect x="73.1400%" y="85" width="0.3589%" height="15" fill="rgb(242,17,10)"/><text x="73.3900%" y="95.50"></text></g><g><title>predicates_of (3,617,638 samples, 0.68%)</title><rect x="72.9850%" y="117" width="0.6809%" height="15" fill="rgb(242,107,0)"/><text x="73.2350%" y="127.50"></text></g><g><title>predicates_defined_on (3,302,724 samples, 0.62%)</title><rect x="73.0443%" y="101" width="0.6216%" height="15" fill="rgb(251,28,31)"/><text x="73.2943%" y="111.50"></text></g><g><title>inferred_outlives_of (887,599 samples, 0.17%)</title><rect x="73.4989%" y="85" width="0.1671%" height="15" fill="rgb(233,223,10)"/><text x="73.7489%" y="95.50"></text></g><g><title>inferred_outlives_crate (765,768 samples, 0.14%)</title><rect x="73.5218%" y="69" width="0.1441%" height="15" fill="rgb(215,21,27)"/><text x="73.7718%" y="79.50"></text></g><g><title>type_collecting (15,554,493 samples, 2.93%)</title><rect x="70.8331%" y="149" width="2.9275%" height="15" fill="rgb(232,23,21)"/><text x="71.0831%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (15,530,393 samples, 2.92%)</title><rect x="70.8376%" y="133" width="2.9229%" height="15" fill="rgb(244,5,23)"/><text x="71.0876%" y="143.50">co..</text></g><g><title>evaluate_obligation (2,120,946 samples, 0.40%)</title><rect x="76.2499%" y="117" width="0.3992%" height="15" fill="rgb(226,81,46)"/><text x="76.4999%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,192,523 samples, 0.22%)</title><rect x="76.6528%" y="117" width="0.2244%" height="15" fill="rgb(247,70,30)"/><text x="76.9028%" y="127.50"></text></g><g><title>object_safety_violations (1,450,725 samples, 0.27%)</title><rect x="76.8772%" y="117" width="0.2730%" height="15" fill="rgb(212,68,19)"/><text x="77.1272%" y="127.50"></text></g><g><title>param_env (1,907,204 samples, 0.36%)</title><rect x="77.1503%" y="117" width="0.3590%" height="15" fill="rgb(240,187,13)"/><text x="77.4003%" y="127.50"></text></g><g><title>region_scope_tree (2,187,064 samples, 0.41%)</title><rect x="77.5189%" y="117" width="0.4116%" height="15" fill="rgb(223,113,26)"/><text x="77.7689%" y="127.50"></text></g><g><title>check_impl_item_well_formed (20,949,540 samples, 3.94%)</title><rect x="73.9908%" y="133" width="3.9429%" height="15" fill="rgb(206,192,2)"/><text x="74.2408%" y="143.50">chec..</text></g><g><title>evaluate_obligation (1,724,514 samples, 0.32%)</title><rect x="78.9294%" y="117" width="0.3246%" height="15" fill="rgb(241,108,4)"/><text x="79.1794%" y="127.50"></text></g><g><title>param_env (1,197,110 samples, 0.23%)</title><rect x="79.3886%" y="117" width="0.2253%" height="15" fill="rgb(247,173,49)"/><text x="79.6386%" y="127.50"></text></g><g><title>check_item_well_formed (9,708,007 samples, 1.83%)</title><rect x="77.9336%" y="133" width="1.8271%" height="15" fill="rgb(224,114,35)"/><text x="78.1836%" y="143.50">c..</text></g><g><title>analysis (424,812,825 samples, 79.95%)</title><rect x="0.2342%" y="181" width="79.9533%" height="15" fill="rgb(245,159,27)"/><text x="0.4842%" y="191.50">analysis</text></g><g><title>type_check_crate (245,518,811 samples, 46.21%)</title><rect x="33.9788%" y="165" width="46.2087%" height="15" fill="rgb(245,172,44)"/><text x="34.2288%" y="175.50">type_check_crate</text></g><g><title>wf_checking (34,115,780 samples, 6.42%)</title><rect x="73.7666%" y="149" width="6.4209%" height="15" fill="rgb(236,23,11)"/><text x="74.0166%" y="159.50">wf_check..</text></g><g><title>check_trait_item_well_formed (2,267,277 samples, 0.43%)</title><rect x="79.7608%" y="133" width="0.4267%" height="15" fill="rgb(205,117,38)"/><text x="80.0108%" y="143.50"></text></g><g><title>codegen_crate (542,046 samples, 0.10%)</title><rect x="80.1891%" y="181" width="0.1020%" height="15" fill="rgb(237,72,25)"/><text x="80.4391%" y="191.50"></text></g><g><title>metadata_register_crate (1,534,996 samples, 0.29%)</title><rect x="91.2077%" y="133" width="0.2889%" height="15" fill="rgb(244,70,9)"/><text x="91.4577%" y="143.50"></text></g><g><title>metadata_register_crate (553,946 samples, 0.10%)</title><rect x="91.3923%" y="117" width="0.1043%" height="15" fill="rgb(217,125,39)"/><text x="91.6423%" y="127.50"></text></g><g><title>macro_expand_crate (60,486,653 samples, 11.38%)</title><rect x="80.4790%" y="165" width="11.3841%" height="15" fill="rgb(235,36,10)"/><text x="80.7290%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (60,464,402 samples, 11.38%)</title><rect x="80.4832%" y="149" width="11.3799%" height="15" fill="rgb(251,123,47)"/><text x="80.7332%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,947,330 samples, 0.37%)</title><rect x="91.4966%" y="133" width="0.3665%" height="15" fill="rgb(221,13,13)"/><text x="91.7466%" y="143.50"></text></g><g><title>late_resolve_crate (7,186,360 samples, 1.35%)</title><rect x="92.0048%" y="149" width="1.3525%" height="15" fill="rgb(238,131,9)"/><text x="92.2548%" y="159.50"></text></g><g><title>configure_and_expand (70,020,279 samples, 13.18%)</title><rect x="80.2911%" y="181" width="13.1784%" height="15" fill="rgb(211,50,8)"/><text x="80.5411%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (8,447,184 samples, 1.59%)</title><rect x="91.8797%" y="165" width="1.5898%" height="15" fill="rgb(245,182,24)"/><text x="92.1297%" y="175.50"></text></g><g><title>drop_ast (1,087,342 samples, 0.20%)</title><rect x="93.4695%" y="181" width="0.2046%" height="15" fill="rgb(242,14,37)"/><text x="93.7195%" y="191.50"></text></g><g><title>early_lint_checks (1,975,933 samples, 0.37%)</title><rect x="93.6787%" y="181" width="0.3719%" height="15" fill="rgb(246,228,12)"/><text x="93.9287%" y="191.50"></text></g><g><title>free_global_ctxt (7,063,539 samples, 1.33%)</title><rect x="94.0506%" y="181" width="1.3294%" height="15" fill="rgb(213,55,15)"/><text x="94.3006%" y="191.50"></text></g><g><title>generate_crate_metadata (4,799,443 samples, 0.90%)</title><rect x="95.3800%" y="181" width="0.9033%" height="15" fill="rgb(209,9,3)"/><text x="95.6300%" y="191.50"></text></g><g><title>hir_lowering (16,166,940 samples, 3.04%)</title><rect x="96.2833%" y="181" width="3.0428%" height="15" fill="rgb(230,59,30)"/><text x="96.5333%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,128,573 samples, 0.40%)</title><rect x="99.4787%" y="181" width="0.4006%" height="15" fill="rgb(209,121,21)"/><text x="99.7287%" y="191.50"></text></g><g><title>all (531,326,052 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (531,326,052 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (533,286 samples, 0.10%)</title><rect x="99.8996%" y="181" width="0.1004%" height="15" fill="rgb(215,41,42)"/><text x="100.1496%" y="191.50"></text></g></svg></svg>