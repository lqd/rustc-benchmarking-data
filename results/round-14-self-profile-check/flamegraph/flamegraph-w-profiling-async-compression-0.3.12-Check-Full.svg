<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (93,481 samples, 0.13%)</title><rect x="7.7414%" y="101" width="0.1326%" height="15" fill="rgb(227,0,7)"/><text x="7.9914%" y="111.50"></text></g><g><title>codegen_fn_attrs (72,231 samples, 0.10%)</title><rect x="8.0735%" y="85" width="0.1025%" height="15" fill="rgb(217,0,24)"/><text x="8.3235%" y="95.50"></text></g><g><title>needs_drop_raw (257,171 samples, 0.36%)</title><rect x="9.0720%" y="69" width="0.3649%" height="15" fill="rgb(221,193,54)"/><text x="9.3220%" y="79.50"></text></g><g><title>is_copy_raw (161,800 samples, 0.23%)</title><rect x="9.2074%" y="53" width="0.2296%" height="15" fill="rgb(248,212,6)"/><text x="9.4574%" y="63.50"></text></g><g><title>evaluate_obligation (124,240 samples, 0.18%)</title><rect x="9.2607%" y="37" width="0.1763%" height="15" fill="rgb(208,68,35)"/><text x="9.5107%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (92,880 samples, 0.13%)</title><rect x="9.5493%" y="53" width="0.1318%" height="15" fill="rgb(232,128,0)"/><text x="9.7993%" y="63.50"></text></g><g><title>specialization_graph_of (124,101 samples, 0.18%)</title><rect x="9.7233%" y="53" width="0.1761%" height="15" fill="rgb(207,160,47)"/><text x="9.9733%" y="63.50"></text></g><g><title>resolve_instance (347,853 samples, 0.49%)</title><rect x="9.4369%" y="69" width="0.4936%" height="15" fill="rgb(228,23,34)"/><text x="9.6869%" y="79.50"></text></g><g><title>thir_body (216,866 samples, 0.31%)</title><rect x="9.9423%" y="69" width="0.3077%" height="15" fill="rgb(218,30,26)"/><text x="10.1923%" y="79.50"></text></g><g><title>mir_const (2,036,865 samples, 2.89%)</title><rect x="7.3669%" y="117" width="2.8901%" height="15" fill="rgb(220,122,19)"/><text x="7.6169%" y="127.50">mi..</text></g><g><title>unsafety_check_result (1,679,429 samples, 2.38%)</title><rect x="7.8740%" y="101" width="2.3829%" height="15" fill="rgb(250,228,42)"/><text x="8.1240%" y="111.50">un..</text></g><g><title>mir_built (1,466,647 samples, 2.08%)</title><rect x="8.1759%" y="85" width="2.0810%" height="15" fill="rgb(240,193,28)"/><text x="8.4259%" y="95.50">m..</text></g><g><title>mir_promoted (2,288,676 samples, 3.25%)</title><rect x="7.0309%" y="133" width="3.2474%" height="15" fill="rgb(216,20,37)"/><text x="7.2809%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (167,662 samples, 0.24%)</title><rect x="10.2783%" y="133" width="0.2379%" height="15" fill="rgb(206,188,39)"/><text x="10.5283%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (149,272 samples, 0.21%)</title><rect x="10.5162%" y="133" width="0.2118%" height="15" fill="rgb(217,207,13)"/><text x="10.7662%" y="143.50"></text></g><g><title>normalize_projection_ty (102,210 samples, 0.15%)</title><rect x="10.5830%" y="117" width="0.1450%" height="15" fill="rgb(231,73,38)"/><text x="10.8330%" y="127.50"></text></g><g><title>type_op_prove_predicate (494,714 samples, 0.70%)</title><rect x="10.7280%" y="133" width="0.7019%" height="15" fill="rgb(225,20,46)"/><text x="10.9780%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,878,004 samples, 8.34%)</title><rect x="3.0994%" y="165" width="8.3403%" height="15" fill="rgb(210,31,41)"/><text x="3.3494%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (5,847,254 samples, 8.30%)</title><rect x="3.1430%" y="149" width="8.2966%" height="15" fill="rgb(221,200,47)"/><text x="3.3930%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (182,652 samples, 0.26%)</title><rect x="11.4498%" y="165" width="0.2592%" height="15" fill="rgb(226,26,5)"/><text x="11.6998%" y="175.50"></text></g><g><title>get_lang_items (120,711 samples, 0.17%)</title><rect x="12.3099%" y="85" width="0.1713%" height="15" fill="rgb(249,33,26)"/><text x="12.5599%" y="95.50"></text></g><g><title>codegen_fn_attrs (300,973 samples, 0.43%)</title><rect x="12.2429%" y="101" width="0.4270%" height="15" fill="rgb(235,183,28)"/><text x="12.4929%" y="111.50"></text></g><g><title>codegen_fn_attrs (465,215 samples, 0.66%)</title><rect x="12.0187%" y="133" width="0.6601%" height="15" fill="rgb(221,5,38)"/><text x="12.2687%" y="143.50"></text></g><g><title>should_inherit_track_caller (417,394 samples, 0.59%)</title><rect x="12.0865%" y="117" width="0.5922%" height="15" fill="rgb(247,18,42)"/><text x="12.3365%" y="127.50"></text></g><g><title>check_mod_attrs (644,386 samples, 0.91%)</title><rect x="11.7651%" y="149" width="0.9143%" height="15" fill="rgb(241,131,45)"/><text x="12.0151%" y="159.50"></text></g><g><title>check_mod_const_bodies (85,042 samples, 0.12%)</title><rect x="12.6794%" y="149" width="0.1207%" height="15" fill="rgb(249,31,29)"/><text x="12.9294%" y="159.50"></text></g><g><title>lookup_deprecation_entry (109,492 samples, 0.16%)</title><rect x="13.0541%" y="133" width="0.1554%" height="15" fill="rgb(225,111,53)"/><text x="13.3041%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (314,124 samples, 0.45%)</title><rect x="12.8772%" y="149" width="0.4457%" height="15" fill="rgb(238,160,17)"/><text x="13.1272%" y="159.50"></text></g><g><title>misc_checking_1 (1,213,183 samples, 1.72%)</title><rect x="11.7097%" y="165" width="1.7214%" height="15" fill="rgb(214,148,48)"/><text x="11.9597%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (105,322 samples, 0.15%)</title><rect x="13.4329%" y="149" width="0.1494%" height="15" fill="rgb(232,36,49)"/><text x="13.6829%" y="159.50"></text></g><g><title>check_mod_liveness (71,970 samples, 0.10%)</title><rect x="13.4802%" y="133" width="0.1021%" height="15" fill="rgb(209,103,24)"/><text x="13.7302%" y="143.50"></text></g><g><title>misc_checking_2 (244,553 samples, 0.35%)</title><rect x="13.4311%" y="165" width="0.3470%" height="15" fill="rgb(229,88,8)"/><text x="13.6811%" y="175.50"></text></g><g><title>match_checking (137,951 samples, 0.20%)</title><rect x="13.5823%" y="149" width="0.1957%" height="15" fill="rgb(213,181,19)"/><text x="13.8323%" y="159.50"></text></g><g><title>check_match (128,270 samples, 0.18%)</title><rect x="13.5961%" y="133" width="0.1820%" height="15" fill="rgb(254,191,54)"/><text x="13.8461%" y="143.50"></text></g><g><title>check_private_in_public (80,200 samples, 0.11%)</title><rect x="13.7906%" y="149" width="0.1138%" height="15" fill="rgb(241,83,37)"/><text x="14.0406%" y="159.50"></text></g><g><title>death_checking (184,492 samples, 0.26%)</title><rect x="13.9044%" y="149" width="0.2618%" height="15" fill="rgb(233,36,39)"/><text x="14.1544%" y="159.50"></text></g><g><title>item_attrs (72,591 samples, 0.10%)</title><rect x="14.0632%" y="133" width="0.1030%" height="15" fill="rgb(226,3,54)"/><text x="14.3132%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (71,661 samples, 0.10%)</title><rect x="14.0645%" y="117" width="0.1017%" height="15" fill="rgb(245,192,40)"/><text x="14.3145%" y="127.50"></text></g><g><title>param_env (70,770 samples, 0.10%)</title><rect x="14.9874%" y="117" width="0.1004%" height="15" fill="rgb(238,167,29)"/><text x="15.2374%" y="127.50"></text></g><g><title>crate_lints (1,718,909 samples, 2.44%)</title><rect x="14.1684%" y="133" width="2.4390%" height="15" fill="rgb(232,182,51)"/><text x="14.4184%" y="143.50">cr..</text></g><g><title>type_of (1,070,934 samples, 1.52%)</title><rect x="15.0878%" y="117" width="1.5195%" height="15" fill="rgb(231,60,39)"/><text x="15.3378%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (835,392 samples, 1.19%)</title><rect x="15.4220%" y="101" width="1.1853%" height="15" fill="rgb(208,69,12)"/><text x="15.6720%" y="111.50"></text></g><g><title>lint_checking (1,849,880 samples, 2.62%)</title><rect x="14.1662%" y="149" width="2.6248%" height="15" fill="rgb(235,93,37)"/><text x="14.4162%" y="159.50">li..</text></g><g><title>module_lints (129,411 samples, 0.18%)</title><rect x="16.6073%" y="133" width="0.1836%" height="15" fill="rgb(213,116,39)"/><text x="16.8573%" y="143.50"></text></g><g><title>lint_mod (125,601 samples, 0.18%)</title><rect x="16.6127%" y="117" width="0.1782%" height="15" fill="rgb(222,207,29)"/><text x="16.8627%" y="127.50"></text></g><g><title>privacy_access_levels (76,011 samples, 0.11%)</title><rect x="16.7909%" y="149" width="0.1079%" height="15" fill="rgb(206,96,30)"/><text x="17.0409%" y="159.50"></text></g><g><title>privacy_checking_modules (236,243 samples, 0.34%)</title><rect x="16.8988%" y="149" width="0.3352%" height="15" fill="rgb(218,138,4)"/><text x="17.1488%" y="159.50"></text></g><g><title>check_mod_privacy (233,313 samples, 0.33%)</title><rect x="16.9030%" y="133" width="0.3310%" height="15" fill="rgb(250,191,14)"/><text x="17.1530%" y="143.50"></text></g><g><title>misc_checking_3 (2,445,717 samples, 3.47%)</title><rect x="13.7781%" y="165" width="3.4702%" height="15" fill="rgb(239,60,40)"/><text x="14.0281%" y="175.50">mis..</text></g><g><title>impl_trait_ref (144,812 samples, 0.21%)</title><rect x="17.5729%" y="69" width="0.2055%" height="15" fill="rgb(206,27,48)"/><text x="17.8229%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (125,312 samples, 0.18%)</title><rect x="17.6006%" y="53" width="0.1778%" height="15" fill="rgb(225,35,8)"/><text x="17.8506%" y="63.50"></text></g><g><title>adt_destructor (298,563 samples, 0.42%)</title><rect x="17.3904%" y="117" width="0.4236%" height="15" fill="rgb(250,213,24)"/><text x="17.6404%" y="127.50"></text></g><g><title>coherent_trait (286,293 samples, 0.41%)</title><rect x="17.4078%" y="101" width="0.4062%" height="15" fill="rgb(247,123,22)"/><text x="17.6578%" y="111.50"></text></g><g><title>specialization_graph_of (285,153 samples, 0.40%)</title><rect x="17.4094%" y="85" width="0.4046%" height="15" fill="rgb(231,138,38)"/><text x="17.6594%" y="95.50"></text></g><g><title>is_copy_raw (93,311 samples, 0.13%)</title><rect x="17.8140%" y="117" width="0.1324%" height="15" fill="rgb(231,145,46)"/><text x="18.0640%" y="127.50"></text></g><g><title>evaluate_obligation (79,711 samples, 0.11%)</title><rect x="17.8333%" y="101" width="0.1131%" height="15" fill="rgb(251,118,11)"/><text x="18.0833%" y="111.50"></text></g><g><title>impl_parent (2,232,544 samples, 3.17%)</title><rect x="22.8271%" y="101" width="3.1677%" height="15" fill="rgb(217,147,25)"/><text x="23.0771%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,208,441 samples, 1.71%)</title><rect x="24.2802%" y="85" width="1.7147%" height="15" fill="rgb(247,81,37)"/><text x="24.5302%" y="95.50"></text></g><g><title>impl_trait_ref (5,052,397 samples, 7.17%)</title><rect x="25.9983%" y="101" width="7.1688%" height="15" fill="rgb(209,12,38)"/><text x="26.2483%" y="111.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,264,628 samples, 6.05%)</title><rect x="27.1160%" y="85" width="6.0511%" height="15" fill="rgb(227,1,9)"/><text x="27.3660%" y="95.50">metadata..</text></g><g><title>trait_impls_of (753,169 samples, 1.07%)</title><rect x="33.2608%" y="101" width="1.0687%" height="15" fill="rgb(248,47,43)"/><text x="33.5108%" y="111.50"></text></g><g><title>implementations_of_trait (200,223 samples, 0.28%)</title><rect x="34.0453%" y="85" width="0.2841%" height="15" fill="rgb(221,10,30)"/><text x="34.2953%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (158,541 samples, 0.22%)</title><rect x="34.1045%" y="69" width="0.2250%" height="15" fill="rgb(210,229,1)"/><text x="34.3545%" y="79.50"></text></g><g><title>coherent_trait (16,583,564 samples, 23.53%)</title><rect x="17.3364%" y="133" width="23.5303%" height="15" fill="rgb(222,148,37)"/><text x="17.5864%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,111,769 samples, 22.86%)</title><rect x="18.0058%" y="117" width="22.8609%" height="15" fill="rgb(234,67,33)"/><text x="18.2558%" y="127.50">specialization_graph_of</text></g><g><title>visible_parent_map (4,605,900 samples, 6.54%)</title><rect x="34.3314%" y="101" width="6.5353%" height="15" fill="rgb(247,98,35)"/><text x="34.5814%" y="111.50">visible_p..</text></g><g><title>module_children (4,071,894 samples, 5.78%)</title><rect x="35.0891%" y="85" width="5.7776%" height="15" fill="rgb(247,138,52)"/><text x="35.3391%" y="95.50">module_..</text></g><g><title>metadata_decode_entry_module_children (3,998,421 samples, 5.67%)</title><rect x="35.1934%" y="69" width="5.6733%" height="15" fill="rgb(213,79,30)"/><text x="35.4434%" y="79.50">metadat..</text></g><g><title>coherence_checking (16,672,285 samples, 23.66%)</title><rect x="17.3012%" y="149" width="23.6562%" height="15" fill="rgb(246,177,23)"/><text x="17.5512%" y="159.50">coherence_checking</text></g><g><title>associated_item (150,572 samples, 0.21%)</title><rect x="47.8742%" y="85" width="0.2136%" height="15" fill="rgb(230,62,27)"/><text x="48.1242%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (119,640 samples, 0.17%)</title><rect x="47.9181%" y="69" width="0.1698%" height="15" fill="rgb(216,154,8)"/><text x="48.1681%" y="79.50"></text></g><g><title>associated_items (219,052 samples, 0.31%)</title><rect x="47.7920%" y="101" width="0.3108%" height="15" fill="rgb(244,35,45)"/><text x="48.0420%" y="111.50"></text></g><g><title>dropck_outlives (151,671 samples, 0.22%)</title><rect x="48.1369%" y="101" width="0.2152%" height="15" fill="rgb(251,115,12)"/><text x="48.3869%" y="111.50"></text></g><g><title>adt_sized_constraint (72,050 samples, 0.10%)</title><rect x="49.0006%" y="85" width="0.1022%" height="15" fill="rgb(240,54,50)"/><text x="49.2506%" y="95.50"></text></g><g><title>evaluate_obligation (796,564 samples, 1.13%)</title><rect x="48.3521%" y="101" width="1.1302%" height="15" fill="rgb(233,84,52)"/><text x="48.6021%" y="111.50"></text></g><g><title>trait_impls_of (113,370 samples, 0.16%)</title><rect x="49.3215%" y="85" width="0.1609%" height="15" fill="rgb(207,117,47)"/><text x="49.5715%" y="95.50"></text></g><g><title>item_attrs (117,591 samples, 0.17%)</title><rect x="49.7158%" y="101" width="0.1668%" height="15" fill="rgb(249,43,39)"/><text x="49.9658%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (113,661 samples, 0.16%)</title><rect x="49.7214%" y="85" width="0.1613%" height="15" fill="rgb(209,38,44)"/><text x="49.9714%" y="95.50"></text></g><g><title>method_autoderef_steps (107,702 samples, 0.15%)</title><rect x="49.9358%" y="101" width="0.1528%" height="15" fill="rgb(236,212,23)"/><text x="50.1858%" y="111.50"></text></g><g><title>object_safety_violations (139,021 samples, 0.20%)</title><rect x="50.0886%" y="101" width="0.1973%" height="15" fill="rgb(242,79,21)"/><text x="50.3386%" y="111.50"></text></g><g><title>predicates_of (134,092 samples, 0.19%)</title><rect x="50.3162%" y="101" width="0.1903%" height="15" fill="rgb(211,96,35)"/><text x="50.5662%" y="111.50"></text></g><g><title>predicates_defined_on (97,391 samples, 0.14%)</title><rect x="50.3683%" y="85" width="0.1382%" height="15" fill="rgb(253,215,40)"/><text x="50.6183%" y="95.50"></text></g><g><title>item_bodies_checking (6,780,036 samples, 9.62%)</title><rect x="41.0067%" y="149" width="9.6202%" height="15" fill="rgb(211,81,21)"/><text x="41.2567%" y="159.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (6,777,776 samples, 9.62%)</title><rect x="41.0099%" y="133" width="9.6170%" height="15" fill="rgb(208,190,38)"/><text x="41.2599%" y="143.50">typeck_item_bo..</text></g><g><title>typeck (6,754,216 samples, 9.58%)</title><rect x="41.0434%" y="117" width="9.5835%" height="15" fill="rgb(235,213,38)"/><text x="41.2934%" y="127.50">typeck</text></g><g><title>item_types_checking (232,842 samples, 0.33%)</title><rect x="50.6269%" y="149" width="0.3304%" height="15" fill="rgb(237,122,38)"/><text x="50.8769%" y="159.50"></text></g><g><title>check_mod_item_types (228,932 samples, 0.32%)</title><rect x="50.6324%" y="133" width="0.3248%" height="15" fill="rgb(244,218,35)"/><text x="50.8824%" y="143.50"></text></g><g><title>fn_sig (243,780 samples, 0.35%)</title><rect x="51.3060%" y="117" width="0.3459%" height="15" fill="rgb(240,68,47)"/><text x="51.5560%" y="127.50"></text></g><g><title>named_region_map (292,686 samples, 0.42%)</title><rect x="51.7874%" y="101" width="0.4153%" height="15" fill="rgb(210,16,53)"/><text x="52.0374%" y="111.50"></text></g><g><title>resolve_lifetimes (270,425 samples, 0.38%)</title><rect x="51.8190%" y="85" width="0.3837%" height="15" fill="rgb(235,124,12)"/><text x="52.0690%" y="95.50"></text></g><g><title>lint_levels (89,991 samples, 0.13%)</title><rect x="52.0750%" y="69" width="0.1277%" height="15" fill="rgb(224,169,11)"/><text x="52.3250%" y="79.50"></text></g><g><title>generics_of (402,268 samples, 0.57%)</title><rect x="51.6519%" y="117" width="0.5708%" height="15" fill="rgb(250,166,2)"/><text x="51.9019%" y="127.50"></text></g><g><title>late_bound_vars_map (131,982 samples, 0.19%)</title><rect x="52.7119%" y="69" width="0.1873%" height="15" fill="rgb(242,216,29)"/><text x="52.9619%" y="79.50"></text></g><g><title>resolve_lifetimes (121,512 samples, 0.17%)</title><rect x="52.7267%" y="53" width="0.1724%" height="15" fill="rgb(230,116,27)"/><text x="52.9767%" y="63.50"></text></g><g><title>explicit_predicates_of (341,674 samples, 0.48%)</title><rect x="52.4438%" y="85" width="0.4848%" height="15" fill="rgb(228,99,48)"/><text x="52.6938%" y="95.50"></text></g><g><title>predicates_of (545,205 samples, 0.77%)</title><rect x="52.2931%" y="117" width="0.7736%" height="15" fill="rgb(253,11,6)"/><text x="52.5431%" y="127.50"></text></g><g><title>predicates_defined_on (503,095 samples, 0.71%)</title><rect x="52.3528%" y="101" width="0.7138%" height="15" fill="rgb(247,143,39)"/><text x="52.6028%" y="111.50"></text></g><g><title>inferred_outlives_of (97,311 samples, 0.14%)</title><rect x="52.9286%" y="85" width="0.1381%" height="15" fill="rgb(236,97,10)"/><text x="53.1786%" y="95.50"></text></g><g><title>inferred_outlives_crate (76,271 samples, 0.11%)</title><rect x="52.9584%" y="69" width="0.1082%" height="15" fill="rgb(233,208,19)"/><text x="53.2084%" y="79.50"></text></g><g><title>type_collecting (1,634,578 samples, 2.32%)</title><rect x="50.9588%" y="149" width="2.3193%" height="15" fill="rgb(216,164,2)"/><text x="51.2088%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,620,428 samples, 2.30%)</title><rect x="50.9789%" y="133" width="2.2992%" height="15" fill="rgb(220,129,5)"/><text x="51.2289%" y="143.50">c..</text></g><g><title>type_of (116,621 samples, 0.17%)</title><rect x="53.1126%" y="117" width="0.1655%" height="15" fill="rgb(242,17,10)"/><text x="53.3626%" y="127.50"></text></g><g><title>evaluate_obligation (217,022 samples, 0.31%)</title><rect x="54.2587%" y="117" width="0.3079%" height="15" fill="rgb(242,107,0)"/><text x="54.5087%" y="127.50"></text></g><g><title>implied_outlives_bounds (112,442 samples, 0.16%)</title><rect x="54.5667%" y="117" width="0.1595%" height="15" fill="rgb(251,28,31)"/><text x="54.8167%" y="127.50"></text></g><g><title>param_env (97,630 samples, 0.14%)</title><rect x="54.7262%" y="117" width="0.1385%" height="15" fill="rgb(233,223,10)"/><text x="54.9762%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,130,342 samples, 1.60%)</title><rect x="53.3939%" y="133" width="1.6038%" height="15" fill="rgb(215,21,27)"/><text x="53.6439%" y="143.50"></text></g><g><title>region_scope_tree (84,741 samples, 0.12%)</title><rect x="54.8775%" y="117" width="0.1202%" height="15" fill="rgb(232,23,21)"/><text x="55.1275%" y="127.50"></text></g><g><title>param_env (127,533 samples, 0.18%)</title><rect x="55.8915%" y="117" width="0.1810%" height="15" fill="rgb(244,5,23)"/><text x="56.1415%" y="127.50"></text></g><g><title>check_item_well_formed (889,691 samples, 1.26%)</title><rect x="54.9977%" y="133" width="1.2624%" height="15" fill="rgb(226,81,46)"/><text x="55.2477%" y="143.50"></text></g><g><title>adt_sized_constraint (73,951 samples, 0.10%)</title><rect x="57.1728%" y="101" width="0.1049%" height="15" fill="rgb(247,70,30)"/><text x="57.4228%" y="111.50"></text></g><g><title>evaluate_obligation (258,912 samples, 0.37%)</title><rect x="56.9391%" y="117" width="0.3674%" height="15" fill="rgb(212,68,19)"/><text x="57.1891%" y="127.50"></text></g><g><title>implied_outlives_bounds (104,952 samples, 0.15%)</title><rect x="57.3065%" y="117" width="0.1489%" height="15" fill="rgb(240,187,13)"/><text x="57.5565%" y="127.50"></text></g><g><title>analysis (38,901,510 samples, 55.20%)</title><rect x="2.4013%" y="181" width="55.1972%" height="15" fill="rgb(223,113,26)"/><text x="2.6513%" y="191.50">analysis</text></g><g><title>type_check_crate (28,437,735 samples, 40.35%)</title><rect x="17.2483%" y="165" width="40.3502%" height="15" fill="rgb(206,192,2)"/><text x="17.4983%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,043,374 samples, 4.32%)</title><rect x="53.2802%" y="149" width="4.3182%" height="15" fill="rgb(241,108,4)"/><text x="53.5302%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (943,241 samples, 1.34%)</title><rect x="56.2601%" y="133" width="1.3384%" height="15" fill="rgb(247,173,49)"/><text x="56.5101%" y="143.50"></text></g><g><title>codegen_crate (440,804 samples, 0.63%)</title><rect x="57.6149%" y="181" width="0.6255%" height="15" fill="rgb(224,114,35)"/><text x="57.8649%" y="191.50"></text></g><g><title>AST_validation (153,302 samples, 0.22%)</title><rect x="58.5600%" y="165" width="0.2175%" height="15" fill="rgb(245,159,27)"/><text x="58.8100%" y="175.50"></text></g><g><title>crate_injection (87,471 samples, 0.12%)</title><rect x="58.8604%" y="165" width="0.1241%" height="15" fill="rgb(245,172,44)"/><text x="59.1104%" y="175.50"></text></g><g><title>metadata_load_macro (310,833 samples, 0.44%)</title><rect x="79.1828%" y="133" width="0.4410%" height="15" fill="rgb(236,23,11)"/><text x="79.4328%" y="143.50"></text></g><g><title>metadata_register_crate (2,667,949 samples, 3.79%)</title><rect x="79.6238%" y="133" width="3.7855%" height="15" fill="rgb(205,117,38)"/><text x="79.8738%" y="143.50">meta..</text></g><g><title>metadata_register_crate (1,003,181 samples, 1.42%)</title><rect x="81.9860%" y="117" width="1.4234%" height="15" fill="rgb(237,72,25)"/><text x="82.2360%" y="127.50"></text></g><g><title>metadata_register_crate (78,830 samples, 0.11%)</title><rect x="83.2975%" y="101" width="0.1119%" height="15" fill="rgb(244,70,9)"/><text x="83.5475%" y="111.50"></text></g><g><title>macro_expand_crate (17,381,982 samples, 24.66%)</title><rect x="58.9845%" y="165" width="24.6632%" height="15" fill="rgb(217,125,39)"/><text x="59.2345%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (17,359,532 samples, 24.63%)</title><rect x="59.0163%" y="149" width="24.6314%" height="15" fill="rgb(235,36,10)"/><text x="59.2663%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (167,953 samples, 0.24%)</title><rect x="83.4094%" y="133" width="0.2383%" height="15" fill="rgb(251,123,47)"/><text x="83.6594%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (134,071 samples, 0.19%)</title><rect x="83.6559%" y="165" width="0.1902%" height="15" fill="rgb(221,13,13)"/><text x="83.9059%" y="175.50"></text></g><g><title>finalize_macro_resolutions (204,503 samples, 0.29%)</title><rect x="83.9203%" y="149" width="0.2902%" height="15" fill="rgb(238,131,9)"/><text x="84.1703%" y="159.50"></text></g><g><title>late_resolve_crate (1,254,524 samples, 1.78%)</title><rect x="84.2104%" y="149" width="1.7800%" height="15" fill="rgb(211,50,8)"/><text x="84.4604%" y="159.50">l..</text></g><g><title>configure_and_expand (19,687,658 samples, 27.93%)</title><rect x="58.2403%" y="181" width="27.9347%" height="15" fill="rgb(245,182,24)"/><text x="58.4903%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,641,388 samples, 2.33%)</title><rect x="83.8461%" y="165" width="2.3290%" height="15" fill="rgb(242,14,37)"/><text x="84.0961%" y="175.50">r..</text></g><g><title>drop_ast (166,312 samples, 0.24%)</title><rect x="86.1751%" y="181" width="0.2360%" height="15" fill="rgb(246,228,12)"/><text x="86.4251%" y="191.50"></text></g><g><title>early_lint_checks (332,713 samples, 0.47%)</title><rect x="86.4366%" y="181" width="0.4721%" height="15" fill="rgb(213,55,15)"/><text x="86.6866%" y="191.50"></text></g><g><title>free_global_ctxt (2,787,460 samples, 3.96%)</title><rect x="86.9086%" y="181" width="3.9551%" height="15" fill="rgb(209,9,3)"/><text x="87.1586%" y="191.50">free..</text></g><g><title>generate_crate_metadata (739,658 samples, 1.05%)</title><rect x="90.8638%" y="181" width="1.0495%" height="15" fill="rgb(230,59,30)"/><text x="91.1138%" y="191.50"></text></g><g><title>hir_lowering (2,688,439 samples, 3.81%)</title><rect x="91.9133%" y="181" width="3.8146%" height="15" fill="rgb(209,121,21)"/><text x="92.1633%" y="191.50">hir_..</text></g><g><title>parse_crate (1,608,388 samples, 2.28%)</title><rect x="95.8052%" y="181" width="2.2821%" height="15" fill="rgb(220,109,13)"/><text x="96.0552%" y="191.50">p..</text></g><g><title>prepare_outputs (356,864 samples, 0.51%)</title><rect x="98.1016%" y="181" width="0.5064%" height="15" fill="rgb(232,18,1)"/><text x="98.3516%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (549,176 samples, 0.78%)</title><rect x="98.6080%" y="181" width="0.7792%" height="15" fill="rgb(215,41,42)"/><text x="98.8580%" y="191.50"></text></g><g><title>setup_global_ctxt (141,271 samples, 0.20%)</title><rect x="99.4036%" y="181" width="0.2004%" height="15" fill="rgb(224,123,36)"/><text x="99.6536%" y="191.50"></text></g><g><title>all (70,477,359 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (70,477,359 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (279,074 samples, 0.40%)</title><rect x="99.6040%" y="181" width="0.3960%" height="15" fill="rgb(205,185,37)"/><text x="99.8540%" y="191.50"></text></g></svg></svg>