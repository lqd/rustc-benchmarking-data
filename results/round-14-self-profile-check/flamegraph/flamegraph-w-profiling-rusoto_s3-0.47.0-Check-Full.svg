<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (6,443,394 samples, 0.10%)</title><rect x="12.3696%" y="149" width="0.1032%" height="15" fill="rgb(227,0,7)"/><text x="12.6196%" y="159.50"></text></g><g><title>is_copy_raw (32,849,074 samples, 0.53%)</title><rect x="17.3612%" y="69" width="0.5261%" height="15" fill="rgb(217,0,24)"/><text x="17.6112%" y="79.50"></text></g><g><title>evaluate_obligation (26,827,503 samples, 0.43%)</title><rect x="17.4576%" y="53" width="0.4297%" height="15" fill="rgb(221,193,54)"/><text x="17.7076%" y="63.50"></text></g><g><title>needs_drop_raw (41,271,689 samples, 0.66%)</title><rect x="17.2280%" y="85" width="0.6611%" height="15" fill="rgb(248,212,6)"/><text x="17.4780%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,989,740 samples, 0.11%)</title><rect x="17.9590%" y="69" width="0.1120%" height="15" fill="rgb(208,68,35)"/><text x="18.2090%" y="79.50"></text></g><g><title>resolve_instance (14,337,065 samples, 0.23%)</title><rect x="17.8890%" y="85" width="0.2296%" height="15" fill="rgb(232,128,0)"/><text x="18.1390%" y="95.50"></text></g><g><title>thir_body (65,717,728 samples, 1.05%)</title><rect x="18.1414%" y="85" width="1.0526%" height="15" fill="rgb(207,160,47)"/><text x="18.3914%" y="95.50"></text></g><g><title>mir_const (371,044,178 samples, 5.94%)</title><rect x="13.2717%" y="133" width="5.9430%" height="15" fill="rgb(228,23,34)"/><text x="13.5217%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (324,555,238 samples, 5.20%)</title><rect x="14.0163%" y="117" width="5.1984%" height="15" fill="rgb(218,30,26)"/><text x="14.2663%" y="127.50">unsafe..</text></g><g><title>mir_built (295,358,509 samples, 4.73%)</title><rect x="14.4840%" y="101" width="4.7308%" height="15" fill="rgb(220,122,19)"/><text x="14.7340%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (417,241,568 samples, 6.68%)</title><rect x="12.5690%" y="149" width="6.6830%" height="15" fill="rgb(250,228,42)"/><text x="12.8190%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (33,205,091 samples, 0.53%)</title><rect x="19.2520%" y="149" width="0.5318%" height="15" fill="rgb(240,193,28)"/><text x="19.5020%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (22,057,304 samples, 0.35%)</title><rect x="19.7839%" y="149" width="0.3533%" height="15" fill="rgb(216,20,37)"/><text x="20.0339%" y="159.50"></text></g><g><title>normalize_projection_ty (13,309,298 samples, 0.21%)</title><rect x="19.9240%" y="133" width="0.2132%" height="15" fill="rgb(206,188,39)"/><text x="20.1740%" y="143.50"></text></g><g><title>type_op_normalize_predicate (11,233,347 samples, 0.18%)</title><rect x="20.1372%" y="149" width="0.1799%" height="15" fill="rgb(217,207,13)"/><text x="20.3872%" y="159.50"></text></g><g><title>type_op_prove_predicate (106,984,981 samples, 1.71%)</title><rect x="20.3774%" y="149" width="1.7136%" height="15" fill="rgb(231,73,38)"/><text x="20.6274%" y="159.50"></text></g><g><title>MIR_borrow_checking (1,362,619,339 samples, 21.83%)</title><rect x="0.2708%" y="181" width="21.8252%" height="15" fill="rgb(225,20,46)"/><text x="0.5208%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,355,886,222 samples, 21.72%)</title><rect x="0.3786%" y="165" width="21.7173%" height="15" fill="rgb(210,31,41)"/><text x="0.6286%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (7,727,877 samples, 0.12%)</title><rect x="22.1836%" y="181" width="0.1238%" height="15" fill="rgb(221,200,47)"/><text x="22.4336%" y="191.50"></text></g><g><title>codegen_fn_attrs (7,990,075 samples, 0.13%)</title><rect x="22.6743%" y="149" width="0.1280%" height="15" fill="rgb(226,26,5)"/><text x="22.9243%" y="159.50"></text></g><g><title>check_mod_attrs (30,836,544 samples, 0.49%)</title><rect x="22.3084%" y="165" width="0.4939%" height="15" fill="rgb(249,33,26)"/><text x="22.5584%" y="175.50"></text></g><g><title>check_mod_const_bodies (8,548,895 samples, 0.14%)</title><rect x="22.8023%" y="165" width="0.1369%" height="15" fill="rgb(235,183,28)"/><text x="23.0523%" y="175.50"></text></g><g><title>lookup_deprecation_entry (7,518,173 samples, 0.12%)</title><rect x="23.1682%" y="149" width="0.1204%" height="15" fill="rgb(221,5,38)"/><text x="23.4182%" y="159.50"></text></g><g><title>stability_index (7,287,591 samples, 0.12%)</title><rect x="23.1719%" y="133" width="0.1167%" height="15" fill="rgb(247,18,42)"/><text x="23.4219%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (15,235,491 samples, 0.24%)</title><rect x="23.0466%" y="165" width="0.2440%" height="15" fill="rgb(241,131,45)"/><text x="23.2966%" y="175.50"></text></g><g><title>misc_checking_1 (63,354,788 samples, 1.01%)</title><rect x="22.3074%" y="181" width="1.0148%" height="15" fill="rgb(249,31,29)"/><text x="22.5574%" y="191.50"></text></g><g><title>check_mod_intrinsics (6,935,858 samples, 0.11%)</title><rect x="23.3226%" y="149" width="0.1111%" height="15" fill="rgb(225,111,53)"/><text x="23.5726%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (26,887,270 samples, 0.43%)</title><rect x="23.3222%" y="165" width="0.4307%" height="15" fill="rgb(238,160,17)"/><text x="23.5722%" y="175.50"></text></g><g><title>check_mod_liveness (19,931,042 samples, 0.32%)</title><rect x="23.4337%" y="149" width="0.3192%" height="15" fill="rgb(214,148,48)"/><text x="23.6837%" y="159.50"></text></g><g><title>misc_checking_2 (66,769,746 samples, 1.07%)</title><rect x="23.3222%" y="181" width="1.0695%" height="15" fill="rgb(232,36,49)"/><text x="23.5722%" y="191.50"></text></g><g><title>match_checking (39,878,916 samples, 0.64%)</title><rect x="23.7529%" y="165" width="0.6387%" height="15" fill="rgb(209,103,24)"/><text x="24.0029%" y="175.50"></text></g><g><title>check_match (37,850,779 samples, 0.61%)</title><rect x="23.7854%" y="149" width="0.6063%" height="15" fill="rgb(229,88,8)"/><text x="24.0354%" y="159.50"></text></g><g><title>check_private_in_public (17,239,393 samples, 0.28%)</title><rect x="24.3921%" y="165" width="0.2761%" height="15" fill="rgb(213,181,19)"/><text x="24.6421%" y="175.50"></text></g><g><title>death_checking (24,032,958 samples, 0.38%)</title><rect x="24.6682%" y="165" width="0.3849%" height="15" fill="rgb(254,191,54)"/><text x="24.9182%" y="175.50"></text></g><g><title>crate_lints (51,382,994 samples, 0.82%)</title><rect x="25.0532%" y="149" width="0.8230%" height="15" fill="rgb(241,83,37)"/><text x="25.3032%" y="159.50"></text></g><g><title>lint_checking (86,696,079 samples, 1.39%)</title><rect x="25.0532%" y="165" width="1.3886%" height="15" fill="rgb(233,36,39)"/><text x="25.3032%" y="175.50"></text></g><g><title>module_lints (35,308,615 samples, 0.57%)</title><rect x="25.8762%" y="149" width="0.5655%" height="15" fill="rgb(226,3,54)"/><text x="26.1262%" y="159.50"></text></g><g><title>lint_mod (35,292,495 samples, 0.57%)</title><rect x="25.8765%" y="133" width="0.5653%" height="15" fill="rgb(245,192,40)"/><text x="26.1265%" y="143.50"></text></g><g><title>privacy_access_levels (21,689,473 samples, 0.35%)</title><rect x="26.4418%" y="165" width="0.3474%" height="15" fill="rgb(238,167,29)"/><text x="26.6918%" y="175.50"></text></g><g><title>privacy_checking_modules (66,892,117 samples, 1.07%)</title><rect x="26.7892%" y="165" width="1.0714%" height="15" fill="rgb(232,182,51)"/><text x="27.0392%" y="175.50"></text></g><g><title>check_mod_privacy (66,884,007 samples, 1.07%)</title><rect x="26.7893%" y="149" width="1.0713%" height="15" fill="rgb(231,60,39)"/><text x="27.0393%" y="159.50"></text></g><g><title>misc_checking_3 (217,139,936 samples, 3.48%)</title><rect x="24.3916%" y="181" width="3.4779%" height="15" fill="rgb(208,69,12)"/><text x="24.6416%" y="191.50">mis..</text></g><g><title>impl_trait_ref (8,687,936 samples, 0.14%)</title><rect x="28.0717%" y="117" width="0.1392%" height="15" fill="rgb(235,93,37)"/><text x="28.3217%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,159,848 samples, 0.11%)</title><rect x="28.0962%" y="101" width="0.1147%" height="15" fill="rgb(213,116,39)"/><text x="28.3462%" y="111.50"></text></g><g><title>coherent_trait (20,345,797 samples, 0.33%)</title><rect x="27.9141%" y="149" width="0.3259%" height="15" fill="rgb(222,207,29)"/><text x="28.1641%" y="159.50"></text></g><g><title>specialization_graph_of (20,182,756 samples, 0.32%)</title><rect x="27.9167%" y="133" width="0.3233%" height="15" fill="rgb(206,96,30)"/><text x="28.1667%" y="143.50"></text></g><g><title>coherence_checking (22,412,600 samples, 0.36%)</title><rect x="27.9136%" y="165" width="0.3590%" height="15" fill="rgb(218,138,4)"/><text x="28.1636%" y="175.50"></text></g><g><title>evaluate_obligation (15,784,747 samples, 0.25%)</title><rect x="41.3655%" y="117" width="0.2528%" height="15" fill="rgb(250,191,14)"/><text x="41.6155%" y="127.50"></text></g><g><title>dropck_outlives (10,954,904 samples, 0.18%)</title><rect x="51.5628%" y="101" width="0.1755%" height="15" fill="rgb(239,60,40)"/><text x="51.8128%" y="111.50"></text></g><g><title>evaluate_obligation (138,340,149 samples, 2.22%)</title><rect x="51.7427%" y="101" width="2.2158%" height="15" fill="rgb(206,27,48)"/><text x="51.9927%" y="111.50">e..</text></g><g><title>is_copy_raw (23,780,080 samples, 0.38%)</title><rect x="54.0071%" y="101" width="0.3809%" height="15" fill="rgb(225,35,8)"/><text x="54.2571%" y="111.50"></text></g><g><title>evaluate_obligation (16,473,847 samples, 0.26%)</title><rect x="54.1241%" y="85" width="0.2639%" height="15" fill="rgb(250,213,24)"/><text x="54.3741%" y="95.50"></text></g><g><title>typeck (799,808,751 samples, 12.81%)</title><rect x="41.6911%" y="117" width="12.8106%" height="15" fill="rgb(247,123,22)"/><text x="41.9411%" y="127.50">typeck</text></g><g><title>item_bodies_checking (1,636,076,982 samples, 26.21%)</title><rect x="28.3108%" y="165" width="26.2052%" height="15" fill="rgb(231,138,38)"/><text x="28.5608%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,636,072,792 samples, 26.21%)</title><rect x="28.3109%" y="149" width="26.2051%" height="15" fill="rgb(231,145,46)"/><text x="28.5609%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (1,628,341,471 samples, 26.08%)</title><rect x="28.4347%" y="133" width="26.0813%" height="15" fill="rgb(251,118,11)"/><text x="28.6847%" y="143.50">typeck</text></g><g><title>mir_built (7,650,595 samples, 0.12%)</title><rect x="55.1303%" y="53" width="0.1225%" height="15" fill="rgb(217,147,25)"/><text x="55.3803%" y="63.50"></text></g><g><title>typeck (7,415,653 samples, 0.12%)</title><rect x="55.1341%" y="37" width="0.1188%" height="15" fill="rgb(247,81,37)"/><text x="55.3841%" y="47.50"></text></g><g><title>mir_const (8,675,877 samples, 0.14%)</title><rect x="55.1286%" y="85" width="0.1390%" height="15" fill="rgb(209,12,38)"/><text x="55.3786%" y="95.50"></text></g><g><title>unsafety_check_result (8,589,076 samples, 0.14%)</title><rect x="55.1300%" y="69" width="0.1376%" height="15" fill="rgb(227,1,9)"/><text x="55.3800%" y="79.50"></text></g><g><title>mir_promoted (8,749,447 samples, 0.14%)</title><rect x="55.1275%" y="101" width="0.1401%" height="15" fill="rgb(248,47,43)"/><text x="55.3775%" y="111.50"></text></g><g><title>item_types_checking (47,057,086 samples, 0.75%)</title><rect x="54.5160%" y="165" width="0.7537%" height="15" fill="rgb(221,10,30)"/><text x="54.7660%" y="175.50"></text></g><g><title>check_mod_item_types (47,047,856 samples, 0.75%)</title><rect x="54.5162%" y="149" width="0.7536%" height="15" fill="rgb(210,229,1)"/><text x="54.7662%" y="159.50"></text></g><g><title>type_of (11,368,417 samples, 0.18%)</title><rect x="55.0876%" y="133" width="0.1821%" height="15" fill="rgb(222,148,37)"/><text x="55.3376%" y="143.50"></text></g><g><title>mir_borrowck (11,299,016 samples, 0.18%)</title><rect x="55.0887%" y="117" width="0.1810%" height="15" fill="rgb(234,67,33)"/><text x="55.3387%" y="127.50"></text></g><g><title>fn_sig (11,857,228 samples, 0.19%)</title><rect x="55.4941%" y="133" width="0.1899%" height="15" fill="rgb(247,98,35)"/><text x="55.7441%" y="143.50"></text></g><g><title>named_region_map (33,296,121 samples, 0.53%)</title><rect x="55.8267%" y="117" width="0.5333%" height="15" fill="rgb(247,138,52)"/><text x="56.0767%" y="127.50"></text></g><g><title>resolve_lifetimes (32,073,405 samples, 0.51%)</title><rect x="55.8463%" y="101" width="0.5137%" height="15" fill="rgb(213,79,30)"/><text x="56.0963%" y="111.50"></text></g><g><title>lint_levels (17,889,789 samples, 0.29%)</title><rect x="56.0735%" y="85" width="0.2865%" height="15" fill="rgb(246,177,23)"/><text x="56.3235%" y="95.50"></text></g><g><title>generics_of (43,005,135 samples, 0.69%)</title><rect x="55.6840%" y="133" width="0.6888%" height="15" fill="rgb(230,62,27)"/><text x="55.9340%" y="143.50"></text></g><g><title>explicit_predicates_of (6,367,741 samples, 0.10%)</title><rect x="56.5235%" y="101" width="0.1020%" height="15" fill="rgb(216,154,8)"/><text x="56.7735%" y="111.50"></text></g><g><title>predicates_of (20,081,112 samples, 0.32%)</title><rect x="56.3898%" y="133" width="0.3216%" height="15" fill="rgb(244,35,45)"/><text x="56.6398%" y="143.50"></text></g><g><title>predicates_defined_on (16,788,287 samples, 0.27%)</title><rect x="56.4426%" y="117" width="0.2689%" height="15" fill="rgb(251,115,12)"/><text x="56.6926%" y="127.50"></text></g><g><title>type_collecting (92,699,365 samples, 1.48%)</title><rect x="55.2698%" y="165" width="1.4848%" height="15" fill="rgb(240,54,50)"/><text x="55.5198%" y="175.50"></text></g><g><title>collect_mod_item_types (92,670,915 samples, 1.48%)</title><rect x="55.2702%" y="149" width="1.4843%" height="15" fill="rgb(233,84,52)"/><text x="55.5202%" y="159.50"></text></g><g><title>evaluate_obligation (9,378,163 samples, 0.15%)</title><rect x="58.1398%" y="133" width="0.1502%" height="15" fill="rgb(207,117,47)"/><text x="58.3898%" y="143.50"></text></g><g><title>implied_outlives_bounds (6,485,655 samples, 0.10%)</title><rect x="58.2900%" y="133" width="0.1039%" height="15" fill="rgb(249,43,39)"/><text x="58.5400%" y="143.50"></text></g><g><title>param_env (10,807,782 samples, 0.17%)</title><rect x="58.3939%" y="133" width="0.1731%" height="15" fill="rgb(209,38,44)"/><text x="58.6439%" y="143.50"></text></g><g><title>region_scope_tree (22,839,443 samples, 0.37%)</title><rect x="58.5682%" y="133" width="0.3658%" height="15" fill="rgb(236,212,23)"/><text x="58.8182%" y="143.50"></text></g><g><title>check_impl_item_well_formed (126,835,894 samples, 2.03%)</title><rect x="56.9111%" y="149" width="2.0315%" height="15" fill="rgb(242,79,21)"/><text x="57.1611%" y="159.50">c..</text></g><g><title>evaluate_obligation (15,165,350 samples, 0.24%)</title><rect x="59.6037%" y="133" width="0.2429%" height="15" fill="rgb(211,96,35)"/><text x="59.8537%" y="143.50"></text></g><g><title>param_env (12,657,120 samples, 0.20%)</title><rect x="59.9018%" y="133" width="0.2027%" height="15" fill="rgb(253,215,40)"/><text x="60.1518%" y="143.50"></text></g><g><title>check_item_well_formed (76,345,147 samples, 1.22%)</title><rect x="58.9426%" y="149" width="1.2228%" height="15" fill="rgb(211,81,21)"/><text x="59.1926%" y="159.50"></text></g><g><title>analysis (3,764,176,141 samples, 60.29%)</title><rect x="0.0346%" y="197" width="60.2911%" height="15" fill="rgb(208,190,38)"/><text x="0.2846%" y="207.50">analysis</text></g><g><title>type_check_crate (2,026,347,101 samples, 32.46%)</title><rect x="27.8696%" y="181" width="32.4562%" height="15" fill="rgb(235,213,38)"/><text x="28.1196%" y="191.50">type_check_crate</text></g><g><title>wf_checking (222,635,367 samples, 3.57%)</title><rect x="56.7598%" y="165" width="3.5660%" height="15" fill="rgb(237,122,38)"/><text x="57.0098%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (10,010,351 samples, 0.16%)</title><rect x="60.1654%" y="149" width="0.1603%" height="15" fill="rgb(244,218,35)"/><text x="60.4154%" y="159.50"></text></g><g><title>AST_validation (11,522,828 samples, 0.18%)</title><rect x="60.3437%" y="181" width="0.1846%" height="15" fill="rgb(240,68,47)"/><text x="60.5937%" y="191.50"></text></g><g><title>metadata_register_crate (18,222,023 samples, 0.29%)</title><rect x="90.5186%" y="149" width="0.2919%" height="15" fill="rgb(210,16,53)"/><text x="90.7686%" y="159.50"></text></g><g><title>metadata_register_crate (16,890,477 samples, 0.27%)</title><rect x="90.5399%" y="133" width="0.2705%" height="15" fill="rgb(235,124,12)"/><text x="90.7899%" y="143.50"></text></g><g><title>metadata_register_crate (12,951,494 samples, 0.21%)</title><rect x="90.6030%" y="117" width="0.2074%" height="15" fill="rgb(224,169,11)"/><text x="90.8530%" y="127.50"></text></g><g><title>metadata_register_crate (11,977,132 samples, 0.19%)</title><rect x="90.6186%" y="101" width="0.1918%" height="15" fill="rgb(250,166,2)"/><text x="90.8686%" y="111.50"></text></g><g><title>metadata_register_crate (10,167,234 samples, 0.16%)</title><rect x="90.6476%" y="85" width="0.1628%" height="15" fill="rgb(242,216,29)"/><text x="90.8976%" y="95.50"></text></g><g><title>macro_expand_crate (1,891,694,118 samples, 30.30%)</title><rect x="60.6280%" y="181" width="30.2994%" height="15" fill="rgb(230,116,27)"/><text x="60.8780%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (1,891,675,248 samples, 30.30%)</title><rect x="60.6283%" y="165" width="30.2991%" height="15" fill="rgb(228,99,48)"/><text x="60.8783%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (7,302,852 samples, 0.12%)</title><rect x="90.8105%" y="149" width="0.1170%" height="15" fill="rgb(253,11,6)"/><text x="91.0605%" y="159.50"></text></g><g><title>late_resolve_crate (65,021,367 samples, 1.04%)</title><rect x="91.0007%" y="165" width="1.0415%" height="15" fill="rgb(247,143,39)"/><text x="91.2507%" y="175.50"></text></g><g><title>configure_and_expand (1,989,777,203 samples, 31.87%)</title><rect x="60.3405%" y="197" width="31.8704%" height="15" fill="rgb(236,97,10)"/><text x="60.5905%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (80,085,115 samples, 1.28%)</title><rect x="90.9282%" y="181" width="1.2827%" height="15" fill="rgb(233,208,19)"/><text x="91.1782%" y="191.50"></text></g><g><title>drop_ast (23,619,033 samples, 0.38%)</title><rect x="92.2110%" y="197" width="0.3783%" height="15" fill="rgb(216,164,2)"/><text x="92.4610%" y="207.50"></text></g><g><title>early_lint_checks (24,717,576 samples, 0.40%)</title><rect x="92.5899%" y="197" width="0.3959%" height="15" fill="rgb(220,129,5)"/><text x="92.8399%" y="207.50"></text></g><g><title>free_global_ctxt (35,022,511 samples, 0.56%)</title><rect x="92.9858%" y="197" width="0.5610%" height="15" fill="rgb(242,17,10)"/><text x="93.2358%" y="207.50"></text></g><g><title>is_copy_raw (13,716,402 samples, 0.22%)</title><rect x="97.0319%" y="133" width="0.2197%" height="15" fill="rgb(242,107,0)"/><text x="97.2819%" y="143.50"></text></g><g><title>evaluate_obligation (10,960,044 samples, 0.18%)</title><rect x="97.0760%" y="117" width="0.1755%" height="15" fill="rgb(251,28,31)"/><text x="97.3260%" y="127.50"></text></g><g><title>needs_drop_raw (16,845,882 samples, 0.27%)</title><rect x="96.9847%" y="149" width="0.2698%" height="15" fill="rgb(233,223,10)"/><text x="97.2347%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (96,509,078 samples, 1.55%)</title><rect x="95.7453%" y="165" width="1.5458%" height="15" fill="rgb(215,21,27)"/><text x="95.9953%" y="175.50"></text></g><g><title>optimized_mir (178,080,569 samples, 2.85%)</title><rect x="94.4441%" y="181" width="2.8523%" height="15" fill="rgb(232,23,21)"/><text x="94.6941%" y="191.50">op..</text></g><g><title>generate_crate_metadata (237,051,908 samples, 3.80%)</title><rect x="93.5467%" y="197" width="3.7969%" height="15" fill="rgb(244,5,23)"/><text x="93.7967%" y="207.50">gene..</text></g><g><title>hir_lowering (153,237,741 samples, 2.45%)</title><rect x="97.3436%" y="197" width="2.4544%" height="15" fill="rgb(226,81,46)"/><text x="97.5936%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (8,021,399 samples, 0.13%)</title><rect x="99.8117%" y="197" width="0.1285%" height="15" fill="rgb(247,70,30)"/><text x="100.0617%" y="207.50"></text></g><g><title>all (6,243,333,169 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (6,243,333,169 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>