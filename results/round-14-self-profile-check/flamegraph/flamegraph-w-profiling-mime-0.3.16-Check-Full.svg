<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (251,635 samples, 0.14%)</title><rect x="10.4461%" y="133" width="0.1372%" height="15" fill="rgb(227,0,7)"/><text x="10.6961%" y="143.50"></text></g><g><title>param_env (272,985 samples, 0.15%)</title><rect x="11.8436%" y="101" width="0.1488%" height="15" fill="rgb(217,0,24)"/><text x="12.0936%" y="111.50"></text></g><g><title>item_attrs (579,267 samples, 0.32%)</title><rect x="12.3178%" y="69" width="0.3158%" height="15" fill="rgb(221,193,54)"/><text x="12.5678%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (570,787 samples, 0.31%)</title><rect x="12.3225%" y="53" width="0.3112%" height="15" fill="rgb(248,212,6)"/><text x="12.5725%" y="63.50"></text></g><g><title>codegen_fn_attrs (675,847 samples, 0.37%)</title><rect x="12.2759%" y="85" width="0.3685%" height="15" fill="rgb(208,68,35)"/><text x="12.5259%" y="95.50"></text></g><g><title>adt_drop_tys (205,292 samples, 0.11%)</title><rect x="14.6893%" y="53" width="0.1119%" height="15" fill="rgb(232,128,0)"/><text x="14.9393%" y="63.50"></text></g><g><title>needs_drop_raw (840,322 samples, 0.46%)</title><rect x="14.6473%" y="69" width="0.4581%" height="15" fill="rgb(207,160,47)"/><text x="14.8973%" y="79.50"></text></g><g><title>is_copy_raw (557,908 samples, 0.30%)</title><rect x="14.8013%" y="53" width="0.3042%" height="15" fill="rgb(228,23,34)"/><text x="15.0513%" y="63.50"></text></g><g><title>evaluate_obligation (475,897 samples, 0.26%)</title><rect x="14.8460%" y="37" width="0.2595%" height="15" fill="rgb(218,30,26)"/><text x="15.0960%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (234,661 samples, 0.13%)</title><rect x="15.2320%" y="53" width="0.1279%" height="15" fill="rgb(220,122,19)"/><text x="15.4820%" y="63.50"></text></g><g><title>specialization_graph_of (203,902 samples, 0.11%)</title><rect x="15.4167%" y="53" width="0.1112%" height="15" fill="rgb(250,228,42)"/><text x="15.6667%" y="63.50"></text></g><g><title>resolve_instance (821,500 samples, 0.45%)</title><rect x="15.1217%" y="69" width="0.4479%" height="15" fill="rgb(240,193,28)"/><text x="15.3717%" y="79.50"></text></g><g><title>thir_body (1,181,122 samples, 0.64%)</title><rect x="15.5880%" y="69" width="0.6439%" height="15" fill="rgb(216,20,37)"/><text x="15.8380%" y="79.50"></text></g><g><title>mir_const (9,000,390 samples, 4.91%)</title><rect x="11.3368%" y="117" width="4.9069%" height="15" fill="rgb(206,188,39)"/><text x="11.5868%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (7,797,884 samples, 4.25%)</title><rect x="11.9924%" y="101" width="4.2513%" height="15" fill="rgb(217,207,13)"/><text x="12.2424%" y="111.50">unsaf..</text></g><g><title>mir_built (6,598,523 samples, 3.60%)</title><rect x="12.6463%" y="85" width="3.5975%" height="15" fill="rgb(231,73,38)"/><text x="12.8963%" y="95.50">mir_..</text></g><g><title>thir_body (827,466 samples, 0.45%)</title><rect x="18.3028%" y="53" width="0.4511%" height="15" fill="rgb(225,20,46)"/><text x="18.5528%" y="63.50"></text></g><g><title>mir_const (2,775,430 samples, 1.51%)</title><rect x="17.2480%" y="101" width="1.5131%" height="15" fill="rgb(210,31,41)"/><text x="17.4980%" y="111.50"></text></g><g><title>unsafety_check_result (2,318,555 samples, 1.26%)</title><rect x="17.4971%" y="85" width="1.2641%" height="15" fill="rgb(221,200,47)"/><text x="17.7471%" y="95.50"></text></g><g><title>mir_built (2,103,599 samples, 1.15%)</title><rect x="17.6143%" y="69" width="1.1469%" height="15" fill="rgb(226,26,5)"/><text x="17.8643%" y="79.50"></text></g><g><title>mir_const_qualif (306,873 samples, 0.17%)</title><rect x="18.7611%" y="101" width="0.1673%" height="15" fill="rgb(249,33,26)"/><text x="19.0111%" y="111.50"></text></g><g><title>mir_const_qualif (4,924,654 samples, 2.68%)</title><rect x="16.2438%" y="117" width="2.6849%" height="15" fill="rgb(235,183,28)"/><text x="16.4938%" y="127.50">mi..</text></g><g><title>mir_promoted (15,307,880 samples, 8.35%)</title><rect x="10.5833%" y="133" width="8.3457%" height="15" fill="rgb(221,5,38)"/><text x="10.8333%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (245,622 samples, 0.13%)</title><rect x="18.9313%" y="133" width="0.1339%" height="15" fill="rgb(247,18,42)"/><text x="19.1813%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (324,602 samples, 0.18%)</title><rect x="19.0652%" y="133" width="0.1770%" height="15" fill="rgb(241,131,45)"/><text x="19.3152%" y="143.50"></text></g><g><title>normalize_projection_ty (188,291 samples, 0.10%)</title><rect x="19.1395%" y="117" width="0.1027%" height="15" fill="rgb(249,31,29)"/><text x="19.3895%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,774,722 samples, 0.97%)</title><rect x="19.3115%" y="133" width="0.9676%" height="15" fill="rgb(225,111,53)"/><text x="19.5615%" y="143.50"></text></g><g><title>MIR_borrow_checking (36,088,431 samples, 19.68%)</title><rect x="0.6126%" y="165" width="19.6751%" height="15" fill="rgb(238,160,17)"/><text x="0.8626%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (35,841,486 samples, 19.54%)</title><rect x="0.7472%" y="149" width="19.5404%" height="15" fill="rgb(214,148,48)"/><text x="0.9972%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,650,888 samples, 0.90%)</title><rect x="20.2877%" y="165" width="0.9000%" height="15" fill="rgb(232,36,49)"/><text x="20.5377%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,536,697 samples, 0.84%)</title><rect x="20.3499%" y="149" width="0.8378%" height="15" fill="rgb(209,103,24)"/><text x="20.5999%" y="159.50"></text></g><g><title>hir_module_items (225,744 samples, 0.12%)</title><rect x="21.1877%" y="165" width="0.1231%" height="15" fill="rgb(229,88,8)"/><text x="21.4377%" y="175.50"></text></g><g><title>should_inherit_track_caller (270,104 samples, 0.15%)</title><rect x="21.5916%" y="117" width="0.1473%" height="15" fill="rgb(213,181,19)"/><text x="21.8416%" y="127.50"></text></g><g><title>codegen_fn_attrs (451,207 samples, 0.25%)</title><rect x="21.5041%" y="133" width="0.2460%" height="15" fill="rgb(254,191,54)"/><text x="21.7541%" y="143.50"></text></g><g><title>check_mod_attrs (786,580 samples, 0.43%)</title><rect x="21.3213%" y="149" width="0.4288%" height="15" fill="rgb(241,83,37)"/><text x="21.5713%" y="159.50"></text></g><g><title>lint_levels (203,662 samples, 0.11%)</title><rect x="21.9896%" y="133" width="0.1110%" height="15" fill="rgb(233,36,39)"/><text x="22.2396%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (668,077 samples, 0.36%)</title><rect x="21.8781%" y="149" width="0.3642%" height="15" fill="rgb(226,3,54)"/><text x="22.1281%" y="159.50"></text></g><g><title>misc_checking_1 (1,776,450 samples, 0.97%)</title><rect x="21.3111%" y="165" width="0.9685%" height="15" fill="rgb(245,192,40)"/><text x="21.5611%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (584,726 samples, 0.32%)</title><rect x="22.2804%" y="149" width="0.3188%" height="15" fill="rgb(238,167,29)"/><text x="22.5304%" y="159.50"></text></g><g><title>check_mod_liveness (455,565 samples, 0.25%)</title><rect x="22.3509%" y="133" width="0.2484%" height="15" fill="rgb(232,182,51)"/><text x="22.6009%" y="143.50"></text></g><g><title>misc_checking_2 (1,360,925 samples, 0.74%)</title><rect x="22.2796%" y="165" width="0.7420%" height="15" fill="rgb(231,60,39)"/><text x="22.5296%" y="175.50"></text></g><g><title>match_checking (774,609 samples, 0.42%)</title><rect x="22.5992%" y="149" width="0.4223%" height="15" fill="rgb(208,69,12)"/><text x="22.8492%" y="159.50"></text></g><g><title>check_match (724,449 samples, 0.39%)</title><rect x="22.6266%" y="133" width="0.3950%" height="15" fill="rgb(235,93,37)"/><text x="22.8766%" y="143.50"></text></g><g><title>check_private_in_public (256,933 samples, 0.14%)</title><rect x="23.0270%" y="149" width="0.1401%" height="15" fill="rgb(213,116,39)"/><text x="23.2770%" y="159.50"></text></g><g><title>death_checking (715,328 samples, 0.39%)</title><rect x="23.1670%" y="149" width="0.3900%" height="15" fill="rgb(222,207,29)"/><text x="23.4170%" y="159.50"></text></g><g><title>item_attrs (199,383 samples, 0.11%)</title><rect x="23.4483%" y="133" width="0.1087%" height="15" fill="rgb(206,96,30)"/><text x="23.6983%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (197,013 samples, 0.11%)</title><rect x="23.4496%" y="117" width="0.1074%" height="15" fill="rgb(218,138,4)"/><text x="23.6996%" y="127.50"></text></g><g><title>eval_to_allocation_raw (404,854 samples, 0.22%)</title><rect x="24.1550%" y="117" width="0.2207%" height="15" fill="rgb(250,191,14)"/><text x="24.4050%" y="127.50"></text></g><g><title>eval_to_allocation_raw (402,354 samples, 0.22%)</title><rect x="24.1563%" y="101" width="0.2194%" height="15" fill="rgb(239,60,40)"/><text x="24.4063%" y="111.50"></text></g><g><title>mir_for_ctfe (500,328 samples, 0.27%)</title><rect x="25.3334%" y="69" width="0.2728%" height="15" fill="rgb(206,27,48)"/><text x="25.5834%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,267,667 samples, 1.24%)</title><rect x="24.3757%" y="117" width="1.2363%" height="15" fill="rgb(225,35,8)"/><text x="24.6257%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,203,667 samples, 1.20%)</title><rect x="24.4106%" y="101" width="1.2014%" height="15" fill="rgb(250,213,24)"/><text x="24.6606%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,113,804 samples, 1.15%)</title><rect x="24.4596%" y="85" width="1.1524%" height="15" fill="rgb(247,123,22)"/><text x="24.7096%" y="95.50"></text></g><g><title>crate_lints (5,065,796 samples, 2.76%)</title><rect x="23.5580%" y="133" width="2.7618%" height="15" fill="rgb(231,138,38)"/><text x="23.8080%" y="143.50">cr..</text></g><g><title>type_of (1,112,770 samples, 0.61%)</title><rect x="25.7131%" y="117" width="0.6067%" height="15" fill="rgb(231,145,46)"/><text x="25.9631%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (870,907 samples, 0.47%)</title><rect x="25.8450%" y="101" width="0.4748%" height="15" fill="rgb(251,118,11)"/><text x="26.0950%" y="111.50"></text></g><g><title>lint_checking (5,753,604 samples, 3.14%)</title><rect x="23.5570%" y="149" width="3.1368%" height="15" fill="rgb(217,147,25)"/><text x="23.8070%" y="159.50">lin..</text></g><g><title>module_lints (686,078 samples, 0.37%)</title><rect x="26.3198%" y="133" width="0.3740%" height="15" fill="rgb(247,81,37)"/><text x="26.5698%" y="143.50"></text></g><g><title>lint_mod (681,648 samples, 0.37%)</title><rect x="26.3222%" y="117" width="0.3716%" height="15" fill="rgb(209,12,38)"/><text x="26.5722%" y="127.50"></text></g><g><title>privacy_access_levels (331,864 samples, 0.18%)</title><rect x="26.6938%" y="149" width="0.1809%" height="15" fill="rgb(227,1,9)"/><text x="26.9438%" y="159.50"></text></g><g><title>privacy_checking_modules (1,014,041 samples, 0.55%)</title><rect x="26.8748%" y="149" width="0.5528%" height="15" fill="rgb(248,47,43)"/><text x="27.1248%" y="159.50"></text></g><g><title>check_mod_privacy (1,011,461 samples, 0.55%)</title><rect x="26.8762%" y="133" width="0.5514%" height="15" fill="rgb(221,10,30)"/><text x="27.1262%" y="143.50"></text></g><g><title>misc_checking_3 (8,096,020 samples, 4.41%)</title><rect x="23.0215%" y="165" width="4.4139%" height="15" fill="rgb(210,229,1)"/><text x="23.2715%" y="175.50">misc_..</text></g><g><title>adt_destructor (326,354 samples, 0.18%)</title><rect x="27.5198%" y="117" width="0.1779%" height="15" fill="rgb(222,148,37)"/><text x="27.7698%" y="127.50"></text></g><g><title>coherent_trait (323,053 samples, 0.18%)</title><rect x="27.5216%" y="101" width="0.1761%" height="15" fill="rgb(234,67,33)"/><text x="27.7716%" y="111.50"></text></g><g><title>specialization_graph_of (321,753 samples, 0.18%)</title><rect x="27.5223%" y="85" width="0.1754%" height="15" fill="rgb(247,98,35)"/><text x="27.7723%" y="95.50"></text></g><g><title>impl_parent (3,335,181 samples, 1.82%)</title><rect x="30.3436%" y="101" width="1.8183%" height="15" fill="rgb(247,138,52)"/><text x="30.5936%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,699,733 samples, 0.93%)</title><rect x="31.2352%" y="85" width="0.9267%" height="15" fill="rgb(213,79,30)"/><text x="31.4852%" y="95.50"></text></g><g><title>impl_trait_ref (5,971,090 samples, 3.26%)</title><rect x="32.1619%" y="101" width="3.2554%" height="15" fill="rgb(246,177,23)"/><text x="32.4119%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,755,808 samples, 2.59%)</title><rect x="32.8244%" y="85" width="2.5928%" height="15" fill="rgb(230,62,27)"/><text x="33.0744%" y="95.50">me..</text></g><g><title>trait_impls_of (977,062 samples, 0.53%)</title><rect x="35.4272%" y="101" width="0.5327%" height="15" fill="rgb(216,154,8)"/><text x="35.6772%" y="111.50"></text></g><g><title>implementations_of_trait (283,524 samples, 0.15%)</title><rect x="35.8053%" y="85" width="0.1546%" height="15" fill="rgb(244,35,45)"/><text x="36.0553%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (223,703 samples, 0.12%)</title><rect x="35.8379%" y="69" width="0.1220%" height="15" fill="rgb(251,115,12)"/><text x="36.0879%" y="79.50"></text></g><g><title>coherent_trait (15,528,403 samples, 8.47%)</title><rect x="27.4944%" y="133" width="8.4659%" height="15" fill="rgb(240,54,50)"/><text x="27.7444%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (14,952,477 samples, 8.15%)</title><rect x="27.8084%" y="117" width="8.1519%" height="15" fill="rgb(233,84,52)"/><text x="28.0584%" y="127.50">specializat..</text></g><g><title>coherence_checking (15,651,575 samples, 8.53%)</title><rect x="27.4822%" y="149" width="8.5331%" height="15" fill="rgb(207,117,47)"/><text x="27.7322%" y="159.50">coherence_ch..</text></g><g><title>associated_item (298,903 samples, 0.16%)</title><rect x="46.9243%" y="85" width="0.1630%" height="15" fill="rgb(249,43,39)"/><text x="47.1743%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (238,582 samples, 0.13%)</title><rect x="46.9572%" y="69" width="0.1301%" height="15" fill="rgb(209,38,44)"/><text x="47.2072%" y="79.50"></text></g><g><title>associated_items (443,295 samples, 0.24%)</title><rect x="46.8634%" y="101" width="0.2417%" height="15" fill="rgb(236,212,23)"/><text x="47.1134%" y="111.50"></text></g><g><title>dropck_outlives (276,473 samples, 0.15%)</title><rect x="47.1474%" y="101" width="0.1507%" height="15" fill="rgb(242,79,21)"/><text x="47.3974%" y="111.50"></text></g><g><title>predicates_of (262,354 samples, 0.14%)</title><rect x="48.0840%" y="85" width="0.1430%" height="15" fill="rgb(211,96,35)"/><text x="48.3340%" y="95.50"></text></g><g><title>trait_impls_of (214,434 samples, 0.12%)</title><rect x="48.3276%" y="85" width="0.1169%" height="15" fill="rgb(253,215,40)"/><text x="48.5776%" y="95.50"></text></g><g><title>evaluate_obligation (2,103,423 samples, 1.15%)</title><rect x="47.2981%" y="101" width="1.1468%" height="15" fill="rgb(211,81,21)"/><text x="47.5481%" y="111.50"></text></g><g><title>method_autoderef_steps (217,843 samples, 0.12%)</title><rect x="48.8647%" y="101" width="0.1188%" height="15" fill="rgb(208,190,38)"/><text x="49.1147%" y="111.50"></text></g><g><title>predicates_of (378,853 samples, 0.21%)</title><rect x="49.0956%" y="101" width="0.2065%" height="15" fill="rgb(235,213,38)"/><text x="49.3456%" y="111.50"></text></g><g><title>predicates_defined_on (251,602 samples, 0.14%)</title><rect x="49.1649%" y="85" width="0.1372%" height="15" fill="rgb(237,122,38)"/><text x="49.4149%" y="95.50"></text></g><g><title>evaluate_obligation (270,302 samples, 0.15%)</title><rect x="51.0632%" y="85" width="0.1474%" height="15" fill="rgb(244,218,35)"/><text x="51.3132%" y="95.50"></text></g><g><title>typeck (3,732,791 samples, 2.04%)</title><rect x="49.3665%" y="101" width="2.0351%" height="15" fill="rgb(240,68,47)"/><text x="49.6165%" y="111.50">t..</text></g><g><title>item_bodies_checking (28,253,464 samples, 15.40%)</title><rect x="36.0348%" y="149" width="15.4035%" height="15" fill="rgb(210,16,53)"/><text x="36.2848%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,249,014 samples, 15.40%)</title><rect x="36.0372%" y="133" width="15.4011%" height="15" fill="rgb(235,124,12)"/><text x="36.2872%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (28,158,302 samples, 15.35%)</title><rect x="36.0867%" y="117" width="15.3516%" height="15" fill="rgb(224,169,11)"/><text x="36.3367%" y="127.50">typeck</text></g><g><title>generics_of (790,119 samples, 0.43%)</title><rect x="61.7204%" y="85" width="0.4308%" height="15" fill="rgb(250,166,2)"/><text x="61.9704%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (666,965 samples, 0.36%)</title><rect x="61.7876%" y="69" width="0.3636%" height="15" fill="rgb(242,216,29)"/><text x="62.0376%" y="79.50"></text></g><g><title>evaluate_obligation (1,892,242 samples, 1.03%)</title><rect x="61.1845%" y="101" width="1.0316%" height="15" fill="rgb(230,116,27)"/><text x="61.4345%" y="111.50"></text></g><g><title>item_types_checking (19,885,461 samples, 10.84%)</title><rect x="51.4383%" y="149" width="10.8414%" height="15" fill="rgb(228,99,48)"/><text x="51.6883%" y="159.50">item_types_check..</text></g><g><title>check_mod_item_types (19,881,451 samples, 10.84%)</title><rect x="51.4405%" y="133" width="10.8392%" height="15" fill="rgb(253,11,6)"/><text x="51.6905%" y="143.50">check_mod_item_t..</text></g><g><title>typeck (18,547,195 samples, 10.11%)</title><rect x="52.1679%" y="117" width="10.1118%" height="15" fill="rgb(247,143,39)"/><text x="52.4179%" y="127.50">typeck</text></g><g><title>fn_sig (315,104 samples, 0.17%)</title><rect x="62.4973%" y="117" width="0.1718%" height="15" fill="rgb(236,97,10)"/><text x="62.7473%" y="127.50"></text></g><g><title>is_late_bound_map (215,222 samples, 0.12%)</title><rect x="62.7546%" y="101" width="0.1173%" height="15" fill="rgb(233,208,19)"/><text x="63.0046%" y="111.50"></text></g><g><title>resolve_lifetimes (194,801 samples, 0.11%)</title><rect x="62.7657%" y="85" width="0.1062%" height="15" fill="rgb(216,164,2)"/><text x="63.0157%" y="95.50"></text></g><g><title>named_region_map (280,342 samples, 0.15%)</title><rect x="62.8720%" y="101" width="0.1528%" height="15" fill="rgb(220,129,5)"/><text x="63.1220%" y="111.50"></text></g><g><title>resolve_lifetimes (260,051 samples, 0.14%)</title><rect x="62.8830%" y="85" width="0.1418%" height="15" fill="rgb(242,17,10)"/><text x="63.1330%" y="95.50"></text></g><g><title>generics_of (673,325 samples, 0.37%)</title><rect x="62.6691%" y="117" width="0.3671%" height="15" fill="rgb(242,107,0)"/><text x="62.9191%" y="127.50"></text></g><g><title>predicates_of (742,990 samples, 0.41%)</title><rect x="63.0866%" y="117" width="0.4051%" height="15" fill="rgb(251,28,31)"/><text x="63.3366%" y="127.50"></text></g><g><title>predicates_defined_on (659,609 samples, 0.36%)</title><rect x="63.1320%" y="101" width="0.3596%" height="15" fill="rgb(233,223,10)"/><text x="63.3820%" y="111.50"></text></g><g><title>inferred_outlives_of (354,173 samples, 0.19%)</title><rect x="63.2985%" y="85" width="0.1931%" height="15" fill="rgb(215,21,27)"/><text x="63.5485%" y="95.50"></text></g><g><title>inferred_outlives_crate (321,913 samples, 0.18%)</title><rect x="63.3161%" y="69" width="0.1755%" height="15" fill="rgb(232,23,21)"/><text x="63.5661%" y="79.50"></text></g><g><title>type_collecting (2,499,057 samples, 1.36%)</title><rect x="62.2809%" y="149" width="1.3625%" height="15" fill="rgb(244,5,23)"/><text x="62.5309%" y="159.50"></text></g><g><title>collect_mod_item_types (2,490,277 samples, 1.36%)</title><rect x="62.2857%" y="133" width="1.3577%" height="15" fill="rgb(226,81,46)"/><text x="62.5357%" y="143.50"></text></g><g><title>type_of (278,323 samples, 0.15%)</title><rect x="63.4916%" y="117" width="0.1517%" height="15" fill="rgb(247,70,30)"/><text x="63.7416%" y="127.50"></text></g><g><title>evaluate_obligation (364,886 samples, 0.20%)</title><rect x="64.6131%" y="117" width="0.1989%" height="15" fill="rgb(212,68,19)"/><text x="64.8631%" y="127.50"></text></g><g><title>param_env (195,803 samples, 0.11%)</title><rect x="64.8991%" y="117" width="0.1067%" height="15" fill="rgb(240,187,13)"/><text x="65.1491%" y="127.50"></text></g><g><title>region_scope_tree (272,033 samples, 0.15%)</title><rect x="65.0220%" y="117" width="0.1483%" height="15" fill="rgb(223,113,26)"/><text x="65.2720%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,564,881 samples, 1.40%)</title><rect x="63.7791%" y="133" width="1.3983%" height="15" fill="rgb(206,192,2)"/><text x="64.0291%" y="143.50"></text></g><g><title>evaluate_obligation (466,226 samples, 0.25%)</title><rect x="66.2216%" y="117" width="0.2542%" height="15" fill="rgb(241,108,4)"/><text x="66.4716%" y="127.50"></text></g><g><title>param_env (395,142 samples, 0.22%)</title><rect x="66.5283%" y="117" width="0.2154%" height="15" fill="rgb(247,173,49)"/><text x="66.7783%" y="127.50"></text></g><g><title>predicates_of (294,352 samples, 0.16%)</title><rect x="66.7437%" y="117" width="0.1605%" height="15" fill="rgb(224,114,35)"/><text x="66.9937%" y="127.50"></text></g><g><title>predicates_defined_on (268,602 samples, 0.15%)</title><rect x="66.7578%" y="101" width="0.1464%" height="15" fill="rgb(245,159,27)"/><text x="67.0078%" y="111.50"></text></g><g><title>region_scope_tree (412,244 samples, 0.22%)</title><rect x="66.9042%" y="117" width="0.2248%" height="15" fill="rgb(245,172,44)"/><text x="67.1542%" y="127.50"></text></g><g><title>analysis (122,496,690 samples, 66.78%)</title><rect x="0.3957%" y="181" width="66.7840%" height="15" fill="rgb(236,23,11)"/><text x="0.6457%" y="191.50">analysis</text></g><g><title>type_check_crate (72,899,939 samples, 39.74%)</title><rect x="27.4354%" y="165" width="39.7444%" height="15" fill="rgb(205,117,38)"/><text x="27.6854%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,475,641 samples, 3.53%)</title><rect x="63.6493%" y="149" width="3.5305%" height="15" fill="rgb(237,72,25)"/><text x="63.8993%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (3,672,639 samples, 2.00%)</title><rect x="65.1775%" y="133" width="2.0023%" height="15" fill="rgb(244,70,9)"/><text x="65.4275%" y="143.50">c..</text></g><g><title>codegen_crate (512,406 samples, 0.28%)</title><rect x="67.1865%" y="181" width="0.2794%" height="15" fill="rgb(217,125,39)"/><text x="67.4365%" y="191.50"></text></g><g><title>AST_validation (408,685 samples, 0.22%)</title><rect x="67.5766%" y="165" width="0.2228%" height="15" fill="rgb(235,36,10)"/><text x="67.8266%" y="175.50"></text></g><g><title>metadata_load_macro (334,603 samples, 0.18%)</title><rect x="84.8631%" y="133" width="0.1824%" height="15" fill="rgb(251,123,47)"/><text x="85.1131%" y="143.50"></text></g><g><title>metadata_register_crate (2,730,881 samples, 1.49%)</title><rect x="85.0456%" y="133" width="1.4889%" height="15" fill="rgb(221,13,13)"/><text x="85.2956%" y="143.50"></text></g><g><title>metadata_register_crate (990,431 samples, 0.54%)</title><rect x="85.9944%" y="117" width="0.5400%" height="15" fill="rgb(238,131,9)"/><text x="86.2444%" y="127.50"></text></g><g><title>macro_expand_crate (34,372,721 samples, 18.74%)</title><rect x="67.9078%" y="165" width="18.7397%" height="15" fill="rgb(211,50,8)"/><text x="68.1578%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (34,344,361 samples, 18.72%)</title><rect x="67.9233%" y="149" width="18.7242%" height="15" fill="rgb(245,182,24)"/><text x="68.1733%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (207,372 samples, 0.11%)</title><rect x="86.5344%" y="133" width="0.1131%" height="15" fill="rgb(242,14,37)"/><text x="86.7844%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (502,445 samples, 0.27%)</title><rect x="86.6504%" y="165" width="0.2739%" height="15" fill="rgb(246,228,12)"/><text x="86.9004%" y="175.50"></text></g><g><title>finalize_macro_resolutions (320,404 samples, 0.17%)</title><rect x="86.9630%" y="149" width="0.1747%" height="15" fill="rgb(213,55,15)"/><text x="87.2130%" y="159.50"></text></g><g><title>late_resolve_crate (3,167,085 samples, 1.73%)</title><rect x="87.1376%" y="149" width="1.7267%" height="15" fill="rgb(209,9,3)"/><text x="87.3876%" y="159.50"></text></g><g><title>configure_and_expand (39,489,338 samples, 21.53%)</title><rect x="67.4658%" y="181" width="21.5292%" height="15" fill="rgb(230,59,30)"/><text x="67.7158%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,798,082 samples, 2.07%)</title><rect x="86.9244%" y="165" width="2.0707%" height="15" fill="rgb(209,121,21)"/><text x="87.1744%" y="175.50">r..</text></g><g><title>drop_ast (365,074 samples, 0.20%)</title><rect x="88.9951%" y="181" width="0.1990%" height="15" fill="rgb(220,109,13)"/><text x="89.2451%" y="191.50"></text></g><g><title>early_lint_checks (565,097 samples, 0.31%)</title><rect x="89.2018%" y="181" width="0.3081%" height="15" fill="rgb(232,18,1)"/><text x="89.4518%" y="191.50"></text></g><g><title>free_global_ctxt (4,327,138 samples, 2.36%)</title><rect x="89.5099%" y="181" width="2.3591%" height="15" fill="rgb(215,41,42)"/><text x="89.7599%" y="191.50">f..</text></g><g><title>generate_crate_metadata (2,271,386 samples, 1.24%)</title><rect x="91.8690%" y="181" width="1.2383%" height="15" fill="rgb(224,123,36)"/><text x="92.1190%" y="191.50"></text></g><g><title>hir_lowering (3,843,432 samples, 2.10%)</title><rect x="93.1074%" y="181" width="2.0954%" height="15" fill="rgb(240,125,3)"/><text x="93.3574%" y="191.50">h..</text></g><g><title>parse_crate (7,085,438 samples, 3.86%)</title><rect x="95.2452%" y="181" width="3.8629%" height="15" fill="rgb(205,98,50)"/><text x="95.4952%" y="191.50">pars..</text></g><g><title>prepare_outputs (214,183 samples, 0.12%)</title><rect x="99.1135%" y="181" width="0.1168%" height="15" fill="rgb(205,185,37)"/><text x="99.3635%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (910,520 samples, 0.50%)</title><rect x="99.2302%" y="181" width="0.4964%" height="15" fill="rgb(238,207,15)"/><text x="99.4802%" y="191.50"></text></g><g><title>all (183,422,126 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (183,422,126 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (404,394 samples, 0.22%)</title><rect x="99.7795%" y="181" width="0.2205%" height="15" fill="rgb(207,46,11)"/><text x="100.0295%" y="191.50"></text></g></svg></svg>