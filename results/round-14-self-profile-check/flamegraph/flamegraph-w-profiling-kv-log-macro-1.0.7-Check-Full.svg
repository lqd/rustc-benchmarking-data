<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (47,500 samples, 0.13%)</title><rect x="5.6185%" y="181" width="0.1272%" height="15" fill="rgb(227,0,7)"/><text x="5.8685%" y="191.50"></text></g><g><title>codegen_fn_attrs (41,271 samples, 0.11%)</title><rect x="5.8148%" y="165" width="0.1105%" height="15" fill="rgb(217,0,24)"/><text x="6.0648%" y="175.50"></text></g><g><title>is_copy_raw (94,452 samples, 0.25%)</title><rect x="6.5383%" y="149" width="0.2530%" height="15" fill="rgb(221,193,54)"/><text x="6.7883%" y="159.50"></text></g><g><title>evaluate_obligation (88,332 samples, 0.24%)</title><rect x="6.5547%" y="133" width="0.2366%" height="15" fill="rgb(248,212,6)"/><text x="6.8047%" y="143.50"></text></g><g><title>is_copy_raw (95,171 samples, 0.25%)</title><rect x="6.9731%" y="101" width="0.2549%" height="15" fill="rgb(208,68,35)"/><text x="7.2231%" y="111.50"></text></g><g><title>evaluate_obligation (74,940 samples, 0.20%)</title><rect x="7.0273%" y="85" width="0.2007%" height="15" fill="rgb(232,128,0)"/><text x="7.2773%" y="95.50"></text></g><g><title>adt_drop_tys (178,182 samples, 0.48%)</title><rect x="6.8905%" y="117" width="0.4772%" height="15" fill="rgb(207,160,47)"/><text x="7.1405%" y="127.50"></text></g><g><title>param_env (52,181 samples, 0.14%)</title><rect x="7.2280%" y="101" width="0.1397%" height="15" fill="rgb(228,23,34)"/><text x="7.4780%" y="111.50"></text></g><g><title>is_copy_raw (62,720 samples, 0.17%)</title><rect x="7.3692%" y="117" width="0.1680%" height="15" fill="rgb(218,30,26)"/><text x="7.6192%" y="127.50"></text></g><g><title>evaluate_obligation (51,020 samples, 0.14%)</title><rect x="7.4006%" y="101" width="0.1366%" height="15" fill="rgb(220,122,19)"/><text x="7.6506%" y="111.50"></text></g><g><title>adt_drop_tys (275,453 samples, 0.74%)</title><rect x="6.8513%" y="133" width="0.7377%" height="15" fill="rgb(250,228,42)"/><text x="7.1013%" y="143.50"></text></g><g><title>needs_drop_raw (577,945 samples, 1.55%)</title><rect x="6.7913%" y="149" width="1.5478%" height="15" fill="rgb(240,193,28)"/><text x="7.0413%" y="159.50"></text></g><g><title>is_copy_raw (280,072 samples, 0.75%)</title><rect x="7.5890%" y="133" width="0.7501%" height="15" fill="rgb(216,20,37)"/><text x="7.8390%" y="143.50"></text></g><g><title>evaluate_obligation (234,461 samples, 0.63%)</title><rect x="7.7112%" y="117" width="0.6279%" height="15" fill="rgb(206,188,39)"/><text x="7.9612%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (37,720 samples, 0.10%)</title><rect x="8.4231%" y="133" width="0.1010%" height="15" fill="rgb(217,207,13)"/><text x="8.6731%" y="143.50"></text></g><g><title>resolve_instance (107,611 samples, 0.29%)</title><rect x="8.3391%" y="149" width="0.2882%" height="15" fill="rgb(231,73,38)"/><text x="8.5891%" y="159.50"></text></g><g><title>thir_body (85,592 samples, 0.23%)</title><rect x="8.6316%" y="149" width="0.2292%" height="15" fill="rgb(225,20,46)"/><text x="8.8816%" y="159.50"></text></g><g><title>mir_const (1,280,965 samples, 3.43%)</title><rect x="5.4327%" y="197" width="3.4306%" height="15" fill="rgb(210,31,41)"/><text x="5.6827%" y="207.50">mir..</text></g><g><title>unsafety_check_result (1,164,063 samples, 3.12%)</title><rect x="5.7457%" y="181" width="3.1175%" height="15" fill="rgb(221,200,47)"/><text x="5.9957%" y="191.50">uns..</text></g><g><title>mir_built (1,097,002 samples, 2.94%)</title><rect x="5.9253%" y="165" width="2.9379%" height="15" fill="rgb(226,26,5)"/><text x="6.1753%" y="175.50">mi..</text></g><g><title>has_structural_eq_impls (335,504 samples, 0.90%)</title><rect x="9.2894%" y="181" width="0.8985%" height="15" fill="rgb(249,33,26)"/><text x="9.5394%" y="191.50"></text></g><g><title>evaluate_obligation (316,303 samples, 0.85%)</title><rect x="9.3408%" y="165" width="0.8471%" height="15" fill="rgb(235,183,28)"/><text x="9.5908%" y="175.50"></text></g><g><title>trait_impls_of (261,522 samples, 0.70%)</title><rect x="9.4875%" y="149" width="0.7004%" height="15" fill="rgb(221,5,38)"/><text x="9.7375%" y="159.50"></text></g><g><title>implementations_of_trait (70,410 samples, 0.19%)</title><rect x="9.9993%" y="133" width="0.1886%" height="15" fill="rgb(247,18,42)"/><text x="10.2493%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (50,500 samples, 0.14%)</title><rect x="10.0526%" y="117" width="0.1352%" height="15" fill="rgb(241,131,45)"/><text x="10.3026%" y="127.50"></text></g><g><title>is_freeze_raw (52,670 samples, 0.14%)</title><rect x="10.1879%" y="181" width="0.1411%" height="15" fill="rgb(249,31,29)"/><text x="10.4379%" y="191.50"></text></g><g><title>evaluate_obligation (49,070 samples, 0.13%)</title><rect x="10.1975%" y="165" width="0.1314%" height="15" fill="rgb(225,111,53)"/><text x="10.4475%" y="175.50"></text></g><g><title>mir_const (163,352 samples, 0.44%)</title><rect x="10.3289%" y="181" width="0.4375%" height="15" fill="rgb(238,160,17)"/><text x="10.5789%" y="191.50"></text></g><g><title>unsafety_check_result (105,331 samples, 0.28%)</title><rect x="10.4843%" y="165" width="0.2821%" height="15" fill="rgb(214,148,48)"/><text x="10.7343%" y="175.50"></text></g><g><title>mir_built (61,691 samples, 0.17%)</title><rect x="10.6012%" y="149" width="0.1652%" height="15" fill="rgb(232,36,49)"/><text x="10.8512%" y="159.50"></text></g><g><title>needs_drop_raw (276,773 samples, 0.74%)</title><rect x="10.7718%" y="181" width="0.7412%" height="15" fill="rgb(209,103,24)"/><text x="11.0218%" y="191.50"></text></g><g><title>is_copy_raw (271,913 samples, 0.73%)</title><rect x="10.7848%" y="165" width="0.7282%" height="15" fill="rgb(229,88,8)"/><text x="11.0348%" y="175.50"></text></g><g><title>evaluate_obligation (266,183 samples, 0.71%)</title><rect x="10.8002%" y="149" width="0.7129%" height="15" fill="rgb(213,181,19)"/><text x="11.0502%" y="159.50"></text></g><g><title>trait_impls_of (235,163 samples, 0.63%)</title><rect x="10.8832%" y="133" width="0.6298%" height="15" fill="rgb(254,191,54)"/><text x="11.1332%" y="143.50"></text></g><g><title>implementations_of_trait (54,141 samples, 0.14%)</title><rect x="11.3681%" y="117" width="0.1450%" height="15" fill="rgb(241,83,37)"/><text x="11.6181%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (46,041 samples, 0.12%)</title><rect x="11.3897%" y="101" width="0.1233%" height="15" fill="rgb(233,36,39)"/><text x="11.6397%" y="111.50"></text></g><g><title>mir_promoted (2,348,297 samples, 6.29%)</title><rect x="5.2334%" y="213" width="6.2891%" height="15" fill="rgb(226,3,54)"/><text x="5.4834%" y="223.50">mir_prom..</text></g><g><title>mir_const_qualif (992,921 samples, 2.66%)</title><rect x="8.8633%" y="197" width="2.6592%" height="15" fill="rgb(245,192,40)"/><text x="9.1133%" y="207.50">mi..</text></g><g><title>type_op_ascribe_user_type (64,590 samples, 0.17%)</title><rect x="11.5224%" y="213" width="0.1730%" height="15" fill="rgb(238,167,29)"/><text x="11.7724%" y="223.50"></text></g><g><title>type_op_prove_predicate (240,212 samples, 0.64%)</title><rect x="11.6954%" y="213" width="0.6433%" height="15" fill="rgb(232,182,51)"/><text x="11.9454%" y="223.50"></text></g><g><title>MIR_borrow_checking (3,716,151 samples, 9.95%)</title><rect x="2.3891%" y="245" width="9.9524%" height="15" fill="rgb(231,60,39)"/><text x="2.6391%" y="255.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (3,706,961 samples, 9.93%)</title><rect x="2.4137%" y="229" width="9.9278%" height="15" fill="rgb(208,69,12)"/><text x="2.6637%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (119,401 samples, 0.32%)</title><rect x="12.3415%" y="245" width="0.3198%" height="15" fill="rgb(235,93,37)"/><text x="12.5915%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (103,831 samples, 0.28%)</title><rect x="12.3832%" y="229" width="0.2781%" height="15" fill="rgb(213,116,39)"/><text x="12.6332%" y="239.50"></text></g><g><title>hir_module_items (121,662 samples, 0.33%)</title><rect x="12.6613%" y="245" width="0.3258%" height="15" fill="rgb(222,207,29)"/><text x="12.9113%" y="255.50"></text></g><g><title>get_lang_items (76,590 samples, 0.21%)</title><rect x="13.4958%" y="197" width="0.2051%" height="15" fill="rgb(206,96,30)"/><text x="13.7458%" y="207.50"></text></g><g><title>codegen_fn_attrs (182,512 samples, 0.49%)</title><rect x="13.3351%" y="213" width="0.4888%" height="15" fill="rgb(218,138,4)"/><text x="13.5851%" y="223.50"></text></g><g><title>check_mod_attrs (283,493 samples, 0.76%)</title><rect x="13.0652%" y="229" width="0.7592%" height="15" fill="rgb(250,191,14)"/><text x="13.3152%" y="239.50"></text></g><g><title>check_mod_const_bodies (39,160 samples, 0.10%)</title><rect x="13.8244%" y="229" width="0.1049%" height="15" fill="rgb(239,60,40)"/><text x="14.0744%" y="239.50"></text></g><g><title>lookup_deprecation_entry (49,721 samples, 0.13%)</title><rect x="14.1504%" y="213" width="0.1332%" height="15" fill="rgb(206,27,48)"/><text x="14.4004%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (152,992 samples, 0.41%)</title><rect x="13.9920%" y="229" width="0.4097%" height="15" fill="rgb(225,35,8)"/><text x="14.2420%" y="239.50"></text></g><g><title>looking_for_derive_registrar (51,400 samples, 0.14%)</title><rect x="14.4069%" y="229" width="0.1377%" height="15" fill="rgb(250,213,24)"/><text x="14.6569%" y="239.50"></text></g><g><title>misc_checking_1 (585,776 samples, 1.57%)</title><rect x="12.9885%" y="245" width="1.5688%" height="15" fill="rgb(247,123,22)"/><text x="13.2385%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (90,961 samples, 0.24%)</title><rect x="14.5621%" y="229" width="0.2436%" height="15" fill="rgb(231,138,38)"/><text x="14.8121%" y="239.50"></text></g><g><title>check_mod_liveness (73,621 samples, 0.20%)</title><rect x="14.6086%" y="213" width="0.1972%" height="15" fill="rgb(231,145,46)"/><text x="14.8586%" y="223.50"></text></g><g><title>misc_checking_2 (215,913 samples, 0.58%)</title><rect x="14.5573%" y="245" width="0.5782%" height="15" fill="rgb(251,118,11)"/><text x="14.8073%" y="255.50"></text></g><g><title>match_checking (123,132 samples, 0.33%)</title><rect x="14.8058%" y="229" width="0.3298%" height="15" fill="rgb(217,147,25)"/><text x="15.0558%" y="239.50"></text></g><g><title>check_match (118,652 samples, 0.32%)</title><rect x="14.8178%" y="213" width="0.3178%" height="15" fill="rgb(247,81,37)"/><text x="15.0678%" y="223.50"></text></g><g><title>death_checking (110,291 samples, 0.30%)</title><rect x="15.2342%" y="229" width="0.2954%" height="15" fill="rgb(209,12,38)"/><text x="15.4842%" y="239.50"></text></g><g><title>lint_levels (40,551 samples, 0.11%)</title><rect x="15.4209%" y="213" width="0.1086%" height="15" fill="rgb(227,1,9)"/><text x="15.6709%" y="223.50"></text></g><g><title>eval_to_const_value_raw (60,140 samples, 0.16%)</title><rect x="16.0753%" y="69" width="0.1611%" height="15" fill="rgb(248,47,43)"/><text x="16.3253%" y="79.50"></text></g><g><title>eval_to_const_value_raw (58,800 samples, 0.16%)</title><rect x="16.0789%" y="53" width="0.1575%" height="15" fill="rgb(221,10,30)"/><text x="16.3289%" y="63.50"></text></g><g><title>eval_to_allocation_raw (54,820 samples, 0.15%)</title><rect x="16.0895%" y="37" width="0.1468%" height="15" fill="rgb(210,229,1)"/><text x="16.3395%" y="47.50"></text></g><g><title>eval_to_const_value_raw (94,401 samples, 0.25%)</title><rect x="15.9907%" y="133" width="0.2528%" height="15" fill="rgb(222,148,37)"/><text x="16.2407%" y="143.50"></text></g><g><title>eval_to_const_value_raw (93,671 samples, 0.25%)</title><rect x="15.9927%" y="117" width="0.2509%" height="15" fill="rgb(234,67,33)"/><text x="16.2427%" y="127.50"></text></g><g><title>eval_to_allocation_raw (92,841 samples, 0.25%)</title><rect x="15.9949%" y="101" width="0.2486%" height="15" fill="rgb(247,98,35)"/><text x="16.2449%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (67,041 samples, 0.18%)</title><rect x="16.0640%" y="85" width="0.1795%" height="15" fill="rgb(247,138,52)"/><text x="16.3140%" y="95.50"></text></g><g><title>eval_to_const_value_raw (191,462 samples, 0.51%)</title><rect x="15.7320%" y="197" width="0.5128%" height="15" fill="rgb(213,79,30)"/><text x="15.9820%" y="207.50"></text></g><g><title>eval_to_const_value_raw (189,942 samples, 0.51%)</title><rect x="15.7361%" y="181" width="0.5087%" height="15" fill="rgb(246,177,23)"/><text x="15.9861%" y="191.50"></text></g><g><title>eval_to_allocation_raw (188,392 samples, 0.50%)</title><rect x="15.7402%" y="165" width="0.5045%" height="15" fill="rgb(230,62,27)"/><text x="15.9902%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (100,431 samples, 0.27%)</title><rect x="15.9758%" y="149" width="0.2690%" height="15" fill="rgb(216,154,8)"/><text x="16.2258%" y="159.50"></text></g><g><title>crate_lints (377,465 samples, 1.01%)</title><rect x="15.5332%" y="213" width="1.0109%" height="15" fill="rgb(244,35,45)"/><text x="15.7832%" y="223.50"></text></g><g><title>param_env (111,770 samples, 0.30%)</title><rect x="16.2447%" y="197" width="0.2993%" height="15" fill="rgb(251,115,12)"/><text x="16.4947%" y="207.50"></text></g><g><title>predicates_of (52,760 samples, 0.14%)</title><rect x="16.4028%" y="181" width="0.1413%" height="15" fill="rgb(240,54,50)"/><text x="16.6528%" y="191.50"></text></g><g><title>predicates_defined_on (43,240 samples, 0.12%)</title><rect x="16.4283%" y="165" width="0.1158%" height="15" fill="rgb(233,84,52)"/><text x="16.6783%" y="175.50"></text></g><g><title>lint_checking (413,105 samples, 1.11%)</title><rect x="15.5295%" y="229" width="1.1064%" height="15" fill="rgb(207,117,47)"/><text x="15.7795%" y="239.50"></text></g><g><title>privacy_checking_modules (89,011 samples, 0.24%)</title><rect x="16.7284%" y="229" width="0.2384%" height="15" fill="rgb(249,43,39)"/><text x="16.9784%" y="239.50"></text></g><g><title>check_mod_privacy (87,531 samples, 0.23%)</title><rect x="16.7324%" y="213" width="0.2344%" height="15" fill="rgb(209,38,44)"/><text x="16.9824%" y="223.50"></text></g><g><title>misc_checking_3 (702,558 samples, 1.88%)</title><rect x="15.1355%" y="245" width="1.8816%" height="15" fill="rgb(236,212,23)"/><text x="15.3855%" y="255.50">m..</text></g><g><title>adt_def (101,581 samples, 0.27%)</title><rect x="24.4500%" y="165" width="0.2720%" height="15" fill="rgb(242,79,21)"/><text x="24.7000%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (99,381 samples, 0.27%)</title><rect x="24.4559%" y="149" width="0.2662%" height="15" fill="rgb(211,96,35)"/><text x="24.7059%" y="159.50"></text></g><g><title>item_attrs (75,021 samples, 0.20%)</title><rect x="24.5211%" y="133" width="0.2009%" height="15" fill="rgb(253,215,40)"/><text x="24.7711%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,971 samples, 0.20%)</title><rect x="24.5266%" y="117" width="0.1954%" height="15" fill="rgb(211,81,21)"/><text x="24.7766%" y="127.50"></text></g><g><title>adt_sized_constraint (156,892 samples, 0.42%)</title><rect x="24.4192%" y="181" width="0.4202%" height="15" fill="rgb(208,190,38)"/><text x="24.6692%" y="191.50"></text></g><g><title>associated_item (53,140 samples, 0.14%)</title><rect x="24.9109%" y="165" width="0.1423%" height="15" fill="rgb(235,213,38)"/><text x="25.1609%" y="175.50"></text></g><g><title>associated_items (87,120 samples, 0.23%)</title><rect x="24.8394%" y="181" width="0.2333%" height="15" fill="rgb(237,122,38)"/><text x="25.0894%" y="191.50"></text></g><g><title>adt_dtorck_constraint (79,861 samples, 0.21%)</title><rect x="25.2893%" y="149" width="0.2139%" height="15" fill="rgb(244,218,35)"/><text x="25.5393%" y="159.50"></text></g><g><title>dropck_outlives (143,592 samples, 0.38%)</title><rect x="25.1322%" y="181" width="0.3846%" height="15" fill="rgb(240,68,47)"/><text x="25.3822%" y="191.50"></text></g><g><title>adt_dtorck_constraint (112,951 samples, 0.30%)</title><rect x="25.2143%" y="165" width="0.3025%" height="15" fill="rgb(210,16,53)"/><text x="25.4643%" y="175.50"></text></g><g><title>evaluate_obligation (350,843 samples, 0.94%)</title><rect x="25.5210%" y="181" width="0.9396%" height="15" fill="rgb(235,124,12)"/><text x="25.7710%" y="191.50"></text></g><g><title>trait_impls_of (153,060 samples, 0.41%)</title><rect x="26.0507%" y="165" width="0.4099%" height="15" fill="rgb(224,169,11)"/><text x="26.3007%" y="175.50"></text></g><g><title>implementations_of_trait (65,780 samples, 0.18%)</title><rect x="26.2844%" y="149" width="0.1762%" height="15" fill="rgb(250,166,2)"/><text x="26.5344%" y="159.50"></text></g><g><title>fn_sig (87,611 samples, 0.23%)</title><rect x="26.4751%" y="181" width="0.2346%" height="15" fill="rgb(242,216,29)"/><text x="26.7251%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (78,341 samples, 0.21%)</title><rect x="26.4999%" y="165" width="0.2098%" height="15" fill="rgb(230,116,27)"/><text x="26.7499%" y="175.50"></text></g><g><title>generics_of (43,600 samples, 0.12%)</title><rect x="26.7097%" y="181" width="0.1168%" height="15" fill="rgb(228,99,48)"/><text x="26.9597%" y="191.50"></text></g><g><title>impl_trait_ref (39,581 samples, 0.11%)</title><rect x="26.8475%" y="181" width="0.1060%" height="15" fill="rgb(253,11,6)"/><text x="27.0975%" y="191.50"></text></g><g><title>method_autoderef_steps (189,602 samples, 0.51%)</title><rect x="27.0841%" y="181" width="0.5078%" height="15" fill="rgb(247,143,39)"/><text x="27.3341%" y="191.50"></text></g><g><title>evaluate_obligation (121,821 samples, 0.33%)</title><rect x="27.2656%" y="165" width="0.3263%" height="15" fill="rgb(236,97,10)"/><text x="27.5156%" y="175.50"></text></g><g><title>trait_impls_of (44,480 samples, 0.12%)</title><rect x="27.4727%" y="149" width="0.1191%" height="15" fill="rgb(233,208,19)"/><text x="27.7227%" y="159.50"></text></g><g><title>evaluate_obligation (132,921 samples, 0.36%)</title><rect x="28.2624%" y="165" width="0.3560%" height="15" fill="rgb(216,164,2)"/><text x="28.5124%" y="175.50"></text></g><g><title>fn_sig (49,752 samples, 0.13%)</title><rect x="28.6184%" y="165" width="0.1332%" height="15" fill="rgb(220,129,5)"/><text x="28.8684%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (46,352 samples, 0.12%)</title><rect x="28.6275%" y="149" width="0.1241%" height="15" fill="rgb(242,17,10)"/><text x="28.8775%" y="159.50"></text></g><g><title>layout_of (43,150 samples, 0.12%)</title><rect x="28.8588%" y="149" width="0.1156%" height="15" fill="rgb(242,107,0)"/><text x="29.1088%" y="159.50"></text></g><g><title>layout_of (77,040 samples, 0.21%)</title><rect x="28.7738%" y="165" width="0.2063%" height="15" fill="rgb(251,28,31)"/><text x="29.0238%" y="175.50"></text></g><g><title>param_env (107,511 samples, 0.29%)</title><rect x="28.9801%" y="165" width="0.2879%" height="15" fill="rgb(233,223,10)"/><text x="29.2301%" y="175.50"></text></g><g><title>predicates_of (63,731 samples, 0.17%)</title><rect x="29.2680%" y="165" width="0.1707%" height="15" fill="rgb(215,21,27)"/><text x="29.5180%" y="175.50"></text></g><g><title>object_safety_violations (692,087 samples, 1.85%)</title><rect x="27.5919%" y="181" width="1.8535%" height="15" fill="rgb(232,23,21)"/><text x="27.8419%" y="191.50">o..</text></g><g><title>explicit_predicates_of (51,200 samples, 0.14%)</title><rect x="29.7996%" y="149" width="0.1371%" height="15" fill="rgb(244,5,23)"/><text x="30.0496%" y="159.50"></text></g><g><title>predicates_of (209,031 samples, 0.56%)</title><rect x="29.4532%" y="181" width="0.5598%" height="15" fill="rgb(226,81,46)"/><text x="29.7032%" y="191.50"></text></g><g><title>predicates_defined_on (134,881 samples, 0.36%)</title><rect x="29.6518%" y="165" width="0.3612%" height="15" fill="rgb(247,70,30)"/><text x="29.9018%" y="175.50"></text></g><g><title>trait_impls_of (84,442 samples, 0.23%)</title><rect x="30.0237%" y="181" width="0.2261%" height="15" fill="rgb(212,68,19)"/><text x="30.2737%" y="191.50"></text></g><g><title>implementations_of_trait (43,670 samples, 0.12%)</title><rect x="30.1329%" y="165" width="0.1170%" height="15" fill="rgb(240,187,13)"/><text x="30.3829%" y="175.50"></text></g><g><title>type_of (50,371 samples, 0.13%)</title><rect x="30.2498%" y="181" width="0.1349%" height="15" fill="rgb(223,113,26)"/><text x="30.4998%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (42,301 samples, 0.11%)</title><rect x="30.2714%" y="165" width="0.1133%" height="15" fill="rgb(206,192,2)"/><text x="30.5214%" y="175.50"></text></g><g><title>item_bodies_checking (4,937,195 samples, 13.22%)</title><rect x="17.2110%" y="229" width="13.2225%" height="15" fill="rgb(241,108,4)"/><text x="17.4610%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,934,135 samples, 13.21%)</title><rect x="17.2192%" y="213" width="13.2143%" height="15" fill="rgb(247,173,49)"/><text x="17.4692%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (4,927,924 samples, 13.20%)</title><rect x="17.2358%" y="197" width="13.1977%" height="15" fill="rgb(224,114,35)"/><text x="17.4858%" y="207.50">typeck</text></g><g><title>impl_parent (155,012 samples, 0.42%)</title><rect x="31.6200%" y="85" width="0.4151%" height="15" fill="rgb(245,159,27)"/><text x="31.8700%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (108,222 samples, 0.29%)</title><rect x="31.7453%" y="69" width="0.2898%" height="15" fill="rgb(245,172,44)"/><text x="31.9953%" y="79.50"></text></g><g><title>impl_trait_ref (671,918 samples, 1.80%)</title><rect x="32.0352%" y="85" width="1.7995%" height="15" fill="rgb(236,23,11)"/><text x="32.2852%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (621,506 samples, 1.66%)</title><rect x="32.1702%" y="69" width="1.6645%" height="15" fill="rgb(205,117,38)"/><text x="32.4202%" y="79.50"></text></g><g><title>adt_destructor (1,138,083 samples, 3.05%)</title><rect x="30.9931%" y="149" width="3.0480%" height="15" fill="rgb(237,72,25)"/><text x="31.2431%" y="159.50">adt..</text></g><g><title>metadata_decode_entry_adt_destructor (1,136,733 samples, 3.04%)</title><rect x="30.9967%" y="133" width="3.0443%" height="15" fill="rgb(244,70,9)"/><text x="31.2467%" y="143.50">met..</text></g><g><title>coherent_trait (1,122,543 samples, 3.01%)</title><rect x="31.0347%" y="117" width="3.0063%" height="15" fill="rgb(217,125,39)"/><text x="31.2847%" y="127.50">coh..</text></g><g><title>specialization_graph_of (1,113,023 samples, 2.98%)</title><rect x="31.0602%" y="101" width="2.9808%" height="15" fill="rgb(235,36,10)"/><text x="31.3102%" y="111.50">spe..</text></g><g><title>trait_impls_of (77,061 samples, 0.21%)</title><rect x="33.8347%" y="85" width="0.2064%" height="15" fill="rgb(251,123,47)"/><text x="34.0847%" y="95.50"></text></g><g><title>dropck_outlives (1,178,563 samples, 3.16%)</title><rect x="30.8903%" y="181" width="3.1564%" height="15" fill="rgb(221,13,13)"/><text x="31.1403%" y="191.50">dro..</text></g><g><title>adt_dtorck_constraint (1,149,833 samples, 3.08%)</title><rect x="30.9673%" y="165" width="3.0794%" height="15" fill="rgb(238,131,9)"/><text x="31.2173%" y="175.50">adt..</text></g><g><title>trait_impls_of (46,441 samples, 0.12%)</title><rect x="34.0927%" y="181" width="0.1244%" height="15" fill="rgb(211,50,8)"/><text x="34.3427%" y="191.50"></text></g><g><title>item_types_checking (1,418,025 samples, 3.80%)</title><rect x="30.4335%" y="229" width="3.7977%" height="15" fill="rgb(245,182,24)"/><text x="30.6835%" y="239.50">item..</text></g><g><title>check_mod_item_types (1,413,815 samples, 3.79%)</title><rect x="30.4448%" y="213" width="3.7864%" height="15" fill="rgb(242,14,37)"/><text x="30.6948%" y="223.50">chec..</text></g><g><title>typeck (1,405,285 samples, 3.76%)</title><rect x="30.4676%" y="197" width="3.7636%" height="15" fill="rgb(246,228,12)"/><text x="30.7176%" y="207.50">type..</text></g><g><title>late_bound_vars_map (47,930 samples, 0.13%)</title><rect x="35.4735%" y="181" width="0.1284%" height="15" fill="rgb(213,55,15)"/><text x="35.7235%" y="191.50"></text></g><g><title>fn_sig (482,746 samples, 1.29%)</title><rect x="34.4554%" y="197" width="1.2929%" height="15" fill="rgb(209,9,3)"/><text x="34.7054%" y="207.50"></text></g><g><title>type_of (45,720 samples, 0.12%)</title><rect x="35.6258%" y="181" width="0.1224%" height="15" fill="rgb(230,59,30)"/><text x="35.8758%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (43,650 samples, 0.12%)</title><rect x="35.6314%" y="165" width="0.1169%" height="15" fill="rgb(209,121,21)"/><text x="35.8814%" y="175.50"></text></g><g><title>named_region_map (59,710 samples, 0.16%)</title><rect x="35.8066%" y="181" width="0.1599%" height="15" fill="rgb(220,109,13)"/><text x="36.0566%" y="191.50"></text></g><g><title>resolve_lifetimes (58,330 samples, 0.16%)</title><rect x="35.8103%" y="165" width="0.1562%" height="15" fill="rgb(232,18,1)"/><text x="36.0603%" y="175.50"></text></g><g><title>generics_of (90,530 samples, 0.24%)</title><rect x="35.7483%" y="197" width="0.2425%" height="15" fill="rgb(215,41,42)"/><text x="35.9983%" y="207.50"></text></g><g><title>type_collecting (774,908 samples, 2.08%)</title><rect x="34.2353%" y="229" width="2.0753%" height="15" fill="rgb(224,123,36)"/><text x="34.4853%" y="239.50">t..</text></g><g><title>collect_mod_item_types (757,438 samples, 2.03%)</title><rect x="34.2820%" y="213" width="2.0285%" height="15" fill="rgb(240,125,3)"/><text x="34.5320%" y="223.50">c..</text></g><g><title>type_of (86,461 samples, 0.23%)</title><rect x="36.0790%" y="197" width="0.2316%" height="15" fill="rgb(205,98,50)"/><text x="36.3290%" y="207.50"></text></g><g><title>evaluate_obligation (142,672 samples, 0.38%)</title><rect x="37.8865%" y="197" width="0.3821%" height="15" fill="rgb(205,185,37)"/><text x="38.1365%" y="207.50"></text></g><g><title>implied_outlives_bounds (147,330 samples, 0.39%)</title><rect x="38.2686%" y="197" width="0.3946%" height="15" fill="rgb(238,207,15)"/><text x="38.5186%" y="207.50"></text></g><g><title>evaluate_obligation (276,523 samples, 0.74%)</title><rect x="38.8620%" y="181" width="0.7406%" height="15" fill="rgb(213,199,42)"/><text x="39.1120%" y="191.50"></text></g><g><title>trait_impls_of (69,191 samples, 0.19%)</title><rect x="39.4173%" y="165" width="0.1853%" height="15" fill="rgb(235,201,11)"/><text x="39.6673%" y="175.50"></text></g><g><title>layout_of (55,350 samples, 0.15%)</title><rect x="39.7200%" y="165" width="0.1482%" height="15" fill="rgb(207,46,11)"/><text x="39.9700%" y="175.50"></text></g><g><title>layout_of (93,620 samples, 0.25%)</title><rect x="39.6423%" y="181" width="0.2507%" height="15" fill="rgb(241,35,35)"/><text x="39.8923%" y="191.50"></text></g><g><title>object_safety_violations (495,835 samples, 1.33%)</title><rect x="38.6631%" y="197" width="1.3279%" height="15" fill="rgb(243,32,47)"/><text x="38.9131%" y="207.50"></text></g><g><title>param_env (144,553 samples, 0.39%)</title><rect x="39.9910%" y="197" width="0.3871%" height="15" fill="rgb(247,202,23)"/><text x="40.2410%" y="207.50"></text></g><g><title>predicates_of (61,112 samples, 0.16%)</title><rect x="40.3782%" y="197" width="0.1637%" height="15" fill="rgb(219,102,11)"/><text x="40.6282%" y="207.50"></text></g><g><title>predicates_defined_on (50,992 samples, 0.14%)</title><rect x="40.4053%" y="181" width="0.1366%" height="15" fill="rgb(243,110,44)"/><text x="40.6553%" y="191.50"></text></g><g><title>region_scope_tree (37,411 samples, 0.10%)</title><rect x="40.5418%" y="197" width="0.1002%" height="15" fill="rgb(222,74,54)"/><text x="40.7918%" y="207.50"></text></g><g><title>analysis (14,434,240 samples, 38.66%)</title><rect x="1.9871%" y="261" width="38.6570%" height="15" fill="rgb(216,99,12)"/><text x="2.2371%" y="271.50">analysis</text></g><g><title>type_check_crate (8,822,148 samples, 23.63%)</title><rect x="17.0171%" y="245" width="23.6270%" height="15" fill="rgb(226,22,26)"/><text x="17.2671%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,617,298 samples, 4.33%)</title><rect x="36.3127%" y="229" width="4.3314%" height="15" fill="rgb(217,163,10)"/><text x="36.5627%" y="239.50">wf_ch..</text></g><g><title>check_item_well_formed (1,570,488 samples, 4.21%)</title><rect x="36.4381%" y="213" width="4.2060%" height="15" fill="rgb(213,25,53)"/><text x="36.6881%" y="223.50">check..</text></g><g><title>codegen_crate (618,987 samples, 1.66%)</title><rect x="40.6740%" y="261" width="1.6577%" height="15" fill="rgb(252,105,26)"/><text x="40.9240%" y="271.50"></text></g><g><title>AST_validation (165,022 samples, 0.44%)</title><rect x="42.9251%" y="245" width="0.4420%" height="15" fill="rgb(220,39,43)"/><text x="43.1751%" y="255.50"></text></g><g><title>crate_injection (93,692 samples, 0.25%)</title><rect x="43.4575%" y="245" width="0.2509%" height="15" fill="rgb(229,68,48)"/><text x="43.7075%" y="255.50"></text></g><g><title>metadata_load_macro (44,461 samples, 0.12%)</title><rect x="71.0349%" y="213" width="0.1191%" height="15" fill="rgb(252,8,32)"/><text x="71.2849%" y="223.50"></text></g><g><title>macro_expand_crate (13,109,905 samples, 35.11%)</title><rect x="43.7084%" y="245" width="35.1102%" height="15" fill="rgb(223,20,43)"/><text x="43.9584%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (13,085,084 samples, 35.04%)</title><rect x="43.7749%" y="229" width="35.0438%" height="15" fill="rgb(229,81,49)"/><text x="44.0249%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,861,932 samples, 7.66%)</title><rect x="71.1540%" y="213" width="7.6647%" height="15" fill="rgb(236,28,36)"/><text x="71.4040%" y="223.50">metadata_r..</text></g><g><title>metadata_register_crate (985,349 samples, 2.64%)</title><rect x="76.1798%" y="197" width="2.6389%" height="15" fill="rgb(249,185,26)"/><text x="76.4298%" y="207.50">me..</text></g><g><title>metadata_register_crate (79,711 samples, 0.21%)</title><rect x="78.6052%" y="181" width="0.2135%" height="15" fill="rgb(249,174,33)"/><text x="78.8552%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (228,562 samples, 0.61%)</title><rect x="78.8500%" y="245" width="0.6121%" height="15" fill="rgb(233,201,37)"/><text x="79.1000%" y="255.50"></text></g><g><title>finalize_imports (303,953 samples, 0.81%)</title><rect x="79.4865%" y="229" width="0.8140%" height="15" fill="rgb(221,78,26)"/><text x="79.7365%" y="239.50"></text></g><g><title>late_resolve_crate (868,349 samples, 2.33%)</title><rect x="80.3951%" y="229" width="2.3256%" height="15" fill="rgb(250,127,30)"/><text x="80.6451%" y="239.50">l..</text></g><g><title>configure_and_expand (15,138,907 samples, 40.54%)</title><rect x="42.3317%" y="261" width="40.5442%" height="15" fill="rgb(230,49,44)"/><text x="42.5817%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,274,694 samples, 3.41%)</title><rect x="79.4621%" y="245" width="3.4138%" height="15" fill="rgb(229,67,23)"/><text x="79.7121%" y="255.50">res..</text></g><g><title>drop_ast (55,731 samples, 0.15%)</title><rect x="82.8759%" y="261" width="0.1493%" height="15" fill="rgb(249,83,47)"/><text x="83.1259%" y="271.50"></text></g><g><title>early_lint_checks (141,331 samples, 0.38%)</title><rect x="83.0672%" y="261" width="0.3785%" height="15" fill="rgb(215,43,3)"/><text x="83.3172%" y="271.50"></text></g><g><title>free_global_ctxt (1,589,928 samples, 4.26%)</title><rect x="83.4457%" y="261" width="4.2581%" height="15" fill="rgb(238,154,13)"/><text x="83.6957%" y="271.50">free_..</text></g><g><title>crate_hash (70,691 samples, 0.19%)</title><rect x="88.5311%" y="245" width="0.1893%" height="15" fill="rgb(219,56,2)"/><text x="88.7811%" y="255.50"></text></g><g><title>generate_crate_metadata (446,105 samples, 1.19%)</title><rect x="87.7038%" y="261" width="1.1947%" height="15" fill="rgb(233,0,4)"/><text x="87.9538%" y="271.50"></text></g><g><title>hir_lowering (1,220,694 samples, 3.27%)</title><rect x="88.8985%" y="261" width="3.2692%" height="15" fill="rgb(235,30,7)"/><text x="89.1485%" y="271.50">hir..</text></g><g><title>link (44,980 samples, 0.12%)</title><rect x="92.1677%" y="261" width="0.1205%" height="15" fill="rgb(250,79,13)"/><text x="92.4177%" y="271.50"></text></g><g><title>parse_crate (1,749,070 samples, 4.68%)</title><rect x="92.2882%" y="261" width="4.6843%" height="15" fill="rgb(211,146,34)"/><text x="92.5382%" y="271.50">parse..</text></g><g><title>prepare_outputs (314,934 samples, 0.84%)</title><rect x="96.9958%" y="261" width="0.8434%" height="15" fill="rgb(228,22,38)"/><text x="97.2458%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (344,094 samples, 0.92%)</title><rect x="97.8393%" y="261" width="0.9215%" height="15" fill="rgb(235,168,5)"/><text x="98.0893%" y="271.50"></text></g><g><title>setup_global_ctxt (153,471 samples, 0.41%)</title><rect x="98.7900%" y="261" width="0.4110%" height="15" fill="rgb(221,155,16)"/><text x="99.0400%" y="271.50"></text></g><g><title>all (37,339,265 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (37,339,265 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (298,333 samples, 0.80%)</title><rect x="99.2010%" y="261" width="0.7990%" height="15" fill="rgb(234,103,6)"/><text x="99.4510%" y="271.50"></text></g></svg></svg>