<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (929,077 samples, 0.16%)</title><rect x="15.3045%" y="133" width="0.1604%" height="15" fill="rgb(227,0,7)"/><text x="15.5545%" y="143.50"></text></g><g><title>param_env (1,371,547 samples, 0.24%)</title><rect x="17.5121%" y="101" width="0.2367%" height="15" fill="rgb(217,0,24)"/><text x="17.7621%" y="111.50"></text></g><g><title>item_attrs (1,124,393 samples, 0.19%)</title><rect x="18.3850%" y="69" width="0.1941%" height="15" fill="rgb(221,193,54)"/><text x="18.6350%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,072,982 samples, 0.19%)</title><rect x="18.3939%" y="53" width="0.1852%" height="15" fill="rgb(248,212,6)"/><text x="18.6439%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,578,086 samples, 0.27%)</title><rect x="18.3187%" y="85" width="0.2724%" height="15" fill="rgb(208,68,35)"/><text x="18.5687%" y="95.50"></text></g><g><title>is_copy_raw (900,996 samples, 0.16%)</title><rect x="21.7629%" y="69" width="0.1555%" height="15" fill="rgb(232,128,0)"/><text x="22.0129%" y="79.50"></text></g><g><title>evaluate_obligation (690,475 samples, 0.12%)</title><rect x="21.7993%" y="53" width="0.1192%" height="15" fill="rgb(207,160,47)"/><text x="22.0493%" y="63.50"></text></g><g><title>adt_drop_tys (787,067 samples, 0.14%)</title><rect x="22.0525%" y="53" width="0.1359%" height="15" fill="rgb(228,23,34)"/><text x="22.3025%" y="63.50"></text></g><g><title>is_copy_raw (7,120,952 samples, 1.23%)</title><rect x="22.1884%" y="53" width="1.2291%" height="15" fill="rgb(218,30,26)"/><text x="22.4384%" y="63.50"></text></g><g><title>evaluate_obligation (5,930,598 samples, 1.02%)</title><rect x="22.3938%" y="37" width="1.0237%" height="15" fill="rgb(220,122,19)"/><text x="22.6438%" y="47.50"></text></g><g><title>needs_drop_raw (8,767,580 samples, 1.51%)</title><rect x="21.9185%" y="69" width="1.5134%" height="15" fill="rgb(250,228,42)"/><text x="22.1685%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,382,222 samples, 0.24%)</title><rect x="23.6305%" y="53" width="0.2386%" height="15" fill="rgb(240,193,28)"/><text x="23.8805%" y="63.50"></text></g><g><title>resolve_instance (3,656,412 samples, 0.63%)</title><rect x="23.4321%" y="69" width="0.6311%" height="15" fill="rgb(216,20,37)"/><text x="23.6821%" y="79.50"></text></g><g><title>thir_body (6,926,855 samples, 1.20%)</title><rect x="24.1055%" y="69" width="1.1956%" height="15" fill="rgb(206,188,39)"/><text x="24.3555%" y="79.50"></text></g><g><title>mir_const (51,144,843 samples, 8.83%)</title><rect x="16.5220%" y="117" width="8.8280%" height="15" fill="rgb(217,207,13)"/><text x="16.7720%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (44,037,199 samples, 7.60%)</title><rect x="17.7489%" y="101" width="7.6012%" height="15" fill="rgb(231,73,38)"/><text x="17.9989%" y="111.50">unsafety_c..</text></g><g><title>mir_built (39,157,797 samples, 6.76%)</title><rect x="18.5911%" y="85" width="6.7589%" height="15" fill="rgb(225,20,46)"/><text x="18.8411%" y="95.50">mir_built</text></g><g><title>mir_promoted (56,983,509 samples, 9.84%)</title><rect x="15.5801%" y="133" width="9.8358%" height="15" fill="rgb(210,31,41)"/><text x="15.8301%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,870,006 samples, 0.32%)</title><rect x="25.4159%" y="133" width="0.3228%" height="15" fill="rgb(221,200,47)"/><text x="25.6659%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,778,487 samples, 0.65%)</title><rect x="25.7387%" y="133" width="0.6522%" height="15" fill="rgb(226,26,5)"/><text x="25.9887%" y="143.50"></text></g><g><title>normalize_projection_ty (2,140,502 samples, 0.37%)</title><rect x="26.0214%" y="117" width="0.3695%" height="15" fill="rgb(249,33,26)"/><text x="26.2714%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,649,713 samples, 0.28%)</title><rect x="26.3909%" y="133" width="0.2848%" height="15" fill="rgb(235,183,28)"/><text x="26.6409%" y="143.50"></text></g><g><title>normalize_projection_ty (807,397 samples, 0.14%)</title><rect x="26.5363%" y="117" width="0.1394%" height="15" fill="rgb(221,5,38)"/><text x="26.7863%" y="127.50"></text></g><g><title>type_op_normalize_ty (3,159,656 samples, 0.55%)</title><rect x="26.6757%" y="133" width="0.5454%" height="15" fill="rgb(247,18,42)"/><text x="26.9257%" y="143.50"></text></g><g><title>normalize_projection_ty (1,969,826 samples, 0.34%)</title><rect x="26.8810%" y="117" width="0.3400%" height="15" fill="rgb(241,131,45)"/><text x="27.1310%" y="127.50"></text></g><g><title>type_op_prove_predicate (15,499,455 samples, 2.68%)</title><rect x="27.2210%" y="133" width="2.6753%" height="15" fill="rgb(249,31,29)"/><text x="27.4710%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (170,783,567 samples, 29.48%)</title><rect x="0.4216%" y="165" width="29.4786%" height="15" fill="rgb(225,111,53)"/><text x="0.6716%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (169,721,218 samples, 29.30%)</title><rect x="0.6049%" y="149" width="29.2952%" height="15" fill="rgb(238,160,17)"/><text x="0.8549%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,134,923 samples, 0.20%)</title><rect x="29.9801%" y="165" width="0.1959%" height="15" fill="rgb(214,148,48)"/><text x="30.2301%" y="175.50"></text></g><g><title>codegen_fn_attrs (718,970 samples, 0.12%)</title><rect x="30.6342%" y="101" width="0.1241%" height="15" fill="rgb(232,36,49)"/><text x="30.8842%" y="111.50"></text></g><g><title>should_inherit_track_caller (1,375,526 samples, 0.24%)</title><rect x="30.5290%" y="117" width="0.2374%" height="15" fill="rgb(209,103,24)"/><text x="30.7790%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,126,893 samples, 0.37%)</title><rect x="30.4031%" y="133" width="0.3671%" height="15" fill="rgb(229,88,8)"/><text x="30.6531%" y="143.50"></text></g><g><title>check_mod_attrs (3,402,928 samples, 0.59%)</title><rect x="30.1829%" y="149" width="0.5874%" height="15" fill="rgb(213,181,19)"/><text x="30.4329%" y="159.50"></text></g><g><title>check_mod_const_bodies (745,109 samples, 0.13%)</title><rect x="30.7702%" y="149" width="0.1286%" height="15" fill="rgb(254,191,54)"/><text x="31.0202%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,427,745 samples, 0.25%)</title><rect x="30.9707%" y="149" width="0.2464%" height="15" fill="rgb(241,83,37)"/><text x="31.2207%" y="159.50"></text></g><g><title>misc_checking_1 (6,206,250 samples, 1.07%)</title><rect x="30.1760%" y="165" width="1.0712%" height="15" fill="rgb(233,36,39)"/><text x="30.4260%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,276,727 samples, 0.57%)</title><rect x="31.2476%" y="149" width="0.5656%" height="15" fill="rgb(226,3,54)"/><text x="31.4976%" y="159.50"></text></g><g><title>check_mod_liveness (2,779,211 samples, 0.48%)</title><rect x="31.3334%" y="133" width="0.4797%" height="15" fill="rgb(245,192,40)"/><text x="31.5834%" y="143.50"></text></g><g><title>type_uninhabited_from (932,029 samples, 0.16%)</title><rect x="31.6523%" y="117" width="0.1609%" height="15" fill="rgb(238,167,29)"/><text x="31.9023%" y="127.50"></text></g><g><title>type_uninhabited_from (758,949 samples, 0.13%)</title><rect x="31.6821%" y="101" width="0.1310%" height="15" fill="rgb(232,182,51)"/><text x="31.9321%" y="111.50"></text></g><g><title>misc_checking_2 (7,177,401 samples, 1.24%)</title><rect x="31.2473%" y="165" width="1.2389%" height="15" fill="rgb(231,60,39)"/><text x="31.4973%" y="175.50"></text></g><g><title>match_checking (3,899,074 samples, 0.67%)</title><rect x="31.8131%" y="149" width="0.6730%" height="15" fill="rgb(208,69,12)"/><text x="32.0631%" y="159.50"></text></g><g><title>check_match (3,637,341 samples, 0.63%)</title><rect x="31.8583%" y="133" width="0.6278%" height="15" fill="rgb(235,93,37)"/><text x="32.1083%" y="143.50"></text></g><g><title>check_private_in_public (1,248,764 samples, 0.22%)</title><rect x="32.4882%" y="149" width="0.2155%" height="15" fill="rgb(213,116,39)"/><text x="32.7382%" y="159.50"></text></g><g><title>death_checking (2,145,194 samples, 0.37%)</title><rect x="32.7037%" y="149" width="0.3703%" height="15" fill="rgb(222,207,29)"/><text x="32.9537%" y="159.50"></text></g><g><title>param_env (1,299,633 samples, 0.22%)</title><rect x="33.5404%" y="117" width="0.2243%" height="15" fill="rgb(206,96,30)"/><text x="33.7904%" y="127.50"></text></g><g><title>predicates_of (738,648 samples, 0.13%)</title><rect x="33.6372%" y="101" width="0.1275%" height="15" fill="rgb(218,138,4)"/><text x="33.8872%" y="111.50"></text></g><g><title>predicates_defined_on (648,596 samples, 0.11%)</title><rect x="33.6528%" y="85" width="0.1120%" height="15" fill="rgb(250,191,14)"/><text x="33.9028%" y="95.50"></text></g><g><title>crate_lints (5,502,951 samples, 0.95%)</title><rect x="33.0745%" y="133" width="0.9499%" height="15" fill="rgb(239,60,40)"/><text x="33.3245%" y="143.50"></text></g><g><title>type_of (1,283,924 samples, 0.22%)</title><rect x="33.8028%" y="117" width="0.2216%" height="15" fill="rgb(206,27,48)"/><text x="34.0528%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,027,582 samples, 0.18%)</title><rect x="33.8470%" y="101" width="0.1774%" height="15" fill="rgb(225,35,8)"/><text x="34.0970%" y="111.50"></text></g><g><title>lint_checking (8,450,084 samples, 1.46%)</title><rect x="33.0740%" y="149" width="1.4585%" height="15" fill="rgb(250,213,24)"/><text x="33.3240%" y="159.50"></text></g><g><title>module_lints (2,944,003 samples, 0.51%)</title><rect x="34.0244%" y="133" width="0.5082%" height="15" fill="rgb(247,123,22)"/><text x="34.2744%" y="143.50"></text></g><g><title>lint_mod (2,929,903 samples, 0.51%)</title><rect x="34.0268%" y="117" width="0.5057%" height="15" fill="rgb(231,138,38)"/><text x="34.2768%" y="127.50"></text></g><g><title>privacy_access_levels (1,772,500 samples, 0.31%)</title><rect x="34.5326%" y="149" width="0.3059%" height="15" fill="rgb(231,145,46)"/><text x="34.7826%" y="159.50"></text></g><g><title>privacy_checking_modules (6,272,240 samples, 1.08%)</title><rect x="34.8385%" y="149" width="1.0826%" height="15" fill="rgb(251,118,11)"/><text x="35.0885%" y="159.50"></text></g><g><title>check_mod_privacy (6,262,760 samples, 1.08%)</title><rect x="34.8401%" y="133" width="1.0810%" height="15" fill="rgb(217,147,25)"/><text x="35.0901%" y="143.50"></text></g><g><title>misc_checking_3 (19,963,033 samples, 3.45%)</title><rect x="32.4862%" y="165" width="3.4458%" height="15" fill="rgb(247,81,37)"/><text x="32.7362%" y="175.50">mis..</text></g><g><title>impl_parent (3,311,537 samples, 0.57%)</title><rect x="37.1252%" y="101" width="0.5716%" height="15" fill="rgb(209,12,38)"/><text x="37.3752%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,815,701 samples, 0.31%)</title><rect x="37.3834%" y="85" width="0.3134%" height="15" fill="rgb(227,1,9)"/><text x="37.6334%" y="95.50"></text></g><g><title>impl_trait_ref (7,067,353 samples, 1.22%)</title><rect x="37.6968%" y="101" width="1.2199%" height="15" fill="rgb(248,47,43)"/><text x="37.9468%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,586,937 samples, 0.96%)</title><rect x="37.9523%" y="85" width="0.9643%" height="15" fill="rgb(221,10,30)"/><text x="38.2023%" y="95.50"></text></g><g><title>trait_impls_of (1,377,367 samples, 0.24%)</title><rect x="38.9748%" y="101" width="0.2377%" height="15" fill="rgb(210,229,1)"/><text x="39.2248%" y="111.50"></text></g><g><title>coherent_trait (18,342,136 samples, 3.17%)</title><rect x="36.0510%" y="133" width="3.1660%" height="15" fill="rgb(222,148,37)"/><text x="36.3010%" y="143.50">coh..</text></g><g><title>specialization_graph_of (17,831,511 samples, 3.08%)</title><rect x="36.1391%" y="117" width="3.0779%" height="15" fill="rgb(234,67,33)"/><text x="36.3891%" y="127.50">spe..</text></g><g><title>coherence_checking (18,602,268 samples, 3.21%)</title><rect x="36.0447%" y="149" width="3.2109%" height="15" fill="rgb(247,98,35)"/><text x="36.2947%" y="159.50">coh..</text></g><g><title>associated_item (788,267 samples, 0.14%)</title><rect x="60.4747%" y="85" width="0.1361%" height="15" fill="rgb(247,138,52)"/><text x="60.7247%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (640,885 samples, 0.11%)</title><rect x="60.5002%" y="69" width="0.1106%" height="15" fill="rgb(213,79,30)"/><text x="60.7502%" y="79.50"></text></g><g><title>associated_items (1,194,272 samples, 0.21%)</title><rect x="60.4157%" y="101" width="0.2061%" height="15" fill="rgb(246,177,23)"/><text x="60.6657%" y="111.50"></text></g><g><title>adt_dtorck_constraint (641,896 samples, 0.11%)</title><rect x="60.9158%" y="85" width="0.1108%" height="15" fill="rgb(230,62,27)"/><text x="61.1658%" y="95.50"></text></g><g><title>dropck_outlives (2,181,299 samples, 0.38%)</title><rect x="60.6671%" y="101" width="0.3765%" height="15" fill="rgb(216,154,8)"/><text x="60.9171%" y="111.50"></text></g><g><title>generics_of (899,390 samples, 0.16%)</title><rect x="62.8766%" y="85" width="0.1552%" height="15" fill="rgb(244,35,45)"/><text x="63.1266%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (642,147 samples, 0.11%)</title><rect x="62.9210%" y="69" width="0.1108%" height="15" fill="rgb(251,115,12)"/><text x="63.1710%" y="79.50"></text></g><g><title>impl_trait_ref (1,192,985 samples, 0.21%)</title><rect x="63.0839%" y="85" width="0.2059%" height="15" fill="rgb(240,54,50)"/><text x="63.3339%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (984,692 samples, 0.17%)</title><rect x="63.1199%" y="69" width="0.1700%" height="15" fill="rgb(233,84,52)"/><text x="63.3699%" y="79.50"></text></g><g><title>predicates_of (1,661,602 samples, 0.29%)</title><rect x="63.2999%" y="85" width="0.2868%" height="15" fill="rgb(207,117,47)"/><text x="63.5499%" y="95.50"></text></g><g><title>predicates_defined_on (952,653 samples, 0.16%)</title><rect x="63.4223%" y="69" width="0.1644%" height="15" fill="rgb(249,43,39)"/><text x="63.6723%" y="79.50"></text></g><g><title>specializes (2,494,575 samples, 0.43%)</title><rect x="63.5867%" y="85" width="0.4306%" height="15" fill="rgb(209,38,44)"/><text x="63.8367%" y="95.50"></text></g><g><title>param_env (1,446,526 samples, 0.25%)</title><rect x="63.7676%" y="69" width="0.2497%" height="15" fill="rgb(236,212,23)"/><text x="64.0176%" y="79.50"></text></g><g><title>def_span (629,828 samples, 0.11%)</title><rect x="63.9086%" y="53" width="0.1087%" height="15" fill="rgb(242,79,21)"/><text x="64.1586%" y="63.50"></text></g><g><title>trait_impls_of (627,116 samples, 0.11%)</title><rect x="64.0199%" y="85" width="0.1082%" height="15" fill="rgb(211,96,35)"/><text x="64.2699%" y="95.50"></text></g><g><title>evaluate_obligation (17,895,754 samples, 3.09%)</title><rect x="61.0436%" y="101" width="3.0889%" height="15" fill="rgb(253,215,40)"/><text x="61.2936%" y="111.50">eva..</text></g><g><title>evaluate_obligation (758,169 samples, 0.13%)</title><rect x="64.5702%" y="85" width="0.1309%" height="15" fill="rgb(211,81,21)"/><text x="64.8202%" y="95.50"></text></g><g><title>method_autoderef_steps (1,587,835 samples, 0.27%)</title><rect x="64.4287%" y="101" width="0.2741%" height="15" fill="rgb(208,190,38)"/><text x="64.6787%" y="111.50"></text></g><g><title>predicates_of (899,576 samples, 0.16%)</title><rect x="64.7767%" y="101" width="0.1553%" height="15" fill="rgb(235,213,38)"/><text x="65.0267%" y="111.50"></text></g><g><title>predicates_defined_on (603,580 samples, 0.10%)</title><rect x="64.8278%" y="85" width="0.1042%" height="15" fill="rgb(237,122,38)"/><text x="65.0778%" y="95.50"></text></g><g><title>associated_item (954,594 samples, 0.16%)</title><rect x="70.6183%" y="69" width="0.1648%" height="15" fill="rgb(244,218,35)"/><text x="70.8683%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (748,652 samples, 0.13%)</title><rect x="70.6539%" y="53" width="0.1292%" height="15" fill="rgb(240,68,47)"/><text x="70.9039%" y="63.50"></text></g><g><title>associated_items (1,330,574 samples, 0.23%)</title><rect x="70.5611%" y="85" width="0.2297%" height="15" fill="rgb(210,16,53)"/><text x="70.8111%" y="95.50"></text></g><g><title>dropck_outlives (725,397 samples, 0.13%)</title><rect x="70.8059%" y="85" width="0.1252%" height="15" fill="rgb(235,124,12)"/><text x="71.0559%" y="95.50"></text></g><g><title>evaluate_obligation (3,335,196 samples, 0.58%)</title><rect x="70.9311%" y="85" width="0.5757%" height="15" fill="rgb(224,169,11)"/><text x="71.1811%" y="95.50"></text></g><g><title>fn_sig (716,728 samples, 0.12%)</title><rect x="71.5112%" y="85" width="0.1237%" height="15" fill="rgb(250,166,2)"/><text x="71.7612%" y="95.50"></text></g><g><title>is_copy_raw (662,927 samples, 0.11%)</title><rect x="71.7195%" y="85" width="0.1144%" height="15" fill="rgb(242,216,29)"/><text x="71.9695%" y="95.50"></text></g><g><title>method_autoderef_steps (801,260 samples, 0.14%)</title><rect x="71.8779%" y="85" width="0.1383%" height="15" fill="rgb(230,116,27)"/><text x="72.1279%" y="95.50"></text></g><g><title>typeck (41,383,863 samples, 7.14%)</title><rect x="64.9998%" y="101" width="7.1432%" height="15" fill="rgb(228,99,48)"/><text x="65.2498%" y="111.50">typeck</text></g><g><title>item_bodies_checking (190,581,348 samples, 32.90%)</title><rect x="39.2885%" y="149" width="32.8958%" height="15" fill="rgb(253,11,6)"/><text x="39.5385%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (190,576,928 samples, 32.90%)</title><rect x="39.2892%" y="133" width="32.8950%" height="15" fill="rgb(247,143,39)"/><text x="39.5392%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (189,867,640 samples, 32.77%)</title><rect x="39.4116%" y="117" width="32.7726%" height="15" fill="rgb(236,97,10)"/><text x="39.6616%" y="127.50">typeck</text></g><g><title>item_types_checking (14,026,487 samples, 2.42%)</title><rect x="72.1843%" y="149" width="2.4211%" height="15" fill="rgb(233,208,19)"/><text x="72.4343%" y="159.50">it..</text></g><g><title>check_mod_item_types (14,014,497 samples, 2.42%)</title><rect x="72.1863%" y="133" width="2.4190%" height="15" fill="rgb(216,164,2)"/><text x="72.4363%" y="143.50">ch..</text></g><g><title>fn_sig (2,873,560 samples, 0.50%)</title><rect x="74.8854%" y="117" width="0.4960%" height="15" fill="rgb(220,129,5)"/><text x="75.1354%" y="127.50"></text></g><g><title>resolve_lifetimes (1,015,690 samples, 0.18%)</title><rect x="75.5164%" y="85" width="0.1753%" height="15" fill="rgb(242,17,10)"/><text x="75.7664%" y="95.50"></text></g><g><title>is_late_bound_map (1,071,320 samples, 0.18%)</title><rect x="75.5073%" y="101" width="0.1849%" height="15" fill="rgb(242,107,0)"/><text x="75.7573%" y="111.50"></text></g><g><title>named_region_map (1,676,466 samples, 0.29%)</title><rect x="75.6922%" y="101" width="0.2894%" height="15" fill="rgb(251,28,31)"/><text x="75.9422%" y="111.50"></text></g><g><title>resolve_lifetimes (1,571,426 samples, 0.27%)</title><rect x="75.7103%" y="85" width="0.2712%" height="15" fill="rgb(233,223,10)"/><text x="75.9603%" y="95.50"></text></g><g><title>lint_levels (894,630 samples, 0.15%)</title><rect x="75.8271%" y="69" width="0.1544%" height="15" fill="rgb(215,21,27)"/><text x="76.0771%" y="79.50"></text></g><g><title>generics_of (3,549,673 samples, 0.61%)</title><rect x="75.3814%" y="117" width="0.6127%" height="15" fill="rgb(232,23,21)"/><text x="75.6314%" y="127.50"></text></g><g><title>explicit_predicates_of (1,377,187 samples, 0.24%)</title><rect x="76.1823%" y="85" width="0.2377%" height="15" fill="rgb(244,5,23)"/><text x="76.4323%" y="95.50"></text></g><g><title>predicates_of (3,249,360 samples, 0.56%)</title><rect x="76.0322%" y="117" width="0.5609%" height="15" fill="rgb(226,81,46)"/><text x="76.2822%" y="127.50"></text></g><g><title>predicates_defined_on (2,917,468 samples, 0.50%)</title><rect x="76.0895%" y="101" width="0.5036%" height="15" fill="rgb(247,70,30)"/><text x="76.3395%" y="111.50"></text></g><g><title>inferred_outlives_of (1,002,980 samples, 0.17%)</title><rect x="76.4200%" y="85" width="0.1731%" height="15" fill="rgb(212,68,19)"/><text x="76.6700%" y="95.50"></text></g><g><title>inferred_outlives_crate (897,690 samples, 0.15%)</title><rect x="76.4381%" y="69" width="0.1549%" height="15" fill="rgb(240,187,13)"/><text x="76.6881%" y="79.50"></text></g><g><title>type_collecting (12,025,054 samples, 2.08%)</title><rect x="74.6071%" y="149" width="2.0756%" height="15" fill="rgb(223,113,26)"/><text x="74.8571%" y="159.50">t..</text></g><g><title>collect_mod_item_types (12,007,354 samples, 2.07%)</title><rect x="74.6102%" y="133" width="2.0726%" height="15" fill="rgb(206,192,2)"/><text x="74.8602%" y="143.50">c..</text></g><g><title>evaluate_obligation (2,043,989 samples, 0.35%)</title><rect x="80.3498%" y="117" width="0.3528%" height="15" fill="rgb(241,108,4)"/><text x="80.5998%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,418,873 samples, 0.24%)</title><rect x="80.7157%" y="117" width="0.2449%" height="15" fill="rgb(247,173,49)"/><text x="80.9657%" y="127.50"></text></g><g><title>param_env (2,810,694 samples, 0.49%)</title><rect x="81.0379%" y="117" width="0.4851%" height="15" fill="rgb(224,114,35)"/><text x="81.2879%" y="127.50"></text></g><g><title>region_scope_tree (2,548,774 samples, 0.44%)</title><rect x="81.5558%" y="117" width="0.4399%" height="15" fill="rgb(245,159,27)"/><text x="81.8058%" y="127.50"></text></g><g><title>check_impl_item_well_formed (29,531,046 samples, 5.10%)</title><rect x="76.9137%" y="133" width="5.0973%" height="15" fill="rgb(245,172,44)"/><text x="77.1637%" y="143.50">check_..</text></g><g><title>evaluate_obligation (1,118,509 samples, 0.19%)</title><rect x="83.0840%" y="117" width="0.1931%" height="15" fill="rgb(236,23,11)"/><text x="83.3340%" y="127.50"></text></g><g><title>param_env (1,113,175 samples, 0.19%)</title><rect x="83.3454%" y="117" width="0.1921%" height="15" fill="rgb(205,117,38)"/><text x="83.5954%" y="127.50"></text></g><g><title>check_item_well_formed (9,800,586 samples, 1.69%)</title><rect x="82.0110%" y="133" width="1.6917%" height="15" fill="rgb(237,72,25)"/><text x="82.2610%" y="143.50"></text></g><g><title>analysis (484,639,783 samples, 83.65%)</title><rect x="0.1841%" y="181" width="83.6526%" height="15" fill="rgb(244,70,9)"/><text x="0.4341%" y="191.50">analysis</text></g><g><title>type_check_crate (277,535,119 samples, 47.90%)</title><rect x="35.9319%" y="165" width="47.9047%" height="15" fill="rgb(217,125,39)"/><text x="36.1819%" y="175.50">type_check_crate</text></g><g><title>wf_checking (41,400,332 samples, 7.15%)</title><rect x="76.6906%" y="149" width="7.1460%" height="15" fill="rgb(235,36,10)"/><text x="76.9406%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (776,379 samples, 0.13%)</title><rect x="83.7026%" y="133" width="0.1340%" height="15" fill="rgb(251,123,47)"/><text x="83.9526%" y="143.50"></text></g><g><title>metadata_register_crate (4,453,790 samples, 0.77%)</title><rect x="90.9617%" y="133" width="0.7688%" height="15" fill="rgb(221,13,13)"/><text x="91.2117%" y="143.50"></text></g><g><title>metadata_register_crate (3,084,833 samples, 0.53%)</title><rect x="91.1980%" y="117" width="0.5325%" height="15" fill="rgb(238,131,9)"/><text x="91.4480%" y="127.50"></text></g><g><title>macro_expand_crate (45,207,726 samples, 7.80%)</title><rect x="84.1049%" y="165" width="7.8032%" height="15" fill="rgb(211,50,8)"/><text x="84.3549%" y="175.50">macro_expan..</text></g><g><title>expand_crate (45,187,116 samples, 7.80%)</title><rect x="84.1085%" y="149" width="7.7996%" height="15" fill="rgb(245,182,24)"/><text x="84.3585%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,029,414 samples, 0.18%)</title><rect x="91.7304%" y="133" width="0.1777%" height="15" fill="rgb(242,14,37)"/><text x="91.9804%" y="143.50"></text></g><g><title>late_resolve_crate (7,881,207 samples, 1.36%)</title><rect x="92.0186%" y="149" width="1.3604%" height="15" fill="rgb(246,228,12)"/><text x="92.2686%" y="159.50"></text></g><g><title>configure_and_expand (55,413,299 samples, 9.56%)</title><rect x="83.9191%" y="181" width="9.5648%" height="15" fill="rgb(213,55,15)"/><text x="84.1691%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (9,045,431 samples, 1.56%)</title><rect x="91.9225%" y="165" width="1.5613%" height="15" fill="rgb(209,9,3)"/><text x="92.1725%" y="175.50"></text></g><g><title>drop_ast (1,078,563 samples, 0.19%)</title><rect x="93.4838%" y="181" width="0.1862%" height="15" fill="rgb(230,59,30)"/><text x="93.7338%" y="191.50"></text></g><g><title>early_lint_checks (2,165,134 samples, 0.37%)</title><rect x="93.6735%" y="181" width="0.3737%" height="15" fill="rgb(209,121,21)"/><text x="93.9235%" y="191.50"></text></g><g><title>free_global_ctxt (7,109,910 samples, 1.23%)</title><rect x="94.0473%" y="181" width="1.2272%" height="15" fill="rgb(220,109,13)"/><text x="94.2973%" y="191.50"></text></g><g><title>generate_crate_metadata (6,039,298 samples, 1.04%)</title><rect x="95.2745%" y="181" width="1.0424%" height="15" fill="rgb(232,18,1)"/><text x="95.5245%" y="191.50"></text></g><g><title>hir_lowering (17,205,162 samples, 2.97%)</title><rect x="96.3169%" y="181" width="2.9697%" height="15" fill="rgb(215,41,42)"/><text x="96.5669%" y="191.50">hir..</text></g><g><title>parse_crate (690,517 samples, 0.12%)</title><rect x="99.3059%" y="181" width="0.1192%" height="15" fill="rgb(224,123,36)"/><text x="99.5559%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,262,445 samples, 0.39%)</title><rect x="99.4680%" y="181" width="0.3905%" height="15" fill="rgb(240,125,3)"/><text x="99.7180%" y="191.50"></text></g><g><title>all (579,348,371 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (579,348,371 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (696,707 samples, 0.12%)</title><rect x="99.8797%" y="181" width="0.1203%" height="15" fill="rgb(238,207,15)"/><text x="100.1297%" y="191.50"></text></g></svg></svg>