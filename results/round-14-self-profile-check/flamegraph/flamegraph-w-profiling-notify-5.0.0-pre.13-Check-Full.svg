<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (651,646 samples, 0.24%)</title><rect x="16.9528%" y="117" width="0.2403%" height="15" fill="rgb(227,0,7)"/><text x="17.2028%" y="127.50"></text></g><g><title>item_attrs (604,495 samples, 0.22%)</title><rect x="17.7953%" y="85" width="0.2229%" height="15" fill="rgb(217,0,24)"/><text x="18.0453%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (582,955 samples, 0.21%)</title><rect x="17.8032%" y="69" width="0.2149%" height="15" fill="rgb(221,193,54)"/><text x="18.0532%" y="79.50"></text></g><g><title>codegen_fn_attrs (859,728 samples, 0.32%)</title><rect x="17.7182%" y="101" width="0.3170%" height="15" fill="rgb(248,212,6)"/><text x="17.9682%" y="111.50"></text></g><g><title>adt_drop_tys (455,614 samples, 0.17%)</title><rect x="21.7203%" y="53" width="0.1680%" height="15" fill="rgb(208,68,35)"/><text x="21.9703%" y="63.50"></text></g><g><title>adt_drop_tys (965,923 samples, 0.36%)</title><rect x="21.6887%" y="69" width="0.3561%" height="15" fill="rgb(232,128,0)"/><text x="21.9387%" y="79.50"></text></g><g><title>needs_drop_raw (3,301,509 samples, 1.22%)</title><rect x="21.5829%" y="85" width="1.2173%" height="15" fill="rgb(207,160,47)"/><text x="21.8329%" y="95.50"></text></g><g><title>is_copy_raw (2,048,834 samples, 0.76%)</title><rect x="22.0448%" y="69" width="0.7554%" height="15" fill="rgb(228,23,34)"/><text x="22.2948%" y="79.50"></text></g><g><title>evaluate_obligation (1,740,412 samples, 0.64%)</title><rect x="22.1585%" y="53" width="0.6417%" height="15" fill="rgb(218,30,26)"/><text x="22.4085%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (507,688 samples, 0.19%)</title><rect x="22.9744%" y="69" width="0.1872%" height="15" fill="rgb(220,122,19)"/><text x="23.2244%" y="79.50"></text></g><g><title>impl_parent (346,304 samples, 0.13%)</title><rect x="23.4142%" y="53" width="0.1277%" height="15" fill="rgb(250,228,42)"/><text x="23.6642%" y="63.50"></text></g><g><title>specialization_graph_of (1,754,648 samples, 0.65%)</title><rect x="23.2147%" y="69" width="0.6469%" height="15" fill="rgb(240,193,28)"/><text x="23.4647%" y="79.50"></text></g><g><title>impl_trait_ref (867,197 samples, 0.32%)</title><rect x="23.5419%" y="53" width="0.3197%" height="15" fill="rgb(216,20,37)"/><text x="23.7919%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (741,007 samples, 0.27%)</title><rect x="23.5884%" y="37" width="0.2732%" height="15" fill="rgb(206,188,39)"/><text x="23.8384%" y="47.50"></text></g><g><title>resolve_instance (3,040,017 samples, 1.12%)</title><rect x="22.8002%" y="85" width="1.1209%" height="15" fill="rgb(217,207,13)"/><text x="23.0502%" y="95.50"></text></g><g><title>thir_body (3,444,274 samples, 1.27%)</title><rect x="23.9535%" y="85" width="1.2699%" height="15" fill="rgb(231,73,38)"/><text x="24.2035%" y="95.50"></text></g><g><title>mir_const (24,958,865 samples, 9.20%)</title><rect x="16.0401%" y="133" width="9.2023%" height="15" fill="rgb(225,20,46)"/><text x="16.2901%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (21,831,874 samples, 8.05%)</title><rect x="17.1931%" y="117" width="8.0494%" height="15" fill="rgb(210,31,41)"/><text x="17.4431%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (19,547,920 samples, 7.21%)</title><rect x="18.0352%" y="101" width="7.2073%" height="15" fill="rgb(221,200,47)"/><text x="18.2852%" y="111.50">mir_built</text></g><g><title>mir_promoted (27,535,113 samples, 10.15%)</title><rect x="15.1456%" y="149" width="10.1522%" height="15" fill="rgb(226,26,5)"/><text x="15.3956%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (797,719 samples, 0.29%)</title><rect x="25.2980%" y="149" width="0.2941%" height="15" fill="rgb(249,33,26)"/><text x="25.5480%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,483,805 samples, 0.55%)</title><rect x="25.5921%" y="149" width="0.5471%" height="15" fill="rgb(235,183,28)"/><text x="25.8421%" y="159.50"></text></g><g><title>normalize_projection_ty (971,039 samples, 0.36%)</title><rect x="25.7811%" y="133" width="0.3580%" height="15" fill="rgb(221,5,38)"/><text x="26.0311%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,410,128 samples, 1.99%)</title><rect x="26.2212%" y="149" width="1.9947%" height="15" fill="rgb(247,18,42)"/><text x="26.4712%" y="159.50">t..</text></g><g><title>evaluate_obligation (388,193 samples, 0.14%)</title><rect x="28.0728%" y="133" width="0.1431%" height="15" fill="rgb(241,131,45)"/><text x="28.3228%" y="143.50"></text></g><g><title>MIR_borrow_checking (75,046,511 samples, 27.67%)</title><rect x="0.5503%" y="181" width="27.6696%" height="15" fill="rgb(249,31,29)"/><text x="0.8003%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (74,712,029 samples, 27.55%)</title><rect x="0.6736%" y="165" width="27.5463%" height="15" fill="rgb(225,111,53)"/><text x="0.9236%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (444,493 samples, 0.16%)</title><rect x="28.2824%" y="181" width="0.1639%" height="15" fill="rgb(238,160,17)"/><text x="28.5324%" y="191.50"></text></g><g><title>should_inherit_track_caller (371,083 samples, 0.14%)</title><rect x="28.7809%" y="133" width="0.1368%" height="15" fill="rgb(214,148,48)"/><text x="29.0309%" y="143.50"></text></g><g><title>codegen_fn_attrs (673,906 samples, 0.25%)</title><rect x="28.6770%" y="149" width="0.2485%" height="15" fill="rgb(232,36,49)"/><text x="28.9270%" y="159.50"></text></g><g><title>check_mod_attrs (1,270,734 samples, 0.47%)</title><rect x="28.4570%" y="165" width="0.4685%" height="15" fill="rgb(209,103,24)"/><text x="28.7070%" y="175.50"></text></g><g><title>check_mod_const_bodies (286,512 samples, 0.11%)</title><rect x="28.9255%" y="165" width="0.1056%" height="15" fill="rgb(229,88,8)"/><text x="29.1755%" y="175.50"></text></g><g><title>lookup_deprecation_entry (287,254 samples, 0.11%)</title><rect x="29.2274%" y="149" width="0.1059%" height="15" fill="rgb(213,181,19)"/><text x="29.4774%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (783,949 samples, 0.29%)</title><rect x="29.1003%" y="165" width="0.2890%" height="15" fill="rgb(254,191,54)"/><text x="29.3503%" y="175.50"></text></g><g><title>misc_checking_1 (2,656,679 samples, 0.98%)</title><rect x="28.4465%" y="181" width="0.9795%" height="15" fill="rgb(241,83,37)"/><text x="28.6965%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,403,235 samples, 0.52%)</title><rect x="29.4268%" y="165" width="0.5174%" height="15" fill="rgb(233,36,39)"/><text x="29.6768%" y="175.50"></text></g><g><title>check_mod_liveness (1,139,972 samples, 0.42%)</title><rect x="29.5239%" y="149" width="0.4203%" height="15" fill="rgb(226,3,54)"/><text x="29.7739%" y="159.50"></text></g><g><title>type_uninhabited_from (328,152 samples, 0.12%)</title><rect x="29.8232%" y="133" width="0.1210%" height="15" fill="rgb(245,192,40)"/><text x="30.0732%" y="143.50"></text></g><g><title>mir_borrowck (427,706 samples, 0.16%)</title><rect x="30.8837%" y="53" width="0.1577%" height="15" fill="rgb(238,167,29)"/><text x="31.1337%" y="63.50"></text></g><g><title>eval_to_const_value_raw (861,609 samples, 0.32%)</title><rect x="30.7240%" y="133" width="0.3177%" height="15" fill="rgb(232,182,51)"/><text x="30.9740%" y="143.50"></text></g><g><title>eval_to_const_value_raw (853,199 samples, 0.31%)</title><rect x="30.7271%" y="117" width="0.3146%" height="15" fill="rgb(231,60,39)"/><text x="30.9771%" y="127.50"></text></g><g><title>eval_to_allocation_raw (846,219 samples, 0.31%)</title><rect x="30.7297%" y="101" width="0.3120%" height="15" fill="rgb(208,69,12)"/><text x="30.9797%" y="111.50"></text></g><g><title>mir_for_ctfe (610,987 samples, 0.23%)</title><rect x="30.8164%" y="85" width="0.2253%" height="15" fill="rgb(235,93,37)"/><text x="31.0664%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (548,887 samples, 0.20%)</title><rect x="30.8393%" y="69" width="0.2024%" height="15" fill="rgb(213,116,39)"/><text x="31.0893%" y="79.50"></text></g><g><title>mir_const_qualif (365,064 samples, 0.13%)</title><rect x="31.0614%" y="133" width="0.1346%" height="15" fill="rgb(222,207,29)"/><text x="31.3114%" y="143.50"></text></g><g><title>misc_checking_2 (4,947,275 samples, 1.82%)</title><rect x="29.4260%" y="181" width="1.8241%" height="15" fill="rgb(206,96,30)"/><text x="29.6760%" y="191.50">m..</text></g><g><title>match_checking (3,541,850 samples, 1.31%)</title><rect x="29.9442%" y="165" width="1.3059%" height="15" fill="rgb(218,138,4)"/><text x="30.1942%" y="175.50"></text></g><g><title>check_match (3,459,878 samples, 1.28%)</title><rect x="29.9744%" y="149" width="1.2757%" height="15" fill="rgb(250,191,14)"/><text x="30.2244%" y="159.50"></text></g><g><title>check_private_in_public (563,506 samples, 0.21%)</title><rect x="31.2543%" y="165" width="0.2078%" height="15" fill="rgb(239,60,40)"/><text x="31.5043%" y="175.50"></text></g><g><title>death_checking (1,165,473 samples, 0.43%)</title><rect x="31.4620%" y="165" width="0.4297%" height="15" fill="rgb(206,27,48)"/><text x="31.7120%" y="175.50"></text></g><g><title>param_env (555,228 samples, 0.20%)</title><rect x="32.4175%" y="133" width="0.2047%" height="15" fill="rgb(225,35,8)"/><text x="32.6675%" y="143.50"></text></g><g><title>resolve_instance (279,745 samples, 0.10%)</title><rect x="32.6222%" y="133" width="0.1031%" height="15" fill="rgb(250,213,24)"/><text x="32.8722%" y="143.50"></text></g><g><title>crate_lints (3,476,969 samples, 1.28%)</title><rect x="31.8925%" y="149" width="1.2820%" height="15" fill="rgb(247,123,22)"/><text x="32.1425%" y="159.50"></text></g><g><title>type_of (1,188,254 samples, 0.44%)</title><rect x="32.7363%" y="133" width="0.4381%" height="15" fill="rgb(231,138,38)"/><text x="32.9863%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (944,152 samples, 0.35%)</title><rect x="32.8263%" y="117" width="0.3481%" height="15" fill="rgb(231,145,46)"/><text x="33.0763%" y="127.50"></text></g><g><title>lint_checking (5,121,187 samples, 1.89%)</title><rect x="31.8917%" y="165" width="1.8882%" height="15" fill="rgb(251,118,11)"/><text x="32.1417%" y="175.50">l..</text></g><g><title>module_lints (1,642,288 samples, 0.61%)</title><rect x="33.1744%" y="149" width="0.6055%" height="15" fill="rgb(217,147,25)"/><text x="33.4244%" y="159.50"></text></g><g><title>lint_mod (1,633,068 samples, 0.60%)</title><rect x="33.1778%" y="133" width="0.6021%" height="15" fill="rgb(247,81,37)"/><text x="33.4278%" y="143.50"></text></g><g><title>layout_of (338,106 samples, 0.12%)</title><rect x="33.6553%" y="117" width="0.1247%" height="15" fill="rgb(209,12,38)"/><text x="33.9053%" y="127.50"></text></g><g><title>layout_of (271,423 samples, 0.10%)</title><rect x="33.6798%" y="101" width="0.1001%" height="15" fill="rgb(227,1,9)"/><text x="33.9298%" y="111.50"></text></g><g><title>privacy_access_levels (767,009 samples, 0.28%)</title><rect x="33.7799%" y="165" width="0.2828%" height="15" fill="rgb(248,47,43)"/><text x="34.0299%" y="175.50"></text></g><g><title>privacy_checking_modules (2,634,220 samples, 0.97%)</title><rect x="34.0627%" y="165" width="0.9712%" height="15" fill="rgb(221,10,30)"/><text x="34.3127%" y="175.50"></text></g><g><title>check_mod_privacy (2,628,320 samples, 0.97%)</title><rect x="34.0649%" y="149" width="0.9691%" height="15" fill="rgb(210,229,1)"/><text x="34.3149%" y="159.50"></text></g><g><title>misc_checking_3 (10,286,506 samples, 3.79%)</title><rect x="31.2501%" y="181" width="3.7926%" height="15" fill="rgb(222,148,37)"/><text x="31.5001%" y="191.50">misc..</text></g><g><title>adt_destructor (354,934 samples, 0.13%)</title><rect x="35.1240%" y="133" width="0.1309%" height="15" fill="rgb(234,67,33)"/><text x="35.3740%" y="143.50"></text></g><g><title>coherent_trait (346,434 samples, 0.13%)</title><rect x="35.1272%" y="117" width="0.1277%" height="15" fill="rgb(247,98,35)"/><text x="35.3772%" y="127.50"></text></g><g><title>specialization_graph_of (344,814 samples, 0.13%)</title><rect x="35.1278%" y="101" width="0.1271%" height="15" fill="rgb(247,138,52)"/><text x="35.3778%" y="111.50"></text></g><g><title>impl_parent (3,072,872 samples, 1.13%)</title><rect x="37.3633%" y="117" width="1.1330%" height="15" fill="rgb(213,79,30)"/><text x="37.6133%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,748,565 samples, 0.64%)</title><rect x="37.8516%" y="101" width="0.6447%" height="15" fill="rgb(246,177,23)"/><text x="38.1016%" y="111.50"></text></g><g><title>impl_trait_ref (6,295,086 samples, 2.32%)</title><rect x="38.4963%" y="117" width="2.3210%" height="15" fill="rgb(230,62,27)"/><text x="38.7463%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,788,975 samples, 1.77%)</title><rect x="39.0516%" y="101" width="1.7657%" height="15" fill="rgb(216,154,8)"/><text x="39.3016%" y="111.50"></text></g><g><title>trait_impls_of (1,185,233 samples, 0.44%)</title><rect x="40.8364%" y="117" width="0.4370%" height="15" fill="rgb(244,35,45)"/><text x="41.0864%" y="127.50"></text></g><g><title>implementations_of_trait (372,344 samples, 0.14%)</title><rect x="41.1361%" y="101" width="0.1373%" height="15" fill="rgb(251,115,12)"/><text x="41.3861%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (279,303 samples, 0.10%)</title><rect x="41.1704%" y="85" width="0.1030%" height="15" fill="rgb(240,54,50)"/><text x="41.4204%" y="95.50"></text></g><g><title>coherent_trait (16,720,897 samples, 6.16%)</title><rect x="35.1087%" y="149" width="6.1650%" height="15" fill="rgb(233,84,52)"/><text x="35.3587%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (16,298,563 samples, 6.01%)</title><rect x="35.2644%" y="133" width="6.0093%" height="15" fill="rgb(207,117,47)"/><text x="35.5144%" y="143.50">speciali..</text></g><g><title>coherence_checking (16,854,319 samples, 6.21%)</title><rect x="35.0988%" y="165" width="6.2142%" height="15" fill="rgb(249,43,39)"/><text x="35.3488%" y="175.50">coherenc..</text></g><g><title>associated_item (765,491 samples, 0.28%)</title><rect x="58.4285%" y="101" width="0.2822%" height="15" fill="rgb(209,38,44)"/><text x="58.6785%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (607,860 samples, 0.22%)</title><rect x="58.4866%" y="85" width="0.2241%" height="15" fill="rgb(236,212,23)"/><text x="58.7366%" y="95.50"></text></g><g><title>associated_items (1,120,756 samples, 0.41%)</title><rect x="58.3173%" y="117" width="0.4132%" height="15" fill="rgb(242,79,21)"/><text x="58.5673%" y="127.50"></text></g><g><title>adt_dtorck_constraint (497,445 samples, 0.18%)</title><rect x="59.0955%" y="85" width="0.1834%" height="15" fill="rgb(211,96,35)"/><text x="59.3455%" y="95.50"></text></g><g><title>dropck_outlives (1,474,901 samples, 0.54%)</title><rect x="58.7698%" y="117" width="0.5438%" height="15" fill="rgb(253,215,40)"/><text x="59.0198%" y="127.50"></text></g><g><title>adt_dtorck_constraint (938,008 samples, 0.35%)</title><rect x="58.9678%" y="101" width="0.3458%" height="15" fill="rgb(211,81,21)"/><text x="59.2178%" y="111.50"></text></g><g><title>adt_sized_constraint (325,204 samples, 0.12%)</title><rect x="60.1653%" y="101" width="0.1199%" height="15" fill="rgb(208,190,38)"/><text x="60.4153%" y="111.50"></text></g><g><title>predicates_of (448,426 samples, 0.17%)</title><rect x="60.3557%" y="101" width="0.1653%" height="15" fill="rgb(235,213,38)"/><text x="60.6057%" y="111.50"></text></g><g><title>predicates_defined_on (287,916 samples, 0.11%)</title><rect x="60.4149%" y="85" width="0.1062%" height="15" fill="rgb(237,122,38)"/><text x="60.6649%" y="95.50"></text></g><g><title>evaluate_obligation (3,743,268 samples, 1.38%)</title><rect x="59.3136%" y="117" width="1.3801%" height="15" fill="rgb(244,218,35)"/><text x="59.5636%" y="127.50"></text></g><g><title>trait_impls_of (374,994 samples, 0.14%)</title><rect x="60.5555%" y="101" width="0.1383%" height="15" fill="rgb(240,68,47)"/><text x="60.8055%" y="111.50"></text></g><g><title>item_attrs (333,733 samples, 0.12%)</title><rect x="60.9704%" y="117" width="0.1230%" height="15" fill="rgb(210,16,53)"/><text x="61.2204%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (319,363 samples, 0.12%)</title><rect x="60.9757%" y="101" width="0.1177%" height="15" fill="rgb(235,124,12)"/><text x="61.2257%" y="111.50"></text></g><g><title>evaluate_obligation (548,727 samples, 0.20%)</title><rect x="61.2606%" y="101" width="0.2023%" height="15" fill="rgb(224,169,11)"/><text x="61.5106%" y="111.50"></text></g><g><title>method_autoderef_steps (915,860 samples, 0.34%)</title><rect x="61.1352%" y="117" width="0.3377%" height="15" fill="rgb(250,166,2)"/><text x="61.3852%" y="127.50"></text></g><g><title>predicates_of (582,219 samples, 0.21%)</title><rect x="61.5299%" y="117" width="0.2147%" height="15" fill="rgb(242,216,29)"/><text x="61.7799%" y="127.50"></text></g><g><title>predicates_defined_on (387,905 samples, 0.14%)</title><rect x="61.6015%" y="101" width="0.1430%" height="15" fill="rgb(230,116,27)"/><text x="61.8515%" y="111.50"></text></g><g><title>associated_item (921,931 samples, 0.34%)</title><rect x="70.0506%" y="85" width="0.3399%" height="15" fill="rgb(228,99,48)"/><text x="70.3006%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (877,980 samples, 0.32%)</title><rect x="70.0668%" y="69" width="0.3237%" height="15" fill="rgb(253,11,6)"/><text x="70.3168%" y="79.50"></text></g><g><title>associated_items (1,054,002 samples, 0.39%)</title><rect x="70.0099%" y="101" width="0.3886%" height="15" fill="rgb(247,143,39)"/><text x="70.2599%" y="111.50"></text></g><g><title>dropck_outlives (578,508 samples, 0.21%)</title><rect x="70.4315%" y="101" width="0.2133%" height="15" fill="rgb(236,97,10)"/><text x="70.6815%" y="111.50"></text></g><g><title>adt_dtorck_constraint (337,673 samples, 0.12%)</title><rect x="70.5203%" y="85" width="0.1245%" height="15" fill="rgb(233,208,19)"/><text x="70.7703%" y="95.50"></text></g><g><title>generics_of (903,704 samples, 0.33%)</title><rect x="71.6488%" y="85" width="0.3332%" height="15" fill="rgb(216,164,2)"/><text x="71.8988%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (747,563 samples, 0.28%)</title><rect x="71.7063%" y="69" width="0.2756%" height="15" fill="rgb(220,129,5)"/><text x="71.9563%" y="79.50"></text></g><g><title>evaluate_obligation (4,415,698 samples, 1.63%)</title><rect x="70.6448%" y="101" width="1.6281%" height="15" fill="rgb(242,17,10)"/><text x="70.8948%" y="111.50"></text></g><g><title>is_copy_raw (491,268 samples, 0.18%)</title><rect x="72.4344%" y="101" width="0.1811%" height="15" fill="rgb(242,107,0)"/><text x="72.6844%" y="111.50"></text></g><g><title>evaluate_obligation (393,567 samples, 0.15%)</title><rect x="72.4705%" y="85" width="0.1451%" height="15" fill="rgb(251,28,31)"/><text x="72.7205%" y="95.50"></text></g><g><title>evaluate_obligation (306,724 samples, 0.11%)</title><rect x="72.7777%" y="85" width="0.1131%" height="15" fill="rgb(233,223,10)"/><text x="73.0277%" y="95.50"></text></g><g><title>method_autoderef_steps (582,319 samples, 0.21%)</title><rect x="72.6791%" y="101" width="0.2147%" height="15" fill="rgb(215,21,27)"/><text x="72.9291%" y="111.50"></text></g><g><title>predicates_of (317,681 samples, 0.12%)</title><rect x="72.9023%" y="101" width="0.1171%" height="15" fill="rgb(232,23,21)"/><text x="73.1523%" y="111.50"></text></g><g><title>typeck (30,517,172 samples, 11.25%)</title><rect x="61.8312%" y="117" width="11.2517%" height="15" fill="rgb(244,5,23)"/><text x="62.0812%" y="127.50">typeck</text></g><g><title>item_bodies_checking (86,224,147 samples, 31.79%)</title><rect x="41.3388%" y="165" width="31.7908%" height="15" fill="rgb(226,81,46)"/><text x="41.5888%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (86,219,497 samples, 31.79%)</title><rect x="41.3405%" y="149" width="31.7891%" height="15" fill="rgb(247,70,30)"/><text x="41.5905%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (86,003,981 samples, 31.71%)</title><rect x="41.4199%" y="133" width="31.7097%" height="15" fill="rgb(212,68,19)"/><text x="41.6699%" y="143.50">typeck</text></g><g><title>item_types_checking (2,530,998 samples, 0.93%)</title><rect x="73.1296%" y="165" width="0.9332%" height="15" fill="rgb(240,187,13)"/><text x="73.3796%" y="175.50"></text></g><g><title>check_mod_item_types (2,523,738 samples, 0.93%)</title><rect x="73.1323%" y="149" width="0.9305%" height="15" fill="rgb(223,113,26)"/><text x="73.3823%" y="159.50"></text></g><g><title>fn_sig (699,785 samples, 0.26%)</title><rect x="74.3279%" y="133" width="0.2580%" height="15" fill="rgb(206,192,2)"/><text x="74.5779%" y="143.50"></text></g><g><title>named_region_map (1,175,666 samples, 0.43%)</title><rect x="74.6900%" y="117" width="0.4335%" height="15" fill="rgb(241,108,4)"/><text x="74.9400%" y="127.50"></text></g><g><title>resolve_lifetimes (1,117,075 samples, 0.41%)</title><rect x="74.7116%" y="101" width="0.4119%" height="15" fill="rgb(247,173,49)"/><text x="74.9616%" y="111.50"></text></g><g><title>lint_levels (427,385 samples, 0.16%)</title><rect x="74.9659%" y="85" width="0.1576%" height="15" fill="rgb(224,114,35)"/><text x="75.2159%" y="95.50"></text></g><g><title>generics_of (1,488,510 samples, 0.55%)</title><rect x="74.5859%" y="133" width="0.5488%" height="15" fill="rgb(245,159,27)"/><text x="74.8359%" y="143.50"></text></g><g><title>explicit_predicates_of (547,476 samples, 0.20%)</title><rect x="75.3171%" y="101" width="0.2019%" height="15" fill="rgb(245,172,44)"/><text x="75.5671%" y="111.50"></text></g><g><title>predicates_of (1,515,727 samples, 0.56%)</title><rect x="75.1768%" y="133" width="0.5588%" height="15" fill="rgb(236,23,11)"/><text x="75.4268%" y="143.50"></text></g><g><title>predicates_defined_on (1,373,006 samples, 0.51%)</title><rect x="75.2295%" y="117" width="0.5062%" height="15" fill="rgb(205,117,38)"/><text x="75.4795%" y="127.50"></text></g><g><title>inferred_outlives_of (587,846 samples, 0.22%)</title><rect x="75.5189%" y="101" width="0.2167%" height="15" fill="rgb(237,72,25)"/><text x="75.7689%" y="111.50"></text></g><g><title>inferred_outlives_crate (540,096 samples, 0.20%)</title><rect x="75.5365%" y="85" width="0.1991%" height="15" fill="rgb(244,70,9)"/><text x="75.7865%" y="95.50"></text></g><g><title>type_of (324,734 samples, 0.12%)</title><rect x="75.6160%" y="69" width="0.1197%" height="15" fill="rgb(217,125,39)"/><text x="75.8660%" y="79.50"></text></g><g><title>type_collecting (4,807,644 samples, 1.77%)</title><rect x="74.0648%" y="165" width="1.7726%" height="15" fill="rgb(235,36,10)"/><text x="74.3148%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,794,903 samples, 1.77%)</title><rect x="74.0695%" y="149" width="1.7679%" height="15" fill="rgb(251,123,47)"/><text x="74.3195%" y="159.50"></text></g><g><title>evaluate_obligation (787,941 samples, 0.29%)</title><rect x="77.5527%" y="133" width="0.2905%" height="15" fill="rgb(221,13,13)"/><text x="77.8027%" y="143.50"></text></g><g><title>implied_outlives_bounds (388,115 samples, 0.14%)</title><rect x="77.8434%" y="133" width="0.1431%" height="15" fill="rgb(238,131,9)"/><text x="78.0934%" y="143.50"></text></g><g><title>object_safety_violations (359,774 samples, 0.13%)</title><rect x="77.9865%" y="133" width="0.1326%" height="15" fill="rgb(211,50,8)"/><text x="78.2365%" y="143.50"></text></g><g><title>param_env (576,738 samples, 0.21%)</title><rect x="78.1191%" y="133" width="0.2126%" height="15" fill="rgb(245,182,24)"/><text x="78.3691%" y="143.50"></text></g><g><title>region_scope_tree (1,256,349 samples, 0.46%)</title><rect x="78.3450%" y="133" width="0.4632%" height="15" fill="rgb(242,14,37)"/><text x="78.5950%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,591,548 samples, 2.80%)</title><rect x="76.0300%" y="149" width="2.7990%" height="15" fill="rgb(246,228,12)"/><text x="76.2800%" y="159.50">ch..</text></g><g><title>adt_def (355,547 samples, 0.13%)</title><rect x="80.3333%" y="101" width="0.1311%" height="15" fill="rgb(213,55,15)"/><text x="80.5833%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (349,296 samples, 0.13%)</title><rect x="80.3357%" y="85" width="0.1288%" height="15" fill="rgb(209,9,3)"/><text x="80.5857%" y="95.50"></text></g><g><title>item_attrs (278,475 samples, 0.10%)</title><rect x="80.3618%" y="69" width="0.1027%" height="15" fill="rgb(230,59,30)"/><text x="80.6118%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (272,365 samples, 0.10%)</title><rect x="80.3640%" y="53" width="0.1004%" height="15" fill="rgb(209,121,21)"/><text x="80.6140%" y="63.50"></text></g><g><title>adt_sized_constraint (476,824 samples, 0.18%)</title><rect x="80.4644%" y="101" width="0.1758%" height="15" fill="rgb(220,109,13)"/><text x="80.7144%" y="111.50"></text></g><g><title>adt_sized_constraint (897,531 samples, 0.33%)</title><rect x="80.3202%" y="117" width="0.3309%" height="15" fill="rgb(232,18,1)"/><text x="80.5702%" y="127.50"></text></g><g><title>evaluate_obligation (2,353,265 samples, 0.87%)</title><rect x="79.8283%" y="133" width="0.8676%" height="15" fill="rgb(215,41,42)"/><text x="80.0783%" y="143.50"></text></g><g><title>param_env (564,223 samples, 0.21%)</title><rect x="80.8541%" y="133" width="0.2080%" height="15" fill="rgb(224,123,36)"/><text x="81.1041%" y="143.50"></text></g><g><title>check_item_well_formed (6,423,070 samples, 2.37%)</title><rect x="78.8290%" y="149" width="2.3682%" height="15" fill="rgb(240,125,3)"/><text x="79.0790%" y="159.50">ch..</text></g><g><title>analysis (219,804,684 samples, 81.04%)</title><rect x="0.2821%" y="197" width="81.0420%" height="15" fill="rgb(205,98,50)"/><text x="0.5321%" y="207.50">analysis</text></g><g><title>type_check_crate (125,525,698 samples, 46.28%)</title><rect x="35.0427%" y="181" width="46.2813%" height="15" fill="rgb(205,185,37)"/><text x="35.2927%" y="191.50">type_check_crate</text></g><g><title>wf_checking (14,867,597 samples, 5.48%)</title><rect x="75.8424%" y="165" width="5.4817%" height="15" fill="rgb(238,207,15)"/><text x="76.0924%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (344,004 samples, 0.13%)</title><rect x="81.1972%" y="149" width="0.1268%" height="15" fill="rgb(213,199,42)"/><text x="81.4472%" y="159.50"></text></g><g><title>codegen_crate (419,705 samples, 0.15%)</title><rect x="81.3265%" y="197" width="0.1547%" height="15" fill="rgb(235,201,11)"/><text x="81.5765%" y="207.50"></text></g><g><title>metadata_register_crate (1,595,519 samples, 0.59%)</title><rect x="88.4056%" y="149" width="0.5883%" height="15" fill="rgb(207,46,11)"/><text x="88.6556%" y="159.50"></text></g><g><title>metadata_register_crate (572,797 samples, 0.21%)</title><rect x="88.7827%" y="133" width="0.2112%" height="15" fill="rgb(241,35,35)"/><text x="89.0327%" y="143.50"></text></g><g><title>macro_expand_crate (20,048,714 samples, 7.39%)</title><rect x="81.7077%" y="181" width="7.3920%" height="15" fill="rgb(243,32,47)"/><text x="81.9577%" y="191.50">macro_expa..</text></g><g><title>expand_crate (20,037,384 samples, 7.39%)</title><rect x="81.7119%" y="165" width="7.3878%" height="15" fill="rgb(247,202,23)"/><text x="81.9619%" y="175.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (287,025 samples, 0.11%)</title><rect x="88.9939%" y="149" width="0.1058%" height="15" fill="rgb(219,102,11)"/><text x="89.2439%" y="159.50"></text></g><g><title>finalize_macro_resolutions (271,293 samples, 0.10%)</title><rect x="89.1800%" y="165" width="0.1000%" height="15" fill="rgb(243,110,44)"/><text x="89.4300%" y="175.50"></text></g><g><title>late_resolve_crate (8,314,323 samples, 3.07%)</title><rect x="89.2800%" y="165" width="3.0655%" height="15" fill="rgb(222,74,54)"/><text x="89.5300%" y="175.50">lat..</text></g><g><title>configure_and_expand (29,765,863 samples, 10.97%)</title><rect x="81.4812%" y="197" width="10.9747%" height="15" fill="rgb(216,99,12)"/><text x="81.7312%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (9,024,481 samples, 3.33%)</title><rect x="89.1286%" y="181" width="3.3273%" height="15" fill="rgb(226,22,26)"/><text x="89.3786%" y="191.50">res..</text></g><g><title>drop_ast (429,784 samples, 0.16%)</title><rect x="92.4559%" y="197" width="0.1585%" height="15" fill="rgb(217,163,10)"/><text x="92.7059%" y="207.50"></text></g><g><title>early_lint_checks (994,532 samples, 0.37%)</title><rect x="92.6221%" y="197" width="0.3667%" height="15" fill="rgb(213,25,53)"/><text x="92.8721%" y="207.50"></text></g><g><title>free_global_ctxt (5,452,982 samples, 2.01%)</title><rect x="92.9887%" y="197" width="2.0105%" height="15" fill="rgb(252,105,26)"/><text x="93.2387%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,630,369 samples, 0.97%)</title><rect x="94.9993%" y="197" width="0.9698%" height="15" fill="rgb(220,39,43)"/><text x="95.2493%" y="207.50"></text></g><g><title>hir_lowering (7,737,386 samples, 2.85%)</title><rect x="95.9691%" y="197" width="2.8528%" height="15" fill="rgb(229,68,48)"/><text x="96.2191%" y="207.50">hi..</text></g><g><title>link (295,183 samples, 0.11%)</title><rect x="98.8219%" y="197" width="0.1088%" height="15" fill="rgb(252,8,32)"/><text x="99.0719%" y="207.50"></text></g><g><title>parse_crate (679,008 samples, 0.25%)</title><rect x="98.9307%" y="197" width="0.2504%" height="15" fill="rgb(223,20,43)"/><text x="99.1807%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,474,166 samples, 0.54%)</title><rect x="99.2578%" y="197" width="0.5435%" height="15" fill="rgb(229,81,49)"/><text x="99.5078%" y="207.50"></text></g><g><title>all (271,223,230 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (271,223,230 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (427,215 samples, 0.16%)</title><rect x="99.8425%" y="197" width="0.1575%" height="15" fill="rgb(249,174,33)"/><text x="100.0925%" y="207.50"></text></g></svg></svg>