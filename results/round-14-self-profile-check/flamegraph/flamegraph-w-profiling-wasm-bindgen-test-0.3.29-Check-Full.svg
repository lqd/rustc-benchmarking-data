<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (401,934 samples, 0.14%)</title><rect x="10.0691%" y="117" width="0.1363%" height="15" fill="rgb(227,0,7)"/><text x="10.3191%" y="127.50"></text></g><g><title>item_attrs (328,693 samples, 0.11%)</title><rect x="10.6036%" y="85" width="0.1114%" height="15" fill="rgb(217,0,24)"/><text x="10.8536%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (313,743 samples, 0.11%)</title><rect x="10.6086%" y="69" width="0.1064%" height="15" fill="rgb(221,193,54)"/><text x="10.8586%" y="79.50"></text></g><g><title>codegen_fn_attrs (538,996 samples, 0.18%)</title><rect x="10.5449%" y="101" width="0.1827%" height="15" fill="rgb(248,212,6)"/><text x="10.7949%" y="111.50"></text></g><g><title>adt_drop_tys (500,574 samples, 0.17%)</title><rect x="12.7829%" y="69" width="0.1697%" height="15" fill="rgb(208,68,35)"/><text x="13.0329%" y="79.50"></text></g><g><title>is_copy_raw (993,911 samples, 0.34%)</title><rect x="12.9526%" y="69" width="0.3369%" height="15" fill="rgb(232,128,0)"/><text x="13.2026%" y="79.50"></text></g><g><title>evaluate_obligation (772,299 samples, 0.26%)</title><rect x="13.0277%" y="53" width="0.2618%" height="15" fill="rgb(207,160,47)"/><text x="13.2777%" y="63.50"></text></g><g><title>needs_drop_raw (1,714,156 samples, 0.58%)</title><rect x="12.7141%" y="85" width="0.5811%" height="15" fill="rgb(228,23,34)"/><text x="12.9641%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (729,071 samples, 0.25%)</title><rect x="13.4878%" y="69" width="0.2472%" height="15" fill="rgb(218,30,26)"/><text x="13.7378%" y="79.50"></text></g><g><title>impl_parent (1,149,446 samples, 0.39%)</title><rect x="14.3980%" y="53" width="0.3897%" height="15" fill="rgb(220,122,19)"/><text x="14.6480%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (738,294 samples, 0.25%)</title><rect x="14.5374%" y="37" width="0.2503%" height="15" fill="rgb(250,228,42)"/><text x="14.7874%" y="47.50"></text></g><g><title>specialization_graph_of (6,829,818 samples, 2.32%)</title><rect x="13.7965%" y="69" width="2.3153%" height="15" fill="rgb(240,193,28)"/><text x="14.0465%" y="79.50">s..</text></g><g><title>impl_trait_ref (3,906,055 samples, 1.32%)</title><rect x="14.7877%" y="53" width="1.3241%" height="15" fill="rgb(216,20,37)"/><text x="15.0377%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,484,769 samples, 1.18%)</title><rect x="14.9305%" y="37" width="1.1813%" height="15" fill="rgb(206,188,39)"/><text x="15.1805%" y="47.50"></text></g><g><title>resolve_instance (8,496,085 samples, 2.88%)</title><rect x="13.2952%" y="85" width="2.8802%" height="15" fill="rgb(217,207,13)"/><text x="13.5452%" y="95.50">re..</text></g><g><title>thir_body (2,187,200 samples, 0.74%)</title><rect x="16.2019%" y="85" width="0.7415%" height="15" fill="rgb(231,73,38)"/><text x="16.4519%" y="95.50"></text></g><g><title>mir_const (22,104,056 samples, 7.49%)</title><rect x="9.4723%" y="133" width="7.4933%" height="15" fill="rgb(225,20,46)"/><text x="9.7223%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (19,941,441 samples, 6.76%)</title><rect x="10.2054%" y="117" width="6.7601%" height="15" fill="rgb(210,31,41)"/><text x="10.4554%" y="127.50">unsafety_..</text></g><g><title>mir_built (18,400,773 samples, 6.24%)</title><rect x="10.7277%" y="101" width="6.2378%" height="15" fill="rgb(221,200,47)"/><text x="10.9777%" y="111.50">mir_built</text></g><g><title>mir_const (516,994 samples, 0.18%)</title><rect x="17.2507%" y="117" width="0.1753%" height="15" fill="rgb(226,26,5)"/><text x="17.5007%" y="127.50"></text></g><g><title>unsafety_check_result (388,771 samples, 0.13%)</title><rect x="17.2942%" y="101" width="0.1318%" height="15" fill="rgb(249,33,26)"/><text x="17.5442%" y="111.50"></text></g><g><title>mir_built (316,650 samples, 0.11%)</title><rect x="17.3186%" y="85" width="0.1073%" height="15" fill="rgb(235,183,28)"/><text x="17.5686%" y="95.50"></text></g><g><title>mir_promoted (25,511,563 samples, 8.65%)</title><rect x="8.8557%" y="149" width="8.6484%" height="15" fill="rgb(221,5,38)"/><text x="9.1057%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (1,588,730 samples, 0.54%)</title><rect x="16.9655%" y="133" width="0.5386%" height="15" fill="rgb(247,18,42)"/><text x="17.2155%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,008,623 samples, 0.34%)</title><rect x="17.5055%" y="149" width="0.3419%" height="15" fill="rgb(241,131,45)"/><text x="17.7555%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,447,483 samples, 0.49%)</title><rect x="17.8474%" y="149" width="0.4907%" height="15" fill="rgb(249,31,29)"/><text x="18.0974%" y="159.50"></text></g><g><title>normalize_projection_ty (766,048 samples, 0.26%)</title><rect x="18.0784%" y="133" width="0.2597%" height="15" fill="rgb(225,111,53)"/><text x="18.3284%" y="143.50"></text></g><g><title>type_op_normalize_ty (779,979 samples, 0.26%)</title><rect x="18.3726%" y="149" width="0.2644%" height="15" fill="rgb(238,160,17)"/><text x="18.6226%" y="159.50"></text></g><g><title>normalize_projection_ty (459,834 samples, 0.16%)</title><rect x="18.4812%" y="133" width="0.1559%" height="15" fill="rgb(214,148,48)"/><text x="18.7312%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,621,642 samples, 1.23%)</title><rect x="18.6370%" y="149" width="1.2277%" height="15" fill="rgb(232,36,49)"/><text x="18.8870%" y="159.50"></text></g><g><title>MIR_borrow_checking (57,301,986 samples, 19.43%)</title><rect x="0.4415%" y="181" width="19.4253%" height="15" fill="rgb(209,103,24)"/><text x="0.6915%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (56,982,492 samples, 19.32%)</title><rect x="0.5499%" y="165" width="19.3170%" height="15" fill="rgb(229,88,8)"/><text x="0.7999%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (622,617 samples, 0.21%)</title><rect x="19.8669%" y="181" width="0.2111%" height="15" fill="rgb(213,181,19)"/><text x="20.1169%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (306,713 samples, 0.10%)</title><rect x="19.9740%" y="165" width="0.1040%" height="15" fill="rgb(254,191,54)"/><text x="20.2240%" y="175.50"></text></g><g><title>hir_module_items (364,763 samples, 0.12%)</title><rect x="20.0779%" y="181" width="0.1237%" height="15" fill="rgb(241,83,37)"/><text x="20.3279%" y="191.50"></text></g><g><title>should_inherit_track_caller (306,844 samples, 0.10%)</title><rect x="20.4751%" y="133" width="0.1040%" height="15" fill="rgb(233,36,39)"/><text x="20.7251%" y="143.50"></text></g><g><title>codegen_fn_attrs (592,500 samples, 0.20%)</title><rect x="20.3836%" y="149" width="0.2009%" height="15" fill="rgb(226,3,54)"/><text x="20.6336%" y="159.50"></text></g><g><title>check_mod_attrs (1,424,107 samples, 0.48%)</title><rect x="20.2104%" y="165" width="0.4828%" height="15" fill="rgb(245,192,40)"/><text x="20.4604%" y="175.50"></text></g><g><title>lint_levels (317,233 samples, 0.11%)</title><rect x="20.5857%" y="149" width="0.1075%" height="15" fill="rgb(238,167,29)"/><text x="20.8357%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (600,655 samples, 0.20%)</title><rect x="20.8252%" y="165" width="0.2036%" height="15" fill="rgb(232,182,51)"/><text x="21.0752%" y="175.50"></text></g><g><title>misc_checking_1 (2,539,498 samples, 0.86%)</title><rect x="20.2018%" y="181" width="0.8609%" height="15" fill="rgb(231,60,39)"/><text x="20.4518%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (886,780 samples, 0.30%)</title><rect x="21.0632%" y="165" width="0.3006%" height="15" fill="rgb(208,69,12)"/><text x="21.3132%" y="175.50"></text></g><g><title>check_mod_liveness (703,107 samples, 0.24%)</title><rect x="21.1255%" y="149" width="0.2384%" height="15" fill="rgb(235,93,37)"/><text x="21.3755%" y="159.50"></text></g><g><title>misc_checking_2 (1,780,780 samples, 0.60%)</title><rect x="21.0627%" y="181" width="0.6037%" height="15" fill="rgb(213,116,39)"/><text x="21.3127%" y="191.50"></text></g><g><title>match_checking (892,400 samples, 0.30%)</title><rect x="21.3638%" y="165" width="0.3025%" height="15" fill="rgb(222,207,29)"/><text x="21.6138%" y="175.50"></text></g><g><title>check_match (815,768 samples, 0.28%)</title><rect x="21.3898%" y="149" width="0.2765%" height="15" fill="rgb(206,96,30)"/><text x="21.6398%" y="159.50"></text></g><g><title>check_private_in_public (467,145 samples, 0.16%)</title><rect x="21.6696%" y="165" width="0.1584%" height="15" fill="rgb(218,138,4)"/><text x="21.9196%" y="175.50"></text></g><g><title>death_checking (792,629 samples, 0.27%)</title><rect x="21.8280%" y="165" width="0.2687%" height="15" fill="rgb(250,191,14)"/><text x="22.0780%" y="175.50"></text></g><g><title>eval_to_allocation_raw (727,178 samples, 0.25%)</title><rect x="22.5158%" y="133" width="0.2465%" height="15" fill="rgb(239,60,40)"/><text x="22.7658%" y="143.50"></text></g><g><title>eval_to_allocation_raw (724,438 samples, 0.25%)</title><rect x="22.5167%" y="117" width="0.2456%" height="15" fill="rgb(206,27,48)"/><text x="22.7667%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (304,834 samples, 0.10%)</title><rect x="22.6590%" y="101" width="0.1033%" height="15" fill="rgb(225,35,8)"/><text x="22.9090%" y="111.50"></text></g><g><title>eval_to_const_value_raw (323,904 samples, 0.11%)</title><rect x="22.7623%" y="133" width="0.1098%" height="15" fill="rgb(250,213,24)"/><text x="23.0123%" y="143.50"></text></g><g><title>eval_to_const_value_raw (312,004 samples, 0.11%)</title><rect x="22.7663%" y="117" width="0.1058%" height="15" fill="rgb(247,123,22)"/><text x="23.0163%" y="127.50"></text></g><g><title>param_env (522,366 samples, 0.18%)</title><rect x="22.8721%" y="133" width="0.1771%" height="15" fill="rgb(231,138,38)"/><text x="23.1221%" y="143.50"></text></g><g><title>crate_lints (4,530,252 samples, 1.54%)</title><rect x="22.0975%" y="149" width="1.5358%" height="15" fill="rgb(231,145,46)"/><text x="22.3475%" y="159.50"></text></g><g><title>type_of (1,609,569 samples, 0.55%)</title><rect x="23.0876%" y="133" width="0.5456%" height="15" fill="rgb(251,118,11)"/><text x="23.3376%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,144,702 samples, 0.39%)</title><rect x="23.2452%" y="117" width="0.3881%" height="15" fill="rgb(217,147,25)"/><text x="23.4952%" y="127.50"></text></g><g><title>lint_checking (5,482,252 samples, 1.86%)</title><rect x="22.0967%" y="165" width="1.8585%" height="15" fill="rgb(247,81,37)"/><text x="22.3467%" y="175.50">l..</text></g><g><title>module_lints (949,670 samples, 0.32%)</title><rect x="23.6332%" y="149" width="0.3219%" height="15" fill="rgb(209,12,38)"/><text x="23.8832%" y="159.50"></text></g><g><title>lint_mod (941,810 samples, 0.32%)</title><rect x="23.6359%" y="133" width="0.3193%" height="15" fill="rgb(227,1,9)"/><text x="23.8859%" y="143.50"></text></g><g><title>privacy_access_levels (401,345 samples, 0.14%)</title><rect x="23.9552%" y="165" width="0.1361%" height="15" fill="rgb(248,47,43)"/><text x="24.2052%" y="175.50"></text></g><g><title>privacy_checking_modules (1,833,641 samples, 0.62%)</title><rect x="24.0912%" y="165" width="0.6216%" height="15" fill="rgb(221,10,30)"/><text x="24.3412%" y="175.50"></text></g><g><title>check_mod_privacy (1,829,220 samples, 0.62%)</title><rect x="24.0927%" y="149" width="0.6201%" height="15" fill="rgb(210,229,1)"/><text x="24.3427%" y="159.50"></text></g><g><title>misc_checking_3 (9,011,372 samples, 3.05%)</title><rect x="21.6663%" y="181" width="3.0548%" height="15" fill="rgb(222,148,37)"/><text x="21.9163%" y="191.50">mis..</text></g><g><title>impl_parent (983,852 samples, 0.33%)</title><rect x="26.2277%" y="117" width="0.3335%" height="15" fill="rgb(234,67,33)"/><text x="26.4777%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (575,926 samples, 0.20%)</title><rect x="26.3660%" y="101" width="0.1952%" height="15" fill="rgb(247,98,35)"/><text x="26.6160%" y="111.50"></text></g><g><title>impl_trait_ref (1,996,437 samples, 0.68%)</title><rect x="26.5612%" y="117" width="0.6768%" height="15" fill="rgb(247,138,52)"/><text x="26.8112%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,594,649 samples, 0.54%)</title><rect x="26.6974%" y="101" width="0.5406%" height="15" fill="rgb(213,79,30)"/><text x="26.9474%" y="111.50"></text></g><g><title>predicates_of (373,982 samples, 0.13%)</title><rect x="27.2627%" y="117" width="0.1268%" height="15" fill="rgb(246,177,23)"/><text x="27.5127%" y="127.50"></text></g><g><title>trait_impls_of (456,582 samples, 0.15%)</title><rect x="27.3900%" y="117" width="0.1548%" height="15" fill="rgb(230,62,27)"/><text x="27.6400%" y="127.50"></text></g><g><title>coherent_trait (8,252,042 samples, 2.80%)</title><rect x="24.7811%" y="149" width="2.7974%" height="15" fill="rgb(216,154,8)"/><text x="25.0311%" y="159.50">co..</text></g><g><title>specialization_graph_of (8,222,002 samples, 2.79%)</title><rect x="24.7913%" y="133" width="2.7873%" height="15" fill="rgb(244,35,45)"/><text x="25.0413%" y="143.50">sp..</text></g><g><title>coherence_checking (8,366,564 samples, 2.84%)</title><rect x="24.7739%" y="165" width="2.8363%" height="15" fill="rgb(251,115,12)"/><text x="25.0239%" y="175.50">co..</text></g><g><title>associated_item (536,106 samples, 0.18%)</title><rect x="38.4940%" y="101" width="0.1817%" height="15" fill="rgb(240,54,50)"/><text x="38.7440%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (416,675 samples, 0.14%)</title><rect x="38.5345%" y="85" width="0.1413%" height="15" fill="rgb(233,84,52)"/><text x="38.7845%" y="95.50"></text></g><g><title>associated_items (818,938 samples, 0.28%)</title><rect x="38.4172%" y="117" width="0.2776%" height="15" fill="rgb(207,117,47)"/><text x="38.6672%" y="127.50"></text></g><g><title>adt_dtorck_constraint (351,833 samples, 0.12%)</title><rect x="38.8507%" y="101" width="0.1193%" height="15" fill="rgb(249,43,39)"/><text x="39.1007%" y="111.50"></text></g><g><title>dropck_outlives (764,306 samples, 0.26%)</title><rect x="38.7380%" y="117" width="0.2591%" height="15" fill="rgb(209,38,44)"/><text x="38.9880%" y="127.50"></text></g><g><title>predicates_of (489,035 samples, 0.17%)</title><rect x="39.9493%" y="101" width="0.1658%" height="15" fill="rgb(236,212,23)"/><text x="40.1993%" y="111.50"></text></g><g><title>specializes (792,328 samples, 0.27%)</title><rect x="40.1150%" y="101" width="0.2686%" height="15" fill="rgb(242,79,21)"/><text x="40.3650%" y="111.50"></text></g><g><title>param_env (377,064 samples, 0.13%)</title><rect x="40.2558%" y="85" width="0.1278%" height="15" fill="rgb(211,96,35)"/><text x="40.5058%" y="95.50"></text></g><g><title>trait_impls_of (1,212,427 samples, 0.41%)</title><rect x="40.3888%" y="101" width="0.4110%" height="15" fill="rgb(253,215,40)"/><text x="40.6388%" y="111.50"></text></g><g><title>implementations_of_trait (549,817 samples, 0.19%)</title><rect x="40.6134%" y="85" width="0.1864%" height="15" fill="rgb(211,81,21)"/><text x="40.8634%" y="95.50"></text></g><g><title>evaluate_obligation (5,318,748 samples, 1.80%)</title><rect x="38.9971%" y="117" width="1.8031%" height="15" fill="rgb(208,190,38)"/><text x="39.2471%" y="127.50">e..</text></g><g><title>evaluate_obligation (465,783 samples, 0.16%)</title><rect x="41.3257%" y="101" width="0.1579%" height="15" fill="rgb(235,213,38)"/><text x="41.5757%" y="111.50"></text></g><g><title>method_autoderef_steps (1,015,540 samples, 0.34%)</title><rect x="41.1541%" y="117" width="0.3443%" height="15" fill="rgb(237,122,38)"/><text x="41.4041%" y="127.50"></text></g><g><title>predicates_of (731,260 samples, 0.25%)</title><rect x="41.5306%" y="117" width="0.2479%" height="15" fill="rgb(244,218,35)"/><text x="41.7806%" y="127.50"></text></g><g><title>predicates_defined_on (505,086 samples, 0.17%)</title><rect x="41.6073%" y="101" width="0.1712%" height="15" fill="rgb(240,68,47)"/><text x="41.8573%" y="111.50"></text></g><g><title>associated_items (365,054 samples, 0.12%)</title><rect x="44.5687%" y="101" width="0.1238%" height="15" fill="rgb(210,16,53)"/><text x="44.8187%" y="111.50"></text></g><g><title>evaluate_obligation (946,054 samples, 0.32%)</title><rect x="44.7592%" y="101" width="0.3207%" height="15" fill="rgb(235,124,12)"/><text x="45.0092%" y="111.50"></text></g><g><title>is_copy_raw (500,249 samples, 0.17%)</title><rect x="45.1570%" y="101" width="0.1696%" height="15" fill="rgb(224,169,11)"/><text x="45.4070%" y="111.50"></text></g><g><title>evaluate_obligation (402,316 samples, 0.14%)</title><rect x="45.1902%" y="85" width="0.1364%" height="15" fill="rgb(250,166,2)"/><text x="45.4402%" y="95.50"></text></g><g><title>method_autoderef_steps (311,593 samples, 0.11%)</title><rect x="45.3823%" y="101" width="0.1056%" height="15" fill="rgb(242,216,29)"/><text x="45.6323%" y="111.50"></text></g><g><title>typeck (11,084,046 samples, 3.76%)</title><rect x="41.8317%" y="117" width="3.7575%" height="15" fill="rgb(230,116,27)"/><text x="42.0817%" y="127.50">type..</text></g><g><title>item_bodies_checking (53,071,917 samples, 17.99%)</title><rect x="27.6335%" y="165" width="17.9913%" height="15" fill="rgb(228,99,48)"/><text x="27.8835%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (53,067,937 samples, 17.99%)</title><rect x="27.6348%" y="149" width="17.9900%" height="15" fill="rgb(253,11,6)"/><text x="27.8848%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (52,864,183 samples, 17.92%)</title><rect x="27.7039%" y="133" width="17.9209%" height="15" fill="rgb(247,143,39)"/><text x="27.9539%" y="143.50">typeck</text></g><g><title>adt_destructor (589,107 samples, 0.20%)</title><rect x="46.9545%" y="133" width="0.1997%" height="15" fill="rgb(236,97,10)"/><text x="47.2045%" y="143.50"></text></g><g><title>coherent_trait (580,697 samples, 0.20%)</title><rect x="46.9574%" y="117" width="0.1969%" height="15" fill="rgb(233,208,19)"/><text x="47.2074%" y="127.50"></text></g><g><title>specialization_graph_of (577,887 samples, 0.20%)</title><rect x="46.9583%" y="101" width="0.1959%" height="15" fill="rgb(216,164,2)"/><text x="47.2083%" y="111.50"></text></g><g><title>evaluate_obligation (327,434 samples, 0.11%)</title><rect x="47.1575%" y="133" width="0.1110%" height="15" fill="rgb(220,129,5)"/><text x="47.4075%" y="143.50"></text></g><g><title>item_types_checking (6,710,807 samples, 2.27%)</title><rect x="45.6248%" y="165" width="2.2750%" height="15" fill="rgb(242,17,10)"/><text x="45.8748%" y="175.50">i..</text></g><g><title>check_mod_item_types (6,696,667 samples, 2.27%)</title><rect x="45.6296%" y="149" width="2.2702%" height="15" fill="rgb(242,107,0)"/><text x="45.8796%" y="159.50">c..</text></g><g><title>typeck (1,459,546 samples, 0.49%)</title><rect x="47.4050%" y="133" width="0.4948%" height="15" fill="rgb(251,28,31)"/><text x="47.6550%" y="143.50"></text></g><g><title>late_bound_vars_map (301,695 samples, 0.10%)</title><rect x="48.2875%" y="117" width="0.1023%" height="15" fill="rgb(233,223,10)"/><text x="48.5375%" y="127.50"></text></g><g><title>fn_sig (893,111 samples, 0.30%)</title><rect x="48.1042%" y="133" width="0.3028%" height="15" fill="rgb(215,21,27)"/><text x="48.3542%" y="143.50"></text></g><g><title>named_region_map (409,774 samples, 0.14%)</title><rect x="48.5175%" y="117" width="0.1389%" height="15" fill="rgb(232,23,21)"/><text x="48.7675%" y="127.50"></text></g><g><title>resolve_lifetimes (371,794 samples, 0.13%)</title><rect x="48.5304%" y="101" width="0.1260%" height="15" fill="rgb(244,5,23)"/><text x="48.7804%" y="111.50"></text></g><g><title>generics_of (772,316 samples, 0.26%)</title><rect x="48.4070%" y="133" width="0.2618%" height="15" fill="rgb(226,81,46)"/><text x="48.6570%" y="143.50"></text></g><g><title>predicates_of (1,228,794 samples, 0.42%)</title><rect x="48.6965%" y="133" width="0.4166%" height="15" fill="rgb(247,70,30)"/><text x="48.9465%" y="143.50"></text></g><g><title>predicates_defined_on (1,106,704 samples, 0.38%)</title><rect x="48.7379%" y="117" width="0.3752%" height="15" fill="rgb(212,68,19)"/><text x="48.9879%" y="127.50"></text></g><g><title>inferred_outlives_of (634,167 samples, 0.21%)</title><rect x="48.8981%" y="101" width="0.2150%" height="15" fill="rgb(240,187,13)"/><text x="49.1481%" y="111.50"></text></g><g><title>inferred_outlives_crate (592,197 samples, 0.20%)</title><rect x="48.9123%" y="85" width="0.2008%" height="15" fill="rgb(223,113,26)"/><text x="49.1623%" y="95.50"></text></g><g><title>type_of (421,613 samples, 0.14%)</title><rect x="48.9701%" y="69" width="0.1429%" height="15" fill="rgb(206,192,2)"/><text x="49.2201%" y="79.50"></text></g><g><title>type_collecting (3,868,705 samples, 1.31%)</title><rect x="47.9022%" y="165" width="1.3115%" height="15" fill="rgb(241,108,4)"/><text x="48.1522%" y="175.50"></text></g><g><title>collect_mod_item_types (3,854,255 samples, 1.31%)</title><rect x="47.9071%" y="149" width="1.3066%" height="15" fill="rgb(247,173,49)"/><text x="48.1571%" y="159.50"></text></g><g><title>type_of (296,773 samples, 0.10%)</title><rect x="49.1131%" y="133" width="0.1006%" height="15" fill="rgb(224,114,35)"/><text x="49.3631%" y="143.50"></text></g><g><title>evaluate_obligation (470,278 samples, 0.16%)</title><rect x="50.4054%" y="133" width="0.1594%" height="15" fill="rgb(245,159,27)"/><text x="50.6554%" y="143.50"></text></g><g><title>param_env (544,627 samples, 0.18%)</title><rect x="50.6676%" y="133" width="0.1846%" height="15" fill="rgb(245,172,44)"/><text x="50.9176%" y="143.50"></text></g><g><title>region_scope_tree (587,770 samples, 0.20%)</title><rect x="50.8734%" y="133" width="0.1993%" height="15" fill="rgb(236,23,11)"/><text x="51.1234%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,052,805 samples, 1.71%)</title><rect x="49.3671%" y="149" width="1.7129%" height="15" fill="rgb(205,117,38)"/><text x="49.6171%" y="159.50"></text></g><g><title>adt_sized_constraint (468,936 samples, 0.16%)</title><rect x="52.9915%" y="117" width="0.1590%" height="15" fill="rgb(237,72,25)"/><text x="53.2415%" y="127.50"></text></g><g><title>evaluate_obligation (1,524,889 samples, 0.52%)</title><rect x="52.6652%" y="133" width="0.5169%" height="15" fill="rgb(244,70,9)"/><text x="52.9152%" y="143.50"></text></g><g><title>object_safety_violations (552,297 samples, 0.19%)</title><rect x="53.2917%" y="133" width="0.1872%" height="15" fill="rgb(217,125,39)"/><text x="53.5417%" y="143.50"></text></g><g><title>param_env (596,976 samples, 0.20%)</title><rect x="53.4791%" y="133" width="0.2024%" height="15" fill="rgb(235,36,10)"/><text x="53.7291%" y="143.50"></text></g><g><title>region_scope_tree (303,974 samples, 0.10%)</title><rect x="53.7438%" y="133" width="0.1030%" height="15" fill="rgb(251,123,47)"/><text x="53.9938%" y="143.50"></text></g><g><title>check_item_well_formed (8,295,037 samples, 2.81%)</title><rect x="51.0800%" y="149" width="2.8120%" height="15" fill="rgb(221,13,13)"/><text x="51.3300%" y="159.50">ch..</text></g><g><title>analysis (158,307,084 samples, 53.67%)</title><rect x="0.2797%" y="197" width="53.6660%" height="15" fill="rgb(238,131,9)"/><text x="0.5297%" y="207.50">analysis</text></g><g><title>type_check_crate (86,208,272 samples, 29.22%)</title><rect x="24.7212%" y="181" width="29.2245%" height="15" fill="rgb(211,50,8)"/><text x="24.9712%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,940,557 samples, 4.73%)</title><rect x="49.2199%" y="165" width="4.7258%" height="15" fill="rgb(245,182,24)"/><text x="49.4699%" y="175.50">wf_che..</text></g><g><title>codegen_crate (362,874 samples, 0.12%)</title><rect x="53.9486%" y="197" width="0.1230%" height="15" fill="rgb(242,14,37)"/><text x="54.1986%" y="207.50"></text></g><g><title>AST_validation (423,895 samples, 0.14%)</title><rect x="54.1372%" y="181" width="0.1437%" height="15" fill="rgb(246,228,12)"/><text x="54.3872%" y="191.50"></text></g><g><title>metadata_load_macro (321,580 samples, 0.11%)</title><rect x="87.8047%" y="149" width="0.1090%" height="15" fill="rgb(213,55,15)"/><text x="88.0547%" y="159.50"></text></g><g><title>metadata_register_crate (13,780,835 samples, 4.67%)</title><rect x="87.9137%" y="149" width="4.6717%" height="15" fill="rgb(209,9,3)"/><text x="88.1637%" y="159.50">metad..</text></g><g><title>metadata_register_crate (10,437,047 samples, 3.54%)</title><rect x="89.0473%" y="133" width="3.5382%" height="15" fill="rgb(230,59,30)"/><text x="89.2973%" y="143.50">met..</text></g><g><title>metadata_register_crate (9,066,672 samples, 3.07%)</title><rect x="89.5118%" y="117" width="3.0736%" height="15" fill="rgb(209,121,21)"/><text x="89.7618%" y="127.50">met..</text></g><g><title>macro_expand_crate (113,067,454 samples, 38.33%)</title><rect x="54.3492%" y="181" width="38.3298%" height="15" fill="rgb(220,109,13)"/><text x="54.5992%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (113,046,354 samples, 38.32%)</title><rect x="54.3563%" y="165" width="38.3226%" height="15" fill="rgb(232,18,1)"/><text x="54.6063%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (3,338,448 samples, 1.13%)</title><rect x="92.8315%" y="165" width="1.1317%" height="15" fill="rgb(215,41,42)"/><text x="93.0815%" y="175.50"></text></g><g><title>configure_and_expand (117,863,889 samples, 39.96%)</title><rect x="54.0716%" y="197" width="39.9558%" height="15" fill="rgb(224,123,36)"/><text x="54.3216%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,891,825 samples, 1.32%)</title><rect x="92.7081%" y="181" width="1.3193%" height="15" fill="rgb(240,125,3)"/><text x="92.9581%" y="191.50"></text></g><g><title>drop_ast (432,725 samples, 0.15%)</title><rect x="94.0274%" y="197" width="0.1467%" height="15" fill="rgb(205,98,50)"/><text x="94.2774%" y="207.50"></text></g><g><title>early_lint_checks (719,758 samples, 0.24%)</title><rect x="94.1811%" y="197" width="0.2440%" height="15" fill="rgb(205,185,37)"/><text x="94.4311%" y="207.50"></text></g><g><title>free_global_ctxt (4,326,889 samples, 1.47%)</title><rect x="94.4251%" y="197" width="1.4668%" height="15" fill="rgb(238,207,15)"/><text x="94.6751%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (544,855 samples, 0.18%)</title><rect x="97.0554%" y="165" width="0.1847%" height="15" fill="rgb(213,199,42)"/><text x="97.3054%" y="175.50"></text></g><g><title>optimized_mir (1,127,922 samples, 0.38%)</title><rect x="96.8580%" y="181" width="0.3824%" height="15" fill="rgb(235,201,11)"/><text x="97.1080%" y="191.50"></text></g><g><title>generate_crate_metadata (4,022,675 samples, 1.36%)</title><rect x="95.8919%" y="197" width="1.3637%" height="15" fill="rgb(207,46,11)"/><text x="96.1419%" y="207.50"></text></g><g><title>hir_lowering (5,634,504 samples, 1.91%)</title><rect x="97.2556%" y="197" width="1.9101%" height="15" fill="rgb(241,35,35)"/><text x="97.5056%" y="207.50">h..</text></g><g><title>parse_crate (433,325 samples, 0.15%)</title><rect x="99.1902%" y="197" width="0.1469%" height="15" fill="rgb(243,32,47)"/><text x="99.4402%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,253,954 samples, 0.43%)</title><rect x="99.4111%" y="197" width="0.4251%" height="15" fill="rgb(247,202,23)"/><text x="99.6611%" y="207.50"></text></g><g><title>all (294,985,955 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (294,985,955 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (388,635 samples, 0.13%)</title><rect x="99.8683%" y="197" width="0.1317%" height="15" fill="rgb(222,74,54)"/><text x="100.1183%" y="207.50"></text></g></svg></svg>