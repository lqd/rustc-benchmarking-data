<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (44,821 samples, 0.16%)</title><rect x="7.1966%" y="165" width="0.1609%" height="15" fill="rgb(227,0,7)"/><text x="7.4466%" y="175.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (42,751 samples, 0.15%)</title><rect x="7.2041%" y="149" width="0.1535%" height="15" fill="rgb(217,0,24)"/><text x="7.4541%" y="159.50"></text></g><g><title>needs_drop_raw (397,984 samples, 1.43%)</title><rect x="8.1463%" y="133" width="1.4287%" height="15" fill="rgb(221,193,54)"/><text x="8.3963%" y="143.50"></text></g><g><title>is_copy_raw (391,294 samples, 1.40%)</title><rect x="8.1703%" y="117" width="1.4047%" height="15" fill="rgb(248,212,6)"/><text x="8.4203%" y="127.50"></text></g><g><title>evaluate_obligation (380,484 samples, 1.37%)</title><rect x="8.2091%" y="101" width="1.3659%" height="15" fill="rgb(208,68,35)"/><text x="8.4591%" y="111.50"></text></g><g><title>trait_impls_of (300,444 samples, 1.08%)</title><rect x="8.4964%" y="85" width="1.0786%" height="15" fill="rgb(232,128,0)"/><text x="8.7464%" y="95.50"></text></g><g><title>implementations_of_trait (70,020 samples, 0.25%)</title><rect x="9.3236%" y="69" width="0.2514%" height="15" fill="rgb(207,160,47)"/><text x="9.5736%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (60,770 samples, 0.22%)</title><rect x="9.3568%" y="53" width="0.2182%" height="15" fill="rgb(228,23,34)"/><text x="9.6068%" y="63.50"></text></g><g><title>thir_body (76,371 samples, 0.27%)</title><rect x="9.6443%" y="133" width="0.2742%" height="15" fill="rgb(218,30,26)"/><text x="9.8943%" y="143.50"></text></g><g><title>mir_const (852,809 samples, 3.06%)</title><rect x="6.8842%" y="181" width="3.0615%" height="15" fill="rgb(220,122,19)"/><text x="7.1342%" y="191.50">mir..</text></g><g><title>unsafety_check_result (720,958 samples, 2.59%)</title><rect x="7.3575%" y="165" width="2.5882%" height="15" fill="rgb(250,228,42)"/><text x="7.6075%" y="175.50">un..</text></g><g><title>mir_built (648,747 samples, 2.33%)</title><rect x="7.6168%" y="149" width="2.3289%" height="15" fill="rgb(240,193,28)"/><text x="7.8668%" y="159.50">m..</text></g><g><title>mir_promoted (1,028,531 samples, 3.69%)</title><rect x="6.2834%" y="197" width="3.6923%" height="15" fill="rgb(216,20,37)"/><text x="6.5334%" y="207.50">mir_..</text></g><g><title>type_op_ascribe_user_type (83,261 samples, 0.30%)</title><rect x="9.9757%" y="197" width="0.2989%" height="15" fill="rgb(206,188,39)"/><text x="10.2257%" y="207.50"></text></g><g><title>type_op_prove_predicate (224,812 samples, 0.81%)</title><rect x="10.2746%" y="197" width="0.8071%" height="15" fill="rgb(217,207,13)"/><text x="10.5246%" y="207.50"></text></g><g><title>MIR_borrow_checking (2,340,796 samples, 8.40%)</title><rect x="2.7155%" y="229" width="8.4032%" height="15" fill="rgb(231,73,38)"/><text x="2.9655%" y="239.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (2,336,186 samples, 8.39%)</title><rect x="2.7320%" y="213" width="8.3867%" height="15" fill="rgb(225,20,46)"/><text x="2.9820%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (106,981 samples, 0.38%)</title><rect x="11.1346%" y="229" width="0.3841%" height="15" fill="rgb(210,31,41)"/><text x="11.3846%" y="239.50"></text></g><g><title>defined_lang_items (27,930 samples, 0.10%)</title><rect x="12.3329%" y="165" width="0.1003%" height="15" fill="rgb(221,200,47)"/><text x="12.5829%" y="175.50"></text></g><g><title>get_lang_items (125,731 samples, 0.45%)</title><rect x="12.0469%" y="181" width="0.4514%" height="15" fill="rgb(226,26,5)"/><text x="12.2969%" y="191.50"></text></g><g><title>check_mod_attrs (281,464 samples, 1.01%)</title><rect x="11.6392%" y="213" width="1.0104%" height="15" fill="rgb(249,33,26)"/><text x="11.8892%" y="223.50"></text></g><g><title>codegen_fn_attrs (226,103 samples, 0.81%)</title><rect x="11.8380%" y="197" width="0.8117%" height="15" fill="rgb(235,183,28)"/><text x="12.0880%" y="207.50"></text></g><g><title>supported_target_features (35,550 samples, 0.13%)</title><rect x="12.5220%" y="181" width="0.1276%" height="15" fill="rgb(221,5,38)"/><text x="12.7720%" y="191.50"></text></g><g><title>lookup_deprecation_entry (30,340 samples, 0.11%)</title><rect x="12.9097%" y="197" width="0.1089%" height="15" fill="rgb(247,18,42)"/><text x="13.1597%" y="207.50"></text></g><g><title>lookup_stability (29,750 samples, 0.11%)</title><rect x="13.0186%" y="197" width="0.1068%" height="15" fill="rgb(241,131,45)"/><text x="13.2686%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (107,141 samples, 0.38%)</title><rect x="12.7681%" y="213" width="0.3846%" height="15" fill="rgb(249,31,29)"/><text x="13.0181%" y="223.50"></text></g><g><title>misc_checking_1 (497,275 samples, 1.79%)</title><rect x="11.5213%" y="229" width="1.7852%" height="15" fill="rgb(225,111,53)"/><text x="11.7713%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (74,051 samples, 0.27%)</title><rect x="13.3143%" y="213" width="0.2658%" height="15" fill="rgb(238,160,17)"/><text x="13.5643%" y="223.50"></text></g><g><title>check_mod_liveness (53,201 samples, 0.19%)</title><rect x="13.3891%" y="197" width="0.1910%" height="15" fill="rgb(214,148,48)"/><text x="13.6391%" y="207.50"></text></g><g><title>misc_checking_2 (108,701 samples, 0.39%)</title><rect x="13.3065%" y="229" width="0.3902%" height="15" fill="rgb(232,36,49)"/><text x="13.5565%" y="239.50"></text></g><g><title>match_checking (32,480 samples, 0.12%)</title><rect x="13.5801%" y="213" width="0.1166%" height="15" fill="rgb(209,103,24)"/><text x="13.8301%" y="223.50"></text></g><g><title>check_match (29,080 samples, 0.10%)</title><rect x="13.5923%" y="197" width="0.1044%" height="15" fill="rgb(229,88,8)"/><text x="13.8423%" y="207.50"></text></g><g><title>death_checking (70,920 samples, 0.25%)</title><rect x="13.8025%" y="213" width="0.2546%" height="15" fill="rgb(213,181,19)"/><text x="14.0525%" y="223.50"></text></g><g><title>lint_levels (30,020 samples, 0.11%)</title><rect x="13.9493%" y="197" width="0.1078%" height="15" fill="rgb(254,191,54)"/><text x="14.1993%" y="207.50"></text></g><g><title>crate_lints (86,571 samples, 0.31%)</title><rect x="14.0643%" y="197" width="0.3108%" height="15" fill="rgb(241,83,37)"/><text x="14.3143%" y="207.50"></text></g><g><title>param_env (42,521 samples, 0.15%)</title><rect x="14.2225%" y="181" width="0.1526%" height="15" fill="rgb(233,36,39)"/><text x="14.4725%" y="191.50"></text></g><g><title>lint_checking (121,461 samples, 0.44%)</title><rect x="14.0571%" y="213" width="0.4360%" height="15" fill="rgb(226,3,54)"/><text x="14.3071%" y="223.50"></text></g><g><title>module_lints (32,870 samples, 0.12%)</title><rect x="14.3751%" y="197" width="0.1180%" height="15" fill="rgb(245,192,40)"/><text x="14.6251%" y="207.50"></text></g><g><title>lint_mod (29,320 samples, 0.11%)</title><rect x="14.3878%" y="181" width="0.1053%" height="15" fill="rgb(238,167,29)"/><text x="14.6378%" y="191.50"></text></g><g><title>privacy_access_levels (32,430 samples, 0.12%)</title><rect x="14.4931%" y="213" width="0.1164%" height="15" fill="rgb(232,182,51)"/><text x="14.7431%" y="223.50"></text></g><g><title>privacy_checking_modules (35,861 samples, 0.13%)</title><rect x="14.6095%" y="213" width="0.1287%" height="15" fill="rgb(231,60,39)"/><text x="14.8595%" y="223.50"></text></g><g><title>check_mod_privacy (33,571 samples, 0.12%)</title><rect x="14.6177%" y="197" width="0.1205%" height="15" fill="rgb(208,69,12)"/><text x="14.8677%" y="207.50"></text></g><g><title>misc_checking_3 (324,444 samples, 1.16%)</title><rect x="13.6967%" y="229" width="1.1647%" height="15" fill="rgb(235,93,37)"/><text x="13.9467%" y="239.50"></text></g><g><title>unused_lib_feature_checking (34,311 samples, 0.12%)</title><rect x="14.7383%" y="213" width="0.1232%" height="15" fill="rgb(213,116,39)"/><text x="14.9883%" y="223.50"></text></g><g><title>coherence_checking (28,731 samples, 0.10%)</title><rect x="15.0508%" y="213" width="0.1031%" height="15" fill="rgb(222,207,29)"/><text x="15.3008%" y="223.50"></text></g><g><title>evaluate_obligation (97,461 samples, 0.35%)</title><rect x="15.1540%" y="213" width="0.3499%" height="15" fill="rgb(206,96,30)"/><text x="15.4040%" y="223.50"></text></g><g><title>trait_impls_of (31,660 samples, 0.11%)</title><rect x="15.3902%" y="197" width="0.1137%" height="15" fill="rgb(218,138,4)"/><text x="15.6402%" y="207.50"></text></g><g><title>adt_def (59,930 samples, 0.22%)</title><rect x="19.3229%" y="149" width="0.2151%" height="15" fill="rgb(250,191,14)"/><text x="19.5729%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (57,580 samples, 0.21%)</title><rect x="19.3314%" y="133" width="0.2067%" height="15" fill="rgb(239,60,40)"/><text x="19.5814%" y="143.50"></text></g><g><title>item_attrs (39,670 samples, 0.14%)</title><rect x="19.3957%" y="117" width="0.1424%" height="15" fill="rgb(206,27,48)"/><text x="19.6457%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (37,560 samples, 0.13%)</title><rect x="19.4033%" y="101" width="0.1348%" height="15" fill="rgb(225,35,8)"/><text x="19.6533%" y="111.50"></text></g><g><title>adt_sized_constraint (104,381 samples, 0.37%)</title><rect x="19.2854%" y="165" width="0.3747%" height="15" fill="rgb(250,213,24)"/><text x="19.5354%" y="175.50"></text></g><g><title>type_of (33,981 samples, 0.12%)</title><rect x="19.5381%" y="149" width="0.1220%" height="15" fill="rgb(247,123,22)"/><text x="19.7881%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (33,101 samples, 0.12%)</title><rect x="19.5412%" y="133" width="0.1188%" height="15" fill="rgb(231,138,38)"/><text x="19.7912%" y="143.50"></text></g><g><title>associated_items (40,351 samples, 0.14%)</title><rect x="19.6601%" y="165" width="0.1449%" height="15" fill="rgb(231,145,46)"/><text x="19.9101%" y="175.50"></text></g><g><title>impl_parent (162,672 samples, 0.58%)</title><rect x="21.0504%" y="53" width="0.5840%" height="15" fill="rgb(251,118,11)"/><text x="21.3004%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (112,651 samples, 0.40%)</title><rect x="21.2300%" y="37" width="0.4044%" height="15" fill="rgb(217,147,25)"/><text x="21.4800%" y="47.50"></text></g><g><title>impl_trait_ref (652,288 samples, 2.34%)</title><rect x="21.6344%" y="53" width="2.3416%" height="15" fill="rgb(247,81,37)"/><text x="21.8844%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (601,988 samples, 2.16%)</title><rect x="21.8149%" y="37" width="2.1611%" height="15" fill="rgb(209,12,38)"/><text x="22.0649%" y="47.50">m..</text></g><g><title>coherent_trait (1,087,182 samples, 3.90%)</title><rect x="20.3010%" y="85" width="3.9029%" height="15" fill="rgb(227,1,9)"/><text x="20.5510%" y="95.50">cohe..</text></g><g><title>specialization_graph_of (1,080,682 samples, 3.88%)</title><rect x="20.3243%" y="69" width="3.8795%" height="15" fill="rgb(248,47,43)"/><text x="20.5743%" y="79.50">spec..</text></g><g><title>trait_impls_of (63,461 samples, 0.23%)</title><rect x="23.9760%" y="53" width="0.2278%" height="15" fill="rgb(221,10,30)"/><text x="24.2260%" y="63.50"></text></g><g><title>adt_destructor (1,098,602 samples, 3.94%)</title><rect x="20.2714%" y="117" width="3.9439%" height="15" fill="rgb(210,229,1)"/><text x="20.5214%" y="127.50">adt_..</text></g><g><title>metadata_decode_entry_adt_destructor (1,097,372 samples, 3.94%)</title><rect x="20.2758%" y="101" width="3.9395%" height="15" fill="rgb(222,148,37)"/><text x="20.5258%" y="111.50">meta..</text></g><g><title>adt_dtorck_constraint (1,152,013 samples, 4.14%)</title><rect x="20.1378%" y="133" width="4.1356%" height="15" fill="rgb(234,67,33)"/><text x="20.3878%" y="143.50">adt_d..</text></g><g><title>dropck_outlives (1,265,314 samples, 4.54%)</title><rect x="19.8338%" y="165" width="4.5423%" height="15" fill="rgb(247,98,35)"/><text x="20.0838%" y="175.50">dropc..</text></g><g><title>adt_dtorck_constraint (1,212,563 samples, 4.35%)</title><rect x="20.0232%" y="149" width="4.3530%" height="15" fill="rgb(247,138,52)"/><text x="20.2732%" y="159.50">adt_d..</text></g><g><title>evaluate_obligation (33,870 samples, 0.12%)</title><rect x="24.3762%" y="165" width="0.1216%" height="15" fill="rgb(213,79,30)"/><text x="24.6262%" y="175.50"></text></g><g><title>fn_sig (52,250 samples, 0.19%)</title><rect x="24.5055%" y="165" width="0.1876%" height="15" fill="rgb(246,177,23)"/><text x="24.7555%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (49,520 samples, 0.18%)</title><rect x="24.5153%" y="149" width="0.1778%" height="15" fill="rgb(230,62,27)"/><text x="24.7653%" y="159.50"></text></g><g><title>generics_of (32,600 samples, 0.12%)</title><rect x="24.6931%" y="165" width="0.1170%" height="15" fill="rgb(216,154,8)"/><text x="24.9431%" y="175.50"></text></g><g><title>impl_trait_ref (49,511 samples, 0.18%)</title><rect x="24.8201%" y="165" width="0.1777%" height="15" fill="rgb(244,35,45)"/><text x="25.0701%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (47,651 samples, 0.17%)</title><rect x="24.8267%" y="149" width="0.1711%" height="15" fill="rgb(251,115,12)"/><text x="25.0767%" y="159.50"></text></g><g><title>item_attrs (35,831 samples, 0.13%)</title><rect x="25.0340%" y="165" width="0.1286%" height="15" fill="rgb(240,54,50)"/><text x="25.2840%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (33,451 samples, 0.12%)</title><rect x="25.0425%" y="149" width="0.1201%" height="15" fill="rgb(233,84,52)"/><text x="25.2925%" y="159.50"></text></g><g><title>explicit_predicates_of (37,380 samples, 0.13%)</title><rect x="25.4264%" y="133" width="0.1342%" height="15" fill="rgb(207,117,47)"/><text x="25.6764%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (32,810 samples, 0.12%)</title><rect x="25.4428%" y="117" width="0.1178%" height="15" fill="rgb(249,43,39)"/><text x="25.6928%" y="127.50"></text></g><g><title>predicates_of (89,000 samples, 0.32%)</title><rect x="25.3238%" y="165" width="0.3195%" height="15" fill="rgb(209,38,44)"/><text x="25.5738%" y="175.50"></text></g><g><title>predicates_defined_on (73,840 samples, 0.27%)</title><rect x="25.3783%" y="149" width="0.2651%" height="15" fill="rgb(236,212,23)"/><text x="25.6283%" y="159.50"></text></g><g><title>trait_impls_of (61,850 samples, 0.22%)</title><rect x="25.6707%" y="165" width="0.2220%" height="15" fill="rgb(242,79,21)"/><text x="25.9207%" y="175.50"></text></g><g><title>type_of (29,390 samples, 0.11%)</title><rect x="25.8927%" y="165" width="0.1055%" height="15" fill="rgb(211,96,35)"/><text x="26.1427%" y="175.50"></text></g><g><title>item_bodies_checking (2,931,793 samples, 10.52%)</title><rect x="15.5185%" y="213" width="10.5248%" height="15" fill="rgb(253,215,40)"/><text x="15.7685%" y="223.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (2,929,143 samples, 10.52%)</title><rect x="15.5280%" y="197" width="10.5153%" height="15" fill="rgb(211,81,21)"/><text x="15.7780%" y="207.50">typeck_item_bod..</text></g><g><title>typeck (2,924,452 samples, 10.50%)</title><rect x="15.5449%" y="181" width="10.4985%" height="15" fill="rgb(208,190,38)"/><text x="15.7949%" y="191.50">typeck</text></g><g><title>fn_sig (89,801 samples, 0.32%)</title><rect x="26.2806%" y="181" width="0.3224%" height="15" fill="rgb(235,213,38)"/><text x="26.5306%" y="191.50"></text></g><g><title>late_bound_vars_map (50,661 samples, 0.18%)</title><rect x="26.4211%" y="165" width="0.1819%" height="15" fill="rgb(237,122,38)"/><text x="26.6711%" y="175.50"></text></g><g><title>resolve_lifetimes (38,781 samples, 0.14%)</title><rect x="26.4637%" y="149" width="0.1392%" height="15" fill="rgb(244,218,35)"/><text x="26.7137%" y="159.50"></text></g><g><title>generics_of (35,340 samples, 0.13%)</title><rect x="26.6030%" y="181" width="0.1269%" height="15" fill="rgb(240,68,47)"/><text x="26.8530%" y="191.50"></text></g><g><title>explicit_predicates_of (45,231 samples, 0.16%)</title><rect x="26.7700%" y="149" width="0.1624%" height="15" fill="rgb(210,16,53)"/><text x="27.0200%" y="159.50"></text></g><g><title>predicates_of (63,641 samples, 0.23%)</title><rect x="26.7298%" y="181" width="0.2285%" height="15" fill="rgb(235,124,12)"/><text x="26.9798%" y="191.50"></text></g><g><title>predicates_defined_on (60,671 samples, 0.22%)</title><rect x="26.7405%" y="165" width="0.2178%" height="15" fill="rgb(224,169,11)"/><text x="26.9905%" y="175.50"></text></g><g><title>type_collecting (265,313 samples, 0.95%)</title><rect x="26.0631%" y="213" width="0.9524%" height="15" fill="rgb(250,166,2)"/><text x="26.3131%" y="223.50"></text></g><g><title>collect_mod_item_types (247,473 samples, 0.89%)</title><rect x="26.1271%" y="197" width="0.8884%" height="15" fill="rgb(242,216,29)"/><text x="26.3771%" y="207.50"></text></g><g><title>implied_outlives_bounds (87,041 samples, 0.31%)</title><rect x="28.0613%" y="181" width="0.3125%" height="15" fill="rgb(230,116,27)"/><text x="28.3113%" y="191.50"></text></g><g><title>param_env (202,662 samples, 0.73%)</title><rect x="28.3738%" y="181" width="0.7275%" height="15" fill="rgb(228,99,48)"/><text x="28.6238%" y="191.50"></text></g><g><title>analysis (7,482,924 samples, 26.86%)</title><rect x="2.3057%" y="245" width="26.8629%" height="15" fill="rgb(253,11,6)"/><text x="2.5557%" y="255.50">analysis</text></g><g><title>type_check_crate (3,985,405 samples, 14.31%)</title><rect x="14.8614%" y="229" width="14.3072%" height="15" fill="rgb(247,143,39)"/><text x="15.1114%" y="239.50">type_check_crate</text></g><g><title>wf_checking (599,086 samples, 2.15%)</title><rect x="27.0180%" y="213" width="2.1507%" height="15" fill="rgb(236,97,10)"/><text x="27.2680%" y="223.50">w..</text></g><g><title>check_item_well_formed (577,826 samples, 2.07%)</title><rect x="27.0943%" y="197" width="2.0743%" height="15" fill="rgb(233,208,19)"/><text x="27.3443%" y="207.50">c..</text></g><g><title>native_libraries (51,030 samples, 0.18%)</title><rect x="31.2232%" y="229" width="0.1832%" height="15" fill="rgb(216,164,2)"/><text x="31.4732%" y="239.50"></text></g><g><title>metadata_decode_entry_native_libraries (38,680 samples, 0.14%)</title><rect x="31.2676%" y="213" width="0.1389%" height="15" fill="rgb(220,129,5)"/><text x="31.5176%" y="223.50"></text></g><g><title>codegen_crate (649,427 samples, 2.33%)</title><rect x="29.2009%" y="245" width="2.3314%" height="15" fill="rgb(242,17,10)"/><text x="29.4509%" y="255.50">c..</text></g><g><title>AST_validation (34,030 samples, 0.12%)</title><rect x="32.2788%" y="229" width="0.1222%" height="15" fill="rgb(242,107,0)"/><text x="32.5288%" y="239.50"></text></g><g><title>crate_injection (91,791 samples, 0.33%)</title><rect x="32.4359%" y="229" width="0.3295%" height="15" fill="rgb(251,28,31)"/><text x="32.6859%" y="239.50"></text></g><g><title>metadata_load_macro (109,131 samples, 0.39%)</title><rect x="64.9912%" y="197" width="0.3918%" height="15" fill="rgb(233,223,10)"/><text x="65.2412%" y="207.50"></text></g><g><title>macro_expand_crate (11,743,631 samples, 42.16%)</title><rect x="32.7654%" y="229" width="42.1584%" height="15" fill="rgb(215,21,27)"/><text x="33.0154%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (11,720,881 samples, 42.08%)</title><rect x="32.8471%" y="213" width="42.0767%" height="15" fill="rgb(232,23,21)"/><text x="33.0971%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,657,700 samples, 9.54%)</title><rect x="65.3830%" y="197" width="9.5409%" height="15" fill="rgb(244,5,23)"/><text x="65.6330%" y="207.50">metadata_regis..</text></g><g><title>metadata_register_crate (937,222 samples, 3.36%)</title><rect x="71.5593%" y="181" width="3.3645%" height="15" fill="rgb(226,81,46)"/><text x="71.8093%" y="191.50">met..</text></g><g><title>metadata_register_crate (71,831 samples, 0.26%)</title><rect x="74.6660%" y="165" width="0.2579%" height="15" fill="rgb(247,70,30)"/><text x="74.9160%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (54,891 samples, 0.20%)</title><rect x="74.9395%" y="229" width="0.1971%" height="15" fill="rgb(212,68,19)"/><text x="75.1895%" y="239.50"></text></g><g><title>finalize_macro_resolutions (356,904 samples, 1.28%)</title><rect x="75.2273%" y="213" width="1.2812%" height="15" fill="rgb(240,187,13)"/><text x="75.4773%" y="223.50"></text></g><g><title>late_resolve_crate (1,425,806 samples, 5.12%)</title><rect x="76.5085%" y="213" width="5.1185%" height="15" fill="rgb(223,113,26)"/><text x="76.7585%" y="223.50">late_r..</text></g><g><title>configure_and_expand (13,984,596 samples, 50.20%)</title><rect x="31.5323%" y="245" width="50.2032%" height="15" fill="rgb(206,192,2)"/><text x="31.7823%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,838,191 samples, 6.60%)</title><rect x="75.1366%" y="229" width="6.5989%" height="15" fill="rgb(241,108,4)"/><text x="75.3866%" y="239.50">resolve_c..</text></g><g><title>crate_hash (163,522 samples, 0.59%)</title><rect x="81.7355%" y="245" width="0.5870%" height="15" fill="rgb(247,173,49)"/><text x="81.9855%" y="255.50"></text></g><g><title>early_lint_checks (49,121 samples, 0.18%)</title><rect x="82.4603%" y="245" width="0.1763%" height="15" fill="rgb(224,114,35)"/><text x="82.7103%" y="255.50"></text></g><g><title>free_global_ctxt (2,747,491 samples, 9.86%)</title><rect x="82.6366%" y="245" width="9.8632%" height="15" fill="rgb(245,159,27)"/><text x="82.8866%" y="255.50">free_global_ct..</text></g><g><title>hir_lowering (267,253 samples, 0.96%)</title><rect x="92.4998%" y="245" width="0.9594%" height="15" fill="rgb(245,172,44)"/><text x="92.7498%" y="255.50"></text></g><g><title>link (74,540 samples, 0.27%)</title><rect x="93.4592%" y="245" width="0.2676%" height="15" fill="rgb(236,23,11)"/><text x="93.7092%" y="255.50"></text></g><g><title>parse_crate (294,574 samples, 1.06%)</title><rect x="93.7268%" y="245" width="1.0575%" height="15" fill="rgb(205,117,38)"/><text x="93.9768%" y="255.50"></text></g><g><title>prepare_outputs (323,414 samples, 1.16%)</title><rect x="94.8205%" y="245" width="1.1610%" height="15" fill="rgb(237,72,25)"/><text x="95.0705%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (562,927 samples, 2.02%)</title><rect x="95.9815%" y="245" width="2.0208%" height="15" fill="rgb(244,70,9)"/><text x="96.2315%" y="255.50">s..</text></g><g><title>setup_global_ctxt (125,482 samples, 0.45%)</title><rect x="98.0648%" y="245" width="0.4505%" height="15" fill="rgb(217,125,39)"/><text x="98.3148%" y="255.50"></text></g><g><title>all (27,855,961 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (27,855,961 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (413,594 samples, 1.48%)</title><rect x="98.5152%" y="245" width="1.4848%" height="15" fill="rgb(221,13,13)"/><text x="98.7652%" y="255.50"></text></g></svg></svg>