<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (215,823 samples, 0.12%)</title><rect x="14.8917%" y="133" width="0.1175%" height="15" fill="rgb(227,0,7)"/><text x="15.1417%" y="143.50"></text></g><g><title>param_env (511,172 samples, 0.28%)</title><rect x="17.2299%" y="101" width="0.2784%" height="15" fill="rgb(217,0,24)"/><text x="17.4799%" y="111.50"></text></g><g><title>item_attrs (395,517 samples, 0.22%)</title><rect x="18.2099%" y="69" width="0.2154%" height="15" fill="rgb(221,193,54)"/><text x="18.4599%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (380,707 samples, 0.21%)</title><rect x="18.2180%" y="53" width="0.2073%" height="15" fill="rgb(248,212,6)"/><text x="18.4680%" y="63.50"></text></g><g><title>codegen_fn_attrs (578,878 samples, 0.32%)</title><rect x="18.1248%" y="85" width="0.3152%" height="15" fill="rgb(208,68,35)"/><text x="18.3748%" y="95.50"></text></g><g><title>is_copy_raw (257,541 samples, 0.14%)</title><rect x="21.6291%" y="69" width="0.1402%" height="15" fill="rgb(232,128,0)"/><text x="21.8791%" y="79.50"></text></g><g><title>evaluate_obligation (193,331 samples, 0.11%)</title><rect x="21.6640%" y="53" width="0.1053%" height="15" fill="rgb(207,160,47)"/><text x="21.9140%" y="63.50"></text></g><g><title>adt_drop_tys (224,495 samples, 0.12%)</title><rect x="21.8924%" y="53" width="0.1222%" height="15" fill="rgb(228,23,34)"/><text x="22.1424%" y="63.50"></text></g><g><title>needs_drop_raw (1,793,748 samples, 0.98%)</title><rect x="21.7728%" y="69" width="0.9768%" height="15" fill="rgb(218,30,26)"/><text x="22.0228%" y="79.50"></text></g><g><title>is_copy_raw (1,347,762 samples, 0.73%)</title><rect x="22.0156%" y="53" width="0.7339%" height="15" fill="rgb(220,122,19)"/><text x="22.2656%" y="63.50"></text></g><g><title>evaluate_obligation (1,096,850 samples, 0.60%)</title><rect x="22.1522%" y="37" width="0.5973%" height="15" fill="rgb(250,228,42)"/><text x="22.4022%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (301,484 samples, 0.16%)</title><rect x="22.9900%" y="53" width="0.1642%" height="15" fill="rgb(240,193,28)"/><text x="23.2400%" y="63.50"></text></g><g><title>specialization_graph_of (309,422 samples, 0.17%)</title><rect x="23.1965%" y="53" width="0.1685%" height="15" fill="rgb(216,20,37)"/><text x="23.4465%" y="63.50"></text></g><g><title>resolve_instance (1,284,974 samples, 0.70%)</title><rect x="22.7498%" y="69" width="0.6997%" height="15" fill="rgb(206,188,39)"/><text x="22.9998%" y="79.50"></text></g><g><title>thir_body (2,141,500 samples, 1.17%)</title><rect x="23.4915%" y="69" width="1.1661%" height="15" fill="rgb(217,207,13)"/><text x="23.7415%" y="79.50"></text></g><g><title>mir_const (15,619,908 samples, 8.51%)</title><rect x="16.1771%" y="117" width="8.5057%" height="15" fill="rgb(231,73,38)"/><text x="16.4271%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (13,175,378 samples, 7.17%)</title><rect x="17.5083%" y="101" width="7.1745%" height="15" fill="rgb(225,20,46)"/><text x="17.7583%" y="111.50">unsafety_c..</text></g><g><title>mir_built (11,464,246 samples, 6.24%)</title><rect x="18.4401%" y="85" width="6.2427%" height="15" fill="rgb(210,31,41)"/><text x="18.6901%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (722,807 samples, 0.39%)</title><rect x="24.6828%" y="117" width="0.3936%" height="15" fill="rgb(221,200,47)"/><text x="24.9328%" y="127.50"></text></g><g><title>mir_promoted (18,228,270 samples, 9.93%)</title><rect x="15.1506%" y="133" width="9.9260%" height="15" fill="rgb(226,26,5)"/><text x="15.4006%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,039,265 samples, 0.57%)</title><rect x="25.0766%" y="133" width="0.5659%" height="15" fill="rgb(249,33,26)"/><text x="25.3266%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (553,972 samples, 0.30%)</title><rect x="25.6425%" y="133" width="0.3017%" height="15" fill="rgb(235,183,28)"/><text x="25.8925%" y="143.50"></text></g><g><title>normalize_projection_ty (369,974 samples, 0.20%)</title><rect x="25.7427%" y="117" width="0.2015%" height="15" fill="rgb(221,5,38)"/><text x="25.9927%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,045,181 samples, 2.75%)</title><rect x="26.0360%" y="133" width="2.7473%" height="15" fill="rgb(247,18,42)"/><text x="26.2860%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (51,675,342 samples, 28.14%)</title><rect x="0.6527%" y="165" width="28.1392%" height="15" fill="rgb(241,131,45)"/><text x="0.9027%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (51,344,939 samples, 27.96%)</title><rect x="0.8326%" y="149" width="27.9593%" height="15" fill="rgb(249,31,29)"/><text x="1.0826%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (367,764 samples, 0.20%)</title><rect x="28.7919%" y="165" width="0.2003%" height="15" fill="rgb(225,111,53)"/><text x="29.0419%" y="175.50"></text></g><g><title>hir_module_items (310,243 samples, 0.17%)</title><rect x="28.9922%" y="165" width="0.1689%" height="15" fill="rgb(238,160,17)"/><text x="29.2422%" y="175.50"></text></g><g><title>should_inherit_track_caller (402,434 samples, 0.22%)</title><rect x="29.5359%" y="117" width="0.2191%" height="15" fill="rgb(214,148,48)"/><text x="29.7859%" y="127.50"></text></g><g><title>codegen_fn_attrs (687,768 samples, 0.37%)</title><rect x="29.3890%" y="133" width="0.3745%" height="15" fill="rgb(232,36,49)"/><text x="29.6390%" y="143.50"></text></g><g><title>check_mod_attrs (1,079,341 samples, 0.59%)</title><rect x="29.1759%" y="149" width="0.5877%" height="15" fill="rgb(209,103,24)"/><text x="29.4259%" y="159.50"></text></g><g><title>check_mod_const_bodies (242,463 samples, 0.13%)</title><rect x="29.7636%" y="149" width="0.1320%" height="15" fill="rgb(229,88,8)"/><text x="30.0136%" y="159.50"></text></g><g><title>lint_levels (232,843 samples, 0.13%)</title><rect x="30.0885%" y="133" width="0.1268%" height="15" fill="rgb(213,181,19)"/><text x="30.3385%" y="143.50"></text></g><g><title>lookup_deprecation_entry (203,281 samples, 0.11%)</title><rect x="30.2153%" y="133" width="0.1107%" height="15" fill="rgb(254,191,54)"/><text x="30.4653%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (782,869 samples, 0.43%)</title><rect x="29.9632%" y="149" width="0.4263%" height="15" fill="rgb(241,83,37)"/><text x="30.2132%" y="159.50"></text></g><g><title>misc_checking_1 (2,316,135 samples, 1.26%)</title><rect x="29.1614%" y="165" width="1.2612%" height="15" fill="rgb(233,36,39)"/><text x="29.4114%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (911,620 samples, 0.50%)</title><rect x="30.4236%" y="149" width="0.4964%" height="15" fill="rgb(226,3,54)"/><text x="30.6736%" y="159.50"></text></g><g><title>check_mod_liveness (755,849 samples, 0.41%)</title><rect x="30.5084%" y="133" width="0.4116%" height="15" fill="rgb(245,192,40)"/><text x="30.7584%" y="143.50"></text></g><g><title>misc_checking_2 (1,920,381 samples, 1.05%)</title><rect x="30.4226%" y="165" width="1.0457%" height="15" fill="rgb(238,167,29)"/><text x="30.6726%" y="175.50"></text></g><g><title>match_checking (1,006,991 samples, 0.55%)</title><rect x="30.9200%" y="149" width="0.5483%" height="15" fill="rgb(232,182,51)"/><text x="31.1700%" y="159.50"></text></g><g><title>check_match (936,191 samples, 0.51%)</title><rect x="30.9586%" y="133" width="0.5098%" height="15" fill="rgb(231,60,39)"/><text x="31.2086%" y="143.50"></text></g><g><title>check_private_in_public (396,924 samples, 0.22%)</title><rect x="31.4738%" y="149" width="0.2161%" height="15" fill="rgb(208,69,12)"/><text x="31.7238%" y="159.50"></text></g><g><title>death_checking (669,337 samples, 0.36%)</title><rect x="31.6900%" y="149" width="0.3645%" height="15" fill="rgb(235,93,37)"/><text x="31.9400%" y="159.50"></text></g><g><title>eval_to_allocation_raw (359,154 samples, 0.20%)</title><rect x="32.5944%" y="117" width="0.1956%" height="15" fill="rgb(213,116,39)"/><text x="32.8444%" y="127.50"></text></g><g><title>eval_to_allocation_raw (358,194 samples, 0.20%)</title><rect x="32.5950%" y="101" width="0.1951%" height="15" fill="rgb(222,207,29)"/><text x="32.8450%" y="111.50"></text></g><g><title>eval_to_const_value_raw (330,554 samples, 0.18%)</title><rect x="32.7900%" y="117" width="0.1800%" height="15" fill="rgb(206,96,30)"/><text x="33.0400%" y="127.50"></text></g><g><title>eval_to_const_value_raw (327,384 samples, 0.18%)</title><rect x="32.7917%" y="101" width="0.1783%" height="15" fill="rgb(218,138,4)"/><text x="33.0417%" y="111.50"></text></g><g><title>eval_to_allocation_raw (320,663 samples, 0.17%)</title><rect x="32.7954%" y="85" width="0.1746%" height="15" fill="rgb(250,191,14)"/><text x="33.0454%" y="95.50"></text></g><g><title>param_env (210,962 samples, 0.11%)</title><rect x="32.9700%" y="117" width="0.1149%" height="15" fill="rgb(239,60,40)"/><text x="33.2200%" y="127.50"></text></g><g><title>crate_lints (3,055,193 samples, 1.66%)</title><rect x="32.0554%" y="133" width="1.6637%" height="15" fill="rgb(206,27,48)"/><text x="32.3054%" y="143.50"></text></g><g><title>type_of (1,153,332 samples, 0.63%)</title><rect x="33.0910%" y="117" width="0.6280%" height="15" fill="rgb(225,35,8)"/><text x="33.3410%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (917,747 samples, 0.50%)</title><rect x="33.2193%" y="101" width="0.4997%" height="15" fill="rgb(250,213,24)"/><text x="33.4693%" y="111.50"></text></g><g><title>lint_checking (3,951,493 samples, 2.15%)</title><rect x="32.0544%" y="149" width="2.1517%" height="15" fill="rgb(247,123,22)"/><text x="32.3044%" y="159.50">l..</text></g><g><title>module_lints (894,530 samples, 0.49%)</title><rect x="33.7191%" y="133" width="0.4871%" height="15" fill="rgb(231,138,38)"/><text x="33.9691%" y="143.50"></text></g><g><title>lint_mod (887,760 samples, 0.48%)</title><rect x="33.7228%" y="117" width="0.4834%" height="15" fill="rgb(231,145,46)"/><text x="33.9728%" y="127.50"></text></g><g><title>privacy_access_levels (515,266 samples, 0.28%)</title><rect x="34.2062%" y="149" width="0.2806%" height="15" fill="rgb(251,118,11)"/><text x="34.4562%" y="159.50"></text></g><g><title>privacy_checking_modules (2,045,413 samples, 1.11%)</title><rect x="34.4868%" y="149" width="1.1138%" height="15" fill="rgb(217,147,25)"/><text x="34.7368%" y="159.50"></text></g><g><title>check_mod_privacy (2,040,793 samples, 1.11%)</title><rect x="34.4893%" y="133" width="1.1113%" height="15" fill="rgb(247,81,37)"/><text x="34.7393%" y="143.50"></text></g><g><title>misc_checking_3 (7,615,394 samples, 4.15%)</title><rect x="31.4684%" y="165" width="4.1469%" height="15" fill="rgb(209,12,38)"/><text x="31.7184%" y="175.50">misc_..</text></g><g><title>adt_destructor (356,634 samples, 0.19%)</title><rect x="35.7245%" y="117" width="0.1942%" height="15" fill="rgb(227,1,9)"/><text x="35.9745%" y="127.50"></text></g><g><title>coherent_trait (353,644 samples, 0.19%)</title><rect x="35.7261%" y="101" width="0.1926%" height="15" fill="rgb(248,47,43)"/><text x="35.9761%" y="111.50"></text></g><g><title>specialization_graph_of (351,344 samples, 0.19%)</title><rect x="35.7274%" y="85" width="0.1913%" height="15" fill="rgb(221,10,30)"/><text x="35.9774%" y="95.50"></text></g><g><title>impl_parent (2,148,381 samples, 1.17%)</title><rect x="37.8909%" y="101" width="1.1699%" height="15" fill="rgb(210,229,1)"/><text x="38.1409%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,181,174 samples, 0.64%)</title><rect x="38.4176%" y="85" width="0.6432%" height="15" fill="rgb(222,148,37)"/><text x="38.6676%" y="95.50"></text></g><g><title>impl_trait_ref (4,664,593 samples, 2.54%)</title><rect x="39.0608%" y="101" width="2.5401%" height="15" fill="rgb(234,67,33)"/><text x="39.3108%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,887,788 samples, 2.12%)</title><rect x="39.4838%" y="85" width="2.1171%" height="15" fill="rgb(247,98,35)"/><text x="39.7338%" y="95.50">m..</text></g><g><title>trait_impls_of (779,373 samples, 0.42%)</title><rect x="41.6342%" y="101" width="0.4244%" height="15" fill="rgb(247,138,52)"/><text x="41.8842%" y="111.50"></text></g><g><title>implementations_of_trait (235,856 samples, 0.13%)</title><rect x="41.9302%" y="85" width="0.1284%" height="15" fill="rgb(213,79,30)"/><text x="42.1802%" y="95.50"></text></g><g><title>coherent_trait (11,686,179 samples, 6.36%)</title><rect x="35.6956%" y="133" width="6.3636%" height="15" fill="rgb(246,177,23)"/><text x="35.9456%" y="143.50">coherent..</text></g><g><title>specialization_graph_of (11,149,364 samples, 6.07%)</title><rect x="35.9879%" y="117" width="6.0713%" height="15" fill="rgb(230,62,27)"/><text x="36.2379%" y="127.50">speciali..</text></g><g><title>coherence_checking (11,792,100 samples, 6.42%)</title><rect x="35.6840%" y="149" width="6.4213%" height="15" fill="rgb(216,154,8)"/><text x="35.9340%" y="159.50">coherenc..</text></g><g><title>adt_def (466,625 samples, 0.25%)</title><rect x="61.0303%" y="85" width="0.2541%" height="15" fill="rgb(244,35,45)"/><text x="61.2803%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (464,705 samples, 0.25%)</title><rect x="61.0313%" y="69" width="0.2531%" height="15" fill="rgb(251,115,12)"/><text x="61.2813%" y="79.50"></text></g><g><title>item_attrs (441,755 samples, 0.24%)</title><rect x="61.0438%" y="53" width="0.2406%" height="15" fill="rgb(240,54,50)"/><text x="61.2938%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (439,815 samples, 0.24%)</title><rect x="61.0449%" y="37" width="0.2395%" height="15" fill="rgb(233,84,52)"/><text x="61.2949%" y="47.50"></text></g><g><title>adt_sized_constraint (481,905 samples, 0.26%)</title><rect x="61.0240%" y="101" width="0.2624%" height="15" fill="rgb(207,117,47)"/><text x="61.2740%" y="111.50"></text></g><g><title>associated_item (651,627 samples, 0.35%)</title><rect x="61.4150%" y="85" width="0.3548%" height="15" fill="rgb(249,43,39)"/><text x="61.6650%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (525,426 samples, 0.29%)</title><rect x="61.4838%" y="69" width="0.2861%" height="15" fill="rgb(209,38,44)"/><text x="61.7338%" y="79.50"></text></g><g><title>associated_items (932,642 samples, 0.51%)</title><rect x="61.2903%" y="101" width="0.5079%" height="15" fill="rgb(236,212,23)"/><text x="61.5403%" y="111.50"></text></g><g><title>dropck_outlives (704,880 samples, 0.38%)</title><rect x="61.8589%" y="101" width="0.3838%" height="15" fill="rgb(242,79,21)"/><text x="62.1089%" y="111.50"></text></g><g><title>adt_dtorck_constraint (251,432 samples, 0.14%)</title><rect x="62.1059%" y="85" width="0.1369%" height="15" fill="rgb(211,96,35)"/><text x="62.3559%" y="95.50"></text></g><g><title>trait_impls_of (364,176 samples, 0.20%)</title><rect x="63.6620%" y="85" width="0.1983%" height="15" fill="rgb(253,215,40)"/><text x="63.9120%" y="95.50"></text></g><g><title>evaluate_obligation (2,972,096 samples, 1.62%)</title><rect x="62.2428%" y="101" width="1.6184%" height="15" fill="rgb(211,81,21)"/><text x="62.4928%" y="111.50"></text></g><g><title>fn_sig (201,094 samples, 0.11%)</title><rect x="63.8895%" y="101" width="0.1095%" height="15" fill="rgb(208,190,38)"/><text x="64.1395%" y="111.50"></text></g><g><title>item_attrs (200,493 samples, 0.11%)</title><rect x="64.1701%" y="101" width="0.1092%" height="15" fill="rgb(235,213,38)"/><text x="64.4201%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (191,293 samples, 0.10%)</title><rect x="64.1751%" y="85" width="0.1042%" height="15" fill="rgb(237,122,38)"/><text x="64.4251%" y="95.50"></text></g><g><title>evaluate_obligation (432,820 samples, 0.24%)</title><rect x="64.5874%" y="85" width="0.2357%" height="15" fill="rgb(244,218,35)"/><text x="64.8374%" y="95.50"></text></g><g><title>method_autoderef_steps (905,188 samples, 0.49%)</title><rect x="64.3400%" y="101" width="0.4929%" height="15" fill="rgb(240,68,47)"/><text x="64.5900%" y="111.50"></text></g><g><title>predicates_of (490,526 samples, 0.27%)</title><rect x="64.9173%" y="101" width="0.2671%" height="15" fill="rgb(210,16,53)"/><text x="65.1673%" y="111.50"></text></g><g><title>predicates_defined_on (342,142 samples, 0.19%)</title><rect x="64.9981%" y="85" width="0.1863%" height="15" fill="rgb(235,124,12)"/><text x="65.2481%" y="95.50"></text></g><g><title>evaluate_obligation (1,379,007 samples, 0.75%)</title><rect x="67.9427%" y="85" width="0.7509%" height="15" fill="rgb(224,169,11)"/><text x="68.1927%" y="95.50"></text></g><g><title>is_copy_raw (243,503 samples, 0.13%)</title><rect x="68.8033%" y="85" width="0.1326%" height="15" fill="rgb(250,166,2)"/><text x="69.0533%" y="95.50"></text></g><g><title>evaluate_obligation (202,743 samples, 0.11%)</title><rect x="68.8255%" y="69" width="0.1104%" height="15" fill="rgb(242,216,29)"/><text x="69.0755%" y="79.50"></text></g><g><title>typeck (7,032,657 samples, 3.83%)</title><rect x="65.2995%" y="101" width="3.8296%" height="15" fill="rgb(230,116,27)"/><text x="65.5495%" y="111.50">type..</text></g><g><title>item_bodies_checking (49,678,329 samples, 27.05%)</title><rect x="42.1346%" y="149" width="27.0518%" height="15" fill="rgb(228,99,48)"/><text x="42.3846%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (49,674,119 samples, 27.05%)</title><rect x="42.1369%" y="133" width="27.0495%" height="15" fill="rgb(253,11,6)"/><text x="42.3869%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (49,455,667 samples, 26.93%)</title><rect x="42.2559%" y="117" width="26.9305%" height="15" fill="rgb(247,143,39)"/><text x="42.5059%" y="127.50">typeck</text></g><g><title>generics_of (216,801 samples, 0.12%)</title><rect x="70.8143%" y="85" width="0.1181%" height="15" fill="rgb(236,97,10)"/><text x="71.0643%" y="95.50"></text></g><g><title>impl_trait_ref (268,217 samples, 0.15%)</title><rect x="70.9447%" y="85" width="0.1461%" height="15" fill="rgb(233,208,19)"/><text x="71.1947%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (225,975 samples, 0.12%)</title><rect x="70.9677%" y="69" width="0.1231%" height="15" fill="rgb(216,164,2)"/><text x="71.2177%" y="79.50"></text></g><g><title>specializes (274,543 samples, 0.15%)</title><rect x="71.1278%" y="85" width="0.1495%" height="15" fill="rgb(220,129,5)"/><text x="71.3778%" y="95.50"></text></g><g><title>param_env (201,402 samples, 0.11%)</title><rect x="71.1676%" y="69" width="0.1097%" height="15" fill="rgb(242,17,10)"/><text x="71.4176%" y="79.50"></text></g><g><title>evaluate_obligation (1,491,036 samples, 0.81%)</title><rect x="70.4994%" y="101" width="0.8119%" height="15" fill="rgb(242,107,0)"/><text x="70.7494%" y="111.50"></text></g><g><title>item_types_checking (4,064,885 samples, 2.21%)</title><rect x="69.1864%" y="149" width="2.2135%" height="15" fill="rgb(251,28,31)"/><text x="69.4364%" y="159.50">i..</text></g><g><title>check_mod_item_types (4,057,735 samples, 2.21%)</title><rect x="69.1903%" y="133" width="2.2096%" height="15" fill="rgb(233,223,10)"/><text x="69.4403%" y="143.50">c..</text></g><g><title>typeck (2,589,149 samples, 1.41%)</title><rect x="69.9900%" y="117" width="1.4099%" height="15" fill="rgb(215,21,27)"/><text x="70.2400%" y="127.50"></text></g><g><title>late_bound_vars_map (239,311 samples, 0.13%)</title><rect x="72.0619%" y="101" width="0.1303%" height="15" fill="rgb(232,23,21)"/><text x="72.3119%" y="111.50"></text></g><g><title>resolve_lifetimes (204,271 samples, 0.11%)</title><rect x="72.0810%" y="85" width="0.1112%" height="15" fill="rgb(244,5,23)"/><text x="72.3310%" y="95.50"></text></g><g><title>fn_sig (976,395 samples, 0.53%)</title><rect x="71.6875%" y="117" width="0.5317%" height="15" fill="rgb(226,81,46)"/><text x="71.9375%" y="127.50"></text></g><g><title>named_region_map (248,643 samples, 0.14%)</title><rect x="72.3547%" y="101" width="0.1354%" height="15" fill="rgb(247,70,30)"/><text x="72.6047%" y="111.50"></text></g><g><title>resolve_lifetimes (208,833 samples, 0.11%)</title><rect x="72.3763%" y="85" width="0.1137%" height="15" fill="rgb(212,68,19)"/><text x="72.6263%" y="95.50"></text></g><g><title>generics_of (534,558 samples, 0.29%)</title><rect x="72.2192%" y="117" width="0.2911%" height="15" fill="rgb(240,187,13)"/><text x="72.4692%" y="127.50"></text></g><g><title>late_bound_vars_map (322,853 samples, 0.18%)</title><rect x="72.9102%" y="69" width="0.1758%" height="15" fill="rgb(223,113,26)"/><text x="73.1602%" y="79.50"></text></g><g><title>resolve_lifetimes (306,533 samples, 0.17%)</title><rect x="72.9191%" y="53" width="0.1669%" height="15" fill="rgb(206,192,2)"/><text x="73.1691%" y="63.50"></text></g><g><title>explicit_predicates_of (750,277 samples, 0.41%)</title><rect x="72.6950%" y="85" width="0.4086%" height="15" fill="rgb(241,108,4)"/><text x="72.9450%" y="95.50"></text></g><g><title>predicates_of (1,357,703 samples, 0.74%)</title><rect x="72.5391%" y="117" width="0.7393%" height="15" fill="rgb(247,173,49)"/><text x="72.7891%" y="127.50"></text></g><g><title>predicates_defined_on (1,246,402 samples, 0.68%)</title><rect x="72.5997%" y="101" width="0.6787%" height="15" fill="rgb(224,114,35)"/><text x="72.8497%" y="111.50"></text></g><g><title>inferred_outlives_of (320,995 samples, 0.17%)</title><rect x="73.1036%" y="85" width="0.1748%" height="15" fill="rgb(245,159,27)"/><text x="73.3536%" y="95.50"></text></g><g><title>inferred_outlives_crate (278,404 samples, 0.15%)</title><rect x="73.1268%" y="69" width="0.1516%" height="15" fill="rgb(245,172,44)"/><text x="73.3768%" y="79.50"></text></g><g><title>type_collecting (4,221,198 samples, 2.30%)</title><rect x="71.4012%" y="149" width="2.2986%" height="15" fill="rgb(236,23,11)"/><text x="71.6512%" y="159.50">t..</text></g><g><title>collect_mod_item_types (4,209,178 samples, 2.29%)</title><rect x="71.4077%" y="133" width="2.2921%" height="15" fill="rgb(205,117,38)"/><text x="71.6577%" y="143.50">c..</text></g><g><title>type_of (755,447 samples, 0.41%)</title><rect x="73.2884%" y="117" width="0.4114%" height="15" fill="rgb(237,72,25)"/><text x="73.5384%" y="127.50"></text></g><g><title>evaluate_obligation (1,089,432 samples, 0.59%)</title><rect x="76.4697%" y="117" width="0.5932%" height="15" fill="rgb(244,70,9)"/><text x="76.7197%" y="127.50"></text></g><g><title>implied_outlives_bounds (594,593 samples, 0.32%)</title><rect x="77.0630%" y="117" width="0.3238%" height="15" fill="rgb(217,125,39)"/><text x="77.3130%" y="127.50"></text></g><g><title>evaluate_obligation (185,083 samples, 0.10%)</title><rect x="77.5061%" y="101" width="0.1008%" height="15" fill="rgb(235,36,10)"/><text x="77.7561%" y="111.50"></text></g><g><title>object_safety_violations (726,108 samples, 0.40%)</title><rect x="77.3867%" y="117" width="0.3954%" height="15" fill="rgb(251,123,47)"/><text x="77.6367%" y="127.50"></text></g><g><title>param_env (784,520 samples, 0.43%)</title><rect x="77.7821%" y="117" width="0.4272%" height="15" fill="rgb(221,13,13)"/><text x="78.0321%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,713,796 samples, 4.75%)</title><rect x="73.9184%" y="133" width="4.7450%" height="15" fill="rgb(238,131,9)"/><text x="74.1684%" y="143.50">check_..</text></g><g><title>region_scope_tree (807,970 samples, 0.44%)</title><rect x="78.2235%" y="117" width="0.4400%" height="15" fill="rgb(211,50,8)"/><text x="78.4735%" y="127.50"></text></g><g><title>evaluate_obligation (524,587 samples, 0.29%)</title><rect x="79.7672%" y="117" width="0.2857%" height="15" fill="rgb(245,182,24)"/><text x="80.0172%" y="127.50"></text></g><g><title>implied_outlives_bounds (202,441 samples, 0.11%)</title><rect x="80.0697%" y="117" width="0.1102%" height="15" fill="rgb(242,14,37)"/><text x="80.3197%" y="127.50"></text></g><g><title>object_safety_violations (454,125 samples, 0.25%)</title><rect x="80.1801%" y="117" width="0.2473%" height="15" fill="rgb(246,228,12)"/><text x="80.4301%" y="127.50"></text></g><g><title>param_env (420,965 samples, 0.23%)</title><rect x="80.4274%" y="117" width="0.2292%" height="15" fill="rgb(213,55,15)"/><text x="80.6774%" y="127.50"></text></g><g><title>check_item_well_formed (4,055,461 samples, 2.21%)</title><rect x="78.6634%" y="133" width="2.2084%" height="15" fill="rgb(209,9,3)"/><text x="78.9134%" y="143.50">c..</text></g><g><title>analysis (148,025,735 samples, 80.61%)</title><rect x="0.4060%" y="181" width="80.6058%" height="15" fill="rgb(230,59,30)"/><text x="0.6560%" y="191.50">analysis</text></g><g><title>type_check_crate (83,366,911 samples, 45.40%)</title><rect x="35.6152%" y="165" width="45.3965%" height="15" fill="rgb(209,121,21)"/><text x="35.8652%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,414,867 samples, 7.30%)</title><rect x="73.7069%" y="149" width="7.3049%" height="15" fill="rgb(220,109,13)"/><text x="73.9569%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (257,083 samples, 0.14%)</title><rect x="80.8718%" y="133" width="0.1400%" height="15" fill="rgb(232,18,1)"/><text x="81.1218%" y="143.50"></text></g><g><title>codegen_crate (355,774 samples, 0.19%)</title><rect x="81.0154%" y="181" width="0.1937%" height="15" fill="rgb(215,41,42)"/><text x="81.2654%" y="191.50"></text></g><g><title>AST_validation (215,883 samples, 0.12%)</title><rect x="81.2799%" y="165" width="0.1176%" height="15" fill="rgb(224,123,36)"/><text x="81.5299%" y="175.50"></text></g><g><title>metadata_load_macro (200,053 samples, 0.11%)</title><rect x="87.6669%" y="133" width="0.1089%" height="15" fill="rgb(240,125,3)"/><text x="87.9169%" y="143.50"></text></g><g><title>metadata_register_crate (1,377,936 samples, 0.75%)</title><rect x="87.7758%" y="133" width="0.7503%" height="15" fill="rgb(205,98,50)"/><text x="88.0258%" y="143.50"></text></g><g><title>metadata_register_crate (484,004 samples, 0.26%)</title><rect x="88.2626%" y="117" width="0.2636%" height="15" fill="rgb(205,185,37)"/><text x="88.5126%" y="127.50"></text></g><g><title>macro_expand_crate (13,106,635 samples, 7.14%)</title><rect x="81.4750%" y="165" width="7.1371%" height="15" fill="rgb(238,207,15)"/><text x="81.7250%" y="175.50">macro_expa..</text></g><g><title>expand_crate (13,096,845 samples, 7.13%)</title><rect x="81.4803%" y="149" width="7.1317%" height="15" fill="rgb(213,199,42)"/><text x="81.7303%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (199,212 samples, 0.11%)</title><rect x="88.6141%" y="165" width="0.1085%" height="15" fill="rgb(235,201,11)"/><text x="88.8641%" y="175.50"></text></g><g><title>late_resolve_crate (2,804,021 samples, 1.53%)</title><rect x="88.8238%" y="149" width="1.5269%" height="15" fill="rgb(207,46,11)"/><text x="89.0738%" y="159.50"></text></g><g><title>configure_and_expand (16,952,568 samples, 9.23%)</title><rect x="81.2092%" y="181" width="9.2313%" height="15" fill="rgb(241,35,35)"/><text x="81.4592%" y="191.50">configure_and..</text></g><g><title>resolve_crate (3,154,895 samples, 1.72%)</title><rect x="88.7226%" y="165" width="1.7180%" height="15" fill="rgb(243,32,47)"/><text x="88.9726%" y="175.50"></text></g><g><title>drop_ast (350,534 samples, 0.19%)</title><rect x="90.4405%" y="181" width="0.1909%" height="15" fill="rgb(247,202,23)"/><text x="90.6905%" y="191.50"></text></g><g><title>early_lint_checks (793,028 samples, 0.43%)</title><rect x="90.6419%" y="181" width="0.4318%" height="15" fill="rgb(219,102,11)"/><text x="90.8919%" y="191.50"></text></g><g><title>free_global_ctxt (4,405,189 samples, 2.40%)</title><rect x="91.0738%" y="181" width="2.3988%" height="15" fill="rgb(243,110,44)"/><text x="91.3238%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,870,961 samples, 1.02%)</title><rect x="93.4726%" y="181" width="1.0188%" height="15" fill="rgb(222,74,54)"/><text x="93.7226%" y="191.50"></text></g><g><title>hir_lowering (4,673,483 samples, 2.54%)</title><rect x="94.4914%" y="181" width="2.5449%" height="15" fill="rgb(216,99,12)"/><text x="94.7414%" y="191.50">hi..</text></g><g><title>parse_crate (3,635,570 samples, 1.98%)</title><rect x="97.0751%" y="181" width="1.9797%" height="15" fill="rgb(226,22,26)"/><text x="97.3251%" y="191.50">p..</text></g><g><title>prepare_outputs (192,892 samples, 0.11%)</title><rect x="99.0577%" y="181" width="0.1050%" height="15" fill="rgb(217,163,10)"/><text x="99.3077%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,057,332 samples, 0.58%)</title><rect x="99.1627%" y="181" width="0.5758%" height="15" fill="rgb(213,25,53)"/><text x="99.4127%" y="191.50"></text></g><g><title>all (183,641,539 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (183,641,539 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (390,544 samples, 0.21%)</title><rect x="99.7873%" y="181" width="0.2127%" height="15" fill="rgb(229,68,48)"/><text x="100.0373%" y="191.50"></text></g></svg></svg>