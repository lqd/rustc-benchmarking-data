<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (204,223 samples, 0.11%)</title><rect x="9.8076%" y="149" width="0.1148%" height="15" fill="rgb(227,0,7)"/><text x="10.0576%" y="159.50"></text></g><g><title>codegen_fn_attrs (245,981 samples, 0.14%)</title><rect x="10.2264%" y="133" width="0.1383%" height="15" fill="rgb(217,0,24)"/><text x="10.4764%" y="143.50"></text></g><g><title>adt_drop_tys (190,173 samples, 0.11%)</title><rect x="12.3790%" y="101" width="0.1069%" height="15" fill="rgb(221,193,54)"/><text x="12.6290%" y="111.50"></text></g><g><title>is_copy_raw (1,552,387 samples, 0.87%)</title><rect x="12.4859%" y="101" width="0.8727%" height="15" fill="rgb(248,212,6)"/><text x="12.7359%" y="111.50"></text></g><g><title>evaluate_obligation (1,316,652 samples, 0.74%)</title><rect x="12.6185%" y="85" width="0.7402%" height="15" fill="rgb(208,68,35)"/><text x="12.8685%" y="95.50"></text></g><g><title>needs_drop_raw (1,949,404 samples, 1.10%)</title><rect x="12.2646%" y="117" width="1.0959%" height="15" fill="rgb(232,128,0)"/><text x="12.5146%" y="127.50"></text></g><g><title>impl_parent (238,703 samples, 0.13%)</title><rect x="13.9137%" y="85" width="0.1342%" height="15" fill="rgb(207,160,47)"/><text x="14.1637%" y="95.50"></text></g><g><title>specialization_graph_of (1,217,895 samples, 0.68%)</title><rect x="13.6802%" y="101" width="0.6847%" height="15" fill="rgb(228,23,34)"/><text x="13.9302%" y="111.50"></text></g><g><title>impl_trait_ref (563,808 samples, 0.32%)</title><rect x="14.0479%" y="85" width="0.3170%" height="15" fill="rgb(218,30,26)"/><text x="14.2979%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (451,588 samples, 0.25%)</title><rect x="14.1110%" y="69" width="0.2539%" height="15" fill="rgb(220,122,19)"/><text x="14.3610%" y="79.50"></text></g><g><title>resolve_instance (1,848,344 samples, 1.04%)</title><rect x="13.3781%" y="117" width="1.0391%" height="15" fill="rgb(250,228,42)"/><text x="13.6281%" y="127.50"></text></g><g><title>thir_body (1,205,064 samples, 0.68%)</title><rect x="14.4329%" y="117" width="0.6775%" height="15" fill="rgb(240,193,28)"/><text x="14.6829%" y="127.50"></text></g><g><title>mir_const (10,426,365 samples, 5.86%)</title><rect x="9.2815%" y="165" width="5.8617%" height="15" fill="rgb(216,20,37)"/><text x="9.5315%" y="175.50">mir_con..</text></g><g><title>unsafety_check_result (9,286,313 samples, 5.22%)</title><rect x="9.9224%" y="149" width="5.2207%" height="15" fill="rgb(206,188,39)"/><text x="10.1724%" y="159.50">unsafe..</text></g><g><title>mir_built (8,499,608 samples, 4.78%)</title><rect x="10.3647%" y="133" width="4.7784%" height="15" fill="rgb(217,207,13)"/><text x="10.6147%" y="143.50">mir_bu..</text></g><g><title>mir_const_qualif (207,482 samples, 0.12%)</title><rect x="15.1431%" y="165" width="0.1166%" height="15" fill="rgb(231,73,38)"/><text x="15.3931%" y="175.50"></text></g><g><title>mir_promoted (11,578,806 samples, 6.51%)</title><rect x="8.7506%" y="181" width="6.5096%" height="15" fill="rgb(225,20,46)"/><text x="9.0006%" y="191.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (920,044 samples, 0.52%)</title><rect x="15.2602%" y="181" width="0.5172%" height="15" fill="rgb(210,31,41)"/><text x="15.5102%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (279,534 samples, 0.16%)</title><rect x="15.7775%" y="181" width="0.1572%" height="15" fill="rgb(221,200,47)"/><text x="16.0275%" y="191.50"></text></g><g><title>type_op_normalize_ty (504,184 samples, 0.28%)</title><rect x="16.0055%" y="181" width="0.2835%" height="15" fill="rgb(226,26,5)"/><text x="16.2555%" y="191.50"></text></g><g><title>normalize_projection_ty (350,342 samples, 0.20%)</title><rect x="16.0920%" y="165" width="0.1970%" height="15" fill="rgb(249,33,26)"/><text x="16.3420%" y="175.50"></text></g><g><title>type_op_prove_predicate (3,219,183 samples, 1.81%)</title><rect x="16.2890%" y="181" width="1.8098%" height="15" fill="rgb(235,183,28)"/><text x="16.5390%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (31,222,047 samples, 17.55%)</title><rect x="0.5526%" y="213" width="17.5529%" height="15" fill="rgb(221,5,38)"/><text x="0.8026%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,066,225 samples, 17.47%)</title><rect x="0.6402%" y="197" width="17.4653%" height="15" fill="rgb(247,18,42)"/><text x="0.8902%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (200,013 samples, 0.11%)</title><rect x="18.1056%" y="213" width="0.1124%" height="15" fill="rgb(241,131,45)"/><text x="18.3556%" y="223.50"></text></g><g><title>hir_module_items (264,982 samples, 0.15%)</title><rect x="18.2180%" y="213" width="0.1490%" height="15" fill="rgb(249,31,29)"/><text x="18.4680%" y="223.50"></text></g><g><title>should_inherit_track_caller (278,084 samples, 0.16%)</title><rect x="18.6801%" y="165" width="0.1563%" height="15" fill="rgb(225,111,53)"/><text x="18.9301%" y="175.50"></text></g><g><title>codegen_fn_attrs (494,596 samples, 0.28%)</title><rect x="18.5649%" y="181" width="0.2781%" height="15" fill="rgb(238,160,17)"/><text x="18.8149%" y="191.50"></text></g><g><title>check_mod_attrs (819,380 samples, 0.46%)</title><rect x="18.3825%" y="197" width="0.4607%" height="15" fill="rgb(214,148,48)"/><text x="18.6325%" y="207.50"></text></g><g><title>lookup_deprecation_entry (212,933 samples, 0.12%)</title><rect x="19.1563%" y="181" width="0.1197%" height="15" fill="rgb(232,36,49)"/><text x="19.4063%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (603,447 samples, 0.34%)</title><rect x="18.9936%" y="197" width="0.3393%" height="15" fill="rgb(209,103,24)"/><text x="19.2436%" y="207.50"></text></g><g><title>misc_checking_1 (1,800,170 samples, 1.01%)</title><rect x="18.3673%" y="213" width="1.0120%" height="15" fill="rgb(229,88,8)"/><text x="18.6173%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (530,305 samples, 0.30%)</title><rect x="19.3804%" y="197" width="0.2981%" height="15" fill="rgb(213,181,19)"/><text x="19.6304%" y="207.50"></text></g><g><title>check_mod_liveness (407,814 samples, 0.23%)</title><rect x="19.4492%" y="181" width="0.2293%" height="15" fill="rgb(254,191,54)"/><text x="19.6992%" y="191.50"></text></g><g><title>misc_checking_2 (1,210,143 samples, 0.68%)</title><rect x="19.3794%" y="213" width="0.6803%" height="15" fill="rgb(241,83,37)"/><text x="19.6294%" y="223.50"></text></g><g><title>match_checking (678,047 samples, 0.38%)</title><rect x="19.6785%" y="197" width="0.3812%" height="15" fill="rgb(233,36,39)"/><text x="19.9285%" y="207.50"></text></g><g><title>check_match (640,065 samples, 0.36%)</title><rect x="19.6999%" y="181" width="0.3598%" height="15" fill="rgb(226,3,54)"/><text x="19.9499%" y="191.50"></text></g><g><title>check_private_in_public (367,764 samples, 0.21%)</title><rect x="20.0652%" y="197" width="0.2068%" height="15" fill="rgb(245,192,40)"/><text x="20.3152%" y="207.50"></text></g><g><title>death_checking (788,929 samples, 0.44%)</title><rect x="20.2720%" y="197" width="0.4435%" height="15" fill="rgb(238,167,29)"/><text x="20.5220%" y="207.50"></text></g><g><title>item_attrs (193,793 samples, 0.11%)</title><rect x="20.6066%" y="181" width="0.1089%" height="15" fill="rgb(232,182,51)"/><text x="20.8566%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (191,613 samples, 0.11%)</title><rect x="20.6078%" y="165" width="0.1077%" height="15" fill="rgb(231,60,39)"/><text x="20.8578%" y="175.50"></text></g><g><title>eval_to_const_value_raw (242,771 samples, 0.14%)</title><rect x="21.2717%" y="165" width="0.1365%" height="15" fill="rgb(208,69,12)"/><text x="21.5217%" y="175.50"></text></g><g><title>eval_to_const_value_raw (236,571 samples, 0.13%)</title><rect x="21.2752%" y="149" width="0.1330%" height="15" fill="rgb(235,93,37)"/><text x="21.5252%" y="159.50"></text></g><g><title>eval_to_allocation_raw (225,051 samples, 0.13%)</title><rect x="21.2817%" y="133" width="0.1265%" height="15" fill="rgb(213,116,39)"/><text x="21.5317%" y="143.50"></text></g><g><title>param_env (474,574 samples, 0.27%)</title><rect x="21.4082%" y="165" width="0.2668%" height="15" fill="rgb(222,207,29)"/><text x="21.6582%" y="175.50"></text></g><g><title>predicates_of (230,202 samples, 0.13%)</title><rect x="21.5456%" y="149" width="0.1294%" height="15" fill="rgb(206,96,30)"/><text x="21.7956%" y="159.50"></text></g><g><title>predicates_defined_on (193,932 samples, 0.11%)</title><rect x="21.5660%" y="133" width="0.1090%" height="15" fill="rgb(218,138,4)"/><text x="21.8160%" y="143.50"></text></g><g><title>crate_lints (3,005,443 samples, 1.69%)</title><rect x="20.7165%" y="181" width="1.6896%" height="15" fill="rgb(250,191,14)"/><text x="20.9665%" y="191.50"></text></g><g><title>type_of (1,231,573 samples, 0.69%)</title><rect x="21.7138%" y="165" width="0.6924%" height="15" fill="rgb(239,60,40)"/><text x="21.9638%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (959,821 samples, 0.54%)</title><rect x="21.8665%" y="149" width="0.5396%" height="15" fill="rgb(206,27,48)"/><text x="22.1165%" y="159.50"></text></g><g><title>lint_checking (3,537,309 samples, 1.99%)</title><rect x="20.7155%" y="197" width="1.9887%" height="15" fill="rgb(225,35,8)"/><text x="20.9655%" y="207.50">l..</text></g><g><title>module_lints (530,136 samples, 0.30%)</title><rect x="22.4062%" y="181" width="0.2980%" height="15" fill="rgb(250,213,24)"/><text x="22.6562%" y="191.50"></text></g><g><title>lint_mod (524,226 samples, 0.29%)</title><rect x="22.4095%" y="165" width="0.2947%" height="15" fill="rgb(247,123,22)"/><text x="22.6595%" y="175.50"></text></g><g><title>privacy_access_levels (423,145 samples, 0.24%)</title><rect x="22.7042%" y="197" width="0.2379%" height="15" fill="rgb(231,138,38)"/><text x="22.9542%" y="207.50"></text></g><g><title>privacy_checking_modules (1,336,835 samples, 0.75%)</title><rect x="22.9421%" y="197" width="0.7516%" height="15" fill="rgb(231,145,46)"/><text x="23.1921%" y="207.50"></text></g><g><title>check_mod_privacy (1,332,185 samples, 0.75%)</title><rect x="22.9447%" y="181" width="0.7489%" height="15" fill="rgb(251,118,11)"/><text x="23.1947%" y="191.50"></text></g><g><title>misc_checking_3 (6,486,812 samples, 3.65%)</title><rect x="20.0597%" y="213" width="3.6469%" height="15" fill="rgb(217,147,25)"/><text x="20.3097%" y="223.50">misc..</text></g><g><title>adt_destructor (439,005 samples, 0.25%)</title><rect x="23.8069%" y="165" width="0.2468%" height="15" fill="rgb(247,81,37)"/><text x="24.0569%" y="175.50"></text></g><g><title>coherent_trait (435,555 samples, 0.24%)</title><rect x="23.8088%" y="149" width="0.2449%" height="15" fill="rgb(209,12,38)"/><text x="24.0588%" y="159.50"></text></g><g><title>specialization_graph_of (433,835 samples, 0.24%)</title><rect x="23.8098%" y="133" width="0.2439%" height="15" fill="rgb(227,1,9)"/><text x="24.0598%" y="143.50"></text></g><g><title>impl_trait_ref (251,402 samples, 0.14%)</title><rect x="23.9123%" y="117" width="0.1413%" height="15" fill="rgb(248,47,43)"/><text x="24.1623%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (223,682 samples, 0.13%)</title><rect x="23.9279%" y="101" width="0.1258%" height="15" fill="rgb(221,10,30)"/><text x="24.1779%" y="111.50"></text></g><g><title>impl_parent (2,675,287 samples, 1.50%)</title><rect x="26.8582%" y="149" width="1.5040%" height="15" fill="rgb(210,229,1)"/><text x="27.1082%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,547,208 samples, 0.87%)</title><rect x="27.4924%" y="133" width="0.8698%" height="15" fill="rgb(222,148,37)"/><text x="27.7424%" y="143.50"></text></g><g><title>impl_trait_ref (5,874,981 samples, 3.30%)</title><rect x="28.3622%" y="149" width="3.3029%" height="15" fill="rgb(234,67,33)"/><text x="28.6122%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,526,057 samples, 2.54%)</title><rect x="29.1206%" y="133" width="2.5445%" height="15" fill="rgb(247,98,35)"/><text x="29.3706%" y="143.50">me..</text></g><g><title>coherent_trait (15,205,739 samples, 8.55%)</title><rect x="23.7758%" y="181" width="8.5486%" height="15" fill="rgb(247,138,52)"/><text x="24.0258%" y="191.50">coherent_tra..</text></g><g><title>specialization_graph_of (14,565,362 samples, 8.19%)</title><rect x="24.1358%" y="165" width="8.1886%" height="15" fill="rgb(213,79,30)"/><text x="24.3858%" y="175.50">specializat..</text></g><g><title>trait_impls_of (1,123,894 samples, 0.63%)</title><rect x="31.6926%" y="149" width="0.6318%" height="15" fill="rgb(246,177,23)"/><text x="31.9426%" y="159.50"></text></g><g><title>implementations_of_trait (354,176 samples, 0.20%)</title><rect x="32.1253%" y="133" width="0.1991%" height="15" fill="rgb(230,62,27)"/><text x="32.3753%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (246,264 samples, 0.14%)</title><rect x="32.1860%" y="117" width="0.1384%" height="15" fill="rgb(216,154,8)"/><text x="32.4360%" y="127.50"></text></g><g><title>coherence_checking (15,332,200 samples, 8.62%)</title><rect x="23.7608%" y="197" width="8.6197%" height="15" fill="rgb(244,35,45)"/><text x="24.0108%" y="207.50">coherence_ch..</text></g><g><title>associated_item (470,583 samples, 0.26%)</title><rect x="48.1859%" y="133" width="0.2646%" height="15" fill="rgb(251,115,12)"/><text x="48.4359%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (371,573 samples, 0.21%)</title><rect x="48.2415%" y="117" width="0.2089%" height="15" fill="rgb(240,54,50)"/><text x="48.4915%" y="127.50"></text></g><g><title>associated_items (710,696 samples, 0.40%)</title><rect x="48.0759%" y="149" width="0.3996%" height="15" fill="rgb(233,84,52)"/><text x="48.3259%" y="159.50"></text></g><g><title>adt_def (445,535 samples, 0.25%)</title><rect x="49.0002%" y="85" width="0.2505%" height="15" fill="rgb(207,117,47)"/><text x="49.2502%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (444,225 samples, 0.25%)</title><rect x="49.0010%" y="69" width="0.2497%" height="15" fill="rgb(249,43,39)"/><text x="49.2510%" y="79.50"></text></g><g><title>item_attrs (407,055 samples, 0.23%)</title><rect x="49.0219%" y="53" width="0.2288%" height="15" fill="rgb(209,38,44)"/><text x="49.2719%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (405,385 samples, 0.23%)</title><rect x="49.0228%" y="37" width="0.2279%" height="15" fill="rgb(236,212,23)"/><text x="49.2728%" y="47.50"></text></g><g><title>adt_dtorck_constraint (512,516 samples, 0.29%)</title><rect x="48.9881%" y="101" width="0.2881%" height="15" fill="rgb(242,79,21)"/><text x="49.2381%" y="111.50"></text></g><g><title>adt_dtorck_constraint (607,797 samples, 0.34%)</title><rect x="48.9552%" y="117" width="0.3417%" height="15" fill="rgb(211,96,35)"/><text x="49.2052%" y="127.50"></text></g><g><title>adt_dtorck_constraint (891,353 samples, 0.50%)</title><rect x="48.8230%" y="133" width="0.5011%" height="15" fill="rgb(253,215,40)"/><text x="49.0730%" y="143.50"></text></g><g><title>dropck_outlives (1,462,836 samples, 0.82%)</title><rect x="48.5351%" y="149" width="0.8224%" height="15" fill="rgb(211,81,21)"/><text x="48.7851%" y="159.50"></text></g><g><title>generics_of (737,808 samples, 0.41%)</title><rect x="50.8044%" y="133" width="0.4148%" height="15" fill="rgb(208,190,38)"/><text x="51.0544%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (610,898 samples, 0.34%)</title><rect x="50.8758%" y="117" width="0.3434%" height="15" fill="rgb(235,213,38)"/><text x="51.1258%" y="127.50"></text></g><g><title>impl_trait_ref (324,614 samples, 0.18%)</title><rect x="51.2587%" y="133" width="0.1825%" height="15" fill="rgb(237,122,38)"/><text x="51.5087%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (272,474 samples, 0.15%)</title><rect x="51.2880%" y="117" width="0.1532%" height="15" fill="rgb(244,218,35)"/><text x="51.5380%" y="127.50"></text></g><g><title>predicates_of (210,932 samples, 0.12%)</title><rect x="51.4516%" y="133" width="0.1186%" height="15" fill="rgb(240,68,47)"/><text x="51.7016%" y="143.50"></text></g><g><title>specializes (324,384 samples, 0.18%)</title><rect x="51.5702%" y="133" width="0.1824%" height="15" fill="rgb(210,16,53)"/><text x="51.8202%" y="143.50"></text></g><g><title>param_env (224,922 samples, 0.13%)</title><rect x="51.6261%" y="117" width="0.1265%" height="15" fill="rgb(235,124,12)"/><text x="51.8761%" y="127.50"></text></g><g><title>trait_impls_of (463,366 samples, 0.26%)</title><rect x="51.7593%" y="133" width="0.2605%" height="15" fill="rgb(224,169,11)"/><text x="52.0093%" y="143.50"></text></g><g><title>implementations_of_trait (191,290 samples, 0.11%)</title><rect x="51.9123%" y="117" width="0.1075%" height="15" fill="rgb(250,166,2)"/><text x="52.1623%" y="127.50"></text></g><g><title>evaluate_obligation (4,755,352 samples, 2.67%)</title><rect x="49.3575%" y="149" width="2.6734%" height="15" fill="rgb(242,216,29)"/><text x="49.6075%" y="159.50">ev..</text></g><g><title>generics_of (713,384 samples, 0.40%)</title><rect x="52.1503%" y="149" width="0.4011%" height="15" fill="rgb(230,116,27)"/><text x="52.4003%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (536,523 samples, 0.30%)</title><rect x="52.2497%" y="133" width="0.3016%" height="15" fill="rgb(228,99,48)"/><text x="52.4997%" y="143.50"></text></g><g><title>item_attrs (251,452 samples, 0.14%)</title><rect x="52.6477%" y="149" width="0.1414%" height="15" fill="rgb(253,11,6)"/><text x="52.8977%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (240,392 samples, 0.14%)</title><rect x="52.6539%" y="133" width="0.1351%" height="15" fill="rgb(247,143,39)"/><text x="52.9039%" y="143.50"></text></g><g><title>evaluate_obligation (383,934 samples, 0.22%)</title><rect x="53.2117%" y="133" width="0.2158%" height="15" fill="rgb(236,97,10)"/><text x="53.4617%" y="143.50"></text></g><g><title>method_autoderef_steps (1,034,710 samples, 0.58%)</title><rect x="52.8541%" y="149" width="0.5817%" height="15" fill="rgb(233,208,19)"/><text x="53.1041%" y="159.50"></text></g><g><title>predicates_of (534,407 samples, 0.30%)</title><rect x="53.5509%" y="149" width="0.3004%" height="15" fill="rgb(216,164,2)"/><text x="53.8009%" y="159.50"></text></g><g><title>predicates_defined_on (371,785 samples, 0.21%)</title><rect x="53.6424%" y="133" width="0.2090%" height="15" fill="rgb(220,129,5)"/><text x="53.8924%" y="143.50"></text></g><g><title>item_bodies_checking (38,436,507 samples, 21.61%)</title><rect x="32.4166%" y="197" width="21.6089%" height="15" fill="rgb(242,17,10)"/><text x="32.6666%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,433,117 samples, 21.61%)</title><rect x="32.4186%" y="181" width="21.6069%" height="15" fill="rgb(242,107,0)"/><text x="32.6686%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (38,326,476 samples, 21.55%)</title><rect x="32.4785%" y="165" width="21.5470%" height="15" fill="rgb(251,28,31)"/><text x="32.7285%" y="175.50">typeck</text></g><g><title>item_types_checking (3,301,826 samples, 1.86%)</title><rect x="54.0255%" y="197" width="1.8563%" height="15" fill="rgb(233,223,10)"/><text x="54.2755%" y="207.50">i..</text></g><g><title>check_mod_item_types (3,295,566 samples, 1.85%)</title><rect x="54.0290%" y="181" width="1.8528%" height="15" fill="rgb(215,21,27)"/><text x="54.2790%" y="191.50">c..</text></g><g><title>typeck (209,662 samples, 0.12%)</title><rect x="55.7639%" y="165" width="0.1179%" height="15" fill="rgb(232,23,21)"/><text x="56.0139%" y="175.50"></text></g><g><title>fn_sig (454,785 samples, 0.26%)</title><rect x="56.1560%" y="165" width="0.2557%" height="15" fill="rgb(244,5,23)"/><text x="56.4060%" y="175.50"></text></g><g><title>is_late_bound_map (409,325 samples, 0.23%)</title><rect x="56.5280%" y="149" width="0.2301%" height="15" fill="rgb(226,81,46)"/><text x="56.7780%" y="159.50"></text></g><g><title>resolve_lifetimes (400,955 samples, 0.23%)</title><rect x="56.5327%" y="133" width="0.2254%" height="15" fill="rgb(247,70,30)"/><text x="56.7827%" y="143.50"></text></g><g><title>lint_levels (294,804 samples, 0.17%)</title><rect x="56.5924%" y="117" width="0.1657%" height="15" fill="rgb(212,68,19)"/><text x="56.8424%" y="127.50"></text></g><g><title>named_region_map (250,595 samples, 0.14%)</title><rect x="56.7581%" y="149" width="0.1409%" height="15" fill="rgb(240,187,13)"/><text x="57.0081%" y="159.50"></text></g><g><title>resolve_lifetimes (220,025 samples, 0.12%)</title><rect x="56.7753%" y="133" width="0.1237%" height="15" fill="rgb(223,113,26)"/><text x="57.0253%" y="143.50"></text></g><g><title>generics_of (896,852 samples, 0.50%)</title><rect x="56.4116%" y="165" width="0.5042%" height="15" fill="rgb(206,192,2)"/><text x="56.6616%" y="175.50"></text></g><g><title>late_bound_vars_map (257,511 samples, 0.14%)</title><rect x="57.4433%" y="117" width="0.1448%" height="15" fill="rgb(241,108,4)"/><text x="57.6933%" y="127.50"></text></g><g><title>resolve_lifetimes (240,871 samples, 0.14%)</title><rect x="57.4527%" y="101" width="0.1354%" height="15" fill="rgb(247,173,49)"/><text x="57.7027%" y="111.50"></text></g><g><title>explicit_predicates_of (715,638 samples, 0.40%)</title><rect x="57.2217%" y="133" width="0.4023%" height="15" fill="rgb(224,114,35)"/><text x="57.4717%" y="143.50"></text></g><g><title>predicates_of (1,609,717 samples, 0.90%)</title><rect x="57.0598%" y="165" width="0.9050%" height="15" fill="rgb(245,159,27)"/><text x="57.3098%" y="175.50"></text></g><g><title>predicates_defined_on (1,495,176 samples, 0.84%)</title><rect x="57.1242%" y="149" width="0.8406%" height="15" fill="rgb(245,172,44)"/><text x="57.3742%" y="159.50"></text></g><g><title>inferred_outlives_of (606,206 samples, 0.34%)</title><rect x="57.6240%" y="133" width="0.3408%" height="15" fill="rgb(236,23,11)"/><text x="57.8740%" y="143.50"></text></g><g><title>inferred_outlives_crate (564,836 samples, 0.32%)</title><rect x="57.6473%" y="117" width="0.3175%" height="15" fill="rgb(205,117,38)"/><text x="57.8973%" y="127.50"></text></g><g><title>type_of (304,014 samples, 0.17%)</title><rect x="57.7939%" y="101" width="0.1709%" height="15" fill="rgb(237,72,25)"/><text x="58.0439%" y="111.50"></text></g><g><title>type_collecting (4,127,927 samples, 2.32%)</title><rect x="55.8844%" y="197" width="2.3207%" height="15" fill="rgb(244,70,9)"/><text x="56.1344%" y="207.50">t..</text></g><g><title>collect_mod_item_types (4,116,167 samples, 2.31%)</title><rect x="55.8910%" y="181" width="2.3141%" height="15" fill="rgb(217,125,39)"/><text x="56.1410%" y="191.50">c..</text></g><g><title>type_of (366,153 samples, 0.21%)</title><rect x="57.9992%" y="165" width="0.2058%" height="15" fill="rgb(235,36,10)"/><text x="58.2492%" y="175.50"></text></g><g><title>evaluate_obligation (1,312,805 samples, 0.74%)</title><rect x="60.7951%" y="165" width="0.7381%" height="15" fill="rgb(251,123,47)"/><text x="61.0451%" y="175.50"></text></g><g><title>implied_outlives_bounds (535,784 samples, 0.30%)</title><rect x="61.5579%" y="165" width="0.3012%" height="15" fill="rgb(221,13,13)"/><text x="61.8079%" y="175.50"></text></g><g><title>param_env (546,179 samples, 0.31%)</title><rect x="61.8802%" y="165" width="0.3071%" height="15" fill="rgb(238,131,9)"/><text x="62.1302%" y="175.50"></text></g><g><title>region_scope_tree (495,766 samples, 0.28%)</title><rect x="62.2181%" y="165" width="0.2787%" height="15" fill="rgb(211,50,8)"/><text x="62.4681%" y="175.50"></text></g><g><title>check_impl_item_well_formed (7,273,982 samples, 4.09%)</title><rect x="58.4095%" y="181" width="4.0894%" height="15" fill="rgb(245,182,24)"/><text x="58.6595%" y="191.50">chec..</text></g><g><title>evaluate_obligation (392,917 samples, 0.22%)</title><rect x="64.5114%" y="165" width="0.2209%" height="15" fill="rgb(242,14,37)"/><text x="64.7614%" y="175.50"></text></g><g><title>implied_outlives_bounds (208,785 samples, 0.12%)</title><rect x="64.7520%" y="165" width="0.1174%" height="15" fill="rgb(246,228,12)"/><text x="65.0020%" y="175.50"></text></g><g><title>param_env (685,532 samples, 0.39%)</title><rect x="64.8694%" y="165" width="0.3854%" height="15" fill="rgb(213,55,15)"/><text x="65.1194%" y="175.50"></text></g><g><title>check_item_well_formed (5,280,558 samples, 2.97%)</title><rect x="62.4989%" y="181" width="2.9687%" height="15" fill="rgb(209,9,3)"/><text x="62.7489%" y="191.50">che..</text></g><g><title>analysis (116,116,850 samples, 65.28%)</title><rect x="0.3243%" y="229" width="65.2804%" height="15" fill="rgb(230,59,30)"/><text x="0.5743%" y="239.50">analysis</text></g><g><title>type_check_crate (74,525,858 samples, 41.90%)</title><rect x="23.7066%" y="213" width="41.8981%" height="15" fill="rgb(209,121,21)"/><text x="23.9566%" y="223.50">type_check_crate</text></g><g><title>wf_checking (13,155,717 samples, 7.40%)</title><rect x="58.2086%" y="197" width="7.3961%" height="15" fill="rgb(220,109,13)"/><text x="58.4586%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (243,903 samples, 0.14%)</title><rect x="65.4676%" y="181" width="0.1371%" height="15" fill="rgb(232,18,1)"/><text x="65.7176%" y="191.50"></text></g><g><title>codegen_crate (460,395 samples, 0.26%)</title><rect x="65.6087%" y="229" width="0.2588%" height="15" fill="rgb(215,41,42)"/><text x="65.8587%" y="239.50"></text></g><g><title>AST_validation (270,353 samples, 0.15%)</title><rect x="65.9452%" y="213" width="0.1520%" height="15" fill="rgb(224,123,36)"/><text x="66.1952%" y="223.50"></text></g><g><title>metadata_load_macro (370,016 samples, 0.21%)</title><rect x="85.1203%" y="181" width="0.2080%" height="15" fill="rgb(240,125,3)"/><text x="85.3703%" y="191.50"></text></g><g><title>metadata_register_crate (8,746,177 samples, 4.92%)</title><rect x="85.3283%" y="181" width="4.9171%" height="15" fill="rgb(205,98,50)"/><text x="85.5783%" y="191.50">metada..</text></g><g><title>metadata_register_crate (7,054,319 samples, 3.97%)</title><rect x="86.2795%" y="165" width="3.9659%" height="15" fill="rgb(205,185,37)"/><text x="86.5295%" y="175.50">meta..</text></g><g><title>macro_expand_crate (42,940,657 samples, 24.14%)</title><rect x="66.1816%" y="213" width="24.1411%" height="15" fill="rgb(238,207,15)"/><text x="66.4316%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (42,922,337 samples, 24.13%)</title><rect x="66.1919%" y="197" width="24.1308%" height="15" fill="rgb(213,199,42)"/><text x="66.4419%" y="207.50">expand_crate</text></g><g><title>finalize_macro_resolutions (259,163 samples, 0.15%)</title><rect x="90.4264%" y="197" width="0.1457%" height="15" fill="rgb(235,201,11)"/><text x="90.6764%" y="207.50"></text></g><g><title>late_resolve_crate (2,103,763 samples, 1.18%)</title><rect x="90.5721%" y="197" width="1.1827%" height="15" fill="rgb(207,46,11)"/><text x="90.8221%" y="207.50"></text></g><g><title>configure_and_expand (46,200,123 samples, 25.97%)</title><rect x="65.8675%" y="229" width="25.9735%" height="15" fill="rgb(241,35,35)"/><text x="66.1175%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,626,389 samples, 1.48%)</title><rect x="90.3645%" y="213" width="1.4765%" height="15" fill="rgb(243,32,47)"/><text x="90.6145%" y="223.50"></text></g><g><title>drop_ast (250,613 samples, 0.14%)</title><rect x="91.8410%" y="229" width="0.1409%" height="15" fill="rgb(247,202,23)"/><text x="92.0910%" y="239.50"></text></g><g><title>early_lint_checks (648,877 samples, 0.36%)</title><rect x="91.9937%" y="229" width="0.3648%" height="15" fill="rgb(219,102,11)"/><text x="92.2437%" y="239.50"></text></g><g><title>free_global_ctxt (4,245,847 samples, 2.39%)</title><rect x="92.3585%" y="229" width="2.3870%" height="15" fill="rgb(243,110,44)"/><text x="92.6085%" y="239.50">fr..</text></g><g><title>generate_crate_metadata (2,588,379 samples, 1.46%)</title><rect x="94.7455%" y="229" width="1.4552%" height="15" fill="rgb(222,74,54)"/><text x="94.9955%" y="239.50"></text></g><g><title>hir_lowering (4,589,771 samples, 2.58%)</title><rect x="96.2007%" y="229" width="2.5804%" height="15" fill="rgb(216,99,12)"/><text x="96.4507%" y="239.50">hi..</text></g><g><title>parse_crate (253,323 samples, 0.14%)</title><rect x="98.8220%" y="229" width="0.1424%" height="15" fill="rgb(226,22,26)"/><text x="99.0720%" y="239.50"></text></g><g><title>prepare_outputs (229,112 samples, 0.13%)</title><rect x="98.9677%" y="229" width="0.1288%" height="15" fill="rgb(217,163,10)"/><text x="99.2177%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,152,093 samples, 0.65%)</title><rect x="99.0965%" y="229" width="0.6477%" height="15" fill="rgb(213,25,53)"/><text x="99.3465%" y="239.50"></text></g><g><title>all (177,873,885 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (177,873,885 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (372,794 samples, 0.21%)</title><rect x="99.7904%" y="229" width="0.2096%" height="15" fill="rgb(229,68,48)"/><text x="100.0404%" y="239.50"></text></g></svg></svg>