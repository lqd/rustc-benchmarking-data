<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>hir_module_items (67,541 samples, 0.45%)</title><rect x="3.3721%" y="165" width="0.4491%" height="15" fill="rgb(227,0,7)"/><text x="3.6221%" y="175.50"></text></g><g><title>hir_owner (17,690 samples, 0.12%)</title><rect x="3.7036%" y="149" width="0.1176%" height="15" fill="rgb(217,0,24)"/><text x="3.9536%" y="159.50"></text></g><g><title>check_mod_attrs (28,250 samples, 0.19%)</title><rect x="3.9401%" y="149" width="0.1878%" height="15" fill="rgb(221,193,54)"/><text x="4.1901%" y="159.50"></text></g><g><title>lookup_deprecation_entry (55,361 samples, 0.37%)</title><rect x="4.6631%" y="133" width="0.3681%" height="15" fill="rgb(248,212,6)"/><text x="4.9131%" y="143.50"></text></g><g><title>stability_index (23,051 samples, 0.15%)</title><rect x="4.8780%" y="117" width="0.1533%" height="15" fill="rgb(208,68,35)"/><text x="5.1280%" y="127.50"></text></g><g><title>lookup_stability (20,260 samples, 0.13%)</title><rect x="5.0312%" y="133" width="0.1347%" height="15" fill="rgb(232,128,0)"/><text x="5.2812%" y="143.50"></text></g><g><title>metadata_decode_entry_lookup_stability (15,550 samples, 0.10%)</title><rect x="5.0626%" y="117" width="0.1034%" height="15" fill="rgb(207,160,47)"/><text x="5.3126%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (147,392 samples, 0.98%)</title><rect x="4.2736%" y="149" width="0.9801%" height="15" fill="rgb(228,23,34)"/><text x="4.5236%" y="159.50"></text></g><g><title>looking_for_derive_registrar (32,450 samples, 0.22%)</title><rect x="5.2586%" y="149" width="0.2158%" height="15" fill="rgb(218,30,26)"/><text x="5.5086%" y="159.50"></text></g><g><title>proc_macro_decls_static (18,370 samples, 0.12%)</title><rect x="5.3523%" y="133" width="0.1221%" height="15" fill="rgb(220,122,19)"/><text x="5.6023%" y="143.50"></text></g><g><title>misc_checking_1 (251,293 samples, 1.67%)</title><rect x="3.8238%" y="165" width="1.6709%" height="15" fill="rgb(250,228,42)"/><text x="4.0738%" y="175.50"></text></g><g><title>check_private_in_public (40,491 samples, 0.27%)</title><rect x="5.6042%" y="149" width="0.2692%" height="15" fill="rgb(240,193,28)"/><text x="5.8542%" y="159.50"></text></g><g><title>codegen_fn_attrs (53,770 samples, 0.36%)</title><rect x="6.1930%" y="133" width="0.3575%" height="15" fill="rgb(216,20,37)"/><text x="6.4430%" y="143.50"></text></g><g><title>supported_target_features (21,350 samples, 0.14%)</title><rect x="6.4086%" y="117" width="0.1420%" height="15" fill="rgb(206,188,39)"/><text x="6.6586%" y="127.50"></text></g><g><title>death_checking (104,511 samples, 0.69%)</title><rect x="5.8735%" y="149" width="0.6949%" height="15" fill="rgb(217,207,13)"/><text x="6.1235%" y="159.50"></text></g><g><title>explicit_predicates_of (19,850 samples, 0.13%)</title><rect x="7.3681%" y="69" width="0.1320%" height="15" fill="rgb(231,73,38)"/><text x="7.6181%" y="79.50"></text></g><g><title>crate_lints (140,901 samples, 0.94%)</title><rect x="6.5770%" y="133" width="0.9369%" height="15" fill="rgb(225,20,46)"/><text x="6.8270%" y="143.50"></text></g><g><title>param_env (105,491 samples, 0.70%)</title><rect x="6.8124%" y="117" width="0.7014%" height="15" fill="rgb(210,31,41)"/><text x="7.0624%" y="127.50"></text></g><g><title>predicates_of (48,920 samples, 0.33%)</title><rect x="7.1886%" y="101" width="0.3253%" height="15" fill="rgb(221,200,47)"/><text x="7.4386%" y="111.50"></text></g><g><title>predicates_defined_on (36,580 samples, 0.24%)</title><rect x="7.2706%" y="85" width="0.2432%" height="15" fill="rgb(226,26,5)"/><text x="7.5206%" y="95.50"></text></g><g><title>lint_checking (160,962 samples, 1.07%)</title><rect x="6.5684%" y="149" width="1.0703%" height="15" fill="rgb(249,33,26)"/><text x="6.8184%" y="159.50"></text></g><g><title>module_lints (18,771 samples, 0.12%)</title><rect x="7.5139%" y="133" width="0.1248%" height="15" fill="rgb(235,183,28)"/><text x="7.7639%" y="143.50"></text></g><g><title>lint_mod (17,351 samples, 0.12%)</title><rect x="7.5233%" y="117" width="0.1154%" height="15" fill="rgb(221,5,38)"/><text x="7.7733%" y="127.50"></text></g><g><title>privacy_access_levels (49,761 samples, 0.33%)</title><rect x="7.6387%" y="149" width="0.3309%" height="15" fill="rgb(247,18,42)"/><text x="7.8887%" y="159.50"></text></g><g><title>late_bound_vars_map (23,020 samples, 0.15%)</title><rect x="8.3387%" y="117" width="0.1531%" height="15" fill="rgb(241,131,45)"/><text x="8.5887%" y="127.50"></text></g><g><title>resolve_lifetimes (17,240 samples, 0.11%)</title><rect x="8.3771%" y="101" width="0.1146%" height="15" fill="rgb(249,31,29)"/><text x="8.6271%" y="111.50"></text></g><g><title>privacy_checking_modules (80,050 samples, 0.53%)</title><rect x="7.9696%" y="149" width="0.5323%" height="15" fill="rgb(225,111,53)"/><text x="8.2196%" y="159.50"></text></g><g><title>check_mod_privacy (79,080 samples, 0.53%)</title><rect x="7.9760%" y="133" width="0.5258%" height="15" fill="rgb(238,160,17)"/><text x="8.2260%" y="143.50"></text></g><g><title>misc_checking_3 (450,415 samples, 2.99%)</title><rect x="5.5712%" y="165" width="2.9950%" height="15" fill="rgb(214,148,48)"/><text x="5.8212%" y="175.50">mis..</text></g><g><title>coherent_trait (85,281 samples, 0.57%)</title><rect x="8.8436%" y="133" width="0.5671%" height="15" fill="rgb(232,36,49)"/><text x="9.0936%" y="143.50"></text></g><g><title>specialization_graph_of (75,531 samples, 0.50%)</title><rect x="8.9085%" y="117" width="0.5022%" height="15" fill="rgb(209,103,24)"/><text x="9.1585%" y="127.50"></text></g><g><title>orphan_check_crate (25,260 samples, 0.17%)</title><rect x="9.4495%" y="133" width="0.1680%" height="15" fill="rgb(229,88,8)"/><text x="9.6995%" y="143.50"></text></g><g><title>coherence_checking (138,251 samples, 0.92%)</title><rect x="8.7474%" y="149" width="0.9193%" height="15" fill="rgb(213,181,19)"/><text x="8.9974%" y="159.50"></text></g><g><title>item_types_checking (19,280 samples, 0.13%)</title><rect x="9.7515%" y="149" width="0.1282%" height="15" fill="rgb(254,191,54)"/><text x="10.0015%" y="159.50"></text></g><g><title>check_mod_item_types (17,530 samples, 0.12%)</title><rect x="9.7632%" y="133" width="0.1166%" height="15" fill="rgb(241,83,37)"/><text x="10.0132%" y="143.50"></text></g><g><title>is_late_bound_map (85,611 samples, 0.57%)</title><rect x="10.7981%" y="101" width="0.5693%" height="15" fill="rgb(233,36,39)"/><text x="11.0481%" y="111.50"></text></g><g><title>resolve_lifetimes (77,061 samples, 0.51%)</title><rect x="10.8550%" y="85" width="0.5124%" height="15" fill="rgb(226,3,54)"/><text x="11.1050%" y="95.50"></text></g><g><title>generics_of (135,642 samples, 0.90%)</title><rect x="10.5136%" y="117" width="0.9019%" height="15" fill="rgb(245,192,40)"/><text x="10.7636%" y="127.50"></text></g><g><title>explicit_predicates_of (63,310 samples, 0.42%)</title><rect x="11.6751%" y="85" width="0.4210%" height="15" fill="rgb(238,167,29)"/><text x="11.9251%" y="95.50"></text></g><g><title>predicates_of (91,520 samples, 0.61%)</title><rect x="11.5061%" y="117" width="0.6086%" height="15" fill="rgb(232,182,51)"/><text x="11.7561%" y="127.50"></text></g><g><title>predicates_defined_on (82,320 samples, 0.55%)</title><rect x="11.5673%" y="101" width="0.5474%" height="15" fill="rgb(231,60,39)"/><text x="11.8173%" y="111.50"></text></g><g><title>late_bound_vars_map (74,690 samples, 0.50%)</title><rect x="12.6661%" y="85" width="0.4966%" height="15" fill="rgb(208,69,12)"/><text x="12.9161%" y="95.50"></text></g><g><title>resolve_lifetimes_trait_definition (66,960 samples, 0.45%)</title><rect x="12.7175%" y="69" width="0.4452%" height="15" fill="rgb(235,93,37)"/><text x="12.9675%" y="79.50"></text></g><g><title>get_lang_items (38,240 samples, 0.25%)</title><rect x="12.9084%" y="53" width="0.2543%" height="15" fill="rgb(213,116,39)"/><text x="13.1584%" y="63.50"></text></g><g><title>super_predicates_of (15,921 samples, 0.11%)</title><rect x="13.1691%" y="85" width="0.1059%" height="15" fill="rgb(222,207,29)"/><text x="13.4191%" y="95.50"></text></g><g><title>super_predicates_of (177,303 samples, 1.18%)</title><rect x="12.1147%" y="117" width="1.1790%" height="15" fill="rgb(206,96,30)"/><text x="12.3647%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (167,793 samples, 1.12%)</title><rect x="12.1779%" y="101" width="1.1157%" height="15" fill="rgb(218,138,4)"/><text x="12.4279%" y="111.50"></text></g><g><title>type_collecting (631,327 samples, 4.20%)</title><rect x="9.8924%" y="149" width="4.1979%" height="15" fill="rgb(250,191,14)"/><text x="10.1424%" y="159.50">type_..</text></g><g><title>collect_mod_item_types (617,017 samples, 4.10%)</title><rect x="9.9876%" y="133" width="4.1028%" height="15" fill="rgb(239,60,40)"/><text x="10.2376%" y="143.50">coll..</text></g><g><title>type_of (117,630 samples, 0.78%)</title><rect x="13.3082%" y="117" width="0.7822%" height="15" fill="rgb(206,27,48)"/><text x="13.5582%" y="127.50"></text></g><g><title>type_of (57,370 samples, 0.38%)</title><rect x="13.7089%" y="101" width="0.3815%" height="15" fill="rgb(225,35,8)"/><text x="13.9589%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (53,370 samples, 0.35%)</title><rect x="13.7355%" y="85" width="0.3549%" height="15" fill="rgb(250,213,24)"/><text x="13.9855%" y="95.50"></text></g><g><title>adt_def (46,180 samples, 0.31%)</title><rect x="21.0654%" y="101" width="0.3071%" height="15" fill="rgb(247,123,22)"/><text x="21.3154%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (45,390 samples, 0.30%)</title><rect x="21.0707%" y="85" width="0.3018%" height="15" fill="rgb(231,138,38)"/><text x="21.3207%" y="95.50"></text></g><g><title>item_attrs (38,600 samples, 0.26%)</title><rect x="21.1158%" y="69" width="0.2567%" height="15" fill="rgb(231,145,46)"/><text x="21.3658%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (37,710 samples, 0.25%)</title><rect x="21.1218%" y="53" width="0.2507%" height="15" fill="rgb(251,118,11)"/><text x="21.3718%" y="63.50"></text></g><g><title>adt_sized_constraint (42,911 samples, 0.29%)</title><rect x="21.3725%" y="101" width="0.2853%" height="15" fill="rgb(217,147,25)"/><text x="21.6225%" y="111.50"></text></g><g><title>adt_def (42,351 samples, 0.28%)</title><rect x="21.3762%" y="85" width="0.2816%" height="15" fill="rgb(247,81,37)"/><text x="21.6262%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (42,081 samples, 0.28%)</title><rect x="21.3780%" y="69" width="0.2798%" height="15" fill="rgb(209,12,38)"/><text x="21.6280%" y="79.50"></text></g><g><title>item_attrs (39,881 samples, 0.27%)</title><rect x="21.3926%" y="53" width="0.2652%" height="15" fill="rgb(227,1,9)"/><text x="21.6426%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (39,541 samples, 0.26%)</title><rect x="21.3949%" y="37" width="0.2629%" height="15" fill="rgb(248,47,43)"/><text x="21.6449%" y="47.50"></text></g><g><title>adt_sized_constraint (101,161 samples, 0.67%)</title><rect x="21.0308%" y="117" width="0.6727%" height="15" fill="rgb(221,10,30)"/><text x="21.2808%" y="127.50"></text></g><g><title>adt_sized_constraint (21,051 samples, 0.14%)</title><rect x="22.4430%" y="101" width="0.1400%" height="15" fill="rgb(210,229,1)"/><text x="22.6930%" y="111.50"></text></g><g><title>adt_def (17,381 samples, 0.12%)</title><rect x="22.4674%" y="85" width="0.1156%" height="15" fill="rgb(222,148,37)"/><text x="22.7174%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (16,591 samples, 0.11%)</title><rect x="22.4726%" y="69" width="0.1103%" height="15" fill="rgb(234,67,33)"/><text x="22.7226%" y="79.50"></text></g><g><title>predicates_of (15,400 samples, 0.10%)</title><rect x="22.6975%" y="101" width="0.1024%" height="15" fill="rgb(247,98,35)"/><text x="22.9475%" y="111.50"></text></g><g><title>evaluate_obligation (183,021 samples, 1.22%)</title><rect x="21.7034%" y="117" width="1.2170%" height="15" fill="rgb(247,138,52)"/><text x="21.9534%" y="127.50"></text></g><g><title>trait_impls_of (18,120 samples, 0.12%)</title><rect x="22.7999%" y="101" width="0.1205%" height="15" fill="rgb(213,79,30)"/><text x="23.0499%" y="111.50"></text></g><g><title>generics_of (20,470 samples, 0.14%)</title><rect x="22.9204%" y="117" width="0.1361%" height="15" fill="rgb(246,177,23)"/><text x="23.1704%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (16,140 samples, 0.11%)</title><rect x="22.9492%" y="101" width="0.1073%" height="15" fill="rgb(230,62,27)"/><text x="23.1992%" y="111.50"></text></g><g><title>impl_polarity (17,770 samples, 0.12%)</title><rect x="23.0565%" y="117" width="0.1182%" height="15" fill="rgb(216,154,8)"/><text x="23.3065%" y="127.50"></text></g><g><title>impl_trait_ref (49,220 samples, 0.33%)</title><rect x="23.1747%" y="117" width="0.3273%" height="15" fill="rgb(244,35,45)"/><text x="23.4247%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (41,170 samples, 0.27%)</title><rect x="23.2282%" y="101" width="0.2738%" height="15" fill="rgb(251,115,12)"/><text x="23.4782%" y="111.50"></text></g><g><title>implied_outlives_bounds (119,582 samples, 0.80%)</title><rect x="23.5020%" y="117" width="0.7951%" height="15" fill="rgb(240,54,50)"/><text x="23.7520%" y="127.50"></text></g><g><title>param_env (231,004 samples, 1.54%)</title><rect x="24.2971%" y="117" width="1.5360%" height="15" fill="rgb(233,84,52)"/><text x="24.5471%" y="127.50"></text></g><g><title>explicit_predicates_of (32,132 samples, 0.21%)</title><rect x="26.2509%" y="85" width="0.2137%" height="15" fill="rgb(207,117,47)"/><text x="26.5009%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (23,231 samples, 0.15%)</title><rect x="26.3101%" y="69" width="0.1545%" height="15" fill="rgb(249,43,39)"/><text x="26.5601%" y="79.50"></text></g><g><title>predicates_of (122,024 samples, 0.81%)</title><rect x="25.8332%" y="117" width="0.8114%" height="15" fill="rgb(209,38,44)"/><text x="26.0832%" y="127.50"></text></g><g><title>predicates_defined_on (87,334 samples, 0.58%)</title><rect x="26.0638%" y="101" width="0.5807%" height="15" fill="rgb(236,212,23)"/><text x="26.3138%" y="111.50"></text></g><g><title>inferred_outlives_of (27,061 samples, 0.18%)</title><rect x="26.4646%" y="85" width="0.1799%" height="15" fill="rgb(242,79,21)"/><text x="26.7146%" y="95.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (19,580 samples, 0.13%)</title><rect x="26.5143%" y="69" width="0.1302%" height="15" fill="rgb(211,96,35)"/><text x="26.7643%" y="79.50"></text></g><g><title>analysis (3,766,351 samples, 25.04%)</title><rect x="2.7749%" y="181" width="25.0439%" height="15" fill="rgb(253,215,40)"/><text x="3.0249%" y="191.50">analysis</text></g><g><title>type_check_crate (2,895,402 samples, 19.25%)</title><rect x="8.5662%" y="165" width="19.2526%" height="15" fill="rgb(211,81,21)"/><text x="8.8162%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,064,623 samples, 13.73%)</title><rect x="14.0904%" y="149" width="13.7285%" height="15" fill="rgb(208,190,38)"/><text x="14.3404%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (2,021,353 samples, 13.44%)</title><rect x="14.3781%" y="133" width="13.4407%" height="15" fill="rgb(235,213,38)"/><text x="14.6281%" y="143.50">check_item_well_form..</text></g><g><title>trait_impls_of (166,662 samples, 1.11%)</title><rect x="26.7106%" y="117" width="1.1082%" height="15" fill="rgb(237,122,38)"/><text x="26.9606%" y="127.50"></text></g><g><title>implementations_of_trait (41,780 samples, 0.28%)</title><rect x="27.5410%" y="101" width="0.2778%" height="15" fill="rgb(244,218,35)"/><text x="27.7910%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (33,540 samples, 0.22%)</title><rect x="27.5958%" y="85" width="0.2230%" height="15" fill="rgb(240,68,47)"/><text x="27.8458%" y="95.50"></text></g><g><title>native_libraries (19,760 samples, 0.13%)</title><rect x="29.7377%" y="165" width="0.1314%" height="15" fill="rgb(210,16,53)"/><text x="29.9877%" y="175.50"></text></g><g><title>metadata_decode_entry_native_libraries (15,250 samples, 0.10%)</title><rect x="29.7677%" y="149" width="0.1014%" height="15" fill="rgb(235,124,12)"/><text x="30.0177%" y="159.50"></text></g><g><title>codegen_crate (313,914 samples, 2.09%)</title><rect x="27.8611%" y="181" width="2.0873%" height="15" fill="rgb(224,169,11)"/><text x="28.1111%" y="191.50">c..</text></g><g><title>AST_validation (57,731 samples, 0.38%)</title><rect x="30.7596%" y="165" width="0.3839%" height="15" fill="rgb(250,166,2)"/><text x="31.0096%" y="175.50"></text></g><g><title>crate_injection (64,410 samples, 0.43%)</title><rect x="31.2267%" y="165" width="0.4283%" height="15" fill="rgb(242,216,29)"/><text x="31.4767%" y="175.50"></text></g><g><title>metadata_load_macro (23,561 samples, 0.16%)</title><rect x="64.9493%" y="133" width="0.1567%" height="15" fill="rgb(230,116,27)"/><text x="65.1993%" y="143.50"></text></g><g><title>macro_expand_crate (6,286,541 samples, 41.80%)</title><rect x="31.6550%" y="165" width="41.8016%" height="15" fill="rgb(228,99,48)"/><text x="31.9050%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (6,277,401 samples, 41.74%)</title><rect x="31.7157%" y="149" width="41.7408%" height="15" fill="rgb(253,11,6)"/><text x="31.9657%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (1,255,854 samples, 8.35%)</title><rect x="65.1059%" y="133" width="8.3506%" height="15" fill="rgb(247,143,39)"/><text x="65.3559%" y="143.50">metadata_reg..</text></g><g><title>metadata_register_crate (445,705 samples, 2.96%)</title><rect x="70.4929%" y="117" width="2.9637%" height="15" fill="rgb(236,97,10)"/><text x="70.7429%" y="127.50">met..</text></g><g><title>metadata_register_crate (36,891 samples, 0.25%)</title><rect x="73.2113%" y="101" width="0.2453%" height="15" fill="rgb(233,208,19)"/><text x="73.4613%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (35,781 samples, 0.24%)</title><rect x="73.5044%" y="165" width="0.2379%" height="15" fill="rgb(216,164,2)"/><text x="73.7544%" y="175.50"></text></g><g><title>finalize_imports (30,950 samples, 0.21%)</title><rect x="73.7649%" y="149" width="0.2058%" height="15" fill="rgb(220,129,5)"/><text x="74.0149%" y="159.50"></text></g><g><title>finalize_macro_resolutions (73,241 samples, 0.49%)</title><rect x="73.9707%" y="149" width="0.4870%" height="15" fill="rgb(242,17,10)"/><text x="74.2207%" y="159.50"></text></g><g><title>late_resolve_crate (96,391 samples, 0.64%)</title><rect x="74.4577%" y="149" width="0.6409%" height="15" fill="rgb(242,107,0)"/><text x="74.7077%" y="159.50"></text></g><g><title>configure_and_expand (6,814,226 samples, 45.31%)</title><rect x="29.9484%" y="181" width="45.3104%" height="15" fill="rgb(251,28,31)"/><text x="30.1984%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (228,052 samples, 1.52%)</title><rect x="73.7424%" y="165" width="1.5164%" height="15" fill="rgb(233,223,10)"/><text x="73.9924%" y="175.50"></text></g><g><title>drop_ast (26,431 samples, 0.18%)</title><rect x="75.2588%" y="181" width="0.1757%" height="15" fill="rgb(215,21,27)"/><text x="75.5088%" y="191.50"></text></g><g><title>early_lint_checks (55,030 samples, 0.37%)</title><rect x="75.5289%" y="181" width="0.3659%" height="15" fill="rgb(232,23,21)"/><text x="75.7789%" y="191.50"></text></g><g><title>free_global_ctxt (1,410,915 samples, 9.38%)</title><rect x="75.8949%" y="181" width="9.3817%" height="15" fill="rgb(244,5,23)"/><text x="76.1449%" y="191.50">free_global_c..</text></g><g><title>crate_hash (68,941 samples, 0.46%)</title><rect x="87.3362%" y="165" width="0.4584%" height="15" fill="rgb(226,81,46)"/><text x="87.5862%" y="175.50"></text></g><g><title>mir_keys (31,370 samples, 0.21%)</title><rect x="88.1070%" y="165" width="0.2086%" height="15" fill="rgb(247,70,30)"/><text x="88.3570%" y="175.50"></text></g><g><title>generate_crate_metadata (476,536 samples, 3.17%)</title><rect x="85.2766%" y="181" width="3.1687%" height="15" fill="rgb(212,68,19)"/><text x="85.5266%" y="191.50">gen..</text></g><g><title>hir_lowering (379,955 samples, 2.53%)</title><rect x="88.4452%" y="181" width="2.5265%" height="15" fill="rgb(240,187,13)"/><text x="88.6952%" y="191.50">hi..</text></g><g><title>link (38,711 samples, 0.26%)</title><rect x="90.9717%" y="181" width="0.2574%" height="15" fill="rgb(223,113,26)"/><text x="91.2217%" y="191.50"></text></g><g><title>parse_crate (461,616 samples, 3.07%)</title><rect x="91.2291%" y="181" width="3.0695%" height="15" fill="rgb(206,192,2)"/><text x="91.4791%" y="191.50">par..</text></g><g><title>prepare_outputs (177,152 samples, 1.18%)</title><rect x="94.3377%" y="181" width="1.1780%" height="15" fill="rgb(241,108,4)"/><text x="94.5877%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (319,913 samples, 2.13%)</title><rect x="95.5157%" y="181" width="2.1272%" height="15" fill="rgb(247,173,49)"/><text x="95.7657%" y="191.50">s..</text></g><g><title>setup_global_ctxt (97,491 samples, 0.65%)</title><rect x="97.7103%" y="181" width="0.6483%" height="15" fill="rgb(224,114,35)"/><text x="97.9603%" y="191.50"></text></g><g><title>all (15,038,998 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (15,038,998 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (246,852 samples, 1.64%)</title><rect x="98.3586%" y="181" width="1.6414%" height="15" fill="rgb(236,23,11)"/><text x="98.6086%" y="191.50"></text></g></svg></svg>