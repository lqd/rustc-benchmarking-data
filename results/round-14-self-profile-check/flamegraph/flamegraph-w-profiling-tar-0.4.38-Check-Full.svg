<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,052,291 samples, 0.19%)</title><rect x="16.6608%" y="133" width="0.1941%" height="15" fill="rgb(227,0,7)"/><text x="16.9108%" y="143.50"></text></g><g><title>param_env (1,276,647 samples, 0.24%)</title><rect x="18.8737%" y="101" width="0.2354%" height="15" fill="rgb(217,0,24)"/><text x="19.1237%" y="111.50"></text></g><g><title>item_attrs (1,299,034 samples, 0.24%)</title><rect x="19.7199%" y="69" width="0.2396%" height="15" fill="rgb(221,193,54)"/><text x="19.9699%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,258,044 samples, 0.23%)</title><rect x="19.7275%" y="53" width="0.2320%" height="15" fill="rgb(248,212,6)"/><text x="19.9775%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,735,367 samples, 0.32%)</title><rect x="19.6523%" y="85" width="0.3200%" height="15" fill="rgb(208,68,35)"/><text x="19.9023%" y="95.50"></text></g><g><title>adt_drop_tys (1,177,034 samples, 0.22%)</title><rect x="23.4568%" y="53" width="0.2171%" height="15" fill="rgb(232,128,0)"/><text x="23.7068%" y="63.50"></text></g><g><title>is_copy_raw (3,872,095 samples, 0.71%)</title><rect x="23.6745%" y="53" width="0.7141%" height="15" fill="rgb(207,160,47)"/><text x="23.9245%" y="63.50"></text></g><g><title>evaluate_obligation (3,119,601 samples, 0.58%)</title><rect x="23.8133%" y="37" width="0.5753%" height="15" fill="rgb(228,23,34)"/><text x="24.0633%" y="47.50"></text></g><g><title>needs_drop_raw (5,782,475 samples, 1.07%)</title><rect x="23.3262%" y="69" width="1.0664%" height="15" fill="rgb(218,30,26)"/><text x="23.5762%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,903,263 samples, 0.35%)</title><rect x="24.5649%" y="53" width="0.3510%" height="15" fill="rgb(220,122,19)"/><text x="24.8149%" y="63.50"></text></g><g><title>resolve_instance (3,839,344 samples, 0.71%)</title><rect x="24.3926%" y="69" width="0.7080%" height="15" fill="rgb(250,228,42)"/><text x="24.6426%" y="79.50"></text></g><g><title>thir_body (7,066,317 samples, 1.30%)</title><rect x="25.1426%" y="69" width="1.3031%" height="15" fill="rgb(240,193,28)"/><text x="25.3926%" y="79.50"></text></g><g><title>mir_const (46,177,471 samples, 8.52%)</title><rect x="17.9543%" y="117" width="8.5158%" height="15" fill="rgb(216,20,37)"/><text x="18.2043%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (39,915,296 samples, 7.36%)</title><rect x="19.1091%" y="101" width="7.3610%" height="15" fill="rgb(206,188,39)"/><text x="19.3591%" y="111.50">unsafety_c..</text></g><g><title>mir_built (35,230,660 samples, 6.50%)</title><rect x="19.9731%" y="85" width="6.4971%" height="15" fill="rgb(217,207,13)"/><text x="20.2231%" y="95.50">mir_built</text></g><g><title>mir_promoted (53,015,824 samples, 9.78%)</title><rect x="16.9382%" y="133" width="9.7769%" height="15" fill="rgb(231,73,38)"/><text x="17.1882%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (1,328,303 samples, 0.24%)</title><rect x="26.4701%" y="117" width="0.2450%" height="15" fill="rgb(225,20,46)"/><text x="26.7201%" y="127.50"></text></g><g><title>mir_const (912,091 samples, 0.17%)</title><rect x="26.5469%" y="101" width="0.1682%" height="15" fill="rgb(210,31,41)"/><text x="26.7969%" y="111.50"></text></g><g><title>unsafety_check_result (620,747 samples, 0.11%)</title><rect x="26.6006%" y="85" width="0.1145%" height="15" fill="rgb(221,200,47)"/><text x="26.8506%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (1,182,895 samples, 0.22%)</title><rect x="26.7180%" y="133" width="0.2181%" height="15" fill="rgb(226,26,5)"/><text x="26.9680%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,039,162 samples, 0.74%)</title><rect x="26.9362%" y="133" width="0.7449%" height="15" fill="rgb(249,33,26)"/><text x="27.1862%" y="143.50"></text></g><g><title>normalize_projection_ty (2,925,169 samples, 0.54%)</title><rect x="27.1416%" y="117" width="0.5394%" height="15" fill="rgb(235,183,28)"/><text x="27.3916%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,854,717 samples, 0.34%)</title><rect x="27.6811%" y="133" width="0.3420%" height="15" fill="rgb(221,5,38)"/><text x="27.9311%" y="143.50"></text></g><g><title>normalize_projection_ty (1,053,133 samples, 0.19%)</title><rect x="27.8289%" y="117" width="0.1942%" height="15" fill="rgb(247,18,42)"/><text x="28.0789%" y="127.50"></text></g><g><title>type_op_prove_predicate (14,590,607 samples, 2.69%)</title><rect x="28.0269%" y="133" width="2.6907%" height="15" fill="rgb(241,131,45)"/><text x="28.2769%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (164,173,188 samples, 30.28%)</title><rect x="0.4454%" y="165" width="30.2760%" height="15" fill="rgb(249,31,29)"/><text x="0.6954%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (163,400,921 samples, 30.13%)</title><rect x="0.5879%" y="149" width="30.1335%" height="15" fill="rgb(225,111,53)"/><text x="0.8379%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (897,750 samples, 0.17%)</title><rect x="30.7214%" y="165" width="0.1656%" height="15" fill="rgb(238,160,17)"/><text x="30.9714%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (599,447 samples, 0.11%)</title><rect x="30.7764%" y="149" width="0.1105%" height="15" fill="rgb(214,148,48)"/><text x="31.0264%" y="159.50"></text></g><g><title>hir_module_items (697,428 samples, 0.13%)</title><rect x="30.8869%" y="165" width="0.1286%" height="15" fill="rgb(232,36,49)"/><text x="31.1369%" y="175.50"></text></g><g><title>codegen_fn_attrs (938,280 samples, 0.17%)</title><rect x="31.2079%" y="133" width="0.1730%" height="15" fill="rgb(209,103,24)"/><text x="31.4579%" y="143.50"></text></g><g><title>check_mod_attrs (1,948,101 samples, 0.36%)</title><rect x="31.0217%" y="149" width="0.3593%" height="15" fill="rgb(229,88,8)"/><text x="31.2717%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,135,844 samples, 0.21%)</title><rect x="31.5278%" y="149" width="0.2095%" height="15" fill="rgb(213,181,19)"/><text x="31.7778%" y="159.50"></text></g><g><title>misc_checking_1 (4,014,245 samples, 0.74%)</title><rect x="31.0157%" y="165" width="0.7403%" height="15" fill="rgb(254,191,54)"/><text x="31.2657%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,681,790 samples, 0.49%)</title><rect x="31.7563%" y="149" width="0.4946%" height="15" fill="rgb(241,83,37)"/><text x="32.0063%" y="159.50"></text></g><g><title>check_mod_liveness (2,204,304 samples, 0.41%)</title><rect x="31.8444%" y="133" width="0.4065%" height="15" fill="rgb(233,36,39)"/><text x="32.0944%" y="143.50"></text></g><g><title>misc_checking_2 (6,284,830 samples, 1.16%)</title><rect x="31.7560%" y="165" width="1.1590%" height="15" fill="rgb(226,3,54)"/><text x="32.0060%" y="175.50"></text></g><g><title>match_checking (3,601,230 samples, 0.66%)</title><rect x="32.2509%" y="149" width="0.6641%" height="15" fill="rgb(245,192,40)"/><text x="32.5009%" y="159.50"></text></g><g><title>check_match (3,417,669 samples, 0.63%)</title><rect x="32.2848%" y="133" width="0.6303%" height="15" fill="rgb(238,167,29)"/><text x="32.5348%" y="143.50"></text></g><g><title>check_private_in_public (748,108 samples, 0.14%)</title><rect x="32.9173%" y="149" width="0.1380%" height="15" fill="rgb(232,182,51)"/><text x="33.1673%" y="159.50"></text></g><g><title>death_checking (1,456,156 samples, 0.27%)</title><rect x="33.0553%" y="149" width="0.2685%" height="15" fill="rgb(231,60,39)"/><text x="33.3053%" y="159.50"></text></g><g><title>param_env (635,647 samples, 0.12%)</title><rect x="33.7059%" y="117" width="0.1172%" height="15" fill="rgb(208,69,12)"/><text x="33.9559%" y="127.50"></text></g><g><title>crate_lints (3,999,975 samples, 0.74%)</title><rect x="33.3242%" y="133" width="0.7377%" height="15" fill="rgb(235,93,37)"/><text x="33.5742%" y="143.50"></text></g><g><title>type_of (1,196,391 samples, 0.22%)</title><rect x="33.8412%" y="117" width="0.2206%" height="15" fill="rgb(213,116,39)"/><text x="34.0912%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (966,529 samples, 0.18%)</title><rect x="33.8836%" y="101" width="0.1782%" height="15" fill="rgb(222,207,29)"/><text x="34.1336%" y="111.50"></text></g><g><title>lint_checking (6,760,265 samples, 1.25%)</title><rect x="33.3238%" y="149" width="1.2467%" height="15" fill="rgb(206,96,30)"/><text x="33.5738%" y="159.50"></text></g><g><title>module_lints (2,758,190 samples, 0.51%)</title><rect x="34.0618%" y="133" width="0.5087%" height="15" fill="rgb(218,138,4)"/><text x="34.3118%" y="143.50"></text></g><g><title>lint_mod (2,747,650 samples, 0.51%)</title><rect x="34.0638%" y="117" width="0.5067%" height="15" fill="rgb(250,191,14)"/><text x="34.3138%" y="127.50"></text></g><g><title>privacy_access_levels (1,333,375 samples, 0.25%)</title><rect x="34.5705%" y="149" width="0.2459%" height="15" fill="rgb(239,60,40)"/><text x="34.8205%" y="159.50"></text></g><g><title>privacy_checking_modules (4,580,330 samples, 0.84%)</title><rect x="34.8164%" y="149" width="0.8447%" height="15" fill="rgb(206,27,48)"/><text x="35.0664%" y="159.50"></text></g><g><title>check_mod_privacy (4,573,700 samples, 0.84%)</title><rect x="34.8176%" y="133" width="0.8435%" height="15" fill="rgb(225,35,8)"/><text x="35.0676%" y="143.50"></text></g><g><title>misc_checking_3 (14,922,535 samples, 2.75%)</title><rect x="32.9150%" y="165" width="2.7519%" height="15" fill="rgb(250,213,24)"/><text x="33.1650%" y="175.50">mi..</text></g><g><title>impl_parent (2,979,539 samples, 0.55%)</title><rect x="36.6592%" y="101" width="0.5495%" height="15" fill="rgb(247,123,22)"/><text x="36.9092%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,625,631 samples, 0.30%)</title><rect x="36.9089%" y="85" width="0.2998%" height="15" fill="rgb(231,138,38)"/><text x="37.1589%" y="95.50"></text></g><g><title>impl_trait_ref (6,315,258 samples, 1.16%)</title><rect x="37.2087%" y="101" width="1.1646%" height="15" fill="rgb(231,145,46)"/><text x="37.4587%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,665,872 samples, 0.86%)</title><rect x="37.5128%" y="85" width="0.8605%" height="15" fill="rgb(251,118,11)"/><text x="37.7628%" y="95.50"></text></g><g><title>trait_impls_of (939,949 samples, 0.17%)</title><rect x="38.3845%" y="101" width="0.1733%" height="15" fill="rgb(217,147,25)"/><text x="38.6345%" y="111.50"></text></g><g><title>coherent_trait (15,366,480 samples, 2.83%)</title><rect x="35.7251%" y="133" width="2.8338%" height="15" fill="rgb(247,81,37)"/><text x="35.9751%" y="143.50">co..</text></g><g><title>specialization_graph_of (14,889,085 samples, 2.75%)</title><rect x="35.8131%" y="117" width="2.7458%" height="15" fill="rgb(209,12,38)"/><text x="36.0631%" y="127.50">sp..</text></g><g><title>coherence_checking (15,496,753 samples, 2.86%)</title><rect x="35.7204%" y="149" width="2.8578%" height="15" fill="rgb(227,1,9)"/><text x="35.9704%" y="159.50">co..</text></g><g><title>associated_items (553,256 samples, 0.10%)</title><rect x="52.7498%" y="101" width="0.1020%" height="15" fill="rgb(248,47,43)"/><text x="52.9998%" y="111.50"></text></g><g><title>dropck_outlives (1,141,286 samples, 0.21%)</title><rect x="52.8824%" y="101" width="0.2105%" height="15" fill="rgb(221,10,30)"/><text x="53.1324%" y="111.50"></text></g><g><title>generics_of (961,888 samples, 0.18%)</title><rect x="54.0494%" y="85" width="0.1774%" height="15" fill="rgb(210,229,1)"/><text x="54.2994%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (584,554 samples, 0.11%)</title><rect x="54.1190%" y="69" width="0.1078%" height="15" fill="rgb(222,148,37)"/><text x="54.3690%" y="79.50"></text></g><g><title>impl_trait_ref (665,128 samples, 0.12%)</title><rect x="54.2498%" y="85" width="0.1227%" height="15" fill="rgb(234,67,33)"/><text x="54.4998%" y="95.50"></text></g><g><title>specializes (1,006,512 samples, 0.19%)</title><rect x="54.4730%" y="85" width="0.1856%" height="15" fill="rgb(247,98,35)"/><text x="54.7230%" y="95.50"></text></g><g><title>param_env (590,415 samples, 0.11%)</title><rect x="54.5497%" y="69" width="0.1089%" height="15" fill="rgb(247,138,52)"/><text x="54.7997%" y="79.50"></text></g><g><title>evaluate_obligation (8,931,997 samples, 1.65%)</title><rect x="53.0936%" y="101" width="1.6472%" height="15" fill="rgb(213,79,30)"/><text x="53.3436%" y="111.50"></text></g><g><title>generics_of (764,879 samples, 0.14%)</title><rect x="54.8115%" y="101" width="0.1411%" height="15" fill="rgb(246,177,23)"/><text x="55.0615%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (585,597 samples, 0.11%)</title><rect x="54.8446%" y="85" width="0.1080%" height="15" fill="rgb(230,62,27)"/><text x="55.0946%" y="95.50"></text></g><g><title>item_attrs (1,139,231 samples, 0.21%)</title><rect x="54.9993%" y="101" width="0.2101%" height="15" fill="rgb(216,154,8)"/><text x="55.2493%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,125,191 samples, 0.21%)</title><rect x="55.0019%" y="85" width="0.2075%" height="15" fill="rgb(244,35,45)"/><text x="55.2519%" y="95.50"></text></g><g><title>evaluate_obligation (695,830 samples, 0.13%)</title><rect x="55.3640%" y="85" width="0.1283%" height="15" fill="rgb(251,115,12)"/><text x="55.6140%" y="95.50"></text></g><g><title>method_autoderef_steps (1,356,017 samples, 0.25%)</title><rect x="55.2453%" y="101" width="0.2501%" height="15" fill="rgb(240,54,50)"/><text x="55.4953%" y="111.50"></text></g><g><title>predicates_of (629,089 samples, 0.12%)</title><rect x="55.6231%" y="101" width="0.1160%" height="15" fill="rgb(233,84,52)"/><text x="55.8731%" y="111.50"></text></g><g><title>associated_item (677,839 samples, 0.13%)</title><rect x="71.1043%" y="69" width="0.1250%" height="15" fill="rgb(207,117,47)"/><text x="71.3543%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (558,317 samples, 0.10%)</title><rect x="71.1263%" y="53" width="0.1030%" height="15" fill="rgb(249,43,39)"/><text x="71.3763%" y="63.50"></text></g><g><title>associated_items (969,332 samples, 0.18%)</title><rect x="71.0601%" y="85" width="0.1788%" height="15" fill="rgb(209,38,44)"/><text x="71.3101%" y="95.50"></text></g><g><title>adt_dtorck_constraint (566,488 samples, 0.10%)</title><rect x="71.3889%" y="69" width="0.1045%" height="15" fill="rgb(236,212,23)"/><text x="71.6389%" y="79.50"></text></g><g><title>dropck_outlives (1,229,030 samples, 0.23%)</title><rect x="71.2689%" y="85" width="0.2267%" height="15" fill="rgb(242,79,21)"/><text x="71.5189%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,190,483 samples, 0.22%)</title><rect x="71.4959%" y="85" width="0.2195%" height="15" fill="rgb(211,96,35)"/><text x="71.7459%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,165,613 samples, 0.21%)</title><rect x="71.5005%" y="69" width="0.2150%" height="15" fill="rgb(253,215,40)"/><text x="71.7505%" y="79.50"></text></g><g><title>generics_of (672,268 samples, 0.12%)</title><rect x="72.8775%" y="69" width="0.1240%" height="15" fill="rgb(211,81,21)"/><text x="73.1275%" y="79.50"></text></g><g><title>impl_trait_ref (907,264 samples, 0.17%)</title><rect x="73.0310%" y="69" width="0.1673%" height="15" fill="rgb(208,190,38)"/><text x="73.2810%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (737,121 samples, 0.14%)</title><rect x="73.0624%" y="53" width="0.1359%" height="15" fill="rgb(235,213,38)"/><text x="73.3124%" y="63.50"></text></g><g><title>predicates_of (825,817 samples, 0.15%)</title><rect x="73.2157%" y="69" width="0.1523%" height="15" fill="rgb(237,122,38)"/><text x="73.4657%" y="79.50"></text></g><g><title>specializes (1,043,832 samples, 0.19%)</title><rect x="73.3680%" y="69" width="0.1925%" height="15" fill="rgb(244,218,35)"/><text x="73.6180%" y="79.50"></text></g><g><title>trait_impls_of (596,487 samples, 0.11%)</title><rect x="73.5668%" y="69" width="0.1100%" height="15" fill="rgb(240,68,47)"/><text x="73.8168%" y="79.50"></text></g><g><title>evaluate_obligation (10,674,530 samples, 1.97%)</title><rect x="71.7154%" y="85" width="1.9685%" height="15" fill="rgb(210,16,53)"/><text x="71.9654%" y="95.50">e..</text></g><g><title>generics_of (1,203,560 samples, 0.22%)</title><rect x="73.7464%" y="85" width="0.2220%" height="15" fill="rgb(235,124,12)"/><text x="73.9964%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (868,789 samples, 0.16%)</title><rect x="73.8082%" y="69" width="0.1602%" height="15" fill="rgb(224,169,11)"/><text x="74.0582%" y="79.50"></text></g><g><title>is_copy_raw (644,863 samples, 0.12%)</title><rect x="74.0918%" y="85" width="0.1189%" height="15" fill="rgb(250,166,2)"/><text x="74.3418%" y="95.50"></text></g><g><title>evaluate_obligation (577,138 samples, 0.11%)</title><rect x="74.4140%" y="69" width="0.1064%" height="15" fill="rgb(242,216,29)"/><text x="74.6640%" y="79.50"></text></g><g><title>method_autoderef_steps (1,242,733 samples, 0.23%)</title><rect x="74.2931%" y="85" width="0.2292%" height="15" fill="rgb(230,116,27)"/><text x="74.5431%" y="95.50"></text></g><g><title>predicates_of (935,827 samples, 0.17%)</title><rect x="74.5364%" y="85" width="0.1726%" height="15" fill="rgb(228,99,48)"/><text x="74.7864%" y="95.50"></text></g><g><title>predicates_defined_on (669,415 samples, 0.12%)</title><rect x="74.5855%" y="69" width="0.1234%" height="15" fill="rgb(253,11,6)"/><text x="74.8355%" y="79.50"></text></g><g><title>typeck (103,017,149 samples, 19.00%)</title><rect x="55.8186%" y="101" width="18.9979%" height="15" fill="rgb(247,143,39)"/><text x="56.0686%" y="111.50">typeck</text></g><g><title>item_bodies_checking (196,582,619 samples, 36.25%)</title><rect x="38.5919%" y="149" width="36.2527%" height="15" fill="rgb(236,97,10)"/><text x="38.8419%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (196,578,249 samples, 36.25%)</title><rect x="38.5927%" y="133" width="36.2519%" height="15" fill="rgb(233,208,19)"/><text x="38.8427%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (196,144,723 samples, 36.17%)</title><rect x="38.6726%" y="117" width="36.1720%" height="15" fill="rgb(216,164,2)"/><text x="38.9226%" y="127.50">typeck</text></g><g><title>item_types_checking (1,194,264 samples, 0.22%)</title><rect x="74.8446%" y="149" width="0.2202%" height="15" fill="rgb(220,129,5)"/><text x="75.0946%" y="159.50"></text></g><g><title>check_mod_item_types (1,186,444 samples, 0.22%)</title><rect x="74.8460%" y="133" width="0.2188%" height="15" fill="rgb(242,17,10)"/><text x="75.0960%" y="143.50"></text></g><g><title>fn_sig (1,140,772 samples, 0.21%)</title><rect x="75.2263%" y="117" width="0.2104%" height="15" fill="rgb(242,107,0)"/><text x="75.4763%" y="127.50"></text></g><g><title>named_region_map (636,226 samples, 0.12%)</title><rect x="75.5860%" y="101" width="0.1173%" height="15" fill="rgb(251,28,31)"/><text x="75.8360%" y="111.50"></text></g><g><title>resolve_lifetimes (571,656 samples, 0.11%)</title><rect x="75.5979%" y="85" width="0.1054%" height="15" fill="rgb(233,223,10)"/><text x="75.8479%" y="95.50"></text></g><g><title>generics_of (1,480,646 samples, 0.27%)</title><rect x="75.4367%" y="117" width="0.2731%" height="15" fill="rgb(215,21,27)"/><text x="75.6867%" y="127.50"></text></g><g><title>lint_levels (823,580 samples, 0.15%)</title><rect x="75.8905%" y="37" width="0.1519%" height="15" fill="rgb(232,23,21)"/><text x="76.1405%" y="47.50"></text></g><g><title>late_bound_vars_map (987,302 samples, 0.18%)</title><rect x="75.8604%" y="69" width="0.1821%" height="15" fill="rgb(244,5,23)"/><text x="76.1104%" y="79.50"></text></g><g><title>resolve_lifetimes (976,052 samples, 0.18%)</title><rect x="75.8624%" y="53" width="0.1800%" height="15" fill="rgb(226,81,46)"/><text x="76.1124%" y="63.50"></text></g><g><title>explicit_predicates_of (1,354,334 samples, 0.25%)</title><rect x="75.8003%" y="85" width="0.2498%" height="15" fill="rgb(247,70,30)"/><text x="76.0503%" y="95.50"></text></g><g><title>predicates_of (2,832,548 samples, 0.52%)</title><rect x="75.7214%" y="117" width="0.5224%" height="15" fill="rgb(212,68,19)"/><text x="75.9714%" y="127.50"></text></g><g><title>predicates_defined_on (2,674,347 samples, 0.49%)</title><rect x="75.7505%" y="101" width="0.4932%" height="15" fill="rgb(240,187,13)"/><text x="76.0005%" y="111.50"></text></g><g><title>inferred_outlives_of (1,050,321 samples, 0.19%)</title><rect x="76.0500%" y="85" width="0.1937%" height="15" fill="rgb(223,113,26)"/><text x="76.3000%" y="95.50"></text></g><g><title>inferred_outlives_crate (997,321 samples, 0.18%)</title><rect x="76.0598%" y="69" width="0.1839%" height="15" fill="rgb(206,192,2)"/><text x="76.3098%" y="79.50"></text></g><g><title>type_of (611,035 samples, 0.11%)</title><rect x="76.1311%" y="53" width="0.1127%" height="15" fill="rgb(241,108,4)"/><text x="76.3811%" y="63.50"></text></g><g><title>type_collecting (6,595,023 samples, 1.22%)</title><rect x="75.0662%" y="149" width="1.2162%" height="15" fill="rgb(247,173,49)"/><text x="75.3162%" y="159.50"></text></g><g><title>collect_mod_item_types (6,580,683 samples, 1.21%)</title><rect x="75.0688%" y="133" width="1.2136%" height="15" fill="rgb(224,114,35)"/><text x="75.3188%" y="143.50"></text></g><g><title>evaluate_obligation (1,541,217 samples, 0.28%)</title><rect x="77.6480%" y="117" width="0.2842%" height="15" fill="rgb(245,159,27)"/><text x="77.8980%" y="127.50"></text></g><g><title>implied_outlives_bounds (748,530 samples, 0.14%)</title><rect x="77.9375%" y="117" width="0.1380%" height="15" fill="rgb(245,172,44)"/><text x="78.1875%" y="127.50"></text></g><g><title>param_env (936,656 samples, 0.17%)</title><rect x="78.1404%" y="117" width="0.1727%" height="15" fill="rgb(236,23,11)"/><text x="78.3904%" y="127.50"></text></g><g><title>region_scope_tree (1,510,975 samples, 0.28%)</title><rect x="78.3262%" y="117" width="0.2786%" height="15" fill="rgb(205,117,38)"/><text x="78.5762%" y="127.50"></text></g><g><title>check_impl_item_well_formed (11,942,654 samples, 2.20%)</title><rect x="76.4117%" y="133" width="2.2024%" height="15" fill="rgb(237,72,25)"/><text x="76.6617%" y="143.50">c..</text></g><g><title>evaluate_obligation (561,158 samples, 0.10%)</title><rect x="79.1335%" y="117" width="0.1035%" height="15" fill="rgb(244,70,9)"/><text x="79.3835%" y="127.50"></text></g><g><title>object_safety_violations (720,047 samples, 0.13%)</title><rect x="79.2866%" y="117" width="0.1328%" height="15" fill="rgb(217,125,39)"/><text x="79.5366%" y="127.50"></text></g><g><title>analysis (430,877,248 samples, 79.46%)</title><rect x="0.2015%" y="181" width="79.4601%" height="15" fill="rgb(235,36,10)"/><text x="0.4515%" y="191.50">analysis</text></g><g><title>type_check_crate (238,563,736 samples, 43.99%)</title><rect x="35.6670%" y="165" width="43.9947%" height="15" fill="rgb(251,123,47)"/><text x="35.9170%" y="175.50">type_check_crate</text></g><g><title>wf_checking (18,289,483 samples, 3.37%)</title><rect x="76.2888%" y="149" width="3.3728%" height="15" fill="rgb(221,13,13)"/><text x="76.5388%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (5,680,312 samples, 1.05%)</title><rect x="78.6141%" y="133" width="1.0475%" height="15" fill="rgb(238,131,9)"/><text x="78.8641%" y="143.50"></text></g><g><title>codegen_crate (551,576 samples, 0.10%)</title><rect x="79.6636%" y="181" width="0.1017%" height="15" fill="rgb(211,50,8)"/><text x="79.9136%" y="191.50"></text></g><g><title>AST_validation (900,150 samples, 0.17%)</title><rect x="79.8074%" y="165" width="0.1660%" height="15" fill="rgb(245,182,24)"/><text x="80.0574%" y="175.50"></text></g><g><title>metadata_register_crate (2,855,181 samples, 0.53%)</title><rect x="91.4028%" y="133" width="0.5265%" height="15" fill="rgb(242,14,37)"/><text x="91.6528%" y="143.50"></text></g><g><title>metadata_register_crate (1,020,360 samples, 0.19%)</title><rect x="91.7411%" y="117" width="0.1882%" height="15" fill="rgb(246,228,12)"/><text x="91.9911%" y="127.50"></text></g><g><title>macro_expand_crate (66,188,587 samples, 12.21%)</title><rect x="80.0380%" y="165" width="12.2061%" height="15" fill="rgb(213,55,15)"/><text x="80.2880%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (66,170,897 samples, 12.20%)</title><rect x="80.0412%" y="149" width="12.2029%" height="15" fill="rgb(209,9,3)"/><text x="80.2912%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,707,110 samples, 0.31%)</title><rect x="91.9293%" y="133" width="0.3148%" height="15" fill="rgb(230,59,30)"/><text x="92.1793%" y="143.50"></text></g><g><title>late_resolve_crate (13,357,748 samples, 2.46%)</title><rect x="92.4111%" y="149" width="2.4634%" height="15" fill="rgb(209,121,21)"/><text x="92.6611%" y="159.50">la..</text></g><g><title>configure_and_expand (82,492,748 samples, 15.21%)</title><rect x="79.7653%" y="181" width="15.2129%" height="15" fill="rgb(220,109,13)"/><text x="80.0153%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (14,721,724 samples, 2.71%)</title><rect x="92.2633%" y="165" width="2.7149%" height="15" fill="rgb(232,18,1)"/><text x="92.5133%" y="175.50">re..</text></g><g><title>drop_ast (701,818 samples, 0.13%)</title><rect x="94.9782%" y="181" width="0.1294%" height="15" fill="rgb(215,41,42)"/><text x="95.2282%" y="191.50"></text></g><g><title>early_lint_checks (1,471,936 samples, 0.27%)</title><rect x="95.1113%" y="181" width="0.2714%" height="15" fill="rgb(224,123,36)"/><text x="95.3613%" y="191.50"></text></g><g><title>free_global_ctxt (6,786,776 samples, 1.25%)</title><rect x="95.3828%" y="181" width="1.2516%" height="15" fill="rgb(240,125,3)"/><text x="95.6328%" y="191.50"></text></g><g><title>generate_crate_metadata (3,410,867 samples, 0.63%)</title><rect x="96.6344%" y="181" width="0.6290%" height="15" fill="rgb(205,98,50)"/><text x="96.8844%" y="191.50"></text></g><g><title>hir_lowering (11,798,951 samples, 2.18%)</title><rect x="97.2634%" y="181" width="2.1759%" height="15" fill="rgb(205,185,37)"/><text x="97.5134%" y="191.50">h..</text></g><g><title>self_profile_alloc_query_strings (1,747,429 samples, 0.32%)</title><rect x="99.5744%" y="181" width="0.3223%" height="15" fill="rgb(238,207,15)"/><text x="99.8244%" y="191.50"></text></g><g><title>all (542,256,077 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (542,256,077 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>