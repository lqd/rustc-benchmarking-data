<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,198,655 samples, 0.14%)</title><rect x="12.5961%" y="149" width="0.1385%" height="15" fill="rgb(227,0,7)"/><text x="12.8461%" y="159.50"></text></g><g><title>item_attrs (1,484,473 samples, 0.17%)</title><rect x="13.2050%" y="117" width="0.1715%" height="15" fill="rgb(217,0,24)"/><text x="13.4550%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,435,200 samples, 0.17%)</title><rect x="13.2107%" y="101" width="0.1658%" height="15" fill="rgb(221,193,54)"/><text x="13.4607%" y="111.50"></text></g><g><title>codegen_fn_attrs (2,005,107 samples, 0.23%)</title><rect x="13.1529%" y="133" width="0.2316%" height="15" fill="rgb(248,212,6)"/><text x="13.4029%" y="143.50"></text></g><g><title>is_copy_raw (1,530,829 samples, 0.18%)</title><rect x="15.8638%" y="117" width="0.1768%" height="15" fill="rgb(208,68,35)"/><text x="16.1138%" y="127.50"></text></g><g><title>evaluate_obligation (1,186,036 samples, 0.14%)</title><rect x="15.9037%" y="101" width="0.1370%" height="15" fill="rgb(232,128,0)"/><text x="16.1537%" y="111.50"></text></g><g><title>is_copy_raw (4,645,351 samples, 0.54%)</title><rect x="16.1864%" y="101" width="0.5366%" height="15" fill="rgb(207,160,47)"/><text x="16.4364%" y="111.50"></text></g><g><title>evaluate_obligation (3,654,601 samples, 0.42%)</title><rect x="16.3008%" y="85" width="0.4222%" height="15" fill="rgb(228,23,34)"/><text x="16.5508%" y="95.50"></text></g><g><title>needs_drop_raw (5,918,567 samples, 0.68%)</title><rect x="16.0413%" y="117" width="0.6837%" height="15" fill="rgb(218,30,26)"/><text x="16.2913%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,644,074 samples, 0.31%)</title><rect x="16.8853%" y="101" width="0.3054%" height="15" fill="rgb(220,122,19)"/><text x="17.1353%" y="111.50"></text></g><g><title>resolve_instance (5,125,227 samples, 0.59%)</title><rect x="16.7251%" y="117" width="0.5920%" height="15" fill="rgb(250,228,42)"/><text x="16.9751%" y="127.50"></text></g><g><title>thir_body (8,946,689 samples, 1.03%)</title><rect x="17.3394%" y="117" width="1.0335%" height="15" fill="rgb(240,193,28)"/><text x="17.5894%" y="127.50"></text></g><g><title>mir_const (56,462,957 samples, 6.52%)</title><rect x="11.8718%" y="165" width="6.5222%" height="15" fill="rgb(216,20,37)"/><text x="12.1218%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (48,994,373 samples, 5.66%)</title><rect x="12.7346%" y="149" width="5.6595%" height="15" fill="rgb(206,188,39)"/><text x="12.9846%" y="159.50">unsafet..</text></g><g><title>mir_built (43,367,747 samples, 5.01%)</title><rect x="13.3845%" y="133" width="5.0096%" height="15" fill="rgb(217,207,13)"/><text x="13.6345%" y="143.50">mir_bu..</text></g><g><title>mir_const_qualif (1,595,897 samples, 0.18%)</title><rect x="18.3941%" y="165" width="0.1843%" height="15" fill="rgb(231,73,38)"/><text x="18.6441%" y="175.50"></text></g><g><title>mir_promoted (63,893,025 samples, 7.38%)</title><rect x="11.1979%" y="181" width="7.3805%" height="15" fill="rgb(225,20,46)"/><text x="11.4479%" y="191.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (5,031,621 samples, 0.58%)</title><rect x="18.5787%" y="181" width="0.5812%" height="15" fill="rgb(210,31,41)"/><text x="18.8287%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (5,703,054 samples, 0.66%)</title><rect x="19.1599%" y="181" width="0.6588%" height="15" fill="rgb(221,200,47)"/><text x="19.4099%" y="191.50"></text></g><g><title>normalize_projection_ty (3,546,656 samples, 0.41%)</title><rect x="19.4090%" y="165" width="0.4097%" height="15" fill="rgb(226,26,5)"/><text x="19.6590%" y="175.50"></text></g><g><title>type_op_normalize_ty (1,525,528 samples, 0.18%)</title><rect x="19.9106%" y="181" width="0.1762%" height="15" fill="rgb(249,33,26)"/><text x="20.1606%" y="191.50"></text></g><g><title>type_op_prove_predicate (16,482,395 samples, 1.90%)</title><rect x="20.0868%" y="181" width="1.9039%" height="15" fill="rgb(235,183,28)"/><text x="20.3368%" y="191.50">t..</text></g><g><title>evaluate_obligation (1,339,577 samples, 0.15%)</title><rect x="21.8360%" y="165" width="0.1547%" height="15" fill="rgb(221,5,38)"/><text x="22.0860%" y="175.50"></text></g><g><title>MIR_borrow_checking (185,858,288 samples, 21.47%)</title><rect x="0.5237%" y="213" width="21.4691%" height="15" fill="rgb(247,18,42)"/><text x="0.7737%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (184,876,216 samples, 21.36%)</title><rect x="0.6371%" y="197" width="21.3557%" height="15" fill="rgb(241,131,45)"/><text x="0.8871%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (899,420 samples, 0.10%)</title><rect x="21.9928%" y="213" width="0.1039%" height="15" fill="rgb(249,31,29)"/><text x="22.2428%" y="223.50"></text></g><g><title>hir_module_items (1,574,237 samples, 0.18%)</title><rect x="22.0967%" y="213" width="0.1818%" height="15" fill="rgb(225,111,53)"/><text x="22.3467%" y="223.50"></text></g><g><title>should_inherit_track_caller (876,212 samples, 0.10%)</title><rect x="22.5781%" y="165" width="0.1012%" height="15" fill="rgb(238,160,17)"/><text x="22.8281%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,693,900 samples, 0.20%)</title><rect x="22.4862%" y="181" width="0.1957%" height="15" fill="rgb(214,148,48)"/><text x="22.7362%" y="191.50"></text></g><g><title>check_mod_attrs (3,417,756 samples, 0.39%)</title><rect x="22.2871%" y="197" width="0.3948%" height="15" fill="rgb(232,36,49)"/><text x="22.5371%" y="207.50"></text></g><g><title>lint_levels (1,169,403 samples, 0.14%)</title><rect x="22.9902%" y="181" width="0.1351%" height="15" fill="rgb(209,103,24)"/><text x="23.2402%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (3,392,929 samples, 0.39%)</title><rect x="22.8562%" y="197" width="0.3919%" height="15" fill="rgb(229,88,8)"/><text x="23.1062%" y="207.50"></text></g><g><title>misc_checking_1 (8,657,407 samples, 1.00%)</title><rect x="22.2786%" y="213" width="1.0000%" height="15" fill="rgb(213,181,19)"/><text x="22.5286%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (3,838,673 samples, 0.44%)</title><rect x="23.2790%" y="197" width="0.4434%" height="15" fill="rgb(254,191,54)"/><text x="23.5290%" y="207.50"></text></g><g><title>check_mod_liveness (3,136,005 samples, 0.36%)</title><rect x="23.3601%" y="181" width="0.3623%" height="15" fill="rgb(241,83,37)"/><text x="23.6101%" y="191.50"></text></g><g><title>misc_checking_2 (7,685,416 samples, 0.89%)</title><rect x="23.2787%" y="213" width="0.8878%" height="15" fill="rgb(233,36,39)"/><text x="23.5287%" y="223.50"></text></g><g><title>match_checking (3,844,373 samples, 0.44%)</title><rect x="23.7224%" y="197" width="0.4441%" height="15" fill="rgb(226,3,54)"/><text x="23.9724%" y="207.50"></text></g><g><title>check_match (3,551,959 samples, 0.41%)</title><rect x="23.7562%" y="181" width="0.4103%" height="15" fill="rgb(245,192,40)"/><text x="24.0062%" y="191.50"></text></g><g><title>check_private_in_public (1,594,398 samples, 0.18%)</title><rect x="24.1683%" y="197" width="0.1842%" height="15" fill="rgb(238,167,29)"/><text x="24.4183%" y="207.50"></text></g><g><title>death_checking (2,857,442 samples, 0.33%)</title><rect x="24.3524%" y="197" width="0.3301%" height="15" fill="rgb(232,182,51)"/><text x="24.6024%" y="207.50"></text></g><g><title>param_env (1,586,185 samples, 0.18%)</title><rect x="25.2833%" y="165" width="0.1832%" height="15" fill="rgb(231,60,39)"/><text x="25.5333%" y="175.50"></text></g><g><title>crate_lints (8,103,090 samples, 0.94%)</title><rect x="24.6829%" y="181" width="0.9360%" height="15" fill="rgb(208,69,12)"/><text x="24.9329%" y="191.50"></text></g><g><title>type_of (1,235,996 samples, 0.14%)</title><rect x="25.4761%" y="165" width="0.1428%" height="15" fill="rgb(235,93,37)"/><text x="25.7261%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (1,001,213 samples, 0.12%)</title><rect x="25.5033%" y="149" width="0.1157%" height="15" fill="rgb(213,116,39)"/><text x="25.7533%" y="159.50"></text></g><g><title>lint_checking (12,231,147 samples, 1.41%)</title><rect x="24.6825%" y="197" width="1.4129%" height="15" fill="rgb(222,207,29)"/><text x="24.9325%" y="207.50"></text></g><g><title>module_lints (4,124,647 samples, 0.48%)</title><rect x="25.6189%" y="181" width="0.4765%" height="15" fill="rgb(206,96,30)"/><text x="25.8689%" y="191.50"></text></g><g><title>lint_mod (4,101,706 samples, 0.47%)</title><rect x="25.6216%" y="165" width="0.4738%" height="15" fill="rgb(218,138,4)"/><text x="25.8716%" y="175.50"></text></g><g><title>privacy_access_levels (2,650,160 samples, 0.31%)</title><rect x="26.0954%" y="197" width="0.3061%" height="15" fill="rgb(250,191,14)"/><text x="26.3454%" y="207.50"></text></g><g><title>privacy_checking_modules (8,040,620 samples, 0.93%)</title><rect x="26.4015%" y="197" width="0.9288%" height="15" fill="rgb(239,60,40)"/><text x="26.6515%" y="207.50"></text></g><g><title>check_mod_privacy (8,020,819 samples, 0.93%)</title><rect x="26.4038%" y="181" width="0.9265%" height="15" fill="rgb(206,27,48)"/><text x="26.6538%" y="191.50"></text></g><g><title>misc_checking_3 (27,462,768 samples, 3.17%)</title><rect x="24.1665%" y="213" width="3.1723%" height="15" fill="rgb(225,35,8)"/><text x="24.4165%" y="223.50">mis..</text></g><g><title>thir_body (1,371,482 samples, 0.16%)</title><rect x="29.9081%" y="37" width="0.1584%" height="15" fill="rgb(250,213,24)"/><text x="30.1581%" y="47.50"></text></g><g><title>mir_const_qualif (5,827,918 samples, 0.67%)</title><rect x="29.3957%" y="101" width="0.6732%" height="15" fill="rgb(247,123,22)"/><text x="29.6457%" y="111.50"></text></g><g><title>mir_const (5,385,023 samples, 0.62%)</title><rect x="29.4468%" y="85" width="0.6220%" height="15" fill="rgb(231,138,38)"/><text x="29.6968%" y="95.50"></text></g><g><title>unsafety_check_result (4,550,399 samples, 0.53%)</title><rect x="29.5433%" y="69" width="0.5256%" height="15" fill="rgb(231,145,46)"/><text x="29.7933%" y="79.50"></text></g><g><title>mir_built (4,274,168 samples, 0.49%)</title><rect x="29.5752%" y="53" width="0.4937%" height="15" fill="rgb(251,118,11)"/><text x="29.8252%" y="63.50"></text></g><g><title>mir_borrowck (10,829,367 samples, 1.25%)</title><rect x="30.8099%" y="69" width="1.2509%" height="15" fill="rgb(217,147,25)"/><text x="31.0599%" y="79.50"></text></g><g><title>mir_for_ctfe (17,270,731 samples, 2.00%)</title><rect x="30.0689%" y="101" width="1.9950%" height="15" fill="rgb(247,81,37)"/><text x="30.3189%" y="111.50">m..</text></g><g><title>mir_drops_elaborated_and_const_checked (15,632,024 samples, 1.81%)</title><rect x="30.2582%" y="85" width="1.8057%" height="15" fill="rgb(209,12,38)"/><text x="30.5082%" y="95.50">m..</text></g><g><title>evaluate_obligation (2,849,082 samples, 0.33%)</title><rect x="35.6498%" y="85" width="0.3291%" height="15" fill="rgb(227,1,9)"/><text x="35.8998%" y="95.50"></text></g><g><title>eval_to_const_value_raw (60,981,119 samples, 7.04%)</title><rect x="29.0883%" y="149" width="7.0441%" height="15" fill="rgb(248,47,43)"/><text x="29.3383%" y="159.50">eval_to_c..</text></g><g><title>eval_to_const_value_raw (60,902,729 samples, 7.04%)</title><rect x="29.0973%" y="133" width="7.0351%" height="15" fill="rgb(221,10,30)"/><text x="29.3473%" y="143.50">eval_to_c..</text></g><g><title>eval_to_allocation_raw (60,764,159 samples, 7.02%)</title><rect x="29.1134%" y="117" width="7.0191%" height="15" fill="rgb(210,229,1)"/><text x="29.3634%" y="127.50">eval_to_a..</text></g><g><title>typeck (35,206,486 samples, 4.07%)</title><rect x="32.0656%" y="101" width="4.0668%" height="15" fill="rgb(222,148,37)"/><text x="32.3156%" y="111.50">type..</text></g><g><title>impl_parent (3,507,435 samples, 0.41%)</title><rect x="36.1329%" y="149" width="0.4052%" height="15" fill="rgb(234,67,33)"/><text x="36.3829%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,892,723 samples, 0.22%)</title><rect x="36.3194%" y="133" width="0.2186%" height="15" fill="rgb(247,98,35)"/><text x="36.5694%" y="143.50"></text></g><g><title>impl_trait_ref (6,609,193 samples, 0.76%)</title><rect x="36.5381%" y="149" width="0.7635%" height="15" fill="rgb(247,138,52)"/><text x="36.7881%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,242,668 samples, 0.61%)</title><rect x="36.6959%" y="133" width="0.6056%" height="15" fill="rgb(213,79,30)"/><text x="36.9459%" y="143.50"></text></g><g><title>trait_impls_of (1,150,973 samples, 0.13%)</title><rect x="37.3311%" y="149" width="0.1330%" height="15" fill="rgb(246,177,23)"/><text x="37.5811%" y="159.50"></text></g><g><title>coherent_trait (87,106,684 samples, 10.06%)</title><rect x="27.4023%" y="181" width="10.0620%" height="15" fill="rgb(230,62,27)"/><text x="27.6523%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (86,316,845 samples, 9.97%)</title><rect x="27.4935%" y="165" width="9.9708%" height="15" fill="rgb(216,154,8)"/><text x="27.7435%" y="175.50">specialization..</text></g><g><title>coherence_checking (87,450,477 samples, 10.10%)</title><rect x="27.3973%" y="197" width="10.1017%" height="15" fill="rgb(244,35,45)"/><text x="27.6473%" y="207.50">coherence_check..</text></g><g><title>associated_item (1,844,133 samples, 0.21%)</title><rect x="57.8465%" y="133" width="0.2130%" height="15" fill="rgb(251,115,12)"/><text x="58.0965%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (1,486,612 samples, 0.17%)</title><rect x="57.8878%" y="117" width="0.1717%" height="15" fill="rgb(240,54,50)"/><text x="58.1378%" y="127.50"></text></g><g><title>associated_items (2,508,079 samples, 0.29%)</title><rect x="57.7798%" y="149" width="0.2897%" height="15" fill="rgb(233,84,52)"/><text x="58.0298%" y="159.50"></text></g><g><title>dropck_outlives (1,995,235 samples, 0.23%)</title><rect x="58.0976%" y="149" width="0.2305%" height="15" fill="rgb(207,117,47)"/><text x="58.3476%" y="159.50"></text></g><g><title>specializes (1,736,259 samples, 0.20%)</title><rect x="61.1268%" y="133" width="0.2006%" height="15" fill="rgb(249,43,39)"/><text x="61.3768%" y="143.50"></text></g><g><title>param_env (946,300 samples, 0.11%)</title><rect x="61.2181%" y="117" width="0.1093%" height="15" fill="rgb(209,38,44)"/><text x="61.4681%" y="127.50"></text></g><g><title>evaluate_obligation (26,332,197 samples, 3.04%)</title><rect x="58.3281%" y="149" width="3.0417%" height="15" fill="rgb(236,212,23)"/><text x="58.5781%" y="159.50">eva..</text></g><g><title>generics_of (972,717 samples, 0.11%)</title><rect x="61.4184%" y="149" width="0.1124%" height="15" fill="rgb(242,79,21)"/><text x="61.6684%" y="159.50"></text></g><g><title>evaluate_obligation (1,561,199 samples, 0.18%)</title><rect x="61.8400%" y="133" width="0.1803%" height="15" fill="rgb(211,96,35)"/><text x="62.0900%" y="143.50"></text></g><g><title>method_autoderef_steps (3,101,662 samples, 0.36%)</title><rect x="61.6642%" y="149" width="0.3583%" height="15" fill="rgb(253,215,40)"/><text x="61.9142%" y="159.50"></text></g><g><title>predicates_of (937,575 samples, 0.11%)</title><rect x="62.1020%" y="149" width="0.1083%" height="15" fill="rgb(211,81,21)"/><text x="62.3520%" y="159.50"></text></g><g><title>evaluate_obligation (3,072,280 samples, 0.35%)</title><rect x="63.8840%" y="133" width="0.3549%" height="15" fill="rgb(208,190,38)"/><text x="64.1340%" y="143.50"></text></g><g><title>typeck (18,998,391 samples, 2.19%)</title><rect x="62.2631%" y="149" width="2.1946%" height="15" fill="rgb(235,213,38)"/><text x="62.5131%" y="159.50">t..</text></g><g><title>item_bodies_checking (233,358,120 samples, 26.96%)</title><rect x="37.5315%" y="197" width="26.9560%" height="15" fill="rgb(237,122,38)"/><text x="37.7815%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (233,354,199 samples, 26.96%)</title><rect x="37.5320%" y="181" width="26.9556%" height="15" fill="rgb(244,218,35)"/><text x="37.7820%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (232,611,972 samples, 26.87%)</title><rect x="37.6177%" y="165" width="26.8698%" height="15" fill="rgb(240,68,47)"/><text x="37.8677%" y="175.50">typeck</text></g><g><title>eval_to_const_value_raw (1,544,588 samples, 0.18%)</title><rect x="65.8618%" y="149" width="0.1784%" height="15" fill="rgb(210,16,53)"/><text x="66.1118%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,519,298 samples, 0.18%)</title><rect x="65.8647%" y="133" width="0.1755%" height="15" fill="rgb(235,124,12)"/><text x="66.1147%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,481,287 samples, 0.17%)</title><rect x="65.8691%" y="117" width="0.1711%" height="15" fill="rgb(224,169,11)"/><text x="66.1191%" y="127.50"></text></g><g><title>evaluate_obligation (2,013,114 samples, 0.23%)</title><rect x="65.8219%" y="165" width="0.2325%" height="15" fill="rgb(250,166,2)"/><text x="66.0719%" y="175.50"></text></g><g><title>impl_trait_ref (1,696,609 samples, 0.20%)</title><rect x="67.0292%" y="133" width="0.1960%" height="15" fill="rgb(242,216,29)"/><text x="67.2792%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,439,796 samples, 0.17%)</title><rect x="67.0589%" y="117" width="0.1663%" height="15" fill="rgb(230,116,27)"/><text x="67.3089%" y="127.50"></text></g><g><title>predicates_of (1,084,710 samples, 0.13%)</title><rect x="67.2313%" y="133" width="0.1253%" height="15" fill="rgb(228,99,48)"/><text x="67.4813%" y="143.50"></text></g><g><title>specializes (2,395,719 samples, 0.28%)</title><rect x="67.3566%" y="133" width="0.2767%" height="15" fill="rgb(253,11,6)"/><text x="67.6066%" y="143.50"></text></g><g><title>param_env (1,502,696 samples, 0.17%)</title><rect x="67.4597%" y="117" width="0.1736%" height="15" fill="rgb(247,143,39)"/><text x="67.7097%" y="127.50"></text></g><g><title>evaluate_obligation (9,992,144 samples, 1.15%)</title><rect x="66.5130%" y="149" width="1.1542%" height="15" fill="rgb(236,97,10)"/><text x="66.7630%" y="159.50"></text></g><g><title>item_types_checking (27,836,601 samples, 3.22%)</title><rect x="64.4875%" y="197" width="3.2155%" height="15" fill="rgb(233,208,19)"/><text x="64.7375%" y="207.50">ite..</text></g><g><title>check_mod_item_types (27,811,341 samples, 3.21%)</title><rect x="64.4905%" y="181" width="3.2126%" height="15" fill="rgb(216,164,2)"/><text x="64.7405%" y="191.50">che..</text></g><g><title>typeck (13,381,038 samples, 1.55%)</title><rect x="66.1574%" y="165" width="1.5457%" height="15" fill="rgb(220,129,5)"/><text x="66.4074%" y="175.50"></text></g><g><title>fn_sig (2,006,866 samples, 0.23%)</title><rect x="67.9320%" y="165" width="0.2318%" height="15" fill="rgb(242,17,10)"/><text x="68.1820%" y="175.50"></text></g><g><title>named_region_map (1,367,254 samples, 0.16%)</title><rect x="68.3193%" y="149" width="0.1579%" height="15" fill="rgb(242,107,0)"/><text x="68.5693%" y="159.50"></text></g><g><title>resolve_lifetimes (1,226,163 samples, 0.14%)</title><rect x="68.3356%" y="133" width="0.1416%" height="15" fill="rgb(251,28,31)"/><text x="68.5856%" y="143.50"></text></g><g><title>generics_of (2,814,099 samples, 0.33%)</title><rect x="68.1639%" y="165" width="0.3251%" height="15" fill="rgb(233,223,10)"/><text x="68.4139%" y="175.50"></text></g><g><title>late_bound_vars_map (2,026,399 samples, 0.23%)</title><rect x="68.9449%" y="117" width="0.2341%" height="15" fill="rgb(215,21,27)"/><text x="69.1949%" y="127.50"></text></g><g><title>resolve_lifetimes (1,881,498 samples, 0.22%)</title><rect x="68.9617%" y="101" width="0.2173%" height="15" fill="rgb(232,23,21)"/><text x="69.2117%" y="111.50"></text></g><g><title>explicit_predicates_of (4,618,560 samples, 0.53%)</title><rect x="68.6673%" y="133" width="0.5335%" height="15" fill="rgb(244,5,23)"/><text x="68.9173%" y="143.50"></text></g><g><title>predicates_of (6,510,131 samples, 0.75%)</title><rect x="68.5487%" y="165" width="0.7520%" height="15" fill="rgb(226,81,46)"/><text x="68.7987%" y="175.50"></text></g><g><title>predicates_defined_on (6,125,464 samples, 0.71%)</title><rect x="68.5931%" y="149" width="0.7076%" height="15" fill="rgb(247,70,30)"/><text x="68.8431%" y="159.50"></text></g><g><title>type_collecting (14,695,005 samples, 1.70%)</title><rect x="67.7044%" y="197" width="1.6975%" height="15" fill="rgb(212,68,19)"/><text x="67.9544%" y="207.50"></text></g><g><title>collect_mod_item_types (14,666,875 samples, 1.69%)</title><rect x="67.7077%" y="181" width="1.6942%" height="15" fill="rgb(240,187,13)"/><text x="67.9577%" y="191.50"></text></g><g><title>mir_const_qualif (2,795,583 samples, 0.32%)</title><rect x="72.0327%" y="117" width="0.3229%" height="15" fill="rgb(223,113,26)"/><text x="72.2827%" y="127.50"></text></g><g><title>mir_const (2,576,711 samples, 0.30%)</title><rect x="72.0580%" y="101" width="0.2976%" height="15" fill="rgb(206,192,2)"/><text x="72.3080%" y="111.50"></text></g><g><title>unsafety_check_result (2,198,032 samples, 0.25%)</title><rect x="72.1017%" y="85" width="0.2539%" height="15" fill="rgb(241,108,4)"/><text x="72.3517%" y="95.50"></text></g><g><title>mir_built (2,072,722 samples, 0.24%)</title><rect x="72.1162%" y="69" width="0.2394%" height="15" fill="rgb(247,173,49)"/><text x="72.3662%" y="79.50"></text></g><g><title>mir_borrowck (5,032,746 samples, 0.58%)</title><rect x="72.7068%" y="85" width="0.5814%" height="15" fill="rgb(224,114,35)"/><text x="72.9568%" y="95.50"></text></g><g><title>mir_for_ctfe (8,085,117 samples, 0.93%)</title><rect x="72.3556%" y="117" width="0.9339%" height="15" fill="rgb(245,159,27)"/><text x="72.6056%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,310,409 samples, 0.84%)</title><rect x="72.4451%" y="101" width="0.8445%" height="15" fill="rgb(245,172,44)"/><text x="72.6951%" y="111.50"></text></g><g><title>eval_to_const_value_raw (27,182,144 samples, 3.14%)</title><rect x="71.9194%" y="165" width="3.1399%" height="15" fill="rgb(236,23,11)"/><text x="72.1694%" y="175.50">eva..</text></g><g><title>eval_to_const_value_raw (27,155,424 samples, 3.14%)</title><rect x="71.9225%" y="149" width="3.1368%" height="15" fill="rgb(205,117,38)"/><text x="72.1725%" y="159.50">eva..</text></g><g><title>eval_to_allocation_raw (27,095,124 samples, 3.13%)</title><rect x="71.9295%" y="133" width="3.1299%" height="15" fill="rgb(237,72,25)"/><text x="72.1795%" y="143.50">eva..</text></g><g><title>typeck (15,314,162 samples, 1.77%)</title><rect x="73.2904%" y="117" width="1.7690%" height="15" fill="rgb(244,70,9)"/><text x="73.5404%" y="127.50"></text></g><g><title>evaluate_obligation (3,616,560 samples, 0.42%)</title><rect x="75.0593%" y="165" width="0.4178%" height="15" fill="rgb(217,125,39)"/><text x="75.3093%" y="175.50"></text></g><g><title>implied_outlives_bounds (2,246,502 samples, 0.26%)</title><rect x="75.4828%" y="165" width="0.2595%" height="15" fill="rgb(235,36,10)"/><text x="75.7328%" y="175.50"></text></g><g><title>param_env (3,639,911 samples, 0.42%)</title><rect x="75.7912%" y="165" width="0.4205%" height="15" fill="rgb(251,123,47)"/><text x="76.0412%" y="175.50"></text></g><g><title>region_scope_tree (2,952,200 samples, 0.34%)</title><rect x="76.2186%" y="165" width="0.3410%" height="15" fill="rgb(221,13,13)"/><text x="76.4686%" y="175.50"></text></g><g><title>check_impl_item_well_formed (59,878,840 samples, 6.92%)</title><rect x="69.6527%" y="181" width="6.9168%" height="15" fill="rgb(238,131,9)"/><text x="69.9027%" y="191.50">check_imp..</text></g><g><title>evaluate_obligation (2,976,727 samples, 0.34%)</title><rect x="78.6176%" y="165" width="0.3439%" height="15" fill="rgb(211,50,8)"/><text x="78.8676%" y="175.50"></text></g><g><title>param_env (2,249,623 samples, 0.26%)</title><rect x="79.0748%" y="165" width="0.2599%" height="15" fill="rgb(245,182,24)"/><text x="79.3248%" y="175.50"></text></g><g><title>check_item_well_formed (25,153,045 samples, 2.91%)</title><rect x="76.5695%" y="181" width="2.9055%" height="15" fill="rgb(242,14,37)"/><text x="76.8195%" y="191.50">ch..</text></g><g><title>analysis (689,646,822 samples, 79.66%)</title><rect x="0.2901%" y="229" width="79.6635%" height="15" fill="rgb(246,228,12)"/><text x="0.5401%" y="239.50">analysis</text></g><g><title>type_check_crate (455,486,623 samples, 52.61%)</title><rect x="27.3388%" y="213" width="52.6149%" height="15" fill="rgb(213,55,15)"/><text x="27.5888%" y="223.50">type_check_crate</text></g><g><title>wf_checking (91,280,611 samples, 10.54%)</title><rect x="69.4095%" y="197" width="10.5441%" height="15" fill="rgb(209,9,3)"/><text x="69.6595%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (4,143,364 samples, 0.48%)</title><rect x="79.4750%" y="181" width="0.4786%" height="15" fill="rgb(230,59,30)"/><text x="79.7250%" y="191.50"></text></g><g><title>AST_validation (1,364,396 samples, 0.16%)</title><rect x="80.0358%" y="213" width="0.1576%" height="15" fill="rgb(209,121,21)"/><text x="80.2858%" y="223.50"></text></g><g><title>metadata_register_crate (1,201,634 samples, 0.14%)</title><rect x="90.2084%" y="181" width="0.1388%" height="15" fill="rgb(220,109,13)"/><text x="90.4584%" y="191.50"></text></g><g><title>macro_expand_crate (89,313,289 samples, 10.32%)</title><rect x="80.2785%" y="213" width="10.3169%" height="15" fill="rgb(232,18,1)"/><text x="80.5285%" y="223.50">macro_expand_cr..</text></g><g><title>expand_crate (89,293,399 samples, 10.31%)</title><rect x="80.2808%" y="197" width="10.3146%" height="15" fill="rgb(215,41,42)"/><text x="80.5308%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,148,587 samples, 0.25%)</title><rect x="90.3472%" y="181" width="0.2482%" height="15" fill="rgb(224,123,36)"/><text x="90.5972%" y="191.50"></text></g><g><title>late_resolve_crate (15,678,674 samples, 1.81%)</title><rect x="90.7350%" y="197" width="1.8111%" height="15" fill="rgb(240,125,3)"/><text x="90.9850%" y="207.50">l..</text></g><g><title>resolve_check_unused (1,067,662 samples, 0.12%)</title><rect x="92.5583%" y="197" width="0.1233%" height="15" fill="rgb(205,98,50)"/><text x="92.8083%" y="207.50"></text></g><g><title>configure_and_expand (110,264,102 samples, 12.74%)</title><rect x="80.0116%" y="229" width="12.7370%" height="15" fill="rgb(205,185,37)"/><text x="80.2616%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (18,406,485 samples, 2.13%)</title><rect x="90.6224%" y="213" width="2.1262%" height="15" fill="rgb(238,207,15)"/><text x="90.8724%" y="223.50">r..</text></g><g><title>drop_ast (2,717,701 samples, 0.31%)</title><rect x="92.7486%" y="229" width="0.3139%" height="15" fill="rgb(213,199,42)"/><text x="92.9986%" y="239.50"></text></g><g><title>early_lint_checks (3,769,272 samples, 0.44%)</title><rect x="93.0652%" y="229" width="0.4354%" height="15" fill="rgb(235,201,11)"/><text x="93.3152%" y="239.50"></text></g><g><title>free_global_ctxt (10,359,536 samples, 1.20%)</title><rect x="93.5006%" y="229" width="1.1967%" height="15" fill="rgb(207,46,11)"/><text x="93.7506%" y="239.50"></text></g><g><title>generate_crate_metadata (11,749,551 samples, 1.36%)</title><rect x="94.6972%" y="229" width="1.3572%" height="15" fill="rgb(241,35,35)"/><text x="94.9472%" y="239.50"></text></g><g><title>hir_lowering (28,766,681 samples, 3.32%)</title><rect x="96.0545%" y="229" width="3.3229%" height="15" fill="rgb(243,32,47)"/><text x="96.3045%" y="239.50">hir..</text></g><g><title>parse_crate (1,221,363 samples, 0.14%)</title><rect x="99.3858%" y="229" width="0.1411%" height="15" fill="rgb(247,202,23)"/><text x="99.6358%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (2,653,520 samples, 0.31%)</title><rect x="99.5611%" y="229" width="0.3065%" height="15" fill="rgb(219,102,11)"/><text x="99.8111%" y="239.50"></text></g><g><title>all (865,699,509 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (865,699,509 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (958,650 samples, 0.11%)</title><rect x="99.8893%" y="229" width="0.1107%" height="15" fill="rgb(216,99,12)"/><text x="100.1393%" y="239.50"></text></g></svg></svg>