<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (314,343 samples, 0.13%)</title><rect x="12.7189%" y="149" width="0.1294%" height="15" fill="rgb(227,0,7)"/><text x="12.9689%" y="159.50"></text></g><g><title>adt_drop_tys (370,903 samples, 0.15%)</title><rect x="15.2672%" y="117" width="0.1527%" height="15" fill="rgb(217,0,24)"/><text x="15.5172%" y="127.50"></text></g><g><title>needs_drop_raw (905,473 samples, 0.37%)</title><rect x="15.2361%" y="133" width="0.3729%" height="15" fill="rgb(221,193,54)"/><text x="15.4861%" y="143.50"></text></g><g><title>is_copy_raw (458,950 samples, 0.19%)</title><rect x="15.4200%" y="117" width="0.1890%" height="15" fill="rgb(248,212,6)"/><text x="15.6700%" y="127.50"></text></g><g><title>evaluate_obligation (389,797 samples, 0.16%)</title><rect x="15.4484%" y="101" width="0.1605%" height="15" fill="rgb(208,68,35)"/><text x="15.6984%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (287,723 samples, 0.12%)</title><rect x="15.6463%" y="117" width="0.1185%" height="15" fill="rgb(232,128,0)"/><text x="15.8963%" y="127.50"></text></g><g><title>impl_parent (693,348 samples, 0.29%)</title><rect x="16.1029%" y="101" width="0.2855%" height="15" fill="rgb(207,160,47)"/><text x="16.3529%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (496,976 samples, 0.20%)</title><rect x="16.1837%" y="85" width="0.2047%" height="15" fill="rgb(228,23,34)"/><text x="16.4337%" y="95.50"></text></g><g><title>specialization_graph_of (3,425,249 samples, 1.41%)</title><rect x="15.7780%" y="117" width="1.4105%" height="15" fill="rgb(218,30,26)"/><text x="16.0280%" y="127.50"></text></g><g><title>impl_trait_ref (1,942,950 samples, 0.80%)</title><rect x="16.3884%" y="101" width="0.8001%" height="15" fill="rgb(220,122,19)"/><text x="16.6384%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,728,446 samples, 0.71%)</title><rect x="16.4767%" y="85" width="0.7118%" height="15" fill="rgb(250,228,42)"/><text x="16.7267%" y="95.50"></text></g><g><title>resolve_instance (3,865,263 samples, 1.59%)</title><rect x="15.6090%" y="133" width="1.5917%" height="15" fill="rgb(240,193,28)"/><text x="15.8590%" y="143.50"></text></g><g><title>thir_body (2,418,286 samples, 1.00%)</title><rect x="17.2050%" y="133" width="0.9958%" height="15" fill="rgb(216,20,37)"/><text x="17.4550%" y="143.50"></text></g><g><title>mir_const (14,928,568 samples, 6.15%)</title><rect x="12.0571%" y="181" width="6.1475%" height="15" fill="rgb(206,188,39)"/><text x="12.3071%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (13,887,146 samples, 5.72%)</title><rect x="12.4860%" y="165" width="5.7186%" height="15" fill="rgb(217,207,13)"/><text x="12.7360%" y="175.50">unsafet..</text></g><g><title>mir_built (13,007,117 samples, 5.36%)</title><rect x="12.8483%" y="149" width="5.3563%" height="15" fill="rgb(231,73,38)"/><text x="13.0983%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (16,409,405 samples, 6.76%)</title><rect x="11.6854%" y="197" width="6.7573%" height="15" fill="rgb(225,20,46)"/><text x="11.9354%" y="207.50">mir_promo..</text></g><g><title>mir_const_qualif (578,127 samples, 0.24%)</title><rect x="18.2046%" y="181" width="0.2381%" height="15" fill="rgb(210,31,41)"/><text x="18.4546%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (603,655 samples, 0.25%)</title><rect x="18.5180%" y="197" width="0.2486%" height="15" fill="rgb(221,200,47)"/><text x="18.7680%" y="207.50"></text></g><g><title>normalize_projection_ty (373,584 samples, 0.15%)</title><rect x="18.6128%" y="181" width="0.1538%" height="15" fill="rgb(226,26,5)"/><text x="18.8628%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,507,447 samples, 0.62%)</title><rect x="18.8617%" y="197" width="0.6208%" height="15" fill="rgb(249,33,26)"/><text x="19.1117%" y="207.50"></text></g><g><title>MIR_borrow_checking (45,994,062 samples, 18.94%)</title><rect x="0.5443%" y="229" width="18.9401%" height="15" fill="rgb(235,183,28)"/><text x="0.7943%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (45,968,662 samples, 18.93%)</title><rect x="0.5548%" y="213" width="18.9296%" height="15" fill="rgb(221,5,38)"/><text x="0.8048%" y="223.50">mir_borrowck</text></g><g><title>check_mod_attrs (448,535 samples, 0.18%)</title><rect x="19.5847%" y="213" width="0.1847%" height="15" fill="rgb(247,18,42)"/><text x="19.8347%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (293,983 samples, 0.12%)</title><rect x="19.8310%" y="213" width="0.1211%" height="15" fill="rgb(241,131,45)"/><text x="20.0810%" y="223.50"></text></g><g><title>misc_checking_1 (946,120 samples, 0.39%)</title><rect x="19.5793%" y="229" width="0.3896%" height="15" fill="rgb(249,31,29)"/><text x="19.8293%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (769,219 samples, 0.32%)</title><rect x="19.9696%" y="213" width="0.3168%" height="15" fill="rgb(225,111,53)"/><text x="20.2196%" y="223.50"></text></g><g><title>check_mod_liveness (621,827 samples, 0.26%)</title><rect x="20.0303%" y="197" width="0.2561%" height="15" fill="rgb(238,160,17)"/><text x="20.2803%" y="207.50"></text></g><g><title>misc_checking_2 (1,248,284 samples, 0.51%)</title><rect x="19.9689%" y="229" width="0.5140%" height="15" fill="rgb(214,148,48)"/><text x="20.2189%" y="239.50"></text></g><g><title>match_checking (477,505 samples, 0.20%)</title><rect x="20.2863%" y="213" width="0.1966%" height="15" fill="rgb(232,36,49)"/><text x="20.5363%" y="223.50"></text></g><g><title>check_match (469,825 samples, 0.19%)</title><rect x="20.2895%" y="197" width="0.1935%" height="15" fill="rgb(209,103,24)"/><text x="20.5395%" y="207.50"></text></g><g><title>eval_to_const_value_raw (438,004 samples, 0.18%)</title><rect x="20.9157%" y="133" width="0.1804%" height="15" fill="rgb(229,88,8)"/><text x="21.1657%" y="143.50"></text></g><g><title>eval_to_const_value_raw (437,214 samples, 0.18%)</title><rect x="20.9160%" y="117" width="0.1800%" height="15" fill="rgb(213,181,19)"/><text x="21.1660%" y="127.50"></text></g><g><title>eval_to_allocation_raw (435,564 samples, 0.18%)</title><rect x="20.9167%" y="101" width="0.1794%" height="15" fill="rgb(254,191,54)"/><text x="21.1667%" y="111.50"></text></g><g><title>eval_to_allocation_raw (491,136 samples, 0.20%)</title><rect x="20.8946%" y="181" width="0.2022%" height="15" fill="rgb(241,83,37)"/><text x="21.1446%" y="191.50"></text></g><g><title>eval_to_allocation_raw (490,396 samples, 0.20%)</title><rect x="20.8949%" y="165" width="0.2019%" height="15" fill="rgb(233,36,39)"/><text x="21.1449%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (453,265 samples, 0.19%)</title><rect x="20.9102%" y="149" width="0.1867%" height="15" fill="rgb(226,3,54)"/><text x="21.1602%" y="159.50"></text></g><g><title>impl_parent (689,794 samples, 0.28%)</title><rect x="21.6463%" y="149" width="0.2841%" height="15" fill="rgb(245,192,40)"/><text x="21.8963%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (439,208 samples, 0.18%)</title><rect x="21.7495%" y="133" width="0.1809%" height="15" fill="rgb(238,167,29)"/><text x="21.9995%" y="143.50"></text></g><g><title>specialization_graph_of (4,509,031 samples, 1.86%)</title><rect x="21.2322%" y="165" width="1.8568%" height="15" fill="rgb(232,182,51)"/><text x="21.4822%" y="175.50">s..</text></g><g><title>impl_trait_ref (2,813,588 samples, 1.16%)</title><rect x="21.9304%" y="149" width="1.1586%" height="15" fill="rgb(231,60,39)"/><text x="22.1804%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,320,195 samples, 0.96%)</title><rect x="22.1335%" y="133" width="0.9554%" height="15" fill="rgb(208,69,12)"/><text x="22.3835%" y="143.50"></text></g><g><title>resolve_instance (4,585,851 samples, 1.89%)</title><rect x="21.2017%" y="181" width="1.8884%" height="15" fill="rgb(235,93,37)"/><text x="21.4517%" y="191.50">r..</text></g><g><title>crate_lints (6,050,518 samples, 2.49%)</title><rect x="20.6060%" y="197" width="2.4916%" height="15" fill="rgb(213,116,39)"/><text x="20.8560%" y="207.50">cr..</text></g><g><title>lint_checking (7,053,589 samples, 2.90%)</title><rect x="20.6046%" y="213" width="2.9046%" height="15" fill="rgb(222,207,29)"/><text x="20.8546%" y="223.50">li..</text></g><g><title>module_lints (999,691 samples, 0.41%)</title><rect x="23.0975%" y="197" width="0.4117%" height="15" fill="rgb(206,96,30)"/><text x="23.3475%" y="207.50"></text></g><g><title>lint_mod (994,841 samples, 0.41%)</title><rect x="23.0995%" y="181" width="0.4097%" height="15" fill="rgb(218,138,4)"/><text x="23.3495%" y="191.50"></text></g><g><title>privacy_checking_modules (1,241,364 samples, 0.51%)</title><rect x="23.5671%" y="213" width="0.5112%" height="15" fill="rgb(250,191,14)"/><text x="23.8171%" y="223.50"></text></g><g><title>check_mod_privacy (1,239,914 samples, 0.51%)</title><rect x="23.5677%" y="197" width="0.5106%" height="15" fill="rgb(239,60,40)"/><text x="23.8177%" y="207.50"></text></g><g><title>misc_checking_3 (8,740,268 samples, 3.60%)</title><rect x="20.4830%" y="229" width="3.5992%" height="15" fill="rgb(206,27,48)"/><text x="20.7330%" y="239.50">misc..</text></g><g><title>adt_def (298,252 samples, 0.12%)</title><rect x="24.9027%" y="101" width="0.1228%" height="15" fill="rgb(225,35,8)"/><text x="25.1527%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (294,342 samples, 0.12%)</title><rect x="24.9043%" y="85" width="0.1212%" height="15" fill="rgb(250,213,24)"/><text x="25.1543%" y="95.50"></text></g><g><title>adt_dtorck_constraint (403,644 samples, 0.17%)</title><rect x="25.2616%" y="69" width="0.1662%" height="15" fill="rgb(247,123,22)"/><text x="25.5116%" y="79.50"></text></g><g><title>adt_dtorck_constraint (589,765 samples, 0.24%)</title><rect x="25.2031%" y="85" width="0.2429%" height="15" fill="rgb(231,138,38)"/><text x="25.4531%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,061,260 samples, 0.44%)</title><rect x="25.0371%" y="101" width="0.4370%" height="15" fill="rgb(231,145,46)"/><text x="25.2871%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,554,623 samples, 0.64%)</title><rect x="24.8665%" y="117" width="0.6402%" height="15" fill="rgb(251,118,11)"/><text x="25.1165%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,946,749 samples, 0.80%)</title><rect x="24.7450%" y="133" width="0.8017%" height="15" fill="rgb(217,147,25)"/><text x="24.9950%" y="143.50"></text></g><g><title>dropck_outlives (2,482,857 samples, 1.02%)</title><rect x="24.5548%" y="165" width="1.0224%" height="15" fill="rgb(247,81,37)"/><text x="24.8048%" y="175.50"></text></g><g><title>adt_dtorck_constraint (2,344,606 samples, 0.97%)</title><rect x="24.6117%" y="149" width="0.9655%" height="15" fill="rgb(209,12,38)"/><text x="24.8617%" y="159.50"></text></g><g><title>evaluate_obligation (785,990 samples, 0.32%)</title><rect x="25.5772%" y="165" width="0.3237%" height="15" fill="rgb(227,1,9)"/><text x="25.8272%" y="175.50"></text></g><g><title>trait_impls_of (247,573 samples, 0.10%)</title><rect x="25.7989%" y="149" width="0.1019%" height="15" fill="rgb(248,47,43)"/><text x="26.0489%" y="159.50"></text></g><g><title>associated_item (684,465 samples, 0.28%)</title><rect x="44.5663%" y="133" width="0.2819%" height="15" fill="rgb(221,10,30)"/><text x="44.8163%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (378,162 samples, 0.16%)</title><rect x="44.6925%" y="117" width="0.1557%" height="15" fill="rgb(210,229,1)"/><text x="44.9425%" y="127.50"></text></g><g><title>associated_items (879,316 samples, 0.36%)</title><rect x="44.5034%" y="149" width="0.3621%" height="15" fill="rgb(222,148,37)"/><text x="44.7534%" y="159.50"></text></g><g><title>adt_dtorck_constraint (257,943 samples, 0.11%)</title><rect x="45.0560%" y="117" width="0.1062%" height="15" fill="rgb(234,67,33)"/><text x="45.3060%" y="127.50"></text></g><g><title>dropck_outlives (684,078 samples, 0.28%)</title><rect x="44.8986%" y="149" width="0.2817%" height="15" fill="rgb(247,98,35)"/><text x="45.1486%" y="159.50"></text></g><g><title>adt_dtorck_constraint (424,357 samples, 0.17%)</title><rect x="45.0056%" y="133" width="0.1747%" height="15" fill="rgb(247,138,52)"/><text x="45.2556%" y="143.50"></text></g><g><title>evaluate_obligation (2,505,701 samples, 1.03%)</title><rect x="45.1803%" y="149" width="1.0318%" height="15" fill="rgb(213,79,30)"/><text x="45.4303%" y="159.50"></text></g><g><title>trait_impls_of (898,951 samples, 0.37%)</title><rect x="45.8420%" y="133" width="0.3702%" height="15" fill="rgb(246,177,23)"/><text x="46.0920%" y="143.50"></text></g><g><title>implementations_of_trait (302,853 samples, 0.12%)</title><rect x="46.0874%" y="117" width="0.1247%" height="15" fill="rgb(230,62,27)"/><text x="46.3374%" y="127.50"></text></g><g><title>lint_levels (264,213 samples, 0.11%)</title><rect x="46.5695%" y="149" width="0.1088%" height="15" fill="rgb(216,154,8)"/><text x="46.8195%" y="159.50"></text></g><g><title>evaluate_obligation (271,234 samples, 0.11%)</title><rect x="46.8074%" y="133" width="0.1117%" height="15" fill="rgb(244,35,45)"/><text x="47.0574%" y="143.50"></text></g><g><title>method_autoderef_steps (546,677 samples, 0.23%)</title><rect x="46.7007%" y="149" width="0.2251%" height="15" fill="rgb(251,115,12)"/><text x="46.9507%" y="159.50"></text></g><g><title>predicates_of (541,280 samples, 0.22%)</title><rect x="46.9341%" y="149" width="0.2229%" height="15" fill="rgb(240,54,50)"/><text x="47.1841%" y="159.50"></text></g><g><title>predicates_defined_on (346,304 samples, 0.14%)</title><rect x="47.0144%" y="133" width="0.1426%" height="15" fill="rgb(233,84,52)"/><text x="47.2644%" y="143.50"></text></g><g><title>typeck (51,435,263 samples, 21.18%)</title><rect x="26.0774%" y="165" width="21.1807%" height="15" fill="rgb(207,117,47)"/><text x="26.3274%" y="175.50">typeck</text></g><g><title>item_bodies_checking (56,238,417 samples, 23.16%)</title><rect x="24.1054%" y="213" width="23.1587%" height="15" fill="rgb(249,43,39)"/><text x="24.3554%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (56,235,077 samples, 23.16%)</title><rect x="24.1068%" y="197" width="23.1573%" height="15" fill="rgb(209,38,44)"/><text x="24.3568%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (56,225,457 samples, 23.15%)</title><rect x="24.1108%" y="181" width="23.1533%" height="15" fill="rgb(236,212,23)"/><text x="24.3608%" y="191.50">typeck</text></g><g><title>impl_trait_ref (323,294 samples, 0.13%)</title><rect x="47.5507%" y="53" width="0.1331%" height="15" fill="rgb(242,79,21)"/><text x="47.8007%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (300,454 samples, 0.12%)</title><rect x="47.5601%" y="37" width="0.1237%" height="15" fill="rgb(211,96,35)"/><text x="47.8101%" y="47.50"></text></g><g><title>coherent_trait (561,276 samples, 0.23%)</title><rect x="47.4666%" y="85" width="0.2311%" height="15" fill="rgb(253,215,40)"/><text x="47.7166%" y="95.50"></text></g><g><title>specialization_graph_of (557,386 samples, 0.23%)</title><rect x="47.4682%" y="69" width="0.2295%" height="15" fill="rgb(211,81,21)"/><text x="47.7182%" y="79.50"></text></g><g><title>adt_destructor (572,376 samples, 0.24%)</title><rect x="47.4639%" y="117" width="0.2357%" height="15" fill="rgb(208,190,38)"/><text x="47.7139%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (571,846 samples, 0.24%)</title><rect x="47.4641%" y="101" width="0.2355%" height="15" fill="rgb(235,213,38)"/><text x="47.7141%" y="111.50"></text></g><g><title>adt_dtorck_constraint (582,716 samples, 0.24%)</title><rect x="47.4599%" y="133" width="0.2400%" height="15" fill="rgb(237,122,38)"/><text x="47.7099%" y="143.50"></text></g><g><title>dropck_outlives (615,607 samples, 0.25%)</title><rect x="47.4468%" y="165" width="0.2535%" height="15" fill="rgb(244,218,35)"/><text x="47.6968%" y="175.50"></text></g><g><title>adt_dtorck_constraint (595,306 samples, 0.25%)</title><rect x="47.4551%" y="149" width="0.2451%" height="15" fill="rgb(240,68,47)"/><text x="47.7051%" y="159.50"></text></g><g><title>item_types_checking (1,257,714 samples, 0.52%)</title><rect x="47.2641%" y="213" width="0.5179%" height="15" fill="rgb(210,16,53)"/><text x="47.5141%" y="223.50"></text></g><g><title>check_mod_item_types (1,255,734 samples, 0.52%)</title><rect x="47.2649%" y="197" width="0.5171%" height="15" fill="rgb(235,124,12)"/><text x="47.5149%" y="207.50"></text></g><g><title>typeck (1,216,414 samples, 0.50%)</title><rect x="47.2811%" y="181" width="0.5009%" height="15" fill="rgb(224,169,11)"/><text x="47.5311%" y="191.50"></text></g><g><title>fn_sig (246,823 samples, 0.10%)</title><rect x="47.8254%" y="181" width="0.1016%" height="15" fill="rgb(250,166,2)"/><text x="48.0754%" y="191.50"></text></g><g><title>type_collecting (517,556 samples, 0.21%)</title><rect x="47.7825%" y="213" width="0.2131%" height="15" fill="rgb(242,216,29)"/><text x="48.0325%" y="223.50"></text></g><g><title>collect_mod_item_types (510,805 samples, 0.21%)</title><rect x="47.7853%" y="197" width="0.2103%" height="15" fill="rgb(230,116,27)"/><text x="48.0353%" y="207.50"></text></g><g><title>adt_sized_constraint (321,563 samples, 0.13%)</title><rect x="48.2211%" y="165" width="0.1324%" height="15" fill="rgb(228,99,48)"/><text x="48.4711%" y="175.50"></text></g><g><title>evaluate_obligation (623,707 samples, 0.26%)</title><rect x="48.1471%" y="181" width="0.2568%" height="15" fill="rgb(253,11,6)"/><text x="48.3971%" y="191.50"></text></g><g><title>region_scope_tree (613,247 samples, 0.25%)</title><rect x="48.5037%" y="181" width="0.2525%" height="15" fill="rgb(247,143,39)"/><text x="48.7537%" y="191.50"></text></g><g><title>analysis (117,600,090 samples, 48.43%)</title><rect x="0.3294%" y="245" width="48.4270%" height="15" fill="rgb(236,97,10)"/><text x="0.5794%" y="255.50">analysis</text></g><g><title>type_check_crate (59,918,968 samples, 24.67%)</title><rect x="24.0822%" y="229" width="24.6743%" height="15" fill="rgb(233,208,19)"/><text x="24.3322%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,846,540 samples, 0.76%)</title><rect x="47.9960%" y="213" width="0.7604%" height="15" fill="rgb(216,164,2)"/><text x="48.2460%" y="223.50"></text></g><g><title>check_item_well_formed (1,783,550 samples, 0.73%)</title><rect x="48.0220%" y="197" width="0.7345%" height="15" fill="rgb(220,129,5)"/><text x="48.2720%" y="207.50"></text></g><g><title>codegen_crate (453,695 samples, 0.19%)</title><rect x="48.7611%" y="245" width="0.1868%" height="15" fill="rgb(242,17,10)"/><text x="49.0111%" y="255.50"></text></g><g><title>metadata_load_macro (967,209 samples, 0.40%)</title><rect x="90.7951%" y="197" width="0.3983%" height="15" fill="rgb(242,107,0)"/><text x="91.0451%" y="207.50"></text></g><g><title>macro_expand_crate (105,067,340 samples, 43.27%)</title><rect x="49.1879%" y="229" width="43.2661%" height="15" fill="rgb(251,28,31)"/><text x="49.4379%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (105,045,400 samples, 43.26%)</title><rect x="49.1970%" y="213" width="43.2571%" height="15" fill="rgb(233,223,10)"/><text x="49.4470%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (3,061,343 samples, 1.26%)</title><rect x="91.1934%" y="197" width="1.2606%" height="15" fill="rgb(215,21,27)"/><text x="91.4434%" y="207.50"></text></g><g><title>metadata_register_crate (1,088,341 samples, 0.45%)</title><rect x="92.0059%" y="181" width="0.4482%" height="15" fill="rgb(232,23,21)"/><text x="92.2559%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (444,945 samples, 0.18%)</title><rect x="92.4546%" y="229" width="0.1832%" height="15" fill="rgb(244,5,23)"/><text x="92.7046%" y="239.50"></text></g><g><title>finalize_macro_resolutions (1,319,235 samples, 0.54%)</title><rect x="92.7406%" y="213" width="0.5433%" height="15" fill="rgb(226,81,46)"/><text x="92.9906%" y="223.50"></text></g><g><title>late_resolve_crate (2,676,620 samples, 1.10%)</title><rect x="93.2838%" y="213" width="1.1022%" height="15" fill="rgb(247,70,30)"/><text x="93.5338%" y="223.50"></text></g><g><title>configure_and_expand (110,521,202 samples, 45.51%)</title><rect x="48.9480%" y="245" width="45.5120%" height="15" fill="rgb(212,68,19)"/><text x="49.1980%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (4,208,346 samples, 1.73%)</title><rect x="92.7270%" y="229" width="1.7330%" height="15" fill="rgb(240,187,13)"/><text x="92.9770%" y="239.50"></text></g><g><title>early_lint_checks (840,159 samples, 0.35%)</title><rect x="94.5673%" y="245" width="0.3460%" height="15" fill="rgb(223,113,26)"/><text x="94.8173%" y="255.50"></text></g><g><title>free_global_ctxt (3,716,660 samples, 1.53%)</title><rect x="94.9133%" y="245" width="1.5305%" height="15" fill="rgb(206,192,2)"/><text x="95.1633%" y="255.50"></text></g><g><title>hir_lowering (4,204,927 samples, 1.73%)</title><rect x="96.5160%" y="245" width="1.7316%" height="15" fill="rgb(241,108,4)"/><text x="96.7660%" y="255.50"></text></g><g><title>parse_crate (3,072,764 samples, 1.27%)</title><rect x="98.2725%" y="245" width="1.2653%" height="15" fill="rgb(247,173,49)"/><text x="98.5225%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (565,276 samples, 0.23%)</title><rect x="99.6233%" y="245" width="0.2328%" height="15" fill="rgb(224,114,35)"/><text x="99.8733%" y="255.50"></text></g><g><title>all (242,839,764 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (242,839,764 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (252,083 samples, 0.10%)</title><rect x="99.8962%" y="245" width="0.1038%" height="15" fill="rgb(236,23,11)"/><text x="100.1462%" y="255.50"></text></g></svg></svg>