<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (241,065 samples, 0.10%)</title><rect x="12.2762%" y="133" width="0.1015%" height="15" fill="rgb(227,0,7)"/><text x="12.5262%" y="143.50"></text></g><g><title>param_env (509,893 samples, 0.21%)</title><rect x="14.0071%" y="101" width="0.2146%" height="15" fill="rgb(217,0,24)"/><text x="14.2571%" y="111.50"></text></g><g><title>item_attrs (393,773 samples, 0.17%)</title><rect x="14.7473%" y="69" width="0.1657%" height="15" fill="rgb(221,193,54)"/><text x="14.9973%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (379,952 samples, 0.16%)</title><rect x="14.7531%" y="53" width="0.1599%" height="15" fill="rgb(248,212,6)"/><text x="15.0031%" y="63.50"></text></g><g><title>codegen_fn_attrs (579,664 samples, 0.24%)</title><rect x="14.6772%" y="85" width="0.2440%" height="15" fill="rgb(208,68,35)"/><text x="14.9272%" y="95.50"></text></g><g><title>is_copy_raw (487,085 samples, 0.20%)</title><rect x="17.4730%" y="69" width="0.2050%" height="15" fill="rgb(232,128,0)"/><text x="17.7230%" y="79.50"></text></g><g><title>evaluate_obligation (382,303 samples, 0.16%)</title><rect x="17.5171%" y="53" width="0.1609%" height="15" fill="rgb(207,160,47)"/><text x="17.7671%" y="63.50"></text></g><g><title>adt_drop_tys (256,143 samples, 0.11%)</title><rect x="17.7554%" y="37" width="0.1078%" height="15" fill="rgb(228,23,34)"/><text x="18.0054%" y="47.50"></text></g><g><title>adt_drop_tys (380,855 samples, 0.16%)</title><rect x="17.7464%" y="53" width="0.1603%" height="15" fill="rgb(218,30,26)"/><text x="17.9964%" y="63.50"></text></g><g><title>is_copy_raw (1,106,841 samples, 0.47%)</title><rect x="17.9067%" y="53" width="0.4658%" height="15" fill="rgb(220,122,19)"/><text x="18.1567%" y="63.50"></text></g><g><title>evaluate_obligation (906,820 samples, 0.38%)</title><rect x="17.9909%" y="37" width="0.3816%" height="15" fill="rgb(250,228,42)"/><text x="18.2409%" y="47.50"></text></g><g><title>needs_drop_raw (1,681,187 samples, 0.71%)</title><rect x="17.6791%" y="69" width="0.7075%" height="15" fill="rgb(240,193,28)"/><text x="17.9291%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (704,257 samples, 0.30%)</title><rect x="18.5658%" y="53" width="0.2964%" height="15" fill="rgb(216,20,37)"/><text x="18.8158%" y="63.50"></text></g><g><title>resolve_instance (1,433,579 samples, 0.60%)</title><rect x="18.3866%" y="69" width="0.6033%" height="15" fill="rgb(206,188,39)"/><text x="18.6366%" y="79.50"></text></g><g><title>thir_body (2,451,611 samples, 1.03%)</title><rect x="19.0216%" y="69" width="1.0318%" height="15" fill="rgb(217,207,13)"/><text x="19.2716%" y="79.50"></text></g><g><title>mir_const (16,334,385 samples, 6.87%)</title><rect x="13.1972%" y="117" width="6.8744%" height="15" fill="rgb(231,73,38)"/><text x="13.4472%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (13,900,025 samples, 5.85%)</title><rect x="14.2217%" y="101" width="5.8499%" height="15" fill="rgb(225,20,46)"/><text x="14.4717%" y="111.50">unsafet..</text></g><g><title>mir_built (12,238,092 samples, 5.15%)</title><rect x="14.9211%" y="85" width="5.1504%" height="15" fill="rgb(210,31,41)"/><text x="15.1711%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (19,125,873 samples, 8.05%)</title><rect x="12.3846%" y="133" width="8.0492%" height="15" fill="rgb(221,200,47)"/><text x="12.6346%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (860,652 samples, 0.36%)</title><rect x="20.0716%" y="117" width="0.3622%" height="15" fill="rgb(226,26,5)"/><text x="20.3216%" y="127.50"></text></g><g><title>mir_const (603,261 samples, 0.25%)</title><rect x="20.1799%" y="101" width="0.2539%" height="15" fill="rgb(249,33,26)"/><text x="20.4299%" y="111.50"></text></g><g><title>unsafety_check_result (416,838 samples, 0.18%)</title><rect x="20.2584%" y="85" width="0.1754%" height="15" fill="rgb(235,183,28)"/><text x="20.5084%" y="95.50"></text></g><g><title>mir_built (362,807 samples, 0.15%)</title><rect x="20.2811%" y="69" width="0.1527%" height="15" fill="rgb(221,5,38)"/><text x="20.5311%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (837,510 samples, 0.35%)</title><rect x="20.4361%" y="133" width="0.3525%" height="15" fill="rgb(247,18,42)"/><text x="20.6861%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,271,025 samples, 0.53%)</title><rect x="20.7885%" y="133" width="0.5349%" height="15" fill="rgb(241,131,45)"/><text x="21.0385%" y="143.50"></text></g><g><title>normalize_projection_ty (843,499 samples, 0.35%)</title><rect x="20.9685%" y="117" width="0.3550%" height="15" fill="rgb(249,31,29)"/><text x="21.2185%" y="127.50"></text></g><g><title>type_op_normalize_ty (245,192 samples, 0.10%)</title><rect x="21.3875%" y="133" width="0.1032%" height="15" fill="rgb(225,111,53)"/><text x="21.6375%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,131,478 samples, 2.16%)</title><rect x="21.4907%" y="133" width="2.1596%" height="15" fill="rgb(238,160,17)"/><text x="21.7407%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (54,622,012 samples, 22.99%)</title><rect x="0.6693%" y="165" width="22.9878%" height="15" fill="rgb(214,148,48)"/><text x="0.9193%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,254,829 samples, 22.83%)</title><rect x="0.8238%" y="149" width="22.8333%" height="15" fill="rgb(232,36,49)"/><text x="1.0738%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (637,738 samples, 0.27%)</title><rect x="23.6571%" y="165" width="0.2684%" height="15" fill="rgb(209,103,24)"/><text x="23.9071%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (447,495 samples, 0.19%)</title><rect x="23.7372%" y="149" width="0.1883%" height="15" fill="rgb(229,88,8)"/><text x="23.9872%" y="159.50"></text></g><g><title>hir_module_items (429,887 samples, 0.18%)</title><rect x="23.9255%" y="165" width="0.1809%" height="15" fill="rgb(213,181,19)"/><text x="24.1755%" y="175.50"></text></g><g><title>should_inherit_track_caller (446,893 samples, 0.19%)</title><rect x="24.4591%" y="117" width="0.1881%" height="15" fill="rgb(254,191,54)"/><text x="24.7091%" y="127.50"></text></g><g><title>codegen_fn_attrs (767,316 samples, 0.32%)</title><rect x="24.3327%" y="133" width="0.3229%" height="15" fill="rgb(241,83,37)"/><text x="24.5827%" y="143.50"></text></g><g><title>check_mod_attrs (1,265,484 samples, 0.53%)</title><rect x="24.1231%" y="149" width="0.5326%" height="15" fill="rgb(233,36,39)"/><text x="24.3731%" y="159.50"></text></g><g><title>check_mod_const_bodies (287,573 samples, 0.12%)</title><rect x="24.6557%" y="149" width="0.1210%" height="15" fill="rgb(226,3,54)"/><text x="24.9057%" y="159.50"></text></g><g><title>lint_levels (267,883 samples, 0.11%)</title><rect x="25.0203%" y="133" width="0.1127%" height="15" fill="rgb(245,192,40)"/><text x="25.2703%" y="143.50"></text></g><g><title>lookup_deprecation_entry (295,014 samples, 0.12%)</title><rect x="25.1330%" y="133" width="0.1242%" height="15" fill="rgb(238,167,29)"/><text x="25.3830%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,084,672 samples, 0.46%)</title><rect x="24.8585%" y="149" width="0.4565%" height="15" fill="rgb(232,182,51)"/><text x="25.1085%" y="159.50"></text></g><g><title>misc_checking_1 (2,976,544 samples, 1.25%)</title><rect x="24.1067%" y="165" width="1.2527%" height="15" fill="rgb(231,60,39)"/><text x="24.3567%" y="175.50"></text></g><g><title>check_mod_intrinsics (295,373 samples, 0.12%)</title><rect x="25.3662%" y="133" width="0.1243%" height="15" fill="rgb(208,69,12)"/><text x="25.6162%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (1,120,892 samples, 0.47%)</title><rect x="25.3601%" y="149" width="0.4717%" height="15" fill="rgb(235,93,37)"/><text x="25.6101%" y="159.50"></text></g><g><title>check_mod_liveness (811,179 samples, 0.34%)</title><rect x="25.4905%" y="133" width="0.3414%" height="15" fill="rgb(213,116,39)"/><text x="25.7405%" y="143.50"></text></g><g><title>misc_checking_2 (2,188,744 samples, 0.92%)</title><rect x="25.3594%" y="165" width="0.9211%" height="15" fill="rgb(222,207,29)"/><text x="25.6094%" y="175.50"></text></g><g><title>match_checking (1,066,082 samples, 0.45%)</title><rect x="25.8318%" y="149" width="0.4487%" height="15" fill="rgb(206,96,30)"/><text x="26.0818%" y="159.50"></text></g><g><title>check_match (977,391 samples, 0.41%)</title><rect x="25.8692%" y="133" width="0.4113%" height="15" fill="rgb(218,138,4)"/><text x="26.1192%" y="143.50"></text></g><g><title>check_private_in_public (535,716 samples, 0.23%)</title><rect x="26.2853%" y="149" width="0.2255%" height="15" fill="rgb(250,191,14)"/><text x="26.5353%" y="159.50"></text></g><g><title>death_checking (944,381 samples, 0.40%)</title><rect x="26.5108%" y="149" width="0.3974%" height="15" fill="rgb(239,60,40)"/><text x="26.7608%" y="159.50"></text></g><g><title>eval_to_const_value_raw (252,333 samples, 0.11%)</title><rect x="27.2881%" y="117" width="0.1062%" height="15" fill="rgb(206,27,48)"/><text x="27.5381%" y="127.50"></text></g><g><title>param_env (490,984 samples, 0.21%)</title><rect x="27.3947%" y="117" width="0.2066%" height="15" fill="rgb(225,35,8)"/><text x="27.6447%" y="127.50"></text></g><g><title>crate_lints (2,004,043 samples, 0.84%)</title><rect x="26.9089%" y="133" width="0.8434%" height="15" fill="rgb(250,213,24)"/><text x="27.1589%" y="143.50"></text></g><g><title>type_of (352,115 samples, 0.15%)</title><rect x="27.6041%" y="117" width="0.1482%" height="15" fill="rgb(247,123,22)"/><text x="27.8541%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (274,654 samples, 0.12%)</title><rect x="27.6367%" y="101" width="0.1156%" height="15" fill="rgb(231,138,38)"/><text x="27.8867%" y="111.50"></text></g><g><title>lint_checking (2,911,613 samples, 1.23%)</title><rect x="26.9082%" y="149" width="1.2254%" height="15" fill="rgb(231,145,46)"/><text x="27.1582%" y="159.50"></text></g><g><title>module_lints (906,010 samples, 0.38%)</title><rect x="27.7523%" y="133" width="0.3813%" height="15" fill="rgb(251,118,11)"/><text x="28.0023%" y="143.50"></text></g><g><title>lint_mod (896,730 samples, 0.38%)</title><rect x="27.7562%" y="117" width="0.3774%" height="15" fill="rgb(217,147,25)"/><text x="28.0062%" y="127.50"></text></g><g><title>privacy_access_levels (775,958 samples, 0.33%)</title><rect x="28.1336%" y="149" width="0.3266%" height="15" fill="rgb(247,81,37)"/><text x="28.3836%" y="159.50"></text></g><g><title>privacy_checking_modules (1,922,361 samples, 0.81%)</title><rect x="28.4602%" y="149" width="0.8090%" height="15" fill="rgb(209,12,38)"/><text x="28.7102%" y="159.50"></text></g><g><title>check_mod_privacy (1,913,811 samples, 0.81%)</title><rect x="28.4638%" y="133" width="0.8054%" height="15" fill="rgb(227,1,9)"/><text x="28.7138%" y="143.50"></text></g><g><title>misc_checking_3 (7,124,909 samples, 3.00%)</title><rect x="26.2805%" y="165" width="2.9985%" height="15" fill="rgb(248,47,43)"/><text x="26.5305%" y="175.50">mis..</text></g><g><title>is_copy_raw (309,375 samples, 0.13%)</title><rect x="29.4177%" y="117" width="0.1302%" height="15" fill="rgb(221,10,30)"/><text x="29.6677%" y="127.50"></text></g><g><title>evaluate_obligation (263,715 samples, 0.11%)</title><rect x="29.4369%" y="101" width="0.1110%" height="15" fill="rgb(210,229,1)"/><text x="29.6869%" y="111.50"></text></g><g><title>impl_parent (1,034,930 samples, 0.44%)</title><rect x="30.9048%" y="101" width="0.4356%" height="15" fill="rgb(222,148,37)"/><text x="31.1548%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (600,729 samples, 0.25%)</title><rect x="31.0875%" y="85" width="0.2528%" height="15" fill="rgb(234,67,33)"/><text x="31.3375%" y="95.50"></text></g><g><title>impl_trait_ref (1,979,822 samples, 0.83%)</title><rect x="31.3406%" y="101" width="0.8332%" height="15" fill="rgb(247,98,35)"/><text x="31.5906%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,557,436 samples, 0.66%)</title><rect x="31.5184%" y="85" width="0.6555%" height="15" fill="rgb(247,138,52)"/><text x="31.7684%" y="95.50"></text></g><g><title>item_attrs (272,192 samples, 0.11%)</title><rect x="32.1738%" y="101" width="0.1146%" height="15" fill="rgb(213,79,30)"/><text x="32.4238%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (266,842 samples, 0.11%)</title><rect x="32.1761%" y="85" width="0.1123%" height="15" fill="rgb(246,177,23)"/><text x="32.4261%" y="95.50"></text></g><g><title>trait_impls_of (420,294 samples, 0.18%)</title><rect x="32.3252%" y="101" width="0.1769%" height="15" fill="rgb(230,62,27)"/><text x="32.5752%" y="111.50"></text></g><g><title>coherent_trait (7,470,954 samples, 3.14%)</title><rect x="29.3626%" y="133" width="3.1442%" height="15" fill="rgb(216,154,8)"/><text x="29.6126%" y="143.50">coh..</text></g><g><title>specialization_graph_of (6,973,348 samples, 2.93%)</title><rect x="29.5720%" y="117" width="2.9348%" height="15" fill="rgb(244,35,45)"/><text x="29.8220%" y="127.50">sp..</text></g><g><title>coherence_checking (7,618,636 samples, 3.21%)</title><rect x="29.3523%" y="149" width="3.2063%" height="15" fill="rgb(251,115,12)"/><text x="29.6023%" y="159.50">coh..</text></g><g><title>associated_item (579,395 samples, 0.24%)</title><rect x="53.5622%" y="85" width="0.2438%" height="15" fill="rgb(240,54,50)"/><text x="53.8122%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (464,564 samples, 0.20%)</title><rect x="53.6106%" y="69" width="0.1955%" height="15" fill="rgb(233,84,52)"/><text x="53.8606%" y="79.50"></text></g><g><title>associated_items (854,420 samples, 0.36%)</title><rect x="53.4655%" y="101" width="0.3596%" height="15" fill="rgb(207,117,47)"/><text x="53.7155%" y="111.50"></text></g><g><title>dropck_outlives (705,747 samples, 0.30%)</title><rect x="53.8698%" y="101" width="0.2970%" height="15" fill="rgb(249,43,39)"/><text x="54.1198%" y="111.50"></text></g><g><title>generics_of (425,611 samples, 0.18%)</title><rect x="56.0579%" y="85" width="0.1791%" height="15" fill="rgb(209,38,44)"/><text x="56.3079%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (332,468 samples, 0.14%)</title><rect x="56.0971%" y="69" width="0.1399%" height="15" fill="rgb(236,212,23)"/><text x="56.3471%" y="79.50"></text></g><g><title>impl_polarity (304,325 samples, 0.13%)</title><rect x="56.2717%" y="85" width="0.1281%" height="15" fill="rgb(242,79,21)"/><text x="56.5217%" y="95.50"></text></g><g><title>impl_trait_ref (494,013 samples, 0.21%)</title><rect x="56.3998%" y="85" width="0.2079%" height="15" fill="rgb(211,96,35)"/><text x="56.6498%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (410,992 samples, 0.17%)</title><rect x="56.4347%" y="69" width="0.1730%" height="15" fill="rgb(253,215,40)"/><text x="56.6847%" y="79.50"></text></g><g><title>predicates_of (433,404 samples, 0.18%)</title><rect x="56.6331%" y="85" width="0.1824%" height="15" fill="rgb(211,81,21)"/><text x="56.8831%" y="95.50"></text></g><g><title>predicates_defined_on (253,422 samples, 0.11%)</title><rect x="56.7089%" y="69" width="0.1067%" height="15" fill="rgb(208,190,38)"/><text x="56.9589%" y="79.50"></text></g><g><title>specializes (875,924 samples, 0.37%)</title><rect x="56.8155%" y="85" width="0.3686%" height="15" fill="rgb(235,213,38)"/><text x="57.0655%" y="95.50"></text></g><g><title>param_env (521,488 samples, 0.22%)</title><rect x="56.9647%" y="69" width="0.2195%" height="15" fill="rgb(237,122,38)"/><text x="57.2147%" y="79.50"></text></g><g><title>trait_impls_of (395,634 samples, 0.17%)</title><rect x="57.1918%" y="85" width="0.1665%" height="15" fill="rgb(244,218,35)"/><text x="57.4418%" y="95.50"></text></g><g><title>evaluate_obligation (7,604,875 samples, 3.20%)</title><rect x="54.1668%" y="101" width="3.2005%" height="15" fill="rgb(240,68,47)"/><text x="54.4168%" y="111.50">eva..</text></g><g><title>item_attrs (340,223 samples, 0.14%)</title><rect x="57.6814%" y="101" width="0.1432%" height="15" fill="rgb(210,16,53)"/><text x="57.9314%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (329,403 samples, 0.14%)</title><rect x="57.6860%" y="85" width="0.1386%" height="15" fill="rgb(235,124,12)"/><text x="57.9360%" y="95.50"></text></g><g><title>method_autoderef_steps (603,742 samples, 0.25%)</title><rect x="57.8673%" y="101" width="0.2541%" height="15" fill="rgb(224,169,11)"/><text x="58.1173%" y="111.50"></text></g><g><title>evaluate_obligation (269,225 samples, 0.11%)</title><rect x="58.0081%" y="85" width="0.1133%" height="15" fill="rgb(250,166,2)"/><text x="58.2581%" y="95.50"></text></g><g><title>param_env (272,522 samples, 0.11%)</title><rect x="58.1906%" y="101" width="0.1147%" height="15" fill="rgb(242,216,29)"/><text x="58.4406%" y="111.50"></text></g><g><title>predicates_of (504,621 samples, 0.21%)</title><rect x="58.3251%" y="101" width="0.2124%" height="15" fill="rgb(230,116,27)"/><text x="58.5751%" y="111.50"></text></g><g><title>predicates_defined_on (353,455 samples, 0.15%)</title><rect x="58.3888%" y="85" width="0.1488%" height="15" fill="rgb(228,99,48)"/><text x="58.6388%" y="95.50"></text></g><g><title>evaluate_obligation (535,269 samples, 0.23%)</title><rect x="60.1491%" y="85" width="0.2253%" height="15" fill="rgb(253,11,6)"/><text x="60.3991%" y="95.50"></text></g><g><title>typeck (4,807,034 samples, 2.02%)</title><rect x="58.6459%" y="101" width="2.0231%" height="15" fill="rgb(247,143,39)"/><text x="58.8959%" y="111.50">t..</text></g><g><title>item_bodies_checking (66,761,378 samples, 28.10%)</title><rect x="32.6060%" y="149" width="28.0967%" height="15" fill="rgb(236,97,10)"/><text x="32.8560%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (66,757,118 samples, 28.09%)</title><rect x="32.6078%" y="133" width="28.0949%" height="15" fill="rgb(233,208,19)"/><text x="32.8578%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (66,508,106 samples, 27.99%)</title><rect x="32.7126%" y="117" width="27.9901%" height="15" fill="rgb(216,164,2)"/><text x="32.9626%" y="127.50">typeck</text></g><g><title>item_types_checking (4,851,175 samples, 2.04%)</title><rect x="60.7027%" y="149" width="2.0416%" height="15" fill="rgb(220,129,5)"/><text x="60.9527%" y="159.50">i..</text></g><g><title>check_mod_item_types (4,839,315 samples, 2.04%)</title><rect x="60.7077%" y="133" width="2.0366%" height="15" fill="rgb(242,17,10)"/><text x="60.9577%" y="143.50">c..</text></g><g><title>fn_sig (709,549 samples, 0.30%)</title><rect x="63.0710%" y="117" width="0.2986%" height="15" fill="rgb(242,107,0)"/><text x="63.3210%" y="127.50"></text></g><g><title>is_late_bound_map (809,125 samples, 0.34%)</title><rect x="63.5288%" y="101" width="0.3405%" height="15" fill="rgb(251,28,31)"/><text x="63.7788%" y="111.50"></text></g><g><title>resolve_lifetimes (743,285 samples, 0.31%)</title><rect x="63.5565%" y="85" width="0.3128%" height="15" fill="rgb(233,223,10)"/><text x="63.8065%" y="95.50"></text></g><g><title>named_region_map (426,334 samples, 0.18%)</title><rect x="63.8693%" y="101" width="0.1794%" height="15" fill="rgb(215,21,27)"/><text x="64.1193%" y="111.50"></text></g><g><title>resolve_lifetimes (373,734 samples, 0.16%)</title><rect x="63.8915%" y="85" width="0.1573%" height="15" fill="rgb(232,23,21)"/><text x="64.1415%" y="95.50"></text></g><g><title>generics_of (1,654,461 samples, 0.70%)</title><rect x="63.3696%" y="117" width="0.6963%" height="15" fill="rgb(244,5,23)"/><text x="63.6196%" y="127.50"></text></g><g><title>explicit_predicates_of (841,308 samples, 0.35%)</title><rect x="64.3095%" y="85" width="0.3541%" height="15" fill="rgb(226,81,46)"/><text x="64.5595%" y="95.50"></text></g><g><title>predicates_of (2,001,233 samples, 0.84%)</title><rect x="64.1298%" y="117" width="0.8422%" height="15" fill="rgb(247,70,30)"/><text x="64.3798%" y="127.50"></text></g><g><title>predicates_defined_on (1,837,221 samples, 0.77%)</title><rect x="64.1988%" y="101" width="0.7732%" height="15" fill="rgb(212,68,19)"/><text x="64.4488%" y="111.50"></text></g><g><title>inferred_outlives_of (732,778 samples, 0.31%)</title><rect x="64.6636%" y="85" width="0.3084%" height="15" fill="rgb(240,187,13)"/><text x="64.9136%" y="95.50"></text></g><g><title>inferred_outlives_crate (679,908 samples, 0.29%)</title><rect x="64.6859%" y="69" width="0.2861%" height="15" fill="rgb(223,113,26)"/><text x="64.9359%" y="79.50"></text></g><g><title>type_of (484,795 samples, 0.20%)</title><rect x="64.7680%" y="53" width="0.2040%" height="15" fill="rgb(206,192,2)"/><text x="65.0180%" y="63.50"></text></g><g><title>type_collecting (5,729,844 samples, 2.41%)</title><rect x="62.7462%" y="149" width="2.4114%" height="15" fill="rgb(241,108,4)"/><text x="62.9962%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (5,714,744 samples, 2.41%)</title><rect x="62.7525%" y="133" width="2.4051%" height="15" fill="rgb(247,173,49)"/><text x="63.0025%" y="143.50">co..</text></g><g><title>type_of (401,196 samples, 0.17%)</title><rect x="64.9888%" y="117" width="0.1688%" height="15" fill="rgb(224,114,35)"/><text x="65.2388%" y="127.50"></text></g><g><title>evaluate_obligation (1,009,424 samples, 0.42%)</title><rect x="67.8386%" y="117" width="0.4248%" height="15" fill="rgb(245,159,27)"/><text x="68.0886%" y="127.50"></text></g><g><title>implied_outlives_bounds (687,985 samples, 0.29%)</title><rect x="68.2711%" y="117" width="0.2895%" height="15" fill="rgb(245,172,44)"/><text x="68.5211%" y="127.50"></text></g><g><title>param_env (1,136,361 samples, 0.48%)</title><rect x="68.5606%" y="117" width="0.4782%" height="15" fill="rgb(236,23,11)"/><text x="68.8106%" y="127.50"></text></g><g><title>region_scope_tree (861,842 samples, 0.36%)</title><rect x="69.0580%" y="117" width="0.3627%" height="15" fill="rgb(205,117,38)"/><text x="69.3080%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,496,529 samples, 4.00%)</title><rect x="65.4272%" y="133" width="3.9966%" height="15" fill="rgb(237,72,25)"/><text x="65.6772%" y="143.50">chec..</text></g><g><title>evaluate_obligation (353,583 samples, 0.15%)</title><rect x="72.3431%" y="117" width="0.1488%" height="15" fill="rgb(244,70,9)"/><text x="72.5931%" y="127.50"></text></g><g><title>implied_outlives_bounds (443,884 samples, 0.19%)</title><rect x="72.5171%" y="117" width="0.1868%" height="15" fill="rgb(217,125,39)"/><text x="72.7671%" y="127.50"></text></g><g><title>object_safety_violations (317,244 samples, 0.13%)</title><rect x="72.7039%" y="117" width="0.1335%" height="15" fill="rgb(235,36,10)"/><text x="72.9539%" y="127.50"></text></g><g><title>param_env (972,864 samples, 0.41%)</title><rect x="72.8374%" y="117" width="0.4094%" height="15" fill="rgb(251,123,47)"/><text x="73.0874%" y="127.50"></text></g><g><title>check_item_well_formed (9,616,941 samples, 4.05%)</title><rect x="69.4238%" y="133" width="4.0473%" height="15" fill="rgb(221,13,13)"/><text x="69.6738%" y="143.50">chec..</text></g><g><title>analysis (174,713,557 samples, 73.53%)</title><rect x="0.4120%" y="181" width="73.5287%" height="15" fill="rgb(238,131,9)"/><text x="0.6620%" y="191.50">analysis</text></g><g><title>type_check_crate (106,121,809 samples, 44.66%)</title><rect x="29.2791%" y="165" width="44.6617%" height="15" fill="rgb(211,50,8)"/><text x="29.5291%" y="175.50">type_check_crate</text></g><g><title>wf_checking (20,854,123 samples, 8.78%)</title><rect x="65.1642%" y="149" width="8.7765%" height="15" fill="rgb(245,182,24)"/><text x="65.4142%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,115,792 samples, 0.47%)</title><rect x="73.4712%" y="133" width="0.4696%" height="15" fill="rgb(242,14,37)"/><text x="73.7212%" y="143.50"></text></g><g><title>codegen_crate (601,287 samples, 0.25%)</title><rect x="73.9451%" y="181" width="0.2531%" height="15" fill="rgb(246,228,12)"/><text x="74.1951%" y="191.50"></text></g><g><title>AST_validation (288,913 samples, 0.12%)</title><rect x="74.2931%" y="165" width="0.1216%" height="15" fill="rgb(213,55,15)"/><text x="74.5431%" y="175.50"></text></g><g><title>metadata_load_macro (284,354 samples, 0.12%)</title><rect x="89.8368%" y="133" width="0.1197%" height="15" fill="rgb(209,9,3)"/><text x="90.0868%" y="143.50"></text></g><g><title>metadata_register_crate (253,073 samples, 0.11%)</title><rect x="89.9565%" y="133" width="0.1065%" height="15" fill="rgb(230,59,30)"/><text x="90.2065%" y="143.50"></text></g><g><title>macro_expand_crate (38,117,137 samples, 16.04%)</title><rect x="74.5094%" y="165" width="16.0417%" height="15" fill="rgb(209,121,21)"/><text x="74.7594%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (38,103,317 samples, 16.04%)</title><rect x="74.5152%" y="149" width="16.0359%" height="15" fill="rgb(220,109,13)"/><text x="74.7652%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,159,924 samples, 0.49%)</title><rect x="90.0630%" y="133" width="0.4882%" height="15" fill="rgb(232,18,1)"/><text x="90.3130%" y="143.50"></text></g><g><title>late_resolve_crate (3,628,831 samples, 1.53%)</title><rect x="90.6712%" y="149" width="1.5272%" height="15" fill="rgb(215,41,42)"/><text x="90.9212%" y="159.50"></text></g><g><title>configure_and_expand (43,029,512 samples, 18.11%)</title><rect x="74.1982%" y="181" width="18.1091%" height="15" fill="rgb(224,123,36)"/><text x="74.4482%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,098,756 samples, 1.72%)</title><rect x="90.5823%" y="165" width="1.7250%" height="15" fill="rgb(240,125,3)"/><text x="90.8323%" y="175.50"></text></g><g><title>drop_ast (454,785 samples, 0.19%)</title><rect x="92.3073%" y="181" width="0.1914%" height="15" fill="rgb(205,98,50)"/><text x="92.5573%" y="191.50"></text></g><g><title>early_lint_checks (790,169 samples, 0.33%)</title><rect x="92.5066%" y="181" width="0.3325%" height="15" fill="rgb(205,185,37)"/><text x="92.7566%" y="191.50"></text></g><g><title>free_global_ctxt (3,167,896 samples, 1.33%)</title><rect x="92.8392%" y="181" width="1.3332%" height="15" fill="rgb(238,207,15)"/><text x="93.0892%" y="191.50"></text></g><g><title>generate_crate_metadata (3,282,446 samples, 1.38%)</title><rect x="94.1724%" y="181" width="1.3814%" height="15" fill="rgb(213,199,42)"/><text x="94.4224%" y="191.50"></text></g><g><title>hir_lowering (7,587,015 samples, 3.19%)</title><rect x="95.5538%" y="181" width="3.1930%" height="15" fill="rgb(235,201,11)"/><text x="95.8038%" y="191.50">hir..</text></g><g><title>parse_crate (984,371 samples, 0.41%)</title><rect x="98.7750%" y="181" width="0.4143%" height="15" fill="rgb(207,46,11)"/><text x="99.0250%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,166,533 samples, 0.49%)</title><rect x="99.2786%" y="181" width="0.4909%" height="15" fill="rgb(241,35,35)"/><text x="99.5286%" y="191.50"></text></g><g><title>all (237,612,583 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (237,612,583 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (435,705 samples, 0.18%)</title><rect x="99.8166%" y="181" width="0.1834%" height="15" fill="rgb(219,102,11)"/><text x="100.0666%" y="191.50"></text></g></svg></svg>