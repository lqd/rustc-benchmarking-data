<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (82,171 samples, 0.18%)</title><rect x="5.5377%" y="181" width="0.1850%" height="15" fill="rgb(227,0,7)"/><text x="5.7877%" y="191.50"></text></g><g><title>item_attrs (55,071 samples, 0.12%)</title><rect x="5.9346%" y="149" width="0.1240%" height="15" fill="rgb(217,0,24)"/><text x="6.1846%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (52,901 samples, 0.12%)</title><rect x="5.9395%" y="133" width="0.1191%" height="15" fill="rgb(221,193,54)"/><text x="6.1895%" y="143.50"></text></g><g><title>codegen_fn_attrs (80,691 samples, 0.18%)</title><rect x="5.8833%" y="165" width="0.1817%" height="15" fill="rgb(248,212,6)"/><text x="6.1333%" y="175.50"></text></g><g><title>is_copy_raw (45,311 samples, 0.10%)</title><rect x="6.7949%" y="117" width="0.1020%" height="15" fill="rgb(208,68,35)"/><text x="7.0449%" y="127.50"></text></g><g><title>param_env (51,360 samples, 0.12%)</title><rect x="6.8969%" y="117" width="0.1156%" height="15" fill="rgb(232,128,0)"/><text x="7.1469%" y="127.50"></text></g><g><title>adt_drop_tys (151,042 samples, 0.34%)</title><rect x="6.6744%" y="133" width="0.3400%" height="15" fill="rgb(207,160,47)"/><text x="6.9244%" y="143.50"></text></g><g><title>needs_drop_raw (260,554 samples, 0.59%)</title><rect x="6.6413%" y="149" width="0.5866%" height="15" fill="rgb(228,23,34)"/><text x="6.8913%" y="159.50"></text></g><g><title>is_copy_raw (94,792 samples, 0.21%)</title><rect x="7.0144%" y="133" width="0.2134%" height="15" fill="rgb(218,30,26)"/><text x="7.2644%" y="143.50"></text></g><g><title>evaluate_obligation (65,731 samples, 0.15%)</title><rect x="7.0799%" y="117" width="0.1480%" height="15" fill="rgb(220,122,19)"/><text x="7.3299%" y="127.50"></text></g><g><title>impl_parent (206,915 samples, 0.47%)</title><rect x="8.0177%" y="117" width="0.4658%" height="15" fill="rgb(250,228,42)"/><text x="8.2677%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (146,424 samples, 0.33%)</title><rect x="8.1539%" y="101" width="0.3296%" height="15" fill="rgb(240,193,28)"/><text x="8.4039%" y="111.50"></text></g><g><title>specialization_graph_of (1,072,833 samples, 2.42%)</title><rect x="7.4429%" y="133" width="2.4151%" height="15" fill="rgb(216,20,37)"/><text x="7.6929%" y="143.50">sp..</text></g><g><title>impl_trait_ref (610,575 samples, 1.37%)</title><rect x="8.4835%" y="117" width="1.3745%" height="15" fill="rgb(206,188,39)"/><text x="8.7335%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (552,225 samples, 1.24%)</title><rect x="8.6149%" y="101" width="1.2432%" height="15" fill="rgb(217,207,13)"/><text x="8.8649%" y="111.50"></text></g><g><title>resolve_instance (1,190,533 samples, 2.68%)</title><rect x="7.2278%" y="149" width="2.6801%" height="15" fill="rgb(231,73,38)"/><text x="7.4778%" y="159.50">re..</text></g><g><title>thir_body (102,740 samples, 0.23%)</title><rect x="9.9216%" y="149" width="0.2313%" height="15" fill="rgb(225,20,46)"/><text x="10.1716%" y="159.50"></text></g><g><title>mir_const (2,203,034 samples, 4.96%)</title><rect x="5.2097%" y="197" width="4.9594%" height="15" fill="rgb(210,31,41)"/><text x="5.4597%" y="207.50">mir_co..</text></g><g><title>unsafety_check_result (1,975,172 samples, 4.45%)</title><rect x="5.7227%" y="181" width="4.4465%" height="15" fill="rgb(221,200,47)"/><text x="5.9727%" y="191.50">unsaf..</text></g><g><title>mir_built (1,823,151 samples, 4.10%)</title><rect x="6.0649%" y="165" width="4.1042%" height="15" fill="rgb(226,26,5)"/><text x="6.3149%" y="175.50">mir_..</text></g><g><title>mir_promoted (2,317,275 samples, 5.22%)</title><rect x="4.9690%" y="213" width="5.2166%" height="15" fill="rgb(249,33,26)"/><text x="5.2190%" y="223.50">mir_pr..</text></g><g><title>type_op_normalize_predicate (65,191 samples, 0.15%)</title><rect x="10.2784%" y="213" width="0.1468%" height="15" fill="rgb(235,183,28)"/><text x="10.5284%" y="223.50"></text></g><g><title>type_op_prove_predicate (190,502 samples, 0.43%)</title><rect x="10.4252%" y="213" width="0.4289%" height="15" fill="rgb(221,5,38)"/><text x="10.6752%" y="223.50"></text></g><g><title>MIR_borrow_checking (3,672,381 samples, 8.27%)</title><rect x="2.6013%" y="245" width="8.2672%" height="15" fill="rgb(247,18,42)"/><text x="2.8513%" y="255.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (3,663,231 samples, 8.25%)</title><rect x="2.6219%" y="229" width="8.2466%" height="15" fill="rgb(241,131,45)"/><text x="2.8719%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (113,691 samples, 0.26%)</title><rect x="10.8776%" y="245" width="0.2559%" height="15" fill="rgb(249,31,29)"/><text x="11.1276%" y="255.50"></text></g><g><title>get_lang_items (76,071 samples, 0.17%)</title><rect x="11.6005%" y="197" width="0.1712%" height="15" fill="rgb(225,111,53)"/><text x="11.8505%" y="207.50"></text></g><g><title>codegen_fn_attrs (198,202 samples, 0.45%)</title><rect x="11.4350%" y="213" width="0.4462%" height="15" fill="rgb(238,160,17)"/><text x="11.6850%" y="223.50"></text></g><g><title>check_mod_attrs (294,813 samples, 0.66%)</title><rect x="11.2180%" y="229" width="0.6637%" height="15" fill="rgb(214,148,48)"/><text x="11.4680%" y="239.50"></text></g><g><title>lookup_deprecation_entry (72,190 samples, 0.16%)</title><rect x="12.1965%" y="213" width="0.1625%" height="15" fill="rgb(232,36,49)"/><text x="12.4465%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (220,643 samples, 0.50%)</title><rect x="12.0279%" y="229" width="0.4967%" height="15" fill="rgb(209,103,24)"/><text x="12.2779%" y="239.50"></text></g><g><title>misc_checking_1 (657,478 samples, 1.48%)</title><rect x="11.1344%" y="245" width="1.4801%" height="15" fill="rgb(229,88,8)"/><text x="11.3844%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (74,770 samples, 0.17%)</title><rect x="12.6177%" y="229" width="0.1683%" height="15" fill="rgb(213,181,19)"/><text x="12.8677%" y="239.50"></text></g><g><title>check_mod_liveness (60,260 samples, 0.14%)</title><rect x="12.6504%" y="213" width="0.1357%" height="15" fill="rgb(254,191,54)"/><text x="12.9004%" y="223.50"></text></g><g><title>misc_checking_2 (171,191 samples, 0.39%)</title><rect x="12.6145%" y="245" width="0.3854%" height="15" fill="rgb(241,83,37)"/><text x="12.8645%" y="255.50"></text></g><g><title>match_checking (94,981 samples, 0.21%)</title><rect x="12.7860%" y="229" width="0.2138%" height="15" fill="rgb(233,36,39)"/><text x="13.0360%" y="239.50"></text></g><g><title>check_match (91,491 samples, 0.21%)</title><rect x="12.7939%" y="213" width="0.2060%" height="15" fill="rgb(226,3,54)"/><text x="13.0439%" y="223.50"></text></g><g><title>death_checking (45,970 samples, 0.10%)</title><rect x="13.0699%" y="229" width="0.1035%" height="15" fill="rgb(245,192,40)"/><text x="13.3199%" y="239.50"></text></g><g><title>param_env (62,661 samples, 0.14%)</title><rect x="13.3026%" y="197" width="0.1411%" height="15" fill="rgb(238,167,29)"/><text x="13.5526%" y="207.50"></text></g><g><title>crate_lints (119,952 samples, 0.27%)</title><rect x="13.1761%" y="213" width="0.2700%" height="15" fill="rgb(232,182,51)"/><text x="13.4261%" y="223.50"></text></g><g><title>lint_checking (165,242 samples, 0.37%)</title><rect x="13.1734%" y="229" width="0.3720%" height="15" fill="rgb(231,60,39)"/><text x="13.4234%" y="239.50"></text></g><g><title>privacy_checking_modules (55,531 samples, 0.13%)</title><rect x="13.6386%" y="229" width="0.1250%" height="15" fill="rgb(208,69,12)"/><text x="13.8886%" y="239.50"></text></g><g><title>check_mod_privacy (54,331 samples, 0.12%)</title><rect x="13.6413%" y="213" width="0.1223%" height="15" fill="rgb(235,93,37)"/><text x="13.8913%" y="223.50"></text></g><g><title>misc_checking_3 (349,664 samples, 0.79%)</title><rect x="12.9999%" y="245" width="0.7872%" height="15" fill="rgb(213,116,39)"/><text x="13.2499%" y="255.50"></text></g><g><title>associated_item (247,564 samples, 0.56%)</title><rect x="16.6215%" y="165" width="0.5573%" height="15" fill="rgb(222,207,29)"/><text x="16.8715%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (185,154 samples, 0.42%)</title><rect x="16.7620%" y="149" width="0.4168%" height="15" fill="rgb(206,96,30)"/><text x="17.0120%" y="159.50"></text></g><g><title>associated_items (348,825 samples, 0.79%)</title><rect x="16.4186%" y="181" width="0.7853%" height="15" fill="rgb(218,138,4)"/><text x="16.6686%" y="191.50"></text></g><g><title>impl_parent (129,302 samples, 0.29%)</title><rect x="17.8061%" y="85" width="0.2911%" height="15" fill="rgb(250,191,14)"/><text x="18.0561%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (89,801 samples, 0.20%)</title><rect x="17.8950%" y="69" width="0.2022%" height="15" fill="rgb(239,60,40)"/><text x="18.1450%" y="79.50"></text></g><g><title>impl_trait_ref (479,976 samples, 1.08%)</title><rect x="18.0972%" y="85" width="1.0805%" height="15" fill="rgb(206,27,48)"/><text x="18.3472%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (436,585 samples, 0.98%)</title><rect x="18.1949%" y="69" width="0.9828%" height="15" fill="rgb(225,35,8)"/><text x="18.4449%" y="79.50"></text></g><g><title>coherent_trait (833,579 samples, 1.88%)</title><rect x="17.4318%" y="117" width="1.8765%" height="15" fill="rgb(250,213,24)"/><text x="17.6818%" y="127.50">c..</text></g><g><title>specialization_graph_of (828,229 samples, 1.86%)</title><rect x="17.4438%" y="101" width="1.8645%" height="15" fill="rgb(247,123,22)"/><text x="17.6938%" y="111.50">s..</text></g><g><title>trait_impls_of (58,021 samples, 0.13%)</title><rect x="19.1777%" y="85" width="0.1306%" height="15" fill="rgb(231,138,38)"/><text x="19.4277%" y="95.50"></text></g><g><title>adt_destructor (852,419 samples, 1.92%)</title><rect x="17.4030%" y="149" width="1.9190%" height="15" fill="rgb(231,145,46)"/><text x="17.6530%" y="159.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (850,109 samples, 1.91%)</title><rect x="17.4082%" y="133" width="1.9138%" height="15" fill="rgb(251,118,11)"/><text x="17.6582%" y="143.50">m..</text></g><g><title>adt_def (52,871 samples, 0.12%)</title><rect x="19.4778%" y="101" width="0.1190%" height="15" fill="rgb(217,147,25)"/><text x="19.7278%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (51,961 samples, 0.12%)</title><rect x="19.4799%" y="85" width="0.1170%" height="15" fill="rgb(247,81,37)"/><text x="19.7299%" y="95.50"></text></g><g><title>adt_def (50,500 samples, 0.11%)</title><rect x="19.6211%" y="85" width="0.1137%" height="15" fill="rgb(209,12,38)"/><text x="19.8711%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (50,050 samples, 0.11%)</title><rect x="19.6221%" y="69" width="0.1127%" height="15" fill="rgb(227,1,9)"/><text x="19.8721%" y="79.50"></text></g><g><title>item_attrs (47,180 samples, 0.11%)</title><rect x="19.6286%" y="53" width="0.1062%" height="15" fill="rgb(248,47,43)"/><text x="19.8786%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,800 samples, 0.11%)</title><rect x="19.6295%" y="37" width="0.1054%" height="15" fill="rgb(221,10,30)"/><text x="19.8795%" y="47.50"></text></g><g><title>adt_dtorck_constraint (63,031 samples, 0.14%)</title><rect x="19.6138%" y="101" width="0.1419%" height="15" fill="rgb(210,229,1)"/><text x="19.8638%" y="111.50"></text></g><g><title>adt_dtorck_constraint (152,652 samples, 0.34%)</title><rect x="19.4514%" y="117" width="0.3436%" height="15" fill="rgb(222,148,37)"/><text x="19.7014%" y="127.50"></text></g><g><title>adt_dtorck_constraint (218,622 samples, 0.49%)</title><rect x="19.3560%" y="133" width="0.4922%" height="15" fill="rgb(234,67,33)"/><text x="19.6060%" y="143.50"></text></g><g><title>adt_dtorck_constraint (235,792 samples, 0.53%)</title><rect x="19.3220%" y="149" width="0.5308%" height="15" fill="rgb(247,98,35)"/><text x="19.5720%" y="159.50"></text></g><g><title>dropck_outlives (1,185,643 samples, 2.67%)</title><rect x="17.2201%" y="181" width="2.6691%" height="15" fill="rgb(247,138,52)"/><text x="17.4701%" y="191.50">dr..</text></g><g><title>adt_dtorck_constraint (1,138,922 samples, 2.56%)</title><rect x="17.3253%" y="165" width="2.5639%" height="15" fill="rgb(213,79,30)"/><text x="17.5753%" y="175.50">ad..</text></g><g><title>evaluate_obligation (625,138 samples, 1.41%)</title><rect x="19.8892%" y="181" width="1.4073%" height="15" fill="rgb(246,177,23)"/><text x="20.1392%" y="191.50"></text></g><g><title>trait_impls_of (422,414 samples, 0.95%)</title><rect x="20.3456%" y="165" width="0.9509%" height="15" fill="rgb(230,62,27)"/><text x="20.5956%" y="175.50"></text></g><g><title>implementations_of_trait (101,031 samples, 0.23%)</title><rect x="21.0691%" y="149" width="0.2274%" height="15" fill="rgb(216,154,8)"/><text x="21.3191%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (85,471 samples, 0.19%)</title><rect x="21.1041%" y="133" width="0.1924%" height="15" fill="rgb(244,35,45)"/><text x="21.3541%" y="143.50"></text></g><g><title>fn_sig (65,022 samples, 0.15%)</title><rect x="21.3078%" y="181" width="0.1464%" height="15" fill="rgb(251,115,12)"/><text x="21.5578%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (59,582 samples, 0.13%)</title><rect x="21.3201%" y="165" width="0.1341%" height="15" fill="rgb(240,54,50)"/><text x="21.5701%" y="175.50"></text></g><g><title>evaluate_obligation (109,471 samples, 0.25%)</title><rect x="21.8380%" y="165" width="0.2464%" height="15" fill="rgb(233,84,52)"/><text x="22.0880%" y="175.50"></text></g><g><title>method_autoderef_steps (225,752 samples, 0.51%)</title><rect x="21.6630%" y="181" width="0.5082%" height="15" fill="rgb(207,117,47)"/><text x="21.9130%" y="191.50"></text></g><g><title>predicates_of (68,891 samples, 0.16%)</title><rect x="22.1843%" y="181" width="0.1551%" height="15" fill="rgb(249,43,39)"/><text x="22.4343%" y="191.50"></text></g><g><title>associated_item (177,242 samples, 0.40%)</title><rect x="24.5042%" y="149" width="0.3990%" height="15" fill="rgb(209,38,44)"/><text x="24.7542%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (150,542 samples, 0.34%)</title><rect x="24.5643%" y="133" width="0.3389%" height="15" fill="rgb(236,212,23)"/><text x="24.8143%" y="143.50"></text></g><g><title>associated_items (242,722 samples, 0.55%)</title><rect x="24.3950%" y="165" width="0.5464%" height="15" fill="rgb(242,79,21)"/><text x="24.6450%" y="175.50"></text></g><g><title>dropck_outlives (62,611 samples, 0.14%)</title><rect x="24.9741%" y="165" width="0.1409%" height="15" fill="rgb(211,96,35)"/><text x="25.2241%" y="175.50"></text></g><g><title>adt_dtorck_constraint (47,300 samples, 0.11%)</title><rect x="25.0085%" y="149" width="0.1065%" height="15" fill="rgb(253,215,40)"/><text x="25.2585%" y="159.50"></text></g><g><title>evaluate_obligation (286,542 samples, 0.65%)</title><rect x="25.1150%" y="165" width="0.6451%" height="15" fill="rgb(211,81,21)"/><text x="25.3650%" y="175.50"></text></g><g><title>trait_impls_of (124,690 samples, 0.28%)</title><rect x="25.4794%" y="149" width="0.2807%" height="15" fill="rgb(208,190,38)"/><text x="25.7294%" y="159.50"></text></g><g><title>is_copy_raw (244,693 samples, 0.55%)</title><rect x="25.9649%" y="165" width="0.5508%" height="15" fill="rgb(235,213,38)"/><text x="26.2149%" y="175.50"></text></g><g><title>evaluate_obligation (234,083 samples, 0.53%)</title><rect x="25.9888%" y="149" width="0.5270%" height="15" fill="rgb(237,122,38)"/><text x="26.2388%" y="159.50"></text></g><g><title>trait_impls_of (178,172 samples, 0.40%)</title><rect x="26.1147%" y="133" width="0.4011%" height="15" fill="rgb(244,218,35)"/><text x="26.3647%" y="143.50"></text></g><g><title>lint_levels (49,041 samples, 0.11%)</title><rect x="26.5245%" y="165" width="0.1104%" height="15" fill="rgb(240,68,47)"/><text x="26.7745%" y="175.50"></text></g><g><title>predicates_of (91,972 samples, 0.21%)</title><rect x="26.7261%" y="165" width="0.2070%" height="15" fill="rgb(210,16,53)"/><text x="26.9761%" y="175.50"></text></g><g><title>predicates_defined_on (72,501 samples, 0.16%)</title><rect x="26.7700%" y="149" width="0.1632%" height="15" fill="rgb(235,124,12)"/><text x="27.0200%" y="159.50"></text></g><g><title>typeck (1,964,442 samples, 4.42%)</title><rect x="22.5648%" y="181" width="4.4223%" height="15" fill="rgb(224,169,11)"/><text x="22.8148%" y="191.50">typeck</text></g><g><title>item_bodies_checking (5,800,714 samples, 13.06%)</title><rect x="13.9829%" y="229" width="13.0585%" height="15" fill="rgb(250,166,2)"/><text x="14.2329%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (5,798,914 samples, 13.05%)</title><rect x="13.9870%" y="213" width="13.0544%" height="15" fill="rgb(242,216,29)"/><text x="14.2370%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (5,790,014 samples, 13.03%)</title><rect x="14.0070%" y="197" width="13.0344%" height="15" fill="rgb(230,116,27)"/><text x="14.2570%" y="207.50">typeck</text></g><g><title>late_bound_vars_map (98,052 samples, 0.22%)</title><rect x="27.4213%" y="181" width="0.2207%" height="15" fill="rgb(228,99,48)"/><text x="27.6713%" y="191.50"></text></g><g><title>resolve_lifetimes (83,822 samples, 0.19%)</title><rect x="27.4534%" y="165" width="0.1887%" height="15" fill="rgb(253,11,6)"/><text x="27.7034%" y="175.50"></text></g><g><title>fn_sig (247,903 samples, 0.56%)</title><rect x="27.2259%" y="197" width="0.5581%" height="15" fill="rgb(247,143,39)"/><text x="27.4759%" y="207.50"></text></g><g><title>type_of (63,041 samples, 0.14%)</title><rect x="27.6421%" y="181" width="0.1419%" height="15" fill="rgb(236,97,10)"/><text x="27.8921%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (59,681 samples, 0.13%)</title><rect x="27.6496%" y="165" width="0.1344%" height="15" fill="rgb(233,208,19)"/><text x="27.8996%" y="175.50"></text></g><g><title>generics_of (73,090 samples, 0.16%)</title><rect x="27.7840%" y="197" width="0.1645%" height="15" fill="rgb(216,164,2)"/><text x="28.0340%" y="207.50"></text></g><g><title>predicates_of (44,430 samples, 0.10%)</title><rect x="27.9485%" y="197" width="0.1000%" height="15" fill="rgb(220,129,5)"/><text x="28.1985%" y="207.50"></text></g><g><title>type_collecting (462,725 samples, 1.04%)</title><rect x="27.0550%" y="229" width="1.0417%" height="15" fill="rgb(242,17,10)"/><text x="27.3050%" y="239.50"></text></g><g><title>collect_mod_item_types (449,695 samples, 1.01%)</title><rect x="27.0843%" y="213" width="1.0123%" height="15" fill="rgb(242,107,0)"/><text x="27.3343%" y="223.50"></text></g><g><title>adt_def (90,542 samples, 0.20%)</title><rect x="29.5185%" y="165" width="0.2038%" height="15" fill="rgb(251,28,31)"/><text x="29.7685%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (87,662 samples, 0.20%)</title><rect x="29.5250%" y="149" width="0.1973%" height="15" fill="rgb(233,223,10)"/><text x="29.7750%" y="159.50"></text></g><g><title>item_attrs (63,481 samples, 0.14%)</title><rect x="29.5794%" y="133" width="0.1429%" height="15" fill="rgb(215,21,27)"/><text x="29.8294%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,741 samples, 0.14%)</title><rect x="29.5856%" y="117" width="0.1367%" height="15" fill="rgb(232,23,21)"/><text x="29.8356%" y="127.50"></text></g><g><title>adt_def (161,683 samples, 0.36%)</title><rect x="29.8220%" y="133" width="0.3640%" height="15" fill="rgb(244,5,23)"/><text x="30.0720%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (160,013 samples, 0.36%)</title><rect x="29.8258%" y="117" width="0.3602%" height="15" fill="rgb(226,81,46)"/><text x="30.0758%" y="127.50"></text></g><g><title>item_attrs (113,023 samples, 0.25%)</title><rect x="29.9316%" y="101" width="0.2544%" height="15" fill="rgb(247,70,30)"/><text x="30.1816%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,483 samples, 0.25%)</title><rect x="29.9350%" y="85" width="0.2510%" height="15" fill="rgb(212,68,19)"/><text x="30.1850%" y="95.50"></text></g><g><title>adt_sized_constraint (178,903 samples, 0.40%)</title><rect x="29.8049%" y="149" width="0.4027%" height="15" fill="rgb(240,187,13)"/><text x="30.0549%" y="159.50"></text></g><g><title>adt_sized_constraint (260,043 samples, 0.59%)</title><rect x="29.7223%" y="165" width="0.5854%" height="15" fill="rgb(223,113,26)"/><text x="29.9723%" y="175.50"></text></g><g><title>type_of (44,430 samples, 0.10%)</title><rect x="30.2077%" y="149" width="0.1000%" height="15" fill="rgb(206,192,2)"/><text x="30.4577%" y="159.50"></text></g><g><title>adt_sized_constraint (389,615 samples, 0.88%)</title><rect x="29.4692%" y="181" width="0.8771%" height="15" fill="rgb(241,108,4)"/><text x="29.7192%" y="191.50"></text></g><g><title>evaluate_obligation (631,237 samples, 1.42%)</title><rect x="29.0668%" y="197" width="1.4210%" height="15" fill="rgb(247,173,49)"/><text x="29.3168%" y="207.50"></text></g><g><title>trait_impls_of (44,771 samples, 0.10%)</title><rect x="30.3871%" y="181" width="0.1008%" height="15" fill="rgb(224,114,35)"/><text x="30.6371%" y="191.50"></text></g><g><title>implied_outlives_bounds (59,670 samples, 0.13%)</title><rect x="30.4879%" y="197" width="0.1343%" height="15" fill="rgb(245,159,27)"/><text x="30.7379%" y="207.50"></text></g><g><title>param_env (218,212 samples, 0.49%)</title><rect x="30.6222%" y="197" width="0.4912%" height="15" fill="rgb(245,172,44)"/><text x="30.8722%" y="207.50"></text></g><g><title>explicit_predicates_of (52,021 samples, 0.12%)</title><rect x="31.1624%" y="165" width="0.1171%" height="15" fill="rgb(236,23,11)"/><text x="31.4124%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (47,181 samples, 0.11%)</title><rect x="31.1733%" y="149" width="0.1062%" height="15" fill="rgb(205,117,38)"/><text x="31.4233%" y="159.50"></text></g><g><title>predicates_of (95,372 samples, 0.21%)</title><rect x="31.1134%" y="197" width="0.2147%" height="15" fill="rgb(237,72,25)"/><text x="31.3634%" y="207.50"></text></g><g><title>predicates_defined_on (84,062 samples, 0.19%)</title><rect x="31.1389%" y="181" width="0.1892%" height="15" fill="rgb(244,70,9)"/><text x="31.3889%" y="191.50"></text></g><g><title>analysis (12,954,345 samples, 29.16%)</title><rect x="2.2642%" y="261" width="29.1626%" height="15" fill="rgb(217,125,39)"/><text x="2.5142%" y="271.50">analysis</text></g><g><title>type_check_crate (7,835,777 samples, 17.64%)</title><rect x="13.7870%" y="245" width="17.6398%" height="15" fill="rgb(235,36,10)"/><text x="14.0370%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,478,456 samples, 3.33%)</title><rect x="28.0985%" y="229" width="3.3283%" height="15" fill="rgb(251,123,47)"/><text x="28.3485%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (1,447,486 samples, 3.26%)</title><rect x="28.1682%" y="213" width="3.2586%" height="15" fill="rgb(221,13,13)"/><text x="28.4182%" y="223.50">che..</text></g><g><title>codegen_crate (531,435 samples, 1.20%)</title><rect x="31.4503%" y="261" width="1.1964%" height="15" fill="rgb(238,131,9)"/><text x="31.7003%" y="271.50"></text></g><g><title>AST_validation (152,272 samples, 0.34%)</title><rect x="33.1973%" y="245" width="0.3428%" height="15" fill="rgb(211,50,8)"/><text x="33.4473%" y="255.50"></text></g><g><title>complete_gated_feature_checking (44,981 samples, 0.10%)</title><rect x="33.5401%" y="245" width="0.1013%" height="15" fill="rgb(245,182,24)"/><text x="33.7901%" y="255.50"></text></g><g><title>crate_injection (84,501 samples, 0.19%)</title><rect x="33.6414%" y="245" width="0.1902%" height="15" fill="rgb(242,14,37)"/><text x="33.8914%" y="255.50"></text></g><g><title>metadata_load_macro (242,693 samples, 0.55%)</title><rect x="61.0636%" y="213" width="0.5463%" height="15" fill="rgb(246,228,12)"/><text x="61.3136%" y="223.50"></text></g><g><title>metadata_register_crate (2,684,319 samples, 6.04%)</title><rect x="61.6100%" y="213" width="6.0429%" height="15" fill="rgb(213,55,15)"/><text x="61.8600%" y="223.50">metadata..</text></g><g><title>metadata_register_crate (985,390 samples, 2.22%)</title><rect x="65.4346%" y="197" width="2.2183%" height="15" fill="rgb(209,9,3)"/><text x="65.6846%" y="207.50">m..</text></g><g><title>metadata_register_crate (76,550 samples, 0.17%)</title><rect x="67.4805%" y="181" width="0.1723%" height="15" fill="rgb(230,59,30)"/><text x="67.7305%" y="191.50"></text></g><g><title>macro_expand_crate (15,100,668 samples, 33.99%)</title><rect x="33.8316%" y="245" width="33.9944%" height="15" fill="rgb(209,121,21)"/><text x="34.0816%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (15,084,358 samples, 33.96%)</title><rect x="33.8683%" y="229" width="33.9577%" height="15" fill="rgb(220,109,13)"/><text x="34.1183%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (76,901 samples, 0.17%)</title><rect x="67.6529%" y="213" width="0.1731%" height="15" fill="rgb(232,18,1)"/><text x="67.9029%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (124,961 samples, 0.28%)</title><rect x="67.8378%" y="245" width="0.2813%" height="15" fill="rgb(215,41,42)"/><text x="68.0878%" y="255.50"></text></g><g><title>finalize_macro_resolutions (517,226 samples, 1.16%)</title><rect x="68.2374%" y="229" width="1.1644%" height="15" fill="rgb(224,123,36)"/><text x="68.4874%" y="239.50"></text></g><g><title>late_resolve_crate (8,455,275 samples, 19.03%)</title><rect x="69.4017%" y="229" width="19.0344%" height="15" fill="rgb(240,125,3)"/><text x="69.6517%" y="239.50">late_resolve_crate</text></g><g><title>configure_and_expand (24,828,206 samples, 55.89%)</title><rect x="32.6466%" y="261" width="55.8929%" height="15" fill="rgb(205,98,50)"/><text x="32.8966%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (9,070,931 samples, 20.42%)</title><rect x="68.1191%" y="245" width="20.4203%" height="15" fill="rgb(205,185,37)"/><text x="68.3691%" y="255.50">resolve_crate</text></g><g><title>drop_ast (66,941 samples, 0.15%)</title><rect x="88.5395%" y="261" width="0.1507%" height="15" fill="rgb(238,207,15)"/><text x="88.7895%" y="271.50"></text></g><g><title>early_lint_checks (182,522 samples, 0.41%)</title><rect x="88.7249%" y="261" width="0.4109%" height="15" fill="rgb(213,199,42)"/><text x="88.9749%" y="271.50"></text></g><g><title>free_global_ctxt (1,930,231 samples, 4.35%)</title><rect x="89.1358%" y="261" width="4.3453%" height="15" fill="rgb(235,201,11)"/><text x="89.3858%" y="271.50">free_..</text></g><g><title>crate_hash (73,452 samples, 0.17%)</title><rect x="93.9561%" y="245" width="0.1654%" height="15" fill="rgb(207,46,11)"/><text x="94.2061%" y="255.50"></text></g><g><title>generate_crate_metadata (353,104 samples, 0.79%)</title><rect x="93.4811%" y="261" width="0.7949%" height="15" fill="rgb(241,35,35)"/><text x="93.7311%" y="271.50"></text></g><g><title>hir_lowering (688,877 samples, 1.55%)</title><rect x="94.2760%" y="261" width="1.5508%" height="15" fill="rgb(243,32,47)"/><text x="94.5260%" y="271.50"></text></g><g><title>link (45,390 samples, 0.10%)</title><rect x="95.8268%" y="261" width="0.1022%" height="15" fill="rgb(247,202,23)"/><text x="96.0768%" y="271.50"></text></g><g><title>parse_crate (688,097 samples, 1.55%)</title><rect x="95.9289%" y="261" width="1.5490%" height="15" fill="rgb(219,102,11)"/><text x="96.1789%" y="271.50"></text></g><g><title>prepare_outputs (311,553 samples, 0.70%)</title><rect x="97.5010%" y="261" width="0.7014%" height="15" fill="rgb(243,110,44)"/><text x="97.7510%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (378,935 samples, 0.85%)</title><rect x="98.2023%" y="261" width="0.8531%" height="15" fill="rgb(222,74,54)"/><text x="98.4523%" y="271.50"></text></g><g><title>setup_global_ctxt (145,042 samples, 0.33%)</title><rect x="99.0793%" y="261" width="0.3265%" height="15" fill="rgb(216,99,12)"/><text x="99.3293%" y="271.50"></text></g><g><title>all (44,421,074 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (44,421,074 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (263,933 samples, 0.59%)</title><rect x="99.4058%" y="261" width="0.5942%" height="15" fill="rgb(213,25,53)"/><text x="99.6558%" y="271.50"></text></g></svg></svg>