<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (2,433,498 samples, 0.16%)</title><rect x="13.3107%" y="197" width="0.1648%" height="15" fill="rgb(227,0,7)"/><text x="13.5607%" y="207.50"></text></g><g><title>mir_borrowck_const_arg (1,543,738 samples, 0.10%)</title><rect x="13.6439%" y="197" width="0.1046%" height="15" fill="rgb(217,0,24)"/><text x="13.8939%" y="207.50"></text></g><g><title>param_env (3,624,385 samples, 0.25%)</title><rect x="15.2172%" y="165" width="0.2455%" height="15" fill="rgb(221,193,54)"/><text x="15.4672%" y="175.50"></text></g><g><title>item_attrs (2,758,121 samples, 0.19%)</title><rect x="16.0004%" y="133" width="0.1868%" height="15" fill="rgb(248,212,6)"/><text x="16.2504%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,655,749 samples, 0.18%)</title><rect x="16.0074%" y="117" width="0.1799%" height="15" fill="rgb(208,68,35)"/><text x="16.2574%" y="127.50"></text></g><g><title>codegen_fn_attrs (3,955,277 samples, 0.27%)</title><rect x="15.9320%" y="149" width="0.2679%" height="15" fill="rgb(232,128,0)"/><text x="16.1820%" y="159.50"></text></g><g><title>is_copy_raw (1,680,844 samples, 0.11%)</title><rect x="18.8988%" y="133" width="0.1139%" height="15" fill="rgb(207,160,47)"/><text x="19.1488%" y="143.50"></text></g><g><title>adt_drop_tys (2,395,806 samples, 0.16%)</title><rect x="19.1660%" y="117" width="0.1623%" height="15" fill="rgb(228,23,34)"/><text x="19.4160%" y="127.50"></text></g><g><title>is_copy_raw (13,437,594 samples, 0.91%)</title><rect x="19.3283%" y="117" width="0.9103%" height="15" fill="rgb(218,30,26)"/><text x="19.5783%" y="127.50"></text></g><g><title>evaluate_obligation (10,417,812 samples, 0.71%)</title><rect x="19.5328%" y="101" width="0.7057%" height="15" fill="rgb(220,122,19)"/><text x="19.7828%" y="111.50"></text></g><g><title>needs_drop_raw (18,384,111 samples, 1.25%)</title><rect x="19.0128%" y="133" width="1.2454%" height="15" fill="rgb(250,228,42)"/><text x="19.2628%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (9,808,084 samples, 0.66%)</title><rect x="20.5507%" y="117" width="0.6644%" height="15" fill="rgb(240,193,28)"/><text x="20.8007%" y="127.50"></text></g><g><title>resolve_instance (16,476,145 samples, 1.12%)</title><rect x="20.2612%" y="133" width="1.1161%" height="15" fill="rgb(216,20,37)"/><text x="20.5112%" y="143.50"></text></g><g><title>thir_body (15,079,477 samples, 1.02%)</title><rect x="21.4136%" y="133" width="1.0215%" height="15" fill="rgb(206,188,39)"/><text x="21.6636%" y="143.50"></text></g><g><title>mir_const (118,035,311 samples, 8.00%)</title><rect x="14.5007%" y="181" width="7.9958%" height="15" fill="rgb(217,207,13)"/><text x="14.7507%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (103,833,931 samples, 7.03%)</title><rect x="15.4627%" y="165" width="7.0338%" height="15" fill="rgb(231,73,38)"/><text x="15.7127%" y="175.50">unsafety_..</text></g><g><title>mir_built (92,947,427 samples, 6.30%)</title><rect x="16.2001%" y="149" width="6.2963%" height="15" fill="rgb(225,20,46)"/><text x="16.4501%" y="159.50">mir_built</text></g><g><title>mir_const (3,778,692 samples, 0.26%)</title><rect x="22.7008%" y="165" width="0.2560%" height="15" fill="rgb(210,31,41)"/><text x="22.9508%" y="175.50"></text></g><g><title>unsafety_check_result (3,061,786 samples, 0.21%)</title><rect x="22.7494%" y="149" width="0.2074%" height="15" fill="rgb(221,200,47)"/><text x="22.9994%" y="159.50"></text></g><g><title>mir_built (2,660,682 samples, 0.18%)</title><rect x="22.7766%" y="133" width="0.1802%" height="15" fill="rgb(226,26,5)"/><text x="23.0266%" y="143.50"></text></g><g><title>mir_const_qualif (6,952,597 samples, 0.47%)</title><rect x="22.4964%" y="181" width="0.4710%" height="15" fill="rgb(249,33,26)"/><text x="22.7464%" y="191.50"></text></g><g><title>mir_promoted (136,100,575 samples, 9.22%)</title><rect x="13.7485%" y="197" width="9.2195%" height="15" fill="rgb(235,183,28)"/><text x="13.9985%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (7,115,993 samples, 0.48%)</title><rect x="22.9692%" y="197" width="0.4820%" height="15" fill="rgb(221,5,38)"/><text x="23.2192%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (11,929,053 samples, 0.81%)</title><rect x="23.4512%" y="197" width="0.8081%" height="15" fill="rgb(247,18,42)"/><text x="23.7012%" y="207.50"></text></g><g><title>normalize_projection_ty (7,074,135 samples, 0.48%)</title><rect x="23.7801%" y="181" width="0.4792%" height="15" fill="rgb(241,131,45)"/><text x="24.0301%" y="191.50"></text></g><g><title>type_op_normalize_predicate (11,181,404 samples, 0.76%)</title><rect x="24.2603%" y="197" width="0.7574%" height="15" fill="rgb(249,31,29)"/><text x="24.5103%" y="207.50"></text></g><g><title>normalize_projection_ty (3,466,252 samples, 0.23%)</title><rect x="24.7830%" y="181" width="0.2348%" height="15" fill="rgb(225,111,53)"/><text x="25.0330%" y="191.50"></text></g><g><title>type_op_normalize_ty (3,843,753 samples, 0.26%)</title><rect x="25.0178%" y="197" width="0.2604%" height="15" fill="rgb(238,160,17)"/><text x="25.2678%" y="207.50"></text></g><g><title>normalize_projection_ty (1,600,548 samples, 0.11%)</title><rect x="25.1697%" y="181" width="0.1084%" height="15" fill="rgb(214,148,48)"/><text x="25.4197%" y="191.50"></text></g><g><title>type_op_prove_predicate (53,003,019 samples, 3.59%)</title><rect x="25.2781%" y="197" width="3.5905%" height="15" fill="rgb(232,36,49)"/><text x="25.5281%" y="207.50">type..</text></g><g><title>MIR_borrow_checking (421,478,676 samples, 28.55%)</title><rect x="0.3210%" y="229" width="28.5512%" height="15" fill="rgb(209,103,24)"/><text x="0.5710%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (417,658,891 samples, 28.29%)</title><rect x="0.5798%" y="213" width="28.2925%" height="15" fill="rgb(229,88,8)"/><text x="0.8298%" y="223.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (1,893,401 samples, 0.13%)</title><rect x="28.9420%" y="213" width="0.1283%" height="15" fill="rgb(213,181,19)"/><text x="29.1920%" y="223.50"></text></g><g><title>MIR_effect_checking (2,931,913 samples, 0.20%)</title><rect x="28.8723%" y="229" width="0.1986%" height="15" fill="rgb(254,191,54)"/><text x="29.1223%" y="239.50"></text></g><g><title>hir_module_items (2,652,642 samples, 0.18%)</title><rect x="29.0709%" y="229" width="0.1797%" height="15" fill="rgb(241,83,37)"/><text x="29.3209%" y="239.50"></text></g><g><title>should_inherit_track_caller (1,971,912 samples, 0.13%)</title><rect x="29.5600%" y="181" width="0.1336%" height="15" fill="rgb(233,36,39)"/><text x="29.8100%" y="191.50"></text></g><g><title>codegen_fn_attrs (3,718,101 samples, 0.25%)</title><rect x="29.4432%" y="197" width="0.2519%" height="15" fill="rgb(226,3,54)"/><text x="29.6932%" y="207.50"></text></g><g><title>check_mod_attrs (6,441,358 samples, 0.44%)</title><rect x="29.2588%" y="213" width="0.4363%" height="15" fill="rgb(245,192,40)"/><text x="29.5088%" y="223.50"></text></g><g><title>check_mod_const_bodies (1,568,799 samples, 0.11%)</title><rect x="29.6951%" y="213" width="0.1063%" height="15" fill="rgb(238,167,29)"/><text x="29.9451%" y="223.50"></text></g><g><title>lookup_deprecation_entry (1,669,658 samples, 0.11%)</title><rect x="30.0184%" y="197" width="0.1131%" height="15" fill="rgb(232,182,51)"/><text x="30.2684%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (3,812,763 samples, 0.26%)</title><rect x="29.9003%" y="213" width="0.2583%" height="15" fill="rgb(231,60,39)"/><text x="30.1503%" y="223.50"></text></g><g><title>misc_checking_1 (13,883,175 samples, 0.94%)</title><rect x="29.2506%" y="229" width="0.9405%" height="15" fill="rgb(208,69,12)"/><text x="29.5006%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (8,164,912 samples, 0.55%)</title><rect x="30.1913%" y="213" width="0.5531%" height="15" fill="rgb(235,93,37)"/><text x="30.4413%" y="223.50"></text></g><g><title>check_mod_liveness (6,827,047 samples, 0.46%)</title><rect x="30.2819%" y="197" width="0.4625%" height="15" fill="rgb(213,116,39)"/><text x="30.5319%" y="207.50"></text></g><g><title>type_uninhabited_from (1,869,536 samples, 0.13%)</title><rect x="30.6177%" y="181" width="0.1266%" height="15" fill="rgb(222,207,29)"/><text x="30.8677%" y="191.50"></text></g><g><title>misc_checking_2 (16,293,952 samples, 1.10%)</title><rect x="30.1910%" y="229" width="1.1038%" height="15" fill="rgb(206,96,30)"/><text x="30.4410%" y="239.50"></text></g><g><title>match_checking (8,125,550 samples, 0.55%)</title><rect x="30.7444%" y="213" width="0.5504%" height="15" fill="rgb(218,138,4)"/><text x="30.9944%" y="223.50"></text></g><g><title>check_match (7,463,629 samples, 0.51%)</title><rect x="30.7892%" y="197" width="0.5056%" height="15" fill="rgb(250,191,14)"/><text x="31.0392%" y="207.50"></text></g><g><title>check_private_in_public (3,673,881 samples, 0.25%)</title><rect x="31.2963%" y="213" width="0.2489%" height="15" fill="rgb(239,60,40)"/><text x="31.5463%" y="223.50"></text></g><g><title>death_checking (6,092,108 samples, 0.41%)</title><rect x="31.5451%" y="213" width="0.4127%" height="15" fill="rgb(206,27,48)"/><text x="31.7951%" y="223.50"></text></g><g><title>eval_to_allocation_raw (3,073,287 samples, 0.21%)</title><rect x="32.4296%" y="181" width="0.2082%" height="15" fill="rgb(225,35,8)"/><text x="32.6796%" y="191.50"></text></g><g><title>eval_to_allocation_raw (3,049,387 samples, 0.21%)</title><rect x="32.4312%" y="165" width="0.2066%" height="15" fill="rgb(250,213,24)"/><text x="32.6812%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,638,447 samples, 0.11%)</title><rect x="32.6378%" y="181" width="0.1110%" height="15" fill="rgb(247,123,22)"/><text x="32.8878%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,621,657 samples, 0.11%)</title><rect x="32.6389%" y="165" width="0.1099%" height="15" fill="rgb(231,138,38)"/><text x="32.8889%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,593,337 samples, 0.11%)</title><rect x="32.6409%" y="149" width="0.1079%" height="15" fill="rgb(231,145,46)"/><text x="32.8909%" y="159.50"></text></g><g><title>param_env (3,483,914 samples, 0.24%)</title><rect x="32.7490%" y="181" width="0.2360%" height="15" fill="rgb(251,118,11)"/><text x="32.9990%" y="191.50"></text></g><g><title>crate_lints (16,800,648 samples, 1.14%)</title><rect x="31.9581%" y="197" width="1.1381%" height="15" fill="rgb(217,147,25)"/><text x="32.2081%" y="207.50"></text></g><g><title>lint_checking (24,152,280 samples, 1.64%)</title><rect x="31.9578%" y="213" width="1.6361%" height="15" fill="rgb(247,81,37)"/><text x="32.2078%" y="223.50"></text></g><g><title>module_lints (7,347,652 samples, 0.50%)</title><rect x="33.0962%" y="197" width="0.4977%" height="15" fill="rgb(209,12,38)"/><text x="33.3462%" y="207.50"></text></g><g><title>lint_mod (7,300,970 samples, 0.49%)</title><rect x="33.0993%" y="181" width="0.4946%" height="15" fill="rgb(227,1,9)"/><text x="33.3493%" y="191.50"></text></g><g><title>privacy_access_levels (7,181,890 samples, 0.49%)</title><rect x="33.5939%" y="213" width="0.4865%" height="15" fill="rgb(248,47,43)"/><text x="33.8439%" y="223.50"></text></g><g><title>privacy_checking_modules (14,780,065 samples, 1.00%)</title><rect x="34.0804%" y="213" width="1.0012%" height="15" fill="rgb(221,10,30)"/><text x="34.3304%" y="223.50"></text></g><g><title>check_mod_privacy (14,736,575 samples, 1.00%)</title><rect x="34.0834%" y="197" width="0.9983%" height="15" fill="rgb(210,229,1)"/><text x="34.3334%" y="207.50"></text></g><g><title>misc_checking_3 (56,463,100 samples, 3.82%)</title><rect x="31.2948%" y="229" width="3.8248%" height="15" fill="rgb(222,148,37)"/><text x="31.5448%" y="239.50">misc..</text></g><g><title>impl_parent (4,652,928 samples, 0.32%)</title><rect x="36.0883%" y="165" width="0.3152%" height="15" fill="rgb(234,67,33)"/><text x="36.3383%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,664,155 samples, 0.18%)</title><rect x="36.2230%" y="149" width="0.1805%" height="15" fill="rgb(247,98,35)"/><text x="36.4730%" y="159.50"></text></g><g><title>impl_trait_ref (10,823,610 samples, 0.73%)</title><rect x="36.4038%" y="165" width="0.7332%" height="15" fill="rgb(247,138,52)"/><text x="36.6538%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,610,342 samples, 0.58%)</title><rect x="36.5537%" y="149" width="0.5833%" height="15" fill="rgb(213,79,30)"/><text x="36.8037%" y="159.50"></text></g><g><title>trait_impls_of (3,067,904 samples, 0.21%)</title><rect x="37.1820%" y="165" width="0.2078%" height="15" fill="rgb(246,177,23)"/><text x="37.4320%" y="175.50"></text></g><g><title>impl_wf_inference (36,890,172 samples, 2.50%)</title><rect x="35.2687%" y="213" width="2.4990%" height="15" fill="rgb(230,62,27)"/><text x="35.5187%" y="223.50">im..</text></g><g><title>check_mod_impl_wf (36,849,892 samples, 2.50%)</title><rect x="35.2714%" y="197" width="2.4962%" height="15" fill="rgb(216,154,8)"/><text x="35.5214%" y="207.50">ch..</text></g><g><title>specialization_graph_of (35,660,603 samples, 2.42%)</title><rect x="35.3520%" y="181" width="2.4157%" height="15" fill="rgb(244,35,45)"/><text x="35.6020%" y="191.50">sp..</text></g><g><title>visible_parent_map (5,541,442 samples, 0.38%)</title><rect x="37.3923%" y="165" width="0.3754%" height="15" fill="rgb(251,115,12)"/><text x="37.6423%" y="175.50"></text></g><g><title>module_children (4,938,097 samples, 0.33%)</title><rect x="37.4331%" y="149" width="0.3345%" height="15" fill="rgb(240,54,50)"/><text x="37.6831%" y="159.50"></text></g><g><title>metadata_decode_entry_module_children (4,842,906 samples, 0.33%)</title><rect x="37.4396%" y="133" width="0.3281%" height="15" fill="rgb(233,84,52)"/><text x="37.6896%" y="143.50"></text></g><g><title>associated_item (1,956,900 samples, 0.13%)</title><rect x="54.2991%" y="149" width="0.1326%" height="15" fill="rgb(207,117,47)"/><text x="54.5491%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (1,570,807 samples, 0.11%)</title><rect x="54.3252%" y="133" width="0.1064%" height="15" fill="rgb(249,43,39)"/><text x="54.5752%" y="143.50"></text></g><g><title>associated_items (2,867,283 samples, 0.19%)</title><rect x="54.2466%" y="165" width="0.1942%" height="15" fill="rgb(209,38,44)"/><text x="54.4966%" y="175.50"></text></g><g><title>dropck_outlives (5,172,738 samples, 0.35%)</title><rect x="54.4785%" y="165" width="0.3504%" height="15" fill="rgb(236,212,23)"/><text x="54.7285%" y="175.50"></text></g><g><title>predicates_of (1,489,466 samples, 0.10%)</title><rect x="56.6121%" y="149" width="0.1009%" height="15" fill="rgb(242,79,21)"/><text x="56.8621%" y="159.50"></text></g><g><title>specializes (2,306,533 samples, 0.16%)</title><rect x="56.7130%" y="149" width="0.1562%" height="15" fill="rgb(211,96,35)"/><text x="56.9630%" y="159.50"></text></g><g><title>evaluate_obligation (30,711,041 samples, 2.08%)</title><rect x="54.8634%" y="165" width="2.0804%" height="15" fill="rgb(253,215,40)"/><text x="55.1134%" y="175.50">e..</text></g><g><title>generics_of (2,737,193 samples, 0.19%)</title><rect x="57.0184%" y="165" width="0.1854%" height="15" fill="rgb(211,81,21)"/><text x="57.2684%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (1,944,783 samples, 0.13%)</title><rect x="57.0721%" y="149" width="0.1317%" height="15" fill="rgb(208,190,38)"/><text x="57.3221%" y="159.50"></text></g><g><title>evaluate_obligation (3,288,525 samples, 0.22%)</title><rect x="57.6059%" y="149" width="0.2228%" height="15" fill="rgb(235,213,38)"/><text x="57.8559%" y="159.50"></text></g><g><title>method_autoderef_steps (7,044,372 samples, 0.48%)</title><rect x="57.3547%" y="165" width="0.4772%" height="15" fill="rgb(237,122,38)"/><text x="57.6047%" y="175.50"></text></g><g><title>predicates_of (2,129,017 samples, 0.14%)</title><rect x="57.8931%" y="165" width="0.1442%" height="15" fill="rgb(244,218,35)"/><text x="58.1431%" y="175.50"></text></g><g><title>predicates_defined_on (1,486,603 samples, 0.10%)</title><rect x="57.9366%" y="149" width="0.1007%" height="15" fill="rgb(240,68,47)"/><text x="58.1866%" y="159.50"></text></g><g><title>dropck_outlives (2,734,138 samples, 0.19%)</title><rect x="64.7146%" y="149" width="0.1852%" height="15" fill="rgb(210,16,53)"/><text x="64.9646%" y="159.50"></text></g><g><title>evaluate_obligation (11,464,187 samples, 0.78%)</title><rect x="64.9340%" y="149" width="0.7766%" height="15" fill="rgb(235,124,12)"/><text x="65.1840%" y="159.50"></text></g><g><title>is_copy_raw (2,123,625 samples, 0.14%)</title><rect x="65.8268%" y="149" width="0.1439%" height="15" fill="rgb(224,169,11)"/><text x="66.0768%" y="159.50"></text></g><g><title>evaluate_obligation (1,524,425 samples, 0.10%)</title><rect x="65.8674%" y="133" width="0.1033%" height="15" fill="rgb(250,166,2)"/><text x="66.1174%" y="143.50"></text></g><g><title>evaluate_obligation (2,465,003 samples, 0.17%)</title><rect x="66.1849%" y="133" width="0.1670%" height="15" fill="rgb(242,216,29)"/><text x="66.4349%" y="143.50"></text></g><g><title>method_autoderef_steps (5,142,915 samples, 0.35%)</title><rect x="66.0043%" y="149" width="0.3484%" height="15" fill="rgb(230,116,27)"/><text x="66.2543%" y="159.50"></text></g><g><title>typeck (123,892,412 samples, 8.39%)</title><rect x="58.1101%" y="165" width="8.3925%" height="15" fill="rgb(228,99,48)"/><text x="58.3601%" y="175.50">typeck</text></g><g><title>item_bodies_checking (425,571,721 samples, 28.83%)</title><rect x="37.7677%" y="213" width="28.8285%" height="15" fill="rgb(253,11,6)"/><text x="38.0177%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (425,567,861 samples, 28.83%)</title><rect x="37.7679%" y="197" width="28.8282%" height="15" fill="rgb(247,143,39)"/><text x="38.0179%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (423,900,139 samples, 28.72%)</title><rect x="37.8809%" y="181" width="28.7152%" height="15" fill="rgb(236,97,10)"/><text x="38.1309%" y="191.50">typeck</text></g><g><title>mir_borrowck (3,074,854 samples, 0.21%)</title><rect x="69.1816%" y="149" width="0.2083%" height="15" fill="rgb(233,208,19)"/><text x="69.4316%" y="159.50"></text></g><g><title>evaluate_obligation (2,682,428 samples, 0.18%)</title><rect x="71.0144%" y="69" width="0.1817%" height="15" fill="rgb(216,164,2)"/><text x="71.2644%" y="79.50"></text></g><g><title>mir_built (27,510,304 samples, 1.86%)</title><rect x="69.5062%" y="101" width="1.8636%" height="15" fill="rgb(220,129,5)"/><text x="69.7562%" y="111.50">m..</text></g><g><title>typeck (24,262,242 samples, 1.64%)</title><rect x="69.7262%" y="85" width="1.6435%" height="15" fill="rgb(242,17,10)"/><text x="69.9762%" y="95.50"></text></g><g><title>mir_const (29,986,155 samples, 2.03%)</title><rect x="69.4107%" y="133" width="2.0313%" height="15" fill="rgb(242,107,0)"/><text x="69.6607%" y="143.50">m..</text></g><g><title>unsafety_check_result (29,010,752 samples, 1.97%)</title><rect x="69.4768%" y="117" width="1.9652%" height="15" fill="rgb(251,28,31)"/><text x="69.7268%" y="127.50">u..</text></g><g><title>mir_promoted (30,323,228 samples, 2.05%)</title><rect x="69.3899%" y="149" width="2.0541%" height="15" fill="rgb(233,223,10)"/><text x="69.6399%" y="159.50">m..</text></g><g><title>type_op_normalize_predicate (1,690,338 samples, 0.11%)</title><rect x="71.4824%" y="149" width="0.1145%" height="15" fill="rgb(215,21,27)"/><text x="71.7324%" y="159.50"></text></g><g><title>type_of (49,692,165 samples, 3.37%)</title><rect x="68.4466%" y="181" width="3.3662%" height="15" fill="rgb(232,23,21)"/><text x="68.6966%" y="191.50">typ..</text></g><g><title>mir_borrowck (49,525,404 samples, 3.35%)</title><rect x="68.4579%" y="165" width="3.3549%" height="15" fill="rgb(244,5,23)"/><text x="68.7079%" y="175.50">mir..</text></g><g><title>type_op_prove_predicate (2,962,508 samples, 0.20%)</title><rect x="71.6121%" y="149" width="0.2007%" height="15" fill="rgb(226,81,46)"/><text x="71.8621%" y="159.50"></text></g><g><title>evaluate_obligation (1,841,540 samples, 0.12%)</title><rect x="72.3540%" y="165" width="0.1247%" height="15" fill="rgb(247,70,30)"/><text x="72.6040%" y="175.50"></text></g><g><title>typeck (10,612,078 samples, 0.72%)</title><rect x="71.8127%" y="181" width="0.7189%" height="15" fill="rgb(212,68,19)"/><text x="72.0627%" y="191.50"></text></g><g><title>item_types_checking (87,621,979 samples, 5.94%)</title><rect x="66.5961%" y="213" width="5.9356%" height="15" fill="rgb(240,187,13)"/><text x="66.8461%" y="223.50">item_typ..</text></g><g><title>check_mod_item_types (87,562,358 samples, 5.93%)</title><rect x="66.6002%" y="197" width="5.9315%" height="15" fill="rgb(223,113,26)"/><text x="66.8502%" y="207.50">check_mo..</text></g><g><title>fn_sig (4,462,709 samples, 0.30%)</title><rect x="72.7853%" y="181" width="0.3023%" height="15" fill="rgb(206,192,2)"/><text x="73.0353%" y="191.50"></text></g><g><title>lint_levels (2,364,367 samples, 0.16%)</title><rect x="73.2689%" y="133" width="0.1602%" height="15" fill="rgb(241,108,4)"/><text x="73.5189%" y="143.50"></text></g><g><title>resolve_lifetimes (3,304,009 samples, 0.22%)</title><rect x="73.2054%" y="149" width="0.2238%" height="15" fill="rgb(247,173,49)"/><text x="73.4554%" y="159.50"></text></g><g><title>is_late_bound_map (3,396,549 samples, 0.23%)</title><rect x="73.1997%" y="165" width="0.2301%" height="15" fill="rgb(224,114,35)"/><text x="73.4497%" y="175.50"></text></g><g><title>named_region_map (1,573,940 samples, 0.11%)</title><rect x="73.4298%" y="165" width="0.1066%" height="15" fill="rgb(245,159,27)"/><text x="73.6798%" y="175.50"></text></g><g><title>generics_of (6,805,278 samples, 0.46%)</title><rect x="73.0876%" y="181" width="0.4610%" height="15" fill="rgb(245,172,44)"/><text x="73.3376%" y="191.50"></text></g><g><title>late_bound_vars_map (3,218,990 samples, 0.22%)</title><rect x="73.9804%" y="133" width="0.2181%" height="15" fill="rgb(236,23,11)"/><text x="74.2304%" y="143.50"></text></g><g><title>resolve_lifetimes (3,048,605 samples, 0.21%)</title><rect x="73.9920%" y="117" width="0.2065%" height="15" fill="rgb(205,117,38)"/><text x="74.2420%" y="127.50"></text></g><g><title>explicit_predicates_of (7,065,895 samples, 0.48%)</title><rect x="73.7417%" y="149" width="0.4786%" height="15" fill="rgb(237,72,25)"/><text x="73.9917%" y="159.50"></text></g><g><title>predicates_of (11,324,208 samples, 0.77%)</title><rect x="73.6077%" y="181" width="0.7671%" height="15" fill="rgb(244,70,9)"/><text x="73.8577%" y="191.50"></text></g><g><title>predicates_defined_on (10,554,173 samples, 0.71%)</title><rect x="73.6598%" y="165" width="0.7149%" height="15" fill="rgb(217,125,39)"/><text x="73.9098%" y="175.50"></text></g><g><title>inferred_outlives_of (2,280,344 samples, 0.15%)</title><rect x="74.2203%" y="149" width="0.1545%" height="15" fill="rgb(235,36,10)"/><text x="74.4703%" y="159.50"></text></g><g><title>inferred_outlives_crate (2,018,692 samples, 0.14%)</title><rect x="74.2380%" y="133" width="0.1367%" height="15" fill="rgb(251,123,47)"/><text x="74.4880%" y="143.50"></text></g><g><title>type_collecting (29,114,975 samples, 1.97%)</title><rect x="72.5335%" y="213" width="1.9723%" height="15" fill="rgb(221,13,13)"/><text x="72.7835%" y="223.50">t..</text></g><g><title>collect_mod_item_types (29,066,495 samples, 1.97%)</title><rect x="72.5368%" y="197" width="1.9690%" height="15" fill="rgb(238,131,9)"/><text x="72.7868%" y="207.50">c..</text></g><g><title>type_of (1,795,345 samples, 0.12%)</title><rect x="74.3842%" y="181" width="0.1216%" height="15" fill="rgb(211,50,8)"/><text x="74.6342%" y="191.50"></text></g><g><title>evaluate_obligation (6,899,759 samples, 0.47%)</title><rect x="77.2852%" y="181" width="0.4674%" height="15" fill="rgb(245,182,24)"/><text x="77.5352%" y="191.50"></text></g><g><title>implied_outlives_bounds (4,829,425 samples, 0.33%)</title><rect x="77.7710%" y="181" width="0.3271%" height="15" fill="rgb(242,14,37)"/><text x="78.0210%" y="191.50"></text></g><g><title>param_env (6,690,654 samples, 0.45%)</title><rect x="78.1308%" y="181" width="0.4532%" height="15" fill="rgb(246,228,12)"/><text x="78.3808%" y="191.50"></text></g><g><title>region_scope_tree (4,870,207 samples, 0.33%)</title><rect x="78.6028%" y="181" width="0.3299%" height="15" fill="rgb(213,55,15)"/><text x="78.8528%" y="191.50"></text></g><g><title>check_impl_item_well_formed (62,049,396 samples, 4.20%)</title><rect x="74.7354%" y="197" width="4.2033%" height="15" fill="rgb(209,9,3)"/><text x="74.9854%" y="207.50">check..</text></g><g><title>specializes (1,965,814 samples, 0.13%)</title><rect x="81.2746%" y="37" width="0.1332%" height="15" fill="rgb(230,59,30)"/><text x="81.5246%" y="47.50"></text></g><g><title>evaluate_obligation (6,340,672 samples, 0.43%)</title><rect x="80.9830%" y="53" width="0.4295%" height="15" fill="rgb(209,121,21)"/><text x="81.2330%" y="63.50"></text></g><g><title>eval_to_const_value_raw (8,099,932 samples, 0.55%)</title><rect x="80.8722%" y="117" width="0.5487%" height="15" fill="rgb(220,109,13)"/><text x="81.1222%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,094,662 samples, 0.55%)</title><rect x="80.8726%" y="101" width="0.5483%" height="15" fill="rgb(232,18,1)"/><text x="81.1226%" y="111.50"></text></g><g><title>eval_to_allocation_raw (8,083,652 samples, 0.55%)</title><rect x="80.8733%" y="85" width="0.5476%" height="15" fill="rgb(215,41,42)"/><text x="81.1233%" y="95.50"></text></g><g><title>typeck (6,932,048 samples, 0.47%)</title><rect x="80.9513%" y="69" width="0.4696%" height="15" fill="rgb(224,123,36)"/><text x="81.2013%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,146,822 samples, 0.55%)</title><rect x="80.8701%" y="133" width="0.5519%" height="15" fill="rgb(240,125,3)"/><text x="81.1201%" y="143.50"></text></g><g><title>eval_to_const_value_raw (10,941,423 samples, 0.74%)</title><rect x="80.7021%" y="181" width="0.7412%" height="15" fill="rgb(205,98,50)"/><text x="80.9521%" y="191.50"></text></g><g><title>eval_to_const_value_raw (10,927,413 samples, 0.74%)</title><rect x="80.7030%" y="165" width="0.7402%" height="15" fill="rgb(205,185,37)"/><text x="80.9530%" y="175.50"></text></g><g><title>eval_to_allocation_raw (10,920,943 samples, 0.74%)</title><rect x="80.7035%" y="149" width="0.7398%" height="15" fill="rgb(238,207,15)"/><text x="80.9535%" y="159.50"></text></g><g><title>evaluate_obligation (2,803,967 samples, 0.19%)</title><rect x="81.4433%" y="181" width="0.1899%" height="15" fill="rgb(213,199,42)"/><text x="81.6933%" y="191.50"></text></g><g><title>implied_outlives_bounds (1,634,949 samples, 0.11%)</title><rect x="81.6612%" y="181" width="0.1108%" height="15" fill="rgb(235,201,11)"/><text x="81.9112%" y="191.50"></text></g><g><title>param_env (4,910,770 samples, 0.33%)</title><rect x="81.7731%" y="181" width="0.3327%" height="15" fill="rgb(207,46,11)"/><text x="82.0231%" y="191.50"></text></g><g><title>check_item_well_formed (49,899,315 samples, 3.38%)</title><rect x="78.9386%" y="197" width="3.3802%" height="15" fill="rgb(241,35,35)"/><text x="79.1886%" y="207.50">che..</text></g><g><title>analysis (1,217,160,030 samples, 82.45%)</title><rect x="0.1179%" y="245" width="82.4511%" height="15" fill="rgb(243,32,47)"/><text x="0.3679%" y="255.50">analysis</text></g><g><title>type_check_crate (700,457,791 samples, 47.45%)</title><rect x="35.1196%" y="229" width="47.4494%" height="15" fill="rgb(247,202,23)"/><text x="35.3696%" y="239.50">type_check_crate</text></g><g><title>wf_checking (118,922,678 samples, 8.06%)</title><rect x="74.5132%" y="213" width="8.0559%" height="15" fill="rgb(219,102,11)"/><text x="74.7632%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,694,081 samples, 0.25%)</title><rect x="82.3188%" y="197" width="0.2502%" height="15" fill="rgb(243,110,44)"/><text x="82.5688%" y="207.50"></text></g><g><title>AST_validation (1,886,492 samples, 0.13%)</title><rect x="82.6401%" y="229" width="0.1278%" height="15" fill="rgb(222,74,54)"/><text x="82.8901%" y="239.50"></text></g><g><title>metadata_load_macro (1,522,008 samples, 0.10%)</title><rect x="91.0657%" y="197" width="0.1031%" height="15" fill="rgb(216,99,12)"/><text x="91.3157%" y="207.50"></text></g><g><title>metadata_register_crate (10,725,261 samples, 0.73%)</title><rect x="91.1688%" y="197" width="0.7265%" height="15" fill="rgb(226,22,26)"/><text x="91.4188%" y="207.50"></text></g><g><title>metadata_register_crate (4,866,232 samples, 0.33%)</title><rect x="91.5657%" y="181" width="0.3296%" height="15" fill="rgb(217,163,10)"/><text x="91.8157%" y="191.50"></text></g><g><title>macro_expand_crate (136,397,022 samples, 9.24%)</title><rect x="82.8569%" y="229" width="9.2396%" height="15" fill="rgb(213,25,53)"/><text x="83.1069%" y="239.50">macro_expand_..</text></g><g><title>expand_crate (136,369,492 samples, 9.24%)</title><rect x="82.8588%" y="213" width="9.2378%" height="15" fill="rgb(252,105,26)"/><text x="83.1088%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,969,378 samples, 0.20%)</title><rect x="91.8954%" y="197" width="0.2011%" height="15" fill="rgb(220,39,43)"/><text x="92.1454%" y="207.50"></text></g><g><title>late_resolve_crate (23,413,562 samples, 1.59%)</title><rect x="92.2592%" y="213" width="1.5860%" height="15" fill="rgb(229,68,48)"/><text x="92.5092%" y="223.50"></text></g><g><title>resolve_check_unused (1,682,269 samples, 0.11%)</title><rect x="93.8585%" y="213" width="0.1140%" height="15" fill="rgb(252,8,32)"/><text x="94.1085%" y="223.50"></text></g><g><title>configure_and_expand (168,569,802 samples, 11.42%)</title><rect x="82.6256%" y="245" width="11.4190%" height="15" fill="rgb(223,20,43)"/><text x="82.8756%" y="255.50">configure_and_exp..</text></g><g><title>resolve_crate (28,627,420 samples, 1.94%)</title><rect x="92.1053%" y="229" width="1.9392%" height="15" fill="rgb(229,81,49)"/><text x="92.3553%" y="239.50">r..</text></g><g><title>drop_ast (3,937,204 samples, 0.27%)</title><rect x="94.0446%" y="245" width="0.2667%" height="15" fill="rgb(236,28,36)"/><text x="94.2946%" y="255.50"></text></g><g><title>early_lint_checks (5,024,056 samples, 0.34%)</title><rect x="94.3139%" y="245" width="0.3403%" height="15" fill="rgb(249,185,26)"/><text x="94.5639%" y="255.50"></text></g><g><title>free_global_ctxt (13,988,226 samples, 0.95%)</title><rect x="94.6542%" y="245" width="0.9476%" height="15" fill="rgb(249,174,33)"/><text x="94.9042%" y="255.50"></text></g><g><title>generate_crate_metadata (17,989,410 samples, 1.22%)</title><rect x="95.6018%" y="245" width="1.2186%" height="15" fill="rgb(233,201,37)"/><text x="95.8518%" y="255.50"></text></g><g><title>hir_lowering (39,598,631 samples, 2.68%)</title><rect x="96.8204%" y="245" width="2.6824%" height="15" fill="rgb(221,78,26)"/><text x="97.0704%" y="255.50">hi..</text></g><g><title>self_profile_alloc_query_strings (4,776,163 samples, 0.32%)</title><rect x="99.5907%" y="245" width="0.3235%" height="15" fill="rgb(250,127,30)"/><text x="99.8407%" y="255.50"></text></g><g><title>all (1,476,219,743 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (1,476,219,743 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>