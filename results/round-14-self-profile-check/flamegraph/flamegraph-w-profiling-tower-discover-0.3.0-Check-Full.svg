<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (80,481 samples, 0.11%)</title><rect x="6.9423%" y="117" width="0.1109%" height="15" fill="rgb(227,0,7)"/><text x="7.1923%" y="127.50"></text></g><g><title>item_attrs (89,540 samples, 0.12%)</title><rect x="7.3640%" y="85" width="0.1234%" height="15" fill="rgb(217,0,24)"/><text x="7.6140%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (86,210 samples, 0.12%)</title><rect x="7.3686%" y="69" width="0.1188%" height="15" fill="rgb(221,193,54)"/><text x="7.6186%" y="79.50"></text></g><g><title>codegen_fn_attrs (157,321 samples, 0.22%)</title><rect x="7.2863%" y="101" width="0.2167%" height="15" fill="rgb(248,212,6)"/><text x="7.5363%" y="111.50"></text></g><g><title>adt_drop_tys (114,561 samples, 0.16%)</title><rect x="8.6994%" y="69" width="0.1578%" height="15" fill="rgb(208,68,35)"/><text x="8.9494%" y="79.50"></text></g><g><title>predicates_of (79,871 samples, 0.11%)</title><rect x="9.7285%" y="37" width="0.1100%" height="15" fill="rgb(232,128,0)"/><text x="9.9785%" y="47.50"></text></g><g><title>is_copy_raw (848,012 samples, 1.17%)</title><rect x="8.8573%" y="69" width="1.1682%" height="15" fill="rgb(207,160,47)"/><text x="9.1073%" y="79.50"></text></g><g><title>evaluate_obligation (756,311 samples, 1.04%)</title><rect x="8.9836%" y="53" width="1.0419%" height="15" fill="rgb(228,23,34)"/><text x="9.2336%" y="63.50"></text></g><g><title>trait_impls_of (134,001 samples, 0.18%)</title><rect x="9.8409%" y="37" width="0.1846%" height="15" fill="rgb(218,30,26)"/><text x="10.0909%" y="47.50"></text></g><g><title>needs_drop_raw (1,062,143 samples, 1.46%)</title><rect x="8.5833%" y="85" width="1.4632%" height="15" fill="rgb(220,122,19)"/><text x="8.8333%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (109,241 samples, 0.15%)</title><rect x="10.1624%" y="69" width="0.1505%" height="15" fill="rgb(250,228,42)"/><text x="10.4124%" y="79.50"></text></g><g><title>impl_parent (176,532 samples, 0.24%)</title><rect x="10.7919%" y="53" width="0.2432%" height="15" fill="rgb(240,193,28)"/><text x="11.0419%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (120,922 samples, 0.17%)</title><rect x="10.8685%" y="37" width="0.1666%" height="15" fill="rgb(216,20,37)"/><text x="11.1185%" y="47.50"></text></g><g><title>specialization_graph_of (978,571 samples, 1.35%)</title><rect x="10.3324%" y="69" width="1.3481%" height="15" fill="rgb(206,188,39)"/><text x="10.5824%" y="79.50"></text></g><g><title>impl_trait_ref (468,475 samples, 0.65%)</title><rect x="11.0351%" y="53" width="0.6454%" height="15" fill="rgb(217,207,13)"/><text x="11.2851%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (413,385 samples, 0.57%)</title><rect x="11.1110%" y="37" width="0.5695%" height="15" fill="rgb(231,73,38)"/><text x="11.3610%" y="47.50"></text></g><g><title>resolve_instance (1,210,103 samples, 1.67%)</title><rect x="10.0465%" y="85" width="1.6670%" height="15" fill="rgb(225,20,46)"/><text x="10.2965%" y="95.50"></text></g><g><title>thir_body (253,312 samples, 0.35%)</title><rect x="11.7242%" y="85" width="0.3490%" height="15" fill="rgb(210,31,41)"/><text x="11.9742%" y="95.50"></text></g><g><title>mir_const (4,029,593 samples, 5.55%)</title><rect x="6.5510%" y="133" width="5.5512%" height="15" fill="rgb(221,200,47)"/><text x="6.8010%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (3,665,110 samples, 5.05%)</title><rect x="7.0532%" y="117" width="5.0491%" height="15" fill="rgb(226,26,5)"/><text x="7.3032%" y="127.50">unsafe..</text></g><g><title>mir_built (3,338,536 samples, 4.60%)</title><rect x="7.5031%" y="101" width="4.5992%" height="15" fill="rgb(249,33,26)"/><text x="7.7531%" y="111.50">mir_b..</text></g><g><title>mir_promoted (4,372,627 samples, 6.02%)</title><rect x="6.1693%" y="149" width="6.0238%" height="15" fill="rgb(235,183,28)"/><text x="6.4193%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (355,783 samples, 0.49%)</title><rect x="12.1931%" y="149" width="0.4901%" height="15" fill="rgb(221,5,38)"/><text x="12.4431%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (220,104 samples, 0.30%)</title><rect x="12.6832%" y="149" width="0.3032%" height="15" fill="rgb(247,18,42)"/><text x="12.9332%" y="159.50"></text></g><g><title>normalize_projection_ty (107,152 samples, 0.15%)</title><rect x="12.8389%" y="133" width="0.1476%" height="15" fill="rgb(241,131,45)"/><text x="13.0889%" y="143.50"></text></g><g><title>type_op_normalize_ty (416,716 samples, 0.57%)</title><rect x="13.0616%" y="149" width="0.5741%" height="15" fill="rgb(249,31,29)"/><text x="13.3116%" y="159.50"></text></g><g><title>normalize_projection_ty (295,893 samples, 0.41%)</title><rect x="13.2281%" y="133" width="0.4076%" height="15" fill="rgb(225,111,53)"/><text x="13.4781%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,222,451 samples, 1.68%)</title><rect x="13.6357%" y="149" width="1.6841%" height="15" fill="rgb(238,160,17)"/><text x="13.8857%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,557,197 samples, 14.54%)</title><rect x="0.7871%" y="181" width="14.5437%" height="15" fill="rgb(214,148,48)"/><text x="1.0371%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,515,457 samples, 14.49%)</title><rect x="0.8446%" y="165" width="14.4862%" height="15" fill="rgb(232,36,49)"/><text x="1.0946%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (142,331 samples, 0.20%)</title><rect x="15.3308%" y="181" width="0.1961%" height="15" fill="rgb(209,103,24)"/><text x="15.5808%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (102,971 samples, 0.14%)</title><rect x="15.3850%" y="165" width="0.1419%" height="15" fill="rgb(229,88,8)"/><text x="15.6350%" y="175.50"></text></g><g><title>hir_module_items (127,532 samples, 0.18%)</title><rect x="15.5268%" y="181" width="0.1757%" height="15" fill="rgb(213,181,19)"/><text x="15.7768%" y="191.50"></text></g><g><title>should_inherit_track_caller (111,763 samples, 0.15%)</title><rect x="16.0818%" y="133" width="0.1540%" height="15" fill="rgb(254,191,54)"/><text x="16.3318%" y="143.50"></text></g><g><title>codegen_fn_attrs (247,584 samples, 0.34%)</title><rect x="15.9203%" y="149" width="0.3411%" height="15" fill="rgb(241,83,37)"/><text x="16.1703%" y="159.50"></text></g><g><title>check_mod_attrs (379,105 samples, 0.52%)</title><rect x="15.7396%" y="165" width="0.5223%" height="15" fill="rgb(233,36,39)"/><text x="15.9896%" y="175.50"></text></g><g><title>lookup_deprecation_entry (118,351 samples, 0.16%)</title><rect x="16.5845%" y="149" width="0.1630%" height="15" fill="rgb(226,3,54)"/><text x="16.8345%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (316,052 samples, 0.44%)</title><rect x="16.4160%" y="165" width="0.4354%" height="15" fill="rgb(245,192,40)"/><text x="16.6660%" y="175.50"></text></g><g><title>misc_checking_1 (877,690 samples, 1.21%)</title><rect x="15.7032%" y="181" width="1.2091%" height="15" fill="rgb(238,167,29)"/><text x="15.9532%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (172,962 samples, 0.24%)</title><rect x="16.9144%" y="165" width="0.2383%" height="15" fill="rgb(232,182,51)"/><text x="17.1644%" y="175.50"></text></g><g><title>check_mod_liveness (127,432 samples, 0.18%)</title><rect x="16.9771%" y="149" width="0.1756%" height="15" fill="rgb(231,60,39)"/><text x="17.2271%" y="159.50"></text></g><g><title>misc_checking_2 (394,254 samples, 0.54%)</title><rect x="16.9124%" y="181" width="0.5431%" height="15" fill="rgb(208,69,12)"/><text x="17.1624%" y="191.50"></text></g><g><title>match_checking (219,802 samples, 0.30%)</title><rect x="17.1527%" y="165" width="0.3028%" height="15" fill="rgb(235,93,37)"/><text x="17.4027%" y="175.50"></text></g><g><title>check_match (206,672 samples, 0.28%)</title><rect x="17.1708%" y="149" width="0.2847%" height="15" fill="rgb(213,116,39)"/><text x="17.4208%" y="159.50"></text></g><g><title>check_private_in_public (143,861 samples, 0.20%)</title><rect x="17.4690%" y="165" width="0.1982%" height="15" fill="rgb(222,207,29)"/><text x="17.7190%" y="175.50"></text></g><g><title>death_checking (274,873 samples, 0.38%)</title><rect x="17.6672%" y="165" width="0.3787%" height="15" fill="rgb(206,96,30)"/><text x="17.9172%" y="175.50"></text></g><g><title>eval_to_const_value_raw (164,002 samples, 0.23%)</title><rect x="18.8362%" y="133" width="0.2259%" height="15" fill="rgb(218,138,4)"/><text x="19.0862%" y="143.50"></text></g><g><title>eval_to_const_value_raw (155,041 samples, 0.21%)</title><rect x="18.8485%" y="117" width="0.2136%" height="15" fill="rgb(250,191,14)"/><text x="19.0985%" y="127.50"></text></g><g><title>eval_to_allocation_raw (147,651 samples, 0.20%)</title><rect x="18.8587%" y="101" width="0.2034%" height="15" fill="rgb(239,60,40)"/><text x="19.1087%" y="111.50"></text></g><g><title>param_env (273,952 samples, 0.38%)</title><rect x="19.0621%" y="133" width="0.3774%" height="15" fill="rgb(206,27,48)"/><text x="19.3121%" y="143.50"></text></g><g><title>predicates_of (135,781 samples, 0.19%)</title><rect x="19.2524%" y="117" width="0.1871%" height="15" fill="rgb(225,35,8)"/><text x="19.5024%" y="127.50"></text></g><g><title>predicates_defined_on (111,981 samples, 0.15%)</title><rect x="19.2852%" y="101" width="0.1543%" height="15" fill="rgb(250,213,24)"/><text x="19.5352%" y="111.50"></text></g><g><title>crate_lints (2,020,973 samples, 2.78%)</title><rect x="18.0481%" y="149" width="2.7841%" height="15" fill="rgb(247,123,22)"/><text x="18.2981%" y="159.50">cr..</text></g><g><title>type_of (1,009,300 samples, 1.39%)</title><rect x="19.4418%" y="133" width="1.3904%" height="15" fill="rgb(231,138,38)"/><text x="19.6918%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (775,387 samples, 1.07%)</title><rect x="19.7640%" y="117" width="1.0682%" height="15" fill="rgb(231,145,46)"/><text x="20.0140%" y="127.50"></text></g><g><title>lint_checking (2,181,605 samples, 3.01%)</title><rect x="18.0459%" y="165" width="3.0054%" height="15" fill="rgb(251,118,11)"/><text x="18.2959%" y="175.50">lin..</text></g><g><title>module_lints (159,032 samples, 0.22%)</title><rect x="20.8322%" y="149" width="0.2191%" height="15" fill="rgb(217,147,25)"/><text x="21.0822%" y="159.50"></text></g><g><title>lint_mod (155,132 samples, 0.21%)</title><rect x="20.8375%" y="133" width="0.2137%" height="15" fill="rgb(247,81,37)"/><text x="21.0875%" y="143.50"></text></g><g><title>privacy_access_levels (204,093 samples, 0.28%)</title><rect x="21.0513%" y="165" width="0.2812%" height="15" fill="rgb(209,12,38)"/><text x="21.3013%" y="175.50"></text></g><g><title>privacy_checking_modules (527,736 samples, 0.73%)</title><rect x="21.3324%" y="165" width="0.7270%" height="15" fill="rgb(227,1,9)"/><text x="21.5824%" y="175.50"></text></g><g><title>check_mod_privacy (524,086 samples, 0.72%)</title><rect x="21.3374%" y="149" width="0.7220%" height="15" fill="rgb(248,47,43)"/><text x="21.5874%" y="159.50"></text></g><g><title>misc_checking_3 (3,353,118 samples, 4.62%)</title><rect x="17.4555%" y="181" width="4.6193%" height="15" fill="rgb(221,10,30)"/><text x="17.7055%" y="191.50">misc_..</text></g><g><title>impl_parent (896,996 samples, 1.24%)</title><rect x="24.0767%" y="117" width="1.2357%" height="15" fill="rgb(210,229,1)"/><text x="24.3267%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (592,830 samples, 0.82%)</title><rect x="24.4957%" y="101" width="0.8167%" height="15" fill="rgb(222,148,37)"/><text x="24.7457%" y="111.50"></text></g><g><title>impl_trait_ref (2,895,851 samples, 3.99%)</title><rect x="25.3124%" y="117" width="3.9894%" height="15" fill="rgb(234,67,33)"/><text x="25.5624%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,591,795 samples, 3.57%)</title><rect x="25.7312%" y="101" width="3.5705%" height="15" fill="rgb(247,98,35)"/><text x="25.9812%" y="111.50">meta..</text></g><g><title>coherent_trait (5,541,292 samples, 7.63%)</title><rect x="22.1652%" y="149" width="7.6337%" height="15" fill="rgb(247,138,52)"/><text x="22.4152%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (5,526,922 samples, 7.61%)</title><rect x="22.1849%" y="133" width="7.6139%" height="15" fill="rgb(213,79,30)"/><text x="22.4349%" y="143.50">specializa..</text></g><g><title>trait_impls_of (319,974 samples, 0.44%)</title><rect x="29.3581%" y="117" width="0.4408%" height="15" fill="rgb(246,177,23)"/><text x="29.6081%" y="127.50"></text></g><g><title>implementations_of_trait (98,891 samples, 0.14%)</title><rect x="29.6627%" y="101" width="0.1362%" height="15" fill="rgb(230,62,27)"/><text x="29.9127%" y="111.50"></text></g><g><title>coherence_checking (5,617,372 samples, 7.74%)</title><rect x="22.1417%" y="165" width="7.7385%" height="15" fill="rgb(216,154,8)"/><text x="22.3917%" y="175.50">coherence_c..</text></g><g><title>associated_item (136,013 samples, 0.19%)</title><rect x="39.5178%" y="101" width="0.1874%" height="15" fill="rgb(244,35,45)"/><text x="39.7678%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (102,953 samples, 0.14%)</title><rect x="39.5633%" y="85" width="0.1418%" height="15" fill="rgb(251,115,12)"/><text x="39.8133%" y="95.50"></text></g><g><title>associated_items (211,053 samples, 0.29%)</title><rect x="39.4301%" y="117" width="0.2907%" height="15" fill="rgb(240,54,50)"/><text x="39.6801%" y="127.50"></text></g><g><title>adt_dtorck_constraint (90,481 samples, 0.12%)</title><rect x="40.0388%" y="101" width="0.1246%" height="15" fill="rgb(233,84,52)"/><text x="40.2888%" y="111.50"></text></g><g><title>dropck_outlives (329,142 samples, 0.45%)</title><rect x="39.7720%" y="117" width="0.4534%" height="15" fill="rgb(207,117,47)"/><text x="40.0220%" y="127.50"></text></g><g><title>evaluate_obligation (455,074 samples, 0.63%)</title><rect x="40.2254%" y="117" width="0.6269%" height="15" fill="rgb(249,43,39)"/><text x="40.4754%" y="127.50"></text></g><g><title>fn_sig (78,880 samples, 0.11%)</title><rect x="40.8710%" y="117" width="0.1087%" height="15" fill="rgb(209,38,44)"/><text x="41.1210%" y="127.50"></text></g><g><title>item_attrs (133,422 samples, 0.18%)</title><rect x="41.1866%" y="117" width="0.1838%" height="15" fill="rgb(236,212,23)"/><text x="41.4366%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (128,002 samples, 0.18%)</title><rect x="41.1940%" y="101" width="0.1763%" height="15" fill="rgb(242,79,21)"/><text x="41.4440%" y="111.50"></text></g><g><title>method_autoderef_steps (420,794 samples, 0.58%)</title><rect x="41.4236%" y="117" width="0.5797%" height="15" fill="rgb(211,96,35)"/><text x="41.6736%" y="127.50"></text></g><g><title>evaluate_obligation (116,490 samples, 0.16%)</title><rect x="41.8428%" y="101" width="0.1605%" height="15" fill="rgb(253,215,40)"/><text x="42.0928%" y="111.50"></text></g><g><title>object_safety_violations (145,501 samples, 0.20%)</title><rect x="42.0033%" y="117" width="0.2004%" height="15" fill="rgb(211,81,21)"/><text x="42.2533%" y="127.50"></text></g><g><title>predicates_of (201,592 samples, 0.28%)</title><rect x="42.2350%" y="117" width="0.2777%" height="15" fill="rgb(208,190,38)"/><text x="42.4850%" y="127.50"></text></g><g><title>predicates_defined_on (144,271 samples, 0.20%)</title><rect x="42.3139%" y="101" width="0.1987%" height="15" fill="rgb(235,213,38)"/><text x="42.5639%" y="111.50"></text></g><g><title>item_bodies_checking (9,294,844 samples, 12.80%)</title><rect x="29.9346%" y="165" width="12.8047%" height="15" fill="rgb(237,122,38)"/><text x="30.1846%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,292,244 samples, 12.80%)</title><rect x="29.9382%" y="149" width="12.8011%" height="15" fill="rgb(244,218,35)"/><text x="30.1882%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (9,261,454 samples, 12.76%)</title><rect x="29.9806%" y="133" width="12.7587%" height="15" fill="rgb(240,68,47)"/><text x="30.2306%" y="143.50">typeck</text></g><g><title>adt_destructor (318,795 samples, 0.44%)</title><rect x="44.3966%" y="133" width="0.4392%" height="15" fill="rgb(210,16,53)"/><text x="44.6466%" y="143.50"></text></g><g><title>coherent_trait (312,204 samples, 0.43%)</title><rect x="44.4057%" y="117" width="0.4301%" height="15" fill="rgb(235,124,12)"/><text x="44.6557%" y="127.50"></text></g><g><title>specialization_graph_of (310,064 samples, 0.43%)</title><rect x="44.4087%" y="101" width="0.4271%" height="15" fill="rgb(224,169,11)"/><text x="44.6587%" y="111.50"></text></g><g><title>impl_trait_ref (165,823 samples, 0.23%)</title><rect x="44.6074%" y="85" width="0.2284%" height="15" fill="rgb(250,166,2)"/><text x="44.8574%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (146,123 samples, 0.20%)</title><rect x="44.6345%" y="69" width="0.2013%" height="15" fill="rgb(242,216,29)"/><text x="44.8845%" y="79.50"></text></g><g><title>evaluate_obligation (266,543 samples, 0.37%)</title><rect x="44.8499%" y="133" width="0.3672%" height="15" fill="rgb(230,116,27)"/><text x="45.0999%" y="143.50"></text></g><g><title>predicates_of (235,442 samples, 0.32%)</title><rect x="44.8927%" y="117" width="0.3243%" height="15" fill="rgb(228,99,48)"/><text x="45.1427%" y="127.50"></text></g><g><title>predicates_defined_on (231,042 samples, 0.32%)</title><rect x="44.8988%" y="101" width="0.3183%" height="15" fill="rgb(253,11,6)"/><text x="45.1488%" y="111.50"></text></g><g><title>item_types_checking (1,943,321 samples, 2.68%)</title><rect x="42.7393%" y="165" width="2.6771%" height="15" fill="rgb(247,143,39)"/><text x="42.9893%" y="175.50">it..</text></g><g><title>check_mod_item_types (1,937,881 samples, 2.67%)</title><rect x="42.7468%" y="149" width="2.6696%" height="15" fill="rgb(236,97,10)"/><text x="42.9968%" y="159.50">ch..</text></g><g><title>typeck (97,451 samples, 0.13%)</title><rect x="45.2822%" y="133" width="0.1342%" height="15" fill="rgb(233,208,19)"/><text x="45.5322%" y="143.50"></text></g><g><title>fn_sig (192,121 samples, 0.26%)</title><rect x="45.7093%" y="133" width="0.2647%" height="15" fill="rgb(216,164,2)"/><text x="45.9593%" y="143.50"></text></g><g><title>generics_of (198,292 samples, 0.27%)</title><rect x="45.9739%" y="133" width="0.2732%" height="15" fill="rgb(220,129,5)"/><text x="46.2239%" y="143.50"></text></g><g><title>item_bounds (83,031 samples, 0.11%)</title><rect x="46.2890%" y="133" width="0.1144%" height="15" fill="rgb(242,17,10)"/><text x="46.5390%" y="143.50"></text></g><g><title>lint_levels (131,301 samples, 0.18%)</title><rect x="47.2358%" y="53" width="0.1809%" height="15" fill="rgb(242,107,0)"/><text x="47.4858%" y="63.50"></text></g><g><title>late_bound_vars_map (369,985 samples, 0.51%)</title><rect x="46.9092%" y="85" width="0.5097%" height="15" fill="rgb(251,28,31)"/><text x="47.1592%" y="95.50"></text></g><g><title>resolve_lifetimes (351,875 samples, 0.48%)</title><rect x="46.9341%" y="69" width="0.4847%" height="15" fill="rgb(233,223,10)"/><text x="47.1841%" y="79.50"></text></g><g><title>explicit_predicates_of (745,238 samples, 1.03%)</title><rect x="46.5495%" y="101" width="1.0266%" height="15" fill="rgb(215,21,27)"/><text x="46.7995%" y="111.50"></text></g><g><title>predicates_of (1,155,622 samples, 1.59%)</title><rect x="46.4034%" y="133" width="1.5920%" height="15" fill="rgb(232,23,21)"/><text x="46.6534%" y="143.50"></text></g><g><title>predicates_defined_on (1,115,482 samples, 1.54%)</title><rect x="46.4587%" y="117" width="1.5367%" height="15" fill="rgb(244,5,23)"/><text x="46.7087%" y="127.50"></text></g><g><title>inferred_outlives_of (304,343 samples, 0.42%)</title><rect x="47.5761%" y="101" width="0.4193%" height="15" fill="rgb(226,81,46)"/><text x="47.8261%" y="111.50"></text></g><g><title>inferred_outlives_crate (287,533 samples, 0.40%)</title><rect x="47.5993%" y="85" width="0.3961%" height="15" fill="rgb(247,70,30)"/><text x="47.8493%" y="95.50"></text></g><g><title>type_of (174,192 samples, 0.24%)</title><rect x="47.7554%" y="69" width="0.2400%" height="15" fill="rgb(212,68,19)"/><text x="48.0054%" y="79.50"></text></g><g><title>type_collecting (2,140,673 samples, 2.95%)</title><rect x="45.4209%" y="165" width="2.9490%" height="15" fill="rgb(240,187,13)"/><text x="45.6709%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,131,953 samples, 2.94%)</title><rect x="45.4329%" y="149" width="2.9370%" height="15" fill="rgb(223,113,26)"/><text x="45.6829%" y="159.50">co..</text></g><g><title>type_of (231,543 samples, 0.32%)</title><rect x="48.0509%" y="133" width="0.3190%" height="15" fill="rgb(206,192,2)"/><text x="48.3009%" y="143.50"></text></g><g><title>evaluate_obligation (771,856 samples, 1.06%)</title><rect x="51.2225%" y="133" width="1.0633%" height="15" fill="rgb(241,108,4)"/><text x="51.4725%" y="143.50"></text></g><g><title>implied_outlives_bounds (271,682 samples, 0.37%)</title><rect x="52.3442%" y="133" width="0.3743%" height="15" fill="rgb(247,173,49)"/><text x="52.5942%" y="143.50"></text></g><g><title>param_env (222,883 samples, 0.31%)</title><rect x="52.7296%" y="133" width="0.3070%" height="15" fill="rgb(224,114,35)"/><text x="52.9796%" y="143.50"></text></g><g><title>predicates_of (77,750 samples, 0.11%)</title><rect x="53.0367%" y="133" width="0.1071%" height="15" fill="rgb(245,159,27)"/><text x="53.2867%" y="143.50"></text></g><g><title>region_scope_tree (115,563 samples, 0.16%)</title><rect x="53.1438%" y="133" width="0.1592%" height="15" fill="rgb(245,172,44)"/><text x="53.3938%" y="143.50"></text></g><g><title>trait_impls_of (270,833 samples, 0.37%)</title><rect x="53.3030%" y="133" width="0.3731%" height="15" fill="rgb(236,23,11)"/><text x="53.5530%" y="143.50"></text></g><g><title>implementations_of_trait (92,060 samples, 0.13%)</title><rect x="53.5493%" y="117" width="0.1268%" height="15" fill="rgb(205,117,38)"/><text x="53.7993%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,707,071 samples, 5.11%)</title><rect x="48.5725%" y="149" width="5.1069%" height="15" fill="rgb(237,72,25)"/><text x="48.8225%" y="159.50">check_..</text></g><g><title>evaluate_obligation (135,931 samples, 0.19%)</title><rect x="55.8170%" y="133" width="0.1873%" height="15" fill="rgb(244,70,9)"/><text x="56.0670%" y="143.50"></text></g><g><title>implied_outlives_bounds (97,280 samples, 0.13%)</title><rect x="56.0231%" y="133" width="0.1340%" height="15" fill="rgb(217,125,39)"/><text x="56.2731%" y="143.50"></text></g><g><title>param_env (360,355 samples, 0.50%)</title><rect x="56.1787%" y="133" width="0.4964%" height="15" fill="rgb(235,36,10)"/><text x="56.4287%" y="143.50"></text></g><g><title>predicates_of (83,630 samples, 0.12%)</title><rect x="56.6751%" y="133" width="0.1152%" height="15" fill="rgb(251,123,47)"/><text x="56.9251%" y="143.50"></text></g><g><title>trait_impls_of (107,342 samples, 0.15%)</title><rect x="56.8559%" y="133" width="0.1479%" height="15" fill="rgb(221,13,13)"/><text x="57.1059%" y="143.50"></text></g><g><title>check_item_well_formed (2,501,436 samples, 3.45%)</title><rect x="53.6794%" y="149" width="3.4460%" height="15" fill="rgb(238,131,9)"/><text x="53.9294%" y="159.50">che..</text></g><g><title>variances_of (88,281 samples, 0.12%)</title><rect x="57.0038%" y="133" width="0.1216%" height="15" fill="rgb(211,50,8)"/><text x="57.2538%" y="143.50"></text></g><g><title>crate_variances (83,291 samples, 0.11%)</title><rect x="57.0106%" y="117" width="0.1147%" height="15" fill="rgb(245,182,24)"/><text x="57.2606%" y="127.50"></text></g><g><title>analysis (41,359,709 samples, 56.98%)</title><rect x="0.5344%" y="197" width="56.9775%" height="15" fill="rgb(242,14,37)"/><text x="0.7844%" y="207.50">analysis</text></g><g><title>type_check_crate (25,723,665 samples, 35.44%)</title><rect x="22.0748%" y="181" width="35.4372%" height="15" fill="rgb(246,228,12)"/><text x="22.3248%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,634,124 samples, 9.14%)</title><rect x="48.3727%" y="165" width="9.1392%" height="15" fill="rgb(213,55,15)"/><text x="48.6227%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (280,583 samples, 0.39%)</title><rect x="57.1254%" y="149" width="0.3865%" height="15" fill="rgb(209,9,3)"/><text x="57.3754%" y="159.50"></text></g><g><title>codegen_crate (390,275 samples, 0.54%)</title><rect x="57.5196%" y="197" width="0.5376%" height="15" fill="rgb(230,59,30)"/><text x="57.7696%" y="207.50"></text></g><g><title>AST_validation (136,112 samples, 0.19%)</title><rect x="58.2317%" y="181" width="0.1875%" height="15" fill="rgb(209,121,21)"/><text x="58.4817%" y="191.50"></text></g><g><title>metadata_load_macro (129,201 samples, 0.18%)</title><rect x="79.8374%" y="149" width="0.1780%" height="15" fill="rgb(220,109,13)"/><text x="80.0874%" y="159.50"></text></g><g><title>metadata_register_crate (5,085,968 samples, 7.01%)</title><rect x="80.0154%" y="149" width="7.0065%" height="15" fill="rgb(232,18,1)"/><text x="80.2654%" y="159.50">metadata_..</text></g><g><title>metadata_register_crate (3,847,183 samples, 5.30%)</title><rect x="81.7220%" y="133" width="5.2999%" height="15" fill="rgb(215,41,42)"/><text x="81.9720%" y="143.50">metada..</text></g><g><title>macro_expand_crate (20,715,780 samples, 28.54%)</title><rect x="58.5432%" y="181" width="28.5382%" height="15" fill="rgb(224,123,36)"/><text x="58.7932%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (20,698,970 samples, 28.52%)</title><rect x="58.5663%" y="165" width="28.5151%" height="15" fill="rgb(240,125,3)"/><text x="58.8163%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (73,031 samples, 0.10%)</title><rect x="87.0862%" y="181" width="0.1006%" height="15" fill="rgb(205,98,50)"/><text x="87.3362%" y="191.50"></text></g><g><title>late_resolve_crate (1,396,646 samples, 1.92%)</title><rect x="87.3545%" y="165" width="1.9240%" height="15" fill="rgb(205,185,37)"/><text x="87.6045%" y="175.50">l..</text></g><g><title>configure_and_expand (22,733,393 samples, 31.32%)</title><rect x="58.0572%" y="197" width="31.3177%" height="15" fill="rgb(238,207,15)"/><text x="58.3072%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,588,408 samples, 2.19%)</title><rect x="87.1868%" y="181" width="2.1882%" height="15" fill="rgb(213,199,42)"/><text x="87.4368%" y="191.50">r..</text></g><g><title>drop_ast (103,481 samples, 0.14%)</title><rect x="89.3750%" y="197" width="0.1426%" height="15" fill="rgb(235,201,11)"/><text x="89.6250%" y="207.50"></text></g><g><title>early_lint_checks (290,984 samples, 0.40%)</title><rect x="89.5415%" y="197" width="0.4009%" height="15" fill="rgb(207,46,11)"/><text x="89.7915%" y="207.50"></text></g><g><title>free_global_ctxt (2,719,761 samples, 3.75%)</title><rect x="89.9424%" y="197" width="3.7468%" height="15" fill="rgb(241,35,35)"/><text x="90.1924%" y="207.50">free..</text></g><g><title>generate_crate_metadata (1,138,262 samples, 1.57%)</title><rect x="93.6892%" y="197" width="1.5681%" height="15" fill="rgb(243,32,47)"/><text x="93.9392%" y="207.50"></text></g><g><title>hir_lowering (1,582,617 samples, 2.18%)</title><rect x="95.2572%" y="197" width="2.1802%" height="15" fill="rgb(247,202,23)"/><text x="95.5072%" y="207.50">h..</text></g><g><title>parse_crate (572,776 samples, 0.79%)</title><rect x="97.5117%" y="197" width="0.7891%" height="15" fill="rgb(219,102,11)"/><text x="97.7617%" y="207.50"></text></g><g><title>prepare_outputs (213,733 samples, 0.29%)</title><rect x="98.3075%" y="197" width="0.2944%" height="15" fill="rgb(243,110,44)"/><text x="98.5575%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (595,816 samples, 0.82%)</title><rect x="98.6020%" y="197" width="0.8208%" height="15" fill="rgb(222,74,54)"/><text x="98.8520%" y="207.50"></text></g><g><title>all (72,589,527 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (72,589,527 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (336,364 samples, 0.46%)</title><rect x="99.5366%" y="197" width="0.4634%" height="15" fill="rgb(217,163,10)"/><text x="99.7866%" y="207.50"></text></g></svg></svg>