<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (327,563 samples, 0.62%)</title><rect x="6.6349%" y="133" width="0.6212%" height="15" fill="rgb(227,0,7)"/><text x="6.8849%" y="143.50"></text></g><g><title>mir_const_qualif_const_arg (277,553 samples, 0.53%)</title><rect x="6.7297%" y="117" width="0.5264%" height="15" fill="rgb(217,0,24)"/><text x="6.9797%" y="127.50"></text></g><g><title>mir_const (229,573 samples, 0.44%)</title><rect x="6.8207%" y="101" width="0.4354%" height="15" fill="rgb(221,193,54)"/><text x="7.0707%" y="111.50"></text></g><g><title>unsafety_check_result_for_const_arg (133,691 samples, 0.25%)</title><rect x="7.0026%" y="85" width="0.2536%" height="15" fill="rgb(248,212,6)"/><text x="7.2526%" y="95.50"></text></g><g><title>mir_built (88,850 samples, 0.17%)</title><rect x="7.0876%" y="69" width="0.1685%" height="15" fill="rgb(208,68,35)"/><text x="7.3376%" y="79.50"></text></g><g><title>mir_borrowck_const_arg (800,309 samples, 1.52%)</title><rect x="5.7400%" y="149" width="1.5178%" height="15" fill="rgb(232,128,0)"/><text x="5.9900%" y="159.50"></text></g><g><title>param_env (137,872 samples, 0.26%)</title><rect x="7.9213%" y="117" width="0.2615%" height="15" fill="rgb(207,160,47)"/><text x="8.1713%" y="127.50"></text></g><g><title>item_attrs (148,651 samples, 0.28%)</title><rect x="8.5052%" y="85" width="0.2819%" height="15" fill="rgb(228,23,34)"/><text x="8.7552%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (143,711 samples, 0.27%)</title><rect x="8.5146%" y="69" width="0.2726%" height="15" fill="rgb(218,30,26)"/><text x="8.7646%" y="79.50"></text></g><g><title>codegen_fn_attrs (219,911 samples, 0.42%)</title><rect x="8.3793%" y="101" width="0.4171%" height="15" fill="rgb(220,122,19)"/><text x="8.6293%" y="111.50"></text></g><g><title>is_copy_raw (132,150 samples, 0.25%)</title><rect x="10.0095%" y="85" width="0.2506%" height="15" fill="rgb(250,228,42)"/><text x="10.2595%" y="95.50"></text></g><g><title>evaluate_obligation (113,160 samples, 0.21%)</title><rect x="10.0455%" y="69" width="0.2146%" height="15" fill="rgb(240,193,28)"/><text x="10.2955%" y="79.50"></text></g><g><title>needs_drop_raw (100,781 samples, 0.19%)</title><rect x="10.2601%" y="85" width="0.1911%" height="15" fill="rgb(216,20,37)"/><text x="10.5101%" y="95.50"></text></g><g><title>is_copy_raw (93,911 samples, 0.18%)</title><rect x="10.2731%" y="69" width="0.1781%" height="15" fill="rgb(206,188,39)"/><text x="10.5231%" y="79.50"></text></g><g><title>evaluate_obligation (83,861 samples, 0.16%)</title><rect x="10.2922%" y="53" width="0.1590%" height="15" fill="rgb(217,207,13)"/><text x="10.5422%" y="63.50"></text></g><g><title>trait_impls_of (57,840 samples, 0.11%)</title><rect x="10.3416%" y="37" width="0.1097%" height="15" fill="rgb(231,73,38)"/><text x="10.5916%" y="47.50"></text></g><g><title>resolve_instance (262,155 samples, 0.50%)</title><rect x="10.4513%" y="85" width="0.4972%" height="15" fill="rgb(225,20,46)"/><text x="10.7013%" y="95.50"></text></g><g><title>thir_body (282,373 samples, 0.54%)</title><rect x="10.9541%" y="85" width="0.5355%" height="15" fill="rgb(210,31,41)"/><text x="11.2041%" y="95.50"></text></g><g><title>mir_const (2,103,574 samples, 3.99%)</title><rect x="7.5035%" y="133" width="3.9896%" height="15" fill="rgb(221,200,47)"/><text x="7.7535%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (1,745,419 samples, 3.31%)</title><rect x="8.1828%" y="117" width="3.3103%" height="15" fill="rgb(226,26,5)"/><text x="8.4328%" y="127.50">uns..</text></g><g><title>mir_built (1,421,887 samples, 2.70%)</title><rect x="8.7964%" y="101" width="2.6967%" height="15" fill="rgb(249,33,26)"/><text x="9.0464%" y="111.50">mi..</text></g><g><title>mir_promoted (2,237,555 samples, 4.24%)</title><rect x="7.2579%" y="149" width="4.2437%" height="15" fill="rgb(235,183,28)"/><text x="7.5079%" y="159.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (101,882 samples, 0.19%)</title><rect x="11.5015%" y="149" width="0.1932%" height="15" fill="rgb(221,5,38)"/><text x="11.7515%" y="159.50"></text></g><g><title>normalize_projection_ty (54,022 samples, 0.10%)</title><rect x="11.5923%" y="133" width="0.1025%" height="15" fill="rgb(247,18,42)"/><text x="11.8423%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,581,142 samples, 10.58%)</title><rect x="1.9151%" y="181" width="10.5850%" height="15" fill="rgb(241,131,45)"/><text x="2.1651%" y="191.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (5,563,722 samples, 10.55%)</title><rect x="1.9481%" y="165" width="10.5519%" height="15" fill="rgb(249,31,29)"/><text x="2.1981%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (424,633 samples, 0.81%)</title><rect x="11.6947%" y="149" width="0.8053%" height="15" fill="rgb(225,111,53)"/><text x="11.9447%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (88,261 samples, 0.17%)</title><rect x="12.5182%" y="165" width="0.1674%" height="15" fill="rgb(238,160,17)"/><text x="12.7682%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (86,751 samples, 0.16%)</title><rect x="12.5211%" y="149" width="0.1645%" height="15" fill="rgb(214,148,48)"/><text x="12.7711%" y="159.50"></text></g><g><title>MIR_effect_checking (98,661 samples, 0.19%)</title><rect x="12.5001%" y="181" width="0.1871%" height="15" fill="rgb(232,36,49)"/><text x="12.7501%" y="191.50"></text></g><g><title>hir_module_items (122,721 samples, 0.23%)</title><rect x="12.6872%" y="181" width="0.2327%" height="15" fill="rgb(209,103,24)"/><text x="12.9372%" y="191.50"></text></g><g><title>codegen_fn_attrs (76,351 samples, 0.14%)</title><rect x="13.5237%" y="117" width="0.1448%" height="15" fill="rgb(229,88,8)"/><text x="13.7737%" y="127.50"></text></g><g><title>should_inherit_track_caller (132,272 samples, 0.25%)</title><rect x="13.4229%" y="133" width="0.2509%" height="15" fill="rgb(213,181,19)"/><text x="13.6729%" y="143.50"></text></g><g><title>codegen_fn_attrs (304,424 samples, 0.58%)</title><rect x="13.1771%" y="149" width="0.5774%" height="15" fill="rgb(254,191,54)"/><text x="13.4271%" y="159.50"></text></g><g><title>check_mod_attrs (418,204 samples, 0.79%)</title><rect x="12.9617%" y="165" width="0.7931%" height="15" fill="rgb(241,83,37)"/><text x="13.2117%" y="175.50"></text></g><g><title>check_mod_const_bodies (57,681 samples, 0.11%)</title><rect x="13.7549%" y="165" width="0.1094%" height="15" fill="rgb(233,36,39)"/><text x="14.0049%" y="175.50"></text></g><g><title>lookup_stability (84,760 samples, 0.16%)</title><rect x="14.1769%" y="149" width="0.1608%" height="15" fill="rgb(226,3,54)"/><text x="14.4269%" y="159.50"></text></g><g><title>stability_index (53,770 samples, 0.10%)</title><rect x="14.2357%" y="133" width="0.1020%" height="15" fill="rgb(245,192,40)"/><text x="14.4857%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (224,112 samples, 0.43%)</title><rect x="13.9426%" y="165" width="0.4250%" height="15" fill="rgb(238,167,29)"/><text x="14.1926%" y="175.50"></text></g><g><title>looking_for_derive_registrar (55,090 samples, 0.10%)</title><rect x="14.3713%" y="165" width="0.1045%" height="15" fill="rgb(232,182,51)"/><text x="14.6213%" y="175.50"></text></g><g><title>misc_checking_1 (824,719 samples, 1.56%)</title><rect x="12.9208%" y="181" width="1.5641%" height="15" fill="rgb(231,60,39)"/><text x="13.1708%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (208,363 samples, 0.40%)</title><rect x="14.4902%" y="165" width="0.3952%" height="15" fill="rgb(208,69,12)"/><text x="14.7402%" y="175.50"></text></g><g><title>check_mod_liveness (160,872 samples, 0.31%)</title><rect x="14.5803%" y="149" width="0.3051%" height="15" fill="rgb(235,93,37)"/><text x="14.8303%" y="159.50"></text></g><g><title>misc_checking_2 (355,634 samples, 0.67%)</title><rect x="14.4849%" y="181" width="0.6745%" height="15" fill="rgb(213,116,39)"/><text x="14.7349%" y="191.50"></text></g><g><title>match_checking (144,441 samples, 0.27%)</title><rect x="14.8854%" y="165" width="0.2739%" height="15" fill="rgb(222,207,29)"/><text x="15.1354%" y="175.50"></text></g><g><title>check_match (134,701 samples, 0.26%)</title><rect x="14.9039%" y="149" width="0.2555%" height="15" fill="rgb(206,96,30)"/><text x="15.1539%" y="159.50"></text></g><g><title>death_checking (94,911 samples, 0.18%)</title><rect x="15.2576%" y="165" width="0.1800%" height="15" fill="rgb(218,138,4)"/><text x="15.5076%" y="175.50"></text></g><g><title>crate_lints (118,261 samples, 0.22%)</title><rect x="15.4399%" y="149" width="0.2243%" height="15" fill="rgb(250,191,14)"/><text x="15.6899%" y="159.50"></text></g><g><title>lint_checking (193,142 samples, 0.37%)</title><rect x="15.4376%" y="165" width="0.3663%" height="15" fill="rgb(239,60,40)"/><text x="15.6876%" y="175.50"></text></g><g><title>module_lints (73,631 samples, 0.14%)</title><rect x="15.6642%" y="149" width="0.1396%" height="15" fill="rgb(206,27,48)"/><text x="15.9142%" y="159.50"></text></g><g><title>lint_mod (72,161 samples, 0.14%)</title><rect x="15.6670%" y="133" width="0.1369%" height="15" fill="rgb(225,35,8)"/><text x="15.9170%" y="143.50"></text></g><g><title>privacy_access_levels (56,571 samples, 0.11%)</title><rect x="15.8039%" y="165" width="0.1073%" height="15" fill="rgb(250,213,24)"/><text x="16.0539%" y="175.50"></text></g><g><title>privacy_checking_modules (142,672 samples, 0.27%)</title><rect x="15.9112%" y="165" width="0.2706%" height="15" fill="rgb(247,123,22)"/><text x="16.1612%" y="175.50"></text></g><g><title>check_mod_privacy (141,352 samples, 0.27%)</title><rect x="15.9137%" y="149" width="0.2681%" height="15" fill="rgb(231,138,38)"/><text x="16.1637%" y="159.50"></text></g><g><title>misc_checking_3 (545,917 samples, 1.04%)</title><rect x="15.1594%" y="181" width="1.0354%" height="15" fill="rgb(231,145,46)"/><text x="15.4094%" y="191.50"></text></g><g><title>impl_parent (61,030 samples, 0.12%)</title><rect x="16.7375%" y="117" width="0.1157%" height="15" fill="rgb(251,118,11)"/><text x="16.9875%" y="127.50"></text></g><g><title>impl_trait_ref (360,235 samples, 0.68%)</title><rect x="16.8532%" y="117" width="0.6832%" height="15" fill="rgb(217,147,25)"/><text x="17.1032%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (313,774 samples, 0.60%)</title><rect x="16.9414%" y="101" width="0.5951%" height="15" fill="rgb(247,81,37)"/><text x="17.1914%" y="111.50"></text></g><g><title>coherent_trait (693,497 samples, 1.32%)</title><rect x="16.3278%" y="149" width="1.3153%" height="15" fill="rgb(209,12,38)"/><text x="16.5778%" y="159.50"></text></g><g><title>specialization_graph_of (682,037 samples, 1.29%)</title><rect x="16.3495%" y="133" width="1.2935%" height="15" fill="rgb(227,1,9)"/><text x="16.5995%" y="143.50"></text></g><g><title>trait_impls_of (56,190 samples, 0.11%)</title><rect x="17.5365%" y="117" width="0.1066%" height="15" fill="rgb(248,47,43)"/><text x="17.7865%" y="127.50"></text></g><g><title>coherence_checking (769,999 samples, 1.46%)</title><rect x="16.2801%" y="165" width="1.4603%" height="15" fill="rgb(221,10,30)"/><text x="16.5301%" y="175.50"></text></g><g><title>associated_item (286,583 samples, 0.54%)</title><rect x="32.6383%" y="101" width="0.5435%" height="15" fill="rgb(210,229,1)"/><text x="32.8883%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (207,221 samples, 0.39%)</title><rect x="32.7888%" y="85" width="0.3930%" height="15" fill="rgb(222,148,37)"/><text x="33.0388%" y="95.50"></text></g><g><title>associated_items (455,264 samples, 0.86%)</title><rect x="32.3526%" y="117" width="0.8634%" height="15" fill="rgb(234,67,33)"/><text x="32.6026%" y="127.50"></text></g><g><title>generics_of (752,291 samples, 1.43%)</title><rect x="38.0446%" y="101" width="1.4268%" height="15" fill="rgb(247,98,35)"/><text x="38.2946%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (611,197 samples, 1.16%)</title><rect x="38.3122%" y="85" width="1.1592%" height="15" fill="rgb(247,138,52)"/><text x="38.5622%" y="95.50"></text></g><g><title>impl_trait_ref (1,123,370 samples, 2.13%)</title><rect x="39.5806%" y="101" width="2.1305%" height="15" fill="rgb(213,79,30)"/><text x="39.8306%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (965,959 samples, 1.83%)</title><rect x="39.8792%" y="85" width="1.8320%" height="15" fill="rgb(246,177,23)"/><text x="40.1292%" y="95.50">m..</text></g><g><title>predicates_of (274,635 samples, 0.52%)</title><rect x="41.7839%" y="101" width="0.5209%" height="15" fill="rgb(230,62,27)"/><text x="42.0339%" y="111.50"></text></g><g><title>predicates_defined_on (159,301 samples, 0.30%)</title><rect x="42.0026%" y="85" width="0.3021%" height="15" fill="rgb(216,154,8)"/><text x="42.2526%" y="95.50"></text></g><g><title>specializes (743,579 samples, 1.41%)</title><rect x="42.3047%" y="101" width="1.4102%" height="15" fill="rgb(244,35,45)"/><text x="42.5547%" y="111.50"></text></g><g><title>param_env (463,746 samples, 0.88%)</title><rect x="42.8355%" y="85" width="0.8795%" height="15" fill="rgb(251,115,12)"/><text x="43.0855%" y="95.50"></text></g><g><title>def_span (210,061 samples, 0.40%)</title><rect x="43.3166%" y="69" width="0.3984%" height="15" fill="rgb(240,54,50)"/><text x="43.5666%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (189,610 samples, 0.36%)</title><rect x="43.3554%" y="53" width="0.3596%" height="15" fill="rgb(233,84,52)"/><text x="43.6054%" y="63.50"></text></g><g><title>trait_impls_of (248,113 samples, 0.47%)</title><rect x="43.7453%" y="101" width="0.4706%" height="15" fill="rgb(207,117,47)"/><text x="43.9953%" y="111.50"></text></g><g><title>implementations_of_trait (89,110 samples, 0.17%)</title><rect x="44.0468%" y="85" width="0.1690%" height="15" fill="rgb(249,43,39)"/><text x="44.2968%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (75,810 samples, 0.14%)</title><rect x="44.0720%" y="69" width="0.1438%" height="15" fill="rgb(209,38,44)"/><text x="44.3220%" y="79.50"></text></g><g><title>evaluate_obligation (5,777,269 samples, 10.96%)</title><rect x="33.2900%" y="117" width="10.9569%" height="15" fill="rgb(236,212,23)"/><text x="33.5400%" y="127.50">evaluate_obligat..</text></g><g><title>fn_sig (133,001 samples, 0.25%)</title><rect x="44.2745%" y="117" width="0.2522%" height="15" fill="rgb(242,79,21)"/><text x="44.5245%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (118,241 samples, 0.22%)</title><rect x="44.3025%" y="101" width="0.2243%" height="15" fill="rgb(211,96,35)"/><text x="44.5525%" y="111.50"></text></g><g><title>generics_of (716,225 samples, 1.36%)</title><rect x="44.5268%" y="117" width="1.3584%" height="15" fill="rgb(253,215,40)"/><text x="44.7768%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (542,094 samples, 1.03%)</title><rect x="44.8570%" y="101" width="1.0281%" height="15" fill="rgb(211,81,21)"/><text x="45.1070%" y="111.50"></text></g><g><title>impl_trait_ref (989,595 samples, 1.88%)</title><rect x="45.9341%" y="117" width="1.8768%" height="15" fill="rgb(208,190,38)"/><text x="46.1841%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (829,944 samples, 1.57%)</title><rect x="46.2368%" y="101" width="1.5740%" height="15" fill="rgb(235,213,38)"/><text x="46.4868%" y="111.50"></text></g><g><title>item_attrs (164,313 samples, 0.31%)</title><rect x="47.8244%" y="117" width="0.3116%" height="15" fill="rgb(237,122,38)"/><text x="48.0744%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (160,913 samples, 0.31%)</title><rect x="47.8309%" y="101" width="0.3052%" height="15" fill="rgb(244,218,35)"/><text x="48.0809%" y="111.50"></text></g><g><title>method_autoderef_steps (318,262 samples, 0.60%)</title><rect x="48.2003%" y="117" width="0.6036%" height="15" fill="rgb(240,68,47)"/><text x="48.4503%" y="127.50"></text></g><g><title>evaluate_obligation (167,691 samples, 0.32%)</title><rect x="48.4858%" y="101" width="0.3180%" height="15" fill="rgb(210,16,53)"/><text x="48.7358%" y="111.50"></text></g><g><title>associated_item (352,022 samples, 0.67%)</title><rect x="52.8495%" y="69" width="0.6676%" height="15" fill="rgb(235,124,12)"/><text x="53.0995%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (260,842 samples, 0.49%)</title><rect x="53.0224%" y="53" width="0.4947%" height="15" fill="rgb(224,169,11)"/><text x="53.2724%" y="63.50"></text></g><g><title>associated_items (492,464 samples, 0.93%)</title><rect x="52.6152%" y="85" width="0.9340%" height="15" fill="rgb(250,166,2)"/><text x="52.8652%" y="95.50"></text></g><g><title>dropck_outlives (55,661 samples, 0.11%)</title><rect x="53.5822%" y="85" width="0.1056%" height="15" fill="rgb(242,216,29)"/><text x="53.8322%" y="95.50"></text></g><g><title>evaluate_obligation (470,365 samples, 0.89%)</title><rect x="53.6878%" y="85" width="0.8921%" height="15" fill="rgb(230,116,27)"/><text x="53.9378%" y="95.50"></text></g><g><title>trait_impls_of (195,364 samples, 0.37%)</title><rect x="54.2094%" y="69" width="0.3705%" height="15" fill="rgb(228,99,48)"/><text x="54.4594%" y="79.50"></text></g><g><title>implementations_of_trait (61,041 samples, 0.12%)</title><rect x="54.4641%" y="53" width="0.1158%" height="15" fill="rgb(253,11,6)"/><text x="54.7141%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (54,101 samples, 0.10%)</title><rect x="54.4773%" y="37" width="0.1026%" height="15" fill="rgb(247,143,39)"/><text x="54.7273%" y="47.50"></text></g><g><title>associated_item (121,011 samples, 0.23%)</title><rect x="54.7583%" y="53" width="0.2295%" height="15" fill="rgb(236,97,10)"/><text x="55.0083%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (119,711 samples, 0.23%)</title><rect x="54.7608%" y="37" width="0.2270%" height="15" fill="rgb(233,208,19)"/><text x="55.0108%" y="47.50"></text></g><g><title>impl_item_implementor_ids (127,661 samples, 0.24%)</title><rect x="54.7481%" y="85" width="0.2421%" height="15" fill="rgb(216,164,2)"/><text x="54.9981%" y="95.50"></text></g><g><title>associated_items (125,271 samples, 0.24%)</title><rect x="54.7526%" y="69" width="0.2376%" height="15" fill="rgb(220,129,5)"/><text x="55.0026%" y="79.50"></text></g><g><title>evaluate_obligation (114,951 samples, 0.22%)</title><rect x="55.3902%" y="69" width="0.2180%" height="15" fill="rgb(242,17,10)"/><text x="55.6402%" y="79.50"></text></g><g><title>method_autoderef_steps (246,623 samples, 0.47%)</title><rect x="55.1917%" y="85" width="0.4677%" height="15" fill="rgb(242,107,0)"/><text x="55.4417%" y="95.50"></text></g><g><title>predicates_of (92,841 samples, 0.18%)</title><rect x="55.6732%" y="85" width="0.1761%" height="15" fill="rgb(251,28,31)"/><text x="55.9232%" y="95.50"></text></g><g><title>predicates_defined_on (54,650 samples, 0.10%)</title><rect x="55.7456%" y="69" width="0.1036%" height="15" fill="rgb(233,223,10)"/><text x="55.9956%" y="79.50"></text></g><g><title>opt_const_param_of (3,808,322 samples, 7.22%)</title><rect x="48.8039%" y="117" width="7.2227%" height="15" fill="rgb(215,21,27)"/><text x="49.0539%" y="127.50">opt_const_..</text></g><g><title>typeck (3,794,302 samples, 7.20%)</title><rect x="48.8305%" y="101" width="7.1961%" height="15" fill="rgb(232,23,21)"/><text x="49.0805%" y="111.50">typeck</text></g><g><title>metadata_decode_entry_explicit_predicates_of (73,850 samples, 0.14%)</title><rect x="56.4624%" y="69" width="0.1401%" height="15" fill="rgb(244,5,23)"/><text x="56.7124%" y="79.50"></text></g><g><title>explicit_predicates_of (101,830 samples, 0.19%)</title><rect x="56.4104%" y="85" width="0.1931%" height="15" fill="rgb(226,81,46)"/><text x="56.6604%" y="95.50"></text></g><g><title>predicates_of (330,933 samples, 0.63%)</title><rect x="56.0450%" y="117" width="0.6276%" height="15" fill="rgb(247,70,30)"/><text x="56.2950%" y="127.50"></text></g><g><title>predicates_defined_on (220,851 samples, 0.42%)</title><rect x="56.2537%" y="101" width="0.4189%" height="15" fill="rgb(212,68,19)"/><text x="56.5037%" y="111.50"></text></g><g><title>specializes (202,651 samples, 0.38%)</title><rect x="56.6726%" y="117" width="0.3843%" height="15" fill="rgb(240,187,13)"/><text x="56.9226%" y="127.50"></text></g><g><title>param_env (99,850 samples, 0.19%)</title><rect x="56.8676%" y="101" width="0.1894%" height="15" fill="rgb(223,113,26)"/><text x="57.1176%" y="111.50"></text></g><g><title>typeck_const_arg (175,032 samples, 0.33%)</title><rect x="57.1439%" y="117" width="0.3320%" height="15" fill="rgb(206,192,2)"/><text x="57.3939%" y="127.50"></text></g><g><title>item_bodies_checking (20,935,333 samples, 39.71%)</title><rect x="17.7911%" y="165" width="39.7051%" height="15" fill="rgb(241,108,4)"/><text x="18.0411%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,931,583 samples, 39.70%)</title><rect x="17.7982%" y="149" width="39.6980%" height="15" fill="rgb(247,173,49)"/><text x="18.0482%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (20,914,663 samples, 39.67%)</title><rect x="17.8303%" y="133" width="39.6659%" height="15" fill="rgb(224,114,35)"/><text x="18.0803%" y="143.50">typeck</text></g><g><title>item_types_checking (554,926 samples, 1.05%)</title><rect x="57.4962%" y="165" width="1.0524%" height="15" fill="rgb(245,159,27)"/><text x="57.7462%" y="175.50"></text></g><g><title>check_mod_item_types (550,626 samples, 1.04%)</title><rect x="57.5043%" y="149" width="1.0443%" height="15" fill="rgb(245,172,44)"/><text x="57.7543%" y="159.50"></text></g><g><title>is_late_bound_map (97,172 samples, 0.18%)</title><rect x="59.0889%" y="117" width="0.1843%" height="15" fill="rgb(236,23,11)"/><text x="59.3389%" y="127.50"></text></g><g><title>resolve_lifetimes (81,612 samples, 0.15%)</title><rect x="59.1184%" y="101" width="0.1548%" height="15" fill="rgb(205,117,38)"/><text x="59.3684%" y="111.50"></text></g><g><title>named_region_map (132,521 samples, 0.25%)</title><rect x="59.2732%" y="117" width="0.2513%" height="15" fill="rgb(237,72,25)"/><text x="59.5232%" y="127.50"></text></g><g><title>resolve_lifetimes (121,991 samples, 0.23%)</title><rect x="59.2932%" y="101" width="0.2314%" height="15" fill="rgb(244,70,9)"/><text x="59.5432%" y="111.50"></text></g><g><title>generics_of (335,244 samples, 0.64%)</title><rect x="58.9264%" y="133" width="0.6358%" height="15" fill="rgb(217,125,39)"/><text x="59.1764%" y="143.50"></text></g><g><title>trait_explicit_predicates_and_bounds (62,070 samples, 0.12%)</title><rect x="60.4396%" y="85" width="0.1177%" height="15" fill="rgb(235,36,10)"/><text x="60.6896%" y="95.50"></text></g><g><title>explicit_predicates_of (457,116 samples, 0.87%)</title><rect x="59.6924%" y="101" width="0.8669%" height="15" fill="rgb(251,123,47)"/><text x="59.9424%" y="111.50"></text></g><g><title>predicates_of (664,709 samples, 1.26%)</title><rect x="59.6004%" y="133" width="1.2607%" height="15" fill="rgb(221,13,13)"/><text x="59.8504%" y="143.50"></text></g><g><title>predicates_defined_on (645,769 samples, 1.22%)</title><rect x="59.6363%" y="117" width="1.2247%" height="15" fill="rgb(238,131,9)"/><text x="59.8863%" y="127.50"></text></g><g><title>inferred_outlives_of (159,093 samples, 0.30%)</title><rect x="60.5593%" y="101" width="0.3017%" height="15" fill="rgb(211,50,8)"/><text x="60.8093%" y="111.50"></text></g><g><title>inferred_outlives_crate (142,142 samples, 0.27%)</title><rect x="60.5915%" y="85" width="0.2696%" height="15" fill="rgb(245,182,24)"/><text x="60.8415%" y="95.50"></text></g><g><title>type_collecting (1,409,036 samples, 2.67%)</title><rect x="58.5513%" y="165" width="2.6723%" height="15" fill="rgb(242,14,37)"/><text x="58.8013%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (1,397,696 samples, 2.65%)</title><rect x="58.5728%" y="149" width="2.6508%" height="15" fill="rgb(246,228,12)"/><text x="58.8228%" y="159.50">co..</text></g><g><title>type_of (143,661 samples, 0.27%)</title><rect x="60.9511%" y="133" width="0.2725%" height="15" fill="rgb(213,55,15)"/><text x="61.2011%" y="143.50"></text></g><g><title>evaluate_obligation (161,124 samples, 0.31%)</title><rect x="62.1007%" y="133" width="0.3056%" height="15" fill="rgb(209,9,3)"/><text x="62.3507%" y="143.50"></text></g><g><title>implied_outlives_bounds (83,571 samples, 0.16%)</title><rect x="62.4062%" y="133" width="0.1585%" height="15" fill="rgb(230,59,30)"/><text x="62.6562%" y="143.50"></text></g><g><title>param_env (69,122 samples, 0.13%)</title><rect x="62.5647%" y="133" width="0.1311%" height="15" fill="rgb(209,121,21)"/><text x="62.8147%" y="143.50"></text></g><g><title>check_impl_item_well_formed (810,999 samples, 1.54%)</title><rect x="61.3605%" y="149" width="1.5381%" height="15" fill="rgb(220,109,13)"/><text x="61.6105%" y="159.50"></text></g><g><title>region_scope_tree (106,931 samples, 0.20%)</title><rect x="62.6958%" y="133" width="0.2028%" height="15" fill="rgb(232,18,1)"/><text x="62.9458%" y="143.50"></text></g><g><title>evaluate_obligation (151,762 samples, 0.29%)</title><rect x="64.3573%" y="133" width="0.2878%" height="15" fill="rgb(215,41,42)"/><text x="64.6073%" y="143.50"></text></g><g><title>implied_outlives_bounds (73,541 samples, 0.14%)</title><rect x="64.6513%" y="133" width="0.1395%" height="15" fill="rgb(224,123,36)"/><text x="64.9013%" y="143.50"></text></g><g><title>param_env (249,724 samples, 0.47%)</title><rect x="64.7907%" y="133" width="0.4736%" height="15" fill="rgb(240,125,3)"/><text x="65.0407%" y="143.50"></text></g><g><title>check_item_well_formed (1,393,406 samples, 2.64%)</title><rect x="62.8986%" y="149" width="2.6427%" height="15" fill="rgb(205,98,50)"/><text x="63.1486%" y="159.50">ch..</text></g><g><title>evaluate_obligation (180,352 samples, 0.34%)</title><rect x="66.0113%" y="133" width="0.3420%" height="15" fill="rgb(205,185,37)"/><text x="66.2613%" y="143.50"></text></g><g><title>implied_outlives_bounds (72,621 samples, 0.14%)</title><rect x="66.3534%" y="133" width="0.1377%" height="15" fill="rgb(238,207,15)"/><text x="66.6034%" y="143.50"></text></g><g><title>analysis (34,315,714 samples, 65.08%)</title><rect x="1.5238%" y="197" width="65.0818%" height="15" fill="rgb(213,199,42)"/><text x="1.7738%" y="207.50">analysis</text></g><g><title>type_check_crate (26,580,177 samples, 50.41%)</title><rect x="16.1947%" y="181" width="50.4109%" height="15" fill="rgb(235,201,11)"/><text x="16.4447%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,836,492 samples, 5.38%)</title><rect x="61.2260%" y="165" width="5.3796%" height="15" fill="rgb(207,46,11)"/><text x="61.4760%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (561,156 samples, 1.06%)</title><rect x="65.5413%" y="149" width="1.0643%" height="15" fill="rgb(241,35,35)"/><text x="65.7913%" y="159.50"></text></g><g><title>codegen_crate (332,284 samples, 0.63%)</title><rect x="66.6293%" y="197" width="0.6302%" height="15" fill="rgb(243,32,47)"/><text x="66.8793%" y="207.50"></text></g><g><title>AST_validation (144,462 samples, 0.27%)</title><rect x="67.6670%" y="181" width="0.2740%" height="15" fill="rgb(247,202,23)"/><text x="67.9170%" y="191.50"></text></g><g><title>crate_injection (96,201 samples, 0.18%)</title><rect x="68.0121%" y="181" width="0.1825%" height="15" fill="rgb(219,102,11)"/><text x="68.2621%" y="191.50"></text></g><g><title>macro_expand_crate (8,388,243 samples, 15.91%)</title><rect x="68.1946%" y="181" width="15.9088%" height="15" fill="rgb(243,110,44)"/><text x="68.4446%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (8,363,283 samples, 15.86%)</title><rect x="68.2419%" y="165" width="15.8615%" height="15" fill="rgb(222,74,54)"/><text x="68.4919%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (256,344 samples, 0.49%)</title><rect x="83.6172%" y="149" width="0.4862%" height="15" fill="rgb(216,99,12)"/><text x="83.8672%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (120,041 samples, 0.23%)</title><rect x="84.1124%" y="181" width="0.2277%" height="15" fill="rgb(226,22,26)"/><text x="84.3624%" y="191.50"></text></g><g><title>finalize_macro_resolutions (205,172 samples, 0.39%)</title><rect x="84.4254%" y="165" width="0.3891%" height="15" fill="rgb(217,163,10)"/><text x="84.6754%" y="175.50"></text></g><g><title>late_resolve_crate (1,225,613 samples, 2.32%)</title><rect x="84.8145%" y="165" width="2.3244%" height="15" fill="rgb(213,25,53)"/><text x="85.0645%" y="175.50">l..</text></g><g><title>configure_and_expand (10,544,587 samples, 20.00%)</title><rect x="67.2595%" y="197" width="19.9984%" height="15" fill="rgb(252,105,26)"/><text x="67.5095%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,538,477 samples, 2.92%)</title><rect x="84.3401%" y="181" width="2.9178%" height="15" fill="rgb(220,39,43)"/><text x="84.5901%" y="191.50">re..</text></g><g><title>drop_ast (83,951 samples, 0.16%)</title><rect x="87.2579%" y="197" width="0.1592%" height="15" fill="rgb(229,68,48)"/><text x="87.5079%" y="207.50"></text></g><g><title>early_lint_checks (190,502 samples, 0.36%)</title><rect x="87.4437%" y="197" width="0.3613%" height="15" fill="rgb(252,8,32)"/><text x="87.6937%" y="207.50"></text></g><g><title>free_global_ctxt (1,806,181 samples, 3.43%)</title><rect x="87.8050%" y="197" width="3.4255%" height="15" fill="rgb(223,20,43)"/><text x="88.0550%" y="207.50">fre..</text></g><g><title>crate_hash (61,641 samples, 0.12%)</title><rect x="91.7714%" y="181" width="0.1169%" height="15" fill="rgb(229,81,49)"/><text x="92.0214%" y="191.50"></text></g><g><title>generate_crate_metadata (453,225 samples, 0.86%)</title><rect x="91.2305%" y="197" width="0.8596%" height="15" fill="rgb(236,28,36)"/><text x="91.4805%" y="207.50"></text></g><g><title>hir_lowering (1,252,594 samples, 2.38%)</title><rect x="92.0901%" y="197" width="2.3756%" height="15" fill="rgb(249,185,26)"/><text x="92.3401%" y="207.50">hi..</text></g><g><title>parse_crate (1,725,820 samples, 3.27%)</title><rect x="94.5434%" y="197" width="3.2731%" height="15" fill="rgb(249,174,33)"/><text x="94.7934%" y="207.50">par..</text></g><g><title>prepare_outputs (302,214 samples, 0.57%)</title><rect x="97.8317%" y="197" width="0.5732%" height="15" fill="rgb(233,201,37)"/><text x="98.0817%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (408,454 samples, 0.77%)</title><rect x="98.4049%" y="197" width="0.7747%" height="15" fill="rgb(221,78,26)"/><text x="98.6549%" y="207.50"></text></g><g><title>setup_global_ctxt (148,651 samples, 0.28%)</title><rect x="99.1991%" y="197" width="0.2819%" height="15" fill="rgb(250,127,30)"/><text x="99.4491%" y="207.50"></text></g><g><title>all (52,727,089 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (52,727,089 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (273,653 samples, 0.52%)</title><rect x="99.4810%" y="197" width="0.5190%" height="15" fill="rgb(249,83,47)"/><text x="99.7310%" y="207.50"></text></g></svg></svg>