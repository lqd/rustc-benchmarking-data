<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (105,770 samples, 0.11%)</title><rect x="9.1944%" y="117" width="0.1051%" height="15" fill="rgb(227,0,7)"/><text x="9.4444%" y="127.50"></text></g><g><title>item_attrs (111,071 samples, 0.11%)</title><rect x="9.6010%" y="85" width="0.1104%" height="15" fill="rgb(217,0,24)"/><text x="9.8510%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (107,101 samples, 0.11%)</title><rect x="9.6049%" y="69" width="0.1064%" height="15" fill="rgb(221,193,54)"/><text x="9.8549%" y="79.50"></text></g><g><title>codegen_fn_attrs (168,942 samples, 0.17%)</title><rect x="9.5492%" y="101" width="0.1679%" height="15" fill="rgb(248,212,6)"/><text x="9.7992%" y="111.50"></text></g><g><title>is_copy_raw (113,932 samples, 0.11%)</title><rect x="11.5319%" y="85" width="0.1132%" height="15" fill="rgb(208,68,35)"/><text x="11.7819%" y="95.50"></text></g><g><title>adt_drop_tys (103,193 samples, 0.10%)</title><rect x="11.6833%" y="69" width="0.1026%" height="15" fill="rgb(232,128,0)"/><text x="11.9333%" y="79.50"></text></g><g><title>needs_drop_raw (401,036 samples, 0.40%)</title><rect x="11.6452%" y="85" width="0.3986%" height="15" fill="rgb(207,160,47)"/><text x="11.8952%" y="95.50"></text></g><g><title>is_copy_raw (259,473 samples, 0.26%)</title><rect x="11.7859%" y="69" width="0.2579%" height="15" fill="rgb(228,23,34)"/><text x="12.0359%" y="79.50"></text></g><g><title>evaluate_obligation (220,673 samples, 0.22%)</title><rect x="11.8244%" y="53" width="0.2193%" height="15" fill="rgb(218,30,26)"/><text x="12.0744%" y="63.50"></text></g><g><title>resolve_instance (162,294 samples, 0.16%)</title><rect x="12.0437%" y="85" width="0.1613%" height="15" fill="rgb(220,122,19)"/><text x="12.2937%" y="95.50"></text></g><g><title>thir_body (715,406 samples, 0.71%)</title><rect x="12.2160%" y="85" width="0.7110%" height="15" fill="rgb(250,228,42)"/><text x="12.4660%" y="95.50"></text></g><g><title>mir_const (4,237,874 samples, 4.21%)</title><rect x="8.7219%" y="133" width="4.2118%" height="15" fill="rgb(240,193,28)"/><text x="8.9719%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (3,656,721 samples, 3.63%)</title><rect x="9.2995%" y="117" width="3.6342%" height="15" fill="rgb(216,20,37)"/><text x="9.5495%" y="127.50">unsa..</text></g><g><title>mir_built (3,236,498 samples, 3.22%)</title><rect x="9.7172%" y="101" width="3.2166%" height="15" fill="rgb(206,188,39)"/><text x="9.9672%" y="111.50">mir..</text></g><g><title>mir_promoted (5,109,334 samples, 5.08%)</title><rect x="8.1765%" y="149" width="5.0779%" height="15" fill="rgb(217,207,13)"/><text x="8.4265%" y="159.50">mir_pr..</text></g><g><title>mir_const_qualif (322,603 samples, 0.32%)</title><rect x="12.9337%" y="133" width="0.3206%" height="15" fill="rgb(231,73,38)"/><text x="13.1837%" y="143.50"></text></g><g><title>mir_const (253,573 samples, 0.25%)</title><rect x="13.0023%" y="117" width="0.2520%" height="15" fill="rgb(225,20,46)"/><text x="13.2523%" y="127.50"></text></g><g><title>unsafety_check_result (175,123 samples, 0.17%)</title><rect x="13.0803%" y="101" width="0.1740%" height="15" fill="rgb(210,31,41)"/><text x="13.3303%" y="111.50"></text></g><g><title>mir_built (151,873 samples, 0.15%)</title><rect x="13.1034%" y="85" width="0.1509%" height="15" fill="rgb(221,200,47)"/><text x="13.3534%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (209,115 samples, 0.21%)</title><rect x="13.2559%" y="149" width="0.2078%" height="15" fill="rgb(226,26,5)"/><text x="13.5059%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (387,155 samples, 0.38%)</title><rect x="13.4638%" y="149" width="0.3848%" height="15" fill="rgb(249,33,26)"/><text x="13.7138%" y="159.50"></text></g><g><title>normalize_projection_ty (283,724 samples, 0.28%)</title><rect x="13.5666%" y="133" width="0.2820%" height="15" fill="rgb(235,183,28)"/><text x="13.8166%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,406,376 samples, 1.40%)</title><rect x="13.8892%" y="149" width="1.3977%" height="15" fill="rgb(221,5,38)"/><text x="14.1392%" y="159.50"></text></g><g><title>evaluate_obligation (111,951 samples, 0.11%)</title><rect x="15.1757%" y="133" width="0.1113%" height="15" fill="rgb(247,18,42)"/><text x="15.4257%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,616,315 samples, 14.53%)</title><rect x="0.7642%" y="181" width="14.5263%" height="15" fill="rgb(241,131,45)"/><text x="1.0142%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,545,925 samples, 14.46%)</title><rect x="0.8342%" y="165" width="14.4563%" height="15" fill="rgb(249,31,29)"/><text x="1.0842%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (214,612 samples, 0.21%)</title><rect x="15.2905%" y="181" width="0.2133%" height="15" fill="rgb(225,111,53)"/><text x="15.5405%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (171,112 samples, 0.17%)</title><rect x="15.3337%" y="165" width="0.1701%" height="15" fill="rgb(238,160,17)"/><text x="15.5837%" y="175.50"></text></g><g><title>hir_module_items (120,841 samples, 0.12%)</title><rect x="15.5038%" y="181" width="0.1201%" height="15" fill="rgb(214,148,48)"/><text x="15.7538%" y="191.50"></text></g><g><title>should_inherit_track_caller (142,803 samples, 0.14%)</title><rect x="15.9140%" y="133" width="0.1419%" height="15" fill="rgb(232,36,49)"/><text x="16.1640%" y="143.50"></text></g><g><title>codegen_fn_attrs (275,304 samples, 0.27%)</title><rect x="15.8021%" y="149" width="0.2736%" height="15" fill="rgb(209,103,24)"/><text x="16.0521%" y="159.50"></text></g><g><title>check_mod_attrs (437,035 samples, 0.43%)</title><rect x="15.6414%" y="165" width="0.4343%" height="15" fill="rgb(229,88,8)"/><text x="15.8914%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (271,073 samples, 0.27%)</title><rect x="16.1966%" y="165" width="0.2694%" height="15" fill="rgb(213,181,19)"/><text x="16.4466%" y="175.50"></text></g><g><title>misc_checking_1 (877,190 samples, 0.87%)</title><rect x="15.6243%" y="181" width="0.8718%" height="15" fill="rgb(254,191,54)"/><text x="15.8743%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (303,424 samples, 0.30%)</title><rect x="16.4976%" y="165" width="0.3016%" height="15" fill="rgb(241,83,37)"/><text x="16.7476%" y="175.50"></text></g><g><title>check_mod_liveness (233,134 samples, 0.23%)</title><rect x="16.5674%" y="149" width="0.2317%" height="15" fill="rgb(233,36,39)"/><text x="16.8174%" y="159.50"></text></g><g><title>misc_checking_2 (701,698 samples, 0.70%)</title><rect x="16.4961%" y="181" width="0.6974%" height="15" fill="rgb(226,3,54)"/><text x="16.7461%" y="191.50"></text></g><g><title>match_checking (396,764 samples, 0.39%)</title><rect x="16.7991%" y="165" width="0.3943%" height="15" fill="rgb(245,192,40)"/><text x="17.0491%" y="175.50"></text></g><g><title>check_match (375,574 samples, 0.37%)</title><rect x="16.8202%" y="149" width="0.3733%" height="15" fill="rgb(238,167,29)"/><text x="17.0702%" y="159.50"></text></g><g><title>check_private_in_public (120,281 samples, 0.12%)</title><rect x="17.2023%" y="165" width="0.1195%" height="15" fill="rgb(232,182,51)"/><text x="17.4523%" y="175.50"></text></g><g><title>death_checking (284,054 samples, 0.28%)</title><rect x="17.3218%" y="165" width="0.2823%" height="15" fill="rgb(231,60,39)"/><text x="17.5718%" y="175.50"></text></g><g><title>eval_to_const_value_raw (128,411 samples, 0.13%)</title><rect x="18.2420%" y="133" width="0.1276%" height="15" fill="rgb(208,69,12)"/><text x="18.4920%" y="143.50"></text></g><g><title>eval_to_const_value_raw (123,030 samples, 0.12%)</title><rect x="18.2473%" y="117" width="0.1223%" height="15" fill="rgb(235,93,37)"/><text x="18.4973%" y="127.50"></text></g><g><title>eval_to_allocation_raw (111,660 samples, 0.11%)</title><rect x="18.2586%" y="101" width="0.1110%" height="15" fill="rgb(213,116,39)"/><text x="18.5086%" y="111.50"></text></g><g><title>crate_lints (2,116,844 samples, 2.10%)</title><rect x="17.6058%" y="149" width="2.1038%" height="15" fill="rgb(222,207,29)"/><text x="17.8558%" y="159.50">c..</text></g><g><title>type_of (1,278,044 samples, 1.27%)</title><rect x="18.4394%" y="133" width="1.2702%" height="15" fill="rgb(206,96,30)"/><text x="18.6894%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (853,899 samples, 0.85%)</title><rect x="18.8609%" y="117" width="0.8486%" height="15" fill="rgb(218,138,4)"/><text x="19.1109%" y="127.50"></text></g><g><title>lint_checking (2,456,787 samples, 2.44%)</title><rect x="17.6041%" y="165" width="2.4417%" height="15" fill="rgb(250,191,14)"/><text x="17.8541%" y="175.50">li..</text></g><g><title>module_lints (338,303 samples, 0.34%)</title><rect x="19.7096%" y="149" width="0.3362%" height="15" fill="rgb(239,60,40)"/><text x="19.9596%" y="159.50"></text></g><g><title>lint_mod (334,673 samples, 0.33%)</title><rect x="19.7132%" y="133" width="0.3326%" height="15" fill="rgb(206,27,48)"/><text x="19.9632%" y="143.50"></text></g><g><title>privacy_access_levels (146,632 samples, 0.15%)</title><rect x="20.0458%" y="165" width="0.1457%" height="15" fill="rgb(225,35,8)"/><text x="20.2958%" y="175.50"></text></g><g><title>privacy_checking_modules (478,106 samples, 0.48%)</title><rect x="20.1915%" y="165" width="0.4752%" height="15" fill="rgb(250,213,24)"/><text x="20.4415%" y="175.50"></text></g><g><title>check_mod_privacy (475,896 samples, 0.47%)</title><rect x="20.1937%" y="149" width="0.4730%" height="15" fill="rgb(247,123,22)"/><text x="20.4437%" y="159.50"></text></g><g><title>misc_checking_3 (3,505,900 samples, 3.48%)</title><rect x="17.1935%" y="181" width="3.4843%" height="15" fill="rgb(231,138,38)"/><text x="17.4435%" y="191.50">mis..</text></g><g><title>impl_trait_ref (141,512 samples, 0.14%)</title><rect x="21.1150%" y="85" width="0.1406%" height="15" fill="rgb(231,145,46)"/><text x="21.3650%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (122,641 samples, 0.12%)</title><rect x="21.1337%" y="69" width="0.1219%" height="15" fill="rgb(251,118,11)"/><text x="21.3837%" y="79.50"></text></g><g><title>adt_destructor (503,365 samples, 0.50%)</title><rect x="20.7804%" y="133" width="0.5003%" height="15" fill="rgb(217,147,25)"/><text x="21.0304%" y="143.50"></text></g><g><title>coherent_trait (493,245 samples, 0.49%)</title><rect x="20.7905%" y="117" width="0.4902%" height="15" fill="rgb(247,81,37)"/><text x="21.0405%" y="127.50"></text></g><g><title>specialization_graph_of (490,205 samples, 0.49%)</title><rect x="20.7935%" y="101" width="0.4872%" height="15" fill="rgb(209,12,38)"/><text x="21.0435%" y="111.50"></text></g><g><title>is_copy_raw (234,584 samples, 0.23%)</title><rect x="21.2807%" y="133" width="0.2331%" height="15" fill="rgb(227,1,9)"/><text x="21.5307%" y="143.50"></text></g><g><title>evaluate_obligation (203,524 samples, 0.20%)</title><rect x="21.3116%" y="117" width="0.2023%" height="15" fill="rgb(248,47,43)"/><text x="21.5616%" y="127.50"></text></g><g><title>impl_parent (2,420,166 samples, 2.41%)</title><rect x="25.7079%" y="117" width="2.4053%" height="15" fill="rgb(221,10,30)"/><text x="25.9579%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,382,483 samples, 1.37%)</title><rect x="26.7392%" y="101" width="1.3740%" height="15" fill="rgb(210,229,1)"/><text x="26.9892%" y="111.50"></text></g><g><title>impl_trait_ref (5,177,077 samples, 5.15%)</title><rect x="28.1132%" y="117" width="5.1452%" height="15" fill="rgb(222,148,37)"/><text x="28.3632%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,218,237 samples, 4.19%)</title><rect x="29.0661%" y="101" width="4.1923%" height="15" fill="rgb(234,67,33)"/><text x="29.3161%" y="111.50">metad..</text></g><g><title>item_attrs (106,661 samples, 0.11%)</title><rect x="33.2584%" y="117" width="0.1060%" height="15" fill="rgb(247,98,35)"/><text x="33.5084%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (101,681 samples, 0.10%)</title><rect x="33.2633%" y="101" width="0.1011%" height="15" fill="rgb(247,138,52)"/><text x="33.5133%" y="111.50"></text></g><g><title>explicit_predicates_of (134,082 samples, 0.13%)</title><rect x="33.3955%" y="85" width="0.1333%" height="15" fill="rgb(213,79,30)"/><text x="33.6455%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (129,752 samples, 0.13%)</title><rect x="33.3998%" y="69" width="0.1290%" height="15" fill="rgb(246,177,23)"/><text x="33.6498%" y="79.50"></text></g><g><title>predicates_of (177,912 samples, 0.18%)</title><rect x="33.3644%" y="117" width="0.1768%" height="15" fill="rgb(230,62,27)"/><text x="33.6144%" y="127.50"></text></g><g><title>predicates_defined_on (157,562 samples, 0.16%)</title><rect x="33.3846%" y="101" width="0.1566%" height="15" fill="rgb(216,154,8)"/><text x="33.6346%" y="111.50"></text></g><g><title>trait_impls_of (789,347 samples, 0.78%)</title><rect x="33.5431%" y="117" width="0.7845%" height="15" fill="rgb(244,35,45)"/><text x="33.7931%" y="127.50"></text></g><g><title>implementations_of_trait (201,563 samples, 0.20%)</title><rect x="34.1273%" y="101" width="0.2003%" height="15" fill="rgb(251,115,12)"/><text x="34.3773%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (166,602 samples, 0.17%)</title><rect x="34.1620%" y="85" width="0.1656%" height="15" fill="rgb(240,54,50)"/><text x="34.4120%" y="95.50"></text></g><g><title>coherent_trait (13,694,023 samples, 13.61%)</title><rect x="20.7405%" y="149" width="13.6097%" height="15" fill="rgb(233,84,52)"/><text x="20.9905%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (12,832,193 samples, 12.75%)</title><rect x="21.5971%" y="133" width="12.7531%" height="15" fill="rgb(207,117,47)"/><text x="21.8471%" y="143.50">specialization_grap..</text></g><g><title>coherence_checking (13,765,366 samples, 13.68%)</title><rect x="20.7222%" y="165" width="13.6806%" height="15" fill="rgb(249,43,39)"/><text x="20.9722%" y="175.50">coherence_checking</text></g><g><title>associated_item (270,463 samples, 0.27%)</title><rect x="51.9381%" y="101" width="0.2688%" height="15" fill="rgb(209,38,44)"/><text x="52.1881%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (216,871 samples, 0.22%)</title><rect x="51.9914%" y="85" width="0.2155%" height="15" fill="rgb(236,212,23)"/><text x="52.2414%" y="95.50"></text></g><g><title>associated_items (399,994 samples, 0.40%)</title><rect x="51.8294%" y="117" width="0.3975%" height="15" fill="rgb(242,79,21)"/><text x="52.0794%" y="127.50"></text></g><g><title>dropck_outlives (285,533 samples, 0.28%)</title><rect x="52.2944%" y="117" width="0.2838%" height="15" fill="rgb(211,96,35)"/><text x="52.5444%" y="127.50"></text></g><g><title>adt_dtorck_constraint (166,162 samples, 0.17%)</title><rect x="52.4130%" y="101" width="0.1651%" height="15" fill="rgb(253,215,40)"/><text x="52.6630%" y="111.50"></text></g><g><title>mir_const_qualif (169,452 samples, 0.17%)</title><rect x="52.7440%" y="85" width="0.1684%" height="15" fill="rgb(211,81,21)"/><text x="52.9940%" y="95.50"></text></g><g><title>mir_const (137,822 samples, 0.14%)</title><rect x="52.7754%" y="69" width="0.1370%" height="15" fill="rgb(208,190,38)"/><text x="53.0254%" y="79.50"></text></g><g><title>mir_borrowck (393,553 samples, 0.39%)</title><rect x="53.0648%" y="53" width="0.3911%" height="15" fill="rgb(235,213,38)"/><text x="53.3148%" y="63.50"></text></g><g><title>mir_for_ctfe (548,177 samples, 0.54%)</title><rect x="52.9124%" y="85" width="0.5448%" height="15" fill="rgb(237,122,38)"/><text x="53.1624%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (502,414 samples, 0.50%)</title><rect x="52.9579%" y="69" width="0.4993%" height="15" fill="rgb(244,218,35)"/><text x="53.2079%" y="79.50"></text></g><g><title>eval_to_const_value_raw (153,102 samples, 0.15%)</title><rect x="53.4649%" y="69" width="0.1522%" height="15" fill="rgb(240,68,47)"/><text x="53.7149%" y="79.50"></text></g><g><title>eval_to_const_value_raw (151,712 samples, 0.15%)</title><rect x="53.4663%" y="53" width="0.1508%" height="15" fill="rgb(210,16,53)"/><text x="53.7163%" y="63.50"></text></g><g><title>eval_to_allocation_raw (147,712 samples, 0.15%)</title><rect x="53.4703%" y="37" width="0.1468%" height="15" fill="rgb(235,124,12)"/><text x="53.7203%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,046,613 samples, 1.04%)</title><rect x="52.5782%" y="117" width="1.0402%" height="15" fill="rgb(224,169,11)"/><text x="52.8282%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,027,062 samples, 1.02%)</title><rect x="52.5976%" y="101" width="1.0207%" height="15" fill="rgb(250,166,2)"/><text x="52.8476%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (161,562 samples, 0.16%)</title><rect x="53.4578%" y="85" width="0.1606%" height="15" fill="rgb(242,216,29)"/><text x="53.7078%" y="95.50"></text></g><g><title>adt_sized_constraint (147,822 samples, 0.15%)</title><rect x="58.0670%" y="101" width="0.1469%" height="15" fill="rgb(230,116,27)"/><text x="58.3170%" y="111.50"></text></g><g><title>generics_of (949,211 samples, 0.94%)</title><rect x="58.2139%" y="101" width="0.9434%" height="15" fill="rgb(228,99,48)"/><text x="58.4639%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (690,279 samples, 0.69%)</title><rect x="58.4712%" y="85" width="0.6860%" height="15" fill="rgb(253,11,6)"/><text x="58.7212%" y="95.50"></text></g><g><title>impl_polarity (161,471 samples, 0.16%)</title><rect x="59.2002%" y="101" width="0.1605%" height="15" fill="rgb(247,143,39)"/><text x="59.4502%" y="111.50"></text></g><g><title>impl_trait_ref (1,257,268 samples, 1.25%)</title><rect x="59.3606%" y="101" width="1.2495%" height="15" fill="rgb(236,97,10)"/><text x="59.6106%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,003,991 samples, 1.00%)</title><rect x="59.6124%" y="85" width="0.9978%" height="15" fill="rgb(233,208,19)"/><text x="59.8624%" y="95.50"></text></g><g><title>opt_def_kind (177,760 samples, 0.18%)</title><rect x="60.9011%" y="85" width="0.1767%" height="15" fill="rgb(216,164,2)"/><text x="61.1511%" y="95.50"></text></g><g><title>explicit_predicates_of (172,680 samples, 0.17%)</title><rect x="61.5364%" y="69" width="0.1716%" height="15" fill="rgb(220,129,5)"/><text x="61.7864%" y="79.50"></text></g><g><title>predicates_of (1,194,762 samples, 1.19%)</title><rect x="60.6670%" y="101" width="1.1874%" height="15" fill="rgb(242,17,10)"/><text x="60.9170%" y="111.50"></text></g><g><title>predicates_defined_on (781,447 samples, 0.78%)</title><rect x="61.0778%" y="85" width="0.7766%" height="15" fill="rgb(242,107,0)"/><text x="61.3278%" y="95.50"></text></g><g><title>inferred_outlives_of (147,331 samples, 0.15%)</title><rect x="61.7080%" y="69" width="0.1464%" height="15" fill="rgb(251,28,31)"/><text x="61.9580%" y="79.50"></text></g><g><title>specializes (2,573,677 samples, 2.56%)</title><rect x="61.8544%" y="101" width="2.5578%" height="15" fill="rgb(233,223,10)"/><text x="62.1044%" y="111.50">sp..</text></g><g><title>param_env (1,518,008 samples, 1.51%)</title><rect x="62.9036%" y="85" width="1.5087%" height="15" fill="rgb(215,21,27)"/><text x="63.1536%" y="95.50"></text></g><g><title>def_span (690,299 samples, 0.69%)</title><rect x="63.7262%" y="69" width="0.6860%" height="15" fill="rgb(232,23,21)"/><text x="63.9762%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (611,048 samples, 0.61%)</title><rect x="63.8050%" y="53" width="0.6073%" height="15" fill="rgb(244,5,23)"/><text x="64.0550%" y="63.50"></text></g><g><title>trait_impls_of (538,889 samples, 0.54%)</title><rect x="64.4262%" y="101" width="0.5356%" height="15" fill="rgb(226,81,46)"/><text x="64.6762%" y="111.50"></text></g><g><title>implementations_of_trait (209,972 samples, 0.21%)</title><rect x="64.7531%" y="85" width="0.2087%" height="15" fill="rgb(247,70,30)"/><text x="65.0031%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (151,110 samples, 0.15%)</title><rect x="64.8116%" y="69" width="0.1502%" height="15" fill="rgb(212,68,19)"/><text x="65.0616%" y="79.50"></text></g><g><title>evaluate_obligation (11,453,943 samples, 11.38%)</title><rect x="53.6183%" y="117" width="11.3834%" height="15" fill="rgb(240,187,13)"/><text x="53.8683%" y="127.50">evaluate_obligati..</text></g><g><title>fn_sig (109,421 samples, 0.11%)</title><rect x="65.0230%" y="117" width="0.1087%" height="15" fill="rgb(223,113,26)"/><text x="65.2730%" y="127.50"></text></g><g><title>impl_item_implementor_ids (116,473 samples, 0.12%)</title><rect x="65.2259%" y="117" width="0.1158%" height="15" fill="rgb(206,192,2)"/><text x="65.4759%" y="127.50"></text></g><g><title>evaluate_obligation (110,453 samples, 0.11%)</title><rect x="65.6348%" y="101" width="0.1098%" height="15" fill="rgb(241,108,4)"/><text x="65.8848%" y="111.50"></text></g><g><title>method_autoderef_steps (216,027 samples, 0.21%)</title><rect x="65.5394%" y="117" width="0.2147%" height="15" fill="rgb(247,173,49)"/><text x="65.7894%" y="127.50"></text></g><g><title>param_env (103,902 samples, 0.10%)</title><rect x="65.7789%" y="117" width="0.1033%" height="15" fill="rgb(224,114,35)"/><text x="66.0289%" y="127.50"></text></g><g><title>explicit_predicates_of (117,351 samples, 0.12%)</title><rect x="66.0348%" y="85" width="0.1166%" height="15" fill="rgb(245,159,27)"/><text x="66.2848%" y="95.50"></text></g><g><title>predicates_of (298,273 samples, 0.30%)</title><rect x="65.8904%" y="117" width="0.2964%" height="15" fill="rgb(245,172,44)"/><text x="66.1404%" y="127.50"></text></g><g><title>predicates_defined_on (212,713 samples, 0.21%)</title><rect x="65.9754%" y="101" width="0.2114%" height="15" fill="rgb(236,23,11)"/><text x="66.2254%" y="111.50"></text></g><g><title>item_bodies_checking (32,168,612 samples, 31.97%)</title><rect x="34.4250%" y="165" width="31.9705%" height="15" fill="rgb(205,117,38)"/><text x="34.6750%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (32,165,922 samples, 31.97%)</title><rect x="34.4277%" y="149" width="31.9678%" height="15" fill="rgb(237,72,25)"/><text x="34.6777%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (32,118,832 samples, 31.92%)</title><rect x="34.4745%" y="133" width="31.9210%" height="15" fill="rgb(244,70,9)"/><text x="34.7245%" y="143.50">typeck</text></g><g><title>item_types_checking (940,701 samples, 0.93%)</title><rect x="66.3955%" y="165" width="0.9349%" height="15" fill="rgb(217,125,39)"/><text x="66.6455%" y="175.50"></text></g><g><title>check_mod_item_types (937,571 samples, 0.93%)</title><rect x="66.3986%" y="149" width="0.9318%" height="15" fill="rgb(235,36,10)"/><text x="66.6486%" y="159.50"></text></g><g><title>typeck (153,692 samples, 0.15%)</title><rect x="67.1777%" y="133" width="0.1527%" height="15" fill="rgb(251,123,47)"/><text x="67.4277%" y="143.50"></text></g><g><title>fn_sig (292,883 samples, 0.29%)</title><rect x="67.5019%" y="133" width="0.2911%" height="15" fill="rgb(221,13,13)"/><text x="67.7519%" y="143.50"></text></g><g><title>named_region_map (266,592 samples, 0.26%)</title><rect x="67.9010%" y="117" width="0.2649%" height="15" fill="rgb(238,131,9)"/><text x="68.1510%" y="127.50"></text></g><g><title>resolve_lifetimes (253,752 samples, 0.25%)</title><rect x="67.9137%" y="101" width="0.2522%" height="15" fill="rgb(211,50,8)"/><text x="68.1637%" y="111.50"></text></g><g><title>generics_of (385,644 samples, 0.38%)</title><rect x="67.7929%" y="133" width="0.3833%" height="15" fill="rgb(245,182,24)"/><text x="68.0429%" y="143.50"></text></g><g><title>predicates_of (310,993 samples, 0.31%)</title><rect x="68.2244%" y="133" width="0.3091%" height="15" fill="rgb(242,14,37)"/><text x="68.4744%" y="143.50"></text></g><g><title>predicates_defined_on (281,433 samples, 0.28%)</title><rect x="68.2538%" y="117" width="0.2797%" height="15" fill="rgb(246,228,12)"/><text x="68.5038%" y="127.50"></text></g><g><title>inferred_outlives_of (162,721 samples, 0.16%)</title><rect x="68.3718%" y="101" width="0.1617%" height="15" fill="rgb(213,55,15)"/><text x="68.6218%" y="111.50"></text></g><g><title>inferred_outlives_crate (151,931 samples, 0.15%)</title><rect x="68.3825%" y="85" width="0.1510%" height="15" fill="rgb(209,9,3)"/><text x="68.6325%" y="95.50"></text></g><g><title>type_collecting (1,306,745 samples, 1.30%)</title><rect x="67.3316%" y="165" width="1.2987%" height="15" fill="rgb(230,59,30)"/><text x="67.5816%" y="175.50"></text></g><g><title>collect_mod_item_types (1,299,395 samples, 1.29%)</title><rect x="67.3390%" y="149" width="1.2914%" height="15" fill="rgb(209,121,21)"/><text x="67.5890%" y="159.50"></text></g><g><title>evaluate_obligation (167,252 samples, 0.17%)</title><rect x="69.5072%" y="133" width="0.1662%" height="15" fill="rgb(220,109,13)"/><text x="69.7572%" y="143.50"></text></g><g><title>param_env (109,221 samples, 0.11%)</title><rect x="69.7511%" y="133" width="0.1085%" height="15" fill="rgb(232,18,1)"/><text x="70.0011%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,395,304 samples, 1.39%)</title><rect x="68.7386%" y="149" width="1.3867%" height="15" fill="rgb(215,41,42)"/><text x="68.9886%" y="159.50"></text></g><g><title>region_scope_tree (243,972 samples, 0.24%)</title><rect x="69.8829%" y="133" width="0.2425%" height="15" fill="rgb(224,123,36)"/><text x="70.1329%" y="143.50"></text></g><g><title>evaluate_obligation (199,342 samples, 0.20%)</title><rect x="70.7328%" y="133" width="0.1981%" height="15" fill="rgb(240,125,3)"/><text x="70.9828%" y="143.50"></text></g><g><title>param_env (115,092 samples, 0.11%)</title><rect x="71.0010%" y="133" width="0.1144%" height="15" fill="rgb(205,98,50)"/><text x="71.2510%" y="143.50"></text></g><g><title>analysis (71,154,843 samples, 70.72%)</title><rect x="0.5465%" y="197" width="70.7165%" height="15" fill="rgb(205,185,37)"/><text x="0.7965%" y="207.50">analysis</text></g><g><title>type_check_crate (50,898,835 samples, 50.59%)</title><rect x="20.6778%" y="181" width="50.5853%" height="15" fill="rgb(238,207,15)"/><text x="20.9278%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,645,440 samples, 2.63%)</title><rect x="68.6339%" y="165" width="2.6291%" height="15" fill="rgb(213,199,42)"/><text x="68.8839%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,144,803 samples, 1.14%)</title><rect x="70.1253%" y="149" width="1.1378%" height="15" fill="rgb(235,201,11)"/><text x="70.3753%" y="159.50"></text></g><g><title>codegen_crate (334,204 samples, 0.33%)</title><rect x="71.2752%" y="197" width="0.3321%" height="15" fill="rgb(207,46,11)"/><text x="71.5252%" y="207.50"></text></g><g><title>metadata_load_macro (223,093 samples, 0.22%)</title><rect x="82.8495%" y="149" width="0.2217%" height="15" fill="rgb(241,35,35)"/><text x="83.0995%" y="159.50"></text></g><g><title>metadata_register_crate (2,681,300 samples, 2.66%)</title><rect x="83.0712%" y="149" width="2.6648%" height="15" fill="rgb(243,32,47)"/><text x="83.3212%" y="159.50">me..</text></g><g><title>metadata_register_crate (985,290 samples, 0.98%)</title><rect x="84.7568%" y="133" width="0.9792%" height="15" fill="rgb(247,202,23)"/><text x="85.0068%" y="143.50"></text></g><g><title>macro_expand_crate (13,832,416 samples, 13.75%)</title><rect x="72.0339%" y="181" width="13.7472%" height="15" fill="rgb(219,102,11)"/><text x="72.2839%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,814,016 samples, 13.73%)</title><rect x="72.0522%" y="165" width="13.7289%" height="15" fill="rgb(243,110,44)"/><text x="72.3022%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (281,733 samples, 0.28%)</title><rect x="85.7841%" y="181" width="0.2800%" height="15" fill="rgb(222,74,54)"/><text x="86.0341%" y="191.50"></text></g><g><title>finalize_macro_resolutions (166,552 samples, 0.17%)</title><rect x="86.0849%" y="165" width="0.1655%" height="15" fill="rgb(216,99,12)"/><text x="86.3349%" y="175.50"></text></g><g><title>late_resolve_crate (1,658,209 samples, 1.65%)</title><rect x="86.2505%" y="165" width="1.6480%" height="15" fill="rgb(226,22,26)"/><text x="86.5005%" y="175.50"></text></g><g><title>configure_and_expand (16,463,136 samples, 16.36%)</title><rect x="71.6073%" y="197" width="16.3617%" height="15" fill="rgb(217,163,10)"/><text x="71.8573%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,916,701 samples, 1.90%)</title><rect x="86.0641%" y="181" width="1.9049%" height="15" fill="rgb(213,25,53)"/><text x="86.3141%" y="191.50">r..</text></g><g><title>drop_ast (125,881 samples, 0.13%)</title><rect x="87.9690%" y="197" width="0.1251%" height="15" fill="rgb(252,105,26)"/><text x="88.2190%" y="207.50"></text></g><g><title>early_lint_checks (256,673 samples, 0.26%)</title><rect x="88.1075%" y="197" width="0.2551%" height="15" fill="rgb(220,39,43)"/><text x="88.3575%" y="207.50"></text></g><g><title>free_global_ctxt (3,630,501 samples, 3.61%)</title><rect x="88.3626%" y="197" width="3.6081%" height="15" fill="rgb(229,68,48)"/><text x="88.6126%" y="207.50">free..</text></g><g><title>generate_crate_metadata (799,159 samples, 0.79%)</title><rect x="91.9708%" y="197" width="0.7942%" height="15" fill="rgb(252,8,32)"/><text x="92.2208%" y="207.50"></text></g><g><title>hir_lowering (1,681,329 samples, 1.67%)</title><rect x="92.7650%" y="197" width="1.6710%" height="15" fill="rgb(223,20,43)"/><text x="93.0150%" y="207.50"></text></g><g><title>parse_crate (4,138,196 samples, 4.11%)</title><rect x="94.4879%" y="197" width="4.1127%" height="15" fill="rgb(229,81,49)"/><text x="94.7379%" y="207.50">pars..</text></g><g><title>prepare_outputs (172,792 samples, 0.17%)</title><rect x="98.6098%" y="197" width="0.1717%" height="15" fill="rgb(236,28,36)"/><text x="98.8598%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (857,429 samples, 0.85%)</title><rect x="98.7816%" y="197" width="0.8521%" height="15" fill="rgb(249,185,26)"/><text x="99.0316%" y="207.50"></text></g><g><title>all (100,619,795 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (100,619,795 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (270,363 samples, 0.27%)</title><rect x="99.7313%" y="197" width="0.2687%" height="15" fill="rgb(221,78,26)"/><text x="99.9813%" y="207.50"></text></g></svg></svg>