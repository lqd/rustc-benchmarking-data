<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (42,610 samples, 0.12%)</title><rect x="5.4123%" y="213" width="0.1187%" height="15" fill="rgb(227,0,7)"/><text x="5.6623%" y="223.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (38,030 samples, 0.11%)</title><rect x="5.4251%" y="197" width="0.1059%" height="15" fill="rgb(217,0,24)"/><text x="5.6751%" y="207.50"></text></g><g><title>param_env (86,321 samples, 0.24%)</title><rect x="5.5310%" y="213" width="0.2404%" height="15" fill="rgb(221,193,54)"/><text x="5.7810%" y="223.50"></text></g><g><title>item_attrs (61,651 samples, 0.17%)</title><rect x="6.0426%" y="181" width="0.1717%" height="15" fill="rgb(248,212,6)"/><text x="6.2926%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (59,631 samples, 0.17%)</title><rect x="6.0482%" y="165" width="0.1661%" height="15" fill="rgb(208,68,35)"/><text x="6.2982%" y="175.50"></text></g><g><title>codegen_fn_attrs (89,131 samples, 0.25%)</title><rect x="5.9757%" y="197" width="0.2482%" height="15" fill="rgb(232,128,0)"/><text x="6.2257%" y="207.50"></text></g><g><title>is_copy_raw (37,230 samples, 0.10%)</title><rect x="6.8808%" y="181" width="0.1037%" height="15" fill="rgb(207,160,47)"/><text x="7.1308%" y="191.50"></text></g><g><title>adt_drop_tys (44,780 samples, 0.12%)</title><rect x="7.0483%" y="149" width="0.1247%" height="15" fill="rgb(228,23,34)"/><text x="7.2983%" y="159.50"></text></g><g><title>is_copy_raw (45,911 samples, 0.13%)</title><rect x="7.1730%" y="149" width="0.1278%" height="15" fill="rgb(218,30,26)"/><text x="7.4230%" y="159.50"></text></g><g><title>evaluate_obligation (40,721 samples, 0.11%)</title><rect x="7.1875%" y="133" width="0.1134%" height="15" fill="rgb(220,122,19)"/><text x="7.4375%" y="143.50"></text></g><g><title>adt_drop_tys (125,231 samples, 0.35%)</title><rect x="7.0227%" y="165" width="0.3487%" height="15" fill="rgb(250,228,42)"/><text x="7.2727%" y="175.50"></text></g><g><title>needs_drop_raw (246,413 samples, 0.69%)</title><rect x="6.9845%" y="181" width="0.6862%" height="15" fill="rgb(240,193,28)"/><text x="7.2345%" y="191.50"></text></g><g><title>is_copy_raw (107,481 samples, 0.30%)</title><rect x="7.3714%" y="165" width="0.2993%" height="15" fill="rgb(216,20,37)"/><text x="7.6214%" y="175.50"></text></g><g><title>evaluate_obligation (91,301 samples, 0.25%)</title><rect x="7.4165%" y="149" width="0.2542%" height="15" fill="rgb(206,188,39)"/><text x="7.6665%" y="159.50"></text></g><g><title>thir_body (105,872 samples, 0.29%)</title><rect x="7.7762%" y="181" width="0.2948%" height="15" fill="rgb(217,207,13)"/><text x="8.0262%" y="191.50"></text></g><g><title>mir_const (1,078,602 samples, 3.00%)</title><rect x="5.0865%" y="229" width="3.0036%" height="15" fill="rgb(231,73,38)"/><text x="5.3365%" y="239.50">mir..</text></g><g><title>unsafety_check_result (832,668 samples, 2.32%)</title><rect x="5.7713%" y="213" width="2.3187%" height="15" fill="rgb(225,20,46)"/><text x="6.0213%" y="223.50">u..</text></g><g><title>mir_built (670,137 samples, 1.87%)</title><rect x="6.2239%" y="197" width="1.8661%" height="15" fill="rgb(210,31,41)"/><text x="6.4739%" y="207.50">m..</text></g><g><title>mir_promoted (1,208,052 samples, 3.36%)</title><rect x="4.7434%" y="245" width="3.3641%" height="15" fill="rgb(221,200,47)"/><text x="4.9934%" y="255.50">mir..</text></g><g><title>type_op_ascribe_user_type (46,561 samples, 0.13%)</title><rect x="8.1075%" y="245" width="0.1297%" height="15" fill="rgb(226,26,5)"/><text x="8.3575%" y="255.50"></text></g><g><title>type_op_normalize_predicate (59,930 samples, 0.17%)</title><rect x="8.3164%" y="245" width="0.1669%" height="15" fill="rgb(249,33,26)"/><text x="8.5664%" y="255.50"></text></g><g><title>type_op_prove_predicate (322,202 samples, 0.90%)</title><rect x="8.4833%" y="245" width="0.8972%" height="15" fill="rgb(235,183,28)"/><text x="8.7333%" y="255.50"></text></g><g><title>MIR_borrow_checking (2,819,062 samples, 7.85%)</title><rect x="1.5529%" y="277" width="7.8502%" height="15" fill="rgb(221,5,38)"/><text x="1.8029%" y="287.50">MIR_borrow_..</text></g><g><title>mir_borrowck (2,811,372 samples, 7.83%)</title><rect x="1.5743%" y="261" width="7.8288%" height="15" fill="rgb(247,18,42)"/><text x="1.8243%" y="271.50">mir_borrowck</text></g><g><title>hir_module_items (60,431 samples, 0.17%)</title><rect x="9.4146%" y="277" width="0.1683%" height="15" fill="rgb(241,131,45)"/><text x="9.6646%" y="287.50"></text></g><g><title>codegen_fn_attrs (97,011 samples, 0.27%)</title><rect x="9.7417%" y="245" width="0.2701%" height="15" fill="rgb(249,31,29)"/><text x="9.9917%" y="255.50"></text></g><g><title>check_mod_attrs (141,492 samples, 0.39%)</title><rect x="9.6181%" y="261" width="0.3940%" height="15" fill="rgb(225,111,53)"/><text x="9.8681%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (112,721 samples, 0.31%)</title><rect x="10.1006%" y="261" width="0.3139%" height="15" fill="rgb(238,160,17)"/><text x="10.3506%" y="271.50"></text></g><g><title>misc_checking_1 (334,804 samples, 0.93%)</title><rect x="9.5841%" y="277" width="0.9323%" height="15" fill="rgb(214,148,48)"/><text x="9.8341%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (83,141 samples, 0.23%)</title><rect x="10.5200%" y="261" width="0.2315%" height="15" fill="rgb(232,36,49)"/><text x="10.7700%" y="271.50"></text></g><g><title>check_mod_liveness (67,251 samples, 0.19%)</title><rect x="10.5642%" y="245" width="0.1873%" height="15" fill="rgb(209,103,24)"/><text x="10.8142%" y="255.50"></text></g><g><title>misc_checking_2 (174,462 samples, 0.49%)</title><rect x="10.5165%" y="277" width="0.4858%" height="15" fill="rgb(229,88,8)"/><text x="10.7665%" y="287.50"></text></g><g><title>match_checking (90,071 samples, 0.25%)</title><rect x="10.7515%" y="261" width="0.2508%" height="15" fill="rgb(213,181,19)"/><text x="11.0015%" y="271.50"></text></g><g><title>check_match (86,161 samples, 0.24%)</title><rect x="10.7624%" y="245" width="0.2399%" height="15" fill="rgb(254,191,54)"/><text x="11.0124%" y="255.50"></text></g><g><title>death_checking (39,110 samples, 0.11%)</title><rect x="11.0842%" y="261" width="0.1089%" height="15" fill="rgb(241,83,37)"/><text x="11.3342%" y="271.50"></text></g><g><title>param_env (52,601 samples, 0.15%)</title><rect x="11.3301%" y="229" width="0.1465%" height="15" fill="rgb(233,36,39)"/><text x="11.5801%" y="239.50"></text></g><g><title>crate_lints (103,901 samples, 0.29%)</title><rect x="11.1966%" y="245" width="0.2893%" height="15" fill="rgb(226,3,54)"/><text x="11.4466%" y="255.50"></text></g><g><title>lint_checking (143,022 samples, 0.40%)</title><rect x="11.1931%" y="261" width="0.3983%" height="15" fill="rgb(245,192,40)"/><text x="11.4431%" y="271.50"></text></g><g><title>module_lints (37,871 samples, 0.11%)</title><rect x="11.4859%" y="245" width="0.1055%" height="15" fill="rgb(238,167,29)"/><text x="11.7359%" y="255.50"></text></g><g><title>lint_mod (36,380 samples, 0.10%)</title><rect x="11.4901%" y="229" width="0.1013%" height="15" fill="rgb(232,182,51)"/><text x="11.7401%" y="239.50"></text></g><g><title>privacy_access_levels (38,470 samples, 0.11%)</title><rect x="11.5914%" y="261" width="0.1071%" height="15" fill="rgb(231,60,39)"/><text x="11.8414%" y="271.50"></text></g><g><title>privacy_checking_modules (70,171 samples, 0.20%)</title><rect x="11.6985%" y="261" width="0.1954%" height="15" fill="rgb(208,69,12)"/><text x="11.9485%" y="271.50"></text></g><g><title>check_mod_privacy (69,271 samples, 0.19%)</title><rect x="11.7010%" y="245" width="0.1929%" height="15" fill="rgb(235,93,37)"/><text x="11.9510%" y="255.50"></text></g><g><title>misc_checking_3 (327,524 samples, 0.91%)</title><rect x="11.0023%" y="277" width="0.9121%" height="15" fill="rgb(213,116,39)"/><text x="11.2523%" y="287.50"></text></g><g><title>impl_parent (94,081 samples, 0.26%)</title><rect x="13.1425%" y="53" width="0.2620%" height="15" fill="rgb(222,207,29)"/><text x="13.3925%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (71,631 samples, 0.20%)</title><rect x="13.2050%" y="37" width="0.1995%" height="15" fill="rgb(206,96,30)"/><text x="13.4550%" y="47.50"></text></g><g><title>impl_trait_ref (325,563 samples, 0.91%)</title><rect x="13.4045%" y="53" width="0.9066%" height="15" fill="rgb(218,138,4)"/><text x="13.6545%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (306,493 samples, 0.85%)</title><rect x="13.4576%" y="37" width="0.8535%" height="15" fill="rgb(250,191,14)"/><text x="13.7076%" y="47.50"></text></g><g><title>coherent_trait (538,386 samples, 1.50%)</title><rect x="12.8835%" y="85" width="1.4992%" height="15" fill="rgb(239,60,40)"/><text x="13.1335%" y="95.50"></text></g><g><title>specialization_graph_of (534,686 samples, 1.49%)</title><rect x="12.8938%" y="69" width="1.4889%" height="15" fill="rgb(206,27,48)"/><text x="13.1438%" y="79.50"></text></g><g><title>adt_destructor (547,177 samples, 1.52%)</title><rect x="12.8626%" y="117" width="1.5237%" height="15" fill="rgb(225,35,8)"/><text x="13.1126%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (544,296 samples, 1.52%)</title><rect x="12.8706%" y="101" width="1.5157%" height="15" fill="rgb(250,213,24)"/><text x="13.1206%" y="111.50"></text></g><g><title>adt_dtorck_constraint (622,707 samples, 1.73%)</title><rect x="12.7798%" y="133" width="1.7341%" height="15" fill="rgb(247,123,22)"/><text x="13.0298%" y="143.50"></text></g><g><title>adt_dtorck_constraint (668,578 samples, 1.86%)</title><rect x="12.6985%" y="149" width="1.8618%" height="15" fill="rgb(231,138,38)"/><text x="12.9485%" y="159.50">a..</text></g><g><title>adt_dtorck_constraint (682,988 samples, 1.90%)</title><rect x="12.6817%" y="165" width="1.9019%" height="15" fill="rgb(231,145,46)"/><text x="12.9317%" y="175.50">a..</text></g><g><title>adt_dtorck_constraint (686,758 samples, 1.91%)</title><rect x="12.6728%" y="181" width="1.9124%" height="15" fill="rgb(251,118,11)"/><text x="12.9228%" y="191.50">a..</text></g><g><title>dropck_outlives (727,728 samples, 2.03%)</title><rect x="12.5649%" y="213" width="2.0265%" height="15" fill="rgb(217,147,25)"/><text x="12.8149%" y="223.50">d..</text></g><g><title>adt_dtorck_constraint (707,938 samples, 1.97%)</title><rect x="12.6200%" y="197" width="1.9714%" height="15" fill="rgb(247,81,37)"/><text x="12.8700%" y="207.50">a..</text></g><g><title>adt_def (47,121 samples, 0.13%)</title><rect x="14.8468%" y="149" width="0.1312%" height="15" fill="rgb(209,12,38)"/><text x="15.0968%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (46,881 samples, 0.13%)</title><rect x="14.8475%" y="133" width="0.1305%" height="15" fill="rgb(227,1,9)"/><text x="15.0975%" y="143.50"></text></g><g><title>item_attrs (44,791 samples, 0.12%)</title><rect x="14.8533%" y="117" width="0.1247%" height="15" fill="rgb(248,47,43)"/><text x="15.1033%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (44,591 samples, 0.12%)</title><rect x="14.8538%" y="101" width="0.1242%" height="15" fill="rgb(221,10,30)"/><text x="15.1038%" y="111.50"></text></g><g><title>adt_sized_constraint (53,431 samples, 0.15%)</title><rect x="14.8447%" y="165" width="0.1488%" height="15" fill="rgb(210,229,1)"/><text x="15.0947%" y="175.50"></text></g><g><title>adt_sized_constraint (89,511 samples, 0.25%)</title><rect x="14.7754%" y="181" width="0.2493%" height="15" fill="rgb(222,148,37)"/><text x="15.0254%" y="191.50"></text></g><g><title>adt_sized_constraint (127,582 samples, 0.36%)</title><rect x="14.6865%" y="197" width="0.3553%" height="15" fill="rgb(234,67,33)"/><text x="14.9365%" y="207.50"></text></g><g><title>evaluate_obligation (162,652 samples, 0.45%)</title><rect x="14.5914%" y="213" width="0.4529%" height="15" fill="rgb(247,98,35)"/><text x="14.8414%" y="223.50"></text></g><g><title>adt_def (44,521 samples, 0.12%)</title><rect x="27.8232%" y="181" width="0.1240%" height="15" fill="rgb(247,138,52)"/><text x="28.0732%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (43,391 samples, 0.12%)</title><rect x="27.8264%" y="165" width="0.1208%" height="15" fill="rgb(213,79,30)"/><text x="28.0764%" y="175.50"></text></g><g><title>adt_sized_constraint (56,281 samples, 0.16%)</title><rect x="27.8046%" y="197" width="0.1567%" height="15" fill="rgb(246,177,23)"/><text x="28.0546%" y="207.50"></text></g><g><title>associated_item (305,312 samples, 0.85%)</title><rect x="28.2705%" y="181" width="0.8502%" height="15" fill="rgb(230,62,27)"/><text x="28.5205%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (236,061 samples, 0.66%)</title><rect x="28.4634%" y="165" width="0.6574%" height="15" fill="rgb(216,154,8)"/><text x="28.7134%" y="175.50"></text></g><g><title>associated_items (434,513 samples, 1.21%)</title><rect x="27.9685%" y="197" width="1.2100%" height="15" fill="rgb(244,35,45)"/><text x="28.2185%" y="207.50"></text></g><g><title>adt_dtorck_constraint (63,321 samples, 0.18%)</title><rect x="29.4454%" y="165" width="0.1763%" height="15" fill="rgb(251,115,12)"/><text x="29.6954%" y="175.50"></text></g><g><title>dropck_outlives (140,821 samples, 0.39%)</title><rect x="29.2783%" y="197" width="0.3921%" height="15" fill="rgb(240,54,50)"/><text x="29.5283%" y="207.50"></text></g><g><title>adt_dtorck_constraint (103,901 samples, 0.29%)</title><rect x="29.3811%" y="181" width="0.2893%" height="15" fill="rgb(233,84,52)"/><text x="29.6311%" y="191.50"></text></g><g><title>adt_sized_constraint (50,060 samples, 0.14%)</title><rect x="33.4364%" y="165" width="0.1394%" height="15" fill="rgb(207,117,47)"/><text x="33.6864%" y="175.50"></text></g><g><title>adt_sized_constraint (88,310 samples, 0.25%)</title><rect x="33.3401%" y="181" width="0.2459%" height="15" fill="rgb(249,43,39)"/><text x="33.5901%" y="191.50"></text></g><g><title>generics_of (496,336 samples, 1.38%)</title><rect x="33.5860%" y="181" width="1.3821%" height="15" fill="rgb(209,38,44)"/><text x="33.8360%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (376,604 samples, 1.05%)</title><rect x="33.9195%" y="165" width="1.0487%" height="15" fill="rgb(236,212,23)"/><text x="34.1695%" y="175.50"></text></g><g><title>impl_trait_ref (585,804 samples, 1.63%)</title><rect x="34.9977%" y="181" width="1.6313%" height="15" fill="rgb(242,79,21)"/><text x="35.2477%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (463,702 samples, 1.29%)</title><rect x="35.3377%" y="165" width="1.2913%" height="15" fill="rgb(211,96,35)"/><text x="35.5877%" y="175.50"></text></g><g><title>predicates_of (57,072 samples, 0.16%)</title><rect x="36.6578%" y="181" width="0.1589%" height="15" fill="rgb(253,215,40)"/><text x="36.9078%" y="191.50"></text></g><g><title>specializes (178,612 samples, 0.50%)</title><rect x="36.8167%" y="181" width="0.4974%" height="15" fill="rgb(211,81,21)"/><text x="37.0667%" y="191.50"></text></g><g><title>param_env (138,492 samples, 0.39%)</title><rect x="36.9284%" y="165" width="0.3857%" height="15" fill="rgb(208,190,38)"/><text x="37.1784%" y="175.50"></text></g><g><title>def_span (94,371 samples, 0.26%)</title><rect x="37.0513%" y="149" width="0.2628%" height="15" fill="rgb(235,213,38)"/><text x="37.3013%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (91,031 samples, 0.25%)</title><rect x="37.0606%" y="133" width="0.2535%" height="15" fill="rgb(237,122,38)"/><text x="37.3106%" y="143.50"></text></g><g><title>trait_impls_of (458,144 samples, 1.28%)</title><rect x="37.3311%" y="181" width="1.2758%" height="15" fill="rgb(244,218,35)"/><text x="37.5811%" y="191.50"></text></g><g><title>implementations_of_trait (139,450 samples, 0.39%)</title><rect x="38.2186%" y="165" width="0.3883%" height="15" fill="rgb(240,68,47)"/><text x="38.4686%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (98,400 samples, 0.27%)</title><rect x="38.3329%" y="149" width="0.2740%" height="15" fill="rgb(210,16,53)"/><text x="38.5829%" y="159.50"></text></g><g><title>evaluate_obligation (3,216,643 samples, 8.96%)</title><rect x="29.6705%" y="197" width="8.9574%" height="15" fill="rgb(235,124,12)"/><text x="29.9205%" y="207.50">evaluate_obli..</text></g><g><title>fn_sig (80,580 samples, 0.22%)</title><rect x="38.6564%" y="197" width="0.2244%" height="15" fill="rgb(224,169,11)"/><text x="38.9064%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (72,040 samples, 0.20%)</title><rect x="38.6802%" y="181" width="0.2006%" height="15" fill="rgb(250,166,2)"/><text x="38.9302%" y="191.50"></text></g><g><title>generics_of (1,237,690 samples, 3.45%)</title><rect x="38.8808%" y="197" width="3.4466%" height="15" fill="rgb(242,216,29)"/><text x="39.1308%" y="207.50">gen..</text></g><g><title>metadata_decode_entry_generics_of (950,890 samples, 2.65%)</title><rect x="39.6795%" y="181" width="2.6479%" height="15" fill="rgb(230,116,27)"/><text x="39.9295%" y="191.50">me..</text></g><g><title>impl_trait_ref (2,733,328 samples, 7.61%)</title><rect x="42.4336%" y="197" width="7.6115%" height="15" fill="rgb(228,99,48)"/><text x="42.6836%" y="207.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,470,573 samples, 6.88%)</title><rect x="43.1653%" y="181" width="6.8798%" height="15" fill="rgb(253,11,6)"/><text x="43.4153%" y="191.50">metadata_..</text></g><g><title>is_copy_raw (228,502 samples, 0.64%)</title><rect x="50.1649%" y="197" width="0.6363%" height="15" fill="rgb(247,143,39)"/><text x="50.4149%" y="207.50"></text></g><g><title>evaluate_obligation (219,192 samples, 0.61%)</title><rect x="50.1908%" y="181" width="0.6104%" height="15" fill="rgb(236,97,10)"/><text x="50.4408%" y="191.50"></text></g><g><title>trait_impls_of (175,612 samples, 0.49%)</title><rect x="50.3122%" y="165" width="0.4890%" height="15" fill="rgb(233,208,19)"/><text x="50.5622%" y="175.50"></text></g><g><title>item_attrs (38,251 samples, 0.11%)</title><rect x="50.8012%" y="197" width="0.1065%" height="15" fill="rgb(216,164,2)"/><text x="51.0512%" y="207.50"></text></g><g><title>lint_levels (53,331 samples, 0.15%)</title><rect x="50.9559%" y="197" width="0.1485%" height="15" fill="rgb(220,129,5)"/><text x="51.2059%" y="207.50"></text></g><g><title>evaluate_obligation (74,910 samples, 0.21%)</title><rect x="51.3116%" y="181" width="0.2086%" height="15" fill="rgb(242,17,10)"/><text x="51.5616%" y="191.50"></text></g><g><title>method_autoderef_steps (145,851 samples, 0.41%)</title><rect x="51.1531%" y="197" width="0.4062%" height="15" fill="rgb(242,107,0)"/><text x="51.4031%" y="207.50"></text></g><g><title>explicit_predicates_of (75,521 samples, 0.21%)</title><rect x="51.9097%" y="165" width="0.2103%" height="15" fill="rgb(251,28,31)"/><text x="52.1597%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (61,181 samples, 0.17%)</title><rect x="51.9497%" y="149" width="0.1704%" height="15" fill="rgb(233,223,10)"/><text x="52.1997%" y="159.50"></text></g><g><title>predicates_of (243,603 samples, 0.68%)</title><rect x="51.5859%" y="197" width="0.6784%" height="15" fill="rgb(215,21,27)"/><text x="51.8359%" y="207.50"></text></g><g><title>predicates_defined_on (174,962 samples, 0.49%)</title><rect x="51.7771%" y="181" width="0.4872%" height="15" fill="rgb(232,23,21)"/><text x="52.0271%" y="191.50"></text></g><g><title>inferred_outlives_of (51,801 samples, 0.14%)</title><rect x="52.1200%" y="165" width="0.1443%" height="15" fill="rgb(244,5,23)"/><text x="52.3700%" y="175.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (38,211 samples, 0.11%)</title><rect x="52.1579%" y="149" width="0.1064%" height="15" fill="rgb(226,81,46)"/><text x="52.4079%" y="159.50"></text></g><g><title>type_of (46,051 samples, 0.13%)</title><rect x="52.3227%" y="197" width="0.1282%" height="15" fill="rgb(247,70,30)"/><text x="52.5727%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (37,750 samples, 0.11%)</title><rect x="52.3458%" y="181" width="0.1051%" height="15" fill="rgb(212,68,19)"/><text x="52.5958%" y="191.50"></text></g><g><title>typeck (13,422,169 samples, 37.38%)</title><rect x="15.1445%" y="213" width="37.3767%" height="15" fill="rgb(240,187,13)"/><text x="15.3945%" y="223.50">typeck</text></g><g><title>item_bodies_checking (14,539,852 samples, 40.49%)</title><rect x="12.0506%" y="261" width="40.4891%" height="15" fill="rgb(223,113,26)"/><text x="12.3006%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (14,537,812 samples, 40.48%)</title><rect x="12.0563%" y="245" width="40.4834%" height="15" fill="rgb(206,192,2)"/><text x="12.3063%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (14,531,532 samples, 40.47%)</title><rect x="12.0738%" y="229" width="40.4659%" height="15" fill="rgb(241,108,4)"/><text x="12.3238%" y="239.50">typeck</text></g><g><title>late_bound_vars_map (46,540 samples, 0.13%)</title><rect x="52.7784%" y="213" width="0.1296%" height="15" fill="rgb(247,173,49)"/><text x="53.0284%" y="223.50"></text></g><g><title>resolve_lifetimes (38,950 samples, 0.11%)</title><rect x="52.7996%" y="197" width="0.1085%" height="15" fill="rgb(224,114,35)"/><text x="53.0496%" y="207.50"></text></g><g><title>fn_sig (102,461 samples, 0.29%)</title><rect x="52.6606%" y="229" width="0.2853%" height="15" fill="rgb(245,159,27)"/><text x="52.9106%" y="239.50"></text></g><g><title>generics_of (42,690 samples, 0.12%)</title><rect x="52.9459%" y="229" width="0.1189%" height="15" fill="rgb(245,172,44)"/><text x="53.1959%" y="239.50"></text></g><g><title>type_collecting (225,242 samples, 0.63%)</title><rect x="52.5518%" y="261" width="0.6272%" height="15" fill="rgb(236,23,11)"/><text x="52.8018%" y="271.50"></text></g><g><title>collect_mod_item_types (218,882 samples, 0.61%)</title><rect x="52.5695%" y="245" width="0.6095%" height="15" fill="rgb(205,117,38)"/><text x="52.8195%" y="255.50"></text></g><g><title>implied_outlives_bounds (50,790 samples, 0.14%)</title><rect x="53.7464%" y="229" width="0.1414%" height="15" fill="rgb(237,72,25)"/><text x="53.9964%" y="239.50"></text></g><g><title>param_env (127,411 samples, 0.35%)</title><rect x="53.8879%" y="229" width="0.3548%" height="15" fill="rgb(244,70,9)"/><text x="54.1379%" y="239.50"></text></g><g><title>analysis (19,052,643 samples, 53.06%)</title><rect x="1.3024%" y="293" width="53.0559%" height="15" fill="rgb(217,125,39)"/><text x="1.5524%" y="303.50">analysis</text></g><g><title>type_check_crate (15,241,829 samples, 42.44%)</title><rect x="11.9144%" y="277" width="42.4439%" height="15" fill="rgb(235,36,10)"/><text x="12.1644%" y="287.50">type_check_crate</text></g><g><title>wf_checking (422,645 samples, 1.18%)</title><rect x="53.1813%" y="261" width="1.1769%" height="15" fill="rgb(251,123,47)"/><text x="53.4313%" y="271.50"></text></g><g><title>check_item_well_formed (408,454 samples, 1.14%)</title><rect x="53.2208%" y="245" width="1.1374%" height="15" fill="rgb(221,13,13)"/><text x="53.4708%" y="255.50"></text></g><g><title>codegen_crate (398,105 samples, 1.11%)</title><rect x="54.3752%" y="293" width="1.1086%" height="15" fill="rgb(238,131,9)"/><text x="54.6252%" y="303.50"></text></g><g><title>AST_validation (43,561 samples, 0.12%)</title><rect x="55.8483%" y="277" width="0.1213%" height="15" fill="rgb(211,50,8)"/><text x="56.0983%" y="287.50"></text></g><g><title>crate_injection (55,461 samples, 0.15%)</title><rect x="56.0109%" y="277" width="0.1544%" height="15" fill="rgb(245,182,24)"/><text x="56.2609%" y="287.50"></text></g><g><title>metadata_load_macro (85,671 samples, 0.24%)</title><rect x="78.2794%" y="245" width="0.2386%" height="15" fill="rgb(242,14,37)"/><text x="78.5294%" y="255.50"></text></g><g><title>macro_expand_crate (9,318,123 samples, 25.95%)</title><rect x="56.1653%" y="277" width="25.9482%" height="15" fill="rgb(246,228,12)"/><text x="56.4153%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (9,304,833 samples, 25.91%)</title><rect x="56.2023%" y="261" width="25.9112%" height="15" fill="rgb(213,55,15)"/><text x="56.4523%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (1,291,165 samples, 3.60%)</title><rect x="78.5180%" y="245" width="3.5955%" height="15" fill="rgb(209,9,3)"/><text x="78.7680%" y="255.50">meta..</text></g><g><title>metadata_register_crate (462,125 samples, 1.29%)</title><rect x="80.8266%" y="229" width="1.2869%" height="15" fill="rgb(230,59,30)"/><text x="81.0766%" y="239.50"></text></g><g><title>metadata_register_crate (42,241 samples, 0.12%)</title><rect x="81.9959%" y="213" width="0.1176%" height="15" fill="rgb(209,121,21)"/><text x="82.2459%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (86,501 samples, 0.24%)</title><rect x="82.1228%" y="277" width="0.2409%" height="15" fill="rgb(220,109,13)"/><text x="82.3728%" y="287.50"></text></g><g><title>finalize_imports (146,801 samples, 0.41%)</title><rect x="82.3747%" y="261" width="0.4088%" height="15" fill="rgb(232,18,1)"/><text x="82.6247%" y="271.50"></text></g><g><title>late_resolve_crate (717,977 samples, 2.00%)</title><rect x="82.8072%" y="261" width="1.9993%" height="15" fill="rgb(215,41,42)"/><text x="83.0572%" y="271.50">l..</text></g><g><title>configure_and_expand (10,551,117 samples, 29.38%)</title><rect x="55.4838%" y="293" width="29.3817%" height="15" fill="rgb(224,123,36)"/><text x="55.7338%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (898,410 samples, 2.50%)</title><rect x="82.3637%" y="277" width="2.5018%" height="15" fill="rgb(240,125,3)"/><text x="82.6137%" y="287.50">re..</text></g><g><title>early_lint_checks (88,011 samples, 0.25%)</title><rect x="84.9911%" y="293" width="0.2451%" height="15" fill="rgb(205,98,50)"/><text x="85.2411%" y="303.50"></text></g><g><title>free_global_ctxt (2,907,813 samples, 8.10%)</title><rect x="85.2361%" y="293" width="8.0974%" height="15" fill="rgb(205,185,37)"/><text x="85.4861%" y="303.50">free_global..</text></g><g><title>crate_hash (67,541 samples, 0.19%)</title><rect x="93.8242%" y="277" width="0.1881%" height="15" fill="rgb(238,207,15)"/><text x="94.0742%" y="287.50"></text></g><g><title>generate_crate_metadata (311,513 samples, 0.87%)</title><rect x="93.3335%" y="293" width="0.8675%" height="15" fill="rgb(213,199,42)"/><text x="93.5835%" y="303.50"></text></g><g><title>hir_lowering (317,154 samples, 0.88%)</title><rect x="94.2010%" y="293" width="0.8832%" height="15" fill="rgb(235,201,11)"/><text x="94.4510%" y="303.50"></text></g><g><title>link (52,500 samples, 0.15%)</title><rect x="95.0842%" y="293" width="0.1462%" height="15" fill="rgb(207,46,11)"/><text x="95.3342%" y="303.50"></text></g><g><title>parse_crate (588,997 samples, 1.64%)</title><rect x="95.2304%" y="293" width="1.6402%" height="15" fill="rgb(241,35,35)"/><text x="95.4804%" y="303.50"></text></g><g><title>prepare_outputs (206,142 samples, 0.57%)</title><rect x="96.8854%" y="293" width="0.5740%" height="15" fill="rgb(243,32,47)"/><text x="97.1354%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (543,096 samples, 1.51%)</title><rect x="97.4594%" y="293" width="1.5124%" height="15" fill="rgb(247,202,23)"/><text x="97.7094%" y="303.50"></text></g><g><title>setup_global_ctxt (85,341 samples, 0.24%)</title><rect x="99.0023%" y="293" width="0.2376%" height="15" fill="rgb(219,102,11)"/><text x="99.2523%" y="303.50"></text></g><g><title>all (35,910,530 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (35,910,530 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (272,953 samples, 0.76%)</title><rect x="99.2399%" y="293" width="0.7601%" height="15" fill="rgb(216,99,12)"/><text x="99.4899%" y="303.50"></text></g></svg></svg>