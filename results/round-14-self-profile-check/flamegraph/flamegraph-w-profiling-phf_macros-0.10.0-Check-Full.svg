<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (221,282 samples, 0.11%)</title><rect x="11.2928%" y="165" width="0.1132%" height="15" fill="rgb(227,0,7)"/><text x="11.5428%" y="175.50"></text></g><g><title>item_attrs (217,344 samples, 0.11%)</title><rect x="11.8208%" y="133" width="0.1112%" height="15" fill="rgb(217,0,24)"/><text x="12.0708%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (208,204 samples, 0.11%)</title><rect x="11.8255%" y="117" width="0.1065%" height="15" fill="rgb(221,193,54)"/><text x="12.0755%" y="127.50"></text></g><g><title>codegen_fn_attrs (340,684 samples, 0.17%)</title><rect x="11.7715%" y="149" width="0.1743%" height="15" fill="rgb(248,212,6)"/><text x="12.0215%" y="159.50"></text></g><g><title>adt_drop_tys (477,674 samples, 0.24%)</title><rect x="14.6095%" y="117" width="0.2444%" height="15" fill="rgb(208,68,35)"/><text x="14.8595%" y="127.50"></text></g><g><title>needs_drop_raw (1,515,653 samples, 0.78%)</title><rect x="14.5399%" y="133" width="0.7755%" height="15" fill="rgb(232,128,0)"/><text x="14.7899%" y="143.50"></text></g><g><title>is_copy_raw (901,959 samples, 0.46%)</title><rect x="14.8539%" y="117" width="0.4615%" height="15" fill="rgb(207,160,47)"/><text x="15.1039%" y="127.50"></text></g><g><title>evaluate_obligation (766,897 samples, 0.39%)</title><rect x="14.9230%" y="101" width="0.3924%" height="15" fill="rgb(228,23,34)"/><text x="15.1730%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (531,325 samples, 0.27%)</title><rect x="15.5246%" y="117" width="0.2718%" height="15" fill="rgb(218,30,26)"/><text x="15.7746%" y="127.50"></text></g><g><title>impl_parent (534,954 samples, 0.27%)</title><rect x="16.2088%" y="101" width="0.2737%" height="15" fill="rgb(220,122,19)"/><text x="16.4588%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (328,354 samples, 0.17%)</title><rect x="16.3145%" y="85" width="0.1680%" height="15" fill="rgb(250,228,42)"/><text x="16.5645%" y="95.50"></text></g><g><title>specialization_graph_of (2,241,174 samples, 1.15%)</title><rect x="15.8085%" y="117" width="1.1467%" height="15" fill="rgb(240,193,28)"/><text x="16.0585%" y="127.50"></text></g><g><title>impl_trait_ref (923,898 samples, 0.47%)</title><rect x="16.4825%" y="101" width="0.4727%" height="15" fill="rgb(216,20,37)"/><text x="16.7325%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (728,137 samples, 0.37%)</title><rect x="16.5826%" y="85" width="0.3725%" height="15" fill="rgb(206,188,39)"/><text x="16.8326%" y="95.50"></text></g><g><title>resolve_instance (3,250,376 samples, 1.66%)</title><rect x="15.3153%" y="133" width="1.6630%" height="15" fill="rgb(217,207,13)"/><text x="15.5653%" y="143.50"></text></g><g><title>thir_body (1,994,912 samples, 1.02%)</title><rect x="16.9915%" y="133" width="1.0207%" height="15" fill="rgb(231,73,38)"/><text x="17.2415%" y="143.50"></text></g><g><title>mir_const (14,344,691 samples, 7.34%)</title><rect x="10.6861%" y="181" width="7.3392%" height="15" fill="rgb(225,20,46)"/><text x="10.9361%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (12,937,585 samples, 6.62%)</title><rect x="11.4060%" y="165" width="6.6193%" height="15" fill="rgb(210,31,41)"/><text x="11.6560%" y="175.50">unsafety_..</text></g><g><title>mir_built (11,879,370 samples, 6.08%)</title><rect x="11.9474%" y="149" width="6.0779%" height="15" fill="rgb(221,200,47)"/><text x="12.1974%" y="159.50">mir_built</text></g><g><title>mir_promoted (16,052,110 samples, 8.21%)</title><rect x="10.0171%" y="197" width="8.2128%" height="15" fill="rgb(226,26,5)"/><text x="10.2671%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (399,915 samples, 0.20%)</title><rect x="18.0253%" y="181" width="0.2046%" height="15" fill="rgb(249,33,26)"/><text x="18.2753%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (542,026 samples, 0.28%)</title><rect x="18.2320%" y="197" width="0.2773%" height="15" fill="rgb(235,183,28)"/><text x="18.4820%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (940,514 samples, 0.48%)</title><rect x="18.5094%" y="197" width="0.4812%" height="15" fill="rgb(221,5,38)"/><text x="18.7594%" y="207.50"></text></g><g><title>normalize_projection_ty (666,920 samples, 0.34%)</title><rect x="18.6493%" y="181" width="0.3412%" height="15" fill="rgb(247,18,42)"/><text x="18.8993%" y="191.50"></text></g><g><title>type_op_normalize_predicate (315,376 samples, 0.16%)</title><rect x="18.9906%" y="197" width="0.1614%" height="15" fill="rgb(241,131,45)"/><text x="19.2406%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,791,862 samples, 1.43%)</title><rect x="19.1519%" y="197" width="1.4284%" height="15" fill="rgb(249,31,29)"/><text x="19.4019%" y="207.50"></text></g><g><title>MIR_borrow_checking (39,000,956 samples, 19.95%)</title><rect x="0.6338%" y="229" width="19.9541%" height="15" fill="rgb(225,111,53)"/><text x="0.8838%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (38,907,496 samples, 19.91%)</title><rect x="0.6816%" y="213" width="19.9063%" height="15" fill="rgb(238,160,17)"/><text x="0.9316%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (322,473 samples, 0.16%)</title><rect x="20.9194%" y="197" width="0.1650%" height="15" fill="rgb(214,148,48)"/><text x="21.1694%" y="207.50"></text></g><g><title>check_mod_attrs (620,177 samples, 0.32%)</title><rect x="20.7672%" y="213" width="0.3173%" height="15" fill="rgb(232,36,49)"/><text x="21.0172%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (413,375 samples, 0.21%)</title><rect x="21.1823%" y="213" width="0.2115%" height="15" fill="rgb(209,103,24)"/><text x="21.4323%" y="223.50"></text></g><g><title>misc_checking_1 (1,292,204 samples, 0.66%)</title><rect x="20.7552%" y="229" width="0.6611%" height="15" fill="rgb(229,88,8)"/><text x="21.0052%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (719,538 samples, 0.37%)</title><rect x="21.4173%" y="213" width="0.3681%" height="15" fill="rgb(213,181,19)"/><text x="21.6673%" y="223.50"></text></g><g><title>check_mod_liveness (577,057 samples, 0.30%)</title><rect x="21.4902%" y="197" width="0.2952%" height="15" fill="rgb(254,191,54)"/><text x="21.7402%" y="207.50"></text></g><g><title>misc_checking_2 (2,049,443 samples, 1.05%)</title><rect x="21.4163%" y="229" width="1.0486%" height="15" fill="rgb(241,83,37)"/><text x="21.6663%" y="239.50"></text></g><g><title>match_checking (1,328,065 samples, 0.68%)</title><rect x="21.7854%" y="213" width="0.6795%" height="15" fill="rgb(233,36,39)"/><text x="22.0354%" y="223.50"></text></g><g><title>check_match (1,301,125 samples, 0.67%)</title><rect x="21.7992%" y="197" width="0.6657%" height="15" fill="rgb(226,3,54)"/><text x="22.0492%" y="207.50"></text></g><g><title>death_checking (450,975 samples, 0.23%)</title><rect x="22.5573%" y="213" width="0.2307%" height="15" fill="rgb(245,192,40)"/><text x="22.8073%" y="223.50"></text></g><g><title>eval_to_const_value_raw (606,857 samples, 0.31%)</title><rect x="23.0944%" y="133" width="0.3105%" height="15" fill="rgb(238,167,29)"/><text x="23.3444%" y="143.50"></text></g><g><title>eval_to_const_value_raw (606,237 samples, 0.31%)</title><rect x="23.0947%" y="117" width="0.3102%" height="15" fill="rgb(232,182,51)"/><text x="23.3447%" y="127.50"></text></g><g><title>eval_to_allocation_raw (604,527 samples, 0.31%)</title><rect x="23.0956%" y="101" width="0.3093%" height="15" fill="rgb(231,60,39)"/><text x="23.3456%" y="111.50"></text></g><g><title>eval_to_allocation_raw (679,857 samples, 0.35%)</title><rect x="23.0578%" y="181" width="0.3478%" height="15" fill="rgb(208,69,12)"/><text x="23.3078%" y="191.50"></text></g><g><title>eval_to_allocation_raw (679,087 samples, 0.35%)</title><rect x="23.0582%" y="165" width="0.3474%" height="15" fill="rgb(235,93,37)"/><text x="23.3082%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (615,617 samples, 0.31%)</title><rect x="23.0907%" y="149" width="0.3150%" height="15" fill="rgb(213,116,39)"/><text x="23.3407%" y="159.50"></text></g><g><title>param_env (247,312 samples, 0.13%)</title><rect x="23.4653%" y="181" width="0.1265%" height="15" fill="rgb(222,207,29)"/><text x="23.7153%" y="191.50"></text></g><g><title>crate_lints (1,650,738 samples, 0.84%)</title><rect x="22.7890%" y="197" width="0.8446%" height="15" fill="rgb(206,96,30)"/><text x="23.0390%" y="207.50"></text></g><g><title>lint_checking (2,435,407 samples, 1.25%)</title><rect x="22.7880%" y="213" width="1.2460%" height="15" fill="rgb(218,138,4)"/><text x="23.0380%" y="223.50"></text></g><g><title>module_lints (782,789 samples, 0.40%)</title><rect x="23.6336%" y="197" width="0.4005%" height="15" fill="rgb(250,191,14)"/><text x="23.8836%" y="207.50"></text></g><g><title>lint_mod (778,169 samples, 0.40%)</title><rect x="23.6359%" y="181" width="0.3981%" height="15" fill="rgb(239,60,40)"/><text x="23.8859%" y="191.50"></text></g><g><title>privacy_checking_modules (1,172,933 samples, 0.60%)</title><rect x="24.1070%" y="213" width="0.6001%" height="15" fill="rgb(206,27,48)"/><text x="24.3570%" y="223.50"></text></g><g><title>check_mod_privacy (1,170,103 samples, 0.60%)</title><rect x="24.1084%" y="197" width="0.5987%" height="15" fill="rgb(225,35,8)"/><text x="24.3584%" y="207.50"></text></g><g><title>misc_checking_3 (4,400,049 samples, 2.25%)</title><rect x="22.4649%" y="229" width="2.2512%" height="15" fill="rgb(250,213,24)"/><text x="22.7149%" y="239.50">m..</text></g><g><title>impl_parent (1,979,444 samples, 1.01%)</title><rect x="26.4739%" y="165" width="1.0127%" height="15" fill="rgb(247,123,22)"/><text x="26.7239%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,191,257 samples, 0.61%)</title><rect x="26.8772%" y="149" width="0.6095%" height="15" fill="rgb(231,138,38)"/><text x="27.1272%" y="159.50"></text></g><g><title>impl_trait_ref (4,501,110 samples, 2.30%)</title><rect x="27.4867%" y="165" width="2.3029%" height="15" fill="rgb(231,145,46)"/><text x="27.7367%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,706,724 samples, 1.90%)</title><rect x="27.8931%" y="149" width="1.8965%" height="15" fill="rgb(251,118,11)"/><text x="28.1431%" y="159.50">m..</text></g><g><title>coherent_trait (10,503,426 samples, 5.37%)</title><rect x="24.7597%" y="197" width="5.3739%" height="15" fill="rgb(217,147,25)"/><text x="25.0097%" y="207.50">coheren..</text></g><g><title>specialization_graph_of (10,488,206 samples, 5.37%)</title><rect x="24.7675%" y="181" width="5.3661%" height="15" fill="rgb(247,81,37)"/><text x="25.0175%" y="191.50">special..</text></g><g><title>trait_impls_of (672,436 samples, 0.34%)</title><rect x="29.7896%" y="165" width="0.3440%" height="15" fill="rgb(209,12,38)"/><text x="30.0396%" y="175.50"></text></g><g><title>implementations_of_trait (201,351 samples, 0.10%)</title><rect x="30.0306%" y="149" width="0.1030%" height="15" fill="rgb(227,1,9)"/><text x="30.2806%" y="159.50"></text></g><g><title>coherence_checking (10,566,749 samples, 5.41%)</title><rect x="24.7506%" y="213" width="5.4063%" height="15" fill="rgb(248,47,43)"/><text x="25.0006%" y="223.50">coheren..</text></g><g><title>adt_sized_constraint (288,413 samples, 0.15%)</title><rect x="44.0833%" y="165" width="0.1476%" height="15" fill="rgb(221,10,30)"/><text x="44.3333%" y="175.50"></text></g><g><title>associated_item (1,347,204 samples, 0.69%)</title><rect x="44.4912%" y="149" width="0.6893%" height="15" fill="rgb(210,229,1)"/><text x="44.7412%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (1,042,583 samples, 0.53%)</title><rect x="44.6470%" y="133" width="0.5334%" height="15" fill="rgb(222,148,37)"/><text x="44.8970%" y="143.50"></text></g><g><title>associated_items (1,912,970 samples, 0.98%)</title><rect x="44.2375%" y="165" width="0.9787%" height="15" fill="rgb(234,67,33)"/><text x="44.4875%" y="175.50"></text></g><g><title>adt_dtorck_constraint (217,353 samples, 0.11%)</title><rect x="45.7530%" y="117" width="0.1112%" height="15" fill="rgb(247,98,35)"/><text x="46.0030%" y="127.50"></text></g><g><title>adt_dtorck_constraint (332,244 samples, 0.17%)</title><rect x="45.7102%" y="133" width="0.1700%" height="15" fill="rgb(247,138,52)"/><text x="45.9602%" y="143.50"></text></g><g><title>dropck_outlives (1,244,765 samples, 0.64%)</title><rect x="45.2625%" y="165" width="0.6369%" height="15" fill="rgb(213,79,30)"/><text x="45.5125%" y="175.50"></text></g><g><title>adt_dtorck_constraint (495,325 samples, 0.25%)</title><rect x="45.6460%" y="149" width="0.2534%" height="15" fill="rgb(246,177,23)"/><text x="45.8960%" y="159.50"></text></g><g><title>generics_of (438,565 samples, 0.22%)</title><rect x="47.3173%" y="149" width="0.2244%" height="15" fill="rgb(230,62,27)"/><text x="47.5673%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (324,264 samples, 0.17%)</title><rect x="47.3757%" y="133" width="0.1659%" height="15" fill="rgb(216,154,8)"/><text x="47.6257%" y="143.50"></text></g><g><title>impl_trait_ref (637,668 samples, 0.33%)</title><rect x="47.6018%" y="149" width="0.3263%" height="15" fill="rgb(244,35,45)"/><text x="47.8518%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (555,756 samples, 0.28%)</title><rect x="47.6437%" y="133" width="0.2843%" height="15" fill="rgb(251,115,12)"/><text x="47.8937%" y="143.50"></text></g><g><title>predicates_of (554,107 samples, 0.28%)</title><rect x="47.9378%" y="149" width="0.2835%" height="15" fill="rgb(240,54,50)"/><text x="48.1878%" y="159.50"></text></g><g><title>predicates_defined_on (316,924 samples, 0.16%)</title><rect x="48.0592%" y="133" width="0.1621%" height="15" fill="rgb(233,84,52)"/><text x="48.3092%" y="143.50"></text></g><g><title>specializes (535,076 samples, 0.27%)</title><rect x="48.2213%" y="149" width="0.2738%" height="15" fill="rgb(207,117,47)"/><text x="48.4713%" y="159.50"></text></g><g><title>param_env (311,563 samples, 0.16%)</title><rect x="48.3357%" y="133" width="0.1594%" height="15" fill="rgb(249,43,39)"/><text x="48.5857%" y="143.50"></text></g><g><title>trait_impls_of (692,177 samples, 0.35%)</title><rect x="48.4996%" y="149" width="0.3541%" height="15" fill="rgb(209,38,44)"/><text x="48.7496%" y="159.50"></text></g><g><title>implementations_of_trait (254,123 samples, 0.13%)</title><rect x="48.7237%" y="133" width="0.1300%" height="15" fill="rgb(236,212,23)"/><text x="48.9737%" y="143.50"></text></g><g><title>evaluate_obligation (5,785,267 samples, 2.96%)</title><rect x="45.8994%" y="165" width="2.9599%" height="15" fill="rgb(242,79,21)"/><text x="46.1494%" y="175.50">eva..</text></g><g><title>generics_of (261,124 samples, 0.13%)</title><rect x="48.9569%" y="165" width="0.1336%" height="15" fill="rgb(211,96,35)"/><text x="49.2069%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (198,003 samples, 0.10%)</title><rect x="48.9892%" y="149" width="0.1013%" height="15" fill="rgb(253,215,40)"/><text x="49.2392%" y="159.50"></text></g><g><title>evaluate_obligation (312,075 samples, 0.16%)</title><rect x="49.6112%" y="149" width="0.1597%" height="15" fill="rgb(211,81,21)"/><text x="49.8612%" y="159.50"></text></g><g><title>method_autoderef_steps (722,721 samples, 0.37%)</title><rect x="49.4111%" y="165" width="0.3698%" height="15" fill="rgb(208,190,38)"/><text x="49.6611%" y="175.50"></text></g><g><title>predicates_of (647,549 samples, 0.33%)</title><rect x="49.8044%" y="165" width="0.3313%" height="15" fill="rgb(235,213,38)"/><text x="50.0544%" y="175.50"></text></g><g><title>predicates_defined_on (423,237 samples, 0.22%)</title><rect x="49.9192%" y="149" width="0.2165%" height="15" fill="rgb(237,122,38)"/><text x="50.1692%" y="159.50"></text></g><g><title>adt_def (316,001 samples, 0.16%)</title><rect x="56.2283%" y="117" width="0.1617%" height="15" fill="rgb(244,218,35)"/><text x="56.4783%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (307,711 samples, 0.16%)</title><rect x="56.2325%" y="101" width="0.1574%" height="15" fill="rgb(240,68,47)"/><text x="56.4825%" y="111.50"></text></g><g><title>item_attrs (204,231 samples, 0.10%)</title><rect x="56.2855%" y="85" width="0.1045%" height="15" fill="rgb(210,16,53)"/><text x="56.5355%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (195,481 samples, 0.10%)</title><rect x="56.2899%" y="69" width="0.1000%" height="15" fill="rgb(235,124,12)"/><text x="56.5399%" y="79.50"></text></g><g><title>adt_def (217,504 samples, 0.11%)</title><rect x="56.5107%" y="101" width="0.1113%" height="15" fill="rgb(224,169,11)"/><text x="56.7607%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (210,134 samples, 0.11%)</title><rect x="56.5144%" y="85" width="0.1075%" height="15" fill="rgb(250,166,2)"/><text x="56.7644%" y="95.50"></text></g><g><title>adt_def (227,963 samples, 0.12%)</title><rect x="56.7722%" y="85" width="0.1166%" height="15" fill="rgb(242,216,29)"/><text x="57.0222%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (220,603 samples, 0.11%)</title><rect x="56.7759%" y="69" width="0.1129%" height="15" fill="rgb(230,116,27)"/><text x="57.0259%" y="79.50"></text></g><g><title>adt_def (238,613 samples, 0.12%)</title><rect x="56.9777%" y="69" width="0.1221%" height="15" fill="rgb(228,99,48)"/><text x="57.2277%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (229,903 samples, 0.12%)</title><rect x="56.9821%" y="53" width="0.1176%" height="15" fill="rgb(253,11,6)"/><text x="57.2321%" y="63.50"></text></g><g><title>adt_def (270,093 samples, 0.14%)</title><rect x="57.1799%" y="53" width="0.1382%" height="15" fill="rgb(247,143,39)"/><text x="57.4299%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (258,433 samples, 0.13%)</title><rect x="57.1858%" y="37" width="0.1322%" height="15" fill="rgb(236,97,10)"/><text x="57.4358%" y="47.50"></text></g><g><title>adt_dtorck_constraint (641,438 samples, 0.33%)</title><rect x="57.1152%" y="69" width="0.3282%" height="15" fill="rgb(233,208,19)"/><text x="57.3652%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,086,223 samples, 0.56%)</title><rect x="56.9108%" y="85" width="0.5557%" height="15" fill="rgb(216,164,2)"/><text x="57.1608%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,729,951 samples, 0.89%)</title><rect x="56.6366%" y="101" width="0.8851%" height="15" fill="rgb(220,129,5)"/><text x="56.8866%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,482,461 samples, 1.27%)</title><rect x="56.4107%" y="117" width="1.2701%" height="15" fill="rgb(242,17,10)"/><text x="56.6607%" y="127.50"></text></g><g><title>type_of (295,253 samples, 0.15%)</title><rect x="57.5297%" y="101" width="0.1511%" height="15" fill="rgb(242,107,0)"/><text x="57.7797%" y="111.50"></text></g><g><title>dropck_outlives (3,976,983 samples, 2.03%)</title><rect x="55.6832%" y="149" width="2.0348%" height="15" fill="rgb(251,28,31)"/><text x="55.9332%" y="159.50">d..</text></g><g><title>adt_dtorck_constraint (3,093,245 samples, 1.58%)</title><rect x="56.1354%" y="133" width="1.5826%" height="15" fill="rgb(233,223,10)"/><text x="56.3854%" y="143.50"></text></g><g><title>evaluate_obligation (1,842,374 samples, 0.94%)</title><rect x="57.7180%" y="149" width="0.9426%" height="15" fill="rgb(215,21,27)"/><text x="57.9680%" y="159.50"></text></g><g><title>trait_impls_of (390,416 samples, 0.20%)</title><rect x="58.4608%" y="133" width="0.1997%" height="15" fill="rgb(232,23,21)"/><text x="58.7108%" y="143.50"></text></g><g><title>is_copy_raw (331,924 samples, 0.17%)</title><rect x="58.7851%" y="149" width="0.1698%" height="15" fill="rgb(244,5,23)"/><text x="59.0351%" y="159.50"></text></g><g><title>evaluate_obligation (305,414 samples, 0.16%)</title><rect x="58.7987%" y="133" width="0.1563%" height="15" fill="rgb(226,81,46)"/><text x="59.0487%" y="143.50"></text></g><g><title>lint_levels (309,444 samples, 0.16%)</title><rect x="58.9826%" y="149" width="0.1583%" height="15" fill="rgb(247,70,30)"/><text x="59.2326%" y="159.50"></text></g><g><title>method_autoderef_steps (320,354 samples, 0.16%)</title><rect x="59.1463%" y="149" width="0.1639%" height="15" fill="rgb(212,68,19)"/><text x="59.3963%" y="159.50"></text></g><g><title>typeck (17,886,770 samples, 9.15%)</title><rect x="50.2927%" y="165" width="9.1514%" height="15" fill="rgb(240,187,13)"/><text x="50.5427%" y="175.50">typeck</text></g><g><title>item_bodies_checking (57,305,472 samples, 29.32%)</title><rect x="30.1692%" y="213" width="29.3193%" height="15" fill="rgb(223,113,26)"/><text x="30.4192%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,301,651 samples, 29.32%)</title><rect x="30.1712%" y="197" width="29.3173%" height="15" fill="rgb(206,192,2)"/><text x="30.4212%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (57,247,101 samples, 29.29%)</title><rect x="30.1991%" y="181" width="29.2894%" height="15" fill="rgb(241,108,4)"/><text x="30.4491%" y="191.50">typeck</text></g><g><title>impl_trait_ref (498,975 samples, 0.26%)</title><rect x="59.9935%" y="133" width="0.2553%" height="15" fill="rgb(247,173,49)"/><text x="60.2435%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (477,035 samples, 0.24%)</title><rect x="60.0047%" y="117" width="0.2441%" height="15" fill="rgb(224,114,35)"/><text x="60.2547%" y="127.50"></text></g><g><title>adt_destructor (707,978 samples, 0.36%)</title><rect x="59.9075%" y="181" width="0.3622%" height="15" fill="rgb(245,159,27)"/><text x="60.1575%" y="191.50"></text></g><g><title>coherent_trait (702,548 samples, 0.36%)</title><rect x="59.9103%" y="165" width="0.3594%" height="15" fill="rgb(245,172,44)"/><text x="60.1603%" y="175.50"></text></g><g><title>specialization_graph_of (700,808 samples, 0.36%)</title><rect x="59.9112%" y="149" width="0.3586%" height="15" fill="rgb(236,23,11)"/><text x="60.1612%" y="159.50"></text></g><g><title>type_of (433,876 samples, 0.22%)</title><rect x="60.3305%" y="181" width="0.2220%" height="15" fill="rgb(205,117,38)"/><text x="60.5805%" y="191.50"></text></g><g><title>typeck (939,511 samples, 0.48%)</title><rect x="60.5524%" y="181" width="0.4807%" height="15" fill="rgb(237,72,25)"/><text x="60.8024%" y="191.50"></text></g><g><title>item_types_checking (3,027,504 samples, 1.55%)</title><rect x="59.4885%" y="213" width="1.5490%" height="15" fill="rgb(244,70,9)"/><text x="59.7385%" y="223.50"></text></g><g><title>check_mod_item_types (3,023,334 samples, 1.55%)</title><rect x="59.4906%" y="197" width="1.5468%" height="15" fill="rgb(217,125,39)"/><text x="59.7406%" y="207.50"></text></g><g><title>fn_sig (207,073 samples, 0.11%)</title><rect x="61.1565%" y="181" width="0.1059%" height="15" fill="rgb(235,36,10)"/><text x="61.4065%" y="191.50"></text></g><g><title>named_region_map (212,203 samples, 0.11%)</title><rect x="61.2984%" y="165" width="0.1086%" height="15" fill="rgb(251,123,47)"/><text x="61.5484%" y="175.50"></text></g><g><title>resolve_lifetimes (199,882 samples, 0.10%)</title><rect x="61.3047%" y="149" width="0.1023%" height="15" fill="rgb(221,13,13)"/><text x="61.5547%" y="159.50"></text></g><g><title>generics_of (296,864 samples, 0.15%)</title><rect x="61.2624%" y="181" width="0.1519%" height="15" fill="rgb(238,131,9)"/><text x="61.5124%" y="191.50"></text></g><g><title>predicates_of (367,364 samples, 0.19%)</title><rect x="61.4322%" y="181" width="0.1880%" height="15" fill="rgb(211,50,8)"/><text x="61.6822%" y="191.50"></text></g><g><title>predicates_defined_on (335,432 samples, 0.17%)</title><rect x="61.4485%" y="165" width="0.1716%" height="15" fill="rgb(245,182,24)"/><text x="61.6985%" y="175.50"></text></g><g><title>type_collecting (1,234,774 samples, 0.63%)</title><rect x="61.0388%" y="213" width="0.6317%" height="15" fill="rgb(242,14,37)"/><text x="61.2888%" y="223.50"></text></g><g><title>collect_mod_item_types (1,222,604 samples, 0.63%)</title><rect x="61.0450%" y="197" width="0.6255%" height="15" fill="rgb(246,228,12)"/><text x="61.2950%" y="207.50"></text></g><g><title>evaluate_obligation (302,563 samples, 0.15%)</title><rect x="61.9832%" y="181" width="0.1548%" height="15" fill="rgb(213,55,15)"/><text x="62.2332%" y="191.50"></text></g><g><title>region_scope_tree (251,055 samples, 0.13%)</title><rect x="62.2511%" y="181" width="0.1284%" height="15" fill="rgb(209,9,3)"/><text x="62.5011%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,282,337 samples, 0.66%)</title><rect x="61.7382%" y="197" width="0.6561%" height="15" fill="rgb(230,59,30)"/><text x="61.9882%" y="207.50"></text></g><g><title>adt_def (260,031 samples, 0.13%)</title><rect x="62.9801%" y="117" width="0.1330%" height="15" fill="rgb(209,121,21)"/><text x="63.2301%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (251,821 samples, 0.13%)</title><rect x="62.9843%" y="101" width="0.1288%" height="15" fill="rgb(220,109,13)"/><text x="63.2343%" y="111.50"></text></g><g><title>adt_sized_constraint (204,494 samples, 0.10%)</title><rect x="63.1131%" y="117" width="0.1046%" height="15" fill="rgb(232,18,1)"/><text x="63.3631%" y="127.50"></text></g><g><title>adt_sized_constraint (519,315 samples, 0.27%)</title><rect x="62.9632%" y="133" width="0.2657%" height="15" fill="rgb(215,41,42)"/><text x="63.2132%" y="143.50"></text></g><g><title>adt_sized_constraint (660,917 samples, 0.34%)</title><rect x="62.8997%" y="165" width="0.3381%" height="15" fill="rgb(224,123,36)"/><text x="63.1497%" y="175.50"></text></g><g><title>adt_sized_constraint (633,457 samples, 0.32%)</title><rect x="62.9138%" y="149" width="0.3241%" height="15" fill="rgb(240,125,3)"/><text x="63.1638%" y="159.50"></text></g><g><title>evaluate_obligation (1,051,061 samples, 0.54%)</title><rect x="62.7486%" y="181" width="0.5378%" height="15" fill="rgb(205,98,50)"/><text x="62.9986%" y="191.50"></text></g><g><title>param_env (233,622 samples, 0.12%)</title><rect x="63.3213%" y="181" width="0.1195%" height="15" fill="rgb(205,185,37)"/><text x="63.5713%" y="191.50"></text></g><g><title>region_scope_tree (336,533 samples, 0.17%)</title><rect x="63.4783%" y="181" width="0.1722%" height="15" fill="rgb(238,207,15)"/><text x="63.7283%" y="191.50"></text></g><g><title>analysis (123,620,453 samples, 63.25%)</title><rect x="0.4194%" y="245" width="63.2482%" height="15" fill="rgb(213,199,42)"/><text x="0.6694%" y="255.50">analysis</text></g><g><title>type_check_crate (76,131,812 samples, 38.95%)</title><rect x="24.7161%" y="229" width="38.9515%" height="15" fill="rgb(235,201,11)"/><text x="24.9661%" y="239.50">type_check_crate</text></g><g><title>wf_checking (3,899,453 samples, 2.00%)</title><rect x="61.6725%" y="213" width="1.9951%" height="15" fill="rgb(207,46,11)"/><text x="61.9225%" y="223.50">w..</text></g><g><title>check_item_well_formed (2,488,536 samples, 1.27%)</title><rect x="62.3943%" y="197" width="1.2732%" height="15" fill="rgb(241,35,35)"/><text x="62.6443%" y="207.50"></text></g><g><title>codegen_crate (652,637 samples, 0.33%)</title><rect x="63.6739%" y="245" width="0.3339%" height="15" fill="rgb(243,32,47)"/><text x="63.9239%" y="255.50"></text></g><g><title>metadata_load_macro (1,047,073 samples, 0.54%)</title><rect x="87.0974%" y="197" width="0.5357%" height="15" fill="rgb(247,202,23)"/><text x="87.3474%" y="207.50"></text></g><g><title>macro_expand_crate (49,976,150 samples, 25.57%)</title><rect x="64.3111%" y="229" width="25.5694%" height="15" fill="rgb(219,102,11)"/><text x="64.5611%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (49,955,090 samples, 25.56%)</title><rect x="64.3219%" y="213" width="25.5586%" height="15" fill="rgb(243,110,44)"/><text x="64.5719%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (4,392,648 samples, 2.25%)</title><rect x="87.6331%" y="197" width="2.2474%" height="15" fill="rgb(222,74,54)"/><text x="87.8831%" y="207.50">m..</text></g><g><title>metadata_register_crate (1,752,891 samples, 0.90%)</title><rect x="88.9837%" y="181" width="0.8968%" height="15" fill="rgb(216,99,12)"/><text x="89.2337%" y="191.50"></text></g><g><title>metadata_register_crate (477,747 samples, 0.24%)</title><rect x="89.6361%" y="165" width="0.2444%" height="15" fill="rgb(226,22,26)"/><text x="89.8861%" y="175.50"></text></g><g><title>metadata_register_crate (206,373 samples, 0.11%)</title><rect x="89.7749%" y="149" width="0.1056%" height="15" fill="rgb(217,163,10)"/><text x="90.0249%" y="159.50"></text></g><g><title>maybe_create_a_macro_crate (361,904 samples, 0.19%)</title><rect x="89.8810%" y="229" width="0.1852%" height="15" fill="rgb(213,25,53)"/><text x="90.1310%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (251,813 samples, 0.13%)</title><rect x="90.0662%" y="229" width="0.1288%" height="15" fill="rgb(252,105,26)"/><text x="90.3162%" y="239.50"></text></g><g><title>finalize_macro_resolutions (315,273 samples, 0.16%)</title><rect x="90.2368%" y="213" width="0.1613%" height="15" fill="rgb(220,39,43)"/><text x="90.4868%" y="223.50"></text></g><g><title>late_resolve_crate (3,675,821 samples, 1.88%)</title><rect x="90.3981%" y="213" width="1.8807%" height="15" fill="rgb(229,68,48)"/><text x="90.6481%" y="223.50">l..</text></g><g><title>configure_and_expand (55,406,011 samples, 28.35%)</title><rect x="64.0078%" y="245" width="28.3475%" height="15" fill="rgb(252,8,32)"/><text x="64.2578%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (4,222,387 samples, 2.16%)</title><rect x="90.1950%" y="229" width="2.1603%" height="15" fill="rgb(223,20,43)"/><text x="90.4450%" y="239.50">r..</text></g><g><title>drop_ast (271,553 samples, 0.14%)</title><rect x="92.3553%" y="245" width="0.1389%" height="15" fill="rgb(229,81,49)"/><text x="92.6053%" y="255.50"></text></g><g><title>early_lint_checks (588,007 samples, 0.30%)</title><rect x="92.5056%" y="245" width="0.3008%" height="15" fill="rgb(236,28,36)"/><text x="92.7556%" y="255.50"></text></g><g><title>free_global_ctxt (4,529,030 samples, 2.32%)</title><rect x="92.8065%" y="245" width="2.3172%" height="15" fill="rgb(249,185,26)"/><text x="93.0565%" y="255.50">f..</text></g><g><title>hir_lowering (3,639,911 samples, 1.86%)</title><rect x="95.2235%" y="245" width="1.8623%" height="15" fill="rgb(249,174,33)"/><text x="95.4735%" y="255.50">h..</text></g><g><title>parse_crate (4,028,184 samples, 2.06%)</title><rect x="97.1188%" y="245" width="2.0609%" height="15" fill="rgb(233,201,37)"/><text x="97.3688%" y="255.50">p..</text></g><g><title>prepare_outputs (200,802 samples, 0.10%)</title><rect x="99.1853%" y="245" width="0.1027%" height="15" fill="rgb(221,78,26)"/><text x="99.4353%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (954,011 samples, 0.49%)</title><rect x="99.2880%" y="245" width="0.4881%" height="15" fill="rgb(250,127,30)"/><text x="99.5380%" y="255.50"></text></g><g><title>all (195,453,068 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (195,453,068 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (337,053 samples, 0.17%)</title><rect x="99.8276%" y="245" width="0.1724%" height="15" fill="rgb(249,83,47)"/><text x="100.0776%" y="255.50"></text></g></svg></svg>