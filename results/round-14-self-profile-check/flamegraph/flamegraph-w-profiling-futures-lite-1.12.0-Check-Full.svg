<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,030,021 samples, 0.10%)</title><rect x="13.2779%" y="117" width="0.1022%" height="15" fill="rgb(227,0,7)"/><text x="13.5279%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,009,502 samples, 0.10%)</title><rect x="13.7918%" y="101" width="0.1001%" height="15" fill="rgb(217,0,24)"/><text x="14.0418%" y="111.50"></text></g><g><title>is_copy_raw (13,862,921 samples, 1.38%)</title><rect x="16.5283%" y="69" width="1.3752%" height="15" fill="rgb(221,193,54)"/><text x="16.7783%" y="79.50"></text></g><g><title>evaluate_obligation (11,657,176 samples, 1.16%)</title><rect x="16.7471%" y="53" width="1.1564%" height="15" fill="rgb(248,212,6)"/><text x="16.9971%" y="63.50"></text></g><g><title>needs_drop_raw (15,963,920 samples, 1.58%)</title><rect x="16.3253%" y="85" width="1.5836%" height="15" fill="rgb(208,68,35)"/><text x="16.5753%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,550,343 samples, 0.25%)</title><rect x="18.0816%" y="69" width="0.2530%" height="15" fill="rgb(232,128,0)"/><text x="18.3316%" y="79.50"></text></g><g><title>resolve_instance (5,296,806 samples, 0.53%)</title><rect x="17.9130%" y="85" width="0.5254%" height="15" fill="rgb(207,160,47)"/><text x="18.1630%" y="95.50"></text></g><g><title>thir_body (8,560,727 samples, 0.85%)</title><rect x="18.4607%" y="85" width="0.8492%" height="15" fill="rgb(228,23,34)"/><text x="18.7107%" y="95.50"></text></g><g><title>mir_const (67,575,680 samples, 6.70%)</title><rect x="12.6353%" y="133" width="6.7034%" height="15" fill="rgb(218,30,26)"/><text x="12.8853%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (60,067,928 samples, 5.96%)</title><rect x="13.3801%" y="117" width="5.9587%" height="15" fill="rgb(220,122,19)"/><text x="13.6301%" y="127.50">unsafety..</text></g><g><title>mir_built (54,908,262 samples, 5.45%)</title><rect x="13.8919%" y="101" width="5.4468%" height="15" fill="rgb(250,228,42)"/><text x="14.1419%" y="111.50">mir_bui..</text></g><g><title>mir_const_qualif (1,994,739 samples, 0.20%)</title><rect x="19.3388%" y="133" width="0.1979%" height="15" fill="rgb(240,193,28)"/><text x="19.5888%" y="143.50"></text></g><g><title>mir_promoted (76,013,243 samples, 7.54%)</title><rect x="11.9963%" y="149" width="7.5404%" height="15" fill="rgb(216,20,37)"/><text x="12.2463%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (5,603,605 samples, 0.56%)</title><rect x="19.5367%" y="149" width="0.5559%" height="15" fill="rgb(206,188,39)"/><text x="19.7867%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (5,111,127 samples, 0.51%)</title><rect x="20.0926%" y="149" width="0.5070%" height="15" fill="rgb(217,207,13)"/><text x="20.3426%" y="159.50"></text></g><g><title>normalize_projection_ty (2,777,768 samples, 0.28%)</title><rect x="20.3240%" y="133" width="0.2756%" height="15" fill="rgb(231,73,38)"/><text x="20.5740%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,417,450 samples, 0.34%)</title><rect x="20.6951%" y="149" width="0.3390%" height="15" fill="rgb(225,20,46)"/><text x="20.9451%" y="159.50"></text></g><g><title>normalize_projection_ty (2,271,787 samples, 0.23%)</title><rect x="20.8088%" y="133" width="0.2254%" height="15" fill="rgb(210,31,41)"/><text x="21.0588%" y="143.50"></text></g><g><title>type_op_prove_predicate (25,782,423 samples, 2.56%)</title><rect x="21.0341%" y="149" width="2.5576%" height="15" fill="rgb(221,200,47)"/><text x="21.2841%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (233,711,604 samples, 23.18%)</title><rect x="0.4092%" y="181" width="23.1840%" height="15" fill="rgb(226,26,5)"/><text x="0.6592%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (232,481,016 samples, 23.06%)</title><rect x="0.5313%" y="165" width="23.0619%" height="15" fill="rgb(249,33,26)"/><text x="0.7813%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,238,204 samples, 0.12%)</title><rect x="23.5931%" y="181" width="0.1228%" height="15" fill="rgb(235,183,28)"/><text x="23.8431%" y="191.50"></text></g><g><title>hir_module_items (1,898,672 samples, 0.19%)</title><rect x="23.7160%" y="181" width="0.1883%" height="15" fill="rgb(221,5,38)"/><text x="23.9660%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,777,231 samples, 0.18%)</title><rect x="24.1503%" y="149" width="0.1763%" height="15" fill="rgb(247,18,42)"/><text x="24.4003%" y="159.50"></text></g><g><title>check_mod_attrs (4,226,788 samples, 0.42%)</title><rect x="23.9073%" y="165" width="0.4193%" height="15" fill="rgb(241,131,45)"/><text x="24.1573%" y="175.50"></text></g><g><title>check_mod_const_bodies (1,061,842 samples, 0.11%)</title><rect x="24.3266%" y="165" width="0.1053%" height="15" fill="rgb(249,31,29)"/><text x="24.5766%" y="175.50"></text></g><g><title>lookup_deprecation_entry (1,550,467 samples, 0.15%)</title><rect x="24.6882%" y="149" width="0.1538%" height="15" fill="rgb(225,111,53)"/><text x="24.9382%" y="159.50"></text></g><g><title>stability_index (1,339,585 samples, 0.13%)</title><rect x="24.7091%" y="133" width="0.1329%" height="15" fill="rgb(238,160,17)"/><text x="24.9591%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,460,959 samples, 0.34%)</title><rect x="24.5179%" y="165" width="0.3433%" height="15" fill="rgb(214,148,48)"/><text x="24.7679%" y="175.50"></text></g><g><title>misc_checking_1 (10,086,162 samples, 1.00%)</title><rect x="23.9044%" y="181" width="1.0005%" height="15" fill="rgb(232,36,49)"/><text x="24.1544%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (4,307,929 samples, 0.43%)</title><rect x="24.9051%" y="165" width="0.4273%" height="15" fill="rgb(209,103,24)"/><text x="25.1551%" y="175.50"></text></g><g><title>check_mod_liveness (3,519,629 samples, 0.35%)</title><rect x="24.9833%" y="149" width="0.3491%" height="15" fill="rgb(229,88,8)"/><text x="25.2333%" y="159.50"></text></g><g><title>misc_checking_2 (9,232,634 samples, 0.92%)</title><rect x="24.9049%" y="181" width="0.9159%" height="15" fill="rgb(213,181,19)"/><text x="25.1549%" y="191.50"></text></g><g><title>match_checking (4,922,495 samples, 0.49%)</title><rect x="25.3325%" y="165" width="0.4883%" height="15" fill="rgb(254,191,54)"/><text x="25.5825%" y="175.50"></text></g><g><title>check_match (4,581,004 samples, 0.45%)</title><rect x="25.3663%" y="149" width="0.4544%" height="15" fill="rgb(241,83,37)"/><text x="25.6163%" y="159.50"></text></g><g><title>check_private_in_public (2,421,527 samples, 0.24%)</title><rect x="25.8225%" y="165" width="0.2402%" height="15" fill="rgb(233,36,39)"/><text x="26.0725%" y="175.50"></text></g><g><title>death_checking (4,074,555 samples, 0.40%)</title><rect x="26.0627%" y="165" width="0.4042%" height="15" fill="rgb(226,3,54)"/><text x="26.3127%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,468,374 samples, 0.15%)</title><rect x="26.9717%" y="133" width="0.1457%" height="15" fill="rgb(245,192,40)"/><text x="27.2217%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,432,124 samples, 0.14%)</title><rect x="26.9753%" y="117" width="0.1421%" height="15" fill="rgb(238,167,29)"/><text x="27.2253%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,376,443 samples, 0.14%)</title><rect x="26.9808%" y="101" width="0.1365%" height="15" fill="rgb(232,182,51)"/><text x="27.2308%" y="111.50"></text></g><g><title>crate_lints (8,400,723 samples, 0.83%)</title><rect x="26.4673%" y="149" width="0.8333%" height="15" fill="rgb(231,60,39)"/><text x="26.7173%" y="159.50"></text></g><g><title>type_of (1,204,654 samples, 0.12%)</title><rect x="27.1811%" y="133" width="0.1195%" height="15" fill="rgb(208,69,12)"/><text x="27.4311%" y="143.50"></text></g><g><title>lint_checking (12,753,562 samples, 1.27%)</title><rect x="26.4669%" y="165" width="1.2651%" height="15" fill="rgb(235,93,37)"/><text x="26.7169%" y="175.50"></text></g><g><title>module_lints (4,349,179 samples, 0.43%)</title><rect x="27.3006%" y="149" width="0.4314%" height="15" fill="rgb(213,116,39)"/><text x="27.5506%" y="159.50"></text></g><g><title>lint_mod (4,341,239 samples, 0.43%)</title><rect x="27.3014%" y="133" width="0.4306%" height="15" fill="rgb(222,207,29)"/><text x="27.5514%" y="143.50"></text></g><g><title>privacy_access_levels (3,502,019 samples, 0.35%)</title><rect x="27.7321%" y="165" width="0.3474%" height="15" fill="rgb(206,96,30)"/><text x="27.9821%" y="175.50"></text></g><g><title>privacy_checking_modules (11,665,570 samples, 1.16%)</title><rect x="28.0795%" y="165" width="1.1572%" height="15" fill="rgb(218,138,4)"/><text x="28.3295%" y="175.50"></text></g><g><title>check_mod_privacy (11,657,760 samples, 1.16%)</title><rect x="28.0802%" y="149" width="1.1564%" height="15" fill="rgb(250,191,14)"/><text x="28.3302%" y="159.50"></text></g><g><title>misc_checking_3 (34,586,485 samples, 3.43%)</title><rect x="25.8208%" y="181" width="3.4309%" height="15" fill="rgb(239,60,40)"/><text x="26.0708%" y="191.50">mis..</text></g><g><title>impl_parent (3,265,161 samples, 0.32%)</title><rect x="29.8989%" y="117" width="0.3239%" height="15" fill="rgb(206,27,48)"/><text x="30.1489%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,688,608 samples, 0.17%)</title><rect x="30.0553%" y="101" width="0.1675%" height="15" fill="rgb(225,35,8)"/><text x="30.3053%" y="111.50"></text></g><g><title>impl_trait_ref (6,158,362 samples, 0.61%)</title><rect x="30.2228%" y="117" width="0.6109%" height="15" fill="rgb(250,213,24)"/><text x="30.4728%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,978,899 samples, 0.49%)</title><rect x="30.3398%" y="101" width="0.4939%" height="15" fill="rgb(247,123,22)"/><text x="30.5898%" y="111.50"></text></g><g><title>coherent_trait (16,736,938 samples, 1.66%)</title><rect x="29.3107%" y="149" width="1.6603%" height="15" fill="rgb(231,138,38)"/><text x="29.5607%" y="159.50"></text></g><g><title>specialization_graph_of (16,207,739 samples, 1.61%)</title><rect x="29.3632%" y="133" width="1.6078%" height="15" fill="rgb(231,145,46)"/><text x="29.6132%" y="143.50"></text></g><g><title>trait_impls_of (1,318,518 samples, 0.13%)</title><rect x="30.8401%" y="117" width="0.1308%" height="15" fill="rgb(251,118,11)"/><text x="31.0901%" y="127.50"></text></g><g><title>coherence_checking (17,483,455 samples, 1.73%)</title><rect x="29.3047%" y="165" width="1.7343%" height="15" fill="rgb(217,147,25)"/><text x="29.5547%" y="175.50"></text></g><g><title>associated_items (1,089,863 samples, 0.11%)</title><rect x="50.7025%" y="117" width="0.1081%" height="15" fill="rgb(247,81,37)"/><text x="50.9525%" y="127.50"></text></g><g><title>dropck_outlives (4,216,944 samples, 0.42%)</title><rect x="50.8513%" y="117" width="0.4183%" height="15" fill="rgb(209,12,38)"/><text x="51.1013%" y="127.50"></text></g><g><title>evaluate_obligation (10,799,843 samples, 1.07%)</title><rect x="51.2696%" y="117" width="1.0713%" height="15" fill="rgb(227,1,9)"/><text x="51.5196%" y="127.50"></text></g><g><title>generics_of (1,408,345 samples, 0.14%)</title><rect x="52.3862%" y="117" width="0.1397%" height="15" fill="rgb(248,47,43)"/><text x="52.6362%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,100,489 samples, 0.11%)</title><rect x="52.4167%" y="101" width="0.1092%" height="15" fill="rgb(221,10,30)"/><text x="52.6667%" y="111.50"></text></g><g><title>evaluate_obligation (2,906,782 samples, 0.29%)</title><rect x="53.3832%" y="101" width="0.2883%" height="15" fill="rgb(210,229,1)"/><text x="53.6332%" y="111.50"></text></g><g><title>method_autoderef_steps (10,619,460 samples, 1.05%)</title><rect x="52.6209%" y="117" width="1.0534%" height="15" fill="rgb(222,148,37)"/><text x="52.8709%" y="127.50"></text></g><g><title>evaluate_obligation (2,269,482 samples, 0.23%)</title><rect x="55.1516%" y="101" width="0.2251%" height="15" fill="rgb(234,67,33)"/><text x="55.4016%" y="111.50"></text></g><g><title>typeck (18,047,071 samples, 1.79%)</title><rect x="53.8313%" y="117" width="1.7903%" height="15" fill="rgb(247,98,35)"/><text x="54.0813%" y="127.50">t..</text></g><g><title>item_bodies_checking (247,601,940 samples, 24.56%)</title><rect x="31.0860%" y="165" width="24.5619%" height="15" fill="rgb(247,138,52)"/><text x="31.3360%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (247,597,630 samples, 24.56%)</title><rect x="31.0865%" y="149" width="24.5614%" height="15" fill="rgb(213,79,30)"/><text x="31.3365%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (246,750,767 samples, 24.48%)</title><rect x="31.1705%" y="133" width="24.4774%" height="15" fill="rgb(246,177,23)"/><text x="31.4205%" y="143.50">typeck</text></g><g><title>mir_borrowck (1,192,883 samples, 0.12%)</title><rect x="57.2207%" y="101" width="0.1183%" height="15" fill="rgb(230,62,27)"/><text x="57.4707%" y="111.50"></text></g><g><title>mir_built (1,969,662 samples, 0.20%)</title><rect x="57.3553%" y="53" width="0.1954%" height="15" fill="rgb(216,154,8)"/><text x="57.6053%" y="63.50"></text></g><g><title>typeck (1,788,060 samples, 0.18%)</title><rect x="57.3733%" y="37" width="0.1774%" height="15" fill="rgb(244,35,45)"/><text x="57.6233%" y="47.50"></text></g><g><title>mir_const (2,444,408 samples, 0.24%)</title><rect x="57.3438%" y="85" width="0.2425%" height="15" fill="rgb(251,115,12)"/><text x="57.5938%" y="95.50"></text></g><g><title>unsafety_check_result (2,343,497 samples, 0.23%)</title><rect x="57.3538%" y="69" width="0.2325%" height="15" fill="rgb(240,54,50)"/><text x="57.6038%" y="79.50"></text></g><g><title>mir_promoted (2,498,308 samples, 0.25%)</title><rect x="57.3390%" y="101" width="0.2478%" height="15" fill="rgb(233,84,52)"/><text x="57.5890%" y="111.50"></text></g><g><title>type_of (4,138,836 samples, 0.41%)</title><rect x="57.1822%" y="133" width="0.4106%" height="15" fill="rgb(207,117,47)"/><text x="57.4322%" y="143.50"></text></g><g><title>mir_borrowck (4,125,066 samples, 0.41%)</title><rect x="57.1835%" y="117" width="0.4092%" height="15" fill="rgb(249,43,39)"/><text x="57.4335%" y="127.50"></text></g><g><title>evaluate_obligation (1,318,144 samples, 0.13%)</title><rect x="57.8265%" y="117" width="0.1308%" height="15" fill="rgb(209,38,44)"/><text x="58.0765%" y="127.50"></text></g><g><title>item_types_checking (23,489,411 samples, 2.33%)</title><rect x="55.6479%" y="165" width="2.3301%" height="15" fill="rgb(236,212,23)"/><text x="55.8979%" y="175.50">i..</text></g><g><title>check_mod_item_types (23,479,411 samples, 2.33%)</title><rect x="55.6489%" y="149" width="2.3291%" height="15" fill="rgb(242,79,21)"/><text x="55.8989%" y="159.50">c..</text></g><g><title>typeck (3,884,244 samples, 0.39%)</title><rect x="57.5927%" y="133" width="0.3853%" height="15" fill="rgb(211,96,35)"/><text x="57.8427%" y="143.50"></text></g><g><title>fn_sig (2,857,889 samples, 0.28%)</title><rect x="58.3409%" y="133" width="0.2835%" height="15" fill="rgb(253,215,40)"/><text x="58.5909%" y="143.50"></text></g><g><title>is_late_bound_map (6,929,333 samples, 0.69%)</title><rect x="58.7761%" y="117" width="0.6874%" height="15" fill="rgb(211,81,21)"/><text x="59.0261%" y="127.50"></text></g><g><title>resolve_lifetimes (6,753,100 samples, 0.67%)</title><rect x="58.7936%" y="101" width="0.6699%" height="15" fill="rgb(208,190,38)"/><text x="59.0436%" y="111.50"></text></g><g><title>lint_levels (4,471,730 samples, 0.44%)</title><rect x="59.0199%" y="85" width="0.4436%" height="15" fill="rgb(235,213,38)"/><text x="59.2699%" y="95.50"></text></g><g><title>generics_of (9,586,431 samples, 0.95%)</title><rect x="58.6244%" y="133" width="0.9510%" height="15" fill="rgb(237,122,38)"/><text x="58.8744%" y="143.50"></text></g><g><title>late_bound_vars_map (2,808,013 samples, 0.28%)</title><rect x="60.2292%" y="85" width="0.2786%" height="15" fill="rgb(244,218,35)"/><text x="60.4792%" y="95.50"></text></g><g><title>resolve_lifetimes (2,612,931 samples, 0.26%)</title><rect x="60.2486%" y="69" width="0.2592%" height="15" fill="rgb(240,68,47)"/><text x="60.4986%" y="79.50"></text></g><g><title>explicit_predicates_of (7,272,935 samples, 0.72%)</title><rect x="59.8308%" y="101" width="0.7215%" height="15" fill="rgb(210,16,53)"/><text x="60.0808%" y="111.50"></text></g><g><title>predicates_of (14,067,367 samples, 1.40%)</title><rect x="59.6062%" y="133" width="1.3955%" height="15" fill="rgb(235,124,12)"/><text x="59.8562%" y="143.50"></text></g><g><title>predicates_defined_on (13,038,957 samples, 1.29%)</title><rect x="59.7082%" y="117" width="1.2935%" height="15" fill="rgb(224,169,11)"/><text x="59.9582%" y="127.50"></text></g><g><title>inferred_outlives_of (4,530,142 samples, 0.45%)</title><rect x="60.5523%" y="101" width="0.4494%" height="15" fill="rgb(250,166,2)"/><text x="60.8023%" y="111.50"></text></g><g><title>inferred_outlives_crate (4,198,187 samples, 0.42%)</title><rect x="60.5852%" y="85" width="0.4165%" height="15" fill="rgb(242,216,29)"/><text x="60.8352%" y="95.50"></text></g><g><title>type_of (2,467,596 samples, 0.24%)</title><rect x="60.7569%" y="69" width="0.2448%" height="15" fill="rgb(230,116,27)"/><text x="61.0069%" y="79.50"></text></g><g><title>type_collecting (32,252,449 samples, 3.20%)</title><rect x="57.9785%" y="165" width="3.1994%" height="15" fill="rgb(228,99,48)"/><text x="58.2285%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (32,231,009 samples, 3.20%)</title><rect x="57.9807%" y="149" width="3.1973%" height="15" fill="rgb(253,11,6)"/><text x="58.2307%" y="159.50">col..</text></g><g><title>type_of (1,594,459 samples, 0.16%)</title><rect x="61.0198%" y="133" width="0.1582%" height="15" fill="rgb(247,143,39)"/><text x="61.2698%" y="143.50"></text></g><g><title>evaluate_obligation (13,338,743 samples, 1.32%)</title><rect x="64.4317%" y="133" width="1.3232%" height="15" fill="rgb(236,97,10)"/><text x="64.6817%" y="143.50"></text></g><g><title>implied_outlives_bounds (4,404,862 samples, 0.44%)</title><rect x="65.7750%" y="133" width="0.4370%" height="15" fill="rgb(233,208,19)"/><text x="66.0250%" y="143.50"></text></g><g><title>param_env (3,655,467 samples, 0.36%)</title><rect x="66.2318%" y="133" width="0.3626%" height="15" fill="rgb(216,164,2)"/><text x="66.4818%" y="143.50"></text></g><g><title>region_scope_tree (3,029,587 samples, 0.30%)</title><rect x="66.5999%" y="133" width="0.3005%" height="15" fill="rgb(220,129,5)"/><text x="66.8499%" y="143.50"></text></g><g><title>check_impl_item_well_formed (54,996,589 samples, 5.46%)</title><rect x="61.4482%" y="149" width="5.4556%" height="15" fill="rgb(242,17,10)"/><text x="61.6982%" y="159.50">check_i..</text></g><g><title>implied_outlives_bounds (2,339,342 samples, 0.23%)</title><rect x="70.1216%" y="133" width="0.2321%" height="15" fill="rgb(242,107,0)"/><text x="70.3716%" y="143.50"></text></g><g><title>param_env (6,005,580 samples, 0.60%)</title><rect x="70.3542%" y="133" width="0.5957%" height="15" fill="rgb(251,28,31)"/><text x="70.6042%" y="143.50"></text></g><g><title>region_scope_tree (1,079,274 samples, 0.11%)</title><rect x="70.9670%" y="133" width="0.1071%" height="15" fill="rgb(233,223,10)"/><text x="71.2170%" y="143.50"></text></g><g><title>check_item_well_formed (43,225,348 samples, 4.29%)</title><rect x="66.9038%" y="149" width="4.2879%" height="15" fill="rgb(215,21,27)"/><text x="67.1538%" y="159.50">check..</text></g><g><title>variances_of (1,058,542 samples, 0.11%)</title><rect x="71.0867%" y="133" width="0.1050%" height="15" fill="rgb(232,23,21)"/><text x="71.3367%" y="143.50"></text></g><g><title>analysis (722,671,723 samples, 71.69%)</title><rect x="0.1744%" y="197" width="71.6883%" height="15" fill="rgb(244,5,23)"/><text x="0.4244%" y="207.50">analysis</text></g><g><title>type_check_crate (429,550,686 samples, 42.61%)</title><rect x="29.2517%" y="181" width="42.6110%" height="15" fill="rgb(226,81,46)"/><text x="29.5017%" y="191.50">type_check_crate</text></g><g><title>wf_checking (107,652,240 samples, 10.68%)</title><rect x="61.1837%" y="165" width="10.6790%" height="15" fill="rgb(247,70,30)"/><text x="61.4337%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (6,764,646 samples, 0.67%)</title><rect x="71.1917%" y="149" width="0.6710%" height="15" fill="rgb(212,68,19)"/><text x="71.4417%" y="159.50"></text></g><g><title>AST_validation (3,506,159 samples, 0.35%)</title><rect x="71.9284%" y="181" width="0.3478%" height="15" fill="rgb(240,187,13)"/><text x="72.1784%" y="191.50"></text></g><g><title>metadata_register_crate (1,287,806 samples, 0.13%)</title><rect x="89.2511%" y="149" width="0.1277%" height="15" fill="rgb(223,113,26)"/><text x="89.5011%" y="159.50"></text></g><g><title>macro_expand_crate (172,725,245 samples, 17.13%)</title><rect x="72.3848%" y="181" width="17.1342%" height="15" fill="rgb(206,192,2)"/><text x="72.6348%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (172,707,045 samples, 17.13%)</title><rect x="72.3866%" y="165" width="17.1324%" height="15" fill="rgb(241,108,4)"/><text x="72.6366%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,412,936 samples, 0.14%)</title><rect x="89.3788%" y="149" width="0.1402%" height="15" fill="rgb(247,173,49)"/><text x="89.6288%" y="159.50"></text></g><g><title>finalize_macro_resolutions (1,619,597 samples, 0.16%)</title><rect x="89.5500%" y="165" width="0.1607%" height="15" fill="rgb(224,114,35)"/><text x="89.8000%" y="175.50"></text></g><g><title>late_resolve_crate (15,197,670 samples, 1.51%)</title><rect x="89.7107%" y="165" width="1.5076%" height="15" fill="rgb(245,159,27)"/><text x="89.9607%" y="175.50"></text></g><g><title>resolve_check_unused (1,267,694 samples, 0.13%)</title><rect x="91.2273%" y="165" width="0.1258%" height="15" fill="rgb(245,172,44)"/><text x="91.4773%" y="175.50"></text></g><g><title>configure_and_expand (196,943,664 samples, 19.54%)</title><rect x="71.9056%" y="197" width="19.5366%" height="15" fill="rgb(236,23,11)"/><text x="72.1556%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (19,280,715 samples, 1.91%)</title><rect x="89.5296%" y="181" width="1.9126%" height="15" fill="rgb(205,117,38)"/><text x="89.7796%" y="191.50">r..</text></g><g><title>drop_ast (5,099,428 samples, 0.51%)</title><rect x="91.4423%" y="197" width="0.5059%" height="15" fill="rgb(237,72,25)"/><text x="91.6923%" y="207.50"></text></g><g><title>early_lint_checks (9,198,292 samples, 0.91%)</title><rect x="91.9503%" y="197" width="0.9125%" height="15" fill="rgb(244,70,9)"/><text x="92.2003%" y="207.50"></text></g><g><title>free_global_ctxt (9,674,877 samples, 0.96%)</title><rect x="92.8628%" y="197" width="0.9597%" height="15" fill="rgb(217,125,39)"/><text x="93.1128%" y="207.50"></text></g><g><title>generate_crate_metadata (20,160,275 samples, 2.00%)</title><rect x="93.8225%" y="197" width="1.9999%" height="15" fill="rgb(235,36,10)"/><text x="94.0725%" y="207.50">g..</text></g><g><title>hir_lowering (36,689,709 samples, 3.64%)</title><rect x="95.8224%" y="197" width="3.6396%" height="15" fill="rgb(251,123,47)"/><text x="96.0724%" y="207.50">hir_..</text></g><g><title>self_profile_alloc_query_strings (2,806,062 samples, 0.28%)</title><rect x="99.5614%" y="197" width="0.2784%" height="15" fill="rgb(221,13,13)"/><text x="99.8114%" y="207.50"></text></g><g><title>all (1,008,074,354 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,008,074,354 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,201,764 samples, 0.12%)</title><rect x="99.8808%" y="197" width="0.1192%" height="15" fill="rgb(245,182,24)"/><text x="100.1308%" y="207.50"></text></g></svg></svg>