<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (10,700,867 samples, 0.20%)</title><rect x="13.7821%" y="133" width="0.2042%" height="15" fill="rgb(227,0,7)"/><text x="14.0321%" y="143.50"></text></g><g><title>is_copy_raw (36,353,988 samples, 0.69%)</title><rect x="19.4551%" y="53" width="0.6937%" height="15" fill="rgb(217,0,24)"/><text x="19.7051%" y="63.50"></text></g><g><title>evaluate_obligation (27,380,061 samples, 0.52%)</title><rect x="19.6263%" y="37" width="0.5225%" height="15" fill="rgb(221,193,54)"/><text x="19.8763%" y="47.50"></text></g><g><title>needs_drop_raw (44,440,479 samples, 0.85%)</title><rect x="19.3017%" y="69" width="0.8480%" height="15" fill="rgb(248,212,6)"/><text x="19.5517%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (7,648,864 samples, 0.15%)</title><rect x="20.2447%" y="53" width="0.1460%" height="15" fill="rgb(208,68,35)"/><text x="20.4947%" y="63.50"></text></g><g><title>resolve_instance (14,617,732 samples, 0.28%)</title><rect x="20.1498%" y="69" width="0.2789%" height="15" fill="rgb(232,128,0)"/><text x="20.3998%" y="79.50"></text></g><g><title>thir_body (63,961,315 samples, 1.22%)</title><rect x="20.4563%" y="69" width="1.2206%" height="15" fill="rgb(207,160,47)"/><text x="20.7063%" y="79.50"></text></g><g><title>mir_const (356,950,556 samples, 6.81%)</title><rect x="14.9292%" y="117" width="6.8116%" height="15" fill="rgb(228,23,34)"/><text x="15.1792%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (313,524,125 samples, 5.98%)</title><rect x="15.7579%" y="101" width="5.9829%" height="15" fill="rgb(218,30,26)"/><text x="16.0079%" y="111.50">unsafety..</text></g><g><title>mir_built (286,496,485 samples, 5.47%)</title><rect x="16.2737%" y="85" width="5.4671%" height="15" fill="rgb(220,122,19)"/><text x="16.5237%" y="95.50">mir_bui..</text></g><g><title>mir_const (5,768,817 samples, 0.11%)</title><rect x="21.8153%" y="101" width="0.1101%" height="15" fill="rgb(250,228,42)"/><text x="22.0653%" y="111.50"></text></g><g><title>mir_promoted (411,141,552 samples, 7.85%)</title><rect x="14.0799%" y="133" width="7.8457%" height="15" fill="rgb(240,193,28)"/><text x="14.3299%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (9,686,774 samples, 0.18%)</title><rect x="21.7408%" y="117" width="0.1848%" height="15" fill="rgb(216,20,37)"/><text x="21.9908%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (17,934,052 samples, 0.34%)</title><rect x="21.9256%" y="133" width="0.3422%" height="15" fill="rgb(206,188,39)"/><text x="22.1756%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (11,036,434 samples, 0.21%)</title><rect x="22.2679%" y="133" width="0.2106%" height="15" fill="rgb(217,207,13)"/><text x="22.5179%" y="143.50"></text></g><g><title>type_op_normalize_ty (8,017,960 samples, 0.15%)</title><rect x="22.5166%" y="133" width="0.1530%" height="15" fill="rgb(231,73,38)"/><text x="22.7666%" y="143.50"></text></g><g><title>type_op_prove_predicate (73,921,119 samples, 1.41%)</title><rect x="22.6696%" y="133" width="1.4106%" height="15" fill="rgb(225,20,46)"/><text x="22.9196%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,232,931,803 samples, 23.53%)</title><rect x="0.5534%" y="165" width="23.5276%" height="15" fill="rgb(210,31,41)"/><text x="0.8034%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,224,769,037 samples, 23.37%)</title><rect x="0.7092%" y="149" width="23.3719%" height="15" fill="rgb(221,200,47)"/><text x="0.9592%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (5,384,100 samples, 0.10%)</title><rect x="24.0810%" y="165" width="0.1027%" height="15" fill="rgb(226,26,5)"/><text x="24.3310%" y="175.50"></text></g><g><title>hir_module_items (7,980,273 samples, 0.15%)</title><rect x="24.1838%" y="165" width="0.1523%" height="15" fill="rgb(249,33,26)"/><text x="24.4338%" y="175.50"></text></g><g><title>codegen_fn_attrs (9,340,265 samples, 0.18%)</title><rect x="24.5607%" y="133" width="0.1782%" height="15" fill="rgb(235,183,28)"/><text x="24.8107%" y="143.50"></text></g><g><title>check_mod_attrs (20,928,103 samples, 0.40%)</title><rect x="24.3396%" y="149" width="0.3994%" height="15" fill="rgb(221,5,38)"/><text x="24.5896%" y="159.50"></text></g><g><title>check_mod_const_bodies (5,585,985 samples, 0.11%)</title><rect x="24.7390%" y="149" width="0.1066%" height="15" fill="rgb(247,18,42)"/><text x="24.9890%" y="159.50"></text></g><g><title>check_mod_loops (5,346,830 samples, 0.10%)</title><rect x="24.8456%" y="149" width="0.1020%" height="15" fill="rgb(241,131,45)"/><text x="25.0956%" y="159.50"></text></g><g><title>lookup_deprecation_entry (7,234,809 samples, 0.14%)</title><rect x="25.0555%" y="133" width="0.1381%" height="15" fill="rgb(249,31,29)"/><text x="25.3055%" y="143.50"></text></g><g><title>stability_index (6,900,027 samples, 0.13%)</title><rect x="25.0619%" y="117" width="0.1317%" height="15" fill="rgb(225,111,53)"/><text x="25.3119%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (12,412,854 samples, 0.24%)</title><rect x="24.9599%" y="149" width="0.2369%" height="15" fill="rgb(238,160,17)"/><text x="25.2099%" y="159.50"></text></g><g><title>misc_checking_1 (46,829,581 samples, 0.89%)</title><rect x="24.3361%" y="165" width="0.8936%" height="15" fill="rgb(214,148,48)"/><text x="24.5861%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (25,224,520 samples, 0.48%)</title><rect x="25.2298%" y="149" width="0.4814%" height="15" fill="rgb(232,36,49)"/><text x="25.4798%" y="159.50"></text></g><g><title>check_mod_liveness (20,240,840 samples, 0.39%)</title><rect x="25.3249%" y="133" width="0.3862%" height="15" fill="rgb(209,103,24)"/><text x="25.5749%" y="143.50"></text></g><g><title>param_env (5,734,552 samples, 0.11%)</title><rect x="26.4326%" y="117" width="0.1094%" height="15" fill="rgb(229,88,8)"/><text x="26.6826%" y="127.50"></text></g><g><title>misc_checking_2 (69,625,464 samples, 1.33%)</title><rect x="25.2297%" y="165" width="1.3286%" height="15" fill="rgb(213,181,19)"/><text x="25.4797%" y="175.50"></text></g><g><title>match_checking (44,396,884 samples, 0.85%)</title><rect x="25.7111%" y="149" width="0.8472%" height="15" fill="rgb(254,191,54)"/><text x="25.9611%" y="159.50"></text></g><g><title>check_match (41,671,391 samples, 0.80%)</title><rect x="25.7632%" y="133" width="0.7952%" height="15" fill="rgb(241,83,37)"/><text x="26.0132%" y="143.50"></text></g><g><title>check_private_in_public (15,934,836 samples, 0.30%)</title><rect x="26.5588%" y="149" width="0.3041%" height="15" fill="rgb(233,36,39)"/><text x="26.8088%" y="159.50"></text></g><g><title>death_checking (21,869,545 samples, 0.42%)</title><rect x="26.8629%" y="149" width="0.4173%" height="15" fill="rgb(226,3,54)"/><text x="27.1129%" y="159.50"></text></g><g><title>eval_to_const_value_raw (6,744,567 samples, 0.13%)</title><rect x="27.6974%" y="117" width="0.1287%" height="15" fill="rgb(245,192,40)"/><text x="27.9474%" y="127.50"></text></g><g><title>eval_to_const_value_raw (6,495,255 samples, 0.12%)</title><rect x="27.7022%" y="101" width="0.1239%" height="15" fill="rgb(238,167,29)"/><text x="27.9522%" y="111.50"></text></g><g><title>eval_to_allocation_raw (6,185,882 samples, 0.12%)</title><rect x="27.7081%" y="85" width="0.1180%" height="15" fill="rgb(232,182,51)"/><text x="27.9581%" y="95.50"></text></g><g><title>crate_lints (31,723,162 samples, 0.61%)</title><rect x="27.2803%" y="133" width="0.6054%" height="15" fill="rgb(231,60,39)"/><text x="27.5303%" y="143.50"></text></g><g><title>lint_checking (62,612,856 samples, 1.19%)</title><rect x="27.2803%" y="149" width="1.1948%" height="15" fill="rgb(208,69,12)"/><text x="27.5303%" y="159.50"></text></g><g><title>module_lints (30,885,814 samples, 0.59%)</title><rect x="27.8857%" y="133" width="0.5894%" height="15" fill="rgb(235,93,37)"/><text x="28.1357%" y="143.50"></text></g><g><title>lint_mod (30,826,520 samples, 0.59%)</title><rect x="27.8868%" y="117" width="0.5883%" height="15" fill="rgb(213,116,39)"/><text x="28.1368%" y="127.50"></text></g><g><title>privacy_access_levels (18,066,391 samples, 0.34%)</title><rect x="28.4751%" y="149" width="0.3448%" height="15" fill="rgb(222,207,29)"/><text x="28.7251%" y="159.50"></text></g><g><title>privacy_checking_modules (52,596,046 samples, 1.00%)</title><rect x="28.8198%" y="149" width="1.0037%" height="15" fill="rgb(206,96,30)"/><text x="29.0698%" y="159.50"></text></g><g><title>check_mod_privacy (52,539,795 samples, 1.00%)</title><rect x="28.8209%" y="133" width="1.0026%" height="15" fill="rgb(218,138,4)"/><text x="29.0709%" y="143.50"></text></g><g><title>misc_checking_3 (171,475,369 samples, 3.27%)</title><rect x="26.5584%" y="165" width="3.2722%" height="15" fill="rgb(250,191,14)"/><text x="26.8084%" y="175.50">mis..</text></g><g><title>coherent_trait (10,619,208 samples, 0.20%)</title><rect x="29.9255%" y="133" width="0.2026%" height="15" fill="rgb(239,60,40)"/><text x="30.1755%" y="143.50"></text></g><g><title>specialization_graph_of (10,205,423 samples, 0.19%)</title><rect x="29.9334%" y="117" width="0.1947%" height="15" fill="rgb(206,27,48)"/><text x="30.1834%" y="127.50"></text></g><g><title>coherence_checking (12,195,715 samples, 0.23%)</title><rect x="29.9248%" y="149" width="0.2327%" height="15" fill="rgb(225,35,8)"/><text x="30.1748%" y="159.50"></text></g><g><title>dropck_outlives (11,755,561 samples, 0.22%)</title><rect x="45.8395%" y="101" width="0.2243%" height="15" fill="rgb(250,213,24)"/><text x="46.0895%" y="111.50"></text></g><g><title>evaluate_obligation (21,481,074 samples, 0.41%)</title><rect x="46.0638%" y="101" width="0.4099%" height="15" fill="rgb(247,123,22)"/><text x="46.3138%" y="111.50"></text></g><g><title>evaluate_obligation (9,980,886 samples, 0.19%)</title><rect x="53.9687%" y="85" width="0.1905%" height="15" fill="rgb(231,138,38)"/><text x="54.2187%" y="95.50"></text></g><g><title>typeck (403,672,126 samples, 7.70%)</title><rect x="46.6133%" y="101" width="7.7031%" height="15" fill="rgb(231,145,46)"/><text x="46.8633%" y="111.50">typeck</text></g><g><title>item_bodies_checking (1,265,127,130 samples, 24.14%)</title><rect x="30.1953%" y="149" width="24.1420%" height="15" fill="rgb(251,118,11)"/><text x="30.4453%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,265,123,220 samples, 24.14%)</title><rect x="30.1954%" y="133" width="24.1419%" height="15" fill="rgb(217,147,25)"/><text x="30.4454%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,258,303,627 samples, 24.01%)</title><rect x="30.3255%" y="117" width="24.0118%" height="15" fill="rgb(247,81,37)"/><text x="30.5755%" y="127.50">typeck</text></g><g><title>item_types_checking (75,059,676 samples, 1.43%)</title><rect x="54.3373%" y="149" width="1.4323%" height="15" fill="rgb(209,12,38)"/><text x="54.5873%" y="159.50"></text></g><g><title>check_mod_item_types (75,003,786 samples, 1.43%)</title><rect x="54.3383%" y="133" width="1.4313%" height="15" fill="rgb(227,1,9)"/><text x="54.5883%" y="143.50"></text></g><g><title>typeck (9,440,024 samples, 0.18%)</title><rect x="55.5895%" y="117" width="0.1801%" height="15" fill="rgb(248,47,43)"/><text x="55.8395%" y="127.50"></text></g><g><title>mir_for_ctfe (5,658,316 samples, 0.11%)</title><rect x="56.1526%" y="69" width="0.1080%" height="15" fill="rgb(221,10,30)"/><text x="56.4026%" y="79.50"></text></g><g><title>eval_to_const_value_raw (13,971,591 samples, 0.27%)</title><rect x="56.0375%" y="117" width="0.2666%" height="15" fill="rgb(210,229,1)"/><text x="56.2875%" y="127.50"></text></g><g><title>eval_to_const_value_raw (13,886,459 samples, 0.26%)</title><rect x="56.0391%" y="101" width="0.2650%" height="15" fill="rgb(222,148,37)"/><text x="56.2891%" y="111.50"></text></g><g><title>eval_to_allocation_raw (13,747,106 samples, 0.26%)</title><rect x="56.0418%" y="85" width="0.2623%" height="15" fill="rgb(234,67,33)"/><text x="56.2918%" y="95.50"></text></g><g><title>fn_sig (12,563,309 samples, 0.24%)</title><rect x="56.3041%" y="117" width="0.2397%" height="15" fill="rgb(247,98,35)"/><text x="56.5541%" y="127.50"></text></g><g><title>is_late_bound_map (6,822,451 samples, 0.13%)</title><rect x="56.6650%" y="101" width="0.1302%" height="15" fill="rgb(247,138,52)"/><text x="56.9150%" y="111.50"></text></g><g><title>resolve_lifetimes (6,291,865 samples, 0.12%)</title><rect x="56.6752%" y="85" width="0.1201%" height="15" fill="rgb(213,79,30)"/><text x="56.9252%" y="95.50"></text></g><g><title>named_region_map (23,277,184 samples, 0.44%)</title><rect x="56.7952%" y="101" width="0.4442%" height="15" fill="rgb(246,177,23)"/><text x="57.0452%" y="111.50"></text></g><g><title>resolve_lifetimes (22,106,739 samples, 0.42%)</title><rect x="56.8176%" y="85" width="0.4219%" height="15" fill="rgb(230,62,27)"/><text x="57.0676%" y="95.50"></text></g><g><title>lint_levels (11,095,963 samples, 0.21%)</title><rect x="57.0277%" y="69" width="0.2117%" height="15" fill="rgb(216,154,8)"/><text x="57.2777%" y="79.50"></text></g><g><title>generics_of (36,991,173 samples, 0.71%)</title><rect x="56.5439%" y="117" width="0.7059%" height="15" fill="rgb(244,35,45)"/><text x="56.7939%" y="127.50"></text></g><g><title>explicit_predicates_of (7,029,039 samples, 0.13%)</title><rect x="57.4329%" y="85" width="0.1341%" height="15" fill="rgb(251,115,12)"/><text x="57.6829%" y="95.50"></text></g><g><title>predicates_of (21,131,759 samples, 0.40%)</title><rect x="57.2910%" y="117" width="0.4033%" height="15" fill="rgb(240,54,50)"/><text x="57.5410%" y="127.50"></text></g><g><title>predicates_defined_on (18,051,847 samples, 0.34%)</title><rect x="57.3498%" y="101" width="0.3445%" height="15" fill="rgb(233,84,52)"/><text x="57.5998%" y="111.50"></text></g><g><title>inferred_outlives_of (6,670,717 samples, 0.13%)</title><rect x="57.5670%" y="85" width="0.1273%" height="15" fill="rgb(207,117,47)"/><text x="57.8170%" y="95.50"></text></g><g><title>inferred_outlives_crate (5,824,015 samples, 0.11%)</title><rect x="57.5832%" y="69" width="0.1111%" height="15" fill="rgb(249,43,39)"/><text x="57.8332%" y="79.50"></text></g><g><title>type_collecting (104,759,057 samples, 2.00%)</title><rect x="55.7698%" y="149" width="1.9991%" height="15" fill="rgb(209,38,44)"/><text x="56.0198%" y="159.50">t..</text></g><g><title>collect_mod_item_types (104,673,765 samples, 2.00%)</title><rect x="55.7714%" y="133" width="1.9975%" height="15" fill="rgb(236,212,23)"/><text x="56.0214%" y="143.50">c..</text></g><g><title>evaluate_obligation (18,752,280 samples, 0.36%)</title><rect x="59.5524%" y="117" width="0.3578%" height="15" fill="rgb(242,79,21)"/><text x="59.8024%" y="127.50"></text></g><g><title>implied_outlives_bounds (10,549,908 samples, 0.20%)</title><rect x="59.9144%" y="117" width="0.2013%" height="15" fill="rgb(211,96,35)"/><text x="60.1644%" y="127.50"></text></g><g><title>param_env (11,787,256 samples, 0.22%)</title><rect x="60.1164%" y="117" width="0.2249%" height="15" fill="rgb(253,215,40)"/><text x="60.3664%" y="127.50"></text></g><g><title>region_scope_tree (22,362,560 samples, 0.43%)</title><rect x="60.3480%" y="117" width="0.4267%" height="15" fill="rgb(211,81,21)"/><text x="60.5980%" y="127.50"></text></g><g><title>check_impl_item_well_formed (147,696,979 samples, 2.82%)</title><rect x="57.9585%" y="133" width="2.8185%" height="15" fill="rgb(208,190,38)"/><text x="58.2085%" y="143.50">ch..</text></g><g><title>evaluate_obligation (15,037,596 samples, 0.29%)</title><rect x="61.7168%" y="117" width="0.2870%" height="15" fill="rgb(235,213,38)"/><text x="61.9668%" y="127.50"></text></g><g><title>param_env (11,283,970 samples, 0.22%)</title><rect x="62.0614%" y="117" width="0.2153%" height="15" fill="rgb(237,122,38)"/><text x="62.3114%" y="127.50"></text></g><g><title>check_item_well_formed (85,096,712 samples, 1.62%)</title><rect x="60.7769%" y="133" width="1.6239%" height="15" fill="rgb(244,218,35)"/><text x="61.0269%" y="143.50"></text></g><g><title>analysis (3,254,408,141 samples, 62.10%)</title><rect x="0.3181%" y="181" width="62.1028%" height="15" fill="rgb(240,68,47)"/><text x="0.5681%" y="191.50">analysis</text></g><g><title>type_check_crate (1,707,847,819 samples, 32.59%)</title><rect x="29.8306%" y="165" width="32.5903%" height="15" fill="rgb(210,16,53)"/><text x="30.0806%" y="175.50">type_check_crate</text></g><g><title>wf_checking (243,108,955 samples, 4.64%)</title><rect x="57.7817%" y="149" width="4.6392%" height="15" fill="rgb(235,124,12)"/><text x="58.0317%" y="159.50">wf_ch..</text></g><g><title>AST_validation (9,304,773 samples, 0.18%)</title><rect x="62.4357%" y="165" width="0.1776%" height="15" fill="rgb(224,169,11)"/><text x="62.6857%" y="175.50"></text></g><g><title>complete_gated_feature_checking (6,875,506 samples, 0.13%)</title><rect x="62.6133%" y="165" width="0.1312%" height="15" fill="rgb(250,166,2)"/><text x="62.8633%" y="175.50"></text></g><g><title>metadata_register_crate (10,945,233 samples, 0.21%)</title><rect x="92.0735%" y="133" width="0.2089%" height="15" fill="rgb(242,216,29)"/><text x="92.3235%" y="143.50"></text></g><g><title>metadata_register_crate (7,007,797 samples, 0.13%)</title><rect x="92.1486%" y="117" width="0.1337%" height="15" fill="rgb(230,116,27)"/><text x="92.3986%" y="127.50"></text></g><g><title>macro_expand_crate (1,548,019,350 samples, 29.54%)</title><rect x="62.7458%" y="165" width="29.5403%" height="15" fill="rgb(228,99,48)"/><text x="62.9958%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (1,547,980,479 samples, 29.54%)</title><rect x="62.7465%" y="149" width="29.5396%" height="15" fill="rgb(253,11,6)"/><text x="62.9965%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (82,931,464 samples, 1.58%)</title><rect x="92.3746%" y="149" width="1.5826%" height="15" fill="rgb(247,143,39)"/><text x="92.6246%" y="159.50"></text></g><g><title>resolve_check_unused (5,734,023 samples, 0.11%)</title><rect x="93.9633%" y="149" width="0.1094%" height="15" fill="rgb(236,97,10)"/><text x="94.2133%" y="159.50"></text></g><g><title>resolve_postprocess (5,443,021 samples, 0.10%)</title><rect x="94.0727%" y="149" width="0.1039%" height="15" fill="rgb(233,208,19)"/><text x="94.3227%" y="159.50"></text></g><g><title>configure_and_expand (1,663,519,025 samples, 31.74%)</title><rect x="62.4322%" y="181" width="31.7444%" height="15" fill="rgb(216,164,2)"/><text x="62.6822%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (98,963,121 samples, 1.89%)</title><rect x="92.2881%" y="165" width="1.8885%" height="15" fill="rgb(220,129,5)"/><text x="92.5381%" y="175.50">r..</text></g><g><title>drop_ast (14,220,069 samples, 0.27%)</title><rect x="94.1766%" y="181" width="0.2714%" height="15" fill="rgb(242,17,10)"/><text x="94.4266%" y="191.50"></text></g><g><title>early_lint_checks (23,916,366 samples, 0.46%)</title><rect x="94.4485%" y="181" width="0.4564%" height="15" fill="rgb(242,107,0)"/><text x="94.6985%" y="191.50"></text></g><g><title>free_global_ctxt (27,929,941 samples, 0.53%)</title><rect x="94.9049%" y="181" width="0.5330%" height="15" fill="rgb(251,28,31)"/><text x="95.1549%" y="191.50"></text></g><g><title>generate_crate_metadata (70,794,298 samples, 1.35%)</title><rect x="95.4379%" y="181" width="1.3509%" height="15" fill="rgb(233,223,10)"/><text x="95.6879%" y="191.50"></text></g><g><title>hir_lowering (155,384,340 samples, 2.97%)</title><rect x="96.7889%" y="181" width="2.9651%" height="15" fill="rgb(215,21,27)"/><text x="97.0389%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (7,244,080 samples, 0.14%)</title><rect x="99.7761%" y="181" width="0.1382%" height="15" fill="rgb(232,23,21)"/><text x="100.0261%" y="191.50"></text></g><g><title>all (5,240,358,505 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (5,240,358,505 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>