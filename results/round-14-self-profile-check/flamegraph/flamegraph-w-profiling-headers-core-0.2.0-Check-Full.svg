<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (64,410 samples, 0.15%)</title><rect x="4.9105%" y="53" width="0.1491%" height="15" fill="rgb(227,0,7)"/><text x="5.1605%" y="63.50"></text></g><g><title>evaluate_obligation (60,430 samples, 0.14%)</title><rect x="4.9198%" y="37" width="0.1399%" height="15" fill="rgb(217,0,24)"/><text x="5.1698%" y="47.50"></text></g><g><title>adt_drop_tys (79,690 samples, 0.18%)</title><rect x="4.8974%" y="69" width="0.1845%" height="15" fill="rgb(221,193,54)"/><text x="5.1474%" y="79.50"></text></g><g><title>needs_drop_raw (264,484 samples, 0.61%)</title><rect x="4.8746%" y="85" width="0.6122%" height="15" fill="rgb(248,212,6)"/><text x="5.1246%" y="95.50"></text></g><g><title>is_copy_raw (174,913 samples, 0.40%)</title><rect x="5.0819%" y="69" width="0.4049%" height="15" fill="rgb(208,68,35)"/><text x="5.3319%" y="79.50"></text></g><g><title>evaluate_obligation (167,403 samples, 0.39%)</title><rect x="5.0993%" y="53" width="0.3875%" height="15" fill="rgb(232,128,0)"/><text x="5.3493%" y="63.50"></text></g><g><title>trait_impls_of (138,732 samples, 0.32%)</title><rect x="5.1656%" y="37" width="0.3211%" height="15" fill="rgb(207,160,47)"/><text x="5.4156%" y="47.50"></text></g><g><title>thir_body (71,401 samples, 0.17%)</title><rect x="5.5259%" y="85" width="0.1653%" height="15" fill="rgb(228,23,34)"/><text x="5.7759%" y="95.50"></text></g><g><title>mir_const (738,168 samples, 1.71%)</title><rect x="3.9862%" y="133" width="1.7086%" height="15" fill="rgb(218,30,26)"/><text x="4.2362%" y="143.50"></text></g><g><title>unsafety_check_result (610,996 samples, 1.41%)</title><rect x="4.2805%" y="117" width="1.4142%" height="15" fill="rgb(220,122,19)"/><text x="4.5305%" y="127.50"></text></g><g><title>mir_built (551,006 samples, 1.28%)</title><rect x="4.4194%" y="101" width="1.2754%" height="15" fill="rgb(250,228,42)"/><text x="4.6694%" y="111.50"></text></g><g><title>mir_promoted (838,570 samples, 1.94%)</title><rect x="3.7682%" y="149" width="1.9410%" height="15" fill="rgb(240,193,28)"/><text x="4.0182%" y="159.50">m..</text></g><g><title>type_op_ascribe_user_type (80,471 samples, 0.19%)</title><rect x="5.7092%" y="149" width="0.1863%" height="15" fill="rgb(216,20,37)"/><text x="5.9592%" y="159.50"></text></g><g><title>type_op_prove_predicate (93,241 samples, 0.22%)</title><rect x="5.8954%" y="149" width="0.2158%" height="15" fill="rgb(206,188,39)"/><text x="6.1454%" y="159.50"></text></g><g><title>MIR_borrow_checking (1,903,412 samples, 4.41%)</title><rect x="1.7123%" y="181" width="4.4057%" height="15" fill="rgb(217,207,13)"/><text x="1.9623%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (1,895,912 samples, 4.39%)</title><rect x="1.7297%" y="165" width="4.3883%" height="15" fill="rgb(231,73,38)"/><text x="1.9797%" y="175.50">mir_b..</text></g><g><title>hir_module_items (116,662 samples, 0.27%)</title><rect x="6.1265%" y="181" width="0.2700%" height="15" fill="rgb(225,20,46)"/><text x="6.3765%" y="191.50"></text></g><g><title>get_lang_items (89,511 samples, 0.21%)</title><rect x="6.7672%" y="133" width="0.2072%" height="15" fill="rgb(210,31,41)"/><text x="7.0172%" y="143.50"></text></g><g><title>associated_item (46,551 samples, 0.11%)</title><rect x="7.0208%" y="117" width="0.1077%" height="15" fill="rgb(221,200,47)"/><text x="7.2708%" y="127.50"></text></g><g><title>codegen_fn_attrs (61,481 samples, 0.14%)</title><rect x="7.1286%" y="117" width="0.1423%" height="15" fill="rgb(226,26,5)"/><text x="7.3786%" y="127.50"></text></g><g><title>should_inherit_track_caller (130,783 samples, 0.30%)</title><rect x="6.9744%" y="133" width="0.3027%" height="15" fill="rgb(249,33,26)"/><text x="7.2244%" y="143.50"></text></g><g><title>codegen_fn_attrs (301,514 samples, 0.70%)</title><rect x="6.6488%" y="149" width="0.6979%" height="15" fill="rgb(235,183,28)"/><text x="6.8988%" y="159.50"></text></g><g><title>check_mod_attrs (392,645 samples, 0.91%)</title><rect x="6.4388%" y="165" width="0.9088%" height="15" fill="rgb(221,5,38)"/><text x="6.6888%" y="175.50"></text></g><g><title>lookup_deprecation_entry (86,192 samples, 0.20%)</title><rect x="7.6705%" y="149" width="0.1995%" height="15" fill="rgb(247,18,42)"/><text x="7.9205%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (221,382 samples, 0.51%)</title><rect x="7.4986%" y="165" width="0.5124%" height="15" fill="rgb(241,131,45)"/><text x="7.7486%" y="175.50"></text></g><g><title>misc_checking_1 (743,938 samples, 1.72%)</title><rect x="6.3974%" y="181" width="1.7219%" height="15" fill="rgb(249,31,29)"/><text x="6.6474%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (46,000 samples, 0.11%)</title><rect x="8.1221%" y="165" width="0.1065%" height="15" fill="rgb(225,111,53)"/><text x="8.3721%" y="175.50"></text></g><g><title>misc_checking_2 (136,421 samples, 0.32%)</title><rect x="8.1193%" y="181" width="0.3158%" height="15" fill="rgb(238,160,17)"/><text x="8.3693%" y="191.50"></text></g><g><title>match_checking (89,211 samples, 0.21%)</title><rect x="8.2286%" y="165" width="0.2065%" height="15" fill="rgb(214,148,48)"/><text x="8.4786%" y="175.50"></text></g><g><title>check_match (86,211 samples, 0.20%)</title><rect x="8.2355%" y="149" width="0.1995%" height="15" fill="rgb(232,36,49)"/><text x="8.4855%" y="159.50"></text></g><g><title>check_private_in_public (44,441 samples, 0.10%)</title><rect x="8.4516%" y="165" width="0.1029%" height="15" fill="rgb(209,103,24)"/><text x="8.7016%" y="175.50"></text></g><g><title>death_checking (107,351 samples, 0.25%)</title><rect x="8.5544%" y="165" width="0.2485%" height="15" fill="rgb(229,88,8)"/><text x="8.8044%" y="175.50"></text></g><g><title>param_env (76,531 samples, 0.18%)</title><rect x="10.4502%" y="133" width="0.1771%" height="15" fill="rgb(213,181,19)"/><text x="10.7002%" y="143.50"></text></g><g><title>crate_lints (1,845,111 samples, 4.27%)</title><rect x="8.8060%" y="149" width="4.2707%" height="15" fill="rgb(254,191,54)"/><text x="9.0560%" y="159.50">crate..</text></g><g><title>type_of (1,058,253 samples, 2.45%)</title><rect x="10.6273%" y="133" width="2.4494%" height="15" fill="rgb(241,83,37)"/><text x="10.8773%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (794,939 samples, 1.84%)</title><rect x="11.2368%" y="117" width="1.8400%" height="15" fill="rgb(233,36,39)"/><text x="11.4868%" y="127.50">m..</text></g><g><title>lint_checking (1,918,942 samples, 4.44%)</title><rect x="8.8029%" y="165" width="4.4416%" height="15" fill="rgb(226,3,54)"/><text x="9.0529%" y="175.50">lint_..</text></g><g><title>module_lints (72,481 samples, 0.17%)</title><rect x="13.0768%" y="149" width="0.1678%" height="15" fill="rgb(245,192,40)"/><text x="13.3268%" y="159.50"></text></g><g><title>lint_mod (70,181 samples, 0.16%)</title><rect x="13.0821%" y="133" width="0.1624%" height="15" fill="rgb(238,167,29)"/><text x="13.3321%" y="143.50"></text></g><g><title>privacy_access_levels (54,350 samples, 0.13%)</title><rect x="13.2445%" y="165" width="0.1258%" height="15" fill="rgb(232,182,51)"/><text x="13.4945%" y="175.50"></text></g><g><title>privacy_checking_modules (98,261 samples, 0.23%)</title><rect x="13.3703%" y="165" width="0.2274%" height="15" fill="rgb(231,60,39)"/><text x="13.6203%" y="175.50"></text></g><g><title>check_mod_privacy (96,961 samples, 0.22%)</title><rect x="13.3733%" y="149" width="0.2244%" height="15" fill="rgb(208,69,12)"/><text x="13.6233%" y="159.50"></text></g><g><title>misc_checking_3 (2,243,455 samples, 5.19%)</title><rect x="8.4351%" y="181" width="5.1927%" height="15" fill="rgb(235,93,37)"/><text x="8.6851%" y="191.50">misc_c..</text></g><g><title>impl_parent (1,633,125 samples, 3.78%)</title><rect x="19.9771%" y="117" width="3.7801%" height="15" fill="rgb(213,116,39)"/><text x="20.2271%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (950,777 samples, 2.20%)</title><rect x="21.5564%" y="101" width="2.2007%" height="15" fill="rgb(222,207,29)"/><text x="21.8064%" y="111.50">m..</text></g><g><title>impl_trait_ref (5,906,466 samples, 13.67%)</title><rect x="23.7571%" y="117" width="13.6712%" height="15" fill="rgb(206,96,30)"/><text x="24.0071%" y="127.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,213,308 samples, 12.07%)</title><rect x="25.3615%" y="101" width="12.0668%" height="15" fill="rgb(218,138,4)"/><text x="25.6115%" y="111.50">metadata_decode_en..</text></g><g><title>coherent_trait (10,822,640 samples, 25.05%)</title><rect x="13.7353%" y="149" width="25.0502%" height="15" fill="rgb(250,191,14)"/><text x="13.9853%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (10,810,520 samples, 25.02%)</title><rect x="13.7634%" y="133" width="25.0222%" height="15" fill="rgb(239,60,40)"/><text x="14.0134%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (583,697 samples, 1.35%)</title><rect x="37.4345%" y="117" width="1.3510%" height="15" fill="rgb(206,27,48)"/><text x="37.6845%" y="127.50"></text></g><g><title>implementations_of_trait (140,551 samples, 0.33%)</title><rect x="38.4602%" y="101" width="0.3253%" height="15" fill="rgb(225,35,8)"/><text x="38.7102%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (109,511 samples, 0.25%)</title><rect x="38.5321%" y="85" width="0.2535%" height="15" fill="rgb(250,213,24)"/><text x="38.7821%" y="95.50"></text></g><g><title>coherence_checking (10,887,752 samples, 25.20%)</title><rect x="13.6944%" y="165" width="25.2009%" height="15" fill="rgb(247,123,22)"/><text x="13.9444%" y="175.50">coherence_checking</text></g><g><title>associated_items (63,701 samples, 0.15%)</title><rect x="41.8128%" y="117" width="0.1474%" height="15" fill="rgb(231,138,38)"/><text x="42.0628%" y="127.50"></text></g><g><title>dropck_outlives (69,552 samples, 0.16%)</title><rect x="41.9719%" y="117" width="0.1610%" height="15" fill="rgb(231,145,46)"/><text x="42.2219%" y="127.50"></text></g><g><title>evaluate_obligation (44,471 samples, 0.10%)</title><rect x="42.1329%" y="117" width="0.1029%" height="15" fill="rgb(251,118,11)"/><text x="42.3829%" y="127.50"></text></g><g><title>item_attrs (50,210 samples, 0.12%)</title><rect x="42.3656%" y="117" width="0.1162%" height="15" fill="rgb(217,147,25)"/><text x="42.6156%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (48,640 samples, 0.11%)</title><rect x="42.3692%" y="101" width="0.1126%" height="15" fill="rgb(247,81,37)"/><text x="42.6192%" y="111.50"></text></g><g><title>method_autoderef_steps (88,871 samples, 0.21%)</title><rect x="42.5027%" y="117" width="0.2057%" height="15" fill="rgb(209,12,38)"/><text x="42.7527%" y="127.50"></text></g><g><title>evaluate_obligation (70,371 samples, 0.16%)</title><rect x="42.5455%" y="101" width="0.1629%" height="15" fill="rgb(227,1,9)"/><text x="42.7955%" y="111.50"></text></g><g><title>trait_impls_of (47,181 samples, 0.11%)</title><rect x="42.5992%" y="85" width="0.1092%" height="15" fill="rgb(248,47,43)"/><text x="42.8492%" y="95.50"></text></g><g><title>evaluate_obligation (65,361 samples, 0.15%)</title><rect x="42.8087%" y="101" width="0.1513%" height="15" fill="rgb(221,10,30)"/><text x="43.0587%" y="111.50"></text></g><g><title>object_safety_violations (155,852 samples, 0.36%)</title><rect x="42.7084%" y="117" width="0.3607%" height="15" fill="rgb(210,229,1)"/><text x="42.9584%" y="127.50"></text></g><g><title>explicit_predicates_of (65,270 samples, 0.15%)</title><rect x="43.1533%" y="85" width="0.1511%" height="15" fill="rgb(222,148,37)"/><text x="43.4033%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (60,560 samples, 0.14%)</title><rect x="43.1642%" y="69" width="0.1402%" height="15" fill="rgb(234,67,33)"/><text x="43.4142%" y="79.50"></text></g><g><title>predicates_of (93,930 samples, 0.22%)</title><rect x="43.1012%" y="117" width="0.2174%" height="15" fill="rgb(247,98,35)"/><text x="43.3512%" y="127.50"></text></g><g><title>predicates_defined_on (81,200 samples, 0.19%)</title><rect x="43.1306%" y="101" width="0.1879%" height="15" fill="rgb(247,138,52)"/><text x="43.3806%" y="111.50"></text></g><g><title>type_of (93,391 samples, 0.22%)</title><rect x="43.4171%" y="117" width="0.2162%" height="15" fill="rgb(213,79,30)"/><text x="43.6671%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (88,561 samples, 0.20%)</title><rect x="43.4283%" y="101" width="0.2050%" height="15" fill="rgb(246,177,23)"/><text x="43.6783%" y="111.50"></text></g><g><title>item_bodies_checking (2,045,663 samples, 4.73%)</title><rect x="38.9261%" y="165" width="4.7349%" height="15" fill="rgb(230,62,27)"/><text x="39.1761%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (2,043,083 samples, 4.73%)</title><rect x="38.9321%" y="149" width="4.7289%" height="15" fill="rgb(216,154,8)"/><text x="39.1821%" y="159.50">typeck..</text></g><g><title>typeck (2,034,013 samples, 4.71%)</title><rect x="38.9531%" y="133" width="4.7080%" height="15" fill="rgb(244,35,45)"/><text x="39.2031%" y="143.50">typeck</text></g><g><title>impl_parent (94,461 samples, 0.22%)</title><rect x="44.6138%" y="85" width="0.2186%" height="15" fill="rgb(251,115,12)"/><text x="44.8638%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (53,050 samples, 0.12%)</title><rect x="44.7097%" y="69" width="0.1228%" height="15" fill="rgb(240,54,50)"/><text x="44.9597%" y="79.50"></text></g><g><title>impl_trait_ref (289,695 samples, 0.67%)</title><rect x="44.8325%" y="85" width="0.6705%" height="15" fill="rgb(233,84,52)"/><text x="45.0825%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (250,594 samples, 0.58%)</title><rect x="44.9230%" y="69" width="0.5800%" height="15" fill="rgb(207,117,47)"/><text x="45.1730%" y="79.50"></text></g><g><title>adt_destructor (622,207 samples, 1.44%)</title><rect x="44.2052%" y="133" width="1.4402%" height="15" fill="rgb(249,43,39)"/><text x="44.4552%" y="143.50"></text></g><g><title>coherent_trait (616,377 samples, 1.43%)</title><rect x="44.2187%" y="117" width="1.4267%" height="15" fill="rgb(209,38,44)"/><text x="44.4687%" y="127.50"></text></g><g><title>specialization_graph_of (613,286 samples, 1.42%)</title><rect x="44.2259%" y="101" width="1.4195%" height="15" fill="rgb(236,212,23)"/><text x="44.4759%" y="111.50"></text></g><g><title>trait_impls_of (61,510 samples, 0.14%)</title><rect x="45.5030%" y="85" width="0.1424%" height="15" fill="rgb(242,79,21)"/><text x="45.7530%" y="95.50"></text></g><g><title>item_types_checking (921,281 samples, 2.13%)</title><rect x="43.6610%" y="165" width="2.1324%" height="15" fill="rgb(211,96,35)"/><text x="43.9110%" y="175.50">i..</text></g><g><title>check_mod_item_types (917,931 samples, 2.12%)</title><rect x="43.6688%" y="149" width="2.1247%" height="15" fill="rgb(253,215,40)"/><text x="43.9188%" y="159.50">c..</text></g><g><title>fn_sig (152,511 samples, 0.35%)</title><rect x="46.0877%" y="133" width="0.3530%" height="15" fill="rgb(211,81,21)"/><text x="46.3377%" y="143.50"></text></g><g><title>type_of (63,051 samples, 0.15%)</title><rect x="46.2948%" y="117" width="0.1459%" height="15" fill="rgb(208,190,38)"/><text x="46.5448%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (59,671 samples, 0.14%)</title><rect x="46.3026%" y="101" width="0.1381%" height="15" fill="rgb(235,213,38)"/><text x="46.5526%" y="111.50"></text></g><g><title>associated_item (80,041 samples, 0.19%)</title><rect x="47.1000%" y="69" width="0.1853%" height="15" fill="rgb(237,122,38)"/><text x="47.3500%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (44,761 samples, 0.10%)</title><rect x="47.1817%" y="53" width="0.1036%" height="15" fill="rgb(244,218,35)"/><text x="47.4317%" y="63.50"></text></g><g><title>associated_items (125,371 samples, 0.29%)</title><rect x="47.0026%" y="85" width="0.2902%" height="15" fill="rgb(240,68,47)"/><text x="47.2526%" y="95.50"></text></g><g><title>named_region_map (368,933 samples, 0.85%)</title><rect x="46.5858%" y="117" width="0.8539%" height="15" fill="rgb(210,16,53)"/><text x="46.8358%" y="127.50"></text></g><g><title>resolve_lifetimes (355,233 samples, 0.82%)</title><rect x="46.6176%" y="101" width="0.8222%" height="15" fill="rgb(235,124,12)"/><text x="46.8676%" y="111.50"></text></g><g><title>lint_levels (48,720 samples, 0.11%)</title><rect x="47.3270%" y="85" width="0.1128%" height="15" fill="rgb(224,169,11)"/><text x="47.5770%" y="95.50"></text></g><g><title>generics_of (447,415 samples, 1.04%)</title><rect x="46.4407%" y="133" width="1.0356%" height="15" fill="rgb(250,166,2)"/><text x="46.6907%" y="143.50"></text></g><g><title>explicit_predicates_of (141,873 samples, 0.33%)</title><rect x="47.6464%" y="101" width="0.3284%" height="15" fill="rgb(242,216,29)"/><text x="47.8964%" y="111.50"></text></g><g><title>predicates_of (261,344 samples, 0.60%)</title><rect x="47.5344%" y="133" width="0.6049%" height="15" fill="rgb(230,116,27)"/><text x="47.7844%" y="143.50"></text></g><g><title>predicates_defined_on (241,804 samples, 0.56%)</title><rect x="47.5797%" y="117" width="0.5597%" height="15" fill="rgb(228,99,48)"/><text x="47.8297%" y="127.50"></text></g><g><title>inferred_outlives_of (71,121 samples, 0.16%)</title><rect x="47.9747%" y="101" width="0.1646%" height="15" fill="rgb(253,11,6)"/><text x="48.2247%" y="111.50"></text></g><g><title>inferred_outlives_crate (56,611 samples, 0.13%)</title><rect x="48.0083%" y="85" width="0.1310%" height="15" fill="rgb(247,143,39)"/><text x="48.2583%" y="95.50"></text></g><g><title>super_predicates_of (48,260 samples, 0.11%)</title><rect x="48.1394%" y="133" width="0.1117%" height="15" fill="rgb(236,97,10)"/><text x="48.3894%" y="143.50"></text></g><g><title>type_collecting (1,120,232 samples, 2.59%)</title><rect x="45.7963%" y="165" width="2.5929%" height="15" fill="rgb(233,208,19)"/><text x="46.0463%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (1,111,192 samples, 2.57%)</title><rect x="45.8172%" y="149" width="2.5720%" height="15" fill="rgb(216,164,2)"/><text x="46.0672%" y="159.50">co..</text></g><g><title>type_of (52,140 samples, 0.12%)</title><rect x="48.2685%" y="133" width="0.1207%" height="15" fill="rgb(220,129,5)"/><text x="48.5185%" y="143.50"></text></g><g><title>evaluate_obligation (115,830 samples, 0.27%)</title><rect x="49.1262%" y="133" width="0.2681%" height="15" fill="rgb(242,17,10)"/><text x="49.3762%" y="143.50"></text></g><g><title>check_impl_item_well_formed (507,695 samples, 1.18%)</title><rect x="48.5043%" y="149" width="1.1751%" height="15" fill="rgb(242,107,0)"/><text x="48.7543%" y="159.50"></text></g><g><title>region_scope_tree (44,361 samples, 0.10%)</title><rect x="49.5768%" y="133" width="0.1027%" height="15" fill="rgb(251,28,31)"/><text x="49.8268%" y="143.50"></text></g><g><title>evaluate_obligation (65,041 samples, 0.15%)</title><rect x="50.5206%" y="133" width="0.1505%" height="15" fill="rgb(233,223,10)"/><text x="50.7706%" y="143.50"></text></g><g><title>param_env (199,473 samples, 0.46%)</title><rect x="50.6969%" y="133" width="0.4617%" height="15" fill="rgb(215,21,27)"/><text x="50.9469%" y="143.50"></text></g><g><title>predicates_of (51,441 samples, 0.12%)</title><rect x="51.1586%" y="133" width="0.1191%" height="15" fill="rgb(232,23,21)"/><text x="51.4086%" y="143.50"></text></g><g><title>check_item_well_formed (745,908 samples, 1.73%)</title><rect x="49.6794%" y="149" width="1.7265%" height="15" fill="rgb(244,5,23)"/><text x="49.9294%" y="159.50"></text></g><g><title>evaluate_obligation (183,982 samples, 0.43%)</title><rect x="52.2912%" y="133" width="0.4258%" height="15" fill="rgb(226,81,46)"/><text x="52.5412%" y="143.50"></text></g><g><title>trait_impls_of (43,490 samples, 0.10%)</title><rect x="52.6164%" y="117" width="0.1007%" height="15" fill="rgb(247,70,30)"/><text x="52.8664%" y="127.50"></text></g><g><title>implied_outlives_bounds (169,403 samples, 0.39%)</title><rect x="52.7170%" y="133" width="0.3921%" height="15" fill="rgb(212,68,19)"/><text x="52.9670%" y="143.50"></text></g><g><title>param_env (63,111 samples, 0.15%)</title><rect x="53.1091%" y="133" width="0.1461%" height="15" fill="rgb(240,187,13)"/><text x="53.3591%" y="143.50"></text></g><g><title>predicates_of (81,521 samples, 0.19%)</title><rect x="53.2552%" y="133" width="0.1887%" height="15" fill="rgb(223,113,26)"/><text x="53.5052%" y="143.50"></text></g><g><title>predicates_defined_on (66,061 samples, 0.15%)</title><rect x="53.2910%" y="117" width="0.1529%" height="15" fill="rgb(206,192,2)"/><text x="53.5410%" y="127.50"></text></g><g><title>analysis (22,648,322 samples, 52.42%)</title><rect x="1.3910%" y="197" width="52.4221%" height="15" fill="rgb(241,108,4)"/><text x="1.6410%" y="207.50">analysis</text></g><g><title>type_check_crate (17,361,573 samples, 40.19%)</title><rect x="13.6278%" y="181" width="40.1853%" height="15" fill="rgb(247,173,49)"/><text x="13.8778%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,342,825 samples, 5.42%)</title><rect x="48.3904%" y="165" width="5.4227%" height="15" fill="rgb(224,114,35)"/><text x="48.6404%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,039,992 samples, 2.41%)</title><rect x="51.4059%" y="149" width="2.4072%" height="15" fill="rgb(245,159,27)"/><text x="51.6559%" y="159.50">ch..</text></g><g><title>trait_impls_of (156,591 samples, 0.36%)</title><rect x="53.4507%" y="133" width="0.3624%" height="15" fill="rgb(245,172,44)"/><text x="53.7007%" y="143.50"></text></g><g><title>implementations_of_trait (45,890 samples, 0.11%)</title><rect x="53.7069%" y="117" width="0.1062%" height="15" fill="rgb(236,23,11)"/><text x="53.9569%" y="127.50"></text></g><g><title>codegen_crate (574,876 samples, 1.33%)</title><rect x="53.8349%" y="197" width="1.3306%" height="15" fill="rgb(205,117,38)"/><text x="54.0849%" y="207.50"></text></g><g><title>AST_validation (76,451 samples, 0.18%)</title><rect x="55.5890%" y="181" width="0.1770%" height="15" fill="rgb(237,72,25)"/><text x="55.8390%" y="191.50"></text></g><g><title>crate_injection (64,171 samples, 0.15%)</title><rect x="55.8435%" y="181" width="0.1485%" height="15" fill="rgb(244,70,9)"/><text x="56.0935%" y="191.50"></text></g><g><title>metadata_load_macro (66,591 samples, 0.15%)</title><rect x="77.7732%" y="149" width="0.1541%" height="15" fill="rgb(217,125,39)"/><text x="78.0232%" y="159.50"></text></g><g><title>macro_expand_crate (12,086,935 samples, 27.98%)</title><rect x="55.9920%" y="181" width="27.9766%" height="15" fill="rgb(235,36,10)"/><text x="56.2420%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,063,775 samples, 27.92%)</title><rect x="56.0456%" y="165" width="27.9230%" height="15" fill="rgb(251,123,47)"/><text x="56.2956%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,610,059 samples, 6.04%)</title><rect x="77.9273%" y="149" width="6.0413%" height="15" fill="rgb(221,13,13)"/><text x="78.1773%" y="159.50">metadata..</text></g><g><title>metadata_register_crate (901,722 samples, 2.09%)</title><rect x="81.8814%" y="133" width="2.0871%" height="15" fill="rgb(238,131,9)"/><text x="82.1314%" y="143.50">m..</text></g><g><title>metadata_register_crate (59,260 samples, 0.14%)</title><rect x="83.8314%" y="117" width="0.1372%" height="15" fill="rgb(211,50,8)"/><text x="84.0814%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (113,551 samples, 0.26%)</title><rect x="83.9781%" y="181" width="0.2628%" height="15" fill="rgb(245,182,24)"/><text x="84.2281%" y="191.50"></text></g><g><title>late_resolve_crate (1,021,201 samples, 2.36%)</title><rect x="84.4018%" y="165" width="2.3637%" height="15" fill="rgb(242,14,37)"/><text x="84.6518%" y="175.50">la..</text></g><g><title>configure_and_expand (13,705,633 samples, 31.72%)</title><rect x="55.1655%" y="197" width="31.7232%" height="15" fill="rgb(246,228,12)"/><text x="55.4155%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,143,953 samples, 2.65%)</title><rect x="84.2409%" y="181" width="2.6478%" height="15" fill="rgb(213,55,15)"/><text x="84.4909%" y="191.50">re..</text></g><g><title>drop_ast (47,811 samples, 0.11%)</title><rect x="86.8888%" y="197" width="0.1107%" height="15" fill="rgb(209,9,3)"/><text x="87.1388%" y="207.50"></text></g><g><title>early_lint_checks (144,411 samples, 0.33%)</title><rect x="87.0353%" y="197" width="0.3343%" height="15" fill="rgb(230,59,30)"/><text x="87.2853%" y="207.50"></text></g><g><title>free_global_ctxt (2,400,216 samples, 5.56%)</title><rect x="87.3695%" y="197" width="5.5556%" height="15" fill="rgb(209,121,21)"/><text x="87.6195%" y="207.50">free_gl..</text></g><g><title>crate_hash (69,950 samples, 0.16%)</title><rect x="93.5556%" y="181" width="0.1619%" height="15" fill="rgb(220,109,13)"/><text x="93.8056%" y="191.50"></text></g><g><title>generate_crate_metadata (411,145 samples, 0.95%)</title><rect x="92.9251%" y="197" width="0.9516%" height="15" fill="rgb(232,18,1)"/><text x="93.1751%" y="207.50"></text></g><g><title>hir_lowering (747,909 samples, 1.73%)</title><rect x="93.8767%" y="197" width="1.7311%" height="15" fill="rgb(215,41,42)"/><text x="94.1267%" y="207.50"></text></g><g><title>link (47,481 samples, 0.11%)</title><rect x="95.6078%" y="197" width="0.1099%" height="15" fill="rgb(224,123,36)"/><text x="95.8578%" y="207.50"></text></g><g><title>parse_crate (736,818 samples, 1.71%)</title><rect x="95.7177%" y="197" width="1.7054%" height="15" fill="rgb(240,125,3)"/><text x="95.9677%" y="207.50"></text></g><g><title>prepare_outputs (275,693 samples, 0.64%)</title><rect x="97.4414%" y="197" width="0.6381%" height="15" fill="rgb(205,98,50)"/><text x="97.6914%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (411,795 samples, 0.95%)</title><rect x="98.0795%" y="197" width="0.9531%" height="15" fill="rgb(205,185,37)"/><text x="98.3295%" y="207.50"></text></g><g><title>setup_global_ctxt (117,531 samples, 0.27%)</title><rect x="99.0588%" y="197" width="0.2720%" height="15" fill="rgb(238,207,15)"/><text x="99.3088%" y="207.50"></text></g><g><title>all (43,203,780 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (43,203,780 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (289,083 samples, 0.67%)</title><rect x="99.3309%" y="197" width="0.6691%" height="15" fill="rgb(207,46,11)"/><text x="99.5809%" y="207.50"></text></g></svg></svg>