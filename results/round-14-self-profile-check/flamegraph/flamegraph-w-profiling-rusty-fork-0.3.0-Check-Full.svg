<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (196,161 samples, 0.12%)</title><rect x="10.0363%" y="149" width="0.1206%" height="15" fill="rgb(227,0,7)"/><text x="10.2863%" y="159.50"></text></g><g><title>param_env (477,083 samples, 0.29%)</title><rect x="11.4362%" y="117" width="0.2932%" height="15" fill="rgb(217,0,24)"/><text x="11.6862%" y="127.50"></text></g><g><title>item_attrs (522,245 samples, 0.32%)</title><rect x="12.1898%" y="85" width="0.3210%" height="15" fill="rgb(221,193,54)"/><text x="12.4398%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (504,265 samples, 0.31%)</title><rect x="12.2009%" y="69" width="0.3100%" height="15" fill="rgb(248,212,6)"/><text x="12.4509%" y="79.50"></text></g><g><title>codegen_fn_attrs (725,218 samples, 0.45%)</title><rect x="12.0864%" y="101" width="0.4458%" height="15" fill="rgb(208,68,35)"/><text x="12.3364%" y="111.50"></text></g><g><title>is_copy_raw (186,992 samples, 0.11%)</title><rect x="14.8777%" y="53" width="0.1149%" height="15" fill="rgb(232,128,0)"/><text x="15.1277%" y="63.50"></text></g><g><title>param_env (165,881 samples, 0.10%)</title><rect x="14.9927%" y="53" width="0.1020%" height="15" fill="rgb(207,160,47)"/><text x="15.2427%" y="63.50"></text></g><g><title>adt_drop_tys (599,556 samples, 0.37%)</title><rect x="14.7558%" y="69" width="0.3685%" height="15" fill="rgb(228,23,34)"/><text x="15.0058%" y="79.50"></text></g><g><title>is_copy_raw (988,185 samples, 0.61%)</title><rect x="15.1244%" y="69" width="0.6074%" height="15" fill="rgb(218,30,26)"/><text x="15.3744%" y="79.50"></text></g><g><title>evaluate_obligation (828,503 samples, 0.51%)</title><rect x="15.2225%" y="53" width="0.5093%" height="15" fill="rgb(220,122,19)"/><text x="15.4725%" y="63.50"></text></g><g><title>needs_drop_raw (1,780,235 samples, 1.09%)</title><rect x="14.6500%" y="85" width="1.0942%" height="15" fill="rgb(250,228,42)"/><text x="14.9000%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (640,836 samples, 0.39%)</title><rect x="15.9089%" y="69" width="0.3939%" height="15" fill="rgb(240,193,28)"/><text x="16.1589%" y="79.50"></text></g><g><title>impl_parent (354,734 samples, 0.22%)</title><rect x="16.8458%" y="53" width="0.2180%" height="15" fill="rgb(216,20,37)"/><text x="17.0958%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (239,112 samples, 0.15%)</title><rect x="16.9169%" y="37" width="0.1470%" height="15" fill="rgb(206,188,39)"/><text x="17.1669%" y="47.50"></text></g><g><title>specialization_graph_of (1,896,602 samples, 1.17%)</title><rect x="16.3733%" y="69" width="1.1658%" height="15" fill="rgb(217,207,13)"/><text x="16.6233%" y="79.50"></text></g><g><title>impl_trait_ref (773,099 samples, 0.48%)</title><rect x="17.0639%" y="53" width="0.4752%" height="15" fill="rgb(231,73,38)"/><text x="17.3139%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (661,997 samples, 0.41%)</title><rect x="17.1322%" y="37" width="0.4069%" height="15" fill="rgb(225,20,46)"/><text x="17.3822%" y="47.50"></text></g><g><title>resolve_instance (3,048,463 samples, 1.87%)</title><rect x="15.7443%" y="85" width="1.8738%" height="15" fill="rgb(210,31,41)"/><text x="15.9943%" y="95.50">r..</text></g><g><title>thir_body (1,199,552 samples, 0.74%)</title><rect x="17.6457%" y="85" width="0.7373%" height="15" fill="rgb(221,200,47)"/><text x="17.8957%" y="95.50"></text></g><g><title>mir_const (12,284,497 samples, 7.55%)</title><rect x="10.8489%" y="133" width="7.5509%" height="15" fill="rgb(226,26,5)"/><text x="11.0989%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (10,852,041 samples, 6.67%)</title><rect x="11.7294%" y="117" width="6.6704%" height="15" fill="rgb(249,33,26)"/><text x="11.9794%" y="127.50">unsafety_..</text></g><g><title>mir_built (9,546,056 samples, 5.87%)</title><rect x="12.5322%" y="101" width="5.8676%" height="15" fill="rgb(235,183,28)"/><text x="12.7822%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (13,844,784 samples, 8.51%)</title><rect x="10.2135%" y="149" width="8.5099%" height="15" fill="rgb(221,5,38)"/><text x="10.4635%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (526,435 samples, 0.32%)</title><rect x="18.3998%" y="133" width="0.3236%" height="15" fill="rgb(247,18,42)"/><text x="18.6498%" y="143.50"></text></g><g><title>mir_const (234,062 samples, 0.14%)</title><rect x="18.5795%" y="117" width="0.1439%" height="15" fill="rgb(241,131,45)"/><text x="18.8295%" y="127.50"></text></g><g><title>unsafety_check_result (206,712 samples, 0.13%)</title><rect x="18.5963%" y="101" width="0.1271%" height="15" fill="rgb(249,31,29)"/><text x="18.8463%" y="111.50"></text></g><g><title>mir_built (194,532 samples, 0.12%)</title><rect x="18.6038%" y="85" width="0.1196%" height="15" fill="rgb(225,111,53)"/><text x="18.8538%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (512,687 samples, 0.32%)</title><rect x="18.7234%" y="149" width="0.3151%" height="15" fill="rgb(238,160,17)"/><text x="18.9734%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (890,012 samples, 0.55%)</title><rect x="19.0385%" y="149" width="0.5471%" height="15" fill="rgb(214,148,48)"/><text x="19.2885%" y="159.50"></text></g><g><title>normalize_projection_ty (582,720 samples, 0.36%)</title><rect x="19.2274%" y="133" width="0.3582%" height="15" fill="rgb(232,36,49)"/><text x="19.4774%" y="143.50"></text></g><g><title>type_op_normalize_predicate (421,346 samples, 0.26%)</title><rect x="19.5856%" y="149" width="0.2590%" height="15" fill="rgb(209,103,24)"/><text x="19.8356%" y="159.50"></text></g><g><title>normalize_projection_ty (272,323 samples, 0.17%)</title><rect x="19.6772%" y="133" width="0.1674%" height="15" fill="rgb(229,88,8)"/><text x="19.9272%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,127,687 samples, 2.54%)</title><rect x="19.8446%" y="149" width="2.5371%" height="15" fill="rgb(213,181,19)"/><text x="20.0946%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (35,335,955 samples, 21.72%)</title><rect x="0.6774%" y="181" width="21.7198%" height="15" fill="rgb(254,191,54)"/><text x="0.9274%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (35,206,442 samples, 21.64%)</title><rect x="0.7570%" y="165" width="21.6402%" height="15" fill="rgb(241,83,37)"/><text x="1.0070%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (170,902 samples, 0.11%)</title><rect x="22.3972%" y="181" width="0.1050%" height="15" fill="rgb(233,36,39)"/><text x="22.6472%" y="191.50"></text></g><g><title>hir_module_items (184,220 samples, 0.11%)</title><rect x="22.5022%" y="181" width="0.1132%" height="15" fill="rgb(226,3,54)"/><text x="22.7522%" y="191.50"></text></g><g><title>codegen_fn_attrs (187,622 samples, 0.12%)</title><rect x="22.8718%" y="117" width="0.1153%" height="15" fill="rgb(245,192,40)"/><text x="23.1218%" y="127.50"></text></g><g><title>codegen_fn_attrs (321,802 samples, 0.20%)</title><rect x="22.7940%" y="149" width="0.1978%" height="15" fill="rgb(238,167,29)"/><text x="23.0440%" y="159.50"></text></g><g><title>should_inherit_track_caller (271,192 samples, 0.17%)</title><rect x="22.8251%" y="133" width="0.1667%" height="15" fill="rgb(232,182,51)"/><text x="23.0751%" y="143.50"></text></g><g><title>check_mod_attrs (584,797 samples, 0.36%)</title><rect x="22.6324%" y="165" width="0.3595%" height="15" fill="rgb(231,60,39)"/><text x="22.8824%" y="175.50"></text></g><g><title>lookup_deprecation_entry (179,964 samples, 0.11%)</title><rect x="23.2470%" y="149" width="0.1106%" height="15" fill="rgb(208,69,12)"/><text x="23.4970%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (527,267 samples, 0.32%)</title><rect x="23.1159%" y="165" width="0.3241%" height="15" fill="rgb(235,93,37)"/><text x="23.3659%" y="175.50"></text></g><g><title>misc_checking_1 (1,395,415 samples, 0.86%)</title><rect x="22.6157%" y="181" width="0.8577%" height="15" fill="rgb(213,116,39)"/><text x="22.8657%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (596,466 samples, 0.37%)</title><rect x="23.4748%" y="165" width="0.3666%" height="15" fill="rgb(222,207,29)"/><text x="23.7248%" y="175.50"></text></g><g><title>check_mod_liveness (483,184 samples, 0.30%)</title><rect x="23.5444%" y="149" width="0.2970%" height="15" fill="rgb(206,96,30)"/><text x="23.7944%" y="159.50"></text></g><g><title>misc_checking_2 (1,369,245 samples, 0.84%)</title><rect x="23.4734%" y="181" width="0.8416%" height="15" fill="rgb(218,138,4)"/><text x="23.7234%" y="191.50"></text></g><g><title>match_checking (770,509 samples, 0.47%)</title><rect x="23.8414%" y="165" width="0.4736%" height="15" fill="rgb(250,191,14)"/><text x="24.0914%" y="175.50"></text></g><g><title>check_match (737,408 samples, 0.45%)</title><rect x="23.8618%" y="149" width="0.4533%" height="15" fill="rgb(239,60,40)"/><text x="24.1118%" y="159.50"></text></g><g><title>check_private_in_public (187,342 samples, 0.12%)</title><rect x="24.3217%" y="165" width="0.1152%" height="15" fill="rgb(206,27,48)"/><text x="24.5717%" y="175.50"></text></g><g><title>death_checking (499,646 samples, 0.31%)</title><rect x="24.4369%" y="165" width="0.3071%" height="15" fill="rgb(225,35,8)"/><text x="24.6869%" y="175.50"></text></g><g><title>eval_to_const_value_raw (484,876 samples, 0.30%)</title><rect x="25.4030%" y="85" width="0.2980%" height="15" fill="rgb(250,213,24)"/><text x="25.6530%" y="95.50"></text></g><g><title>eval_to_const_value_raw (482,456 samples, 0.30%)</title><rect x="25.4045%" y="69" width="0.2965%" height="15" fill="rgb(247,123,22)"/><text x="25.6545%" y="79.50"></text></g><g><title>eval_to_allocation_raw (476,646 samples, 0.29%)</title><rect x="25.4081%" y="53" width="0.2930%" height="15" fill="rgb(231,138,38)"/><text x="25.6581%" y="63.50"></text></g><g><title>eval_to_allocation_raw (705,658 samples, 0.43%)</title><rect x="25.2693%" y="133" width="0.4337%" height="15" fill="rgb(231,145,46)"/><text x="25.5193%" y="143.50"></text></g><g><title>eval_to_allocation_raw (697,428 samples, 0.43%)</title><rect x="25.2744%" y="117" width="0.4287%" height="15" fill="rgb(251,118,11)"/><text x="25.5244%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (501,576 samples, 0.31%)</title><rect x="25.3948%" y="101" width="0.3083%" height="15" fill="rgb(217,147,25)"/><text x="25.6448%" y="111.50"></text></g><g><title>param_env (300,133 samples, 0.18%)</title><rect x="25.7328%" y="133" width="0.1845%" height="15" fill="rgb(247,81,37)"/><text x="25.9828%" y="143.50"></text></g><g><title>crate_lints (3,091,285 samples, 1.90%)</title><rect x="24.7450%" y="149" width="1.9001%" height="15" fill="rgb(209,12,38)"/><text x="24.9950%" y="159.50">c..</text></g><g><title>type_of (1,097,550 samples, 0.67%)</title><rect x="25.9705%" y="133" width="0.6746%" height="15" fill="rgb(227,1,9)"/><text x="26.2205%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (865,348 samples, 0.53%)</title><rect x="26.1132%" y="117" width="0.5319%" height="15" fill="rgb(248,47,43)"/><text x="26.3632%" y="127.50"></text></g><g><title>layout_of (169,541 samples, 0.10%)</title><rect x="26.9661%" y="117" width="0.1042%" height="15" fill="rgb(221,10,30)"/><text x="27.2161%" y="127.50"></text></g><g><title>lint_checking (3,785,462 samples, 2.33%)</title><rect x="24.7440%" y="165" width="2.3268%" height="15" fill="rgb(210,229,1)"/><text x="24.9940%" y="175.50">l..</text></g><g><title>module_lints (692,527 samples, 0.43%)</title><rect x="26.6451%" y="149" width="0.4257%" height="15" fill="rgb(222,148,37)"/><text x="26.8951%" y="159.50"></text></g><g><title>lint_mod (684,627 samples, 0.42%)</title><rect x="26.6500%" y="133" width="0.4208%" height="15" fill="rgb(234,67,33)"/><text x="26.9000%" y="143.50"></text></g><g><title>privacy_access_levels (222,362 samples, 0.14%)</title><rect x="27.0708%" y="165" width="0.1367%" height="15" fill="rgb(247,98,35)"/><text x="27.3208%" y="175.50"></text></g><g><title>privacy_checking_modules (1,082,953 samples, 0.67%)</title><rect x="27.2075%" y="165" width="0.6657%" height="15" fill="rgb(247,138,52)"/><text x="27.4575%" y="175.50"></text></g><g><title>check_mod_privacy (1,078,383 samples, 0.66%)</title><rect x="27.2103%" y="149" width="0.6628%" height="15" fill="rgb(213,79,30)"/><text x="27.4603%" y="159.50"></text></g><g><title>misc_checking_3 (5,811,465 samples, 3.57%)</title><rect x="24.3150%" y="181" width="3.5721%" height="15" fill="rgb(246,177,23)"/><text x="24.5650%" y="191.50">misc..</text></g><g><title>adt_destructor (312,094 samples, 0.19%)</title><rect x="27.9712%" y="133" width="0.1918%" height="15" fill="rgb(230,62,27)"/><text x="28.2212%" y="143.50"></text></g><g><title>coherent_trait (308,474 samples, 0.19%)</title><rect x="27.9734%" y="117" width="0.1896%" height="15" fill="rgb(216,154,8)"/><text x="28.2234%" y="127.50"></text></g><g><title>specialization_graph_of (306,644 samples, 0.19%)</title><rect x="27.9745%" y="101" width="0.1885%" height="15" fill="rgb(244,35,45)"/><text x="28.2245%" y="111.50"></text></g><g><title>impl_parent (2,467,300 samples, 1.52%)</title><rect x="30.9346%" y="117" width="1.5166%" height="15" fill="rgb(251,115,12)"/><text x="31.1846%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,458,107 samples, 0.90%)</title><rect x="31.5549%" y="101" width="0.8962%" height="15" fill="rgb(240,54,50)"/><text x="31.8049%" y="111.50"></text></g><g><title>impl_trait_ref (5,470,639 samples, 3.36%)</title><rect x="32.4511%" y="117" width="3.3626%" height="15" fill="rgb(233,84,52)"/><text x="32.7011%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,453,417 samples, 2.74%)</title><rect x="33.0764%" y="101" width="2.7374%" height="15" fill="rgb(207,117,47)"/><text x="33.3264%" y="111.50">me..</text></g><g><title>trait_impls_of (841,082 samples, 0.52%)</title><rect x="35.8283%" y="117" width="0.5170%" height="15" fill="rgb(249,43,39)"/><text x="36.0783%" y="127.50"></text></g><g><title>implementations_of_trait (235,884 samples, 0.14%)</title><rect x="36.2003%" y="101" width="0.1450%" height="15" fill="rgb(209,38,44)"/><text x="36.4503%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (188,434 samples, 0.12%)</title><rect x="36.2295%" y="85" width="0.1158%" height="15" fill="rgb(236,212,23)"/><text x="36.4795%" y="95.50"></text></g><g><title>coherent_trait (13,668,122 samples, 8.40%)</title><rect x="27.9446%" y="149" width="8.4013%" height="15" fill="rgb(242,79,21)"/><text x="28.1946%" y="159.50">coherent_tra..</text></g><g><title>specialization_graph_of (13,122,706 samples, 8.07%)</title><rect x="28.2798%" y="133" width="8.0661%" height="15" fill="rgb(211,96,35)"/><text x="28.5298%" y="143.50">specializat..</text></g><g><title>coherence_checking (13,873,645 samples, 8.53%)</title><rect x="27.9331%" y="165" width="8.5276%" height="15" fill="rgb(253,215,40)"/><text x="28.1831%" y="175.50">coherence_ch..</text></g><g><title>associated_item (266,473 samples, 0.16%)</title><rect x="47.1477%" y="101" width="0.1638%" height="15" fill="rgb(211,81,21)"/><text x="47.3977%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (210,342 samples, 0.13%)</title><rect x="47.1822%" y="85" width="0.1293%" height="15" fill="rgb(208,190,38)"/><text x="47.4322%" y="95.50"></text></g><g><title>associated_items (408,253 samples, 0.25%)</title><rect x="47.0783%" y="117" width="0.2509%" height="15" fill="rgb(235,213,38)"/><text x="47.3283%" y="127.50"></text></g><g><title>adt_dtorck_constraint (167,921 samples, 0.10%)</title><rect x="47.6834%" y="85" width="0.1032%" height="15" fill="rgb(237,122,38)"/><text x="47.9334%" y="95.50"></text></g><g><title>adt_dtorck_constraint (443,316 samples, 0.27%)</title><rect x="47.5397%" y="101" width="0.2725%" height="15" fill="rgb(244,218,35)"/><text x="47.7897%" y="111.50"></text></g><g><title>dropck_outlives (761,179 samples, 0.47%)</title><rect x="47.3840%" y="117" width="0.4679%" height="15" fill="rgb(240,68,47)"/><text x="47.6340%" y="127.50"></text></g><g><title>predicates_of (205,713 samples, 0.13%)</title><rect x="48.8462%" y="101" width="0.1264%" height="15" fill="rgb(210,16,53)"/><text x="49.0962%" y="111.50"></text></g><g><title>evaluate_obligation (2,246,959 samples, 1.38%)</title><rect x="47.8519%" y="117" width="1.3811%" height="15" fill="rgb(235,124,12)"/><text x="48.1019%" y="127.50"></text></g><g><title>trait_impls_of (346,768 samples, 0.21%)</title><rect x="49.0198%" y="101" width="0.2131%" height="15" fill="rgb(224,169,11)"/><text x="49.2698%" y="111.50"></text></g><g><title>expn_that_defined (264,873 samples, 0.16%)</title><rect x="49.2330%" y="117" width="0.1628%" height="15" fill="rgb(250,166,2)"/><text x="49.4830%" y="127.50"></text></g><g><title>fn_sig (199,932 samples, 0.12%)</title><rect x="49.3958%" y="117" width="0.1229%" height="15" fill="rgb(242,216,29)"/><text x="49.6458%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (169,402 samples, 0.10%)</title><rect x="49.4146%" y="101" width="0.1041%" height="15" fill="rgb(230,116,27)"/><text x="49.6646%" y="111.50"></text></g><g><title>item_attrs (256,191 samples, 0.16%)</title><rect x="49.6767%" y="117" width="0.1575%" height="15" fill="rgb(228,99,48)"/><text x="49.9267%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (245,571 samples, 0.15%)</title><rect x="49.6832%" y="101" width="0.1509%" height="15" fill="rgb(253,11,6)"/><text x="49.9332%" y="111.50"></text></g><g><title>evaluate_obligation (199,051 samples, 0.12%)</title><rect x="49.9993%" y="101" width="0.1223%" height="15" fill="rgb(247,143,39)"/><text x="50.2493%" y="111.50"></text></g><g><title>method_autoderef_steps (391,601 samples, 0.24%)</title><rect x="49.8906%" y="117" width="0.2407%" height="15" fill="rgb(236,97,10)"/><text x="50.1406%" y="127.50"></text></g><g><title>predicates_of (504,303 samples, 0.31%)</title><rect x="50.1833%" y="117" width="0.3100%" height="15" fill="rgb(233,208,19)"/><text x="50.4333%" y="127.50"></text></g><g><title>predicates_defined_on (363,421 samples, 0.22%)</title><rect x="50.2699%" y="101" width="0.2234%" height="15" fill="rgb(216,164,2)"/><text x="50.5199%" y="111.50"></text></g><g><title>associated_item (631,487 samples, 0.39%)</title><rect x="57.0030%" y="85" width="0.3882%" height="15" fill="rgb(220,129,5)"/><text x="57.2530%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (576,917 samples, 0.35%)</title><rect x="57.0366%" y="69" width="0.3546%" height="15" fill="rgb(242,17,10)"/><text x="57.2866%" y="79.50"></text></g><g><title>associated_items (752,277 samples, 0.46%)</title><rect x="56.9427%" y="101" width="0.4624%" height="15" fill="rgb(242,107,0)"/><text x="57.1927%" y="111.50"></text></g><g><title>adt_dtorck_constraint (185,712 samples, 0.11%)</title><rect x="57.6388%" y="53" width="0.1142%" height="15" fill="rgb(251,28,31)"/><text x="57.8888%" y="63.50"></text></g><g><title>adt_dtorck_constraint (247,193 samples, 0.15%)</title><rect x="57.6137%" y="69" width="0.1519%" height="15" fill="rgb(233,223,10)"/><text x="57.8637%" y="79.50"></text></g><g><title>dropck_outlives (560,634 samples, 0.34%)</title><rect x="57.4350%" y="101" width="0.3446%" height="15" fill="rgb(215,21,27)"/><text x="57.6850%" y="111.50"></text></g><g><title>adt_dtorck_constraint (408,794 samples, 0.25%)</title><rect x="57.5283%" y="85" width="0.2513%" height="15" fill="rgb(232,23,21)"/><text x="57.7783%" y="95.50"></text></g><g><title>adt_sized_constraint (225,451 samples, 0.14%)</title><rect x="59.2497%" y="85" width="0.1386%" height="15" fill="rgb(244,5,23)"/><text x="59.4997%" y="95.50"></text></g><g><title>generics_of (262,055 samples, 0.16%)</title><rect x="59.3906%" y="85" width="0.1611%" height="15" fill="rgb(226,81,46)"/><text x="59.6406%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (206,964 samples, 0.13%)</title><rect x="59.4245%" y="69" width="0.1272%" height="15" fill="rgb(247,70,30)"/><text x="59.6745%" y="79.50"></text></g><g><title>impl_trait_ref (315,593 samples, 0.19%)</title><rect x="59.5802%" y="85" width="0.1940%" height="15" fill="rgb(212,68,19)"/><text x="59.8302%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (264,042 samples, 0.16%)</title><rect x="59.6118%" y="69" width="0.1623%" height="15" fill="rgb(240,187,13)"/><text x="59.8618%" y="79.50"></text></g><g><title>predicates_of (191,481 samples, 0.12%)</title><rect x="59.7872%" y="85" width="0.1177%" height="15" fill="rgb(223,113,26)"/><text x="60.0372%" y="95.50"></text></g><g><title>specializes (277,752 samples, 0.17%)</title><rect x="59.9049%" y="85" width="0.1707%" height="15" fill="rgb(206,192,2)"/><text x="60.1549%" y="95.50"></text></g><g><title>param_env (167,031 samples, 0.10%)</title><rect x="59.9730%" y="69" width="0.1027%" height="15" fill="rgb(241,108,4)"/><text x="60.2230%" y="79.50"></text></g><g><title>trait_impls_of (287,692 samples, 0.18%)</title><rect x="60.0815%" y="85" width="0.1768%" height="15" fill="rgb(247,173,49)"/><text x="60.3315%" y="95.50"></text></g><g><title>evaluate_obligation (4,035,074 samples, 2.48%)</title><rect x="57.7840%" y="101" width="2.4802%" height="15" fill="rgb(224,114,35)"/><text x="58.0340%" y="111.50">ev..</text></g><g><title>is_copy_raw (306,534 samples, 0.19%)</title><rect x="60.5959%" y="101" width="0.1884%" height="15" fill="rgb(245,159,27)"/><text x="60.8459%" y="111.50"></text></g><g><title>evaluate_obligation (241,383 samples, 0.15%)</title><rect x="60.6359%" y="85" width="0.1484%" height="15" fill="rgb(245,172,44)"/><text x="60.8859%" y="95.50"></text></g><g><title>method_autoderef_steps (293,166 samples, 0.18%)</title><rect x="60.9017%" y="101" width="0.1802%" height="15" fill="rgb(236,23,11)"/><text x="61.1517%" y="111.50"></text></g><g><title>predicates_of (341,740 samples, 0.21%)</title><rect x="61.1657%" y="101" width="0.2101%" height="15" fill="rgb(205,117,38)"/><text x="61.4157%" y="111.50"></text></g><g><title>predicates_defined_on (248,740 samples, 0.15%)</title><rect x="61.2228%" y="85" width="0.1529%" height="15" fill="rgb(237,72,25)"/><text x="61.4728%" y="95.50"></text></g><g><title>typeck (17,729,037 samples, 10.90%)</title><rect x="50.5786%" y="117" width="10.8974%" height="15" fill="rgb(244,70,9)"/><text x="50.8286%" y="127.50">typeck</text></g><g><title>item_bodies_checking (40,749,655 samples, 25.05%)</title><rect x="36.4766%" y="165" width="25.0474%" height="15" fill="rgb(217,125,39)"/><text x="36.7266%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,746,535 samples, 25.05%)</title><rect x="36.4785%" y="149" width="25.0455%" height="15" fill="rgb(235,36,10)"/><text x="36.7285%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (40,673,384 samples, 25.00%)</title><rect x="36.5235%" y="133" width="25.0005%" height="15" fill="rgb(251,123,47)"/><text x="36.7735%" y="143.50">typeck</text></g><g><title>typeck (877,471 samples, 0.54%)</title><rect x="61.9574%" y="133" width="0.5394%" height="15" fill="rgb(221,13,13)"/><text x="62.2074%" y="143.50"></text></g><g><title>item_types_checking (1,583,527 samples, 0.97%)</title><rect x="61.5240%" y="165" width="0.9733%" height="15" fill="rgb(238,131,9)"/><text x="61.7740%" y="175.50"></text></g><g><title>check_mod_item_types (1,576,687 samples, 0.97%)</title><rect x="61.5282%" y="149" width="0.9691%" height="15" fill="rgb(211,50,8)"/><text x="61.7782%" y="159.50"></text></g><g><title>fn_sig (509,908 samples, 0.31%)</title><rect x="62.6615%" y="133" width="0.3134%" height="15" fill="rgb(245,182,24)"/><text x="62.9115%" y="143.50"></text></g><g><title>named_region_map (493,316 samples, 0.30%)</title><rect x="63.0371%" y="117" width="0.3032%" height="15" fill="rgb(242,14,37)"/><text x="63.2871%" y="127.50"></text></g><g><title>resolve_lifetimes (473,286 samples, 0.29%)</title><rect x="63.0494%" y="101" width="0.2909%" height="15" fill="rgb(246,228,12)"/><text x="63.2994%" y="111.50"></text></g><g><title>lint_levels (203,093 samples, 0.12%)</title><rect x="63.2155%" y="85" width="0.1248%" height="15" fill="rgb(213,55,15)"/><text x="63.4655%" y="95.50"></text></g><g><title>generics_of (612,617 samples, 0.38%)</title><rect x="62.9749%" y="133" width="0.3766%" height="15" fill="rgb(209,9,3)"/><text x="63.2249%" y="143.50"></text></g><g><title>explicit_predicates_of (265,242 samples, 0.16%)</title><rect x="63.4573%" y="101" width="0.1630%" height="15" fill="rgb(230,59,30)"/><text x="63.7073%" y="111.50"></text></g><g><title>predicates_of (652,045 samples, 0.40%)</title><rect x="63.3848%" y="133" width="0.4008%" height="15" fill="rgb(209,121,21)"/><text x="63.6348%" y="143.50"></text></g><g><title>predicates_defined_on (610,865 samples, 0.38%)</title><rect x="63.4101%" y="117" width="0.3755%" height="15" fill="rgb(220,109,13)"/><text x="63.6601%" y="127.50"></text></g><g><title>inferred_outlives_of (268,753 samples, 0.17%)</title><rect x="63.6204%" y="101" width="0.1652%" height="15" fill="rgb(232,18,1)"/><text x="63.8704%" y="111.50"></text></g><g><title>inferred_outlives_crate (246,953 samples, 0.15%)</title><rect x="63.6338%" y="85" width="0.1518%" height="15" fill="rgb(215,41,42)"/><text x="63.8838%" y="95.50"></text></g><g><title>type_collecting (2,201,235 samples, 1.35%)</title><rect x="62.4994%" y="165" width="1.3530%" height="15" fill="rgb(224,123,36)"/><text x="62.7494%" y="175.50"></text></g><g><title>collect_mod_item_types (2,185,774 samples, 1.34%)</title><rect x="62.5089%" y="149" width="1.3435%" height="15" fill="rgb(240,125,3)"/><text x="62.7589%" y="159.50"></text></g><g><title>evaluate_obligation (306,247 samples, 0.19%)</title><rect x="64.5560%" y="133" width="0.1882%" height="15" fill="rgb(205,98,50)"/><text x="64.8060%" y="143.50"></text></g><g><title>object_safety_violations (352,714 samples, 0.22%)</title><rect x="64.8174%" y="133" width="0.2168%" height="15" fill="rgb(205,185,37)"/><text x="65.0674%" y="143.50"></text></g><g><title>region_scope_tree (265,595 samples, 0.16%)</title><rect x="65.1265%" y="133" width="0.1633%" height="15" fill="rgb(238,207,15)"/><text x="65.3765%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,201,947 samples, 1.35%)</title><rect x="63.9591%" y="149" width="1.3535%" height="15" fill="rgb(213,199,42)"/><text x="64.2091%" y="159.50"></text></g><g><title>adt_sized_constraint (218,142 samples, 0.13%)</title><rect x="66.1995%" y="101" width="0.1341%" height="15" fill="rgb(235,201,11)"/><text x="66.4495%" y="111.50"></text></g><g><title>adt_sized_constraint (266,553 samples, 0.16%)</title><rect x="66.1711%" y="117" width="0.1638%" height="15" fill="rgb(207,46,11)"/><text x="66.4211%" y="127.50"></text></g><g><title>evaluate_obligation (671,478 samples, 0.41%)</title><rect x="65.9632%" y="133" width="0.4127%" height="15" fill="rgb(241,35,35)"/><text x="66.2132%" y="143.50"></text></g><g><title>object_safety_violations (243,173 samples, 0.15%)</title><rect x="66.4822%" y="133" width="0.1495%" height="15" fill="rgb(243,32,47)"/><text x="66.7322%" y="143.50"></text></g><g><title>param_env (206,811 samples, 0.13%)</title><rect x="66.6317%" y="133" width="0.1271%" height="15" fill="rgb(247,202,23)"/><text x="66.8817%" y="143.50"></text></g><g><title>region_scope_tree (227,503 samples, 0.14%)</title><rect x="66.8125%" y="133" width="0.1398%" height="15" fill="rgb(219,102,11)"/><text x="67.0625%" y="143.50"></text></g><g><title>analysis (108,243,389 samples, 66.53%)</title><rect x="0.4973%" y="197" width="66.5334%" height="15" fill="rgb(243,110,44)"/><text x="0.7473%" y="207.50">analysis</text></g><g><title>type_check_crate (63,682,781 samples, 39.14%)</title><rect x="27.8871%" y="181" width="39.1436%" height="15" fill="rgb(222,74,54)"/><text x="28.1371%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,164,608 samples, 3.17%)</title><rect x="63.8562%" y="165" width="3.1745%" height="15" fill="rgb(216,99,12)"/><text x="64.1062%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (2,795,329 samples, 1.72%)</title><rect x="65.3125%" y="149" width="1.7182%" height="15" fill="rgb(226,22,26)"/><text x="65.5625%" y="159.50"></text></g><g><title>codegen_crate (561,906 samples, 0.35%)</title><rect x="67.0373%" y="197" width="0.3454%" height="15" fill="rgb(217,163,10)"/><text x="67.2873%" y="207.50"></text></g><g><title>metadata_load_macro (1,776,559 samples, 1.09%)</title><rect x="88.2799%" y="149" width="1.0920%" height="15" fill="rgb(213,25,53)"/><text x="88.5299%" y="159.50"></text></g><g><title>metadata_register_crate (3,133,095 samples, 1.93%)</title><rect x="89.3719%" y="149" width="1.9258%" height="15" fill="rgb(252,105,26)"/><text x="89.6219%" y="159.50">m..</text></g><g><title>metadata_register_crate (1,036,701 samples, 0.64%)</title><rect x="90.6604%" y="133" width="0.6372%" height="15" fill="rgb(220,39,43)"/><text x="90.9104%" y="143.50"></text></g><g><title>macro_expand_crate (38,799,564 samples, 23.85%)</title><rect x="67.7210%" y="181" width="23.8487%" height="15" fill="rgb(229,68,48)"/><text x="67.9710%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (38,785,163 samples, 23.84%)</title><rect x="67.7299%" y="165" width="23.8399%" height="15" fill="rgb(252,8,32)"/><text x="67.9799%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (442,706 samples, 0.27%)</title><rect x="91.2977%" y="149" width="0.2721%" height="15" fill="rgb(223,20,43)"/><text x="91.5477%" y="159.50"></text></g><g><title>finalize_macro_resolutions (217,643 samples, 0.13%)</title><rect x="91.6762%" y="165" width="0.1338%" height="15" fill="rgb(229,81,49)"/><text x="91.9262%" y="175.50"></text></g><g><title>late_resolve_crate (2,162,514 samples, 1.33%)</title><rect x="91.8100%" y="165" width="1.3292%" height="15" fill="rgb(236,28,36)"/><text x="92.0600%" y="175.50"></text></g><g><title>configure_and_expand (42,023,269 samples, 25.83%)</title><rect x="67.3827%" y="197" width="25.8302%" height="15" fill="rgb(249,185,26)"/><text x="67.6327%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,577,959 samples, 1.58%)</title><rect x="91.6284%" y="181" width="1.5846%" height="15" fill="rgb(249,174,33)"/><text x="91.8784%" y="191.50"></text></g><g><title>drop_ast (222,093 samples, 0.14%)</title><rect x="93.2130%" y="197" width="0.1365%" height="15" fill="rgb(233,201,37)"/><text x="93.4630%" y="207.50"></text></g><g><title>early_lint_checks (417,605 samples, 0.26%)</title><rect x="93.3608%" y="197" width="0.2567%" height="15" fill="rgb(221,78,26)"/><text x="93.6108%" y="207.50"></text></g><g><title>free_global_ctxt (4,149,006 samples, 2.55%)</title><rect x="93.6174%" y="197" width="2.5502%" height="15" fill="rgb(250,127,30)"/><text x="93.8674%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,277,374 samples, 0.79%)</title><rect x="96.1677%" y="197" width="0.7852%" height="15" fill="rgb(230,49,44)"/><text x="96.4177%" y="207.50"></text></g><g><title>hir_lowering (2,901,332 samples, 1.78%)</title><rect x="96.9528%" y="197" width="1.7833%" height="15" fill="rgb(229,67,23)"/><text x="97.2028%" y="207.50">h..</text></g><g><title>parse_crate (445,465 samples, 0.27%)</title><rect x="98.7687%" y="197" width="0.2738%" height="15" fill="rgb(249,83,47)"/><text x="99.0187%" y="207.50"></text></g><g><title>prepare_outputs (193,402 samples, 0.12%)</title><rect x="99.0489%" y="197" width="0.1189%" height="15" fill="rgb(215,43,3)"/><text x="99.2989%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (907,760 samples, 0.56%)</title><rect x="99.1678%" y="197" width="0.5580%" height="15" fill="rgb(238,154,13)"/><text x="99.4178%" y="207.50"></text></g><g><title>all (162,690,186 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (162,690,186 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (357,424 samples, 0.22%)</title><rect x="99.7803%" y="197" width="0.2197%" height="15" fill="rgb(235,30,7)"/><text x="100.0303%" y="207.50"></text></g></svg></svg>