<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (459,654 samples, 0.11%)</title><rect x="13.0762%" y="181" width="0.1095%" height="15" fill="rgb(227,0,7)"/><text x="13.3262%" y="191.50"></text></g><g><title>param_env (685,497 samples, 0.16%)</title><rect x="14.8245%" y="149" width="0.1633%" height="15" fill="rgb(217,0,24)"/><text x="15.0745%" y="159.50"></text></g><g><title>item_attrs (706,128 samples, 0.17%)</title><rect x="15.4912%" y="117" width="0.1682%" height="15" fill="rgb(221,193,54)"/><text x="15.7412%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (683,538 samples, 0.16%)</title><rect x="15.4966%" y="101" width="0.1629%" height="15" fill="rgb(248,212,6)"/><text x="15.7466%" y="111.50"></text></g><g><title>codegen_fn_attrs (985,873 samples, 0.23%)</title><rect x="15.4345%" y="133" width="0.2349%" height="15" fill="rgb(208,68,35)"/><text x="15.6845%" y="143.50"></text></g><g><title>is_copy_raw (421,125 samples, 0.10%)</title><rect x="18.6644%" y="117" width="0.1003%" height="15" fill="rgb(232,128,0)"/><text x="18.9144%" y="127.50"></text></g><g><title>adt_drop_tys (433,247 samples, 0.10%)</title><rect x="18.8423%" y="101" width="0.1032%" height="15" fill="rgb(207,160,47)"/><text x="19.0923%" y="111.50"></text></g><g><title>is_copy_raw (1,516,942 samples, 0.36%)</title><rect x="18.9455%" y="101" width="0.3614%" height="15" fill="rgb(228,23,34)"/><text x="19.1955%" y="111.50"></text></g><g><title>evaluate_obligation (1,214,559 samples, 0.29%)</title><rect x="19.0176%" y="85" width="0.2894%" height="15" fill="rgb(218,30,26)"/><text x="19.2676%" y="95.50"></text></g><g><title>needs_drop_raw (2,309,454 samples, 0.55%)</title><rect x="18.7655%" y="117" width="0.5502%" height="15" fill="rgb(220,122,19)"/><text x="19.0155%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,538,167 samples, 0.37%)</title><rect x="19.4799%" y="101" width="0.3665%" height="15" fill="rgb(250,228,42)"/><text x="19.7299%" y="111.50"></text></g><g><title>specialization_graph_of (1,479,735 samples, 0.35%)</title><rect x="19.8896%" y="101" width="0.3525%" height="15" fill="rgb(240,193,28)"/><text x="20.1396%" y="111.50"></text></g><g><title>impl_trait_ref (703,155 samples, 0.17%)</title><rect x="20.0746%" y="85" width="0.1675%" height="15" fill="rgb(216,20,37)"/><text x="20.3246%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (611,984 samples, 0.15%)</title><rect x="20.0964%" y="69" width="0.1458%" height="15" fill="rgb(206,188,39)"/><text x="20.3464%" y="79.50"></text></g><g><title>resolve_instance (4,094,152 samples, 0.98%)</title><rect x="19.3157%" y="117" width="0.9754%" height="15" fill="rgb(217,207,13)"/><text x="19.5657%" y="127.50"></text></g><g><title>thir_body (5,013,257 samples, 1.19%)</title><rect x="20.3121%" y="117" width="1.1944%" height="15" fill="rgb(231,73,38)"/><text x="20.5621%" y="127.50"></text></g><g><title>mir_const (31,354,625 samples, 7.47%)</title><rect x="14.0494%" y="165" width="7.4703%" height="15" fill="rgb(225,20,46)"/><text x="14.2994%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (27,415,569 samples, 6.53%)</title><rect x="14.9879%" y="149" width="6.5318%" height="15" fill="rgb(210,31,41)"/><text x="15.2379%" y="159.50">unsafety_..</text></g><g><title>mir_built (24,555,127 samples, 5.85%)</title><rect x="15.6694%" y="133" width="5.8503%" height="15" fill="rgb(221,200,47)"/><text x="15.9194%" y="143.50">mir_bui..</text></g><g><title>thir_body (695,389 samples, 0.17%)</title><rect x="22.2176%" y="101" width="0.1657%" height="15" fill="rgb(226,26,5)"/><text x="22.4676%" y="111.50"></text></g><g><title>mir_const (2,678,152 samples, 0.64%)</title><rect x="21.7507%" y="149" width="0.6381%" height="15" fill="rgb(249,33,26)"/><text x="22.0007%" y="159.50"></text></g><g><title>unsafety_check_result (2,128,252 samples, 0.51%)</title><rect x="21.8817%" y="133" width="0.5071%" height="15" fill="rgb(235,183,28)"/><text x="22.1317%" y="143.50"></text></g><g><title>mir_built (1,930,299 samples, 0.46%)</title><rect x="21.9289%" y="117" width="0.4599%" height="15" fill="rgb(221,5,38)"/><text x="22.1789%" y="127.50"></text></g><g><title>mir_const_qualif (3,712,033 samples, 0.88%)</title><rect x="21.5197%" y="165" width="0.8844%" height="15" fill="rgb(247,18,42)"/><text x="21.7697%" y="175.50"></text></g><g><title>mir_promoted (38,677,328 samples, 9.21%)</title><rect x="13.1893%" y="181" width="9.2149%" height="15" fill="rgb(241,131,45)"/><text x="13.4393%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,112,652 samples, 0.27%)</title><rect x="22.4052%" y="181" width="0.2651%" height="15" fill="rgb(249,31,29)"/><text x="22.6552%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (3,273,861 samples, 0.78%)</title><rect x="22.6703%" y="181" width="0.7800%" height="15" fill="rgb(225,111,53)"/><text x="22.9203%" y="191.50"></text></g><g><title>normalize_projection_ty (2,280,028 samples, 0.54%)</title><rect x="22.9071%" y="165" width="0.5432%" height="15" fill="rgb(238,160,17)"/><text x="23.1571%" y="175.50"></text></g><g><title>type_op_normalize_predicate (567,557 samples, 0.14%)</title><rect x="23.4503%" y="181" width="0.1352%" height="15" fill="rgb(214,148,48)"/><text x="23.7003%" y="191.50"></text></g><g><title>type_op_prove_predicate (7,443,211 samples, 1.77%)</title><rect x="23.6126%" y="181" width="1.7734%" height="15" fill="rgb(232,36,49)"/><text x="23.8626%" y="191.50">t..</text></g><g><title>evaluate_obligation (526,355 samples, 0.13%)</title><rect x="25.2605%" y="165" width="0.1254%" height="15" fill="rgb(209,103,24)"/><text x="25.5105%" y="175.50"></text></g><g><title>MIR_borrow_checking (104,539,908 samples, 24.91%)</title><rect x="0.4822%" y="213" width="24.9068%" height="15" fill="rgb(229,88,8)"/><text x="0.7322%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (103,930,110 samples, 24.76%)</title><rect x="0.6275%" y="197" width="24.7615%" height="15" fill="rgb(213,181,19)"/><text x="0.8775%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,464,346 samples, 0.35%)</title><rect x="25.3890%" y="213" width="0.3489%" height="15" fill="rgb(254,191,54)"/><text x="25.6390%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,182,546 samples, 0.28%)</title><rect x="25.4561%" y="197" width="0.2817%" height="15" fill="rgb(241,83,37)"/><text x="25.7061%" y="207.50"></text></g><g><title>hir_module_items (750,727 samples, 0.18%)</title><rect x="25.7378%" y="213" width="0.1789%" height="15" fill="rgb(233,36,39)"/><text x="25.9878%" y="223.50"></text></g><g><title>should_inherit_track_caller (441,654 samples, 0.11%)</title><rect x="26.2363%" y="165" width="0.1052%" height="15" fill="rgb(226,3,54)"/><text x="26.4863%" y="175.50"></text></g><g><title>codegen_fn_attrs (801,587 samples, 0.19%)</title><rect x="26.1554%" y="181" width="0.1910%" height="15" fill="rgb(245,192,40)"/><text x="26.4054%" y="191.50"></text></g><g><title>check_mod_attrs (1,746,508 samples, 0.42%)</title><rect x="25.9303%" y="197" width="0.4161%" height="15" fill="rgb(238,167,29)"/><text x="26.1803%" y="207.50"></text></g><g><title>check_mod_const_bodies (483,881 samples, 0.12%)</title><rect x="26.3464%" y="197" width="0.1153%" height="15" fill="rgb(232,182,51)"/><text x="26.5964%" y="207.50"></text></g><g><title>lint_levels (616,477 samples, 0.15%)</title><rect x="26.6565%" y="181" width="0.1469%" height="15" fill="rgb(231,60,39)"/><text x="26.9065%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (1,648,681 samples, 0.39%)</title><rect x="26.5406%" y="197" width="0.3928%" height="15" fill="rgb(208,69,12)"/><text x="26.7906%" y="207.50"></text></g><g><title>misc_checking_1 (4,446,040 samples, 1.06%)</title><rect x="25.9169%" y="213" width="1.0593%" height="15" fill="rgb(235,93,37)"/><text x="26.1669%" y="223.50"></text></g><g><title>check_mod_intrinsics (429,265 samples, 0.10%)</title><rect x="26.9821%" y="181" width="0.1023%" height="15" fill="rgb(213,116,39)"/><text x="27.2321%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,078,783 samples, 0.50%)</title><rect x="26.9766%" y="197" width="0.4953%" height="15" fill="rgb(222,207,29)"/><text x="27.2266%" y="207.50"></text></g><g><title>check_mod_liveness (1,626,598 samples, 0.39%)</title><rect x="27.0843%" y="181" width="0.3875%" height="15" fill="rgb(206,96,30)"/><text x="27.3343%" y="191.50"></text></g><g><title>misc_checking_2 (4,606,591 samples, 1.10%)</title><rect x="26.9762%" y="213" width="1.0975%" height="15" fill="rgb(218,138,4)"/><text x="27.2262%" y="223.50"></text></g><g><title>match_checking (2,525,938 samples, 0.60%)</title><rect x="27.4719%" y="197" width="0.6018%" height="15" fill="rgb(250,191,14)"/><text x="27.7219%" y="207.50"></text></g><g><title>check_match (2,375,367 samples, 0.57%)</title><rect x="27.5077%" y="181" width="0.5659%" height="15" fill="rgb(239,60,40)"/><text x="27.7577%" y="191.50"></text></g><g><title>check_private_in_public (817,769 samples, 0.19%)</title><rect x="28.0763%" y="197" width="0.1948%" height="15" fill="rgb(206,27,48)"/><text x="28.3263%" y="207.50"></text></g><g><title>death_checking (1,805,450 samples, 0.43%)</title><rect x="28.2711%" y="197" width="0.4302%" height="15" fill="rgb(225,35,8)"/><text x="28.5211%" y="207.50"></text></g><g><title>mir_for_ctfe (428,054 samples, 0.10%)</title><rect x="29.4786%" y="117" width="0.1020%" height="15" fill="rgb(250,213,24)"/><text x="29.7286%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,563,366 samples, 0.37%)</title><rect x="29.2310%" y="165" width="0.3725%" height="15" fill="rgb(247,123,22)"/><text x="29.4810%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,506,656 samples, 0.36%)</title><rect x="29.2445%" y="149" width="0.3590%" height="15" fill="rgb(231,138,38)"/><text x="29.4945%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,444,306 samples, 0.34%)</title><rect x="29.2594%" y="133" width="0.3441%" height="15" fill="rgb(231,145,46)"/><text x="29.5094%" y="143.50"></text></g><g><title>param_env (1,216,292 samples, 0.29%)</title><rect x="29.6035%" y="165" width="0.2898%" height="15" fill="rgb(251,118,11)"/><text x="29.8535%" y="175.50"></text></g><g><title>predicates_of (620,457 samples, 0.15%)</title><rect x="29.7454%" y="149" width="0.1478%" height="15" fill="rgb(217,147,25)"/><text x="29.9954%" y="159.50"></text></g><g><title>predicates_defined_on (472,236 samples, 0.11%)</title><rect x="29.7807%" y="133" width="0.1125%" height="15" fill="rgb(247,81,37)"/><text x="30.0307%" y="143.50"></text></g><g><title>crate_lints (6,197,398 samples, 1.48%)</title><rect x="28.7019%" y="181" width="1.4765%" height="15" fill="rgb(209,12,38)"/><text x="28.9519%" y="191.50"></text></g><g><title>type_of (1,170,443 samples, 0.28%)</title><rect x="29.8996%" y="165" width="0.2789%" height="15" fill="rgb(227,1,9)"/><text x="30.1496%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (941,889 samples, 0.22%)</title><rect x="29.9541%" y="149" width="0.2244%" height="15" fill="rgb(248,47,43)"/><text x="30.2041%" y="159.50"></text></g><g><title>lint_checking (8,670,566 samples, 2.07%)</title><rect x="28.7012%" y="197" width="2.0658%" height="15" fill="rgb(221,10,30)"/><text x="28.9512%" y="207.50">l..</text></g><g><title>module_lints (2,470,298 samples, 0.59%)</title><rect x="30.1785%" y="181" width="0.5886%" height="15" fill="rgb(210,229,1)"/><text x="30.4285%" y="191.50"></text></g><g><title>lint_mod (2,449,856 samples, 0.58%)</title><rect x="30.1833%" y="165" width="0.5837%" height="15" fill="rgb(222,148,37)"/><text x="30.4333%" y="175.50"></text></g><g><title>privacy_access_levels (794,039 samples, 0.19%)</title><rect x="30.7670%" y="197" width="0.1892%" height="15" fill="rgb(234,67,33)"/><text x="31.0170%" y="207.50"></text></g><g><title>privacy_checking_modules (3,112,025 samples, 0.74%)</title><rect x="30.9562%" y="197" width="0.7414%" height="15" fill="rgb(247,98,35)"/><text x="31.2062%" y="207.50"></text></g><g><title>check_mod_privacy (3,097,535 samples, 0.74%)</title><rect x="30.9597%" y="181" width="0.7380%" height="15" fill="rgb(247,138,52)"/><text x="31.2097%" y="191.50"></text></g><g><title>misc_checking_3 (15,239,850 samples, 3.63%)</title><rect x="28.0737%" y="213" width="3.6309%" height="15" fill="rgb(213,79,30)"/><text x="28.3237%" y="223.50">misc..</text></g><g><title>impl_trait_ref (505,615 samples, 0.12%)</title><rect x="31.8333%" y="117" width="0.1205%" height="15" fill="rgb(246,177,23)"/><text x="32.0833%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (486,685 samples, 0.12%)</title><rect x="31.8378%" y="101" width="0.1160%" height="15" fill="rgb(230,62,27)"/><text x="32.0878%" y="111.50"></text></g><g><title>adt_destructor (665,767 samples, 0.16%)</title><rect x="31.8012%" y="165" width="0.1586%" height="15" fill="rgb(216,154,8)"/><text x="32.0512%" y="175.50"></text></g><g><title>coherent_trait (660,587 samples, 0.16%)</title><rect x="31.8024%" y="149" width="0.1574%" height="15" fill="rgb(244,35,45)"/><text x="32.0524%" y="159.50"></text></g><g><title>specialization_graph_of (658,597 samples, 0.16%)</title><rect x="31.8029%" y="133" width="0.1569%" height="15" fill="rgb(251,115,12)"/><text x="32.0529%" y="143.50"></text></g><g><title>impl_parent (2,867,293 samples, 0.68%)</title><rect x="33.1542%" y="149" width="0.6831%" height="15" fill="rgb(240,54,50)"/><text x="33.4042%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,678,678 samples, 0.40%)</title><rect x="33.4374%" y="133" width="0.3999%" height="15" fill="rgb(233,84,52)"/><text x="33.6874%" y="143.50"></text></g><g><title>impl_trait_ref (6,145,051 samples, 1.46%)</title><rect x="33.8373%" y="149" width="1.4641%" height="15" fill="rgb(207,117,47)"/><text x="34.0873%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,711,422 samples, 1.12%)</title><rect x="34.1789%" y="133" width="1.1225%" height="15" fill="rgb(249,43,39)"/><text x="34.4289%" y="143.50"></text></g><g><title>trait_impls_of (1,148,455 samples, 0.27%)</title><rect x="35.3068%" y="149" width="0.2736%" height="15" fill="rgb(209,38,44)"/><text x="35.5568%" y="159.50"></text></g><g><title>implementations_of_trait (453,417 samples, 0.11%)</title><rect x="35.4724%" y="133" width="0.1080%" height="15" fill="rgb(236,212,23)"/><text x="35.7224%" y="143.50"></text></g><g><title>coherent_trait (15,932,719 samples, 3.80%)</title><rect x="31.7847%" y="181" width="3.7960%" height="15" fill="rgb(242,79,21)"/><text x="32.0347%" y="191.50">cohe..</text></g><g><title>specialization_graph_of (15,057,808 samples, 3.59%)</title><rect x="31.9931%" y="165" width="3.5875%" height="15" fill="rgb(211,96,35)"/><text x="32.2431%" y="175.50">spec..</text></g><g><title>coherence_checking (16,106,080 samples, 3.84%)</title><rect x="31.7768%" y="197" width="3.8373%" height="15" fill="rgb(253,215,40)"/><text x="32.0268%" y="207.50">cohe..</text></g><g><title>associated_item (961,676 samples, 0.23%)</title><rect x="57.0960%" y="133" width="0.2291%" height="15" fill="rgb(211,81,21)"/><text x="57.3460%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (777,785 samples, 0.19%)</title><rect x="57.1398%" y="117" width="0.1853%" height="15" fill="rgb(208,190,38)"/><text x="57.3898%" y="127.50"></text></g><g><title>associated_items (1,363,522 samples, 0.32%)</title><rect x="57.0188%" y="149" width="0.3249%" height="15" fill="rgb(235,213,38)"/><text x="57.2688%" y="159.50"></text></g><g><title>dropck_outlives (906,451 samples, 0.22%)</title><rect x="57.3840%" y="149" width="0.2160%" height="15" fill="rgb(237,122,38)"/><text x="57.6340%" y="159.50"></text></g><g><title>mir_borrowck (459,624 samples, 0.11%)</title><rect x="57.8809%" y="69" width="0.1095%" height="15" fill="rgb(244,218,35)"/><text x="58.1309%" y="79.50"></text></g><g><title>mir_for_ctfe (720,647 samples, 0.17%)</title><rect x="57.8192%" y="101" width="0.1717%" height="15" fill="rgb(240,68,47)"/><text x="58.0692%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (629,996 samples, 0.15%)</title><rect x="57.8408%" y="85" width="0.1501%" height="15" fill="rgb(210,16,53)"/><text x="58.0908%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,651,009 samples, 0.39%)</title><rect x="57.6000%" y="149" width="0.3934%" height="15" fill="rgb(235,124,12)"/><text x="57.8500%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,304,646 samples, 0.31%)</title><rect x="57.6825%" y="133" width="0.3108%" height="15" fill="rgb(224,169,11)"/><text x="57.9325%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,282,055 samples, 0.31%)</title><rect x="57.6879%" y="117" width="0.3055%" height="15" fill="rgb(250,166,2)"/><text x="57.9379%" y="127.50"></text></g><g><title>generics_of (1,607,721 samples, 0.38%)</title><rect x="60.1527%" y="133" width="0.3830%" height="15" fill="rgb(242,216,29)"/><text x="60.4027%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (1,250,336 samples, 0.30%)</title><rect x="60.2379%" y="117" width="0.2979%" height="15" fill="rgb(230,116,27)"/><text x="60.4879%" y="127.50"></text></g><g><title>impl_trait_ref (803,654 samples, 0.19%)</title><rect x="60.6154%" y="133" width="0.1915%" height="15" fill="rgb(228,99,48)"/><text x="60.8654%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (635,663 samples, 0.15%)</title><rect x="60.6554%" y="117" width="0.1514%" height="15" fill="rgb(253,11,6)"/><text x="60.9054%" y="127.50"></text></g><g><title>predicates_of (1,222,905 samples, 0.29%)</title><rect x="60.8202%" y="133" width="0.2914%" height="15" fill="rgb(247,143,39)"/><text x="61.0702%" y="143.50"></text></g><g><title>predicates_defined_on (568,746 samples, 0.14%)</title><rect x="60.9760%" y="117" width="0.1355%" height="15" fill="rgb(236,97,10)"/><text x="61.2260%" y="127.50"></text></g><g><title>specializes (2,154,870 samples, 0.51%)</title><rect x="61.1115%" y="133" width="0.5134%" height="15" fill="rgb(233,208,19)"/><text x="61.3615%" y="143.50"></text></g><g><title>param_env (1,204,472 samples, 0.29%)</title><rect x="61.3380%" y="117" width="0.2870%" height="15" fill="rgb(216,164,2)"/><text x="61.5880%" y="127.50"></text></g><g><title>def_span (495,845 samples, 0.12%)</title><rect x="61.5068%" y="101" width="0.1181%" height="15" fill="rgb(220,129,5)"/><text x="61.7568%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (436,313 samples, 0.10%)</title><rect x="61.5210%" y="85" width="0.1040%" height="15" fill="rgb(242,17,10)"/><text x="61.7710%" y="95.50"></text></g><g><title>trait_impls_of (628,114 samples, 0.15%)</title><rect x="61.6307%" y="133" width="0.1496%" height="15" fill="rgb(242,107,0)"/><text x="61.8807%" y="143.50"></text></g><g><title>evaluate_obligation (15,942,252 samples, 3.80%)</title><rect x="57.9933%" y="149" width="3.7983%" height="15" fill="rgb(251,28,31)"/><text x="58.2433%" y="159.50">eval..</text></g><g><title>evaluate_obligation (587,886 samples, 0.14%)</title><rect x="62.3034%" y="133" width="0.1401%" height="15" fill="rgb(233,223,10)"/><text x="62.5534%" y="143.50"></text></g><g><title>method_autoderef_steps (1,203,946 samples, 0.29%)</title><rect x="62.1592%" y="149" width="0.2868%" height="15" fill="rgb(215,21,27)"/><text x="62.4092%" y="159.50"></text></g><g><title>predicates_of (628,228 samples, 0.15%)</title><rect x="62.5894%" y="149" width="0.1497%" height="15" fill="rgb(232,23,21)"/><text x="62.8394%" y="159.50"></text></g><g><title>predicates_defined_on (437,898 samples, 0.10%)</title><rect x="62.6347%" y="133" width="0.1043%" height="15" fill="rgb(244,5,23)"/><text x="62.8847%" y="143.50"></text></g><g><title>evaluate_obligation (1,665,484 samples, 0.40%)</title><rect x="66.3760%" y="133" width="0.3968%" height="15" fill="rgb(226,81,46)"/><text x="66.6260%" y="143.50"></text></g><g><title>generics_of (887,668 samples, 0.21%)</title><rect x="66.7858%" y="133" width="0.2115%" height="15" fill="rgb(247,70,30)"/><text x="67.0358%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (659,086 samples, 0.16%)</title><rect x="66.8403%" y="117" width="0.1570%" height="15" fill="rgb(212,68,19)"/><text x="67.0903%" y="127.50"></text></g><g><title>method_autoderef_steps (421,704 samples, 0.10%)</title><rect x="67.1005%" y="133" width="0.1005%" height="15" fill="rgb(240,187,13)"/><text x="67.3505%" y="143.50"></text></g><g><title>typeck (18,748,569 samples, 4.47%)</title><rect x="62.8200%" y="149" width="4.4669%" height="15" fill="rgb(223,113,26)"/><text x="63.0700%" y="159.50">typeck</text></g><g><title>item_bodies_checking (132,966,815 samples, 31.68%)</title><rect x="35.6465%" y="197" width="31.6795%" height="15" fill="rgb(206,192,2)"/><text x="35.8965%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (132,963,085 samples, 31.68%)</title><rect x="35.6474%" y="181" width="31.6786%" height="15" fill="rgb(241,108,4)"/><text x="35.8974%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (132,571,497 samples, 31.59%)</title><rect x="35.7407%" y="165" width="31.5853%" height="15" fill="rgb(247,173,49)"/><text x="35.9907%" y="175.50">typeck</text></g><g><title>evaluate_obligation (1,611,648 samples, 0.38%)</title><rect x="68.4716%" y="149" width="0.3840%" height="15" fill="rgb(224,114,35)"/><text x="68.7216%" y="159.50"></text></g><g><title>item_types_checking (6,566,913 samples, 1.56%)</title><rect x="67.3260%" y="197" width="1.5646%" height="15" fill="rgb(245,159,27)"/><text x="67.5760%" y="207.50"></text></g><g><title>check_mod_item_types (6,545,963 samples, 1.56%)</title><rect x="67.3310%" y="181" width="1.5596%" height="15" fill="rgb(245,172,44)"/><text x="67.5810%" y="191.50"></text></g><g><title>typeck (4,247,858 samples, 1.01%)</title><rect x="67.8785%" y="165" width="1.0121%" height="15" fill="rgb(236,23,11)"/><text x="68.1285%" y="175.50"></text></g><g><title>mir_borrowck (767,169 samples, 0.18%)</title><rect x="69.4118%" y="85" width="0.1828%" height="15" fill="rgb(205,117,38)"/><text x="69.6618%" y="95.50"></text></g><g><title>mir_for_ctfe (1,097,993 samples, 0.26%)</title><rect x="69.3337%" y="117" width="0.2616%" height="15" fill="rgb(237,72,25)"/><text x="69.5837%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,006,982 samples, 0.24%)</title><rect x="69.3553%" y="101" width="0.2399%" height="15" fill="rgb(244,70,9)"/><text x="69.6053%" y="111.50"></text></g><g><title>generics_of (472,763 samples, 0.11%)</title><rect x="70.4459%" y="85" width="0.1126%" height="15" fill="rgb(217,125,39)"/><text x="70.6959%" y="95.50"></text></g><g><title>impl_trait_ref (705,899 samples, 0.17%)</title><rect x="70.5858%" y="85" width="0.1682%" height="15" fill="rgb(235,36,10)"/><text x="70.8358%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (562,297 samples, 0.13%)</title><rect x="70.6200%" y="69" width="0.1340%" height="15" fill="rgb(251,123,47)"/><text x="70.8700%" y="79.50"></text></g><g><title>predicates_of (585,345 samples, 0.14%)</title><rect x="70.7622%" y="85" width="0.1395%" height="15" fill="rgb(221,13,13)"/><text x="71.0122%" y="95.50"></text></g><g><title>specializes (1,872,662 samples, 0.45%)</title><rect x="70.9016%" y="85" width="0.4462%" height="15" fill="rgb(238,131,9)"/><text x="71.1516%" y="95.50"></text></g><g><title>param_env (1,113,772 samples, 0.27%)</title><rect x="71.0824%" y="69" width="0.2654%" height="15" fill="rgb(211,50,8)"/><text x="71.3324%" y="79.50"></text></g><g><title>def_span (525,627 samples, 0.13%)</title><rect x="71.2226%" y="53" width="0.1252%" height="15" fill="rgb(245,182,24)"/><text x="71.4726%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (469,177 samples, 0.11%)</title><rect x="71.2360%" y="37" width="0.1118%" height="15" fill="rgb(242,14,37)"/><text x="71.4860%" y="47.50"></text></g><g><title>evaluate_obligation (6,061,097 samples, 1.44%)</title><rect x="69.9221%" y="101" width="1.4441%" height="15" fill="rgb(246,228,12)"/><text x="70.1721%" y="111.50"></text></g><g><title>eval_to_const_value_raw (9,647,846 samples, 2.30%)</title><rect x="69.1530%" y="165" width="2.2986%" height="15" fill="rgb(213,55,15)"/><text x="69.4030%" y="175.50">e..</text></g><g><title>eval_to_const_value_raw (9,633,166 samples, 2.30%)</title><rect x="69.1565%" y="149" width="2.2951%" height="15" fill="rgb(209,9,3)"/><text x="69.4065%" y="159.50">e..</text></g><g><title>eval_to_allocation_raw (9,615,416 samples, 2.29%)</title><rect x="69.1607%" y="133" width="2.2909%" height="15" fill="rgb(230,59,30)"/><text x="69.4107%" y="143.50">e..</text></g><g><title>typeck (7,789,747 samples, 1.86%)</title><rect x="69.5957%" y="117" width="1.8559%" height="15" fill="rgb(209,121,21)"/><text x="69.8457%" y="127.50">t..</text></g><g><title>fn_sig (1,058,688 samples, 0.25%)</title><rect x="71.4516%" y="165" width="0.2522%" height="15" fill="rgb(220,109,13)"/><text x="71.7016%" y="175.50"></text></g><g><title>named_region_map (963,010 samples, 0.23%)</title><rect x="71.8328%" y="149" width="0.2294%" height="15" fill="rgb(232,18,1)"/><text x="72.0828%" y="159.50"></text></g><g><title>resolve_lifetimes (881,350 samples, 0.21%)</title><rect x="71.8522%" y="133" width="0.2100%" height="15" fill="rgb(215,41,42)"/><text x="72.1022%" y="143.50"></text></g><g><title>generics_of (1,548,417 samples, 0.37%)</title><rect x="71.7038%" y="165" width="0.3689%" height="15" fill="rgb(224,123,36)"/><text x="71.9538%" y="175.50"></text></g><g><title>explicit_predicates_of (608,456 samples, 0.14%)</title><rect x="72.2840%" y="133" width="0.1450%" height="15" fill="rgb(240,125,3)"/><text x="72.5340%" y="143.50"></text></g><g><title>predicates_of (1,643,472 samples, 0.39%)</title><rect x="72.1465%" y="165" width="0.3916%" height="15" fill="rgb(205,98,50)"/><text x="72.3965%" y="175.50"></text></g><g><title>predicates_defined_on (1,424,028 samples, 0.34%)</title><rect x="72.1988%" y="149" width="0.3393%" height="15" fill="rgb(205,185,37)"/><text x="72.4488%" y="159.50"></text></g><g><title>inferred_outlives_of (457,935 samples, 0.11%)</title><rect x="72.4290%" y="133" width="0.1091%" height="15" fill="rgb(238,207,15)"/><text x="72.6790%" y="143.50"></text></g><g><title>type_collecting (15,546,173 samples, 3.70%)</title><rect x="68.8928%" y="197" width="3.7039%" height="15" fill="rgb(213,199,42)"/><text x="69.1428%" y="207.50">type..</text></g><g><title>collect_mod_item_types (15,522,563 samples, 3.70%)</title><rect x="68.8984%" y="181" width="3.6983%" height="15" fill="rgb(235,201,11)"/><text x="69.1484%" y="191.50">coll..</text></g><g><title>evaluate_obligation (1,016,140 samples, 0.24%)</title><rect x="73.8580%" y="165" width="0.2421%" height="15" fill="rgb(207,46,11)"/><text x="74.1080%" y="175.50"></text></g><g><title>param_env (680,311 samples, 0.16%)</title><rect x="74.1862%" y="165" width="0.1621%" height="15" fill="rgb(241,35,35)"/><text x="74.4362%" y="175.50"></text></g><g><title>region_scope_tree (995,590 samples, 0.24%)</title><rect x="74.3568%" y="165" width="0.2372%" height="15" fill="rgb(243,32,47)"/><text x="74.6068%" y="175.50"></text></g><g><title>check_impl_item_well_formed (7,650,913 samples, 1.82%)</title><rect x="72.7790%" y="181" width="1.8228%" height="15" fill="rgb(247,202,23)"/><text x="73.0290%" y="191.50">c..</text></g><g><title>mir_borrowck (836,740 samples, 0.20%)</title><rect x="75.8469%" y="85" width="0.1994%" height="15" fill="rgb(219,102,11)"/><text x="76.0969%" y="95.50"></text></g><g><title>mir_for_ctfe (1,225,752 samples, 0.29%)</title><rect x="75.7552%" y="117" width="0.2920%" height="15" fill="rgb(243,110,44)"/><text x="76.0052%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,117,772 samples, 0.27%)</title><rect x="75.7810%" y="101" width="0.2663%" height="15" fill="rgb(222,74,54)"/><text x="76.0310%" y="111.50"></text></g><g><title>mir_for_ctfe (454,294 samples, 0.11%)</title><rect x="76.1180%" y="53" width="0.1082%" height="15" fill="rgb(216,99,12)"/><text x="76.3680%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,044,513 samples, 0.25%)</title><rect x="76.0550%" y="101" width="0.2489%" height="15" fill="rgb(226,22,26)"/><text x="76.3050%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,036,823 samples, 0.25%)</title><rect x="76.0568%" y="85" width="0.2470%" height="15" fill="rgb(217,163,10)"/><text x="76.3068%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,022,572 samples, 0.24%)</title><rect x="76.0602%" y="69" width="0.2436%" height="15" fill="rgb(213,25,53)"/><text x="76.3102%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,089,224 samples, 0.26%)</title><rect x="76.0478%" y="117" width="0.2595%" height="15" fill="rgb(252,105,26)"/><text x="76.2978%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,611,679 samples, 0.86%)</title><rect x="75.6212%" y="165" width="0.8605%" height="15" fill="rgb(220,39,43)"/><text x="75.8712%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,602,219 samples, 0.86%)</title><rect x="75.6235%" y="149" width="0.8582%" height="15" fill="rgb(229,68,48)"/><text x="75.8735%" y="159.50"></text></g><g><title>eval_to_allocation_raw (3,586,229 samples, 0.85%)</title><rect x="75.6273%" y="133" width="0.8544%" height="15" fill="rgb(252,8,32)"/><text x="75.8773%" y="143.50"></text></g><g><title>typeck (731,807 samples, 0.17%)</title><rect x="76.3073%" y="117" width="0.1744%" height="15" fill="rgb(223,20,43)"/><text x="76.5573%" y="127.50"></text></g><g><title>evaluate_obligation (1,164,635 samples, 0.28%)</title><rect x="76.4817%" y="165" width="0.2775%" height="15" fill="rgb(229,81,49)"/><text x="76.7317%" y="175.50"></text></g><g><title>param_env (968,969 samples, 0.23%)</title><rect x="76.8430%" y="165" width="0.2309%" height="15" fill="rgb(236,28,36)"/><text x="77.0930%" y="175.50"></text></g><g><title>region_scope_tree (1,078,560 samples, 0.26%)</title><rect x="77.1063%" y="165" width="0.2570%" height="15" fill="rgb(249,185,26)"/><text x="77.3563%" y="175.50"></text></g><g><title>check_item_well_formed (11,886,109 samples, 2.83%)</title><rect x="74.6018%" y="181" width="2.8319%" height="15" fill="rgb(249,174,33)"/><text x="74.8518%" y="191.50">ch..</text></g><g><title>analysis (324,231,080 samples, 77.25%)</title><rect x="0.2288%" y="229" width="77.2484%" height="15" fill="rgb(233,201,37)"/><text x="0.4788%" y="239.50">analysis</text></g><g><title>type_check_crate (192,119,315 samples, 45.77%)</title><rect x="31.7046%" y="213" width="45.7726%" height="15" fill="rgb(221,78,26)"/><text x="31.9546%" y="223.50">type_check_crate</text></g><g><title>wf_checking (20,452,169 samples, 4.87%)</title><rect x="72.6045%" y="197" width="4.8728%" height="15" fill="rgb(250,127,30)"/><text x="72.8545%" y="207.50">wf_che..</text></g><g><title>codegen_crate (431,624 samples, 0.10%)</title><rect x="77.4800%" y="229" width="0.1028%" height="15" fill="rgb(230,49,44)"/><text x="77.7300%" y="239.50"></text></g><g><title>metadata_register_crate (1,280,314 samples, 0.31%)</title><rect x="89.9617%" y="181" width="0.3050%" height="15" fill="rgb(229,67,23)"/><text x="90.2117%" y="191.50"></text></g><g><title>metadata_register_crate (458,696 samples, 0.11%)</title><rect x="90.1574%" y="165" width="0.1093%" height="15" fill="rgb(249,83,47)"/><text x="90.4074%" y="175.50"></text></g><g><title>macro_expand_crate (54,213,625 samples, 12.92%)</title><rect x="77.8074%" y="213" width="12.9165%" height="15" fill="rgb(215,43,3)"/><text x="78.0574%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (54,192,644 samples, 12.91%)</title><rect x="77.8124%" y="197" width="12.9115%" height="15" fill="rgb(238,154,13)"/><text x="78.0624%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,918,741 samples, 0.46%)</title><rect x="90.2667%" y="181" width="0.4571%" height="15" fill="rgb(219,56,2)"/><text x="90.5167%" y="191.50"></text></g><g><title>late_resolve_crate (6,078,788 samples, 1.45%)</title><rect x="90.9041%" y="197" width="1.4483%" height="15" fill="rgb(233,0,4)"/><text x="91.1541%" y="207.50"></text></g><g><title>configure_and_expand (62,473,637 samples, 14.88%)</title><rect x="77.5828%" y="229" width="14.8844%" height="15" fill="rgb(235,30,7)"/><text x="77.8328%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (7,080,429 samples, 1.69%)</title><rect x="90.7803%" y="213" width="1.6869%" height="15" fill="rgb(250,79,13)"/><text x="91.0303%" y="223.50"></text></g><g><title>drop_ast (983,561 samples, 0.23%)</title><rect x="92.4673%" y="229" width="0.2343%" height="15" fill="rgb(211,146,34)"/><text x="92.7173%" y="239.50"></text></g><g><title>early_lint_checks (1,748,319 samples, 0.42%)</title><rect x="92.7059%" y="229" width="0.4165%" height="15" fill="rgb(228,22,38)"/><text x="92.9559%" y="239.50"></text></g><g><title>free_global_ctxt (6,297,411 samples, 1.50%)</title><rect x="93.1224%" y="229" width="1.5004%" height="15" fill="rgb(235,168,5)"/><text x="93.3724%" y="239.50"></text></g><g><title>generate_crate_metadata (4,626,262 samples, 1.10%)</title><rect x="94.6228%" y="229" width="1.1022%" height="15" fill="rgb(221,155,16)"/><text x="94.8728%" y="239.50"></text></g><g><title>hir_lowering (11,448,328 samples, 2.73%)</title><rect x="95.7250%" y="229" width="2.7276%" height="15" fill="rgb(215,215,53)"/><text x="95.9750%" y="239.50">hi..</text></g><g><title>parse_crate (3,526,289 samples, 0.84%)</title><rect x="98.4688%" y="229" width="0.8401%" height="15" fill="rgb(223,4,10)"/><text x="98.7188%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,991,682 samples, 0.47%)</title><rect x="99.3716%" y="229" width="0.4745%" height="15" fill="rgb(234,103,6)"/><text x="99.6216%" y="239.50"></text></g><g><title>all (419,725,166 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (419,725,166 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (513,956 samples, 0.12%)</title><rect x="99.8775%" y="229" width="0.1225%" height="15" fill="rgb(228,201,54)"/><text x="100.1275%" y="239.50"></text></g></svg></svg>