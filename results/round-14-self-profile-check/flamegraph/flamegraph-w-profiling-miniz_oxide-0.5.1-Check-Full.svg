<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (568,119 samples, 0.11%)</title><rect x="15.4279%" y="213" width="0.1145%" height="15" fill="rgb(227,0,7)"/><text x="15.6779%" y="223.50"></text></g><g><title>item_attrs (524,984 samples, 0.11%)</title><rect x="16.0307%" y="181" width="0.1058%" height="15" fill="rgb(217,0,24)"/><text x="16.2807%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (508,304 samples, 0.10%)</title><rect x="16.0340%" y="165" width="0.1024%" height="15" fill="rgb(221,193,54)"/><text x="16.2840%" y="175.50"></text></g><g><title>codegen_fn_attrs (744,196 samples, 0.15%)</title><rect x="15.9941%" y="197" width="0.1500%" height="15" fill="rgb(248,212,6)"/><text x="16.2441%" y="207.50"></text></g><g><title>is_copy_raw (1,571,402 samples, 0.32%)</title><rect x="19.7713%" y="165" width="0.3167%" height="15" fill="rgb(208,68,35)"/><text x="20.0213%" y="175.50"></text></g><g><title>evaluate_obligation (1,247,347 samples, 0.25%)</title><rect x="19.8366%" y="149" width="0.2514%" height="15" fill="rgb(232,128,0)"/><text x="20.0866%" y="159.50"></text></g><g><title>needs_drop_raw (2,239,546 samples, 0.45%)</title><rect x="19.6427%" y="181" width="0.4514%" height="15" fill="rgb(207,160,47)"/><text x="19.8927%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (1,391,396 samples, 0.28%)</title><rect x="20.2339%" y="165" width="0.2804%" height="15" fill="rgb(228,23,34)"/><text x="20.4839%" y="175.50"></text></g><g><title>specialization_graph_of (1,126,373 samples, 0.23%)</title><rect x="20.5630%" y="165" width="0.2270%" height="15" fill="rgb(218,30,26)"/><text x="20.8130%" y="175.50"></text></g><g><title>resolve_instance (3,629,858 samples, 0.73%)</title><rect x="20.0940%" y="181" width="0.7316%" height="15" fill="rgb(220,122,19)"/><text x="20.3440%" y="191.50"></text></g><g><title>thir_body (7,202,969 samples, 1.45%)</title><rect x="20.8488%" y="181" width="1.4517%" height="15" fill="rgb(250,228,42)"/><text x="21.0988%" y="191.50"></text></g><g><title>mir_const (38,053,473 samples, 7.67%)</title><rect x="14.6450%" y="229" width="7.6694%" height="15" fill="rgb(240,193,28)"/><text x="14.8950%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (33,600,809 samples, 6.77%)</title><rect x="15.5424%" y="213" width="6.7720%" height="15" fill="rgb(216,20,37)"/><text x="15.7924%" y="223.50">unsafety_..</text></g><g><title>mir_built (30,615,425 samples, 6.17%)</title><rect x="16.1441%" y="197" width="6.1703%" height="15" fill="rgb(206,188,39)"/><text x="16.3941%" y="207.50">mir_built</text></g><g><title>thir_body (766,098 samples, 0.15%)</title><rect x="22.8538%" y="165" width="0.1544%" height="15" fill="rgb(217,207,13)"/><text x="23.1038%" y="175.50"></text></g><g><title>mir_const (2,692,731 samples, 0.54%)</title><rect x="22.4693%" y="213" width="0.5427%" height="15" fill="rgb(231,73,38)"/><text x="22.7193%" y="223.50"></text></g><g><title>unsafety_check_result (2,203,496 samples, 0.44%)</title><rect x="22.5679%" y="197" width="0.4441%" height="15" fill="rgb(225,20,46)"/><text x="22.8179%" y="207.50"></text></g><g><title>mir_built (2,024,936 samples, 0.41%)</title><rect x="22.6039%" y="181" width="0.4081%" height="15" fill="rgb(210,31,41)"/><text x="22.8539%" y="191.50"></text></g><g><title>mir_const_qualif (3,485,085 samples, 0.70%)</title><rect x="22.3143%" y="229" width="0.7024%" height="15" fill="rgb(221,200,47)"/><text x="22.5643%" y="239.50"></text></g><g><title>mir_promoted (45,677,343 samples, 9.21%)</title><rect x="13.8109%" y="245" width="9.2059%" height="15" fill="rgb(226,26,5)"/><text x="14.0609%" y="255.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (854,109 samples, 0.17%)</title><rect x="23.0179%" y="245" width="0.1721%" height="15" fill="rgb(249,33,26)"/><text x="23.2679%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (2,791,439 samples, 0.56%)</title><rect x="23.1901%" y="245" width="0.5626%" height="15" fill="rgb(235,183,28)"/><text x="23.4401%" y="255.50"></text></g><g><title>normalize_projection_ty (1,921,347 samples, 0.39%)</title><rect x="23.3654%" y="229" width="0.3872%" height="15" fill="rgb(221,5,38)"/><text x="23.6154%" y="239.50"></text></g><g><title>type_op_prove_predicate (5,918,119 samples, 1.19%)</title><rect x="23.8451%" y="245" width="1.1927%" height="15" fill="rgb(247,18,42)"/><text x="24.0951%" y="255.50"></text></g><g><title>evaluate_obligation (715,556 samples, 0.14%)</title><rect x="24.8936%" y="229" width="0.1442%" height="15" fill="rgb(241,131,45)"/><text x="25.1436%" y="239.50"></text></g><g><title>MIR_borrow_checking (121,713,532 samples, 24.53%)</title><rect x="0.5094%" y="277" width="24.5303%" height="15" fill="rgb(249,31,29)"/><text x="0.7594%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (121,147,219 samples, 24.42%)</title><rect x="0.6235%" y="261" width="24.4162%" height="15" fill="rgb(225,111,53)"/><text x="0.8735%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,308,954 samples, 0.26%)</title><rect x="25.0397%" y="277" width="0.2638%" height="15" fill="rgb(238,160,17)"/><text x="25.2897%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,008,502 samples, 0.20%)</title><rect x="25.1003%" y="261" width="0.2033%" height="15" fill="rgb(214,148,48)"/><text x="25.3503%" y="271.50"></text></g><g><title>hir_module_items (852,017 samples, 0.17%)</title><rect x="25.3035%" y="277" width="0.1717%" height="15" fill="rgb(232,36,49)"/><text x="25.5535%" y="287.50"></text></g><g><title>codegen_fn_attrs (719,789 samples, 0.15%)</title><rect x="25.7362%" y="245" width="0.1451%" height="15" fill="rgb(209,103,24)"/><text x="25.9862%" y="255.50"></text></g><g><title>should_inherit_track_caller (560,688 samples, 0.11%)</title><rect x="25.7683%" y="229" width="0.1130%" height="15" fill="rgb(229,88,8)"/><text x="26.0183%" y="239.50"></text></g><g><title>check_mod_attrs (1,974,402 samples, 0.40%)</title><rect x="25.4834%" y="261" width="0.3979%" height="15" fill="rgb(213,181,19)"/><text x="25.7334%" y="271.50"></text></g><g><title>check_mod_const_bodies (510,335 samples, 0.10%)</title><rect x="25.8813%" y="261" width="0.1029%" height="15" fill="rgb(254,191,54)"/><text x="26.1313%" y="271.50"></text></g><g><title>lint_levels (853,020 samples, 0.17%)</title><rect x="26.1695%" y="245" width="0.1719%" height="15" fill="rgb(241,83,37)"/><text x="26.4195%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (1,896,671 samples, 0.38%)</title><rect x="26.0657%" y="261" width="0.3823%" height="15" fill="rgb(233,36,39)"/><text x="26.3157%" y="271.50"></text></g><g><title>misc_checking_1 (4,976,366 samples, 1.00%)</title><rect x="25.4754%" y="277" width="1.0029%" height="15" fill="rgb(226,3,54)"/><text x="25.7254%" y="287.50"></text></g><g><title>check_mod_intrinsics (574,477 samples, 0.12%)</title><rect x="26.4818%" y="245" width="0.1158%" height="15" fill="rgb(245,192,40)"/><text x="26.7318%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (2,862,251 samples, 0.58%)</title><rect x="26.4787%" y="261" width="0.5769%" height="15" fill="rgb(238,167,29)"/><text x="26.7287%" y="271.50"></text></g><g><title>check_mod_liveness (2,272,573 samples, 0.46%)</title><rect x="26.5976%" y="245" width="0.4580%" height="15" fill="rgb(232,182,51)"/><text x="26.8476%" y="255.50"></text></g><g><title>misc_checking_2 (6,365,370 samples, 1.28%)</title><rect x="26.4783%" y="277" width="1.2829%" height="15" fill="rgb(231,60,39)"/><text x="26.7283%" y="287.50"></text></g><g><title>match_checking (3,501,159 samples, 0.71%)</title><rect x="27.0556%" y="261" width="0.7056%" height="15" fill="rgb(208,69,12)"/><text x="27.3056%" y="271.50"></text></g><g><title>check_match (3,331,425 samples, 0.67%)</title><rect x="27.0898%" y="245" width="0.6714%" height="15" fill="rgb(235,93,37)"/><text x="27.3398%" y="255.50"></text></g><g><title>check_private_in_public (796,909 samples, 0.16%)</title><rect x="27.7635%" y="261" width="0.1606%" height="15" fill="rgb(213,116,39)"/><text x="28.0135%" y="271.50"></text></g><g><title>death_checking (1,899,400 samples, 0.38%)</title><rect x="27.9241%" y="261" width="0.3828%" height="15" fill="rgb(222,207,29)"/><text x="28.1741%" y="271.50"></text></g><g><title>eval_to_const_value_raw (1,656,611 samples, 0.33%)</title><rect x="28.7664%" y="229" width="0.3339%" height="15" fill="rgb(206,96,30)"/><text x="29.0164%" y="239.50"></text></g><g><title>eval_to_const_value_raw (1,625,681 samples, 0.33%)</title><rect x="28.7726%" y="213" width="0.3276%" height="15" fill="rgb(218,138,4)"/><text x="29.0226%" y="223.50"></text></g><g><title>eval_to_allocation_raw (1,576,451 samples, 0.32%)</title><rect x="28.7826%" y="197" width="0.3177%" height="15" fill="rgb(250,191,14)"/><text x="29.0326%" y="207.50"></text></g><g><title>param_env (605,526 samples, 0.12%)</title><rect x="29.1003%" y="229" width="0.1220%" height="15" fill="rgb(239,60,40)"/><text x="29.3503%" y="239.50"></text></g><g><title>crate_lints (5,263,519 samples, 1.06%)</title><rect x="28.3073%" y="245" width="1.0608%" height="15" fill="rgb(206,27,48)"/><text x="28.5573%" y="255.50"></text></g><g><title>type_of (703,489 samples, 0.14%)</title><rect x="29.2263%" y="229" width="0.1418%" height="15" fill="rgb(225,35,8)"/><text x="29.4763%" y="239.50"></text></g><g><title>lint_checking (8,799,678 samples, 1.77%)</title><rect x="28.3069%" y="261" width="1.7735%" height="15" fill="rgb(250,213,24)"/><text x="28.5569%" y="271.50">l..</text></g><g><title>module_lints (3,533,989 samples, 0.71%)</title><rect x="29.3681%" y="245" width="0.7122%" height="15" fill="rgb(247,123,22)"/><text x="29.6181%" y="255.50"></text></g><g><title>lint_mod (3,519,428 samples, 0.71%)</title><rect x="29.3711%" y="229" width="0.7093%" height="15" fill="rgb(231,138,38)"/><text x="29.6211%" y="239.50"></text></g><g><title>privacy_access_levels (1,131,633 samples, 0.23%)</title><rect x="30.0804%" y="261" width="0.2281%" height="15" fill="rgb(231,145,46)"/><text x="30.3304%" y="271.50"></text></g><g><title>privacy_checking_modules (4,066,885 samples, 0.82%)</title><rect x="30.3084%" y="261" width="0.8196%" height="15" fill="rgb(251,118,11)"/><text x="30.5584%" y="271.50"></text></g><g><title>check_mod_privacy (4,057,945 samples, 0.82%)</title><rect x="30.3102%" y="245" width="0.8178%" height="15" fill="rgb(217,147,25)"/><text x="30.5602%" y="255.50"></text></g><g><title>misc_checking_3 (16,746,676 samples, 3.38%)</title><rect x="27.7612%" y="277" width="3.3752%" height="15" fill="rgb(247,81,37)"/><text x="28.0112%" y="287.50">mis..</text></g><g><title>impl_parent (1,004,799 samples, 0.20%)</title><rect x="31.5919%" y="213" width="0.2025%" height="15" fill="rgb(209,12,38)"/><text x="31.8419%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (573,505 samples, 0.12%)</title><rect x="31.6788%" y="197" width="0.1156%" height="15" fill="rgb(227,1,9)"/><text x="31.9288%" y="207.50"></text></g><g><title>impl_trait_ref (2,047,791 samples, 0.41%)</title><rect x="31.7944%" y="213" width="0.4127%" height="15" fill="rgb(248,47,43)"/><text x="32.0444%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,622,197 samples, 0.33%)</title><rect x="31.8802%" y="197" width="0.3269%" height="15" fill="rgb(221,10,30)"/><text x="32.1302%" y="207.50"></text></g><g><title>coherent_trait (5,367,609 samples, 1.08%)</title><rect x="31.1967%" y="245" width="1.0818%" height="15" fill="rgb(210,229,1)"/><text x="31.4467%" y="255.50"></text></g><g><title>specialization_graph_of (4,954,365 samples, 1.00%)</title><rect x="31.2800%" y="229" width="0.9985%" height="15" fill="rgb(222,148,37)"/><text x="31.5300%" y="239.50"></text></g><g><title>coherence_checking (5,502,461 samples, 1.11%)</title><rect x="31.1924%" y="261" width="1.1090%" height="15" fill="rgb(234,67,33)"/><text x="31.4424%" y="271.50"></text></g><g><title>associated_item (987,681 samples, 0.20%)</title><rect x="51.5005%" y="197" width="0.1991%" height="15" fill="rgb(247,98,35)"/><text x="51.7505%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (785,621 samples, 0.16%)</title><rect x="51.5413%" y="181" width="0.1583%" height="15" fill="rgb(247,138,52)"/><text x="51.7913%" y="191.50"></text></g><g><title>associated_items (1,415,325 samples, 0.29%)</title><rect x="51.4294%" y="213" width="0.2852%" height="15" fill="rgb(213,79,30)"/><text x="51.6794%" y="223.50"></text></g><g><title>dropck_outlives (654,231 samples, 0.13%)</title><rect x="51.7397%" y="213" width="0.1319%" height="15" fill="rgb(246,177,23)"/><text x="51.9897%" y="223.50"></text></g><g><title>eval_to_allocation_raw (807,408 samples, 0.16%)</title><rect x="51.8810%" y="197" width="0.1627%" height="15" fill="rgb(230,62,27)"/><text x="52.1310%" y="207.50"></text></g><g><title>mir_const_qualif (633,715 samples, 0.13%)</title><rect x="52.1860%" y="165" width="0.1277%" height="15" fill="rgb(216,154,8)"/><text x="52.4360%" y="175.50"></text></g><g><title>mir_const (524,534 samples, 0.11%)</title><rect x="52.2080%" y="149" width="0.1057%" height="15" fill="rgb(244,35,45)"/><text x="52.4580%" y="159.50"></text></g><g><title>mir_borrowck (1,385,217 samples, 0.28%)</title><rect x="52.4640%" y="133" width="0.2792%" height="15" fill="rgb(251,115,12)"/><text x="52.7140%" y="143.50"></text></g><g><title>mir_for_ctfe (2,137,394 samples, 0.43%)</title><rect x="52.3137%" y="165" width="0.4308%" height="15" fill="rgb(240,54,50)"/><text x="52.5637%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,895,391 samples, 0.38%)</title><rect x="52.3625%" y="149" width="0.3820%" height="15" fill="rgb(233,84,52)"/><text x="52.6125%" y="159.50"></text></g><g><title>eval_to_const_value_raw (4,344,876 samples, 0.88%)</title><rect x="51.8721%" y="213" width="0.8757%" height="15" fill="rgb(207,117,47)"/><text x="52.1221%" y="223.50"></text></g><g><title>eval_to_const_value_raw (3,493,267 samples, 0.70%)</title><rect x="52.0437%" y="197" width="0.7040%" height="15" fill="rgb(249,43,39)"/><text x="52.2937%" y="207.50"></text></g><g><title>eval_to_allocation_raw (3,438,585 samples, 0.69%)</title><rect x="52.0547%" y="181" width="0.6930%" height="15" fill="rgb(209,38,44)"/><text x="52.3047%" y="191.50"></text></g><g><title>generics_of (1,061,312 samples, 0.21%)</title><rect x="54.6939%" y="197" width="0.2139%" height="15" fill="rgb(236,212,23)"/><text x="54.9439%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (794,421 samples, 0.16%)</title><rect x="54.7477%" y="181" width="0.1601%" height="15" fill="rgb(242,79,21)"/><text x="54.9977%" y="191.50"></text></g><g><title>impl_trait_ref (1,387,187 samples, 0.28%)</title><rect x="54.9929%" y="197" width="0.2796%" height="15" fill="rgb(211,96,35)"/><text x="55.2429%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (901,760 samples, 0.18%)</title><rect x="55.0907%" y="181" width="0.1817%" height="15" fill="rgb(253,215,40)"/><text x="55.3407%" y="191.50"></text></g><g><title>predicates_of (1,395,355 samples, 0.28%)</title><rect x="55.2921%" y="197" width="0.2812%" height="15" fill="rgb(211,81,21)"/><text x="55.5421%" y="207.50"></text></g><g><title>predicates_defined_on (806,181 samples, 0.16%)</title><rect x="55.4109%" y="181" width="0.1625%" height="15" fill="rgb(208,190,38)"/><text x="55.6609%" y="191.50"></text></g><g><title>specializes (3,427,314 samples, 0.69%)</title><rect x="55.5733%" y="197" width="0.6907%" height="15" fill="rgb(235,213,38)"/><text x="55.8233%" y="207.50"></text></g><g><title>param_env (1,796,464 samples, 0.36%)</title><rect x="55.9020%" y="181" width="0.3621%" height="15" fill="rgb(237,122,38)"/><text x="56.1520%" y="191.50"></text></g><g><title>def_span (775,923 samples, 0.16%)</title><rect x="56.1077%" y="165" width="0.1564%" height="15" fill="rgb(244,218,35)"/><text x="56.3577%" y="175.50"></text></g><g><title>metadata_decode_entry_def_span (689,522 samples, 0.14%)</title><rect x="56.1251%" y="149" width="0.1390%" height="15" fill="rgb(240,68,47)"/><text x="56.3751%" y="159.50"></text></g><g><title>trait_impls_of (510,114 samples, 0.10%)</title><rect x="56.2719%" y="197" width="0.1028%" height="15" fill="rgb(210,16,53)"/><text x="56.5219%" y="207.50"></text></g><g><title>evaluate_obligation (18,047,174 samples, 3.64%)</title><rect x="52.7477%" y="213" width="3.6373%" height="15" fill="rgb(235,124,12)"/><text x="52.9977%" y="223.50">eval..</text></g><g><title>generics_of (978,210 samples, 0.20%)</title><rect x="56.4402%" y="213" width="0.1971%" height="15" fill="rgb(224,169,11)"/><text x="56.6902%" y="223.50"></text></g><g><title>metadata_decode_entry_generics_of (762,527 samples, 0.15%)</title><rect x="56.4836%" y="197" width="0.1537%" height="15" fill="rgb(250,166,2)"/><text x="56.7336%" y="207.50"></text></g><g><title>method_autoderef_steps (539,789 samples, 0.11%)</title><rect x="56.8367%" y="213" width="0.1088%" height="15" fill="rgb(242,216,29)"/><text x="57.0867%" y="223.50"></text></g><g><title>param_env (529,533 samples, 0.11%)</title><rect x="56.9883%" y="213" width="0.1067%" height="15" fill="rgb(230,116,27)"/><text x="57.2383%" y="223.50"></text></g><g><title>predicates_of (630,158 samples, 0.13%)</title><rect x="57.1056%" y="213" width="0.1270%" height="15" fill="rgb(228,99,48)"/><text x="57.3556%" y="223.50"></text></g><g><title>eval_to_const_value_raw (818,668 samples, 0.16%)</title><rect x="69.0408%" y="197" width="0.1650%" height="15" fill="rgb(253,11,6)"/><text x="69.2908%" y="207.50"></text></g><g><title>eval_to_allocation_raw (814,348 samples, 0.16%)</title><rect x="69.0417%" y="181" width="0.1641%" height="15" fill="rgb(247,143,39)"/><text x="69.2917%" y="191.50"></text></g><g><title>evaluate_obligation (5,363,455 samples, 1.08%)</title><rect x="69.2058%" y="197" width="1.0810%" height="15" fill="rgb(236,97,10)"/><text x="69.4558%" y="207.50"></text></g><g><title>typeck (65,388,129 samples, 13.18%)</title><rect x="57.3940%" y="213" width="13.1784%" height="15" fill="rgb(233,208,19)"/><text x="57.6440%" y="223.50">typeck</text></g><g><title>item_bodies_checking (189,916,479 samples, 38.28%)</title><rect x="32.3188%" y="261" width="38.2761%" height="15" fill="rgb(216,164,2)"/><text x="32.5688%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (189,912,819 samples, 38.28%)</title><rect x="32.3196%" y="245" width="38.2753%" height="15" fill="rgb(220,129,5)"/><text x="32.5696%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (189,545,774 samples, 38.20%)</title><rect x="32.3935%" y="229" width="38.2013%" height="15" fill="rgb(242,17,10)"/><text x="32.6435%" y="239.50">typeck</text></g><g><title>evaluate_obligation (1,802,330 samples, 0.36%)</title><rect x="71.5131%" y="213" width="0.3632%" height="15" fill="rgb(242,107,0)"/><text x="71.7631%" y="223.50"></text></g><g><title>item_types_checking (6,699,074 samples, 1.35%)</title><rect x="70.5949%" y="261" width="1.3501%" height="15" fill="rgb(251,28,31)"/><text x="70.8449%" y="271.50"></text></g><g><title>check_mod_item_types (6,687,274 samples, 1.35%)</title><rect x="70.5973%" y="245" width="1.3478%" height="15" fill="rgb(233,223,10)"/><text x="70.8473%" y="255.50"></text></g><g><title>typeck (5,031,067 samples, 1.01%)</title><rect x="70.9311%" y="229" width="1.0140%" height="15" fill="rgb(215,21,27)"/><text x="71.1811%" y="239.50"></text></g><g><title>mir_const_qualif (1,069,120 samples, 0.22%)</title><rect x="72.4020%" y="181" width="0.2155%" height="15" fill="rgb(232,23,21)"/><text x="72.6520%" y="191.50"></text></g><g><title>mir_const (890,997 samples, 0.18%)</title><rect x="72.4379%" y="165" width="0.1796%" height="15" fill="rgb(244,5,23)"/><text x="72.6879%" y="175.50"></text></g><g><title>unsafety_check_result (616,746 samples, 0.12%)</title><rect x="72.4931%" y="149" width="0.1243%" height="15" fill="rgb(226,81,46)"/><text x="72.7431%" y="159.50"></text></g><g><title>mir_built (528,602 samples, 0.11%)</title><rect x="72.5109%" y="133" width="0.1065%" height="15" fill="rgb(247,70,30)"/><text x="72.7609%" y="143.50"></text></g><g><title>mir_borrowck (2,402,884 samples, 0.48%)</title><rect x="72.8618%" y="149" width="0.4843%" height="15" fill="rgb(212,68,19)"/><text x="73.1118%" y="159.50"></text></g><g><title>mir_for_ctfe (3,630,761 samples, 0.73%)</title><rect x="72.6174%" y="181" width="0.7317%" height="15" fill="rgb(240,187,13)"/><text x="72.8674%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,323,458 samples, 0.67%)</title><rect x="72.6794%" y="165" width="0.6698%" height="15" fill="rgb(223,113,26)"/><text x="72.9294%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,046,801 samples, 0.21%)</title><rect x="73.3588%" y="165" width="0.2110%" height="15" fill="rgb(206,192,2)"/><text x="73.6088%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,039,231 samples, 0.21%)</title><rect x="73.3603%" y="149" width="0.2094%" height="15" fill="rgb(241,108,4)"/><text x="73.6103%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,018,771 samples, 0.21%)</title><rect x="73.3644%" y="133" width="0.2053%" height="15" fill="rgb(247,173,49)"/><text x="73.6144%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,103,722 samples, 0.22%)</title><rect x="73.3510%" y="181" width="0.2224%" height="15" fill="rgb(224,114,35)"/><text x="73.6010%" y="191.50"></text></g><g><title>eval_to_const_value_raw (8,577,065 samples, 1.73%)</title><rect x="72.2111%" y="229" width="1.7286%" height="15" fill="rgb(245,159,27)"/><text x="72.4611%" y="239.50"></text></g><g><title>eval_to_const_value_raw (8,524,264 samples, 1.72%)</title><rect x="72.2217%" y="213" width="1.7180%" height="15" fill="rgb(245,172,44)"/><text x="72.4717%" y="223.50"></text></g><g><title>eval_to_allocation_raw (8,445,764 samples, 1.70%)</title><rect x="72.2376%" y="197" width="1.7022%" height="15" fill="rgb(236,23,11)"/><text x="72.4876%" y="207.50"></text></g><g><title>typeck (1,817,262 samples, 0.37%)</title><rect x="73.5735%" y="181" width="0.3663%" height="15" fill="rgb(205,117,38)"/><text x="73.8235%" y="191.50"></text></g><g><title>fn_sig (849,891 samples, 0.17%)</title><rect x="73.9397%" y="229" width="0.1713%" height="15" fill="rgb(237,72,25)"/><text x="74.1897%" y="239.50"></text></g><g><title>named_region_map (1,101,522 samples, 0.22%)</title><rect x="74.2653%" y="213" width="0.2220%" height="15" fill="rgb(244,70,9)"/><text x="74.5153%" y="223.50"></text></g><g><title>resolve_lifetimes (1,024,091 samples, 0.21%)</title><rect x="74.2809%" y="197" width="0.2064%" height="15" fill="rgb(217,125,39)"/><text x="74.5309%" y="207.50"></text></g><g><title>generics_of (1,916,810 samples, 0.39%)</title><rect x="74.1110%" y="229" width="0.3863%" height="15" fill="rgb(235,36,10)"/><text x="74.3610%" y="239.50"></text></g><g><title>param_env (519,896 samples, 0.10%)</title><rect x="74.5211%" y="229" width="0.1048%" height="15" fill="rgb(251,123,47)"/><text x="74.7711%" y="239.50"></text></g><g><title>predicates_of (2,297,521 samples, 0.46%)</title><rect x="74.6259%" y="229" width="0.4630%" height="15" fill="rgb(221,13,13)"/><text x="74.8759%" y="239.50"></text></g><g><title>predicates_defined_on (2,071,551 samples, 0.42%)</title><rect x="74.6714%" y="213" width="0.4175%" height="15" fill="rgb(238,131,9)"/><text x="74.9214%" y="223.50"></text></g><g><title>inferred_outlives_of (997,522 samples, 0.20%)</title><rect x="74.8879%" y="197" width="0.2010%" height="15" fill="rgb(211,50,8)"/><text x="75.1379%" y="207.50"></text></g><g><title>inferred_outlives_crate (910,160 samples, 0.18%)</title><rect x="74.9055%" y="181" width="0.1834%" height="15" fill="rgb(245,182,24)"/><text x="75.1555%" y="191.50"></text></g><g><title>type_of (591,214 samples, 0.12%)</title><rect x="74.9698%" y="165" width="0.1192%" height="15" fill="rgb(242,14,37)"/><text x="75.2198%" y="175.50"></text></g><g><title>type_collecting (15,864,966 samples, 3.20%)</title><rect x="71.9462%" y="261" width="3.1974%" height="15" fill="rgb(246,228,12)"/><text x="72.1962%" y="271.50">typ..</text></g><g><title>collect_mod_item_types (15,847,456 samples, 3.19%)</title><rect x="71.9497%" y="245" width="3.1939%" height="15" fill="rgb(213,55,15)"/><text x="72.1997%" y="255.50">col..</text></g><g><title>evaluate_obligation (966,824 samples, 0.19%)</title><rect x="76.0140%" y="229" width="0.1949%" height="15" fill="rgb(209,9,3)"/><text x="76.2640%" y="239.50"></text></g><g><title>param_env (534,962 samples, 0.11%)</title><rect x="76.2833%" y="229" width="0.1078%" height="15" fill="rgb(230,59,30)"/><text x="76.5333%" y="239.50"></text></g><g><title>region_scope_tree (1,087,646 samples, 0.22%)</title><rect x="76.3938%" y="229" width="0.2192%" height="15" fill="rgb(209,121,21)"/><text x="76.6438%" y="239.50"></text></g><g><title>check_impl_item_well_formed (6,532,231 samples, 1.32%)</title><rect x="75.2994%" y="245" width="1.3165%" height="15" fill="rgb(220,109,13)"/><text x="75.5494%" y="255.50"></text></g><g><title>mir_borrowck (1,119,732 samples, 0.23%)</title><rect x="77.7052%" y="149" width="0.2257%" height="15" fill="rgb(232,18,1)"/><text x="77.9552%" y="159.50"></text></g><g><title>mir_for_ctfe (1,647,296 samples, 0.33%)</title><rect x="77.6001%" y="181" width="0.3320%" height="15" fill="rgb(215,41,42)"/><text x="77.8501%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,516,925 samples, 0.31%)</title><rect x="77.6264%" y="165" width="0.3057%" height="15" fill="rgb(224,123,36)"/><text x="77.8764%" y="175.50"></text></g><g><title>mir_borrowck (624,596 samples, 0.13%)</title><rect x="78.1076%" y="85" width="0.1259%" height="15" fill="rgb(240,125,3)"/><text x="78.3576%" y="95.50"></text></g><g><title>mir_for_ctfe (942,990 samples, 0.19%)</title><rect x="78.0441%" y="117" width="0.1901%" height="15" fill="rgb(205,98,50)"/><text x="78.2941%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (862,139 samples, 0.17%)</title><rect x="78.0604%" y="101" width="0.1738%" height="15" fill="rgb(205,185,37)"/><text x="78.3104%" y="111.50"></text></g><g><title>evaluate_obligation (1,199,123 samples, 0.24%)</title><rect x="78.4149%" y="37" width="0.2417%" height="15" fill="rgb(238,207,15)"/><text x="78.6649%" y="47.50"></text></g><g><title>eval_to_const_value_raw (2,150,893 samples, 0.43%)</title><rect x="78.2385%" y="101" width="0.4335%" height="15" fill="rgb(213,199,42)"/><text x="78.4885%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,144,463 samples, 0.43%)</title><rect x="78.2397%" y="85" width="0.4322%" height="15" fill="rgb(235,201,11)"/><text x="78.4897%" y="95.50"></text></g><g><title>eval_to_allocation_raw (2,132,543 samples, 0.43%)</title><rect x="78.2422%" y="69" width="0.4298%" height="15" fill="rgb(207,46,11)"/><text x="78.4922%" y="79.50"></text></g><g><title>typeck (1,629,557 samples, 0.33%)</title><rect x="78.3435%" y="53" width="0.3284%" height="15" fill="rgb(241,35,35)"/><text x="78.5935%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,181,423 samples, 0.44%)</title><rect x="78.2343%" y="117" width="0.4396%" height="15" fill="rgb(243,32,47)"/><text x="78.4843%" y="127.50"></text></g><g><title>impl_trait_ref (646,448 samples, 0.13%)</title><rect x="79.3689%" y="85" width="0.1303%" height="15" fill="rgb(247,202,23)"/><text x="79.6189%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (510,256 samples, 0.10%)</title><rect x="79.3963%" y="69" width="0.1028%" height="15" fill="rgb(219,102,11)"/><text x="79.6463%" y="79.50"></text></g><g><title>predicates_of (673,727 samples, 0.14%)</title><rect x="79.5082%" y="85" width="0.1358%" height="15" fill="rgb(243,110,44)"/><text x="79.7582%" y="95.50"></text></g><g><title>specializes (1,984,112 samples, 0.40%)</title><rect x="79.6440%" y="85" width="0.3999%" height="15" fill="rgb(222,74,54)"/><text x="79.8940%" y="95.50"></text></g><g><title>param_env (1,152,412 samples, 0.23%)</title><rect x="79.8116%" y="69" width="0.2323%" height="15" fill="rgb(216,99,12)"/><text x="80.0616%" y="79.50"></text></g><g><title>def_span (542,015 samples, 0.11%)</title><rect x="79.9346%" y="53" width="0.1092%" height="15" fill="rgb(226,22,26)"/><text x="80.1846%" y="63.50"></text></g><g><title>evaluate_obligation (6,168,868 samples, 1.24%)</title><rect x="78.8386%" y="101" width="1.2433%" height="15" fill="rgb(217,163,10)"/><text x="79.0886%" y="111.50"></text></g><g><title>eval_to_const_value_raw (10,770,559 samples, 2.17%)</title><rect x="77.9427%" y="165" width="2.1707%" height="15" fill="rgb(213,25,53)"/><text x="78.1927%" y="175.50">e..</text></g><g><title>eval_to_const_value_raw (10,762,899 samples, 2.17%)</title><rect x="77.9442%" y="149" width="2.1692%" height="15" fill="rgb(252,105,26)"/><text x="78.1942%" y="159.50">e..</text></g><g><title>eval_to_allocation_raw (10,747,059 samples, 2.17%)</title><rect x="77.9474%" y="133" width="2.1660%" height="15" fill="rgb(220,39,43)"/><text x="78.1974%" y="143.50">e..</text></g><g><title>typeck (7,142,217 samples, 1.44%)</title><rect x="78.6740%" y="117" width="1.4395%" height="15" fill="rgb(229,68,48)"/><text x="78.9240%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (10,845,502 samples, 2.19%)</title><rect x="77.9328%" y="181" width="2.1858%" height="15" fill="rgb(252,8,32)"/><text x="78.1828%" y="191.50">t..</text></g><g><title>eval_to_const_value_raw (14,227,591 samples, 2.87%)</title><rect x="77.4508%" y="229" width="2.8675%" height="15" fill="rgb(223,20,43)"/><text x="77.7008%" y="239.50">ev..</text></g><g><title>eval_to_const_value_raw (14,214,721 samples, 2.86%)</title><rect x="77.4534%" y="213" width="2.8649%" height="15" fill="rgb(229,81,49)"/><text x="77.7034%" y="223.50">ev..</text></g><g><title>eval_to_allocation_raw (14,191,451 samples, 2.86%)</title><rect x="77.4581%" y="197" width="2.8602%" height="15" fill="rgb(236,28,36)"/><text x="77.7081%" y="207.50">ev..</text></g><g><title>typeck (990,222 samples, 0.20%)</title><rect x="80.1187%" y="181" width="0.1996%" height="15" fill="rgb(249,185,26)"/><text x="80.3687%" y="191.50"></text></g><g><title>evaluate_obligation (1,090,351 samples, 0.22%)</title><rect x="80.3182%" y="229" width="0.2198%" height="15" fill="rgb(249,174,33)"/><text x="80.5682%" y="239.50"></text></g><g><title>param_env (905,011 samples, 0.18%)</title><rect x="80.6428%" y="229" width="0.1824%" height="15" fill="rgb(233,201,37)"/><text x="80.8928%" y="239.50"></text></g><g><title>region_scope_tree (1,478,586 samples, 0.30%)</title><rect x="80.8459%" y="229" width="0.2980%" height="15" fill="rgb(221,78,26)"/><text x="81.0959%" y="239.50"></text></g><g><title>check_item_well_formed (22,917,492 samples, 4.62%)</title><rect x="76.6160%" y="245" width="4.6188%" height="15" fill="rgb(250,127,30)"/><text x="76.8660%" y="255.50">check..</text></g><g><title>analysis (402,130,305 samples, 81.05%)</title><rect x="0.2253%" y="293" width="81.0459%" height="15" fill="rgb(230,49,44)"/><text x="0.4753%" y="303.50">analysis</text></g><g><title>type_check_crate (248,757,242 samples, 50.13%)</title><rect x="31.1364%" y="277" width="50.1349%" height="15" fill="rgb(229,67,23)"/><text x="31.3864%" y="287.50">type_check_crate</text></g><g><title>wf_checking (30,366,937 samples, 6.12%)</title><rect x="75.1511%" y="261" width="6.1202%" height="15" fill="rgb(249,83,47)"/><text x="75.4011%" y="271.50">wf_check..</text></g><g><title>AST_validation (524,616 samples, 0.11%)</title><rect x="81.3850%" y="277" width="0.1057%" height="15" fill="rgb(215,43,3)"/><text x="81.6350%" y="287.50"></text></g><g><title>macro_expand_crate (51,036,756 samples, 10.29%)</title><rect x="81.5747%" y="277" width="10.2860%" height="15" fill="rgb(238,154,13)"/><text x="81.8247%" y="287.50">macro_expand_cr..</text></g><g><title>expand_crate (51,022,976 samples, 10.28%)</title><rect x="81.5775%" y="261" width="10.2832%" height="15" fill="rgb(219,56,2)"/><text x="81.8275%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,630,879 samples, 0.33%)</title><rect x="91.5320%" y="245" width="0.3287%" height="15" fill="rgb(233,0,4)"/><text x="91.7820%" y="255.50"></text></g><g><title>late_resolve_crate (7,028,908 samples, 1.42%)</title><rect x="91.9703%" y="261" width="1.4166%" height="15" fill="rgb(235,30,7)"/><text x="92.2203%" y="271.50"></text></g><g><title>configure_and_expand (60,447,151 samples, 12.18%)</title><rect x="81.3383%" y="293" width="12.1826%" height="15" fill="rgb(250,79,13)"/><text x="81.5883%" y="303.50">configure_and_expa..</text></g><g><title>resolve_crate (8,110,670 samples, 1.63%)</title><rect x="91.8862%" y="277" width="1.6346%" height="15" fill="rgb(211,146,34)"/><text x="92.1362%" y="287.50"></text></g><g><title>drop_ast (1,043,931 samples, 0.21%)</title><rect x="93.5209%" y="293" width="0.2104%" height="15" fill="rgb(228,22,38)"/><text x="93.7709%" y="303.50"></text></g><g><title>early_lint_checks (2,314,266 samples, 0.47%)</title><rect x="93.7352%" y="293" width="0.4664%" height="15" fill="rgb(235,168,5)"/><text x="93.9852%" y="303.50"></text></g><g><title>free_global_ctxt (5,597,253 samples, 1.13%)</title><rect x="94.2016%" y="293" width="1.1281%" height="15" fill="rgb(221,155,16)"/><text x="94.4516%" y="303.50"></text></g><g><title>generate_crate_metadata (5,489,391 samples, 1.11%)</title><rect x="95.3297%" y="293" width="1.1063%" height="15" fill="rgb(215,215,53)"/><text x="95.5797%" y="303.50"></text></g><g><title>hir_lowering (13,822,964 samples, 2.79%)</title><rect x="96.4360%" y="293" width="2.7859%" height="15" fill="rgb(223,4,10)"/><text x="96.6860%" y="303.50">hi..</text></g><g><title>parse_crate (1,224,783 samples, 0.25%)</title><rect x="99.2338%" y="293" width="0.2468%" height="15" fill="rgb(234,103,6)"/><text x="99.4838%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,765,489 samples, 0.36%)</title><rect x="99.5180%" y="293" width="0.3558%" height="15" fill="rgb(227,97,0)"/><text x="99.7680%" y="303.50"></text></g><g><title>all (496,175,708 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (496,175,708 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (529,886 samples, 0.11%)</title><rect x="99.8932%" y="293" width="0.1068%" height="15" fill="rgb(222,22,37)"/><text x="100.1432%" y="303.50"></text></g></svg></svg>