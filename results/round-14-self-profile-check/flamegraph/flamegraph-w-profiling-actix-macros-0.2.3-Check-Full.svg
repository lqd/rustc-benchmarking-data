<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (135,461 samples, 0.17%)</title><rect x="7.6415%" y="197" width="0.1654%" height="15" fill="rgb(227,0,7)"/><text x="7.8915%" y="207.50"></text></g><g><title>item_attrs (108,241 samples, 0.13%)</title><rect x="8.0783%" y="165" width="0.1322%" height="15" fill="rgb(217,0,24)"/><text x="8.3283%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (103,511 samples, 0.13%)</title><rect x="8.0841%" y="149" width="0.1264%" height="15" fill="rgb(221,193,54)"/><text x="8.3341%" y="159.50"></text></g><g><title>codegen_fn_attrs (164,672 samples, 0.20%)</title><rect x="8.0236%" y="181" width="0.2011%" height="15" fill="rgb(248,212,6)"/><text x="8.2736%" y="191.50"></text></g><g><title>is_copy_raw (84,122 samples, 0.10%)</title><rect x="9.6177%" y="165" width="0.1027%" height="15" fill="rgb(208,68,35)"/><text x="9.8677%" y="175.50"></text></g><g><title>adt_drop_tys (228,732 samples, 0.28%)</title><rect x="9.7702%" y="149" width="0.2793%" height="15" fill="rgb(232,128,0)"/><text x="10.0202%" y="159.50"></text></g><g><title>needs_drop_raw (571,284 samples, 0.70%)</title><rect x="9.7205%" y="165" width="0.6977%" height="15" fill="rgb(207,160,47)"/><text x="9.9705%" y="175.50"></text></g><g><title>is_copy_raw (301,802 samples, 0.37%)</title><rect x="10.0496%" y="149" width="0.3686%" height="15" fill="rgb(228,23,34)"/><text x="10.2996%" y="159.50"></text></g><g><title>evaluate_obligation (261,862 samples, 0.32%)</title><rect x="10.0983%" y="133" width="0.3198%" height="15" fill="rgb(218,30,26)"/><text x="10.3483%" y="143.50"></text></g><g><title>impl_parent (1,074,435 samples, 1.31%)</title><rect x="12.4884%" y="133" width="1.3121%" height="15" fill="rgb(220,122,19)"/><text x="12.7384%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (689,360 samples, 0.84%)</title><rect x="12.9586%" y="117" width="0.8419%" height="15" fill="rgb(250,228,42)"/><text x="13.2086%" y="127.50"></text></g><g><title>specialization_graph_of (6,019,867 samples, 7.35%)</title><rect x="10.5411%" y="149" width="7.3516%" height="15" fill="rgb(240,193,28)"/><text x="10.7911%" y="159.50">specializa..</text></g><g><title>impl_trait_ref (3,350,915 samples, 4.09%)</title><rect x="13.8005%" y="133" width="4.0922%" height="15" fill="rgb(216,20,37)"/><text x="14.0505%" y="143.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,960,372 samples, 3.62%)</title><rect x="14.2774%" y="117" width="3.6153%" height="15" fill="rgb(206,188,39)"/><text x="14.5274%" y="127.50">meta..</text></g><g><title>resolve_instance (6,132,567 samples, 7.49%)</title><rect x="10.4181%" y="165" width="7.4892%" height="15" fill="rgb(217,207,13)"/><text x="10.6681%" y="175.50">resolve_in..</text></g><g><title>thir_body (456,117 samples, 0.56%)</title><rect x="17.9132%" y="165" width="0.5570%" height="15" fill="rgb(231,73,38)"/><text x="18.1632%" y="175.50"></text></g><g><title>mir_const (9,204,984 samples, 11.24%)</title><rect x="7.2385%" y="213" width="11.2413%" height="15" fill="rgb(225,20,46)"/><text x="7.4885%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (8,739,517 samples, 10.67%)</title><rect x="7.8069%" y="197" width="10.6729%" height="15" fill="rgb(210,31,41)"/><text x="8.0569%" y="207.50">unsafety_check_r..</text></g><g><title>mir_built (8,394,275 samples, 10.25%)</title><rect x="8.2286%" y="181" width="10.2512%" height="15" fill="rgb(221,200,47)"/><text x="8.4786%" y="191.50">mir_built</text></g><g><title>has_structural_eq_impls (133,862 samples, 0.16%)</title><rect x="18.5672%" y="197" width="0.1635%" height="15" fill="rgb(226,26,5)"/><text x="18.8172%" y="207.50"></text></g><g><title>evaluate_obligation (124,432 samples, 0.15%)</title><rect x="18.5787%" y="181" width="0.1520%" height="15" fill="rgb(249,33,26)"/><text x="18.8287%" y="191.50"></text></g><g><title>trait_impls_of (111,832 samples, 0.14%)</title><rect x="18.5941%" y="165" width="0.1366%" height="15" fill="rgb(235,183,28)"/><text x="18.8441%" y="175.50"></text></g><g><title>is_freeze_raw (119,311 samples, 0.15%)</title><rect x="18.7318%" y="197" width="0.1457%" height="15" fill="rgb(221,5,38)"/><text x="18.9818%" y="207.50"></text></g><g><title>evaluate_obligation (116,401 samples, 0.14%)</title><rect x="18.7353%" y="181" width="0.1422%" height="15" fill="rgb(247,18,42)"/><text x="18.9853%" y="191.50"></text></g><g><title>mir_const (93,251 samples, 0.11%)</title><rect x="18.8784%" y="197" width="0.1139%" height="15" fill="rgb(241,131,45)"/><text x="19.1284%" y="207.50"></text></g><g><title>mir_promoted (9,966,002 samples, 12.17%)</title><rect x="6.8229%" y="229" width="12.1707%" height="15" fill="rgb(249,31,29)"/><text x="7.0729%" y="239.50">mir_promoted</text></g><g><title>mir_const_qualif (420,654 samples, 0.51%)</title><rect x="18.4798%" y="213" width="0.5137%" height="15" fill="rgb(225,111,53)"/><text x="18.7298%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (152,152 samples, 0.19%)</title><rect x="18.9935%" y="229" width="0.1858%" height="15" fill="rgb(238,160,17)"/><text x="19.2435%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (222,031 samples, 0.27%)</title><rect x="19.1793%" y="229" width="0.2711%" height="15" fill="rgb(214,148,48)"/><text x="19.4293%" y="239.50"></text></g><g><title>normalize_projection_ty (134,661 samples, 0.16%)</title><rect x="19.2860%" y="213" width="0.1645%" height="15" fill="rgb(232,36,49)"/><text x="19.5360%" y="223.50"></text></g><g><title>type_op_prove_predicate (651,333 samples, 0.80%)</title><rect x="19.4505%" y="229" width="0.7954%" height="15" fill="rgb(209,103,24)"/><text x="19.7005%" y="239.50"></text></g><g><title>MIR_borrow_checking (15,837,325 samples, 19.34%)</title><rect x="0.9070%" y="261" width="19.3408%" height="15" fill="rgb(229,88,8)"/><text x="1.1570%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,820,795 samples, 19.32%)</title><rect x="0.9272%" y="245" width="19.3206%" height="15" fill="rgb(213,181,19)"/><text x="1.1772%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (126,132 samples, 0.15%)</title><rect x="20.2478%" y="261" width="0.1540%" height="15" fill="rgb(254,191,54)"/><text x="20.4978%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (106,211 samples, 0.13%)</title><rect x="20.2722%" y="245" width="0.1297%" height="15" fill="rgb(241,83,37)"/><text x="20.5222%" y="255.50"></text></g><g><title>codegen_fn_attrs (132,162 samples, 0.16%)</title><rect x="20.6231%" y="229" width="0.1614%" height="15" fill="rgb(233,36,39)"/><text x="20.8731%" y="239.50"></text></g><g><title>check_mod_attrs (225,822 samples, 0.28%)</title><rect x="20.5089%" y="245" width="0.2758%" height="15" fill="rgb(226,3,54)"/><text x="20.7589%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (145,422 samples, 0.18%)</title><rect x="20.8562%" y="245" width="0.1776%" height="15" fill="rgb(245,192,40)"/><text x="21.1062%" y="255.50"></text></g><g><title>misc_checking_1 (471,105 samples, 0.58%)</title><rect x="20.4887%" y="261" width="0.5753%" height="15" fill="rgb(238,167,29)"/><text x="20.7387%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (274,093 samples, 0.33%)</title><rect x="21.0658%" y="245" width="0.3347%" height="15" fill="rgb(232,182,51)"/><text x="21.3158%" y="255.50"></text></g><g><title>check_mod_liveness (232,432 samples, 0.28%)</title><rect x="21.1167%" y="229" width="0.2839%" height="15" fill="rgb(231,60,39)"/><text x="21.3667%" y="239.50"></text></g><g><title>type_uninhabited_from (95,292 samples, 0.12%)</title><rect x="21.2842%" y="213" width="0.1164%" height="15" fill="rgb(208,69,12)"/><text x="21.5342%" y="223.50"></text></g><g><title>type_uninhabited_from (83,662 samples, 0.10%)</title><rect x="21.2984%" y="197" width="0.1022%" height="15" fill="rgb(235,93,37)"/><text x="21.5484%" y="207.50"></text></g><g><title>misc_checking_2 (544,326 samples, 0.66%)</title><rect x="21.0640%" y="261" width="0.6647%" height="15" fill="rgb(213,116,39)"/><text x="21.3140%" y="271.50"></text></g><g><title>match_checking (268,743 samples, 0.33%)</title><rect x="21.4006%" y="245" width="0.3282%" height="15" fill="rgb(222,207,29)"/><text x="21.6506%" y="255.50"></text></g><g><title>check_match (262,213 samples, 0.32%)</title><rect x="21.4085%" y="229" width="0.3202%" height="15" fill="rgb(206,96,30)"/><text x="21.6585%" y="239.50"></text></g><g><title>fn_abi_of_instance (557,426 samples, 0.68%)</title><rect x="22.2953%" y="117" width="0.6807%" height="15" fill="rgb(218,138,4)"/><text x="22.5453%" y="127.50"></text></g><g><title>param_env (461,476 samples, 0.56%)</title><rect x="22.4124%" y="101" width="0.5636%" height="15" fill="rgb(250,191,14)"/><text x="22.6624%" y="111.50"></text></g><g><title>predicates_of (445,895 samples, 0.54%)</title><rect x="22.4315%" y="85" width="0.5445%" height="15" fill="rgb(239,60,40)"/><text x="22.6815%" y="95.50"></text></g><g><title>predicates_defined_on (441,655 samples, 0.54%)</title><rect x="22.4366%" y="69" width="0.5394%" height="15" fill="rgb(206,27,48)"/><text x="22.6866%" y="79.50"></text></g><g><title>eval_to_const_value_raw (814,799 samples, 1.00%)</title><rect x="22.1291%" y="165" width="0.9950%" height="15" fill="rgb(225,35,8)"/><text x="22.3791%" y="175.50"></text></g><g><title>eval_to_const_value_raw (814,109 samples, 0.99%)</title><rect x="22.1299%" y="149" width="0.9942%" height="15" fill="rgb(250,213,24)"/><text x="22.3799%" y="159.50"></text></g><g><title>eval_to_allocation_raw (812,419 samples, 0.99%)</title><rect x="22.1320%" y="133" width="0.9921%" height="15" fill="rgb(247,123,22)"/><text x="22.3820%" y="143.50"></text></g><g><title>eval_to_allocation_raw (857,530 samples, 1.05%)</title><rect x="22.0787%" y="213" width="1.0472%" height="15" fill="rgb(231,138,38)"/><text x="22.3287%" y="223.50"></text></g><g><title>eval_to_allocation_raw (856,830 samples, 1.05%)</title><rect x="22.0795%" y="197" width="1.0464%" height="15" fill="rgb(231,145,46)"/><text x="22.3295%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (822,959 samples, 1.01%)</title><rect x="22.1209%" y="181" width="1.0050%" height="15" fill="rgb(251,118,11)"/><text x="22.3709%" y="191.50"></text></g><g><title>eval_to_const_value_raw (103,541 samples, 0.13%)</title><rect x="23.1259%" y="213" width="0.1264%" height="15" fill="rgb(217,147,25)"/><text x="23.3759%" y="223.50"></text></g><g><title>eval_to_const_value_raw (95,021 samples, 0.12%)</title><rect x="23.1363%" y="197" width="0.1160%" height="15" fill="rgb(247,81,37)"/><text x="23.3863%" y="207.50"></text></g><g><title>eval_to_allocation_raw (89,501 samples, 0.11%)</title><rect x="23.1431%" y="181" width="0.1093%" height="15" fill="rgb(209,12,38)"/><text x="23.3931%" y="191.50"></text></g><g><title>crate_lints (1,216,653 samples, 1.49%)</title><rect x="21.8787%" y="229" width="1.4858%" height="15" fill="rgb(227,1,9)"/><text x="22.1287%" y="239.50"></text></g><g><title>lint_checking (1,391,805 samples, 1.70%)</title><rect x="21.8768%" y="245" width="1.6997%" height="15" fill="rgb(248,47,43)"/><text x="22.1268%" y="255.50"></text></g><g><title>module_lints (173,562 samples, 0.21%)</title><rect x="23.3645%" y="229" width="0.2120%" height="15" fill="rgb(221,10,30)"/><text x="23.6145%" y="239.50"></text></g><g><title>lint_mod (171,102 samples, 0.21%)</title><rect x="23.3675%" y="213" width="0.2090%" height="15" fill="rgb(210,229,1)"/><text x="23.6175%" y="223.50"></text></g><g><title>privacy_checking_modules (287,933 samples, 0.35%)</title><rect x="23.6314%" y="245" width="0.3516%" height="15" fill="rgb(222,148,37)"/><text x="23.8814%" y="255.50"></text></g><g><title>check_mod_privacy (286,643 samples, 0.35%)</title><rect x="23.6330%" y="229" width="0.3501%" height="15" fill="rgb(234,67,33)"/><text x="23.8830%" y="239.50"></text></g><g><title>misc_checking_3 (1,855,310 samples, 2.27%)</title><rect x="21.7288%" y="261" width="2.2657%" height="15" fill="rgb(247,98,35)"/><text x="21.9788%" y="271.50">m..</text></g><g><title>evaluate_obligation (123,401 samples, 0.15%)</title><rect x="24.3499%" y="197" width="0.1507%" height="15" fill="rgb(247,138,52)"/><text x="24.5999%" y="207.50"></text></g><g><title>associated_item (408,636 samples, 0.50%)</title><rect x="34.5311%" y="165" width="0.4990%" height="15" fill="rgb(213,79,30)"/><text x="34.7811%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (309,125 samples, 0.38%)</title><rect x="34.6526%" y="149" width="0.3775%" height="15" fill="rgb(246,177,23)"/><text x="34.9026%" y="159.50"></text></g><g><title>associated_items (606,310 samples, 0.74%)</title><rect x="34.3198%" y="181" width="0.7404%" height="15" fill="rgb(230,62,27)"/><text x="34.5698%" y="191.50"></text></g><g><title>adt_def (238,982 samples, 0.29%)</title><rect x="35.8619%" y="149" width="0.2918%" height="15" fill="rgb(216,154,8)"/><text x="36.1119%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (230,352 samples, 0.28%)</title><rect x="35.8725%" y="133" width="0.2813%" height="15" fill="rgb(244,35,45)"/><text x="36.1225%" y="143.50"></text></g><g><title>item_attrs (134,291 samples, 0.16%)</title><rect x="35.9898%" y="117" width="0.1640%" height="15" fill="rgb(251,115,12)"/><text x="36.2398%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (125,481 samples, 0.15%)</title><rect x="36.0005%" y="101" width="0.1532%" height="15" fill="rgb(240,54,50)"/><text x="36.2505%" y="111.50"></text></g><g><title>adt_destructor (281,125 samples, 0.34%)</title><rect x="36.1538%" y="149" width="0.3433%" height="15" fill="rgb(233,84,52)"/><text x="36.4038%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (271,264 samples, 0.33%)</title><rect x="36.1658%" y="133" width="0.3313%" height="15" fill="rgb(207,117,47)"/><text x="36.4158%" y="143.50"></text></g><g><title>type_of (254,274 samples, 0.31%)</title><rect x="36.1866%" y="117" width="0.3105%" height="15" fill="rgb(249,43,39)"/><text x="36.4366%" y="127.50"></text></g><g><title>adt_def (297,084 samples, 0.36%)</title><rect x="36.8146%" y="133" width="0.3628%" height="15" fill="rgb(209,38,44)"/><text x="37.0646%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (287,564 samples, 0.35%)</title><rect x="36.8263%" y="117" width="0.3512%" height="15" fill="rgb(236,212,23)"/><text x="37.0763%" y="127.50"></text></g><g><title>item_attrs (169,953 samples, 0.21%)</title><rect x="36.9699%" y="101" width="0.2075%" height="15" fill="rgb(242,79,21)"/><text x="37.2199%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (161,433 samples, 0.20%)</title><rect x="36.9803%" y="85" width="0.1971%" height="15" fill="rgb(211,96,35)"/><text x="37.2303%" y="95.50"></text></g><g><title>adt_def (598,794 samples, 0.73%)</title><rect x="37.6765%" y="117" width="0.7313%" height="15" fill="rgb(253,215,40)"/><text x="37.9265%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (580,424 samples, 0.71%)</title><rect x="37.6990%" y="101" width="0.7088%" height="15" fill="rgb(211,81,21)"/><text x="37.9490%" y="111.50"></text></g><g><title>item_attrs (411,233 samples, 0.50%)</title><rect x="37.9056%" y="85" width="0.5022%" height="15" fill="rgb(208,190,38)"/><text x="38.1556%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (392,633 samples, 0.48%)</title><rect x="37.9283%" y="69" width="0.4795%" height="15" fill="rgb(235,213,38)"/><text x="38.1783%" y="79.50"></text></g><g><title>adt_destructor (88,801 samples, 0.11%)</title><rect x="38.4078%" y="117" width="0.1084%" height="15" fill="rgb(237,122,38)"/><text x="38.6578%" y="127.50"></text></g><g><title>adt_def (329,752 samples, 0.40%)</title><rect x="38.7601%" y="101" width="0.4027%" height="15" fill="rgb(244,218,35)"/><text x="39.0101%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (317,482 samples, 0.39%)</title><rect x="38.7751%" y="85" width="0.3877%" height="15" fill="rgb(240,68,47)"/><text x="39.0251%" y="95.50"></text></g><g><title>item_attrs (159,702 samples, 0.20%)</title><rect x="38.9678%" y="69" width="0.1950%" height="15" fill="rgb(210,16,53)"/><text x="39.2178%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (147,132 samples, 0.18%)</title><rect x="38.9831%" y="53" width="0.1797%" height="15" fill="rgb(235,124,12)"/><text x="39.2331%" y="63.50"></text></g><g><title>adt_def (202,871 samples, 0.25%)</title><rect x="39.3610%" y="85" width="0.2477%" height="15" fill="rgb(224,169,11)"/><text x="39.6110%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (194,361 samples, 0.24%)</title><rect x="39.3714%" y="69" width="0.2374%" height="15" fill="rgb(250,166,2)"/><text x="39.6214%" y="79.50"></text></g><g><title>item_attrs (102,850 samples, 0.13%)</title><rect x="39.4831%" y="53" width="0.1256%" height="15" fill="rgb(242,216,29)"/><text x="39.7331%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (94,030 samples, 0.11%)</title><rect x="39.4939%" y="37" width="0.1148%" height="15" fill="rgb(230,116,27)"/><text x="39.7439%" y="47.50"></text></g><g><title>adt_dtorck_constraint (85,392 samples, 0.10%)</title><rect x="39.7596%" y="69" width="0.1043%" height="15" fill="rgb(228,99,48)"/><text x="40.0096%" y="79.50"></text></g><g><title>adt_dtorck_constraint (178,622 samples, 0.22%)</title><rect x="39.6642%" y="85" width="0.2181%" height="15" fill="rgb(253,11,6)"/><text x="39.9142%" y="95.50"></text></g><g><title>adt_dtorck_constraint (572,545 samples, 0.70%)</title><rect x="39.2486%" y="101" width="0.6992%" height="15" fill="rgb(247,143,39)"/><text x="39.4986%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,300,491 samples, 1.59%)</title><rect x="38.5162%" y="117" width="1.5882%" height="15" fill="rgb(236,97,10)"/><text x="38.7662%" y="127.50"></text></g><g><title>type_of (96,680 samples, 0.12%)</title><rect x="39.9863%" y="101" width="0.1181%" height="15" fill="rgb(233,208,19)"/><text x="40.2363%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,607,375 samples, 3.18%)</title><rect x="37.2337%" y="133" width="3.1842%" height="15" fill="rgb(216,164,2)"/><text x="37.4837%" y="143.50">adt..</text></g><g><title>type_of (221,635 samples, 0.27%)</title><rect x="40.1472%" y="117" width="0.2707%" height="15" fill="rgb(220,129,5)"/><text x="40.3972%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (144,693 samples, 0.18%)</title><rect x="40.2412%" y="101" width="0.1767%" height="15" fill="rgb(242,17,10)"/><text x="40.4912%" y="111.50"></text></g><g><title>adt_dtorck_constraint (3,405,575 samples, 4.16%)</title><rect x="36.4971%" y="149" width="4.1589%" height="15" fill="rgb(242,107,0)"/><text x="36.7471%" y="159.50">adt_d..</text></g><g><title>type_of (171,322 samples, 0.21%)</title><rect x="40.4468%" y="133" width="0.2092%" height="15" fill="rgb(251,28,31)"/><text x="40.6968%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (127,631 samples, 0.16%)</title><rect x="40.5002%" y="117" width="0.1559%" height="15" fill="rgb(233,223,10)"/><text x="40.7502%" y="127.50"></text></g><g><title>dropck_outlives (4,660,891 samples, 5.69%)</title><rect x="35.1023%" y="181" width="5.6920%" height="15" fill="rgb(215,21,27)"/><text x="35.3523%" y="191.50">dropck_..</text></g><g><title>adt_dtorck_constraint (4,219,606 samples, 5.15%)</title><rect x="35.6412%" y="165" width="5.1531%" height="15" fill="rgb(232,23,21)"/><text x="35.8912%" y="175.50">adt_dt..</text></g><g><title>type_of (90,771 samples, 0.11%)</title><rect x="40.6834%" y="149" width="0.1109%" height="15" fill="rgb(244,5,23)"/><text x="40.9334%" y="159.50"></text></g><g><title>adt_def (142,872 samples, 0.17%)</title><rect x="41.5383%" y="149" width="0.1745%" height="15" fill="rgb(226,81,46)"/><text x="41.7883%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (139,292 samples, 0.17%)</title><rect x="41.5426%" y="133" width="0.1701%" height="15" fill="rgb(247,70,30)"/><text x="41.7926%" y="143.50"></text></g><g><title>item_attrs (97,131 samples, 0.12%)</title><rect x="41.5941%" y="117" width="0.1186%" height="15" fill="rgb(212,68,19)"/><text x="41.8441%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (93,161 samples, 0.11%)</title><rect x="41.5990%" y="101" width="0.1138%" height="15" fill="rgb(240,187,13)"/><text x="41.8490%" y="111.50"></text></g><g><title>adt_def (95,352 samples, 0.12%)</title><rect x="41.7190%" y="133" width="0.1164%" height="15" fill="rgb(223,113,26)"/><text x="41.9690%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (94,692 samples, 0.12%)</title><rect x="41.7198%" y="117" width="0.1156%" height="15" fill="rgb(206,192,2)"/><text x="41.9698%" y="127.50"></text></g><g><title>item_attrs (85,932 samples, 0.10%)</title><rect x="41.7305%" y="101" width="0.1049%" height="15" fill="rgb(241,108,4)"/><text x="41.9805%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (85,182 samples, 0.10%)</title><rect x="41.7314%" y="85" width="0.1040%" height="15" fill="rgb(247,173,49)"/><text x="41.9814%" y="95.50"></text></g><g><title>adt_sized_constraint (101,171 samples, 0.12%)</title><rect x="41.8911%" y="101" width="0.1236%" height="15" fill="rgb(224,114,35)"/><text x="42.1411%" y="111.50"></text></g><g><title>adt_sized_constraint (133,851 samples, 0.16%)</title><rect x="41.8624%" y="117" width="0.1635%" height="15" fill="rgb(245,159,27)"/><text x="42.1124%" y="127.50"></text></g><g><title>adt_sized_constraint (161,941 samples, 0.20%)</title><rect x="41.8354%" y="133" width="0.1978%" height="15" fill="rgb(245,172,44)"/><text x="42.0854%" y="143.50"></text></g><g><title>adt_sized_constraint (279,483 samples, 0.34%)</title><rect x="41.7127%" y="149" width="0.3413%" height="15" fill="rgb(236,23,11)"/><text x="41.9627%" y="159.50"></text></g><g><title>adt_sized_constraint (449,635 samples, 0.55%)</title><rect x="41.5176%" y="165" width="0.5491%" height="15" fill="rgb(205,117,38)"/><text x="41.7676%" y="175.50"></text></g><g><title>predicates_of (119,930 samples, 0.15%)</title><rect x="42.2142%" y="165" width="0.1465%" height="15" fill="rgb(237,72,25)"/><text x="42.4642%" y="175.50"></text></g><g><title>evaluate_obligation (2,354,104 samples, 2.87%)</title><rect x="40.7943%" y="181" width="2.8749%" height="15" fill="rgb(244,70,9)"/><text x="41.0443%" y="191.50">ev..</text></g><g><title>trait_impls_of (1,000,270 samples, 1.22%)</title><rect x="42.4476%" y="165" width="1.2215%" height="15" fill="rgb(217,125,39)"/><text x="42.6976%" y="175.50"></text></g><g><title>implementations_of_trait (301,493 samples, 0.37%)</title><rect x="43.3010%" y="149" width="0.3682%" height="15" fill="rgb(235,36,10)"/><text x="43.5510%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (214,493 samples, 0.26%)</title><rect x="43.4072%" y="133" width="0.2619%" height="15" fill="rgb(251,123,47)"/><text x="43.6572%" y="143.50"></text></g><g><title>fn_sig (131,192 samples, 0.16%)</title><rect x="43.6968%" y="181" width="0.1602%" height="15" fill="rgb(221,13,13)"/><text x="43.9468%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (119,042 samples, 0.15%)</title><rect x="43.7116%" y="165" width="0.1454%" height="15" fill="rgb(238,131,9)"/><text x="43.9616%" y="175.50"></text></g><g><title>generics_of (172,292 samples, 0.21%)</title><rect x="43.8570%" y="181" width="0.2104%" height="15" fill="rgb(211,50,8)"/><text x="44.1070%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (134,452 samples, 0.16%)</title><rect x="43.9032%" y="165" width="0.1642%" height="15" fill="rgb(245,182,24)"/><text x="44.1532%" y="175.50"></text></g><g><title>impl_trait_ref (119,461 samples, 0.15%)</title><rect x="44.1320%" y="181" width="0.1459%" height="15" fill="rgb(242,14,37)"/><text x="44.3820%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (107,840 samples, 0.13%)</title><rect x="44.1462%" y="165" width="0.1317%" height="15" fill="rgb(246,228,12)"/><text x="44.3962%" y="175.50"></text></g><g><title>lint_levels (96,541 samples, 0.12%)</title><rect x="44.4351%" y="181" width="0.1179%" height="15" fill="rgb(213,55,15)"/><text x="44.6851%" y="191.50"></text></g><g><title>adt_def (245,423 samples, 0.30%)</title><rect x="44.8509%" y="133" width="0.2997%" height="15" fill="rgb(209,9,3)"/><text x="45.1009%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (245,083 samples, 0.30%)</title><rect x="44.8513%" y="117" width="0.2993%" height="15" fill="rgb(230,59,30)"/><text x="45.1013%" y="127.50"></text></g><g><title>item_attrs (240,223 samples, 0.29%)</title><rect x="44.8572%" y="101" width="0.2934%" height="15" fill="rgb(209,121,21)"/><text x="45.1072%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (239,813 samples, 0.29%)</title><rect x="44.8577%" y="85" width="0.2929%" height="15" fill="rgb(220,109,13)"/><text x="45.1077%" y="95.50"></text></g><g><title>adt_sized_constraint (248,133 samples, 0.30%)</title><rect x="44.8484%" y="149" width="0.3030%" height="15" fill="rgb(232,18,1)"/><text x="45.0984%" y="159.50"></text></g><g><title>evaluate_obligation (389,894 samples, 0.48%)</title><rect x="44.7250%" y="165" width="0.4761%" height="15" fill="rgb(215,41,42)"/><text x="44.9750%" y="175.50"></text></g><g><title>method_autoderef_steps (514,455 samples, 0.63%)</title><rect x="44.5980%" y="181" width="0.6283%" height="15" fill="rgb(224,123,36)"/><text x="44.8480%" y="191.50"></text></g><g><title>explicit_predicates_of (156,553 samples, 0.19%)</title><rect x="45.4791%" y="149" width="0.1912%" height="15" fill="rgb(240,125,3)"/><text x="45.7291%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (130,622 samples, 0.16%)</title><rect x="45.5107%" y="133" width="0.1595%" height="15" fill="rgb(205,98,50)"/><text x="45.7607%" y="143.50"></text></g><g><title>predicates_of (395,584 samples, 0.48%)</title><rect x="45.2427%" y="181" width="0.4831%" height="15" fill="rgb(205,185,37)"/><text x="45.4927%" y="191.50"></text></g><g><title>predicates_defined_on (277,344 samples, 0.34%)</title><rect x="45.3871%" y="165" width="0.3387%" height="15" fill="rgb(238,207,15)"/><text x="45.6371%" y="175.50"></text></g><g><title>trait_impls_of (107,941 samples, 0.13%)</title><rect x="45.8267%" y="181" width="0.1318%" height="15" fill="rgb(213,199,42)"/><text x="46.0767%" y="191.50"></text></g><g><title>type_of (89,820 samples, 0.11%)</title><rect x="45.9585%" y="181" width="0.1097%" height="15" fill="rgb(235,201,11)"/><text x="46.2085%" y="191.50"></text></g><g><title>typeck (17,674,145 samples, 21.58%)</title><rect x="24.5443%" y="197" width="21.5840%" height="15" fill="rgb(207,46,11)"/><text x="24.7943%" y="207.50">typeck</text></g><g><title>item_bodies_checking (18,073,189 samples, 22.07%)</title><rect x="24.0579%" y="245" width="22.0713%" height="15" fill="rgb(241,35,35)"/><text x="24.3079%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,070,669 samples, 22.07%)</title><rect x="24.0609%" y="229" width="22.0682%" height="15" fill="rgb(243,32,47)"/><text x="24.3109%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (18,063,409 samples, 22.06%)</title><rect x="24.0698%" y="213" width="22.0594%" height="15" fill="rgb(247,202,23)"/><text x="24.3198%" y="223.50">typeck</text></g><g><title>impl_parent (89,760 samples, 0.11%)</title><rect x="46.8448%" y="85" width="0.1096%" height="15" fill="rgb(219,102,11)"/><text x="47.0948%" y="95.50"></text></g><g><title>impl_trait_ref (324,925 samples, 0.40%)</title><rect x="46.9544%" y="85" width="0.3968%" height="15" fill="rgb(243,110,44)"/><text x="47.2044%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (303,305 samples, 0.37%)</title><rect x="46.9808%" y="69" width="0.3704%" height="15" fill="rgb(222,74,54)"/><text x="47.2308%" y="79.50"></text></g><g><title>coherent_trait (560,347 samples, 0.68%)</title><rect x="46.7068%" y="117" width="0.6843%" height="15" fill="rgb(216,99,12)"/><text x="46.9568%" y="127.50"></text></g><g><title>specialization_graph_of (556,827 samples, 0.68%)</title><rect x="46.7111%" y="101" width="0.6800%" height="15" fill="rgb(226,22,26)"/><text x="46.9611%" y="111.50"></text></g><g><title>adt_destructor (567,907 samples, 0.69%)</title><rect x="46.6998%" y="149" width="0.6935%" height="15" fill="rgb(217,163,10)"/><text x="46.9498%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (567,417 samples, 0.69%)</title><rect x="46.7004%" y="133" width="0.6929%" height="15" fill="rgb(213,25,53)"/><text x="46.9504%" y="143.50"></text></g><g><title>adt_dtorck_constraint (573,827 samples, 0.70%)</title><rect x="46.6930%" y="165" width="0.7008%" height="15" fill="rgb(252,105,26)"/><text x="46.9430%" y="175.50"></text></g><g><title>dropck_outlives (602,517 samples, 0.74%)</title><rect x="46.6595%" y="197" width="0.7358%" height="15" fill="rgb(220,39,43)"/><text x="46.9095%" y="207.50"></text></g><g><title>adt_dtorck_constraint (586,347 samples, 0.72%)</title><rect x="46.6792%" y="181" width="0.7161%" height="15" fill="rgb(229,68,48)"/><text x="46.9292%" y="191.50"></text></g><g><title>evaluate_obligation (102,811 samples, 0.13%)</title><rect x="47.3953%" y="197" width="0.1256%" height="15" fill="rgb(252,8,32)"/><text x="47.6453%" y="207.50"></text></g><g><title>adt_sized_constraint (93,791 samples, 0.11%)</title><rect x="47.4063%" y="181" width="0.1145%" height="15" fill="rgb(223,20,43)"/><text x="47.6563%" y="191.50"></text></g><g><title>item_types_checking (1,240,364 samples, 1.51%)</title><rect x="46.1292%" y="245" width="1.5148%" height="15" fill="rgb(229,81,49)"/><text x="46.3792%" y="255.50"></text></g><g><title>check_mod_item_types (1,238,634 samples, 1.51%)</title><rect x="46.1313%" y="229" width="1.5126%" height="15" fill="rgb(236,28,36)"/><text x="46.3813%" y="239.50"></text></g><g><title>typeck (1,203,183 samples, 1.47%)</title><rect x="46.1746%" y="213" width="1.4693%" height="15" fill="rgb(249,185,26)"/><text x="46.4246%" y="223.50"></text></g><g><title>fn_sig (123,811 samples, 0.15%)</title><rect x="47.7183%" y="213" width="0.1512%" height="15" fill="rgb(249,174,33)"/><text x="47.9683%" y="223.50"></text></g><g><title>type_collecting (292,434 samples, 0.36%)</title><rect x="47.6457%" y="245" width="0.3571%" height="15" fill="rgb(233,201,37)"/><text x="47.8957%" y="255.50"></text></g><g><title>collect_mod_item_types (285,664 samples, 0.35%)</title><rect x="47.6539%" y="229" width="0.3489%" height="15" fill="rgb(221,78,26)"/><text x="47.9039%" y="239.50"></text></g><g><title>evaluate_obligation (267,004 samples, 0.33%)</title><rect x="48.3777%" y="213" width="0.3261%" height="15" fill="rgb(250,127,30)"/><text x="48.6277%" y="223.50"></text></g><g><title>param_env (144,692 samples, 0.18%)</title><rect x="48.7645%" y="213" width="0.1767%" height="15" fill="rgb(230,49,44)"/><text x="49.0145%" y="223.50"></text></g><g><title>region_scope_tree (118,131 samples, 0.14%)</title><rect x="48.9546%" y="213" width="0.1443%" height="15" fill="rgb(229,67,23)"/><text x="49.2046%" y="223.50"></text></g><g><title>analysis (39,602,278 samples, 48.36%)</title><rect x="0.7364%" y="277" width="48.3630%" height="15" fill="rgb(249,83,47)"/><text x="0.9864%" y="287.50">analysis</text></g><g><title>type_check_crate (20,557,238 samples, 25.10%)</title><rect x="23.9945%" y="261" width="25.1049%" height="15" fill="rgb(215,43,3)"/><text x="24.2445%" y="271.50">type_check_crate</text></g><g><title>wf_checking (896,790 samples, 1.10%)</title><rect x="48.0042%" y="245" width="1.0952%" height="15" fill="rgb(238,154,13)"/><text x="48.2542%" y="255.50"></text></g><g><title>check_item_well_formed (869,370 samples, 1.06%)</title><rect x="48.0377%" y="229" width="1.0617%" height="15" fill="rgb(219,56,2)"/><text x="48.2877%" y="239.50"></text></g><g><title>codegen_crate (398,234 samples, 0.49%)</title><rect x="49.1134%" y="277" width="0.4863%" height="15" fill="rgb(233,0,4)"/><text x="49.3634%" y="287.50"></text></g><g><title>metadata_load_macro (867,791 samples, 1.06%)</title><rect x="81.7391%" y="229" width="1.0598%" height="15" fill="rgb(235,30,7)"/><text x="81.9891%" y="239.50"></text></g><g><title>macro_expand_crate (29,746,419 samples, 36.33%)</title><rect x="50.0910%" y="261" width="36.3269%" height="15" fill="rgb(250,79,13)"/><text x="50.3410%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (29,727,328 samples, 36.30%)</title><rect x="50.1143%" y="245" width="36.3035%" height="15" fill="rgb(211,146,34)"/><text x="50.3643%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,963,401 samples, 3.62%)</title><rect x="82.7989%" y="229" width="3.6190%" height="15" fill="rgb(228,22,38)"/><text x="83.0489%" y="239.50">meta..</text></g><g><title>metadata_register_crate (1,086,391 samples, 1.33%)</title><rect x="85.0911%" y="213" width="1.3267%" height="15" fill="rgb(235,168,5)"/><text x="85.3411%" y="223.50"></text></g><g><title>metadata_register_crate (90,050 samples, 0.11%)</title><rect x="86.3079%" y="197" width="0.1100%" height="15" fill="rgb(221,155,16)"/><text x="86.5579%" y="207.50"></text></g><g><title>maybe_create_a_macro_crate (337,094 samples, 0.41%)</title><rect x="86.4250%" y="261" width="0.4117%" height="15" fill="rgb(215,215,53)"/><text x="86.6750%" y="271.50"></text></g><g><title>pre_AST_expansion_lint_checks (186,192 samples, 0.23%)</title><rect x="86.8367%" y="261" width="0.2274%" height="15" fill="rgb(223,4,10)"/><text x="87.0867%" y="271.50"></text></g><g><title>finalize_imports (242,063 samples, 0.30%)</title><rect x="87.0698%" y="245" width="0.2956%" height="15" fill="rgb(234,103,6)"/><text x="87.3198%" y="255.50"></text></g><g><title>finalize_macro_resolutions (120,601 samples, 0.15%)</title><rect x="87.3654%" y="245" width="0.1473%" height="15" fill="rgb(227,97,0)"/><text x="87.6154%" y="255.50"></text></g><g><title>late_resolve_crate (1,112,522 samples, 1.36%)</title><rect x="87.5127%" y="245" width="1.3586%" height="15" fill="rgb(234,150,53)"/><text x="87.7627%" y="255.50"></text></g><g><title>configure_and_expand (32,207,576 samples, 39.33%)</title><rect x="49.5998%" y="277" width="39.3325%" height="15" fill="rgb(228,201,54)"/><text x="49.8498%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (1,529,757 samples, 1.87%)</title><rect x="87.0641%" y="261" width="1.8682%" height="15" fill="rgb(222,22,37)"/><text x="87.3141%" y="271.50">r..</text></g><g><title>early_lint_checks (181,792 samples, 0.22%)</title><rect x="89.0401%" y="277" width="0.2220%" height="15" fill="rgb(237,53,32)"/><text x="89.2901%" y="287.50"></text></g><g><title>free_global_ctxt (4,288,038 samples, 5.24%)</title><rect x="89.2621%" y="277" width="5.2366%" height="15" fill="rgb(233,25,53)"/><text x="89.5121%" y="287.50">free_g..</text></g><g><title>generate_crate_metadata (178,322 samples, 0.22%)</title><rect x="94.4988%" y="277" width="0.2178%" height="15" fill="rgb(210,40,34)"/><text x="94.7488%" y="287.50"></text></g><g><title>hir_lowering (835,989 samples, 1.02%)</title><rect x="94.7165%" y="277" width="1.0209%" height="15" fill="rgb(241,220,44)"/><text x="94.9665%" y="287.50"></text></g><g><title>parse_crate (1,875,061 samples, 2.29%)</title><rect x="95.8224%" y="277" width="2.2899%" height="15" fill="rgb(235,28,35)"/><text x="96.0724%" y="287.50">p..</text></g><g><title>prepare_outputs (165,842 samples, 0.20%)</title><rect x="98.1242%" y="277" width="0.2025%" height="15" fill="rgb(210,56,17)"/><text x="98.3742%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (916,530 samples, 1.12%)</title><rect x="98.3268%" y="277" width="1.1193%" height="15" fill="rgb(224,130,29)"/><text x="98.5768%" y="287.50"></text></g><g><title>setup_global_ctxt (96,601 samples, 0.12%)</title><rect x="99.4651%" y="277" width="0.1180%" height="15" fill="rgb(235,212,8)"/><text x="99.7151%" y="287.50"></text></g><g><title>all (81,885,476 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(223,33,50)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (81,885,476 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (341,424 samples, 0.42%)</title><rect x="99.5830%" y="277" width="0.4170%" height="15" fill="rgb(250,156,29)"/><text x="99.8330%" y="287.50"></text></g></svg></svg>