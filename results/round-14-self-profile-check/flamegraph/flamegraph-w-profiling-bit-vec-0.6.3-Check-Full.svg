<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (258,035 samples, 0.13%)</title><rect x="10.8569%" y="149" width="0.1331%" height="15" fill="rgb(227,0,7)"/><text x="11.1069%" y="159.50"></text></g><g><title>param_env (536,916 samples, 0.28%)</title><rect x="12.5907%" y="117" width="0.2769%" height="15" fill="rgb(217,0,24)"/><text x="12.8407%" y="127.50"></text></g><g><title>item_attrs (528,539 samples, 0.27%)</title><rect x="13.3850%" y="85" width="0.2725%" height="15" fill="rgb(221,193,54)"/><text x="13.6350%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (512,059 samples, 0.26%)</title><rect x="13.3935%" y="69" width="0.2640%" height="15" fill="rgb(248,212,6)"/><text x="13.6435%" y="79.50"></text></g><g><title>codegen_fn_attrs (717,611 samples, 0.37%)</title><rect x="13.3002%" y="101" width="0.3700%" height="15" fill="rgb(208,68,35)"/><text x="13.5502%" y="111.50"></text></g><g><title>adt_drop_tys (220,622 samples, 0.11%)</title><rect x="16.3276%" y="69" width="0.1138%" height="15" fill="rgb(232,128,0)"/><text x="16.5776%" y="79.50"></text></g><g><title>needs_drop_raw (1,531,221 samples, 0.79%)</title><rect x="16.2486%" y="85" width="0.7896%" height="15" fill="rgb(207,160,47)"/><text x="16.4986%" y="95.50"></text></g><g><title>is_copy_raw (1,157,316 samples, 0.60%)</title><rect x="16.4414%" y="69" width="0.5968%" height="15" fill="rgb(228,23,34)"/><text x="16.6914%" y="79.50"></text></g><g><title>evaluate_obligation (968,582 samples, 0.50%)</title><rect x="16.5387%" y="53" width="0.4994%" height="15" fill="rgb(218,30,26)"/><text x="16.7887%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (644,648 samples, 0.33%)</title><rect x="17.2788%" y="69" width="0.3324%" height="15" fill="rgb(220,122,19)"/><text x="17.5288%" y="79.50"></text></g><g><title>impl_parent (195,884 samples, 0.10%)</title><rect x="17.8892%" y="53" width="0.1010%" height="15" fill="rgb(250,228,42)"/><text x="18.1392%" y="63.50"></text></g><g><title>specialization_graph_of (1,023,543 samples, 0.53%)</title><rect x="17.6811%" y="69" width="0.5278%" height="15" fill="rgb(240,193,28)"/><text x="17.9311%" y="79.50"></text></g><g><title>impl_trait_ref (423,976 samples, 0.22%)</title><rect x="17.9902%" y="53" width="0.2186%" height="15" fill="rgb(216,20,37)"/><text x="18.2402%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (327,155 samples, 0.17%)</title><rect x="18.0402%" y="37" width="0.1687%" height="15" fill="rgb(206,188,39)"/><text x="18.2902%" y="47.50"></text></g><g><title>resolve_instance (2,417,850 samples, 1.25%)</title><rect x="17.0535%" y="85" width="1.2467%" height="15" fill="rgb(217,207,13)"/><text x="17.3035%" y="95.50"></text></g><g><title>thir_body (1,903,380 samples, 0.98%)</title><rect x="18.3305%" y="85" width="0.9815%" height="15" fill="rgb(231,73,38)"/><text x="18.5805%" y="95.50"></text></g><g><title>mir_const (14,646,144 samples, 7.55%)</title><rect x="11.7814%" y="133" width="7.5521%" height="15" fill="rgb(225,20,46)"/><text x="12.0314%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (12,539,772 samples, 6.47%)</title><rect x="12.8675%" y="117" width="6.4660%" height="15" fill="rgb(210,31,41)"/><text x="13.1175%" y="127.50">unsafety..</text></g><g><title>mir_built (10,982,933 samples, 5.66%)</title><rect x="13.6703%" y="101" width="5.6632%" height="15" fill="rgb(221,200,47)"/><text x="13.9203%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (16,160,598 samples, 8.33%)</title><rect x="11.0699%" y="149" width="8.3330%" height="15" fill="rgb(226,26,5)"/><text x="11.3199%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (270,073 samples, 0.14%)</title><rect x="19.4029%" y="149" width="0.1393%" height="15" fill="rgb(249,33,26)"/><text x="19.6529%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,498,886 samples, 0.77%)</title><rect x="19.5422%" y="149" width="0.7729%" height="15" fill="rgb(235,183,28)"/><text x="19.7922%" y="159.50"></text></g><g><title>normalize_projection_ty (889,761 samples, 0.46%)</title><rect x="19.8563%" y="133" width="0.4588%" height="15" fill="rgb(221,5,38)"/><text x="20.1063%" y="143.50"></text></g><g><title>type_op_normalize_predicate (466,587 samples, 0.24%)</title><rect x="20.3150%" y="149" width="0.2406%" height="15" fill="rgb(247,18,42)"/><text x="20.5650%" y="159.50"></text></g><g><title>normalize_projection_ty (242,963 samples, 0.13%)</title><rect x="20.4304%" y="133" width="0.1253%" height="15" fill="rgb(241,131,45)"/><text x="20.6804%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,752,371 samples, 1.93%)</title><rect x="20.5626%" y="149" width="1.9349%" height="15" fill="rgb(249,31,29)"/><text x="20.8126%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (42,594,901 samples, 21.96%)</title><rect x="0.5350%" y="181" width="21.9636%" height="15" fill="rgb(225,111,53)"/><text x="0.7850%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,374,879 samples, 21.85%)</title><rect x="0.6484%" y="165" width="21.8501%" height="15" fill="rgb(238,160,17)"/><text x="0.8984%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (211,353 samples, 0.11%)</title><rect x="22.5800%" y="181" width="0.1090%" height="15" fill="rgb(214,148,48)"/><text x="22.8300%" y="191.50"></text></g><g><title>should_inherit_track_caller (366,444 samples, 0.19%)</title><rect x="22.9625%" y="133" width="0.1890%" height="15" fill="rgb(232,36,49)"/><text x="23.2125%" y="143.50"></text></g><g><title>codegen_fn_attrs (584,286 samples, 0.30%)</title><rect x="22.8583%" y="149" width="0.3013%" height="15" fill="rgb(209,103,24)"/><text x="23.1083%" y="159.50"></text></g><g><title>check_mod_attrs (894,160 samples, 0.46%)</title><rect x="22.6986%" y="165" width="0.4611%" height="15" fill="rgb(229,88,8)"/><text x="22.9486%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (629,846 samples, 0.32%)</title><rect x="23.2889%" y="165" width="0.3248%" height="15" fill="rgb(213,181,19)"/><text x="23.5389%" y="175.50"></text></g><g><title>misc_checking_1 (1,833,930 samples, 0.95%)</title><rect x="22.6892%" y="181" width="0.9456%" height="15" fill="rgb(254,191,54)"/><text x="22.9392%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (710,288 samples, 0.37%)</title><rect x="23.6357%" y="165" width="0.3663%" height="15" fill="rgb(241,83,37)"/><text x="23.8857%" y="175.50"></text></g><g><title>check_mod_liveness (583,387 samples, 0.30%)</title><rect x="23.7011%" y="149" width="0.3008%" height="15" fill="rgb(233,36,39)"/><text x="23.9511%" y="159.50"></text></g><g><title>param_env (291,654 samples, 0.15%)</title><rect x="24.3444%" y="133" width="0.1504%" height="15" fill="rgb(226,3,54)"/><text x="24.5944%" y="143.50"></text></g><g><title>misc_checking_2 (1,668,938 samples, 0.86%)</title><rect x="23.6349%" y="181" width="0.8606%" height="15" fill="rgb(245,192,40)"/><text x="23.8849%" y="191.50"></text></g><g><title>match_checking (957,050 samples, 0.49%)</title><rect x="24.0019%" y="165" width="0.4935%" height="15" fill="rgb(238,167,29)"/><text x="24.2519%" y="175.50"></text></g><g><title>check_match (908,919 samples, 0.47%)</title><rect x="24.0268%" y="149" width="0.4687%" height="15" fill="rgb(232,182,51)"/><text x="24.2768%" y="159.50"></text></g><g><title>check_private_in_public (241,402 samples, 0.12%)</title><rect x="24.5009%" y="165" width="0.1245%" height="15" fill="rgb(231,60,39)"/><text x="24.7509%" y="175.50"></text></g><g><title>death_checking (409,545 samples, 0.21%)</title><rect x="24.6254%" y="165" width="0.2112%" height="15" fill="rgb(208,69,12)"/><text x="24.8754%" y="175.50"></text></g><g><title>crate_lints (2,159,534 samples, 1.11%)</title><rect x="24.8373%" y="149" width="1.1135%" height="15" fill="rgb(235,93,37)"/><text x="25.0873%" y="159.50"></text></g><g><title>type_of (1,102,651 samples, 0.57%)</title><rect x="25.3823%" y="133" width="0.5686%" height="15" fill="rgb(213,116,39)"/><text x="25.6323%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (869,539 samples, 0.45%)</title><rect x="25.5025%" y="117" width="0.4484%" height="15" fill="rgb(222,207,29)"/><text x="25.7525%" y="127.50"></text></g><g><title>lint_checking (2,710,160 samples, 1.40%)</title><rect x="24.8365%" y="165" width="1.3975%" height="15" fill="rgb(206,96,30)"/><text x="25.0865%" y="175.50"></text></g><g><title>module_lints (549,066 samples, 0.28%)</title><rect x="25.9509%" y="149" width="0.2831%" height="15" fill="rgb(218,138,4)"/><text x="26.2009%" y="159.50"></text></g><g><title>lint_mod (546,596 samples, 0.28%)</title><rect x="25.9521%" y="133" width="0.2818%" height="15" fill="rgb(250,191,14)"/><text x="26.2021%" y="143.50"></text></g><g><title>privacy_access_levels (341,654 samples, 0.18%)</title><rect x="26.2340%" y="165" width="0.1762%" height="15" fill="rgb(239,60,40)"/><text x="26.4840%" y="175.50"></text></g><g><title>privacy_checking_modules (935,161 samples, 0.48%)</title><rect x="26.4102%" y="165" width="0.4822%" height="15" fill="rgb(206,27,48)"/><text x="26.6602%" y="175.50"></text></g><g><title>check_mod_privacy (933,581 samples, 0.48%)</title><rect x="26.4110%" y="149" width="0.4814%" height="15" fill="rgb(225,35,8)"/><text x="26.6610%" y="159.50"></text></g><g><title>misc_checking_3 (4,671,292 samples, 2.41%)</title><rect x="24.4954%" y="181" width="2.4087%" height="15" fill="rgb(250,213,24)"/><text x="24.7454%" y="191.50">mi..</text></g><g><title>impl_parent (2,669,993 samples, 1.38%)</title><rect x="29.0926%" y="117" width="1.3768%" height="15" fill="rgb(247,123,22)"/><text x="29.3426%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,496,647 samples, 0.77%)</title><rect x="29.6976%" y="101" width="0.7717%" height="15" fill="rgb(231,138,38)"/><text x="29.9476%" y="111.50"></text></g><g><title>impl_trait_ref (5,421,954 samples, 2.80%)</title><rect x="30.4694%" y="117" width="2.7958%" height="15" fill="rgb(231,145,46)"/><text x="30.7194%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,467,628 samples, 2.30%)</title><rect x="30.9614%" y="101" width="2.3037%" height="15" fill="rgb(251,118,11)"/><text x="31.2114%" y="111.50">m..</text></g><g><title>trait_impls_of (808,881 samples, 0.42%)</title><rect x="33.3975%" y="117" width="0.4171%" height="15" fill="rgb(217,147,25)"/><text x="33.6475%" y="127.50"></text></g><g><title>implementations_of_trait (237,944 samples, 0.12%)</title><rect x="33.6919%" y="101" width="0.1227%" height="15" fill="rgb(247,81,37)"/><text x="33.9419%" y="111.50"></text></g><g><title>coherent_trait (13,310,307 samples, 6.86%)</title><rect x="26.9593%" y="149" width="6.8633%" height="15" fill="rgb(209,12,38)"/><text x="27.2093%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (13,287,075 samples, 6.85%)</title><rect x="26.9713%" y="133" width="6.8513%" height="15" fill="rgb(227,1,9)"/><text x="27.2213%" y="143.50">specializ..</text></g><g><title>coherence_checking (13,406,289 samples, 6.91%)</title><rect x="26.9466%" y="165" width="6.9128%" height="15" fill="rgb(248,47,43)"/><text x="27.1966%" y="175.50">coherence..</text></g><g><title>associated_item (1,099,205 samples, 0.57%)</title><rect x="49.4555%" y="101" width="0.5668%" height="15" fill="rgb(221,10,30)"/><text x="49.7055%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (953,113 samples, 0.49%)</title><rect x="49.5308%" y="85" width="0.4915%" height="15" fill="rgb(210,229,1)"/><text x="49.7808%" y="95.50"></text></g><g><title>associated_items (1,368,886 samples, 0.71%)</title><rect x="49.3383%" y="117" width="0.7059%" height="15" fill="rgb(222,148,37)"/><text x="49.5883%" y="127.50"></text></g><g><title>adt_dtorck_constraint (264,502 samples, 0.14%)</title><rect x="50.2688%" y="101" width="0.1364%" height="15" fill="rgb(234,67,33)"/><text x="50.5188%" y="111.50"></text></g><g><title>dropck_outlives (577,264 samples, 0.30%)</title><rect x="50.1141%" y="117" width="0.2977%" height="15" fill="rgb(247,98,35)"/><text x="50.3641%" y="127.50"></text></g><g><title>generics_of (438,206 samples, 0.23%)</title><rect x="52.3012%" y="101" width="0.2260%" height="15" fill="rgb(247,138,52)"/><text x="52.5512%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (336,314 samples, 0.17%)</title><rect x="52.3538%" y="85" width="0.1734%" height="15" fill="rgb(213,79,30)"/><text x="52.6038%" y="95.50"></text></g><g><title>impl_trait_ref (515,915 samples, 0.27%)</title><rect x="52.5811%" y="101" width="0.2660%" height="15" fill="rgb(246,177,23)"/><text x="52.8311%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (431,195 samples, 0.22%)</title><rect x="52.6248%" y="85" width="0.2223%" height="15" fill="rgb(230,62,27)"/><text x="52.8748%" y="95.50"></text></g><g><title>predicates_of (558,591 samples, 0.29%)</title><rect x="52.8658%" y="101" width="0.2880%" height="15" fill="rgb(216,154,8)"/><text x="53.1158%" y="111.50"></text></g><g><title>predicates_defined_on (321,988 samples, 0.17%)</title><rect x="52.9878%" y="85" width="0.1660%" height="15" fill="rgb(244,35,45)"/><text x="53.2378%" y="95.50"></text></g><g><title>specializes (1,276,708 samples, 0.66%)</title><rect x="53.1538%" y="101" width="0.6583%" height="15" fill="rgb(251,115,12)"/><text x="53.4038%" y="111.50"></text></g><g><title>param_env (760,126 samples, 0.39%)</title><rect x="53.4202%" y="85" width="0.3920%" height="15" fill="rgb(240,54,50)"/><text x="53.6702%" y="95.50"></text></g><g><title>def_span (324,903 samples, 0.17%)</title><rect x="53.6446%" y="69" width="0.1675%" height="15" fill="rgb(233,84,52)"/><text x="53.8946%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (289,773 samples, 0.15%)</title><rect x="53.6627%" y="53" width="0.1494%" height="15" fill="rgb(207,117,47)"/><text x="53.9127%" y="63.50"></text></g><g><title>trait_impls_of (402,423 samples, 0.21%)</title><rect x="53.8225%" y="101" width="0.2075%" height="15" fill="rgb(249,43,39)"/><text x="54.0725%" y="111.50"></text></g><g><title>evaluate_obligation (7,028,006 samples, 3.62%)</title><rect x="50.4118%" y="117" width="3.6239%" height="15" fill="rgb(209,38,44)"/><text x="50.6618%" y="127.50">eval..</text></g><g><title>fn_sig (408,474 samples, 0.21%)</title><rect x="54.0545%" y="117" width="0.2106%" height="15" fill="rgb(236,212,23)"/><text x="54.3045%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (383,374 samples, 0.20%)</title><rect x="54.0674%" y="101" width="0.1977%" height="15" fill="rgb(242,79,21)"/><text x="54.3174%" y="111.50"></text></g><g><title>generics_of (361,337 samples, 0.19%)</title><rect x="54.2651%" y="117" width="0.1863%" height="15" fill="rgb(211,96,35)"/><text x="54.5151%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (278,106 samples, 0.14%)</title><rect x="54.3080%" y="101" width="0.1434%" height="15" fill="rgb(253,215,40)"/><text x="54.5580%" y="111.50"></text></g><g><title>impl_item_implementor_ids (245,672 samples, 0.13%)</title><rect x="54.4514%" y="117" width="0.1267%" height="15" fill="rgb(211,81,21)"/><text x="54.7014%" y="127.50"></text></g><g><title>associated_items (224,432 samples, 0.12%)</title><rect x="54.4624%" y="101" width="0.1157%" height="15" fill="rgb(208,190,38)"/><text x="54.7124%" y="111.50"></text></g><g><title>item_attrs (198,201 samples, 0.10%)</title><rect x="54.6962%" y="117" width="0.1022%" height="15" fill="rgb(235,213,38)"/><text x="54.9462%" y="127.50"></text></g><g><title>evaluate_obligation (278,804 samples, 0.14%)</title><rect x="54.9831%" y="101" width="0.1438%" height="15" fill="rgb(237,122,38)"/><text x="55.2331%" y="111.50"></text></g><g><title>method_autoderef_steps (544,276 samples, 0.28%)</title><rect x="54.8511%" y="117" width="0.2806%" height="15" fill="rgb(244,218,35)"/><text x="55.1011%" y="127.50"></text></g><g><title>predicates_of (498,017 samples, 0.26%)</title><rect x="55.1708%" y="117" width="0.2568%" height="15" fill="rgb(240,68,47)"/><text x="55.4208%" y="127.50"></text></g><g><title>predicates_defined_on (336,634 samples, 0.17%)</title><rect x="55.2540%" y="101" width="0.1736%" height="15" fill="rgb(210,16,53)"/><text x="55.5040%" y="111.50"></text></g><g><title>evaluate_obligation (633,630 samples, 0.33%)</title><rect x="60.7956%" y="101" width="0.3267%" height="15" fill="rgb(235,124,12)"/><text x="61.0456%" y="111.50"></text></g><g><title>method_autoderef_steps (196,401 samples, 0.10%)</title><rect x="61.2782%" y="101" width="0.1013%" height="15" fill="rgb(224,169,11)"/><text x="61.5282%" y="111.50"></text></g><g><title>typeck (11,508,885 samples, 5.93%)</title><rect x="55.5159%" y="117" width="5.9344%" height="15" fill="rgb(250,166,2)"/><text x="55.7659%" y="127.50">typeck</text></g><g><title>item_bodies_checking (53,535,712 samples, 27.61%)</title><rect x="33.8802%" y="165" width="27.6051%" height="15" fill="rgb(242,216,29)"/><text x="34.1302%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (53,532,112 samples, 27.60%)</title><rect x="33.8821%" y="149" width="27.6032%" height="15" fill="rgb(230,116,27)"/><text x="34.1321%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (53,402,808 samples, 27.54%)</title><rect x="33.9487%" y="133" width="27.5365%" height="15" fill="rgb(228,99,48)"/><text x="34.1987%" y="143.50">typeck</text></g><g><title>adt_destructor (306,773 samples, 0.16%)</title><rect x="62.3962%" y="133" width="0.1582%" height="15" fill="rgb(253,11,6)"/><text x="62.6462%" y="143.50"></text></g><g><title>coherent_trait (301,793 samples, 0.16%)</title><rect x="62.3987%" y="117" width="0.1556%" height="15" fill="rgb(247,143,39)"/><text x="62.6487%" y="127.50"></text></g><g><title>specialization_graph_of (299,413 samples, 0.15%)</title><rect x="62.4000%" y="101" width="0.1544%" height="15" fill="rgb(236,97,10)"/><text x="62.6500%" y="111.50"></text></g><g><title>item_types_checking (2,428,157 samples, 1.25%)</title><rect x="61.4853%" y="165" width="1.2521%" height="15" fill="rgb(233,208,19)"/><text x="61.7353%" y="175.50"></text></g><g><title>check_mod_item_types (2,425,547 samples, 1.25%)</title><rect x="61.4866%" y="149" width="1.2507%" height="15" fill="rgb(216,164,2)"/><text x="61.7366%" y="159.50"></text></g><g><title>fn_sig (313,303 samples, 0.16%)</title><rect x="62.9172%" y="133" width="0.1616%" height="15" fill="rgb(220,129,5)"/><text x="63.1672%" y="143.50"></text></g><g><title>generics_of (328,735 samples, 0.17%)</title><rect x="63.0788%" y="133" width="0.1695%" height="15" fill="rgb(242,17,10)"/><text x="63.3288%" y="143.50"></text></g><g><title>late_bound_vars_map (289,413 samples, 0.15%)</title><rect x="63.4896%" y="85" width="0.1492%" height="15" fill="rgb(242,107,0)"/><text x="63.7396%" y="95.50"></text></g><g><title>resolve_lifetimes (275,862 samples, 0.14%)</title><rect x="63.4966%" y="69" width="0.1422%" height="15" fill="rgb(251,28,31)"/><text x="63.7466%" y="79.50"></text></g><g><title>explicit_predicates_of (566,945 samples, 0.29%)</title><rect x="63.3560%" y="101" width="0.2923%" height="15" fill="rgb(233,223,10)"/><text x="63.6060%" y="111.50"></text></g><g><title>predicates_of (927,510 samples, 0.48%)</title><rect x="63.2751%" y="133" width="0.4783%" height="15" fill="rgb(215,21,27)"/><text x="63.5251%" y="143.50"></text></g><g><title>predicates_defined_on (866,349 samples, 0.45%)</title><rect x="63.3066%" y="117" width="0.4467%" height="15" fill="rgb(232,23,21)"/><text x="63.5566%" y="127.50"></text></g><g><title>inferred_outlives_of (203,663 samples, 0.11%)</title><rect x="63.6483%" y="101" width="0.1050%" height="15" fill="rgb(244,5,23)"/><text x="63.8983%" y="111.50"></text></g><g><title>super_predicates_of (220,192 samples, 0.11%)</title><rect x="63.7533%" y="133" width="0.1135%" height="15" fill="rgb(226,81,46)"/><text x="64.0033%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (210,772 samples, 0.11%)</title><rect x="63.7582%" y="117" width="0.1087%" height="15" fill="rgb(247,70,30)"/><text x="64.0082%" y="127.50"></text></g><g><title>type_collecting (2,367,637 samples, 1.22%)</title><rect x="62.7381%" y="165" width="1.2208%" height="15" fill="rgb(212,68,19)"/><text x="62.9881%" y="175.50"></text></g><g><title>collect_mod_item_types (2,360,117 samples, 1.22%)</title><rect x="62.7420%" y="149" width="1.2170%" height="15" fill="rgb(240,187,13)"/><text x="62.9920%" y="159.50"></text></g><g><title>evaluate_obligation (418,005 samples, 0.22%)</title><rect x="67.1458%" y="133" width="0.2155%" height="15" fill="rgb(223,113,26)"/><text x="67.3958%" y="143.50"></text></g><g><title>implied_outlives_bounds (280,732 samples, 0.14%)</title><rect x="67.3619%" y="133" width="0.1448%" height="15" fill="rgb(206,192,2)"/><text x="67.6119%" y="143.50"></text></g><g><title>param_env (1,430,833 samples, 0.74%)</title><rect x="67.5067%" y="133" width="0.7378%" height="15" fill="rgb(241,108,4)"/><text x="67.7567%" y="143.50"></text></g><g><title>region_scope_tree (673,987 samples, 0.35%)</title><rect x="68.2755%" y="133" width="0.3475%" height="15" fill="rgb(247,173,49)"/><text x="68.5255%" y="143.50"></text></g><g><title>check_impl_item_well_formed (8,787,716 samples, 4.53%)</title><rect x="64.1112%" y="149" width="4.5313%" height="15" fill="rgb(224,114,35)"/><text x="64.3612%" y="159.50">check..</text></g><g><title>associated_item (225,345 samples, 0.12%)</title><rect x="71.0000%" y="85" width="0.1162%" height="15" fill="rgb(245,159,27)"/><text x="71.2500%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (207,115 samples, 0.11%)</title><rect x="71.0094%" y="69" width="0.1068%" height="15" fill="rgb(245,172,44)"/><text x="71.2594%" y="79.50"></text></g><g><title>impl_item_implementor_ids (337,865 samples, 0.17%)</title><rect x="70.9529%" y="117" width="0.1742%" height="15" fill="rgb(236,23,11)"/><text x="71.2029%" y="127.50"></text></g><g><title>associated_items (304,515 samples, 0.16%)</title><rect x="70.9701%" y="101" width="0.1570%" height="15" fill="rgb(205,117,38)"/><text x="71.2201%" y="111.50"></text></g><g><title>impl_trait_ref (272,991 samples, 0.14%)</title><rect x="71.1465%" y="117" width="0.1408%" height="15" fill="rgb(237,72,25)"/><text x="71.3965%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (206,461 samples, 0.11%)</title><rect x="71.1808%" y="101" width="0.1065%" height="15" fill="rgb(244,70,9)"/><text x="71.4308%" y="111.50"></text></g><g><title>predicates_of (199,823 samples, 0.10%)</title><rect x="71.2887%" y="117" width="0.1030%" height="15" fill="rgb(217,125,39)"/><text x="71.5387%" y="127.50"></text></g><g><title>evaluate_obligation (1,931,281 samples, 1.00%)</title><rect x="70.4281%" y="133" width="0.9958%" height="15" fill="rgb(235,36,10)"/><text x="70.6781%" y="143.50"></text></g><g><title>param_env (614,588 samples, 0.32%)</title><rect x="71.4723%" y="133" width="0.3169%" height="15" fill="rgb(251,123,47)"/><text x="71.7223%" y="143.50"></text></g><g><title>trait_impls_of (451,336 samples, 0.23%)</title><rect x="71.8972%" y="133" width="0.2327%" height="15" fill="rgb(221,13,13)"/><text x="72.1472%" y="143.50"></text></g><g><title>check_item_well_formed (6,868,873 samples, 3.54%)</title><rect x="68.6425%" y="149" width="3.5419%" height="15" fill="rgb(238,131,9)"/><text x="68.8925%" y="159.50">chec..</text></g><g><title>analysis (140,039,328 samples, 72.21%)</title><rect x="0.3495%" y="197" width="72.2097%" height="15" fill="rgb(211,50,8)"/><text x="0.5995%" y="207.50">analysis</text></g><g><title>type_check_crate (88,540,709 samples, 45.65%)</title><rect x="26.9041%" y="181" width="45.6550%" height="15" fill="rgb(245,182,24)"/><text x="27.1541%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,668,983 samples, 8.60%)</title><rect x="63.9640%" y="165" width="8.5952%" height="15" fill="rgb(242,14,37)"/><text x="64.2140%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (726,888 samples, 0.37%)</title><rect x="72.1843%" y="149" width="0.3748%" height="15" fill="rgb(246,228,12)"/><text x="72.4343%" y="159.50"></text></g><g><title>codegen_crate (545,286 samples, 0.28%)</title><rect x="72.5657%" y="197" width="0.2812%" height="15" fill="rgb(213,55,15)"/><text x="72.8157%" y="207.50"></text></g><g><title>metadata_load_macro (367,684 samples, 0.19%)</title><rect x="81.5622%" y="149" width="0.1896%" height="15" fill="rgb(209,9,3)"/><text x="81.8122%" y="159.50"></text></g><g><title>macro_expand_crate (18,878,299 samples, 9.73%)</title><rect x="73.1332%" y="181" width="9.7344%" height="15" fill="rgb(230,59,30)"/><text x="73.3832%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (18,864,519 samples, 9.73%)</title><rect x="73.1403%" y="165" width="9.7273%" height="15" fill="rgb(209,121,21)"/><text x="73.3903%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,163,974 samples, 1.12%)</title><rect x="81.7518%" y="149" width="1.1158%" height="15" fill="rgb(220,109,13)"/><text x="82.0018%" y="159.50"></text></g><g><title>metadata_register_crate (781,270 samples, 0.40%)</title><rect x="82.4647%" y="133" width="0.4029%" height="15" fill="rgb(232,18,1)"/><text x="82.7147%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (1,074,142 samples, 0.55%)</title><rect x="82.8694%" y="181" width="0.5539%" height="15" fill="rgb(215,41,42)"/><text x="83.1194%" y="191.50"></text></g><g><title>late_resolve_crate (2,242,114 samples, 1.16%)</title><rect x="83.4778%" y="165" width="1.1561%" height="15" fill="rgb(224,123,36)"/><text x="83.7278%" y="175.50"></text></g><g><title>configure_and_expand (22,988,764 samples, 11.85%)</title><rect x="72.8468%" y="197" width="11.8539%" height="15" fill="rgb(240,125,3)"/><text x="73.0968%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (2,477,438 samples, 1.28%)</title><rect x="83.4233%" y="181" width="1.2775%" height="15" fill="rgb(205,98,50)"/><text x="83.6733%" y="191.50"></text></g><g><title>drop_ast (326,584 samples, 0.17%)</title><rect x="84.7007%" y="197" width="0.1684%" height="15" fill="rgb(205,185,37)"/><text x="84.9507%" y="207.50"></text></g><g><title>early_lint_checks (444,795 samples, 0.23%)</title><rect x="84.8766%" y="197" width="0.2294%" height="15" fill="rgb(238,207,15)"/><text x="85.1266%" y="207.50"></text></g><g><title>free_global_ctxt (4,235,027 samples, 2.18%)</title><rect x="85.1060%" y="197" width="2.1837%" height="15" fill="rgb(213,199,42)"/><text x="85.3560%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,197,903 samples, 0.62%)</title><rect x="87.2897%" y="197" width="0.6177%" height="15" fill="rgb(235,201,11)"/><text x="87.5397%" y="207.50"></text></g><g><title>hir_lowering (3,408,328 samples, 1.76%)</title><rect x="87.9074%" y="197" width="1.7575%" height="15" fill="rgb(207,46,11)"/><text x="88.1574%" y="207.50"></text></g><g><title>parse_crate (18,369,993 samples, 9.47%)</title><rect x="89.6920%" y="197" width="9.4723%" height="15" fill="rgb(241,35,35)"/><text x="89.9420%" y="207.50">parse_crate</text></g><g><title>self_profile_alloc_query_strings (984,731 samples, 0.51%)</title><rect x="99.2681%" y="197" width="0.5078%" height="15" fill="rgb(243,32,47)"/><text x="99.5181%" y="207.50"></text></g><g><title>all (193,934,363 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (193,934,363 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (341,014 samples, 0.18%)</title><rect x="99.8242%" y="197" width="0.1758%" height="15" fill="rgb(243,110,44)"/><text x="100.0742%" y="207.50"></text></g></svg></svg>