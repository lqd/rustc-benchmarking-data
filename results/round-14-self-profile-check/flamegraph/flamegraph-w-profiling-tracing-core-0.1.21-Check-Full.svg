<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (677,268 samples, 0.19%)</title><rect x="15.4870%" y="197" width="0.1880%" height="15" fill="rgb(227,0,7)"/><text x="15.7370%" y="207.50"></text></g><g><title>is_late_bound_map (451,048 samples, 0.13%)</title><rect x="15.6750%" y="197" width="0.1252%" height="15" fill="rgb(217,0,24)"/><text x="15.9250%" y="207.50"></text></g><g><title>param_env (778,937 samples, 0.22%)</title><rect x="17.7092%" y="165" width="0.2162%" height="15" fill="rgb(221,193,54)"/><text x="17.9592%" y="175.50"></text></g><g><title>item_attrs (747,286 samples, 0.21%)</title><rect x="18.5858%" y="133" width="0.2075%" height="15" fill="rgb(248,212,6)"/><text x="18.8358%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (720,334 samples, 0.20%)</title><rect x="18.5933%" y="117" width="0.2000%" height="15" fill="rgb(208,68,35)"/><text x="18.8433%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,244,832 samples, 0.35%)</title><rect x="18.4597%" y="149" width="0.3456%" height="15" fill="rgb(232,128,0)"/><text x="18.7097%" y="159.50"></text></g><g><title>adt_drop_tys (420,376 samples, 0.12%)</title><rect x="21.8674%" y="117" width="0.1167%" height="15" fill="rgb(207,160,47)"/><text x="22.1174%" y="127.50"></text></g><g><title>needs_drop_raw (2,370,047 samples, 0.66%)</title><rect x="21.7838%" y="133" width="0.6580%" height="15" fill="rgb(228,23,34)"/><text x="22.0338%" y="143.50"></text></g><g><title>is_copy_raw (1,646,588 samples, 0.46%)</title><rect x="21.9847%" y="117" width="0.4571%" height="15" fill="rgb(218,30,26)"/><text x="22.2347%" y="127.50"></text></g><g><title>evaluate_obligation (1,276,194 samples, 0.35%)</title><rect x="22.0875%" y="101" width="0.3543%" height="15" fill="rgb(220,122,19)"/><text x="22.3375%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,069,728 samples, 0.30%)</title><rect x="22.6838%" y="117" width="0.2970%" height="15" fill="rgb(250,228,42)"/><text x="22.9338%" y="127.50"></text></g><g><title>resolve_instance (2,703,803 samples, 0.75%)</title><rect x="22.4418%" y="133" width="0.7506%" height="15" fill="rgb(240,193,28)"/><text x="22.6918%" y="143.50"></text></g><g><title>thir_body (3,989,716 samples, 1.11%)</title><rect x="23.2365%" y="133" width="1.1076%" height="15" fill="rgb(216,20,37)"/><text x="23.4865%" y="143.50"></text></g><g><title>mir_const (27,333,462 samples, 7.59%)</title><rect x="16.7885%" y="181" width="7.5882%" height="15" fill="rgb(206,188,39)"/><text x="17.0385%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (23,238,325 samples, 6.45%)</title><rect x="17.9254%" y="165" width="6.4513%" height="15" fill="rgb(217,207,13)"/><text x="18.1754%" y="175.50">unsafety..</text></g><g><title>mir_built (20,044,924 samples, 5.56%)</title><rect x="18.8119%" y="149" width="5.5648%" height="15" fill="rgb(231,73,38)"/><text x="19.0619%" y="159.50">mir_bui..</text></g><g><title>mir_const (1,049,790 samples, 0.29%)</title><rect x="24.7784%" y="165" width="0.2914%" height="15" fill="rgb(225,20,46)"/><text x="25.0284%" y="175.50"></text></g><g><title>unsafety_check_result (770,248 samples, 0.21%)</title><rect x="24.8560%" y="149" width="0.2138%" height="15" fill="rgb(210,31,41)"/><text x="25.1060%" y="159.50"></text></g><g><title>mir_built (657,957 samples, 0.18%)</title><rect x="24.8872%" y="133" width="0.1827%" height="15" fill="rgb(221,200,47)"/><text x="25.1372%" y="143.50"></text></g><g><title>mir_const_qualif (2,650,178 samples, 0.74%)</title><rect x="24.3767%" y="181" width="0.7357%" height="15" fill="rgb(226,26,5)"/><text x="24.6267%" y="191.50"></text></g><g><title>mir_promoted (33,497,312 samples, 9.30%)</title><rect x="15.8132%" y="197" width="9.2993%" height="15" fill="rgb(249,33,26)"/><text x="16.0632%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,062,919 samples, 0.30%)</title><rect x="25.1140%" y="197" width="0.2951%" height="15" fill="rgb(235,183,28)"/><text x="25.3640%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,164,173 samples, 0.32%)</title><rect x="25.4091%" y="197" width="0.3232%" height="15" fill="rgb(221,5,38)"/><text x="25.6591%" y="207.50"></text></g><g><title>normalize_projection_ty (698,157 samples, 0.19%)</title><rect x="25.5385%" y="181" width="0.1938%" height="15" fill="rgb(247,18,42)"/><text x="25.7885%" y="191.50"></text></g><g><title>type_op_normalize_predicate (637,395 samples, 0.18%)</title><rect x="25.7323%" y="197" width="0.1770%" height="15" fill="rgb(241,131,45)"/><text x="25.9823%" y="207.50"></text></g><g><title>type_op_prove_predicate (8,079,429 samples, 2.24%)</title><rect x="25.9244%" y="197" width="2.2430%" height="15" fill="rgb(249,31,29)"/><text x="26.1744%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (99,782,567 samples, 27.70%)</title><rect x="0.4706%" y="229" width="27.7011%" height="15" fill="rgb(225,111,53)"/><text x="0.7206%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (98,986,032 samples, 27.48%)</title><rect x="0.6917%" y="213" width="27.4800%" height="15" fill="rgb(238,160,17)"/><text x="0.9417%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,051,342 samples, 0.29%)</title><rect x="28.1717%" y="229" width="0.2919%" height="15" fill="rgb(214,148,48)"/><text x="28.4217%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (594,316 samples, 0.16%)</title><rect x="28.2986%" y="213" width="0.1650%" height="15" fill="rgb(232,36,49)"/><text x="28.5486%" y="223.50"></text></g><g><title>hir_module_items (780,360 samples, 0.22%)</title><rect x="28.4636%" y="229" width="0.2166%" height="15" fill="rgb(209,103,24)"/><text x="28.7136%" y="239.50"></text></g><g><title>should_inherit_track_caller (638,621 samples, 0.18%)</title><rect x="29.0335%" y="181" width="0.1773%" height="15" fill="rgb(229,88,8)"/><text x="29.2835%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,060,063 samples, 0.29%)</title><rect x="28.9220%" y="197" width="0.2943%" height="15" fill="rgb(213,181,19)"/><text x="29.1720%" y="207.50"></text></g><g><title>check_mod_attrs (1,879,493 samples, 0.52%)</title><rect x="28.6946%" y="213" width="0.5218%" height="15" fill="rgb(254,191,54)"/><text x="28.9446%" y="223.50"></text></g><g><title>check_mod_const_bodies (508,219 samples, 0.14%)</title><rect x="29.2163%" y="213" width="0.1411%" height="15" fill="rgb(241,83,37)"/><text x="29.4663%" y="223.50"></text></g><g><title>lookup_deprecation_entry (501,265 samples, 0.14%)</title><rect x="29.5628%" y="197" width="0.1392%" height="15" fill="rgb(233,36,39)"/><text x="29.8128%" y="207.50"></text></g><g><title>stability_index (399,354 samples, 0.11%)</title><rect x="29.5911%" y="181" width="0.1109%" height="15" fill="rgb(226,3,54)"/><text x="29.8411%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (1,156,060 samples, 0.32%)</title><rect x="29.4299%" y="213" width="0.3209%" height="15" fill="rgb(245,192,40)"/><text x="29.6799%" y="223.50"></text></g><g><title>misc_checking_1 (4,033,015 samples, 1.12%)</title><rect x="28.6803%" y="229" width="1.1196%" height="15" fill="rgb(238,167,29)"/><text x="28.9303%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,616,488 samples, 0.45%)</title><rect x="29.8008%" y="213" width="0.4488%" height="15" fill="rgb(232,182,51)"/><text x="30.0508%" y="223.50"></text></g><g><title>check_mod_liveness (1,302,722 samples, 0.36%)</title><rect x="29.8879%" y="197" width="0.3617%" height="15" fill="rgb(231,60,39)"/><text x="30.1379%" y="207.50"></text></g><g><title>mir_borrowck (1,345,276 samples, 0.37%)</title><rect x="31.3190%" y="101" width="0.3735%" height="15" fill="rgb(208,69,12)"/><text x="31.5690%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,840,790 samples, 0.51%)</title><rect x="31.1832%" y="117" width="0.5110%" height="15" fill="rgb(235,93,37)"/><text x="31.4332%" y="127.50"></text></g><g><title>mir_for_ctfe (2,444,848 samples, 0.68%)</title><rect x="31.0233%" y="133" width="0.6787%" height="15" fill="rgb(213,116,39)"/><text x="31.2733%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,991,484 samples, 0.83%)</title><rect x="30.8779%" y="181" width="0.8305%" height="15" fill="rgb(222,207,29)"/><text x="31.1279%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,974,644 samples, 0.83%)</title><rect x="30.8826%" y="165" width="0.8258%" height="15" fill="rgb(206,96,30)"/><text x="31.1326%" y="175.50"></text></g><g><title>eval_to_allocation_raw (2,935,894 samples, 0.82%)</title><rect x="30.8934%" y="149" width="0.8150%" height="15" fill="rgb(218,138,4)"/><text x="31.1434%" y="159.50"></text></g><g><title>mir_const (614,259 samples, 0.17%)</title><rect x="31.8152%" y="165" width="0.1705%" height="15" fill="rgb(250,191,14)"/><text x="32.0652%" y="175.50"></text></g><g><title>unsafety_check_result (363,127 samples, 0.10%)</title><rect x="31.8849%" y="149" width="0.1008%" height="15" fill="rgb(239,60,40)"/><text x="32.1349%" y="159.50"></text></g><g><title>mir_const_qualif (937,631 samples, 0.26%)</title><rect x="31.7258%" y="181" width="0.2603%" height="15" fill="rgb(206,27,48)"/><text x="31.9758%" y="191.50"></text></g><g><title>misc_checking_2 (8,203,551 samples, 2.28%)</title><rect x="29.8000%" y="229" width="2.2774%" height="15" fill="rgb(225,35,8)"/><text x="30.0500%" y="239.50">m..</text></g><g><title>match_checking (6,583,973 samples, 1.83%)</title><rect x="30.2496%" y="213" width="1.8278%" height="15" fill="rgb(250,213,24)"/><text x="30.4996%" y="223.50">m..</text></g><g><title>check_match (6,351,330 samples, 1.76%)</title><rect x="30.3142%" y="197" width="1.7632%" height="15" fill="rgb(247,123,22)"/><text x="30.5642%" y="207.50"></text></g><g><title>check_private_in_public (886,250 samples, 0.25%)</title><rect x="32.0807%" y="213" width="0.2460%" height="15" fill="rgb(231,138,38)"/><text x="32.3307%" y="223.50"></text></g><g><title>death_checking (1,652,798 samples, 0.46%)</title><rect x="32.3267%" y="213" width="0.4588%" height="15" fill="rgb(231,145,46)"/><text x="32.5767%" y="223.50"></text></g><g><title>eval_to_const_value_raw (510,675 samples, 0.14%)</title><rect x="33.5501%" y="69" width="0.1418%" height="15" fill="rgb(251,118,11)"/><text x="33.8001%" y="79.50"></text></g><g><title>eval_to_const_value_raw (509,175 samples, 0.14%)</title><rect x="33.5505%" y="53" width="0.1414%" height="15" fill="rgb(217,147,25)"/><text x="33.8005%" y="63.50"></text></g><g><title>eval_to_allocation_raw (507,315 samples, 0.14%)</title><rect x="33.5510%" y="37" width="0.1408%" height="15" fill="rgb(247,81,37)"/><text x="33.8010%" y="47.50"></text></g><g><title>eval_to_const_value_raw (754,208 samples, 0.21%)</title><rect x="33.4845%" y="133" width="0.2094%" height="15" fill="rgb(209,12,38)"/><text x="33.7345%" y="143.50"></text></g><g><title>eval_to_const_value_raw (751,518 samples, 0.21%)</title><rect x="33.4853%" y="117" width="0.2086%" height="15" fill="rgb(227,1,9)"/><text x="33.7353%" y="127.50"></text></g><g><title>eval_to_allocation_raw (747,408 samples, 0.21%)</title><rect x="33.4864%" y="101" width="0.2075%" height="15" fill="rgb(248,47,43)"/><text x="33.7364%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (521,576 samples, 0.14%)</title><rect x="33.5491%" y="85" width="0.1448%" height="15" fill="rgb(221,10,30)"/><text x="33.7991%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (779,328 samples, 0.22%)</title><rect x="33.4785%" y="149" width="0.2164%" height="15" fill="rgb(210,229,1)"/><text x="33.7285%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,347,574 samples, 0.37%)</title><rect x="33.3368%" y="181" width="0.3741%" height="15" fill="rgb(222,148,37)"/><text x="33.5868%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,330,454 samples, 0.37%)</title><rect x="33.3416%" y="165" width="0.3694%" height="15" fill="rgb(234,67,33)"/><text x="33.5916%" y="175.50"></text></g><g><title>param_env (672,577 samples, 0.19%)</title><rect x="33.7534%" y="181" width="0.1867%" height="15" fill="rgb(247,98,35)"/><text x="34.0034%" y="191.50"></text></g><g><title>crate_lints (5,373,049 samples, 1.49%)</title><rect x="32.7862%" y="197" width="1.4916%" height="15" fill="rgb(247,138,52)"/><text x="33.0362%" y="207.50"></text></g><g><title>type_of (1,140,472 samples, 0.32%)</title><rect x="33.9613%" y="181" width="0.3166%" height="15" fill="rgb(213,79,30)"/><text x="34.2113%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (910,531 samples, 0.25%)</title><rect x="34.0251%" y="165" width="0.2528%" height="15" fill="rgb(246,177,23)"/><text x="34.2751%" y="175.50"></text></g><g><title>lint_checking (6,941,267 samples, 1.93%)</title><rect x="32.7855%" y="213" width="1.9270%" height="15" fill="rgb(230,62,27)"/><text x="33.0355%" y="223.50">l..</text></g><g><title>module_lints (1,565,688 samples, 0.43%)</title><rect x="34.2779%" y="197" width="0.4347%" height="15" fill="rgb(216,154,8)"/><text x="34.5279%" y="207.50"></text></g><g><title>lint_mod (1,551,967 samples, 0.43%)</title><rect x="34.2817%" y="181" width="0.4308%" height="15" fill="rgb(244,35,45)"/><text x="34.5317%" y="191.50"></text></g><g><title>privacy_access_levels (1,238,724 samples, 0.34%)</title><rect x="34.7125%" y="213" width="0.3439%" height="15" fill="rgb(251,115,12)"/><text x="34.9625%" y="223.50"></text></g><g><title>privacy_checking_modules (4,306,208 samples, 1.20%)</title><rect x="35.0564%" y="213" width="1.1955%" height="15" fill="rgb(240,54,50)"/><text x="35.3064%" y="223.50"></text></g><g><title>check_mod_privacy (4,296,658 samples, 1.19%)</title><rect x="35.0591%" y="197" width="1.1928%" height="15" fill="rgb(233,84,52)"/><text x="35.3091%" y="207.50"></text></g><g><title>misc_checking_3 (15,078,448 samples, 4.19%)</title><rect x="32.0774%" y="229" width="4.1860%" height="15" fill="rgb(207,117,47)"/><text x="32.3274%" y="239.50">misc_..</text></g><g><title>object_safety_violations (617,858 samples, 0.17%)</title><rect x="36.4894%" y="181" width="0.1715%" height="15" fill="rgb(249,43,39)"/><text x="36.7394%" y="191.50"></text></g><g><title>impl_parent (3,051,217 samples, 0.85%)</title><rect x="39.0553%" y="165" width="0.8471%" height="15" fill="rgb(209,38,44)"/><text x="39.3053%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,768,217 samples, 0.49%)</title><rect x="39.4115%" y="149" width="0.4909%" height="15" fill="rgb(236,212,23)"/><text x="39.6615%" y="159.50"></text></g><g><title>impl_trait_ref (6,472,345 samples, 1.80%)</title><rect x="39.9024%" y="165" width="1.7968%" height="15" fill="rgb(242,79,21)"/><text x="40.1524%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,176,148 samples, 1.44%)</title><rect x="40.2622%" y="149" width="1.4370%" height="15" fill="rgb(211,96,35)"/><text x="40.5122%" y="159.50"></text></g><g><title>trait_impls_of (1,161,589 samples, 0.32%)</title><rect x="41.7961%" y="165" width="0.3225%" height="15" fill="rgb(253,215,40)"/><text x="42.0461%" y="175.50"></text></g><g><title>coherent_trait (20,746,530 samples, 5.76%)</title><rect x="36.3642%" y="197" width="5.7595%" height="15" fill="rgb(211,81,21)"/><text x="36.6142%" y="207.50">coheren..</text></g><g><title>specialization_graph_of (19,644,796 samples, 5.45%)</title><rect x="36.6700%" y="181" width="5.4537%" height="15" fill="rgb(208,190,38)"/><text x="36.9200%" y="191.50">special..</text></g><g><title>coherence_checking (21,047,853 samples, 5.84%)</title><rect x="36.3548%" y="213" width="5.8432%" height="15" fill="rgb(235,213,38)"/><text x="36.6048%" y="223.50">coheren..</text></g><g><title>associated_item (399,165 samples, 0.11%)</title><rect x="58.8246%" y="149" width="0.1108%" height="15" fill="rgb(237,122,38)"/><text x="59.0746%" y="159.50"></text></g><g><title>associated_items (598,285 samples, 0.17%)</title><rect x="58.7814%" y="165" width="0.1661%" height="15" fill="rgb(244,218,35)"/><text x="59.0314%" y="175.50"></text></g><g><title>dropck_outlives (638,929 samples, 0.18%)</title><rect x="58.9830%" y="165" width="0.1774%" height="15" fill="rgb(240,68,47)"/><text x="59.2330%" y="175.50"></text></g><g><title>evaluate_obligation (2,271,921 samples, 0.63%)</title><rect x="59.1616%" y="165" width="0.6307%" height="15" fill="rgb(210,16,53)"/><text x="59.4116%" y="175.50"></text></g><g><title>evaluate_obligation (389,055 samples, 0.11%)</title><rect x="60.1718%" y="149" width="0.1080%" height="15" fill="rgb(235,124,12)"/><text x="60.4218%" y="159.50"></text></g><g><title>method_autoderef_steps (858,932 samples, 0.24%)</title><rect x="60.0454%" y="165" width="0.2385%" height="15" fill="rgb(224,169,11)"/><text x="60.2954%" y="175.50"></text></g><g><title>predicates_of (420,602 samples, 0.12%)</title><rect x="60.4082%" y="165" width="0.1168%" height="15" fill="rgb(250,166,2)"/><text x="60.6582%" y="175.50"></text></g><g><title>associated_item (506,804 samples, 0.14%)</title><rect x="66.1364%" y="133" width="0.1407%" height="15" fill="rgb(242,216,29)"/><text x="66.3864%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (413,623 samples, 0.11%)</title><rect x="66.1623%" y="117" width="0.1148%" height="15" fill="rgb(230,116,27)"/><text x="66.4123%" y="127.50"></text></g><g><title>associated_items (748,508 samples, 0.21%)</title><rect x="66.0839%" y="149" width="0.2078%" height="15" fill="rgb(228,99,48)"/><text x="66.3339%" y="159.50"></text></g><g><title>evaluate_obligation (2,164,862 samples, 0.60%)</title><rect x="66.3901%" y="149" width="0.6010%" height="15" fill="rgb(253,11,6)"/><text x="66.6401%" y="159.50"></text></g><g><title>is_copy_raw (653,561 samples, 0.18%)</title><rect x="67.1062%" y="149" width="0.1814%" height="15" fill="rgb(247,143,39)"/><text x="67.3562%" y="159.50"></text></g><g><title>evaluate_obligation (530,239 samples, 0.15%)</title><rect x="67.1404%" y="133" width="0.1472%" height="15" fill="rgb(236,97,10)"/><text x="67.3904%" y="143.50"></text></g><g><title>method_autoderef_steps (679,575 samples, 0.19%)</title><rect x="67.3848%" y="149" width="0.1887%" height="15" fill="rgb(233,208,19)"/><text x="67.6348%" y="159.50"></text></g><g><title>typeck (25,775,346 samples, 7.16%)</title><rect x="60.5780%" y="165" width="7.1556%" height="15" fill="rgb(216,164,2)"/><text x="60.8280%" y="175.50">typeck</text></g><g><title>item_bodies_checking (91,958,601 samples, 25.53%)</title><rect x="42.2483%" y="213" width="25.5290%" height="15" fill="rgb(220,129,5)"/><text x="42.4983%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (91,955,111 samples, 25.53%)</title><rect x="42.2493%" y="197" width="25.5281%" height="15" fill="rgb(242,17,10)"/><text x="42.4993%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (91,425,645 samples, 25.38%)</title><rect x="42.3963%" y="181" width="25.3811%" height="15" fill="rgb(242,107,0)"/><text x="42.6463%" y="191.50">typeck</text></g><g><title>layout_of (517,016 samples, 0.14%)</title><rect x="69.0779%" y="165" width="0.1435%" height="15" fill="rgb(251,28,31)"/><text x="69.3279%" y="175.50"></text></g><g><title>layout_of (572,216 samples, 0.16%)</title><rect x="69.0647%" y="181" width="0.1589%" height="15" fill="rgb(233,223,10)"/><text x="69.3147%" y="191.50"></text></g><g><title>dropck_outlives (380,294 samples, 0.11%)</title><rect x="69.5481%" y="165" width="0.1056%" height="15" fill="rgb(215,21,27)"/><text x="69.7981%" y="175.50"></text></g><g><title>item_types_checking (6,956,638 samples, 1.93%)</title><rect x="67.7774%" y="213" width="1.9313%" height="15" fill="rgb(232,23,21)"/><text x="68.0274%" y="223.50">i..</text></g><g><title>check_mod_item_types (6,944,278 samples, 1.93%)</title><rect x="67.7808%" y="197" width="1.9278%" height="15" fill="rgb(244,5,23)"/><text x="68.0308%" y="207.50">c..</text></g><g><title>typeck (1,689,918 samples, 0.47%)</title><rect x="69.2395%" y="181" width="0.4691%" height="15" fill="rgb(226,81,46)"/><text x="69.4895%" y="191.50"></text></g><g><title>mir_borrowck (705,897 samples, 0.20%)</title><rect x="70.3773%" y="101" width="0.1960%" height="15" fill="rgb(247,70,30)"/><text x="70.6273%" y="111.50"></text></g><g><title>mir_for_ctfe (1,024,870 samples, 0.28%)</title><rect x="70.2896%" y="133" width="0.2845%" height="15" fill="rgb(212,68,19)"/><text x="70.5396%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (935,560 samples, 0.26%)</title><rect x="70.3144%" y="117" width="0.2597%" height="15" fill="rgb(240,187,13)"/><text x="70.5644%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,239,635 samples, 0.62%)</title><rect x="70.0765%" y="181" width="0.6218%" height="15" fill="rgb(223,113,26)"/><text x="70.3265%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,217,345 samples, 0.62%)</title><rect x="70.0826%" y="165" width="0.6156%" height="15" fill="rgb(206,192,2)"/><text x="70.3326%" y="175.50"></text></g><g><title>eval_to_allocation_raw (2,198,004 samples, 0.61%)</title><rect x="70.0880%" y="149" width="0.6102%" height="15" fill="rgb(241,108,4)"/><text x="70.3380%" y="159.50"></text></g><g><title>typeck (444,933 samples, 0.12%)</title><rect x="70.5747%" y="133" width="0.1235%" height="15" fill="rgb(247,173,49)"/><text x="70.8247%" y="143.50"></text></g><g><title>fn_sig (1,335,205 samples, 0.37%)</title><rect x="70.6982%" y="181" width="0.3707%" height="15" fill="rgb(224,114,35)"/><text x="70.9482%" y="191.50"></text></g><g><title>lint_levels (589,456 samples, 0.16%)</title><rect x="71.4046%" y="133" width="0.1636%" height="15" fill="rgb(245,159,27)"/><text x="71.6546%" y="143.50"></text></g><g><title>is_late_bound_map (1,233,101 samples, 0.34%)</title><rect x="71.2261%" y="165" width="0.3423%" height="15" fill="rgb(245,172,44)"/><text x="71.4761%" y="175.50"></text></g><g><title>resolve_lifetimes (1,162,211 samples, 0.32%)</title><rect x="71.2457%" y="149" width="0.3226%" height="15" fill="rgb(236,23,11)"/><text x="71.4957%" y="159.50"></text></g><g><title>named_region_map (1,088,022 samples, 0.30%)</title><rect x="71.5684%" y="165" width="0.3021%" height="15" fill="rgb(205,117,38)"/><text x="71.8184%" y="175.50"></text></g><g><title>resolve_lifetimes (965,971 samples, 0.27%)</title><rect x="71.6023%" y="149" width="0.2682%" height="15" fill="rgb(237,72,25)"/><text x="71.8523%" y="159.50"></text></g><g><title>generics_of (2,949,100 samples, 0.82%)</title><rect x="71.0689%" y="181" width="0.8187%" height="15" fill="rgb(244,70,9)"/><text x="71.3189%" y="191.50"></text></g><g><title>explicit_predicates_of (814,377 samples, 0.23%)</title><rect x="72.2603%" y="149" width="0.2261%" height="15" fill="rgb(217,125,39)"/><text x="72.5103%" y="159.50"></text></g><g><title>predicates_of (2,741,550 samples, 0.76%)</title><rect x="71.9996%" y="181" width="0.7611%" height="15" fill="rgb(235,36,10)"/><text x="72.2496%" y="191.50"></text></g><g><title>predicates_defined_on (2,458,787 samples, 0.68%)</title><rect x="72.0781%" y="165" width="0.6826%" height="15" fill="rgb(251,123,47)"/><text x="72.3281%" y="175.50"></text></g><g><title>inferred_outlives_of (988,111 samples, 0.27%)</title><rect x="72.4863%" y="149" width="0.2743%" height="15" fill="rgb(221,13,13)"/><text x="72.7363%" y="159.50"></text></g><g><title>inferred_outlives_crate (898,461 samples, 0.25%)</title><rect x="72.5112%" y="133" width="0.2494%" height="15" fill="rgb(238,131,9)"/><text x="72.7612%" y="143.50"></text></g><g><title>type_of (606,145 samples, 0.17%)</title><rect x="72.5924%" y="117" width="0.1683%" height="15" fill="rgb(211,50,8)"/><text x="72.8424%" y="127.50"></text></g><g><title>type_collecting (12,130,045 samples, 3.37%)</title><rect x="69.7104%" y="213" width="3.3675%" height="15" fill="rgb(245,182,24)"/><text x="69.9604%" y="223.50">typ..</text></g><g><title>collect_mod_item_types (12,105,114 samples, 3.36%)</title><rect x="69.7174%" y="197" width="3.3606%" height="15" fill="rgb(242,14,37)"/><text x="69.9674%" y="207.50">col..</text></g><g><title>type_of (1,123,331 samples, 0.31%)</title><rect x="72.7661%" y="181" width="0.3119%" height="15" fill="rgb(246,228,12)"/><text x="73.0161%" y="191.50"></text></g><g><title>evaluate_obligation (1,639,743 samples, 0.46%)</title><rect x="75.9026%" y="181" width="0.4552%" height="15" fill="rgb(213,55,15)"/><text x="76.1526%" y="191.50"></text></g><g><title>implied_outlives_bounds (790,421 samples, 0.22%)</title><rect x="76.3624%" y="181" width="0.2194%" height="15" fill="rgb(209,9,3)"/><text x="76.6124%" y="191.50"></text></g><g><title>param_env (1,257,784 samples, 0.35%)</title><rect x="76.6200%" y="181" width="0.3492%" height="15" fill="rgb(230,59,30)"/><text x="76.8700%" y="191.50"></text></g><g><title>region_scope_tree (1,479,741 samples, 0.41%)</title><rect x="76.9879%" y="181" width="0.4108%" height="15" fill="rgb(209,121,21)"/><text x="77.2379%" y="191.50"></text></g><g><title>check_impl_item_well_formed (14,579,421 samples, 4.05%)</title><rect x="73.3726%" y="197" width="4.0475%" height="15" fill="rgb(220,109,13)"/><text x="73.6226%" y="207.50">chec..</text></g><g><title>adt_sized_constraint (368,104 samples, 0.10%)</title><rect x="80.9113%" y="165" width="0.1022%" height="15" fill="rgb(232,18,1)"/><text x="81.1613%" y="175.50"></text></g><g><title>evaluate_obligation (2,049,766 samples, 0.57%)</title><rect x="80.4689%" y="181" width="0.5690%" height="15" fill="rgb(215,41,42)"/><text x="80.7189%" y="191.50"></text></g><g><title>implied_outlives_bounds (647,861 samples, 0.18%)</title><rect x="81.0692%" y="181" width="0.1799%" height="15" fill="rgb(224,123,36)"/><text x="81.3192%" y="191.50"></text></g><g><title>param_env (1,306,888 samples, 0.36%)</title><rect x="81.3447%" y="181" width="0.3628%" height="15" fill="rgb(240,125,3)"/><text x="81.5947%" y="191.50"></text></g><g><title>check_item_well_formed (16,229,117 samples, 4.51%)</title><rect x="77.4201%" y="197" width="4.5054%" height="15" fill="rgb(205,98,50)"/><text x="77.6701%" y="207.50">check..</text></g><g><title>analysis (295,415,160 samples, 82.01%)</title><rect x="0.2225%" y="245" width="82.0115%" height="15" fill="rgb(205,185,37)"/><text x="0.4725%" y="255.50">analysis</text></g><g><title>type_check_crate (165,591,689 samples, 45.97%)</title><rect x="36.2634%" y="229" width="45.9707%" height="15" fill="rgb(238,207,15)"/><text x="36.5134%" y="239.50">type_check_crate</text></g><g><title>wf_checking (32,949,376 samples, 9.15%)</title><rect x="73.0868%" y="213" width="9.1472%" height="15" fill="rgb(213,199,42)"/><text x="73.3368%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,111,343 samples, 0.31%)</title><rect x="81.9255%" y="197" width="0.3085%" height="15" fill="rgb(235,201,11)"/><text x="82.1755%" y="207.50"></text></g><g><title>codegen_crate (396,804 samples, 0.11%)</title><rect x="82.2358%" y="245" width="0.1102%" height="15" fill="rgb(207,46,11)"/><text x="82.4858%" y="255.50"></text></g><g><title>AST_validation (520,626 samples, 0.14%)</title><rect x="82.3803%" y="229" width="0.1445%" height="15" fill="rgb(241,35,35)"/><text x="82.6303%" y="239.50"></text></g><g><title>metadata_load_macro (560,997 samples, 0.16%)</title><rect x="90.2541%" y="197" width="0.1557%" height="15" fill="rgb(243,32,47)"/><text x="90.5041%" y="207.50"></text></g><g><title>metadata_register_crate (1,311,295 samples, 0.36%)</title><rect x="90.4099%" y="197" width="0.3640%" height="15" fill="rgb(247,202,23)"/><text x="90.6599%" y="207.50"></text></g><g><title>metadata_register_crate (470,557 samples, 0.13%)</title><rect x="90.6433%" y="181" width="0.1306%" height="15" fill="rgb(219,102,11)"/><text x="90.8933%" y="191.50"></text></g><g><title>macro_expand_crate (29,997,503 samples, 8.33%)</title><rect x="82.6000%" y="229" width="8.3277%" height="15" fill="rgb(243,110,44)"/><text x="82.8500%" y="239.50">macro_expand..</text></g><g><title>expand_crate (29,987,483 samples, 8.32%)</title><rect x="82.6027%" y="213" width="8.3250%" height="15" fill="rgb(222,74,54)"/><text x="82.8527%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (554,046 samples, 0.15%)</title><rect x="90.7739%" y="197" width="0.1538%" height="15" fill="rgb(216,99,12)"/><text x="91.0239%" y="207.50"></text></g><g><title>finalize_macro_resolutions (369,984 samples, 0.10%)</title><rect x="90.9848%" y="213" width="0.1027%" height="15" fill="rgb(226,22,26)"/><text x="91.2348%" y="223.50"></text></g><g><title>late_resolve_crate (4,827,574 samples, 1.34%)</title><rect x="91.0875%" y="213" width="1.3402%" height="15" fill="rgb(217,163,10)"/><text x="91.3375%" y="223.50"></text></g><g><title>configure_and_expand (36,712,967 samples, 10.19%)</title><rect x="82.3460%" y="245" width="10.1921%" height="15" fill="rgb(213,25,53)"/><text x="82.5960%" y="255.50">configure_and_e..</text></g><g><title>resolve_crate (5,719,073 samples, 1.59%)</title><rect x="90.9503%" y="229" width="1.5877%" height="15" fill="rgb(252,105,26)"/><text x="91.2003%" y="239.50"></text></g><g><title>drop_ast (738,938 samples, 0.21%)</title><rect x="92.5380%" y="245" width="0.2051%" height="15" fill="rgb(220,39,43)"/><text x="92.7880%" y="255.50"></text></g><g><title>early_lint_checks (1,396,036 samples, 0.39%)</title><rect x="92.7481%" y="245" width="0.3876%" height="15" fill="rgb(229,68,48)"/><text x="92.9981%" y="255.50"></text></g><g><title>free_global_ctxt (5,684,293 samples, 1.58%)</title><rect x="93.1356%" y="245" width="1.5780%" height="15" fill="rgb(252,8,32)"/><text x="93.3856%" y="255.50"></text></g><g><title>generate_crate_metadata (4,896,124 samples, 1.36%)</title><rect x="94.7137%" y="245" width="1.3592%" height="15" fill="rgb(223,20,43)"/><text x="94.9637%" y="255.50"></text></g><g><title>hir_lowering (11,101,933 samples, 3.08%)</title><rect x="96.0729%" y="245" width="3.0821%" height="15" fill="rgb(229,81,49)"/><text x="96.3229%" y="255.50">hir..</text></g><g><title>parse_crate (462,845 samples, 0.13%)</title><rect x="99.1799%" y="245" width="0.1285%" height="15" fill="rgb(236,28,36)"/><text x="99.4299%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,608,068 samples, 0.45%)</title><rect x="99.3601%" y="245" width="0.4464%" height="15" fill="rgb(249,185,26)"/><text x="99.6101%" y="255.50"></text></g><g><title>all (360,211,709 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (360,211,709 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (582,807 samples, 0.16%)</title><rect x="99.8382%" y="245" width="0.1618%" height="15" fill="rgb(221,78,26)"/><text x="100.0882%" y="255.50"></text></g></svg></svg>