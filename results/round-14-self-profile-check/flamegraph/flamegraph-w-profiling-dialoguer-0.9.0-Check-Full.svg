<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (523,398 samples, 0.15%)</title><rect x="16.9730%" y="149" width="0.1534%" height="15" fill="rgb(227,0,7)"/><text x="17.2230%" y="159.50"></text></g><g><title>param_env (763,196 samples, 0.22%)</title><rect x="19.1058%" y="117" width="0.2237%" height="15" fill="rgb(217,0,24)"/><text x="19.3558%" y="127.50"></text></g><g><title>item_attrs (1,132,982 samples, 0.33%)</title><rect x="19.9429%" y="85" width="0.3321%" height="15" fill="rgb(221,193,54)"/><text x="20.1929%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,101,252 samples, 0.32%)</title><rect x="19.9522%" y="69" width="0.3228%" height="15" fill="rgb(248,212,6)"/><text x="20.2022%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,406,985 samples, 0.41%)</title><rect x="19.8769%" y="101" width="0.4124%" height="15" fill="rgb(208,68,35)"/><text x="20.1269%" y="111.50"></text></g><g><title>adt_drop_tys (846,523 samples, 0.25%)</title><rect x="24.1220%" y="69" width="0.2481%" height="15" fill="rgb(232,128,0)"/><text x="24.3720%" y="79.50"></text></g><g><title>is_copy_raw (2,604,299 samples, 0.76%)</title><rect x="24.3701%" y="69" width="0.7633%" height="15" fill="rgb(207,160,47)"/><text x="24.6201%" y="79.50"></text></g><g><title>evaluate_obligation (2,117,739 samples, 0.62%)</title><rect x="24.5127%" y="53" width="0.6207%" height="15" fill="rgb(228,23,34)"/><text x="24.7627%" y="63.50"></text></g><g><title>needs_drop_raw (3,929,164 samples, 1.15%)</title><rect x="24.0008%" y="85" width="1.1516%" height="15" fill="rgb(218,30,26)"/><text x="24.2508%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (949,051 samples, 0.28%)</title><rect x="25.3079%" y="69" width="0.2782%" height="15" fill="rgb(220,122,19)"/><text x="25.5579%" y="79.50"></text></g><g><title>impl_parent (569,544 samples, 0.17%)</title><rect x="25.8343%" y="53" width="0.1669%" height="15" fill="rgb(250,228,42)"/><text x="26.0843%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (362,373 samples, 0.11%)</title><rect x="25.8950%" y="37" width="0.1062%" height="15" fill="rgb(240,193,28)"/><text x="26.1450%" y="47.50"></text></g><g><title>specialization_graph_of (1,905,163 samples, 0.56%)</title><rect x="25.6115%" y="69" width="0.5584%" height="15" fill="rgb(216,20,37)"/><text x="25.8615%" y="79.50"></text></g><g><title>impl_trait_ref (575,358 samples, 0.17%)</title><rect x="26.0012%" y="53" width="0.1686%" height="15" fill="rgb(206,188,39)"/><text x="26.2512%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (502,326 samples, 0.15%)</title><rect x="26.0226%" y="37" width="0.1472%" height="15" fill="rgb(217,207,13)"/><text x="26.2726%" y="47.50"></text></g><g><title>resolve_instance (3,603,278 samples, 1.06%)</title><rect x="25.1524%" y="85" width="1.0561%" height="15" fill="rgb(231,73,38)"/><text x="25.4024%" y="95.50"></text></g><g><title>thir_body (4,385,312 samples, 1.29%)</title><rect x="26.2455%" y="85" width="1.2853%" height="15" fill="rgb(225,20,46)"/><text x="26.4955%" y="95.50"></text></g><g><title>mir_const (32,107,196 samples, 9.41%)</title><rect x="18.1477%" y="133" width="9.4105%" height="15" fill="rgb(210,31,41)"/><text x="18.3977%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (28,075,115 samples, 8.23%)</title><rect x="19.3295%" y="117" width="8.2287%" height="15" fill="rgb(221,200,47)"/><text x="19.5795%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (24,796,263 samples, 7.27%)</title><rect x="20.2905%" y="101" width="7.2677%" height="15" fill="rgb(226,26,5)"/><text x="20.5405%" y="111.50">mir_built</text></g><g><title>mir_promoted (35,500,664 samples, 10.41%)</title><rect x="17.1897%" y="149" width="10.4051%" height="15" fill="rgb(249,33,26)"/><text x="17.4397%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,555,117 samples, 0.46%)</title><rect x="27.5985%" y="149" width="0.4558%" height="15" fill="rgb(235,183,28)"/><text x="27.8485%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,980,390 samples, 0.58%)</title><rect x="28.0542%" y="149" width="0.5804%" height="15" fill="rgb(221,5,38)"/><text x="28.3042%" y="159.50"></text></g><g><title>normalize_projection_ty (1,365,823 samples, 0.40%)</title><rect x="28.2344%" y="133" width="0.4003%" height="15" fill="rgb(247,18,42)"/><text x="28.4844%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,454,208 samples, 0.43%)</title><rect x="28.6347%" y="149" width="0.4262%" height="15" fill="rgb(241,131,45)"/><text x="28.8847%" y="159.50"></text></g><g><title>normalize_projection_ty (936,142 samples, 0.27%)</title><rect x="28.7865%" y="133" width="0.2744%" height="15" fill="rgb(249,31,29)"/><text x="29.0365%" y="143.50"></text></g><g><title>type_op_prove_predicate (9,211,569 samples, 2.70%)</title><rect x="29.0932%" y="149" width="2.6999%" height="15" fill="rgb(225,111,53)"/><text x="29.3432%" y="159.50">ty..</text></g><g><title>evaluate_obligation (881,240 samples, 0.26%)</title><rect x="31.5347%" y="133" width="0.2583%" height="15" fill="rgb(238,160,17)"/><text x="31.7847%" y="143.50"></text></g><g><title>MIR_borrow_checking (106,904,963 samples, 31.33%)</title><rect x="0.4666%" y="181" width="31.3334%" height="15" fill="rgb(214,148,48)"/><text x="0.7166%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (106,531,689 samples, 31.22%)</title><rect x="0.5760%" y="165" width="31.2240%" height="15" fill="rgb(232,36,49)"/><text x="0.8260%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (410,876 samples, 0.12%)</title><rect x="31.8290%" y="181" width="0.1204%" height="15" fill="rgb(209,103,24)"/><text x="32.0790%" y="191.50"></text></g><g><title>codegen_fn_attrs (462,168 samples, 0.14%)</title><rect x="32.1791%" y="149" width="0.1355%" height="15" fill="rgb(229,88,8)"/><text x="32.4291%" y="159.50"></text></g><g><title>check_mod_attrs (1,211,646 samples, 0.36%)</title><rect x="31.9594%" y="165" width="0.3551%" height="15" fill="rgb(213,181,19)"/><text x="32.2094%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (732,007 samples, 0.21%)</title><rect x="32.4663%" y="165" width="0.2145%" height="15" fill="rgb(254,191,54)"/><text x="32.7163%" y="175.50"></text></g><g><title>misc_checking_1 (2,573,059 samples, 0.75%)</title><rect x="31.9496%" y="181" width="0.7542%" height="15" fill="rgb(241,83,37)"/><text x="32.1996%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,973,402 samples, 0.58%)</title><rect x="32.7043%" y="165" width="0.5784%" height="15" fill="rgb(233,36,39)"/><text x="32.9543%" y="175.50"></text></g><g><title>check_mod_liveness (1,663,479 samples, 0.49%)</title><rect x="32.7952%" y="149" width="0.4876%" height="15" fill="rgb(226,3,54)"/><text x="33.0452%" y="159.50"></text></g><g><title>misc_checking_2 (4,557,931 samples, 1.34%)</title><rect x="32.7037%" y="181" width="1.3359%" height="15" fill="rgb(245,192,40)"/><text x="32.9537%" y="191.50"></text></g><g><title>match_checking (2,582,509 samples, 0.76%)</title><rect x="33.2827%" y="165" width="0.7569%" height="15" fill="rgb(238,167,29)"/><text x="33.5327%" y="175.50"></text></g><g><title>check_match (2,495,938 samples, 0.73%)</title><rect x="33.3081%" y="149" width="0.7315%" height="15" fill="rgb(232,182,51)"/><text x="33.5581%" y="159.50"></text></g><g><title>check_private_in_public (548,157 samples, 0.16%)</title><rect x="34.0432%" y="165" width="0.1607%" height="15" fill="rgb(231,60,39)"/><text x="34.2932%" y="175.50"></text></g><g><title>death_checking (944,110 samples, 0.28%)</title><rect x="34.2038%" y="165" width="0.2767%" height="15" fill="rgb(208,69,12)"/><text x="34.4538%" y="175.50"></text></g><g><title>param_env (746,770 samples, 0.22%)</title><rect x="35.0180%" y="133" width="0.2189%" height="15" fill="rgb(235,93,37)"/><text x="35.2680%" y="143.50"></text></g><g><title>predicates_of (383,203 samples, 0.11%)</title><rect x="35.1245%" y="117" width="0.1123%" height="15" fill="rgb(213,116,39)"/><text x="35.3745%" y="127.50"></text></g><g><title>impl_parent (702,142 samples, 0.21%)</title><rect x="35.6705%" y="101" width="0.2058%" height="15" fill="rgb(222,207,29)"/><text x="35.9205%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (436,698 samples, 0.13%)</title><rect x="35.7483%" y="85" width="0.1280%" height="15" fill="rgb(206,96,30)"/><text x="35.9983%" y="95.50"></text></g><g><title>specialization_graph_of (3,278,957 samples, 0.96%)</title><rect x="35.2928%" y="117" width="0.9610%" height="15" fill="rgb(218,138,4)"/><text x="35.5428%" y="127.50"></text></g><g><title>impl_trait_ref (1,288,312 samples, 0.38%)</title><rect x="35.8763%" y="101" width="0.3776%" height="15" fill="rgb(250,191,14)"/><text x="36.1263%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (988,671 samples, 0.29%)</title><rect x="35.9641%" y="85" width="0.2898%" height="15" fill="rgb(239,60,40)"/><text x="36.2141%" y="95.50"></text></g><g><title>resolve_instance (3,472,528 samples, 1.02%)</title><rect x="35.2368%" y="133" width="1.0178%" height="15" fill="rgb(206,27,48)"/><text x="35.4868%" y="143.50"></text></g><g><title>crate_lints (8,115,760 samples, 2.38%)</title><rect x="34.4813%" y="149" width="2.3787%" height="15" fill="rgb(225,35,8)"/><text x="34.7313%" y="159.50">cr..</text></g><g><title>type_of (2,021,633 samples, 0.59%)</title><rect x="36.2675%" y="133" width="0.5925%" height="15" fill="rgb(250,213,24)"/><text x="36.5175%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,733,980 samples, 0.51%)</title><rect x="36.3518%" y="117" width="0.5082%" height="15" fill="rgb(247,123,22)"/><text x="36.6018%" y="127.50"></text></g><g><title>lint_checking (9,906,790 samples, 2.90%)</title><rect x="34.4805%" y="165" width="2.9036%" height="15" fill="rgb(231,138,38)"/><text x="34.7305%" y="175.50">li..</text></g><g><title>module_lints (1,788,430 samples, 0.52%)</title><rect x="36.8600%" y="149" width="0.5242%" height="15" fill="rgb(231,145,46)"/><text x="37.1100%" y="159.50"></text></g><g><title>lint_mod (1,775,599 samples, 0.52%)</title><rect x="36.8637%" y="133" width="0.5204%" height="15" fill="rgb(251,118,11)"/><text x="37.1137%" y="143.50"></text></g><g><title>privacy_access_levels (643,957 samples, 0.19%)</title><rect x="37.3842%" y="165" width="0.1887%" height="15" fill="rgb(217,147,25)"/><text x="37.6342%" y="175.50"></text></g><g><title>privacy_checking_modules (3,471,568 samples, 1.02%)</title><rect x="37.5729%" y="165" width="1.0175%" height="15" fill="rgb(247,81,37)"/><text x="37.8229%" y="175.50"></text></g><g><title>check_mod_privacy (3,462,198 samples, 1.01%)</title><rect x="37.5757%" y="149" width="1.0148%" height="15" fill="rgb(209,12,38)"/><text x="37.8257%" y="159.50"></text></g><g><title>misc_checking_3 (15,551,863 samples, 4.56%)</title><rect x="34.0396%" y="181" width="4.5582%" height="15" fill="rgb(227,1,9)"/><text x="34.2896%" y="191.50">misc_..</text></g><g><title>impl_trait_ref (627,589 samples, 0.18%)</title><rect x="38.8003%" y="117" width="0.1839%" height="15" fill="rgb(248,47,43)"/><text x="39.0503%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (576,179 samples, 0.17%)</title><rect x="38.8154%" y="101" width="0.1689%" height="15" fill="rgb(221,10,30)"/><text x="39.0654%" y="111.50"></text></g><g><title>coherent_trait (1,218,654 samples, 0.36%)</title><rect x="38.6493%" y="149" width="0.3572%" height="15" fill="rgb(210,229,1)"/><text x="38.8993%" y="159.50"></text></g><g><title>specialization_graph_of (1,195,224 samples, 0.35%)</title><rect x="38.6562%" y="133" width="0.3503%" height="15" fill="rgb(222,148,37)"/><text x="38.9062%" y="143.50"></text></g><g><title>coherence_checking (1,288,014 samples, 0.38%)</title><rect x="38.6447%" y="165" width="0.3775%" height="15" fill="rgb(234,67,33)"/><text x="38.8947%" y="175.50"></text></g><g><title>associated_item (503,548 samples, 0.15%)</title><rect x="53.9916%" y="101" width="0.1476%" height="15" fill="rgb(247,98,35)"/><text x="54.2416%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (386,847 samples, 0.11%)</title><rect x="54.0259%" y="85" width="0.1134%" height="15" fill="rgb(247,138,52)"/><text x="54.2759%" y="95.50"></text></g><g><title>associated_items (764,108 samples, 0.22%)</title><rect x="53.9291%" y="117" width="0.2240%" height="15" fill="rgb(213,79,30)"/><text x="54.1791%" y="127.50"></text></g><g><title>adt_dtorck_constraint (408,834 samples, 0.12%)</title><rect x="54.5247%" y="69" width="0.1198%" height="15" fill="rgb(246,177,23)"/><text x="54.7747%" y="79.50"></text></g><g><title>adt_dtorck_constraint (708,300 samples, 0.21%)</title><rect x="54.4559%" y="85" width="0.2076%" height="15" fill="rgb(230,62,27)"/><text x="54.7059%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,162,882 samples, 0.34%)</title><rect x="54.3476%" y="101" width="0.3408%" height="15" fill="rgb(216,154,8)"/><text x="54.5976%" y="111.50"></text></g><g><title>dropck_outlives (1,733,738 samples, 0.51%)</title><rect x="54.1901%" y="117" width="0.5082%" height="15" fill="rgb(244,35,45)"/><text x="54.4401%" y="127.50"></text></g><g><title>adt_sized_constraint (384,733 samples, 0.11%)</title><rect x="55.2991%" y="101" width="0.1128%" height="15" fill="rgb(251,115,12)"/><text x="55.5491%" y="111.50"></text></g><g><title>trait_impls_of (636,617 samples, 0.19%)</title><rect x="55.6663%" y="101" width="0.1866%" height="15" fill="rgb(240,54,50)"/><text x="55.9163%" y="111.50"></text></g><g><title>evaluate_obligation (3,924,273 samples, 1.15%)</title><rect x="54.7037%" y="117" width="1.1502%" height="15" fill="rgb(233,84,52)"/><text x="54.9537%" y="127.50"></text></g><g><title>evaluate_obligation (440,464 samples, 0.13%)</title><rect x="56.3098%" y="101" width="0.1291%" height="15" fill="rgb(207,117,47)"/><text x="56.5598%" y="111.50"></text></g><g><title>method_autoderef_steps (859,539 samples, 0.25%)</title><rect x="56.1918%" y="117" width="0.2519%" height="15" fill="rgb(249,43,39)"/><text x="56.4418%" y="127.50"></text></g><g><title>predicates_of (902,042 samples, 0.26%)</title><rect x="56.4754%" y="117" width="0.2644%" height="15" fill="rgb(209,38,44)"/><text x="56.7254%" y="127.50"></text></g><g><title>predicates_defined_on (448,826 samples, 0.13%)</title><rect x="56.6082%" y="101" width="0.1315%" height="15" fill="rgb(236,212,23)"/><text x="56.8582%" y="111.50"></text></g><g><title>associated_item (432,145 samples, 0.13%)</title><rect x="72.7632%" y="85" width="0.1267%" height="15" fill="rgb(242,79,21)"/><text x="73.0132%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (343,975 samples, 0.10%)</title><rect x="72.7891%" y="69" width="0.1008%" height="15" fill="rgb(211,96,35)"/><text x="73.0391%" y="79.50"></text></g><g><title>associated_items (619,808 samples, 0.18%)</title><rect x="72.7181%" y="101" width="0.1817%" height="15" fill="rgb(253,215,40)"/><text x="72.9681%" y="111.50"></text></g><g><title>dropck_outlives (643,893 samples, 0.19%)</title><rect x="72.9246%" y="101" width="0.1887%" height="15" fill="rgb(211,81,21)"/><text x="73.1746%" y="111.50"></text></g><g><title>generics_of (1,052,400 samples, 0.31%)</title><rect x="74.4103%" y="85" width="0.3085%" height="15" fill="rgb(208,190,38)"/><text x="74.6603%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (668,816 samples, 0.20%)</title><rect x="74.5228%" y="69" width="0.1960%" height="15" fill="rgb(235,213,38)"/><text x="74.7728%" y="79.50"></text></g><g><title>impl_trait_ref (1,512,229 samples, 0.44%)</title><rect x="74.7348%" y="85" width="0.4432%" height="15" fill="rgb(237,122,38)"/><text x="74.9848%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,351,067 samples, 0.40%)</title><rect x="74.7820%" y="69" width="0.3960%" height="15" fill="rgb(244,218,35)"/><text x="75.0320%" y="79.50"></text></g><g><title>evaluate_obligation (7,914,669 samples, 2.32%)</title><rect x="73.1188%" y="101" width="2.3198%" height="15" fill="rgb(240,68,47)"/><text x="73.3688%" y="111.50">e..</text></g><g><title>is_copy_raw (716,597 samples, 0.21%)</title><rect x="75.6522%" y="101" width="0.2100%" height="15" fill="rgb(210,16,53)"/><text x="75.9022%" y="111.50"></text></g><g><title>evaluate_obligation (546,504 samples, 0.16%)</title><rect x="75.7021%" y="85" width="0.1602%" height="15" fill="rgb(235,124,12)"/><text x="75.9521%" y="95.50"></text></g><g><title>evaluate_obligation (393,805 samples, 0.12%)</title><rect x="76.0447%" y="85" width="0.1154%" height="15" fill="rgb(224,169,11)"/><text x="76.2947%" y="95.50"></text></g><g><title>method_autoderef_steps (857,638 samples, 0.25%)</title><rect x="75.9106%" y="101" width="0.2514%" height="15" fill="rgb(250,166,2)"/><text x="76.1606%" y="111.50"></text></g><g><title>predicates_of (398,618 samples, 0.12%)</title><rect x="76.1753%" y="101" width="0.1168%" height="15" fill="rgb(242,216,29)"/><text x="76.4253%" y="111.50"></text></g><g><title>typeck (66,705,523 samples, 19.55%)</title><rect x="56.8259%" y="117" width="19.5511%" height="15" fill="rgb(230,116,27)"/><text x="57.0759%" y="127.50">typeck</text></g><g><title>item_bodies_checking (127,492,403 samples, 37.37%)</title><rect x="39.0364%" y="165" width="37.3675%" height="15" fill="rgb(228,99,48)"/><text x="39.2864%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (127,488,563 samples, 37.37%)</title><rect x="39.0376%" y="149" width="37.3663%" height="15" fill="rgb(253,11,6)"/><text x="39.2876%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (127,268,720 samples, 37.30%)</title><rect x="39.1020%" y="133" width="37.3019%" height="15" fill="rgb(247,143,39)"/><text x="39.3520%" y="143.50">typeck</text></g><g><title>adt_destructor (451,605 samples, 0.13%)</title><rect x="76.5823%" y="133" width="0.1324%" height="15" fill="rgb(236,97,10)"/><text x="76.8323%" y="143.50"></text></g><g><title>coherent_trait (443,785 samples, 0.13%)</title><rect x="76.5846%" y="117" width="0.1301%" height="15" fill="rgb(233,208,19)"/><text x="76.8346%" y="127.50"></text></g><g><title>specialization_graph_of (441,205 samples, 0.13%)</title><rect x="76.5854%" y="101" width="0.1293%" height="15" fill="rgb(216,164,2)"/><text x="76.8354%" y="111.50"></text></g><g><title>item_types_checking (1,123,993 samples, 0.33%)</title><rect x="76.4039%" y="165" width="0.3294%" height="15" fill="rgb(220,129,5)"/><text x="76.6539%" y="175.50"></text></g><g><title>check_mod_item_types (1,114,953 samples, 0.33%)</title><rect x="76.4065%" y="149" width="0.3268%" height="15" fill="rgb(242,17,10)"/><text x="76.6565%" y="159.50"></text></g><g><title>fn_sig (662,306 samples, 0.19%)</title><rect x="76.8961%" y="133" width="0.1941%" height="15" fill="rgb(242,107,0)"/><text x="77.1461%" y="143.50"></text></g><g><title>is_late_bound_map (1,344,806 samples, 0.39%)</title><rect x="77.1578%" y="117" width="0.3942%" height="15" fill="rgb(251,28,31)"/><text x="77.4078%" y="127.50"></text></g><g><title>resolve_lifetimes (1,323,716 samples, 0.39%)</title><rect x="77.1640%" y="101" width="0.3880%" height="15" fill="rgb(233,223,10)"/><text x="77.4140%" y="111.50"></text></g><g><title>lint_levels (722,018 samples, 0.21%)</title><rect x="77.3403%" y="85" width="0.2116%" height="15" fill="rgb(215,21,27)"/><text x="77.5903%" y="95.50"></text></g><g><title>generics_of (1,772,489 samples, 0.52%)</title><rect x="77.0902%" y="133" width="0.5195%" height="15" fill="rgb(232,23,21)"/><text x="77.3402%" y="143.50"></text></g><g><title>explicit_predicates_of (377,394 samples, 0.11%)</title><rect x="77.6875%" y="101" width="0.1106%" height="15" fill="rgb(244,5,23)"/><text x="77.9375%" y="111.50"></text></g><g><title>predicates_of (1,445,556 samples, 0.42%)</title><rect x="77.6212%" y="133" width="0.4237%" height="15" fill="rgb(226,81,46)"/><text x="77.8712%" y="143.50"></text></g><g><title>predicates_defined_on (1,358,335 samples, 0.40%)</title><rect x="77.6468%" y="117" width="0.3981%" height="15" fill="rgb(247,70,30)"/><text x="77.8968%" y="127.50"></text></g><g><title>inferred_outlives_of (841,900 samples, 0.25%)</title><rect x="77.7981%" y="101" width="0.2468%" height="15" fill="rgb(212,68,19)"/><text x="78.0481%" y="111.50"></text></g><g><title>inferred_outlives_crate (805,139 samples, 0.24%)</title><rect x="77.8089%" y="85" width="0.2360%" height="15" fill="rgb(240,187,13)"/><text x="78.0589%" y="95.50"></text></g><g><title>type_of (556,047 samples, 0.16%)</title><rect x="77.8819%" y="69" width="0.1630%" height="15" fill="rgb(223,113,26)"/><text x="78.1319%" y="79.50"></text></g><g><title>type_collecting (4,632,032 samples, 1.36%)</title><rect x="76.7353%" y="165" width="1.3576%" height="15" fill="rgb(206,192,2)"/><text x="76.9853%" y="175.50"></text></g><g><title>collect_mod_item_types (4,611,682 samples, 1.35%)</title><rect x="76.7413%" y="149" width="1.3517%" height="15" fill="rgb(241,108,4)"/><text x="76.9913%" y="159.50"></text></g><g><title>evaluate_obligation (863,932 samples, 0.25%)</title><rect x="79.5863%" y="133" width="0.2532%" height="15" fill="rgb(247,173,49)"/><text x="79.8363%" y="143.50"></text></g><g><title>implied_outlives_bounds (444,812 samples, 0.13%)</title><rect x="79.8462%" y="133" width="0.1304%" height="15" fill="rgb(224,114,35)"/><text x="80.0962%" y="143.50"></text></g><g><title>param_env (719,811 samples, 0.21%)</title><rect x="79.9767%" y="133" width="0.2110%" height="15" fill="rgb(245,159,27)"/><text x="80.2267%" y="143.50"></text></g><g><title>region_scope_tree (1,109,676 samples, 0.33%)</title><rect x="80.2041%" y="133" width="0.3252%" height="15" fill="rgb(245,172,44)"/><text x="80.4541%" y="143.50"></text></g><g><title>check_impl_item_well_formed (8,049,748 samples, 2.36%)</title><rect x="78.2207%" y="149" width="2.3593%" height="15" fill="rgb(236,23,11)"/><text x="78.4707%" y="159.50">c..</text></g><g><title>adt_sized_constraint (344,264 samples, 0.10%)</title><rect x="80.9680%" y="117" width="0.1009%" height="15" fill="rgb(205,117,38)"/><text x="81.2180%" y="127.50"></text></g><g><title>evaluate_obligation (587,565 samples, 0.17%)</title><rect x="80.9038%" y="133" width="0.1722%" height="15" fill="rgb(237,72,25)"/><text x="81.1538%" y="143.50"></text></g><g><title>object_safety_violations (480,096 samples, 0.14%)</title><rect x="81.1067%" y="133" width="0.1407%" height="15" fill="rgb(244,70,9)"/><text x="81.3567%" y="143.50"></text></g><g><title>trait_impls_of (399,075 samples, 0.12%)</title><rect x="81.3421%" y="133" width="0.1170%" height="15" fill="rgb(217,125,39)"/><text x="81.5921%" y="143.50"></text></g><g><title>check_item_well_formed (3,123,615 samples, 0.92%)</title><rect x="80.5800%" y="149" width="0.9155%" height="15" fill="rgb(235,36,10)"/><text x="80.8300%" y="159.50"></text></g><g><title>analysis (278,441,077 samples, 81.61%)</title><rect x="0.2317%" y="197" width="81.6099%" height="15" fill="rgb(251,123,47)"/><text x="0.4817%" y="207.50">analysis</text></g><g><title>type_check_crate (147,541,387 samples, 43.24%)</title><rect x="38.5978%" y="181" width="43.2437%" height="15" fill="rgb(221,13,13)"/><text x="38.8478%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,776,772 samples, 3.74%)</title><rect x="78.0967%" y="165" width="3.7448%" height="15" fill="rgb(238,131,9)"/><text x="78.3467%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (1,180,663 samples, 0.35%)</title><rect x="81.4955%" y="149" width="0.3460%" height="15" fill="rgb(211,50,8)"/><text x="81.7455%" y="159.50"></text></g><g><title>codegen_crate (690,718 samples, 0.20%)</title><rect x="81.8445%" y="197" width="0.2024%" height="15" fill="rgb(245,182,24)"/><text x="82.0945%" y="207.50"></text></g><g><title>metadata_register_crate (2,364,836 samples, 0.69%)</title><rect x="92.2274%" y="149" width="0.6931%" height="15" fill="rgb(242,14,37)"/><text x="92.4774%" y="159.50"></text></g><g><title>metadata_register_crate (853,088 samples, 0.25%)</title><rect x="92.6705%" y="133" width="0.2500%" height="15" fill="rgb(246,228,12)"/><text x="92.9205%" y="143.50"></text></g><g><title>macro_expand_crate (37,685,420 samples, 11.05%)</title><rect x="82.2534%" y="181" width="11.0454%" height="15" fill="rgb(213,55,15)"/><text x="82.5034%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (37,672,040 samples, 11.04%)</title><rect x="82.2573%" y="165" width="11.0415%" height="15" fill="rgb(209,9,3)"/><text x="82.5073%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,290,786 samples, 0.38%)</title><rect x="92.9205%" y="149" width="0.3783%" height="15" fill="rgb(230,59,30)"/><text x="93.1705%" y="159.50"></text></g><g><title>late_resolve_crate (3,643,081 samples, 1.07%)</title><rect x="93.3665%" y="165" width="1.0678%" height="15" fill="rgb(209,121,21)"/><text x="93.6165%" y="175.50"></text></g><g><title>configure_and_expand (42,533,425 samples, 12.47%)</title><rect x="82.0470%" y="197" width="12.4664%" height="15" fill="rgb(220,109,13)"/><text x="82.2970%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,094,656 samples, 1.20%)</title><rect x="93.3132%" y="181" width="1.2001%" height="15" fill="rgb(232,18,1)"/><text x="93.5632%" y="191.50"></text></g><g><title>drop_ast (425,795 samples, 0.12%)</title><rect x="94.5133%" y="197" width="0.1248%" height="15" fill="rgb(215,41,42)"/><text x="94.7633%" y="207.50"></text></g><g><title>early_lint_checks (877,410 samples, 0.26%)</title><rect x="94.6442%" y="197" width="0.2572%" height="15" fill="rgb(224,123,36)"/><text x="94.8942%" y="207.50"></text></g><g><title>free_global_ctxt (5,270,169 samples, 1.54%)</title><rect x="94.9014%" y="197" width="1.5447%" height="15" fill="rgb(240,125,3)"/><text x="95.1514%" y="207.50"></text></g><g><title>generate_crate_metadata (1,758,829 samples, 0.52%)</title><rect x="96.4460%" y="197" width="0.5155%" height="15" fill="rgb(205,98,50)"/><text x="96.6960%" y="207.50"></text></g><g><title>hir_lowering (7,984,158 samples, 2.34%)</title><rect x="96.9615%" y="197" width="2.3401%" height="15" fill="rgb(205,185,37)"/><text x="97.2115%" y="207.50">h..</text></g><g><title>parse_crate (390,154 samples, 0.11%)</title><rect x="99.3215%" y="197" width="0.1144%" height="15" fill="rgb(238,207,15)"/><text x="99.5715%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,238,024 samples, 0.36%)</title><rect x="99.4914%" y="197" width="0.3629%" height="15" fill="rgb(213,199,42)"/><text x="99.7414%" y="207.50"></text></g><g><title>all (341,185,578 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (341,185,578 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (399,555 samples, 0.12%)</title><rect x="99.8829%" y="197" width="0.1171%" height="15" fill="rgb(241,35,35)"/><text x="100.1329%" y="207.50"></text></g></svg></svg>