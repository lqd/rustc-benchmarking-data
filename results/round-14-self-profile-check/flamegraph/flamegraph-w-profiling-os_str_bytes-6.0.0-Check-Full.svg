<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (466,026 samples, 0.25%)</title><rect x="12.6268%" y="197" width="0.2463%" height="15" fill="rgb(227,0,7)"/><text x="12.8768%" y="207.50"></text></g><g><title>item_attrs (402,444 samples, 0.21%)</title><rect x="13.4019%" y="165" width="0.2127%" height="15" fill="rgb(217,0,24)"/><text x="13.6519%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (388,674 samples, 0.21%)</title><rect x="13.4092%" y="149" width="0.2054%" height="15" fill="rgb(221,193,54)"/><text x="13.6592%" y="159.50"></text></g><g><title>codegen_fn_attrs (586,536 samples, 0.31%)</title><rect x="13.3194%" y="181" width="0.3100%" height="15" fill="rgb(248,212,6)"/><text x="13.5694%" y="191.50"></text></g><g><title>adt_drop_tys (472,416 samples, 0.25%)</title><rect x="16.0948%" y="149" width="0.2497%" height="15" fill="rgb(208,68,35)"/><text x="16.3448%" y="159.50"></text></g><g><title>is_copy_raw (1,192,251 samples, 0.63%)</title><rect x="16.3445%" y="149" width="0.6301%" height="15" fill="rgb(232,128,0)"/><text x="16.5945%" y="159.50"></text></g><g><title>evaluate_obligation (1,003,700 samples, 0.53%)</title><rect x="16.4442%" y="133" width="0.5305%" height="15" fill="rgb(207,160,47)"/><text x="16.6942%" y="143.50"></text></g><g><title>needs_drop_raw (1,833,140 samples, 0.97%)</title><rect x="16.0122%" y="165" width="0.9688%" height="15" fill="rgb(228,23,34)"/><text x="16.2622%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (957,746 samples, 0.51%)</title><rect x="17.2794%" y="149" width="0.5062%" height="15" fill="rgb(218,30,26)"/><text x="17.5294%" y="159.50"></text></g><g><title>resolve_instance (1,974,405 samples, 1.04%)</title><rect x="16.9947%" y="165" width="1.0435%" height="15" fill="rgb(220,122,19)"/><text x="17.2447%" y="175.50"></text></g><g><title>thir_body (1,560,027 samples, 0.82%)</title><rect x="18.0732%" y="165" width="0.8245%" height="15" fill="rgb(250,228,42)"/><text x="18.3232%" y="175.50"></text></g><g><title>mir_const (13,376,964 samples, 7.07%)</title><rect x="11.8527%" y="213" width="7.0697%" height="15" fill="rgb(240,193,28)"/><text x="12.1027%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (11,446,127 samples, 6.05%)</title><rect x="12.8731%" y="197" width="6.0493%" height="15" fill="rgb(216,20,37)"/><text x="13.1231%" y="207.50">unsafety..</text></g><g><title>mir_built (10,015,251 samples, 5.29%)</title><rect x="13.6294%" y="181" width="5.2931%" height="15" fill="rgb(206,188,39)"/><text x="13.8794%" y="191.50">mir_bu..</text></g><g><title>mir_promoted (15,083,303 samples, 7.97%)</title><rect x="11.1167%" y="229" width="7.9715%" height="15" fill="rgb(217,207,13)"/><text x="11.3667%" y="239.50">mir_promoted</text></g><g><title>mir_const_qualif (313,805 samples, 0.17%)</title><rect x="18.9224%" y="213" width="0.1658%" height="15" fill="rgb(231,73,38)"/><text x="19.1724%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (411,145 samples, 0.22%)</title><rect x="19.0886%" y="229" width="0.2173%" height="15" fill="rgb(225,20,46)"/><text x="19.3386%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (693,717 samples, 0.37%)</title><rect x="19.3059%" y="229" width="0.3666%" height="15" fill="rgb(210,31,41)"/><text x="19.5559%" y="239.50"></text></g><g><title>normalize_projection_ty (401,087 samples, 0.21%)</title><rect x="19.4606%" y="213" width="0.2120%" height="15" fill="rgb(221,200,47)"/><text x="19.7106%" y="223.50"></text></g><g><title>type_op_normalize_ty (367,066 samples, 0.19%)</title><rect x="19.7466%" y="229" width="0.1940%" height="15" fill="rgb(226,26,5)"/><text x="19.9966%" y="239.50"></text></g><g><title>normalize_projection_ty (199,592 samples, 0.11%)</title><rect x="19.8351%" y="213" width="0.1055%" height="15" fill="rgb(249,33,26)"/><text x="20.0851%" y="223.50"></text></g><g><title>type_op_prove_predicate (3,974,910 samples, 2.10%)</title><rect x="19.9406%" y="229" width="2.1007%" height="15" fill="rgb(235,183,28)"/><text x="20.1906%" y="239.50">t..</text></g><g><title>evaluate_obligation (336,793 samples, 0.18%)</title><rect x="21.8633%" y="213" width="0.1780%" height="15" fill="rgb(221,5,38)"/><text x="22.1133%" y="223.50"></text></g><g><title>MIR_borrow_checking (40,447,973 samples, 21.38%)</title><rect x="0.6690%" y="261" width="21.3768%" height="15" fill="rgb(247,18,42)"/><text x="0.9190%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (40,192,983 samples, 21.24%)</title><rect x="0.8038%" y="245" width="21.2420%" height="15" fill="rgb(241,131,45)"/><text x="1.0538%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (265,663 samples, 0.14%)</title><rect x="22.0458%" y="261" width="0.1404%" height="15" fill="rgb(249,31,29)"/><text x="22.2958%" y="271.50"></text></g><g><title>hir_module_items (280,783 samples, 0.15%)</title><rect x="22.1862%" y="261" width="0.1484%" height="15" fill="rgb(225,111,53)"/><text x="22.4362%" y="271.50"></text></g><g><title>fn_sig (298,984 samples, 0.16%)</title><rect x="22.6034%" y="213" width="0.1580%" height="15" fill="rgb(238,160,17)"/><text x="22.8534%" y="223.50"></text></g><g><title>codegen_fn_attrs (201,673 samples, 0.11%)</title><rect x="22.9247%" y="197" width="0.1066%" height="15" fill="rgb(214,148,48)"/><text x="23.1747%" y="207.50"></text></g><g><title>should_inherit_track_caller (394,524 samples, 0.21%)</title><rect x="22.8301%" y="213" width="0.2085%" height="15" fill="rgb(232,36,49)"/><text x="23.0801%" y="223.50"></text></g><g><title>codegen_fn_attrs (957,119 samples, 0.51%)</title><rect x="22.5437%" y="229" width="0.5058%" height="15" fill="rgb(209,103,24)"/><text x="22.7937%" y="239.50"></text></g><g><title>check_mod_attrs (1,326,523 samples, 0.70%)</title><rect x="22.3485%" y="245" width="0.7011%" height="15" fill="rgb(229,88,8)"/><text x="22.5985%" y="255.50"></text></g><g><title>check_mod_const_bodies (202,392 samples, 0.11%)</title><rect x="23.0496%" y="245" width="0.1070%" height="15" fill="rgb(213,181,19)"/><text x="23.2996%" y="255.50"></text></g><g><title>lookup_deprecation_entry (200,512 samples, 0.11%)</title><rect x="23.3566%" y="229" width="0.1060%" height="15" fill="rgb(254,191,54)"/><text x="23.6066%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (601,156 samples, 0.32%)</title><rect x="23.2190%" y="245" width="0.3177%" height="15" fill="rgb(241,83,37)"/><text x="23.4690%" y="255.50"></text></g><g><title>misc_checking_1 (2,356,136 samples, 1.25%)</title><rect x="22.3349%" y="261" width="1.2452%" height="15" fill="rgb(233,36,39)"/><text x="22.5849%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (731,339 samples, 0.39%)</title><rect x="23.5810%" y="245" width="0.3865%" height="15" fill="rgb(226,3,54)"/><text x="23.8310%" y="255.50"></text></g><g><title>check_mod_liveness (562,237 samples, 0.30%)</title><rect x="23.6704%" y="229" width="0.2971%" height="15" fill="rgb(245,192,40)"/><text x="23.9204%" y="239.50"></text></g><g><title>misc_checking_2 (1,811,221 samples, 0.96%)</title><rect x="23.5801%" y="261" width="0.9572%" height="15" fill="rgb(238,167,29)"/><text x="23.8301%" y="271.50"></text></g><g><title>match_checking (1,078,082 samples, 0.57%)</title><rect x="23.9675%" y="245" width="0.5698%" height="15" fill="rgb(232,182,51)"/><text x="24.2175%" y="255.50"></text></g><g><title>check_match (1,018,801 samples, 0.54%)</title><rect x="23.9989%" y="229" width="0.5384%" height="15" fill="rgb(231,60,39)"/><text x="24.2489%" y="239.50"></text></g><g><title>check_private_in_public (367,334 samples, 0.19%)</title><rect x="24.5427%" y="245" width="0.1941%" height="15" fill="rgb(208,69,12)"/><text x="24.7927%" y="255.50"></text></g><g><title>death_checking (810,569 samples, 0.43%)</title><rect x="24.7369%" y="245" width="0.4284%" height="15" fill="rgb(235,93,37)"/><text x="24.9869%" y="255.50"></text></g><g><title>item_attrs (228,244 samples, 0.12%)</title><rect x="25.0446%" y="229" width="0.1206%" height="15" fill="rgb(213,116,39)"/><text x="25.2946%" y="239.50"></text></g><g><title>metadata_decode_entry_item_attrs (225,904 samples, 0.12%)</title><rect x="25.0459%" y="213" width="0.1194%" height="15" fill="rgb(222,207,29)"/><text x="25.2959%" y="223.50"></text></g><g><title>eval_to_const_value_raw (202,062 samples, 0.11%)</title><rect x="25.6661%" y="213" width="0.1068%" height="15" fill="rgb(206,96,30)"/><text x="25.9161%" y="223.50"></text></g><g><title>eval_to_const_value_raw (199,792 samples, 0.11%)</title><rect x="25.6673%" y="197" width="0.1056%" height="15" fill="rgb(218,138,4)"/><text x="25.9173%" y="207.50"></text></g><g><title>eval_to_allocation_raw (193,292 samples, 0.10%)</title><rect x="25.6707%" y="181" width="0.1022%" height="15" fill="rgb(250,191,14)"/><text x="25.9207%" y="191.50"></text></g><g><title>param_env (420,913 samples, 0.22%)</title><rect x="25.7729%" y="213" width="0.2225%" height="15" fill="rgb(239,60,40)"/><text x="26.0229%" y="223.50"></text></g><g><title>crate_lints (2,718,510 samples, 1.44%)</title><rect x="25.1662%" y="229" width="1.4367%" height="15" fill="rgb(206,27,48)"/><text x="25.4162%" y="239.50"></text></g><g><title>type_of (1,139,234 samples, 0.60%)</title><rect x="26.0008%" y="213" width="0.6021%" height="15" fill="rgb(225,35,8)"/><text x="26.2508%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (903,811 samples, 0.48%)</title><rect x="26.1252%" y="197" width="0.4777%" height="15" fill="rgb(250,213,24)"/><text x="26.3752%" y="207.50"></text></g><g><title>lint_checking (3,337,077 samples, 1.76%)</title><rect x="25.1653%" y="245" width="1.7636%" height="15" fill="rgb(247,123,22)"/><text x="25.4153%" y="255.50"></text></g><g><title>module_lints (616,827 samples, 0.33%)</title><rect x="26.6029%" y="229" width="0.3260%" height="15" fill="rgb(231,138,38)"/><text x="26.8529%" y="239.50"></text></g><g><title>lint_mod (608,607 samples, 0.32%)</title><rect x="26.6073%" y="213" width="0.3216%" height="15" fill="rgb(231,145,46)"/><text x="26.8573%" y="223.50"></text></g><g><title>privacy_access_levels (640,137 samples, 0.34%)</title><rect x="26.9289%" y="245" width="0.3383%" height="15" fill="rgb(251,118,11)"/><text x="27.1789%" y="255.50"></text></g><g><title>privacy_checking_modules (1,306,915 samples, 0.69%)</title><rect x="27.2672%" y="245" width="0.6907%" height="15" fill="rgb(217,147,25)"/><text x="27.5172%" y="255.50"></text></g><g><title>check_mod_privacy (1,301,065 samples, 0.69%)</title><rect x="27.2703%" y="229" width="0.6876%" height="15" fill="rgb(247,81,37)"/><text x="27.5203%" y="239.50"></text></g><g><title>misc_checking_3 (6,500,443 samples, 3.44%)</title><rect x="24.5373%" y="261" width="3.4355%" height="15" fill="rgb(209,12,38)"/><text x="24.7873%" y="271.50">mis..</text></g><g><title>impl_parent (2,943,441 samples, 1.56%)</title><rect x="30.7123%" y="197" width="1.5556%" height="15" fill="rgb(227,1,9)"/><text x="30.9623%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,739,412 samples, 0.92%)</title><rect x="31.3487%" y="181" width="0.9193%" height="15" fill="rgb(248,47,43)"/><text x="31.5987%" y="191.50"></text></g><g><title>impl_trait_ref (6,502,774 samples, 3.44%)</title><rect x="32.2679%" y="197" width="3.4367%" height="15" fill="rgb(221,10,30)"/><text x="32.5179%" y="207.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,934,766 samples, 2.61%)</title><rect x="33.0966%" y="181" width="2.6080%" height="15" fill="rgb(210,229,1)"/><text x="33.3466%" y="191.50">me..</text></g><g><title>trait_impls_of (1,106,913 samples, 0.59%)</title><rect x="35.7878%" y="197" width="0.5850%" height="15" fill="rgb(222,148,37)"/><text x="36.0378%" y="207.50"></text></g><g><title>implementations_of_trait (329,325 samples, 0.17%)</title><rect x="36.1987%" y="181" width="0.1740%" height="15" fill="rgb(234,67,33)"/><text x="36.4487%" y="191.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (248,325 samples, 0.13%)</title><rect x="36.2416%" y="165" width="0.1312%" height="15" fill="rgb(247,98,35)"/><text x="36.4916%" y="175.50"></text></g><g><title>coherent_trait (15,763,887 samples, 8.33%)</title><rect x="28.0517%" y="229" width="8.3312%" height="15" fill="rgb(247,138,52)"/><text x="28.3017%" y="239.50">coherent_tra..</text></g><g><title>specialization_graph_of (15,714,417 samples, 8.31%)</title><rect x="28.0779%" y="213" width="8.3051%" height="15" fill="rgb(213,79,30)"/><text x="28.3279%" y="223.50">specializati..</text></g><g><title>coherence_checking (15,904,089 samples, 8.41%)</title><rect x="28.0371%" y="245" width="8.4053%" height="15" fill="rgb(246,177,23)"/><text x="28.2871%" y="255.50">coherence_ch..</text></g><g><title>associated_item (466,216 samples, 0.25%)</title><rect x="49.3930%" y="181" width="0.2464%" height="15" fill="rgb(230,62,27)"/><text x="49.6430%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (373,426 samples, 0.20%)</title><rect x="49.4421%" y="165" width="0.1974%" height="15" fill="rgb(216,154,8)"/><text x="49.6921%" y="175.50"></text></g><g><title>associated_items (668,746 samples, 0.35%)</title><rect x="49.2986%" y="197" width="0.3534%" height="15" fill="rgb(244,35,45)"/><text x="49.5486%" y="207.50"></text></g><g><title>adt_def (399,464 samples, 0.21%)</title><rect x="50.0015%" y="85" width="0.2111%" height="15" fill="rgb(251,115,12)"/><text x="50.2515%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (399,204 samples, 0.21%)</title><rect x="50.0016%" y="69" width="0.2110%" height="15" fill="rgb(240,54,50)"/><text x="50.2516%" y="79.50"></text></g><g><title>item_attrs (397,264 samples, 0.21%)</title><rect x="50.0027%" y="53" width="0.2100%" height="15" fill="rgb(233,84,52)"/><text x="50.2527%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (396,804 samples, 0.21%)</title><rect x="50.0029%" y="37" width="0.2097%" height="15" fill="rgb(207,117,47)"/><text x="50.2529%" y="47.50"></text></g><g><title>adt_dtorck_constraint (407,674 samples, 0.22%)</title><rect x="49.9984%" y="101" width="0.2155%" height="15" fill="rgb(249,43,39)"/><text x="50.2484%" y="111.50"></text></g><g><title>adt_dtorck_constraint (431,695 samples, 0.23%)</title><rect x="49.9859%" y="117" width="0.2282%" height="15" fill="rgb(209,38,44)"/><text x="50.2359%" y="127.50"></text></g><g><title>adt_dtorck_constraint (464,075 samples, 0.25%)</title><rect x="49.9709%" y="133" width="0.2453%" height="15" fill="rgb(236,212,23)"/><text x="50.2209%" y="143.50"></text></g><g><title>adt_dtorck_constraint (481,465 samples, 0.25%)</title><rect x="49.9639%" y="149" width="0.2545%" height="15" fill="rgb(242,79,21)"/><text x="50.2139%" y="159.50"></text></g><g><title>adt_dtorck_constraint (509,725 samples, 0.27%)</title><rect x="49.9501%" y="165" width="0.2694%" height="15" fill="rgb(211,96,35)"/><text x="50.2001%" y="175.50"></text></g><g><title>adt_dtorck_constraint (710,078 samples, 0.38%)</title><rect x="49.8621%" y="181" width="0.3753%" height="15" fill="rgb(253,215,40)"/><text x="50.1121%" y="191.50"></text></g><g><title>dropck_outlives (1,106,003 samples, 0.58%)</title><rect x="49.7088%" y="197" width="0.5845%" height="15" fill="rgb(211,81,21)"/><text x="49.9588%" y="207.50"></text></g><g><title>predicates_of (333,725 samples, 0.18%)</title><rect x="51.5793%" y="181" width="0.1764%" height="15" fill="rgb(208,190,38)"/><text x="51.8293%" y="191.50"></text></g><g><title>predicates_defined_on (214,653 samples, 0.11%)</title><rect x="51.6422%" y="165" width="0.1134%" height="15" fill="rgb(235,213,38)"/><text x="51.8922%" y="175.50"></text></g><g><title>trait_impls_of (339,974 samples, 0.18%)</title><rect x="51.8209%" y="181" width="0.1797%" height="15" fill="rgb(237,122,38)"/><text x="52.0709%" y="191.50"></text></g><g><title>evaluate_obligation (3,237,816 samples, 1.71%)</title><rect x="50.2934%" y="197" width="1.7112%" height="15" fill="rgb(244,218,35)"/><text x="50.5434%" y="207.50"></text></g><g><title>item_attrs (246,751 samples, 0.13%)</title><rect x="52.3526%" y="197" width="0.1304%" height="15" fill="rgb(240,68,47)"/><text x="52.6026%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (237,921 samples, 0.13%)</title><rect x="52.3572%" y="181" width="0.1257%" height="15" fill="rgb(210,16,53)"/><text x="52.6072%" y="191.50"></text></g><g><title>evaluate_obligation (208,024 samples, 0.11%)</title><rect x="52.6764%" y="181" width="0.1099%" height="15" fill="rgb(235,124,12)"/><text x="52.9264%" y="191.50"></text></g><g><title>method_autoderef_steps (494,156 samples, 0.26%)</title><rect x="52.5292%" y="197" width="0.2612%" height="15" fill="rgb(224,169,11)"/><text x="52.7792%" y="207.50"></text></g><g><title>predicates_of (475,453 samples, 0.25%)</title><rect x="52.9225%" y="197" width="0.2513%" height="15" fill="rgb(250,166,2)"/><text x="53.1725%" y="207.50"></text></g><g><title>predicates_defined_on (336,182 samples, 0.18%)</title><rect x="52.9961%" y="181" width="0.1777%" height="15" fill="rgb(242,216,29)"/><text x="53.2461%" y="191.50"></text></g><g><title>adt_dtorck_constraint (196,812 samples, 0.10%)</title><rect x="57.5405%" y="165" width="0.1040%" height="15" fill="rgb(230,116,27)"/><text x="57.7905%" y="175.50"></text></g><g><title>dropck_outlives (435,695 samples, 0.23%)</title><rect x="57.4947%" y="181" width="0.2303%" height="15" fill="rgb(228,99,48)"/><text x="57.7447%" y="191.50"></text></g><g><title>evaluate_obligation (1,293,663 samples, 0.68%)</title><rect x="57.7250%" y="181" width="0.6837%" height="15" fill="rgb(253,11,6)"/><text x="57.9750%" y="191.50"></text></g><g><title>typeck (10,594,778 samples, 5.60%)</title><rect x="53.2480%" y="197" width="5.5993%" height="15" fill="rgb(247,143,39)"/><text x="53.4980%" y="207.50">typeck</text></g><g><title>item_bodies_checking (42,440,986 samples, 22.43%)</title><rect x="36.4730%" y="245" width="22.4301%" height="15" fill="rgb(236,97,10)"/><text x="36.7230%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,436,866 samples, 22.43%)</title><rect x="36.4752%" y="229" width="22.4279%" height="15" fill="rgb(233,208,19)"/><text x="36.7252%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (42,268,005 samples, 22.34%)</title><rect x="36.5644%" y="213" width="22.3387%" height="15" fill="rgb(216,164,2)"/><text x="36.8144%" y="223.50">typeck</text></g><g><title>adt_destructor (310,594 samples, 0.16%)</title><rect x="60.0472%" y="213" width="0.1641%" height="15" fill="rgb(220,129,5)"/><text x="60.2972%" y="223.50"></text></g><g><title>coherent_trait (304,174 samples, 0.16%)</title><rect x="60.0506%" y="197" width="0.1608%" height="15" fill="rgb(242,17,10)"/><text x="60.3006%" y="207.50"></text></g><g><title>specialization_graph_of (302,363 samples, 0.16%)</title><rect x="60.0515%" y="181" width="0.1598%" height="15" fill="rgb(242,107,0)"/><text x="60.3015%" y="191.50"></text></g><g><title>generics_of (695,476 samples, 0.37%)</title><rect x="62.1488%" y="181" width="0.3676%" height="15" fill="rgb(251,28,31)"/><text x="62.3988%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (512,674 samples, 0.27%)</title><rect x="62.2455%" y="165" width="0.2709%" height="15" fill="rgb(233,223,10)"/><text x="62.4955%" y="175.50"></text></g><g><title>impl_trait_ref (907,121 samples, 0.48%)</title><rect x="62.5859%" y="181" width="0.4794%" height="15" fill="rgb(215,21,27)"/><text x="62.8359%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (733,250 samples, 0.39%)</title><rect x="62.6778%" y="165" width="0.3875%" height="15" fill="rgb(232,23,21)"/><text x="62.9278%" y="175.50"></text></g><g><title>predicates_of (697,235 samples, 0.37%)</title><rect x="63.0832%" y="181" width="0.3685%" height="15" fill="rgb(244,5,23)"/><text x="63.3332%" y="191.50"></text></g><g><title>predicates_defined_on (383,730 samples, 0.20%)</title><rect x="63.2488%" y="165" width="0.2028%" height="15" fill="rgb(226,81,46)"/><text x="63.4988%" y="175.50"></text></g><g><title>specializes (2,038,925 samples, 1.08%)</title><rect x="63.4516%" y="181" width="1.0776%" height="15" fill="rgb(247,70,30)"/><text x="63.7016%" y="191.50"></text></g><g><title>param_env (1,203,585 samples, 0.64%)</title><rect x="63.8931%" y="165" width="0.6361%" height="15" fill="rgb(212,68,19)"/><text x="64.1431%" y="175.50"></text></g><g><title>def_span (574,998 samples, 0.30%)</title><rect x="64.2253%" y="149" width="0.3039%" height="15" fill="rgb(240,187,13)"/><text x="64.4753%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (510,687 samples, 0.27%)</title><rect x="64.2593%" y="133" width="0.2699%" height="15" fill="rgb(223,113,26)"/><text x="64.5093%" y="143.50"></text></g><g><title>evaluate_obligation (7,385,822 samples, 3.90%)</title><rect x="60.6827%" y="197" width="3.9034%" height="15" fill="rgb(206,192,2)"/><text x="60.9327%" y="207.50">eval..</text></g><g><title>item_types_checking (10,871,302 samples, 5.75%)</title><rect x="58.9031%" y="245" width="5.7455%" height="15" fill="rgb(241,108,4)"/><text x="59.1531%" y="255.50">item_ty..</text></g><g><title>check_mod_item_types (10,862,361 samples, 5.74%)</title><rect x="58.9078%" y="229" width="5.7408%" height="15" fill="rgb(247,173,49)"/><text x="59.1578%" y="239.50">check_m..</text></g><g><title>typeck (8,097,309 samples, 4.28%)</title><rect x="60.3691%" y="213" width="4.2794%" height="15" fill="rgb(224,114,35)"/><text x="60.6191%" y="223.50">typeck</text></g><g><title>fn_sig (645,195 samples, 0.34%)</title><rect x="64.8967%" y="213" width="0.3410%" height="15" fill="rgb(245,159,27)"/><text x="65.1467%" y="223.50"></text></g><g><title>is_late_bound_map (240,613 samples, 0.13%)</title><rect x="65.3509%" y="197" width="0.1272%" height="15" fill="rgb(245,172,44)"/><text x="65.6009%" y="207.50"></text></g><g><title>resolve_lifetimes (216,242 samples, 0.11%)</title><rect x="65.3638%" y="181" width="0.1143%" height="15" fill="rgb(236,23,11)"/><text x="65.6138%" y="191.50"></text></g><g><title>named_region_map (545,919 samples, 0.29%)</title><rect x="65.4781%" y="197" width="0.2885%" height="15" fill="rgb(205,117,38)"/><text x="65.7281%" y="207.50"></text></g><g><title>resolve_lifetimes (502,929 samples, 0.27%)</title><rect x="65.5008%" y="181" width="0.2658%" height="15" fill="rgb(237,72,25)"/><text x="65.7508%" y="191.50"></text></g><g><title>lint_levels (201,662 samples, 0.11%)</title><rect x="65.6600%" y="165" width="0.1066%" height="15" fill="rgb(244,70,9)"/><text x="65.9100%" y="175.50"></text></g><g><title>generics_of (1,023,745 samples, 0.54%)</title><rect x="65.2376%" y="213" width="0.5410%" height="15" fill="rgb(217,125,39)"/><text x="65.4876%" y="223.50"></text></g><g><title>explicit_predicates_of (239,423 samples, 0.13%)</title><rect x="66.0012%" y="181" width="0.1265%" height="15" fill="rgb(235,36,10)"/><text x="66.2512%" y="191.50"></text></g><g><title>predicates_of (863,040 samples, 0.46%)</title><rect x="65.8657%" y="213" width="0.4561%" height="15" fill="rgb(251,123,47)"/><text x="66.1157%" y="223.50"></text></g><g><title>predicates_defined_on (769,298 samples, 0.41%)</title><rect x="65.9152%" y="197" width="0.4066%" height="15" fill="rgb(221,13,13)"/><text x="66.1652%" y="207.50"></text></g><g><title>inferred_outlives_of (367,214 samples, 0.19%)</title><rect x="66.1277%" y="181" width="0.1941%" height="15" fill="rgb(238,131,9)"/><text x="66.3777%" y="191.50"></text></g><g><title>inferred_outlives_crate (331,984 samples, 0.18%)</title><rect x="66.1463%" y="165" width="0.1755%" height="15" fill="rgb(211,50,8)"/><text x="66.3963%" y="175.50"></text></g><g><title>type_of (230,734 samples, 0.12%)</title><rect x="66.1998%" y="149" width="0.1219%" height="15" fill="rgb(245,182,24)"/><text x="66.4498%" y="159.50"></text></g><g><title>type_collecting (3,365,588 samples, 1.78%)</title><rect x="64.6512%" y="245" width="1.7787%" height="15" fill="rgb(242,14,37)"/><text x="64.9012%" y="255.50">t..</text></g><g><title>collect_mod_item_types (3,354,528 samples, 1.77%)</title><rect x="64.6570%" y="229" width="1.7729%" height="15" fill="rgb(246,228,12)"/><text x="64.9070%" y="239.50">c..</text></g><g><title>evaluate_obligation (647,139 samples, 0.34%)</title><rect x="68.5334%" y="213" width="0.3420%" height="15" fill="rgb(213,55,15)"/><text x="68.7834%" y="223.50"></text></g><g><title>implied_outlives_bounds (260,466 samples, 0.14%)</title><rect x="68.8990%" y="213" width="0.1377%" height="15" fill="rgb(209,9,3)"/><text x="69.1490%" y="223.50"></text></g><g><title>param_env (559,746 samples, 0.30%)</title><rect x="69.0366%" y="213" width="0.2958%" height="15" fill="rgb(230,59,30)"/><text x="69.2866%" y="223.50"></text></g><g><title>region_scope_tree (581,855 samples, 0.31%)</title><rect x="69.3438%" y="213" width="0.3075%" height="15" fill="rgb(209,121,21)"/><text x="69.5938%" y="223.50"></text></g><g><title>check_impl_item_well_formed (5,740,365 samples, 3.03%)</title><rect x="66.6252%" y="229" width="3.0338%" height="15" fill="rgb(220,109,13)"/><text x="66.8752%" y="239.50">che..</text></g><g><title>evaluate_obligation (829,270 samples, 0.44%)</title><rect x="71.0212%" y="213" width="0.4383%" height="15" fill="rgb(232,18,1)"/><text x="71.2712%" y="223.50"></text></g><g><title>param_env (475,545 samples, 0.25%)</title><rect x="71.5708%" y="213" width="0.2513%" height="15" fill="rgb(215,41,42)"/><text x="71.8208%" y="223.50"></text></g><g><title>check_item_well_formed (4,480,402 samples, 2.37%)</title><rect x="69.6590%" y="229" width="2.3679%" height="15" fill="rgb(224,123,36)"/><text x="69.9090%" y="239.50">ch..</text></g><g><title>analysis (136,060,985 samples, 71.91%)</title><rect x="0.4599%" y="277" width="71.9083%" height="15" fill="rgb(240,125,3)"/><text x="0.7099%" y="287.50">analysis</text></g><g><title>type_check_crate (84,002,621 samples, 44.40%)</title><rect x="27.9728%" y="261" width="44.3954%" height="15" fill="rgb(205,98,50)"/><text x="28.2228%" y="271.50">type_check_crate</text></g><g><title>wf_checking (11,225,905 samples, 5.93%)</title><rect x="66.4353%" y="245" width="5.9329%" height="15" fill="rgb(205,185,37)"/><text x="66.6853%" y="255.50">wf_check..</text></g><g><title>check_trait_item_well_formed (645,807 samples, 0.34%)</title><rect x="72.0269%" y="229" width="0.3413%" height="15" fill="rgb(238,207,15)"/><text x="72.2769%" y="239.50"></text></g><g><title>codegen_crate (347,624 samples, 0.18%)</title><rect x="72.3744%" y="277" width="0.1837%" height="15" fill="rgb(213,199,42)"/><text x="72.6244%" y="287.50"></text></g><g><title>AST_validation (213,252 samples, 0.11%)</title><rect x="72.6740%" y="261" width="0.1127%" height="15" fill="rgb(235,201,11)"/><text x="72.9240%" y="271.50"></text></g><g><title>metadata_load_macro (498,243 samples, 0.26%)</title><rect x="88.3429%" y="229" width="0.2633%" height="15" fill="rgb(207,46,11)"/><text x="88.5929%" y="239.50"></text></g><g><title>metadata_register_crate (2,688,900 samples, 1.42%)</title><rect x="88.6062%" y="229" width="1.4211%" height="15" fill="rgb(241,35,35)"/><text x="88.8562%" y="239.50"></text></g><g><title>metadata_register_crate (955,722 samples, 0.51%)</title><rect x="89.5222%" y="213" width="0.5051%" height="15" fill="rgb(243,32,47)"/><text x="89.7722%" y="223.50"></text></g><g><title>macro_expand_crate (32,902,788 samples, 17.39%)</title><rect x="72.8776%" y="261" width="17.3891%" height="15" fill="rgb(247,202,23)"/><text x="73.1276%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (32,888,278 samples, 17.38%)</title><rect x="72.8853%" y="245" width="17.3815%" height="15" fill="rgb(219,102,11)"/><text x="73.1353%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (453,135 samples, 0.24%)</title><rect x="90.0273%" y="229" width="0.2395%" height="15" fill="rgb(243,110,44)"/><text x="90.2773%" y="239.50"></text></g><g><title>finalize_macro_resolutions (202,122 samples, 0.11%)</title><rect x="90.4166%" y="245" width="0.1068%" height="15" fill="rgb(222,74,54)"/><text x="90.6666%" y="255.50"></text></g><g><title>late_resolve_crate (2,403,227 samples, 1.27%)</title><rect x="90.5234%" y="245" width="1.2701%" height="15" fill="rgb(216,99,12)"/><text x="90.7734%" y="255.50"></text></g><g><title>configure_and_expand (36,546,169 samples, 19.31%)</title><rect x="72.5582%" y="277" width="19.3147%" height="15" fill="rgb(226,22,26)"/><text x="72.8082%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (2,870,863 samples, 1.52%)</title><rect x="90.3556%" y="261" width="1.5173%" height="15" fill="rgb(217,163,10)"/><text x="90.6056%" y="271.50"></text></g><g><title>drop_ast (294,733 samples, 0.16%)</title><rect x="91.8728%" y="277" width="0.1558%" height="15" fill="rgb(213,25,53)"/><text x="92.1228%" y="287.50"></text></g><g><title>early_lint_checks (500,046 samples, 0.26%)</title><rect x="92.0372%" y="277" width="0.2643%" height="15" fill="rgb(252,105,26)"/><text x="92.2872%" y="287.50"></text></g><g><title>free_global_ctxt (4,192,587 samples, 2.22%)</title><rect x="92.3015%" y="277" width="2.2158%" height="15" fill="rgb(220,39,43)"/><text x="92.5515%" y="287.50">f..</text></g><g><title>generate_crate_metadata (1,842,550 samples, 0.97%)</title><rect x="94.5172%" y="277" width="0.9738%" height="15" fill="rgb(229,68,48)"/><text x="94.7672%" y="287.50"></text></g><g><title>hir_lowering (4,582,851 samples, 2.42%)</title><rect x="95.4910%" y="277" width="2.4220%" height="15" fill="rgb(252,8,32)"/><text x="95.7410%" y="287.50">hi..</text></g><g><title>parse_crate (1,962,832 samples, 1.04%)</title><rect x="97.9450%" y="277" width="1.0374%" height="15" fill="rgb(223,20,43)"/><text x="98.1950%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (1,255,014 samples, 0.66%)</title><rect x="99.0791%" y="277" width="0.6633%" height="15" fill="rgb(229,81,49)"/><text x="99.3291%" y="287.50"></text></g><g><title>all (189,214,679 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (189,214,679 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (387,465 samples, 0.20%)</title><rect x="99.7952%" y="277" width="0.2048%" height="15" fill="rgb(249,174,33)"/><text x="100.0452%" y="287.50"></text></g></svg></svg>