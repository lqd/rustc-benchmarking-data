<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (384,393 samples, 0.20%)</title><rect x="12.5962%" y="149" width="0.1951%" height="15" fill="rgb(227,0,7)"/><text x="12.8462%" y="159.50"></text></g><g><title>param_env (212,455 samples, 0.11%)</title><rect x="14.2067%" y="117" width="0.1078%" height="15" fill="rgb(217,0,24)"/><text x="14.4567%" y="127.50"></text></g><g><title>codegen_fn_attrs (233,242 samples, 0.12%)</title><rect x="14.6909%" y="101" width="0.1184%" height="15" fill="rgb(221,193,54)"/><text x="14.9409%" y="111.50"></text></g><g><title>adt_drop_tys (234,292 samples, 0.12%)</title><rect x="17.4416%" y="69" width="0.1189%" height="15" fill="rgb(248,212,6)"/><text x="17.6916%" y="79.50"></text></g><g><title>is_copy_raw (775,307 samples, 0.39%)</title><rect x="17.5605%" y="69" width="0.3935%" height="15" fill="rgb(208,68,35)"/><text x="17.8105%" y="79.50"></text></g><g><title>evaluate_obligation (612,656 samples, 0.31%)</title><rect x="17.6430%" y="53" width="0.3110%" height="15" fill="rgb(232,128,0)"/><text x="17.8930%" y="63.50"></text></g><g><title>needs_drop_raw (1,161,279 samples, 0.59%)</title><rect x="17.3784%" y="85" width="0.5894%" height="15" fill="rgb(207,160,47)"/><text x="17.6284%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (438,345 samples, 0.22%)</title><rect x="18.0786%" y="69" width="0.2225%" height="15" fill="rgb(228,23,34)"/><text x="18.3286%" y="79.50"></text></g><g><title>specialization_graph_of (883,690 samples, 0.45%)</title><rect x="18.3653%" y="69" width="0.4485%" height="15" fill="rgb(218,30,26)"/><text x="18.6153%" y="79.50"></text></g><g><title>impl_trait_ref (456,126 samples, 0.23%)</title><rect x="18.5823%" y="53" width="0.2315%" height="15" fill="rgb(220,122,19)"/><text x="18.8323%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (394,005 samples, 0.20%)</title><rect x="18.6138%" y="37" width="0.2000%" height="15" fill="rgb(250,228,42)"/><text x="18.8638%" y="47.50"></text></g><g><title>resolve_instance (1,738,278 samples, 0.88%)</title><rect x="17.9678%" y="85" width="0.8823%" height="15" fill="rgb(240,193,28)"/><text x="18.2178%" y="95.50"></text></g><g><title>thir_body (1,853,364 samples, 0.94%)</title><rect x="18.8716%" y="85" width="0.9407%" height="15" fill="rgb(216,20,37)"/><text x="19.1216%" y="95.50"></text></g><g><title>mir_const (12,379,361 samples, 6.28%)</title><rect x="13.5514%" y="133" width="6.2835%" height="15" fill="rgb(206,188,39)"/><text x="13.8014%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (10,875,926 samples, 5.52%)</title><rect x="14.3145%" y="117" width="5.5203%" height="15" fill="rgb(217,207,13)"/><text x="14.5645%" y="127.50">unsafet..</text></g><g><title>mir_built (9,901,144 samples, 5.03%)</title><rect x="14.8093%" y="101" width="5.0256%" height="15" fill="rgb(231,73,38)"/><text x="15.0593%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (13,827,727 samples, 7.02%)</title><rect x="12.8665%" y="149" width="7.0186%" height="15" fill="rgb(225,20,46)"/><text x="13.1165%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (566,609 samples, 0.29%)</title><rect x="19.8851%" y="149" width="0.2876%" height="15" fill="rgb(210,31,41)"/><text x="20.1351%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (843,860 samples, 0.43%)</title><rect x="20.1727%" y="149" width="0.4283%" height="15" fill="rgb(221,200,47)"/><text x="20.4227%" y="159.50"></text></g><g><title>normalize_projection_ty (497,986 samples, 0.25%)</title><rect x="20.3483%" y="133" width="0.2528%" height="15" fill="rgb(226,26,5)"/><text x="20.5983%" y="143.50"></text></g><g><title>type_op_normalize_predicate (293,746 samples, 0.15%)</title><rect x="20.6011%" y="149" width="0.1491%" height="15" fill="rgb(249,33,26)"/><text x="20.8511%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,149,694 samples, 2.11%)</title><rect x="20.8416%" y="149" width="2.1063%" height="15" fill="rgb(235,183,28)"/><text x="21.0916%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (43,260,368 samples, 21.96%)</title><rect x="0.9991%" y="181" width="21.9579%" height="15" fill="rgb(221,5,38)"/><text x="1.2491%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (43,098,436 samples, 21.88%)</title><rect x="1.0813%" y="165" width="21.8757%" height="15" fill="rgb(247,18,42)"/><text x="1.3313%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (464,265 samples, 0.24%)</title><rect x="23.0361%" y="181" width="0.2356%" height="15" fill="rgb(241,131,45)"/><text x="23.2861%" y="191.50"></text></g><g><title>should_inherit_track_caller (425,323 samples, 0.22%)</title><rect x="23.9841%" y="133" width="0.2159%" height="15" fill="rgb(249,31,29)"/><text x="24.2341%" y="143.50"></text></g><g><title>codegen_fn_attrs (751,958 samples, 0.38%)</title><rect x="23.8280%" y="149" width="0.3817%" height="15" fill="rgb(225,111,53)"/><text x="24.0780%" y="159.50"></text></g><g><title>check_mod_attrs (2,505,015 samples, 1.27%)</title><rect x="23.3013%" y="165" width="1.2715%" height="15" fill="rgb(238,160,17)"/><text x="23.5513%" y="175.50"></text></g><g><title>lint_levels (715,248 samples, 0.36%)</title><rect x="24.2098%" y="149" width="0.3630%" height="15" fill="rgb(214,148,48)"/><text x="24.4598%" y="159.50"></text></g><g><title>check_mod_const_bodies (331,683 samples, 0.17%)</title><rect x="24.5728%" y="165" width="0.1684%" height="15" fill="rgb(232,36,49)"/><text x="24.8228%" y="175.50"></text></g><g><title>lookup_deprecation_entry (355,533 samples, 0.18%)</title><rect x="25.1067%" y="149" width="0.1805%" height="15" fill="rgb(209,103,24)"/><text x="25.3567%" y="159.50"></text></g><g><title>stability_index (267,553 samples, 0.14%)</title><rect x="25.1514%" y="133" width="0.1358%" height="15" fill="rgb(229,88,8)"/><text x="25.4014%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (981,632 samples, 0.50%)</title><rect x="24.8645%" y="165" width="0.4983%" height="15" fill="rgb(213,181,19)"/><text x="25.1145%" y="175.50"></text></g><g><title>misc_checking_1 (4,231,966 samples, 2.15%)</title><rect x="23.2720%" y="181" width="2.1480%" height="15" fill="rgb(254,191,54)"/><text x="23.5220%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (628,917 samples, 0.32%)</title><rect x="25.4209%" y="165" width="0.3192%" height="15" fill="rgb(241,83,37)"/><text x="25.6709%" y="175.50"></text></g><g><title>check_mod_liveness (483,486 samples, 0.25%)</title><rect x="25.4947%" y="149" width="0.2454%" height="15" fill="rgb(233,36,39)"/><text x="25.7447%" y="159.50"></text></g><g><title>misc_checking_2 (1,678,588 samples, 0.85%)</title><rect x="25.4201%" y="181" width="0.8520%" height="15" fill="rgb(226,3,54)"/><text x="25.6701%" y="191.50"></text></g><g><title>match_checking (1,047,991 samples, 0.53%)</title><rect x="25.7401%" y="165" width="0.5319%" height="15" fill="rgb(245,192,40)"/><text x="25.9901%" y="175.50"></text></g><g><title>check_match (1,008,250 samples, 0.51%)</title><rect x="25.7603%" y="149" width="0.5118%" height="15" fill="rgb(238,167,29)"/><text x="26.0103%" y="159.50"></text></g><g><title>check_private_in_public (297,284 samples, 0.15%)</title><rect x="26.2774%" y="165" width="0.1509%" height="15" fill="rgb(232,182,51)"/><text x="26.5274%" y="175.50"></text></g><g><title>death_checking (631,427 samples, 0.32%)</title><rect x="26.4283%" y="165" width="0.3205%" height="15" fill="rgb(231,60,39)"/><text x="26.6783%" y="175.50"></text></g><g><title>param_env (265,422 samples, 0.13%)</title><rect x="27.3061%" y="133" width="0.1347%" height="15" fill="rgb(208,69,12)"/><text x="27.5561%" y="143.50"></text></g><g><title>crate_lints (2,556,979 samples, 1.30%)</title><rect x="26.7496%" y="149" width="1.2979%" height="15" fill="rgb(235,93,37)"/><text x="26.9996%" y="159.50"></text></g><g><title>type_of (1,091,230 samples, 0.55%)</title><rect x="27.4936%" y="133" width="0.5539%" height="15" fill="rgb(213,116,39)"/><text x="27.7436%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (861,718 samples, 0.44%)</title><rect x="27.6101%" y="117" width="0.4374%" height="15" fill="rgb(222,207,29)"/><text x="27.8601%" y="127.50"></text></g><g><title>lint_checking (3,339,467 samples, 1.70%)</title><rect x="26.7488%" y="165" width="1.6950%" height="15" fill="rgb(206,96,30)"/><text x="26.9988%" y="175.50"></text></g><g><title>module_lints (780,798 samples, 0.40%)</title><rect x="28.0475%" y="149" width="0.3963%" height="15" fill="rgb(218,138,4)"/><text x="28.2975%" y="159.50"></text></g><g><title>lint_mod (771,878 samples, 0.39%)</title><rect x="28.0520%" y="133" width="0.3918%" height="15" fill="rgb(250,191,14)"/><text x="28.3020%" y="143.50"></text></g><g><title>privacy_access_levels (391,054 samples, 0.20%)</title><rect x="28.4438%" y="165" width="0.1985%" height="15" fill="rgb(239,60,40)"/><text x="28.6938%" y="175.50"></text></g><g><title>privacy_checking_modules (1,437,966 samples, 0.73%)</title><rect x="28.6423%" y="165" width="0.7299%" height="15" fill="rgb(206,27,48)"/><text x="28.8923%" y="175.50"></text></g><g><title>check_mod_privacy (1,430,696 samples, 0.73%)</title><rect x="28.6460%" y="149" width="0.7262%" height="15" fill="rgb(225,35,8)"/><text x="28.8960%" y="159.50"></text></g><g><title>misc_checking_3 (6,136,448 samples, 3.11%)</title><rect x="26.2721%" y="181" width="3.1147%" height="15" fill="rgb(250,213,24)"/><text x="26.5221%" y="191.50">mis..</text></g><g><title>adt_destructor (392,834 samples, 0.20%)</title><rect x="29.4692%" y="133" width="0.1994%" height="15" fill="rgb(247,123,22)"/><text x="29.7192%" y="143.50"></text></g><g><title>coherent_trait (388,534 samples, 0.20%)</title><rect x="29.4714%" y="117" width="0.1972%" height="15" fill="rgb(231,138,38)"/><text x="29.7214%" y="127.50"></text></g><g><title>specialization_graph_of (386,844 samples, 0.20%)</title><rect x="29.4723%" y="101" width="0.1964%" height="15" fill="rgb(231,145,46)"/><text x="29.7223%" y="111.50"></text></g><g><title>evaluate_obligation (348,863 samples, 0.18%)</title><rect x="29.8460%" y="117" width="0.1771%" height="15" fill="rgb(251,118,11)"/><text x="30.0960%" y="127.50"></text></g><g><title>object_safety_violations (981,291 samples, 0.50%)</title><rect x="29.7270%" y="133" width="0.4981%" height="15" fill="rgb(217,147,25)"/><text x="29.9770%" y="143.50"></text></g><g><title>impl_parent (2,718,991 samples, 1.38%)</title><rect x="32.0793%" y="117" width="1.3801%" height="15" fill="rgb(247,81,37)"/><text x="32.3293%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,377,290 samples, 0.70%)</title><rect x="32.7603%" y="101" width="0.6991%" height="15" fill="rgb(209,12,38)"/><text x="33.0103%" y="111.50"></text></g><g><title>impl_trait_ref (5,172,078 samples, 2.63%)</title><rect x="33.4607%" y="117" width="2.6252%" height="15" fill="rgb(227,1,9)"/><text x="33.7107%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,239,359 samples, 2.15%)</title><rect x="33.9341%" y="101" width="2.1518%" height="15" fill="rgb(248,47,43)"/><text x="34.1841%" y="111.50">m..</text></g><g><title>trait_impls_of (729,618 samples, 0.37%)</title><rect x="36.1233%" y="117" width="0.3703%" height="15" fill="rgb(221,10,30)"/><text x="36.3733%" y="127.50"></text></g><g><title>implementations_of_trait (206,773 samples, 0.10%)</title><rect x="36.3886%" y="101" width="0.1050%" height="15" fill="rgb(210,229,1)"/><text x="36.6386%" y="111.50"></text></g><g><title>coherent_trait (13,895,825 samples, 7.05%)</title><rect x="29.4412%" y="149" width="7.0532%" height="15" fill="rgb(222,148,37)"/><text x="29.6912%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (12,320,566 samples, 6.25%)</title><rect x="30.2407%" y="133" width="6.2536%" height="15" fill="rgb(234,67,33)"/><text x="30.4907%" y="143.50">speciali..</text></g><g><title>coherence_checking (14,012,605 samples, 7.11%)</title><rect x="29.4300%" y="165" width="7.1124%" height="15" fill="rgb(247,98,35)"/><text x="29.6800%" y="175.50">coherence_..</text></g><g><title>associated_item (786,239 samples, 0.40%)</title><rect x="52.8433%" y="101" width="0.3991%" height="15" fill="rgb(247,138,52)"/><text x="53.0933%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (702,408 samples, 0.36%)</title><rect x="52.8859%" y="85" width="0.3565%" height="15" fill="rgb(213,79,30)"/><text x="53.1359%" y="95.50"></text></g><g><title>associated_items (958,691 samples, 0.49%)</title><rect x="52.7682%" y="117" width="0.4866%" height="15" fill="rgb(246,177,23)"/><text x="53.0182%" y="127.50"></text></g><g><title>adt_dtorck_constraint (203,393 samples, 0.10%)</title><rect x="53.4567%" y="85" width="0.1032%" height="15" fill="rgb(230,62,27)"/><text x="53.7067%" y="95.50"></text></g><g><title>adt_dtorck_constraint (277,894 samples, 0.14%)</title><rect x="53.4281%" y="101" width="0.1411%" height="15" fill="rgb(216,154,8)"/><text x="53.6781%" y="111.50"></text></g><g><title>dropck_outlives (636,137 samples, 0.32%)</title><rect x="53.2835%" y="117" width="0.3229%" height="15" fill="rgb(244,35,45)"/><text x="53.5335%" y="127.50"></text></g><g><title>generics_of (229,624 samples, 0.12%)</title><rect x="54.7981%" y="101" width="0.1166%" height="15" fill="rgb(251,115,12)"/><text x="55.0481%" y="111.50"></text></g><g><title>predicates_of (283,313 samples, 0.14%)</title><rect x="55.0434%" y="101" width="0.1438%" height="15" fill="rgb(240,54,50)"/><text x="55.2934%" y="111.50"></text></g><g><title>specializes (326,763 samples, 0.17%)</title><rect x="55.1872%" y="101" width="0.1659%" height="15" fill="rgb(233,84,52)"/><text x="55.4372%" y="111.50"></text></g><g><title>param_env (200,031 samples, 0.10%)</title><rect x="55.2515%" y="85" width="0.1015%" height="15" fill="rgb(207,117,47)"/><text x="55.5015%" y="95.50"></text></g><g><title>trait_impls_of (323,232 samples, 0.16%)</title><rect x="55.3581%" y="101" width="0.1641%" height="15" fill="rgb(249,43,39)"/><text x="55.6081%" y="111.50"></text></g><g><title>evaluate_obligation (3,776,405 samples, 1.92%)</title><rect x="53.6078%" y="117" width="1.9168%" height="15" fill="rgb(209,38,44)"/><text x="53.8578%" y="127.50">e..</text></g><g><title>evaluate_obligation (387,514 samples, 0.20%)</title><rect x="56.0027%" y="101" width="0.1967%" height="15" fill="rgb(236,212,23)"/><text x="56.2527%" y="111.50"></text></g><g><title>method_autoderef_steps (762,197 samples, 0.39%)</title><rect x="55.8204%" y="117" width="0.3869%" height="15" fill="rgb(242,79,21)"/><text x="56.0704%" y="127.50"></text></g><g><title>predicates_of (253,383 samples, 0.13%)</title><rect x="56.2328%" y="117" width="0.1286%" height="15" fill="rgb(211,96,35)"/><text x="56.4828%" y="127.50"></text></g><g><title>associated_item (261,752 samples, 0.13%)</title><rect x="61.9026%" y="85" width="0.1329%" height="15" fill="rgb(253,215,40)"/><text x="62.1526%" y="95.50"></text></g><g><title>associated_items (285,053 samples, 0.14%)</title><rect x="61.8935%" y="101" width="0.1447%" height="15" fill="rgb(211,81,21)"/><text x="62.1435%" y="111.50"></text></g><g><title>evaluate_obligation (457,607 samples, 0.23%)</title><rect x="62.1549%" y="101" width="0.2323%" height="15" fill="rgb(208,190,38)"/><text x="62.4049%" y="111.50"></text></g><g><title>is_copy_raw (199,623 samples, 0.10%)</title><rect x="62.4483%" y="101" width="0.1013%" height="15" fill="rgb(235,213,38)"/><text x="62.6983%" y="111.50"></text></g><g><title>typeck (12,579,749 samples, 6.39%)</title><rect x="56.4040%" y="117" width="6.3852%" height="15" fill="rgb(237,122,38)"/><text x="56.6540%" y="127.50">typeck</text></g><g><title>item_bodies_checking (51,686,292 samples, 26.23%)</title><rect x="36.5837%" y="165" width="26.2347%" height="15" fill="rgb(244,218,35)"/><text x="36.8337%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (51,683,112 samples, 26.23%)</title><rect x="36.5853%" y="149" width="26.2331%" height="15" fill="rgb(240,68,47)"/><text x="36.8353%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (51,567,341 samples, 26.17%)</title><rect x="36.6441%" y="133" width="26.1743%" height="15" fill="rgb(210,16,53)"/><text x="36.8941%" y="143.50">typeck</text></g><g><title>item_types_checking (1,338,485 samples, 0.68%)</title><rect x="62.8184%" y="165" width="0.6794%" height="15" fill="rgb(235,124,12)"/><text x="63.0684%" y="175.50"></text></g><g><title>check_mod_item_types (1,330,165 samples, 0.68%)</title><rect x="62.8226%" y="149" width="0.6752%" height="15" fill="rgb(224,169,11)"/><text x="63.0726%" y="159.50"></text></g><g><title>fn_sig (949,108 samples, 0.48%)</title><rect x="63.9144%" y="133" width="0.4817%" height="15" fill="rgb(250,166,2)"/><text x="64.1644%" y="143.50"></text></g><g><title>is_late_bound_map (695,497 samples, 0.35%)</title><rect x="64.5573%" y="117" width="0.3530%" height="15" fill="rgb(242,216,29)"/><text x="64.8073%" y="127.50"></text></g><g><title>resolve_lifetimes (632,597 samples, 0.32%)</title><rect x="64.5892%" y="101" width="0.3211%" height="15" fill="rgb(230,116,27)"/><text x="64.8392%" y="111.50"></text></g><g><title>named_region_map (620,917 samples, 0.32%)</title><rect x="64.9103%" y="117" width="0.3152%" height="15" fill="rgb(228,99,48)"/><text x="65.1603%" y="127.50"></text></g><g><title>resolve_lifetimes (567,876 samples, 0.29%)</title><rect x="64.9372%" y="101" width="0.2882%" height="15" fill="rgb(253,11,6)"/><text x="65.1872%" y="111.50"></text></g><g><title>generics_of (1,677,395 samples, 0.85%)</title><rect x="64.3962%" y="133" width="0.8514%" height="15" fill="rgb(247,143,39)"/><text x="64.6462%" y="143.50"></text></g><g><title>explicit_predicates_of (512,075 samples, 0.26%)</title><rect x="65.5139%" y="101" width="0.2599%" height="15" fill="rgb(236,97,10)"/><text x="65.7639%" y="111.50"></text></g><g><title>predicates_of (1,427,637 samples, 0.72%)</title><rect x="65.3089%" y="133" width="0.7246%" height="15" fill="rgb(233,208,19)"/><text x="65.5589%" y="143.50"></text></g><g><title>predicates_defined_on (1,279,556 samples, 0.65%)</title><rect x="65.3841%" y="117" width="0.6495%" height="15" fill="rgb(216,164,2)"/><text x="65.6341%" y="127.50"></text></g><g><title>inferred_outlives_of (511,675 samples, 0.26%)</title><rect x="65.7738%" y="101" width="0.2597%" height="15" fill="rgb(220,129,5)"/><text x="66.0238%" y="111.50"></text></g><g><title>inferred_outlives_crate (451,505 samples, 0.23%)</title><rect x="65.8044%" y="85" width="0.2292%" height="15" fill="rgb(242,17,10)"/><text x="66.0544%" y="95.50"></text></g><g><title>type_collecting (5,957,215 samples, 3.02%)</title><rect x="63.4991%" y="165" width="3.0237%" height="15" fill="rgb(242,107,0)"/><text x="63.7491%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (5,920,965 samples, 3.01%)</title><rect x="63.5175%" y="149" width="3.0053%" height="15" fill="rgb(251,28,31)"/><text x="63.7675%" y="159.50">col..</text></g><g><title>type_of (963,991 samples, 0.49%)</title><rect x="66.0335%" y="133" width="0.4893%" height="15" fill="rgb(233,223,10)"/><text x="66.2835%" y="143.50"></text></g><g><title>evaluate_obligation (658,598 samples, 0.33%)</title><rect x="68.1606%" y="133" width="0.3343%" height="15" fill="rgb(215,21,27)"/><text x="68.4106%" y="143.50"></text></g><g><title>implied_outlives_bounds (551,846 samples, 0.28%)</title><rect x="68.4977%" y="133" width="0.2801%" height="15" fill="rgb(232,23,21)"/><text x="68.7477%" y="143.50"></text></g><g><title>param_env (489,455 samples, 0.25%)</title><rect x="68.7778%" y="133" width="0.2484%" height="15" fill="rgb(244,5,23)"/><text x="69.0278%" y="143.50"></text></g><g><title>region_scope_tree (734,671 samples, 0.37%)</title><rect x="69.0342%" y="133" width="0.3729%" height="15" fill="rgb(226,81,46)"/><text x="69.2842%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,397,934 samples, 2.74%)</title><rect x="66.6750%" y="149" width="2.7399%" height="15" fill="rgb(247,70,30)"/><text x="66.9250%" y="159.50">ch..</text></g><g><title>evaluate_obligation (622,196 samples, 0.32%)</title><rect x="70.5101%" y="133" width="0.3158%" height="15" fill="rgb(212,68,19)"/><text x="70.7601%" y="143.50"></text></g><g><title>implied_outlives_bounds (365,403 samples, 0.19%)</title><rect x="70.8558%" y="133" width="0.1855%" height="15" fill="rgb(240,187,13)"/><text x="71.1058%" y="143.50"></text></g><g><title>param_env (604,516 samples, 0.31%)</title><rect x="71.0458%" y="133" width="0.3068%" height="15" fill="rgb(223,113,26)"/><text x="71.2958%" y="143.50"></text></g><g><title>check_item_well_formed (4,111,624 samples, 2.09%)</title><rect x="69.4149%" y="149" width="2.0870%" height="15" fill="rgb(206,192,2)"/><text x="69.6649%" y="159.50">c..</text></g><g><title>analysis (140,050,419 samples, 71.09%)</title><rect x="0.5286%" y="197" width="71.0861%" height="15" fill="rgb(241,108,4)"/><text x="0.7786%" y="207.50">analysis</text></g><g><title>type_check_crate (83,195,491 samples, 42.23%)</title><rect x="29.3868%" y="181" width="42.2280%" height="15" fill="rgb(247,173,49)"/><text x="29.6368%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,024,541 samples, 5.09%)</title><rect x="66.5265%" y="165" width="5.0882%" height="15" fill="rgb(224,114,35)"/><text x="66.7765%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (222,492 samples, 0.11%)</title><rect x="71.5018%" y="149" width="0.1129%" height="15" fill="rgb(245,159,27)"/><text x="71.7518%" y="159.50"></text></g><g><title>codegen_crate (370,874 samples, 0.19%)</title><rect x="71.6190%" y="197" width="0.1882%" height="15" fill="rgb(245,172,44)"/><text x="71.8690%" y="207.50"></text></g><g><title>AST_validation (313,884 samples, 0.16%)</title><rect x="71.9050%" y="181" width="0.1593%" height="15" fill="rgb(236,23,11)"/><text x="72.1550%" y="191.50"></text></g><g><title>metadata_register_crate (2,317,496 samples, 1.18%)</title><rect x="85.9621%" y="149" width="1.1763%" height="15" fill="rgb(205,117,38)"/><text x="86.2121%" y="159.50"></text></g><g><title>metadata_register_crate (857,818 samples, 0.44%)</title><rect x="86.7030%" y="133" width="0.4354%" height="15" fill="rgb(237,72,25)"/><text x="86.9530%" y="143.50"></text></g><g><title>macro_expand_crate (30,016,812 samples, 15.24%)</title><rect x="72.1935%" y="181" width="15.2358%" height="15" fill="rgb(244,70,9)"/><text x="72.4435%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (29,993,482 samples, 15.22%)</title><rect x="72.2053%" y="165" width="15.2239%" height="15" fill="rgb(217,125,39)"/><text x="72.4553%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (573,025 samples, 0.29%)</title><rect x="87.1384%" y="149" width="0.2909%" height="15" fill="rgb(235,36,10)"/><text x="87.3884%" y="159.50"></text></g><g><title>finalize_macro_resolutions (354,174 samples, 0.18%)</title><rect x="87.5371%" y="165" width="0.1798%" height="15" fill="rgb(251,123,47)"/><text x="87.7871%" y="175.50"></text></g><g><title>late_resolve_crate (4,799,033 samples, 2.44%)</title><rect x="87.7169%" y="165" width="2.4359%" height="15" fill="rgb(221,13,13)"/><text x="87.9669%" y="175.50">la..</text></g><g><title>configure_and_expand (36,451,272 samples, 18.50%)</title><rect x="71.8072%" y="197" width="18.5018%" height="15" fill="rgb(238,131,9)"/><text x="72.0572%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,575,341 samples, 2.83%)</title><rect x="87.4791%" y="181" width="2.8299%" height="15" fill="rgb(211,50,8)"/><text x="87.7291%" y="191.50">re..</text></g><g><title>drop_ast (555,716 samples, 0.28%)</title><rect x="90.3090%" y="197" width="0.2821%" height="15" fill="rgb(245,182,24)"/><text x="90.5590%" y="207.50"></text></g><g><title>early_lint_checks (1,444,256 samples, 0.73%)</title><rect x="90.6044%" y="197" width="0.7331%" height="15" fill="rgb(242,14,37)"/><text x="90.8544%" y="207.50"></text></g><g><title>free_global_ctxt (3,823,412 samples, 1.94%)</title><rect x="91.3374%" y="197" width="1.9407%" height="15" fill="rgb(246,228,12)"/><text x="91.5874%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,554,937 samples, 0.79%)</title><rect x="93.2781%" y="197" width="0.7892%" height="15" fill="rgb(213,55,15)"/><text x="93.5281%" y="207.50"></text></g><g><title>hir_lowering (9,281,893 samples, 4.71%)</title><rect x="94.0673%" y="197" width="4.7113%" height="15" fill="rgb(209,9,3)"/><text x="94.3173%" y="207.50">hir_l..</text></g><g><title>parse_crate (745,879 samples, 0.38%)</title><rect x="98.8131%" y="197" width="0.3786%" height="15" fill="rgb(230,59,30)"/><text x="99.0631%" y="207.50"></text></g><g><title>prepare_outputs (272,783 samples, 0.14%)</title><rect x="99.1958%" y="197" width="0.1385%" height="15" fill="rgb(209,121,21)"/><text x="99.4458%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (843,280 samples, 0.43%)</title><rect x="99.3343%" y="197" width="0.4280%" height="15" fill="rgb(220,109,13)"/><text x="99.5843%" y="207.50"></text></g><g><title>all (197,015,168 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (197,015,168 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (348,014 samples, 0.18%)</title><rect x="99.8234%" y="197" width="0.1766%" height="15" fill="rgb(224,123,36)"/><text x="100.0734%" y="207.50"></text></g></svg></svg>