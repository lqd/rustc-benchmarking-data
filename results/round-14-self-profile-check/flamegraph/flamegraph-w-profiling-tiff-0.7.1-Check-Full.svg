<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,327,455 samples, 0.16%)</title><rect x="18.8257%" y="101" width="0.1610%" height="15" fill="rgb(227,0,7)"/><text x="19.0757%" y="111.50"></text></g><g><title>item_attrs (1,073,101 samples, 0.13%)</title><rect x="19.6144%" y="69" width="0.1301%" height="15" fill="rgb(217,0,24)"/><text x="19.8644%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,037,730 samples, 0.13%)</title><rect x="19.6187%" y="53" width="0.1259%" height="15" fill="rgb(221,193,54)"/><text x="19.8687%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,593,267 samples, 0.19%)</title><rect x="19.5604%" y="85" width="0.1932%" height="15" fill="rgb(248,212,6)"/><text x="19.8104%" y="95.50"></text></g><g><title>is_copy_raw (867,932 samples, 0.11%)</title><rect x="23.5595%" y="69" width="0.1053%" height="15" fill="rgb(208,68,35)"/><text x="23.8095%" y="79.50"></text></g><g><title>needs_drop_raw (9,098,879 samples, 1.10%)</title><rect x="23.6648%" y="69" width="1.1035%" height="15" fill="rgb(232,128,0)"/><text x="23.9148%" y="79.50"></text></g><g><title>is_copy_raw (7,378,811 samples, 0.89%)</title><rect x="23.8734%" y="53" width="0.8949%" height="15" fill="rgb(207,160,47)"/><text x="24.1234%" y="63.50"></text></g><g><title>evaluate_obligation (6,154,579 samples, 0.75%)</title><rect x="24.0219%" y="37" width="0.7464%" height="15" fill="rgb(228,23,34)"/><text x="24.2719%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,752,028 samples, 0.21%)</title><rect x="24.9057%" y="53" width="0.2125%" height="15" fill="rgb(218,30,26)"/><text x="25.1557%" y="63.50"></text></g><g><title>specialization_graph_of (1,388,177 samples, 0.17%)</title><rect x="25.1475%" y="53" width="0.1684%" height="15" fill="rgb(220,122,19)"/><text x="25.3975%" y="63.50"></text></g><g><title>resolve_instance (4,826,725 samples, 0.59%)</title><rect x="24.7683%" y="69" width="0.5854%" height="15" fill="rgb(250,228,42)"/><text x="25.0183%" y="79.50"></text></g><g><title>thir_body (12,411,498 samples, 1.51%)</title><rect x="25.3786%" y="69" width="1.5052%" height="15" fill="rgb(240,193,28)"/><text x="25.6286%" y="79.50"></text></g><g><title>mir_const (74,855,037 samples, 9.08%)</title><rect x="17.8365%" y="117" width="9.0782%" height="15" fill="rgb(216,20,37)"/><text x="18.0865%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (65,371,347 samples, 7.93%)</title><rect x="18.9867%" y="101" width="7.9281%" height="15" fill="rgb(206,188,39)"/><text x="19.2367%" y="111.50">unsafety_ch..</text></g><g><title>mir_built (59,042,507 samples, 7.16%)</title><rect x="19.7543%" y="85" width="7.1605%" height="15" fill="rgb(217,207,13)"/><text x="20.0043%" y="95.50">mir_built</text></g><g><title>mir_const (3,322,995 samples, 0.40%)</title><rect x="27.0851%" y="101" width="0.4030%" height="15" fill="rgb(231,73,38)"/><text x="27.3351%" y="111.50"></text></g><g><title>unsafety_check_result (2,422,358 samples, 0.29%)</title><rect x="27.1943%" y="85" width="0.2938%" height="15" fill="rgb(225,20,46)"/><text x="27.4443%" y="95.50"></text></g><g><title>mir_built (2,083,023 samples, 0.25%)</title><rect x="27.2355%" y="69" width="0.2526%" height="15" fill="rgb(210,31,41)"/><text x="27.4855%" y="79.50"></text></g><g><title>mir_const_qualif (4,743,182 samples, 0.58%)</title><rect x="26.9148%" y="117" width="0.5752%" height="15" fill="rgb(221,200,47)"/><text x="27.1648%" y="127.50"></text></g><g><title>mir_promoted (88,793,439 samples, 10.77%)</title><rect x="16.7215%" y="133" width="10.7687%" height="15" fill="rgb(226,26,5)"/><text x="16.9715%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,495,453 samples, 0.42%)</title><rect x="27.4954%" y="133" width="0.4239%" height="15" fill="rgb(249,33,26)"/><text x="27.7454%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,755,530 samples, 0.70%)</title><rect x="27.9193%" y="133" width="0.6980%" height="15" fill="rgb(235,183,28)"/><text x="28.1693%" y="143.50"></text></g><g><title>normalize_projection_ty (3,942,032 samples, 0.48%)</title><rect x="28.1392%" y="117" width="0.4781%" height="15" fill="rgb(221,5,38)"/><text x="28.3892%" y="127.50"></text></g><g><title>type_op_normalize_predicate (4,047,183 samples, 0.49%)</title><rect x="28.6173%" y="133" width="0.4908%" height="15" fill="rgb(247,18,42)"/><text x="28.8673%" y="143.50"></text></g><g><title>normalize_projection_ty (2,453,977 samples, 0.30%)</title><rect x="28.8105%" y="117" width="0.2976%" height="15" fill="rgb(241,131,45)"/><text x="29.0605%" y="127.50"></text></g><g><title>type_op_prove_predicate (17,785,034 samples, 2.16%)</title><rect x="29.1471%" y="133" width="2.1569%" height="15" fill="rgb(249,31,29)"/><text x="29.3971%" y="143.50">t..</text></g><g><title>evaluate_obligation (980,091 samples, 0.12%)</title><rect x="31.1851%" y="117" width="0.1189%" height="15" fill="rgb(225,111,53)"/><text x="31.4351%" y="127.50"></text></g><g><title>MIR_borrow_checking (254,495,322 samples, 30.86%)</title><rect x="0.4422%" y="165" width="30.8646%" height="15" fill="rgb(238,160,17)"/><text x="0.6922%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (253,326,587 samples, 30.72%)</title><rect x="0.5839%" y="149" width="30.7228%" height="15" fill="rgb(214,148,48)"/><text x="0.8339%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,538,948 samples, 0.31%)</title><rect x="31.3068%" y="165" width="0.3079%" height="15" fill="rgb(232,36,49)"/><text x="31.5568%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,838,569 samples, 0.22%)</title><rect x="31.3917%" y="149" width="0.2230%" height="15" fill="rgb(209,103,24)"/><text x="31.6417%" y="159.50"></text></g><g><title>hir_module_items (1,500,176 samples, 0.18%)</title><rect x="31.6147%" y="165" width="0.1819%" height="15" fill="rgb(229,88,8)"/><text x="31.8647%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,400,373 samples, 0.17%)</title><rect x="32.0571%" y="133" width="0.1698%" height="15" fill="rgb(213,181,19)"/><text x="32.3071%" y="143.50"></text></g><g><title>should_inherit_track_caller (1,129,186 samples, 0.14%)</title><rect x="32.0900%" y="117" width="0.1369%" height="15" fill="rgb(254,191,54)"/><text x="32.3400%" y="127.50"></text></g><g><title>check_mod_attrs (3,507,100 samples, 0.43%)</title><rect x="31.8016%" y="149" width="0.4253%" height="15" fill="rgb(241,83,37)"/><text x="32.0516%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,900,063 samples, 0.23%)</title><rect x="32.4033%" y="149" width="0.2304%" height="15" fill="rgb(233,36,39)"/><text x="32.6533%" y="159.50"></text></g><g><title>misc_checking_1 (7,101,029 samples, 0.86%)</title><rect x="31.7967%" y="165" width="0.8612%" height="15" fill="rgb(226,3,54)"/><text x="32.0467%" y="175.50"></text></g><g><title>check_mod_intrinsics (844,989 samples, 0.10%)</title><rect x="32.6601%" y="133" width="0.1025%" height="15" fill="rgb(245,192,40)"/><text x="32.9101%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (4,717,713 samples, 0.57%)</title><rect x="32.6581%" y="149" width="0.5722%" height="15" fill="rgb(238,167,29)"/><text x="32.9081%" y="159.50"></text></g><g><title>check_mod_liveness (3,856,284 samples, 0.47%)</title><rect x="32.7626%" y="133" width="0.4677%" height="15" fill="rgb(232,182,51)"/><text x="33.0126%" y="143.50"></text></g><g><title>misc_checking_2 (13,708,013 samples, 1.66%)</title><rect x="32.6579%" y="165" width="1.6625%" height="15" fill="rgb(231,60,39)"/><text x="32.9079%" y="175.50"></text></g><g><title>match_checking (8,988,150 samples, 1.09%)</title><rect x="33.2303%" y="149" width="1.0901%" height="15" fill="rgb(208,69,12)"/><text x="33.4803%" y="159.50"></text></g><g><title>check_match (8,665,638 samples, 1.05%)</title><rect x="33.2694%" y="133" width="1.0509%" height="15" fill="rgb(235,93,37)"/><text x="33.5194%" y="143.50"></text></g><g><title>check_private_in_public (1,537,597 samples, 0.19%)</title><rect x="34.3222%" y="149" width="0.1865%" height="15" fill="rgb(213,116,39)"/><text x="34.5722%" y="159.50"></text></g><g><title>death_checking (2,946,763 samples, 0.36%)</title><rect x="34.5087%" y="149" width="0.3574%" height="15" fill="rgb(222,207,29)"/><text x="34.7587%" y="159.50"></text></g><g><title>param_env (949,159 samples, 0.12%)</title><rect x="35.3829%" y="117" width="0.1151%" height="15" fill="rgb(206,96,30)"/><text x="35.6329%" y="127.50"></text></g><g><title>crate_lints (6,731,295 samples, 0.82%)</title><rect x="34.8664%" y="133" width="0.8164%" height="15" fill="rgb(218,138,4)"/><text x="35.1164%" y="143.50"></text></g><g><title>type_of (1,265,834 samples, 0.15%)</title><rect x="35.5293%" y="117" width="0.1535%" height="15" fill="rgb(250,191,14)"/><text x="35.7793%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,018,531 samples, 0.12%)</title><rect x="35.5593%" y="101" width="0.1235%" height="15" fill="rgb(239,60,40)"/><text x="35.8093%" y="111.50"></text></g><g><title>lint_checking (12,738,152 samples, 1.54%)</title><rect x="34.8661%" y="149" width="1.5449%" height="15" fill="rgb(206,27,48)"/><text x="35.1161%" y="159.50"></text></g><g><title>module_lints (6,003,867 samples, 0.73%)</title><rect x="35.6828%" y="133" width="0.7281%" height="15" fill="rgb(225,35,8)"/><text x="35.9328%" y="143.50"></text></g><g><title>lint_mod (5,989,887 samples, 0.73%)</title><rect x="35.6845%" y="117" width="0.7264%" height="15" fill="rgb(250,213,24)"/><text x="35.9345%" y="127.50"></text></g><g><title>privacy_access_levels (3,030,453 samples, 0.37%)</title><rect x="36.4109%" y="149" width="0.3675%" height="15" fill="rgb(247,123,22)"/><text x="36.6609%" y="159.50"></text></g><g><title>privacy_checking_modules (8,965,149 samples, 1.09%)</title><rect x="36.7785%" y="149" width="1.0873%" height="15" fill="rgb(231,138,38)"/><text x="37.0285%" y="159.50"></text></g><g><title>check_mod_privacy (8,954,559 samples, 1.09%)</title><rect x="36.7797%" y="133" width="1.0860%" height="15" fill="rgb(231,145,46)"/><text x="37.0297%" y="143.50"></text></g><g><title>misc_checking_3 (29,296,545 samples, 3.55%)</title><rect x="34.3204%" y="165" width="3.5530%" height="15" fill="rgb(251,118,11)"/><text x="34.5704%" y="175.50">misc..</text></g><g><title>impl_parent (2,964,319 samples, 0.36%)</title><rect x="38.6186%" y="101" width="0.3595%" height="15" fill="rgb(217,147,25)"/><text x="38.8686%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,594,323 samples, 0.19%)</title><rect x="38.7848%" y="85" width="0.1934%" height="15" fill="rgb(247,81,37)"/><text x="39.0348%" y="95.50"></text></g><g><title>impl_trait_ref (5,685,369 samples, 0.69%)</title><rect x="38.9781%" y="101" width="0.6895%" height="15" fill="rgb(209,12,38)"/><text x="39.2281%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,518,082 samples, 0.55%)</title><rect x="39.1197%" y="85" width="0.5479%" height="15" fill="rgb(227,1,9)"/><text x="39.3697%" y="95.50"></text></g><g><title>trait_impls_of (1,034,421 samples, 0.13%)</title><rect x="39.6703%" y="101" width="0.1255%" height="15" fill="rgb(248,47,43)"/><text x="39.9203%" y="111.50"></text></g><g><title>coherent_trait (15,322,311 samples, 1.86%)</title><rect x="37.9376%" y="133" width="1.8583%" height="15" fill="rgb(221,10,30)"/><text x="38.1876%" y="143.50">c..</text></g><g><title>specialization_graph_of (14,505,083 samples, 1.76%)</title><rect x="38.0367%" y="117" width="1.7591%" height="15" fill="rgb(210,229,1)"/><text x="38.2867%" y="127.50"></text></g><g><title>coherence_checking (15,603,924 samples, 1.89%)</title><rect x="37.9342%" y="149" width="1.8924%" height="15" fill="rgb(222,148,37)"/><text x="38.1842%" y="159.50">c..</text></g><g><title>associated_item (1,271,483 samples, 0.15%)</title><rect x="65.3673%" y="85" width="0.1542%" height="15" fill="rgb(234,67,33)"/><text x="65.6173%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,003,331 samples, 0.12%)</title><rect x="65.3998%" y="69" width="0.1217%" height="15" fill="rgb(247,98,35)"/><text x="65.6498%" y="79.50"></text></g><g><title>associated_items (1,985,242 samples, 0.24%)</title><rect x="65.2898%" y="101" width="0.2408%" height="15" fill="rgb(247,138,52)"/><text x="65.5398%" y="111.50"></text></g><g><title>dropck_outlives (2,530,853 samples, 0.31%)</title><rect x="65.5579%" y="101" width="0.3069%" height="15" fill="rgb(213,79,30)"/><text x="65.8079%" y="111.50"></text></g><g><title>eval_to_const_value_raw (883,669 samples, 0.11%)</title><rect x="65.8648%" y="101" width="0.1072%" height="15" fill="rgb(246,177,23)"/><text x="66.1148%" y="111.50"></text></g><g><title>eval_to_const_value_raw (844,318 samples, 0.10%)</title><rect x="65.8696%" y="85" width="0.1024%" height="15" fill="rgb(230,62,27)"/><text x="66.1196%" y="95.50"></text></g><g><title>generics_of (824,849 samples, 0.10%)</title><rect x="67.6981%" y="85" width="0.1000%" height="15" fill="rgb(216,154,8)"/><text x="67.9481%" y="95.50"></text></g><g><title>impl_trait_ref (855,949 samples, 0.10%)</title><rect x="67.8539%" y="85" width="0.1038%" height="15" fill="rgb(244,35,45)"/><text x="68.1039%" y="95.50"></text></g><g><title>predicates_of (851,958 samples, 0.10%)</title><rect x="67.9633%" y="85" width="0.1033%" height="15" fill="rgb(251,115,12)"/><text x="68.2133%" y="95.50"></text></g><g><title>specializes (1,935,550 samples, 0.23%)</title><rect x="68.0666%" y="85" width="0.2347%" height="15" fill="rgb(240,54,50)"/><text x="68.3166%" y="95.50"></text></g><g><title>evaluate_obligation (19,846,126 samples, 2.41%)</title><rect x="65.9720%" y="101" width="2.4069%" height="15" fill="rgb(233,84,52)"/><text x="66.2220%" y="111.50">ev..</text></g><g><title>item_attrs (889,344 samples, 0.11%)</title><rect x="68.5913%" y="101" width="0.1079%" height="15" fill="rgb(207,117,47)"/><text x="68.8413%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (862,014 samples, 0.10%)</title><rect x="68.5946%" y="85" width="0.1045%" height="15" fill="rgb(249,43,39)"/><text x="68.8446%" y="95.50"></text></g><g><title>evaluate_obligation (877,649 samples, 0.11%)</title><rect x="68.8486%" y="85" width="0.1064%" height="15" fill="rgb(209,38,44)"/><text x="69.0986%" y="95.50"></text></g><g><title>method_autoderef_steps (1,879,043 samples, 0.23%)</title><rect x="68.7298%" y="101" width="0.2279%" height="15" fill="rgb(236,212,23)"/><text x="68.9798%" y="111.50"></text></g><g><title>predicates_of (905,201 samples, 0.11%)</title><rect x="69.0565%" y="101" width="0.1098%" height="15" fill="rgb(242,79,21)"/><text x="69.3065%" y="111.50"></text></g><g><title>dropck_outlives (1,192,504 samples, 0.14%)</title><rect x="77.3643%" y="85" width="0.1446%" height="15" fill="rgb(211,96,35)"/><text x="77.6143%" y="95.50"></text></g><g><title>evaluate_obligation (7,389,155 samples, 0.90%)</title><rect x="77.5090%" y="85" width="0.8961%" height="15" fill="rgb(253,215,40)"/><text x="77.7590%" y="95.50"></text></g><g><title>generics_of (1,224,493 samples, 0.15%)</title><rect x="78.4274%" y="85" width="0.1485%" height="15" fill="rgb(211,81,21)"/><text x="78.6774%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (950,231 samples, 0.12%)</title><rect x="78.4606%" y="69" width="0.1152%" height="15" fill="rgb(208,190,38)"/><text x="78.7106%" y="79.50"></text></g><g><title>is_copy_raw (846,460 samples, 0.10%)</title><rect x="78.6784%" y="85" width="0.1027%" height="15" fill="rgb(235,213,38)"/><text x="78.9284%" y="95.50"></text></g><g><title>method_autoderef_steps (1,191,123 samples, 0.14%)</title><rect x="78.8263%" y="85" width="0.1445%" height="15" fill="rgb(237,122,38)"/><text x="79.0763%" y="95.50"></text></g><g><title>typeck (81,327,915 samples, 9.86%)</title><rect x="69.2409%" y="101" width="9.8633%" height="15" fill="rgb(244,218,35)"/><text x="69.4909%" y="111.50">typeck</text></g><g><title>item_bodies_checking (323,925,334 samples, 39.28%)</title><rect x="39.8517%" y="149" width="39.2849%" height="15" fill="rgb(240,68,47)"/><text x="40.1017%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (323,920,213 samples, 39.28%)</title><rect x="39.8523%" y="133" width="39.2843%" height="15" fill="rgb(210,16,53)"/><text x="40.1023%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (323,178,906 samples, 39.19%)</title><rect x="39.9422%" y="117" width="39.1944%" height="15" fill="rgb(235,124,12)"/><text x="40.1922%" y="127.50">typeck</text></g><g><title>item_types_checking (5,152,837 samples, 0.62%)</title><rect x="79.1366%" y="149" width="0.6249%" height="15" fill="rgb(224,169,11)"/><text x="79.3866%" y="159.50"></text></g><g><title>check_mod_item_types (5,141,357 samples, 0.62%)</title><rect x="79.1380%" y="133" width="0.6235%" height="15" fill="rgb(250,166,2)"/><text x="79.3880%" y="143.50"></text></g><g><title>fn_sig (1,669,919 samples, 0.20%)</title><rect x="79.9975%" y="117" width="0.2025%" height="15" fill="rgb(242,216,29)"/><text x="80.2475%" y="127.50"></text></g><g><title>lint_levels (2,268,605 samples, 0.28%)</title><rect x="80.4953%" y="69" width="0.2751%" height="15" fill="rgb(230,116,27)"/><text x="80.7453%" y="79.50"></text></g><g><title>named_region_map (3,758,832 samples, 0.46%)</title><rect x="80.3147%" y="101" width="0.4559%" height="15" fill="rgb(228,99,48)"/><text x="80.5647%" y="111.50"></text></g><g><title>resolve_lifetimes (3,632,182 samples, 0.44%)</title><rect x="80.3300%" y="85" width="0.4405%" height="15" fill="rgb(253,11,6)"/><text x="80.5800%" y="95.50"></text></g><g><title>generics_of (4,784,744 samples, 0.58%)</title><rect x="80.2000%" y="117" width="0.5803%" height="15" fill="rgb(247,143,39)"/><text x="80.4500%" y="127.50"></text></g><g><title>explicit_predicates_of (1,561,831 samples, 0.19%)</title><rect x="80.9450%" y="85" width="0.1894%" height="15" fill="rgb(236,97,10)"/><text x="81.1950%" y="95.50"></text></g><g><title>predicates_of (3,817,758 samples, 0.46%)</title><rect x="80.8158%" y="117" width="0.4630%" height="15" fill="rgb(233,208,19)"/><text x="81.0658%" y="127.50"></text></g><g><title>predicates_defined_on (3,398,002 samples, 0.41%)</title><rect x="80.8667%" y="101" width="0.4121%" height="15" fill="rgb(216,164,2)"/><text x="81.1167%" y="111.50"></text></g><g><title>inferred_outlives_of (1,190,123 samples, 0.14%)</title><rect x="81.1345%" y="85" width="0.1443%" height="15" fill="rgb(220,129,5)"/><text x="81.3845%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,054,132 samples, 0.13%)</title><rect x="81.1510%" y="69" width="0.1278%" height="15" fill="rgb(242,17,10)"/><text x="81.4010%" y="79.50"></text></g><g><title>type_collecting (13,390,359 samples, 1.62%)</title><rect x="79.7627%" y="149" width="1.6240%" height="15" fill="rgb(242,107,0)"/><text x="80.0127%" y="159.50"></text></g><g><title>collect_mod_item_types (13,373,079 samples, 1.62%)</title><rect x="79.7648%" y="133" width="1.6219%" height="15" fill="rgb(251,28,31)"/><text x="80.0148%" y="143.50"></text></g><g><title>type_of (873,278 samples, 0.11%)</title><rect x="81.2808%" y="117" width="0.1059%" height="15" fill="rgb(233,223,10)"/><text x="81.5308%" y="127.50"></text></g><g><title>evaluate_obligation (2,959,959 samples, 0.36%)</title><rect x="83.1772%" y="117" width="0.3590%" height="15" fill="rgb(215,21,27)"/><text x="83.4272%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,462,907 samples, 0.18%)</title><rect x="83.5383%" y="117" width="0.1774%" height="15" fill="rgb(232,23,21)"/><text x="83.7883%" y="127.50"></text></g><g><title>param_env (2,270,723 samples, 0.28%)</title><rect x="83.8010%" y="117" width="0.2754%" height="15" fill="rgb(244,5,23)"/><text x="84.0510%" y="127.50"></text></g><g><title>region_scope_tree (3,850,471 samples, 0.47%)</title><rect x="84.0865%" y="117" width="0.4670%" height="15" fill="rgb(226,81,46)"/><text x="84.3365%" y="127.50"></text></g><g><title>check_impl_item_well_formed (24,806,684 samples, 3.01%)</title><rect x="81.5587%" y="133" width="3.0085%" height="15" fill="rgb(247,70,30)"/><text x="81.8087%" y="143.50">che..</text></g><g><title>evaluate_obligation (1,730,102 samples, 0.21%)</title><rect x="85.1882%" y="117" width="0.2098%" height="15" fill="rgb(212,68,19)"/><text x="85.4382%" y="127.50"></text></g><g><title>param_env (1,173,794 samples, 0.14%)</title><rect x="85.4759%" y="117" width="0.1424%" height="15" fill="rgb(240,187,13)"/><text x="85.7259%" y="127.50"></text></g><g><title>check_item_well_formed (9,423,238 samples, 1.14%)</title><rect x="84.5672%" y="133" width="1.1428%" height="15" fill="rgb(223,113,26)"/><text x="84.8172%" y="143.50"></text></g><g><title>analysis (706,749,603 samples, 85.71%)</title><rect x="0.1729%" y="181" width="85.7129%" height="15" fill="rgb(206,192,2)"/><text x="0.4229%" y="191.50">analysis</text></g><g><title>type_check_crate (395,888,994 samples, 48.01%)</title><rect x="37.8734%" y="165" width="48.0125%" height="15" fill="rgb(241,108,4)"/><text x="38.1234%" y="175.50">type_check_crate</text></g><g><title>wf_checking (37,044,002 samples, 4.49%)</title><rect x="81.3932%" y="149" width="4.4926%" height="15" fill="rgb(247,173,49)"/><text x="81.6432%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,449,737 samples, 0.18%)</title><rect x="85.7100%" y="133" width="0.1758%" height="15" fill="rgb(224,114,35)"/><text x="85.9600%" y="143.50"></text></g><g><title>metadata_register_crate (1,270,924 samples, 0.15%)</title><rect x="91.0948%" y="133" width="0.1541%" height="15" fill="rgb(245,159,27)"/><text x="91.3448%" y="143.50"></text></g><g><title>macro_expand_crate (43,376,352 samples, 5.26%)</title><rect x="86.1002%" y="165" width="5.2606%" height="15" fill="rgb(245,172,44)"/><text x="86.3502%" y="175.50">macro_..</text></g><g><title>expand_crate (43,355,392 samples, 5.26%)</title><rect x="86.1027%" y="149" width="5.2580%" height="15" fill="rgb(236,23,11)"/><text x="86.3527%" y="159.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (921,971 samples, 0.11%)</title><rect x="91.2490%" y="133" width="0.1118%" height="15" fill="rgb(205,117,38)"/><text x="91.4990%" y="143.50"></text></g><g><title>late_resolve_crate (13,156,176 samples, 1.60%)</title><rect x="91.4425%" y="149" width="1.5955%" height="15" fill="rgb(237,72,25)"/><text x="91.6925%" y="159.50"></text></g><g><title>configure_and_expand (59,699,984 samples, 7.24%)</title><rect x="85.9353%" y="181" width="7.2403%" height="15" fill="rgb(244,70,9)"/><text x="86.1853%" y="191.50">configure_..</text></g><g><title>resolve_crate (14,919,356 samples, 1.81%)</title><rect x="91.3662%" y="165" width="1.8094%" height="15" fill="rgb(217,125,39)"/><text x="91.6162%" y="175.50">r..</text></g><g><title>drop_ast (1,470,456 samples, 0.18%)</title><rect x="93.1756%" y="181" width="0.1783%" height="15" fill="rgb(235,36,10)"/><text x="93.4256%" y="191.50"></text></g><g><title>early_lint_checks (3,347,518 samples, 0.41%)</title><rect x="93.3568%" y="181" width="0.4060%" height="15" fill="rgb(251,123,47)"/><text x="93.6068%" y="191.50"></text></g><g><title>free_global_ctxt (8,985,549 samples, 1.09%)</title><rect x="93.7628%" y="181" width="1.0897%" height="15" fill="rgb(221,13,13)"/><text x="94.0128%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,186,358 samples, 0.27%)</title><rect x="96.1530%" y="133" width="0.2652%" height="15" fill="rgb(238,131,9)"/><text x="96.4030%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,136,447 samples, 0.26%)</title><rect x="96.1590%" y="117" width="0.2591%" height="15" fill="rgb(211,50,8)"/><text x="96.4090%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,038,695 samples, 0.25%)</title><rect x="96.1709%" y="101" width="0.2472%" height="15" fill="rgb(245,182,24)"/><text x="96.4209%" y="111.50"></text></g><g><title>promoted_mir (984,751 samples, 0.12%)</title><rect x="96.2987%" y="85" width="0.1194%" height="15" fill="rgb(242,14,37)"/><text x="96.5487%" y="95.50"></text></g><g><title>mir_for_ctfe (4,986,366 samples, 0.60%)</title><rect x="95.8236%" y="165" width="0.6047%" height="15" fill="rgb(246,228,12)"/><text x="96.0736%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,485,669 samples, 0.30%)</title><rect x="96.1269%" y="149" width="0.3015%" height="15" fill="rgb(213,55,15)"/><text x="96.3769%" y="159.50"></text></g><g><title>generate_crate_metadata (13,680,552 samples, 1.66%)</title><rect x="94.8525%" y="181" width="1.6591%" height="15" fill="rgb(209,9,3)"/><text x="95.1025%" y="191.50"></text></g><g><title>hir_lowering (25,058,209 samples, 3.04%)</title><rect x="96.5117%" y="181" width="3.0390%" height="15" fill="rgb(230,59,30)"/><text x="96.7617%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,396,406 samples, 0.29%)</title><rect x="99.6179%" y="181" width="0.2906%" height="15" fill="rgb(209,121,21)"/><text x="99.8679%" y="191.50"></text></g><g><title>all (824,554,514 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (824,554,514 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>