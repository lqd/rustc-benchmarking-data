<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (8,333,472 samples, 0.41%)</title><rect x="9.4976%" y="101" width="0.4059%" height="15" fill="rgb(227,0,7)"/><text x="9.7476%" y="111.50"></text></g><g><title>evaluate_obligation (6,744,068 samples, 0.33%)</title><rect x="9.5750%" y="85" width="0.3284%" height="15" fill="rgb(217,0,24)"/><text x="9.8250%" y="95.50"></text></g><g><title>needs_drop_raw (10,109,360 samples, 0.49%)</title><rect x="9.4156%" y="117" width="0.4923%" height="15" fill="rgb(221,193,54)"/><text x="9.6656%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,082,215 samples, 0.10%)</title><rect x="9.9838%" y="101" width="0.1014%" height="15" fill="rgb(248,212,6)"/><text x="10.2338%" y="111.50"></text></g><g><title>specialization_graph_of (3,784,673 samples, 0.18%)</title><rect x="10.1039%" y="101" width="0.1843%" height="15" fill="rgb(208,68,35)"/><text x="10.3539%" y="111.50"></text></g><g><title>resolve_instance (8,243,147 samples, 0.40%)</title><rect x="9.9079%" y="117" width="0.4015%" height="15" fill="rgb(232,128,0)"/><text x="10.1579%" y="127.50"></text></g><g><title>thir_body (10,618,948 samples, 0.52%)</title><rect x="10.3216%" y="117" width="0.5172%" height="15" fill="rgb(207,160,47)"/><text x="10.5716%" y="127.50"></text></g><g><title>mir_const (67,990,029 samples, 3.31%)</title><rect x="7.5385%" y="165" width="3.3112%" height="15" fill="rgb(228,23,34)"/><text x="7.7885%" y="175.50">mir..</text></g><g><title>unsafety_check_result (60,588,630 samples, 2.95%)</title><rect x="7.8990%" y="149" width="2.9508%" height="15" fill="rgb(218,30,26)"/><text x="8.1490%" y="159.50">uns..</text></g><g><title>mir_built (55,492,649 samples, 2.70%)</title><rect x="8.1472%" y="133" width="2.7026%" height="15" fill="rgb(220,122,19)"/><text x="8.3972%" y="143.50">mi..</text></g><g><title>mir_const (7,515,932 samples, 0.37%)</title><rect x="11.1774%" y="149" width="0.3660%" height="15" fill="rgb(250,228,42)"/><text x="11.4274%" y="159.50"></text></g><g><title>unsafety_check_result (5,821,661 samples, 0.28%)</title><rect x="11.2599%" y="133" width="0.2835%" height="15" fill="rgb(240,193,28)"/><text x="11.5099%" y="143.50"></text></g><g><title>mir_built (5,124,606 samples, 0.25%)</title><rect x="11.2938%" y="117" width="0.2496%" height="15" fill="rgb(216,20,37)"/><text x="11.5438%" y="127.50"></text></g><g><title>mir_const_qualif (14,331,931 samples, 0.70%)</title><rect x="10.8498%" y="165" width="0.6980%" height="15" fill="rgb(206,188,39)"/><text x="11.0998%" y="175.50"></text></g><g><title>mir_promoted (90,940,484 samples, 4.43%)</title><rect x="7.1189%" y="181" width="4.4290%" height="15" fill="rgb(217,207,13)"/><text x="7.3689%" y="191.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (4,641,621 samples, 0.23%)</title><rect x="11.5504%" y="181" width="0.2261%" height="15" fill="rgb(231,73,38)"/><text x="11.8004%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (5,726,690 samples, 0.28%)</title><rect x="11.7765%" y="181" width="0.2789%" height="15" fill="rgb(225,20,46)"/><text x="12.0265%" y="191.50"></text></g><g><title>normalize_projection_ty (3,159,998 samples, 0.15%)</title><rect x="11.9015%" y="165" width="0.1539%" height="15" fill="rgb(210,31,41)"/><text x="12.1515%" y="175.50"></text></g><g><title>type_op_normalize_predicate (2,132,043 samples, 0.10%)</title><rect x="12.0554%" y="181" width="0.1038%" height="15" fill="rgb(221,200,47)"/><text x="12.3054%" y="191.50"></text></g><g><title>type_op_prove_predicate (61,378,629 samples, 2.99%)</title><rect x="12.2166%" y="181" width="2.9893%" height="15" fill="rgb(226,26,5)"/><text x="12.4666%" y="191.50">typ..</text></g><g><title>MIR_borrow_checking (307,871,853 samples, 14.99%)</title><rect x="0.2131%" y="213" width="14.9940%" height="15" fill="rgb(249,33,26)"/><text x="0.4631%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (306,453,769 samples, 14.92%)</title><rect x="0.2822%" y="197" width="14.9249%" height="15" fill="rgb(235,183,28)"/><text x="0.5322%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (4,463,169 samples, 0.22%)</title><rect x="15.2071%" y="213" width="0.2174%" height="15" fill="rgb(221,5,38)"/><text x="15.4571%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,718,057 samples, 0.18%)</title><rect x="15.2434%" y="197" width="0.1811%" height="15" fill="rgb(247,18,42)"/><text x="15.4934%" y="207.50"></text></g><g><title>hir_module_items (2,154,105 samples, 0.10%)</title><rect x="15.4245%" y="213" width="0.1049%" height="15" fill="rgb(241,131,45)"/><text x="15.6745%" y="223.50"></text></g><g><title>check_mod_attrs (4,852,019 samples, 0.24%)</title><rect x="15.5338%" y="197" width="0.2363%" height="15" fill="rgb(249,31,29)"/><text x="15.7838%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (3,070,703 samples, 0.15%)</title><rect x="15.8883%" y="197" width="0.1495%" height="15" fill="rgb(225,111,53)"/><text x="16.1383%" y="207.50"></text></g><g><title>misc_checking_1 (10,863,681 samples, 0.53%)</title><rect x="15.5294%" y="213" width="0.5291%" height="15" fill="rgb(238,160,17)"/><text x="15.7794%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (8,232,352 samples, 0.40%)</title><rect x="16.0587%" y="197" width="0.4009%" height="15" fill="rgb(214,148,48)"/><text x="16.3087%" y="207.50"></text></g><g><title>check_mod_liveness (6,902,382 samples, 0.34%)</title><rect x="16.1234%" y="181" width="0.3362%" height="15" fill="rgb(232,36,49)"/><text x="16.3734%" y="191.50"></text></g><g><title>misc_checking_2 (27,026,661 samples, 1.32%)</title><rect x="16.0585%" y="213" width="1.3163%" height="15" fill="rgb(209,103,24)"/><text x="16.3085%" y="223.50"></text></g><g><title>match_checking (18,790,569 samples, 0.92%)</title><rect x="16.4596%" y="197" width="0.9151%" height="15" fill="rgb(229,88,8)"/><text x="16.7096%" y="207.50"></text></g><g><title>check_match (18,003,399 samples, 0.88%)</title><rect x="16.4979%" y="181" width="0.8768%" height="15" fill="rgb(213,181,19)"/><text x="16.7479%" y="191.50"></text></g><g><title>check_private_in_public (2,795,311 samples, 0.14%)</title><rect x="17.3757%" y="197" width="0.1361%" height="15" fill="rgb(254,191,54)"/><text x="17.6257%" y="207.50"></text></g><g><title>death_checking (5,215,618 samples, 0.25%)</title><rect x="17.5119%" y="197" width="0.2540%" height="15" fill="rgb(241,83,37)"/><text x="17.7619%" y="207.50"></text></g><g><title>mir_for_ctfe (3,824,391 samples, 0.19%)</title><rect x="18.6642%" y="69" width="0.1863%" height="15" fill="rgb(233,36,39)"/><text x="18.9142%" y="79.50"></text></g><g><title>eval_to_const_value_raw (12,769,794 samples, 0.62%)</title><rect x="18.2509%" y="117" width="0.6219%" height="15" fill="rgb(226,3,54)"/><text x="18.5009%" y="127.50"></text></g><g><title>eval_to_const_value_raw (12,568,550 samples, 0.61%)</title><rect x="18.2607%" y="101" width="0.6121%" height="15" fill="rgb(245,192,40)"/><text x="18.5107%" y="111.50"></text></g><g><title>eval_to_allocation_raw (12,288,616 samples, 0.60%)</title><rect x="18.2743%" y="85" width="0.5985%" height="15" fill="rgb(238,167,29)"/><text x="18.5243%" y="95.50"></text></g><g><title>eval_to_allocation_raw (15,732,595 samples, 0.77%)</title><rect x="18.1114%" y="165" width="0.7662%" height="15" fill="rgb(232,182,51)"/><text x="18.3614%" y="175.50"></text></g><g><title>eval_to_allocation_raw (15,730,085 samples, 0.77%)</title><rect x="18.1116%" y="149" width="0.7661%" height="15" fill="rgb(231,60,39)"/><text x="18.3616%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (13,676,915 samples, 0.67%)</title><rect x="18.2115%" y="133" width="0.6661%" height="15" fill="rgb(208,69,12)"/><text x="18.4615%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,241,605 samples, 0.11%)</title><rect x="18.8776%" y="165" width="0.1092%" height="15" fill="rgb(235,93,37)"/><text x="19.1276%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,228,135 samples, 0.11%)</title><rect x="18.8783%" y="149" width="0.1085%" height="15" fill="rgb(213,116,39)"/><text x="19.1283%" y="159.50"></text></g><g><title>eval_to_allocation_raw (2,203,745 samples, 0.11%)</title><rect x="18.8795%" y="133" width="0.1073%" height="15" fill="rgb(222,207,29)"/><text x="19.1295%" y="143.50"></text></g><g><title>param_env (4,504,601 samples, 0.22%)</title><rect x="18.9868%" y="165" width="0.2194%" height="15" fill="rgb(206,96,30)"/><text x="19.2368%" y="175.50"></text></g><g><title>predicates_of (2,079,563 samples, 0.10%)</title><rect x="19.1049%" y="149" width="0.1013%" height="15" fill="rgb(218,138,4)"/><text x="19.3549%" y="159.50"></text></g><g><title>crate_lints (32,067,727 samples, 1.56%)</title><rect x="17.7660%" y="181" width="1.5618%" height="15" fill="rgb(250,191,14)"/><text x="18.0160%" y="191.50"></text></g><g><title>lint_checking (41,808,605 samples, 2.04%)</title><rect x="17.7659%" y="197" width="2.0362%" height="15" fill="rgb(239,60,40)"/><text x="18.0159%" y="207.50">l..</text></g><g><title>module_lints (9,737,488 samples, 0.47%)</title><rect x="19.3278%" y="181" width="0.4742%" height="15" fill="rgb(206,27,48)"/><text x="19.5778%" y="191.50"></text></g><g><title>lint_mod (9,701,197 samples, 0.47%)</title><rect x="19.3296%" y="165" width="0.4725%" height="15" fill="rgb(225,35,8)"/><text x="19.5796%" y="175.50"></text></g><g><title>privacy_access_levels (5,766,065 samples, 0.28%)</title><rect x="19.8020%" y="197" width="0.2808%" height="15" fill="rgb(250,213,24)"/><text x="20.0520%" y="207.50"></text></g><g><title>privacy_checking_modules (17,191,411 samples, 0.84%)</title><rect x="20.0829%" y="197" width="0.8373%" height="15" fill="rgb(247,123,22)"/><text x="20.3329%" y="207.50"></text></g><g><title>check_mod_privacy (17,160,271 samples, 0.84%)</title><rect x="20.0844%" y="181" width="0.8357%" height="15" fill="rgb(231,138,38)"/><text x="20.3344%" y="191.50"></text></g><g><title>misc_checking_3 (72,910,341 samples, 3.55%)</title><rect x="17.3747%" y="213" width="3.5509%" height="15" fill="rgb(231,145,46)"/><text x="17.6247%" y="223.50">misc..</text></g><g><title>impl_parent (4,353,633 samples, 0.21%)</title><rect x="21.3623%" y="149" width="0.2120%" height="15" fill="rgb(251,118,11)"/><text x="21.6123%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,543,486 samples, 0.12%)</title><rect x="21.4504%" y="133" width="0.1239%" height="15" fill="rgb(217,147,25)"/><text x="21.7004%" y="143.50"></text></g><g><title>impl_trait_ref (8,670,330 samples, 0.42%)</title><rect x="21.5743%" y="149" width="0.4223%" height="15" fill="rgb(247,81,37)"/><text x="21.8243%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,674,156 samples, 0.33%)</title><rect x="21.6715%" y="133" width="0.3250%" height="15" fill="rgb(209,12,38)"/><text x="21.9215%" y="143.50"></text></g><g><title>coherent_trait (22,979,544 samples, 1.12%)</title><rect x="20.9823%" y="181" width="1.1191%" height="15" fill="rgb(227,1,9)"/><text x="21.2323%" y="191.50"></text></g><g><title>specialization_graph_of (22,206,255 samples, 1.08%)</title><rect x="21.0199%" y="165" width="1.0815%" height="15" fill="rgb(248,47,43)"/><text x="21.2699%" y="175.50"></text></g><g><title>trait_impls_of (2,104,482 samples, 0.10%)</title><rect x="21.9989%" y="149" width="0.1025%" height="15" fill="rgb(221,10,30)"/><text x="22.2489%" y="159.50"></text></g><g><title>coherence_checking (23,561,291 samples, 1.15%)</title><rect x="20.9801%" y="197" width="1.1475%" height="15" fill="rgb(210,229,1)"/><text x="21.2301%" y="207.50"></text></g><g><title>specializes (2,922,740 samples, 0.14%)</title><rect x="30.6708%" y="133" width="0.1423%" height="15" fill="rgb(222,148,37)"/><text x="30.9208%" y="143.50"></text></g><g><title>evaluate_obligation (18,011,826 samples, 0.88%)</title><rect x="29.9996%" y="149" width="0.8772%" height="15" fill="rgb(234,67,33)"/><text x="30.2496%" y="159.50"></text></g><g><title>dropck_outlives (2,375,121 samples, 0.12%)</title><rect x="37.1000%" y="133" width="0.1157%" height="15" fill="rgb(247,98,35)"/><text x="37.3500%" y="143.50"></text></g><g><title>evaluate_obligation (253,617,892 samples, 12.35%)</title><rect x="37.2157%" y="133" width="12.3517%" height="15" fill="rgb(247,138,52)"/><text x="37.4657%" y="143.50">evaluate_obligation</text></g><g><title>is_copy_raw (2,324,329 samples, 0.11%)</title><rect x="49.6151%" y="133" width="0.1132%" height="15" fill="rgb(213,79,30)"/><text x="49.8651%" y="143.50"></text></g><g><title>typeck (385,043,093 samples, 18.75%)</title><rect x="31.1046%" y="149" width="18.7523%" height="15" fill="rgb(246,177,23)"/><text x="31.3546%" y="159.50">typeck</text></g><g><title>item_bodies_checking (569,072,008 samples, 27.71%)</title><rect x="22.1511%" y="197" width="27.7149%" height="15" fill="rgb(230,62,27)"/><text x="22.4011%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (569,067,228 samples, 27.71%)</title><rect x="22.1514%" y="181" width="27.7147%" height="15" fill="rgb(216,154,8)"/><text x="22.4014%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (567,516,250 samples, 27.64%)</title><rect x="22.2269%" y="165" width="27.6391%" height="15" fill="rgb(244,35,45)"/><text x="22.4769%" y="175.50">typeck</text></g><g><title>mir_borrowck (6,494,644 samples, 0.32%)</title><rect x="56.4474%" y="117" width="0.3163%" height="15" fill="rgb(251,115,12)"/><text x="56.6974%" y="127.50"></text></g><g><title>mir_const (5,768,697 samples, 0.28%)</title><rect x="57.0055%" y="101" width="0.2809%" height="15" fill="rgb(240,54,50)"/><text x="57.2555%" y="111.50"></text></g><g><title>mir_promoted (11,647,227 samples, 0.57%)</title><rect x="56.7637%" y="117" width="0.5672%" height="15" fill="rgb(233,84,52)"/><text x="57.0137%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (11,615,589 samples, 0.57%)</title><rect x="57.3841%" y="117" width="0.5657%" height="15" fill="rgb(207,117,47)"/><text x="57.6341%" y="127.50"></text></g><g><title>normalize_projection_ty (7,612,899 samples, 0.37%)</title><rect x="57.5790%" y="101" width="0.3708%" height="15" fill="rgb(249,43,39)"/><text x="57.8290%" y="111.50"></text></g><g><title>type_op_normalize_predicate (2,961,043 samples, 0.14%)</title><rect x="57.9498%" y="117" width="0.1442%" height="15" fill="rgb(209,38,44)"/><text x="58.1998%" y="127.50"></text></g><g><title>type_op_prove_predicate (19,361,858 samples, 0.94%)</title><rect x="58.1359%" y="117" width="0.9430%" height="15" fill="rgb(236,212,23)"/><text x="58.3859%" y="127.50"></text></g><g><title>mir_borrowck (147,225,593 samples, 7.17%)</title><rect x="51.9091%" y="133" width="7.1702%" height="15" fill="rgb(242,79,21)"/><text x="52.1591%" y="143.50">mir_borrow..</text></g><g><title>associated_item (2,103,795 samples, 0.10%)</title><rect x="69.2519%" y="37" width="0.1025%" height="15" fill="rgb(211,96,35)"/><text x="69.5019%" y="47.50"></text></g><g><title>associated_items (3,102,126 samples, 0.15%)</title><rect x="69.2097%" y="53" width="0.1511%" height="15" fill="rgb(253,215,40)"/><text x="69.4597%" y="63.50"></text></g><g><title>adt_dtorck_constraint (2,147,781 samples, 0.10%)</title><rect x="69.5679%" y="37" width="0.1046%" height="15" fill="rgb(211,81,21)"/><text x="69.8179%" y="47.50"></text></g><g><title>dropck_outlives (6,203,966 samples, 0.30%)</title><rect x="69.3732%" y="53" width="0.3021%" height="15" fill="rgb(208,190,38)"/><text x="69.6232%" y="63.50"></text></g><g><title>trait_impls_of (2,280,112 samples, 0.11%)</title><rect x="70.6150%" y="37" width="0.1110%" height="15" fill="rgb(235,213,38)"/><text x="70.8650%" y="47.50"></text></g><g><title>evaluate_obligation (21,552,558 samples, 1.05%)</title><rect x="69.6769%" y="53" width="1.0497%" height="15" fill="rgb(237,122,38)"/><text x="69.9269%" y="63.50"></text></g><g><title>implied_outlives_bounds (2,107,999 samples, 0.10%)</title><rect x="70.8295%" y="53" width="0.1027%" height="15" fill="rgb(244,218,35)"/><text x="71.0795%" y="63.50"></text></g><g><title>is_copy_raw (6,778,600 samples, 0.33%)</title><rect x="70.9388%" y="53" width="0.3301%" height="15" fill="rgb(240,68,47)"/><text x="71.1888%" y="63.50"></text></g><g><title>evaluate_obligation (5,196,863 samples, 0.25%)</title><rect x="71.0158%" y="37" width="0.2531%" height="15" fill="rgb(210,16,53)"/><text x="71.2658%" y="47.50"></text></g><g><title>method_autoderef_steps (2,899,558 samples, 0.14%)</title><rect x="71.3602%" y="53" width="0.1412%" height="15" fill="rgb(235,124,12)"/><text x="71.6102%" y="63.50"></text></g><g><title>mir_built (257,681,358 samples, 12.55%)</title><rect x="59.2030%" y="85" width="12.5496%" height="15" fill="rgb(224,169,11)"/><text x="59.4530%" y="95.50">mir_built</text></g><g><title>typeck (249,020,350 samples, 12.13%)</title><rect x="59.6248%" y="69" width="12.1278%" height="15" fill="rgb(250,166,2)"/><text x="59.8748%" y="79.50">typeck</text></g><g><title>is_copy_raw (2,775,770 samples, 0.14%)</title><rect x="72.9135%" y="37" width="0.1352%" height="15" fill="rgb(242,216,29)"/><text x="73.1635%" y="47.50"></text></g><g><title>needs_drop_raw (4,709,595 samples, 0.23%)</title><rect x="72.8217%" y="53" width="0.2294%" height="15" fill="rgb(230,116,27)"/><text x="73.0717%" y="63.50"></text></g><g><title>thir_body (6,119,156 samples, 0.30%)</title><rect x="73.0646%" y="53" width="0.2980%" height="15" fill="rgb(228,99,48)"/><text x="73.3146%" y="63.50"></text></g><g><title>mir_built (29,627,560 samples, 1.44%)</title><rect x="71.9332%" y="69" width="1.4429%" height="15" fill="rgb(253,11,6)"/><text x="72.1832%" y="79.50"></text></g><g><title>mir_const (294,275,866 samples, 14.33%)</title><rect x="59.1217%" y="117" width="14.3318%" height="15" fill="rgb(247,143,39)"/><text x="59.3717%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (293,078,469 samples, 14.27%)</title><rect x="59.1800%" y="101" width="14.2735%" height="15" fill="rgb(236,97,10)"/><text x="59.4300%" y="111.50">unsafety_check_result</text></g><g><title>unsafety_check_result (34,924,428 samples, 1.70%)</title><rect x="71.7526%" y="85" width="1.7009%" height="15" fill="rgb(233,208,19)"/><text x="72.0026%" y="95.50"></text></g><g><title>mir_promoted (295,248,585 samples, 14.38%)</title><rect x="59.0793%" y="133" width="14.3792%" height="15" fill="rgb(216,164,2)"/><text x="59.3293%" y="143.50">mir_promoted</text></g><g><title>type_of (478,422,028 samples, 23.30%)</title><rect x="50.6425%" y="165" width="23.3001%" height="15" fill="rgb(220,129,5)"/><text x="50.8925%" y="175.50">type_of</text></g><g><title>mir_borrowck (478,154,595 samples, 23.29%)</title><rect x="50.6555%" y="149" width="23.2871%" height="15" fill="rgb(242,17,10)"/><text x="50.9055%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (7,043,582 samples, 0.34%)</title><rect x="73.5996%" y="133" width="0.3430%" height="15" fill="rgb(242,107,0)"/><text x="73.8496%" y="143.50"></text></g><g><title>item_types_checking (501,364,595 samples, 24.42%)</title><rect x="49.8660%" y="197" width="24.4174%" height="15" fill="rgb(251,28,31)"/><text x="50.1160%" y="207.50">item_types_checking</text></g><g><title>check_mod_item_types (501,306,744 samples, 24.41%)</title><rect x="49.8689%" y="181" width="24.4146%" height="15" fill="rgb(233,223,10)"/><text x="50.1189%" y="191.50">check_mod_item_types</text></g><g><title>typeck (6,999,299 samples, 0.34%)</title><rect x="73.9426%" y="165" width="0.3409%" height="15" fill="rgb(215,21,27)"/><text x="74.1926%" y="175.50"></text></g><g><title>is_late_bound_map (2,204,456 samples, 0.11%)</title><rect x="74.5347%" y="133" width="0.1074%" height="15" fill="rgb(232,23,21)"/><text x="74.7847%" y="143.50"></text></g><g><title>resolve_lifetimes (2,124,134 samples, 0.10%)</title><rect x="74.5386%" y="117" width="0.1034%" height="15" fill="rgb(244,5,23)"/><text x="74.7886%" y="127.50"></text></g><g><title>generics_of (2,343,488 samples, 0.11%)</title><rect x="74.5287%" y="149" width="0.1141%" height="15" fill="rgb(226,81,46)"/><text x="74.7787%" y="159.50"></text></g><g><title>fn_sig (5,104,245 samples, 0.25%)</title><rect x="74.4277%" y="165" width="0.2486%" height="15" fill="rgb(247,70,30)"/><text x="74.6777%" y="175.50"></text></g><g><title>is_late_bound_map (2,199,371 samples, 0.11%)</title><rect x="74.7326%" y="149" width="0.1071%" height="15" fill="rgb(212,68,19)"/><text x="74.9826%" y="159.50"></text></g><g><title>resolve_lifetimes (2,098,029 samples, 0.10%)</title><rect x="74.7376%" y="133" width="0.1022%" height="15" fill="rgb(240,187,13)"/><text x="74.9876%" y="143.50"></text></g><g><title>lint_levels (3,685,091 samples, 0.18%)</title><rect x="74.9226%" y="117" width="0.1795%" height="15" fill="rgb(223,113,26)"/><text x="75.1726%" y="127.50"></text></g><g><title>named_region_map (5,387,385 samples, 0.26%)</title><rect x="74.8397%" y="149" width="0.2624%" height="15" fill="rgb(206,192,2)"/><text x="75.0897%" y="159.50"></text></g><g><title>resolve_lifetimes (5,272,725 samples, 0.26%)</title><rect x="74.8453%" y="133" width="0.2568%" height="15" fill="rgb(241,108,4)"/><text x="75.0953%" y="143.50"></text></g><g><title>generics_of (8,836,460 samples, 0.43%)</title><rect x="74.6763%" y="165" width="0.4304%" height="15" fill="rgb(247,173,49)"/><text x="74.9263%" y="175.50"></text></g><g><title>explicit_predicates_of (2,353,100 samples, 0.11%)</title><rect x="75.1926%" y="133" width="0.1146%" height="15" fill="rgb(224,114,35)"/><text x="75.4426%" y="143.50"></text></g><g><title>predicates_of (6,235,926 samples, 0.30%)</title><rect x="75.1223%" y="165" width="0.3037%" height="15" fill="rgb(245,159,27)"/><text x="75.3723%" y="175.50"></text></g><g><title>predicates_defined_on (5,677,893 samples, 0.28%)</title><rect x="75.1494%" y="149" width="0.2765%" height="15" fill="rgb(245,172,44)"/><text x="75.3994%" y="159.50"></text></g><g><title>inferred_outlives_of (2,438,846 samples, 0.12%)</title><rect x="75.3072%" y="133" width="0.1188%" height="15" fill="rgb(236,23,11)"/><text x="75.5572%" y="143.50"></text></g><g><title>inferred_outlives_crate (2,231,384 samples, 0.11%)</title><rect x="75.3173%" y="117" width="0.1087%" height="15" fill="rgb(205,117,38)"/><text x="75.5673%" y="127.50"></text></g><g><title>type_collecting (24,133,219 samples, 1.18%)</title><rect x="74.2853%" y="197" width="1.1753%" height="15" fill="rgb(237,72,25)"/><text x="74.5353%" y="207.50"></text></g><g><title>collect_mod_item_types (24,094,368 samples, 1.17%)</title><rect x="74.2872%" y="181" width="1.1734%" height="15" fill="rgb(244,70,9)"/><text x="74.5372%" y="191.50"></text></g><g><title>evaluate_obligation (4,212,900 samples, 0.21%)</title><rect x="76.3933%" y="165" width="0.2052%" height="15" fill="rgb(217,125,39)"/><text x="76.6433%" y="175.50"></text></g><g><title>param_env (2,961,059 samples, 0.14%)</title><rect x="76.7119%" y="165" width="0.1442%" height="15" fill="rgb(235,36,10)"/><text x="76.9619%" y="175.50"></text></g><g><title>region_scope_tree (4,362,545 samples, 0.21%)</title><rect x="76.8626%" y="165" width="0.2125%" height="15" fill="rgb(251,123,47)"/><text x="77.1126%" y="175.50"></text></g><g><title>check_impl_item_well_formed (31,507,788 samples, 1.53%)</title><rect x="75.5676%" y="181" width="1.5345%" height="15" fill="rgb(221,13,13)"/><text x="75.8176%" y="191.50"></text></g><g><title>evaluate_obligation (2,649,451 samples, 0.13%)</title><rect x="77.4787%" y="165" width="0.1290%" height="15" fill="rgb(238,131,9)"/><text x="77.7287%" y="175.50"></text></g><g><title>check_item_well_formed (16,129,365 samples, 0.79%)</title><rect x="77.1021%" y="181" width="0.7855%" height="15" fill="rgb(211,50,8)"/><text x="77.3521%" y="191.50"></text></g><g><title>analysis (1,600,923,441 samples, 77.97%)</title><rect x="0.0657%" y="229" width="77.9681%" height="15" fill="rgb(245,182,24)"/><text x="0.3157%" y="239.50">analysis</text></g><g><title>type_check_crate (1,172,605,469 samples, 57.11%)</title><rect x="20.9256%" y="213" width="57.1082%" height="15" fill="rgb(242,14,37)"/><text x="21.1756%" y="223.50">type_check_crate</text></g><g><title>wf_checking (52,731,797 samples, 2.57%)</title><rect x="75.4656%" y="197" width="2.5681%" height="15" fill="rgb(246,228,12)"/><text x="75.7156%" y="207.50">wf..</text></g><g><title>check_trait_item_well_formed (3,001,185 samples, 0.15%)</title><rect x="77.8876%" y="181" width="0.1462%" height="15" fill="rgb(213,55,15)"/><text x="78.1376%" y="191.50"></text></g><g><title>metadata_register_crate (15,021,565 samples, 0.73%)</title><rect x="88.5692%" y="181" width="0.7316%" height="15" fill="rgb(209,9,3)"/><text x="88.8192%" y="191.50"></text></g><g><title>metadata_register_crate (9,851,640 samples, 0.48%)</title><rect x="88.8210%" y="165" width="0.4798%" height="15" fill="rgb(230,59,30)"/><text x="89.0710%" y="175.50"></text></g><g><title>metadata_register_crate (4,809,782 samples, 0.23%)</title><rect x="89.0665%" y="149" width="0.2342%" height="15" fill="rgb(209,121,21)"/><text x="89.3165%" y="159.50"></text></g><g><title>macro_expand_crate (230,215,829 samples, 11.21%)</title><rect x="78.1981%" y="213" width="11.2120%" height="15" fill="rgb(220,109,13)"/><text x="78.4481%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (230,199,489 samples, 11.21%)</title><rect x="78.1989%" y="197" width="11.2112%" height="15" fill="rgb(232,18,1)"/><text x="78.4489%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,243,964 samples, 0.11%)</title><rect x="89.3008%" y="181" width="0.1093%" height="15" fill="rgb(215,41,42)"/><text x="89.5508%" y="191.50"></text></g><g><title>late_resolve_crate (16,771,667 samples, 0.82%)</title><rect x="89.4920%" y="197" width="0.8168%" height="15" fill="rgb(224,123,36)"/><text x="89.7420%" y="207.50"></text></g><g><title>configure_and_expand (253,186,075 samples, 12.33%)</title><rect x="78.0693%" y="229" width="12.3307%" height="15" fill="rgb(240,125,3)"/><text x="78.3193%" y="239.50">configure_and_expa..</text></g><g><title>resolve_crate (20,162,275 samples, 0.98%)</title><rect x="89.4180%" y="213" width="0.9819%" height="15" fill="rgb(205,98,50)"/><text x="89.6680%" y="223.50"></text></g><g><title>drop_ast (2,948,592 samples, 0.14%)</title><rect x="90.3999%" y="229" width="0.1436%" height="15" fill="rgb(205,185,37)"/><text x="90.6499%" y="239.50"></text></g><g><title>early_lint_checks (5,292,179 samples, 0.26%)</title><rect x="90.5452%" y="229" width="0.2577%" height="15" fill="rgb(238,207,15)"/><text x="90.7952%" y="239.50"></text></g><g><title>free_global_ctxt (14,979,597 samples, 0.73%)</title><rect x="90.8030%" y="229" width="0.7295%" height="15" fill="rgb(213,199,42)"/><text x="91.0530%" y="239.50"></text></g><g><title>layout_of (2,244,403 samples, 0.11%)</title><rect x="94.7814%" y="197" width="0.1093%" height="15" fill="rgb(235,201,11)"/><text x="95.0314%" y="207.50"></text></g><g><title>is_copy_raw (6,015,346 samples, 0.29%)</title><rect x="97.4140%" y="165" width="0.2930%" height="15" fill="rgb(207,46,11)"/><text x="97.6640%" y="175.50"></text></g><g><title>evaluate_obligation (4,711,424 samples, 0.23%)</title><rect x="97.4775%" y="149" width="0.2295%" height="15" fill="rgb(241,35,35)"/><text x="97.7275%" y="159.50"></text></g><g><title>needs_drop_raw (8,035,721 samples, 0.39%)</title><rect x="97.3215%" y="181" width="0.3914%" height="15" fill="rgb(243,32,47)"/><text x="97.5715%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (60,325,261 samples, 2.94%)</title><rect x="94.8907%" y="197" width="2.9380%" height="15" fill="rgb(247,202,23)"/><text x="95.1407%" y="207.50">mi..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,260,670 samples, 0.11%)</title><rect x="97.7185%" y="181" width="0.1101%" height="15" fill="rgb(219,102,11)"/><text x="97.9685%" y="191.50"></text></g><g><title>optimized_mir (107,238,958 samples, 5.22%)</title><rect x="92.6131%" y="213" width="5.2227%" height="15" fill="rgb(243,110,44)"/><text x="92.8631%" y="223.50">optimi..</text></g><g><title>generate_crate_metadata (130,584,971 samples, 6.36%)</title><rect x="91.5325%" y="229" width="6.3597%" height="15" fill="rgb(222,74,54)"/><text x="91.7825%" y="239.50">generate..</text></g><g><title>hir_lowering (35,947,209 samples, 1.75%)</title><rect x="97.8923%" y="229" width="1.7507%" height="15" fill="rgb(216,99,12)"/><text x="98.1423%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (4,061,135 samples, 0.20%)</title><rect x="99.7191%" y="229" width="0.1978%" height="15" fill="rgb(226,22,26)"/><text x="99.9691%" y="239.50"></text></g><g><title>all (2,053,306,002 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (2,053,306,002 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>