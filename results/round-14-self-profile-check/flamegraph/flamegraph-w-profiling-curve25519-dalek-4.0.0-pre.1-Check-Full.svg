<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (962,744 samples, 0.12%)</title><rect x="13.8776%" y="229" width="0.1171%" height="15" fill="rgb(227,0,7)"/><text x="14.1276%" y="239.50"></text></g><g><title>is_copy_raw (906,032 samples, 0.11%)</title><rect x="18.9542%" y="165" width="0.1102%" height="15" fill="rgb(217,0,24)"/><text x="19.2042%" y="175.50"></text></g><g><title>needs_drop_raw (3,462,948 samples, 0.42%)</title><rect x="19.0656%" y="165" width="0.4213%" height="15" fill="rgb(221,193,54)"/><text x="19.3156%" y="175.50"></text></g><g><title>is_copy_raw (2,756,678 samples, 0.34%)</title><rect x="19.1515%" y="149" width="0.3354%" height="15" fill="rgb(248,212,6)"/><text x="19.4015%" y="159.50"></text></g><g><title>evaluate_obligation (2,284,143 samples, 0.28%)</title><rect x="19.2090%" y="133" width="0.2779%" height="15" fill="rgb(208,68,35)"/><text x="19.4590%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (4,441,088 samples, 0.54%)</title><rect x="19.6572%" y="149" width="0.5404%" height="15" fill="rgb(232,128,0)"/><text x="19.9072%" y="159.50"></text></g><g><title>specialization_graph_of (2,552,411 samples, 0.31%)</title><rect x="20.2252%" y="149" width="0.3106%" height="15" fill="rgb(207,160,47)"/><text x="20.4752%" y="159.50"></text></g><g><title>impl_trait_ref (1,070,644 samples, 0.13%)</title><rect x="20.4054%" y="133" width="0.1303%" height="15" fill="rgb(228,23,34)"/><text x="20.6554%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (866,744 samples, 0.11%)</title><rect x="20.4302%" y="117" width="0.1055%" height="15" fill="rgb(218,30,26)"/><text x="20.6802%" y="127.50"></text></g><g><title>resolve_instance (8,829,299 samples, 1.07%)</title><rect x="19.4870%" y="165" width="1.0743%" height="15" fill="rgb(220,122,19)"/><text x="19.7370%" y="175.50"></text></g><g><title>thir_body (9,657,934 samples, 1.18%)</title><rect x="20.5842%" y="165" width="1.1751%" height="15" fill="rgb(250,228,42)"/><text x="20.8342%" y="175.50"></text></g><g><title>mir_const (56,858,019 samples, 6.92%)</title><rect x="14.8766%" y="213" width="6.9180%" height="15" fill="rgb(240,193,28)"/><text x="15.1266%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (50,129,643 samples, 6.10%)</title><rect x="15.6953%" y="197" width="6.0994%" height="15" fill="rgb(216,20,37)"/><text x="15.9453%" y="207.50">unsafety..</text></g><g><title>mir_built (45,784,673 samples, 5.57%)</title><rect x="16.2239%" y="181" width="5.5707%" height="15" fill="rgb(206,188,39)"/><text x="16.4739%" y="191.50">mir_bui..</text></g><g><title>thir_body (1,321,144 samples, 0.16%)</title><rect x="22.4027%" y="149" width="0.1607%" height="15" fill="rgb(217,207,13)"/><text x="22.6527%" y="159.50"></text></g><g><title>mir_const (4,359,079 samples, 0.53%)</title><rect x="22.0368%" y="197" width="0.5304%" height="15" fill="rgb(231,73,38)"/><text x="22.2868%" y="207.50"></text></g><g><title>unsafety_check_result (3,581,715 samples, 0.44%)</title><rect x="22.1313%" y="181" width="0.4358%" height="15" fill="rgb(225,20,46)"/><text x="22.3813%" y="191.50"></text></g><g><title>mir_built (3,294,183 samples, 0.40%)</title><rect x="22.1663%" y="165" width="0.4008%" height="15" fill="rgb(210,31,41)"/><text x="22.4163%" y="175.50"></text></g><g><title>thir_body (5,078,997 samples, 0.62%)</title><rect x="23.2103%" y="133" width="0.6180%" height="15" fill="rgb(221,200,47)"/><text x="23.4603%" y="143.50"></text></g><g><title>mir_const_qualif (10,364,937 samples, 1.26%)</title><rect x="22.5671%" y="197" width="1.2611%" height="15" fill="rgb(226,26,5)"/><text x="22.8171%" y="207.50"></text></g><g><title>mir_const (8,612,526 samples, 1.05%)</title><rect x="22.7804%" y="181" width="1.0479%" height="15" fill="rgb(249,33,26)"/><text x="23.0304%" y="191.50"></text></g><g><title>unsafety_check_result (8,429,594 samples, 1.03%)</title><rect x="22.8026%" y="165" width="1.0256%" height="15" fill="rgb(235,183,28)"/><text x="23.0526%" y="175.50"></text></g><g><title>mir_built (8,239,422 samples, 1.00%)</title><rect x="22.8258%" y="149" width="1.0025%" height="15" fill="rgb(221,5,38)"/><text x="23.0758%" y="159.50"></text></g><g><title>mir_const_qualif (16,767,317 samples, 2.04%)</title><rect x="21.7946%" y="213" width="2.0401%" height="15" fill="rgb(247,18,42)"/><text x="22.0446%" y="223.50">m..</text></g><g><title>mir_promoted (80,548,965 samples, 9.80%)</title><rect x="14.0347%" y="229" width="9.8005%" height="15" fill="rgb(241,131,45)"/><text x="14.2847%" y="239.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,603,400 samples, 0.44%)</title><rect x="23.8382%" y="229" width="0.4384%" height="15" fill="rgb(249,31,29)"/><text x="24.0882%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (6,162,337 samples, 0.75%)</title><rect x="24.2766%" y="229" width="0.7498%" height="15" fill="rgb(225,111,53)"/><text x="24.5266%" y="239.50"></text></g><g><title>normalize_projection_ty (4,068,004 samples, 0.49%)</title><rect x="24.5314%" y="213" width="0.4950%" height="15" fill="rgb(238,160,17)"/><text x="24.7814%" y="223.50"></text></g><g><title>type_op_normalize_predicate (1,917,098 samples, 0.23%)</title><rect x="25.0264%" y="229" width="0.2333%" height="15" fill="rgb(214,148,48)"/><text x="25.2764%" y="239.50"></text></g><g><title>normalize_projection_ty (1,114,219 samples, 0.14%)</title><rect x="25.1241%" y="213" width="0.1356%" height="15" fill="rgb(232,36,49)"/><text x="25.3741%" y="223.50"></text></g><g><title>type_op_prove_predicate (13,765,106 samples, 1.67%)</title><rect x="25.3084%" y="229" width="1.6748%" height="15" fill="rgb(209,103,24)"/><text x="25.5584%" y="239.50"></text></g><g><title>evaluate_obligation (950,837 samples, 0.12%)</title><rect x="26.8676%" y="213" width="0.1157%" height="15" fill="rgb(229,88,8)"/><text x="27.1176%" y="223.50"></text></g><g><title>MIR_borrow_checking (217,595,400 samples, 26.48%)</title><rect x="0.5091%" y="261" width="26.4752%" height="15" fill="rgb(213,181,19)"/><text x="0.7591%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (216,433,611 samples, 26.33%)</title><rect x="0.6504%" y="245" width="26.3339%" height="15" fill="rgb(254,191,54)"/><text x="0.9004%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (4,232,917 samples, 0.52%)</title><rect x="26.9843%" y="261" width="0.5150%" height="15" fill="rgb(241,83,37)"/><text x="27.2343%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,730,199 samples, 0.45%)</title><rect x="27.0455%" y="245" width="0.4539%" height="15" fill="rgb(233,36,39)"/><text x="27.2955%" y="255.50"></text></g><g><title>hir_module_items (1,463,978 samples, 0.18%)</title><rect x="27.4993%" y="261" width="0.1781%" height="15" fill="rgb(226,3,54)"/><text x="27.7493%" y="271.50"></text></g><g><title>codegen_fn_attrs (1,508,115 samples, 0.18%)</title><rect x="27.9241%" y="229" width="0.1835%" height="15" fill="rgb(245,192,40)"/><text x="28.1741%" y="239.50"></text></g><g><title>check_mod_attrs (3,465,690 samples, 0.42%)</title><rect x="27.6859%" y="245" width="0.4217%" height="15" fill="rgb(238,167,29)"/><text x="27.9359%" y="255.50"></text></g><g><title>check_mod_const_bodies (830,379 samples, 0.10%)</title><rect x="28.1076%" y="245" width="0.1010%" height="15" fill="rgb(232,182,51)"/><text x="28.3576%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (1,677,648 samples, 0.20%)</title><rect x="28.2855%" y="245" width="0.2041%" height="15" fill="rgb(231,60,39)"/><text x="28.5355%" y="255.50"></text></g><g><title>misc_checking_1 (6,941,617 samples, 0.84%)</title><rect x="27.6775%" y="261" width="0.8446%" height="15" fill="rgb(208,69,12)"/><text x="27.9275%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (3,912,994 samples, 0.48%)</title><rect x="28.5224%" y="245" width="0.4761%" height="15" fill="rgb(235,93,37)"/><text x="28.7724%" y="255.50"></text></g><g><title>check_mod_liveness (3,150,855 samples, 0.38%)</title><rect x="28.6152%" y="229" width="0.3834%" height="15" fill="rgb(213,116,39)"/><text x="28.8652%" y="239.50"></text></g><g><title>misc_checking_2 (7,874,718 samples, 0.96%)</title><rect x="28.5221%" y="261" width="0.9581%" height="15" fill="rgb(222,207,29)"/><text x="28.7721%" y="271.50"></text></g><g><title>match_checking (3,959,164 samples, 0.48%)</title><rect x="28.9985%" y="245" width="0.4817%" height="15" fill="rgb(206,96,30)"/><text x="29.2485%" y="255.50"></text></g><g><title>check_match (3,659,830 samples, 0.45%)</title><rect x="29.0350%" y="229" width="0.4453%" height="15" fill="rgb(218,138,4)"/><text x="29.2850%" y="239.50"></text></g><g><title>check_private_in_public (1,562,178 samples, 0.19%)</title><rect x="29.4820%" y="245" width="0.1901%" height="15" fill="rgb(250,191,14)"/><text x="29.7320%" y="255.50"></text></g><g><title>death_checking (2,962,963 samples, 0.36%)</title><rect x="29.6721%" y="245" width="0.3605%" height="15" fill="rgb(239,60,40)"/><text x="29.9221%" y="255.50"></text></g><g><title>eval_to_const_value_raw (4,842,845 samples, 0.59%)</title><rect x="31.0710%" y="85" width="0.5892%" height="15" fill="rgb(206,27,48)"/><text x="31.3210%" y="95.50"></text></g><g><title>eval_to_const_value_raw (4,842,095 samples, 0.59%)</title><rect x="31.0711%" y="69" width="0.5891%" height="15" fill="rgb(225,35,8)"/><text x="31.3211%" y="79.50"></text></g><g><title>eval_to_allocation_raw (4,840,425 samples, 0.59%)</title><rect x="31.0713%" y="53" width="0.5889%" height="15" fill="rgb(250,213,24)"/><text x="31.3213%" y="63.50"></text></g><g><title>mir_for_ctfe (1,142,223 samples, 0.14%)</title><rect x="31.5213%" y="37" width="0.1390%" height="15" fill="rgb(247,123,22)"/><text x="31.7713%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,877,956 samples, 0.72%)</title><rect x="30.9451%" y="149" width="0.7152%" height="15" fill="rgb(231,138,38)"/><text x="31.1951%" y="159.50"></text></g><g><title>eval_to_const_value_raw (5,874,726 samples, 0.71%)</title><rect x="30.9455%" y="133" width="0.7148%" height="15" fill="rgb(231,145,46)"/><text x="31.1955%" y="143.50"></text></g><g><title>eval_to_allocation_raw (5,870,536 samples, 0.71%)</title><rect x="30.9460%" y="117" width="0.7143%" height="15" fill="rgb(251,118,11)"/><text x="31.1960%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,854,085 samples, 0.59%)</title><rect x="31.0697%" y="101" width="0.5906%" height="15" fill="rgb(217,147,25)"/><text x="31.3197%" y="111.50"></text></g><g><title>eval_to_const_value_raw (9,032,061 samples, 1.10%)</title><rect x="30.5619%" y="213" width="1.0989%" height="15" fill="rgb(247,81,37)"/><text x="30.8119%" y="223.50"></text></g><g><title>eval_to_const_value_raw (9,013,101 samples, 1.10%)</title><rect x="30.5642%" y="197" width="1.0966%" height="15" fill="rgb(209,12,38)"/><text x="30.8142%" y="207.50"></text></g><g><title>eval_to_allocation_raw (8,983,640 samples, 1.09%)</title><rect x="30.5677%" y="181" width="1.0931%" height="15" fill="rgb(227,1,9)"/><text x="30.8177%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (5,911,327 samples, 0.72%)</title><rect x="30.9416%" y="165" width="0.7192%" height="15" fill="rgb(248,47,43)"/><text x="31.1916%" y="175.50"></text></g><g><title>param_env (1,726,288 samples, 0.21%)</title><rect x="31.6608%" y="213" width="0.2100%" height="15" fill="rgb(221,10,30)"/><text x="31.9108%" y="223.50"></text></g><g><title>crate_lints (16,550,215 samples, 2.01%)</title><rect x="30.0330%" y="229" width="2.0137%" height="15" fill="rgb(210,229,1)"/><text x="30.2830%" y="239.50">c..</text></g><g><title>type_of (1,281,355 samples, 0.16%)</title><rect x="31.8908%" y="213" width="0.1559%" height="15" fill="rgb(222,148,37)"/><text x="32.1408%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (1,044,530 samples, 0.13%)</title><rect x="31.9196%" y="197" width="0.1271%" height="15" fill="rgb(234,67,33)"/><text x="32.1696%" y="207.50"></text></g><g><title>lint_checking (21,919,464 samples, 2.67%)</title><rect x="30.0326%" y="245" width="2.6670%" height="15" fill="rgb(247,98,35)"/><text x="30.2826%" y="255.50">li..</text></g><g><title>module_lints (5,365,879 samples, 0.65%)</title><rect x="32.0467%" y="229" width="0.6529%" height="15" fill="rgb(247,138,52)"/><text x="32.2967%" y="239.50"></text></g><g><title>lint_mod (5,346,438 samples, 0.65%)</title><rect x="32.0491%" y="213" width="0.6505%" height="15" fill="rgb(213,79,30)"/><text x="32.2991%" y="223.50"></text></g><g><title>privacy_access_levels (3,579,929 samples, 0.44%)</title><rect x="32.6996%" y="245" width="0.4356%" height="15" fill="rgb(246,177,23)"/><text x="32.9496%" y="255.50"></text></g><g><title>privacy_checking_modules (7,399,573 samples, 0.90%)</title><rect x="33.1352%" y="245" width="0.9003%" height="15" fill="rgb(230,62,27)"/><text x="33.3852%" y="255.50"></text></g><g><title>check_mod_privacy (7,383,772 samples, 0.90%)</title><rect x="33.1371%" y="229" width="0.8984%" height="15" fill="rgb(216,154,8)"/><text x="33.3871%" y="239.50"></text></g><g><title>misc_checking_3 (37,506,388 samples, 4.56%)</title><rect x="29.4803%" y="261" width="4.5635%" height="15" fill="rgb(244,35,45)"/><text x="29.7303%" y="271.50">misc_..</text></g><g><title>impl_parent (3,447,795 samples, 0.42%)</title><rect x="35.8007%" y="197" width="0.4195%" height="15" fill="rgb(251,115,12)"/><text x="36.0507%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,969,349 samples, 0.24%)</title><rect x="35.9806%" y="181" width="0.2396%" height="15" fill="rgb(240,54,50)"/><text x="36.2306%" y="191.50"></text></g><g><title>impl_trait_ref (7,727,924 samples, 0.94%)</title><rect x="36.2202%" y="197" width="0.9403%" height="15" fill="rgb(233,84,52)"/><text x="36.4702%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,055,919 samples, 0.74%)</title><rect x="36.4237%" y="181" width="0.7368%" height="15" fill="rgb(207,117,47)"/><text x="36.6737%" y="191.50"></text></g><g><title>item_attrs (823,009 samples, 0.10%)</title><rect x="37.1605%" y="197" width="0.1001%" height="15" fill="rgb(249,43,39)"/><text x="37.4105%" y="207.50"></text></g><g><title>trait_impls_of (1,336,313 samples, 0.16%)</title><rect x="37.3303%" y="197" width="0.1626%" height="15" fill="rgb(209,38,44)"/><text x="37.5803%" y="207.50"></text></g><g><title>coherent_trait (27,884,230 samples, 3.39%)</title><rect x="34.1141%" y="229" width="3.3927%" height="15" fill="rgb(236,212,23)"/><text x="34.3641%" y="239.50">coh..</text></g><g><title>specialization_graph_of (27,073,472 samples, 3.29%)</title><rect x="34.2128%" y="213" width="3.2941%" height="15" fill="rgb(242,79,21)"/><text x="34.4628%" y="223.50">spe..</text></g><g><title>coherence_checking (28,283,206 samples, 3.44%)</title><rect x="34.1099%" y="245" width="3.4413%" height="15" fill="rgb(211,96,35)"/><text x="34.3599%" y="255.50">coh..</text></g><g><title>associated_item (859,929 samples, 0.10%)</title><rect x="61.3337%" y="181" width="0.1046%" height="15" fill="rgb(253,215,40)"/><text x="61.5837%" y="191.50"></text></g><g><title>associated_items (1,228,853 samples, 0.15%)</title><rect x="61.2959%" y="197" width="0.1495%" height="15" fill="rgb(211,81,21)"/><text x="61.5459%" y="207.50"></text></g><g><title>dropck_outlives (1,104,813 samples, 0.13%)</title><rect x="61.4619%" y="197" width="0.1344%" height="15" fill="rgb(208,190,38)"/><text x="61.7119%" y="207.50"></text></g><g><title>generics_of (1,863,768 samples, 0.23%)</title><rect x="63.8322%" y="181" width="0.2268%" height="15" fill="rgb(235,213,38)"/><text x="64.0822%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (1,388,460 samples, 0.17%)</title><rect x="63.8901%" y="165" width="0.1689%" height="15" fill="rgb(237,122,38)"/><text x="64.1401%" y="175.50"></text></g><g><title>impl_trait_ref (1,712,489 samples, 0.21%)</title><rect x="64.1207%" y="181" width="0.2084%" height="15" fill="rgb(244,218,35)"/><text x="64.3707%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,370,627 samples, 0.17%)</title><rect x="64.1623%" y="165" width="0.1668%" height="15" fill="rgb(240,68,47)"/><text x="64.4123%" y="175.50"></text></g><g><title>predicates_of (1,921,385 samples, 0.23%)</title><rect x="64.3428%" y="181" width="0.2338%" height="15" fill="rgb(210,16,53)"/><text x="64.5928%" y="191.50"></text></g><g><title>predicates_defined_on (1,082,353 samples, 0.13%)</title><rect x="64.4449%" y="165" width="0.1317%" height="15" fill="rgb(235,124,12)"/><text x="64.6949%" y="175.50"></text></g><g><title>specializes (4,910,445 samples, 0.60%)</title><rect x="64.5766%" y="181" width="0.5975%" height="15" fill="rgb(224,169,11)"/><text x="64.8266%" y="191.50"></text></g><g><title>param_env (2,721,793 samples, 0.33%)</title><rect x="64.8429%" y="165" width="0.3312%" height="15" fill="rgb(250,166,2)"/><text x="65.0929%" y="175.50"></text></g><g><title>def_span (1,045,739 samples, 0.13%)</title><rect x="65.0468%" y="149" width="0.1272%" height="15" fill="rgb(242,216,29)"/><text x="65.2968%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (917,479 samples, 0.11%)</title><rect x="65.0624%" y="133" width="0.1116%" height="15" fill="rgb(230,116,27)"/><text x="65.3124%" y="143.50"></text></g><g><title>trait_impls_of (861,951 samples, 0.10%)</title><rect x="65.1774%" y="181" width="0.1049%" height="15" fill="rgb(228,99,48)"/><text x="65.4274%" y="191.50"></text></g><g><title>evaluate_obligation (30,365,315 samples, 3.69%)</title><rect x="61.5963%" y="197" width="3.6946%" height="15" fill="rgb(253,11,6)"/><text x="61.8463%" y="207.50">eval..</text></g><g><title>method_autoderef_steps (1,094,055 samples, 0.13%)</title><rect x="65.5432%" y="197" width="0.1331%" height="15" fill="rgb(247,143,39)"/><text x="65.7932%" y="207.50"></text></g><g><title>param_env (1,391,865 samples, 0.17%)</title><rect x="65.7168%" y="197" width="0.1694%" height="15" fill="rgb(236,97,10)"/><text x="65.9668%" y="207.50"></text></g><g><title>evaluate_obligation (8,602,588 samples, 1.05%)</title><rect x="71.4824%" y="181" width="1.0467%" height="15" fill="rgb(233,208,19)"/><text x="71.7324%" y="191.50"></text></g><g><title>method_autoderef_steps (1,457,299 samples, 0.18%)</title><rect x="72.6748%" y="181" width="0.1773%" height="15" fill="rgb(216,164,2)"/><text x="72.9248%" y="191.50"></text></g><g><title>typeck (55,970,887 samples, 6.81%)</title><rect x="66.0957%" y="197" width="6.8101%" height="15" fill="rgb(220,129,5)"/><text x="66.3457%" y="207.50">typeck</text></g><g><title>item_bodies_checking (290,490,794 samples, 35.34%)</title><rect x="37.5860%" y="245" width="35.3446%" height="15" fill="rgb(242,17,10)"/><text x="37.8360%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (290,487,064 samples, 35.34%)</title><rect x="37.5864%" y="229" width="35.3441%" height="15" fill="rgb(242,107,0)"/><text x="37.8364%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (289,712,312 samples, 35.25%)</title><rect x="37.6807%" y="213" width="35.2498%" height="15" fill="rgb(251,28,31)"/><text x="37.9307%" y="223.50">typeck</text></g><g><title>item_types_checking (27,686,749 samples, 3.37%)</title><rect x="72.9305%" y="245" width="3.3687%" height="15" fill="rgb(233,223,10)"/><text x="73.1805%" y="255.50">ite..</text></g><g><title>check_mod_item_types (27,664,129 samples, 3.37%)</title><rect x="72.9333%" y="229" width="3.3659%" height="15" fill="rgb(215,21,27)"/><text x="73.1833%" y="239.50">che..</text></g><g><title>typeck (15,102,559 samples, 1.84%)</title><rect x="74.4617%" y="213" width="1.8376%" height="15" fill="rgb(232,23,21)"/><text x="74.7117%" y="223.50">t..</text></g><g><title>fn_sig (1,371,052 samples, 0.17%)</title><rect x="76.5289%" y="213" width="0.1668%" height="15" fill="rgb(244,5,23)"/><text x="76.7789%" y="223.50"></text></g><g><title>is_late_bound_map (2,583,920 samples, 0.31%)</title><rect x="76.7924%" y="197" width="0.3144%" height="15" fill="rgb(226,81,46)"/><text x="77.0424%" y="207.50"></text></g><g><title>resolve_lifetimes (2,461,608 samples, 0.30%)</title><rect x="76.8073%" y="181" width="0.2995%" height="15" fill="rgb(247,70,30)"/><text x="77.0573%" y="191.50"></text></g><g><title>lint_levels (1,389,605 samples, 0.17%)</title><rect x="76.9377%" y="165" width="0.1691%" height="15" fill="rgb(212,68,19)"/><text x="77.1877%" y="175.50"></text></g><g><title>named_region_map (1,218,580 samples, 0.15%)</title><rect x="77.1068%" y="197" width="0.1483%" height="15" fill="rgb(240,187,13)"/><text x="77.3568%" y="207.50"></text></g><g><title>resolve_lifetimes (1,103,877 samples, 0.13%)</title><rect x="77.1208%" y="181" width="0.1343%" height="15" fill="rgb(223,113,26)"/><text x="77.3708%" y="191.50"></text></g><g><title>generics_of (4,689,490 samples, 0.57%)</title><rect x="76.6957%" y="213" width="0.5706%" height="15" fill="rgb(206,192,2)"/><text x="76.9457%" y="223.50"></text></g><g><title>explicit_predicates_of (2,183,483 samples, 0.27%)</title><rect x="77.4414%" y="181" width="0.2657%" height="15" fill="rgb(241,108,4)"/><text x="77.6914%" y="191.50"></text></g><g><title>predicates_of (3,604,576 samples, 0.44%)</title><rect x="77.3261%" y="213" width="0.4386%" height="15" fill="rgb(247,173,49)"/><text x="77.5761%" y="223.50"></text></g><g><title>predicates_defined_on (3,246,195 samples, 0.39%)</title><rect x="77.3697%" y="197" width="0.3950%" height="15" fill="rgb(224,114,35)"/><text x="77.6197%" y="207.50"></text></g><g><title>type_collecting (12,592,921 samples, 1.53%)</title><rect x="76.3015%" y="245" width="1.5322%" height="15" fill="rgb(245,159,27)"/><text x="76.5515%" y="255.50"></text></g><g><title>collect_mod_item_types (12,562,041 samples, 1.53%)</title><rect x="76.3053%" y="229" width="1.5284%" height="15" fill="rgb(245,172,44)"/><text x="76.5553%" y="239.50"></text></g><g><title>evaluate_obligation (1,398,178 samples, 0.17%)</title><rect x="79.2144%" y="213" width="0.1701%" height="15" fill="rgb(236,23,11)"/><text x="79.4644%" y="223.50"></text></g><g><title>param_env (2,342,948 samples, 0.29%)</title><rect x="79.4623%" y="213" width="0.2851%" height="15" fill="rgb(205,117,38)"/><text x="79.7123%" y="223.50"></text></g><g><title>region_scope_tree (3,114,266 samples, 0.38%)</title><rect x="79.7560%" y="213" width="0.3789%" height="15" fill="rgb(237,72,25)"/><text x="80.0060%" y="223.50"></text></g><g><title>check_impl_item_well_formed (17,529,189 samples, 2.13%)</title><rect x="78.0201%" y="229" width="2.1328%" height="15" fill="rgb(244,70,9)"/><text x="78.2701%" y="239.50">c..</text></g><g><title>evaluate_obligation (1,606,480 samples, 0.20%)</title><rect x="81.6893%" y="213" width="0.1955%" height="15" fill="rgb(217,125,39)"/><text x="81.9393%" y="223.50"></text></g><g><title>param_env (1,523,189 samples, 0.19%)</title><rect x="81.9378%" y="213" width="0.1853%" height="15" fill="rgb(235,36,10)"/><text x="82.1878%" y="223.50"></text></g><g><title>region_scope_tree (860,800 samples, 0.10%)</title><rect x="82.1410%" y="213" width="0.1047%" height="15" fill="rgb(251,123,47)"/><text x="82.3910%" y="223.50"></text></g><g><title>check_item_well_formed (17,558,954 samples, 2.14%)</title><rect x="80.1530%" y="229" width="2.1364%" height="15" fill="rgb(221,13,13)"/><text x="80.4030%" y="239.50">c..</text></g><g><title>analysis (675,655,734 samples, 82.21%)</title><rect x="0.2447%" y="277" width="82.2083%" height="15" fill="rgb(238,131,9)"/><text x="0.4947%" y="287.50">analysis</text></g><g><title>type_check_crate (397,867,324 samples, 48.41%)</title><rect x="34.0437%" y="261" width="48.4093%" height="15" fill="rgb(211,50,8)"/><text x="34.2937%" y="271.50">type_check_crate</text></g><g><title>wf_checking (37,910,023 samples, 4.61%)</title><rect x="77.8404%" y="245" width="4.6126%" height="15" fill="rgb(245,182,24)"/><text x="78.0904%" y="255.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,344,626 samples, 0.16%)</title><rect x="82.2894%" y="229" width="0.1636%" height="15" fill="rgb(242,14,37)"/><text x="82.5394%" y="239.50"></text></g><g><title>AST_validation (1,022,431 samples, 0.12%)</title><rect x="82.5286%" y="261" width="0.1244%" height="15" fill="rgb(246,228,12)"/><text x="82.7786%" y="271.50"></text></g><g><title>metadata_register_crate (1,289,025 samples, 0.16%)</title><rect x="90.9554%" y="229" width="0.1568%" height="15" fill="rgb(213,55,15)"/><text x="91.2054%" y="239.50"></text></g><g><title>macro_expand_crate (70,974,163 samples, 8.64%)</title><rect x="82.7250%" y="261" width="8.6356%" height="15" fill="rgb(209,9,3)"/><text x="82.9750%" y="271.50">macro_expand..</text></g><g><title>expand_crate (70,961,223 samples, 8.63%)</title><rect x="82.7265%" y="245" width="8.6340%" height="15" fill="rgb(230,59,30)"/><text x="82.9765%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,040,953 samples, 0.25%)</title><rect x="91.1122%" y="229" width="0.2483%" height="15" fill="rgb(209,121,21)"/><text x="91.3622%" y="239.50"></text></g><g><title>late_resolve_crate (9,143,193 samples, 1.11%)</title><rect x="91.4650%" y="245" width="1.1125%" height="15" fill="rgb(220,109,13)"/><text x="91.7150%" y="255.50"></text></g><g><title>resolve_check_unused (925,580 samples, 0.11%)</title><rect x="92.5845%" y="245" width="0.1126%" height="15" fill="rgb(232,18,1)"/><text x="92.8345%" y="255.50"></text></g><g><title>configure_and_expand (84,196,450 samples, 10.24%)</title><rect x="82.5120%" y="277" width="10.2443%" height="15" fill="rgb(215,41,42)"/><text x="82.7620%" y="287.50">configure_and_e..</text></g><g><title>resolve_crate (11,413,228 samples, 1.39%)</title><rect x="91.3677%" y="261" width="1.3887%" height="15" fill="rgb(224,123,36)"/><text x="91.6177%" y="271.50"></text></g><g><title>drop_ast (2,287,445 samples, 0.28%)</title><rect x="92.7564%" y="277" width="0.2783%" height="15" fill="rgb(240,125,3)"/><text x="93.0064%" y="287.50"></text></g><g><title>early_lint_checks (4,150,836 samples, 0.51%)</title><rect x="93.0372%" y="277" width="0.5050%" height="15" fill="rgb(205,98,50)"/><text x="93.2872%" y="287.50"></text></g><g><title>free_global_ctxt (9,506,657 samples, 1.16%)</title><rect x="93.5423%" y="277" width="1.1567%" height="15" fill="rgb(205,185,37)"/><text x="93.7923%" y="287.50"></text></g><g><title>generate_crate_metadata (14,678,563 samples, 1.79%)</title><rect x="94.6990%" y="277" width="1.7860%" height="15" fill="rgb(238,207,15)"/><text x="94.9490%" y="287.50">g..</text></g><g><title>hir_lowering (24,177,900 samples, 2.94%)</title><rect x="96.4849%" y="277" width="2.9418%" height="15" fill="rgb(213,199,42)"/><text x="96.7349%" y="287.50">hi..</text></g><g><title>self_profile_alloc_query_strings (2,621,589 samples, 0.32%)</title><rect x="99.5230%" y="277" width="0.3190%" height="15" fill="rgb(235,201,11)"/><text x="99.7730%" y="287.50"></text></g><g><title>all (821,882,738 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (821,882,738 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (1,170,023 samples, 0.14%)</title><rect x="99.8576%" y="277" width="0.1424%" height="15" fill="rgb(243,32,47)"/><text x="100.1076%" y="287.50"></text></g></svg></svg>