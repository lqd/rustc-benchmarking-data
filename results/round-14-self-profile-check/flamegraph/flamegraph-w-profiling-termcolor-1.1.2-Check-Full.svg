<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (299,294 samples, 0.14%)</title><rect x="14.1607%" y="165" width="0.1356%" height="15" fill="rgb(227,0,7)"/><text x="14.4107%" y="175.50"></text></g><g><title>item_attrs (328,594 samples, 0.15%)</title><rect x="14.8228%" y="133" width="0.1489%" height="15" fill="rgb(217,0,24)"/><text x="15.0728%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (318,014 samples, 0.14%)</title><rect x="14.8276%" y="117" width="0.1441%" height="15" fill="rgb(221,193,54)"/><text x="15.0776%" y="127.50"></text></g><g><title>codegen_fn_attrs (475,476 samples, 0.22%)</title><rect x="14.7679%" y="149" width="0.2154%" height="15" fill="rgb(248,212,6)"/><text x="15.0179%" y="159.50"></text></g><g><title>adt_drop_tys (559,816 samples, 0.25%)</title><rect x="18.2351%" y="117" width="0.2536%" height="15" fill="rgb(208,68,35)"/><text x="18.4851%" y="127.50"></text></g><g><title>is_copy_raw (738,278 samples, 0.33%)</title><rect x="18.4906%" y="117" width="0.3344%" height="15" fill="rgb(232,128,0)"/><text x="18.7406%" y="127.50"></text></g><g><title>evaluate_obligation (605,288 samples, 0.27%)</title><rect x="18.5508%" y="101" width="0.2742%" height="15" fill="rgb(207,160,47)"/><text x="18.8008%" y="111.50"></text></g><g><title>needs_drop_raw (1,455,126 samples, 0.66%)</title><rect x="18.1747%" y="133" width="0.6592%" height="15" fill="rgb(228,23,34)"/><text x="18.4247%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (378,773 samples, 0.17%)</title><rect x="18.9684%" y="117" width="0.1716%" height="15" fill="rgb(218,30,26)"/><text x="19.2184%" y="127.50"></text></g><g><title>specialization_graph_of (1,120,712 samples, 0.51%)</title><rect x="19.1750%" y="117" width="0.5077%" height="15" fill="rgb(220,122,19)"/><text x="19.4250%" y="127.50"></text></g><g><title>impl_trait_ref (609,814 samples, 0.28%)</title><rect x="19.4065%" y="101" width="0.2763%" height="15" fill="rgb(250,228,42)"/><text x="19.6565%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (543,304 samples, 0.25%)</title><rect x="19.4366%" y="85" width="0.2461%" height="15" fill="rgb(240,193,28)"/><text x="19.6866%" y="95.50"></text></g><g><title>resolve_instance (1,954,269 samples, 0.89%)</title><rect x="18.8339%" y="133" width="0.8853%" height="15" fill="rgb(216,20,37)"/><text x="19.0839%" y="143.50"></text></g><g><title>thir_body (2,711,534 samples, 1.23%)</title><rect x="19.7486%" y="133" width="1.2284%" height="15" fill="rgb(206,188,39)"/><text x="19.9986%" y="143.50"></text></g><g><title>mir_const (17,010,348 samples, 7.71%)</title><rect x="13.2886%" y="181" width="7.7059%" height="15" fill="rgb(217,207,13)"/><text x="13.5386%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (14,786,050 samples, 6.70%)</title><rect x="14.2962%" y="165" width="6.6983%" height="15" fill="rgb(231,73,38)"/><text x="14.5462%" y="175.50">unsafety_..</text></g><g><title>mir_built (13,269,453 samples, 6.01%)</title><rect x="14.9833%" y="149" width="6.0112%" height="15" fill="rgb(225,20,46)"/><text x="15.2333%" y="159.50">mir_built</text></g><g><title>mir_promoted (19,127,539 samples, 8.67%)</title><rect x="12.4394%" y="197" width="8.6650%" height="15" fill="rgb(210,31,41)"/><text x="12.6894%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (242,582 samples, 0.11%)</title><rect x="20.9945%" y="181" width="0.1099%" height="15" fill="rgb(221,200,47)"/><text x="21.2445%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (326,954 samples, 0.15%)</title><rect x="21.1051%" y="197" width="0.1481%" height="15" fill="rgb(226,26,5)"/><text x="21.3551%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (442,906 samples, 0.20%)</title><rect x="21.2532%" y="197" width="0.2006%" height="15" fill="rgb(249,33,26)"/><text x="21.5032%" y="207.50"></text></g><g><title>normalize_projection_ty (302,834 samples, 0.14%)</title><rect x="21.3166%" y="181" width="0.1372%" height="15" fill="rgb(235,183,28)"/><text x="21.5666%" y="191.50"></text></g><g><title>type_op_prove_predicate (2,145,193 samples, 0.97%)</title><rect x="21.5215%" y="197" width="0.9718%" height="15" fill="rgb(221,5,38)"/><text x="21.7715%" y="207.50"></text></g><g><title>MIR_borrow_checking (48,283,187 samples, 21.87%)</title><rect x="0.6253%" y="229" width="21.8729%" height="15" fill="rgb(247,18,42)"/><text x="0.8753%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (48,007,925 samples, 21.75%)</title><rect x="0.7500%" y="213" width="21.7482%" height="15" fill="rgb(241,131,45)"/><text x="1.0000%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (273,793 samples, 0.12%)</title><rect x="22.4982%" y="229" width="0.1240%" height="15" fill="rgb(249,31,29)"/><text x="22.7482%" y="239.50"></text></g><g><title>hir_module_items (314,624 samples, 0.14%)</title><rect x="22.6222%" y="229" width="0.1425%" height="15" fill="rgb(225,111,53)"/><text x="22.8722%" y="239.50"></text></g><g><title>should_inherit_track_caller (350,435 samples, 0.16%)</title><rect x="23.1088%" y="181" width="0.1588%" height="15" fill="rgb(238,160,17)"/><text x="23.3588%" y="191.50"></text></g><g><title>codegen_fn_attrs (631,288 samples, 0.29%)</title><rect x="22.9876%" y="197" width="0.2860%" height="15" fill="rgb(214,148,48)"/><text x="23.2376%" y="207.50"></text></g><g><title>check_mod_attrs (1,104,652 samples, 0.50%)</title><rect x="22.7732%" y="213" width="0.5004%" height="15" fill="rgb(232,36,49)"/><text x="23.0232%" y="223.50"></text></g><g><title>check_mod_const_bodies (233,943 samples, 0.11%)</title><rect x="23.2737%" y="213" width="0.1060%" height="15" fill="rgb(209,103,24)"/><text x="23.5237%" y="223.50"></text></g><g><title>lint_levels (293,733 samples, 0.13%)</title><rect x="23.5496%" y="197" width="0.1331%" height="15" fill="rgb(229,88,8)"/><text x="23.7996%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (852,679 samples, 0.39%)</title><rect x="23.4383%" y="213" width="0.3863%" height="15" fill="rgb(213,181,19)"/><text x="23.6883%" y="223.50"></text></g><g><title>misc_checking_1 (2,401,136 samples, 1.09%)</title><rect x="22.7650%" y="229" width="1.0877%" height="15" fill="rgb(254,191,54)"/><text x="23.0150%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (852,830 samples, 0.39%)</title><rect x="23.8536%" y="213" width="0.3863%" height="15" fill="rgb(241,83,37)"/><text x="24.1036%" y="223.50"></text></g><g><title>check_mod_liveness (676,618 samples, 0.31%)</title><rect x="23.9334%" y="197" width="0.3065%" height="15" fill="rgb(233,36,39)"/><text x="24.1834%" y="207.50"></text></g><g><title>misc_checking_2 (2,194,765 samples, 0.99%)</title><rect x="23.8528%" y="229" width="0.9943%" height="15" fill="rgb(226,3,54)"/><text x="24.1028%" y="239.50"></text></g><g><title>match_checking (1,340,195 samples, 0.61%)</title><rect x="24.2399%" y="213" width="0.6071%" height="15" fill="rgb(245,192,40)"/><text x="24.4899%" y="223.50"></text></g><g><title>check_match (1,275,594 samples, 0.58%)</title><rect x="24.2692%" y="197" width="0.5779%" height="15" fill="rgb(238,167,29)"/><text x="24.5192%" y="207.50"></text></g><g><title>check_private_in_public (376,224 samples, 0.17%)</title><rect x="24.8516%" y="213" width="0.1704%" height="15" fill="rgb(232,182,51)"/><text x="25.1016%" y="223.50"></text></g><g><title>death_checking (710,498 samples, 0.32%)</title><rect x="25.0221%" y="213" width="0.3219%" height="15" fill="rgb(231,60,39)"/><text x="25.2721%" y="223.50"></text></g><g><title>crate_lints (2,269,935 samples, 1.03%)</title><rect x="25.3446%" y="197" width="1.0283%" height="15" fill="rgb(208,69,12)"/><text x="25.5946%" y="207.50"></text></g><g><title>type_of (1,113,311 samples, 0.50%)</title><rect x="25.8685%" y="181" width="0.5043%" height="15" fill="rgb(235,93,37)"/><text x="26.1185%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (879,121 samples, 0.40%)</title><rect x="25.9746%" y="165" width="0.3983%" height="15" fill="rgb(213,116,39)"/><text x="26.2246%" y="175.50"></text></g><g><title>lint_checking (3,468,568 samples, 1.57%)</title><rect x="25.3439%" y="213" width="1.5713%" height="15" fill="rgb(222,207,29)"/><text x="25.5939%" y="223.50"></text></g><g><title>module_lints (1,197,243 samples, 0.54%)</title><rect x="26.3729%" y="197" width="0.5424%" height="15" fill="rgb(206,96,30)"/><text x="26.6229%" y="207.50"></text></g><g><title>lint_mod (1,194,503 samples, 0.54%)</title><rect x="26.3741%" y="181" width="0.5411%" height="15" fill="rgb(218,138,4)"/><text x="26.6241%" y="191.50"></text></g><g><title>layout_of (233,851 samples, 0.11%)</title><rect x="26.8093%" y="165" width="0.1059%" height="15" fill="rgb(250,191,14)"/><text x="27.0593%" y="175.50"></text></g><g><title>privacy_access_levels (526,386 samples, 0.24%)</title><rect x="26.9153%" y="213" width="0.2385%" height="15" fill="rgb(239,60,40)"/><text x="27.1653%" y="223.50"></text></g><g><title>privacy_checking_modules (1,505,756 samples, 0.68%)</title><rect x="27.1537%" y="213" width="0.6821%" height="15" fill="rgb(206,27,48)"/><text x="27.4037%" y="223.50"></text></g><g><title>check_mod_privacy (1,504,146 samples, 0.68%)</title><rect x="27.1544%" y="197" width="0.6814%" height="15" fill="rgb(225,35,8)"/><text x="27.4044%" y="207.50"></text></g><g><title>misc_checking_3 (6,624,323 samples, 3.00%)</title><rect x="24.8470%" y="229" width="3.0009%" height="15" fill="rgb(250,213,24)"/><text x="25.0970%" y="239.50">mis..</text></g><g><title>adt_destructor (498,285 samples, 0.23%)</title><rect x="27.9368%" y="181" width="0.2257%" height="15" fill="rgb(247,123,22)"/><text x="28.1868%" y="191.50"></text></g><g><title>coherent_trait (489,545 samples, 0.22%)</title><rect x="27.9408%" y="165" width="0.2218%" height="15" fill="rgb(231,138,38)"/><text x="28.1908%" y="175.50"></text></g><g><title>specialization_graph_of (488,215 samples, 0.22%)</title><rect x="27.9414%" y="149" width="0.2212%" height="15" fill="rgb(231,145,46)"/><text x="28.1914%" y="159.50"></text></g><g><title>impl_parent (2,680,908 samples, 1.21%)</title><rect x="29.9415%" y="165" width="1.2145%" height="15" fill="rgb(251,118,11)"/><text x="30.1915%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,422,673 samples, 0.64%)</title><rect x="30.5115%" y="149" width="0.6445%" height="15" fill="rgb(217,147,25)"/><text x="30.7615%" y="159.50"></text></g><g><title>impl_trait_ref (5,064,987 samples, 2.29%)</title><rect x="31.1560%" y="165" width="2.2945%" height="15" fill="rgb(247,81,37)"/><text x="31.4060%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,083,394 samples, 1.85%)</title><rect x="31.6007%" y="149" width="1.8498%" height="15" fill="rgb(209,12,38)"/><text x="31.8507%" y="159.50">m..</text></g><g><title>coherent_trait (13,051,205 samples, 5.91%)</title><rect x="27.9094%" y="197" width="5.9124%" height="15" fill="rgb(227,1,9)"/><text x="28.1594%" y="207.50">coherent..</text></g><g><title>specialization_graph_of (12,247,576 samples, 5.55%)</title><rect x="28.2735%" y="181" width="5.5483%" height="15" fill="rgb(248,47,43)"/><text x="28.5235%" y="191.50">special..</text></g><g><title>trait_impls_of (817,229 samples, 0.37%)</title><rect x="33.4516%" y="165" width="0.3702%" height="15" fill="rgb(221,10,30)"/><text x="33.7016%" y="175.50"></text></g><g><title>implementations_of_trait (231,475 samples, 0.10%)</title><rect x="33.7170%" y="149" width="0.1049%" height="15" fill="rgb(210,229,1)"/><text x="33.9670%" y="159.50"></text></g><g><title>coherence_checking (13,166,556 samples, 5.96%)</title><rect x="27.9002%" y="213" width="5.9646%" height="15" fill="rgb(222,148,37)"/><text x="28.1502%" y="223.50">coherenc..</text></g><g><title>associated_item (529,226 samples, 0.24%)</title><rect x="57.3785%" y="149" width="0.2397%" height="15" fill="rgb(234,67,33)"/><text x="57.6285%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (422,065 samples, 0.19%)</title><rect x="57.4270%" y="133" width="0.1912%" height="15" fill="rgb(247,98,35)"/><text x="57.6770%" y="143.50"></text></g><g><title>associated_items (792,797 samples, 0.36%)</title><rect x="57.2815%" y="165" width="0.3591%" height="15" fill="rgb(247,138,52)"/><text x="57.5315%" y="175.50"></text></g><g><title>adt_def (368,774 samples, 0.17%)</title><rect x="57.9112%" y="85" width="0.1671%" height="15" fill="rgb(213,79,30)"/><text x="58.1612%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (368,214 samples, 0.17%)</title><rect x="57.9114%" y="69" width="0.1668%" height="15" fill="rgb(246,177,23)"/><text x="58.1614%" y="79.50"></text></g><g><title>item_attrs (358,884 samples, 0.16%)</title><rect x="57.9157%" y="53" width="0.1626%" height="15" fill="rgb(230,62,27)"/><text x="58.1657%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (358,054 samples, 0.16%)</title><rect x="57.9160%" y="37" width="0.1622%" height="15" fill="rgb(216,154,8)"/><text x="58.1660%" y="47.50"></text></g><g><title>adt_dtorck_constraint (387,094 samples, 0.18%)</title><rect x="57.9076%" y="101" width="0.1754%" height="15" fill="rgb(244,35,45)"/><text x="58.1576%" y="111.50"></text></g><g><title>adt_dtorck_constraint (444,935 samples, 0.20%)</title><rect x="57.8925%" y="117" width="0.2016%" height="15" fill="rgb(251,115,12)"/><text x="58.1425%" y="127.50"></text></g><g><title>adt_dtorck_constraint (489,996 samples, 0.22%)</title><rect x="57.8773%" y="133" width="0.2220%" height="15" fill="rgb(240,54,50)"/><text x="58.1273%" y="143.50"></text></g><g><title>dropck_outlives (963,560 samples, 0.44%)</title><rect x="57.6757%" y="165" width="0.4365%" height="15" fill="rgb(233,84,52)"/><text x="57.9257%" y="175.50"></text></g><g><title>adt_dtorck_constraint (660,857 samples, 0.30%)</title><rect x="57.8129%" y="149" width="0.2994%" height="15" fill="rgb(207,117,47)"/><text x="58.0629%" y="159.50"></text></g><g><title>predicates_of (286,142 samples, 0.13%)</title><rect x="59.0166%" y="149" width="0.1296%" height="15" fill="rgb(249,43,39)"/><text x="59.2666%" y="159.50"></text></g><g><title>specializes (273,193 samples, 0.12%)</title><rect x="59.1462%" y="149" width="0.1238%" height="15" fill="rgb(209,38,44)"/><text x="59.3962%" y="159.50"></text></g><g><title>trait_impls_of (495,246 samples, 0.22%)</title><rect x="59.2765%" y="149" width="0.2244%" height="15" fill="rgb(236,212,23)"/><text x="59.5265%" y="159.50"></text></g><g><title>evaluate_obligation (3,067,271 samples, 1.39%)</title><rect x="58.1122%" y="165" width="1.3895%" height="15" fill="rgb(242,79,21)"/><text x="58.3622%" y="175.50"></text></g><g><title>method_autoderef_steps (715,897 samples, 0.32%)</title><rect x="59.8890%" y="165" width="0.3243%" height="15" fill="rgb(211,96,35)"/><text x="60.1390%" y="175.50"></text></g><g><title>evaluate_obligation (264,922 samples, 0.12%)</title><rect x="60.0933%" y="149" width="0.1200%" height="15" fill="rgb(253,215,40)"/><text x="60.3433%" y="159.50"></text></g><g><title>predicates_of (470,057 samples, 0.21%)</title><rect x="60.3643%" y="165" width="0.2129%" height="15" fill="rgb(211,81,21)"/><text x="60.6143%" y="175.50"></text></g><g><title>predicates_defined_on (315,894 samples, 0.14%)</title><rect x="60.4341%" y="149" width="0.1431%" height="15" fill="rgb(208,190,38)"/><text x="60.6841%" y="159.50"></text></g><g><title>evaluate_obligation (557,008 samples, 0.25%)</title><rect x="62.0549%" y="149" width="0.2523%" height="15" fill="rgb(235,213,38)"/><text x="62.3049%" y="159.50"></text></g><g><title>typeck (4,266,717 samples, 1.93%)</title><rect x="60.6510%" y="165" width="1.9329%" height="15" fill="rgb(237,122,38)"/><text x="60.9010%" y="175.50">t..</text></g><g><title>item_bodies_checking (63,443,706 samples, 28.74%)</title><rect x="33.8898%" y="213" width="28.7408%" height="15" fill="rgb(244,218,35)"/><text x="34.1398%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (63,440,216 samples, 28.74%)</title><rect x="33.8914%" y="197" width="28.7393%" height="15" fill="rgb(240,68,47)"/><text x="34.1414%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (63,241,375 samples, 28.65%)</title><rect x="33.9815%" y="181" width="28.6492%" height="15" fill="rgb(210,16,53)"/><text x="34.2315%" y="191.50">typeck</text></g><g><title>item_types_checking (1,783,590 samples, 0.81%)</title><rect x="62.6307%" y="213" width="0.8080%" height="15" fill="rgb(235,124,12)"/><text x="62.8807%" y="223.50"></text></g><g><title>check_mod_item_types (1,781,310 samples, 0.81%)</title><rect x="62.6317%" y="197" width="0.8070%" height="15" fill="rgb(224,169,11)"/><text x="62.8817%" y="207.50"></text></g><g><title>fn_sig (488,484 samples, 0.22%)</title><rect x="63.6817%" y="181" width="0.2213%" height="15" fill="rgb(250,166,2)"/><text x="63.9317%" y="191.50"></text></g><g><title>named_region_map (307,621 samples, 0.14%)</title><rect x="64.0644%" y="165" width="0.1394%" height="15" fill="rgb(242,216,29)"/><text x="64.3144%" y="175.50"></text></g><g><title>resolve_lifetimes (268,391 samples, 0.12%)</title><rect x="64.0822%" y="149" width="0.1216%" height="15" fill="rgb(230,116,27)"/><text x="64.3322%" y="159.50"></text></g><g><title>generics_of (695,416 samples, 0.32%)</title><rect x="63.9030%" y="181" width="0.3150%" height="15" fill="rgb(228,99,48)"/><text x="64.1530%" y="191.50"></text></g><g><title>explicit_predicates_of (412,925 samples, 0.19%)</title><rect x="64.3731%" y="149" width="0.1871%" height="15" fill="rgb(253,11,6)"/><text x="64.6231%" y="159.50"></text></g><g><title>predicates_of (1,082,182 samples, 0.49%)</title><rect x="64.2455%" y="181" width="0.4902%" height="15" fill="rgb(247,143,39)"/><text x="64.4955%" y="191.50"></text></g><g><title>predicates_defined_on (975,082 samples, 0.44%)</title><rect x="64.2940%" y="165" width="0.4417%" height="15" fill="rgb(236,97,10)"/><text x="64.5440%" y="175.50"></text></g><g><title>inferred_outlives_of (387,455 samples, 0.18%)</title><rect x="64.5602%" y="149" width="0.1755%" height="15" fill="rgb(233,208,19)"/><text x="64.8102%" y="159.50"></text></g><g><title>inferred_outlives_crate (344,174 samples, 0.16%)</title><rect x="64.5798%" y="133" width="0.1559%" height="15" fill="rgb(216,164,2)"/><text x="64.8298%" y="143.50"></text></g><g><title>type_collecting (3,140,445 samples, 1.42%)</title><rect x="63.4395%" y="213" width="1.4227%" height="15" fill="rgb(220,129,5)"/><text x="63.6895%" y="223.50"></text></g><g><title>collect_mod_item_types (3,132,025 samples, 1.42%)</title><rect x="63.4433%" y="197" width="1.4188%" height="15" fill="rgb(242,17,10)"/><text x="63.6933%" y="207.50"></text></g><g><title>evaluate_obligation (791,043 samples, 0.36%)</title><rect x="66.8310%" y="181" width="0.3584%" height="15" fill="rgb(242,107,0)"/><text x="67.0810%" y="191.50"></text></g><g><title>implied_outlives_bounds (356,472 samples, 0.16%)</title><rect x="67.1893%" y="181" width="0.1615%" height="15" fill="rgb(251,28,31)"/><text x="67.4393%" y="191.50"></text></g><g><title>param_env (647,346 samples, 0.29%)</title><rect x="67.3508%" y="181" width="0.2933%" height="15" fill="rgb(233,223,10)"/><text x="67.6008%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,792,466 samples, 3.08%)</title><rect x="65.0312%" y="197" width="3.0771%" height="15" fill="rgb(215,21,27)"/><text x="65.2812%" y="207.50">che..</text></g><g><title>region_scope_tree (1,017,252 samples, 0.46%)</title><rect x="67.6475%" y="181" width="0.4608%" height="15" fill="rgb(232,23,21)"/><text x="67.8975%" y="191.50"></text></g><g><title>adt_sized_constraint (221,922 samples, 0.10%)</title><rect x="69.1583%" y="165" width="0.1005%" height="15" fill="rgb(244,5,23)"/><text x="69.4083%" y="175.50"></text></g><g><title>evaluate_obligation (644,436 samples, 0.29%)</title><rect x="68.9806%" y="181" width="0.2919%" height="15" fill="rgb(226,81,46)"/><text x="69.2306%" y="191.50"></text></g><g><title>param_env (387,670 samples, 0.18%)</title><rect x="69.3164%" y="181" width="0.1756%" height="15" fill="rgb(247,70,30)"/><text x="69.5664%" y="191.50"></text></g><g><title>check_item_well_formed (3,324,794 samples, 1.51%)</title><rect x="68.1083%" y="197" width="1.5062%" height="15" fill="rgb(212,68,19)"/><text x="68.3583%" y="207.50"></text></g><g><title>analysis (153,395,536 samples, 69.49%)</title><rect x="0.3684%" y="245" width="69.4902%" height="15" fill="rgb(240,187,13)"/><text x="0.6184%" y="255.50">analysis</text></g><g><title>type_check_crate (92,736,092 samples, 42.01%)</title><rect x="27.8479%" y="229" width="42.0107%" height="15" fill="rgb(223,113,26)"/><text x="28.0979%" y="239.50">type_check_crate</text></g><g><title>wf_checking (11,015,723 samples, 4.99%)</title><rect x="64.8683%" y="213" width="4.9903%" height="15" fill="rgb(206,192,2)"/><text x="65.1183%" y="223.50">wf_che..</text></g><g><title>check_trait_item_well_formed (538,976 samples, 0.24%)</title><rect x="69.6145%" y="197" width="0.2442%" height="15" fill="rgb(241,108,4)"/><text x="69.8645%" y="207.50"></text></g><g><title>codegen_crate (414,185 samples, 0.19%)</title><rect x="69.8646%" y="245" width="0.1876%" height="15" fill="rgb(247,173,49)"/><text x="70.1146%" y="255.50"></text></g><g><title>AST_validation (413,685 samples, 0.19%)</title><rect x="70.1677%" y="229" width="0.1874%" height="15" fill="rgb(224,114,35)"/><text x="70.4177%" y="239.50"></text></g><g><title>metadata_load_macro (469,395 samples, 0.21%)</title><rect x="81.8277%" y="197" width="0.2126%" height="15" fill="rgb(245,159,27)"/><text x="82.0777%" y="207.50"></text></g><g><title>macro_expand_crate (28,204,294 samples, 12.78%)</title><rect x="70.4547%" y="229" width="12.7769%" height="15" fill="rgb(245,172,44)"/><text x="70.7047%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (28,178,374 samples, 12.77%)</title><rect x="70.4664%" y="213" width="12.7652%" height="15" fill="rgb(236,23,11)"/><text x="70.7164%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,629,620 samples, 1.19%)</title><rect x="82.0404%" y="197" width="1.1913%" height="15" fill="rgb(205,117,38)"/><text x="82.2904%" y="207.50"></text></g><g><title>metadata_register_crate (979,412 samples, 0.44%)</title><rect x="82.7879%" y="181" width="0.4437%" height="15" fill="rgb(237,72,25)"/><text x="83.0379%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (847,939 samples, 0.38%)</title><rect x="83.2335%" y="229" width="0.3841%" height="15" fill="rgb(244,70,9)"/><text x="83.4835%" y="239.50"></text></g><g><title>finalize_macro_resolutions (429,795 samples, 0.19%)</title><rect x="83.6490%" y="213" width="0.1947%" height="15" fill="rgb(217,125,39)"/><text x="83.8990%" y="223.50"></text></g><g><title>late_resolve_crate (4,084,165 samples, 1.85%)</title><rect x="83.8437%" y="213" width="1.8502%" height="15" fill="rgb(235,36,10)"/><text x="84.0937%" y="223.50">l..</text></g><g><title>configure_and_expand (34,737,006 samples, 15.74%)</title><rect x="70.0523%" y="245" width="15.7363%" height="15" fill="rgb(251,123,47)"/><text x="70.3023%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (4,792,203 samples, 2.17%)</title><rect x="83.6177%" y="229" width="2.1709%" height="15" fill="rgb(221,13,13)"/><text x="83.8677%" y="239.50">r..</text></g><g><title>drop_ast (398,534 samples, 0.18%)</title><rect x="85.7886%" y="245" width="0.1805%" height="15" fill="rgb(238,131,9)"/><text x="86.0386%" y="255.50"></text></g><g><title>early_lint_checks (795,919 samples, 0.36%)</title><rect x="85.9760%" y="245" width="0.3606%" height="15" fill="rgb(211,50,8)"/><text x="86.2260%" y="255.50"></text></g><g><title>free_global_ctxt (4,275,698 samples, 1.94%)</title><rect x="86.3366%" y="245" width="1.9369%" height="15" fill="rgb(245,182,24)"/><text x="86.5866%" y="255.50">f..</text></g><g><title>generate_crate_metadata (1,910,761 samples, 0.87%)</title><rect x="88.2735%" y="245" width="0.8656%" height="15" fill="rgb(242,14,37)"/><text x="88.5235%" y="255.50"></text></g><g><title>hir_lowering (5,734,544 samples, 2.60%)</title><rect x="89.1391%" y="245" width="2.5978%" height="15" fill="rgb(246,228,12)"/><text x="89.3891%" y="255.50">hi..</text></g><g><title>parse_crate (16,553,574 samples, 7.50%)</title><rect x="91.7799%" y="245" width="7.4990%" height="15" fill="rgb(213,55,15)"/><text x="92.0299%" y="255.50">parse_crate</text></g><g><title>self_profile_alloc_query_strings (892,270 samples, 0.40%)</title><rect x="99.3811%" y="245" width="0.4042%" height="15" fill="rgb(209,9,3)"/><text x="99.6311%" y="255.50"></text></g><g><title>all (220,744,036 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (220,744,036 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (379,854 samples, 0.17%)</title><rect x="99.8279%" y="245" width="0.1721%" height="15" fill="rgb(220,109,13)"/><text x="100.0779%" y="255.50"></text></g></svg></svg>