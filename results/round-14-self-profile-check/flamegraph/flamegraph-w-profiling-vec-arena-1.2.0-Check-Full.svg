<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (250,493 samples, 0.32%)</title><rect x="9.5919%" y="133" width="0.3175%" height="15" fill="rgb(227,0,7)"/><text x="9.8419%" y="143.50"></text></g><g><title>item_attrs (190,774 samples, 0.24%)</title><rect x="10.3215%" y="101" width="0.2418%" height="15" fill="rgb(217,0,24)"/><text x="10.5715%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (183,934 samples, 0.23%)</title><rect x="10.3301%" y="85" width="0.2331%" height="15" fill="rgb(221,193,54)"/><text x="10.5801%" y="95.50"></text></g><g><title>codegen_fn_attrs (261,245 samples, 0.33%)</title><rect x="10.2415%" y="117" width="0.3311%" height="15" fill="rgb(248,212,6)"/><text x="10.4915%" y="127.50"></text></g><g><title>adt_drop_tys (124,212 samples, 0.16%)</title><rect x="12.4739%" y="85" width="0.1574%" height="15" fill="rgb(208,68,35)"/><text x="12.7239%" y="95.50"></text></g><g><title>needs_drop_raw (675,641 samples, 0.86%)</title><rect x="12.3994%" y="101" width="0.8563%" height="15" fill="rgb(232,128,0)"/><text x="12.6494%" y="111.50"></text></g><g><title>is_copy_raw (492,648 samples, 0.62%)</title><rect x="12.6313%" y="85" width="0.6244%" height="15" fill="rgb(207,160,47)"/><text x="12.8813%" y="95.50"></text></g><g><title>evaluate_obligation (412,537 samples, 0.52%)</title><rect x="12.7329%" y="69" width="0.5229%" height="15" fill="rgb(228,23,34)"/><text x="12.9829%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (234,831 samples, 0.30%)</title><rect x="13.4621%" y="85" width="0.2976%" height="15" fill="rgb(218,30,26)"/><text x="13.7121%" y="95.50"></text></g><g><title>resolve_instance (565,772 samples, 0.72%)</title><rect x="13.2557%" y="101" width="0.7171%" height="15" fill="rgb(220,122,19)"/><text x="13.5057%" y="111.50"></text></g><g><title>thir_body (511,246 samples, 0.65%)</title><rect x="13.9903%" y="101" width="0.6480%" height="15" fill="rgb(250,228,42)"/><text x="14.2403%" y="111.50"></text></g><g><title>mir_const (4,490,481 samples, 5.69%)</title><rect x="8.9607%" y="149" width="5.6913%" height="15" fill="rgb(240,193,28)"/><text x="9.2107%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (3,741,943 samples, 4.74%)</title><rect x="9.9094%" y="133" width="4.7426%" height="15" fill="rgb(216,20,37)"/><text x="10.1594%" y="143.50">unsafe..</text></g><g><title>mir_built (3,218,654 samples, 4.08%)</title><rect x="10.5726%" y="117" width="4.0794%" height="15" fill="rgb(206,188,39)"/><text x="10.8226%" y="127.50">mir_..</text></g><g><title>mir_promoted (4,995,479 samples, 6.33%)</title><rect x="8.3520%" y="165" width="6.3313%" height="15" fill="rgb(217,207,13)"/><text x="8.6020%" y="175.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (146,952 samples, 0.19%)</title><rect x="14.6833%" y="165" width="0.1862%" height="15" fill="rgb(231,73,38)"/><text x="14.9333%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (409,333 samples, 0.52%)</title><rect x="14.8696%" y="165" width="0.5188%" height="15" fill="rgb(225,20,46)"/><text x="15.1196%" y="175.50"></text></g><g><title>normalize_projection_ty (274,552 samples, 0.35%)</title><rect x="15.0404%" y="149" width="0.3480%" height="15" fill="rgb(210,31,41)"/><text x="15.2904%" y="159.50"></text></g><g><title>type_op_normalize_ty (204,941 samples, 0.26%)</title><rect x="15.4077%" y="165" width="0.2597%" height="15" fill="rgb(221,200,47)"/><text x="15.6577%" y="175.50"></text></g><g><title>normalize_projection_ty (135,261 samples, 0.17%)</title><rect x="15.4960%" y="149" width="0.1714%" height="15" fill="rgb(226,26,5)"/><text x="15.7460%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,086,149 samples, 1.38%)</title><rect x="15.6674%" y="165" width="1.3766%" height="15" fill="rgb(249,33,26)"/><text x="15.9174%" y="175.50"></text></g><g><title>MIR_borrow_checking (12,569,842 samples, 15.93%)</title><rect x="1.1145%" y="197" width="15.9312%" height="15" fill="rgb(235,183,28)"/><text x="1.3645%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,510,681 samples, 15.86%)</title><rect x="1.1895%" y="181" width="15.8562%" height="15" fill="rgb(221,5,38)"/><text x="1.4395%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (177,642 samples, 0.23%)</title><rect x="17.0635%" y="197" width="0.2251%" height="15" fill="rgb(247,18,42)"/><text x="17.3135%" y="207.50"></text></g><g><title>associated_item (79,592 samples, 0.10%)</title><rect x="17.7734%" y="133" width="0.1009%" height="15" fill="rgb(241,131,45)"/><text x="18.0234%" y="143.50"></text></g><g><title>get_lang_items (96,621 samples, 0.12%)</title><rect x="17.9829%" y="117" width="0.1225%" height="15" fill="rgb(249,31,29)"/><text x="18.2329%" y="127.50"></text></g><g><title>item_attrs (95,842 samples, 0.12%)</title><rect x="18.1054%" y="117" width="0.1215%" height="15" fill="rgb(225,111,53)"/><text x="18.3554%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (86,002 samples, 0.11%)</title><rect x="18.1179%" y="101" width="0.1090%" height="15" fill="rgb(238,160,17)"/><text x="18.3679%" y="111.50"></text></g><g><title>codegen_fn_attrs (343,164 samples, 0.43%)</title><rect x="17.8743%" y="133" width="0.4349%" height="15" fill="rgb(214,148,48)"/><text x="18.1243%" y="143.50"></text></g><g><title>codegen_fn_attrs (543,107 samples, 0.69%)</title><rect x="17.6306%" y="165" width="0.6883%" height="15" fill="rgb(232,36,49)"/><text x="17.8806%" y="175.50"></text></g><g><title>should_inherit_track_caller (480,487 samples, 0.61%)</title><rect x="17.7099%" y="149" width="0.6090%" height="15" fill="rgb(209,103,24)"/><text x="17.9599%" y="159.50"></text></g><g><title>check_mod_attrs (790,818 samples, 1.00%)</title><rect x="17.3173%" y="181" width="1.0023%" height="15" fill="rgb(229,88,8)"/><text x="17.5673%" y="191.50"></text></g><g><title>check_mod_const_bodies (132,382 samples, 0.17%)</title><rect x="18.3195%" y="181" width="0.1678%" height="15" fill="rgb(213,181,19)"/><text x="18.5695%" y="191.50"></text></g><g><title>lookup_deprecation_entry (180,252 samples, 0.23%)</title><rect x="18.8674%" y="165" width="0.2285%" height="15" fill="rgb(254,191,54)"/><text x="19.1174%" y="175.50"></text></g><g><title>stability_index (117,981 samples, 0.15%)</title><rect x="18.9463%" y="149" width="0.1495%" height="15" fill="rgb(241,83,37)"/><text x="19.1963%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (511,665 samples, 0.65%)</title><rect x="18.5818%" y="181" width="0.6485%" height="15" fill="rgb(233,36,39)"/><text x="18.8318%" y="191.50"></text></g><g><title>misc_checking_1 (1,588,608 samples, 2.01%)</title><rect x="17.2890%" y="197" width="2.0134%" height="15" fill="rgb(226,3,54)"/><text x="17.5390%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (255,692 samples, 0.32%)</title><rect x="19.3041%" y="181" width="0.3241%" height="15" fill="rgb(245,192,40)"/><text x="19.5541%" y="191.50"></text></g><g><title>check_mod_liveness (212,452 samples, 0.27%)</title><rect x="19.3589%" y="165" width="0.2693%" height="15" fill="rgb(238,167,29)"/><text x="19.6089%" y="175.50"></text></g><g><title>misc_checking_2 (571,526 samples, 0.72%)</title><rect x="19.3024%" y="197" width="0.7244%" height="15" fill="rgb(232,182,51)"/><text x="19.5524%" y="207.50"></text></g><g><title>match_checking (314,493 samples, 0.40%)</title><rect x="19.6282%" y="181" width="0.3986%" height="15" fill="rgb(231,60,39)"/><text x="19.8782%" y="191.50"></text></g><g><title>check_match (298,943 samples, 0.38%)</title><rect x="19.6479%" y="165" width="0.3789%" height="15" fill="rgb(208,69,12)"/><text x="19.8979%" y="175.50"></text></g><g><title>check_private_in_public (103,151 samples, 0.13%)</title><rect x="20.0366%" y="181" width="0.1307%" height="15" fill="rgb(235,93,37)"/><text x="20.2866%" y="191.50"></text></g><g><title>death_checking (185,222 samples, 0.23%)</title><rect x="20.1673%" y="181" width="0.2348%" height="15" fill="rgb(213,116,39)"/><text x="20.4173%" y="191.50"></text></g><g><title>crate_lints (749,779 samples, 0.95%)</title><rect x="20.4036%" y="165" width="0.9503%" height="15" fill="rgb(222,207,29)"/><text x="20.6536%" y="175.50"></text></g><g><title>type_of (361,432 samples, 0.46%)</title><rect x="20.8958%" y="149" width="0.4581%" height="15" fill="rgb(206,96,30)"/><text x="21.1458%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (271,051 samples, 0.34%)</title><rect x="21.0104%" y="133" width="0.3435%" height="15" fill="rgb(218,138,4)"/><text x="21.2604%" y="143.50"></text></g><g><title>lint_checking (922,501 samples, 1.17%)</title><rect x="20.4021%" y="181" width="1.1692%" height="15" fill="rgb(250,191,14)"/><text x="20.6521%" y="191.50"></text></g><g><title>module_lints (171,492 samples, 0.22%)</title><rect x="21.3539%" y="165" width="0.2174%" height="15" fill="rgb(239,60,40)"/><text x="21.6039%" y="175.50"></text></g><g><title>lint_mod (169,732 samples, 0.22%)</title><rect x="21.3561%" y="149" width="0.2151%" height="15" fill="rgb(206,27,48)"/><text x="21.6061%" y="159.50"></text></g><g><title>privacy_access_levels (136,302 samples, 0.17%)</title><rect x="21.5713%" y="181" width="0.1728%" height="15" fill="rgb(225,35,8)"/><text x="21.8213%" y="191.50"></text></g><g><title>privacy_checking_modules (368,634 samples, 0.47%)</title><rect x="21.7440%" y="181" width="0.4672%" height="15" fill="rgb(250,213,24)"/><text x="21.9940%" y="191.50"></text></g><g><title>check_mod_privacy (367,364 samples, 0.47%)</title><rect x="21.7456%" y="165" width="0.4656%" height="15" fill="rgb(247,123,22)"/><text x="21.9956%" y="175.50"></text></g><g><title>misc_checking_3 (1,737,460 samples, 2.20%)</title><rect x="20.0268%" y="197" width="2.2021%" height="15" fill="rgb(231,138,38)"/><text x="20.2768%" y="207.50">m..</text></g><g><title>impl_parent (1,025,308 samples, 1.30%)</title><rect x="25.6769%" y="133" width="1.2995%" height="15" fill="rgb(231,145,46)"/><text x="25.9269%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (506,103 samples, 0.64%)</title><rect x="26.3350%" y="117" width="0.6414%" height="15" fill="rgb(251,118,11)"/><text x="26.5850%" y="127.50"></text></g><g><title>impl_trait_ref (3,039,771 samples, 3.85%)</title><rect x="26.9798%" y="133" width="3.8526%" height="15" fill="rgb(217,147,25)"/><text x="27.2298%" y="143.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,514,064 samples, 3.19%)</title><rect x="27.6461%" y="117" width="3.1864%" height="15" fill="rgb(247,81,37)"/><text x="27.8961%" y="127.50">met..</text></g><g><title>item_attrs (161,914 samples, 0.21%)</title><rect x="30.8325%" y="133" width="0.2052%" height="15" fill="rgb(209,12,38)"/><text x="31.0825%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,054 samples, 0.19%)</title><rect x="30.8475%" y="117" width="0.1902%" height="15" fill="rgb(227,1,9)"/><text x="31.0975%" y="127.50"></text></g><g><title>predicates_of (137,940 samples, 0.17%)</title><rect x="31.0388%" y="133" width="0.1748%" height="15" fill="rgb(248,47,43)"/><text x="31.2888%" y="143.50"></text></g><g><title>predicates_defined_on (91,830 samples, 0.12%)</title><rect x="31.0973%" y="117" width="0.1164%" height="15" fill="rgb(221,10,30)"/><text x="31.3473%" y="127.50"></text></g><g><title>trait_impls_of (426,165 samples, 0.54%)</title><rect x="31.2246%" y="133" width="0.5401%" height="15" fill="rgb(210,229,1)"/><text x="31.4746%" y="143.50"></text></g><g><title>implementations_of_trait (98,111 samples, 0.12%)</title><rect x="31.6404%" y="117" width="0.1243%" height="15" fill="rgb(222,148,37)"/><text x="31.8904%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (81,871 samples, 0.10%)</title><rect x="31.6610%" y="101" width="0.1038%" height="15" fill="rgb(234,67,33)"/><text x="31.9110%" y="111.50"></text></g><g><title>coherent_trait (7,483,505 samples, 9.48%)</title><rect x="22.3187%" y="165" width="9.4847%" height="15" fill="rgb(247,98,35)"/><text x="22.5687%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (7,459,015 samples, 9.45%)</title><rect x="22.3498%" y="149" width="9.4536%" height="15" fill="rgb(247,138,52)"/><text x="22.5998%" y="159.50">specialization..</text></g><g><title>coherence_checking (7,582,356 samples, 9.61%)</title><rect x="22.2810%" y="181" width="9.6100%" height="15" fill="rgb(213,79,30)"/><text x="22.5310%" y="191.50">coherence_chec..</text></g><g><title>associated_item (487,496 samples, 0.62%)</title><rect x="46.0952%" y="117" width="0.6179%" height="15" fill="rgb(246,177,23)"/><text x="46.3452%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (376,176 samples, 0.48%)</title><rect x="46.2363%" y="101" width="0.4768%" height="15" fill="rgb(230,62,27)"/><text x="46.4863%" y="111.50"></text></g><g><title>associated_items (702,627 samples, 0.89%)</title><rect x="45.8561%" y="133" width="0.8905%" height="15" fill="rgb(216,154,8)"/><text x="46.1061%" y="143.50"></text></g><g><title>adt_def (203,772 samples, 0.26%)</title><rect x="47.1477%" y="85" width="0.2583%" height="15" fill="rgb(244,35,45)"/><text x="47.3977%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (203,422 samples, 0.26%)</title><rect x="47.1481%" y="69" width="0.2578%" height="15" fill="rgb(251,115,12)"/><text x="47.3981%" y="79.50"></text></g><g><title>item_attrs (198,852 samples, 0.25%)</title><rect x="47.1539%" y="53" width="0.2520%" height="15" fill="rgb(240,54,50)"/><text x="47.4039%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (198,412 samples, 0.25%)</title><rect x="47.1544%" y="37" width="0.2515%" height="15" fill="rgb(233,84,52)"/><text x="47.4044%" y="47.50"></text></g><g><title>adt_dtorck_constraint (100,641 samples, 0.13%)</title><rect x="47.4116%" y="85" width="0.1276%" height="15" fill="rgb(207,117,47)"/><text x="47.6616%" y="95.50"></text></g><g><title>adt_dtorck_constraint (326,713 samples, 0.41%)</title><rect x="47.1342%" y="101" width="0.4141%" height="15" fill="rgb(249,43,39)"/><text x="47.3842%" y="111.50"></text></g><g><title>adt_dtorck_constraint (394,754 samples, 0.50%)</title><rect x="47.0722%" y="117" width="0.5003%" height="15" fill="rgb(209,38,44)"/><text x="47.3222%" y="127.50"></text></g><g><title>dropck_outlives (598,349 samples, 0.76%)</title><rect x="46.8217%" y="133" width="0.7584%" height="15" fill="rgb(236,212,23)"/><text x="47.0717%" y="143.50"></text></g><g><title>predicates_of (123,252 samples, 0.16%)</title><rect x="48.8176%" y="117" width="0.1562%" height="15" fill="rgb(242,79,21)"/><text x="49.0676%" y="127.50"></text></g><g><title>predicates_defined_on (81,461 samples, 0.10%)</title><rect x="48.8705%" y="101" width="0.1032%" height="15" fill="rgb(211,96,35)"/><text x="49.1205%" y="111.50"></text></g><g><title>specializes (85,322 samples, 0.11%)</title><rect x="48.9738%" y="117" width="0.1081%" height="15" fill="rgb(253,215,40)"/><text x="49.2238%" y="127.50"></text></g><g><title>evaluate_obligation (1,466,799 samples, 1.86%)</title><rect x="47.5800%" y="133" width="1.8590%" height="15" fill="rgb(211,81,21)"/><text x="47.8300%" y="143.50">e..</text></g><g><title>trait_impls_of (275,404 samples, 0.35%)</title><rect x="49.0900%" y="117" width="0.3491%" height="15" fill="rgb(208,190,38)"/><text x="49.3400%" y="127.50"></text></g><g><title>implementations_of_trait (96,022 samples, 0.12%)</title><rect x="49.3174%" y="101" width="0.1217%" height="15" fill="rgb(235,213,38)"/><text x="49.5674%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (83,511 samples, 0.11%)</title><rect x="49.3332%" y="85" width="0.1058%" height="15" fill="rgb(237,122,38)"/><text x="49.5832%" y="95.50"></text></g><g><title>fn_sig (107,952 samples, 0.14%)</title><rect x="49.4645%" y="133" width="0.1368%" height="15" fill="rgb(244,218,35)"/><text x="49.7145%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (94,692 samples, 0.12%)</title><rect x="49.4813%" y="117" width="0.1200%" height="15" fill="rgb(240,68,47)"/><text x="49.7313%" y="127.50"></text></g><g><title>associated_item (154,794 samples, 0.20%)</title><rect x="49.7730%" y="101" width="0.1962%" height="15" fill="rgb(210,16,53)"/><text x="50.0230%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (138,523 samples, 0.18%)</title><rect x="49.7936%" y="85" width="0.1756%" height="15" fill="rgb(235,124,12)"/><text x="50.0436%" y="95.50"></text></g><g><title>impl_item_implementor_ids (222,024 samples, 0.28%)</title><rect x="49.7010%" y="133" width="0.2814%" height="15" fill="rgb(224,169,11)"/><text x="49.9510%" y="143.50"></text></g><g><title>associated_items (204,744 samples, 0.26%)</title><rect x="49.7229%" y="117" width="0.2595%" height="15" fill="rgb(250,166,2)"/><text x="49.9729%" y="127.50"></text></g><g><title>item_attrs (111,380 samples, 0.14%)</title><rect x="50.0482%" y="133" width="0.1412%" height="15" fill="rgb(242,216,29)"/><text x="50.2982%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (107,460 samples, 0.14%)</title><rect x="50.0532%" y="117" width="0.1362%" height="15" fill="rgb(230,116,27)"/><text x="50.3032%" y="127.50"></text></g><g><title>evaluate_obligation (288,516 samples, 0.37%)</title><rect x="50.5278%" y="117" width="0.3657%" height="15" fill="rgb(228,99,48)"/><text x="50.7778%" y="127.50"></text></g><g><title>method_autoderef_steps (510,980 samples, 0.65%)</title><rect x="50.2732%" y="133" width="0.6476%" height="15" fill="rgb(253,11,6)"/><text x="50.5232%" y="143.50"></text></g><g><title>predicates_of (487,875 samples, 0.62%)</title><rect x="50.9826%" y="133" width="0.6183%" height="15" fill="rgb(247,143,39)"/><text x="51.2326%" y="143.50"></text></g><g><title>predicates_defined_on (157,861 samples, 0.20%)</title><rect x="51.4009%" y="117" width="0.2001%" height="15" fill="rgb(236,97,10)"/><text x="51.6509%" y="127.50"></text></g><g><title>item_bodies_checking (15,616,666 samples, 19.79%)</title><rect x="31.9587%" y="181" width="19.7927%" height="15" fill="rgb(233,208,19)"/><text x="32.2087%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,614,236 samples, 19.79%)</title><rect x="31.9618%" y="165" width="19.7897%" height="15" fill="rgb(216,164,2)"/><text x="32.2118%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (15,563,646 samples, 19.73%)</title><rect x="32.0259%" y="149" width="19.7255%" height="15" fill="rgb(220,129,5)"/><text x="32.2759%" y="159.50">typeck</text></g><g><title>impl_trait_ref (152,771 samples, 0.19%)</title><rect x="54.9639%" y="101" width="0.1936%" height="15" fill="rgb(242,17,10)"/><text x="55.2139%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (131,051 samples, 0.17%)</title><rect x="54.9914%" y="85" width="0.1661%" height="15" fill="rgb(242,107,0)"/><text x="55.2414%" y="95.50"></text></g><g><title>adt_destructor (346,654 samples, 0.44%)</title><rect x="54.7673%" y="149" width="0.4394%" height="15" fill="rgb(251,28,31)"/><text x="55.0173%" y="159.50"></text></g><g><title>coherent_trait (337,204 samples, 0.43%)</title><rect x="54.7793%" y="133" width="0.4274%" height="15" fill="rgb(233,223,10)"/><text x="55.0293%" y="143.50"></text></g><g><title>specialization_graph_of (334,434 samples, 0.42%)</title><rect x="54.7828%" y="117" width="0.4239%" height="15" fill="rgb(215,21,27)"/><text x="55.0328%" y="127.50"></text></g><g><title>item_types_checking (2,985,124 samples, 3.78%)</title><rect x="51.7515%" y="181" width="3.7834%" height="15" fill="rgb(232,23,21)"/><text x="52.0015%" y="191.50">item..</text></g><g><title>check_mod_item_types (2,981,424 samples, 3.78%)</title><rect x="51.7562%" y="165" width="3.7787%" height="15" fill="rgb(244,5,23)"/><text x="52.0062%" y="175.50">chec..</text></g><g><title>associated_items (125,091 samples, 0.16%)</title><rect x="56.2829%" y="133" width="0.1585%" height="15" fill="rgb(226,81,46)"/><text x="56.5329%" y="143.50"></text></g><g><title>late_bound_vars_map (152,982 samples, 0.19%)</title><rect x="56.4534%" y="133" width="0.1939%" height="15" fill="rgb(247,70,30)"/><text x="56.7034%" y="143.50"></text></g><g><title>resolve_lifetimes (137,392 samples, 0.17%)</title><rect x="56.4732%" y="117" width="0.1741%" height="15" fill="rgb(212,68,19)"/><text x="56.7232%" y="127.50"></text></g><g><title>fn_sig (573,634 samples, 0.73%)</title><rect x="55.9814%" y="149" width="0.7270%" height="15" fill="rgb(240,187,13)"/><text x="56.2314%" y="159.50"></text></g><g><title>is_late_bound_map (300,143 samples, 0.38%)</title><rect x="56.8947%" y="133" width="0.3804%" height="15" fill="rgb(223,113,26)"/><text x="57.1447%" y="143.50"></text></g><g><title>resolve_lifetimes (287,092 samples, 0.36%)</title><rect x="56.9113%" y="117" width="0.3639%" height="15" fill="rgb(206,192,2)"/><text x="57.1613%" y="127.50"></text></g><g><title>lint_levels (132,721 samples, 0.17%)</title><rect x="57.1069%" y="101" width="0.1682%" height="15" fill="rgb(241,108,4)"/><text x="57.3569%" y="111.50"></text></g><g><title>named_region_map (111,052 samples, 0.14%)</title><rect x="57.2752%" y="133" width="0.1407%" height="15" fill="rgb(247,173,49)"/><text x="57.5252%" y="143.50"></text></g><g><title>resolve_lifetimes (93,012 samples, 0.12%)</title><rect x="57.2980%" y="117" width="0.1179%" height="15" fill="rgb(224,114,35)"/><text x="57.5480%" y="127.50"></text></g><g><title>generics_of (582,338 samples, 0.74%)</title><rect x="56.7084%" y="149" width="0.7381%" height="15" fill="rgb(245,159,27)"/><text x="56.9584%" y="159.50"></text></g><g><title>explicit_predicates_of (456,047 samples, 0.58%)</title><rect x="57.7433%" y="117" width="0.5780%" height="15" fill="rgb(245,172,44)"/><text x="57.9933%" y="127.50"></text></g><g><title>predicates_of (1,061,654 samples, 1.35%)</title><rect x="57.5337%" y="149" width="1.3456%" height="15" fill="rgb(236,23,11)"/><text x="57.7837%" y="159.50"></text></g><g><title>predicates_defined_on (999,124 samples, 1.27%)</title><rect x="57.6130%" y="133" width="1.2663%" height="15" fill="rgb(205,117,38)"/><text x="57.8630%" y="143.50"></text></g><g><title>inferred_outlives_of (440,246 samples, 0.56%)</title><rect x="58.3213%" y="117" width="0.5580%" height="15" fill="rgb(237,72,25)"/><text x="58.5713%" y="127.50"></text></g><g><title>inferred_outlives_crate (410,455 samples, 0.52%)</title><rect x="58.3591%" y="101" width="0.5202%" height="15" fill="rgb(244,70,9)"/><text x="58.6091%" y="111.50"></text></g><g><title>type_of (211,453 samples, 0.27%)</title><rect x="58.6113%" y="85" width="0.2680%" height="15" fill="rgb(217,125,39)"/><text x="58.8613%" y="95.50"></text></g><g><title>type_collecting (2,820,502 samples, 3.57%)</title><rect x="55.5371%" y="181" width="3.5747%" height="15" fill="rgb(235,36,10)"/><text x="55.7871%" y="191.50">type..</text></g><g><title>collect_mod_item_types (2,812,742 samples, 3.56%)</title><rect x="55.5469%" y="165" width="3.5649%" height="15" fill="rgb(251,123,47)"/><text x="55.7969%" y="175.50">coll..</text></g><g><title>type_of (183,461 samples, 0.23%)</title><rect x="58.8793%" y="149" width="0.2325%" height="15" fill="rgb(221,13,13)"/><text x="59.1293%" y="159.50"></text></g><g><title>evaluate_obligation (665,924 samples, 0.84%)</title><rect x="63.5268%" y="149" width="0.8440%" height="15" fill="rgb(238,131,9)"/><text x="63.7768%" y="159.50"></text></g><g><title>implied_outlives_bounds (427,846 samples, 0.54%)</title><rect x="64.4286%" y="149" width="0.5423%" height="15" fill="rgb(211,50,8)"/><text x="64.6786%" y="159.50"></text></g><g><title>param_env (543,749 samples, 0.69%)</title><rect x="64.9708%" y="149" width="0.6892%" height="15" fill="rgb(245,182,24)"/><text x="65.2208%" y="159.50"></text></g><g><title>predicates_of (81,560 samples, 0.10%)</title><rect x="65.6600%" y="149" width="0.1034%" height="15" fill="rgb(242,14,37)"/><text x="65.9100%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,421,726 samples, 6.87%)</title><rect x="59.4172%" y="165" width="6.8716%" height="15" fill="rgb(246,228,12)"/><text x="59.6672%" y="175.50">check_imp..</text></g><g><title>region_scope_tree (414,535 samples, 0.53%)</title><rect x="65.7634%" y="149" width="0.5254%" height="15" fill="rgb(213,55,15)"/><text x="66.0134%" y="159.50"></text></g><g><title>adt_def (219,481 samples, 0.28%)</title><rect x="68.8520%" y="133" width="0.2782%" height="15" fill="rgb(209,9,3)"/><text x="69.1020%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (214,271 samples, 0.27%)</title><rect x="68.8586%" y="117" width="0.2716%" height="15" fill="rgb(230,59,30)"/><text x="69.1086%" y="127.50"></text></g><g><title>item_attrs (174,061 samples, 0.22%)</title><rect x="68.9096%" y="101" width="0.2206%" height="15" fill="rgb(209,121,21)"/><text x="69.1596%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (170,031 samples, 0.22%)</title><rect x="68.9147%" y="85" width="0.2155%" height="15" fill="rgb(220,109,13)"/><text x="69.1647%" y="95.50"></text></g><g><title>adt_sized_constraint (80,971 samples, 0.10%)</title><rect x="69.1302%" y="133" width="0.1026%" height="15" fill="rgb(232,18,1)"/><text x="69.3802%" y="143.50"></text></g><g><title>adt_def (79,871 samples, 0.10%)</title><rect x="69.1316%" y="117" width="0.1012%" height="15" fill="rgb(215,41,42)"/><text x="69.3816%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (79,331 samples, 0.10%)</title><rect x="69.1322%" y="101" width="0.1005%" height="15" fill="rgb(224,123,36)"/><text x="69.3822%" y="111.50"></text></g><g><title>adt_sized_constraint (340,262 samples, 0.43%)</title><rect x="68.8205%" y="149" width="0.4313%" height="15" fill="rgb(240,125,3)"/><text x="69.0705%" y="159.50"></text></g><g><title>evaluate_obligation (82,732 samples, 0.10%)</title><rect x="69.2518%" y="149" width="0.1049%" height="15" fill="rgb(205,98,50)"/><text x="69.5018%" y="159.50"></text></g><g><title>implied_outlives_bounds (174,791 samples, 0.22%)</title><rect x="69.3803%" y="149" width="0.2215%" height="15" fill="rgb(205,185,37)"/><text x="69.6303%" y="159.50"></text></g><g><title>param_env (347,963 samples, 0.44%)</title><rect x="69.6018%" y="149" width="0.4410%" height="15" fill="rgb(238,207,15)"/><text x="69.8518%" y="159.50"></text></g><g><title>predicates_of (130,683 samples, 0.17%)</title><rect x="70.0428%" y="149" width="0.1656%" height="15" fill="rgb(213,199,42)"/><text x="70.2928%" y="159.50"></text></g><g><title>predicates_defined_on (84,002 samples, 0.11%)</title><rect x="70.1020%" y="133" width="0.1065%" height="15" fill="rgb(235,201,11)"/><text x="70.3520%" y="143.50"></text></g><g><title>analysis (54,980,690 samples, 69.68%)</title><rect x="0.7366%" y="213" width="69.6831%" height="15" fill="rgb(207,46,11)"/><text x="0.9866%" y="223.50">analysis</text></g><g><title>type_check_crate (38,023,039 samples, 48.19%)</title><rect x="22.2289%" y="197" width="48.1908%" height="15" fill="rgb(241,35,35)"/><text x="22.4789%" y="207.50">type_check_crate</text></g><g><title>wf_checking (8,919,091 samples, 11.30%)</title><rect x="59.1155%" y="181" width="11.3042%" height="15" fill="rgb(243,32,47)"/><text x="59.3655%" y="191.50">wf_checking</text></g><g><title>check_item_well_formed (3,259,355 samples, 4.13%)</title><rect x="66.2887%" y="165" width="4.1309%" height="15" fill="rgb(247,202,23)"/><text x="66.5387%" y="175.50">check..</text></g><g><title>variances_of (128,871 samples, 0.16%)</title><rect x="70.2564%" y="149" width="0.1633%" height="15" fill="rgb(219,102,11)"/><text x="70.5064%" y="159.50"></text></g><g><title>crate_variances (122,281 samples, 0.15%)</title><rect x="70.2647%" y="133" width="0.1550%" height="15" fill="rgb(243,110,44)"/><text x="70.5147%" y="143.50"></text></g><g><title>codegen_crate (230,713 samples, 0.29%)</title><rect x="70.4405%" y="213" width="0.2924%" height="15" fill="rgb(222,74,54)"/><text x="70.6905%" y="223.50"></text></g><g><title>AST_validation (143,672 samples, 0.18%)</title><rect x="70.9426%" y="197" width="0.1821%" height="15" fill="rgb(216,99,12)"/><text x="71.1926%" y="207.50"></text></g><g><title>metadata_load_macro (312,553 samples, 0.40%)</title><rect x="82.5452%" y="165" width="0.3961%" height="15" fill="rgb(226,22,26)"/><text x="82.7952%" y="175.50"></text></g><g><title>macro_expand_crate (9,387,965 samples, 11.90%)</title><rect x="71.2988%" y="197" width="11.8984%" height="15" fill="rgb(217,163,10)"/><text x="71.5488%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (9,368,805 samples, 11.87%)</title><rect x="71.3230%" y="181" width="11.8741%" height="15" fill="rgb(213,25,53)"/><text x="71.5730%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (201,892 samples, 0.26%)</title><rect x="82.9413%" y="165" width="0.2559%" height="15" fill="rgb(252,105,26)"/><text x="83.1913%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (215,852 samples, 0.27%)</title><rect x="83.2018%" y="197" width="0.2736%" height="15" fill="rgb(220,39,43)"/><text x="83.4518%" y="207.50"></text></g><g><title>late_resolve_crate (2,135,005 samples, 2.71%)</title><rect x="83.6351%" y="181" width="2.7059%" height="15" fill="rgb(229,68,48)"/><text x="83.8851%" y="191.50">la..</text></g><g><title>configure_and_expand (12,423,510 samples, 15.75%)</title><rect x="70.7329%" y="213" width="15.7457%" height="15" fill="rgb(252,8,32)"/><text x="70.9829%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,369,547 samples, 3.00%)</title><rect x="83.4754%" y="197" width="3.0032%" height="15" fill="rgb(223,20,43)"/><text x="83.7254%" y="207.50">res..</text></g><g><title>drop_ast (181,112 samples, 0.23%)</title><rect x="86.4786%" y="213" width="0.2295%" height="15" fill="rgb(229,81,49)"/><text x="86.7286%" y="223.50"></text></g><g><title>early_lint_checks (378,264 samples, 0.48%)</title><rect x="86.7222%" y="213" width="0.4794%" height="15" fill="rgb(236,28,36)"/><text x="86.9722%" y="223.50"></text></g><g><title>free_global_ctxt (1,630,299 samples, 2.07%)</title><rect x="87.2016%" y="213" width="2.0663%" height="15" fill="rgb(249,185,26)"/><text x="87.4516%" y="223.50">f..</text></g><g><title>generate_crate_metadata (709,268 samples, 0.90%)</title><rect x="89.2679%" y="213" width="0.8989%" height="15" fill="rgb(249,174,33)"/><text x="89.5179%" y="223.50"></text></g><g><title>hir_lowering (2,823,042 samples, 3.58%)</title><rect x="90.1668%" y="213" width="3.5780%" height="15" fill="rgb(233,201,37)"/><text x="90.4168%" y="223.50">hir_..</text></g><g><title>parse_crate (3,707,381 samples, 4.70%)</title><rect x="93.7900%" y="213" width="4.6988%" height="15" fill="rgb(221,78,26)"/><text x="94.0400%" y="223.50">parse..</text></g><g><title>prepare_outputs (277,373 samples, 0.35%)</title><rect x="98.4975%" y="213" width="0.3515%" height="15" fill="rgb(250,127,30)"/><text x="98.7475%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (451,195 samples, 0.57%)</title><rect x="98.8491%" y="213" width="0.5718%" height="15" fill="rgb(230,49,44)"/><text x="99.0991%" y="223.50"></text></g><g><title>setup_global_ctxt (99,412 samples, 0.13%)</title><rect x="99.4314%" y="213" width="0.1260%" height="15" fill="rgb(229,67,23)"/><text x="99.6814%" y="223.50"></text></g><g><title>all (78,901,000 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (78,901,000 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (349,224 samples, 0.44%)</title><rect x="99.5574%" y="213" width="0.4426%" height="15" fill="rgb(238,154,13)"/><text x="99.8074%" y="223.50"></text></g></svg></svg>