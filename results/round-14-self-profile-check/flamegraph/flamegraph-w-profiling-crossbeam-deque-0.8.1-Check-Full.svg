<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (479,407 samples, 0.27%)</title><rect x="12.4727%" y="181" width="0.2737%" height="15" fill="rgb(227,0,7)"/><text x="12.7227%" y="191.50"></text></g><g><title>item_attrs (517,967 samples, 0.30%)</title><rect x="13.3631%" y="149" width="0.2958%" height="15" fill="rgb(217,0,24)"/><text x="13.6131%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (502,127 samples, 0.29%)</title><rect x="13.3721%" y="133" width="0.2867%" height="15" fill="rgb(221,193,54)"/><text x="13.6221%" y="143.50"></text></g><g><title>codegen_fn_attrs (712,610 samples, 0.41%)</title><rect x="13.2671%" y="165" width="0.4069%" height="15" fill="rgb(248,212,6)"/><text x="13.5171%" y="175.50"></text></g><g><title>is_copy_raw (590,968 samples, 0.34%)</title><rect x="16.6445%" y="133" width="0.3374%" height="15" fill="rgb(208,68,35)"/><text x="16.8945%" y="143.50"></text></g><g><title>evaluate_obligation (481,168 samples, 0.27%)</title><rect x="16.7072%" y="117" width="0.2747%" height="15" fill="rgb(232,128,0)"/><text x="16.9572%" y="127.50"></text></g><g><title>needs_drop_raw (815,082 samples, 0.47%)</title><rect x="16.5190%" y="149" width="0.4654%" height="15" fill="rgb(207,160,47)"/><text x="16.7690%" y="159.50"></text></g><g><title>impl_parent (335,672 samples, 0.19%)</title><rect x="17.5866%" y="117" width="0.1917%" height="15" fill="rgb(228,23,34)"/><text x="17.8366%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (221,351 samples, 0.13%)</title><rect x="17.6519%" y="101" width="0.1264%" height="15" fill="rgb(218,30,26)"/><text x="17.9019%" y="111.50"></text></g><g><title>specialization_graph_of (1,717,959 samples, 0.98%)</title><rect x="17.1718%" y="133" width="0.9809%" height="15" fill="rgb(220,122,19)"/><text x="17.4218%" y="143.50"></text></g><g><title>impl_trait_ref (655,725 samples, 0.37%)</title><rect x="17.7783%" y="117" width="0.3744%" height="15" fill="rgb(250,228,42)"/><text x="18.0283%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (546,375 samples, 0.31%)</title><rect x="17.8407%" y="101" width="0.3120%" height="15" fill="rgb(240,193,28)"/><text x="18.0907%" y="111.50"></text></g><g><title>resolve_instance (2,152,422 samples, 1.23%)</title><rect x="16.9844%" y="149" width="1.2290%" height="15" fill="rgb(216,20,37)"/><text x="17.2344%" y="159.50"></text></g><g><title>thir_body (2,084,063 samples, 1.19%)</title><rect x="18.2272%" y="149" width="1.1900%" height="15" fill="rgb(206,188,39)"/><text x="18.4772%" y="159.50"></text></g><g><title>mir_const (13,443,861 samples, 7.68%)</title><rect x="11.7503%" y="197" width="7.6763%" height="15" fill="rgb(217,207,13)"/><text x="12.0003%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (11,699,289 samples, 6.68%)</title><rect x="12.7464%" y="181" width="6.6801%" height="15" fill="rgb(231,73,38)"/><text x="12.9964%" y="191.50">unsafety_..</text></g><g><title>mir_built (10,074,689 samples, 5.75%)</title><rect x="13.6740%" y="165" width="5.7525%" height="15" fill="rgb(225,20,46)"/><text x="13.9240%" y="175.50">mir_bui..</text></g><g><title>mir_promoted (14,947,705 samples, 8.53%)</title><rect x="11.0411%" y="213" width="8.5349%" height="15" fill="rgb(210,31,41)"/><text x="11.2911%" y="223.50">mir_promoted</text></g><g><title>mir_const_qualif (261,823 samples, 0.15%)</title><rect x="19.4265%" y="197" width="0.1495%" height="15" fill="rgb(221,200,47)"/><text x="19.6765%" y="207.50"></text></g><g><title>mir_const (187,153 samples, 0.11%)</title><rect x="19.4692%" y="181" width="0.1069%" height="15" fill="rgb(226,26,5)"/><text x="19.7192%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (443,106 samples, 0.25%)</title><rect x="19.5760%" y="213" width="0.2530%" height="15" fill="rgb(249,33,26)"/><text x="19.8260%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (337,223 samples, 0.19%)</title><rect x="19.8290%" y="213" width="0.1925%" height="15" fill="rgb(235,183,28)"/><text x="20.0790%" y="223.50"></text></g><g><title>normalize_projection_ty (220,372 samples, 0.13%)</title><rect x="19.8958%" y="197" width="0.1258%" height="15" fill="rgb(221,5,38)"/><text x="20.1458%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,044,242 samples, 0.60%)</title><rect x="20.0350%" y="213" width="0.5962%" height="15" fill="rgb(247,18,42)"/><text x="20.2850%" y="223.50"></text></g><g><title>MIR_borrow_checking (34,945,929 samples, 19.95%)</title><rect x="0.6786%" y="245" width="19.9537%" height="15" fill="rgb(241,131,45)"/><text x="0.9286%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,814,829 samples, 19.88%)</title><rect x="0.7534%" y="229" width="19.8788%" height="15" fill="rgb(249,31,29)"/><text x="1.0034%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (187,042 samples, 0.11%)</title><rect x="20.6322%" y="245" width="0.1068%" height="15" fill="rgb(225,111,53)"/><text x="20.8822%" y="255.50"></text></g><g><title>hir_module_items (205,113 samples, 0.12%)</title><rect x="20.7390%" y="245" width="0.1171%" height="15" fill="rgb(238,160,17)"/><text x="20.9890%" y="255.50"></text></g><g><title>codegen_fn_attrs (314,283 samples, 0.18%)</title><rect x="21.0531%" y="213" width="0.1795%" height="15" fill="rgb(214,148,48)"/><text x="21.3031%" y="223.50"></text></g><g><title>check_mod_attrs (638,588 samples, 0.36%)</title><rect x="20.8680%" y="229" width="0.3646%" height="15" fill="rgb(232,36,49)"/><text x="21.1180%" y="239.50"></text></g><g><title>lookup_deprecation_entry (195,732 samples, 0.11%)</title><rect x="21.5198%" y="213" width="0.1118%" height="15" fill="rgb(209,103,24)"/><text x="21.7698%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (551,266 samples, 0.31%)</title><rect x="21.3803%" y="229" width="0.3148%" height="15" fill="rgb(229,88,8)"/><text x="21.6303%" y="239.50"></text></g><g><title>misc_checking_1 (1,517,007 samples, 0.87%)</title><rect x="20.8565%" y="245" width="0.8662%" height="15" fill="rgb(213,181,19)"/><text x="21.1065%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (749,379 samples, 0.43%)</title><rect x="21.7236%" y="229" width="0.4279%" height="15" fill="rgb(254,191,54)"/><text x="21.9736%" y="239.50"></text></g><g><title>check_mod_liveness (592,856 samples, 0.34%)</title><rect x="21.8130%" y="213" width="0.3385%" height="15" fill="rgb(241,83,37)"/><text x="22.0630%" y="223.50"></text></g><g><title>misc_checking_2 (1,407,156 samples, 0.80%)</title><rect x="21.7227%" y="245" width="0.8035%" height="15" fill="rgb(233,36,39)"/><text x="21.9727%" y="255.50"></text></g><g><title>match_checking (656,157 samples, 0.37%)</title><rect x="22.1515%" y="229" width="0.3747%" height="15" fill="rgb(226,3,54)"/><text x="22.4015%" y="239.50"></text></g><g><title>check_match (625,947 samples, 0.36%)</title><rect x="22.1687%" y="213" width="0.3574%" height="15" fill="rgb(245,192,40)"/><text x="22.4187%" y="223.50"></text></g><g><title>check_private_in_public (265,553 samples, 0.15%)</title><rect x="22.5322%" y="229" width="0.1516%" height="15" fill="rgb(238,167,29)"/><text x="22.7822%" y="239.50"></text></g><g><title>death_checking (629,957 samples, 0.36%)</title><rect x="22.6838%" y="229" width="0.3597%" height="15" fill="rgb(232,182,51)"/><text x="22.9338%" y="239.50"></text></g><g><title>param_env (194,532 samples, 0.11%)</title><rect x="23.7882%" y="197" width="0.1111%" height="15" fill="rgb(231,60,39)"/><text x="24.0382%" y="207.50"></text></g><g><title>crate_lints (2,888,213 samples, 1.65%)</title><rect x="23.0444%" y="213" width="1.6491%" height="15" fill="rgb(208,69,12)"/><text x="23.2944%" y="223.50"></text></g><g><title>type_of (1,375,087 samples, 0.79%)</title><rect x="23.9084%" y="197" width="0.7852%" height="15" fill="rgb(235,93,37)"/><text x="24.1584%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (903,170 samples, 0.52%)</title><rect x="24.1778%" y="181" width="0.5157%" height="15" fill="rgb(213,116,39)"/><text x="24.4278%" y="191.50"></text></g><g><title>lint_checking (3,609,471 samples, 2.06%)</title><rect x="23.0435%" y="229" width="2.0610%" height="15" fill="rgb(222,207,29)"/><text x="23.2935%" y="239.50">l..</text></g><g><title>module_lints (719,718 samples, 0.41%)</title><rect x="24.6935%" y="213" width="0.4109%" height="15" fill="rgb(206,96,30)"/><text x="24.9435%" y="223.50"></text></g><g><title>lint_mod (716,288 samples, 0.41%)</title><rect x="24.6955%" y="197" width="0.4090%" height="15" fill="rgb(218,138,4)"/><text x="24.9455%" y="207.50"></text></g><g><title>privacy_access_levels (292,473 samples, 0.17%)</title><rect x="25.1045%" y="229" width="0.1670%" height="15" fill="rgb(250,191,14)"/><text x="25.3545%" y="239.50"></text></g><g><title>privacy_checking_modules (1,181,603 samples, 0.67%)</title><rect x="25.2715%" y="229" width="0.6747%" height="15" fill="rgb(239,60,40)"/><text x="25.5215%" y="239.50"></text></g><g><title>check_mod_privacy (1,179,523 samples, 0.67%)</title><rect x="25.2727%" y="213" width="0.6735%" height="15" fill="rgb(206,27,48)"/><text x="25.5227%" y="223.50"></text></g><g><title>misc_checking_3 (6,012,157 samples, 3.43%)</title><rect x="22.5261%" y="245" width="3.4329%" height="15" fill="rgb(225,35,8)"/><text x="22.7761%" y="255.50">mis..</text></g><g><title>impl_trait_ref (208,511 samples, 0.12%)</title><rect x="26.1247%" y="149" width="0.1191%" height="15" fill="rgb(250,213,24)"/><text x="26.3747%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (186,381 samples, 0.11%)</title><rect x="26.1373%" y="133" width="0.1064%" height="15" fill="rgb(247,123,22)"/><text x="26.3873%" y="143.50"></text></g><g><title>adt_destructor (398,544 samples, 0.23%)</title><rect x="26.0372%" y="197" width="0.2276%" height="15" fill="rgb(231,138,38)"/><text x="26.2872%" y="207.50"></text></g><g><title>coherent_trait (389,234 samples, 0.22%)</title><rect x="26.0425%" y="181" width="0.2222%" height="15" fill="rgb(231,145,46)"/><text x="26.2925%" y="191.50"></text></g><g><title>specialization_graph_of (386,754 samples, 0.22%)</title><rect x="26.0440%" y="165" width="0.2208%" height="15" fill="rgb(251,118,11)"/><text x="26.2940%" y="175.50"></text></g><g><title>impl_parent (2,458,708 samples, 1.40%)</title><rect x="28.6511%" y="181" width="1.4039%" height="15" fill="rgb(217,147,25)"/><text x="28.9011%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,456,158 samples, 0.83%)</title><rect x="29.2235%" y="165" width="0.8314%" height="15" fill="rgb(247,81,37)"/><text x="29.4735%" y="175.50"></text></g><g><title>impl_trait_ref (5,542,582 samples, 3.16%)</title><rect x="30.0550%" y="181" width="3.1647%" height="15" fill="rgb(209,12,38)"/><text x="30.3050%" y="191.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,084,941 samples, 2.33%)</title><rect x="30.8873%" y="165" width="2.3324%" height="15" fill="rgb(227,1,9)"/><text x="31.1373%" y="175.50">m..</text></g><g><title>coherent_trait (13,489,821 samples, 7.70%)</title><rect x="26.0080%" y="213" width="7.7025%" height="15" fill="rgb(248,47,43)"/><text x="26.2580%" y="223.50">coherent_tr..</text></g><g><title>specialization_graph_of (12,723,712 samples, 7.27%)</title><rect x="26.4454%" y="197" width="7.2651%" height="15" fill="rgb(221,10,30)"/><text x="26.6954%" y="207.50">specializa..</text></g><g><title>trait_impls_of (857,880 samples, 0.49%)</title><rect x="33.2207%" y="181" width="0.4898%" height="15" fill="rgb(210,229,1)"/><text x="33.4707%" y="191.50"></text></g><g><title>implementations_of_trait (234,894 samples, 0.13%)</title><rect x="33.5764%" y="165" width="0.1341%" height="15" fill="rgb(222,148,37)"/><text x="33.8264%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (180,213 samples, 0.10%)</title><rect x="33.6076%" y="149" width="0.1029%" height="15" fill="rgb(234,67,33)"/><text x="33.8576%" y="159.50"></text></g><g><title>coherence_checking (13,580,911 samples, 7.75%)</title><rect x="25.9975%" y="229" width="7.7545%" height="15" fill="rgb(247,98,35)"/><text x="26.2475%" y="239.50">coherence_c..</text></g><g><title>adt_def (421,334 samples, 0.24%)</title><rect x="54.4220%" y="165" width="0.2406%" height="15" fill="rgb(247,138,52)"/><text x="54.6720%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (419,894 samples, 0.24%)</title><rect x="54.4228%" y="149" width="0.2398%" height="15" fill="rgb(213,79,30)"/><text x="54.6728%" y="159.50"></text></g><g><title>item_attrs (403,024 samples, 0.23%)</title><rect x="54.4325%" y="133" width="0.2301%" height="15" fill="rgb(246,177,23)"/><text x="54.6825%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (401,344 samples, 0.23%)</title><rect x="54.4334%" y="117" width="0.2292%" height="15" fill="rgb(230,62,27)"/><text x="54.6834%" y="127.50"></text></g><g><title>adt_sized_constraint (441,924 samples, 0.25%)</title><rect x="54.4144%" y="181" width="0.2523%" height="15" fill="rgb(216,154,8)"/><text x="54.6644%" y="191.50"></text></g><g><title>associated_item (762,840 samples, 0.44%)</title><rect x="54.8264%" y="165" width="0.4356%" height="15" fill="rgb(244,35,45)"/><text x="55.0764%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (596,809 samples, 0.34%)</title><rect x="54.9212%" y="149" width="0.3408%" height="15" fill="rgb(251,115,12)"/><text x="55.1712%" y="159.50"></text></g><g><title>associated_items (1,096,693 samples, 0.63%)</title><rect x="54.6693%" y="181" width="0.6262%" height="15" fill="rgb(240,54,50)"/><text x="54.9193%" y="191.50"></text></g><g><title>adt_dtorck_constraint (273,583 samples, 0.16%)</title><rect x="55.4780%" y="165" width="0.1562%" height="15" fill="rgb(233,84,52)"/><text x="55.7280%" y="175.50"></text></g><g><title>dropck_outlives (479,915 samples, 0.27%)</title><rect x="55.3639%" y="181" width="0.2740%" height="15" fill="rgb(207,117,47)"/><text x="55.6139%" y="191.50"></text></g><g><title>generics_of (559,117 samples, 0.32%)</title><rect x="57.6908%" y="165" width="0.3192%" height="15" fill="rgb(249,43,39)"/><text x="57.9408%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (427,927 samples, 0.24%)</title><rect x="57.7657%" y="149" width="0.2443%" height="15" fill="rgb(209,38,44)"/><text x="58.0157%" y="159.50"></text></g><g><title>impl_trait_ref (862,440 samples, 0.49%)</title><rect x="58.0759%" y="165" width="0.4924%" height="15" fill="rgb(236,212,23)"/><text x="58.3259%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (736,939 samples, 0.42%)</title><rect x="58.1475%" y="149" width="0.4208%" height="15" fill="rgb(242,79,21)"/><text x="58.3975%" y="159.50"></text></g><g><title>predicates_of (406,144 samples, 0.23%)</title><rect x="58.5935%" y="165" width="0.2319%" height="15" fill="rgb(211,96,35)"/><text x="58.8435%" y="175.50"></text></g><g><title>predicates_defined_on (229,592 samples, 0.13%)</title><rect x="58.6943%" y="149" width="0.1311%" height="15" fill="rgb(253,215,40)"/><text x="58.9443%" y="159.50"></text></g><g><title>specializes (981,984 samples, 0.56%)</title><rect x="58.8254%" y="165" width="0.5607%" height="15" fill="rgb(211,81,21)"/><text x="59.0754%" y="175.50"></text></g><g><title>param_env (566,830 samples, 0.32%)</title><rect x="59.0625%" y="149" width="0.3237%" height="15" fill="rgb(208,190,38)"/><text x="59.3125%" y="159.50"></text></g><g><title>def_span (231,377 samples, 0.13%)</title><rect x="59.2540%" y="133" width="0.1321%" height="15" fill="rgb(235,213,38)"/><text x="59.5040%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (203,025 samples, 0.12%)</title><rect x="59.2702%" y="117" width="0.1159%" height="15" fill="rgb(237,122,38)"/><text x="59.5202%" y="127.50"></text></g><g><title>trait_impls_of (575,345 samples, 0.33%)</title><rect x="59.3976%" y="165" width="0.3285%" height="15" fill="rgb(244,218,35)"/><text x="59.6476%" y="175.50"></text></g><g><title>implementations_of_trait (240,873 samples, 0.14%)</title><rect x="59.5886%" y="149" width="0.1375%" height="15" fill="rgb(240,68,47)"/><text x="59.8386%" y="159.50"></text></g><g><title>evaluate_obligation (7,185,963 samples, 4.10%)</title><rect x="55.6379%" y="181" width="4.1031%" height="15" fill="rgb(210,16,53)"/><text x="55.8879%" y="191.50">eval..</text></g><g><title>fn_sig (214,594 samples, 0.12%)</title><rect x="59.7652%" y="181" width="0.1225%" height="15" fill="rgb(235,124,12)"/><text x="60.0152%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (185,794 samples, 0.11%)</title><rect x="59.7816%" y="165" width="0.1061%" height="15" fill="rgb(224,169,11)"/><text x="60.0316%" y="175.50"></text></g><g><title>generics_of (182,182 samples, 0.10%)</title><rect x="59.8877%" y="181" width="0.1040%" height="15" fill="rgb(250,166,2)"/><text x="60.1377%" y="191.50"></text></g><g><title>item_attrs (360,053 samples, 0.21%)</title><rect x="60.0888%" y="181" width="0.2056%" height="15" fill="rgb(242,216,29)"/><text x="60.3388%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (346,833 samples, 0.20%)</title><rect x="60.0963%" y="165" width="0.1980%" height="15" fill="rgb(230,116,27)"/><text x="60.3463%" y="175.50"></text></g><g><title>evaluate_obligation (298,072 samples, 0.17%)</title><rect x="60.5047%" y="165" width="0.1702%" height="15" fill="rgb(228,99,48)"/><text x="60.7547%" y="175.50"></text></g><g><title>method_autoderef_steps (577,455 samples, 0.33%)</title><rect x="60.3639%" y="181" width="0.3297%" height="15" fill="rgb(253,11,6)"/><text x="60.6139%" y="191.50"></text></g><g><title>predicates_of (543,988 samples, 0.31%)</title><rect x="60.7298%" y="181" width="0.3106%" height="15" fill="rgb(247,143,39)"/><text x="60.9798%" y="191.50"></text></g><g><title>predicates_defined_on (371,786 samples, 0.21%)</title><rect x="60.8281%" y="165" width="0.2123%" height="15" fill="rgb(236,97,10)"/><text x="61.0781%" y="175.50"></text></g><g><title>evaluate_obligation (310,004 samples, 0.18%)</title><rect x="61.9607%" y="165" width="0.1770%" height="15" fill="rgb(233,208,19)"/><text x="62.2107%" y="175.50"></text></g><g><title>typeck (2,060,183 samples, 1.18%)</title><rect x="61.1284%" y="181" width="1.1763%" height="15" fill="rgb(216,164,2)"/><text x="61.3784%" y="191.50"></text></g><g><title>item_bodies_checking (50,027,319 samples, 28.56%)</title><rect x="33.7710%" y="229" width="28.5649%" height="15" fill="rgb(220,129,5)"/><text x="34.0210%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,022,889 samples, 28.56%)</title><rect x="33.7735%" y="213" width="28.5624%" height="15" fill="rgb(242,17,10)"/><text x="34.0235%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (49,946,019 samples, 28.52%)</title><rect x="33.8174%" y="197" width="28.5185%" height="15" fill="rgb(242,107,0)"/><text x="34.0674%" y="207.50">typeck</text></g><g><title>generics_of (487,864 samples, 0.28%)</title><rect x="64.4340%" y="165" width="0.2786%" height="15" fill="rgb(251,28,31)"/><text x="64.6840%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (348,644 samples, 0.20%)</title><rect x="64.5135%" y="149" width="0.1991%" height="15" fill="rgb(233,223,10)"/><text x="64.7635%" y="159.50"></text></g><g><title>impl_trait_ref (701,670 samples, 0.40%)</title><rect x="64.7776%" y="165" width="0.4006%" height="15" fill="rgb(215,21,27)"/><text x="65.0276%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (556,638 samples, 0.32%)</title><rect x="64.8605%" y="149" width="0.3178%" height="15" fill="rgb(232,23,21)"/><text x="65.1105%" y="159.50"></text></g><g><title>predicates_of (680,236 samples, 0.39%)</title><rect x="65.1990%" y="165" width="0.3884%" height="15" fill="rgb(244,5,23)"/><text x="65.4490%" y="175.50"></text></g><g><title>predicates_defined_on (372,903 samples, 0.21%)</title><rect x="65.3745%" y="149" width="0.2129%" height="15" fill="rgb(226,81,46)"/><text x="65.6245%" y="159.50"></text></g><g><title>specializes (2,222,091 samples, 1.27%)</title><rect x="65.5874%" y="165" width="1.2688%" height="15" fill="rgb(247,70,30)"/><text x="65.8374%" y="175.50"></text></g><g><title>param_env (1,168,701 samples, 0.67%)</title><rect x="66.1889%" y="149" width="0.6673%" height="15" fill="rgb(212,68,19)"/><text x="66.4389%" y="159.50"></text></g><g><title>def_span (564,999 samples, 0.32%)</title><rect x="66.5336%" y="133" width="0.3226%" height="15" fill="rgb(240,187,13)"/><text x="66.7836%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (504,849 samples, 0.29%)</title><rect x="66.5680%" y="117" width="0.2883%" height="15" fill="rgb(223,113,26)"/><text x="66.8180%" y="127.50"></text></g><g><title>evaluate_obligation (6,412,911 samples, 3.66%)</title><rect x="63.2525%" y="181" width="3.6617%" height="15" fill="rgb(206,192,2)"/><text x="63.5025%" y="191.50">eval..</text></g><g><title>item_types_checking (8,249,112 samples, 4.71%)</title><rect x="62.3359%" y="229" width="4.7101%" height="15" fill="rgb(241,108,4)"/><text x="62.5859%" y="239.50">item_..</text></g><g><title>check_mod_item_types (8,245,602 samples, 4.71%)</title><rect x="62.3379%" y="213" width="4.7081%" height="15" fill="rgb(247,173,49)"/><text x="62.5879%" y="223.50">check..</text></g><g><title>typeck (7,582,954 samples, 4.33%)</title><rect x="62.7163%" y="197" width="4.3298%" height="15" fill="rgb(224,114,35)"/><text x="62.9663%" y="207.50">typeck</text></g><g><title>fn_sig (284,924 samples, 0.16%)</title><rect x="67.2199%" y="197" width="0.1627%" height="15" fill="rgb(245,159,27)"/><text x="67.4699%" y="207.50"></text></g><g><title>named_region_map (384,454 samples, 0.22%)</title><rect x="67.4445%" y="181" width="0.2195%" height="15" fill="rgb(245,172,44)"/><text x="67.6945%" y="191.50"></text></g><g><title>resolve_lifetimes (370,603 samples, 0.21%)</title><rect x="67.4524%" y="165" width="0.2116%" height="15" fill="rgb(236,23,11)"/><text x="67.7024%" y="175.50"></text></g><g><title>lint_levels (217,632 samples, 0.12%)</title><rect x="67.5397%" y="149" width="0.1243%" height="15" fill="rgb(205,117,38)"/><text x="67.7897%" y="159.50"></text></g><g><title>generics_of (511,296 samples, 0.29%)</title><rect x="67.3826%" y="197" width="0.2919%" height="15" fill="rgb(237,72,25)"/><text x="67.6326%" y="207.50"></text></g><g><title>explicit_predicates_of (323,022 samples, 0.18%)</title><rect x="67.7870%" y="165" width="0.1844%" height="15" fill="rgb(244,70,9)"/><text x="68.0370%" y="175.50"></text></g><g><title>predicates_of (794,948 samples, 0.45%)</title><rect x="67.7082%" y="197" width="0.4539%" height="15" fill="rgb(217,125,39)"/><text x="67.9582%" y="207.50"></text></g><g><title>predicates_defined_on (740,587 samples, 0.42%)</title><rect x="67.7393%" y="181" width="0.4229%" height="15" fill="rgb(235,36,10)"/><text x="67.9893%" y="191.50"></text></g><g><title>inferred_outlives_of (333,973 samples, 0.19%)</title><rect x="67.9714%" y="165" width="0.1907%" height="15" fill="rgb(251,123,47)"/><text x="68.2214%" y="175.50"></text></g><g><title>inferred_outlives_crate (309,773 samples, 0.18%)</title><rect x="67.9852%" y="149" width="0.1769%" height="15" fill="rgb(221,13,13)"/><text x="68.2352%" y="159.50"></text></g><g><title>type_collecting (2,063,172 samples, 1.18%)</title><rect x="67.0475%" y="229" width="1.1780%" height="15" fill="rgb(238,131,9)"/><text x="67.2975%" y="239.50"></text></g><g><title>collect_mod_item_types (2,050,982 samples, 1.17%)</title><rect x="67.0544%" y="213" width="1.1711%" height="15" fill="rgb(211,50,8)"/><text x="67.3044%" y="223.50"></text></g><g><title>evaluate_obligation (354,555 samples, 0.20%)</title><rect x="69.3881%" y="197" width="0.2024%" height="15" fill="rgb(245,182,24)"/><text x="69.6381%" y="207.50"></text></g><g><title>param_env (277,642 samples, 0.16%)</title><rect x="69.6872%" y="197" width="0.1585%" height="15" fill="rgb(242,14,37)"/><text x="69.9372%" y="207.50"></text></g><g><title>region_scope_tree (767,927 samples, 0.44%)</title><rect x="69.8677%" y="197" width="0.4385%" height="15" fill="rgb(246,228,12)"/><text x="70.1177%" y="207.50"></text></g><g><title>check_impl_item_well_formed (3,530,199 samples, 2.02%)</title><rect x="68.3567%" y="213" width="2.0157%" height="15" fill="rgb(213,55,15)"/><text x="68.6067%" y="223.50">c..</text></g><g><title>adt_sized_constraint (293,482 samples, 0.17%)</title><rect x="71.2283%" y="197" width="0.1676%" height="15" fill="rgb(209,9,3)"/><text x="71.4783%" y="207.50"></text></g><g><title>mir_borrowck (407,014 samples, 0.23%)</title><rect x="71.6460%" y="117" width="0.2324%" height="15" fill="rgb(230,59,30)"/><text x="71.8960%" y="127.50"></text></g><g><title>mir_for_ctfe (550,986 samples, 0.31%)</title><rect x="71.5646%" y="149" width="0.3146%" height="15" fill="rgb(209,121,21)"/><text x="71.8146%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (508,065 samples, 0.29%)</title><rect x="71.5891%" y="133" width="0.2901%" height="15" fill="rgb(220,109,13)"/><text x="71.8391%" y="143.50"></text></g><g><title>eval_to_const_value_raw (183,832 samples, 0.10%)</title><rect x="72.0257%" y="69" width="0.1050%" height="15" fill="rgb(232,18,1)"/><text x="72.2757%" y="79.50"></text></g><g><title>eval_to_const_value_raw (182,242 samples, 0.10%)</title><rect x="72.0266%" y="53" width="0.1041%" height="15" fill="rgb(215,41,42)"/><text x="72.2766%" y="63.50"></text></g><g><title>eval_to_allocation_raw (177,472 samples, 0.10%)</title><rect x="72.0293%" y="37" width="0.1013%" height="15" fill="rgb(224,123,36)"/><text x="72.2793%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (192,022 samples, 0.11%)</title><rect x="72.0224%" y="85" width="0.1096%" height="15" fill="rgb(240,125,3)"/><text x="72.2724%" y="95.50"></text></g><g><title>eval_to_const_value_raw (763,469 samples, 0.44%)</title><rect x="71.8832%" y="133" width="0.4359%" height="15" fill="rgb(205,98,50)"/><text x="72.1332%" y="143.50"></text></g><g><title>eval_to_const_value_raw (762,499 samples, 0.44%)</title><rect x="71.8837%" y="117" width="0.4354%" height="15" fill="rgb(205,185,37)"/><text x="72.1337%" y="127.50"></text></g><g><title>eval_to_allocation_raw (761,499 samples, 0.43%)</title><rect x="71.8843%" y="101" width="0.4348%" height="15" fill="rgb(238,207,15)"/><text x="72.1343%" y="111.50"></text></g><g><title>typeck (327,674 samples, 0.19%)</title><rect x="72.1320%" y="85" width="0.1871%" height="15" fill="rgb(213,199,42)"/><text x="72.3820%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (774,419 samples, 0.44%)</title><rect x="71.8793%" y="149" width="0.4422%" height="15" fill="rgb(235,201,11)"/><text x="72.1293%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,728,100 samples, 0.99%)</title><rect x="71.3959%" y="197" width="0.9867%" height="15" fill="rgb(207,46,11)"/><text x="71.6459%" y="207.50"></text></g><g><title>eval_to_const_value_raw (1,713,630 samples, 0.98%)</title><rect x="71.4041%" y="181" width="0.9785%" height="15" fill="rgb(241,35,35)"/><text x="71.6541%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,711,940 samples, 0.98%)</title><rect x="71.4051%" y="165" width="0.9775%" height="15" fill="rgb(243,32,47)"/><text x="71.6551%" y="175.50"></text></g><g><title>param_env (270,242 samples, 0.15%)</title><rect x="72.5480%" y="197" width="0.1543%" height="15" fill="rgb(247,202,23)"/><text x="72.7980%" y="207.50"></text></g><g><title>analysis (126,798,816 samples, 72.40%)</title><rect x="0.4477%" y="261" width="72.4004%" height="15" fill="rgb(219,102,11)"/><text x="0.6977%" y="271.50">analysis</text></g><g><title>type_check_crate (82,119,567 samples, 46.89%)</title><rect x="25.9590%" y="245" width="46.8892%" height="15" fill="rgb(243,110,44)"/><text x="26.2090%" y="255.50">type_check_crate</text></g><g><title>wf_checking (8,090,081 samples, 4.62%)</title><rect x="68.2288%" y="229" width="4.6193%" height="15" fill="rgb(222,74,54)"/><text x="68.4788%" y="239.50">wf_ch..</text></g><g><title>check_item_well_formed (4,336,008 samples, 2.48%)</title><rect x="70.3724%" y="213" width="2.4758%" height="15" fill="rgb(216,99,12)"/><text x="70.6224%" y="223.50">ch..</text></g><g><title>codegen_crate (531,046 samples, 0.30%)</title><rect x="72.8540%" y="261" width="0.3032%" height="15" fill="rgb(226,22,26)"/><text x="73.1040%" y="271.50"></text></g><g><title>metadata_load_macro (248,574 samples, 0.14%)</title><rect x="88.8629%" y="213" width="0.1419%" height="15" fill="rgb(217,163,10)"/><text x="89.1129%" y="223.50"></text></g><g><title>metadata_register_crate (2,978,573 samples, 1.70%)</title><rect x="89.0048%" y="213" width="1.7007%" height="15" fill="rgb(213,25,53)"/><text x="89.2548%" y="223.50"></text></g><g><title>metadata_register_crate (1,011,269 samples, 0.58%)</title><rect x="90.1281%" y="197" width="0.5774%" height="15" fill="rgb(252,105,26)"/><text x="90.3781%" y="207.50"></text></g><g><title>macro_expand_crate (30,846,395 samples, 17.61%)</title><rect x="73.4717%" y="245" width="17.6129%" height="15" fill="rgb(220,39,43)"/><text x="73.7217%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (30,831,965 samples, 17.60%)</title><rect x="73.4800%" y="229" width="17.6046%" height="15" fill="rgb(229,68,48)"/><text x="73.7300%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (663,867 samples, 0.38%)</title><rect x="90.7055%" y="213" width="0.3791%" height="15" fill="rgb(252,8,32)"/><text x="90.9555%" y="223.50"></text></g><g><title>late_resolve_crate (2,648,480 samples, 1.51%)</title><rect x="91.2145%" y="229" width="1.5122%" height="15" fill="rgb(223,20,43)"/><text x="91.4645%" y="239.50"></text></g><g><title>configure_and_expand (34,431,255 samples, 19.66%)</title><rect x="73.1573%" y="261" width="19.6598%" height="15" fill="rgb(229,81,49)"/><text x="73.4073%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,937,703 samples, 1.68%)</title><rect x="91.1397%" y="245" width="1.6774%" height="15" fill="rgb(236,28,36)"/><text x="91.3897%" y="255.50"></text></g><g><title>drop_ast (300,863 samples, 0.17%)</title><rect x="92.8170%" y="261" width="0.1718%" height="15" fill="rgb(249,185,26)"/><text x="93.0670%" y="271.50"></text></g><g><title>early_lint_checks (614,207 samples, 0.35%)</title><rect x="93.0018%" y="261" width="0.3507%" height="15" fill="rgb(249,174,33)"/><text x="93.2518%" y="271.50"></text></g><g><title>free_global_ctxt (4,103,356 samples, 2.34%)</title><rect x="93.3525%" y="261" width="2.3430%" height="15" fill="rgb(233,201,37)"/><text x="93.6025%" y="271.50">f..</text></g><g><title>generate_crate_metadata (1,263,124 samples, 0.72%)</title><rect x="95.6954%" y="261" width="0.7212%" height="15" fill="rgb(221,78,26)"/><text x="95.9454%" y="271.50"></text></g><g><title>hir_lowering (4,128,046 samples, 2.36%)</title><rect x="96.4166%" y="261" width="2.3571%" height="15" fill="rgb(250,127,30)"/><text x="96.6666%" y="271.50">h..</text></g><g><title>parse_crate (397,084 samples, 0.23%)</title><rect x="98.8038%" y="261" width="0.2267%" height="15" fill="rgb(230,49,44)"/><text x="99.0538%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (1,148,613 samples, 0.66%)</title><rect x="99.1269%" y="261" width="0.6558%" height="15" fill="rgb(229,67,23)"/><text x="99.3769%" y="271.50"></text></g><g><title>all (175,135,467 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (175,135,467 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (292,674 samples, 0.17%)</title><rect x="99.8329%" y="261" width="0.1671%" height="15" fill="rgb(238,154,13)"/><text x="100.0829%" y="271.50"></text></g></svg></svg>