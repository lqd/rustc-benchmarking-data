<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (56,281,192 samples, 0.22%)</title><rect x="5.1830%" y="133" width="0.2150%" height="15" fill="rgb(227,0,7)"/><text x="5.4330%" y="143.50"></text></g><g><title>mir_promoted (89,429,425 samples, 0.34%)</title><rect x="5.9653%" y="117" width="0.3417%" height="15" fill="rgb(217,0,24)"/><text x="6.2153%" y="127.50"></text></g><g><title>mir_const_qualif_const_arg (75,023,639 samples, 0.29%)</title><rect x="6.0204%" y="101" width="0.2866%" height="15" fill="rgb(221,193,54)"/><text x="6.2704%" y="111.50"></text></g><g><title>mir_const (62,900,148 samples, 0.24%)</title><rect x="6.0667%" y="85" width="0.2403%" height="15" fill="rgb(248,212,6)"/><text x="6.3167%" y="95.50"></text></g><g><title>unsafety_check_result_for_const_arg (42,672,914 samples, 0.16%)</title><rect x="6.1440%" y="69" width="0.1630%" height="15" fill="rgb(208,68,35)"/><text x="6.3940%" y="79.50"></text></g><g><title>mir_built (37,200,922 samples, 0.14%)</title><rect x="6.1649%" y="53" width="0.1421%" height="15" fill="rgb(232,128,0)"/><text x="6.4149%" y="63.50"></text></g><g><title>mir_borrowck_const_arg (225,910,519 samples, 0.86%)</title><rect x="5.4466%" y="133" width="0.8631%" height="15" fill="rgb(207,160,47)"/><text x="5.6966%" y="143.50"></text></g><g><title>is_copy_raw (100,466,121 samples, 0.38%)</title><rect x="7.8900%" y="53" width="0.3838%" height="15" fill="rgb(228,23,34)"/><text x="8.1400%" y="63.50"></text></g><g><title>evaluate_obligation (75,945,239 samples, 0.29%)</title><rect x="7.9837%" y="37" width="0.2902%" height="15" fill="rgb(218,30,26)"/><text x="8.2337%" y="47.50"></text></g><g><title>needs_drop_raw (119,541,650 samples, 0.46%)</title><rect x="7.8474%" y="69" width="0.4567%" height="15" fill="rgb(220,122,19)"/><text x="8.0974%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (191,455,482 samples, 0.73%)</title><rect x="8.3791%" y="53" width="0.7315%" height="15" fill="rgb(250,228,42)"/><text x="8.6291%" y="63.50"></text></g><g><title>resolve_instance (221,202,426 samples, 0.85%)</title><rect x="8.3043%" y="69" width="0.8451%" height="15" fill="rgb(240,193,28)"/><text x="8.5543%" y="79.50"></text></g><g><title>thir_body (72,439,501 samples, 0.28%)</title><rect x="9.1556%" y="69" width="0.2768%" height="15" fill="rgb(216,20,37)"/><text x="9.4056%" y="79.50"></text></g><g><title>mir_const (784,763,706 samples, 3.00%)</title><rect x="6.5117%" y="117" width="2.9983%" height="15" fill="rgb(206,188,39)"/><text x="6.7617%" y="127.50">mir..</text></g><g><title>unsafety_check_result (727,205,203 samples, 2.78%)</title><rect x="6.7316%" y="101" width="2.7784%" height="15" fill="rgb(217,207,13)"/><text x="6.9816%" y="111.50">un..</text></g><g><title>mir_built (690,753,728 samples, 2.64%)</title><rect x="6.8709%" y="85" width="2.6391%" height="15" fill="rgb(231,73,38)"/><text x="7.1209%" y="95.50">mi..</text></g><g><title>mir_const_qualif (36,100,364 samples, 0.14%)</title><rect x="9.5100%" y="117" width="0.1379%" height="15" fill="rgb(225,20,46)"/><text x="9.7600%" y="127.50"></text></g><g><title>mir_promoted (873,738,462 samples, 3.34%)</title><rect x="6.3097%" y="133" width="3.3382%" height="15" fill="rgb(210,31,41)"/><text x="6.5597%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (99,812,004 samples, 0.38%)</title><rect x="9.6485%" y="133" width="0.3813%" height="15" fill="rgb(221,200,47)"/><text x="9.8985%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (125,712,053 samples, 0.48%)</title><rect x="10.0299%" y="133" width="0.4803%" height="15" fill="rgb(226,26,5)"/><text x="10.2799%" y="143.50"></text></g><g><title>normalize_projection_ty (62,532,141 samples, 0.24%)</title><rect x="10.2713%" y="117" width="0.2389%" height="15" fill="rgb(249,33,26)"/><text x="10.5213%" y="127.50"></text></g><g><title>type_op_normalize_predicate (41,796,288 samples, 0.16%)</title><rect x="10.5102%" y="133" width="0.1597%" height="15" fill="rgb(235,183,28)"/><text x="10.7602%" y="143.50"></text></g><g><title>type_op_normalize_ty (95,151,422 samples, 0.36%)</title><rect x="10.6699%" y="133" width="0.3635%" height="15" fill="rgb(221,5,38)"/><text x="10.9199%" y="143.50"></text></g><g><title>normalize_projection_ty (40,713,729 samples, 0.16%)</title><rect x="10.8779%" y="117" width="0.1556%" height="15" fill="rgb(247,18,42)"/><text x="11.1279%" y="127.50"></text></g><g><title>type_op_prove_predicate (379,720,552 samples, 1.45%)</title><rect x="11.0334%" y="133" width="1.4508%" height="15" fill="rgb(241,131,45)"/><text x="11.2834%" y="143.50"></text></g><g><title>MIR_borrow_checking (3,247,634,615 samples, 12.41%)</title><rect x="0.0765%" y="165" width="12.4081%" height="15" fill="rgb(249,31,29)"/><text x="0.3265%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (3,231,597,960 samples, 12.35%)</title><rect x="0.1377%" y="149" width="12.3468%" height="15" fill="rgb(225,111,53)"/><text x="0.3877%" y="159.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (35,259,707 samples, 0.13%)</title><rect x="12.5917%" y="133" width="0.1347%" height="15" fill="rgb(238,160,17)"/><text x="12.8417%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (52,885,853 samples, 0.20%)</title><rect x="12.5299%" y="149" width="0.2021%" height="15" fill="rgb(214,148,48)"/><text x="12.7799%" y="159.50"></text></g><g><title>MIR_effect_checking (66,497,166 samples, 0.25%)</title><rect x="12.4845%" y="165" width="0.2541%" height="15" fill="rgb(232,36,49)"/><text x="12.7345%" y="175.50"></text></g><g><title>check_mod_attrs (33,198,420 samples, 0.13%)</title><rect x="12.7938%" y="149" width="0.1268%" height="15" fill="rgb(209,103,24)"/><text x="13.0438%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (26,302,464 samples, 0.10%)</title><rect x="13.0140%" y="149" width="0.1005%" height="15" fill="rgb(229,88,8)"/><text x="13.2640%" y="159.50"></text></g><g><title>misc_checking_1 (87,103,307 samples, 0.33%)</title><rect x="12.7925%" y="165" width="0.3328%" height="15" fill="rgb(213,181,19)"/><text x="13.0425%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (40,797,337 samples, 0.16%)</title><rect x="13.1253%" y="149" width="0.1559%" height="15" fill="rgb(254,191,54)"/><text x="13.3753%" y="159.50"></text></g><g><title>check_mod_liveness (34,065,348 samples, 0.13%)</title><rect x="13.1510%" y="133" width="0.1302%" height="15" fill="rgb(241,83,37)"/><text x="13.4010%" y="143.50"></text></g><g><title>misc_checking_2 (83,477,786 samples, 0.32%)</title><rect x="13.1253%" y="165" width="0.3189%" height="15" fill="rgb(233,36,39)"/><text x="13.3753%" y="175.50"></text></g><g><title>match_checking (42,676,549 samples, 0.16%)</title><rect x="13.2812%" y="149" width="0.1631%" height="15" fill="rgb(226,3,54)"/><text x="13.5312%" y="159.50"></text></g><g><title>check_match (36,970,657 samples, 0.14%)</title><rect x="13.3030%" y="133" width="0.1413%" height="15" fill="rgb(245,192,40)"/><text x="13.5530%" y="143.50"></text></g><g><title>check_private_in_public (32,336,694 samples, 0.12%)</title><rect x="13.4444%" y="149" width="0.1235%" height="15" fill="rgb(238,167,29)"/><text x="13.6944%" y="159.50"></text></g><g><title>death_checking (39,142,028 samples, 0.15%)</title><rect x="13.5679%" y="149" width="0.1495%" height="15" fill="rgb(232,182,51)"/><text x="13.8179%" y="159.50"></text></g><g><title>crate_lints (50,703,368 samples, 0.19%)</title><rect x="13.7175%" y="133" width="0.1937%" height="15" fill="rgb(231,60,39)"/><text x="13.9675%" y="143.50"></text></g><g><title>lint_checking (90,731,557 samples, 0.35%)</title><rect x="13.7174%" y="149" width="0.3467%" height="15" fill="rgb(208,69,12)"/><text x="13.9674%" y="159.50"></text></g><g><title>module_lints (40,023,299 samples, 0.15%)</title><rect x="13.9112%" y="133" width="0.1529%" height="15" fill="rgb(235,93,37)"/><text x="14.1612%" y="143.50"></text></g><g><title>lint_mod (39,893,959 samples, 0.15%)</title><rect x="13.9117%" y="117" width="0.1524%" height="15" fill="rgb(213,116,39)"/><text x="14.1617%" y="127.50"></text></g><g><title>privacy_access_levels (40,368,752 samples, 0.15%)</title><rect x="14.0641%" y="149" width="0.1542%" height="15" fill="rgb(222,207,29)"/><text x="14.3141%" y="159.50"></text></g><g><title>privacy_checking_modules (119,474,510 samples, 0.46%)</title><rect x="14.2183%" y="149" width="0.4565%" height="15" fill="rgb(206,96,30)"/><text x="14.4683%" y="159.50"></text></g><g><title>check_mod_privacy (119,335,898 samples, 0.46%)</title><rect x="14.2189%" y="133" width="0.4559%" height="15" fill="rgb(218,138,4)"/><text x="14.4689%" y="143.50"></text></g><g><title>misc_checking_3 (322,865,520 samples, 1.23%)</title><rect x="13.4442%" y="165" width="1.2336%" height="15" fill="rgb(250,191,14)"/><text x="13.6942%" y="175.50"></text></g><g><title>eval_to_const_value_raw (81,698,067 samples, 0.31%)</title><rect x="65.9675%" y="101" width="0.3121%" height="15" fill="rgb(239,60,40)"/><text x="66.2175%" y="111.50"></text></g><g><title>eval_to_const_value_raw (81,417,680 samples, 0.31%)</title><rect x="65.9685%" y="85" width="0.3111%" height="15" fill="rgb(206,27,48)"/><text x="66.2185%" y="95.50"></text></g><g><title>eval_to_allocation_raw (81,044,557 samples, 0.31%)</title><rect x="65.9700%" y="69" width="0.3096%" height="15" fill="rgb(225,35,8)"/><text x="66.2200%" y="79.50"></text></g><g><title>typeck_const_arg (31,528,891 samples, 0.12%)</title><rect x="66.1592%" y="53" width="0.1205%" height="15" fill="rgb(250,213,24)"/><text x="66.4092%" y="63.50"></text></g><g><title>coherent_trait (13,524,820,349 samples, 51.67%)</title><rect x="14.7127%" y="133" width="51.6736%" height="15" fill="rgb(247,123,22)"/><text x="14.9627%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (13,515,786,956 samples, 51.64%)</title><rect x="14.7472%" y="117" width="51.6391%" height="15" fill="rgb(231,138,38)"/><text x="14.9972%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (13,536,096,255 samples, 51.72%)</title><rect x="14.7121%" y="149" width="51.7167%" height="15" fill="rgb(231,145,46)"/><text x="14.9621%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (189,906,477 samples, 0.73%)</title><rect x="76.8255%" y="101" width="0.7256%" height="15" fill="rgb(251,118,11)"/><text x="77.0755%" y="111.50"></text></g><g><title>normalize_projection_ty (145,580,911 samples, 0.56%)</title><rect x="76.9948%" y="85" width="0.5562%" height="15" fill="rgb(217,147,25)"/><text x="77.2448%" y="95.50"></text></g><g><title>evaluate_obligation (477,449,637 samples, 1.82%)</title><rect x="77.5510%" y="101" width="1.8242%" height="15" fill="rgb(247,81,37)"/><text x="77.8010%" y="111.50">e..</text></g><g><title>evaluate_obligation (299,304,374 samples, 1.14%)</title><rect x="79.6302%" y="85" width="1.1435%" height="15" fill="rgb(209,12,38)"/><text x="79.8802%" y="95.50"></text></g><g><title>method_autoderef_steps (359,066,318 samples, 1.37%)</title><rect x="79.4020%" y="101" width="1.3719%" height="15" fill="rgb(227,1,9)"/><text x="79.6520%" y="111.50"></text></g><g><title>dropck_outlives (78,564,514 samples, 0.30%)</title><rect x="81.9698%" y="69" width="0.3002%" height="15" fill="rgb(248,47,43)"/><text x="82.2198%" y="79.50"></text></g><g><title>normalize_projection_ty (67,036,939 samples, 0.26%)</title><rect x="82.0138%" y="53" width="0.2561%" height="15" fill="rgb(221,10,30)"/><text x="82.2638%" y="63.50"></text></g><g><title>evaluate_obligation (37,336,733 samples, 0.14%)</title><rect x="82.2700%" y="69" width="0.1427%" height="15" fill="rgb(210,229,1)"/><text x="82.5200%" y="79.50"></text></g><g><title>method_autoderef_steps (70,486,168 samples, 0.27%)</title><rect x="82.4174%" y="69" width="0.2693%" height="15" fill="rgb(222,148,37)"/><text x="82.6674%" y="79.50"></text></g><g><title>evaluate_obligation (65,033,803 samples, 0.25%)</title><rect x="82.4383%" y="53" width="0.2485%" height="15" fill="rgb(234,67,33)"/><text x="82.6883%" y="63.50"></text></g><g><title>opt_const_param_of (500,539,023 samples, 1.91%)</title><rect x="80.7753%" y="101" width="1.9124%" height="15" fill="rgb(247,98,35)"/><text x="81.0253%" y="111.50">o..</text></g><g><title>typeck (496,927,973 samples, 1.90%)</title><rect x="80.7891%" y="85" width="1.8986%" height="15" fill="rgb(247,138,52)"/><text x="81.0391%" y="95.50">t..</text></g><g><title>evaluate_obligation (37,489,718 samples, 0.14%)</title><rect x="83.8775%" y="85" width="0.1432%" height="15" fill="rgb(213,79,30)"/><text x="84.1275%" y="95.50"></text></g><g><title>method_autoderef_steps (82,504,752 samples, 0.32%)</title><rect x="84.0569%" y="85" width="0.3152%" height="15" fill="rgb(246,177,23)"/><text x="84.3069%" y="95.50"></text></g><g><title>evaluate_obligation (67,608,733 samples, 0.26%)</title><rect x="84.1138%" y="69" width="0.2583%" height="15" fill="rgb(230,62,27)"/><text x="84.3638%" y="79.50"></text></g><g><title>typeck (428,107,941 samples, 1.64%)</title><rect x="82.7419%" y="101" width="1.6356%" height="15" fill="rgb(216,154,8)"/><text x="82.9919%" y="111.50"></text></g><g><title>param_env (38,170,465 samples, 0.15%)</title><rect x="84.6542%" y="85" width="0.1458%" height="15" fill="rgb(244,35,45)"/><text x="84.9042%" y="95.50"></text></g><g><title>typeck_const_arg (119,187,053 samples, 0.46%)</title><rect x="84.3776%" y="101" width="0.4554%" height="15" fill="rgb(251,115,12)"/><text x="84.6276%" y="111.50"></text></g><g><title>item_bodies_checking (4,813,631,925 samples, 18.39%)</title><rect x="66.4476%" y="149" width="18.3912%" height="15" fill="rgb(240,54,50)"/><text x="66.6976%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,813,627,755 samples, 18.39%)</title><rect x="66.4477%" y="133" width="18.3912%" height="15" fill="rgb(233,84,52)"/><text x="66.6977%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (4,797,176,631 samples, 18.33%)</title><rect x="66.5105%" y="117" width="18.3283%" height="15" fill="rgb(207,117,47)"/><text x="66.7605%" y="127.50">typeck</text></g><g><title>item_types_checking (494,358,344 samples, 1.89%)</title><rect x="84.8388%" y="149" width="1.8888%" height="15" fill="rgb(249,43,39)"/><text x="85.0888%" y="159.50">i..</text></g><g><title>check_mod_item_types (494,234,574 samples, 1.89%)</title><rect x="84.8393%" y="133" width="1.8883%" height="15" fill="rgb(209,38,44)"/><text x="85.0893%" y="143.50">c..</text></g><g><title>generics_of (41,252,259 samples, 0.16%)</title><rect x="86.8805%" y="117" width="0.1576%" height="15" fill="rgb(236,212,23)"/><text x="87.1305%" y="127.50"></text></g><g><title>explicit_predicates_of (74,479,427 samples, 0.28%)</title><rect x="87.1086%" y="85" width="0.2846%" height="15" fill="rgb(242,79,21)"/><text x="87.3586%" y="95.50"></text></g><g><title>predicates_of (90,581,024 samples, 0.35%)</title><rect x="87.0646%" y="117" width="0.3461%" height="15" fill="rgb(211,96,35)"/><text x="87.3146%" y="127.50"></text></g><g><title>predicates_defined_on (85,886,159 samples, 0.33%)</title><rect x="87.0825%" y="101" width="0.3281%" height="15" fill="rgb(253,215,40)"/><text x="87.3325%" y="111.50"></text></g><g><title>type_collecting (194,848,585 samples, 0.74%)</title><rect x="86.7283%" y="149" width="0.7444%" height="15" fill="rgb(211,81,21)"/><text x="86.9783%" y="159.50"></text></g><g><title>collect_mod_item_types (194,716,702 samples, 0.74%)</title><rect x="86.7288%" y="133" width="0.7439%" height="15" fill="rgb(208,190,38)"/><text x="86.9788%" y="143.50"></text></g><g><title>eval_to_const_value_raw (26,902,285 samples, 0.10%)</title><rect x="89.5777%" y="117" width="0.1028%" height="15" fill="rgb(235,213,38)"/><text x="89.8277%" y="127.50"></text></g><g><title>eval_to_const_value_raw (26,730,503 samples, 0.10%)</title><rect x="89.5784%" y="101" width="0.1021%" height="15" fill="rgb(237,122,38)"/><text x="89.8284%" y="111.50"></text></g><g><title>eval_to_allocation_raw (26,440,302 samples, 0.10%)</title><rect x="89.5795%" y="85" width="0.1010%" height="15" fill="rgb(244,218,35)"/><text x="89.8295%" y="95.50"></text></g><g><title>evaluate_obligation (31,693,746 samples, 0.12%)</title><rect x="89.6805%" y="117" width="0.1211%" height="15" fill="rgb(240,68,47)"/><text x="89.9305%" y="127.50"></text></g><g><title>implied_outlives_bounds (197,585,487 samples, 0.75%)</title><rect x="89.8106%" y="117" width="0.7549%" height="15" fill="rgb(210,16,53)"/><text x="90.0606%" y="127.50"></text></g><g><title>param_env (174,866,054 samples, 0.67%)</title><rect x="90.5660%" y="117" width="0.6681%" height="15" fill="rgb(235,124,12)"/><text x="90.8160%" y="127.50"></text></g><g><title>region_scope_tree (28,391,233 samples, 0.11%)</title><rect x="91.2365%" y="117" width="0.1085%" height="15" fill="rgb(224,169,11)"/><text x="91.4865%" y="127.50"></text></g><g><title>check_impl_item_well_formed (990,230,601 samples, 3.78%)</title><rect x="87.5644%" y="133" width="3.7833%" height="15" fill="rgb(250,166,2)"/><text x="87.8144%" y="143.50">chec..</text></g><g><title>evaluate_obligation (64,422,389 samples, 0.25%)</title><rect x="93.7639%" y="117" width="0.2461%" height="15" fill="rgb(242,216,29)"/><text x="94.0139%" y="127.50"></text></g><g><title>implied_outlives_bounds (199,687,892 samples, 0.76%)</title><rect x="94.0182%" y="117" width="0.7629%" height="15" fill="rgb(230,116,27)"/><text x="94.2682%" y="127.50"></text></g><g><title>param_env (184,626,940 samples, 0.71%)</title><rect x="94.7826%" y="117" width="0.7054%" height="15" fill="rgb(228,99,48)"/><text x="95.0326%" y="127.50"></text></g><g><title>check_item_well_formed (1,096,908,654 samples, 4.19%)</title><rect x="91.3477%" y="133" width="4.1909%" height="15" fill="rgb(253,11,6)"/><text x="91.5977%" y="143.50">check..</text></g><g><title>analysis (25,015,123,960 samples, 95.57%)</title><rect x="0.0090%" y="181" width="95.5740%" height="15" fill="rgb(247,143,39)"/><text x="0.2590%" y="191.50">analysis</text></g><g><title>type_check_crate (21,175,788,820 samples, 80.91%)</title><rect x="14.6778%" y="165" width="80.9052%" height="15" fill="rgb(236,97,10)"/><text x="14.9278%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,121,710,931 samples, 8.11%)</title><rect x="87.4767%" y="149" width="8.1063%" height="15" fill="rgb(233,208,19)"/><text x="87.7267%" y="159.50">wf_checking</text></g><g><title>macro_expand_crate (456,796,323 samples, 1.75%)</title><rect x="95.6857%" y="165" width="1.7453%" height="15" fill="rgb(216,164,2)"/><text x="95.9357%" y="175.50"></text></g><g><title>expand_crate (456,777,353 samples, 1.75%)</title><rect x="95.6857%" y="149" width="1.7452%" height="15" fill="rgb(220,129,5)"/><text x="95.9357%" y="159.50"></text></g><g><title>late_resolve_crate (109,016,893 samples, 0.42%)</title><rect x="97.4547%" y="149" width="0.4165%" height="15" fill="rgb(242,17,10)"/><text x="97.7047%" y="159.50"></text></g><g><title>configure_and_expand (616,782,217 samples, 2.36%)</title><rect x="95.5863%" y="181" width="2.3565%" height="15" fill="rgb(242,107,0)"/><text x="95.8363%" y="191.50">c..</text></g><g><title>resolve_crate (133,786,760 samples, 0.51%)</title><rect x="97.4317%" y="165" width="0.5112%" height="15" fill="rgb(251,28,31)"/><text x="97.6817%" y="175.50"></text></g><g><title>drop_ast (31,969,708 samples, 0.12%)</title><rect x="97.9428%" y="181" width="0.1221%" height="15" fill="rgb(233,223,10)"/><text x="98.1928%" y="191.50"></text></g><g><title>early_lint_checks (28,575,052 samples, 0.11%)</title><rect x="98.0651%" y="181" width="0.1092%" height="15" fill="rgb(215,21,27)"/><text x="98.3151%" y="191.50"></text></g><g><title>free_global_ctxt (52,409,027 samples, 0.20%)</title><rect x="98.1743%" y="181" width="0.2002%" height="15" fill="rgb(232,23,21)"/><text x="98.4243%" y="191.50"></text></g><g><title>generate_crate_metadata (137,116,047 samples, 0.52%)</title><rect x="98.3745%" y="181" width="0.5239%" height="15" fill="rgb(244,5,23)"/><text x="98.6245%" y="191.50"></text></g><g><title>hir_lowering (261,443,261 samples, 1.00%)</title><rect x="98.8984%" y="181" width="0.9989%" height="15" fill="rgb(226,81,46)"/><text x="99.1484%" y="191.50"></text></g><g><title>all (26,173,569,361 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (26,173,569,361 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>