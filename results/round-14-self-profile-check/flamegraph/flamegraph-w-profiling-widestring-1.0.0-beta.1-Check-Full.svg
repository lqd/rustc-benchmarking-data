<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,287,315 samples, 0.11%)</title><rect x="15.8734%" y="133" width="0.1069%" height="15" fill="rgb(227,0,7)"/><text x="16.1234%" y="143.50"></text></g><g><title>is_late_bound_map (1,557,218 samples, 0.13%)</title><rect x="15.9804%" y="133" width="0.1294%" height="15" fill="rgb(217,0,24)"/><text x="16.2304%" y="143.50"></text></g><g><title>item_attrs (1,440,410 samples, 0.12%)</title><rect x="19.1183%" y="69" width="0.1197%" height="15" fill="rgb(221,193,54)"/><text x="19.3683%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,394,610 samples, 0.12%)</title><rect x="19.1221%" y="53" width="0.1158%" height="15" fill="rgb(248,212,6)"/><text x="19.3721%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,152,278 samples, 0.18%)</title><rect x="19.0652%" y="85" width="0.1788%" height="15" fill="rgb(208,68,35)"/><text x="19.3152%" y="95.50"></text></g><g><title>is_copy_raw (6,106,788 samples, 0.51%)</title><rect x="22.7672%" y="53" width="0.5073%" height="15" fill="rgb(232,128,0)"/><text x="23.0172%" y="63.50"></text></g><g><title>evaluate_obligation (4,702,887 samples, 0.39%)</title><rect x="22.8838%" y="37" width="0.3907%" height="15" fill="rgb(207,160,47)"/><text x="23.1338%" y="47.50"></text></g><g><title>needs_drop_raw (7,966,998 samples, 0.66%)</title><rect x="22.6288%" y="69" width="0.6618%" height="15" fill="rgb(228,23,34)"/><text x="22.8788%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (7,554,201 samples, 0.63%)</title><rect x="23.6048%" y="53" width="0.6275%" height="15" fill="rgb(218,30,26)"/><text x="23.8548%" y="63.50"></text></g><g><title>resolve_instance (12,565,915 samples, 1.04%)</title><rect x="23.2938%" y="69" width="1.0438%" height="15" fill="rgb(220,122,19)"/><text x="23.5438%" y="79.50"></text></g><g><title>thir_body (14,218,769 samples, 1.18%)</title><rect x="24.3907%" y="69" width="1.1811%" height="15" fill="rgb(250,228,42)"/><text x="24.6407%" y="79.50"></text></g><g><title>mir_const (101,020,480 samples, 8.39%)</title><rect x="17.2267%" y="117" width="8.3917%" height="15" fill="rgb(240,193,28)"/><text x="17.4767%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (86,669,776 samples, 7.20%)</title><rect x="18.4188%" y="101" width="7.1996%" height="15" fill="rgb(216,20,37)"/><text x="18.6688%" y="111.50">unsafety_c..</text></g><g><title>mir_built (76,735,249 samples, 6.37%)</title><rect x="19.2440%" y="85" width="6.3743%" height="15" fill="rgb(206,188,39)"/><text x="19.4940%" y="95.50">mir_built</text></g><g><title>mir_const (2,443,464 samples, 0.20%)</title><rect x="25.7876%" y="101" width="0.2030%" height="15" fill="rgb(217,207,13)"/><text x="26.0376%" y="111.50"></text></g><g><title>unsafety_check_result (2,000,129 samples, 0.17%)</title><rect x="25.8245%" y="85" width="0.1661%" height="15" fill="rgb(231,73,38)"/><text x="26.0745%" y="95.50"></text></g><g><title>mir_built (1,695,585 samples, 0.14%)</title><rect x="25.8498%" y="69" width="0.1409%" height="15" fill="rgb(225,20,46)"/><text x="26.0998%" y="79.50"></text></g><g><title>mir_const_qualif (4,540,053 samples, 0.38%)</title><rect x="25.6183%" y="117" width="0.3771%" height="15" fill="rgb(210,31,41)"/><text x="25.8683%" y="127.50"></text></g><g><title>mir_promoted (118,064,131 samples, 9.81%)</title><rect x="16.1881%" y="133" width="9.8075%" height="15" fill="rgb(221,200,47)"/><text x="16.4381%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (4,980,913 samples, 0.41%)</title><rect x="25.9959%" y="133" width="0.4138%" height="15" fill="rgb(226,26,5)"/><text x="26.2459%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,465,794 samples, 0.37%)</title><rect x="26.4096%" y="133" width="0.3710%" height="15" fill="rgb(249,33,26)"/><text x="26.6596%" y="143.50"></text></g><g><title>normalize_projection_ty (2,495,326 samples, 0.21%)</title><rect x="26.5733%" y="117" width="0.2073%" height="15" fill="rgb(235,183,28)"/><text x="26.8233%" y="127.50"></text></g><g><title>type_op_normalize_predicate (3,458,401 samples, 0.29%)</title><rect x="26.7806%" y="133" width="0.2873%" height="15" fill="rgb(221,5,38)"/><text x="27.0306%" y="143.50"></text></g><g><title>normalize_projection_ty (1,253,705 samples, 0.10%)</title><rect x="26.9638%" y="117" width="0.1041%" height="15" fill="rgb(247,18,42)"/><text x="27.2138%" y="127.50"></text></g><g><title>type_op_normalize_ty (2,618,199 samples, 0.22%)</title><rect x="27.0679%" y="133" width="0.2175%" height="15" fill="rgb(241,131,45)"/><text x="27.3179%" y="143.50"></text></g><g><title>normalize_projection_ty (1,572,460 samples, 0.13%)</title><rect x="27.1548%" y="117" width="0.1306%" height="15" fill="rgb(249,31,29)"/><text x="27.4048%" y="127.50"></text></g><g><title>type_op_prove_predicate (27,367,301 samples, 2.27%)</title><rect x="27.2854%" y="133" width="2.2734%" height="15" fill="rgb(225,111,53)"/><text x="27.5354%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (349,347,085 samples, 29.02%)</title><rect x="0.5439%" y="165" width="29.0200%" height="15" fill="rgb(238,160,17)"/><text x="0.7939%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (345,871,900 samples, 28.73%)</title><rect x="0.8325%" y="149" width="28.7313%" height="15" fill="rgb(214,148,48)"/><text x="1.0825%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (3,575,590 samples, 0.30%)</title><rect x="29.5638%" y="165" width="0.2970%" height="15" fill="rgb(232,36,49)"/><text x="29.8138%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,485,728 samples, 0.12%)</title><rect x="29.7374%" y="149" width="0.1234%" height="15" fill="rgb(209,103,24)"/><text x="29.9874%" y="159.50"></text></g><g><title>hir_module_items (2,692,290 samples, 0.22%)</title><rect x="29.8609%" y="165" width="0.2236%" height="15" fill="rgb(229,88,8)"/><text x="30.1109%" y="175.50"></text></g><g><title>get_lang_items (1,231,064 samples, 0.10%)</title><rect x="30.4773%" y="117" width="0.1023%" height="15" fill="rgb(213,181,19)"/><text x="30.7273%" y="127.50"></text></g><g><title>should_inherit_track_caller (2,176,898 samples, 0.18%)</title><rect x="30.5795%" y="117" width="0.1808%" height="15" fill="rgb(254,191,54)"/><text x="30.8295%" y="127.50"></text></g><g><title>codegen_fn_attrs (4,508,600 samples, 0.37%)</title><rect x="30.3877%" y="133" width="0.3745%" height="15" fill="rgb(241,83,37)"/><text x="30.6377%" y="143.50"></text></g><g><title>check_mod_attrs (10,385,788 samples, 0.86%)</title><rect x="30.0900%" y="149" width="0.8627%" height="15" fill="rgb(233,36,39)"/><text x="30.3400%" y="159.50"></text></g><g><title>lint_levels (2,291,266 samples, 0.19%)</title><rect x="30.7624%" y="133" width="0.1903%" height="15" fill="rgb(226,3,54)"/><text x="31.0124%" y="143.50"></text></g><g><title>check_mod_const_bodies (1,839,909 samples, 0.15%)</title><rect x="30.9527%" y="149" width="0.1528%" height="15" fill="rgb(245,192,40)"/><text x="31.2027%" y="159.50"></text></g><g><title>lookup_deprecation_entry (1,912,861 samples, 0.16%)</title><rect x="31.3383%" y="133" width="0.1589%" height="15" fill="rgb(238,167,29)"/><text x="31.5883%" y="143.50"></text></g><g><title>stability_index (1,780,270 samples, 0.15%)</title><rect x="31.3493%" y="117" width="0.1479%" height="15" fill="rgb(232,182,51)"/><text x="31.5993%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (3,501,861 samples, 0.29%)</title><rect x="31.2244%" y="149" width="0.2909%" height="15" fill="rgb(231,60,39)"/><text x="31.4744%" y="159.50"></text></g><g><title>misc_checking_1 (17,686,189 samples, 1.47%)</title><rect x="30.0846%" y="165" width="1.4692%" height="15" fill="rgb(208,69,12)"/><text x="30.3346%" y="175.50"></text></g><g><title>check_mod_intrinsics (1,312,205 samples, 0.11%)</title><rect x="31.5562%" y="133" width="0.1090%" height="15" fill="rgb(235,93,37)"/><text x="31.8062%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (7,002,779 samples, 0.58%)</title><rect x="31.5540%" y="149" width="0.5817%" height="15" fill="rgb(213,116,39)"/><text x="31.8040%" y="159.50"></text></g><g><title>check_mod_liveness (5,663,344 samples, 0.47%)</title><rect x="31.6652%" y="133" width="0.4704%" height="15" fill="rgb(222,207,29)"/><text x="31.9152%" y="143.50"></text></g><g><title>misc_checking_2 (14,320,371 samples, 1.19%)</title><rect x="31.5537%" y="165" width="1.1896%" height="15" fill="rgb(206,96,30)"/><text x="31.8037%" y="175.50"></text></g><g><title>match_checking (7,314,792 samples, 0.61%)</title><rect x="32.1357%" y="149" width="0.6076%" height="15" fill="rgb(218,138,4)"/><text x="32.3857%" y="159.50"></text></g><g><title>check_match (6,559,291 samples, 0.54%)</title><rect x="32.1985%" y="133" width="0.5449%" height="15" fill="rgb(250,191,14)"/><text x="32.4485%" y="143.50"></text></g><g><title>check_private_in_public (3,712,542 samples, 0.31%)</title><rect x="32.7449%" y="149" width="0.3084%" height="15" fill="rgb(239,60,40)"/><text x="32.9949%" y="159.50"></text></g><g><title>death_checking (6,388,582 samples, 0.53%)</title><rect x="33.0533%" y="149" width="0.5307%" height="15" fill="rgb(206,27,48)"/><text x="33.3033%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,398,127 samples, 0.12%)</title><rect x="34.5999%" y="117" width="0.1161%" height="15" fill="rgb(225,35,8)"/><text x="34.8499%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,393,926 samples, 0.12%)</title><rect x="34.6002%" y="101" width="0.1158%" height="15" fill="rgb(250,213,24)"/><text x="34.8502%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,384,856 samples, 0.12%)</title><rect x="34.6010%" y="85" width="0.1150%" height="15" fill="rgb(247,123,22)"/><text x="34.8510%" y="95.50"></text></g><g><title>param_env (2,166,139 samples, 0.18%)</title><rect x="34.7160%" y="117" width="0.1799%" height="15" fill="rgb(231,138,38)"/><text x="34.9660%" y="127.50"></text></g><g><title>crate_lints (17,323,905 samples, 1.44%)</title><rect x="33.5843%" y="133" width="1.4391%" height="15" fill="rgb(231,145,46)"/><text x="33.8343%" y="143.50"></text></g><g><title>type_of (1,292,736 samples, 0.11%)</title><rect x="34.9160%" y="117" width="0.1074%" height="15" fill="rgb(251,118,11)"/><text x="35.1660%" y="127.50"></text></g><g><title>lint_checking (23,719,507 samples, 1.97%)</title><rect x="33.5840%" y="149" width="1.9704%" height="15" fill="rgb(217,147,25)"/><text x="33.8340%" y="159.50">l..</text></g><g><title>module_lints (6,391,552 samples, 0.53%)</title><rect x="35.0234%" y="133" width="0.5309%" height="15" fill="rgb(247,81,37)"/><text x="35.2734%" y="143.50"></text></g><g><title>lint_mod (6,364,802 samples, 0.53%)</title><rect x="35.0256%" y="117" width="0.5287%" height="15" fill="rgb(209,12,38)"/><text x="35.2756%" y="127.50"></text></g><g><title>privacy_access_levels (6,040,538 samples, 0.50%)</title><rect x="35.5544%" y="149" width="0.5018%" height="15" fill="rgb(227,1,9)"/><text x="35.8044%" y="159.50"></text></g><g><title>privacy_checking_modules (13,887,746 samples, 1.15%)</title><rect x="36.0561%" y="149" width="1.1536%" height="15" fill="rgb(248,47,43)"/><text x="36.3061%" y="159.50"></text></g><g><title>check_mod_privacy (13,869,236 samples, 1.15%)</title><rect x="36.0577%" y="133" width="1.1521%" height="15" fill="rgb(221,10,30)"/><text x="36.3077%" y="143.50"></text></g><g><title>misc_checking_3 (53,989,798 samples, 4.48%)</title><rect x="32.7433%" y="165" width="4.4849%" height="15" fill="rgb(210,229,1)"/><text x="32.9933%" y="175.50">misc_..</text></g><g><title>impl_parent (3,603,645 samples, 0.30%)</title><rect x="38.0919%" y="101" width="0.2994%" height="15" fill="rgb(222,148,37)"/><text x="38.3419%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,013,624 samples, 0.17%)</title><rect x="38.2240%" y="85" width="0.1673%" height="15" fill="rgb(234,67,33)"/><text x="38.4740%" y="95.50"></text></g><g><title>impl_trait_ref (7,428,147 samples, 0.62%)</title><rect x="38.3914%" y="101" width="0.6171%" height="15" fill="rgb(247,98,35)"/><text x="38.6414%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,038,968 samples, 0.50%)</title><rect x="38.5068%" y="85" width="0.5017%" height="15" fill="rgb(247,138,52)"/><text x="38.7568%" y="95.50"></text></g><g><title>trait_impls_of (1,423,149 samples, 0.12%)</title><rect x="39.0469%" y="101" width="0.1182%" height="15" fill="rgb(213,79,30)"/><text x="39.2969%" y="111.50"></text></g><g><title>coherent_trait (22,282,961 samples, 1.85%)</title><rect x="37.3185%" y="133" width="1.8510%" height="15" fill="rgb(246,177,23)"/><text x="37.5685%" y="143.50">c..</text></g><g><title>specialization_graph_of (22,166,551 samples, 1.84%)</title><rect x="37.3282%" y="117" width="1.8414%" height="15" fill="rgb(230,62,27)"/><text x="37.5782%" y="127.50">s..</text></g><g><title>coherence_checking (23,108,741 samples, 1.92%)</title><rect x="37.3151%" y="149" width="1.9196%" height="15" fill="rgb(216,154,8)"/><text x="37.5651%" y="159.50">c..</text></g><g><title>dropck_outlives (2,664,065 samples, 0.22%)</title><rect x="59.8709%" y="101" width="0.2213%" height="15" fill="rgb(244,35,45)"/><text x="60.1209%" y="111.50"></text></g><g><title>evaluate_obligation (18,982,393 samples, 1.58%)</title><rect x="60.0922%" y="101" width="1.5769%" height="15" fill="rgb(251,115,12)"/><text x="60.3422%" y="111.50"></text></g><g><title>evaluate_obligation (1,732,698 samples, 0.14%)</title><rect x="62.0957%" y="85" width="0.1439%" height="15" fill="rgb(240,54,50)"/><text x="62.3457%" y="95.50"></text></g><g><title>method_autoderef_steps (4,465,403 samples, 0.37%)</title><rect x="61.8699%" y="101" width="0.3709%" height="15" fill="rgb(233,84,52)"/><text x="62.1199%" y="111.50"></text></g><g><title>evaluate_obligation (4,552,026 samples, 0.38%)</title><rect x="66.8532%" y="85" width="0.3781%" height="15" fill="rgb(207,117,47)"/><text x="67.1032%" y="95.50"></text></g><g><title>is_copy_raw (1,389,549 samples, 0.12%)</title><rect x="67.3690%" y="85" width="0.1154%" height="15" fill="rgb(249,43,39)"/><text x="67.6190%" y="95.50"></text></g><g><title>evaluate_obligation (1,227,068 samples, 0.10%)</title><rect x="67.6014%" y="69" width="0.1019%" height="15" fill="rgb(209,38,44)"/><text x="67.8514%" y="79.50"></text></g><g><title>method_autoderef_steps (2,462,291 samples, 0.20%)</title><rect x="67.4995%" y="85" width="0.2045%" height="15" fill="rgb(236,212,23)"/><text x="67.7495%" y="95.50"></text></g><g><title>typeck (64,437,727 samples, 5.35%)</title><rect x="62.4207%" y="101" width="5.3528%" height="15" fill="rgb(242,79,21)"/><text x="62.6707%" y="111.50">typeck</text></g><g><title>item_bodies_checking (343,336,787 samples, 28.52%)</title><rect x="39.3004%" y="149" width="28.5207%" height="15" fill="rgb(211,96,35)"/><text x="39.5504%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (343,333,047 samples, 28.52%)</title><rect x="39.3007%" y="133" width="28.5204%" height="15" fill="rgb(253,215,40)"/><text x="39.5507%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (341,291,756 samples, 28.35%)</title><rect x="39.4703%" y="117" width="28.3508%" height="15" fill="rgb(211,81,21)"/><text x="39.7203%" y="127.50">typeck</text></g><g><title>item_types_checking (20,824,374 samples, 1.73%)</title><rect x="67.8211%" y="149" width="1.7299%" height="15" fill="rgb(208,190,38)"/><text x="68.0711%" y="159.50"></text></g><g><title>check_mod_item_types (20,806,094 samples, 1.73%)</title><rect x="67.8226%" y="133" width="1.7283%" height="15" fill="rgb(235,213,38)"/><text x="68.0726%" y="143.50"></text></g><g><title>fn_sig (4,354,764 samples, 0.36%)</title><rect x="69.9265%" y="117" width="0.3617%" height="15" fill="rgb(237,122,38)"/><text x="70.1765%" y="127.50"></text></g><g><title>is_late_bound_map (3,295,815 samples, 0.27%)</title><rect x="70.4600%" y="101" width="0.2738%" height="15" fill="rgb(244,218,35)"/><text x="70.7100%" y="111.50"></text></g><g><title>resolve_lifetimes (2,971,811 samples, 0.25%)</title><rect x="70.4869%" y="85" width="0.2469%" height="15" fill="rgb(240,68,47)"/><text x="70.7369%" y="95.50"></text></g><g><title>named_region_map (3,089,619 samples, 0.26%)</title><rect x="70.7338%" y="101" width="0.2567%" height="15" fill="rgb(210,16,53)"/><text x="70.9838%" y="111.50"></text></g><g><title>resolve_lifetimes (2,727,305 samples, 0.23%)</title><rect x="70.7639%" y="85" width="0.2266%" height="15" fill="rgb(235,124,12)"/><text x="71.0139%" y="95.50"></text></g><g><title>generics_of (8,646,751 samples, 0.72%)</title><rect x="70.2883%" y="117" width="0.7183%" height="15" fill="rgb(224,169,11)"/><text x="70.5383%" y="127.50"></text></g><g><title>late_bound_vars_map (1,729,089 samples, 0.14%)</title><rect x="71.4825%" y="69" width="0.1436%" height="15" fill="rgb(250,166,2)"/><text x="71.7325%" y="79.50"></text></g><g><title>resolve_lifetimes (1,385,254 samples, 0.12%)</title><rect x="71.5111%" y="53" width="0.1151%" height="15" fill="rgb(242,216,29)"/><text x="71.7611%" y="63.50"></text></g><g><title>explicit_predicates_of (4,304,929 samples, 0.36%)</title><rect x="71.2827%" y="85" width="0.3576%" height="15" fill="rgb(230,116,27)"/><text x="71.5327%" y="95.50"></text></g><g><title>predicates_of (7,787,234 samples, 0.65%)</title><rect x="71.0888%" y="117" width="0.6469%" height="15" fill="rgb(228,99,48)"/><text x="71.3388%" y="127.50"></text></g><g><title>predicates_defined_on (6,874,105 samples, 0.57%)</title><rect x="71.1647%" y="101" width="0.5710%" height="15" fill="rgb(253,11,6)"/><text x="71.4147%" y="111.50"></text></g><g><title>type_collecting (27,605,060 samples, 2.29%)</title><rect x="69.5524%" y="149" width="2.2931%" height="15" fill="rgb(247,143,39)"/><text x="69.8024%" y="159.50">t..</text></g><g><title>collect_mod_item_types (27,581,410 samples, 2.29%)</title><rect x="69.5543%" y="133" width="2.2912%" height="15" fill="rgb(236,97,10)"/><text x="69.8043%" y="143.50">c..</text></g><g><title>type_of (1,321,653 samples, 0.11%)</title><rect x="71.7357%" y="117" width="0.1098%" height="15" fill="rgb(233,208,19)"/><text x="71.9857%" y="127.50"></text></g><g><title>evaluate_obligation (5,144,747 samples, 0.43%)</title><rect x="75.3307%" y="117" width="0.4274%" height="15" fill="rgb(216,164,2)"/><text x="75.5807%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,622,654 samples, 0.22%)</title><rect x="75.7742%" y="117" width="0.2179%" height="15" fill="rgb(220,129,5)"/><text x="76.0242%" y="127.50"></text></g><g><title>param_env (5,978,196 samples, 0.50%)</title><rect x="76.0258%" y="117" width="0.4966%" height="15" fill="rgb(242,17,10)"/><text x="76.2758%" y="127.50"></text></g><g><title>region_scope_tree (5,547,444 samples, 0.46%)</title><rect x="76.5309%" y="117" width="0.4608%" height="15" fill="rgb(242,107,0)"/><text x="76.7809%" y="127.50"></text></g><g><title>check_impl_item_well_formed (58,346,290 samples, 4.85%)</title><rect x="72.1525%" y="133" width="4.8468%" height="15" fill="rgb(251,28,31)"/><text x="72.4025%" y="143.50">check_..</text></g><g><title>evaluate_obligation (4,443,968 samples, 0.37%)</title><rect x="79.2745%" y="117" width="0.3692%" height="15" fill="rgb(233,223,10)"/><text x="79.5245%" y="127.50"></text></g><g><title>param_env (3,922,046 samples, 0.33%)</title><rect x="79.7460%" y="117" width="0.3258%" height="15" fill="rgb(215,21,27)"/><text x="79.9960%" y="127.50"></text></g><g><title>analysis (962,060,455 samples, 79.92%)</title><rect x="0.3020%" y="181" width="79.9176%" height="15" fill="rgb(232,23,21)"/><text x="0.5520%" y="191.50">analysis</text></g><g><title>type_check_crate (517,537,249 samples, 42.99%)</title><rect x="37.2282%" y="165" width="42.9914%" height="15" fill="rgb(244,5,23)"/><text x="37.4782%" y="175.50">type_check_crate</text></g><g><title>wf_checking (100,688,884 samples, 8.36%)</title><rect x="71.8555%" y="149" width="8.3641%" height="15" fill="rgb(226,81,46)"/><text x="72.1055%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (38,767,515 samples, 3.22%)</title><rect x="76.9992%" y="133" width="3.2204%" height="15" fill="rgb(247,70,30)"/><text x="77.2492%" y="143.50">che..</text></g><g><title>AST_validation (2,586,129 samples, 0.21%)</title><rect x="80.2719%" y="165" width="0.2148%" height="15" fill="rgb(212,68,19)"/><text x="80.5219%" y="175.50"></text></g><g><title>complete_gated_feature_checking (1,599,298 samples, 0.13%)</title><rect x="80.4868%" y="165" width="0.1329%" height="15" fill="rgb(240,187,13)"/><text x="80.7368%" y="175.50"></text></g><g><title>metadata_register_crate (1,265,694 samples, 0.11%)</title><rect x="89.3897%" y="133" width="0.1051%" height="15" fill="rgb(223,113,26)"/><text x="89.6397%" y="143.50"></text></g><g><title>macro_expand_crate (109,319,721 samples, 9.08%)</title><rect x="80.6259%" y="165" width="9.0811%" height="15" fill="rgb(206,192,2)"/><text x="80.8759%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (109,302,721 samples, 9.08%)</title><rect x="80.6273%" y="149" width="9.0797%" height="15" fill="rgb(241,108,4)"/><text x="80.8773%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,554,578 samples, 0.21%)</title><rect x="89.4948%" y="133" width="0.2122%" height="15" fill="rgb(247,173,49)"/><text x="89.7448%" y="143.50"></text></g><g><title>finalize_macro_resolutions (1,447,587 samples, 0.12%)</title><rect x="89.7586%" y="149" width="0.1202%" height="15" fill="rgb(224,114,35)"/><text x="90.0086%" y="159.50"></text></g><g><title>late_resolve_crate (17,190,013 samples, 1.43%)</title><rect x="89.8788%" y="149" width="1.4280%" height="15" fill="rgb(245,159,27)"/><text x="90.1288%" y="159.50"></text></g><g><title>resolve_check_unused (1,508,427 samples, 0.13%)</title><rect x="91.3143%" y="149" width="0.1253%" height="15" fill="rgb(245,172,44)"/><text x="91.5643%" y="159.50"></text></g><g><title>resolve_postprocess (1,227,884 samples, 0.10%)</title><rect x="91.4396%" y="149" width="0.1020%" height="15" fill="rgb(236,23,11)"/><text x="91.6896%" y="159.50"></text></g><g><title>configure_and_expand (135,868,510 samples, 11.29%)</title><rect x="80.2553%" y="181" width="11.2865%" height="15" fill="rgb(205,117,38)"/><text x="80.5053%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (21,841,236 samples, 1.81%)</title><rect x="89.7274%" y="165" width="1.8143%" height="15" fill="rgb(237,72,25)"/><text x="89.9774%" y="175.50">r..</text></g><g><title>drop_ast (5,281,569 samples, 0.44%)</title><rect x="91.5418%" y="181" width="0.4387%" height="15" fill="rgb(244,70,9)"/><text x="91.7918%" y="191.50"></text></g><g><title>early_lint_checks (5,205,739 samples, 0.43%)</title><rect x="91.9821%" y="181" width="0.4324%" height="15" fill="rgb(217,125,39)"/><text x="92.2321%" y="191.50"></text></g><g><title>free_global_ctxt (12,303,818 samples, 1.02%)</title><rect x="92.4146%" y="181" width="1.0221%" height="15" fill="rgb(235,36,10)"/><text x="92.6646%" y="191.50"></text></g><g><title>generate_crate_metadata (17,813,050 samples, 1.48%)</title><rect x="93.4366%" y="181" width="1.4797%" height="15" fill="rgb(251,123,47)"/><text x="93.6866%" y="191.50"></text></g><g><title>hir_lowering (51,145,656 samples, 4.25%)</title><rect x="94.9164%" y="181" width="4.2486%" height="15" fill="rgb(221,13,13)"/><text x="95.1664%" y="191.50">hir_l..</text></g><g><title>parse_crate (4,186,227 samples, 0.35%)</title><rect x="99.1780%" y="181" width="0.3477%" height="15" fill="rgb(238,131,9)"/><text x="99.4280%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,842,673 samples, 0.32%)</title><rect x="99.5494%" y="181" width="0.3192%" height="15" fill="rgb(211,50,8)"/><text x="99.7994%" y="191.50"></text></g><g><title>all (1,203,815,718 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,203,815,718 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,445,676 samples, 0.12%)</title><rect x="99.8799%" y="181" width="0.1201%" height="15" fill="rgb(246,228,12)"/><text x="100.1299%" y="191.50"></text></g></svg></svg>