<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (52,281 samples, 0.20%)</title><rect x="8.4302%" y="133" width="0.2020%" height="15" fill="rgb(227,0,7)"/><text x="8.6802%" y="143.50"></text></g><g><title>codegen_fn_attrs (34,770 samples, 0.13%)</title><rect x="8.8019%" y="117" width="0.1343%" height="15" fill="rgb(217,0,24)"/><text x="9.0519%" y="127.50"></text></g><g><title>is_copy_raw (109,801 samples, 0.42%)</title><rect x="10.0792%" y="101" width="0.4242%" height="15" fill="rgb(221,193,54)"/><text x="10.3292%" y="111.50"></text></g><g><title>evaluate_obligation (83,020 samples, 0.32%)</title><rect x="10.1827%" y="85" width="0.3207%" height="15" fill="rgb(248,212,6)"/><text x="10.4327%" y="95.50"></text></g><g><title>needs_drop_raw (30,640 samples, 0.12%)</title><rect x="10.5215%" y="101" width="0.1184%" height="15" fill="rgb(208,68,35)"/><text x="10.7715%" y="111.50"></text></g><g><title>is_copy_raw (27,710 samples, 0.11%)</title><rect x="10.5328%" y="85" width="0.1070%" height="15" fill="rgb(232,128,0)"/><text x="10.7828%" y="95.50"></text></g><g><title>thir_body (114,912 samples, 0.44%)</title><rect x="10.7495%" y="101" width="0.4439%" height="15" fill="rgb(207,160,47)"/><text x="10.9995%" y="111.50"></text></g><g><title>mir_const (850,959 samples, 3.29%)</title><rect x="7.9138%" y="149" width="3.2873%" height="15" fill="rgb(228,23,34)"/><text x="8.1638%" y="159.50">mir..</text></g><g><title>unsafety_check_result (664,997 samples, 2.57%)</title><rect x="8.6321%" y="133" width="2.5689%" height="15" fill="rgb(218,30,26)"/><text x="8.8821%" y="143.50">un..</text></g><g><title>mir_built (586,295 samples, 2.26%)</title><rect x="8.9362%" y="117" width="2.2649%" height="15" fill="rgb(220,122,19)"/><text x="9.1862%" y="127.50">m..</text></g><g><title>mir_promoted (1,155,361 samples, 4.46%)</title><rect x="7.3903%" y="165" width="4.4632%" height="15" fill="rgb(250,228,42)"/><text x="7.6403%" y="175.50">mir_p..</text></g><g><title>mir_const_qualif (168,892 samples, 0.65%)</title><rect x="11.2011%" y="149" width="0.6524%" height="15" fill="rgb(240,193,28)"/><text x="11.4511%" y="159.50"></text></g><g><title>mir_const (136,621 samples, 0.53%)</title><rect x="11.3257%" y="133" width="0.5278%" height="15" fill="rgb(216,20,37)"/><text x="11.5757%" y="143.50"></text></g><g><title>unsafety_check_result (91,561 samples, 0.35%)</title><rect x="11.4998%" y="117" width="0.3537%" height="15" fill="rgb(206,188,39)"/><text x="11.7498%" y="127.50"></text></g><g><title>mir_built (59,871 samples, 0.23%)</title><rect x="11.6222%" y="101" width="0.2313%" height="15" fill="rgb(217,207,13)"/><text x="11.8722%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (35,690 samples, 0.14%)</title><rect x="11.8535%" y="165" width="0.1379%" height="15" fill="rgb(231,73,38)"/><text x="12.1035%" y="175.50"></text></g><g><title>type_op_prove_predicate (78,930 samples, 0.30%)</title><rect x="11.9914%" y="165" width="0.3049%" height="15" fill="rgb(225,20,46)"/><text x="12.2414%" y="175.50"></text></g><g><title>MIR_borrow_checking (2,577,918 samples, 9.96%)</title><rect x="2.3417%" y="197" width="9.9586%" height="15" fill="rgb(210,31,41)"/><text x="2.5917%" y="207.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (2,562,188 samples, 9.90%)</title><rect x="2.4025%" y="181" width="9.8978%" height="15" fill="rgb(221,200,47)"/><text x="2.6525%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (102,181 samples, 0.39%)</title><rect x="12.3003%" y="197" width="0.3947%" height="15" fill="rgb(226,26,5)"/><text x="12.5503%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (78,771 samples, 0.30%)</title><rect x="12.3907%" y="181" width="0.3043%" height="15" fill="rgb(249,33,26)"/><text x="12.6407%" y="191.50"></text></g><g><title>hir_module_items (82,321 samples, 0.32%)</title><rect x="12.6950%" y="197" width="0.3180%" height="15" fill="rgb(235,183,28)"/><text x="12.9450%" y="207.50"></text></g><g><title>get_lang_items (40,890 samples, 0.16%)</title><rect x="13.5312%" y="149" width="0.1580%" height="15" fill="rgb(221,5,38)"/><text x="13.7812%" y="159.50"></text></g><g><title>item_attrs (50,140 samples, 0.19%)</title><rect x="13.9081%" y="117" width="0.1937%" height="15" fill="rgb(247,18,42)"/><text x="14.1581%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (48,090 samples, 0.19%)</title><rect x="13.9161%" y="101" width="0.1858%" height="15" fill="rgb(241,131,45)"/><text x="14.1661%" y="111.50"></text></g><g><title>codegen_fn_attrs (82,861 samples, 0.32%)</title><rect x="13.8652%" y="133" width="0.3201%" height="15" fill="rgb(249,31,29)"/><text x="14.1152%" y="143.50"></text></g><g><title>should_inherit_track_caller (130,802 samples, 0.51%)</title><rect x="13.6892%" y="149" width="0.5053%" height="15" fill="rgb(225,111,53)"/><text x="13.9392%" y="159.50"></text></g><g><title>codegen_fn_attrs (241,643 samples, 0.93%)</title><rect x="13.3367%" y="165" width="0.9335%" height="15" fill="rgb(238,160,17)"/><text x="13.5867%" y="175.50"></text></g><g><title>check_mod_attrs (307,513 samples, 1.19%)</title><rect x="13.0827%" y="181" width="1.1879%" height="15" fill="rgb(214,148,48)"/><text x="13.3327%" y="191.50"></text></g><g><title>check_mod_const_bodies (26,170 samples, 0.10%)</title><rect x="14.2707%" y="181" width="0.1011%" height="15" fill="rgb(232,36,49)"/><text x="14.5207%" y="191.50"></text></g><g><title>lookup_deprecation_entry (35,390 samples, 0.14%)</title><rect x="14.6050%" y="165" width="0.1367%" height="15" fill="rgb(209,103,24)"/><text x="14.8550%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (111,432 samples, 0.43%)</title><rect x="14.4309%" y="181" width="0.4305%" height="15" fill="rgb(229,88,8)"/><text x="14.6809%" y="191.50"></text></g><g><title>misc_checking_1 (501,476 samples, 1.94%)</title><rect x="13.0145%" y="197" width="1.9372%" height="15" fill="rgb(213,181,19)"/><text x="13.2645%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (79,771 samples, 0.31%)</title><rect x="14.9563%" y="181" width="0.3082%" height="15" fill="rgb(254,191,54)"/><text x="15.2063%" y="191.50"></text></g><g><title>check_mod_liveness (62,630 samples, 0.24%)</title><rect x="15.0225%" y="165" width="0.2419%" height="15" fill="rgb(241,83,37)"/><text x="15.2725%" y="175.50"></text></g><g><title>misc_checking_2 (187,223 samples, 0.72%)</title><rect x="14.9517%" y="197" width="0.7232%" height="15" fill="rgb(233,36,39)"/><text x="15.2017%" y="207.50"></text></g><g><title>match_checking (106,272 samples, 0.41%)</title><rect x="15.2645%" y="181" width="0.4105%" height="15" fill="rgb(226,3,54)"/><text x="15.5145%" y="191.50"></text></g><g><title>check_match (100,942 samples, 0.39%)</title><rect x="15.2850%" y="165" width="0.3899%" height="15" fill="rgb(245,192,40)"/><text x="15.5350%" y="175.50"></text></g><g><title>check_private_in_public (41,870 samples, 0.16%)</title><rect x="15.7008%" y="181" width="0.1617%" height="15" fill="rgb(238,167,29)"/><text x="15.9508%" y="191.50"></text></g><g><title>death_checking (136,632 samples, 0.53%)</title><rect x="15.8625%" y="181" width="0.5278%" height="15" fill="rgb(232,182,51)"/><text x="16.1125%" y="191.50"></text></g><g><title>item_attrs (67,001 samples, 0.26%)</title><rect x="16.1315%" y="165" width="0.2588%" height="15" fill="rgb(231,60,39)"/><text x="16.3815%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (66,041 samples, 0.26%)</title><rect x="16.1352%" y="149" width="0.2551%" height="15" fill="rgb(208,69,12)"/><text x="16.3852%" y="159.50"></text></g><g><title>eval_to_const_value_raw (108,981 samples, 0.42%)</title><rect x="17.1966%" y="149" width="0.4210%" height="15" fill="rgb(235,93,37)"/><text x="17.4466%" y="159.50"></text></g><g><title>eval_to_const_value_raw (106,651 samples, 0.41%)</title><rect x="17.2056%" y="133" width="0.4120%" height="15" fill="rgb(213,116,39)"/><text x="17.4556%" y="143.50"></text></g><g><title>eval_to_allocation_raw (100,851 samples, 0.39%)</title><rect x="17.2280%" y="117" width="0.3896%" height="15" fill="rgb(222,207,29)"/><text x="17.4780%" y="127.50"></text></g><g><title>mir_for_ctfe (36,850 samples, 0.14%)</title><rect x="17.4753%" y="101" width="0.1424%" height="15" fill="rgb(206,96,30)"/><text x="17.7253%" y="111.50"></text></g><g><title>param_env (75,891 samples, 0.29%)</title><rect x="17.6176%" y="149" width="0.2932%" height="15" fill="rgb(218,138,4)"/><text x="17.8676%" y="159.50"></text></g><g><title>predicates_of (36,720 samples, 0.14%)</title><rect x="17.7689%" y="133" width="0.1419%" height="15" fill="rgb(250,191,14)"/><text x="18.0189%" y="143.50"></text></g><g><title>predicates_defined_on (31,940 samples, 0.12%)</title><rect x="17.7874%" y="117" width="0.1234%" height="15" fill="rgb(239,60,40)"/><text x="18.0374%" y="127.50"></text></g><g><title>crate_lints (695,648 samples, 2.69%)</title><rect x="16.3953%" y="165" width="2.6873%" height="15" fill="rgb(206,27,48)"/><text x="16.6453%" y="175.50">cr..</text></g><g><title>type_of (303,354 samples, 1.17%)</title><rect x="17.9108%" y="149" width="1.1719%" height="15" fill="rgb(225,35,8)"/><text x="18.1608%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (222,503 samples, 0.86%)</title><rect x="18.2231%" y="133" width="0.8595%" height="15" fill="rgb(250,213,24)"/><text x="18.4731%" y="143.50"></text></g><g><title>lint_checking (755,108 samples, 2.92%)</title><rect x="16.3903%" y="181" width="2.9170%" height="15" fill="rgb(247,123,22)"/><text x="16.6403%" y="191.50">li..</text></g><g><title>module_lints (58,160 samples, 0.22%)</title><rect x="19.0826%" y="165" width="0.2247%" height="15" fill="rgb(231,138,38)"/><text x="19.3326%" y="175.50"></text></g><g><title>lint_mod (55,990 samples, 0.22%)</title><rect x="19.0910%" y="149" width="0.2163%" height="15" fill="rgb(231,145,46)"/><text x="19.3410%" y="159.50"></text></g><g><title>privacy_access_levels (52,871 samples, 0.20%)</title><rect x="19.3073%" y="181" width="0.2042%" height="15" fill="rgb(251,118,11)"/><text x="19.5573%" y="191.50"></text></g><g><title>privacy_checking_modules (87,701 samples, 0.34%)</title><rect x="19.5116%" y="181" width="0.3388%" height="15" fill="rgb(217,147,25)"/><text x="19.7616%" y="191.50"></text></g><g><title>check_mod_privacy (86,531 samples, 0.33%)</title><rect x="19.5161%" y="165" width="0.3343%" height="15" fill="rgb(247,81,37)"/><text x="19.7661%" y="175.50"></text></g><g><title>misc_checking_3 (1,093,722 samples, 4.23%)</title><rect x="15.6750%" y="197" width="4.2251%" height="15" fill="rgb(209,12,38)"/><text x="15.9250%" y="207.50">misc_..</text></g><g><title>adt_destructor (39,461 samples, 0.15%)</title><rect x="20.1234%" y="149" width="0.1524%" height="15" fill="rgb(227,1,9)"/><text x="20.3734%" y="159.50"></text></g><g><title>coherent_trait (33,471 samples, 0.13%)</title><rect x="20.1466%" y="133" width="0.1293%" height="15" fill="rgb(248,47,43)"/><text x="20.3966%" y="143.50"></text></g><g><title>specialization_graph_of (32,561 samples, 0.13%)</title><rect x="20.1501%" y="117" width="0.1258%" height="15" fill="rgb(221,10,30)"/><text x="20.4001%" y="127.50"></text></g><g><title>param_env (107,071 samples, 0.41%)</title><rect x="20.2759%" y="149" width="0.4136%" height="15" fill="rgb(210,229,1)"/><text x="20.5259%" y="159.50"></text></g><g><title>impl_parent (626,419 samples, 2.42%)</title><rect x="24.6283%" y="133" width="2.4199%" height="15" fill="rgb(222,148,37)"/><text x="24.8783%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (367,105 samples, 1.42%)</title><rect x="25.6300%" y="117" width="1.4181%" height="15" fill="rgb(234,67,33)"/><text x="25.8800%" y="127.50"></text></g><g><title>impl_trait_ref (1,579,259 samples, 6.10%)</title><rect x="27.0482%" y="133" width="6.1007%" height="15" fill="rgb(247,98,35)"/><text x="27.2982%" y="143.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,315,675 samples, 5.08%)</title><rect x="28.0664%" y="117" width="5.0825%" height="15" fill="rgb(247,138,52)"/><text x="28.3164%" y="127.50">metada..</text></g><g><title>coherent_trait (3,603,410 samples, 13.92%)</title><rect x="20.0281%" y="165" width="13.9201%" height="15" fill="rgb(213,79,30)"/><text x="20.2781%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (3,432,188 samples, 13.26%)</title><rect x="20.6895%" y="149" width="13.2586%" height="15" fill="rgb(246,177,23)"/><text x="20.9395%" y="159.50">specialization_graph..</text></g><g><title>trait_impls_of (205,721 samples, 0.79%)</title><rect x="33.1534%" y="133" width="0.7947%" height="15" fill="rgb(230,62,27)"/><text x="33.4034%" y="143.50"></text></g><g><title>implementations_of_trait (44,010 samples, 0.17%)</title><rect x="33.7781%" y="117" width="0.1700%" height="15" fill="rgb(216,154,8)"/><text x="34.0281%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (37,910 samples, 0.15%)</title><rect x="33.8017%" y="101" width="0.1464%" height="15" fill="rgb(244,35,45)"/><text x="34.0517%" y="111.50"></text></g><g><title>coherence_checking (3,645,780 samples, 14.08%)</title><rect x="19.9769%" y="181" width="14.0838%" height="15" fill="rgb(251,115,12)"/><text x="20.2269%" y="191.50">coherence_checking</text></g><g><title>associated_item (45,511 samples, 0.18%)</title><rect x="40.4746%" y="117" width="0.1758%" height="15" fill="rgb(240,54,50)"/><text x="40.7246%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (34,791 samples, 0.13%)</title><rect x="40.5161%" y="101" width="0.1344%" height="15" fill="rgb(233,84,52)"/><text x="40.7661%" y="111.50"></text></g><g><title>associated_items (72,581 samples, 0.28%)</title><rect x="40.3885%" y="133" width="0.2804%" height="15" fill="rgb(207,117,47)"/><text x="40.6385%" y="143.50"></text></g><g><title>dropck_outlives (40,630 samples, 0.16%)</title><rect x="40.6949%" y="133" width="0.1570%" height="15" fill="rgb(249,43,39)"/><text x="40.9449%" y="143.50"></text></g><g><title>adt_def (36,340 samples, 0.14%)</title><rect x="41.3651%" y="101" width="0.1404%" height="15" fill="rgb(209,38,44)"/><text x="41.6151%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (35,320 samples, 0.14%)</title><rect x="41.3691%" y="85" width="0.1364%" height="15" fill="rgb(236,212,23)"/><text x="41.6191%" y="95.50"></text></g><g><title>adt_def (68,711 samples, 0.27%)</title><rect x="41.5103%" y="85" width="0.2654%" height="15" fill="rgb(242,79,21)"/><text x="41.7603%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (68,481 samples, 0.26%)</title><rect x="41.5112%" y="69" width="0.2645%" height="15" fill="rgb(211,96,35)"/><text x="41.7612%" y="79.50"></text></g><g><title>item_attrs (32,860 samples, 0.13%)</title><rect x="41.6488%" y="53" width="0.1269%" height="15" fill="rgb(253,215,40)"/><text x="41.8988%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (32,480 samples, 0.13%)</title><rect x="41.6503%" y="37" width="0.1255%" height="15" fill="rgb(211,81,21)"/><text x="41.9003%" y="47.50"></text></g><g><title>adt_sized_constraint (70,791 samples, 0.27%)</title><rect x="41.5055%" y="101" width="0.2735%" height="15" fill="rgb(208,190,38)"/><text x="41.7555%" y="111.50"></text></g><g><title>adt_sized_constraint (114,871 samples, 0.44%)</title><rect x="41.3417%" y="117" width="0.4437%" height="15" fill="rgb(235,213,38)"/><text x="41.5917%" y="127.50"></text></g><g><title>predicates_of (27,830 samples, 0.11%)</title><rect x="42.0094%" y="117" width="0.1075%" height="15" fill="rgb(237,122,38)"/><text x="42.2594%" y="127.50"></text></g><g><title>specializes (76,821 samples, 0.30%)</title><rect x="42.1170%" y="117" width="0.2968%" height="15" fill="rgb(244,218,35)"/><text x="42.3670%" y="127.50"></text></g><g><title>param_env (65,820 samples, 0.25%)</title><rect x="42.1594%" y="101" width="0.2543%" height="15" fill="rgb(240,68,47)"/><text x="42.4094%" y="111.50"></text></g><g><title>def_span (54,320 samples, 0.21%)</title><rect x="42.2039%" y="85" width="0.2098%" height="15" fill="rgb(210,16,53)"/><text x="42.4539%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (52,870 samples, 0.20%)</title><rect x="42.2095%" y="69" width="0.2042%" height="15" fill="rgb(235,124,12)"/><text x="42.4595%" y="79.50"></text></g><g><title>trait_impls_of (66,140 samples, 0.26%)</title><rect x="42.4196%" y="117" width="0.2555%" height="15" fill="rgb(224,169,11)"/><text x="42.6696%" y="127.50"></text></g><g><title>evaluate_obligation (476,784 samples, 1.84%)</title><rect x="40.8518%" y="133" width="1.8418%" height="15" fill="rgb(250,166,2)"/><text x="41.1018%" y="143.50">e..</text></g><g><title>impl_trait_ref (36,160 samples, 0.14%)</title><rect x="42.9143%" y="133" width="0.1397%" height="15" fill="rgb(242,216,29)"/><text x="43.1643%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (33,080 samples, 0.13%)</title><rect x="42.9262%" y="117" width="0.1278%" height="15" fill="rgb(230,116,27)"/><text x="43.1762%" y="127.50"></text></g><g><title>item_attrs (51,680 samples, 0.20%)</title><rect x="43.1131%" y="133" width="0.1996%" height="15" fill="rgb(228,99,48)"/><text x="43.3631%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (49,420 samples, 0.19%)</title><rect x="43.1218%" y="117" width="0.1909%" height="15" fill="rgb(253,11,6)"/><text x="43.3718%" y="127.50"></text></g><g><title>predicates_of (86,260 samples, 0.33%)</title><rect x="43.4505%" y="133" width="0.3332%" height="15" fill="rgb(247,143,39)"/><text x="43.7005%" y="143.50"></text></g><g><title>predicates_defined_on (57,690 samples, 0.22%)</title><rect x="43.5609%" y="117" width="0.2229%" height="15" fill="rgb(236,97,10)"/><text x="43.8109%" y="127.50"></text></g><g><title>trait_impls_of (42,581 samples, 0.16%)</title><rect x="43.7883%" y="133" width="0.1645%" height="15" fill="rgb(233,208,19)"/><text x="44.0383%" y="143.50"></text></g><g><title>item_bodies_checking (2,583,529 samples, 9.98%)</title><rect x="34.1277%" y="181" width="9.9802%" height="15" fill="rgb(216,164,2)"/><text x="34.3777%" y="191.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (2,581,939 samples, 9.97%)</title><rect x="34.1338%" y="165" width="9.9741%" height="15" fill="rgb(220,129,5)"/><text x="34.3838%" y="175.50">typeck_item_bo..</text></g><g><title>typeck (2,571,569 samples, 9.93%)</title><rect x="34.1739%" y="149" width="9.9340%" height="15" fill="rgb(242,17,10)"/><text x="34.4239%" y="159.50">typeck</text></g><g><title>item_types_checking (301,043 samples, 1.16%)</title><rect x="44.1079%" y="181" width="1.1629%" height="15" fill="rgb(242,107,0)"/><text x="44.3579%" y="191.50"></text></g><g><title>check_mod_item_types (298,853 samples, 1.15%)</title><rect x="44.1164%" y="165" width="1.1545%" height="15" fill="rgb(251,28,31)"/><text x="44.3664%" y="175.50"></text></g><g><title>typeck (73,491 samples, 0.28%)</title><rect x="44.9870%" y="149" width="0.2839%" height="15" fill="rgb(233,223,10)"/><text x="45.2370%" y="159.50"></text></g><g><title>late_bound_vars_map (38,910 samples, 0.15%)</title><rect x="45.8144%" y="133" width="0.1503%" height="15" fill="rgb(215,21,27)"/><text x="46.0644%" y="143.50"></text></g><g><title>resolve_lifetimes (32,650 samples, 0.13%)</title><rect x="45.8385%" y="117" width="0.1261%" height="15" fill="rgb(232,23,21)"/><text x="46.0885%" y="127.50"></text></g><g><title>fn_sig (137,422 samples, 0.53%)</title><rect x="45.5467%" y="149" width="0.5309%" height="15" fill="rgb(244,5,23)"/><text x="45.7967%" y="159.50"></text></g><g><title>type_of (29,231 samples, 0.11%)</title><rect x="45.9647%" y="133" width="0.1129%" height="15" fill="rgb(226,81,46)"/><text x="46.2147%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (27,661 samples, 0.11%)</title><rect x="45.9707%" y="117" width="0.1069%" height="15" fill="rgb(247,70,30)"/><text x="46.2207%" y="127.50"></text></g><g><title>named_region_map (76,330 samples, 0.29%)</title><rect x="46.2076%" y="133" width="0.2949%" height="15" fill="rgb(212,68,19)"/><text x="46.4576%" y="143.50"></text></g><g><title>resolve_lifetimes (73,610 samples, 0.28%)</title><rect x="46.2181%" y="117" width="0.2844%" height="15" fill="rgb(240,187,13)"/><text x="46.4681%" y="127.50"></text></g><g><title>lint_levels (31,590 samples, 0.12%)</title><rect x="46.3804%" y="101" width="0.1220%" height="15" fill="rgb(223,113,26)"/><text x="46.6304%" y="111.50"></text></g><g><title>generics_of (120,131 samples, 0.46%)</title><rect x="46.0776%" y="149" width="0.4641%" height="15" fill="rgb(206,192,2)"/><text x="46.3276%" y="159.50"></text></g><g><title>explicit_predicates_of (52,791 samples, 0.20%)</title><rect x="46.7036%" y="117" width="0.2039%" height="15" fill="rgb(241,108,4)"/><text x="46.9536%" y="127.50"></text></g><g><title>predicates_of (96,261 samples, 0.37%)</title><rect x="46.6134%" y="149" width="0.3719%" height="15" fill="rgb(247,173,49)"/><text x="46.8634%" y="159.50"></text></g><g><title>predicates_defined_on (87,441 samples, 0.34%)</title><rect x="46.6474%" y="133" width="0.3378%" height="15" fill="rgb(224,114,35)"/><text x="46.8974%" y="143.50"></text></g><g><title>type_collecting (492,895 samples, 1.90%)</title><rect x="45.2744%" y="181" width="1.9041%" height="15" fill="rgb(245,159,27)"/><text x="45.5244%" y="191.50">t..</text></g><g><title>collect_mod_item_types (485,695 samples, 1.88%)</title><rect x="45.3022%" y="165" width="1.8763%" height="15" fill="rgb(245,172,44)"/><text x="45.5522%" y="175.50">c..</text></g><g><title>type_of (50,031 samples, 0.19%)</title><rect x="46.9852%" y="149" width="0.1933%" height="15" fill="rgb(236,23,11)"/><text x="47.2352%" y="159.50"></text></g><g><title>adt_sized_constraint (30,160 samples, 0.12%)</title><rect x="48.3334%" y="133" width="0.1165%" height="15" fill="rgb(205,117,38)"/><text x="48.5834%" y="143.50"></text></g><g><title>adt_def (29,150 samples, 0.11%)</title><rect x="48.3373%" y="117" width="0.1126%" height="15" fill="rgb(237,72,25)"/><text x="48.5873%" y="127.50"></text></g><g><title>evaluate_obligation (114,491 samples, 0.44%)</title><rect x="48.1014%" y="149" width="0.4423%" height="15" fill="rgb(244,70,9)"/><text x="48.3514%" y="159.50"></text></g><g><title>implied_outlives_bounds (42,420 samples, 0.16%)</title><rect x="48.5437%" y="149" width="0.1639%" height="15" fill="rgb(217,125,39)"/><text x="48.7937%" y="159.50"></text></g><g><title>param_env (26,221 samples, 0.10%)</title><rect x="48.7076%" y="149" width="0.1013%" height="15" fill="rgb(235,36,10)"/><text x="48.9576%" y="159.50"></text></g><g><title>check_impl_item_well_formed (450,165 samples, 1.74%)</title><rect x="47.2938%" y="165" width="1.7390%" height="15" fill="rgb(251,123,47)"/><text x="47.5438%" y="175.50"></text></g><g><title>region_scope_tree (36,551 samples, 0.14%)</title><rect x="48.8916%" y="149" width="0.1412%" height="15" fill="rgb(221,13,13)"/><text x="49.1416%" y="159.50"></text></g><g><title>evaluate_obligation (116,872 samples, 0.45%)</title><rect x="50.0922%" y="149" width="0.4515%" height="15" fill="rgb(238,131,9)"/><text x="50.3422%" y="159.50"></text></g><g><title>implied_outlives_bounds (40,241 samples, 0.16%)</title><rect x="50.5501%" y="149" width="0.1555%" height="15" fill="rgb(211,50,8)"/><text x="50.8001%" y="159.50"></text></g><g><title>param_env (41,370 samples, 0.16%)</title><rect x="50.7055%" y="149" width="0.1598%" height="15" fill="rgb(245,182,24)"/><text x="50.9555%" y="159.50"></text></g><g><title>predicates_of (39,951 samples, 0.15%)</title><rect x="50.8654%" y="149" width="0.1543%" height="15" fill="rgb(242,14,37)"/><text x="51.1154%" y="159.50"></text></g><g><title>predicates_defined_on (30,331 samples, 0.12%)</title><rect x="50.9025%" y="133" width="0.1172%" height="15" fill="rgb(246,228,12)"/><text x="51.1525%" y="143.50"></text></g><g><title>analysis (12,747,322 samples, 49.24%)</title><rect x="1.9445%" y="213" width="49.2433%" height="15" fill="rgb(213,55,15)"/><text x="2.1945%" y="223.50">analysis</text></g><g><title>type_check_crate (8,099,270 samples, 31.29%)</title><rect x="19.9001%" y="197" width="31.2877%" height="15" fill="rgb(209,9,3)"/><text x="20.1501%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,036,942 samples, 4.01%)</title><rect x="47.1820%" y="181" width="4.0057%" height="15" fill="rgb(230,59,30)"/><text x="47.4320%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (557,847 samples, 2.15%)</title><rect x="49.0328%" y="165" width="2.1550%" height="15" fill="rgb(209,121,21)"/><text x="49.2828%" y="175.50">c..</text></g><g><title>codegen_crate (311,893 samples, 1.20%)</title><rect x="51.2138%" y="213" width="1.2049%" height="15" fill="rgb(220,109,13)"/><text x="51.4638%" y="223.50"></text></g><g><title>AST_validation (55,971 samples, 0.22%)</title><rect x="52.9183%" y="197" width="0.2162%" height="15" fill="rgb(232,18,1)"/><text x="53.1683%" y="207.50"></text></g><g><title>crate_injection (61,251 samples, 0.24%)</title><rect x="53.2086%" y="197" width="0.2366%" height="15" fill="rgb(215,41,42)"/><text x="53.4586%" y="207.50"></text></g><g><title>metadata_load_macro (43,850 samples, 0.17%)</title><rect x="79.1808%" y="165" width="0.1694%" height="15" fill="rgb(224,123,36)"/><text x="79.4308%" y="175.50"></text></g><g><title>macro_expand_crate (6,864,547 samples, 26.52%)</title><rect x="53.4452%" y="197" width="26.5179%" height="15" fill="rgb(240,125,3)"/><text x="53.6952%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (6,859,027 samples, 26.50%)</title><rect x="53.4665%" y="181" width="26.4966%" height="15" fill="rgb(205,98,50)"/><text x="53.7165%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (158,663 samples, 0.61%)</title><rect x="79.3502%" y="165" width="0.6129%" height="15" fill="rgb(205,185,37)"/><text x="79.6002%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (241,993 samples, 0.93%)</title><rect x="79.9776%" y="197" width="0.9348%" height="15" fill="rgb(238,207,15)"/><text x="80.2276%" y="207.50"></text></g><g><title>finalize_macro_resolutions (95,551 samples, 0.37%)</title><rect x="80.9910%" y="181" width="0.3691%" height="15" fill="rgb(213,199,42)"/><text x="81.2410%" y="191.50"></text></g><g><title>late_resolve_crate (387,064 samples, 1.50%)</title><rect x="81.3601%" y="181" width="1.4952%" height="15" fill="rgb(235,201,11)"/><text x="81.6101%" y="191.50"></text></g><g><title>configure_and_expand (7,912,259 samples, 30.57%)</title><rect x="52.4187%" y="213" width="30.5653%" height="15" fill="rgb(207,46,11)"/><text x="52.6687%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (536,245 samples, 2.07%)</title><rect x="80.9124%" y="197" width="2.0715%" height="15" fill="rgb(241,35,35)"/><text x="81.1624%" y="207.50">r..</text></g><g><title>drop_ast (46,780 samples, 0.18%)</title><rect x="82.9839%" y="213" width="0.1807%" height="15" fill="rgb(243,32,47)"/><text x="83.2339%" y="223.50"></text></g><g><title>early_lint_checks (92,321 samples, 0.36%)</title><rect x="83.2276%" y="213" width="0.3566%" height="15" fill="rgb(247,202,23)"/><text x="83.4776%" y="223.50"></text></g><g><title>free_global_ctxt (1,419,656 samples, 5.48%)</title><rect x="83.5842%" y="213" width="5.4842%" height="15" fill="rgb(219,102,11)"/><text x="83.8342%" y="223.50">free_gl..</text></g><g><title>crate_hash (61,450 samples, 0.24%)</title><rect x="90.1184%" y="197" width="0.2374%" height="15" fill="rgb(243,110,44)"/><text x="90.3684%" y="207.50"></text></g><g><title>generate_crate_metadata (369,904 samples, 1.43%)</title><rect x="89.0684%" y="213" width="1.4289%" height="15" fill="rgb(222,74,54)"/><text x="89.3184%" y="223.50"></text></g><g><title>hir_lowering (459,885 samples, 1.78%)</title><rect x="90.4973%" y="213" width="1.7765%" height="15" fill="rgb(216,99,12)"/><text x="90.7473%" y="223.50">h..</text></g><g><title>link (37,300 samples, 0.14%)</title><rect x="92.2739%" y="213" width="0.1441%" height="15" fill="rgb(226,22,26)"/><text x="92.5239%" y="223.50"></text></g><g><title>parse_crate (1,041,642 samples, 4.02%)</title><rect x="92.4180%" y="213" width="4.0239%" height="15" fill="rgb(217,163,10)"/><text x="92.6680%" y="223.50">pars..</text></g><g><title>prepare_outputs (145,501 samples, 0.56%)</title><rect x="96.4596%" y="213" width="0.5621%" height="15" fill="rgb(213,25,53)"/><text x="96.7096%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (374,414 samples, 1.45%)</title><rect x="97.0217%" y="213" width="1.4464%" height="15" fill="rgb(252,105,26)"/><text x="97.2717%" y="223.50"></text></g><g><title>setup_global_ctxt (74,931 samples, 0.29%)</title><rect x="98.5134%" y="213" width="0.2895%" height="15" fill="rgb(220,39,43)"/><text x="98.7634%" y="223.50"></text></g><g><title>all (25,886,429 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (25,886,429 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (309,884 samples, 1.20%)</title><rect x="98.8029%" y="213" width="1.1971%" height="15" fill="rgb(223,20,43)"/><text x="99.0529%" y="223.50"></text></g></svg></svg>