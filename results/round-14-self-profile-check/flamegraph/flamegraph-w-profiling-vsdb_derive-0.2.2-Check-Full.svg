<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>dropck_outlives (617,476 samples, 0.14%)</title><rect x="11.9391%" y="165" width="0.1352%" height="15" fill="rgb(227,0,7)"/><text x="12.1891%" y="175.50"></text></g><g><title>needs_drop_raw (1,270,766 samples, 0.28%)</title><rect x="16.5419%" y="101" width="0.2783%" height="15" fill="rgb(217,0,24)"/><text x="16.7919%" y="111.50"></text></g><g><title>is_copy_raw (743,860 samples, 0.16%)</title><rect x="16.6573%" y="85" width="0.1629%" height="15" fill="rgb(221,193,54)"/><text x="16.9073%" y="95.50"></text></g><g><title>evaluate_obligation (545,579 samples, 0.12%)</title><rect x="16.7007%" y="69" width="0.1195%" height="15" fill="rgb(248,212,6)"/><text x="16.9507%" y="79.50"></text></g><g><title>thir_body (5,177,198 samples, 1.13%)</title><rect x="16.8283%" y="101" width="1.1338%" height="15" fill="rgb(208,68,35)"/><text x="17.0783%" y="111.50"></text></g><g><title>mir_const (23,926,628 samples, 5.24%)</title><rect x="12.7313%" y="149" width="5.2398%" height="15" fill="rgb(232,128,0)"/><text x="12.9813%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (21,512,857 samples, 4.71%)</title><rect x="13.2600%" y="133" width="4.7112%" height="15" fill="rgb(207,160,47)"/><text x="13.5100%" y="143.50">unsaf..</text></g><g><title>mir_built (19,972,047 samples, 4.37%)</title><rect x="13.5974%" y="117" width="4.3738%" height="15" fill="rgb(228,23,34)"/><text x="13.8474%" y="127.50">mir_b..</text></g><g><title>mir_promoted (26,946,719 samples, 5.90%)</title><rect x="12.1848%" y="165" width="5.9012%" height="15" fill="rgb(218,30,26)"/><text x="12.4348%" y="175.50">mir_prom..</text></g><g><title>mir_const_qualif (524,287 samples, 0.11%)</title><rect x="17.9712%" y="149" width="0.1148%" height="15" fill="rgb(220,122,19)"/><text x="18.2212%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,969,299 samples, 0.87%)</title><rect x="18.1026%" y="165" width="0.8693%" height="15" fill="rgb(250,228,42)"/><text x="18.3526%" y="175.50"></text></g><g><title>normalize_projection_ty (2,924,177 samples, 0.64%)</title><rect x="18.3315%" y="149" width="0.6404%" height="15" fill="rgb(240,193,28)"/><text x="18.5815%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,208,875 samples, 0.26%)</title><rect x="18.9718%" y="165" width="0.2647%" height="15" fill="rgb(216,20,37)"/><text x="19.2218%" y="175.50"></text></g><g><title>MIR_borrow_checking (96,144,685 samples, 21.06%)</title><rect x="0.4985%" y="197" width="21.0553%" height="15" fill="rgb(206,188,39)"/><text x="0.7485%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (95,989,205 samples, 21.02%)</title><rect x="0.5325%" y="181" width="21.0213%" height="15" fill="rgb(217,207,13)"/><text x="0.7825%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (10,581,059 samples, 2.32%)</title><rect x="19.2366%" y="165" width="2.3172%" height="15" fill="rgb(231,73,38)"/><text x="19.4866%" y="175.50">t..</text></g><g><title>check_mod_attrs (917,890 samples, 0.20%)</title><rect x="21.6681%" y="181" width="0.2010%" height="15" fill="rgb(225,20,46)"/><text x="21.9181%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (488,125 samples, 0.11%)</title><rect x="21.9495%" y="181" width="0.1069%" height="15" fill="rgb(210,31,41)"/><text x="22.1995%" y="191.50"></text></g><g><title>misc_checking_1 (1,840,331 samples, 0.40%)</title><rect x="21.6649%" y="197" width="0.4030%" height="15" fill="rgb(221,200,47)"/><text x="21.9149%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,808,330 samples, 0.40%)</title><rect x="22.0684%" y="181" width="0.3960%" height="15" fill="rgb(226,26,5)"/><text x="22.3184%" y="191.50"></text></g><g><title>check_mod_liveness (1,477,236 samples, 0.32%)</title><rect x="22.1409%" y="165" width="0.3235%" height="15" fill="rgb(249,33,26)"/><text x="22.3909%" y="175.50"></text></g><g><title>misc_checking_2 (3,757,172 samples, 0.82%)</title><rect x="22.0679%" y="197" width="0.8228%" height="15" fill="rgb(235,183,28)"/><text x="22.3179%" y="207.50"></text></g><g><title>match_checking (1,946,862 samples, 0.43%)</title><rect x="22.4644%" y="181" width="0.4264%" height="15" fill="rgb(221,5,38)"/><text x="22.7144%" y="191.50"></text></g><g><title>check_match (1,900,872 samples, 0.42%)</title><rect x="22.4745%" y="165" width="0.4163%" height="15" fill="rgb(247,18,42)"/><text x="22.7245%" y="175.50"></text></g><g><title>death_checking (542,516 samples, 0.12%)</title><rect x="22.9363%" y="181" width="0.1188%" height="15" fill="rgb(241,131,45)"/><text x="23.1863%" y="191.50"></text></g><g><title>crate_lints (2,215,915 samples, 0.49%)</title><rect x="23.0555%" y="165" width="0.4853%" height="15" fill="rgb(249,31,29)"/><text x="23.3055%" y="175.50"></text></g><g><title>lint_checking (4,464,980 samples, 0.98%)</title><rect x="23.0551%" y="181" width="0.9778%" height="15" fill="rgb(225,111,53)"/><text x="23.3051%" y="191.50"></text></g><g><title>module_lints (2,247,485 samples, 0.49%)</title><rect x="23.5408%" y="165" width="0.4922%" height="15" fill="rgb(238,160,17)"/><text x="23.7908%" y="175.50"></text></g><g><title>lint_mod (2,244,425 samples, 0.49%)</title><rect x="23.5414%" y="149" width="0.4915%" height="15" fill="rgb(214,148,48)"/><text x="23.7914%" y="159.50"></text></g><g><title>privacy_checking_modules (2,784,142 samples, 0.61%)</title><rect x="24.0984%" y="181" width="0.6097%" height="15" fill="rgb(232,36,49)"/><text x="24.3484%" y="191.50"></text></g><g><title>check_mod_privacy (2,781,882 samples, 0.61%)</title><rect x="24.0989%" y="165" width="0.6092%" height="15" fill="rgb(209,103,24)"/><text x="24.3489%" y="175.50"></text></g><g><title>misc_checking_3 (8,311,034 samples, 1.82%)</title><rect x="22.8907%" y="197" width="1.8201%" height="15" fill="rgb(229,88,8)"/><text x="23.1407%" y="207.50">m..</text></g><g><title>adt_def (486,256 samples, 0.11%)</title><rect x="29.0970%" y="85" width="0.1065%" height="15" fill="rgb(213,181,19)"/><text x="29.3470%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (470,766 samples, 0.10%)</title><rect x="29.1004%" y="69" width="0.1031%" height="15" fill="rgb(254,191,54)"/><text x="29.3504%" y="79.50"></text></g><g><title>adt_dtorck_constraint (703,740 samples, 0.15%)</title><rect x="29.3023%" y="69" width="0.1541%" height="15" fill="rgb(241,83,37)"/><text x="29.5523%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,185,115 samples, 0.26%)</title><rect x="29.2224%" y="85" width="0.2595%" height="15" fill="rgb(233,36,39)"/><text x="29.4724%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,119,203 samples, 0.46%)</title><rect x="29.0517%" y="101" width="0.4641%" height="15" fill="rgb(226,3,54)"/><text x="29.3017%" y="111.50"></text></g><g><title>dropck_outlives (2,911,803 samples, 0.64%)</title><rect x="28.9095%" y="133" width="0.6377%" height="15" fill="rgb(245,192,40)"/><text x="29.1595%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,787,712 samples, 0.61%)</title><rect x="28.9366%" y="117" width="0.6105%" height="15" fill="rgb(238,167,29)"/><text x="29.1866%" y="127.50"></text></g><g><title>evaluate_obligation (694,627 samples, 0.15%)</title><rect x="29.5471%" y="133" width="0.1521%" height="15" fill="rgb(232,182,51)"/><text x="29.7971%" y="143.50"></text></g><g><title>dropck_outlives (722,085 samples, 0.16%)</title><rect x="45.1891%" y="117" width="0.1581%" height="15" fill="rgb(231,60,39)"/><text x="45.4391%" y="127.50"></text></g><g><title>evaluate_obligation (5,391,061 samples, 1.18%)</title><rect x="45.3473%" y="117" width="1.1806%" height="15" fill="rgb(208,69,12)"/><text x="45.5973%" y="127.50"></text></g><g><title>lint_levels (705,718 samples, 0.15%)</title><rect x="46.6021%" y="117" width="0.1545%" height="15" fill="rgb(235,93,37)"/><text x="46.8521%" y="127.50"></text></g><g><title>method_autoderef_steps (1,228,056 samples, 0.27%)</title><rect x="46.7593%" y="117" width="0.2689%" height="15" fill="rgb(213,116,39)"/><text x="47.0093%" y="127.50"></text></g><g><title>typeck (79,291,555 samples, 17.36%)</title><rect x="29.7812%" y="133" width="17.3645%" height="15" fill="rgb(222,207,29)"/><text x="30.0312%" y="143.50">typeck</text></g><g><title>item_bodies_checking (102,353,605 samples, 22.42%)</title><rect x="24.7345%" y="181" width="22.4150%" height="15" fill="rgb(206,96,30)"/><text x="24.9845%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (102,350,605 samples, 22.41%)</title><rect x="24.7352%" y="165" width="22.4144%" height="15" fill="rgb(218,138,4)"/><text x="24.9852%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (102,299,574 samples, 22.40%)</title><rect x="24.7463%" y="149" width="22.4032%" height="15" fill="rgb(250,191,14)"/><text x="24.9963%" y="159.50">typeck</text></g><g><title>coherent_trait (635,777 samples, 0.14%)</title><rect x="47.2557%" y="53" width="0.1392%" height="15" fill="rgb(239,60,40)"/><text x="47.5057%" y="63.50"></text></g><g><title>specialization_graph_of (631,677 samples, 0.14%)</title><rect x="47.2566%" y="37" width="0.1383%" height="15" fill="rgb(206,27,48)"/><text x="47.5066%" y="47.50"></text></g><g><title>adt_destructor (643,427 samples, 0.14%)</title><rect x="47.2544%" y="85" width="0.1409%" height="15" fill="rgb(225,35,8)"/><text x="47.5044%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (642,907 samples, 0.14%)</title><rect x="47.2545%" y="69" width="0.1408%" height="15" fill="rgb(250,213,24)"/><text x="47.5045%" y="79.50"></text></g><g><title>adt_dtorck_constraint (652,937 samples, 0.14%)</title><rect x="47.2525%" y="101" width="0.1430%" height="15" fill="rgb(247,123,22)"/><text x="47.5025%" y="111.50"></text></g><g><title>dropck_outlives (682,267 samples, 0.15%)</title><rect x="47.2463%" y="133" width="0.1494%" height="15" fill="rgb(231,138,38)"/><text x="47.4963%" y="143.50"></text></g><g><title>adt_dtorck_constraint (665,687 samples, 0.15%)</title><rect x="47.2499%" y="117" width="0.1458%" height="15" fill="rgb(231,145,46)"/><text x="47.4999%" y="127.50"></text></g><g><title>item_types_checking (1,318,435 samples, 0.29%)</title><rect x="47.1495%" y="181" width="0.2887%" height="15" fill="rgb(251,118,11)"/><text x="47.3995%" y="191.50"></text></g><g><title>check_mod_item_types (1,316,125 samples, 0.29%)</title><rect x="47.1500%" y="165" width="0.2882%" height="15" fill="rgb(217,147,25)"/><text x="47.4000%" y="175.50"></text></g><g><title>typeck (1,277,344 samples, 0.28%)</title><rect x="47.1585%" y="149" width="0.2797%" height="15" fill="rgb(247,81,37)"/><text x="47.4085%" y="159.50"></text></g><g><title>type_collecting (979,711 samples, 0.21%)</title><rect x="47.4392%" y="181" width="0.2146%" height="15" fill="rgb(209,12,38)"/><text x="47.6892%" y="191.50"></text></g><g><title>collect_mod_item_types (973,081 samples, 0.21%)</title><rect x="47.4406%" y="165" width="0.2131%" height="15" fill="rgb(227,1,9)"/><text x="47.6906%" y="175.50"></text></g><g><title>region_scope_tree (1,343,365 samples, 0.29%)</title><rect x="47.9356%" y="149" width="0.2942%" height="15" fill="rgb(248,47,43)"/><text x="48.1856%" y="159.50"></text></g><g><title>analysis (219,074,561 samples, 47.98%)</title><rect x="0.2535%" y="213" width="47.9765%" height="15" fill="rgb(221,10,30)"/><text x="0.5035%" y="223.50">analysis</text></g><g><title>type_check_crate (107,395,071 samples, 23.52%)</title><rect x="24.7108%" y="197" width="23.5191%" height="15" fill="rgb(210,229,1)"/><text x="24.9608%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,626,509 samples, 0.58%)</title><rect x="47.6547%" y="181" width="0.5752%" height="15" fill="rgb(222,148,37)"/><text x="47.9047%" y="191.50"></text></g><g><title>check_item_well_formed (2,454,526 samples, 0.54%)</title><rect x="47.6924%" y="165" width="0.5375%" height="15" fill="rgb(234,67,33)"/><text x="47.9424%" y="175.50"></text></g><g><title>codegen_crate (483,636 samples, 0.11%)</title><rect x="48.2321%" y="213" width="0.1059%" height="15" fill="rgb(247,98,35)"/><text x="48.4821%" y="223.50"></text></g><g><title>metadata_load_macro (934,751 samples, 0.20%)</title><rect x="91.3544%" y="165" width="0.2047%" height="15" fill="rgb(247,138,52)"/><text x="91.6044%" y="175.50"></text></g><g><title>macro_expand_crate (199,449,840 samples, 43.68%)</title><rect x="48.5374%" y="197" width="43.6787%" height="15" fill="rgb(213,79,30)"/><text x="48.7874%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (199,424,399 samples, 43.67%)</title><rect x="48.5430%" y="181" width="43.6732%" height="15" fill="rgb(246,177,23)"/><text x="48.7930%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (3,000,475 samples, 0.66%)</title><rect x="91.5591%" y="165" width="0.6571%" height="15" fill="rgb(230,62,27)"/><text x="91.8091%" y="175.50"></text></g><g><title>metadata_register_crate (1,031,322 samples, 0.23%)</title><rect x="91.9903%" y="149" width="0.2259%" height="15" fill="rgb(216,154,8)"/><text x="92.2403%" y="159.50"></text></g><g><title>maybe_create_a_macro_crate (696,908 samples, 0.15%)</title><rect x="92.2165%" y="197" width="0.1526%" height="15" fill="rgb(244,35,45)"/><text x="92.4665%" y="207.50"></text></g><g><title>finalize_macro_resolutions (2,803,671 samples, 0.61%)</title><rect x="92.5217%" y="181" width="0.6140%" height="15" fill="rgb(251,115,12)"/><text x="92.7717%" y="191.50"></text></g><g><title>late_resolve_crate (6,444,703 samples, 1.41%)</title><rect x="93.1357%" y="181" width="1.4114%" height="15" fill="rgb(240,54,50)"/><text x="93.3857%" y="191.50"></text></g><g><title>configure_and_expand (211,535,066 samples, 46.33%)</title><rect x="48.3381%" y="213" width="46.3254%" height="15" fill="rgb(233,84,52)"/><text x="48.5881%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (10,055,623 samples, 2.20%)</title><rect x="92.4613%" y="197" width="2.2021%" height="15" fill="rgb(207,117,47)"/><text x="92.7113%" y="207.50">r..</text></g><g><title>drop_ast (732,498 samples, 0.16%)</title><rect x="94.6634%" y="213" width="0.1604%" height="15" fill="rgb(249,43,39)"/><text x="94.9134%" y="223.50"></text></g><g><title>early_lint_checks (2,124,044 samples, 0.47%)</title><rect x="94.8278%" y="213" width="0.4652%" height="15" fill="rgb(209,38,44)"/><text x="95.0778%" y="223.50"></text></g><g><title>free_global_ctxt (3,678,161 samples, 0.81%)</title><rect x="95.2929%" y="213" width="0.8055%" height="15" fill="rgb(236,212,23)"/><text x="95.5429%" y="223.50"></text></g><g><title>hir_lowering (10,095,223 samples, 2.21%)</title><rect x="96.1383%" y="213" width="2.2108%" height="15" fill="rgb(242,79,21)"/><text x="96.3883%" y="223.50">h..</text></g><g><title>parse_crate (6,344,591 samples, 1.39%)</title><rect x="98.3617%" y="213" width="1.3894%" height="15" fill="rgb(211,96,35)"/><text x="98.6117%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (496,666 samples, 0.11%)</title><rect x="99.8004%" y="213" width="0.1088%" height="15" fill="rgb(253,215,40)"/><text x="100.0504%" y="223.50"></text></g><g><title>all (456,629,100 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(211,81,21)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (456,629,100 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>