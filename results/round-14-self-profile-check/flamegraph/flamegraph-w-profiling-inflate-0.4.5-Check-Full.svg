<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (426,426 samples, 0.16%)</title><rect x="13.3233%" y="117" width="0.1594%" height="15" fill="rgb(227,0,7)"/><text x="13.5733%" y="127.50"></text></g><g><title>item_attrs (385,792 samples, 0.14%)</title><rect x="13.9083%" y="85" width="0.1442%" height="15" fill="rgb(217,0,24)"/><text x="14.1583%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (372,342 samples, 0.14%)</title><rect x="13.9134%" y="69" width="0.1391%" height="15" fill="rgb(221,193,54)"/><text x="14.1634%" y="79.50"></text></g><g><title>codegen_fn_attrs (547,356 samples, 0.20%)</title><rect x="13.8577%" y="101" width="0.2046%" height="15" fill="rgb(248,212,6)"/><text x="14.1077%" y="111.50"></text></g><g><title>needs_drop_raw (1,548,181 samples, 0.58%)</title><rect x="17.6946%" y="85" width="0.5786%" height="15" fill="rgb(208,68,35)"/><text x="17.9446%" y="95.50"></text></g><g><title>is_copy_raw (1,120,982 samples, 0.42%)</title><rect x="17.8543%" y="69" width="0.4189%" height="15" fill="rgb(232,128,0)"/><text x="18.1043%" y="79.50"></text></g><g><title>evaluate_obligation (931,130 samples, 0.35%)</title><rect x="17.9252%" y="53" width="0.3480%" height="15" fill="rgb(207,160,47)"/><text x="18.1752%" y="63.50"></text></g><g><title>specialization_graph_of (1,058,371 samples, 0.40%)</title><rect x="18.4804%" y="69" width="0.3955%" height="15" fill="rgb(228,23,34)"/><text x="18.7304%" y="79.50"></text></g><g><title>impl_trait_ref (513,926 samples, 0.19%)</title><rect x="18.6839%" y="53" width="0.1921%" height="15" fill="rgb(218,30,26)"/><text x="18.9339%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (440,956 samples, 0.16%)</title><rect x="18.7111%" y="37" width="0.1648%" height="15" fill="rgb(220,122,19)"/><text x="18.9611%" y="47.50"></text></g><g><title>resolve_instance (1,711,429 samples, 0.64%)</title><rect x="18.2732%" y="85" width="0.6396%" height="15" fill="rgb(250,228,42)"/><text x="18.5232%" y="95.50"></text></g><g><title>thir_body (3,589,286 samples, 1.34%)</title><rect x="18.9261%" y="85" width="1.3414%" height="15" fill="rgb(240,193,28)"/><text x="19.1761%" y="95.50"></text></g><g><title>mir_const (20,582,481 samples, 7.69%)</title><rect x="12.5850%" y="133" width="7.6920%" height="15" fill="rgb(216,20,37)"/><text x="12.8350%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (18,180,315 samples, 6.79%)</title><rect x="13.4827%" y="117" width="6.7942%" height="15" fill="rgb(206,188,39)"/><text x="13.7327%" y="127.50">unsafety_..</text></g><g><title>mir_built (16,629,448 samples, 6.21%)</title><rect x="14.0623%" y="101" width="6.2147%" height="15" fill="rgb(217,207,13)"/><text x="14.3123%" y="111.50">mir_built</text></g><g><title>thir_body (427,914 samples, 0.16%)</title><rect x="20.4359%" y="69" width="0.1599%" height="15" fill="rgb(231,73,38)"/><text x="20.6859%" y="79.50"></text></g><g><title>mir_promoted (23,382,887 samples, 8.74%)</title><rect x="11.8587%" y="149" width="8.7385%" height="15" fill="rgb(225,20,46)"/><text x="12.1087%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (857,080 samples, 0.32%)</title><rect x="20.2769%" y="133" width="0.3203%" height="15" fill="rgb(210,31,41)"/><text x="20.5269%" y="143.50"></text></g><g><title>mir_const (732,067 samples, 0.27%)</title><rect x="20.3237%" y="117" width="0.2736%" height="15" fill="rgb(221,200,47)"/><text x="20.5737%" y="127.50"></text></g><g><title>unsafety_check_result (640,086 samples, 0.24%)</title><rect x="20.3580%" y="101" width="0.2392%" height="15" fill="rgb(226,26,5)"/><text x="20.6080%" y="111.50"></text></g><g><title>mir_built (610,106 samples, 0.23%)</title><rect x="20.3692%" y="85" width="0.2280%" height="15" fill="rgb(249,33,26)"/><text x="20.6192%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (442,384 samples, 0.17%)</title><rect x="20.5987%" y="149" width="0.1653%" height="15" fill="rgb(235,183,28)"/><text x="20.8487%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (834,430 samples, 0.31%)</title><rect x="20.7640%" y="149" width="0.3118%" height="15" fill="rgb(221,5,38)"/><text x="21.0140%" y="159.50"></text></g><g><title>normalize_projection_ty (559,367 samples, 0.21%)</title><rect x="20.8668%" y="133" width="0.2090%" height="15" fill="rgb(247,18,42)"/><text x="21.1168%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,508,900 samples, 0.94%)</title><rect x="21.1031%" y="149" width="0.9376%" height="15" fill="rgb(241,131,45)"/><text x="21.3531%" y="159.50"></text></g><g><title>MIR_borrow_checking (57,366,568 samples, 21.44%)</title><rect x="0.6042%" y="181" width="21.4387%" height="15" fill="rgb(249,31,29)"/><text x="0.8542%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (57,193,067 samples, 21.37%)</title><rect x="0.6690%" y="165" width="21.3739%" height="15" fill="rgb(225,111,53)"/><text x="0.9190%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (296,903 samples, 0.11%)</title><rect x="22.0429%" y="181" width="0.1110%" height="15" fill="rgb(238,160,17)"/><text x="22.2929%" y="191.50"></text></g><g><title>hir_module_items (305,065 samples, 0.11%)</title><rect x="22.1538%" y="181" width="0.1140%" height="15" fill="rgb(214,148,48)"/><text x="22.4038%" y="191.50"></text></g><g><title>codegen_fn_attrs (393,465 samples, 0.15%)</title><rect x="22.4679%" y="149" width="0.1470%" height="15" fill="rgb(232,36,49)"/><text x="22.7179%" y="159.50"></text></g><g><title>should_inherit_track_caller (342,275 samples, 0.13%)</title><rect x="22.4870%" y="133" width="0.1279%" height="15" fill="rgb(209,103,24)"/><text x="22.7370%" y="143.50"></text></g><g><title>check_mod_attrs (903,240 samples, 0.34%)</title><rect x="22.2774%" y="165" width="0.3376%" height="15" fill="rgb(229,88,8)"/><text x="22.5274%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (545,986 samples, 0.20%)</title><rect x="22.7540%" y="165" width="0.2040%" height="15" fill="rgb(213,181,19)"/><text x="23.0040%" y="175.50"></text></g><g><title>misc_checking_1 (1,903,372 samples, 0.71%)</title><rect x="22.2680%" y="181" width="0.7113%" height="15" fill="rgb(254,191,54)"/><text x="22.5180%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,359,866 samples, 0.51%)</title><rect x="22.9800%" y="165" width="0.5082%" height="15" fill="rgb(241,83,37)"/><text x="23.2300%" y="175.50"></text></g><g><title>check_mod_liveness (1,101,742 samples, 0.41%)</title><rect x="23.0765%" y="149" width="0.4117%" height="15" fill="rgb(233,36,39)"/><text x="23.3265%" y="159.50"></text></g><g><title>misc_checking_2 (2,832,242 samples, 1.06%)</title><rect x="22.9794%" y="181" width="1.0584%" height="15" fill="rgb(226,3,54)"/><text x="23.2294%" y="191.50"></text></g><g><title>match_checking (1,470,576 samples, 0.55%)</title><rect x="23.4882%" y="165" width="0.5496%" height="15" fill="rgb(245,192,40)"/><text x="23.7382%" y="175.50"></text></g><g><title>check_match (1,427,835 samples, 0.53%)</title><rect x="23.5042%" y="149" width="0.5336%" height="15" fill="rgb(238,167,29)"/><text x="23.7542%" y="159.50"></text></g><g><title>check_private_in_public (356,374 samples, 0.13%)</title><rect x="24.0419%" y="165" width="0.1332%" height="15" fill="rgb(232,182,51)"/><text x="24.2919%" y="175.50"></text></g><g><title>death_checking (697,218 samples, 0.26%)</title><rect x="24.1751%" y="165" width="0.2606%" height="15" fill="rgb(231,60,39)"/><text x="24.4251%" y="175.50"></text></g><g><title>param_env (321,113 samples, 0.12%)</title><rect x="24.9842%" y="133" width="0.1200%" height="15" fill="rgb(208,69,12)"/><text x="25.2342%" y="143.50"></text></g><g><title>crate_lints (3,344,818 samples, 1.25%)</title><rect x="24.4363%" y="149" width="1.2500%" height="15" fill="rgb(235,93,37)"/><text x="24.6863%" y="159.50"></text></g><g><title>type_of (1,491,018 samples, 0.56%)</title><rect x="25.1291%" y="133" width="0.5572%" height="15" fill="rgb(213,116,39)"/><text x="25.3791%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,241,944 samples, 0.46%)</title><rect x="25.2222%" y="117" width="0.4641%" height="15" fill="rgb(222,207,29)"/><text x="25.4722%" y="127.50"></text></g><g><title>lint_checking (4,909,415 samples, 1.83%)</title><rect x="24.4356%" y="165" width="1.8347%" height="15" fill="rgb(206,96,30)"/><text x="24.6856%" y="175.50">l..</text></g><g><title>module_lints (1,562,757 samples, 0.58%)</title><rect x="25.6863%" y="149" width="0.5840%" height="15" fill="rgb(218,138,4)"/><text x="25.9363%" y="159.50"></text></g><g><title>lint_mod (1,556,797 samples, 0.58%)</title><rect x="25.6886%" y="133" width="0.5818%" height="15" fill="rgb(250,191,14)"/><text x="25.9386%" y="143.50"></text></g><g><title>privacy_access_levels (454,075 samples, 0.17%)</title><rect x="26.2704%" y="165" width="0.1697%" height="15" fill="rgb(239,60,40)"/><text x="26.5204%" y="175.50"></text></g><g><title>privacy_checking_modules (1,779,560 samples, 0.67%)</title><rect x="26.4401%" y="165" width="0.6650%" height="15" fill="rgb(206,27,48)"/><text x="26.6901%" y="175.50"></text></g><g><title>check_mod_privacy (1,775,460 samples, 0.66%)</title><rect x="26.4416%" y="149" width="0.6635%" height="15" fill="rgb(225,35,8)"/><text x="26.6916%" y="159.50"></text></g><g><title>misc_checking_3 (8,229,132 samples, 3.08%)</title><rect x="24.0378%" y="181" width="3.0753%" height="15" fill="rgb(250,213,24)"/><text x="24.2878%" y="191.50">mis..</text></g><g><title>adt_destructor (528,455 samples, 0.20%)</title><rect x="27.1682%" y="133" width="0.1975%" height="15" fill="rgb(247,123,22)"/><text x="27.4182%" y="143.50"></text></g><g><title>coherent_trait (517,315 samples, 0.19%)</title><rect x="27.1723%" y="117" width="0.1933%" height="15" fill="rgb(231,138,38)"/><text x="27.4223%" y="127.50"></text></g><g><title>specialization_graph_of (515,855 samples, 0.19%)</title><rect x="27.1729%" y="101" width="0.1928%" height="15" fill="rgb(231,145,46)"/><text x="27.4229%" y="111.50"></text></g><g><title>impl_parent (964,802 samples, 0.36%)</title><rect x="27.9988%" y="117" width="0.3606%" height="15" fill="rgb(251,118,11)"/><text x="28.2488%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (597,337 samples, 0.22%)</title><rect x="28.1362%" y="101" width="0.2232%" height="15" fill="rgb(217,147,25)"/><text x="28.3862%" y="111.50"></text></g><g><title>impl_trait_ref (2,826,241 samples, 1.06%)</title><rect x="28.3594%" y="117" width="1.0562%" height="15" fill="rgb(247,81,37)"/><text x="28.6094%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,462,689 samples, 0.92%)</title><rect x="28.4953%" y="101" width="0.9203%" height="15" fill="rgb(209,12,38)"/><text x="28.7453%" y="111.50"></text></g><g><title>coherent_trait (6,347,970 samples, 2.37%)</title><rect x="27.1573%" y="149" width="2.3723%" height="15" fill="rgb(227,1,9)"/><text x="27.4073%" y="159.50">co..</text></g><g><title>specialization_graph_of (5,542,492 samples, 2.07%)</title><rect x="27.4583%" y="133" width="2.0713%" height="15" fill="rgb(248,47,43)"/><text x="27.7083%" y="143.50">s..</text></g><g><title>trait_impls_of (305,134 samples, 0.11%)</title><rect x="29.4156%" y="117" width="0.1140%" height="15" fill="rgb(221,10,30)"/><text x="29.6656%" y="127.50"></text></g><g><title>coherence_checking (6,430,221 samples, 2.40%)</title><rect x="27.1503%" y="165" width="2.4031%" height="15" fill="rgb(210,229,1)"/><text x="27.4003%" y="175.50">co..</text></g><g><title>associated_item (306,302 samples, 0.11%)</title><rect x="38.9237%" y="101" width="0.1145%" height="15" fill="rgb(222,148,37)"/><text x="39.1737%" y="111.50"></text></g><g><title>associated_items (433,463 samples, 0.16%)</title><rect x="38.8845%" y="117" width="0.1620%" height="15" fill="rgb(234,67,33)"/><text x="39.1345%" y="127.50"></text></g><g><title>adt_def (390,065 samples, 0.15%)</title><rect x="39.2000%" y="85" width="0.1458%" height="15" fill="rgb(247,98,35)"/><text x="39.4500%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (389,415 samples, 0.15%)</title><rect x="39.2002%" y="69" width="0.1455%" height="15" fill="rgb(247,138,52)"/><text x="39.4502%" y="79.50"></text></g><g><title>item_attrs (372,454 samples, 0.14%)</title><rect x="39.2066%" y="53" width="0.1392%" height="15" fill="rgb(213,79,30)"/><text x="39.4566%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (371,624 samples, 0.14%)</title><rect x="39.2069%" y="37" width="0.1389%" height="15" fill="rgb(246,177,23)"/><text x="39.4569%" y="47.50"></text></g><g><title>dropck_outlives (872,948 samples, 0.33%)</title><rect x="39.0780%" y="117" width="0.3262%" height="15" fill="rgb(230,62,27)"/><text x="39.3280%" y="127.50"></text></g><g><title>adt_dtorck_constraint (589,988 samples, 0.22%)</title><rect x="39.1838%" y="101" width="0.2205%" height="15" fill="rgb(216,154,8)"/><text x="39.4338%" y="111.50"></text></g><g><title>generics_of (1,545,888 samples, 0.58%)</title><rect x="41.7898%" y="101" width="0.5777%" height="15" fill="rgb(244,35,45)"/><text x="42.0398%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,182,541 samples, 0.44%)</title><rect x="41.9256%" y="85" width="0.4419%" height="15" fill="rgb(251,115,12)"/><text x="42.1756%" y="95.50"></text></g><g><title>impl_trait_ref (1,894,366 samples, 0.71%)</title><rect x="42.4690%" y="101" width="0.7080%" height="15" fill="rgb(240,54,50)"/><text x="42.7190%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,526,041 samples, 0.57%)</title><rect x="42.6066%" y="85" width="0.5703%" height="15" fill="rgb(233,84,52)"/><text x="42.8566%" y="95.50"></text></g><g><title>predicates_of (1,259,332 samples, 0.47%)</title><rect x="43.2059%" y="101" width="0.4706%" height="15" fill="rgb(207,117,47)"/><text x="43.4559%" y="111.50"></text></g><g><title>predicates_defined_on (736,676 samples, 0.28%)</title><rect x="43.4012%" y="85" width="0.2753%" height="15" fill="rgb(249,43,39)"/><text x="43.6512%" y="95.50"></text></g><g><title>specializes (3,223,045 samples, 1.20%)</title><rect x="43.6765%" y="101" width="1.2045%" height="15" fill="rgb(209,38,44)"/><text x="43.9265%" y="111.50"></text></g><g><title>param_env (1,934,097 samples, 0.72%)</title><rect x="44.1582%" y="85" width="0.7228%" height="15" fill="rgb(236,212,23)"/><text x="44.4082%" y="95.50"></text></g><g><title>def_span (918,920 samples, 0.34%)</title><rect x="44.5376%" y="69" width="0.3434%" height="15" fill="rgb(242,79,21)"/><text x="44.7876%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (818,640 samples, 0.31%)</title><rect x="44.5751%" y="53" width="0.3059%" height="15" fill="rgb(211,96,35)"/><text x="44.8251%" y="63.50"></text></g><g><title>trait_impls_of (1,147,772 samples, 0.43%)</title><rect x="44.8900%" y="101" width="0.4289%" height="15" fill="rgb(253,215,40)"/><text x="45.1400%" y="111.50"></text></g><g><title>implementations_of_trait (577,937 samples, 0.22%)</title><rect x="45.1029%" y="85" width="0.2160%" height="15" fill="rgb(211,81,21)"/><text x="45.3529%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (280,603 samples, 0.10%)</title><rect x="45.2141%" y="69" width="0.1049%" height="15" fill="rgb(208,190,38)"/><text x="45.4641%" y="79.50"></text></g><g><title>evaluate_obligation (15,874,420 samples, 5.93%)</title><rect x="39.4043%" y="117" width="5.9325%" height="15" fill="rgb(235,213,38)"/><text x="39.6543%" y="127.50">evaluate..</text></g><g><title>generics_of (672,467 samples, 0.25%)</title><rect x="45.3998%" y="117" width="0.2513%" height="15" fill="rgb(237,122,38)"/><text x="45.6498%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (521,025 samples, 0.19%)</title><rect x="45.4564%" y="101" width="0.1947%" height="15" fill="rgb(244,218,35)"/><text x="45.7064%" y="111.50"></text></g><g><title>associated_item (267,882 samples, 0.10%)</title><rect x="45.6665%" y="85" width="0.1001%" height="15" fill="rgb(240,68,47)"/><text x="45.9165%" y="95.50"></text></g><g><title>impl_item_implementor_ids (318,372 samples, 0.12%)</title><rect x="45.6511%" y="117" width="0.1190%" height="15" fill="rgb(210,16,53)"/><text x="45.9011%" y="127.50"></text></g><g><title>associated_items (304,582 samples, 0.11%)</title><rect x="45.6563%" y="101" width="0.1138%" height="15" fill="rgb(235,124,12)"/><text x="45.9063%" y="111.50"></text></g><g><title>impl_trait_ref (533,244 samples, 0.20%)</title><rect x="45.7736%" y="117" width="0.1993%" height="15" fill="rgb(224,169,11)"/><text x="46.0236%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (410,464 samples, 0.15%)</title><rect x="45.8195%" y="101" width="0.1534%" height="15" fill="rgb(250,166,2)"/><text x="46.0695%" y="111.50"></text></g><g><title>method_autoderef_steps (277,376 samples, 0.10%)</title><rect x="46.0345%" y="117" width="0.1037%" height="15" fill="rgb(242,216,29)"/><text x="46.2845%" y="127.50"></text></g><g><title>predicates_of (355,880 samples, 0.13%)</title><rect x="46.2451%" y="117" width="0.1330%" height="15" fill="rgb(230,116,27)"/><text x="46.4951%" y="127.50"></text></g><g><title>associated_item (432,826 samples, 0.16%)</title><rect x="67.0216%" y="85" width="0.1618%" height="15" fill="rgb(228,99,48)"/><text x="67.2716%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (347,164 samples, 0.13%)</title><rect x="67.0536%" y="69" width="0.1297%" height="15" fill="rgb(253,11,6)"/><text x="67.3036%" y="79.50"></text></g><g><title>associated_items (617,749 samples, 0.23%)</title><rect x="66.9650%" y="101" width="0.2309%" height="15" fill="rgb(247,143,39)"/><text x="67.2150%" y="111.50"></text></g><g><title>mir_const_qualif (297,452 samples, 0.11%)</title><rect x="67.4179%" y="69" width="0.1112%" height="15" fill="rgb(236,97,10)"/><text x="67.6679%" y="79.50"></text></g><g><title>mir_borrowck (595,838 samples, 0.22%)</title><rect x="67.6284%" y="37" width="0.2227%" height="15" fill="rgb(233,208,19)"/><text x="67.8784%" y="47.50"></text></g><g><title>mir_for_ctfe (864,090 samples, 0.32%)</title><rect x="67.5291%" y="69" width="0.3229%" height="15" fill="rgb(216,164,2)"/><text x="67.7791%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (793,159 samples, 0.30%)</title><rect x="67.5556%" y="53" width="0.2964%" height="15" fill="rgb(220,129,5)"/><text x="67.8056%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,457,025 samples, 0.54%)</title><rect x="67.3080%" y="101" width="0.5445%" height="15" fill="rgb(242,17,10)"/><text x="67.5580%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,432,185 samples, 0.54%)</title><rect x="67.3172%" y="85" width="0.5352%" height="15" fill="rgb(242,107,0)"/><text x="67.5672%" y="95.50"></text></g><g><title>specializes (689,216 samples, 0.26%)</title><rect x="69.2941%" y="85" width="0.2576%" height="15" fill="rgb(251,28,31)"/><text x="69.5441%" y="95.50"></text></g><g><title>param_env (349,375 samples, 0.13%)</title><rect x="69.4211%" y="69" width="0.1306%" height="15" fill="rgb(233,223,10)"/><text x="69.6711%" y="79.50"></text></g><g><title>trait_impls_of (321,776 samples, 0.12%)</title><rect x="69.5558%" y="85" width="0.1203%" height="15" fill="rgb(215,21,27)"/><text x="69.8058%" y="95.50"></text></g><g><title>evaluate_obligation (4,887,068 samples, 1.83%)</title><rect x="67.8525%" y="101" width="1.8264%" height="15" fill="rgb(232,23,21)"/><text x="68.1025%" y="111.50">e..</text></g><g><title>method_autoderef_steps (314,486 samples, 0.12%)</title><rect x="69.9996%" y="101" width="0.1175%" height="15" fill="rgb(244,5,23)"/><text x="70.2496%" y="111.50"></text></g><g><title>predicates_of (282,425 samples, 0.11%)</title><rect x="70.1284%" y="101" width="0.1055%" height="15" fill="rgb(226,81,46)"/><text x="70.3784%" y="111.50"></text></g><g><title>typeck (63,954,742 samples, 23.90%)</title><rect x="46.4946%" y="117" width="23.9008%" height="15" fill="rgb(247,70,30)"/><text x="46.7446%" y="127.50">typeck</text></g><g><title>item_bodies_checking (109,308,076 samples, 40.85%)</title><rect x="29.5639%" y="165" width="40.8500%" height="15" fill="rgb(212,68,19)"/><text x="29.8139%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (109,303,816 samples, 40.85%)</title><rect x="29.5655%" y="149" width="40.8484%" height="15" fill="rgb(240,187,13)"/><text x="29.8155%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (109,193,026 samples, 40.81%)</title><rect x="29.6069%" y="133" width="40.8070%" height="15" fill="rgb(223,113,26)"/><text x="29.8569%" y="143.50">typeck</text></g><g><title>item_types_checking (635,027 samples, 0.24%)</title><rect x="70.4139%" y="165" width="0.2373%" height="15" fill="rgb(206,192,2)"/><text x="70.6639%" y="175.50"></text></g><g><title>check_mod_item_types (629,937 samples, 0.24%)</title><rect x="70.4158%" y="149" width="0.2354%" height="15" fill="rgb(241,108,4)"/><text x="70.6658%" y="159.50"></text></g><g><title>late_bound_vars_map (559,596 samples, 0.21%)</title><rect x="70.8598%" y="117" width="0.2091%" height="15" fill="rgb(247,173,49)"/><text x="71.1098%" y="127.50"></text></g><g><title>resolve_lifetimes (546,046 samples, 0.20%)</title><rect x="70.8649%" y="101" width="0.2041%" height="15" fill="rgb(224,114,35)"/><text x="71.1149%" y="111.50"></text></g><g><title>lint_levels (318,614 samples, 0.12%)</title><rect x="70.9499%" y="85" width="0.1191%" height="15" fill="rgb(245,159,27)"/><text x="71.1999%" y="95.50"></text></g><g><title>fn_sig (772,776 samples, 0.29%)</title><rect x="70.7909%" y="133" width="0.2888%" height="15" fill="rgb(245,172,44)"/><text x="71.0409%" y="143.50"></text></g><g><title>generics_of (332,573 samples, 0.12%)</title><rect x="71.0797%" y="133" width="0.1243%" height="15" fill="rgb(236,23,11)"/><text x="71.3297%" y="143.50"></text></g><g><title>predicates_of (765,019 samples, 0.29%)</title><rect x="71.2110%" y="133" width="0.2859%" height="15" fill="rgb(205,117,38)"/><text x="71.4610%" y="143.50"></text></g><g><title>predicates_defined_on (709,739 samples, 0.27%)</title><rect x="71.2317%" y="117" width="0.2652%" height="15" fill="rgb(237,72,25)"/><text x="71.4817%" y="127.50"></text></g><g><title>inferred_outlives_of (412,895 samples, 0.15%)</title><rect x="71.3426%" y="101" width="0.1543%" height="15" fill="rgb(244,70,9)"/><text x="71.5926%" y="111.50"></text></g><g><title>inferred_outlives_crate (388,144 samples, 0.15%)</title><rect x="71.3519%" y="85" width="0.1451%" height="15" fill="rgb(217,125,39)"/><text x="71.6019%" y="95.50"></text></g><g><title>type_collecting (2,419,877 samples, 0.90%)</title><rect x="70.6522%" y="165" width="0.9043%" height="15" fill="rgb(235,36,10)"/><text x="70.9022%" y="175.50"></text></g><g><title>collect_mod_item_types (2,409,947 samples, 0.90%)</title><rect x="70.6559%" y="149" width="0.9006%" height="15" fill="rgb(251,123,47)"/><text x="70.9059%" y="159.50"></text></g><g><title>evaluate_obligation (609,047 samples, 0.23%)</title><rect x="72.2416%" y="133" width="0.2276%" height="15" fill="rgb(221,13,13)"/><text x="72.4916%" y="143.50"></text></g><g><title>param_env (271,513 samples, 0.10%)</title><rect x="72.5575%" y="133" width="0.1015%" height="15" fill="rgb(238,131,9)"/><text x="72.8075%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,719,331 samples, 1.39%)</title><rect x="71.6490%" y="149" width="1.3900%" height="15" fill="rgb(211,50,8)"/><text x="71.8990%" y="159.50"></text></g><g><title>region_scope_tree (1,005,880 samples, 0.38%)</title><rect x="72.6631%" y="133" width="0.3759%" height="15" fill="rgb(245,182,24)"/><text x="72.9131%" y="143.50"></text></g><g><title>analysis (196,224,033 samples, 73.33%)</title><rect x="0.3588%" y="197" width="73.3317%" height="15" fill="rgb(242,14,37)"/><text x="0.6088%" y="207.50">analysis</text></g><g><title>type_check_crate (124,633,556 samples, 46.58%)</title><rect x="27.1131%" y="181" width="46.5773%" height="15" fill="rgb(246,228,12)"/><text x="27.3631%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,700,803 samples, 2.13%)</title><rect x="71.5600%" y="165" width="2.1305%" height="15" fill="rgb(213,55,15)"/><text x="71.8100%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,743,310 samples, 0.65%)</title><rect x="73.0390%" y="149" width="0.6515%" height="15" fill="rgb(209,9,3)"/><text x="73.2890%" y="159.50"></text></g><g><title>codegen_crate (408,414 samples, 0.15%)</title><rect x="73.6951%" y="197" width="0.1526%" height="15" fill="rgb(230,59,30)"/><text x="73.9451%" y="207.50"></text></g><g><title>metadata_load_macro (369,953 samples, 0.14%)</title><rect x="86.6698%" y="149" width="0.1383%" height="15" fill="rgb(209,121,21)"/><text x="86.9198%" y="159.50"></text></g><g><title>metadata_register_crate (2,661,130 samples, 0.99%)</title><rect x="86.8081%" y="149" width="0.9945%" height="15" fill="rgb(220,109,13)"/><text x="87.0581%" y="159.50"></text></g><g><title>metadata_register_crate (956,650 samples, 0.36%)</title><rect x="87.4451%" y="133" width="0.3575%" height="15" fill="rgb(232,18,1)"/><text x="87.6951%" y="143.50"></text></g><g><title>macro_expand_crate (36,920,261 samples, 13.80%)</title><rect x="74.1141%" y="181" width="13.7976%" height="15" fill="rgb(215,41,42)"/><text x="74.3641%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (36,906,031 samples, 13.79%)</title><rect x="74.1194%" y="165" width="13.7923%" height="15" fill="rgb(224,123,36)"/><text x="74.3694%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (291,964 samples, 0.11%)</title><rect x="87.8026%" y="149" width="0.1091%" height="15" fill="rgb(240,125,3)"/><text x="88.0526%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (655,297 samples, 0.24%)</title><rect x="87.9131%" y="181" width="0.2449%" height="15" fill="rgb(205,98,50)"/><text x="88.1631%" y="191.50"></text></g><g><title>finalize_macro_resolutions (384,384 samples, 0.14%)</title><rect x="88.1762%" y="165" width="0.1436%" height="15" fill="rgb(205,185,37)"/><text x="88.4262%" y="175.50"></text></g><g><title>late_resolve_crate (4,331,638 samples, 1.62%)</title><rect x="88.3198%" y="165" width="1.6188%" height="15" fill="rgb(238,207,15)"/><text x="88.5698%" y="175.50"></text></g><g><title>configure_and_expand (43,322,992 samples, 16.19%)</title><rect x="73.8477%" y="197" width="16.1904%" height="15" fill="rgb(213,199,42)"/><text x="74.0977%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,030,786 samples, 1.88%)</title><rect x="88.1580%" y="181" width="1.8801%" height="15" fill="rgb(235,201,11)"/><text x="88.4080%" y="191.50">r..</text></g><g><title>drop_ast (517,616 samples, 0.19%)</title><rect x="90.0381%" y="197" width="0.1934%" height="15" fill="rgb(207,46,11)"/><text x="90.2881%" y="207.50"></text></g><g><title>early_lint_checks (2,256,504 samples, 0.84%)</title><rect x="90.2371%" y="197" width="0.8433%" height="15" fill="rgb(241,35,35)"/><text x="90.4871%" y="207.50"></text></g><g><title>free_global_ctxt (4,483,500 samples, 1.68%)</title><rect x="91.0804%" y="197" width="1.6755%" height="15" fill="rgb(243,32,47)"/><text x="91.3304%" y="207.50"></text></g><g><title>generate_crate_metadata (1,566,568 samples, 0.59%)</title><rect x="92.7559%" y="197" width="0.5854%" height="15" fill="rgb(247,202,23)"/><text x="93.0059%" y="207.50"></text></g><g><title>hir_lowering (6,116,049 samples, 2.29%)</title><rect x="93.3414%" y="197" width="2.2857%" height="15" fill="rgb(219,102,11)"/><text x="93.5914%" y="207.50">h..</text></g><g><title>parse_crate (9,815,319 samples, 3.67%)</title><rect x="95.6590%" y="197" width="3.6681%" height="15" fill="rgb(243,110,44)"/><text x="95.9090%" y="207.50">pars..</text></g><g><title>self_profile_alloc_query_strings (1,136,083 samples, 0.42%)</title><rect x="99.4057%" y="197" width="0.4246%" height="15" fill="rgb(222,74,54)"/><text x="99.6557%" y="207.50"></text></g><g><title>all (267,584,157 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (267,584,157 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (357,454 samples, 0.13%)</title><rect x="99.8664%" y="197" width="0.1336%" height="15" fill="rgb(217,163,10)"/><text x="100.1164%" y="207.50"></text></g></svg></svg>