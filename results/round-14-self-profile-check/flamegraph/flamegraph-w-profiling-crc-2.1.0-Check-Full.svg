<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_const (166,442 samples, 0.23%)</title><rect x="10.7929%" y="117" width="0.2308%" height="15" fill="rgb(227,0,7)"/><text x="11.0429%" y="127.50"></text></g><g><title>unsafety_check_result (136,321 samples, 0.19%)</title><rect x="10.8347%" y="101" width="0.1890%" height="15" fill="rgb(217,0,24)"/><text x="11.0847%" y="111.50"></text></g><g><title>mir_built (119,790 samples, 0.17%)</title><rect x="10.8576%" y="85" width="0.1661%" height="15" fill="rgb(221,193,54)"/><text x="11.1076%" y="95.50"></text></g><g><title>is_freeze_raw (215,383 samples, 0.30%)</title><rect x="11.7232%" y="101" width="0.2987%" height="15" fill="rgb(248,212,6)"/><text x="11.9732%" y="111.50"></text></g><g><title>evaluate_obligation (204,023 samples, 0.28%)</title><rect x="11.7390%" y="85" width="0.2829%" height="15" fill="rgb(208,68,35)"/><text x="11.9890%" y="95.50"></text></g><g><title>item_attrs (82,850 samples, 0.11%)</title><rect x="13.3502%" y="53" width="0.1149%" height="15" fill="rgb(232,128,0)"/><text x="13.6002%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (80,770 samples, 0.11%)</title><rect x="13.3530%" y="37" width="0.1120%" height="15" fill="rgb(207,160,47)"/><text x="13.6030%" y="47.50"></text></g><g><title>codegen_fn_attrs (116,270 samples, 0.16%)</title><rect x="13.3065%" y="69" width="0.1612%" height="15" fill="rgb(228,23,34)"/><text x="13.5565%" y="79.50"></text></g><g><title>is_copy_raw (334,055 samples, 0.46%)</title><rect x="15.8611%" y="53" width="0.4633%" height="15" fill="rgb(218,30,26)"/><text x="16.1111%" y="63.50"></text></g><g><title>evaluate_obligation (299,725 samples, 0.42%)</title><rect x="15.9087%" y="37" width="0.4156%" height="15" fill="rgb(220,122,19)"/><text x="16.1587%" y="47.50"></text></g><g><title>resolve_instance (98,020 samples, 0.14%)</title><rect x="16.3244%" y="53" width="0.1359%" height="15" fill="rgb(250,228,42)"/><text x="16.5744%" y="63.50"></text></g><g><title>thir_body (718,534 samples, 1.00%)</title><rect x="16.4879%" y="53" width="0.9964%" height="15" fill="rgb(240,193,28)"/><text x="16.7379%" y="63.50"></text></g><g><title>mir_const (3,935,507 samples, 5.46%)</title><rect x="12.0583%" y="101" width="5.4576%" height="15" fill="rgb(216,20,37)"/><text x="12.3083%" y="111.50">mir_con..</text></g><g><title>unsafety_check_result (3,290,203 samples, 4.56%)</title><rect x="12.9532%" y="85" width="4.5627%" height="15" fill="rgb(206,188,39)"/><text x="13.2032%" y="95.50">unsaf..</text></g><g><title>mir_built (2,919,180 samples, 4.05%)</title><rect x="13.4677%" y="69" width="4.0482%" height="15" fill="rgb(217,207,13)"/><text x="13.7177%" y="79.50">mir_..</text></g><g><title>needs_drop_raw (106,992 samples, 0.15%)</title><rect x="17.5159%" y="101" width="0.1484%" height="15" fill="rgb(231,73,38)"/><text x="17.7659%" y="111.50"></text></g><g><title>mir_promoted (5,459,190 samples, 7.57%)</title><rect x="10.0950%" y="133" width="7.5705%" height="15" fill="rgb(225,20,46)"/><text x="10.3450%" y="143.50">mir_promot..</text></g><g><title>mir_const_qualif (4,789,442 samples, 6.64%)</title><rect x="11.0238%" y="117" width="6.6418%" height="15" fill="rgb(210,31,41)"/><text x="11.2738%" y="127.50">mir_const..</text></g><g><title>type_op_ascribe_user_type (98,702 samples, 0.14%)</title><rect x="17.6683%" y="133" width="0.1369%" height="15" fill="rgb(221,200,47)"/><text x="17.9183%" y="143.50"></text></g><g><title>type_op_prove_predicate (453,249 samples, 0.63%)</title><rect x="17.8052%" y="133" width="0.6285%" height="15" fill="rgb(226,26,5)"/><text x="18.0552%" y="143.50"></text></g><g><title>MIR_borrow_checking (12,292,606 samples, 17.05%)</title><rect x="1.3902%" y="165" width="17.0468%" height="15" fill="rgb(249,33,26)"/><text x="1.6402%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,195,954 samples, 16.91%)</title><rect x="1.5243%" y="149" width="16.9128%" height="15" fill="rgb(235,183,28)"/><text x="1.7743%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,696,568 samples, 2.35%)</title><rect x="18.4370%" y="165" width="2.3527%" height="15" fill="rgb(221,5,38)"/><text x="18.6870%" y="175.50">M..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,624,398 samples, 2.25%)</title><rect x="18.5371%" y="149" width="2.2526%" height="15" fill="rgb(247,18,42)"/><text x="18.7871%" y="159.50">m..</text></g><g><title>hir_module_items (218,081 samples, 0.30%)</title><rect x="20.7898%" y="165" width="0.3024%" height="15" fill="rgb(241,131,45)"/><text x="21.0398%" y="175.50"></text></g><g><title>should_inherit_track_caller (119,514 samples, 0.17%)</title><rect x="21.7200%" y="117" width="0.1657%" height="15" fill="rgb(249,31,29)"/><text x="21.9700%" y="127.50"></text></g><g><title>codegen_fn_attrs (295,065 samples, 0.41%)</title><rect x="21.5166%" y="133" width="0.4092%" height="15" fill="rgb(225,111,53)"/><text x="21.7666%" y="143.50"></text></g><g><title>check_mod_attrs (545,098 samples, 0.76%)</title><rect x="21.1702%" y="149" width="0.7559%" height="15" fill="rgb(238,160,17)"/><text x="21.4202%" y="159.50"></text></g><g><title>check_mod_const_bodies (136,861 samples, 0.19%)</title><rect x="21.9261%" y="149" width="0.1898%" height="15" fill="rgb(214,148,48)"/><text x="22.1761%" y="159.50"></text></g><g><title>check_mod_loops (74,390 samples, 0.10%)</title><rect x="22.1159%" y="149" width="0.1032%" height="15" fill="rgb(232,36,49)"/><text x="22.3659%" y="159.50"></text></g><g><title>lookup_deprecation_entry (127,451 samples, 0.18%)</title><rect x="22.3620%" y="133" width="0.1767%" height="15" fill="rgb(209,103,24)"/><text x="22.6120%" y="143.50"></text></g><g><title>stability_index (99,611 samples, 0.14%)</title><rect x="22.4006%" y="117" width="0.1381%" height="15" fill="rgb(229,88,8)"/><text x="22.6506%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (222,472 samples, 0.31%)</title><rect x="22.2406%" y="149" width="0.3085%" height="15" fill="rgb(213,181,19)"/><text x="22.4906%" y="159.50"></text></g><g><title>misc_checking_1 (1,103,653 samples, 1.53%)</title><rect x="21.0928%" y="165" width="1.5305%" height="15" fill="rgb(254,191,54)"/><text x="21.3428%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (280,143 samples, 0.39%)</title><rect x="22.6250%" y="149" width="0.3885%" height="15" fill="rgb(241,83,37)"/><text x="22.8750%" y="159.50"></text></g><g><title>check_mod_liveness (220,373 samples, 0.31%)</title><rect x="22.7079%" y="133" width="0.3056%" height="15" fill="rgb(233,36,39)"/><text x="22.9579%" y="143.50"></text></g><g><title>misc_checking_2 (524,176 samples, 0.73%)</title><rect x="22.6233%" y="165" width="0.7269%" height="15" fill="rgb(226,3,54)"/><text x="22.8733%" y="175.50"></text></g><g><title>match_checking (242,783 samples, 0.34%)</title><rect x="23.0135%" y="149" width="0.3367%" height="15" fill="rgb(245,192,40)"/><text x="23.2635%" y="159.50"></text></g><g><title>check_match (219,993 samples, 0.31%)</title><rect x="23.0451%" y="133" width="0.3051%" height="15" fill="rgb(238,167,29)"/><text x="23.2951%" y="143.50"></text></g><g><title>check_private_in_public (108,252 samples, 0.15%)</title><rect x="23.3612%" y="149" width="0.1501%" height="15" fill="rgb(232,182,51)"/><text x="23.6112%" y="159.50"></text></g><g><title>death_checking (175,452 samples, 0.24%)</title><rect x="23.5113%" y="149" width="0.2433%" height="15" fill="rgb(231,60,39)"/><text x="23.7613%" y="159.50"></text></g><g><title>param_env (173,832 samples, 0.24%)</title><rect x="24.1955%" y="117" width="0.2411%" height="15" fill="rgb(208,69,12)"/><text x="24.4455%" y="127.50"></text></g><g><title>predicates_of (89,802 samples, 0.12%)</title><rect x="24.3120%" y="101" width="0.1245%" height="15" fill="rgb(235,93,37)"/><text x="24.5620%" y="111.50"></text></g><g><title>predicates_defined_on (77,872 samples, 0.11%)</title><rect x="24.3285%" y="85" width="0.1080%" height="15" fill="rgb(213,116,39)"/><text x="24.5785%" y="95.50"></text></g><g><title>trait_impls_of (73,961 samples, 0.10%)</title><rect x="24.4365%" y="117" width="0.1026%" height="15" fill="rgb(222,207,29)"/><text x="24.6865%" y="127.50"></text></g><g><title>crate_lints (1,103,032 samples, 1.53%)</title><rect x="23.7564%" y="133" width="1.5296%" height="15" fill="rgb(206,96,30)"/><text x="24.0064%" y="143.50"></text></g><g><title>type_of (538,665 samples, 0.75%)</title><rect x="24.5391%" y="117" width="0.7470%" height="15" fill="rgb(218,138,4)"/><text x="24.7891%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (458,335 samples, 0.64%)</title><rect x="24.6505%" y="101" width="0.6356%" height="15" fill="rgb(250,191,14)"/><text x="24.9005%" y="111.50"></text></g><g><title>lint_checking (1,303,064 samples, 1.81%)</title><rect x="23.7546%" y="149" width="1.8070%" height="15" fill="rgb(239,60,40)"/><text x="24.0046%" y="159.50">l..</text></g><g><title>module_lints (198,692 samples, 0.28%)</title><rect x="25.2861%" y="133" width="0.2755%" height="15" fill="rgb(206,27,48)"/><text x="25.5361%" y="143.50"></text></g><g><title>lint_mod (194,211 samples, 0.27%)</title><rect x="25.2923%" y="117" width="0.2693%" height="15" fill="rgb(225,35,8)"/><text x="25.5423%" y="127.50"></text></g><g><title>privacy_access_levels (111,891 samples, 0.16%)</title><rect x="25.5616%" y="149" width="0.1552%" height="15" fill="rgb(250,213,24)"/><text x="25.8116%" y="159.50"></text></g><g><title>privacy_checking_modules (267,523 samples, 0.37%)</title><rect x="25.7168%" y="149" width="0.3710%" height="15" fill="rgb(247,123,22)"/><text x="25.9668%" y="159.50"></text></g><g><title>check_mod_privacy (263,783 samples, 0.37%)</title><rect x="25.7220%" y="133" width="0.3658%" height="15" fill="rgb(231,138,38)"/><text x="25.9720%" y="143.50"></text></g><g><title>misc_checking_3 (1,985,472 samples, 2.75%)</title><rect x="23.3502%" y="165" width="2.7534%" height="15" fill="rgb(231,145,46)"/><text x="23.6002%" y="175.50">mi..</text></g><g><title>crate_inherent_impls_overlap_check (249,353 samples, 0.35%)</title><rect x="26.2060%" y="133" width="0.3458%" height="15" fill="rgb(251,118,11)"/><text x="26.4560%" y="143.50"></text></g><g><title>coherence_checking (281,443 samples, 0.39%)</title><rect x="26.1803%" y="149" width="0.3903%" height="15" fill="rgb(217,147,25)"/><text x="26.4303%" y="159.50"></text></g><g><title>associated_item (782,508 samples, 1.09%)</title><rect x="44.8591%" y="85" width="1.0851%" height="15" fill="rgb(247,81,37)"/><text x="45.1091%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (651,066 samples, 0.90%)</title><rect x="45.0414%" y="69" width="0.9029%" height="15" fill="rgb(209,12,38)"/><text x="45.2914%" y="79.50"></text></g><g><title>associated_items (986,781 samples, 1.37%)</title><rect x="44.6040%" y="101" width="1.3684%" height="15" fill="rgb(227,1,9)"/><text x="44.8540%" y="111.50"></text></g><g><title>generics_of (581,587 samples, 0.81%)</title><rect x="50.0423%" y="85" width="0.8065%" height="15" fill="rgb(248,47,43)"/><text x="50.2923%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (475,645 samples, 0.66%)</title><rect x="50.1892%" y="69" width="0.6596%" height="15" fill="rgb(221,10,30)"/><text x="50.4392%" y="79.50"></text></g><g><title>impl_item_implementor_ids (120,662 samples, 0.17%)</title><rect x="50.8488%" y="85" width="0.1673%" height="15" fill="rgb(210,229,1)"/><text x="51.0988%" y="95.50"></text></g><g><title>associated_items (104,501 samples, 0.14%)</title><rect x="50.8712%" y="69" width="0.1449%" height="15" fill="rgb(222,148,37)"/><text x="51.1212%" y="79.50"></text></g><g><title>impl_polarity (110,402 samples, 0.15%)</title><rect x="51.0161%" y="85" width="0.1531%" height="15" fill="rgb(234,67,33)"/><text x="51.2661%" y="95.50"></text></g><g><title>impl_trait_ref (806,081 samples, 1.12%)</title><rect x="51.1692%" y="85" width="1.1178%" height="15" fill="rgb(247,98,35)"/><text x="51.4192%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (701,280 samples, 0.97%)</title><rect x="51.3146%" y="69" width="0.9725%" height="15" fill="rgb(247,138,52)"/><text x="51.5646%" y="79.50"></text></g><g><title>opt_def_kind (122,341 samples, 0.17%)</title><rect x="52.5776%" y="69" width="0.1697%" height="15" fill="rgb(213,79,30)"/><text x="52.8276%" y="79.50"></text></g><g><title>explicit_predicates_of (121,812 samples, 0.17%)</title><rect x="52.9623%" y="53" width="0.1689%" height="15" fill="rgb(246,177,23)"/><text x="53.2123%" y="63.50"></text></g><g><title>predicates_of (663,257 samples, 0.92%)</title><rect x="52.3635%" y="85" width="0.9198%" height="15" fill="rgb(230,62,27)"/><text x="52.6135%" y="95.50"></text></g><g><title>predicates_defined_on (386,513 samples, 0.54%)</title><rect x="52.7473%" y="69" width="0.5360%" height="15" fill="rgb(216,154,8)"/><text x="52.9973%" y="79.50"></text></g><g><title>inferred_outlives_of (109,630 samples, 0.15%)</title><rect x="53.1313%" y="53" width="0.1520%" height="15" fill="rgb(244,35,45)"/><text x="53.3813%" y="63.50"></text></g><g><title>specializes (1,964,980 samples, 2.72%)</title><rect x="53.2833%" y="85" width="2.7249%" height="15" fill="rgb(251,115,12)"/><text x="53.5333%" y="95.50">sp..</text></g><g><title>param_env (1,202,270 samples, 1.67%)</title><rect x="54.3410%" y="69" width="1.6672%" height="15" fill="rgb(240,54,50)"/><text x="54.5910%" y="79.50"></text></g><g><title>def_span (543,275 samples, 0.75%)</title><rect x="55.2548%" y="53" width="0.7534%" height="15" fill="rgb(233,84,52)"/><text x="55.5048%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (482,223 samples, 0.67%)</title><rect x="55.3395%" y="37" width="0.6687%" height="15" fill="rgb(207,117,47)"/><text x="55.5895%" y="47.50"></text></g><g><title>trait_impls_of (250,363 samples, 0.35%)</title><rect x="56.0371%" y="85" width="0.3472%" height="15" fill="rgb(249,43,39)"/><text x="56.2871%" y="95.50"></text></g><g><title>implementations_of_trait (94,641 samples, 0.13%)</title><rect x="56.2530%" y="69" width="0.1312%" height="15" fill="rgb(209,38,44)"/><text x="56.5030%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (83,911 samples, 0.12%)</title><rect x="56.2679%" y="53" width="0.1164%" height="15" fill="rgb(236,212,23)"/><text x="56.5179%" y="63.50"></text></g><g><title>evaluate_obligation (7,442,731 samples, 10.32%)</title><rect x="46.0933%" y="101" width="10.3212%" height="15" fill="rgb(242,79,21)"/><text x="46.3433%" y="111.50">evaluate_obliga..</text></g><g><title>generics_of (311,161 samples, 0.43%)</title><rect x="56.5162%" y="101" width="0.4315%" height="15" fill="rgb(211,96,35)"/><text x="56.7662%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (242,551 samples, 0.34%)</title><rect x="56.6113%" y="85" width="0.3364%" height="15" fill="rgb(253,215,40)"/><text x="56.8613%" y="95.50"></text></g><g><title>impl_trait_ref (384,606 samples, 0.53%)</title><rect x="57.0318%" y="101" width="0.5334%" height="15" fill="rgb(211,81,21)"/><text x="57.2818%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (330,525 samples, 0.46%)</title><rect x="57.1068%" y="85" width="0.4584%" height="15" fill="rgb(208,190,38)"/><text x="57.3568%" y="95.50"></text></g><g><title>method_autoderef_steps (179,493 samples, 0.25%)</title><rect x="57.6411%" y="101" width="0.2489%" height="15" fill="rgb(235,213,38)"/><text x="57.8911%" y="111.50"></text></g><g><title>evaluate_obligation (99,853 samples, 0.14%)</title><rect x="57.7515%" y="85" width="0.1385%" height="15" fill="rgb(237,122,38)"/><text x="58.0015%" y="95.50"></text></g><g><title>param_env (89,161 samples, 0.12%)</title><rect x="57.9337%" y="101" width="0.1236%" height="15" fill="rgb(244,218,35)"/><text x="58.1837%" y="111.50"></text></g><g><title>predicates_of (164,621 samples, 0.23%)</title><rect x="58.0857%" y="101" width="0.2283%" height="15" fill="rgb(240,68,47)"/><text x="58.3357%" y="111.50"></text></g><g><title>predicates_defined_on (100,380 samples, 0.14%)</title><rect x="58.1748%" y="85" width="0.1392%" height="15" fill="rgb(210,16,53)"/><text x="58.4248%" y="95.50"></text></g><g><title>specializes (160,543 samples, 0.22%)</title><rect x="58.3492%" y="101" width="0.2226%" height="15" fill="rgb(235,124,12)"/><text x="58.5992%" y="111.50"></text></g><g><title>item_bodies_checking (23,162,855 samples, 32.12%)</title><rect x="26.6348%" y="149" width="32.1211%" height="15" fill="rgb(224,169,11)"/><text x="26.8848%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,159,195 samples, 32.12%)</title><rect x="26.6399%" y="133" width="32.1160%" height="15" fill="rgb(250,166,2)"/><text x="26.8899%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (23,087,994 samples, 32.02%)</title><rect x="26.7386%" y="117" width="32.0173%" height="15" fill="rgb(242,216,29)"/><text x="26.9886%" y="127.50">typeck</text></g><g><title>item_types_checking (161,872 samples, 0.22%)</title><rect x="58.7560%" y="149" width="0.2245%" height="15" fill="rgb(230,116,27)"/><text x="59.0060%" y="159.50"></text></g><g><title>check_mod_item_types (156,222 samples, 0.22%)</title><rect x="58.7638%" y="133" width="0.2166%" height="15" fill="rgb(228,99,48)"/><text x="59.0138%" y="143.50"></text></g><g><title>adt_destructor (135,631 samples, 0.19%)</title><rect x="58.7923%" y="117" width="0.1881%" height="15" fill="rgb(253,11,6)"/><text x="59.0423%" y="127.50"></text></g><g><title>coherent_trait (128,951 samples, 0.18%)</title><rect x="58.8016%" y="101" width="0.1788%" height="15" fill="rgb(247,143,39)"/><text x="59.0516%" y="111.50"></text></g><g><title>specialization_graph_of (123,951 samples, 0.17%)</title><rect x="58.8085%" y="85" width="0.1719%" height="15" fill="rgb(236,97,10)"/><text x="59.0585%" y="95.50"></text></g><g><title>late_bound_vars_map (89,011 samples, 0.12%)</title><rect x="59.7052%" y="101" width="0.1234%" height="15" fill="rgb(233,208,19)"/><text x="59.9552%" y="111.50"></text></g><g><title>fn_sig (305,385 samples, 0.42%)</title><rect x="59.4135%" y="117" width="0.4235%" height="15" fill="rgb(216,164,2)"/><text x="59.6635%" y="127.50"></text></g><g><title>is_late_bound_map (160,161 samples, 0.22%)</title><rect x="60.0391%" y="101" width="0.2221%" height="15" fill="rgb(220,129,5)"/><text x="60.2891%" y="111.50"></text></g><g><title>resolve_lifetimes (148,401 samples, 0.21%)</title><rect x="60.0554%" y="85" width="0.2058%" height="15" fill="rgb(242,17,10)"/><text x="60.3054%" y="95.50"></text></g><g><title>named_region_map (430,335 samples, 0.60%)</title><rect x="60.2612%" y="101" width="0.5968%" height="15" fill="rgb(242,107,0)"/><text x="60.5112%" y="111.50"></text></g><g><title>resolve_lifetimes (385,125 samples, 0.53%)</title><rect x="60.3239%" y="85" width="0.5341%" height="15" fill="rgb(251,28,31)"/><text x="60.5739%" y="95.50"></text></g><g><title>lint_levels (154,072 samples, 0.21%)</title><rect x="60.6443%" y="69" width="0.2137%" height="15" fill="rgb(233,223,10)"/><text x="60.8943%" y="79.50"></text></g><g><title>generics_of (755,938 samples, 1.05%)</title><rect x="59.8370%" y="117" width="1.0483%" height="15" fill="rgb(215,21,27)"/><text x="60.0870%" y="127.50"></text></g><g><title>explicit_predicates_of (226,952 samples, 0.31%)</title><rect x="61.0907%" y="85" width="0.3147%" height="15" fill="rgb(232,23,21)"/><text x="61.3407%" y="95.50"></text></g><g><title>predicates_of (659,005 samples, 0.91%)</title><rect x="60.8896%" y="117" width="0.9139%" height="15" fill="rgb(244,5,23)"/><text x="61.1396%" y="127.50"></text></g><g><title>predicates_defined_on (606,495 samples, 0.84%)</title><rect x="60.9625%" y="101" width="0.8411%" height="15" fill="rgb(226,81,46)"/><text x="61.2125%" y="111.50"></text></g><g><title>inferred_outlives_of (287,043 samples, 0.40%)</title><rect x="61.4055%" y="85" width="0.3981%" height="15" fill="rgb(247,70,30)"/><text x="61.6555%" y="95.50"></text></g><g><title>inferred_outlives_crate (266,403 samples, 0.37%)</title><rect x="61.4341%" y="69" width="0.3694%" height="15" fill="rgb(212,68,19)"/><text x="61.6841%" y="79.50"></text></g><g><title>type_of (150,190 samples, 0.21%)</title><rect x="61.5952%" y="53" width="0.2083%" height="15" fill="rgb(240,187,13)"/><text x="61.8452%" y="63.50"></text></g><g><title>type_collecting (2,166,334 samples, 3.00%)</title><rect x="58.9835%" y="149" width="3.0042%" height="15" fill="rgb(223,113,26)"/><text x="59.2335%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (2,142,704 samples, 2.97%)</title><rect x="59.0162%" y="133" width="2.9714%" height="15" fill="rgb(206,192,2)"/><text x="59.2662%" y="143.50">col..</text></g><g><title>type_of (132,761 samples, 0.18%)</title><rect x="61.8035%" y="117" width="0.1841%" height="15" fill="rgb(241,108,4)"/><text x="62.0535%" y="127.50"></text></g><g><title>evaluate_obligation (442,105 samples, 0.61%)</title><rect x="65.1164%" y="117" width="0.6131%" height="15" fill="rgb(247,173,49)"/><text x="65.3664%" y="127.50"></text></g><g><title>implied_outlives_bounds (253,714 samples, 0.35%)</title><rect x="65.7295%" y="117" width="0.3518%" height="15" fill="rgb(224,114,35)"/><text x="65.9795%" y="127.50"></text></g><g><title>param_env (301,080 samples, 0.42%)</title><rect x="66.0814%" y="117" width="0.4175%" height="15" fill="rgb(245,159,27)"/><text x="66.3314%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,437,896 samples, 4.77%)</title><rect x="62.2763%" y="133" width="4.7675%" height="15" fill="rgb(245,172,44)"/><text x="62.5263%" y="143.50">check_..</text></g><g><title>region_scope_tree (392,976 samples, 0.54%)</title><rect x="66.4989%" y="117" width="0.5450%" height="15" fill="rgb(236,23,11)"/><text x="66.7489%" y="127.50"></text></g><g><title>evaluate_obligation (274,403 samples, 0.38%)</title><rect x="68.0279%" y="117" width="0.3805%" height="15" fill="rgb(205,117,38)"/><text x="68.2779%" y="127.50"></text></g><g><title>implied_outlives_bounds (88,252 samples, 0.12%)</title><rect x="68.4189%" y="117" width="0.1224%" height="15" fill="rgb(237,72,25)"/><text x="68.6689%" y="127.50"></text></g><g><title>param_env (238,943 samples, 0.33%)</title><rect x="68.5413%" y="117" width="0.3314%" height="15" fill="rgb(244,70,9)"/><text x="68.7913%" y="127.50"></text></g><g><title>region_scope_tree (132,250 samples, 0.18%)</title><rect x="68.8951%" y="117" width="0.1834%" height="15" fill="rgb(217,125,39)"/><text x="69.1451%" y="127.50"></text></g><g><title>analysis (49,241,543 samples, 68.29%)</title><rect x="0.8603%" y="181" width="68.2858%" height="15" fill="rgb(235,36,10)"/><text x="1.1103%" y="191.50">analysis</text></g><g><title>type_check_crate (31,038,422 samples, 43.04%)</title><rect x="26.1035%" y="165" width="43.0426%" height="15" fill="rgb(251,123,47)"/><text x="26.3535%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,157,357 samples, 7.15%)</title><rect x="61.9941%" y="149" width="7.1520%" height="15" fill="rgb(221,13,13)"/><text x="62.2441%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (1,515,937 samples, 2.10%)</title><rect x="67.0439%" y="133" width="2.1022%" height="15" fill="rgb(238,131,9)"/><text x="67.2939%" y="143.50">c..</text></g><g><title>codegen_crate (313,963 samples, 0.44%)</title><rect x="69.1586%" y="181" width="0.4354%" height="15" fill="rgb(211,50,8)"/><text x="69.4086%" y="191.50"></text></g><g><title>AST_validation (147,341 samples, 0.20%)</title><rect x="69.8757%" y="165" width="0.2043%" height="15" fill="rgb(245,182,24)"/><text x="70.1257%" y="175.50"></text></g><g><title>metadata_register_crate (187,521 samples, 0.26%)</title><rect x="85.0247%" y="133" width="0.2600%" height="15" fill="rgb(242,14,37)"/><text x="85.2747%" y="143.50"></text></g><g><title>macro_expand_crate (11,101,203 samples, 15.39%)</title><rect x="70.2543%" y="165" width="15.3946%" height="15" fill="rgb(246,228,12)"/><text x="70.5043%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (11,079,982 samples, 15.37%)</title><rect x="70.2837%" y="149" width="15.3652%" height="15" fill="rgb(213,55,15)"/><text x="70.5337%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (262,635 samples, 0.36%)</title><rect x="85.2847%" y="133" width="0.3642%" height="15" fill="rgb(209,9,3)"/><text x="85.5347%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (78,541 samples, 0.11%)</title><rect x="85.6548%" y="165" width="0.1089%" height="15" fill="rgb(230,59,30)"/><text x="85.9048%" y="175.50"></text></g><g><title>finalize_imports (316,004 samples, 0.44%)</title><rect x="85.7756%" y="149" width="0.4382%" height="15" fill="rgb(209,121,21)"/><text x="86.0256%" y="159.50"></text></g><g><title>late_resolve_crate (1,332,945 samples, 1.85%)</title><rect x="86.2249%" y="149" width="1.8485%" height="15" fill="rgb(220,109,13)"/><text x="86.4749%" y="159.50">l..</text></g><g><title>configure_and_expand (13,458,829 samples, 18.66%)</title><rect x="69.5940%" y="181" width="18.6640%" height="15" fill="rgb(232,18,1)"/><text x="69.8440%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,798,680 samples, 2.49%)</title><rect x="85.7637%" y="165" width="2.4943%" height="15" fill="rgb(215,41,42)"/><text x="86.0137%" y="175.50">re..</text></g><g><title>drop_ast (149,142 samples, 0.21%)</title><rect x="88.2580%" y="181" width="0.2068%" height="15" fill="rgb(224,123,36)"/><text x="88.5080%" y="191.50"></text></g><g><title>early_lint_checks (367,374 samples, 0.51%)</title><rect x="88.4866%" y="181" width="0.5095%" height="15" fill="rgb(240,125,3)"/><text x="88.7366%" y="191.50"></text></g><g><title>free_global_ctxt (2,033,672 samples, 2.82%)</title><rect x="88.9961%" y="181" width="2.8202%" height="15" fill="rgb(205,98,50)"/><text x="89.2461%" y="191.50">fr..</text></g><g><title>mir_for_ctfe (233,774 samples, 0.32%)</title><rect x="93.0578%" y="165" width="0.3242%" height="15" fill="rgb(205,185,37)"/><text x="93.3078%" y="175.50"></text></g><g><title>generate_crate_metadata (1,194,683 samples, 1.66%)</title><rect x="91.8163%" y="181" width="1.6567%" height="15" fill="rgb(238,207,15)"/><text x="92.0663%" y="191.50"></text></g><g><title>hir_lowering (2,926,172 samples, 4.06%)</title><rect x="93.4730%" y="181" width="4.0579%" height="15" fill="rgb(213,199,42)"/><text x="93.7230%" y="191.50">hir_..</text></g><g><title>parse_crate (477,295 samples, 0.66%)</title><rect x="97.6167%" y="181" width="0.6619%" height="15" fill="rgb(235,201,11)"/><text x="97.8667%" y="191.50"></text></g><g><title>prepare_outputs (252,353 samples, 0.35%)</title><rect x="98.2895%" y="181" width="0.3500%" height="15" fill="rgb(207,46,11)"/><text x="98.5395%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (527,396 samples, 0.73%)</title><rect x="98.6394%" y="181" width="0.7314%" height="15" fill="rgb(241,35,35)"/><text x="98.8894%" y="191.50"></text></g><g><title>setup_global_ctxt (122,641 samples, 0.17%)</title><rect x="99.3855%" y="181" width="0.1701%" height="15" fill="rgb(243,32,47)"/><text x="99.6355%" y="191.50"></text></g><g><title>all (72,110,986 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (72,110,986 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (320,494 samples, 0.44%)</title><rect x="99.5556%" y="181" width="0.4444%" height="15" fill="rgb(243,110,44)"/><text x="99.8056%" y="191.50"></text></g></svg></svg>