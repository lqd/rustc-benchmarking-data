<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (35,480 samples, 0.15%)</title><rect x="5.9835%" y="165" width="0.1457%" height="15" fill="rgb(227,0,7)"/><text x="6.2335%" y="175.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (33,550 samples, 0.14%)</title><rect x="5.9914%" y="149" width="0.1378%" height="15" fill="rgb(217,0,24)"/><text x="6.2414%" y="159.50"></text></g><g><title>param_env (37,050 samples, 0.15%)</title><rect x="6.1292%" y="165" width="0.1521%" height="15" fill="rgb(221,193,54)"/><text x="6.3792%" y="175.50"></text></g><g><title>item_attrs (47,861 samples, 0.20%)</title><rect x="6.5305%" y="133" width="0.1965%" height="15" fill="rgb(248,212,6)"/><text x="6.7805%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,321 samples, 0.19%)</title><rect x="6.5369%" y="117" width="0.1902%" height="15" fill="rgb(208,68,35)"/><text x="6.7869%" y="127.50"></text></g><g><title>codegen_fn_attrs (63,101 samples, 0.26%)</title><rect x="6.4737%" y="149" width="0.2591%" height="15" fill="rgb(232,128,0)"/><text x="6.7237%" y="159.50"></text></g><g><title>adt_drop_tys (30,260 samples, 0.12%)</title><rect x="7.2631%" y="117" width="0.1242%" height="15" fill="rgb(207,160,47)"/><text x="7.5131%" y="127.50"></text></g><g><title>explicit_predicates_of (32,240 samples, 0.13%)</title><rect x="7.9019%" y="53" width="0.1324%" height="15" fill="rgb(228,23,34)"/><text x="8.1519%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (30,650 samples, 0.13%)</title><rect x="7.9084%" y="37" width="0.1258%" height="15" fill="rgb(218,30,26)"/><text x="8.1584%" y="47.50"></text></g><g><title>predicates_of (46,010 samples, 0.19%)</title><rect x="7.8538%" y="85" width="0.1889%" height="15" fill="rgb(220,122,19)"/><text x="8.1038%" y="95.50"></text></g><g><title>predicates_defined_on (38,660 samples, 0.16%)</title><rect x="7.8839%" y="69" width="0.1587%" height="15" fill="rgb(250,228,42)"/><text x="8.1339%" y="79.50"></text></g><g><title>needs_drop_raw (469,515 samples, 1.93%)</title><rect x="7.2085%" y="133" width="1.9278%" height="15" fill="rgb(240,193,28)"/><text x="7.4585%" y="143.50">n..</text></g><g><title>is_copy_raw (425,974 samples, 1.75%)</title><rect x="7.3873%" y="117" width="1.7490%" height="15" fill="rgb(216,20,37)"/><text x="7.6373%" y="127.50"></text></g><g><title>evaluate_obligation (413,564 samples, 1.70%)</title><rect x="7.4383%" y="101" width="1.6981%" height="15" fill="rgb(206,188,39)"/><text x="7.6883%" y="111.50"></text></g><g><title>trait_impls_of (264,313 samples, 1.09%)</title><rect x="8.0511%" y="85" width="1.0853%" height="15" fill="rgb(217,207,13)"/><text x="8.3011%" y="95.50"></text></g><g><title>implementations_of_trait (54,410 samples, 0.22%)</title><rect x="8.9129%" y="69" width="0.2234%" height="15" fill="rgb(231,73,38)"/><text x="9.1629%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (46,300 samples, 0.19%)</title><rect x="8.9462%" y="53" width="0.1901%" height="15" fill="rgb(225,20,46)"/><text x="9.1962%" y="63.50"></text></g><g><title>thir_body (87,750 samples, 0.36%)</title><rect x="9.2366%" y="133" width="0.3603%" height="15" fill="rgb(210,31,41)"/><text x="9.4866%" y="143.50"></text></g><g><title>lit_to_const (34,060 samples, 0.14%)</title><rect x="9.4570%" y="117" width="0.1398%" height="15" fill="rgb(221,200,47)"/><text x="9.7070%" y="127.50"></text></g><g><title>mir_const (976,551 samples, 4.01%)</title><rect x="5.6105%" y="181" width="4.0097%" height="15" fill="rgb(226,26,5)"/><text x="5.8605%" y="191.50">mir_..</text></g><g><title>unsafety_check_result (813,189 samples, 3.34%)</title><rect x="6.2813%" y="165" width="3.3389%" height="15" fill="rgb(249,33,26)"/><text x="6.5313%" y="175.50">uns..</text></g><g><title>mir_built (703,238 samples, 2.89%)</title><rect x="6.7328%" y="149" width="2.8875%" height="15" fill="rgb(235,183,28)"/><text x="6.9828%" y="159.50">mi..</text></g><g><title>mir_promoted (1,094,252 samples, 4.49%)</title><rect x="5.1528%" y="197" width="4.4930%" height="15" fill="rgb(221,5,38)"/><text x="5.4028%" y="207.50">mir_p..</text></g><g><title>MIR_borrow_checking (1,812,040 samples, 7.44%)</title><rect x="2.5506%" y="229" width="7.4402%" height="15" fill="rgb(247,18,42)"/><text x="2.8006%" y="239.50">MIR_borrow..</text></g><g><title>mir_borrowck (1,807,640 samples, 7.42%)</title><rect x="2.5687%" y="213" width="7.4221%" height="15" fill="rgb(241,131,45)"/><text x="2.8187%" y="223.50">mir_borrow..</text></g><g><title>type_op_prove_predicate (60,802 samples, 0.25%)</title><rect x="9.7412%" y="197" width="0.2497%" height="15" fill="rgb(249,31,29)"/><text x="9.9912%" y="207.50"></text></g><g><title>hir_owner (24,831 samples, 0.10%)</title><rect x="10.2688%" y="213" width="0.1020%" height="15" fill="rgb(225,111,53)"/><text x="10.5188%" y="223.50"></text></g><g><title>hir_module_items (88,351 samples, 0.36%)</title><rect x="10.0090%" y="229" width="0.3628%" height="15" fill="rgb(238,160,17)"/><text x="10.2590%" y="239.50"></text></g><g><title>get_lang_items (60,591 samples, 0.25%)</title><rect x="10.7325%" y="181" width="0.2488%" height="15" fill="rgb(214,148,48)"/><text x="10.9825%" y="191.50"></text></g><g><title>codegen_fn_attrs (119,472 samples, 0.49%)</title><rect x="10.6157%" y="197" width="0.4905%" height="15" fill="rgb(232,36,49)"/><text x="10.8657%" y="207.50"></text></g><g><title>supported_target_features (28,250 samples, 0.12%)</title><rect x="10.9903%" y="181" width="0.1160%" height="15" fill="rgb(209,103,24)"/><text x="11.2403%" y="191.50"></text></g><g><title>check_mod_attrs (160,253 samples, 0.66%)</title><rect x="10.4490%" y="213" width="0.6580%" height="15" fill="rgb(229,88,8)"/><text x="10.6990%" y="223.50"></text></g><g><title>check_mod_const_bodies (25,630 samples, 0.11%)</title><rect x="11.1070%" y="213" width="0.1052%" height="15" fill="rgb(213,181,19)"/><text x="11.3570%" y="223.50"></text></g><g><title>lookup_deprecation_entry (38,480 samples, 0.16%)</title><rect x="11.5360%" y="197" width="0.1580%" height="15" fill="rgb(254,191,54)"/><text x="11.7860%" y="207.50"></text></g><g><title>lookup_stability (32,660 samples, 0.13%)</title><rect x="11.6940%" y="197" width="0.1341%" height="15" fill="rgb(241,83,37)"/><text x="11.9440%" y="207.50"></text></g><g><title>metadata_decode_entry_lookup_stability (29,360 samples, 0.12%)</title><rect x="11.7076%" y="181" width="0.1206%" height="15" fill="rgb(233,36,39)"/><text x="11.9576%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (142,051 samples, 0.58%)</title><rect x="11.2752%" y="213" width="0.5833%" height="15" fill="rgb(226,3,54)"/><text x="11.5252%" y="223.50"></text></g><g><title>looking_for_derive_registrar (31,560 samples, 0.13%)</title><rect x="11.8624%" y="213" width="0.1296%" height="15" fill="rgb(245,192,40)"/><text x="12.1124%" y="223.50"></text></g><g><title>misc_checking_1 (397,524 samples, 1.63%)</title><rect x="10.3742%" y="229" width="1.6322%" height="15" fill="rgb(238,167,29)"/><text x="10.6242%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (66,251 samples, 0.27%)</title><rect x="12.0141%" y="213" width="0.2720%" height="15" fill="rgb(232,182,51)"/><text x="12.2641%" y="223.50"></text></g><g><title>check_mod_liveness (53,901 samples, 0.22%)</title><rect x="12.0648%" y="197" width="0.2213%" height="15" fill="rgb(231,60,39)"/><text x="12.3148%" y="207.50"></text></g><g><title>type_uninhabited_from (25,321 samples, 0.10%)</title><rect x="12.1821%" y="181" width="0.1040%" height="15" fill="rgb(208,69,12)"/><text x="12.4321%" y="191.50"></text></g><g><title>misc_checking_2 (93,241 samples, 0.38%)</title><rect x="12.0065%" y="229" width="0.3828%" height="15" fill="rgb(235,93,37)"/><text x="12.2565%" y="239.50"></text></g><g><title>match_checking (25,140 samples, 0.10%)</title><rect x="12.2861%" y="213" width="0.1032%" height="15" fill="rgb(213,116,39)"/><text x="12.5361%" y="223.50"></text></g><g><title>check_private_in_public (25,891 samples, 0.11%)</title><rect x="12.4278%" y="213" width="0.1063%" height="15" fill="rgb(222,207,29)"/><text x="12.6778%" y="223.50"></text></g><g><title>death_checking (89,971 samples, 0.37%)</title><rect x="12.5341%" y="213" width="0.3694%" height="15" fill="rgb(206,96,30)"/><text x="12.7841%" y="223.50"></text></g><g><title>crate_lints (152,362 samples, 0.63%)</title><rect x="12.9118%" y="197" width="0.6256%" height="15" fill="rgb(218,138,4)"/><text x="13.1618%" y="207.50"></text></g><g><title>param_env (98,231 samples, 0.40%)</title><rect x="13.1340%" y="181" width="0.4033%" height="15" fill="rgb(250,191,14)"/><text x="13.3840%" y="191.50"></text></g><g><title>predicates_of (45,901 samples, 0.19%)</title><rect x="13.3489%" y="165" width="0.1885%" height="15" fill="rgb(239,60,40)"/><text x="13.5989%" y="175.50"></text></g><g><title>predicates_defined_on (37,371 samples, 0.15%)</title><rect x="13.3839%" y="149" width="0.1534%" height="15" fill="rgb(206,27,48)"/><text x="13.6339%" y="159.50"></text></g><g><title>lint_checking (182,312 samples, 0.75%)</title><rect x="12.9035%" y="213" width="0.7486%" height="15" fill="rgb(225,35,8)"/><text x="13.1535%" y="223.50"></text></g><g><title>module_lints (27,940 samples, 0.11%)</title><rect x="13.5374%" y="197" width="0.1147%" height="15" fill="rgb(250,213,24)"/><text x="13.7874%" y="207.50"></text></g><g><title>lint_mod (24,520 samples, 0.10%)</title><rect x="13.5514%" y="181" width="0.1007%" height="15" fill="rgb(247,123,22)"/><text x="13.8014%" y="191.50"></text></g><g><title>privacy_access_levels (40,900 samples, 0.17%)</title><rect x="13.6521%" y="213" width="0.1679%" height="15" fill="rgb(231,138,38)"/><text x="13.9021%" y="223.50"></text></g><g><title>privacy_checking_modules (30,210 samples, 0.12%)</title><rect x="13.8200%" y="213" width="0.1240%" height="15" fill="rgb(231,145,46)"/><text x="14.0700%" y="223.50"></text></g><g><title>check_mod_privacy (28,170 samples, 0.12%)</title><rect x="13.8284%" y="197" width="0.1157%" height="15" fill="rgb(251,118,11)"/><text x="14.0784%" y="207.50"></text></g><g><title>misc_checking_3 (394,594 samples, 1.62%)</title><rect x="12.3893%" y="229" width="1.6202%" height="15" fill="rgb(217,147,25)"/><text x="12.6393%" y="239.50"></text></g><g><title>associated_item (144,392 samples, 0.59%)</title><rect x="18.2471%" y="149" width="0.5929%" height="15" fill="rgb(247,81,37)"/><text x="18.4971%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (110,282 samples, 0.45%)</title><rect x="18.3871%" y="133" width="0.4528%" height="15" fill="rgb(209,12,38)"/><text x="18.6371%" y="143.50"></text></g><g><title>associated_items (223,643 samples, 0.92%)</title><rect x="17.9872%" y="165" width="0.9183%" height="15" fill="rgb(227,1,9)"/><text x="18.2372%" y="175.50"></text></g><g><title>adt_def (24,790 samples, 0.10%)</title><rect x="19.2001%" y="133" width="0.1018%" height="15" fill="rgb(248,47,43)"/><text x="19.4501%" y="143.50"></text></g><g><title>impl_parent (138,003 samples, 0.57%)</title><rect x="20.0178%" y="69" width="0.5666%" height="15" fill="rgb(221,10,30)"/><text x="20.2678%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (101,062 samples, 0.41%)</title><rect x="20.1695%" y="53" width="0.4150%" height="15" fill="rgb(210,229,1)"/><text x="20.4195%" y="63.50"></text></g><g><title>impl_trait_ref (482,114 samples, 1.98%)</title><rect x="20.5845%" y="69" width="1.9795%" height="15" fill="rgb(222,148,37)"/><text x="20.8345%" y="79.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (442,494 samples, 1.82%)</title><rect x="20.7472%" y="53" width="1.8169%" height="15" fill="rgb(234,67,33)"/><text x="20.9972%" y="63.50">m..</text></g><g><title>coherent_trait (832,949 samples, 3.42%)</title><rect x="19.3491%" y="101" width="3.4201%" height="15" fill="rgb(247,98,35)"/><text x="19.5991%" y="111.50">coh..</text></g><g><title>specialization_graph_of (828,229 samples, 3.40%)</title><rect x="19.3685%" y="85" width="3.4007%" height="15" fill="rgb(247,138,52)"/><text x="19.6185%" y="95.50">spe..</text></g><g><title>trait_impls_of (49,970 samples, 0.21%)</title><rect x="22.5640%" y="69" width="0.2052%" height="15" fill="rgb(213,79,30)"/><text x="22.8140%" y="79.50"></text></g><g><title>adt_destructor (846,869 samples, 3.48%)</title><rect x="19.3019%" y="133" width="3.4772%" height="15" fill="rgb(246,177,23)"/><text x="19.5519%" y="143.50">adt..</text></g><g><title>metadata_decode_entry_adt_destructor (844,329 samples, 3.47%)</title><rect x="19.3123%" y="117" width="3.4668%" height="15" fill="rgb(230,62,27)"/><text x="19.5623%" y="127.50">met..</text></g><g><title>dropck_outlives (958,851 samples, 3.94%)</title><rect x="18.9509%" y="165" width="3.9370%" height="15" fill="rgb(216,154,8)"/><text x="19.2009%" y="175.50">drop..</text></g><g><title>adt_dtorck_constraint (923,001 samples, 3.79%)</title><rect x="19.0981%" y="149" width="3.7898%" height="15" fill="rgb(244,35,45)"/><text x="19.3481%" y="159.50">adt_..</text></g><g><title>adt_def (249,083 samples, 1.02%)</title><rect x="23.6622%" y="133" width="1.0227%" height="15" fill="rgb(251,115,12)"/><text x="23.9122%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (246,613 samples, 1.01%)</title><rect x="23.6723%" y="117" width="1.0126%" height="15" fill="rgb(240,54,50)"/><text x="23.9223%" y="127.50"></text></g><g><title>item_attrs (225,853 samples, 0.93%)</title><rect x="23.7576%" y="101" width="0.9273%" height="15" fill="rgb(233,84,52)"/><text x="24.0076%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (223,413 samples, 0.92%)</title><rect x="23.7676%" y="85" width="0.9173%" height="15" fill="rgb(207,117,47)"/><text x="24.0176%" y="95.50"></text></g><g><title>adt_sized_constraint (58,621 samples, 0.24%)</title><rect x="24.6849%" y="133" width="0.2407%" height="15" fill="rgb(249,43,39)"/><text x="24.9349%" y="143.50"></text></g><g><title>adt_sized_constraint (50,201 samples, 0.21%)</title><rect x="24.7195%" y="117" width="0.2061%" height="15" fill="rgb(209,38,44)"/><text x="24.9695%" y="127.50"></text></g><g><title>adt_sized_constraint (44,070 samples, 0.18%)</title><rect x="24.7446%" y="101" width="0.1810%" height="15" fill="rgb(236,212,23)"/><text x="24.9946%" y="111.50"></text></g><g><title>adt_def (42,740 samples, 0.18%)</title><rect x="24.7501%" y="85" width="0.1755%" height="15" fill="rgb(242,79,21)"/><text x="25.0001%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (42,340 samples, 0.17%)</title><rect x="24.7517%" y="69" width="0.1738%" height="15" fill="rgb(211,96,35)"/><text x="25.0017%" y="79.50"></text></g><g><title>adt_sized_constraint (326,604 samples, 1.34%)</title><rect x="23.6161%" y="149" width="1.3410%" height="15" fill="rgb(253,215,40)"/><text x="23.8661%" y="159.50"></text></g><g><title>specializes (193,852 samples, 0.80%)</title><rect x="25.2673%" y="149" width="0.7960%" height="15" fill="rgb(211,81,21)"/><text x="25.5173%" y="159.50"></text></g><g><title>param_env (176,962 samples, 0.73%)</title><rect x="25.3366%" y="133" width="0.7266%" height="15" fill="rgb(208,190,38)"/><text x="25.5866%" y="143.50"></text></g><g><title>def_span (156,872 samples, 0.64%)</title><rect x="25.4191%" y="117" width="0.6441%" height="15" fill="rgb(235,213,38)"/><text x="25.6691%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (155,492 samples, 0.64%)</title><rect x="25.4248%" y="101" width="0.6384%" height="15" fill="rgb(237,122,38)"/><text x="25.6748%" y="111.50"></text></g><g><title>evaluate_obligation (1,196,933 samples, 4.91%)</title><rect x="22.8879%" y="165" width="4.9146%" height="15" fill="rgb(244,218,35)"/><text x="23.1379%" y="175.50">evalua..</text></g><g><title>trait_impls_of (420,855 samples, 1.73%)</title><rect x="26.0745%" y="149" width="1.7280%" height="15" fill="rgb(240,68,47)"/><text x="26.3245%" y="159.50"></text></g><g><title>implementations_of_trait (96,652 samples, 0.40%)</title><rect x="27.4056%" y="133" width="0.3969%" height="15" fill="rgb(210,16,53)"/><text x="27.6556%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (80,991 samples, 0.33%)</title><rect x="27.4699%" y="117" width="0.3325%" height="15" fill="rgb(235,124,12)"/><text x="27.7199%" y="127.50"></text></g><g><title>fn_sig (75,131 samples, 0.31%)</title><rect x="27.8272%" y="165" width="0.3085%" height="15" fill="rgb(224,169,11)"/><text x="28.0772%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (71,211 samples, 0.29%)</title><rect x="27.8433%" y="149" width="0.2924%" height="15" fill="rgb(250,166,2)"/><text x="28.0933%" y="159.50"></text></g><g><title>generics_of (25,660 samples, 0.11%)</title><rect x="28.1356%" y="165" width="0.1054%" height="15" fill="rgb(242,216,29)"/><text x="28.3856%" y="175.50"></text></g><g><title>associated_item (25,760 samples, 0.11%)</title><rect x="28.2642%" y="133" width="0.1058%" height="15" fill="rgb(230,116,27)"/><text x="28.5142%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (24,900 samples, 0.10%)</title><rect x="28.2677%" y="117" width="0.1022%" height="15" fill="rgb(228,99,48)"/><text x="28.5177%" y="127.50"></text></g><g><title>impl_item_implementor_ids (39,681 samples, 0.16%)</title><rect x="28.2410%" y="165" width="0.1629%" height="15" fill="rgb(253,11,6)"/><text x="28.4910%" y="175.50"></text></g><g><title>associated_items (36,950 samples, 0.15%)</title><rect x="28.2522%" y="149" width="0.1517%" height="15" fill="rgb(247,143,39)"/><text x="28.5022%" y="159.50"></text></g><g><title>impl_trait_ref (50,961 samples, 0.21%)</title><rect x="28.4139%" y="165" width="0.2092%" height="15" fill="rgb(236,97,10)"/><text x="28.6639%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (47,511 samples, 0.20%)</title><rect x="28.4281%" y="149" width="0.1951%" height="15" fill="rgb(233,208,19)"/><text x="28.6781%" y="159.50"></text></g><g><title>inherent_impls (26,290 samples, 0.11%)</title><rect x="28.6262%" y="165" width="0.1079%" height="15" fill="rgb(216,164,2)"/><text x="28.8762%" y="175.50"></text></g><g><title>method_autoderef_steps (129,591 samples, 0.53%)</title><rect x="28.9525%" y="165" width="0.5321%" height="15" fill="rgb(220,129,5)"/><text x="29.2025%" y="175.50"></text></g><g><title>evaluate_obligation (108,211 samples, 0.44%)</title><rect x="29.0402%" y="149" width="0.4443%" height="15" fill="rgb(242,17,10)"/><text x="29.2902%" y="159.50"></text></g><g><title>trait_impls_of (61,931 samples, 0.25%)</title><rect x="29.2303%" y="133" width="0.2543%" height="15" fill="rgb(242,107,0)"/><text x="29.4803%" y="143.50"></text></g><g><title>implementations_of_trait (27,401 samples, 0.11%)</title><rect x="29.3720%" y="117" width="0.1125%" height="15" fill="rgb(251,28,31)"/><text x="29.6220%" y="127.50"></text></g><g><title>explicit_predicates_of (69,511 samples, 0.29%)</title><rect x="29.7500%" y="133" width="0.2854%" height="15" fill="rgb(233,223,10)"/><text x="30.0000%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (61,171 samples, 0.25%)</title><rect x="29.7842%" y="117" width="0.2512%" height="15" fill="rgb(215,21,27)"/><text x="30.0342%" y="127.50"></text></g><g><title>predicates_of (167,021 samples, 0.69%)</title><rect x="29.5157%" y="165" width="0.6858%" height="15" fill="rgb(232,23,21)"/><text x="29.7657%" y="175.50"></text></g><g><title>predicates_defined_on (133,161 samples, 0.55%)</title><rect x="29.6547%" y="149" width="0.5468%" height="15" fill="rgb(244,5,23)"/><text x="29.9047%" y="159.50"></text></g><g><title>inferred_outlives_of (40,440 samples, 0.17%)</title><rect x="30.0354%" y="133" width="0.1660%" height="15" fill="rgb(226,81,46)"/><text x="30.2854%" y="143.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (32,850 samples, 0.13%)</title><rect x="30.0666%" y="117" width="0.1349%" height="15" fill="rgb(247,70,30)"/><text x="30.3166%" y="127.50"></text></g><g><title>trait_impls_of (29,520 samples, 0.12%)</title><rect x="30.2814%" y="165" width="0.1212%" height="15" fill="rgb(212,68,19)"/><text x="30.5314%" y="175.50"></text></g><g><title>type_of (64,562 samples, 0.27%)</title><rect x="30.4026%" y="165" width="0.2651%" height="15" fill="rgb(240,187,13)"/><text x="30.6526%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (59,392 samples, 0.24%)</title><rect x="30.4238%" y="149" width="0.2439%" height="15" fill="rgb(223,113,26)"/><text x="30.6738%" y="159.50"></text></g><g><title>item_bodies_checking (4,032,025 samples, 16.56%)</title><rect x="14.2207%" y="213" width="16.5554%" height="15" fill="rgb(206,192,2)"/><text x="14.4707%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,029,515 samples, 16.55%)</title><rect x="14.2310%" y="197" width="16.5451%" height="15" fill="rgb(241,108,4)"/><text x="14.4810%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (4,025,625 samples, 16.53%)</title><rect x="14.2470%" y="181" width="16.5291%" height="15" fill="rgb(247,173,49)"/><text x="14.4970%" y="191.50">typeck</text></g><g><title>fn_sig (47,930 samples, 0.20%)</title><rect x="31.0272%" y="181" width="0.1968%" height="15" fill="rgb(224,114,35)"/><text x="31.2772%" y="191.50"></text></g><g><title>late_bound_vars_map (32,800 samples, 0.13%)</title><rect x="31.0893%" y="165" width="0.1347%" height="15" fill="rgb(245,159,27)"/><text x="31.3393%" y="175.50"></text></g><g><title>resolve_lifetimes (28,430 samples, 0.12%)</title><rect x="31.1073%" y="149" width="0.1167%" height="15" fill="rgb(245,172,44)"/><text x="31.3573%" y="159.50"></text></g><g><title>generics_of (31,710 samples, 0.13%)</title><rect x="31.2240%" y="181" width="0.1302%" height="15" fill="rgb(236,23,11)"/><text x="31.4740%" y="191.50"></text></g><g><title>predicates_of (28,280 samples, 0.12%)</title><rect x="31.3542%" y="181" width="0.1161%" height="15" fill="rgb(205,117,38)"/><text x="31.6042%" y="191.50"></text></g><g><title>predicates_defined_on (24,740 samples, 0.10%)</title><rect x="31.3687%" y="165" width="0.1016%" height="15" fill="rgb(237,72,25)"/><text x="31.6187%" y="175.50"></text></g><g><title>type_collecting (247,233 samples, 1.02%)</title><rect x="30.8038%" y="213" width="1.0151%" height="15" fill="rgb(244,70,9)"/><text x="31.0538%" y="223.50"></text></g><g><title>collect_mod_item_types (232,753 samples, 0.96%)</title><rect x="30.8632%" y="197" width="0.9557%" height="15" fill="rgb(217,125,39)"/><text x="31.1132%" y="207.50"></text></g><g><title>type_of (84,901 samples, 0.35%)</title><rect x="31.4703%" y="181" width="0.3486%" height="15" fill="rgb(235,36,10)"/><text x="31.7203%" y="191.50"></text></g><g><title>type_of (28,201 samples, 0.12%)</title><rect x="31.7031%" y="165" width="0.1158%" height="15" fill="rgb(251,123,47)"/><text x="31.9531%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (26,340 samples, 0.11%)</title><rect x="31.7108%" y="149" width="0.1082%" height="15" fill="rgb(221,13,13)"/><text x="31.9608%" y="159.50"></text></g><g><title>implied_outlives_bounds (68,830 samples, 0.28%)</title><rect x="32.8365%" y="181" width="0.2826%" height="15" fill="rgb(238,131,9)"/><text x="33.0865%" y="191.50"></text></g><g><title>param_env (152,872 samples, 0.63%)</title><rect x="33.1191%" y="181" width="0.6277%" height="15" fill="rgb(211,50,8)"/><text x="33.3691%" y="191.50"></text></g><g><title>analysis (7,722,325 samples, 31.71%)</title><rect x="2.1312%" y="245" width="31.7077%" height="15" fill="rgb(245,182,24)"/><text x="2.3812%" y="255.50">analysis</text></g><g><title>type_check_crate (4,829,404 samples, 19.83%)</title><rect x="14.0095%" y="229" width="19.8294%" height="15" fill="rgb(242,14,37)"/><text x="14.2595%" y="239.50">type_check_crate</text></g><g><title>wf_checking (491,455 samples, 2.02%)</title><rect x="31.8210%" y="213" width="2.0179%" height="15" fill="rgb(246,228,12)"/><text x="32.0710%" y="223.50">w..</text></g><g><title>check_item_well_formed (473,885 samples, 1.95%)</title><rect x="31.8931%" y="197" width="1.9458%" height="15" fill="rgb(213,55,15)"/><text x="32.1431%" y="207.50">c..</text></g><g><title>native_libraries (33,120 samples, 0.14%)</title><rect x="35.5797%" y="229" width="0.1360%" height="15" fill="rgb(209,9,3)"/><text x="35.8297%" y="239.50"></text></g><g><title>metadata_decode_entry_native_libraries (24,400 samples, 0.10%)</title><rect x="35.6155%" y="213" width="0.1002%" height="15" fill="rgb(230,59,30)"/><text x="35.8655%" y="223.50"></text></g><g><title>codegen_crate (474,776 samples, 1.95%)</title><rect x="33.8690%" y="245" width="1.9494%" height="15" fill="rgb(209,121,21)"/><text x="34.1190%" y="255.50">c..</text></g><g><title>crate_injection (66,160 samples, 0.27%)</title><rect x="36.6436%" y="229" width="0.2717%" height="15" fill="rgb(220,109,13)"/><text x="36.8936%" y="239.50"></text></g><g><title>metadata_load_macro (105,292 samples, 0.43%)</title><rect x="70.7496%" y="197" width="0.4323%" height="15" fill="rgb(232,18,1)"/><text x="70.9996%" y="207.50"></text></g><g><title>metadata_register_crate (2,129,134 samples, 8.74%)</title><rect x="71.1819%" y="197" width="8.7422%" height="15" fill="rgb(215,41,42)"/><text x="71.4319%" y="207.50">metadata_reg..</text></g><g><title>metadata_register_crate (771,309 samples, 3.17%)</title><rect x="76.7571%" y="181" width="3.1670%" height="15" fill="rgb(224,123,36)"/><text x="77.0071%" y="191.50">met..</text></g><g><title>metadata_register_crate (65,801 samples, 0.27%)</title><rect x="79.6539%" y="165" width="0.2702%" height="15" fill="rgb(240,125,3)"/><text x="79.9039%" y="175.50"></text></g><g><title>macro_expand_crate (10,498,477 samples, 43.11%)</title><rect x="36.9153%" y="229" width="43.1065%" height="15" fill="rgb(205,98,50)"/><text x="37.1653%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (10,479,467 samples, 43.03%)</title><rect x="36.9933%" y="213" width="43.0284%" height="15" fill="rgb(205,185,37)"/><text x="37.2433%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (52,020 samples, 0.21%)</title><rect x="80.0374%" y="229" width="0.2136%" height="15" fill="rgb(238,207,15)"/><text x="80.2874%" y="239.50"></text></g><g><title>finalize_imports (284,944 samples, 1.17%)</title><rect x="80.2770%" y="213" width="1.1700%" height="15" fill="rgb(213,199,42)"/><text x="80.5270%" y="223.50"></text></g><g><title>late_resolve_crate (272,633 samples, 1.12%)</title><rect x="81.5032%" y="213" width="1.1194%" height="15" fill="rgb(235,201,11)"/><text x="81.7532%" y="223.50"></text></g><g><title>configure_and_expand (11,429,667 samples, 46.93%)</title><rect x="35.8185%" y="245" width="46.9299%" height="15" fill="rgb(207,46,11)"/><text x="36.0685%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (608,237 samples, 2.50%)</title><rect x="80.2510%" y="229" width="2.4974%" height="15" fill="rgb(241,35,35)"/><text x="80.5010%" y="239.50">re..</text></g><g><title>early_lint_checks (58,671 samples, 0.24%)</title><rect x="82.8977%" y="245" width="0.2409%" height="15" fill="rgb(243,32,47)"/><text x="83.1477%" y="255.50"></text></g><g><title>free_global_ctxt (1,866,481 samples, 7.66%)</title><rect x="83.1386%" y="245" width="7.6637%" height="15" fill="rgb(247,202,23)"/><text x="83.3886%" y="255.50">free_globa..</text></g><g><title>crate_hash (111,741 samples, 0.46%)</title><rect x="91.8747%" y="229" width="0.4588%" height="15" fill="rgb(219,102,11)"/><text x="92.1247%" y="239.50"></text></g><g><title>generate_crate_metadata (471,445 samples, 1.94%)</title><rect x="90.8023%" y="245" width="1.9357%" height="15" fill="rgb(243,110,44)"/><text x="91.0523%" y="255.50">g..</text></g><g><title>hir_lowering (271,623 samples, 1.12%)</title><rect x="92.7381%" y="245" width="1.1153%" height="15" fill="rgb(222,74,54)"/><text x="92.9881%" y="255.50"></text></g><g><title>link (48,300 samples, 0.20%)</title><rect x="93.8533%" y="245" width="0.1983%" height="15" fill="rgb(216,99,12)"/><text x="94.1033%" y="255.50"></text></g><g><title>parse_crate (272,463 samples, 1.12%)</title><rect x="94.0516%" y="245" width="1.1187%" height="15" fill="rgb(226,22,26)"/><text x="94.3016%" y="255.50"></text></g><g><title>prepare_outputs (217,843 samples, 0.89%)</title><rect x="95.1950%" y="245" width="0.8945%" height="15" fill="rgb(217,163,10)"/><text x="95.4450%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (439,525 samples, 1.80%)</title><rect x="96.0894%" y="245" width="1.8047%" height="15" fill="rgb(213,25,53)"/><text x="96.3394%" y="255.50">s..</text></g><g><title>setup_global_ctxt (110,761 samples, 0.45%)</title><rect x="97.9499%" y="245" width="0.4548%" height="15" fill="rgb(252,105,26)"/><text x="98.1999%" y="255.50"></text></g><g><title>all (24,354,751 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (24,354,751 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (388,524 samples, 1.60%)</title><rect x="98.4047%" y="245" width="1.5953%" height="15" fill="rgb(252,8,32)"/><text x="98.6547%" y="255.50"></text></g></svg></svg>