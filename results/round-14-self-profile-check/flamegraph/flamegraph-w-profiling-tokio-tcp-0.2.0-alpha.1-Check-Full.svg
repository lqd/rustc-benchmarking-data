<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (421,845 samples, 0.28%)</title><rect x="11.1320%" y="181" width="0.2790%" height="15" fill="rgb(227,0,7)"/><text x="11.3820%" y="191.50"></text></g><g><title>item_attrs (275,882 samples, 0.18%)</title><rect x="11.8680%" y="149" width="0.1824%" height="15" fill="rgb(217,0,24)"/><text x="12.1180%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (260,652 samples, 0.17%)</title><rect x="11.8781%" y="133" width="0.1724%" height="15" fill="rgb(221,193,54)"/><text x="12.1281%" y="143.50"></text></g><g><title>codegen_fn_attrs (424,572 samples, 0.28%)</title><rect x="11.7854%" y="165" width="0.2808%" height="15" fill="rgb(248,212,6)"/><text x="12.0354%" y="175.50"></text></g><g><title>needs_drop_raw (1,730,976 samples, 1.14%)</title><rect x="14.2040%" y="149" width="1.1446%" height="15" fill="rgb(208,68,35)"/><text x="14.4540%" y="159.50"></text></g><g><title>is_copy_raw (1,449,874 samples, 0.96%)</title><rect x="14.3899%" y="133" width="0.9588%" height="15" fill="rgb(232,128,0)"/><text x="14.6399%" y="143.50"></text></g><g><title>evaluate_obligation (1,114,191 samples, 0.74%)</title><rect x="14.6119%" y="117" width="0.7368%" height="15" fill="rgb(207,160,47)"/><text x="14.8619%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (372,714 samples, 0.25%)</title><rect x="15.5223%" y="133" width="0.2465%" height="15" fill="rgb(228,23,34)"/><text x="15.7723%" y="143.50"></text></g><g><title>impl_parent (952,248 samples, 0.63%)</title><rect x="16.9622%" y="117" width="0.6297%" height="15" fill="rgb(218,30,26)"/><text x="17.2122%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (616,383 samples, 0.41%)</title><rect x="17.1843%" y="101" width="0.4076%" height="15" fill="rgb(220,122,19)"/><text x="17.4343%" y="111.50"></text></g><g><title>specialization_graph_of (4,708,272 samples, 3.11%)</title><rect x="15.8203%" y="133" width="3.1134%" height="15" fill="rgb(250,228,42)"/><text x="16.0703%" y="143.50">spe..</text></g><g><title>impl_trait_ref (2,029,104 samples, 1.34%)</title><rect x="17.5919%" y="117" width="1.3418%" height="15" fill="rgb(240,193,28)"/><text x="17.8419%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,701,470 samples, 1.13%)</title><rect x="17.8086%" y="101" width="1.1251%" height="15" fill="rgb(216,20,37)"/><text x="18.0586%" y="111.50"></text></g><g><title>resolve_instance (5,520,220 samples, 3.65%)</title><rect x="15.3487%" y="149" width="3.6503%" height="15" fill="rgb(206,188,39)"/><text x="15.5987%" y="159.50">reso..</text></g><g><title>thir_body (1,520,044 samples, 1.01%)</title><rect x="19.0190%" y="149" width="1.0052%" height="15" fill="rgb(217,207,13)"/><text x="19.2690%" y="159.50"></text></g><g><title>mir_const (14,445,221 samples, 9.55%)</title><rect x="10.4841%" y="197" width="9.5522%" height="15" fill="rgb(231,73,38)"/><text x="10.7341%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (13,043,682 samples, 8.63%)</title><rect x="11.4109%" y="181" width="8.6254%" height="15" fill="rgb(225,20,46)"/><text x="11.6609%" y="191.50">unsafety_che..</text></g><g><title>mir_built (12,052,839 samples, 7.97%)</title><rect x="12.0662%" y="165" width="7.9702%" height="15" fill="rgb(210,31,41)"/><text x="12.3162%" y="175.50">mir_built</text></g><g><title>mir_promoted (15,560,992 samples, 10.29%)</title><rect x="9.8338%" y="213" width="10.2900%" height="15" fill="rgb(221,200,47)"/><text x="10.0838%" y="223.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (229,032 samples, 0.15%)</title><rect x="20.1243%" y="213" width="0.1515%" height="15" fill="rgb(226,26,5)"/><text x="20.3743%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (929,832 samples, 0.61%)</title><rect x="20.2757%" y="213" width="0.6149%" height="15" fill="rgb(249,33,26)"/><text x="20.5257%" y="223.50"></text></g><g><title>normalize_projection_ty (642,678 samples, 0.42%)</title><rect x="20.4656%" y="197" width="0.4250%" height="15" fill="rgb(235,183,28)"/><text x="20.7156%" y="207.50"></text></g><g><title>type_op_normalize_predicate (274,183 samples, 0.18%)</title><rect x="20.8906%" y="213" width="0.1813%" height="15" fill="rgb(221,5,38)"/><text x="21.1406%" y="223.50"></text></g><g><title>normalize_projection_ty (204,613 samples, 0.14%)</title><rect x="20.9366%" y="197" width="0.1353%" height="15" fill="rgb(247,18,42)"/><text x="21.1866%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,144,148 samples, 1.42%)</title><rect x="21.1150%" y="213" width="1.4179%" height="15" fill="rgb(241,131,45)"/><text x="21.3650%" y="223.50"></text></g><g><title>MIR_borrow_checking (33,075,268 samples, 21.87%)</title><rect x="0.6693%" y="245" width="21.8716%" height="15" fill="rgb(249,31,29)"/><text x="0.9193%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (32,926,535 samples, 21.77%)</title><rect x="0.7677%" y="229" width="21.7733%" height="15" fill="rgb(225,111,53)"/><text x="1.0177%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (191,553 samples, 0.13%)</title><rect x="22.6335%" y="245" width="0.1267%" height="15" fill="rgb(238,160,17)"/><text x="22.8835%" y="255.50"></text></g><g><title>should_inherit_track_caller (240,132 samples, 0.16%)</title><rect x="23.0393%" y="197" width="0.1588%" height="15" fill="rgb(214,148,48)"/><text x="23.2893%" y="207.50"></text></g><g><title>codegen_fn_attrs (390,373 samples, 0.26%)</title><rect x="22.9481%" y="213" width="0.2581%" height="15" fill="rgb(232,36,49)"/><text x="23.1981%" y="223.50"></text></g><g><title>check_mod_attrs (650,397 samples, 0.43%)</title><rect x="22.7762%" y="229" width="0.4301%" height="15" fill="rgb(209,103,24)"/><text x="23.0262%" y="239.50"></text></g><g><title>lookup_deprecation_entry (170,401 samples, 0.11%)</title><rect x="23.4767%" y="213" width="0.1127%" height="15" fill="rgb(229,88,8)"/><text x="23.7267%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (449,095 samples, 0.30%)</title><rect x="23.3560%" y="229" width="0.2970%" height="15" fill="rgb(213,181,19)"/><text x="23.6060%" y="239.50"></text></g><g><title>misc_checking_1 (1,405,415 samples, 0.93%)</title><rect x="22.7605%" y="245" width="0.9294%" height="15" fill="rgb(254,191,54)"/><text x="23.0105%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (576,557 samples, 0.38%)</title><rect x="23.6906%" y="229" width="0.3813%" height="15" fill="rgb(241,83,37)"/><text x="23.9406%" y="239.50"></text></g><g><title>check_mod_liveness (476,556 samples, 0.32%)</title><rect x="23.7568%" y="213" width="0.3151%" height="15" fill="rgb(233,36,39)"/><text x="24.0068%" y="223.50"></text></g><g><title>misc_checking_2 (1,197,984 samples, 0.79%)</title><rect x="23.6898%" y="245" width="0.7922%" height="15" fill="rgb(226,3,54)"/><text x="23.9398%" y="255.50"></text></g><g><title>match_checking (620,207 samples, 0.41%)</title><rect x="24.0719%" y="229" width="0.4101%" height="15" fill="rgb(245,192,40)"/><text x="24.3219%" y="239.50"></text></g><g><title>check_match (583,227 samples, 0.39%)</title><rect x="24.0963%" y="213" width="0.3857%" height="15" fill="rgb(238,167,29)"/><text x="24.3463%" y="223.50"></text></g><g><title>check_private_in_public (261,953 samples, 0.17%)</title><rect x="24.4874%" y="229" width="0.1732%" height="15" fill="rgb(232,182,51)"/><text x="24.7374%" y="239.50"></text></g><g><title>death_checking (466,285 samples, 0.31%)</title><rect x="24.6606%" y="229" width="0.3083%" height="15" fill="rgb(231,60,39)"/><text x="24.9106%" y="239.50"></text></g><g><title>eval_to_allocation_raw (191,712 samples, 0.13%)</title><rect x="25.6303%" y="197" width="0.1268%" height="15" fill="rgb(208,69,12)"/><text x="25.8803%" y="207.50"></text></g><g><title>eval_to_allocation_raw (186,002 samples, 0.12%)</title><rect x="25.6341%" y="181" width="0.1230%" height="15" fill="rgb(235,93,37)"/><text x="25.8841%" y="191.50"></text></g><g><title>param_env (457,543 samples, 0.30%)</title><rect x="25.7571%" y="197" width="0.3026%" height="15" fill="rgb(213,116,39)"/><text x="26.0071%" y="207.50"></text></g><g><title>predicates_of (204,502 samples, 0.14%)</title><rect x="25.9244%" y="181" width="0.1352%" height="15" fill="rgb(222,207,29)"/><text x="26.1744%" y="191.50"></text></g><g><title>predicates_defined_on (161,011 samples, 0.11%)</title><rect x="25.9531%" y="165" width="0.1065%" height="15" fill="rgb(206,96,30)"/><text x="26.2031%" y="175.50"></text></g><g><title>crate_lints (3,055,263 samples, 2.02%)</title><rect x="24.9703%" y="213" width="2.0203%" height="15" fill="rgb(218,138,4)"/><text x="25.2203%" y="223.50">c..</text></g><g><title>type_of (1,358,585 samples, 0.90%)</title><rect x="26.0922%" y="197" width="0.8984%" height="15" fill="rgb(250,191,14)"/><text x="26.3422%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (1,062,283 samples, 0.70%)</title><rect x="26.2882%" y="181" width="0.7025%" height="15" fill="rgb(239,60,40)"/><text x="26.5382%" y="191.50"></text></g><g><title>layout_of (163,372 samples, 0.11%)</title><rect x="27.3860%" y="85" width="0.1080%" height="15" fill="rgb(206,27,48)"/><text x="27.6360%" y="95.50"></text></g><g><title>layout_of (180,882 samples, 0.12%)</title><rect x="27.3782%" y="101" width="0.1196%" height="15" fill="rgb(225,35,8)"/><text x="27.6282%" y="111.50"></text></g><g><title>layout_of (203,473 samples, 0.13%)</title><rect x="27.3696%" y="117" width="0.1346%" height="15" fill="rgb(250,213,24)"/><text x="27.6196%" y="127.50"></text></g><g><title>lint_checking (3,838,382 samples, 2.54%)</title><rect x="24.9689%" y="229" width="2.5382%" height="15" fill="rgb(247,123,22)"/><text x="25.2189%" y="239.50">li..</text></g><g><title>module_lints (781,099 samples, 0.52%)</title><rect x="26.9906%" y="213" width="0.5165%" height="15" fill="rgb(231,138,38)"/><text x="27.2406%" y="223.50"></text></g><g><title>lint_mod (773,989 samples, 0.51%)</title><rect x="26.9953%" y="197" width="0.5118%" height="15" fill="rgb(231,145,46)"/><text x="27.2453%" y="207.50"></text></g><g><title>layout_of (273,513 samples, 0.18%)</title><rect x="27.3263%" y="181" width="0.1809%" height="15" fill="rgb(251,118,11)"/><text x="27.5763%" y="191.50"></text></g><g><title>layout_of (268,463 samples, 0.18%)</title><rect x="27.3296%" y="165" width="0.1775%" height="15" fill="rgb(217,147,25)"/><text x="27.5796%" y="175.50"></text></g><g><title>layout_of (264,203 samples, 0.17%)</title><rect x="27.3324%" y="149" width="0.1747%" height="15" fill="rgb(247,81,37)"/><text x="27.5824%" y="159.50"></text></g><g><title>layout_of (252,193 samples, 0.17%)</title><rect x="27.3404%" y="133" width="0.1668%" height="15" fill="rgb(209,12,38)"/><text x="27.5904%" y="143.50"></text></g><g><title>privacy_access_levels (332,724 samples, 0.22%)</title><rect x="27.5071%" y="229" width="0.2200%" height="15" fill="rgb(227,1,9)"/><text x="27.7571%" y="239.50"></text></g><g><title>privacy_checking_modules (1,165,833 samples, 0.77%)</title><rect x="27.7272%" y="229" width="0.7709%" height="15" fill="rgb(248,47,43)"/><text x="27.9772%" y="239.50"></text></g><g><title>check_mod_privacy (1,161,813 samples, 0.77%)</title><rect x="27.7298%" y="213" width="0.7683%" height="15" fill="rgb(221,10,30)"/><text x="27.9798%" y="223.50"></text></g><g><title>misc_checking_3 (6,207,769 samples, 4.11%)</title><rect x="24.4820%" y="245" width="4.1050%" height="15" fill="rgb(210,229,1)"/><text x="24.7320%" y="255.50">misc..</text></g><g><title>adt_sized_constraint (181,752 samples, 0.12%)</title><rect x="30.0590%" y="181" width="0.1202%" height="15" fill="rgb(222,148,37)"/><text x="30.3090%" y="191.50"></text></g><g><title>impl_parent (1,304,882 samples, 0.86%)</title><rect x="30.1817%" y="181" width="0.8629%" height="15" fill="rgb(234,67,33)"/><text x="30.4317%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (841,981 samples, 0.56%)</title><rect x="30.4878%" y="165" width="0.5568%" height="15" fill="rgb(247,98,35)"/><text x="30.7378%" y="175.50"></text></g><g><title>impl_trait_ref (3,727,547 samples, 2.46%)</title><rect x="31.0452%" y="181" width="2.4649%" height="15" fill="rgb(247,138,52)"/><text x="31.2952%" y="191.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,271,140 samples, 2.16%)</title><rect x="31.3470%" y="165" width="2.1631%" height="15" fill="rgb(213,79,30)"/><text x="31.5970%" y="175.50">m..</text></g><g><title>trait_impls_of (621,678 samples, 0.41%)</title><rect x="33.5582%" y="181" width="0.4111%" height="15" fill="rgb(246,177,23)"/><text x="33.8082%" y="191.50"></text></g><g><title>implementations_of_trait (245,734 samples, 0.16%)</title><rect x="33.8068%" y="165" width="0.1625%" height="15" fill="rgb(230,62,27)"/><text x="34.0568%" y="175.50"></text></g><g><title>coherent_trait (8,035,939 samples, 5.31%)</title><rect x="28.6558%" y="213" width="5.3139%" height="15" fill="rgb(216,154,8)"/><text x="28.9058%" y="223.50">coheren..</text></g><g><title>specialization_graph_of (8,020,279 samples, 5.30%)</title><rect x="28.6661%" y="197" width="5.3036%" height="15" fill="rgb(244,35,45)"/><text x="28.9161%" y="207.50">specia..</text></g><g><title>coherence_checking (8,115,490 samples, 5.37%)</title><rect x="28.6459%" y="229" width="5.3665%" height="15" fill="rgb(251,115,12)"/><text x="28.8959%" y="239.50">coheren..</text></g><g><title>associated_item (363,773 samples, 0.24%)</title><rect x="49.2446%" y="165" width="0.2406%" height="15" fill="rgb(240,54,50)"/><text x="49.4946%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (293,853 samples, 0.19%)</title><rect x="49.2909%" y="149" width="0.1943%" height="15" fill="rgb(233,84,52)"/><text x="49.5409%" y="159.50"></text></g><g><title>associated_items (552,364 samples, 0.37%)</title><rect x="49.1403%" y="181" width="0.3653%" height="15" fill="rgb(207,117,47)"/><text x="49.3903%" y="191.50"></text></g><g><title>dropck_outlives (454,127 samples, 0.30%)</title><rect x="49.5659%" y="181" width="0.3003%" height="15" fill="rgb(249,43,39)"/><text x="49.8159%" y="191.50"></text></g><g><title>adt_dtorck_constraint (155,713 samples, 0.10%)</title><rect x="49.7632%" y="165" width="0.1030%" height="15" fill="rgb(209,38,44)"/><text x="50.0132%" y="175.50"></text></g><g><title>trait_impls_of (809,718 samples, 0.54%)</title><rect x="50.9614%" y="165" width="0.5354%" height="15" fill="rgb(236,212,23)"/><text x="51.2114%" y="175.50"></text></g><g><title>implementations_of_trait (294,083 samples, 0.19%)</title><rect x="51.3024%" y="149" width="0.1945%" height="15" fill="rgb(242,79,21)"/><text x="51.5524%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (177,892 samples, 0.12%)</title><rect x="51.3792%" y="133" width="0.1176%" height="15" fill="rgb(211,96,35)"/><text x="51.6292%" y="143.50"></text></g><g><title>evaluate_obligation (2,467,112 samples, 1.63%)</title><rect x="49.8662%" y="181" width="1.6314%" height="15" fill="rgb(253,215,40)"/><text x="50.1162%" y="191.50"></text></g><g><title>fn_sig (195,881 samples, 0.13%)</title><rect x="51.5149%" y="181" width="0.1295%" height="15" fill="rgb(211,81,21)"/><text x="51.7649%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (168,361 samples, 0.11%)</title><rect x="51.5331%" y="165" width="0.1113%" height="15" fill="rgb(208,190,38)"/><text x="51.7831%" y="175.50"></text></g><g><title>item_attrs (206,473 samples, 0.14%)</title><rect x="51.7750%" y="181" width="0.1365%" height="15" fill="rgb(235,213,38)"/><text x="52.0250%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (196,913 samples, 0.13%)</title><rect x="51.7813%" y="165" width="0.1302%" height="15" fill="rgb(237,122,38)"/><text x="52.0313%" y="175.50"></text></g><g><title>evaluate_obligation (156,684 samples, 0.10%)</title><rect x="52.1222%" y="165" width="0.1036%" height="15" fill="rgb(244,218,35)"/><text x="52.3722%" y="175.50"></text></g><g><title>method_autoderef_steps (413,398 samples, 0.27%)</title><rect x="51.9572%" y="181" width="0.2734%" height="15" fill="rgb(240,68,47)"/><text x="52.2072%" y="191.50"></text></g><g><title>predicates_of (610,466 samples, 0.40%)</title><rect x="52.3676%" y="181" width="0.4037%" height="15" fill="rgb(210,16,53)"/><text x="52.6176%" y="191.50"></text></g><g><title>predicates_defined_on (234,843 samples, 0.16%)</title><rect x="52.6160%" y="165" width="0.1553%" height="15" fill="rgb(235,124,12)"/><text x="52.8660%" y="175.50"></text></g><g><title>evaluate_obligation (355,354 samples, 0.23%)</title><rect x="53.1456%" y="165" width="0.2350%" height="15" fill="rgb(224,169,11)"/><text x="53.3956%" y="175.50"></text></g><g><title>typeck (929,620 samples, 0.61%)</title><rect x="52.8303%" y="181" width="0.6147%" height="15" fill="rgb(250,166,2)"/><text x="53.0803%" y="191.50"></text></g><g><title>item_bodies_checking (29,417,436 samples, 19.45%)</title><rect x="34.0343%" y="229" width="19.4528%" height="15" fill="rgb(242,216,29)"/><text x="34.2843%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,414,476 samples, 19.45%)</title><rect x="34.0363%" y="213" width="19.4509%" height="15" fill="rgb(230,116,27)"/><text x="34.2863%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (29,309,044 samples, 19.38%)</title><rect x="34.1060%" y="197" width="19.3811%" height="15" fill="rgb(228,99,48)"/><text x="34.3560%" y="207.50">typeck</text></g><g><title>impl_trait_ref (222,144 samples, 0.15%)</title><rect x="54.6392%" y="149" width="0.1469%" height="15" fill="rgb(253,11,6)"/><text x="54.8892%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (191,962 samples, 0.13%)</title><rect x="54.6592%" y="133" width="0.1269%" height="15" fill="rgb(247,143,39)"/><text x="54.9092%" y="143.50"></text></g><g><title>adt_destructor (512,436 samples, 0.34%)</title><rect x="54.4865%" y="197" width="0.3389%" height="15" fill="rgb(236,97,10)"/><text x="54.7365%" y="207.50"></text></g><g><title>coherent_trait (502,616 samples, 0.33%)</title><rect x="54.4930%" y="181" width="0.3324%" height="15" fill="rgb(233,208,19)"/><text x="54.7430%" y="191.50"></text></g><g><title>specialization_graph_of (501,086 samples, 0.33%)</title><rect x="54.4940%" y="165" width="0.3314%" height="15" fill="rgb(216,164,2)"/><text x="54.7440%" y="175.50"></text></g><g><title>mir_borrowck (462,555 samples, 0.31%)</title><rect x="56.6110%" y="149" width="0.3059%" height="15" fill="rgb(220,129,5)"/><text x="56.8610%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (383,134 samples, 0.25%)</title><rect x="57.0292%" y="149" width="0.2534%" height="15" fill="rgb(242,17,10)"/><text x="57.2792%" y="159.50"></text></g><g><title>normalize_projection_ty (259,644 samples, 0.17%)</title><rect x="57.1108%" y="133" width="0.1717%" height="15" fill="rgb(242,107,0)"/><text x="57.3608%" y="143.50"></text></g><g><title>mir_borrowck (2,775,022 samples, 1.84%)</title><rect x="55.8229%" y="165" width="1.8350%" height="15" fill="rgb(251,28,31)"/><text x="56.0729%" y="175.50">m..</text></g><g><title>type_op_prove_predicate (567,677 samples, 0.38%)</title><rect x="57.2825%" y="149" width="0.3754%" height="15" fill="rgb(233,223,10)"/><text x="57.5325%" y="159.50"></text></g><g><title>needs_drop_raw (171,912 samples, 0.11%)</title><rect x="58.0031%" y="101" width="0.1137%" height="15" fill="rgb(215,21,27)"/><text x="58.2531%" y="111.50"></text></g><g><title>adt_dtorck_constraint (180,602 samples, 0.12%)</title><rect x="61.0607%" y="37" width="0.1194%" height="15" fill="rgb(232,23,21)"/><text x="61.3107%" y="47.50"></text></g><g><title>adt_dtorck_constraint (228,862 samples, 0.15%)</title><rect x="61.0397%" y="53" width="0.1513%" height="15" fill="rgb(244,5,23)"/><text x="61.2897%" y="63.50"></text></g><g><title>dropck_outlives (412,374 samples, 0.27%)</title><rect x="60.9283%" y="85" width="0.2727%" height="15" fill="rgb(226,81,46)"/><text x="61.1783%" y="95.50"></text></g><g><title>adt_dtorck_constraint (314,943 samples, 0.21%)</title><rect x="60.9927%" y="69" width="0.2083%" height="15" fill="rgb(247,70,30)"/><text x="61.2427%" y="79.50"></text></g><g><title>evaluate_obligation (502,496 samples, 0.33%)</title><rect x="61.2088%" y="85" width="0.3323%" height="15" fill="rgb(212,68,19)"/><text x="61.4588%" y="95.50"></text></g><g><title>is_copy_raw (398,704 samples, 0.26%)</title><rect x="61.6616%" y="85" width="0.2637%" height="15" fill="rgb(240,187,13)"/><text x="61.9116%" y="95.50"></text></g><g><title>evaluate_obligation (364,433 samples, 0.24%)</title><rect x="61.6843%" y="69" width="0.2410%" height="15" fill="rgb(223,113,26)"/><text x="61.9343%" y="79.50"></text></g><g><title>trait_impls_of (167,962 samples, 0.11%)</title><rect x="61.8142%" y="53" width="0.1111%" height="15" fill="rgb(206,192,2)"/><text x="62.0642%" y="63.50"></text></g><g><title>mir_built (6,699,704 samples, 4.43%)</title><rect x="57.8326%" y="117" width="4.4303%" height="15" fill="rgb(241,108,4)"/><text x="58.0826%" y="127.50">mir_b..</text></g><g><title>typeck (6,183,959 samples, 4.09%)</title><rect x="58.1736%" y="101" width="4.0893%" height="15" fill="rgb(247,173,49)"/><text x="58.4236%" y="111.50">type..</text></g><g><title>mir_built (438,456 samples, 0.29%)</title><rect x="62.2965%" y="101" width="0.2899%" height="15" fill="rgb(224,114,35)"/><text x="62.5465%" y="111.50"></text></g><g><title>mir_const (7,506,224 samples, 4.96%)</title><rect x="57.7098%" y="149" width="4.9636%" height="15" fill="rgb(245,159,27)"/><text x="57.9598%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (7,370,343 samples, 4.87%)</title><rect x="57.7997%" y="133" width="4.8738%" height="15" fill="rgb(245,172,44)"/><text x="58.0497%" y="143.50">unsafe..</text></g><g><title>unsafety_check_result (620,928 samples, 0.41%)</title><rect x="62.2629%" y="117" width="0.4106%" height="15" fill="rgb(236,23,11)"/><text x="62.5129%" y="127.50"></text></g><g><title>mir_promoted (7,591,985 samples, 5.02%)</title><rect x="57.6579%" y="165" width="5.0203%" height="15" fill="rgb(205,117,38)"/><text x="57.9079%" y="175.50">mir_pr..</text></g><g><title>type_of (11,671,410 samples, 7.72%)</title><rect x="55.1113%" y="197" width="7.7179%" height="15" fill="rgb(237,72,25)"/><text x="55.3613%" y="207.50">type_of</text></g><g><title>mir_borrowck (11,641,320 samples, 7.70%)</title><rect x="55.1312%" y="181" width="7.6980%" height="15" fill="rgb(244,70,9)"/><text x="55.3812%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (188,962 samples, 0.12%)</title><rect x="62.7043%" y="165" width="0.1250%" height="15" fill="rgb(217,125,39)"/><text x="62.9543%" y="175.50"></text></g><g><title>item_types_checking (14,203,268 samples, 9.39%)</title><rect x="53.4871%" y="229" width="9.3922%" height="15" fill="rgb(235,36,10)"/><text x="53.7371%" y="239.50">item_types_ch..</text></g><g><title>check_mod_item_types (14,195,288 samples, 9.39%)</title><rect x="53.4924%" y="213" width="9.3869%" height="15" fill="rgb(251,123,47)"/><text x="53.7424%" y="223.50">check_mod_ite..</text></g><g><title>fn_sig (563,526 samples, 0.37%)</title><rect x="63.0780%" y="197" width="0.3726%" height="15" fill="rgb(221,13,13)"/><text x="63.3280%" y="207.50"></text></g><g><title>is_late_bound_map (286,313 samples, 0.19%)</title><rect x="63.5390%" y="181" width="0.1893%" height="15" fill="rgb(238,131,9)"/><text x="63.7890%" y="191.50"></text></g><g><title>resolve_lifetimes (278,133 samples, 0.18%)</title><rect x="63.5444%" y="165" width="0.1839%" height="15" fill="rgb(211,50,8)"/><text x="63.7944%" y="175.50"></text></g><g><title>lint_levels (188,622 samples, 0.12%)</title><rect x="63.6036%" y="149" width="0.1247%" height="15" fill="rgb(245,182,24)"/><text x="63.8536%" y="159.50"></text></g><g><title>named_region_map (355,434 samples, 0.24%)</title><rect x="63.7283%" y="181" width="0.2350%" height="15" fill="rgb(242,14,37)"/><text x="63.9783%" y="191.50"></text></g><g><title>resolve_lifetimes (335,314 samples, 0.22%)</title><rect x="63.7416%" y="165" width="0.2217%" height="15" fill="rgb(246,228,12)"/><text x="63.9916%" y="175.50"></text></g><g><title>generics_of (790,419 samples, 0.52%)</title><rect x="63.4507%" y="197" width="0.5227%" height="15" fill="rgb(213,55,15)"/><text x="63.7007%" y="207.50"></text></g><g><title>predicates_of (483,726 samples, 0.32%)</title><rect x="64.0076%" y="197" width="0.3199%" height="15" fill="rgb(209,9,3)"/><text x="64.2576%" y="207.50"></text></g><g><title>predicates_defined_on (430,235 samples, 0.28%)</title><rect x="64.0430%" y="181" width="0.2845%" height="15" fill="rgb(230,59,30)"/><text x="64.2930%" y="191.50"></text></g><g><title>inferred_outlives_of (196,392 samples, 0.13%)</title><rect x="64.1976%" y="165" width="0.1299%" height="15" fill="rgb(209,121,21)"/><text x="64.4476%" y="175.50"></text></g><g><title>inferred_outlives_crate (175,972 samples, 0.12%)</title><rect x="64.2111%" y="149" width="0.1164%" height="15" fill="rgb(220,109,13)"/><text x="64.4611%" y="159.50"></text></g><g><title>type_collecting (2,281,446 samples, 1.51%)</title><rect x="62.8826%" y="229" width="1.5086%" height="15" fill="rgb(232,18,1)"/><text x="63.1326%" y="239.50"></text></g><g><title>collect_mod_item_types (2,267,366 samples, 1.50%)</title><rect x="62.8919%" y="213" width="1.4993%" height="15" fill="rgb(215,41,42)"/><text x="63.1419%" y="223.50"></text></g><g><title>adt_sized_constraint (243,682 samples, 0.16%)</title><rect x="67.2531%" y="181" width="0.1611%" height="15" fill="rgb(224,123,36)"/><text x="67.5031%" y="191.50"></text></g><g><title>evaluate_obligation (1,290,944 samples, 0.85%)</title><rect x="66.6355%" y="197" width="0.8537%" height="15" fill="rgb(240,125,3)"/><text x="66.8855%" y="207.50"></text></g><g><title>implied_outlives_bounds (347,013 samples, 0.23%)</title><rect x="67.5040%" y="197" width="0.2295%" height="15" fill="rgb(205,98,50)"/><text x="67.7540%" y="207.50"></text></g><g><title>param_env (356,551 samples, 0.24%)</title><rect x="67.7335%" y="197" width="0.2358%" height="15" fill="rgb(205,185,37)"/><text x="67.9835%" y="207.50"></text></g><g><title>region_scope_tree (470,013 samples, 0.31%)</title><rect x="68.0299%" y="197" width="0.3108%" height="15" fill="rgb(238,207,15)"/><text x="68.2799%" y="207.50"></text></g><g><title>check_impl_item_well_formed (5,780,991 samples, 3.82%)</title><rect x="64.5533%" y="213" width="3.8228%" height="15" fill="rgb(213,199,42)"/><text x="64.8033%" y="223.50">chec..</text></g><g><title>evaluate_obligation (530,743 samples, 0.35%)</title><rect x="68.9010%" y="197" width="0.3510%" height="15" fill="rgb(235,201,11)"/><text x="69.1510%" y="207.50"></text></g><g><title>param_env (176,532 samples, 0.12%)</title><rect x="69.2947%" y="197" width="0.1167%" height="15" fill="rgb(207,46,11)"/><text x="69.5447%" y="207.50"></text></g><g><title>analysis (104,433,141 samples, 69.06%)</title><rect x="0.4658%" y="261" width="69.0584%" height="15" fill="rgb(241,35,35)"/><text x="0.7158%" y="271.50">analysis</text></g><g><title>type_check_crate (61,906,968 samples, 40.94%)</title><rect x="28.5870%" y="245" width="40.9371%" height="15" fill="rgb(243,32,47)"/><text x="28.8370%" y="255.50">type_check_crate</text></g><g><title>wf_checking (7,754,876 samples, 5.13%)</title><rect x="64.3961%" y="229" width="5.1281%" height="15" fill="rgb(247,202,23)"/><text x="64.6461%" y="239.50">wf_che..</text></g><g><title>check_item_well_formed (1,736,112 samples, 1.15%)</title><rect x="68.3761%" y="213" width="1.1480%" height="15" fill="rgb(219,102,11)"/><text x="68.6261%" y="223.50"></text></g><g><title>codegen_crate (530,676 samples, 0.35%)</title><rect x="69.5301%" y="261" width="0.3509%" height="15" fill="rgb(243,110,44)"/><text x="69.7801%" y="271.50"></text></g><g><title>metadata_load_macro (191,121 samples, 0.13%)</title><rect x="86.6450%" y="213" width="0.1264%" height="15" fill="rgb(222,74,54)"/><text x="86.8950%" y="223.50"></text></g><g><title>metadata_register_crate (4,997,396 samples, 3.30%)</title><rect x="86.7713%" y="213" width="3.3046%" height="15" fill="rgb(216,99,12)"/><text x="87.0213%" y="223.50">met..</text></g><g><title>metadata_register_crate (2,214,758 samples, 1.46%)</title><rect x="88.6114%" y="197" width="1.4645%" height="15" fill="rgb(226,22,26)"/><text x="88.8614%" y="207.50"></text></g><g><title>metadata_register_crate (492,407 samples, 0.33%)</title><rect x="89.7504%" y="181" width="0.3256%" height="15" fill="rgb(217,163,10)"/><text x="90.0004%" y="191.50"></text></g><g><title>macro_expand_crate (30,510,059 samples, 20.18%)</title><rect x="70.1783%" y="245" width="20.1753%" height="15" fill="rgb(213,25,53)"/><text x="70.4283%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (30,498,909 samples, 20.17%)</title><rect x="70.1857%" y="229" width="20.1680%" height="15" fill="rgb(252,105,26)"/><text x="70.4357%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (419,925 samples, 0.28%)</title><rect x="90.0760%" y="213" width="0.2777%" height="15" fill="rgb(220,39,43)"/><text x="90.3260%" y="223.50"></text></g><g><title>late_resolve_crate (2,067,883 samples, 1.37%)</title><rect x="90.5234%" y="229" width="1.3674%" height="15" fill="rgb(229,68,48)"/><text x="90.7734%" y="239.50"></text></g><g><title>configure_and_expand (33,394,321 samples, 22.08%)</title><rect x="69.8811%" y="261" width="22.0826%" height="15" fill="rgb(252,8,32)"/><text x="70.1311%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,336,776 samples, 1.55%)</title><rect x="90.4184%" y="245" width="1.5452%" height="15" fill="rgb(223,20,43)"/><text x="90.6684%" y="255.50"></text></g><g><title>drop_ast (188,832 samples, 0.12%)</title><rect x="91.9637%" y="261" width="0.1249%" height="15" fill="rgb(229,81,49)"/><text x="92.2137%" y="271.50"></text></g><g><title>early_lint_checks (376,124 samples, 0.25%)</title><rect x="92.1028%" y="261" width="0.2487%" height="15" fill="rgb(236,28,36)"/><text x="92.3528%" y="271.50"></text></g><g><title>free_global_ctxt (3,986,414 samples, 2.64%)</title><rect x="92.3515%" y="261" width="2.6361%" height="15" fill="rgb(249,185,26)"/><text x="92.6015%" y="271.50">fr..</text></g><g><title>mir_drops_elaborated_and_const_checked (435,374 samples, 0.29%)</title><rect x="96.2475%" y="229" width="0.2879%" height="15" fill="rgb(249,174,33)"/><text x="96.4975%" y="239.50"></text></g><g><title>optimized_mir (977,360 samples, 0.65%)</title><rect x="95.8894%" y="245" width="0.6463%" height="15" fill="rgb(233,201,37)"/><text x="96.1394%" y="255.50"></text></g><g><title>generate_crate_metadata (2,368,146 samples, 1.57%)</title><rect x="94.9876%" y="261" width="1.5660%" height="15" fill="rgb(221,78,26)"/><text x="95.2376%" y="271.50"></text></g><g><title>hir_lowering (3,222,125 samples, 2.13%)</title><rect x="96.5536%" y="261" width="2.1307%" height="15" fill="rgb(250,127,30)"/><text x="96.8036%" y="271.50">h..</text></g><g><title>parse_crate (374,694 samples, 0.25%)</title><rect x="98.7160%" y="261" width="0.2478%" height="15" fill="rgb(230,49,44)"/><text x="98.9660%" y="271.50"></text></g><g><title>prepare_outputs (213,663 samples, 0.14%)</title><rect x="98.9692%" y="261" width="0.1413%" height="15" fill="rgb(229,67,23)"/><text x="99.2192%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (874,110 samples, 0.58%)</title><rect x="99.1105%" y="261" width="0.5780%" height="15" fill="rgb(249,83,47)"/><text x="99.3605%" y="271.50"></text></g><g><title>all (151,224,490 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (151,224,490 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (392,675 samples, 0.26%)</title><rect x="99.7403%" y="261" width="0.2597%" height="15" fill="rgb(219,56,2)"/><text x="99.9903%" y="271.50"></text></g></svg></svg>