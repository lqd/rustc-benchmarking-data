<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (254,593 samples, 0.24%)</title><rect x="7.1952%" y="565" width="0.2447%" height="15" fill="rgb(227,0,7)"/><text x="7.4452%" y="575.50"></text></g><g><title>item_attrs (187,201 samples, 0.18%)</title><rect x="7.6646%" y="533" width="0.1799%" height="15" fill="rgb(217,0,24)"/><text x="7.9146%" y="543.50"></text></g><g><title>metadata_decode_entry_item_attrs (181,381 samples, 0.17%)</title><rect x="7.6702%" y="517" width="0.1743%" height="15" fill="rgb(221,193,54)"/><text x="7.9202%" y="527.50"></text></g><g><title>codegen_fn_attrs (254,712 samples, 0.24%)</title><rect x="7.6104%" y="549" width="0.2448%" height="15" fill="rgb(248,212,6)"/><text x="7.8604%" y="559.50"></text></g><g><title>is_copy_raw (105,751 samples, 0.10%)</title><rect x="9.1313%" y="533" width="0.1016%" height="15" fill="rgb(208,68,35)"/><text x="9.3813%" y="543.50"></text></g><g><title>adt_drop_tys (166,171 samples, 0.16%)</title><rect x="9.2696%" y="517" width="0.1597%" height="15" fill="rgb(232,128,0)"/><text x="9.5196%" y="527.50"></text></g><g><title>needs_drop_raw (409,604 samples, 0.39%)</title><rect x="9.2329%" y="533" width="0.3937%" height="15" fill="rgb(207,160,47)"/><text x="9.4829%" y="543.50"></text></g><g><title>is_copy_raw (205,291 samples, 0.20%)</title><rect x="9.4293%" y="517" width="0.1973%" height="15" fill="rgb(228,23,34)"/><text x="9.6793%" y="527.50"></text></g><g><title>evaluate_obligation (181,181 samples, 0.17%)</title><rect x="9.4525%" y="501" width="0.1741%" height="15" fill="rgb(218,30,26)"/><text x="9.7025%" y="511.50"></text></g><g><title>codegen_fulfill_obligation (242,943 samples, 0.23%)</title><rect x="9.7307%" y="517" width="0.2335%" height="15" fill="rgb(220,122,19)"/><text x="9.9807%" y="527.50"></text></g><g><title>impl_parent (209,670 samples, 0.20%)</title><rect x="10.4978%" y="501" width="0.2015%" height="15" fill="rgb(250,228,42)"/><text x="10.7478%" y="511.50"></text></g><g><title>metadata_decode_entry_impl_parent (144,900 samples, 0.14%)</title><rect x="10.5601%" y="485" width="0.1393%" height="15" fill="rgb(240,193,28)"/><text x="10.8101%" y="495.50"></text></g><g><title>specialization_graph_of (1,156,802 samples, 1.11%)</title><rect x="10.0034%" y="517" width="1.1118%" height="15" fill="rgb(216,20,37)"/><text x="10.2534%" y="527.50"></text></g><g><title>impl_trait_ref (432,704 samples, 0.42%)</title><rect x="10.6993%" y="501" width="0.4159%" height="15" fill="rgb(206,188,39)"/><text x="10.9493%" y="511.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (370,054 samples, 0.36%)</title><rect x="10.7595%" y="485" width="0.3557%" height="15" fill="rgb(217,207,13)"/><text x="11.0095%" y="495.50"></text></g><g><title>resolve_instance (1,626,378 samples, 1.56%)</title><rect x="9.6266%" y="533" width="1.5631%" height="15" fill="rgb(231,73,38)"/><text x="9.8766%" y="543.50"></text></g><g><title>thir_body (750,367 samples, 0.72%)</title><rect x="11.1972%" y="533" width="0.7212%" height="15" fill="rgb(225,20,46)"/><text x="11.4472%" y="543.50"></text></g><g><title>mir_const (5,259,746 samples, 5.06%)</title><rect x="6.8677%" y="581" width="5.0551%" height="15" fill="rgb(210,31,41)"/><text x="7.1177%" y="591.50">mir_co..</text></g><g><title>unsafety_check_result (4,664,421 samples, 4.48%)</title><rect x="7.4398%" y="565" width="4.4829%" height="15" fill="rgb(221,200,47)"/><text x="7.6898%" y="575.50">unsaf..</text></g><g><title>mir_built (4,232,265 samples, 4.07%)</title><rect x="7.8552%" y="549" width="4.0676%" height="15" fill="rgb(226,26,5)"/><text x="8.1052%" y="559.50">mir_..</text></g><g><title>mir_promoted (5,885,623 samples, 5.66%)</title><rect x="6.5269%" y="597" width="5.6566%" height="15" fill="rgb(249,33,26)"/><text x="6.7769%" y="607.50">mir_pro..</text></g><g><title>mir_const_qualif (271,323 samples, 0.26%)</title><rect x="11.9228%" y="581" width="0.2608%" height="15" fill="rgb(235,183,28)"/><text x="12.1728%" y="591.50"></text></g><g><title>mir_const (227,382 samples, 0.22%)</title><rect x="11.9650%" y="565" width="0.2185%" height="15" fill="rgb(221,5,38)"/><text x="12.2150%" y="575.50"></text></g><g><title>unsafety_check_result (182,412 samples, 0.18%)</title><rect x="12.0082%" y="549" width="0.1753%" height="15" fill="rgb(247,18,42)"/><text x="12.2582%" y="559.50"></text></g><g><title>mir_built (166,751 samples, 0.16%)</title><rect x="12.0233%" y="533" width="0.1603%" height="15" fill="rgb(241,131,45)"/><text x="12.2733%" y="543.50"></text></g><g><title>type_op_normalize_fn_sig (469,295 samples, 0.45%)</title><rect x="12.2063%" y="597" width="0.4510%" height="15" fill="rgb(249,31,29)"/><text x="12.4563%" y="607.50"></text></g><g><title>normalize_projection_ty (307,124 samples, 0.30%)</title><rect x="12.3622%" y="581" width="0.2952%" height="15" fill="rgb(225,111,53)"/><text x="12.6122%" y="591.50"></text></g><g><title>type_op_normalize_predicate (183,122 samples, 0.18%)</title><rect x="12.6574%" y="597" width="0.1760%" height="15" fill="rgb(238,160,17)"/><text x="12.9074%" y="607.50"></text></g><g><title>normalize_projection_ty (175,912 samples, 0.17%)</title><rect x="12.6643%" y="581" width="0.1691%" height="15" fill="rgb(214,148,48)"/><text x="12.9143%" y="591.50"></text></g><g><title>type_op_prove_predicate (1,177,222 samples, 1.13%)</title><rect x="12.8845%" y="597" width="1.1314%" height="15" fill="rgb(232,36,49)"/><text x="13.1345%" y="607.50"></text></g><g><title>MIR_borrow_checking (13,331,938 samples, 12.81%)</title><rect x="1.2042%" y="629" width="12.8131%" height="15" fill="rgb(209,103,24)"/><text x="1.4542%" y="639.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,292,408 samples, 12.78%)</title><rect x="1.2422%" y="613" width="12.7752%" height="15" fill="rgb(229,88,8)"/><text x="1.4922%" y="623.50">mir_borrowck</text></g><g><title>MIR_effect_checking (132,402 samples, 0.13%)</title><rect x="14.0173%" y="629" width="0.1272%" height="15" fill="rgb(213,181,19)"/><text x="14.2673%" y="639.50"></text></g><g><title>hir_module_items (220,423 samples, 0.21%)</title><rect x="14.1446%" y="629" width="0.2118%" height="15" fill="rgb(254,191,54)"/><text x="14.3946%" y="639.50"></text></g><g><title>get_lang_items (108,981 samples, 0.10%)</title><rect x="14.7950%" y="581" width="0.1047%" height="15" fill="rgb(241,83,37)"/><text x="15.0450%" y="591.50"></text></g><g><title>codegen_fn_attrs (132,951 samples, 0.13%)</title><rect x="14.9974%" y="565" width="0.1278%" height="15" fill="rgb(233,36,39)"/><text x="15.2474%" y="575.50"></text></g><g><title>should_inherit_track_caller (239,842 samples, 0.23%)</title><rect x="14.8998%" y="581" width="0.2305%" height="15" fill="rgb(226,3,54)"/><text x="15.1498%" y="591.50"></text></g><g><title>codegen_fn_attrs (485,996 samples, 0.47%)</title><rect x="14.6920%" y="597" width="0.4671%" height="15" fill="rgb(245,192,40)"/><text x="14.9420%" y="607.50"></text></g><g><title>check_mod_attrs (801,408 samples, 0.77%)</title><rect x="14.3892%" y="613" width="0.7702%" height="15" fill="rgb(238,167,29)"/><text x="14.6392%" y="623.50"></text></g><g><title>check_mod_const_bodies (109,742 samples, 0.11%)</title><rect x="15.1594%" y="613" width="0.1055%" height="15" fill="rgb(232,182,51)"/><text x="15.4094%" y="623.50"></text></g><g><title>lookup_deprecation_entry (118,262 samples, 0.11%)</title><rect x="15.4929%" y="597" width="0.1137%" height="15" fill="rgb(231,60,39)"/><text x="15.7429%" y="607.50"></text></g><g><title>check_mod_unstable_api_usage (318,253 samples, 0.31%)</title><rect x="15.3452%" y="613" width="0.3059%" height="15" fill="rgb(208,69,12)"/><text x="15.5952%" y="623.50"></text></g><g><title>misc_checking_1 (1,423,726 samples, 1.37%)</title><rect x="14.3569%" y="629" width="1.3683%" height="15" fill="rgb(235,93,37)"/><text x="14.6069%" y="639.50"></text></g><g><title>liveness_and_intrinsic_checking (262,983 samples, 0.25%)</title><rect x="15.7268%" y="613" width="0.2527%" height="15" fill="rgb(213,116,39)"/><text x="15.9768%" y="623.50"></text></g><g><title>check_mod_liveness (204,792 samples, 0.20%)</title><rect x="15.7827%" y="597" width="0.1968%" height="15" fill="rgb(222,207,29)"/><text x="16.0327%" y="607.50"></text></g><g><title>misc_checking_2 (461,905 samples, 0.44%)</title><rect x="15.7252%" y="629" width="0.4439%" height="15" fill="rgb(206,96,30)"/><text x="15.9752%" y="639.50"></text></g><g><title>match_checking (197,302 samples, 0.19%)</title><rect x="15.9795%" y="613" width="0.1896%" height="15" fill="rgb(218,138,4)"/><text x="16.2295%" y="623.50"></text></g><g><title>check_match (184,831 samples, 0.18%)</title><rect x="15.9915%" y="597" width="0.1776%" height="15" fill="rgb(250,191,14)"/><text x="16.2415%" y="607.50"></text></g><g><title>death_checking (181,922 samples, 0.17%)</title><rect x="16.2631%" y="613" width="0.1748%" height="15" fill="rgb(239,60,40)"/><text x="16.5131%" y="623.50"></text></g><g><title>eval_to_const_value_raw (105,921 samples, 0.10%)</title><rect x="17.0063%" y="581" width="0.1018%" height="15" fill="rgb(206,27,48)"/><text x="17.2563%" y="591.50"></text></g><g><title>eval_to_const_value_raw (104,181 samples, 0.10%)</title><rect x="17.0080%" y="565" width="0.1001%" height="15" fill="rgb(225,35,8)"/><text x="17.2580%" y="575.50"></text></g><g><title>param_env (157,403 samples, 0.15%)</title><rect x="17.1081%" y="581" width="0.1513%" height="15" fill="rgb(250,213,24)"/><text x="17.3581%" y="591.50"></text></g><g><title>crate_lints (1,976,752 samples, 1.90%)</title><rect x="16.4396%" y="597" width="1.8998%" height="15" fill="rgb(247,123,22)"/><text x="16.6896%" y="607.50">c..</text></g><g><title>type_of (1,120,013 samples, 1.08%)</title><rect x="17.2630%" y="581" width="1.0764%" height="15" fill="rgb(231,138,38)"/><text x="17.5130%" y="591.50"></text></g><g><title>metadata_decode_entry_type_of (882,317 samples, 0.85%)</title><rect x="17.4914%" y="565" width="0.8480%" height="15" fill="rgb(231,145,46)"/><text x="17.7414%" y="575.50"></text></g><g><title>lint_checking (2,273,406 samples, 2.18%)</title><rect x="16.4380%" y="613" width="2.1849%" height="15" fill="rgb(251,118,11)"/><text x="16.6880%" y="623.50">l..</text></g><g><title>module_lints (294,974 samples, 0.28%)</title><rect x="18.3394%" y="597" width="0.2835%" height="15" fill="rgb(217,147,25)"/><text x="18.5894%" y="607.50"></text></g><g><title>lint_mod (292,204 samples, 0.28%)</title><rect x="18.3421%" y="581" width="0.2808%" height="15" fill="rgb(247,81,37)"/><text x="18.5921%" y="591.50"></text></g><g><title>privacy_access_levels (107,001 samples, 0.10%)</title><rect x="18.6229%" y="613" width="0.1028%" height="15" fill="rgb(209,12,38)"/><text x="18.8729%" y="623.50"></text></g><g><title>privacy_checking_modules (357,983 samples, 0.34%)</title><rect x="18.7257%" y="613" width="0.3441%" height="15" fill="rgb(227,1,9)"/><text x="18.9757%" y="623.50"></text></g><g><title>check_mod_privacy (355,673 samples, 0.34%)</title><rect x="18.7280%" y="597" width="0.3418%" height="15" fill="rgb(248,47,43)"/><text x="18.9780%" y="607.50"></text></g><g><title>misc_checking_3 (3,033,503 samples, 2.92%)</title><rect x="16.1692%" y="629" width="2.9155%" height="15" fill="rgb(221,10,30)"/><text x="16.4192%" y="639.50">mi..</text></g><g><title>impl_parent (2,341,723 samples, 2.25%)</title><rect x="22.7836%" y="565" width="2.2506%" height="15" fill="rgb(210,229,1)"/><text x="23.0336%" y="575.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,416,113 samples, 1.36%)</title><rect x="23.6732%" y="549" width="1.3610%" height="15" fill="rgb(222,148,37)"/><text x="23.9232%" y="559.50"></text></g><g><title>impl_trait_ref (7,731,589 samples, 7.43%)</title><rect x="25.0342%" y="565" width="7.4307%" height="15" fill="rgb(234,67,33)"/><text x="25.2842%" y="575.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,606,825 samples, 6.35%)</title><rect x="26.1152%" y="549" width="6.3497%" height="15" fill="rgb(247,98,35)"/><text x="26.3652%" y="559.50">metadata..</text></g><g><title>coherent_trait (14,913,075 samples, 14.33%)</title><rect x="19.1501%" y="597" width="14.3328%" height="15" fill="rgb(247,138,52)"/><text x="19.4001%" y="607.50">coherent_trait</text></g><g><title>specialization_graph_of (14,887,265 samples, 14.31%)</title><rect x="19.1749%" y="581" width="14.3079%" height="15" fill="rgb(213,79,30)"/><text x="19.4249%" y="591.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,057,293 samples, 1.02%)</title><rect x="32.4667%" y="565" width="1.0161%" height="15" fill="rgb(246,177,23)"/><text x="32.7167%" y="575.50"></text></g><g><title>implementations_of_trait (328,462 samples, 0.32%)</title><rect x="33.1671%" y="549" width="0.3157%" height="15" fill="rgb(230,62,27)"/><text x="33.4171%" y="559.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (187,630 samples, 0.18%)</title><rect x="33.3025%" y="533" width="0.1803%" height="15" fill="rgb(216,154,8)"/><text x="33.5525%" y="543.50"></text></g><g><title>coherence_checking (14,989,956 samples, 14.41%)</title><rect x="19.1248%" y="613" width="14.4066%" height="15" fill="rgb(244,35,45)"/><text x="19.3748%" y="623.50">coherence_checking</text></g><g><title>associated_item (468,113 samples, 0.45%)</title><rect x="51.3256%" y="549" width="0.4499%" height="15" fill="rgb(251,115,12)"/><text x="51.5756%" y="559.50"></text></g><g><title>metadata_decode_entry_associated_item (376,952 samples, 0.36%)</title><rect x="51.4132%" y="533" width="0.3623%" height="15" fill="rgb(240,54,50)"/><text x="51.6632%" y="543.50"></text></g><g><title>associated_items (627,747 samples, 0.60%)</title><rect x="51.1979%" y="565" width="0.6033%" height="15" fill="rgb(233,84,52)"/><text x="51.4479%" y="575.50"></text></g><g><title>dropck_outlives (169,351 samples, 0.16%)</title><rect x="51.8263%" y="565" width="0.1628%" height="15" fill="rgb(207,117,47)"/><text x="52.0763%" y="575.50"></text></g><g><title>adt_dtorck_constraint (108,790 samples, 0.10%)</title><rect x="51.8845%" y="549" width="0.1046%" height="15" fill="rgb(249,43,39)"/><text x="52.1345%" y="559.50"></text></g><g><title>mir_borrowck (140,171 samples, 0.13%)</title><rect x="52.2878%" y="485" width="0.1347%" height="15" fill="rgb(209,38,44)"/><text x="52.5378%" y="495.50"></text></g><g><title>mir_for_ctfe (215,502 samples, 0.21%)</title><rect x="52.2157%" y="517" width="0.2071%" height="15" fill="rgb(236,212,23)"/><text x="52.4657%" y="527.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (185,242 samples, 0.18%)</title><rect x="52.2448%" y="501" width="0.1780%" height="15" fill="rgb(242,79,21)"/><text x="52.4948%" y="511.50"></text></g><g><title>eval_to_const_value_raw (456,795 samples, 0.44%)</title><rect x="51.9890%" y="565" width="0.4390%" height="15" fill="rgb(211,96,35)"/><text x="52.2390%" y="575.50"></text></g><g><title>eval_to_const_value_raw (453,275 samples, 0.44%)</title><rect x="51.9924%" y="549" width="0.4356%" height="15" fill="rgb(253,215,40)"/><text x="52.2424%" y="559.50"></text></g><g><title>eval_to_allocation_raw (447,165 samples, 0.43%)</title><rect x="51.9983%" y="533" width="0.4298%" height="15" fill="rgb(211,81,21)"/><text x="52.2483%" y="543.50"></text></g><g><title>predicates_of (142,921 samples, 0.14%)</title><rect x="53.0994%" y="549" width="0.1374%" height="15" fill="rgb(208,190,38)"/><text x="53.3494%" y="559.50"></text></g><g><title>specializes (179,812 samples, 0.17%)</title><rect x="53.2368%" y="549" width="0.1728%" height="15" fill="rgb(235,213,38)"/><text x="53.4868%" y="559.50"></text></g><g><title>param_env (157,762 samples, 0.15%)</title><rect x="53.2580%" y="533" width="0.1516%" height="15" fill="rgb(237,122,38)"/><text x="53.5080%" y="543.50"></text></g><g><title>def_span (129,851 samples, 0.12%)</title><rect x="53.2848%" y="517" width="0.1248%" height="15" fill="rgb(244,218,35)"/><text x="53.5348%" y="527.50"></text></g><g><title>metadata_decode_entry_def_span (127,861 samples, 0.12%)</title><rect x="53.2867%" y="501" width="0.1229%" height="15" fill="rgb(240,68,47)"/><text x="53.5367%" y="511.50"></text></g><g><title>trait_impls_of (434,776 samples, 0.42%)</title><rect x="53.4196%" y="549" width="0.4179%" height="15" fill="rgb(210,16,53)"/><text x="53.6696%" y="559.50"></text></g><g><title>implementations_of_trait (180,632 samples, 0.17%)</title><rect x="53.6639%" y="533" width="0.1736%" height="15" fill="rgb(235,124,12)"/><text x="53.9139%" y="543.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (119,372 samples, 0.11%)</title><rect x="53.7228%" y="517" width="0.1147%" height="15" fill="rgb(224,169,11)"/><text x="53.9728%" y="527.50"></text></g><g><title>evaluate_obligation (1,475,567 samples, 1.42%)</title><rect x="52.4281%" y="565" width="1.4181%" height="15" fill="rgb(250,166,2)"/><text x="52.6781%" y="575.50"></text></g><g><title>generics_of (163,591 samples, 0.16%)</title><rect x="53.9240%" y="565" width="0.1572%" height="15" fill="rgb(242,216,29)"/><text x="54.1740%" y="575.50"></text></g><g><title>metadata_decode_entry_generics_of (139,321 samples, 0.13%)</title><rect x="53.9473%" y="549" width="0.1339%" height="15" fill="rgb(230,116,27)"/><text x="54.1973%" y="559.50"></text></g><g><title>impl_item_implementor_ids (111,210 samples, 0.11%)</title><rect x="54.0812%" y="565" width="0.1069%" height="15" fill="rgb(228,99,48)"/><text x="54.3312%" y="575.50"></text></g><g><title>impl_trait_ref (221,782 samples, 0.21%)</title><rect x="54.1963%" y="565" width="0.2132%" height="15" fill="rgb(253,11,6)"/><text x="54.4463%" y="575.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (200,121 samples, 0.19%)</title><rect x="54.2172%" y="549" width="0.1923%" height="15" fill="rgb(247,143,39)"/><text x="54.4672%" y="559.50"></text></g><g><title>method_autoderef_steps (144,142 samples, 0.14%)</title><rect x="54.5383%" y="565" width="0.1385%" height="15" fill="rgb(236,97,10)"/><text x="54.7883%" y="575.50"></text></g><g><title>predicates_of (217,250 samples, 0.21%)</title><rect x="54.7815%" y="565" width="0.2088%" height="15" fill="rgb(233,208,19)"/><text x="55.0315%" y="575.50"></text></g><g><title>predicates_defined_on (147,940 samples, 0.14%)</title><rect x="54.8481%" y="549" width="0.1422%" height="15" fill="rgb(216,164,2)"/><text x="55.0981%" y="559.50"></text></g><g><title>evaluate_obligation (141,342 samples, 0.14%)</title><rect x="57.0527%" y="549" width="0.1358%" height="15" fill="rgb(220,129,5)"/><text x="57.3027%" y="559.50"></text></g><g><title>lint_levels (121,631 samples, 0.12%)</title><rect x="57.3679%" y="549" width="0.1169%" height="15" fill="rgb(242,17,10)"/><text x="57.6179%" y="559.50"></text></g><g><title>method_autoderef_steps (115,100 samples, 0.11%)</title><rect x="57.4954%" y="549" width="0.1106%" height="15" fill="rgb(242,107,0)"/><text x="57.7454%" y="559.50"></text></g><g><title>typeck (2,772,421 samples, 2.66%)</title><rect x="55.0668%" y="565" width="2.6645%" height="15" fill="rgb(251,28,31)"/><text x="55.3168%" y="575.50">ty..</text></g><g><title>item_bodies_checking (25,173,209 samples, 24.19%)</title><rect x="33.5649%" y="613" width="24.1936%" height="15" fill="rgb(233,223,10)"/><text x="33.8149%" y="623.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,170,479 samples, 24.19%)</title><rect x="33.5675%" y="597" width="24.1910%" height="15" fill="rgb(215,21,27)"/><text x="33.8175%" y="607.50">typeck_item_bodies</text></g><g><title>typeck (25,142,538 samples, 24.16%)</title><rect x="33.5944%" y="581" width="24.1641%" height="15" fill="rgb(232,23,21)"/><text x="33.8444%" y="591.50">typeck</text></g><g><title>impl_trait_ref (171,612 samples, 0.16%)</title><rect x="58.2388%" y="533" width="0.1649%" height="15" fill="rgb(244,5,23)"/><text x="58.4888%" y="543.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (152,242 samples, 0.15%)</title><rect x="58.2574%" y="517" width="0.1463%" height="15" fill="rgb(226,81,46)"/><text x="58.5074%" y="527.50"></text></g><g><title>adt_destructor (353,034 samples, 0.34%)</title><rect x="58.0944%" y="581" width="0.3393%" height="15" fill="rgb(247,70,30)"/><text x="58.3444%" y="591.50"></text></g><g><title>coherent_trait (350,033 samples, 0.34%)</title><rect x="58.0973%" y="565" width="0.3364%" height="15" fill="rgb(212,68,19)"/><text x="58.3473%" y="575.50"></text></g><g><title>specialization_graph_of (348,163 samples, 0.33%)</title><rect x="58.0991%" y="549" width="0.3346%" height="15" fill="rgb(240,187,13)"/><text x="58.3491%" y="559.50"></text></g><g><title>evaluate_obligation (168,601 samples, 0.16%)</title><rect x="58.4434%" y="581" width="0.1620%" height="15" fill="rgb(223,113,26)"/><text x="58.6934%" y="591.50"></text></g><g><title>item_types_checking (1,017,592 samples, 0.98%)</title><rect x="57.7585%" y="613" width="0.9780%" height="15" fill="rgb(206,192,2)"/><text x="58.0085%" y="623.50"></text></g><g><title>check_mod_item_types (1,014,422 samples, 0.97%)</title><rect x="57.7615%" y="597" width="0.9749%" height="15" fill="rgb(241,108,4)"/><text x="58.0115%" y="607.50"></text></g><g><title>fn_sig (244,214 samples, 0.23%)</title><rect x="58.9751%" y="581" width="0.2347%" height="15" fill="rgb(247,173,49)"/><text x="59.2251%" y="591.50"></text></g><g><title>named_region_map (283,112 samples, 0.27%)</title><rect x="59.2923%" y="565" width="0.2721%" height="15" fill="rgb(224,114,35)"/><text x="59.5423%" y="575.50"></text></g><g><title>resolve_lifetimes (251,332 samples, 0.24%)</title><rect x="59.3228%" y="549" width="0.2416%" height="15" fill="rgb(245,159,27)"/><text x="59.5728%" y="559.50"></text></g><g><title>generics_of (390,942 samples, 0.38%)</title><rect x="59.2098%" y="581" width="0.3757%" height="15" fill="rgb(245,172,44)"/><text x="59.4598%" y="591.50"></text></g><g><title>predicates_of (342,154 samples, 0.33%)</title><rect x="59.6529%" y="581" width="0.3288%" height="15" fill="rgb(236,23,11)"/><text x="59.9029%" y="591.50"></text></g><g><title>predicates_defined_on (308,982 samples, 0.30%)</title><rect x="59.6848%" y="565" width="0.2970%" height="15" fill="rgb(205,117,38)"/><text x="59.9348%" y="575.50"></text></g><g><title>inferred_outlives_of (162,082 samples, 0.16%)</title><rect x="59.8259%" y="549" width="0.1558%" height="15" fill="rgb(237,72,25)"/><text x="60.0759%" y="559.50"></text></g><g><title>inferred_outlives_crate (141,372 samples, 0.14%)</title><rect x="59.8459%" y="533" width="0.1359%" height="15" fill="rgb(244,70,9)"/><text x="60.0959%" y="543.50"></text></g><g><title>type_collecting (1,486,177 samples, 1.43%)</title><rect x="58.7388%" y="613" width="1.4283%" height="15" fill="rgb(217,125,39)"/><text x="58.9888%" y="623.50"></text></g><g><title>collect_mod_item_types (1,471,177 samples, 1.41%)</title><rect x="58.7532%" y="597" width="1.4139%" height="15" fill="rgb(235,36,10)"/><text x="59.0032%" y="607.50"></text></g><g><title>type_of (192,892 samples, 0.19%)</title><rect x="59.9817%" y="581" width="0.1854%" height="15" fill="rgb(251,123,47)"/><text x="60.2317%" y="591.50"></text></g><g><title>adt_sized_constraint (127,082 samples, 0.12%)</title><rect x="61.0786%" y="565" width="0.1221%" height="15" fill="rgb(221,13,13)"/><text x="61.3286%" y="575.50"></text></g><g><title>evaluate_obligation (586,976 samples, 0.56%)</title><rect x="60.7602%" y="581" width="0.5641%" height="15" fill="rgb(238,131,9)"/><text x="61.0102%" y="591.50"></text></g><g><title>implied_outlives_bounds (219,172 samples, 0.21%)</title><rect x="61.3348%" y="581" width="0.2106%" height="15" fill="rgb(211,50,8)"/><text x="61.5848%" y="591.50"></text></g><g><title>check_impl_item_well_formed (1,518,465 samples, 1.46%)</title><rect x="60.2356%" y="597" width="1.4594%" height="15" fill="rgb(245,182,24)"/><text x="60.4856%" y="607.50"></text></g><g><title>mir_const_qualif (141,492 samples, 0.14%)</title><rect x="62.7435%" y="533" width="0.1360%" height="15" fill="rgb(242,14,37)"/><text x="62.9935%" y="543.50"></text></g><g><title>mir_const (121,951 samples, 0.12%)</title><rect x="62.7623%" y="517" width="0.1172%" height="15" fill="rgb(246,228,12)"/><text x="63.0123%" y="527.50"></text></g><g><title>mir_borrowck (348,744 samples, 0.34%)</title><rect x="63.0146%" y="501" width="0.3352%" height="15" fill="rgb(213,55,15)"/><text x="63.2646%" y="511.50"></text></g><g><title>mir_for_ctfe (489,756 samples, 0.47%)</title><rect x="62.8795%" y="533" width="0.4707%" height="15" fill="rgb(209,9,3)"/><text x="63.1295%" y="543.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (451,525 samples, 0.43%)</title><rect x="62.9162%" y="517" width="0.4340%" height="15" fill="rgb(230,59,30)"/><text x="63.1662%" y="527.50"></text></g><g><title>mir_for_ctfe (110,982 samples, 0.11%)</title><rect x="63.3918%" y="469" width="0.1067%" height="15" fill="rgb(209,121,21)"/><text x="63.6418%" y="479.50"></text></g><g><title>eval_to_const_value_raw (122,062 samples, 0.12%)</title><rect x="63.6520%" y="69" width="0.1173%" height="15" fill="rgb(220,109,13)"/><text x="63.9020%" y="79.50"></text></g><g><title>eval_to_const_value_raw (121,552 samples, 0.12%)</title><rect x="63.6525%" y="53" width="0.1168%" height="15" fill="rgb(232,18,1)"/><text x="63.9025%" y="63.50"></text></g><g><title>eval_to_allocation_raw (120,442 samples, 0.12%)</title><rect x="63.6535%" y="37" width="0.1158%" height="15" fill="rgb(215,41,42)"/><text x="63.9035%" y="47.50"></text></g><g><title>eval_to_const_value_raw (155,882 samples, 0.15%)</title><rect x="63.6384%" y="133" width="0.1498%" height="15" fill="rgb(224,123,36)"/><text x="63.8884%" y="143.50"></text></g><g><title>eval_to_const_value_raw (155,452 samples, 0.15%)</title><rect x="63.6388%" y="117" width="0.1494%" height="15" fill="rgb(240,125,3)"/><text x="63.8888%" y="127.50"></text></g><g><title>eval_to_allocation_raw (154,342 samples, 0.15%)</title><rect x="63.6399%" y="101" width="0.1483%" height="15" fill="rgb(205,98,50)"/><text x="63.8899%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (144,542 samples, 0.14%)</title><rect x="63.6493%" y="85" width="0.1389%" height="15" fill="rgb(205,185,37)"/><text x="63.8993%" y="95.50"></text></g><g><title>eval_to_const_value_raw (187,302 samples, 0.18%)</title><rect x="63.6289%" y="197" width="0.1800%" height="15" fill="rgb(238,207,15)"/><text x="63.8789%" y="207.50"></text></g><g><title>eval_to_const_value_raw (186,832 samples, 0.18%)</title><rect x="63.6293%" y="181" width="0.1796%" height="15" fill="rgb(213,199,42)"/><text x="63.8793%" y="191.50"></text></g><g><title>eval_to_allocation_raw (186,072 samples, 0.18%)</title><rect x="63.6300%" y="165" width="0.1788%" height="15" fill="rgb(235,201,11)"/><text x="63.8800%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (180,132 samples, 0.17%)</title><rect x="63.6358%" y="149" width="0.1731%" height="15" fill="rgb(207,46,11)"/><text x="63.8858%" y="159.50"></text></g><g><title>eval_to_const_value_raw (214,342 samples, 0.21%)</title><rect x="63.6193%" y="261" width="0.2060%" height="15" fill="rgb(241,35,35)"/><text x="63.8693%" y="271.50"></text></g><g><title>eval_to_const_value_raw (213,872 samples, 0.21%)</title><rect x="63.6198%" y="245" width="0.2055%" height="15" fill="rgb(243,32,47)"/><text x="63.8698%" y="255.50"></text></g><g><title>eval_to_allocation_raw (213,132 samples, 0.20%)</title><rect x="63.6205%" y="229" width="0.2048%" height="15" fill="rgb(247,202,23)"/><text x="63.8705%" y="239.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (206,892 samples, 0.20%)</title><rect x="63.6265%" y="213" width="0.1988%" height="15" fill="rgb(219,102,11)"/><text x="63.8765%" y="223.50"></text></g><g><title>eval_to_const_value_raw (249,673 samples, 0.24%)</title><rect x="63.6062%" y="325" width="0.2400%" height="15" fill="rgb(243,110,44)"/><text x="63.8562%" y="335.50"></text></g><g><title>eval_to_const_value_raw (245,483 samples, 0.24%)</title><rect x="63.6102%" y="309" width="0.2359%" height="15" fill="rgb(222,74,54)"/><text x="63.8602%" y="319.50"></text></g><g><title>eval_to_allocation_raw (244,353 samples, 0.23%)</title><rect x="63.6113%" y="293" width="0.2348%" height="15" fill="rgb(216,99,12)"/><text x="63.8613%" y="303.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (237,903 samples, 0.23%)</title><rect x="63.6175%" y="277" width="0.2286%" height="15" fill="rgb(226,22,26)"/><text x="63.8675%" y="287.50"></text></g><g><title>eval_to_const_value_raw (334,494 samples, 0.32%)</title><rect x="63.5409%" y="389" width="0.3215%" height="15" fill="rgb(217,163,10)"/><text x="63.7909%" y="399.50"></text></g><g><title>eval_to_const_value_raw (332,364 samples, 0.32%)</title><rect x="63.5429%" y="373" width="0.3194%" height="15" fill="rgb(213,25,53)"/><text x="63.7929%" y="383.50"></text></g><g><title>eval_to_allocation_raw (327,494 samples, 0.31%)</title><rect x="63.5476%" y="357" width="0.3147%" height="15" fill="rgb(252,105,26)"/><text x="63.7976%" y="367.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (268,533 samples, 0.26%)</title><rect x="63.6043%" y="341" width="0.2581%" height="15" fill="rgb(220,39,43)"/><text x="63.8543%" y="351.50"></text></g><g><title>eval_to_const_value_raw (425,835 samples, 0.41%)</title><rect x="63.5023%" y="453" width="0.4093%" height="15" fill="rgb(229,68,48)"/><text x="63.7523%" y="463.50"></text></g><g><title>eval_to_const_value_raw (425,225 samples, 0.41%)</title><rect x="63.5028%" y="437" width="0.4087%" height="15" fill="rgb(252,8,32)"/><text x="63.7528%" y="447.50"></text></g><g><title>eval_to_allocation_raw (424,395 samples, 0.41%)</title><rect x="63.5036%" y="421" width="0.4079%" height="15" fill="rgb(223,20,43)"/><text x="63.7536%" y="431.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (393,004 samples, 0.38%)</title><rect x="63.5338%" y="405" width="0.3777%" height="15" fill="rgb(229,81,49)"/><text x="63.7838%" y="415.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (582,816 samples, 0.56%)</title><rect x="63.4984%" y="469" width="0.5601%" height="15" fill="rgb(236,28,36)"/><text x="63.7484%" y="479.50"></text></g><g><title>resolve_instance (153,011 samples, 0.15%)</title><rect x="63.9115%" y="453" width="0.1471%" height="15" fill="rgb(249,185,26)"/><text x="64.1615%" y="463.50"></text></g><g><title>evaluate_obligation (368,794 samples, 0.35%)</title><rect x="64.2035%" y="453" width="0.3544%" height="15" fill="rgb(249,174,33)"/><text x="64.4535%" y="463.50"></text></g><g><title>trait_impls_of (130,801 samples, 0.13%)</title><rect x="64.4322%" y="437" width="0.1257%" height="15" fill="rgb(233,201,37)"/><text x="64.6822%" y="447.50"></text></g><g><title>eval_to_const_value_raw (1,277,814 samples, 1.23%)</title><rect x="63.3562%" y="517" width="1.2281%" height="15" fill="rgb(221,78,26)"/><text x="63.6062%" y="527.50"></text></g><g><title>eval_to_const_value_raw (1,276,974 samples, 1.23%)</title><rect x="63.3570%" y="501" width="1.2273%" height="15" fill="rgb(250,127,30)"/><text x="63.6070%" y="511.50"></text></g><g><title>eval_to_allocation_raw (1,276,044 samples, 1.23%)</title><rect x="63.3579%" y="485" width="1.2264%" height="15" fill="rgb(230,49,44)"/><text x="63.6079%" y="495.50"></text></g><g><title>typeck (547,016 samples, 0.53%)</title><rect x="64.0586%" y="469" width="0.5257%" height="15" fill="rgb(229,67,23)"/><text x="64.3086%" y="479.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,287,604 samples, 1.24%)</title><rect x="63.3504%" y="533" width="1.2375%" height="15" fill="rgb(249,83,47)"/><text x="63.6004%" y="543.50"></text></g><g><title>eval_to_const_value_raw (2,127,873 samples, 2.05%)</title><rect x="62.6424%" y="581" width="2.0451%" height="15" fill="rgb(215,43,3)"/><text x="62.8924%" y="591.50">e..</text></g><g><title>eval_to_const_value_raw (2,113,743 samples, 2.03%)</title><rect x="62.6560%" y="565" width="2.0315%" height="15" fill="rgb(238,154,13)"/><text x="62.9060%" y="575.50">e..</text></g><g><title>eval_to_allocation_raw (2,111,683 samples, 2.03%)</title><rect x="62.6579%" y="549" width="2.0295%" height="15" fill="rgb(219,56,2)"/><text x="62.9079%" y="559.50">e..</text></g><g><title>evaluate_obligation (665,778 samples, 0.64%)</title><rect x="64.6874%" y="581" width="0.6399%" height="15" fill="rgb(233,0,4)"/><text x="64.9374%" y="591.50"></text></g><g><title>param_env (173,185 samples, 0.17%)</title><rect x="65.4793%" y="581" width="0.1664%" height="15" fill="rgb(235,30,7)"/><text x="65.7293%" y="591.50"></text></g><g><title>predicates_of (114,444 samples, 0.11%)</title><rect x="65.6457%" y="581" width="0.1100%" height="15" fill="rgb(250,79,13)"/><text x="65.8957%" y="591.50"></text></g><g><title>region_scope_tree (156,861 samples, 0.15%)</title><rect x="65.7557%" y="581" width="0.1508%" height="15" fill="rgb(211,146,34)"/><text x="66.0057%" y="591.50"></text></g><g><title>analysis (67,823,583 samples, 65.18%)</title><rect x="0.8200%" y="645" width="65.1843%" height="15" fill="rgb(228,22,38)"/><text x="1.0700%" y="655.50">analysis</text></g><g><title>type_check_crate (48,819,402 samples, 46.92%)</title><rect x="19.0846%" y="629" width="46.9197%" height="15" fill="rgb(235,168,5)"/><text x="19.3346%" y="639.50">type_check_crate</text></g><g><title>wf_checking (6,071,267 samples, 5.84%)</title><rect x="60.1693%" y="613" width="5.8350%" height="15" fill="rgb(221,155,16)"/><text x="60.4193%" y="623.50">wf_chec..</text></g><g><title>check_item_well_formed (4,483,772 samples, 4.31%)</title><rect x="61.6950%" y="597" width="4.3093%" height="15" fill="rgb(215,215,53)"/><text x="61.9450%" y="607.50">check..</text></g><g><title>codegen_crate (466,335 samples, 0.45%)</title><rect x="66.0158%" y="645" width="0.4482%" height="15" fill="rgb(223,4,10)"/><text x="66.2658%" y="655.50"></text></g><g><title>AST_validation (180,482 samples, 0.17%)</title><rect x="66.6883%" y="629" width="0.1735%" height="15" fill="rgb(234,103,6)"/><text x="66.9383%" y="639.50"></text></g><g><title>metadata_register_crate (2,996,294 samples, 2.88%)</title><rect x="85.0618%" y="597" width="2.8797%" height="15" fill="rgb(227,97,0)"/><text x="85.3118%" y="607.50">me..</text></g><g><title>metadata_register_crate (2,026,903 samples, 1.95%)</title><rect x="85.9934%" y="581" width="1.9480%" height="15" fill="rgb(234,150,53)"/><text x="86.2434%" y="591.50">m..</text></g><g><title>metadata_register_crate (801,979 samples, 0.77%)</title><rect x="87.1707%" y="565" width="0.7708%" height="15" fill="rgb(228,201,54)"/><text x="87.4207%" y="575.50"></text></g><g><title>macro_expand_crate (22,006,644 samples, 21.15%)</title><rect x="67.0180%" y="629" width="21.1503%" height="15" fill="rgb(222,22,37)"/><text x="67.2680%" y="639.50">macro_expand_crate</text></g><g><title>expand_crate (21,985,454 samples, 21.13%)</title><rect x="67.0383%" y="613" width="21.1299%" height="15" fill="rgb(237,53,32)"/><text x="67.2883%" y="623.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (235,993 samples, 0.23%)</title><rect x="87.9415%" y="597" width="0.2268%" height="15" fill="rgb(233,25,53)"/><text x="88.1915%" y="607.50"></text></g><g><title>pre_AST_expansion_lint_checks (155,002 samples, 0.15%)</title><rect x="88.1741%" y="629" width="0.1490%" height="15" fill="rgb(210,40,34)"/><text x="88.4241%" y="639.50"></text></g><g><title>finalize_imports (121,501 samples, 0.12%)</title><rect x="88.3326%" y="613" width="0.1168%" height="15" fill="rgb(241,220,44)"/><text x="88.5826%" y="623.50"></text></g><g><title>late_resolve_crate (1,681,529 samples, 1.62%)</title><rect x="88.5013%" y="613" width="1.6161%" height="15" fill="rgb(235,28,35)"/><text x="88.7513%" y="623.50"></text></g><g><title>configure_and_expand (24,761,404 samples, 23.80%)</title><rect x="66.4640%" y="645" width="23.7978%" height="15" fill="rgb(210,56,17)"/><text x="66.7140%" y="655.50">configure_and_expand</text></g><g><title>resolve_crate (2,017,272 samples, 1.94%)</title><rect x="88.3231%" y="629" width="1.9388%" height="15" fill="rgb(224,130,29)"/><text x="88.5731%" y="639.50">r..</text></g><g><title>drop_ast (222,243 samples, 0.21%)</title><rect x="90.2618%" y="645" width="0.2136%" height="15" fill="rgb(235,212,8)"/><text x="90.5118%" y="655.50"></text></g><g><title>early_lint_checks (566,576 samples, 0.54%)</title><rect x="90.4911%" y="645" width="0.5445%" height="15" fill="rgb(223,33,50)"/><text x="90.7411%" y="655.50"></text></g><g><title>free_global_ctxt (3,116,955 samples, 3.00%)</title><rect x="91.0356%" y="645" width="2.9957%" height="15" fill="rgb(219,149,13)"/><text x="91.2856%" y="655.50">fre..</text></g><g><title>generate_crate_metadata (623,496 samples, 0.60%)</title><rect x="94.0312%" y="645" width="0.5992%" height="15" fill="rgb(250,156,29)"/><text x="94.2812%" y="655.50"></text></g><g><title>hir_lowering (2,812,472 samples, 2.70%)</title><rect x="94.6305%" y="645" width="2.7030%" height="15" fill="rgb(216,193,19)"/><text x="94.8805%" y="655.50">hi..</text></g><g><title>parse_crate (1,378,056 samples, 1.32%)</title><rect x="97.3749%" y="645" width="1.3244%" height="15" fill="rgb(216,135,14)"/><text x="97.6249%" y="655.50"></text></g><g><title>prepare_outputs (329,714 samples, 0.32%)</title><rect x="98.7086%" y="645" width="0.3169%" height="15" fill="rgb(241,47,5)"/><text x="98.9586%" y="655.50"></text></g><g><title>self_profile_alloc_query_strings (531,056 samples, 0.51%)</title><rect x="99.0255%" y="645" width="0.5104%" height="15" fill="rgb(233,42,35)"/><text x="99.2755%" y="655.50"></text></g><g><title>setup_global_ctxt (127,132 samples, 0.12%)</title><rect x="99.5458%" y="645" width="0.1222%" height="15" fill="rgb(231,13,6)"/><text x="99.7958%" y="655.50"></text></g><g><title>all (104,048,936 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(207,181,40)"/><text x="0.2500%" y="687.50"></text></g><g><title>rustc (104,048,936 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(254,173,49)"/><text x="0.2500%" y="671.50">rustc</text></g><g><title>write_crate_metadata (345,454 samples, 0.33%)</title><rect x="99.6680%" y="645" width="0.3320%" height="15" fill="rgb(221,1,38)"/><text x="99.9180%" y="655.50"></text></g></svg></svg>